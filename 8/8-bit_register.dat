16|54|Public
5000|$|Command register: <b>8-bit</b> <b>register</b> which initializes {{the channel}} {{to be used}} for data {{transfer}} ...|$|E
5000|$|Request register: <b>8-bit</b> <b>register</b> used to {{indicate}} which channel is requesting for data transfer ...|$|E
5000|$|Mask register: <b>8-bit</b> <b>register</b> used to mask a {{particular}} channel from requesting for DMA service ...|$|E
50|$|The 80251 8/16/32-bit {{microcontroller}} with 16 MB (24-bit) address-space and 6 {{times faster}} instruction cycle {{was introduced by}} Intel in 1996. It can perform as an 8-bit 8051, has 24-bit linear addressing, an 8-bit ALU, 8-bit instructions, 16-bit instructions, a limited set of 32-bit instructions, 16 <b>8-bit</b> <b>registers,</b> 16 16-bit registers (8 16-bit registers which do not share space with any <b>8-bit</b> <b>registers,</b> and 8 16-bit registers which contain 2 <b>8-bit</b> <b>registers</b> per 16-bit register), and 10 32-bit registers (2 dedicated 32-bit registers, and 8 32-bit registers which contain 2 16-bit registers per 32-bit register).|$|R
5000|$|As on the 8080, <b>8-bit</b> <b>registers</b> are {{typically}} paired to provide 16-bit versions. The 8080 compatible registers are: ...|$|R
50|$|There are 32 {{general-purpose}} <b>8-bit</b> <b>registers,</b> R0-R31. All arithmetic {{and logic}} operations operate on those registers; only load and store instructions access RAM.|$|R
50|$|Each channel has an 8-bit {{frequency}} divider and an <b>8-bit</b> <b>register</b> to select noise and volume.|$|E
5000|$|Status register: <b>8-bit</b> <b>register</b> used to {{indicate}} which channel is currently under DMA service {{and some other}} parameters ...|$|E
5000|$|Mode register: <b>8-bit</b> <b>register</b> which stores {{the channel}} to be used, the {{operating}} mode, i.e. the transfer mode, and other transfer parameters ...|$|E
5000|$|... 8-bit {{arithmetic}} {{logic unit}} (ALU) and accumulator, <b>8-bit</b> <b>registers</b> (one 16-bit register with special move instructions), 8-bit data bus and 2×16-bit address bus/program counter/data pointer and related 8/11/16-bit operations; hence it is mainly an 8-bit microcontroller ...|$|R
50|$|The CPU has an 8-bit {{accumulator}} and 15-bit PC. 16 additional <b>8-bit</b> <b>registers</b> (R0-R15) and an 8-bit {{program status}} word are memory mapped. There are special instructions to access them, but general RAM access instructions {{may also be}} used.|$|R
50|$|The chip has a {{total of}} 18 × <b>8-bit</b> <b>registers</b> {{controlling}} all aspects of video timings. Only two addresses are exposed to external components - one to select which internal register is to be read or written to and another to access that register.|$|R
50|$|Each command either reads or {{writes a}} single <b>8-bit</b> <b>register,</b> using an 8-bit address. This allows up to 256 registers, {{but only the}} range 1-31 is {{currently}} assigned.|$|E
50|$|The control {{register}} (or the control logic, or the command word register) is an <b>8-bit</b> <b>register</b> {{used to select}} the modes of operation and input/output designation of the ports.|$|E
5000|$|... (0x81) Stack pointer SP. This is an <b>8-bit</b> <b>register</b> used by {{subroutine}} call and return instructions. The stack grows upward; the SP is incremented before pushing, and decremented after popping a value.|$|E
50|$|The {{processor}} {{has seven}} <b>8-bit</b> <b>registers</b> (A, B, C, D, E, H, and L), where A {{is the primary}} 8-bit accumulator, and the other six registers {{can be used as}} either individual <b>8-bit</b> <b>registers</b> or as three 16-bit register pairs (BC, DE, and HL, referred to as B, D and H in Intel documents) depending on the particular instruction. Some instructions also enable the HL register pair {{to be used as a}} (limited) 16-bit accumulator, and a pseudo-register M can be used almost anywhere that any other register can be used, referring to the memory address pointed to by the HL pair. It also has a 16-bit stack pointer to memory (replacing the 8008's internal stack), and a 16-bit program counter.|$|R
50|$|The 65C02 {{is a low}} cost, {{general-purpose}} <b>8-bit</b> microprocessor (<b>8-bit</b> <b>registers</b> {{and data}} bus) with a 16-bit program counter and address bus. The variable length instruction set and manually optimized core size are intended to make the 65C02 well suited for low power system-on-chip (SoC) designs.|$|R
50|$|The 8086 {{has eight}} {{more or less}} general 16-bit {{registers}} (including the stack pointer but excluding the instruction pointer, flag register and segment registers). Four of them, AX, BX, CX, DX, can also be accessed as twice as many <b>8-bit</b> <b>registers</b> (see figure) while the other four, BP, SI, DI, SP, are 16-bit only.|$|R
5000|$|All 2-operand 8-bit {{arithmetic}} {{and logical}} (ALU) operations {{work on the}} 8-bit accumulator (the A register). For two-operand 8-bit operations, the other operand can be either an immediate value, another <b>8-bit</b> <b>register,</b> or a memory cell addressed by the 16-bit register pair HL. The only 8-bit ALU operations that can have a destination other than the accumulator are the unary incrementation or decrementation instructions, which can operate on any <b>8-bit</b> <b>register</b> or on memory addressed by HL, as for two-operand 8-bit operations. Direct copying is supported between any two 8-bit registers and between any <b>8-bit</b> <b>register</b> and a HL-addressed memory cell, using the MOV instruction. An immediate value can also be moved {{into any of the}} foregoing destinations, using the MVI instruction. Due to the regular encoding of the MOV instruction (using nearly a quarter of the entire opcode space) there are redundant codes to copy a register into itself (MOV B,B, for instance), which are of little use, except for delays. However, what would have been a copy from the HL-addressed cell into itself (i.e., MOV M,M) instead encodes the HLT instruction, halting execution until an external reset or unmasked interrupt occurs.|$|E
5000|$|Each logical 8 KB segment (or page) is {{associated}} with an <b>8-bit</b> <b>register</b> (MPR0-7) that contains the index of the 8 KB segment (or bank) in physical memory to map in this page. Two special instructions are used to access these registers: ...|$|E
5000|$|The MBR {{register}} is a readonly register, and {{it contains}} 2 control lines. Since {{it is an}} <b>8-bit</b> <b>register,</b> its output {{is connected to the}} least significant 8 bits of the B bus. It can be set to provide its output in 2 ways: ...|$|E
5000|$|Pro Action Replay/Parallel Comms Link DB25 port (<b>8-bit</b> dual <b>register</b> with handshake) ...|$|R
50|$|Both H8/300H and H8S {{have eight}} 32-bit registers, {{each of which}} can be treated as one 32-bit register, two 16-bit <b>registers,</b> or two <b>8-bit</b> <b>registers,</b> with the H8S having an {{internal}} 32-bit configuration. Several companies provide compilers for the H8 family, and there is a complete GCC port, including a simulator. There are also various hardware emulators available.|$|R
50|$|In {{order to}} {{preserve}} software compatibility with old MSX software, the R800 uses a superset of the Z80 instruction set. In addition to all the Z80 opcodes, two multiplication instructions were added, MULUB (8-bit), and MULUW (16-bit). Also, many of the undocumented Z80 instructions were made official, including all the opcodes dealing with IX and IY as <b>8-bit</b> <b>registers</b> (IXH, IXL, IYH, IYL).|$|R
5000|$|Most 8-bit {{operations}} {{can only}} be performed on the 8-bit accumulator (the A register). For 8-bit operations with two operands, the other operand can be either an immediate value, another <b>8-bit</b> <b>register,</b> or a memory byte addressed by the 16-bit register pair HL. Direct copying is supported between any two 8-bit registers and between any <b>8-bit</b> <b>register</b> and an HL-addressed memory byte. Due to the regular encoding of the [...] instruction (using a quarter of available opcode space), there are redundant codes to copy a register into itself ( [...] , for instance), which were of little use, except for delays. However, {{what would have been}} a copy from the HL-addressed cell into itself (i.e., [...] ) is instead used to encode the halt (...) instruction, halting execution until an external reset or interrupt occurs.|$|E
50|$|Another example {{may be an}} <b>8-bit</b> <b>register</b> {{with the}} bit pattern 0101_0101 and the carry flag set; if we execute a rotate left through carry instruction, {{the result would be}} 1010_1011 with the carry flag cleared because the most {{significant}} bit (bit 7) was rotated into the carry while the carry was rotated into the least significant bit (bit 0).|$|E
50|$|Whereas the {{high-end}} OPN chips have dedicated ADPCM channels for playing sampled audio, the YM2612 does not. However, its sixth channel {{can act as}} a surrogate PCM channel by means of the 'DAC Enable' register, allowing the chip to play 8-bit PCM sound samples. This replaces (disables) FM output for that channel. PCM data is written to the channel via an <b>8-bit</b> <b>register.</b> Unlike the other OPNs with ADPCM, the YM2612 does not provide any timing or buffering of samples, so all frequency control and buffering must be done in software by the host processor.|$|E
50|$|Pearson hashing is a hash {{function}} designed for fast execution on processors with <b>8-bit</b> <b>registers.</b> Given an input consisting of {{any number of}} bytes, it produces as output a single byte that {{is strongly dependent on}} every byte of the input. Its implementation requires only a few instructions, plus a 256-byte lookup table containing a permutation of the values 0 through 255.|$|R
5000|$|As is {{standard}} on microcontrollers, most pins connect {{to a more}} specialized peripheral, but if that peripheral is not needed, the pin {{may be used for}} general purpose I/O. The pins are divided into 8-bit groups called [...] "ports", each of which is controlled by a number of <b>8-bit</b> <b>registers.</b> In some cases, the ports are arranged in pairs which can be accessed as 16-bit registers.|$|R
5000|$|The COM ports are {{interfaced}} by {{an integrated}} circuit such as 16550 UART. This IC has seven internal <b>8-bit</b> <b>registers</b> which hold information and configuration data about which data {{is to be}} sent or was received, the baud rate, interrupt configuration and more. In the case of COM1, these registers can be accessed by writing to or reading from the I/O addresses 0x3F8 to 0x3FF.|$|R
5000|$|The IBM PC AT (machine type 5170) and 100% compatibles use an 80286 CPU and a 16-bit {{system bus}} architecture. In {{addition}} to the 8237 from the PC and XT models, a second, cascaded 8237 is added, for 16-bit DMA transfers. This is possible, despite the 8237 being an 8-bit device, because the 8237 performs transfers between an I/O port and memory as [...] "fly-by" [...] transfers in which the data is placed onto the bus by the source memory or I/O port and directly read {{at the same time}} by the destination I/O port or memory, without being handled by the 8237. For this mode of transfer, the width of the data bus is essentially immaterial to the 8237 (as long as it is connected to a data bus at least 8 bits wide, for programming the 8237 registers). The second 8237 in an AT-class PC provides three 16-bit DMA channels (its channels 1 through 3, named channels 5 through 7 in the PC AT); its channel 0 (named channel 4 in the PC AT) is used in cascade mode to connect the 8237 for 8-bit DMA as the [...] "slave" [...] in the cascade arrangement; the 8237 providing the 16-bit channels is the [...] "master". So that it can address 16-bit words, it is connected to the address bus {{in such a way that}} it counts even addresses (0, 2, 4, ...) instead of single addresses. Like the first 8237, it is augmented with four address-extension registers. In an AT-class PC, all eight of the address augmentation registers are 8 bits wide, so that full 24-bit addresses - the size of the 80286 address bus - can be specified. DMA transfers on any channel still cannot cross a 64 KiB boundary. (16-bit DMA is limited to 32,768 16-bit words, even though a DMA channel can count through 65536 addresses; the most-significant bit of the address counter from a 16-bit DMA channel is ignored.) Because the 8237 memory-to-memory DMA mode operates by transferring a byte from the source memory location to an internal temporary <b>8-bit</b> <b>register</b> in the 8237 and then from the temporary register to the destination memory location, this mode could not be used for 16-bit memory-to-memory DMA, as the temporary register is not large enough. Additionally, memory-to-memory 16-bit DMA would require use of channel 4, conflicting with its use to cascade the 8237 that handles the 8-bit DMA channels. However, on the AT, 8-bit DMA channel 0 is no longer used for DRAM refresh, having been replaced by specialized refresh logic, so it should be possible to perform 8-bit memory-to-memory DMA using channels 0 and 1 without interrupting DRAM refresh.|$|E
25|$|There were {{a number}} of <b>8-bit</b> control <b>{{registers}}</b> and 32-bit status registers to control various device timing parameters.|$|R
50|$|The {{register}} set consisted of sixteen 16-bit general purpose registers, labeled R0 through R15. These can be concatenated into eight 32-bit registers, labeled RR0/RR2/../RR14, or into four 64-bit registers, labeled RQ0/RQ4/RQ8/RQ12. The first eight registers can be subdivided into sixteen <b>8-bit</b> <b>registers,</b> labeled RL0 though RL7 {{for the lower}} byte and RH0 through RH7 for the upper byte. Register R15 is designated as stack pointer. On the Z8001, register R14 is used for selecting the stack segment.|$|R
50|$|The Z80 has six new LD {{instructions}} that can load the DE, BC, and SP register pairs from memory, and load memory from these three register pairs -- unlike the 8080. As on the 8080, load instructions do {{not affect the}} flags (except for the special purpose I and R register loads). A quirk (common with the 8080) of the register-to-register load instructions is {{that each of the}} <b>8-bit</b> <b>registers</b> can be loaded from themselves (e.g. LD A,A). This is effectively a NOP.|$|R
50|$|The main {{difference}} is that the Rabbit instructions place more constraints on register usage compared to the AVR instructions. For example, the 8-bit Rabbit ADD instruction permits only the A-register be the destination. However, the ADD instruction of the AVR permits the use any one of the 32 <b>8-bit</b> <b>registers</b> as the source or destination. Generally speaking, an instruction set that is less register restrictive is more optimizable because there is less need to save-and-reload the content of a register.|$|R
50|$|Like all Motorola {{processors}} {{that share}} lineage from the 6800, {{they use the}} von Neumann architecture as well as memory-mapped I/O. This family has five CPU registers that {{are not part of}} the memory: an 8-bit accumulator A, an <b>8-bit</b> index <b>register</b> X, an <b>8-bit</b> stack pointer SP with two most significant bits hardwired to 1, a 13-bit program counter PC, and an <b>8-bit</b> condition code <b>register</b> CCR.|$|R
