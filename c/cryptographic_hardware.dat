160|68|Public
5000|$|... #Article: Workshop on <b>Cryptographic</b> <b>Hardware</b> and Embedded Systems ...|$|E
5000|$|<b>Cryptographic</b> <b>hardware</b> acceleration: AES, SHA-2, RSA, {{elliptic}} curve cryptography (ECC), {{random number generator}} (RNG) ...|$|E
50|$|Linked timestamping scales well - hashing is {{much faster}} than public key cryptography. There {{is no need for}} {{specific}} <b>cryptographic</b> <b>hardware</b> with its limitations.|$|E
50|$|Oracle's {{proprietary}} {{operating system}} Solaris (originally developed by Sun) features an unrelated product called the Solaris Cryptographic Framework, a plug-in system for <b>cryptographic</b> algorithms and <b>hardware.</b>|$|R
5000|$|... #Caption: Overview of {{a typical}} NOC. Status {{monitors}} (front), backbone overview (back), and news broadcast on TV-set (right). Note safe under desk, typically for backups, passwords, or <b>hardware</b> <b>cryptographic</b> devices. - Picture of the Global Network Operations Center GlobalNOC at Indiana University ...|$|R
50|$|Allwinner Technology {{provides}} a <b>hardware</b> <b>cryptographic</b> accelerator in its A10, A20, A30 and A80 ARM system-on-chip series, and all ARM CPUs have acceleration {{in the later}} ARMv8 architecture. The accelerator provides the RSA public-key algorithm, several widely used symmetric-key algorithms, cryptographic hash functions, and a cryptographically secure pseudo-random number generator.|$|R
50|$|The OpenBSD Project, {{which has}} a history of {{integrating}} strong, carefully audited cryptography into its operating system's core, produced a framework for the provision of <b>cryptographic</b> <b>hardware</b> acceleration as an operating system service.|$|E
50|$|This section {{lists the}} known ability of an {{implementation}} {{to take advantage}} of CPU instruction sets that optimize encryption, or utilize system specific devices that allow access to underlying <b>cryptographic</b> <b>hardware</b> for acceleration or for data separation.|$|E
50|$|Several {{operating}} systems provide {{some support for}} <b>cryptographic</b> <b>hardware.</b> The BSD family of systems has the OpenBSD Cryptographic Framework (OCF), Linux systems have the Crypto API, Solaris OS has the Solaris Cryptographic Framework (SCF) and Microsoft Windows has the Microsoft CryptoAPI.|$|E
5000|$|PrivateCore’s {{focus is}} {{securing}} data-in-use on x86 servers. The company has {{taken advantage of}} recent microprocessor innovations including larger microprocessor caches and <b>hardware</b> <b>cryptographic</b> acceleration technology that enable more effective methods of encrypting memory while maintaining acceptable application performance. The technology approach goes beyond previous academic research efforts such as TRESOR.|$|R
30|$|The Trust Extension Device (TED) was {{developed}} with similar goals {{of providing a}} portable, secure and trusted computing platform. However, its key differentiator is that it adopted and implemented the Trusted Computing Group’s (TCG)[9] standards and architectures into a small, portable device. In particular, the TED provides an issuing enterprise a truly trusted computing platform whose root of trust and associated functionality {{is based on the}} Trusted Platform Module (TPM v 1.2 b[10]) <b>cryptographic</b> microcontroller <b>hardware.</b> The TPM becomes a root of trust for the TED platform, and allows the remote validation of its hardware and software through the use of cryptographically secure integrity measurement and attestation protocols.|$|R
25|$|A field-programmable gate arrays (FPGA) {{have been}} {{commonly}} used to implement <b>cryptographic</b> primitives in <b>hardware</b> to increase speed. These hardware implementations are just as vulnerable as other software based primitives. In 2005, an implementation of elliptic curve encryption was shown vulnerable to both SEMA and DEMA attacks. The ARIA block cipher is a common primitive implemented with FPGAs that {{has been shown to}} leak keys.|$|R
50|$|GCM {{has been}} criticized for example by Silicon Labs in the {{embedded}} world as the parallel processing is not suited to performant use of <b>cryptographic</b> <b>hardware</b> engines and therefore reduces the performance of encryption for some of the most performance sensitive devices.|$|E
5000|$|In cryptography, power {{analysis}} {{is a form}} of side channel attack in which the attacker studies the power consumption of a <b>cryptographic</b> <b>hardware</b> device (such as a smart card, tamper-resistant [...] "black box", or integrated circuit). The attack can non-invasively extract cryptographic keys and other secret information from the device.|$|E
5000|$|PrivateCore {{assumes that}} the only element that need be trusted in a system is the Central Processing Unit (CPU). The firm uses Trusted Platform Module (TPM) chips and Intel Trusted Execution Technology (Intel TXT) to provide remote server attestation. PrivateCore also {{supports}} the <b>cryptographic</b> <b>hardware</b> acceleration provided by Intel AES-NI technology.|$|E
50|$|The geli utility is {{different}} from gbde in that it offers different features and uses a different scheme for doing cryptographic work. It supports the crypto framework within FreeBSD, allowing <b>hardware</b> <b>cryptographic</b> acceleration if available, as well as supporting more cryptographic algorithms (currently AES, Triple DES, Blowfish and Camellia) and data authentication/integrity verification via MD5, SHA1, RIPEMD160, SHA256, SHA384 or SHA512 as Hash Message Authentication Codes.|$|R
40|$|Abstract—Securing {{the supply}} chain of {{integrated}} circuits is of utmost importance to computer security. In addition to counterfeit microelectronics, the theft or malicious modification of designs in the foundry can result in catastrophic damage to critical systems and large projects. In this letter, we describe a 3 -D architecture that splits a design into two separate tiers: one tier that contains critical security functions is manufactured in a trusted foundry; another tier is manufactured in an unsecured foundry. We argue that a split manufacturing approach to hardware trust based on 3 -D integration is viable and provides several advantages over other approaches. Index Terms—Advanced technologies, <b>cryptographic</b> controls, <b>hardware,</b> integrated circuits, physical security, security and privacy protection. I...|$|R
5000|$|The FD.IO VPP {{platform}} is an extensible framework that provides out-of-the-box production quality switch/router functionality. It is the open source version of Cisco's Vector Packet Processing (VPP) technology: a high performance, packet-processing stack that can run on commodity CPUs, and can leverage the Poll Mode Drivers for both NICs and <b>cryptographic</b> acceleration <b>hardware</b> and libraries. [...] TRex {{is an open}} source traffic generator using DPDK. It generates L4-7 traffic based on pre-processing and smart replay of real traffic templates. TRex amplifies both client and server side traffic and can scale to 200Gb/sec with one UCS using Intel XL710. TRex also supports multiple streams, ability to change any packet field and provides per stream statistics, latency and jitter.|$|R
50|$|NSS {{supports}} the PKCS #11 interface {{for access to}} <b>cryptographic</b> <b>hardware</b> like SSL accelerators, HSM-s and smart cards. Since most hardware vendors such as SafeNet Inc. and Thales also support this interface, NSS-enabled applications can work with high-speed crypto hardware and use private keys residing on various smart cards, if vendors provide the necessary middleware. NSS version 3.13 and above support the Advanced Encryption Standard New Instructions (AES-NI).|$|E
50|$|Cryptographic {{smart cards}} {{are often used}} for single sign-on. Most {{advanced}} smart cards include specialized <b>cryptographic</b> <b>hardware</b> that uses algorithms such as RSA and Digital Signature Algorithm (DSA). Today's cryptographic smart cards generate key pairs on board, to avoid the risk from having more than one copy of the key (since by design there usually isn't a way to extract private keys from a smart card). Such smart cards are mainly used for digital signatures and secure identification.|$|E
50|$|The {{efficacy}} of code signing as an authentication mechanism for software {{depends on the}} security of underpinning signing keys. As with other public key infrastructure (PKI) technologies, {{the integrity of the}} system relies on publishers securing their private keys against unauthorized access. Keys stored in software on general-purpose computers are susceptible to compromise. Therefore, it is more secure, and best practice, to store keys in secure, tamper-proof, <b>cryptographic</b> <b>hardware</b> devices known as hardware security modules or HSMs.|$|E
30|$|We {{propose a}} {{high-speed}} <b>cryptographic</b> architecture for <b>hardware</b> implementation of multivariate signature generations in this paper. The main computations of signature generations of multivariate scheme are multiplications, inversions, and solving LSEs in a finite field. Thus, we improve the finite field multiplications via using composite field expression and design a finite field inversion via using binary trees. Besides, we improve solving LSEs in a finite field {{based on the}} variant algorithm of Gauss-Jordan elimination.|$|R
40|$|International audienceImplementation {{attacks are}} {{a major threat to}} <b>hardware</b> <b>cryptographic</b> implementations. These attacks exploit the {{correlation}} existing between the computed data and variables such as computation time, consumed power, and electromagnetic (EM) emissions. Recently, the EM channel has been proven as an effective passive and active attack technique against secure implementations. In this paper, we resume the recent results obtained on this subject, with a particular focus on EM as a fault injection tool...|$|R
50|$|Encryption, by itself, {{can protect}} the {{confidentiality}} of messages, but other techniques are still needed to protect the integrity and authenticity of a message; for example, verification of a message authentication code (MAC) or a digital signature. Standards for <b>cryptographic</b> software and <b>hardware</b> to perform encryption are widely available, but successfully using encryption to ensure security may be a challenging problem. A single error in system design or execution can allow successful attacks. Sometimes an adversary can obtain unencrypted information without directly undoing the encryption. See, e.g., traffic analysis, TEMPEST, or Trojan horse.|$|R
5000|$|Yungs further practice-oriented work {{predicted}} {{early in}} the mid 1980s that large scale networks, due to scale limitations, will employ public key technology with server only public-key certificates; (this idea had been an` intellectual predecessor {{of the way the}} most prevalent version of Transport Layer Security was implemented in the mid 1990s). Another practice-oriented foundational work which influenced engineering practices was presented in the area of <b>cryptographic</b> <b>hardware</b> design and side-channel analysis against key recovery attacks.|$|E
50|$|One of {{the goals}} of the OpenBSD project is the {{integration}} of facilities and software for strong cryptography into the core operating system. To this end, a number of low-level features are provided, including a source of strong pseudo random numbers; built-in cryptographic hash functions and transforms; and support for <b>cryptographic</b> <b>hardware</b> (OpenBSD Cryptographic Framework). These abilities are used throughout OpenBSD, including the bcrypt password-hashing algorithm derived from Bruce Schneier's Blowfish block cipher, which takes advantage of the CPU-intensive Blowfish key schedule, making brute-force attacks less practical.|$|E
50|$|Unlike {{graphics}} {{applications such}} as games and film processing where similar hardware accelerators are in common use and have strong operating system support, the use of hardware in cryptography has had relatively low uptake. By the late 1990s, {{there was a need}} for a uniform operating system layer to mediate between <b>cryptographic</b> <b>hardware</b> and application software that used it. The lack of this layer led to the production of applications that were hard-coded to work with one or a very small range of cryptographic accelerators.|$|E
40|$|Many {{standard}} cryptographic {{functions are}} designed to benefit from hardware specific implementations. As a result, {{there have been a}} large number of highly efficient ASIC and FPGA hardware based implementations of standard <b>cryptographic</b> functions. Previously, <b>hardware</b> accelerated devices were only available to a limited set of users. General Purpose Graphic Processing Units (GPGPUs) have become a standard consumer item and have demonstrated orders of magnitude performance improvements for general purpose computation, including cryptographic functions. This paper reviews the current and future trends in GPU technology, and examines its potential impact on current cryptographic practice...|$|R
40|$|This {{contribution}} discusses <b>cryptographic</b> algorithm in <b>hardware</b> {{that protects}} the information leaks out of the device through so called „side channels“. Attacks on crypto-processors are based on analyses of the leaked data are known as sidechannel attacks (SCA). Important information, such as secret keys, {{can be obtained by}} observing the power consumption, the electromagnetic radiation, the timing information etc. There are several types of protection and some will be discussed in this paper. Special attention is paid to Wave Dynamic Differential Logic (WDDL) that was evaluated in terms of load symmetry on an example...|$|R
40|$|The {{performance}} of security applications can be greatly improved by accelerating the <b>cryptographic</b> algorithms in <b>hardware.</b> In this paper, an {{implementation of the}} Secure Shell (SSH) application is presented. A self-reconfigurable platform based on a Xilinx Spartan- 3 FPGA has been employed to implement a MicroBlaze-based embedded system, which executes SSH under the uCLinux operative system. Run-time reconfiguration is used to change the cryptographic coprocessors utilized for data ciphering. The {{performance of}} SSH has been improved and, in comparison to other alternatives not using reconfiguration, a reduction of the area requirements was also achieved...|$|R
50|$|The OpenBSD Cryptographic Framework (OCF) is {{a service}} {{virtualization}} layer for the uniform management of <b>cryptographic</b> <b>hardware</b> by an operating system. It {{is part of}} the OpenBSD Project, having been included in the operating system since OpenBSD 2.8 (December, 2000). Like other OpenBSD projects such as OpenSSH, it has been ported to other systems based on Berkeley Unix such as FreeBSD and NetBSD, and to Solaris and Linux. One of the Linux ports is supported by Intel for use with its proprietary cryptographic software and hardware to provide hardware-accelerated SSL encryption for the open source Apache HTTP Server.|$|E
50|$|<b>Cryptographic</b> <b>Hardware</b> and Embedded Systems (CHES) is {{a conference}} for {{cryptography}} research, {{focusing on the}} implementation of cryptographic algorithm. The two general areas treated are the efficient and the secure implementation of algorithms. Related topics such as random number generators, physical unclonable function or special-purpose cryptanalytical machines are also commonly covered at the workshop. CHES {{is sponsored by the}} International Association for Cryptologic Research. It was first held in Worcester, Massachusetts in 1999 at Worcester Polytechnic Institute (WPI). It was founded by Çetin Kaya Koç and Christof Paar. CHES 2000 was also held at WPI; after that, the conference has been held at various locations worldwide. Since 2009, the location of CHES rotates between the three continents Europe, North America and Asia. The past locations were, in chronological order, Paris, San Francisco, Cologne, Boston, Edinburgh, Yokohama, Vienna, Washington, D.C., Lausanne, Santa Barbara, Nara, Leuven, Santa Barbara, Busan, Saint-Malo and again Santa Barbara. In the last few years, CHES had around 400 participants, {{making it one of the}} largest events in the academic cryptography community.|$|E
5000|$|Because {{middleware}} is a cross-platform tool, {{the sophistication}} of your middleware analysts {{are expected to be}} acute. People that are designing and implementing the middleware message flow need to fully understand how the security model on each target platform works. This may include Windows, Unix, z/OS or AS/400. [...] Middleware protects data in transit through PKI and SSL technology. Security certificates are procured from a certification authority and regularly deployed and updated on servers. This protects data while it is in transit as it leaves one Server and arrives on the next server in the chain. It does not protect data while data is at rest. [...] Supplemental transmission security can augment the primary SSL measures that exist on your server. These are SSL client authentication, DN filtering, CRL check by LDAP, and <b>cryptographic</b> <b>hardware</b> (IPSEC-level encryption). This type of security is called [...] "border-level security" [...] because it only protects the data from when it leaves your borders until it gets to your trading partner's borders. It does not protect data once data has entered the border. IPSEC is the most efficient and least costly protection method. SSL is the middle ground, with a balance between flexibility, resource consumption, and transmission time. When data is at rest in queues, it is not protected by MQ. That is, data is in [...] "plain text". Therefore, if the data contained in messages is sensitive, then it is essential that application-level data encryption be used. Examples of data which could be protected by this strategy include banking data (account numbers, banking transactions, etc.) Application-level transaction security is the most secure form of protection but also the most costly in terms of CPU and I/O bandwidth consumption of both the sending and receiving servers. It is also the least efficient. Middleware data channels can be set up to provide varying degrees of protection. A sender/receiver channel pair could be configured to provide IPSEC transport-level security not using SSL. A second sender/receiver pair could be configured to provide SSL border-to-border level security not using IPSEC. A third sender/receiver channel pair could be set up to provide application-level encryption. Using this scheme, you provision a wide selection of protection mechanisms from which your applications can choose at runtime. This offers applications the ability to achieve best security when needed or more efficient security when data is not quite so sensitive.|$|E
50|$|Some HSM {{systems are}} also <b>hardware</b> <b>cryptographic</b> accelerators. They usually cannot beat the {{performance}} of hardware-only solutions for symmetric key operations. However, with performance ranges from 1 to 7,000 1024-bit RSA signs per second, HSMs can provide significant CPU offload for asymmetric key operations. Since National Institute of Standards and Technology is recommending the use of 2,048 bit RSA keys from year 2010, performance at longer key sizes is becoming increasingly important. To address this issue, some HSMs now support elliptic curve cryptography (ECC), which delivers stronger encryption with shorter key lengths.|$|R
40|$|Designing and {{implementing}} cryptographic protocols {{is known to}} be difficult. A lot of research has been devoted to developing formal techniques to analyze abstract designs of cryptographic protocols. Less {{attention has been paid to}} the verification of implementation-relevant aspects of cryptographic protocols. This is an important challenge since it is non-trivial to securely implement secure designs, because a specification by its nature is more abstract than the corresponding implementation, and the additional information may introduce attacks not present on the design level. In this paper, we address aspects of crypto protocol implementations close to the hardware level. More concretely, we consider the industrial Cryptographic Token Interface Standard PKCS 11 which defines how software on untrustworthy hardware can make use of tamper-proof hardware such as smart-cards to perform cryptographic operations on sensitive data. We propose an approach for automated security analysis with first-order logic theorem provers of crypto protocol implementations making use of this standard. Keywords: <b>Cryptographic</b> protocols, <b>hardware,</b> code analysis, verification, automated theorem proving. ...|$|R
40|$|A common {{approach}} to protect confidential information {{is to use}} a stream cipher which combines plain text bits with a pseudo-random bit sequence. Among the existing stream ciphers, Non-Linear Feedback Shift Register (NLFSR) -based ones provide the best trade-off between <b>cryptographic</b> security and <b>hardware</b> efficiency. In this paper, we show how to further improve the hardware efficiency of Grain stream cipher. By transforming the NLFSR of Grain from its original Fibonacci configuration to the Galois configuration and by introducing a clock division block, we double the throughput of the 80 and 128 -bit key 1 bit/cycle architectures of Grain with no area penalty...|$|R
