4858|2|Public
5|$|Engelbart {{slipped into}} {{relative}} obscurity after 1976. Several of his researchers became alienated {{from him and}} left his organization for Xerox PARC, {{in part due to}} frustration, and in part due to differing views of the future of computing. Engelbart saw the future in collaborative, networked, timeshare (<b>client-server)</b> computers, which younger programmers rejected in favor of the personal computer. The conflict was both technical and ideological: the younger programmers came from an era where centralized power was highly suspect, and personal computing was just barely on the horizon.|$|E
5|$|The {{project has}} pioneered {{the use of}} {{graphics}} processing units (GPUs), PlayStation3s, Message Passing Interface (used for computing on multi-core processors), and some Sony Xperia smartphones for distributed computing and scientific research. The project uses statistical simulation methodology that is a paradigm shift from traditional computing methods. As part of the <b>client–server</b> model network architecture, the volunteered machines each receive pieces of a simulation (work units), complete them, and return them to the project's database servers, where the units are compiled into an overall simulation. Volunteers can track their contributions on the Folding@home website, which makes volunteers' participation competitive and encourages long-term involvement.|$|E
25|$|Natively <b>client–server,</b> layered library design.|$|E
25|$|Plex is a <b>client-server</b> {{media player}} system and {{software}} suite comprising two main components.|$|E
25|$|Java EE (Enterprise Edition): Java SE plus various APIs {{which are}} useful for multi-tier <b>client–server</b> {{enterprise}} applications.|$|E
25|$|<b>Client-server</b> {{applications}} use the TLS {{protocol to}} communicate across a network {{in a way}} designed to prevent eavesdropping and tampering.|$|E
25|$|Distributed {{programming}} typically {{falls into}} one of several basic architectures: <b>client–server,</b> three-tier, n-tier, or peer-to-peer; or categories: loose coupling, or tight coupling.|$|E
25|$|VMware Workstation {{includes}} {{the ability to}} group multiple virtual machines in an inventory folder. The machines in such a folder can then be powered on and powered off as a single object, useful for testing complex <b>client-server</b> environments.|$|E
25|$|As {{with most}} other {{distributed}} version control systems, and unlike most <b>client–server</b> systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.|$|E
25|$|Other {{features}} include an integrated DB2 database management system, a menu-driven interface, multi-user support, non-programmable terminals (IBM 5250) and printers, security, communications, <b>client–server</b> and web-based applications. Much {{of the software}} necessary to run the IBM System i is included and integrated into the base operating system.|$|E
25|$|By {{the early}} 1980s users began seeing Unix as a {{potential}} universal operating system, suitable for computers of all sizes. The Unix environment and the <b>client–server</b> program model were essential elements {{in the development of}} the Internet and the reshaping of computing as centered in networks rather than in individual computers.|$|E
25|$|In 1991, entrez was {{introduced}} in CD form. In 1993, a <b>client-server</b> version of the software provided connectivity with the internet. In 1994, NCBI established a website, and Entrez {{was a part of}} this initial release. In 2001, Entrez bookshelf was released and in 2003, the Entrez Gene database was developed.|$|E
25|$|This {{accumulated}} know-how {{resulted in}} the creation of the ULA Information and Documentation System (SIDULA). It was originally designed to be a comprehensive library management system that would physically centralize all the acquisitions, cataloguing and loans. With the evolution in the University networks, it was ultimately redesigned to work as a <b>client–server</b> system.|$|E
25|$|This <b>client–server</b> {{terminology}} the user's terminal {{being the}} server and the applications being the clients often confuses new X users, because the terms appear reversed. But X takes {{the perspective of}} the application, rather than that of the end-user: X provides display and I/O services to applications, so it is a server; applications use these services, thus they are clients.|$|E
25|$|However, such an {{approach}} means that every library call requires {{a considerable amount of}} overhead. RPC calls are much more expensive than calling a shared library that has already been loaded on the same machine. This approach is commonly used in a distributed architecture that makes heavy use of such remote calls, notably <b>client-server</b> systems and application servers such as Enterprise JavaBeans.|$|E
25|$|Smuxi {{is based}} on the <b>client–server</b> model: The core {{application}} exists in the Smuxi back-end server which is connected to the Internet around-the-clock. The user interacts with one or more Smuxi front-end clients which are connected to the Smuxi back-end server. This way, the Smuxi back-end server can maintain connections to IRC servers even when all Smuxi front-end clients have been closed. January 14, 2010.|$|E
25|$|The Domain Name System is {{maintained}} by a distributed database system, which uses the <b>client–server</b> model. The nodes of this database are the name servers. Each domain {{has at least}} one authoritative DNS server that publishes information about that domain and the name servers of any domains subordinate to it. The top of the hierarchy is served by the root name servers, the servers to query when looking up (resolving) a TLD.|$|E
25|$|Office 2007 {{includes}} {{new applications}} and server-side tools, including Microsoft Office Groove, a collaboration and communication suite for smaller businesses, which was originally developed by Groove Networks before being acquired by Microsoft in 2005. Also included is Office SharePoint Server 2007, a major revision to the server platform for Office applications, which supports Excel Services, a <b>client-server</b> architecture for supporting Excel workbooks that are shared {{in real time}} between multiple machines, and are also viewable and editable through a web page.|$|E
25|$|The {{protocol}} {{is usually}} {{described in terms}} of a <b>client-server</b> model, but can as easily be used in peer-to-peer relationships where both peers consider the other to be a potential time source. Implementations send and receive timestamps using the User Datagram Protocol (UDP) on port number 123. They can also use broadcasting or multicasting, where clients passively listen to time updates after an initial round-trip calibrating exchange. NTP supplies a warning of any impending leap second adjustment, but no information about local time zones or daylight saving time is transmitted.|$|E
25|$|The {{application}} layer is the scope within which applications create user data and communicate this data to other applications on another {{or the same}} host. The applications, or processes, {{make use of the}} services provided by the underlying, lower layers, especially the Transport Layer which provides reliable or unreliable pipes to other processes. The communications partners are characterized by the application architecture, such as the <b>client-server</b> model and peer-to-peer networking. This is the layer in which all higher level protocols, such as SMTP, FTP, SSH, HTTP, operate. Processes are addressed via ports which essentially represent services.|$|E
25|$|Visual SourceSafe: Microsoft Visual SourceSafe is {{a source}} control {{software}} package oriented towards small software-development projects. The SourceSafe database is a multi-user, multi-process file-system database, using the Windows file system database primitives to provide locking and sharing support. All versions are multi-user, using SMB (file server) networking. However, with Visual SourceSafe 2005, other <b>client–server</b> modes were added, Lan Booster and VSS Internet (which used HTTP/HTTPS). Visual SourceSafe 6.0 was available as a stand-alone product and was included with Visual Studio 6.0, and other products such as Office Developer Edition. Visual SourceSafe 2005 was available as a stand-alone product and included with the 2005 Team Suite. Team Foundation Server has superseded VSS as Microsoft's recommended platform for source control.|$|E
25|$|The {{terminal}} implements a <b>client-server</b> architecture {{with the}} server {{running on a}} multiprocessor Unix platform. The client, used by end users {{to interact with the}} system, is a Windows application that typically connects directly through a router provided by Bloomberg and installed on-site. End users can also make use of an extra service (Bloomberg Anywhere) to allow the Windows application to connect via internet/IP, or Web access via a Citrix client. There are also applications that allow mobile access via Android, BlackBerry, and iOS. The server side of the terminal was originally developed using mostly the programming languages Fortran and C. Recent years have seen a transition towards C++ and embedded JavaScript on the clients and servers.|$|E
25|$|The Internet {{standards}} {{describe a}} framework {{known as the}} Internet protocol suite. This is a model architecture that divides methods into a layered system of protocols, originally documented in RFC 1122 and RFC 1123. The layers correspond to the environment or scope in which their services operate. At the top is the application layer, space for the application-specific networking methods used in software applications. For example, a web browser program uses the <b>client-server</b> application model and a specific protocol of interaction between servers and clients, while many file-sharing systems use a peer-to-peer paradigm. Below this top layer, the transport layer connects applications on different hosts with a logical channel through the network with appropriate data exchange methods.|$|E
25|$|Application layer {{protocols}} generally {{treat the}} transport layer (and lower) protocols as black boxes which provide a stable network connection across which to communicate, although the applications are usually aware of key {{qualities of the}} transport layer connection such as the end point IP addresses and port numbers. Application layer protocols are often associated with particular <b>client-server</b> applications, and common services have well-known port numbers reserved by the Internet Assigned Numbers Authority (IANA). For example, the HyperText Transfer Protocol uses server port 80 and Telnet uses server port 23. Clients connecting to a service usually use ephemeral ports, i.e., port numbers assigned only {{for the duration of}} the transaction at random or from a specific range configured in the application.|$|E
25|$|By {{the mid-1980s}} the rapid {{improvement}} in microcomputers, {{and especially the}} introduction of the graphical user interface and data-rich application programs like Lotus 1-2-3 led to an increasing interest in using personal computers as the client-side platform of choice in <b>client-server</b> computing. Under this model, large mainframes and minicomputers would be used primarily to serve up data over local area networks to microcomputers that would interpret, display and manipulate that data. For this model to work, a data access standard was a requirement – in the mainframe field it was highly likely that all of the computers in a shop were from one vendor and clients were computer terminals talking directly to them, but in the micro field there was no such standardization and any client might access any server using any networking system.|$|E
25|$|During 1993 Borland {{explored}} {{ties with}} WordPerfect {{as a possible}} way to form a suite of programs to rival Microsoft's nascent integration strategy. WordPerfect itself was struggling with a late and troubled transition to Windows. The eventual joint company effort, named Borland Office for Windows (a combination of the WordPerfect word processor, Quattro Pro spreadsheet and Paradox database) was introduced at the 1993 Comdex computer show. Borland Office never made significant in-roads against Microsoft Office. WordPerfect was then bought by Novell. In October 1994, Borland sold Quattro Pro and rights to sell up to million copies of Paradox to Novell for $140 million in cash, repositioning the company on its core software development tools and the Interbase database engine and shifting toward <b>client-server</b> scenarios in corporate applications. This later proved a good foundation for the shift to web development tools.|$|E
25|$|A {{vulnerability}} of the renegotiation procedure was discovered in August 2009 {{that can lead to}} plaintext injection attacks against SSL 3.0 and all current versions of TLS. For example, it allows an attacker who can hijack an https connection to splice their own requests into the beginning of the conversation the client has with the web server. The attacker can't actually decrypt the <b>client-server</b> communication, so it is different from a typical man-in-the-middle attack. A short-term fix is for web servers to stop allowing renegotiation, which typically will not require other changes unless client certificate authentication is used. To fix the vulnerability, a renegotiation indication extension was proposed for TLS. It will require the client and server to include and verify information about previous handshakes in any renegotiation handshakes. This extension has become a proposed standard and has been assigned the number RFC 5746. The RFC has been implemented by several libraries.|$|E
25|$|At {{the highest}} level, the design may be {{optimized}} to make {{best use of}} the available resources, given goals, constraints, and expected use/load. The architectural design of a system overwhelmingly affects its performance. For example, {{a system that is}} network latency-bound (where network latency is the main constraint on overall performance) would be optimized to minimize network trips, ideally making a single request (or no requests, as in a push protocol) rather than multiple roundtrips. Choice of design depends on the goals: when designing a compiler, if fast compilation is the key priority, a one-pass compiler is faster than a multi-pass compiler (assuming same work), but if speed of output code is the goal, a slower multi-pass compiler fulfills the goal better, even though it takes longer itself. Choice of platform and programming language occur at this level, and changing them frequently requires a complete rewrite, though a modular system may allow rewrite of only some component – for example, a Python program may rewrite performance-critical sections in C. In a distributed system, choice of architecture (<b>client-server,</b> peer-to-peer, etc.) occurs at the design level, and may be difficult to change, particularly if all components cannot be replaced in sync (e.g., old clients).|$|E
2500|$|The IBM System i also {{supports}} common <b>client–server</b> {{systems such as}} ODBC and JDBC for accessing its database from client software such as Java, Microsoft [...]NET languages and others.|$|E
2500|$|X uses a <b>client–server</b> model: an X server {{communicates}} {{with various}} client programs. The server accepts requests for graphical output (windows) and sends back user input (from keyboard, mouse, or touchscreen). The server may function as: ...|$|E
2500|$|Developers of <b>client-server</b> {{applications}} {{must recognize}} that untrusted clients may be {{under the control of}} attackers. The application author cannot assume that his JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are: ...|$|E
2500|$|A {{web browser}} and web server are a <b>client–server</b> architecture; often a web cache {{is also used}} to improve performance. [...] Overall, there are five types of {{templating}} systems, classified based on when assembly happens - placeholders are substituted for variable information (such as names, addresses, and product info) and sub-templates: ...|$|E
2500|$|In computing, the Preboot eXecution Environment (PXE, {{sometimes}} pronounced as pixie) specification {{describes a}} standardized <b>client-server</b> environment that boots a software assembly, retrieved from a network, on PXE-enabled clients. [...] On the client side it requires only a PXE-capable {{network interface controller}} (NIC), and uses a small set of industry-standard network protocols such as DHCP and TFTP.|$|E
2500|$|Modern X {{implementations}} use Unix domain sockets for efficient connections on {{the same}} host. Additionally shared memory (via the MIT-SHM extension) can be employed for faster <b>client–server</b> communication. However, the programmer must still explicitly activate and use the shared memory extension. [...] It is also necessary to provide fallback paths {{in order to stay}} compatible with older implementations, and in order to communicate with non-local X servers.|$|E
2500|$|In 1988, a {{much more}} {{complete}} specification of the NTPv1 protocol, with associated algorithms, was published in [...] It drew on the experimental results and clock filter algorithm documented in [...] {{and was the first}} version to describe the <b>client-server</b> and peer-to-peer modes. In 1991, the NTPv1 architecture, protocol and algorithms were {{brought to the attention of}} a wider engineering community with the publication of an article by David L. Mills in the IEEE Transactions on Communications.|$|E
2500|$|In December 2009, {{the project}} {{evolved into a}} {{commercial}} software business owned and developed by a single for-profit startup company, Plex, Inc., a U.S.-based high tech firm {{that is responsible for}} the development of the Plex Media Server and media player app front- and back-ends, its <b>client–server</b> model, all accompanying software under the Plex brand name, as well as the exclusive, copyrighted, proprietary parts, whether distributed on its own or as a third-party software component in products manufactured via a strategic partnership. [...] Elan Feingold, Scott Olechowsi and Cayce Ullman were the three founders, with Ullman and Feingold taking on full-time roles as the CEO and CTO, respectively.|$|E
