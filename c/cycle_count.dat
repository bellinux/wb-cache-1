186|432|Public
5|$|Flash memory can be {{programmed}} and erased {{only a limited}} number of times. This is often referred to as the maximum number of program/erasecycles (P/Ecycles) it can sustain over the life of the flash memory. Single-level cell (SLC) flash, designed for higher performance and longer endurance, can typically operate between 50,000 and 100,000 cycles. , multi-level cell (MLC) flash is designed for lower cost applications and has a greatly reduced <b>cycle</b> <b>count</b> of typically between 3,000 and 5,000. Since 2013, triple-level cell (TLC) flash has been available, with cycle counts dropping to 1,000 program-erase (P/E) cycles. A lower write amplification is more desirable, as it corresponds to a reduced number of P/Ecycles on the flash memory and thereby to an increased SSD life.|$|E
25|$|Like many CPUs of its era {{the cycle}} timing of some {{instructions}} varied {{depending on the}} source operand(s). For example, the unsigned multiply instruction takes (38+2n) clock cycles to complete where 'n' {{is equal to the}} number of bits set in the operand. To create a function that took a fixed <b>cycle</b> <b>count</b> required the addition of extra code after the multiply instruction. This would typically consume extra cycles for each bit that wasn't set in the original multiplication operand.|$|E
25|$|The {{guaranteed}} <b>cycle</b> <b>count</b> {{may apply}} only to block zero (as {{is the case with}} TSOPNAND devices), or to all blocks (as in NOR). This effect is mitigated in some chip firmware or file system drivers by counting the writes and dynamically remapping blocks in order to spread write operations between sectors; this technique is called wear leveling. Another approach is to perform write verification and remapping to spare sectors in case of write failure, a technique called bad block management (BBM). For portable consumer devices, these wearout management techniques typically extend the life of the flash memory beyond the life of the device itself, and some data loss may be acceptable in these applications. For high reliability data storage, however, it is not advisable to use flash memory that would {{have to go through a}} large number of programming cycles. This limitation is meaningless for 'read-only' applications such as thin clients and routers, which are programmed only once or at most a few times during their lifetimes.|$|E
40|$|Inventory record errors {{within a}} supply chain can lead to {{problems}} that cause low customer satisfaction and high operational costs. This paper presents a simulation model of a two-echelon inventory system consisting of a retailer, a distribution center, and a supplier that includes multiple item types {{and the use of}} <b>cycle</b> <b>counting</b> as the corrective action. An extensive set of cycle-counting configurations were examined while observing the trade-off between fill rates, accuracy, and system costs in order to investigate the best possible configuration of <b>cycle</b> <b>counting</b> for two set of experiments that examine high-demand-low-cost and low-demand-high-cost items. The results indicate that the correct application of <b>cycle</b> <b>counting</b> will increase record accuracy and provide significant amount of savings for the entire supply chain. <b>Cycle</b> <b>counting</b> Supply chain Simulation Inventory inaccuracy...|$|R
50|$|<b>Cycle</b> <b>counting,</b> an {{alternative}} to physical inventory, may be less disruptive.|$|R
40|$|The <b>cycle</b> <b>counting</b> {{procedure}} {{is a fundamental}} step in the fatigue analysis of structures. This paper is devoted to <b>cycle</b> <b>counting</b> methods, starting from the spectral properties of the loading process. <b>Cycle</b> <b>counting</b> methods for stationary Gaussian narrow-band and broad-band processes proposed in literature are discussed. Focusing attention on bi-modal processes, which are usual in dynamic response of structures, the cycles histograms obtained by the Peak and Peak-Valley Counting methods are expressed in closed form. From these, a couple of {{upper and lower bounds}} for the mean total damage and for the mean fatigue life are obtained. Then, an advanced formulation of the <b>cycle</b> <b>counting</b> is developed, obtaining a new closed form solution of the cycles histogram which better approximate the Rainflow Counting results. The proposed method is finally applied to several different bi-modal processes, comparing the results with other criteria and with solutions based on simulated time-histories...|$|R
50|$|<b>Cycle</b> <b>count</b> - The best {{practice}} {{is to determine}} why a <b>cycle</b> <b>count</b> that increases or decreases inventory has occurred. Find the root cause and correct the problem from occurring again.|$|E
5000|$|It {{follows that}} the {{combinatorial}} species [...] {{that reflects the}} signs and the <b>cycle</b> <b>count</b> of the set of permutations is given bywhere we have used [...] to mark signs and [...] for the <b>cycle</b> <b>count.</b>|$|E
5000|$|Updating of elapsed cycle {{counts on}} {{platforms}} with <b>cycle</b> <b>count</b> registers ...|$|E
50|$|Most <b>cycle</b> <b>counting</b> {{applications}} use ABC analysis, segregating items {{into various}} count frequencies.|$|R
40|$|We {{consider}} {{the distribution of}} <b>cycle</b> <b>counts</b> in a random regular graph, which is {{closely linked to the}} graph’s spectral properties. We broaden the asymptotic regime in which the <b>cycle</b> <b>counts</b> are known to be approximately Poisson, and we give an explicit bound in total variation distance for the approximation. Using this result, we calculate limiting distributions of linear eigenvalue statistics for random regular graphs. Previous results on the distribution of <b>cycle</b> <b>counts</b> by McKay, Wormald, and Wysocka (2004) used the method of switchings, a combinatorial technique for asymp-totic enumeration. Our proof uses Stein’s method of exchangeable pairs and demon-strates an interesting connection between the two techniques...|$|R
40|$|The {{heart of}} {{inventory}} transactions management involves obtaining an accurate count of on-hand inventories employing different procedures. Among such procedures <b>cycle</b> <b>counting</b> {{is said to}} provide better inventory record accuracy for financial control and production planning. However, these procedures use rather arbitrary basis for classifying items and for setting the count frequency within each strata. This paper develops a simple optimization model of inventory <b>cycle</b> <b>counting</b> based on traditional stratified sampling theory. Such a model allows the inventory manager to make statistically supported statements regarding inventory record accuracy so as to meet financial control requirements {{with a minimum of}} <b>cycle</b> <b>counting</b> effort. A numerical example is included to illustrate the model. ...|$|R
5000|$|Inventory Management : Product maintenance, ABC Analysis, <b>Cycle</b> <b>count,</b> Inventory Transactions, Inter Org Transfers, Sub Inventory Movements ...|$|E
5000|$|Now the two {{generating}} functions [...] and [...] of {{even and}} odd permutations by <b>cycle</b> <b>count</b> are given by ...|$|E
50|$|Cycle counts can {{introduce}} inventory errors if the <b>cycle</b> <b>count</b> process is poorly executed. Multiple locations per item, work in process, and lag in paperwork processing can each contribute to errors. This {{problem can be}} mitigated with correct <b>cycle</b> <b>count</b> procedures that specify not only the part number to be counted but also the location it should be in. Cycle counting is only effective in companies with a well-defined inventory control procedure and {{a high degree of}} inventory accuracy.|$|E
50|$|Clock <b>cycle</b> <b>counts</b> for {{examples}} of typical x87 FPU instructions (only register-register versions shown here).|$|R
50|$|After {{less than}} a year, path usage (<b>cycle</b> <b>counts</b> only, without pedestrians) was at {{approximately}} 750 per day.|$|R
40|$|This report {{provides}} {{a view of}} how inventory accuracy can be improved when Buffer Time Management principals is applied to <b>Cycle</b> <b>Counting</b> procedures. With no base module from which customer specific solutions can be designed from leads to brand new <b>Cycle</b> <b>Counting</b> modules being developed for each and every customer, this results in waste of time, money and other resources. The {{need to develop a}} module that would act as base module for future developments was identified and addressed. Different <b>Cycle</b> <b>Counting</b> methodologies were researched along with the key principles of Buffer Time Management. The research indicated that selecting the ABC categorization method of <b>Cycle</b> <b>Counting</b> will be the best choice when combined with the color coding and buffer principles of Buffer Time Management. Business and process blueprints where developed for several proposed solutions on which customer need verification was done to select the most promising proposed module. A prototype module was developed in Microsoft Excel with actual inventory records. Results from the implementation of the prototype module indicated that the module is able to schedule <b>cycle</b> <b>counting</b> stock takes {{and at the same time}} provide accurate and up to date schedule states and inventory levels. In conclusion, the implementation of this developed module will increase inventory accuracy, provide transparency to supervisors and management for business planning and will increase customer service and satisfaction. Thesis (B Eng. (Industrial and Systems Engineering)) [...] University of Pretoria, 2012...|$|R
5000|$|<b>Cycle</b> <b>count</b> improvements. Many unmodified ARM7 {{binaries}} {{were measured}} as taking about 30% fewer cycles to execute on ARM9 cores. Key improvements include: ...|$|E
5000|$|Quality {{assurance}}: A {{quality assurance}} (QA) department performs periodic checks of random samples of stock to check quality, including from the warehouse racking, goods in, and returned stock. This department may also take on <b>cycle</b> <b>count</b> duties to find missing stock.|$|E
50|$|The Pareto method, {{derived from}} the Pareto principle, is to <b>cycle</b> <b>count</b> {{inventory}} by percentage of inventory value (cost multiplied by usage for period). Items with a higher determined value are counted more often, while items that have little movement are seldom counted.|$|E
40|$|This article aims to {{identify}} the impact of <b>cycle</b> <b>counting</b> on inventory accuracy. Multiple case studies were used as research method; these include seven case studies of companies in Paraná. A research protocol {{was used as the}} basis for collecting the data. For the data analysis, the content analysis method was used with the triangulation of collected data. For the main results, the study demonstrates the relationship between <b>cycle</b> <b>counting,</b> the level of importance attributed by the organization, the number of items and the rate of accuracy obtained. The high level of control of inventory processes, together with the use of <b>cycle</b> <b>counting</b> made it possible to eliminate the main cause of failure in inventory accuracy – errors in recording the movement of material – and with this, improve the operational efficiency of the companies...|$|R
40|$|Abstract. Vibrations of {{engineering}} structures are described usually by functions variable in time domain (displacements, stress). For real structures modes of vibrations existing in response of structure due to external excitation {{are determined by}} exciting frequency and the natural frequencies of the structure. In the paper, the general idea of method of stress <b>cycle</b> <b>counting,</b> based on the FFT analysis of the stress function response is discussed and compared with the rain-flow <b>cycle</b> <b>counting</b> method, for the case of bi-modal spectrum...|$|R
50|$|A {{number of}} {{techniques}} {{have been used}} to correct phantom inventory problems, including physical <b>cycle</b> <b>counts,</b> RFID tagging of items and statistical modeling of phantom inventory conditions.|$|R
50|$|Stock-taking may be {{performed}} as an intensive annual, end of fiscal year, procedure {{or may be}} done continuously {{by means of a}} <b>cycle</b> <b>count.</b> An annual end of fiscal year stock-taking is typically undertaken for use in a company's financial statements. It is often done {{in the presence of the}} external auditors who are auditing the financial statements.|$|E
50|$|Like many CPUs of its era {{the cycle}} timing of some {{instructions}} varied {{depending on the}} source operand(s). For example, the unsigned multiply instruction takes (38+2n) clock cycles to complete where 'n' {{is equal to the}} number of bits set in the operand. To create a function that took a fixed <b>cycle</b> <b>count</b> required the addition of extra code after the multiply instruction. This would typically consume extra cycles for each bit that wasn't set in the original multiplication operand.|$|E
5000|$|This is {{performed}} approximately every 400-600 flight hours or 200-300 cycles (takeoff and landing {{is considered an}} aircraft [...] "cycle"), depending on aircraft type. It needs about 50-70 man-hours and is usually {{on the ground in}} a hangar for a minimum of 10 hours. The actual occurrence of this check varies by aircraft type, the <b>cycle</b> <b>count,</b> or the number of hours flown since the last check. The occurrence can be delayed by the airline if certain predetermined conditions are met.|$|E
40|$|This paper {{addresses}} the potential speedup achieved by using decimal floating-point hardware, instead of software routines, on a high-performance superscalar architecture. Software routines were written to per-form decimal addition, subtraction, multiplication, and diuision. <b>Cycle</b> <b>counts</b> were then measured for each instruction using the Simplescalar simulator. Af-ter this, new hardware algorithms were deueloped, ex-isting hardware algorithms were analyzed, and <b>cycle</b> <b>counts</b> were estimated {{for the same}} set of instructions using specialized decimal floating-point hardware. This data was then used to show the potential speedup ob-tained for programs with different instruction mixes and a recently developed benchmark. ...|$|R
50|$|In winter, {{there is}} also a 9-day <b>cycle</b> <b>counting</b> start from the winter solstice, which would last for 9 cycles until 81 days later when it is deemed as the end of winter.|$|R
50|$|The {{standard}} {{also includes}} the specification and calculation of standard bridge loads, {{the application of the}} limit state principles, analysis, and fatigue load calculation and the reservoir method for fatigue load <b>cycle</b> <b>counting.</b>|$|R
5000|$|Starting {{with the}} Pentium Pro, Intel {{processors}} have practiced out-of-order execution, where instructions {{are not necessarily}} performed in the order they appear in the program. This can cause the processor to execute [...] later than a simple program expects, producing a misleading <b>cycle</b> <b>count.</b> [...] The programmer can solve this problem by inserting a serializing instruction, such as CPUID, to force every preceding instruction to complete before allowing the program to continue, or by using the [...] instruction, which is a serializing variant of the [...] instruction.|$|E
50|$|Annuity {{depreciation}} {{methods are}} {{not based on}} time, but on a level of Annuity. This could be miles driven for a vehicle, or a <b>cycle</b> <b>count</b> for a machine. When the asset is acquired, its life is estimated {{in terms of this}} level of activity. Assume the vehicle above is estimated to go 50,000 miles in its lifetime. The per-mile depreciation rate is calculated as: ($17,000 cost - $2,000 salvage) / 50,000 miles = $0.30 per mile. Each year, the depreciation expense is then calculated by multiplying the number of miles driven by the per-mile depreciation rate..|$|E
50|$|Performance of ARMulator is {{good for}} the {{technology}} employed, it's about 1000 host (PC) instructions per ARM instruction. This means that emulated speeds of 1 MHz were normal for PCs of the mid to late 90s. Accuracy is good too, although it is classed as <b>cycle</b> <b>count</b> accurate rather than cycle accurate, this is because the ARM pipeline isn't fully modeled (although register interlocks are). Resolution is to an instruction, as a consequence when single stepping the register interlocks are ignored and different cycle counts are returned than if the program had simply run, this was unavoidable.|$|E
40|$|This paper {{initially}} {{investigates the}} accuracy of two methods, i. e., the Maximum Variance Method (MVM) and the Maximum Damage Method (MDM), in predicting {{the orientation of the}} crack initiation plane in three different metallic materials subjected to multiaxial variable amplitude loading. According to the validation exercise being performed, the use of both the MVM and the MDM resulted in a satisfactory level of accuracy for selected three metals. Subsequently, three procedures to estimate the fatigue lifetime of metals undergoing multiaxial variable amplitude loading were assessed quantitatively. Procedure A was based on the MDM applied along with Fatemi-Socie’s (FS) criterion, Bannantine-Socie’s (BS) <b>cycle</b> <b>counting</b> method and Miner’s linear rule. Procedure B was based on the MVM, FS criterion, BS <b>cycle</b> <b>counting</b> method and Miner’s linear rule. Procedure C involved the MVM, the Modified Manson Coffin Curve Method (MMCCM), the classical rainflow <b>cycle</b> <b>counting</b> method and Miner’s linear rule. The results show that the usage of these three design procedures resulted in satisfactory predictions for the materials being considered, with estimates falling within an error band of three...|$|R
40|$|Multiaxial fatigue {{is a very}} {{important}} physical phenomenon to take into account in several mechanical components; its study is of utmost importance to avoid unexpected failure of equipment, vehicles or structures. Among several fatigue characterization tools, a correct definition of a damage parameter and a load <b>cycle</b> <b>counting</b> method under multiaxial loading conditions show to be crucial to estimate multiaxial fatigue life. In this paper, the SSF equivalent stress and the virtual <b>cycle</b> <b>counting</b> method are presented and discussed, regarding their physical foundations and their capability to characterize multiaxial fatigue damage under complex loading blocks. Moreover, it is presented their applicability to evaluate random fatigue damage...|$|R
30|$|To {{evaluate}} {{the increase in}} speed provided by our hardware-based sensor device implementation, execution <b>cycle</b> <b>counts</b> are compared with the typical sensor devices found in the literature, namely general purpose processor-based solution[7], sensor processor-based solution[11], and event processor-based solution[13].|$|R
