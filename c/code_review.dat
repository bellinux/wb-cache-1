347|767|Public
25|$|The JGit {{implementation}} of Git {{is a pure}} Java software library, designed to be embedded in any Java application. JGit {{is used in the}} Gerrit <b>code</b> <b>review</b> tool and in EGit, a Git client for the Eclipse IDE.|$|E
25|$|Sometimes, a bug {{is not an}} {{isolated}} flaw, but represents an error of thinking or planning {{on the part of the}} programmer. Such logic errors require a section of the program to be overhauled or rewritten. As a part of <b>code</b> <b>review,</b> stepping through the code and imagining or transcribing the execution process may often find errors without ever reproducing the bug as such.|$|E
50|$|<b>Code</b> <b>review</b> {{practices}} {{fall into}} two main categories: formal <b>code</b> <b>review</b> and lightweight <b>code</b> <b>review.</b>|$|E
40|$|This paper {{presents}} the results of a study where the effects of introducing <b>code</b> <b>reviews</b> in an organisational unit have been evaluated. The study was performed in an ongoing commercial project, mainly through interviews with developers and an experiment where the effects of introducing <b>code</b> <b>reviews</b> were measured. Two different checklist based review methods have been evaluated. The objectives of the study are to analyse the effects of introducing <b>code</b> <b>reviews</b> in the organisational unit, and to compare the two methods. The results indicate that many of the faults that normally are found in later test phases or operation are instead found in <b>code</b> <b>reviews,</b> but no difference could be found between the two methods. The results of the study are considered positive, and the organisational unit has continued to work with <b>code</b> <b>reviews...</b>|$|R
40|$|Abstract—Code reviews {{have many}} benefits, most {{importantly}} to find bugs {{early in the}} development phase and to enforce coding standards. Still, it is widely accepted that formal <b>code</b> <b>reviews</b> are time-consuming and the practical applicability in agile development is controversial. This work presents a continuous differential-based method and tool for <b>code</b> <b>reviews.</b> By using a continuous approach to <b>code</b> <b>reviews,</b> the review overhead can be reduced and the effectiveness and applicability in agile environments shall be improved...|$|R
40|$|In the {{automotive}} industry, the model-based approach is increasingly establishing {{itself as a}} standard paradigm for developing control unit software. Just as <b>code</b> <b>reviews</b> are widespread in classical software development as a quality assurance measure, models also have to undergo a stringent review procedure - particularly if they serve {{as a starting point}} for automatic implementation by code generators. In addition to these model reviews, the generated production <b>code</b> is <b>reviewed</b> later in the development process by performing auto <b>code</b> <b>reviews.</b> This article will present procedures for and give an account of experiences with model and <b>code</b> <b>reviews</b> which have been adapted to the model-based development process. Copyrigh...|$|R
5000|$|OWASP <b>Code</b> <b>Review</b> Guide: The <b>code</b> <b>review</b> {{guide is}} {{currently}} at release version 1.1 {{and the second}} best selling OWASP book in 2008.|$|E
5000|$|Tool-assisted <b>code</b> <b>review</b> {{authors and}} reviewers use {{software}} tools, informal ones such as pastebins and IRC, or specialized tools designed for peer <b>code</b> <b>review.</b>|$|E
50|$|Many {{teams that}} eschew traditional, formal <b>code</b> <b>review</b> {{use one of}} the above forms of {{lightweight}} review as part of their normal development process. A <b>code</b> <b>review</b> case study published in the book Best Kept Secrets of Peer <b>Code</b> <b>Review</b> found that lightweight reviews uncovered as many bugs as formal reviews, but were faster and more cost-effective.|$|E
5000|$|... #Subtitle level 3: Secure <b>code</b> <b>reviews,</b> inspections, and walkthroughs ...|$|R
5000|$|Information Supplement: Requirement 6.6 <b>Code</b> <b>Reviews</b> and Application Firewalls Clarified ...|$|R
40|$|Abstract: Telecommunication {{software}} {{is expected to}} have a long lifespan during which many developers will add new features, modify existing features, or correct bugs. The software must be understandable, reliable, and maintainable otherwise the additions and modifications will take longer to develop and introduce further errors. Siemens has a software development process, which includes Fagan inspections, module testing, integration testing, internal, and customer field trials. The Quality Plan for a large software development stated that the developed software will be subject to either “ 100 % <b>code</b> <b>reviews</b> and normal levels of testing ” or “No <b>code</b> <b>reviews</b> and 100 % testing”. This paper tries to determine whether “ 100 % testing with no <b>code</b> <b>reviews</b> ” is a viable alternative to “ 100 % <b>code</b> <b>reviews</b> with testing ” for commercial software products. It provides a case study of a recently developed application that was subject to “ 100 % testing and no code reviews”. It uses a commercial tool to demonstrate the test coverage...|$|R
50|$|In {{addition}} to various implementations of static analysis, such as flow analysis, and unit testing, {{which is often}} extended to include integration testing, development testing also includes peer <b>code</b> <b>review</b> as a primary quality activity. <b>Code</b> <b>review</b> is widely {{considered one of the}} most effective defect detection and prevention methods in software development.|$|E
50|$|Some static code {{analysis}} tools {{can be used}} to assist with automated <b>code</b> <b>review.</b> They do not compare favorably to manual reviews, however they can be done faster and more efficiently. These tools also encapsulate deep knowledge of underlying rules and semantics required to perform this type analysis such that it does not require the human code reviewer to have the same level of expertise as an expert human auditor. Many Integrated Development Environments also provide basic automated <b>code</b> <b>review</b> functionality. For example the Eclipse and Microsoft Visual Studio IDEs support a variety of plugins that facilitate <b>code</b> <b>review.</b>|$|E
5000|$|Review {{of design}} using {{configuration}} controlled drawings (for software <b>code</b> <b>review)</b> ...|$|E
50|$|Depending on the organization's {{expectations}} for software development, unit testing might include static code analysis, data-flow analysis, metrics analysis, peer <b>code</b> <b>reviews,</b> <b>code</b> coverage analysis and other software verification practices.|$|R
50|$|Swecha runs a Git {{repository}} management, Version Control, <b>Code</b> <b>reviews,</b> {{and continuous}} integration etc. at http://code.swecha.org.|$|R
50|$|Secure <b>Code</b> <b>reviews</b> are {{conducted}} during {{and at the}} end of the development phase to determine whether established security requirements, security design concepts, and security-related specifications have been satisfied. These reviews typically consist of the presentation of material to a <b>review</b> group. Secure <b>code</b> <b>reviews</b> are most effective when conducted by personnel who have not been directly involved in the development of the software being reviewed.|$|R
5000|$|Kallithea Python {{based project}} {{management}} software with good <b>code</b> <b>review</b> support ...|$|E
5000|$|<b>Code</b> <b>review</b> is {{systematic}} examination (often as peer review) {{of computer}} source code.|$|E
5000|$|... #Caption: A rubber duck in use by a {{developer}} to aid <b>code</b> <b>review</b> ...|$|E
5000|$|To enable <b>code</b> <b>reviews</b> {{to focus}} on more {{important}} issues than arguing over syntax and naming standards.|$|R
3000|$|... merged: the <b>code</b> <b>reviews</b> were done, and {{the pull}} request was {{accepted}} (the status in GitHub is closed/merged).|$|R
5000|$|<b>Code</b> <b>reviews</b> and unit testing, {{approaches}} to make modules more secure where formal correctness proofs are not possible.|$|R
5000|$|The source <b>code</b> <b>review</b> was not {{completed}} and initial findings were not addressed.|$|E
5000|$|Bitbucket {{is mostly}} used for code and <b>code</b> <b>review.</b> Bitbucket {{supports}} the following features: ...|$|E
50|$|Code reviews {{can often}} find and remove common {{vulnerabilities}} such as format string exploits, race conditions, memory leaks and buffer overflows, thereby improving software security. Online software repositories based on Subversion (with Redmine or Trac), Mercurial, Git or others allow groups {{of individuals to}} collaboratively review code. Additionally, specific tools for collaborative <b>code</b> <b>review</b> can facilitate the <b>code</b> <b>review</b> process.|$|E
5000|$|Shelving [...] - [...] {{users can}} save and restore work in {{progress}} for <b>code</b> <b>reviews</b> or task switching ...|$|R
3000|$|... closed: the <b>code</b> <b>reviews</b> were done, but {{the pull}} request was not {{accepted}} (the status in GitHub is closed/unmerged).|$|R
5000|$|<b>Code</b> <b>reviewing</b> {{software}} is computer software that helps humans find flaws in program source code.It {{can be divided}} into two categories: ...|$|R
50|$|Two {{software}} tools, {{both for}} <b>code</b> <b>review,</b> {{have been named}} after Gerrit Rietveld: Gerrit and Rietveld.|$|E
5000|$|Automated <b>code</b> <b>review</b> {{software}} checks {{source code}} against a predefined {{set of rules}} and produces reports.|$|E
50|$|Gerrit is a fork of Rietveld, another <b>code</b> <b>review</b> tool. Its namesake is Dutch {{designer}} Gerrit Rietveld.|$|E
50|$|In {{addition}} to source code hosting, Gitorious provides projects with wikis, a web interface for merge requests and <b>code</b> <b>reviews,</b> and activity timelines for projects and developers.|$|R
40|$|Programming is a {{difficult}} subject for many students and therefore a popular topic in computing education research, with extensive research into {{the teaching and learning}} of programming (Sheard et al., 2009). Peer <b>code</b> <b>reviews</b> (or <b>code</b> inspections,) have been successfully applied to the teaching of programming (Hundhausen et al., 2009, Trytten, 2005, Wang et al., 2008). <b>Code</b> <b>reviews</b> can also be applied in a individual context as in the Personal Software Process (PSP) (Humphrey, 1997). Making the review process individual eliminates the problems associated with group and pair work as the student is working alone. The aim of this research is to ascertain whether individual <b>code</b> <b>reviews</b> based on checklists (like those used in PSP (Humphrey, 1997) and during formal code inspections in industry (Sommerville, 2007),) with minimal reporting can be used to improve solo programming. The results shown an increase in performance however this is not statistically significant possibly due to the small sample size...|$|R
40|$|Static {{analysis}} {{is an important}} part of today's quality assurance process. It can be performed manually, by means of <b>code</b> <b>reviews,</b> or automatically, by automated static analysis tools (ASATs). However, there is still much unknown about the state of static analysis. This includes hard data on how prevalent static {{analysis is}} among projects. And while there have been studies on how projects use <b>code</b> <b>reviews,</b> current research has not investigated how developers configure the ASATs that they use and how these configurations evolve. In this thesis, we answer these questions by means of a large scale analysis of open source software. We found that both <b>code</b> <b>reviews</b> and ASATs are common, but not ubiquitous. Many projects do not perform <b>code</b> <b>reviews</b> for the changes of core developers and do not enforce a strict use of ASATs. Regarding the use of ASATs, developers both use and avoid maintainability defects to a greater extent than functional defects. Most configurations of developers deviate from the default and hardly contain custom rules. However, there are few default rules that are changed by a significant percentage of developers. Finally, most configuration files never change. And if they do, the changes are small, occur over the lifetime of the project, and are not triggered by ASAT version updates. Software EngineeringElectrical Engineering, Mathematics and Computer Scienc...|$|R
