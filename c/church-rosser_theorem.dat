63|11|Public
25|$|If {{repeated}} {{application of}} the reduction steps eventually terminates then by the <b>Church-Rosser</b> <b>theorem</b> it will produce a beta normal form.|$|E
5000|$|... β-reduction of λ-terms is {{confluent}} by the <b>Church-Rosser</b> <b>theorem.</b>|$|E
50|$|The <b>Church-Rosser</b> <b>theorem</b> {{also holds}} for many {{variants}} of the lambda calculus, {{such as the}} simply-typed lambda calculus, many calculi with advanced type systems, and Gordon Plotkin's beta-value calculus. Plotkin also used a <b>Church-Rosser</b> <b>theorem</b> {{to prove that the}} evaluation of functional programs (for both lazy evaluation and eager evaluation) is a function from programs to values (a subset of the lambda terms).|$|E
40|$|We prove <b>Church-Rosser</b> <b>theorems</b> for non-symmetric {{transitive}} relations, quasiorderings and equations in Kleene algebra. Proofs are simple, {{rigorous and}} general, using solely algebraic {{properties of the}} regular operations. They are fixed point-based, induction-free and often amenable to automata. They are mere calculations as opposed to deduction and in particular suited to automation. In the Church-Rosser proofs for the -calculus, the term and algebra part are cleanly separated. In all our considerations, Kleene algebra is an excellent means of abstraction...|$|R
40|$|AbstractWe propose novel {{algebraic}} proof {{techniques for}} rewrite systems. <b>Church–Rosser</b> <b>theorems</b> and further fundamental statements {{that do not}} mention termination are proved in Kleene algebra. Certain reduction and transformation theorems for termination that depend on abstract commutation, cooperation or simulation properties are proved in an extension with infinite iteration. Benefits of the algebraic approach are simple concise calculational proofs by equational reasoning, connection with automata-based decision procedures and a natural formal semantics for rewriting diagrams. It is therefore especially suited for mechanization and automation...|$|R
40|$|This paper {{presents}} the proofs {{of the strong}} normalization, subject reduction, and <b>Church-Rosser</b> <b>theorems</b> for a presentation of the intuitionistic modal lambda calculus S 4. It is adapted from Healfdene Goguen's thesis, where these properties are shown for the simply-typed lambda calculus and for UTT. Following this method, we introduce the notion of typed operational semantics for our system. We define a notion of typed substitution for our system, which has context stacks instead of usual contexts. This latter peculiarity leads to the main difficulties and consequently to the main original features in our proofs. Since the original proof was extended to an inductive setting, we expect our proof could also be extended to a calculus with higher order abstract syntax and induction...|$|R
50|$|If {{repeated}} {{application of}} the reduction steps eventually terminates then by the <b>Church-Rosser</b> <b>theorem</b> it will produce a beta normal form.|$|E
50|$|If two lambda terms may {{be reduced}} to normal form then the <b>Church-Rosser</b> <b>theorem</b> {{may be used to}} show that they are equal if their normal forms are alpha convertible.|$|E
50|$|Alonzo Church (June 14, 1903 - August 11, 1995) was an American {{mathematician}} and logician {{who made}} major contributions to mathematical logic and {{the foundations of}} theoretical computer science. He {{is best known for}} the lambda calculus, Church-Turing thesis, proving the undecidability of the Entscheidungsproblem, Frege-Church ontology, and the <b>Church-Rosser</b> <b>theorem.</b>|$|E
40|$|This paper {{presents}} the proofs {{of the strong}} normalization, subject reduction, and <b>Church-Rosser</b> <b>theorems</b> for a presentation of the intuitionistic modal λ-calculus S 4. It is adapted from Healfdene Goguen's thesis, where these properties are shown for the simply typed λ-calculus and for Luo's type theory UTT. Following this method, we introduce the notion of typed operational semantics for our system. We define a notion of typed substitution for our system, which has context stacks {{instead of the usual}} contexts. This latter peculiarity leads to the main diculties and consequently to the main original features in our proofs. The techniques elaborated in this work have already been found useful in recent works [DL 98, DL 99] and should be further exploited to prove the properties of other systems based on modality...|$|R
40|$|We {{investigate}} {{the extension of}} non-strict functional languages like Haskell or Clean by a non-deterministic interaction with the external world. Using call-by-need and a natural semantics which describes the reduction of graphs, {{this can be done}} such that the <b>Church-Rosser</b> <b>Theorems</b> 1 and 2 hold. Our operational semantics is a base to recognise which particular equivalencies are preserved by program transformations. The amount of sequentialisation may be smaller than that enforced by other approaches and the programming style is closer to the common one of side-effecting programming. However, not all program transformations used by an optimising compiler for Haskell remain correct in all contexts. Our result can be interpreted as a possibility to extend current I/O-mechanism by non-deterministic deterministic memoryless function calls. For example, this permits a call to a random number generator. Adding memoryless function calls to monadic I/O is possible and has a potential to extend the Haskell I/O-system...|$|R
40|$|We {{develop a}} theory of syntax with bindings, {{focusing}} on: - methodological issues concerning the convenient representation of syntax; - techniques for recursive definitions and inductive reasoning. Our approach consists {{of a combination of}} FOAS (First-Order Abstract Syntax) and HOAS (Higher-Order Abstract Syntax) and tries {{to take advantage of the}} best of both worlds. The connection between FOAS and HOAS follows some general patterns and is presented as a (formally certified) statement of adequacy. We also develop a general technique for proving bisimilarity in process algebra. Our technique, presented as a formal proof system, is applicable to a wide range of process algebras. The proof system is incremental, in that it allows building incrementally an a priori unknown bisimulation, and pattern-based, in that it works on equalities of process patterns (i. e., universally quantified equations of process terms containing process variables), thus taking advantage of equational reasoning in a "circular" manner, inside coinductive proof loops. All the work presented here has been formalized in the Isabelle theorem prover. The formalization is performed in a general setting: arbitrary many-sorted syntax with bindings and arbitrary SOS-specified process algebra in de Simone format. The usefulness of our techniques is illustrated by several formalized case studies: - a development of call-by-name and call-by-value lambda-calculus with constants, including <b>Church-Rosser</b> <b>theorems,</b> connection with de Bruijn representation, connection with other Isabelle formalizations, HOAS representation, and contituation-passing-style (CPS) transformation; - a proof in HOAS of strong normalization for the polymorphic second-order lambda-calculus (a. k. a. System F). We also indicate the outline and some details of the formal development...|$|R
5000|$|John Barkley Rosser Sr. (December 6, 1907 - September 5, 1989) was an American logician, {{a student}} of Alonzo Church, and known {{for his part in}} the <b>Church-Rosser</b> <b>theorem,</b> in lambda calculus. He also {{developed}} what is now called the [...] "Rosser sieve", in number theory. He was later director of the Army Mathematics Research Center at the University of Wisconsin-Madison. Rosser also authored mathematical textbooks.|$|E
50|$|Shankar {{initially}} {{served as}} a research associate at Stanford University, from 1986 to 1988. In 1989, he joined SRI International's Computer Science Laboratory. While at SRI, he has used the Boyer-Moore theorem prover to prove metatheorems such as the tautology theorem, Godel's incompleteness theorem and the <b>Church-Rosser</b> <b>theorem.</b> He {{has contributed to the}} development of automated reasoning technology, deductive systems and computational engines, including the Prototype Verification System.|$|E
50|$|The {{staff at}} the center, {{at the time of}} the bombing, {{consisted}} of about 45 mathematicians, about 30 of them full-time. Rosser was well known for his research in pure mathematics, logic (Rosser's trick, the Kleene-Rosser paradox, and the <b>Church-Rosser</b> <b>theorem)</b> and in number theory (Rosser sieve). Rosser had been the head of the U.S. ballistics program during World War II and also had contributed to research on several missiles used by the U.S. military.|$|E
40|$|A {{model is}} defined in which {{questions}} concerning delay bounded asynchronous parallel systems may be investigated. It is shown that synchronization problems, similar to the “firing squad synchronization problem”, cannot be solved by delay bounded asynchronous systems. Three conditions called persistence, determinacy, and single change are introduced. These conditions are shown to be sufficient to guarantee that a synchronous execution policy can be relaxed to an asynchronous execution policy with no change to {{the result of the}} computation. This is a <b>Church-Rosser</b> type <b>theorem,</b> but in addition, the asynchronous execution time is shown to be only (D+ 1) times the synchronous execution time where D is the delay bound. Finally, a wide class of recognition problems is identified which can be solved by linear asynchronous structures...|$|R
50|$|Twenty years later, Crank and Felleisen {{showed how}} to scale Plotkin's work to {{languages}} with imperative assignment statements. They define calculi for a language with variables, functions, function application and assignment statement that capture the conventional notions of parameter passing and evaluation strategies {{of a wide}} array of programming languages. They show that each calculus satisfies Plotkin's criteria, including traditional <b>Church-Rosser</b> and Curry-Feys <b>theorems</b> respectively. In addition, they introduce a calculus that reifies ML's notion of reference cell.|$|R
40|$|AbstractThe {{syntactic}} {{theories of}} control and state are conservative extensions of the λυ-calculus for equational reasoning about imperative programming facilities in higher-order languages. Unlike the simple λυ-calculus, the extended theories are mixtures of equivalence relations and compatible congruence relations on the term language, which significantly complicates the reasoning process. In this paper we develop fully compatible equational theories of the same imperative higher-order programming languages. The new theories subsume the original calculi {{of control and}} state and satisfy the usual <b>Church–Rosser</b> and Standardization <b>Theorems.</b> With the new calculi, equational reasoning about imperative programs becomes as simple as reasoning about functional programs...|$|R
50|$|In {{mathematics}} and theoretical computer science, the <b>Church-Rosser</b> <b>theorem</b> states that, when applying reduction rules to {{terms in the}} lambda calculus, the ordering in which the reductions are chosen {{does not make a}} difference to the eventual result. More precisely, if there are two distinct reductions or sequences of reductions that {{can be applied to the}} same term, then there exists a term that is reachable from both results, by applying (possibly empty) sequences of additional reductions. The theorem was proved in 1936 by Alonzo Church and J. Barkley Rosser, after whom it is named.|$|E
5000|$|The theorem is {{symbolized by}} the diagram at right: if term a {{can be reduced to}} both b and c, then there must be a further term d (possibly equal to either b or c) to which both b and c can be reduced.Viewing the lambda {{calculus}} as an abstract rewriting system, the <b>Church-Rosser</b> <b>theorem</b> states that the reduction rules of the lambda calculus are confluent. As a consequence of the theorem, a term in the lambda calculus has at most one normal form, justifying reference to [...] "the normal form" [...] of a given normalizable term.|$|E
5000|$|An ARS is said {{to possess}} the Church-Rosser {{property}} {{if and only if}} [...] implies [...] In words, the Church-Rosser property means that any two equivalent objects are joinable. Alonzo Church and J. Barkley Rosser proved in 1936 that lambda calculus has this property; hence the name of the property. (The fact that lambda calculus has this property is also known as the <b>Church-Rosser</b> <b>theorem.)</b> In an ARS with the Church-Rosser property the word problem may be reduced to the search for a common successor. In a Church-Rosser system, an object has at most one normal form; that is the normal form of an object is unique if it exists, but it may well not exist.|$|E
40|$|Parallel and {{sequential}} independence {{are central}} concepts in the concurrency {{theory of the}} double pushout (dpo) approach to graph rewriting. However, so far those same notions were missing for dpo rewriting extended with borrowed contexts (dpobc), a formalism used for equipping dpo derivations with labels and introduced for modeling open systems that interact with the environment. In this work we propose the definition of parallel and sequential independence for dpobc rewriting, and we prove that these novel notions allow generalizing the <b>Church-Rosser</b> and parallelism <b>theorems</b> holding for dpo rewriting. Most importantly, we show that the dpobc version of these theorems still guarantees the local confluence and the parallel execution of pairs of independent dpobc derivations...|$|R
50|$|Plotkin {{showed in}} 1973, however, that a proper model of an {{evaluation}} strategy {{calls for the}} formulation of a new axiom for function calls, that is, an entirely new calculus. He validates this idea with two different calculi: one for call-by-name and another one for call-by-value, each for purely functional programming languages. He also shows that such a calculus satisfies two natural criteria. First, a calculus defines an evaluation function that maps closed terms (representations of programs) to answers (representations of outputs). This theorem relies on a conventional <b>Church-Rosser</b> <b>theorem</b> for the modified calculus. The evaluation function is defined via the traditional Curry-Feys standardization theorem. Second, the calculus is a sound equational reasoning system with respect to Morris's notion of observational equivalence.|$|E
5000|$|An ARS is said {{to possess}} the Church-Rosser {{property}} {{if and only if}} [...] implies [...] for all objects x, y. Equivalently, the Church-Rosser property means that the reflexive transitive symmetric closure is contained in the joinability relation. Alonzo Church and J. Barkley Rosser proved in 1936 that lambda calculus has this property; hence the name of the property. (The fact that lambda calculus has this property is also known as the <b>Church-Rosser</b> <b>theorem.)</b> In an ARS with the Church-Rosser property the word problem may be reduced to the search for a common successor. In a Church-Rosser system, an object has at most one normal form; that is the normal form of an object is unique if it exists, but it may well not exist. In lambda calculus for instance, the expression (λx.xx)(λx.xx) does not have a normal form because there exists an infinite sequence of beta reductions (λx.xx)(λx.xx) → (λx.xx)(λx.xx) → ...|$|E
40|$|Projet PARAWe {{introduce}} {{a notion of}} Combinatory Reduction Systems (CRSs) by extending the notion of Term Rewriting Systems (TRSs) with variable-binding and substitution mechanisms, define orthogonal CRSs (OCRSs) and prove a strict version of the <b>Church-Rosser</b> <b>theorem</b> for all OCRSs. Our notion of OCRSs is almost equivalent to that of Klop, Kennaway and Van Raamsdonk. Different proofs of the <b>Church-Rosser</b> <b>theorem</b> are in Klop and in Van Raamsdonk...|$|E
40|$|Abstract calculi (tree {{transformation}} systems, term rewriting systems) express computational {{processes by}} transformation rules operating on abstract structures (trees). They have applications to functional programming, logic programming, equational programming, productions systems and language processors. We present {{proof of the}} <b>Church-Rosser</b> <b>Theorem</b> for a wide, useful class of abstract calculi. This theorem implies that terminating reductions always yield a unique reduced form in these calculi, which has the practical result that transformation rules can be safely applied in any order, or even in parallel. Although this result has previously been established for certain classes of abstract calculi, our proof is much simpler than previous proofs {{because it is an}} adaption of Rosser's new (1982) proof of the <b>Church-Rosser</b> <b>Theorem</b> for the lambda calculusPrepared for: Chief of Naval Research[URL]...|$|E
40|$|This book chapter {{establishes}} {{connections between}} the interactive proof tool Isabelle and classical tableau and resolution technology. Isabelle's classical reasoner is described and demonstrated by an extended case study: the <b>Church-Rosser</b> <b>theorem</b> for combinators. Compared with other interactive theorem provers, Isabelle's classical reasoner achieves {{a high degree of}} automation...|$|E
40|$|Abstract. The <b>Church–Rosser</b> <b>theorem</b> {{states that}} the λ-calculus is {{confluent}} under β-reductions. The standard proof of this result is due to Tait and Martin-Löf. In this note, we present an alternative proof based {{on the notion of}} acceptable orderings. The technique is easily modified to give confluence of the βη-calculus. Keywords: lambda-calculus, confluence, Church–Rosser theore...|$|E
40|$|AbstractAn {{existence}} theorem of pushout-complements {{is given}} in an elementary topos by using category theory of binary relations, called relational calculus, {{and it is also}} shown more explicitly in the category of directed graphs, which is a typical example of toposes, as an application. Moreover an embedding theorem and <b>Church-Rosser</b> <b>theorem</b> on grammars (derivations) in a topos are proved...|$|E
40|$|AbstractThe {{notion of}} {{parallel}} reduction is {{extracted from the}} Tait-Martin-Löf proof of the <b>Church-Rosser</b> <b>theorem</b> (for β-reduction). We define parallel β-, η- and βη-reduction by induction, {{and use them to}} give simple proofs of some fundamental theorems in λ-calculus; the normal reduction theorem for β-reduction, that for βη-reduction, the postponement theorem of η-reduction (in βη-reduction), and some others...|$|E
40|$|The <b>Church-Rosser</b> <b>theorem</b> {{states that}} the lambda-calculus is {{confluent}} under alpha- and beta-reductions. The standard proof of this result is due to Tait and Martin-Loef. In this note, we present an alternative proof based {{on the notion of}} acceptable orderings. The technique is easily modified to give confluence of the beta-eta-calculus. National Science Foundation CCF- 063502...|$|E
40|$|We {{present a}} proof {{technique}} in *-calculus that can facilitate inductive reasoning on *-terms by separating certain fi-developments from other fi-reductions. We give proofs {{based on this}} technique for several fundamental theorems in *-calculus such as the <b>Church-Rosser</b> <b>theorem,</b> the standardization theorem, the conservation theorem and the normalization theorem. The appealing features of these proofs lie in their inductive styles and perspicuities...|$|E
40|$|This {{is a set}} of {{lecture notes}} for the course “Mathematical Foundations of Computation”, which I taught at the University of Ottawa in Fall 2001. Topics covered in these notes include the untyped lambda calculus, the <b>Church-Rosser</b> <b>theorem,</b> the simply-typed lambda calculus, the Curry-Howard isomorphism, weak and strong normalization, type inference, denotational semantics, {{complete}} partial orders, and the language PCF. Contents...|$|E
40|$|It is {{well known}} that there are {{problems}} with the labelled syntax in Church-style type assignment to lambda-terms, the syntax in which the types of bound variables are indicated, as in λx : #. M, since if #-reduction is added then the <b>Church-Rosser</b> <b>Theorem</b> fails in general (although it has been proved for some common systems of type assignment). In this paper, the labelled syntax is interpreted in the standard syntax of Curry-style type assignment by means of a constant Label, so that λx : #. M is taken as an abbreviation for Label#(λx. M). The constant Label can be defined as a closed term, so that the labelled syntax is ultimately interpreted in a syntax for which the <b>Church-Rosser</b> <b>Theorem</b> is known to hold for both #-reduction and #-reduction. This interpretation is carried through for three well known systems of type assignment: ordinary type assignment, the second-order polymorphic typed lambda-calculus, and the calculus of constructions. These cases illustrate the general [...] ...|$|E
40|$|The <b>Church-Rosser</b> <b>theorem</b> in the type-free lambda-calculus is well {{investigated}} {{both for}} beta-equality and beta-reduction. We provide a new {{proof of the}} theorem for beta-equality with no use of parallel reductions, but simply with Takahashi's translation (Gross-Knuth strategy). Based on this, upper bounds for reduction sequences on the theorem are obtained as the fourth level of the Grzegorczyk hierarchy. Comment: In Proceedings WPTE 2016, arXiv: 1701. 0023...|$|E
40|$|AbstractThis paper {{develops}} the <b>Church-Rosser</b> <b>theorem</b> for the rewriting system CCLβ on type-free categorial combinators introduced by Curien. The system CCLβ is not confluent. However {{we show that}} there are various sets D of categorical combinator terms such that each D satisfies the following two conditions: (1) D is closed under reduction by CCLβ; (2) CCLβ is confluent on D. Moreover we examine the relation among these sets...|$|E
