1638|3224|Public
5|$|Parallel {{computers}} can be roughly classified {{according to the}} level at which the hardware supports parallelism, with multi-core and multi-processor computers having multiple processing elements within a single machine, while clusters, MPPs, and grids use multiple computers to work on the same task. Specialized parallel <b>computer</b> <b>architectures</b> are sometimes used alongside traditional processors, for accelerating specific tasks.|$|E
5|$|<b>Computer</b> <b>architectures</b> {{in which}} each element of main memory can be {{accessed}} with equal latency and bandwidth are known as uniform memory access (UMA) systems. Typically, {{that can be achieved}} only by a shared memory system, in which the memory is not physically distributed. A system that does not have this property is known as a non-uniform memory access (NUMA) architecture. Distributed memory systems have non-uniform memory access.|$|E
5|$|Integer sorting {{algorithms}} including pigeonhole sort, counting sort, and radix sort {{are widely}} used and practical. Other integer sorting algorithms with smaller worst-case time bounds are not believed to be practical for <b>computer</b> <b>architectures</b> with 64 or fewer bits per word. Many such algorithms are known, with performance depending {{on a combination of}} the number of items to be sorted, number of bits per key, and number of bits per word of the computer performing the sorting algorithm.|$|E
5000|$|<b>Computer</b> <b>Architecture,</b> Advanced Topics (Wie <b>Computer</b> <b>Architecture</b> Advanced Topics) (Volume 2), 1989, ...|$|R
5000|$|ACM SIGARCH is the Association for Computing Machinery's Special Interest Group on <b>computer</b> <b>architecture,</b> a {{community}} of computer professionals and students from academia and industry involved in research and professional practice related to <b>computer</b> <b>architecture</b> and design. [...] The organization sponsors many prestigious international conferences in this area, including the International Symposium on <b>Computer</b> <b>Architecture</b> (ISCA), recognized as the top conference in this area since 1975. Together with IEEE Computer Society's Technical Committee on <b>Computer</b> <b>Architecture</b> (TCCA), {{it is one of}} the two main professional organizations for people working in <b>computer</b> <b>architecture.</b>|$|R
50|$|The International Symposium on <b>Computer</b> <b>Architecture</b> (ISCA) is {{an annual}} {{academic}} conference on <b>computer</b> <b>architecture,</b> generally {{viewed as the}} top-tier in the field. Association for Computing Machinery's Special Interest Group on <b>Computer</b> <b>Architecture</b> (ACM SIGARCH) and Institute of Electrical and Electronics Engineers Computer Society are technical sponsors.|$|R
5|$|The single-instruction-single-data (SISD) {{classification}} {{is equivalent}} to an entirely sequential program. The single-instruction-multiple-data (SIMD) classification is analogous to doing the same operation repeatedly over a large data set. This is commonly done in signal processing applications. Multiple-instruction-single-data (MISD) is a rarely used classification. While <b>computer</b> <b>architectures</b> {{to deal with this}} were devised (such as systolic arrays), few applications that fit this class materialized. Multiple-instruction-multiple-data (MIMD) programs are by far {{the most common type of}} parallel programs.|$|E
5|$|Computer systems {{make use}} of caches—small and fast {{memories}} located close to the processor which store temporary copies of memory values (nearby in both the physical and logical sense). Parallel computer systems have difficulties with caches that may store the same value {{in more than one}} location, with the possibility of incorrect program execution. These computers require a cache coherency system, which keeps track of cached values and strategically purges them, thus ensuring correct program execution. Bus snooping {{is one of the most}} common methods for keeping track of which values are being accessed (and thus should be purged). Designing large, high-performance cache coherence systems is a very difficult problem in computer architecture. As a result, shared memory <b>computer</b> <b>architectures</b> do not scale as well as distributed memory systems do.|$|E
5|$|On {{the other}} hand, {{extraterrestrial}} civilizations with malicious intent could send {{information that could}} enable human civilization to destroy itself, such as powerful computer viruses or {{information on how to}} make extremely potent weapons that humans would not yet be able to use responsibly. While the motives for such an action are unknown, it would require minimal energy use {{on the part of the}} extraterrestrials. According to Musso, however, computer viruses in particular will be nearly impossible unless extraterrestrials possess detailed knowledge of human <b>computer</b> <b>architectures,</b> which would only happen if a human message sent to the stars were protected with little thought to security. Even a virtual machine on which extraterrestrials could run computer programs could be designed specifically for the purpose, bearing little relation to computer systems commonly used on Earth. In addition, humans could send messages to extraterrestrials detailing that they do not want access to the Encyclopædia Galactica until they have reached a suitable level of technological advancement, thus mitigating harmful impacts of extraterrestrial technology.|$|E
5000|$|There {{are other}} types of <b>computer</b> <b>architecture.</b> The {{following}} types are used in bigger companies like Intel, and count for 1% of all of <b>computer</b> <b>architecture</b> ...|$|R
50|$|LinuxBBQ {{offers a}} plethora of {{different}} releases, {{some of which are}} supported for the i686 <b>computer</b> <b>architecture,</b> others for the amd64 <b>computer</b> <b>architecture,</b> and yet others for both.|$|R
40|$|Most {{computer}} science, {{information systems}} and engineering programs {{have two or}} more <b>computer</b> <b>architecture</b> courses but lack suitable active learning and design experience in the classroom. <b>Computer</b> <b>architecture</b> at the intermediate level {{should focus on the}} implementation of basic programming constructs in different instruction set architectures. To accommodate such features we developed an undergraduate <b>computer</b> <b>architecture</b> course with hands-on classroom activities, laboratories and web based assignments. To assess the course we distributed the course modules among 200 <b>computer</b> <b>architecture</b> instructors. This paper describes our experience in developing active learning course modules. 1...|$|R
25|$|An MMU {{effectively}} performs {{virtual memory}} management, handling {{at the same}} time memory protection, cache control, bus arbitration and, in simpler <b>computer</b> <b>architectures</b> (especially 8-bit systems), bank switching.|$|E
25|$|Unix-like systems {{run on a}} {{wide variety}} of <b>computer</b> <b>architectures.</b> They are used heavily for servers in business, as well as {{workstations}} in academic and engineering environments. Free UNIX variants, such as Linux and BSD, are popular in these areas.|$|E
25|$|An {{efficient}} and {{simple way to}} provide hardware support of capabilities is to delegate the MMU the responsibility of checking access-rights for every memory access, a mechanism called capability-based addressing. Most commercial <b>computer</b> <b>architectures</b> lack such MMU support for capabilities.|$|E
5000|$|Divisions:Electronics and <b>Computer</b> <b>Architecture,</b> <b>Computer</b> Science, Control Systems, Telecommunications ...|$|R
50|$|In {{the early}} 1970's, {{he was the}} {{founding}} chairman of IEEE Computer Society's Technical Committee on <b>Computer</b> <b>Architecture</b> (TCCA) and Association for Computing Machinery's Special Interest Group on <b>Computer</b> <b>Architecture,</b> ACM SIGARCH (initially SICARCH). Flynn encouraged from the beginning, joint cooperation {{between the two groups}} which now sponsors many leading joint symposiums and conferences like ACM/IEEE International Symposium on <b>Computer</b> <b>Architecture</b> (ISCA).|$|R
40|$|<b>Computer</b> <b>architecture</b> embraces a {{tremendous}} number of ever-changing inter-connected concepts and information, yet <b>computer</b> <b>architecture</b> education is very often static, seemingly motionless. <b>Computer</b> <b>architecture</b> is commonly taught using simple piecewise methods of explaining how the hardware performs a given task, rather than characterizing {{the interaction of}} software and hardware. Visualization tools allow students to interactively explore basic concepts in <b>computer</b> <b>architecture</b> but are limited in their ability to engage students in research and design concepts. Likewise as the development of simulation models such as caches, branch predictors, and pipelines aid student understanding of architecture components, such models have limitations in the workloads that can be examined because of issues with execution time and environment. Overall, to effectively understand modern architectures, it is simply essential to experiment the characteristics of real application workloads. Likewise, understanding program behavior is necessary to effective programming, comprehension of architecture bottlenecks, and hardware design. <b>Computer</b> <b>architecture</b> education must include experience in analyzing program behavior and workload characteristics using effective tools. To explore workload characteristic analysis in <b>computer</b> <b>architecture</b> design, we propose using PIN, a binary instrumentation tool for <b>computer</b> <b>architecture</b> research and education projects. ...|$|R
25|$|In computing, channel I/O is a {{high-performance}} input/output (I/O) architecture that is implemented {{in various forms}} {{on a number of}} <b>computer</b> <b>architectures,</b> especially on mainframe computers. In the past, channels were generally implemented with custom processors, variously named channel, peripheral processor, I/O processor, I/O controller, or DMA controller.|$|E
25|$|These {{devices are}} {{intended}} for applications in nanoelectronic memories, computer logic and neuromorphic/neuromemristive <b>computer</b> <b>architectures.</b> In 2013, Hewlett-Packard CTO Martin Fink suggested that commercial availability of memristor memory could arrive as early as 2018. In March 2012, {{a team of researchers}} from HRL Laboratories and the University of Michigan announced the first functioning memristor array built on a CMOS chip.|$|E
25|$|From {{the late}} 1960s {{through the late}} 1970s, several {{hardware}} capabilities evolved that allowed similar or ported software to run {{on more than one}} system. Early systems had utilized microprogramming to implement features on their systems in order to permit different underlying <b>computer</b> <b>architectures</b> to appear to be the same as others in a series. In fact, most 360s after the 360/40 (except the 360/165 and 360/168) were microprogrammed implementations.|$|E
40|$|The <b>Computers</b> <b>Architecture</b> {{hyperdocument}} {{was developed}} to support students learning. It has two main parts: the first one, the initiation level, focuses on <b>computers</b> <b>architecture</b> contents, and the second one, the advanced level, is organised according to Cognitive Flexibility Theory. This paper presents Cognitive Flexibility Theory and its application to the hyperdocument <b>Computers</b> <b>Architecture.</b> Then, it describes the hyperdocument and the usability tests conducted...|$|R
50|$|Wulf's {{research}} has also included <b>computer</b> <b>architecture,</b> <b>computer</b> security, and hardware-software codesign.|$|R
5000|$|Decentralized : Human {{resources}} <b>architecture,</b> <b>Computer</b> <b>architecture,</b> User-computing architecture, and Systems architecture.|$|R
25|$|The {{number of}} <b>computer</b> <b>architectures</b> and {{operating}} systems supported has expanded significantly since its first release. The first release supported UNIX systems, such as Linux, SGI IRIX and HP-UX. Since the initial release, GIMP has been ported to many operating systems, including Microsoft Windows and macOS; the original port to the Windows 32-bit platform {{was started by}} Finnish programmer Tor M. Lillqvist (tml) in 1997 and was supported in the GIMP 1.1 release.|$|E
25|$|As the {{computer}} kernel grows, so grows {{the size and}} vulnerability of its trusted computing base; and, besides reducing security, there {{is the problem of}} enlarging the memory footprint. This is mitigated to some degree by perfecting the virtual memory system, but not all <b>computer</b> <b>architectures</b> have virtual memory support. To reduce the kernel's footprint, extensive editing has to be performed to carefully remove unneeded code, which can be very difficult with non-obvious interdependencies between parts of a kernel with millions of lines of code.|$|E
25|$|Blaise Pascal (1623–1662) {{invented the}} {{mechanical}} calculator in 1642. The introduction of his Pascaline in 1645 launched {{the development of}} mechanical calculators first in Europe and then all over the world. Gottfried Leibniz (1646–1716), building on Pascal's work, {{became one of the}} most prolific inventors in the field of mechanical calculators; he was the first to describe a pinwheel calculator, in 1685, and invented the Leibniz wheel, used in the arithmometer, the first mass-produced mechanical calculator. He also refined the binary number system, foundation of virtually all modern <b>computer</b> <b>architectures.</b>|$|E
50|$|Krste Asanović {{from the}} University of California, Berkeley, CA was named Fellow of the Institute of Electrical and Electronics Engineers (IEEE) in 2014 for {{contributions}} to <b>computer</b> <b>architecture.</b> He has authored and co-authored many academic papers concerning <b>computer</b> <b>architecture.</b>|$|R
40|$|High-Level Language <b>Computer</b> <b>Architecture</b> {{offers a}} {{tutorial}} on high-level language <b>computer</b> <b>architecture,</b> including von Neumann architecture and syntax-oriented architecture {{as well as}} direct and indirect execution architecture. Design concepts of Japanese-language data processing systems are discussed, along with the architecture of stack machines and the SYMBOL computer system. The conceptual design of a direct high-level language processor is also described. Comprised of seven chapters, this book first presents a classification of high-level language <b>computer</b> <b>architecture</b> according to the p...|$|R
50|$|Word-addressable is a <b>computer</b> <b>architecture</b> term.|$|R
25|$|The Linux kernel is {{a widely}} ported {{operating}} system kernel, available for devices ranging from mobile phones to supercomputers; it runs on a highly diverse range of <b>computer</b> <b>architectures,</b> including the hand-held ARM-based iPAQ and the IBM mainframes System z9 or System z10. Specialized distributions and kernel forks exist for less mainstream architectures; for example, the ELKS kernel fork can run on Intel 8086 or Intel 80286 16-bit microprocessors, while the µClinux kernel fork may run on systems without a memory management unit. The kernel also runs on architectures that were only ever intended to use a manufacturer-created operating system, such as Macintosh computers (with both PowerPC and Intel processors), PDAs, video game consoles, portable music players, and mobile phones.|$|E
25|$|Most Courant PhD {{students}} are fully funded and are paid with a 9-month stipend. Doctoral students take advanced courses in their areas of specialization, {{followed by a}} period of research and the preparation and defense of the doctoral thesis. Courant Students in Ph.D. programs may earn a master's degree while in progress toward the Ph.D program. Areas where there are special funding opportunities for graduate students include: Mathematics, Mechanics, and Material Sciences, Number Theory, Probability, and Scientific Computing. All PhD candidates {{are required to take}} a written comprehensive examination, oral preliminary examination, and create a dissertation defense. Each supported doctoral student has access to his or her own dedicated Unix workstation. Many other research machines provide for abundant access to a variety of <b>computer</b> <b>architectures,</b> including a distributed computing laboratory.|$|E
25|$|During its lifetime, several {{competing}} products were released for the x86 platform, and MS-DOS went through eight versions, until development ceased in 2000. Initially MS-DOS was targeted at Intel 8086 processors running on computer hardware using floppy disks to store and access {{not only the}} operating system, but application software and user data as well. Progressive version releases delivered support for other mass storage media in ever greater sizes and formats, along with added feature support for newer processors and rapidly evolving <b>computer</b> <b>architectures.</b> Ultimately it was the key product in Microsoft's growth from a programming languages company to a diverse software development firm, providing the company with essential revenue and marketing resources. It was also the underlying basic operating system on which early versions of Windows ran as a GUI. It is a flexible operating system, and consumes negligible installation space.|$|E
40|$|In a {{multi-core}} era, {{parallel programming}} allows further performance improvements, {{but with an}} important programmability cost. We envision that the best approach to parallel programming that can exceed the programability, parallelism, power, memory and reliability walls in <b>Computer</b> <b>Architecture</b> is a run-time approach. Many traditional <b>computer</b> <b>architecture</b> concepts can be revisited and applied at the runtime layer in a completely transparent way to the programmer. The goal of this work is taking the <b>computer</b> <b>architecture</b> value prediction and data-prefetching concepts inside a runtime environment like OmpSs...|$|R
5000|$|CANOS (<b>Computer</b> <b>Architecture,</b> Networks and Operating Systems) ...|$|R
5000|$|<b>Computer</b> <b>architecture,</b> networks, {{parallel}} {{and distributed}} computing ...|$|R
