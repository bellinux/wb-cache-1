0|10000|Public
5000|$|The {{etymology}} of {{the phrase}} [...] "database application" [...] comes from the practice of dividing computer software into systems programs, such as the operating system, compilers, the file system, and tools such as the database management system, and application programs, such as a payroll <b>check</b> <b>processor.</b> <b>On</b> a standard PC running Microsoft Windows, for example, the Windows operating system contains all of the systems programs while games, word processors, spreadsheet programs, photo editing programs, etc. would be application programs. As [...] "application" [...] is short for [...] "application program", [...] "database application" [...] is short for [...] "database application program".|$|R
30|$|Recently {{released}} Intel processors {{have been}} equipped with hardware instruction tracing facilities to securely and efficiently record the program execution path. In this paper, we study {{a case for}} data integrity <b>checking</b> based <b>on</b> Intel <b>Processor</b> Trace (Intel PT), the instruction tracing facility <b>on</b> x 86 <b>processors.</b> We incorporate software instrumentation and hardware instruction tracing to guarantee fine-grained data integrity without frequently switching the processor mode. We incorporate the idea in a system named DTrace which provides primitives to instruct Intel PT to capture the data load and store events, even current Intel PT implementations only record control transfers. The trace is analyzed before the program makes security-sensitive operations. We apply DTrace in several case studies {{to show that the}} primitives that DTrace provides are easy to use and help to enhance data integrity in applications. We further evaluate DTrace with several microbenchmarks to show the time cost that DTrace’s data tracing operation incurs. We also evaluate DTrace on Nginx to show the performance impact when Nginx is enhanced in security to provide the integrity during the runtime execution for programmer-defined security sensitive data. We find the performance overhead that DTrace incurs for the data tracing is moderate.|$|R
50|$|Since ILNumerics {{comes as}} a CLI assembly, it targets Common Language Infrastructure (CLI) applications. Just like Java - those {{frameworks}} are often criticized for not being suitable for numerical computations. Reasons are the memory management by a garbage collector, the intermediate language execution and deficient optimizations by the compilers involved. ILNumerics approaches these limitations by performing loop unrolling, removal of bound <b>checks</b> <b>on</b> array accesses and cache optimizations. Further speed-up is gained by the auto-management of the memory of large array objects. Numerical operations are parallelized on multicore systems. Linear algebra routines rely <b>on</b> <b>processor</b> specific optimized versions of LAPACK and BLAS.|$|R
40|$|AbstractA new {{parallel}} algorithm for {{updating the}} {{minimum spanning tree}} of an n-vertex graph following {{the addition of a}} new vertex is presented. The algorithm runs in O(log n) time using <b>O(n)</b> <b>processors</b> <b>on</b> a concurrent-read-exclusive-write parallel random access machine. The algorithm is superior to previous algorithms on this model, that either obtain O(log n) time performance using <b>O(n</b> 2) <b>processors,</b> or employ <b>O(n)</b> <b>processors</b> but have a time complexity of O(log 2 n) ...|$|R
25|$|Since 1997, the Irish {{government}} has imposed systematic identity <b>checks</b> <b>on</b> air passengers {{coming from the}} United Kingdom and selective <b>checks</b> <b>on</b> sea passengers, and occasional <b>checks</b> <b>on</b> land crossings.|$|R
40|$|We present {{efficient}} parallel algorithms {{for solving}} two graph layout problems: Find a F'ary Embedding on a grid and construct a rectangular dual for planar graphs. The algorithm {{for the first}} problem takes O(log n log n) time with <b>O(n)</b> <b>processors</b> <b>on</b> a PRAM. The algorithm for the second problem takes O(log 2 n) time with <b>O(n)</b> <b>processors...</b>|$|R
5000|$|Home Visits to <b>check</b> <b>on</b> {{progress}} {{and keep a}} <b>check</b> <b>on</b> defaults in psychiatric reviews.|$|R
50|$|An {{option on}} the Burroughs B5000 was “Processor B”. This second processor, unlike “Processor A” had no {{connection}} to the peripherals, though the two processors shared main memory, and Processor B could not run in Control State. The operating system ran only <b>on</b> <b>Processor</b> A. When there was a user job to be executed, it might be run <b>on</b> <b>Processor</b> B, but when that job tried to access the operating system the processor halted and signaled Processor A. The requested operating system service was then run <b>on</b> <b>Processor</b> A.|$|R
50|$|When {{a player}} gives a <b>check</b> <b>on</b> the first move, he loses the second move of his turn. If a player is in check, he must {{move out of}} <b>check</b> <b>on</b> the first move of the turn. It {{is not allowed to}} move the king into the <b>check</b> <b>on</b> the first move of the turn and then move out of the <b>check</b> <b>on</b> the second one.|$|R
40|$|AbstractThis paper {{presents}} an efficient parallel algorithm for constructing maximal independent set in planar graphs. The algorithm runs in O(log 2 n) time with <b>O(n)</b> <b>processors</b> <b>on</b> a PRAM and is within an O(log 2 n) factor of optimal. The best previously known algorithm for this problem takes O(log 2 n) time with <b>O(n</b> 3) <b>processors.</b> The key subroutine of the algorithm is an O(logn) time, <b>O(n)</b> <b>processor</b> parallel algorithm for constructing a maximal independent {{set in a}} one-page planar graph. This subroutine may be of independent interest...|$|R
6000|$|... "We risk it," [...] {{answered}} Barker, with {{a perfect}} placidity. [...] "Suppose he is a tyrant--he is still a <b>check</b> <b>on</b> a hundred tyrants. Suppose he is a cynic, it is to his interest to govern well. Suppose he is a criminal--by removing poverty and substituting power, we put a <b>check</b> <b>on</b> his criminality. In short, by substituting despotism we have put a total <b>check</b> <b>on</b> one criminal and a partial <b>check</b> <b>on</b> all the rest." ...|$|R
50|$|First, {{biometric}} <b>checks</b> <b>on</b> EEA nationals and Warnings Index <b>checks</b> <b>on</b> EEA national {{children were}} abandoned {{on a regular}} basis, without ministerial approval.|$|R
40|$|Title from folder labelProject {{report form}} no. 1 dated August 25, 1971. Effects of {{modification}} of the illuminating and viewing system of the GERS-RF to meet more closely the specifications for the measurement of opacity / L. Dearth [...] Project report form no. 2 dated May 21, 1973. <b>Check</b> <b>on</b> the opacity scale / L. Dearth, W. Shillcox [...] Project report form no. 3 dated October 11, 1973. <b>Check</b> <b>on</b> the opacity scale / L. Dearth [...] Project report form no. 4 dated April 9, 1974. <b>Check</b> <b>on</b> the opacity scale / R. Gertz [...] Quarterly research report dated Oct. 11, 1974. [...] Quarterly research report dated January 20, 1975. [...] Project report form no. 5 dated October 1, 1975. <b>Check</b> <b>on</b> the opacity scale / R. Gertz. [...] Project report form no. 6 dated August 26, 1976. <b>Check</b> <b>on</b> the opacity scale / R. Gertz [...] Project report form no. 7 dated August 26, 1977. <b>Check</b> <b>on</b> the opacity scale / R. Gertz [...] Project report form no. 8 dated August 4, 1978. R. Gertz. <b>Check</b> <b>on</b> the opacity scale / R. Gertz [...] Project report form no. 9 dated August 29, 1979. <b>Check</b> <b>on</b> the opacity scale / R. Gertz...|$|R
5000|$|PC-MOS/386: a later {{version of}} PC-MOS using {{features}} not present <b>on</b> <b>processors</b> {{prior to the}} 80386.|$|R
30|$|Tree {{size and}} species {{were found to}} {{interact}} with the effects of extended working hours <b>on</b> <b>processors</b> and harvesters, respectively. Extending working hours had a larger effect <b>on</b> <b>processor</b> productivity for large trees than for small trees. Productivity impacts were also larger for harvesters working in E. globulus stands than in E. nitens stands. We know of no other studies that have reported these interactions.|$|R
50|$|Many {{motherboards}} feature firmware {{and software}} that regulates these fans based <b>on</b> <b>processor</b> and computer case temperatures.|$|R
50|$|SQL Server 2016 is {{supported}} <b>on</b> x64 <b>processors</b> only. It {{is no longer}} supported <b>on</b> x86 <b>processors.</b>|$|R
50|$|It is {{implemented}} in ANSI C, but {{can take advantage}} of SIMD multimedia instructions <b>on</b> various <b>processors</b> to gain a significant performance boost. It was originally designed to leverage VIS <b>on</b> SPARC <b>processors</b> and later added support for MMX/SSE/SSE2 <b>on</b> Intel/AMD <b>processors.</b>|$|R
5000|$|Kernel-based Virtual Machine, (or KVM) a {{virtualization}} infrastructure. KVM supports native virtualization <b>on</b> <b>processors</b> with hardware virtualization extensions.|$|R
5000|$|Initially, memory {{locations}} [...] and [...] both {{hold the}} value [...] The program running <b>on</b> <b>processor</b> #1 loops while {{the value of}} [...] is zero, then it prints the value of [...] The program running <b>on</b> <b>processor</b> #2 stores the value [...] into [...] and then stores the value [...] into [...] Pseudo-code for the two program fragments is shown below. The steps of the program correspond to individual processor instructions.|$|R
5000|$|Front Side Bus: 667 MHz to 800 MHz (dependent <b>on</b> <b>processor</b> model); The T5550 {{is limited}} to 667 MHz.|$|R
50|$|Windows 8 {{and later}} {{releases}} will only run <b>on</b> <b>processors</b> which support PAE, {{in addition to}} NX and SSE2.|$|R
50|$|The company {{applied for}} patents, {{encompassing}} parallel execution queries <b>on</b> multi-core <b>processors</b> and speeding up parallel execution <b>on</b> vector <b>processors.</b>|$|R
5000|$|CoreMark {{results can}} be found on the CoreMark web site, and <b>on</b> <b>processor</b> data sheets. Results are in the {{following}} format: ...|$|R
40|$|International audienceWe {{consider}} parallel prefix computation <b>on</b> <b>processors</b> {{of different}} and possibly changing speeds. Extending previous works <b>on</b> identical <b>processors,</b> we provide a lower bound for this problem. We {{introduce a new}} adaptive algorithm {{which is based on}} the on-line recursive coupling of an optimal sequential algorithm and a parallel one, non-optimal but recursive and fine-grain. The coupling relies on a work-stealing scheduling. Its theoretical performance is analysed <b>on</b> p <b>processors</b> of different and changing speeds. It is close to the lower bound both <b>on</b> identical <b>processors</b> and close to the lower bound for processors of changing speeds. Experiments performed on an eight-processor machine confirms this theoretical result...|$|R
40|$|AbstractWe {{consider}} {{the problem of}} scheduling outforests and inforests with non-uniform deadlines subject to unit-length communication delays. We will prove that minimum-tardiness schedules for outforests <b>on</b> two <b>processors</b> and for chain-like task systems <b>on</b> m <b>processors</b> can be constructed in polynomial time. In addition, we present two polynomial-time approximation algorithms: one with an asymptotic approximation bound of 2 − 2 /m for scheduling outforests with non-positive deadlines <b>on</b> m <b>processors</b> and one with an asymptotic approximation bound of 2 for scheduling inforests with non-positive deadlines <b>on</b> m <b>processors.</b> Moreover, it is proved that for a special class of inforests, minimum-tardiness schedules <b>on</b> m <b>processors</b> can be constructed in polynomial time...|$|R
5000|$|... 1st {{train from}} Beachlands 11am then every 45 minutes until dusk winter, or approx 16:30 summer but <b>check</b> <b>on</b> day of travel.1st train from Eastoke 11.20am then every 45 minutes until dusk winter, or approx 16:30 summer but <b>check</b> <b>on</b> day of travel.|$|R
50|$|<b>Checks</b> <b>on</b> {{buoyancy}} and weighting equipment.|$|R
50|$|<b>Checks</b> <b>on</b> Presidential and Congressional pay raises.|$|R
25|$|The UK Border Force {{does not}} carry out routine {{immigration}} <b>checks</b> <b>on</b> travellers (regardless of nationality) arriving in the UK from {{another part of the}} CTA. However, because the Channel Islands have VAT free status, the UK carries out selective customs <b>checks</b> <b>on</b> travellers arriving from there.|$|R
50|$|Customs and {{identity}} <b>checks</b> <b>on</b> the Spanish {{side of the}} border are carried out by the Spanish Civil Guard and the Spanish National Police. Customs {{and identity}} <b>checks</b> <b>on</b> the Gibraltar {{side of the border}} are carried out by HM Customs Gibraltar and the Royal Gibraltar Police.|$|R
50|$|The UK Border Force {{does not}} carry out routine {{immigration}} <b>checks</b> <b>on</b> travellers (regardless of nationality) arriving in the UK from {{another part of the}} CTA. However, because the Channel Islands have VAT free status, the UK carries out selective customs <b>checks</b> <b>on</b> travellers arriving from there.|$|R
5000|$|In June 2011, the IAEA {{chief said}} he had [...] "broad support for his plan to {{strengthen}} international safety <b>checks</b> <b>on</b> nuclear power plants to help avoid any repeat of Japan's Fukushima crisis". Peer-reviewed safety <b>checks</b> <b>on</b> reactors worldwide, organised by the IAEA, have been proposed.|$|R
50|$|Processor Supplementary Instructions are {{instructions}} {{that have been}} implemented <b>on</b> certain <b>processors</b> within a family, but are not present <b>on</b> all <b>processors</b> within a particular family.|$|R
40|$|The SIFT {{instrumentation}} {{is called}} the "Window. " This window was designed to collect internal data from SIFT while having minimal overhead. Window consists of Sender and Relay components. Sender is to be run <b>on</b> <b>processors</b> 0 [...] 5 and Relay will run <b>on</b> <b>processor</b> 6. Sender will gather values (currently 12) during the subframe allocated to a task and broadcast these values {{at the start of}} the next subframe. This timing was selected to guarantee Relay 3. 2 ms to collect and transmit the data...|$|R
50|$|A {{technology}} in the OpenBSD operating system, known as W^X, marks writable pages by default as non-executable <b>on</b> <b>processors</b> that support that. <b>On</b> 32-bit x86 <b>processors,</b> the code segment is set to include {{only part of the}} address space, to provide some level of executable space protection.|$|R
