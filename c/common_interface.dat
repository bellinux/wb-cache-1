794|1279|Public
25|$|Polymorphism enables one <b>common</b> <b>interface</b> {{for many}} implementations, and for objects to act {{differently}} under different circumstances.|$|E
25|$|Mouthpiece — Less <b>common</b> <b>interface,</b> {{does not}} provide {{protection}} against aspiration. There are lipseal mouthpieces with flanges to help hold them in place if patient is unable.|$|E
25|$|A device can {{register}} many Device Interface Class GUIDs for itself, contracting {{to support}} various appropriate interface calls. The most <b>common</b> <b>Interface</b> Class GUID relating to storage devices is the Volume Device Interface Class GUID, {53F5630D-B6BF-11D0-94F2-00A0C91EFB8B}.|$|E
5000|$|Interchangeable {{software}} and/or hardware with <b>common</b> <b>interfaces.</b>|$|R
30|$|Interactions of the {{two systems}} at <b>common</b> <b>interfaces</b> (Garlock et al. 2007; Dowden and Bruneau 2011).|$|R
50|$|In 2006 {{the project}} {{released}} Portland 1.0 (xdg-utils), {{a set of}} <b>common</b> <b>interfaces</b> for desktop environments.|$|R
25|$|Nokia was {{the first}} to launch digital {{satellite}} receivers in the UK, announced in March 1997. In August 1997 Nokia introduced the first digital satellite receiver with <b>Common</b> <b>Interface</b> (CI) support. In 1998 Nokia became the chosen supplier to produce the world's first digital terrestrial television set-top boxes by British Digital Broadcasting (BDB), which was eventually launched as ONdigital.|$|E
25|$|By {{the late}} 1980s {{there were several}} efforts {{underway}} to provide an abstraction layer for this purpose. Some of these were mainframe related, designed to allow programs running on those machines to translate between the variety of SQL's and provide a single <b>common</b> <b>interface</b> which could then be called by other mainframe or microcomputer programs. These solutions included IBM's Distributed Relational Database Architecture (DRDA) and Apple Computer's Data Access Language. Much more common, however, were systems that ran entirely on microcomputers, including a complete protocol stack that included any required networking or file translation support.|$|E
2500|$|All games share a <b>common</b> <b>interface,</b> with a {{menu screen}} {{offering}} six options: Play, Read Instructions, Read Storyline, See Credits, See Highest Scores, and Quit. Pressing F2 brings up an inventory screen, while F5 and F6 bring up save and load screens. Although {{most of these}} menus can be customized with [...]GIF backgrounds, their basic layout, labeling, and content are constant across all games.|$|E
30|$|Since the {{digitalization}} of radiology, UI for radiologists {{have followed}} the evolution of <b>common</b> <b>interfaces</b> in computer science. The mouse and the keyboard remain the most widely adopted UI.|$|R
40|$|This paper reports our {{experience}} when integrating differ resources and services into a grid environment. The use case we address implies {{the deployment of}} several NLP applications as web services. The ultimate objective of this task {{was to create a}} scenario where researchers have access to a variety of services they can operate. These services should be easy to invoke and able to interoperate between one another. We essentially describe the interoperability problems we faced, which involve metadata interoperability, data interoperability and service interoperability. We devote special attention to service interoperability and explore the possibility to define <b>common</b> <b>interfaces</b> and semantic description of services. While the web services paradigm suits the integration of different services very well, this requires mutual understanding and the accommodation to <b>common</b> <b>interfaces</b> that not only provide technical solution but also ease the user‟s work. Defining <b>common</b> <b>interfaces</b> benefits interoperability but requires the agreement about operations and the set of inputs/outputs. Semantic annotation allows defining some sort of taxonomy that organizes and collects the set of admissible operations and types input/output parameters...|$|R
40|$|Abstract. The {{fundamental}} {{standards and}} protocols of a Ubiquitous Computing System must define <b>common</b> <b>interfaces</b> and message formats. In {{addition to the}} <b>common</b> <b>interfaces</b> and message formats, the entities of the system must know or discover the “semantics ” of the messages: the vocabulary of the messages, which includes the names and valid values of message elements. In this paper, we show how we have successfully used technologies from the Semantic Web to solve important aspects of this challenge. We have implemented “semantic queries”, {{as part of a}} semantic discovery process for a Ubiquitous Computing Environment. We argue that semantic discovery should {{be an integral part of}} the fundamental protocols for Ubiquitous Computing Systems. ...|$|R
2500|$|DirectShow (sometimes {{abbreviated}} as DS or DShow), codename Quartz, is {{a multimedia}} framework and API produced by Microsoft for software developers to perform various operations with media files or streams. It is the replacement for Microsoft's earlier Video for Windows technology. [...] Based on the Microsoft Windows Component Object Model (COM) framework, DirectShow provides a <b>common</b> <b>interface</b> for media across various programming languages, {{and is an}} extensible, filter-based framework that can render or record media files on demand {{at the request of}} the user or developer. The DirectShow development tools and documentation were originally distributed as part of the DirectX SDK. Currently, they are distributed as part of the Windows SDK (formerly known as the Platform SDK).|$|E
50|$|In Digital Video Broadcasting, the <b>Common</b> <b>Interface</b> is a {{technology}} which allows separation of conditional access functionality from a digital TV receiver-decoder (Host) into a removable conditional-access module (CAM). It is also referenced as DVB-CI for Digital Video Broadcast - <b>Common</b> <b>Interface.</b> The host {{is responsible for}} tuning to pay TV channels and demodulation of the RF signal, while CAM is responsible for CA descrambling. The <b>Common</b> <b>Interface</b> allows them {{to communicate with each}} other.|$|E
50|$|The same {{abstract}} definition {{can be used}} as a <b>common</b> <b>interface</b> for {{a family}} of objects with different implementations and behaviors but which share the same meaning. The inheritance mechanism in object-oriented programming can be used to define an abstract class as the <b>common</b> <b>interface.</b>|$|E
40|$|This slide {{presentation}} reviews selected {{lessons that}} were learned during the design, development, assembly {{and operation of}} the International Space Station. The critical importance of standards and <b>common</b> <b>interfaces</b> is emphasized to create a common operation environment {{that can lead to}} flexibility and adaptability...|$|R
40|$|Abstract. Within {{the last}} years, ambitions towards the {{definition}} of <b>common</b> <b>interfaces</b> {{and the development of}} open frameworks have in-creased the efficiency of research on WCET analysis. The Annotation Language Challenge for WCET analysis has been proposed in line with these ambitions in order to push the development of <b>common</b> <b>interfaces</b> also to the level of annotation languages, which are crucial for the power of WCET analysis tools. In this paper we present a list of essential ingredients for a common WCET annotation language. The selected ingredients comprise a num-ber of features available in different WCET analysis tools and add sev-eral new concepts we consider important. The annotation concepts are described in an abstract format that can be instantiated at different representation levels...|$|R
40|$|Chapter 3 {{outlined}} application family {{analysis and}} the construction of single system specifications from an application family model (also see Chapter 2, Figure 2. 2). This chapter discusses application family design {{and the construction}} of single system designs from an application family design. New system designs are engineered from relevant components of an application family design that implement the desired functionality of a system. There are many application family design methods, each of which use different mechanisms and techniques to incorporate, and manage, commonality and variability. This chapter introduces and discusses our preferred mechanism of designing variability – using <b>common</b> <b>interfaces.</b> We show how <b>common</b> <b>interfaces</b> can use the discrimination mechanism of MRAM to depict points of variability in application family designs...|$|R
5000|$|The <b>Common</b> <b>Interface</b> can be {{used for}} pay-to-view TV a module is used to {{interface}} between the pay-to-view card and the TV or device. This allows manufacturers to install a single (<b>common)</b> <b>interface</b> into their devices rather than many. It is a similar concept to USB.|$|E
5000|$|CING (<b>Common</b> <b>Interface</b> for NMR {{structure}} Generation) software ...|$|E
5000|$|Server Applications- Allows {{the client}} {{applications}} to interact using a <b>common</b> <b>interface</b> ...|$|E
40|$|Web {{services}} enable {{businesses to}} dynamically exchange various information through <b>common</b> <b>interfaces</b> and well established protocols. SOAP with its extensions {{is the most}} promising one of these protocols. Several technologies have been proposed to extend capabilities of SOAP to meet {{the wide range of}} business requirements...|$|R
50|$|The SASS-C {{software}} re-engineering {{is referred}} to as modularisation and was commenced at the end of 2003. The objective is to have a full evaluation of (?): It consists in migrating upgraded functionality into four different independent suites, interoperable through <b>common</b> <b>interfaces</b> called CSDF (<b>Common</b> Surveillance Data Format).|$|R
5000|$|Programs {{are more}} {{portable}} due to <b>common</b> programming <b>interfaces</b> ...|$|R
50|$|All <b>Common</b> <b>Interface</b> {{equipment}} {{must comply}} with the EN 50221-1997 standard. This is a defined standard that enables {{the addition of a}} conditional-access module (CAM) in a DTV receiver to adapt it to different kinds of cryptography. Indeed, one of Digital Video Broadcasting's main strengths is the option of implementing the required conditional access capability on the <b>Common</b> <b>Interface.</b>|$|E
50|$|A new ETSI {{working group}} {{will be working}} on Embedded <b>Common</b> <b>Interface</b> (ECI).|$|E
5000|$|ETSI EN 300 175 V2.6.1 (2015-07). Digital Enhanced Cordless Telecommunications (DECT) - <b>Common</b> <b>Interface</b> (CI): ...|$|E
5000|$|CSW is {{one part}} (or [...] "profile") of the OGC Catalog Service, which defines <b>common</b> <b>interfaces</b> to discover, browse, and query {{metadata}} about data, services, and other potential resources. Version 2.0 of the specification {{was released in}} May 2004. The most recent release is 2.0.2, {{which was published in}} 2007.|$|R
5000|$|... facilitating {{access to}} public {{services}} through a <b>common</b> client <b>interface.</b>|$|R
50|$|McCLIM {{is a free}} {{software}} implementation of the <b>Common</b> Lisp <b>Interface</b> Manager.|$|R
50|$|Polymorphism enables one <b>common</b> <b>interface</b> {{for many}} implementations, and for objects to act {{differently}} under different circumstances.|$|E
5000|$|TV / Radio (DVB-S, DVB-S2, DVB-T, DVB-C, Analog {{television}} (<b>Common</b> <b>Interface,</b> DVB radio, DVB EPG, Teletext, etc...) ...|$|E
50|$|The Protein <b>Common</b> <b>Interface</b> Database (ProtCID) is a {{database}} of similar protein-protein interfaces in crystal structures of homologous proteins.|$|E
5000|$|Tagged-Item Performance Protocol (TIPP), <b>Common</b> Translation <b>Interface</b> (COTI), STS {{and other}} formats ...|$|R
25|$|On a USB flash drive, {{one end of}} {{the device}} is fitted with a single Standard-A USB plug; some flash drives {{additionally}} offer a micro USB plug, facilitating data transfers between different devices. Flash drives with a USB-C interface and other not so <b>common</b> <b>interfaces</b> (such as FireWire 400, FireWire 800, and ThunderBolt) are also available.|$|R
40|$|Abstract: While mobile {{handheld}} devices provide productivity benefits, {{they also}} pose new risks. User authentication {{is the best}} safeguard against the risk of unauthorized use and access to a device’s contents. This paper describes two novel types of smart card with unconventional form factors, designed {{to take advantage of}} <b>common</b> <b>interfaces</b> built into many current handheld devices...|$|R
