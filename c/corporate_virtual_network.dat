0|5210|Public
50|$|The {{end-user}} {{may also}} employ a <b>corporate</b> <b>virtual</b> private <b>network</b> or implement a personal VPN (for example via OpenVPN) {{to a home}} PC acting as a VPN server to encrypt absolutely all the data during transmission over the public Wi-Fi link.|$|R
40|$|This {{paper is}} about design methodologies for packet networks, under the {{constraints}} of end-to-end quality of service (QoS) metrics. The network modeling also considers the dynamics of today’s packet networks. We are particularly considering the problem of capacity and flow assignment where the routing assignments and capacities {{are considered to be}} decision variables. An efficient Lagrangean relaxation-based heuristic procedure is developed to find bounds and solutions for a <b>corporate</b> <b>virtual</b> private <b>network</b> (VPN), where the traffic is mostly based on TCP connections. Numerical results for a variety of problem instances are reported...|$|R
40|$|In {{communication}} systems chaos {{can be used}} as a carrier of information and as a dynamic process, which provides conversion information for the new type. Methods chaotic coding is a convenient tool for organizing <b>virtual</b> <b>corporate</b> <b>networks</b> with a given level of confidentiality of information. This article explores the possibility of using chaos for information processing, is considered a model chaotic processor...|$|R
40|$|Abstract. The {{traditional}} {{approaches to}} optimal design and planning of packet networks {{focus on the}} networklayer infrastructure, thus neglecting end-to-end Quality of Service (e 2 e QoS) issues, and Service Level Agreement (SLA) guarantees. This is quite inappropriate since the Internet today carries {{a wide range of}} critical telecommunication services. The challenge in the area is how to devise reasonable packet network design methodologies that allow the choice of the most adequate set of network resources, subject to e 2 e QoS constraints and, at the same time, consider the traffic dynamics of today’s packet networks. In this paper we describe a simple methodology to tackle the packet network design problem, and illustrate an example of its application to the optimization of link capacities and routing in a <b>corporate</b> <b>Virtual</b> Private <b>Network</b> (VPN), where traffic is mostly due to TCP connections. An efficient Lagrangean relaxation based heuristic procedure is developed to find bounds and solutions for the considered problem, and numerical results for a variety of problem instances are reported...|$|R
40|$|This paper {{considers}} {{the problem of}} dimensioning bandwidth for elastic data applications in packet-switched communication networks, such as Internet Protocol (IP) or Asynchronous Transfer Mode (ATM) networks. Elastic data applications adapt to timevarying available bandwidth via a feedback control such as the Transmission Control Protocol (TCP) or the Available Bit Rate transfer capability in ATM. Typical elastic data applications are file transfers supporting e-mail or the world wide web. We consider multiple classes of applications, generically distinguished by different mean file sizes. The bandwidth to be dimensioned may be the capacity of a transmission facility, or may be a portion thereof, such as for a segment of a <b>corporate</b> <b>Virtual</b> Private <b>Network</b> (VPN), or for a Label Switched Path in Multi-Protocol Label Switching, or a Virtual Path Connection in ATM. Herein we use the generic term "link" for the object to be dimensioned. The contribution {{of this paper is}} new asymptotic approximations and associated dimensioning rules that provide insights and guidelines for engineering bandwidth for elasticdata applications. This work can viewed as a variation on the classic capacity assignment problem in computer networks, [1], where herein the "load" is no longer the data flows (in bits/second or packets/second), but rather is the external file sizes, as we consider the resulting data flow as dependent {{on the state of the}} network via the closed-loop control. In prior work, [2], we motivated a closed queueing network (CQN) model and determined dimensioning rules for the case of a single class of connections. In the present paper, we determine engineering rules for the case of multiple classes of connections, developing new asymptotic approximations for a non-product-form [...] ...|$|R
40|$|Abstract—Network {{virtualization}} allows {{cloud infrastructure}} providers to accommodate multiple <b>virtual</b> <b>networks</b> {{on a single}} physical network. However, mapping multiple <b>virtual</b> <b>network</b> resources to physical <b>network</b> components, called <b>virtual</b> <b>network</b> embedding (VNE), {{is known to be}} non-deterministic polynomial-time hard (NP-hard). Effective <b>virtual</b> <b>network</b> embedding increases the revenue by increasing the number of accepted <b>virtual</b> <b>networks.</b> In this paper, we propose <b>virtual</b> <b>network</b> embedding algorithm, which improves <b>virtual</b> <b>network</b> embedding by coarsening <b>virtual</b> <b>networks.</b> Heavy Clique matching technique is used to coarsen <b>virtual</b> <b>networks.</b> Then, the coarsened <b>virtual</b> <b>networks</b> are enhanced by using a refined Kernighan-Lin algorithm. The performance of the proposed algorithm is evaluated and compared with existing algorithms using extensive simulations, which show that the proposed algorithm improves <b>virtual</b> <b>network</b> embedding by increasing the acceptance ratio and the revenue. Keywords—cloud computing; network virtualization; resource allocation; substrate <b>network</b> fragmentation; <b>virtual</b> <b>network</b> embedding; <b>virtual</b> <b>network</b> coarsening I...|$|R
40|$|A router {{includes}} {{a plurality of}} <b>virtual</b> <b>networks,</b> a plurality of output links, at least one decoder and arbitration circuitry. Each <b>virtual</b> <b>network</b> has a plurality of <b>virtual</b> <b>network</b> inputs and a plurality of <b>virtual</b> <b>network</b> outputs. Each <b>virtual</b> <b>network</b> output is associated with an output link. The decoder decodes a header of a data unit received on a <b>virtual</b> <b>network</b> {{of one of the}} <b>virtual</b> <b>network</b> inputs. The decoder generates a first request and a second request. The first request is for the allocation of a <b>virtual</b> <b>network</b> output of the <b>virtual</b> <b>network</b> to the <b>virtual</b> <b>network</b> input. The second request is for the allocation of an output link associated with the <b>virtual</b> <b>network</b> output to the <b>virtual</b> <b>network</b> output. The arbitration circuitry performs arbitration of the first request and arbitration of the second request in parallel...|$|R
40|$|Network {{virtualization}} allows {{cloud infrastructure}} providers to accommodate multiple <b>virtual</b> <b>networks</b> {{on a single}} physical network. However, mapping multiple <b>virtual</b> <b>network</b> resources to physical <b>network</b> components, called <b>virtual</b> <b>network</b> embedding (VNE), {{is known to be}} non-deterministic polynomial-time hard (NP-hard). Effective <b>virtual</b> <b>network</b> embedding increases the revenue by increasing the number of accepted <b>virtual</b> <b>networks.</b> In this paper, we propose <b>virtual</b> <b>network</b> embedding algorithm, which improves <b>virtual</b> <b>network</b> embedding by coarsening <b>virtual</b> <b>networks.</b> Heavy Clique matching technique is used to coarsen <b>virtual</b> <b>networks.</b> Then, the coarsened <b>virtual</b> <b>networks</b> are enhanced by using a refined Kernighan-Lin algorithm. The performance of the proposed algorithm is evaluated and compared with existing algorithms using extensive simulations, which show that the proposed algorithm improves <b>virtual</b> <b>network</b> embedding by increasing the acceptance ratio and the revenue. Comment: (IJACSA) International Journal of Advanced Computer Science and Applications, Vol. 6, No. 1, 201...|$|R
40|$|The Internet faces {{well-known}} {{challenges in}} realizing {{modifications to the}} core architecture. To help overcome these limitations, the use of network virtualization has been proposed. Network virtualization enables the deployment of novel network architectures and services on existing Internet infrastructure. <b>Virtual</b> <b>networks</b> run over physical networks and use Internet paths and protocols as essentially a link layer in the <b>virtual</b> <b>network.</b> <b>Virtual</b> <b>networks</b> can also share the resources in the physical substrate. Effective use of the underlying substrate network requires intelligent placement of <b>virtual</b> <b>networks</b> so that underlying resources do not incur over-subscription. Because <b>virtual</b> <b>networks</b> can come and go over time, and underlying networks can experience their own dynamic changes, <b>virtual</b> <b>networks</b> need to be migrated [...] -re-mapped to the physical network during active operation [...] -to maintain good performance. While <b>virtual</b> <b>network</b> placement, {{and to a lesser}} extent migration, has been studied in the past, little attention has been devoted to designing, deploying, and evaluating migration mechanisms for <b>virtual</b> <b>networks.</b> In this dissertation, we design <b>virtual</b> <b>network</b> migration mechanisms for different substrate platforms and further design a system to mitigate the effects of <b>virtual</b> <b>network</b> migration. In particular this dissertation makes the following contributions: 1. With the goal of minimizing the disruption during a <b>virtual</b> <b>network</b> migration, we design three algorithms for scheduling the sequence of virtual router moves that takes a <b>virtual</b> <b>network</b> from its original placement to its new placement. 2. We design and implement a controller-based architecture for <b>virtual</b> <b>network</b> migration on PlanetLab. This work explores the challenges in implementing <b>virtual</b> <b>network</b> migration on real infrastructure. Recommendations are given for infrastructure that support <b>virtual</b> <b>network</b> migration. 3. We propose and implement a mechanism to mitigate the performance degradation resulting from <b>virtual</b> <b>network</b> migration through transport and application layer collaboration. We utilize a centralized controller to notify the end-systems or the gateways about the time of the <b>virtual</b> <b>network</b> migration such that we prevent packet loss to the application traffic of the end-systems. Ph. D...|$|R
40|$|One of {{the main}} {{objectives}} of cloud computing providers is increasing the revenue of their cloud datacenters by accommodating <b>virtual</b> <b>network</b> requests as many as possible. However, arrival and departure of <b>virtual</b> <b>network</b> requests fragment physical network’s resources and reduce the possibility of accepting more <b>virtual</b> <b>network</b> requests. To {{increase the number of}} <b>virtual</b> <b>network</b> requests accommodated by fragmented physical networks, we propose two <b>virtual</b> <b>network</b> embedding algorithms, which coarsen <b>virtual</b> <b>networks</b> using Heavy Edge Matching (HEM) technique and embed coarsened <b>virtual</b> <b>networks</b> on best-fit sub-substrate networks. The performance of the proposed algorithms are evaluated and compared with existing algorithms using extensive simulations, which show that the proposed algorithms increase the acceptance ratio and the revenue...|$|R
40|$|Network {{virtualization}} {{provides the}} ability to run multiple concurrent <b>virtual</b> <b>networks</b> over a shared substrate. However, {{it is challenging to}} design such a platform to host multiple heterogenous and often highly customized <b>virtual</b> <b>networks.</b> Not only minimal interference among different <b>virtual</b> <b>networks</b> is desired, high speed packet processing is also required. This paper presents PdP, a flexible <b>virtual</b> <b>network</b> platform which can achieve high speed packet processing. A PdP node has a cluster of machines that can perform packet processing in parallel. Each <b>virtual</b> <b>network</b> can be allocated with one or multiple forwarding machines so as to satisfy the packet processing requirement of the <b>virtual</b> <b>network.</b> Furthermore, a <b>virtual</b> <b>network</b> hosted in PdP has the freedom to be fully customized. Both the control plane and the data plane of a <b>virtual</b> <b>network</b> run in <b>virtual</b> machines so as to be isolated from other <b>virtual</b> <b>networks.</b> We have built a proofof-concept prototype of the PdP platform using off-the-shelf commodity hardware and open source software. The performance measurement shows promising results. Categories andSubjectDescriptor...|$|R
40|$|International audienceAdapting {{virtualization}} {{concepts to}} satisfy network telecommunication challenges receives {{more and more}} attention. The <b>virtual</b> <b>network</b> environment is formed {{by the amount of}} bounded virtual resources provided by physical <b>network</b> equipments. Deploying <b>virtual</b> <b>network</b> infrastructure has recently caught more research interests due to its flexibility and manageability. However, <b>virtual</b> <b>network</b> deployment is not evident as it should be. Therefore, it is now necessary to provide virtual environment design to coexist <b>virtual</b> <b>networks</b> and their respective operators. In this article, we describe our <b>virtual</b> <b>network</b> environment architecture. We explain the proposed organization strategies to improve <b>virtual</b> <b>network</b> urbanization. The initial results and quantitative analysis of the architecture deployment are exposed...|$|R
40|$|<b>Virtual</b> <b>networks</b> are an {{important}} tool for deploying new services {{on top of the}} Internet. We present the TAO algorithm to automatically manage the topology of <b>virtual</b> <b>networks,</b> allowing nodes to be added and removed automatically, and adjusting the topology to optimize performance. By automating the tasks of maintaining the set of nodes and configuring the tunnels between them, we can reduce the administrative costs and allow scaling to much larger <b>virtual</b> <b>networks</b> than what is currently practical. We focus primarily on the Active Networks testbed, or ABone, though our work has applications in all classes of <b>virtual</b> <b>networks.</b> 1 Introduction <b>Virtual</b> <b>networks</b> are {{an important}} tool used to deploy a variety of new services and algorithms on top of the Internet. Our work is focused on automating the management of <b>virtual</b> <b>networks,</b> both to ease administrative costs and improve network performance as the number of nodes in a <b>virtual</b> <b>network</b> grows. 1. 1 <b>Virtual</b> <b>networks</b> Often referred [...] ...|$|R
3000|$|... better {{economy of}} the {{substrate}} <b>network</b> resources supporting <b>virtual</b> <b>networks.</b> Since <b>virtual</b> <b>networks</b> are built on a physical network infrastructure, {{it is necessary to}} avoid an abuse of these resources with the risk of causing the hosted <b>virtual</b> <b>networks</b> malfunctions.|$|R
50|$|A <b>Virtual</b> <b>Network</b> Adapter is the software-emulated virtual Ethernet adapter. A VPN Client {{can create}} several <b>Virtual</b> <b>Network</b> Adapters on the client computer. A VPN user can {{establish}} a VPN session between the <b>Virtual</b> <b>Network</b> Adapter and the destination Virtual Hub of the remote VPN Server. While the VPN session is established, the VPN user can communicate to the remote VPN <b>network</b> through the <b>Virtual</b> <b>Network</b> Adapter. Since the <b>Virtual</b> <b>Network</b> Adapter works {{as if it}} were the physical one, any applications or operating system components can be used without any modification.|$|R
40|$|The creation, {{deployment}} {{and management}} of network architecture is manual, time consuming and costly. To the network architect the creation process is ad-hoc in nature, based on hand crafting small-scale network prototypes that evolve toward wide scale deployment. We envision a different paradigm where `spawning networks' are capable of profiling, spawning, architecting and managing distinct <b>virtual</b> <b>network</b> architecture on-the-fly. This paper {{provides an overview of}} a <b>virtual</b> <b>network</b> kernel and its life cycle of spawning <b>virtual</b> <b>networks,</b> and focuses particularly on the role of resource management of <b>virtual</b> <b>networks.</b> We describe, virtuosity, a <b>virtual</b> <b>network</b> resource management system that minimizes the complexity of handling multiple spawned <b>virtual</b> <b>networks</b> that operate over multiple timescales. Virtuosity is driven by per-virtual network policy exerting control and management over multiple spawned <b>virtual</b> <b>networks</b> (characterized by a set of resources) and their spawned architectur [...] ...|$|R
5000|$|Users on {{machines}} {{within the}} <b>virtual</b> <b>network</b> {{have access to}} all other machines on the same <b>virtual</b> <b>network.</b>|$|R
30|$|The {{algorithms}} in {{this paper}} model requests dynamically arriving for <b>virtual</b> <b>network</b> establishment on network substrates. Each request specifies the topology of the <b>virtual</b> <b>network,</b> the resources demanded by the <b>virtual</b> <b>network</b> elements, and the QoS requirements, which include a time limit to instantiate it.|$|R
40|$|With their {{widespread}} deployment, {{the need}} to provide QoS in <b>virtual</b> <b>networks</b> is being realized. In an earlier work [1] we showed that traditional scheduling algorithms like WFQ are incapable of providing bounded delay service in a <b>virtual</b> <b>network</b> and presented a class of scheduling algorithms for <b>virtual</b> <b>networks.</b> We also showed that scheduling algorithms with rate control, thus possessing the bounded output burstiness property [1], may be used in a <b>virtual</b> <b>network</b> to provide bounded end-to-end delay. We now present simulation results for rate controlled schedulers in <b>virtual</b> <b>networks</b> to show that the concept of bounded output burstiness is indeed useful and helps reducing the worst case end-to-end delays in <b>virtual</b> <b>networks.</b> We also show that bounded output burstiness reduces sharing among best effort traffic and how best effort traffic can be handled efficiently...|$|R
40|$|Abstract—Network {{virtualization}} is a core {{technology in}} next-generation networks {{to overcome the}} ossification problem that is observed in the current Internet. The key idea of network virtualization is to split physical network resources into multiple logical networks, each supporting different network services and functionalities. One of the key challenges for <b>virtual</b> <b>network</b> in-frastructure providers is to efficiently allocate network resources based on <b>virtual</b> <b>network</b> requests, which {{is referred to as}} the <b>virtual</b> <b>network</b> mapping problem. While several algorithms have been proposed previously to solve this mapping problem, their effectiveness is limited since virtual requests specify the internal topology of the <b>virtual</b> <b>network.</b> In this paper, we argue that such internal topologies lead to unnecessary constraints and less efficient solutions. Instead, we propose an alternate formulation of the problem that represents <b>virtual</b> <b>network</b> requests as traffic matrices. We provide a solutions to solving this traffic-matrix-based mapping problem using a mixed integer programming formulation. Our simulation results show that our approach can map significantly more <b>virtual</b> <b>network</b> requests on a physical network infrastructure than previous mapping algorithms and thus improves the efficient use of networking resources in <b>virtual</b> <b>networks.</b> Index Terms—mixed integer programming, network virtual-ization, traffic matrix, <b>virtual</b> <b>network</b> embedding I...|$|R
40|$|Abstract—We propose, implement, and {{evaluate}} VIPER, {{a system to}} isolate, provide QoS, and manage <b>virtual</b> <b>networks.</b> Contrary to previous approaches, VIPER guarantees a fine sharing of physical resources among <b>virtual</b> <b>networks</b> according to the different parameters that describe the service level agreements. The main components of the proposed system are the resource sharing manager and the <b>virtual</b> <b>network</b> admission controller. The resource sharing manager achieves isolation by dynamically adapting itself to the resource demands of each <b>virtual</b> <b>network.</b> Based on the data monitored by the resource sharing manager, the <b>virtual</b> <b>network</b> admission controller builds network profiles that {{serve as the basis}} for arbitrating the access of new <b>virtual</b> <b>networks</b> to the physical substrate. VIPER also supports two levels of QoS control, one for the <b>virtual</b> <b>network</b> operator and the other for the infrastructure provider, reducing delays by up to 18 times in the analyzed scenarios. We developed a prototype whose evaluation reveals that VIPER, when compared to the other solutions in the literature: (i) enforces contracted agreements, (ii) provides an efficient admission control of new <b>virtual</b> <b>networks,</b> and (iii) reduces physical resource utilization by up to 25 %. I...|$|R
40|$|Abstract-Resources {{assigned}} to <b>virtual</b> <b>network</b> are not optimal resources, which {{are caused by}} some scarce resources. To solve this problem, this paper proposes a novel <b>virtual</b> <b>network</b> mapping algorithm that can realize mapping cost minimizing, called CMVNMA, based on two characteristics of network virtualization environment, that is <b>virtual</b> <b>network</b> has lifecycle and substrate network resources are increased or decreased periodically. CMVNM includes <b>virtual</b> <b>network</b> mapping sub-algorithm (VNMsA) that can label virtual nodes and virtual links which are not allocated optimal resources, and heuristic migration sub-algorithm (HMsA) that can realize saved substrate resources maximization and migration cost minimization. Simulation results show that CMVNMA can save around 15 % substrate network resources, and HMsA can use litter time to save the most substrate network resources than greedy migration algorithm (GMA) and random migration algorithm (RMA). Keywords-migration, <b>network</b> virtualization, <b>virtual</b> <b>network</b> mapping, <b>virtual</b> <b>network</b> resource allocation. ...|$|R
40|$|The DECOS {{integrated}} architecture {{supports the}} sharing of a single time-triggered network for multiple application subsystems. As its communication infrastructure each application subsystem possesses a <b>virtual</b> <b>network</b> with guaranteed temporal properties, which is realized {{on top of the}} physical time-triggered network. This paper presents a solution for the model-based design of <b>virtual</b> <b>networks</b> in order to reduce development time and avoid design faults. A graphical modeling tool enables system engineers to create a <b>virtual</b> <b>network</b> model that captures all relevant properties for instantiating <b>virtual</b> <b>networks</b> in a specific application. The <b>virtual</b> <b>network</b> model forms the input to a code generator, the output of which can be deployed on the target system together with the application code. The development process is exemplified in an automotive example, which exploits <b>virtual</b> <b>networks</b> for application subsystems derived from present-day automotive architectures...|$|R
40|$|This {{document}} describes {{issues associated}} with providing multi-tenancy in large data center networks and how these issues may be addressed using an overlay-based network virtualization approach. A key multi-tenancy requirement is traffic isolation so that one tenant’s traffic is not visible to any other tenant. Another requirement is address space isolation so that different tenants can use the same address space within different <b>virtual</b> <b>networks.</b> Traffic and address space isolation is achieved by assigning one or more <b>virtual</b> <b>networks</b> to each tenant, where traffic within a <b>virtual</b> <b>network</b> can only cross into another <b>virtual</b> <b>network</b> in a controlled fashion (e. g., via a configured router and/or a security gateway). Additional functionality is required to provision <b>virtual</b> <b>networks,</b> associating a <b>virtual</b> machine’s <b>network</b> interface(s) with the appropriate <b>virtual</b> <b>network</b> and maintaining that association as the virtual machine is activated, migrated, and/or deactivated. Use of an overlay-based approach enables scalable deployment on large network infrastructures. Narten, et al. Informational [Page 1...|$|R
40|$|Assigning <b>virtual</b> <b>network</b> {{resources}} to physical <b>network</b> components, called <b>Virtual</b> <b>Network</b> Embedding, {{is a major}} challenge in cloud computing platforms. In this paper, we propose a memetic elitist pareto evolutionary algorithm for <b>virtual</b> <b>network</b> embedding problem, which is called MEPE-VNE. MEPE-VNE applies a non-dominated sorting-based multi-objective evolutionary algorithm, called NSGA-II, to reduce computational complexity of constructing a hierarchy of non-dominated Pareto fronts and assign a rank value to each <b>virtual</b> <b>network</b> embedding solution based on its dominance level and crowding distance value. Local search is applied to enhance <b>virtual</b> <b>network</b> embedding solutions and speed up convergence of the proposed algorithm. To reduce loss of good solutions, MEPE-VNE ensures elitism by passing <b>virtual</b> <b>network</b> embedding solutions with best fitness values to next generation. Performance of the proposed algorithm is evaluated and compared with existing algorithms using extensive simulations, which show that the proposed algorithm improves <b>virtual</b> <b>network</b> embedding by increasing acceptance ratio and revenue while decreasing the cost incurred by substrate network. Comment: URL: [URL] ISSN 1913 - 8989 E-ISSN 1913 - 8997,Published by Canadian Center of Science and Educatio...|$|R
30|$|One of {{the main}} {{concerns}} regarding availability is the abuse of physical resources by <b>virtual</b> <b>networks.</b> <b>Virtual</b> <b>networks</b> may attempt to use as much resources as possible {{in order to maximize}} their performance. If the environment is not adequately protected, this behavior may lead to the exhaustion of physical resources, compromising the availability of other <b>virtual</b> <b>networks</b> hosted on the same substrate. Therefore, physical resources must be shared in a fair manner, and actions performed by a <b>virtual</b> <b>network</b> must not negatively impact others.|$|R
30|$|Although {{isolation}} {{is one of}} the main security requirements in virtual networking, there are cases in which distinct <b>virtual</b> <b>networks</b> must be able to cooperate. The federation of <b>virtual</b> <b>networks</b> can, for example, enable end-to-end connectivity – through virtual devices of distinct <b>virtual</b> <b>networks</b> – or allow access to distinct services. However, it may not be possible to provide interoperability due to the heterogeneous nature of <b>virtual</b> <b>networks</b> (which may implement different, incompatible protocols). Chowdhury et al. [25] partially tackle this issue with a framework that manages identities in this kind of environment. The main objective of the work is to provide a global identification system. To this end, the authors employ a decentralized approach in which controllers and adapters are placed in each <b>virtual</b> <b>network.</b> Controllers provide functionalities such as address allocation and name resolution, while adapters act as gateways between <b>virtual</b> <b>networks,</b> performing address and protocol translations. The proposed global identification system does not restrict the internal identification mechanisms used locally by <b>virtual</b> <b>networks,</b> allowing each <b>virtual</b> <b>network</b> to keep its own internal naming scheme. Additionally, global identifiers used by this framework are unique, immutable, and not associated with physical location, in order to not hinder the security or mobility of virtual devices.|$|R
40|$|Abstract—Virtual network embedding, {{which means}} mapping <b>virtual</b> <b>networks</b> {{requested}} by users to a shared substrate network maintained by an Internet Service Provider, {{is a key}} function that network virtualization needs to provide. Prior work on <b>virtual</b> <b>network</b> embedding has primarily focused on maximizing the the revenue of the Internet Service Provider and did not consider the energy cost in accommodating such requests. As energy cost is {{more than half of}} the operating cost of the substrate networks, while trying to accommodate more <b>virtual</b> <b>network</b> requests, minimizing energy cost is critical for infrastructure providers. In this work, we make the first effort towards energy aware <b>virtual</b> <b>network</b> embedding. We first pro-pose an energy cost model and formulate the energy aware <b>virtual</b> <b>network</b> embedding problem as an integer linear programming problem. We then propose two efficient energy aware <b>virtual</b> <b>network</b> embedding algorithms: a heuristic based algorithm and a particle swarm optimization technique based algorithm. We implemented our algorithms in C++ and performed side-by-side comparison with prior algorithms. The simulation results show that our algorithms significantly reduce the energy cost by up to 50 % over the existing algorithm for accommodating the same sequence of <b>virtual</b> <b>network</b> requests. Index Terms—Network virtualization, <b>virtual</b> <b>network</b> embed-din...|$|R
30|$|One of {{the main}} issues in network {{virtualization}} is the efficient mapping of <b>virtual</b> <b>networks</b> onto the substrate network[4, 5]. This mapping determines the allocation of routers and links of the <b>virtual</b> <b>network</b> onto the routers and links of the substrate network. However, {{the search for the}} optimal mapping of <b>virtual</b> <b>networks</b> is an NP-hard problem[6].|$|R
40|$|With {{more and}} more mission‐critical networking‐intensive workloads being virtualized and consolidated, <b>virtual</b> <b>network</b> {{performance}} {{has never been more}} important and relevant than today. VMware has been continuously improving the performance of its <b>virtual</b> <b>network</b> devices. VMXNET Generation 3 (VMXNET 3) is the most recent <b>virtual</b> <b>network</b> device from VMware, and was designed from scratch for high performanc...|$|R
30|$|In a FlowVisor-based virtualized network environment, {{each slice}} is {{represented}} by its controller. <b>Virtual</b> <b>networks</b> are managed by different entities and all share the same physical resources. Thus, {{it is not possible}} to assume that all <b>virtual</b> <b>networks</b> are reliable and well-behaved. A <b>virtual</b> <b>network</b> may affect the traffic of other networks, intentionally or not, due to malicious actions of its controller or faulty behavior of the isolation mechanisms. We classify as malicious behavior when a <b>virtual</b> <b>network</b> controller intentionally acts in order to disturb other <b>virtual</b> <b>networks,</b> such as intentional creation or modification of flow rules to steal, deviate or inject packets. For faulty behavior, we denote controller actions that, due to a problem of the isolation mechanisms, end up disturbing other <b>virtual</b> <b>networks,</b> such as QoS mechanisms. Both behaviors are harmful and, for simplicity, we define all the controllers that perform such behaviors as malicious.|$|R
40|$|With their {{widespread}} deployment, {{the need}} to provide QoS in <b>virtual</b> <b>networks</b> is being realized. We show that traditional scheduling algorithms like WFQ are incapable of providing bounded delay service in a <b>virtual</b> <b>network.</b> The problem arises because traffic of a number of sessions sharing a virtual link in a <b>virtual</b> <b>network</b> is aggregated and tunneled through the physical network, which cannot isolate the traffic of well behaved sessions from that of misbehaving sessions. We show that this problem can be solved by regulating output burstiness on virtual links. Using the theory of latency rate servers, we show that latency rate servers with bounded output burstiness, may be used in a <b>virtual</b> <b>network</b> to provide bounded delay service. This gives a method to design a generic class of scheduling alge rithms for <b>virtual</b> <b>networks.</b> Finally, we discuss how to integrate best effort and real-time traffic in a <b>virtual</b> <b>network...</b>|$|R
30|$|Kokku et al. [30] {{propose a}} network {{virtualization}} scheme that provides resource isolation while aiming to maximize substrate utilization. It allows <b>virtual</b> <b>networks</b> to have either resource-based reservations (i.e., reservations calculated {{as a percentage}} of available resources in the substrate) or bandwidth-based reservations (i.e., reservations based on the aggregate throughput of the <b>virtual</b> <b>network).</b> <b>Virtual</b> <b>networks</b> are divided in two groups according to the type of reservation required, and treated independently by a scheduler. This scheduler treats flows that belong to different <b>virtual</b> <b>networks</b> with distinct priorities, based on the reservations and average resource usage rate of each network. The authors present an evaluation performed on an implemented prototype, showing that the proposed scheme was capable of ensuring that each <b>virtual</b> <b>network</b> met its reservations.|$|R
3000|$|... [...]) where D is {{the number}} of InPs in the {{controller}} network and n {{is the number}} of nodes in the <b>virtual</b> <b>network.</b> Thus, it is infeasible to attempt all possible partitionings of a <b>virtual</b> <b>network</b> across all InPs. PolyViNE, instead, takes a best effort approach to mapping <b>virtual</b> <b>networks</b> onto substrate networks by exploring a constant subset of partitionings.|$|R
40|$|Abstract—With the {{increasing}} use of <b>virtual</b> <b>networks</b> and the emergence of new technologies for creating and managing these networks, there is the need to create a tool that makes managing the <b>virtual</b> <b>networks</b> easy. This paper discusses the implementation of a tool for this purpose, based on OpenFlow and NOX technology to create <b>virtual</b> <b>networks,</b> and the features that this tool provides. I...|$|R
30|$|Meixner et al. [35] {{devise a}} {{probabilistic}} model for providing <b>virtual</b> <b>networks</b> that are resilient to physical disasters. Disasters {{are characterized by}} the occurrence of multiple failures in the physical network, {{as well as the}} possibility of correlated cascading failures during attempts to recover <b>network</b> resources. The <b>virtual</b> link mapping strategy guarantees that the failure of a single physical link will not disconnect any <b>virtual</b> <b>network,</b> and aims at minimizing <b>virtual</b> <b>network</b> disconnection {{in the event of a}} disaster (i.e., simultaneous failure of multiple links). Additionally, excess processing capacity in the physical network is used to create a backup router for each <b>virtual</b> <b>network,</b> which reduces disconnection in the event of disasters and provides additional processing capacity for the recovery phase. When attempting to recover <b>virtual</b> <b>network</b> resources, the model analyzes all possible virtual router replacements in an effort to replace affected virtual routers in a way that ensures the <b>virtual</b> <b>network</b> will not be disconnected by any post-disaster failures.|$|R
