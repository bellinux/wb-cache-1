37|342|Public
5000|$|Flow Machines is a {{research}} project funded by the European Research Council (ERC) and led by François Pachet. Flow Machines aims at transforming musical style into a <b>computational</b> <b>object</b> to apply to AI-generated melodies and harmonies. Flow Machines has composed two fully-fledged pop songs, issued from a collaboration between the AI software and pop composer Benoît Carré: Daddy's Car [...] and Mister Shadow.Flow Machines also produced DeepBach, a neural network system which produces harmonisation in Bach style indiscernible from original Bach's harmonisations.|$|E
50|$|Functional {{programming}} languages {{that use}} single assignment include Clojure (for data structures, not vars), Erlang (it accepts multiple assignment if the values are equal, {{in contrast to}} Haskell), F#, Haskell, Lava, OCaml, Oz (for dataflow variables, not cells), Racket (for some data structures like lists, not symbols), SASL, Scala (for vals), SISAL, Standard ML. Non-backtracking Prolog code can be considered explicit single-assignment, explicit {{in a sense that}} its (named) variables can be in explicitly unassigned state, or be set exactly once. In Haskell, by contrast, there can be no unassigned variables, and every variable {{can be thought of as}} being implicitly set to its value (or rather to a <b>computational</b> <b>object</b> that will produce its value on demand) when it is created.|$|E
5000|$|... "In the 1960s {{through the}} 1980s, {{researchers}} in artificial intelligence {{took part in}} {{what we might call}} the classical [...] "great AI debates" [...] where the central question was whether machines could be [...] "really" [...] intelligent. This classical debate was essentialist; the new relational objects tend to enable researchers and their public to sidestep such arguments about what is inherent in the computer. Instead, the new objects depend on what people attribute to them; they shift the focus to what the objects evoke in us. When we are asked to care for an object (the robot Kismet, the plaything Furby), when the cared-for object thrives and offers us its attention and concern, people are moved to experience that object as intelligent. Beyond this, they feel a connection to it. So the question here is not to enter a debate about whether relational objects [...] "really" [...] have emotions, but to reflect on a series of issues having to do with what relational artifacts evoke in the user." [...] In preliminary research done on children and Furbies researchers found that the children classified Furbies as [...] "kind of alive". They classified the Furby as [...] "kind of alive" [...] because of their emotional attachment to it; for example, when asked [...] "Do you think the Furby is alive?," [...] children answer not {{in terms of what the}} Furby can do, but how they feel about the Furby and how the Furby might feel about them". [...] "...The <b>computational</b> <b>object</b> functions not only as an evocative model of mind, but as a kindred other. With these new objects, children (and adults) not only reflect on how their own mental and physical processes are analogous to the machine's, but perceive and relate to the machine as an autonomous and [...] "almost alive" [...] self". [...] "By accepting a new category of relationship, with entities that they recognize as [...] "sort-of-alive", or [...] "alive in a different, but legitimate way," [...] today's children will redefine the scope and shape of the playing field for social relations in the future. Because they are the first generation to grow up with this new paradigm, it is essential that we observe and document their experiences".|$|E
40|$|Multiple-services {{including}} real-time telephony and multi-media streaming exist In the Next Generation Network. This paper {{presents the}} use of the TINA Retailer and Accounting Management Architecture {{as the basis for the}} service and network resource usage accounting in the NGN. The TINA Computational Model is used to provide a framework for the software specifications in the overall accounting system. Three <b>computational</b> <b>objects</b> namely the Accountable Object, the Metering Manager and the Accounting Policy Manager are used. These components <b>objects</b> represent the <b>computational</b> <b>objects</b> that are subject to accounting, the object that logs the usage data and the object for managing the charging policy. A CORBA-based DPE provides distribution transparency to the applications, gives a technology independent view of computing resources and enables the TINA components to be deployed in a non-TINA NGN environment. TINA Service components and <b>computational</b> <b>objects</b> used in the TINA accounting management are described. The implementation of the billing service, using TINA concepts is presented. Keywords: TINA, accounting, billing, computational architecture, service components. I...|$|R
40|$|The Commission on Geoinformation Infrastructures and Standards of the International Cartographic Association (ICA) {{is working}} on {{defining}} models of spatial data infrastructures (SDI). SDI models from the enterprise and information viewpoints of the Reference Model for Open Distributed Processing (RM-ODP) have already been presented. Our model from the computational viewpoint identifies the main <b>computational</b> <b>objects</b> of an SDI and their interfaces, which are modelled using Unified Modelling Language (UML) component diagrams. Presented here is the first comprehensive SDI model from the computational viewpoint, which enhances {{the understanding of the}} <b>computational</b> <b>objects</b> and their interactions in an SDI. This viewpoint complements the previous two and together, the three viewpoints contribute towards a more holistic interpretation of an SDI, which is independent of specific SDI legislation, technology and implementations. For the computational viewpoint, we identified six <b>computational</b> <b>objects,</b> SDI Registry, SDI Data, SDI Processing, SDI Application, SDI Portrayal and SDI Management, and their provided and required interfaces. We describe the interactions of the <b>computational</b> <b>objects</b> in stakeholder activities and the roles they play in the different processes of SDI development and use, which we identified as Initiation, Creation, Management, Manipulation, Access, Processing, Evaluation and Liaison. Two tables summarise the SDI services that are providedEuropean Regional Development Fund in the IT 4 Innovations Centre of Excellence project (CZ. 1. 05 / 1. 1. 00 / 02. 0070). [URL]...|$|R
25|$|In {{mathematics}} and computer science, mutual recursion {{is a form}} of recursion where two mathematical or <b>computational</b> <b>objects,</b> such as functions or data types, are defined in terms of each other.|$|R
40|$|AbstractEfficiency in {{handling}} Poisson series {{is essential to}} obtain high-accuracy analytical theories in celestial mechanics and non-linear dynamics in general. A good knowledge of the mathematical structure of these objects is fundamental to create data structures to store and handle efficiently its equivalent <b>computational</b> <b>object.</b> In this paper we analyse the mathematical, symbolic and computational structure of Poisson series...|$|E
40|$|Children aged 5 to 11 {{years and}} a {{comparison}} group of adults were presented with two instances where the behaviour of a <b>computational</b> <b>object</b> was contrary to what might normally be expected of such a device. In both instances findings are discussed with regard to children’s understanding of a computer program and resulting computational behaviour generally. In the first study, children viewed a film featuring a number of robots either acting as traditionally programmed devices or, alternatively, with apparent intentionality. We examine to what extent, if at all, children were aware of this difference. Findings indicated that although the younger children mentioned other alleged differences between the robots, the issue of different loci of control was not a salient one. In the second study, children were encouraged to type two kinds of questions into a computer. The first kind (simple maths questions) required a general solution procedure commonly accessible to a <b>computational</b> <b>object.</b> The second (details of a biographical nature) did not. With respect to the first {{as well as the}} second kind of questions the compute...|$|E
40|$|The paper {{discusses}} {{the performance of}} TINA (Telecommunications Information Networking Architecture). The TINA architecture allows both multiple service vendors and multiple network providers. It is developed by a consortium which includes network operators and telecommunication and computer equipment suppliers. The foundation of TINA is object orientation and distributed computing. A <b>computational</b> <b>object</b> (CO) is an abstraction that encapsulates data and processing. Applications in TINA consist of COs, that interwork with each other. The COs can reside on different physical nodes in the network. The distributed processing environment (DPE) hides the physical distribution of CO...|$|E
40|$|A {{system that}} relies on {{object-oriented}} middleware comprises <b>computational</b> <b>objects</b> that are specific to the system’s purpose and middleware objects used for the transparent integration of the former. The efficient maintenance of such a system involves the dynamic upgrade of the aforementioned entities. So far, there have been various approaches dealing with the online upgrade of <b>computational</b> <b>objects.</b> This paper examines {{the second part of}} the problem: the online upgrade of middleware. Starting from the identification of requirements for the consistent upgrade of middleware, we result in the design and experimental evaluation of an architectural style for CORBAbased upgradeable middleware. ...|$|R
40|$|Leadership is {{a central}} topic in {{business}} and one in which organisations invest heavily. Despite the tremendous influx of <b>computational</b> <b>objects</b> into the workplace and their use {{as part of the}} operational framework through which organisational life is enacted, little empirical research exists that explores the relationship between leadership practice and said objects. This study helps to close this critical gap in both practical and theoretical knowledge. Through an interrogation of leadership practice and their enactments with <b>computational</b> <b>objects</b> across a range of situational and comparative empirics, this research develops three original theoretical contributions. First, it presents and develops a range of roles through which <b>computational</b> <b>objects</b> are enmeshed within leadership practice. Second, the study proposes a novel posthuman perspective that attempts to address a historic privileging of the human, positing a disjunction of responsibility from authority. And third, it theorises leadership as a processual phenomenon produced through citationality in material-discursive practice. Through an ethnographic work practice study, this research contributes an original articulation of a posthuman, practice-based theory of leadership not fully accounted for by received conceptions...|$|R
40|$|I {{argue that}} the {{category}} of equipment denoted <b>computational</b> <b>objects</b> have, {{by virtue of the}} unique presence of those objects in the world as permanently withdrawn from full disclosure of operation due to their dependence on computational code, a unique manner of causal interaction with users that {{can only be described as}} vicarious. As computational devices become increasingly ubiquitous as tools for managing and navigation the human world, this vicarious relationship becomes important in understanding how this technology affects the phenomenological experience of being in the world as it is, alongside <b>computational</b> <b>objects,</b> and how orientation towards the world can be described as computational...|$|R
40|$|The paper {{presents}} {{results of}} investigation on {{the method of}} determination of significant properties {{in the case of}} virtual computational objects like FEM models. Typical approach is very time-consuming and involves the sequence of meshing and high performance computing. The method proposed in the paper is time-saving by utilization of the experimental design methodology, in particular the screening design analysis. The analysis based on Plackett-Burman designs and fractional factorial designs is focused on the maximum cost reduction. It provides to the main effects analysis. In the mentioned case of the virtual <b>computational</b> <b>object</b> it allows determining significant properties of the model and to focus on the selected most important parameters affecting the key properties of the object. Time-saving is obtained by eliminating insignificant factors from the study area. The mathematical basis for this approach is well known from the experimental design area, and the novelty is the use of it to the particular deterministic <b>computational</b> <b>object.</b> Specific metrics are defined for approximation accuracy, computational cost and their relationship to show the benefits of the method. Identification was carried out in two ways. The first method is used when the two elements are available: the set of output feature values obtained experimentally and chosen error criterion for comparing the predicted and measured values of output characteristics. The second method requires a binding equation or equations, which must be satisfied...|$|E
40|$|Abstract—Ontology is a {{terminology}} {{which is}} used in artificial intelligence with different meanings. Ontology researching has {{an important role in}} computer science and practical applications, especially distributed knowledge systems. In this paper we present an ontology which is called <b>Computational</b> <b>Object</b> Knowledge Base Ontology. It has been used in designing some knowledge base systems for solving problems such as the system that supports studying knowledge and solving analytic geometry problems, the program for studying and solving problems in Plane Geometry, the knowledge system in linear algebra. Keywords—Artificial intelligence, knowledge representation, knowledge base system, ontology. I I...|$|E
40|$|This paper {{examines}} {{load balancing}} {{issues relating to}} a distributed CORBA-based Service Control Point. Two types of load balancing strategies are explored through simulation studies: (i) a novel ant-based load balancing algorithm, which has been devised specically {{for this type of}} system. This algorithm is compared to more traditional algorithms, (ii) a method for optimal distribution of the computational objects composing the service programs. This is based on mathematically minimising the expected communication ows between network nodes and message-level processing costs. The simulation model has been based on the recently adopted OMG IN/CORBA Interworking specication and the TINA Service Session <b>computational</b> <b>object</b> model...|$|E
40|$|Abstract. We {{present a}} new answer set solver nomore++. Distinguishing {{features}} include {{its treatment of}} heads and bodies equitably as <b>computational</b> <b>objects</b> and a new hybrid lookahead. nomore++ is close to being competitive with stateof-the-art answer set solvers, as demonstrated by selected experimental results. ...|$|R
40|$|This paper {{presents}} the design, implementation, and {{deployment of the}} DISCOVER web-based computational collaboratory. Its primary goal is to bring large distributed simulations to the scientists'/engineers' desktop by providing collaborative web-based portals for monitoring, interaction and control. DISCOVER supports a 3 -tier architecture composed of detachable thin-clients at the frontend, a network of interactions servers in the middle, and a control network of sensors, actuators, and interaction agents at the back-end. The interaction servers enable clients to connect and collaboratively interact with registered applications using a browser. The application control network enables sensors and actuators to be encapsulated within, and directly deployed with the <b>computational</b> <b>objects.</b> The application interaction gateway manages overall interaction. It uses Java Native Interface to create Java proxies that mirror <b>computational</b> <b>objects</b> {{and allow them to}} be directly accessed at th...|$|R
40|$|We {{describe}} the non–commutative {{extension of the}} computer algebra system Singular, called Plural. In the system, we provide rich functionality for symbolic computation within a wide class of non-commutative algebras. We discuss the <b>computational</b> <b>objects</b> of Plural, the implementation of main algorithms, various aspects of software engineering and numerous applications...|$|R
40|$|This paper explores a new {{approach}} to <b>computational</b> <b>object</b> recognition by borrowing an idea from child language acquisition studies in developmental psychology. Whereas previous image recognition research used shape to recognize and label a target object, the model proposed in this study added the function of the object resulting in a more accurate recognition. This study makes use of new gaming technology, Microsoft’s Kinect, in implementing the proposed new object recognition model. A demonstration of the model developed in this project properly infers different names for similarly shaped objects and the same name for differently shaped objects...|$|E
40|$|Abstract — Nowadays e-Learning is more popular, in Vietnam especially. In e-learning, {{materials}} for studying are very important. It {{is necessary to}} design the knowledge base systems and expert systems which support for searching, querying, solving of problems. The ontology, which was called <b>Computational</b> <b>Object</b> Knowledge Base Ontology (COB-ONT), is {{a useful tool for}} designing knowledge base systems in practice. In this paper, a design method for knowledge base systems in education using COKB-ONT will be presented. We also present the design of a knowledge base system that supports studying knowledge and solving problems in higher mathematics. Keywords—artificial intelligence, knowledge base systems, ontology, educational software. K I...|$|E
40|$|Abstract. This paper {{examines}} {{load balancing}} {{issues relating to}} a distributed CORBA-based Service Control Point. Two types of load balancing strategies are explored through simulation studies: (i) a novel ant-based load balancing algorithm, which has been devised specifically {{for this type of}} system. This algorithm is compared to more traditional algorithms, (ii) a method for optimal distribution of the computational objects composing the service programs. This is based on mathematically minimising the expected communication flows between network nodes and message-level processing costs. The simulation model has been based on the recently adopted OMG IN/CORBA Interworking specification and the TINA Service Session <b>computational</b> <b>object</b> model. ...|$|E
40|$|A {{flood of}} data {{in recent years}} in the field of {{bioinformatics}} means that much of the challenges in biology can now be characterized by their computational efficiency [1]. For parsing and computing biological concepts and terms, it is necessary to construct an ontological system and databases derived from the ontological scheme. Fortunately, biological entities and <b>computational</b> <b>objects</b> are easil...|$|R
40|$|We {{present a}} new answer set solver, called nomore++, {{along with its}} {{underlying}} theoretical foundations. A distinguishing feature is that it treats heads and bodies equitably as <b>computational</b> <b>objects.</b> Apart from its operational foundations, we show how it improves on previous work through its new lookahead and its computational strategy of maintaining unfounded-freeness. We underpin our claims by selected experimental results...|$|R
40|$|Types over a {{discrete}} valued field $(K,v) $ are <b>computational</b> <b>objects</b> that parameterize certain families of monic irreducible polynomials in $K_v[x]$, where $K_v$ is {{the completion of}} $K$ at $v$. Two types {{are considered to be}} equivalent if they encode the same family of prime polynomials. In this paper, we characterize the equivalence of types in terms of certain data supported by them...|$|R
40|$|This paper {{examines}} spatial explorations in interaction design. Taking its offset in {{a design}} research program, SMUI – Spatial Multi-User Interaction, the paper discuss methods and challenges met {{when working with}} design explorations guided by the program. The design research program takes a stance in existing resources, investigating how spatial aspects in combination with digital material support simultaneous multi-user interaction in public and semi-public space. The challenges concern involving spatial aspects in the design process and to respect {{the context of the}} <b>computational</b> <b>object</b> and the characteristics of the place. The design explorations, methods, model and definitions will be presented and discussed together with why spatial aspects matters in interaction design...|$|E
40|$|This paper {{discusses}} the parallel design of COOLFluiD (<b>Computational</b> <b>Object</b> Oriented Library for Fluid Dynamics), a state-of-the-art C++ framework for multi-physics simulations using multiple numerical methods on unstructured grids. By using advanced techniques and specific design patterns, flexibility and modularity are assured. COOLFluiD was recently adapted to support parallel computations on distributed memory machines. For this, a parallel layer was added, designed to minimize impact on both users and software developers, while maintaining high performance. From the user's point of view, parallelisation is fully transparent. The techniques making this possible will be discussed. Also presented {{is a technique}} for reconciling generic programming with libraries requiring explicit type information. status: publishe...|$|E
40|$|Industry {{acceptance}} of TINA (Telecommunications Information Networking Architecture) will depend heavily {{on both the}} evaluation of working systems that implement this architecture, and on the experiences obtained during the design and implementation of these systems. During the MESH' (Multimedia services on the Electronic Super Highway) project, a TINA based platform for networked multimedia services has been developed and evaluated. This platform, {{referred to as the}} MESH platform, implements major parts of the TINA Service Architecture version 5. 0 and the TINA Network Architecture version 3. 0. In addition, several demonstration services such as multiparty highquality audio and video conferencing, shared database access and subscription management services have been created. To support the design and implementation of the MESH platform a DSC (Distributed Software Component) framework has been developed. This framework is a generalization and implementation of the TINA <b>computational</b> <b>object</b> model and can also be applied outside the TINA domain. The DSC framework acts as a middleware layer, which shields component designers from many communication level details. A DSC can be mapped to a <b>computational</b> <b>object</b> or object group. DSCs can be grouped to form compound components from sub-components that also can consist of multiple components, etc. In addition, the DSC framework addresses flexible configuration, dynamic component construction from (downloadable) sub-components, and dynamic interface instantiation. The MESH platform not only demonstrates the potential of TINA, but also reveals several weak areas. This paper describes the DSC approach, which we used to design and implement major parts of TINA, and our experiences with TINA...|$|E
50|$|In {{mathematics}} and computer science, mutual recursion {{is a form}} of recursion where two mathematical or <b>computational</b> <b>objects,</b> such as functions or data types, are defined in terms of each other. Mutual recursion is very common in functional programming and in some problem domains, such as recursive descent parsers, where the data types are naturally mutually recursive, but is uncommon in other domains.|$|R
40|$|This paper {{presents}} an architecture for web-based interaction and steering of parallel/distributed scientific applications. The architecture {{is composed of}} detachable thin-clients at the front-end, a network of web servers in the middle, and a control network of sensors, actuators and interaction agents at the back-end. The interaction servers enable clients to connect to, and collaboratively interact with registered applications using a conventional browser. The application control network enables sensors and actuators to be encapsulated within, and directly deployed with the <b>computational</b> <b>objects.</b> Interaction agents resident at each computational node register the interaction objects and export their interaction interfaces. An application interaction gateway manages the overall interaction through the control network of interaction agents and objects. It uses Java proxy <b>objects</b> that mirror <b>computational</b> <b>objects</b> {{to enable them to}} be directly accessed by the interaction web-server. The presented architecture is part of an ongoing effort to develop and deploy a web-based computational collaboratory that enables geographically distributed scientists and engineers to collaboratively monitor and control distributed applications. ...|$|R
40|$|To {{attack the}} problem of "computing with the additives", we {{introduce}} a notion of sliced proof-net for the polarized fragment of linear logic. We prove that this notion yields <b>computational</b> <b>objects,</b> sequentializable {{in the absence of}} cuts. We then show how the injectivity property of denotational semantics guarantees the "canonicity" of sliced proof-nets, and prove injectivity for the fragment of polarized linear logic corresponding to simply typed -calculus with pairing...|$|R
40|$|The current {{research}} {{goal is to}} implement a well structured object based simulation system, {{for use by the}} scientists, operators and engineers at the McMaster Nuclear Reactor. Neutron flux, poison buildup, and coolant flow are modeled using finite difference equations. A Cartesian grid with variable resolution, is used to represent the model’s geometry. Each grid may directly represent an array of partial differential equations or may be composed of sub-grids, each being treated internally as a separate <b>computational</b> <b>object.</b> The final project will handle model configuration, integration of related simulations, code generation, execution, and output rendering. The simulation tool kit is not yet complete, this paper represents a description of the preliminary status of the project. I...|$|E
40|$|Universal {{access is}} known as the concept of facilitating accesses to the desired data {{according}} to the varying capabilities and characteristics of users [1]. Universal access aims to be capable of recognizing and responding to the presence of different context in a seamless, unobtrusive and often invisible way. To achieve this goal, two important issues need to be solved, they are context awareness and content adaptation. In this paper, context is referred to as contextual information {{that can be used to}} characterize the situation of an entity where an entity can be a person, a place, a physical or <b>computational</b> <b>object</b> [2]. The contextual information can be where and when the users are (time and space), as well as what the content are available nearby, and etc...|$|E
30|$|CTSiM is an {{agent-based}} modeling environment. The term “agent” here {{indicates an}} individual <b>computational</b> <b>object</b> or actor (for example, a rollercoaster {{car or a}} fish in a fish tank), which performs actions (for example, moving forward, changing directions) based on simple rules, and these rules can be designed and controlled by the user. Several researchers have shown that agent-based modeling can leverage K- 12 students’ pre-instructional intuitions and support their learning of (a) complex and emergent phenomena in biology, such as population dynamics in ecological systems (Basu et al. (2014); Dickes and Sengupta 2012; Wilensky and Reisman 2006), and (b) phenomena {{in the domain of}} Newtonian mechanics that require students to develop an understanding of the relations between position, speed, and acceleration as aggregation of continuous change in these variables over time (Basu et al. 2012; diSessa et al. 1991).|$|E
40|$|The {{division}} between subject and object, agent and non-agent, has consistently been dubious philosophically, with physical manifestations of automatons the exception {{rather than the}} rule. Now we are increasingly faced with <b>computational</b> <b>objects</b> and relational artifacts that put into question cherished notions of human agency and in-tentionality. I describe one such object, syngva, a creature that develops through evo-lutionary processes idiosyncratic movements in response to singing. syngva serve...|$|R
40|$|We {{discuss the}} history and uses of the {{parallel}} census technique [...] -an elegant tool {{in the study of}} certain <b>computational</b> <b>objects</b> having polynomially bounded census functions. A sequel will discuss advances (including Cai, Naik, and Sivakumar [CNS 95] and Glasser [Gla 00]), some related to the parallel census technique and some due to other approaches, in the complexity-class collapses that follow if NP has sparse hard sets under reductions weaker than (full) truth-table reductions. Comment: 8 page...|$|R
40|$|AbstractRealizability {{interpretations of}} logics are given by saying {{what it means}} for <b>computational</b> <b>objects</b> of some kind to realize logical formulae. The <b>computational</b> <b>objects</b> in {{question}} might be drawn from an untyped universe of computation, such as a partial combinatory algebra, or they might be typed objects such as terms of a PCF-style programming language. In some instances, one can show that a particular untyped realizability interpretation matches a particular typed one, {{in the sense that they}} give the same set of realizable formulae. In this case, we have a very good fit indeed between the typed language and the untyped realizability model — we refer to this condition as (constructive) logical full abstraction. We give some examples of this situation for a variety of extensions of PCF. Of particular interest are some models that are logically fully abstract for typed languages including non-functional features. Our results establish connections between what is computable in various programming languages and what is true inside various realizability toposes. We consider some examples of logical formulae to illustrate these ideas, in particular their application to exact real-number computability...|$|R
