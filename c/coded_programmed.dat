1|5531|Public
40|$|This {{research}} project {{was focused on}} elderly people and their living arrangements {{in an attempt to}} discover whether elderly people would prefer to live alone or with other elderly persons. If {{it was found that the}} elderly people interviewed would like roommates, then this would provide information which would be helpful in assessing the need for and determining the feasibility of a roommate service for elderly people. Willingness to roommate served as the dependent variable. This study tested the relationship between each of two psychological variables, loneliness and independence, and the dependent variable. Loneliness was defined as an elderly person 2 ̆ 7 s feeling of being alone, and independence as an elderly person 2 ̆ 7 s ability to do things unaided. In addition, twelve demographic variables were used to describe the sample: sex, age, marital status, separation time, health, religion, length of time living in Portland, length of time living alone, income, education, occupation, and number of activities. The data obtained from these variables enabled the researchers to answer the following questions: What are the characteristics of the sample? What are the relationships of loneliness and independence to willingness to roommate? What are the correlations between each of the demographic and psychological variables and the dependent variable? The population consisted of all those elderly people 62 years of age and over who lived alone in Portland Public Housing as of May 15, 1970. The sample was composed of 220 people from this population who were selected by choosing every sixth name from a list of 1, 699 names. Letters were sent in two different mailings, and of the sixty-four who responded, fifty-six were interviewed. The student researchers collected the data by using the structured interview. The data was <b>coded,</b> <b>programmed</b> and processed through an IBM 1130 computer. The data analysis indicates that independence is correlated with willingness to a higher degree than any other single variable. Loneliness is negatively correlated with willingness, but the correlation is so small it is not meaningful. An analysis of the data reveals the sample to be mostly White, Christian, female, healthy and highly in­ dependent. As a group they are not lonely and not willing to roommate: these people prefer privacy and living alone. They are not really willing to share their bathrooms, furniture or rent; however, they may be willing to help another homeless elderly person by allowing that person to stay temporarily. It was concluded that the people in the sample do not feel that they need roommates; therefore, a roommate service probably is not feasible for this group of people. Since the population studied in this project was characterized by a high level of independence, future research will be necessary to determine if a less independent population would be more willing to roommate...|$|E
40|$|Object <b>code</b> is a <b>program</b> of a {{processor}} language {{and can be}} directly executed on a machine. Program verification constructs a formal proof that a program correctly implements its specification. Verifying object code therefore ensures that the program {{which is to be}} executed on a machine is correct. However, the nature of processor languages makes it difficult to specify and reason about object <b>code</b> <b>programs</b> in a formal system of logic. Furthermore, a proof of the correctness of an object <b>code</b> <b>program</b> will often be too large to construct manually because of the size of object <b>code</b> <b>programs.</b> The presence of pointers and computed jumps in object <b>code</b> <b>programs</b> constrains the use of automated tools to simplify object code verification. This thesis develops an abstract language which is expressive enough to describe any sequential object <b>code</b> <b>program.</b> The abstract language supports the definition of program logics in which to specify and verify object <b>code</b> <b>programs.</b> This allows the object c [...] ...|$|R
40|$|Object <b>code</b> is a <b>program</b> of a {{processor}} language {{and can be}} directly executed on a machine. Program verification constructs a formal proof that a program correctly implements its specification. Verifying object code therefore ensures that the program {{which is to be}} executed on a machine is correct. However, the nature of processor languages makes it difficult to specify and reason about object <b>code</b> <b>programs</b> in a formal system of logic. Furthermore, a proof of the correctness of an object <b>code</b> <b>program</b> will often be too large to construct manually because of the size of object <b>code</b> <b>programs.</b> The presence of pointers and computed jumps in object <b>code</b> <b>programs</b> constrains the use of automated tools to simplify object code verification. This thesis develops an abstract language which is expressive enough to describe any sequential object <b>code</b> <b>program.</b> The abstract language supports the definition of program logics in which to specify and verify object <b>code</b> <b>programs.</b> This allows the object <b>code</b> <b>programs</b> of any processor language to be verified in a single system of logic. The abstract language is expressive enough that a single command is enough to describe the behaviour of any processor instruction. An object <b>code</b> <b>program</b> can therefore be translated to the abstract language by replacing each instruction with the equivalent command of the abstract language. This ensures that the use of the abstract language does not increase the difficulty of verifying an object <b>code</b> <b>program.</b> The verification of an object <b>code</b> <b>program</b> can be simplified by constructing an abstraction of the program and showing that the abstraction correctly implements the program specification. Methods for abstracting programs of the abstract language are developed which consider only the text of a program. These methods are based on describing a finite sequence of commands as a single, equivalent, command of the abstract language. This is used to define transformations which abstract a program by replacing groups of program commands with a single command. The abstraction of a program formed in this way can be verified in the same system of logic as the original program. Because the transformations consider only the program text, they are suitable for efficient mechanisation in an automated proof tool. By reducing the number of commands which must be considered, these methods can reduce the manual work needed to verify a program. The use of an abstract language allows object <b>code</b> <b>programs</b> to be specified and verified in a system of logic while the use of abstraction to simplify programs makes verification practical. As examples, object <b>code</b> <b>programs</b> for two different processors are modelled, abstracted and verified in terms of the abstract language. Features of processor languages and of object <b>code</b> <b>programs</b> which affect verification and abstraction are also summarised...|$|R
5000|$|Transana, QDA <b>Coding</b> <b>Program,</b> {{originally}} funded {{development by}} the TalkBank ...|$|R
50|$|Lego Mindstorms' {{programming}} is command box <b>programming,</b> rather than <b>code</b> <b>programming.</b>|$|R
50|$|Since 2005 Inkscape {{has participated}} in the Google Summer of <b>Code</b> <b>program.</b>|$|R
5000|$|Data or {{executable}} <b>code</b> (<b>programs)</b> on the system, {{or other}} connected systems ...|$|R
50|$|Libav {{participated in}} the Google Summer of <b>Code</b> <b>program</b> in 2011 and 2012.|$|R
5000|$|... 2009 | Chat <b>Code</b> <b>Programming</b> for Tradewars Rising (PC) - Published by Sylien Games ...|$|R
5000|$|ADOMD.NET - Extension of ADO.NET[...]NET based and {{suitable}} for managed <b>code</b> <b>programs</b> on CLR platforms.|$|R
5000|$|Code.org, {{to teach}} {{introductory}} programing {{to millions of}} students in their Hour of <b>Code</b> <b>program.</b>|$|R
40|$|Building Energy <b>Codes</b> <b>Program's</b> {{efforts are}} {{designed}} to result in increased stringency in national model energy codes, more rapid and broader adoption by states and localities of updated codes, and increased compliance and enforcement. Report estimates the historical impact of Building Energy <b>Codes</b> <b>Program</b> in terms of energy savings achieved that are based upon various editions of ANSI/ASHRAE/IESNA Standard 90. 1 (ASHRAE Standard 90. 1) ...|$|R
50|$|In April 2009 OpenImageIO was {{accepted}} into the Google Summer of <b>Code</b> <b>program</b> with four student slots.|$|R
5000|$|AMO - For AS 2005 {{and later}} versions[...]NET based and {{suitable}} for managed <b>code</b> <b>programs</b> on CLR platforms.|$|R
50|$|The RVCF is {{a member}} of the Ontario Land Trust Alliance and participates in Imagine Canada's Ethical <b>Code</b> <b>Program.</b>|$|R
50|$|Throughout the years, {{development}} has been funded through the Google Summer of <b>Code</b> <b>program,</b> donations and paid developer time.|$|R
5000|$|In the 2011 film Source Code, [...] "Beleaguered Castle" [...] is {{the call}} {{sign for the}} Source <b>Code</b> <b>program.</b>|$|R
50|$|Part {{of these}} {{developments}} were fostered by Google's Summer of <b>Code</b> <b>program,</b> in which the Blender Foundation has participated since 2005.|$|R
50|$|From 2005, OSAF {{participated in}} Google's Summer of <b>Code</b> <b>programs</b> by {{allowing}} several interns {{to work on}} OSAF projects during the summer.|$|R
50|$|In March 2007, SilverStripe was {{selected}} for the Google Summer of <b>Code</b> <b>program.</b> This program resulted in the 2.2 release of SilverStripe.|$|R
50|$|Applicants for the Full-time Immersive, Flex, and Summer of <b>Code</b> <b>programs</b> {{must pass}} a fundamental-skills evaluation, {{technical}} interview, and in-person interview prior program acceptance.|$|R
5000|$|To {{properly}} {{cooperate with}} non-ARC <b>code,</b> <b>programs</b> must use no method or declared property (unless explicitly choosing a different getter) {{that starts with}} [...]|$|R
50|$|AOP is {{the desire}} to make {{statements}} of the form:In program P, whenever condition C arises, perform action A over a conventionally <b>coded</b> <b>program</b> P.|$|R
40|$|This essay {{examines}} common coding practices and, on {{the basis}} that <b>program</b> <b>code</b> should be designed to avoid errors, argues for example that punctuation symbols should not be used in <b>program</b> <b>code</b> as though they were in literary text. Carrying the argument further, it is asserted that the computing profession should not talk about programming languages or about writing <b>programs,</b> but about <b>coding</b> schemes and <b>coding</b> <b>programs...</b>|$|R
40|$|Shows that, {{using the}} {{dynamical}} variable pointer, one can implement a natural link between BASIC variables and binary data, giving powerful features to BASIC's interpreter in data acquisition systems. A machine <b>coded</b> <b>program</b> written for data logging can {{get access to}} BASIC variables and directly transfers data to them without suffering the interpreter's slow speed. BASIC programs just use them as any other variables. A manifold user's call, giving control to different machine <b>coded</b> <b>programs</b> without having to change the user's address as usual. (0 refs) ...|$|R
30|$|NVivo is a {{qualitative}} and mixed methods <b>coding</b> <b>program</b> {{that enables the}} detailed analysis of data to reveal relationships and themes. Please visit [URL] for more information.|$|R
5000|$|In August 1983, New Order {{released}} their iconic [...] "Blue Monday", {{which was}} composed on prototype-level homebrew [...] "step-time" [...] binary <b>code</b> <b>programming,</b> morphologically a MIDI rendition.|$|R
50|$|A {{new project}} started in June 2014 is Made with <b>Code,</b> uses <b>coding</b> <b>programs</b> to allow girls to become {{interested}} {{in the idea of}} coding and develop more female programmers over time.|$|R
40|$|The {{purpose of}} the current study is to {{investigate}} the effectiveness of the Road to the <b>Code</b> phonological awareness <b>program</b> on the development of at-risk, kindergarten students’ phonological awareness and early reading skills. Six kindergarten students were identified as experiencing difficulty in the area of phonological awareness and were divided into three groups. This study included three phases: a baseline phase, during which no instruction in the Road to the <b>Code</b> <b>program</b> was provided; an intervention phase, during which the Road to the <b>Code</b> <b>program</b> was implemented; and a maintenance phase. Student reading progress was monitored using standardized measures from the Dynamic Indicators of Basic Literacy Skills (DIBELS) and experimenter-developed measures. Program effectiveness was evaluated through a multiple baseline across participants design. Results indicated that participation in the Road to the <b>Code</b> <b>program</b> resulted in an increase in the students’ phonological awareness skills and that these gains maintained following the completion of the program. Additionally, students demonstrated the ability to generalize learned skills to progress monitoring measures containing novel content. Limitations of the study, implications for practice, and future research directions will also be discussed. ...|$|R
50|$|Founded in November, 2012, Digital Bananas has a {{workforce}} {{of about}} 50 digital professionals working with technology and digital media to build apps, <b>code</b> <b>programs,</b> and generally transform {{the way their}} clients operate online.|$|R
2500|$|The A500+ model instead allowed {{upgrading}} by [...] trapdoor chip RAM without clock, {{but there}} was no visible means on board to map any of this as FAST, causing incompatibility with some stubbornly <b>coded</b> <b>programs.</b>|$|R
50|$|Jitsi has {{received}} support from various {{institutions such as}} the NLnet Foundation, the University of Strasbourg and the Region of Alsace and it has also had multiple participations in the Google Summer of <b>Code</b> <b>program.</b>|$|R
5000|$|When {{explicit}} byte {{sequence is}} required (for example for hex dump of machine <b>code</b> <b>programs</b> or ROM content) a byte-by-byte representation is favoured, commonly organized in 16-byte rows with an optional divider between 8-byte groups: ...|$|R
5000|$|The A500+ model instead allowed {{upgrading}} by 1 MB trapdoor chip RAM without clock, {{but there}} was no visible means on board to map any of this as FAST, causing incompatibility with some stubbornly <b>coded</b> <b>programs.</b>|$|R
50|$|In {{addition}} to ROM, banks of RAM {{could be added}} to the computer via the Sideways address space. These could either be used to load and use rom-images from disk or as extra workspace for machine <b>code</b> <b>programs.</b>|$|R
25|$|Application Kit (AppKit) is {{directly}} {{descended from the}} original NeXTSTEP Application Kit. It contains <b>code</b> <b>programs</b> can use to create and interact with graphical user interfaces. AppKit is built on top of Foundation, and uses the same NS prefix.|$|R
