0|1480|Public
40|$|In {{this note}} {{we argue that}} {{semantic}} <b>cutting</b> <b>planes</b> refutations are stronger than syntactic ones. In particular, we give a formula for which any refutation in syntactic <b>cutting</b> <b>planes</b> requires exponential length, {{while there is a}} polynomial length refutation in semantic <b>cutting</b> <b>planes.</b> This means that syntactic <b>cutting</b> <b>planes</b> does not p-simulate (nor simulate) semantic <b>cutting</b> <b>planes.</b> We also give a pair of incompatible <b>cutting</b> <b>planes</b> lines which require exponential length to be refuted in syntactic <b>cutting</b> <b>planes.</b> ...|$|R
50|$|The related {{branch and}} cut method {{combines}} the <b>cutting</b> <b>plane</b> and {{branch and bound}} methods. In any subproblem, it runs the <b>cutting</b> <b>plane</b> method until no more <b>cutting</b> <b>planes</b> can be found, and then branches {{on one of the}} remaining fractional variables.|$|R
30|$|In {{the context}} of MILP, <b>cutting</b> <b>plane</b> {{algorithms}} are mostly used to solve the linear relaxation of MILPs. For obtaining feasible integer solutions, {{it is necessary to}} combine <b>cutting</b> <b>planes</b> with a branching approach, i.e., every node is solved by <b>cutting</b> <b>planes</b> and it is then branched for integrality. Hereby, in any node different <b>cutting</b> <b>planes</b> might be added. On the whole, the combined method is called branch & cut.|$|R
40|$|In this paper, {{we explore}} a {{weakness}} {{of a specific}} implementation of the analytic center <b>cutting</b> <b>plane</b> method applied to convex optimization problems, which may lead to weaker results that Kelley's <b>cutting</b> <b>plane</b> method. Improvements to the analytic center <b>cutting</b> <b>plane</b> method are suggested. ECONOMETRICS...|$|R
40|$|Abstract. The {{utilization}} of <b>cutting</b> <b>planes</b> {{is a key}} technique in Integer Linear Programming (ILP). However, <b>cutting</b> <b>planes</b> have seldom been applied in Pseudo-Boolean Optimization (PBO) algorithms derived from the Davis-Logemann-Loveland (DLL) procedure for Propositional Satisfiability (SAT). This paper proposes the {{utilization of}} <b>cutting</b> <b>planes</b> in a DLL-style PBO algorithm, which incorporates the most effective techniques for PBO. We propose the utilization of <b>cutting</b> <b>planes</b> both during preprocessing and during the search process. Moreover, we also establish conditions that enable clause learning and non-chronological backtracking {{in the presence of}} conflicts involving constraints generated by <b>cutting</b> <b>plane</b> techniques. The experimental results, obtained on a large number of classes of instances, indicate that the integration of <b>cutting</b> <b>planes</b> with backtrack search is an extremely effective technique for PBO. ...|$|R
40|$|Cutting plane {{methods are}} an {{alternative}} to interior methods to solve semidefinite programming (SDP) problems. In this paper, {{we are going to}} present five different <b>cutting</b> <b>plane</b> algorithms for semidefinite programming. The methods use relaxations and the semi-infinite representation of SDP’s. The presented methods are the polyhedral <b>cutting</b> <b>plane</b> method, the polyhedral bundle method, the block diagonal <b>cutting</b> <b>plane</b> method and the primal active set approach. We present also a generic <b>cutting</b> <b>plane</b> methods which tries to unify all the other methods. In the second part the implementation of the polyhedral <b>cutting</b> <b>plane</b> method into MATLAB is presented followed by some test examples...|$|R
40|$|In this paper, {{we compare}} the {{strength}} of the semantic and syntactic version of the <b>cutting</b> <b>planes</b> proof system. First, we show that the lower bound technique of [22] applies also to semantic cutting planes: the proof system has feasible interpolation via monotone real circuits, which gives an exponential lower bound on lengths of semantic <b>cutting</b> <b>planes</b> refutations. Second, we show that semantic refutations are stronger than syntactic ones. In particular, we give a formula for which any refutation in syntactic <b>cutting</b> <b>planes</b> requires exponential length, while there is a polynomial length refutation in semantic <b>cutting</b> <b>planes.</b> In other words, syntactic <b>cutting</b> <b>planes</b> does not p-simulate semantic <b>cutting</b> <b>planes.</b> We also give two incompatible integer inequalities which require exponential length refutation in syntactic <b>cutting</b> <b>planes.</b> Finally, we pose the following problem, which arises in connection with semantic inference of arity larger than two: can every multivariate non-decreasing real function be expressed as a composition of non-decreasing real functions in two variables...|$|R
40|$|We {{analyze the}} {{properties}} of an interior point <b>cutting</b> <b>plane</b> algorithm {{that is based on}} a semi-infinite linear formulation of the dual semidefinite program. The <b>cutting</b> <b>plane</b> algorithm approximately solves a linear relaxation of the dual semidefinite program in every iteration and relies on a separation oracle that returns linear <b>cutting</b> <b>planes.</b> We show that the complexity of a variant of the interior point <b>cutting</b> <b>plane</b> algorithm is slightly smaller than that of a direct interior point solver for semidefinite programs where the number of constraints is approximately equal to the dimension of the matrix. Our primary focus in this paper is the design of good separation oracles that return <b>cutting</b> <b>planes</b> that support the feasible region of the dual semidefinite program. Furthermore, we introduce a concept called the tangent space induced by a supporting hyperplane that measures the strength of a <b>cutting</b> <b>plane,</b> characterize the supporting hyperplanes that give higher dimensional tangent spaces, and show how such <b>cutting</b> <b>planes</b> can be found efficiently. Our procedures are analogous to finding facets of an integer polytope in <b>cutting</b> <b>plane</b> methods for integer programming. We illustrate these concepts with two examples in the paper. Finally, we describe separation oracles that return nonpolyhedral cutting surfaces. Recently, Krishnan et al. [41] and Oskoorouchi and Goffin [32] have adopted these separation oracles in conic interior point <b>cutting</b> <b>plane</b> algorithms for solving semidefinite programs...|$|R
40|$|In this paper, {{we explore}} a {{weakness}} {{of a specific}} implementation of the analytic center <b>cutting</b> <b>plane</b> method applied to convex optimization problems, which may lead to weaker results than Kelley's <b>cutting</b> <b>plane</b> method. Improvements to the analytic center <b>cutting</b> <b>plane</b> method are suggested. 1 Introduction In this paper, we explore a weakness of a specific implementation of the analytic center <b>cutting</b> <b>plane</b> method, and propose improvements. Cutting plane algorithms are designed to solve general convex optimization problems. They assume that the only information available around the current iterate {{takes the form of}} <b>cutting</b> <b>planes,</b> either supporting hyperplanes to the epigraph of the objective function, or separating hyperplanes from the feasible set. The two types of hyperplanes jointly define a linear programming, polyhedral, relaxation of the original convex optimization problem. The key issue in designing a specific <b>cutting</b> <b>plane</b> algorithm is the choice of a point in the current poly [...] ...|$|R
40|$|Cutting plane methods {{require the}} {{solution}} of a sequence of linear programs, where the solution to one provides a warm start to the next. A <b>cutting</b> <b>plane</b> algorithm for solving the linear ordering problem is described. This algorithm uses the primal-dual interior point method to solve the linear programming relaxations. A point {{which is a good}} warm start for a simplex-based <b>cutting</b> <b>plane</b> algorithm is generally not a good starting point for an interior point method. Techniques used to improve the warm start include attempting to identify <b>cutting</b> <b>planes</b> early and storing an old feasible point, which is used to help recenter when <b>cutting</b> <b>planes</b> are added. Computational results are described for some real-world problems; the algorithm appears to be competitive with a simplex-based <b>cutting</b> <b>plane</b> algorithm...|$|R
40|$|A <b>cutting</b> <b>plane</b> {{approach}} combining Chvatal-Gomory <b>cutting</b> <b>planes</b> with column {{generation is}} generalized {{for the case}} of multiple stock lengths in the one-dimensional cutting stock problem. Appropriate modications of the column generation procedure and the rounding heuristic are proposed. A comparison with the branch-and-price method for the problem with one stock type and representative test results are reported. Keywords: <b>cutting,</b> <b>cutting</b> <b>planes,</b> column generation, heuristics, branch-and-bound...|$|R
50|$|The {{shape of}} the {{cross-section}} of a solid may depend upon {{the orientation of the}} <b>cutting</b> <b>plane</b> to the solid. For instance, while all the cross-sections of a ball are disks, the cross-sections of a cube depend on how the <b>cutting</b> <b>plane</b> is related to the cube. If the <b>cutting</b> <b>plane</b> is perpendicular to a line joining the centers of two opposite faces of the cube, the cross-section will be a square, however, if the <b>cutting</b> <b>plane</b> is perpendicular to a diagonal of the cube joining opposite vertices, the cross-section can be either a point, a triangle or a hexagon.|$|R
30|$|Some recent {{developments}} in solving variational inequalities are analytic center <b>cutting</b> <b>plane</b> methods. An analytic center <b>cutting</b> <b>plane</b> method is an interior algorithm based on the computation of analytic centers. In order to work with analytic center <b>cutting</b> <b>plane</b> methods, some authors assume that the feasible sets of variational inequalities are polytopes, e.g., see [1 – 6], while others {{pay more attention to}} problems with infinitely many linear constraints, e.g., see [7, 8], etc. Analytic center <b>cutting</b> <b>plane</b> methods also can be used to other types of optimization problems, like mathematical programming with equilibrium constraints [9], convex programming [10, 11], conic programming [12], stochastic programming [13, 14], and combinatorial optimization [11]. In this paper, we propose some analytic center <b>cutting</b> <b>plane</b> methods for solving pseudomonotone or quasimonotone variational inequalities.|$|R
40|$|Cutting plane {{plays an}} {{important}} role in the theory and computation of integer programming. Nowadays, most state-of-the-art integer programming solvers tend to bias their <b>cutting</b> <b>plane</b> selection towards sparse ones, which emphasizes the significance of sparse <b>cutting</b> <b>planes.</b> In this thesis, we conduct a comprehensive study of sparse <b>cutting</b> <b>planes</b> and prove several theoretical results. We also develop a new approximation algorithm for sparse packing integer programs. Ph. D...|$|R
30|$|Region of forearm between axial <b>cutting</b> <b>plane</b> {{going through}} both ulnar styloid process (processus styloideus ulnae) and radial styloid process (processus styloideus radii) and axial <b>cutting</b> <b>plane</b> going through {{olecranon}} and cubital fossa (fossa cubitalis).|$|R
40|$|A novel 30 -item {{multiple}} choice psychometric test {{was developed to}} measure individual differences in a spatial visualization task that involves identifying the cross section that results from the intersection of a <b>cutting</b> <b>plane</b> and a geometric solid. An initial study with 59 participants established the internal reliability and external validity of the test. Items in the test varied in complexity of the geometric solid and orientation of the <b>cutting</b> <b>plane.</b> Cutting plane affected performance such that people made more errors when the <b>cutting</b> <b>plane</b> was oblique to the main axes of the object than when it was orthogonal. Effects of <b>cutting</b> <b>plane</b> also interacted {{with the type of}} geometric structure. Low-spatial participants had consistently poorer performance. Analyses of their errors suggested that sources of difficulty in this task included failure to shift mental perspective from the current viewpoint to imagine the <b>cutting</b> <b>plane</b> from another orientation and failure to decompose the complex solids into geometric primitives...|$|R
40|$|This paper {{examines}} a {{class of}} proximal minimization algorithms in which the objective function of the underlying convex program is approximated by <b>cutting</b> <b>planes.</b> This class includes algorithms such as <b>cutting</b> <b>plane,</b> <b>cutting</b> <b>plane</b> with line search and bundle methods. Among these algorithms, the bundle methods {{can be viewed as}} a quadratic counterpart of the <b>cutting</b> <b>plane</b> algorithm with line search, for they both attempt to decrease the true objective function at every iteration. On the other hand, the <b>cutting</b> <b>plane</b> algorithm does not explicitly and/or directly attempt to decrease the true objective function. However, it relies on the monotonicity of the approximating function to guarantee convergence to an optimal solution. This prompts the question of whether there exists a quadratic counterpart for the <b>cutting</b> <b>plane</b> algorithm. To provide an affirmative answer, this paper constructs a new convergent algorithm which resembles, but is different from, the bundle methods. Also, to make the relationship between bundle methods and proximal minimization more concrete, this paper also supplies a convergence proof for a variant of the bundle methods which utilizes analysis common to proximal minimizationNational Science Foundation, Washington, DC[URL] Direct FundingN...|$|R
40|$|Cutting {{planes are}} a well-known, widely used, and very eective {{technique}} for Integer Linear Programming (ILP). However, <b>cutting</b> <b>plane</b> techniques are seldom used in Pseudo-Boolean Optimization (PBO) algorithms. This paper addresses {{the utilization of}} Gomory mixed-integer and clique cuts, in Satisability-based algorithms for PBO, and shows how these cuts {{can be used for}} computing lower bounds and for learning new constraints. A side result of learning new constraints is that the utilization of <b>cutting</b> <b>planes</b> enables non-chronological backtracking. Besides <b>cutting</b> <b>planes,</b> the paper also shows that the utilization of search restarts in PBO can be eective in practice, allowing the computation of tighter lower bounds each time the search restarts. The more aggressive lower bounds result from the constraints learned due to the utilization of <b>cutting</b> <b>planes.</b> Experimental results show that the integration of <b>cutting</b> <b>planes</b> and search restarts in a SAT-based algorithm for PBO yields a competitive new solution for PBO...|$|R
30|$|An {{analytic}} center <b>cutting</b> <b>plane</b> {{method is}} an iterative algorithm {{based on the}} computation of analytic centers. In this paper, we propose some analytic center <b>cutting</b> <b>plane</b> methods for solving quasimonotone or pseudomonotone variational inequalities whose domains are bounded or unbounded convex bodies.|$|R
40|$|We present {{parallel}} <b>cutting</b> <b>plane</b> algorithms for {{the inverse}} mixed integer linear programming problem (InvMILP), which are extended algorithms of the <b>cutting</b> <b>plane</b> algorithms for InvMILP. It improves {{the efficiency of}} the original algorithm and provides feasible solutions before terminating iteration. With the help of parallel computing techniques, we execute the algorithms with two and more processors. The computational results indicate that there is a significant potential and actual improvement of the parallel <b>cutting</b> <b>plane</b> algorithm compared with the existing algorithm...|$|R
50|$|Besides Dynamic Programming, Linear {{programming}} and Branch-bound algorithm are precise algorithms that can solve TSP. Linear programming {{applies to the}} <b>cutting</b> <b>plane</b> method in the integer programming, i.e. solving the LP formed by two constraints in the model and then seeking the <b>cutting</b> <b>plane</b> by adding inequality constraint to gradually converge at an optimal solution. When people apply this method to find a <b>cutting</b> <b>plane,</b> they often depend on experience. So this method is seldom deemed as a general method.|$|R
40|$|Balas and Mazzola {{linearization}} (BML) {{is widely}} used in devising <b>cutting</b> <b>plane</b> algorithms for quadratic 0 - 1 programs. In this article, we improve BML by first strengthening the primal formulation of BML and then considering the dual formulation. Additionally, a new <b>cutting</b> <b>plane</b> algorithm is proposed...|$|R
40|$|An {{algorithm}} {{of constructing}} two <b>cutting</b> <b>planes</b> localizing {{the set of}} {{solutions to the problem}} of convex function e-minimum. This algorithm provides for as small as needed angle between <b>cutting</b> <b>planes.</b> It is based on the procedure of one-dimensional descent. The results of numerical experiments are given...|$|R
40|$|We propose an {{algorithm}} for multistage stochastic linear {{programs with}} recourse where random quantities in different stages are independent. The algorithm approximates successively expected recourse functions by building up valid <b>cutting</b> <b>planes</b> {{to support these}} functions from below. In each iteration, for the expected recourse function in each stage, one <b>cutting</b> <b>plane</b> is generated using the dual extreme points of the next-stage problem {{that have been found}} so far. We prove that the algorithm is convergent with probability one. Key Words. Multistage stochastic programming, <b>cutting</b> <b>planes,</b> sampling, convergence with probability one...|$|R
40|$|The {{modularity}} {{proposed by}} Newman and Girvan {{is the most}} commonly used measure when the nodes of a graph are grouped into communities consisting of tightly connectednodes. We formulate the modularity maximization problem as a set partitioning problem, and propose an algorithm for the problem based on the linear programming relaxation. We solve the dual of the linear programming relaxation by using a <b>cutting</b> <b>plane</b> method. To mediate the slow convergence that <b>cutting</b> <b>plane</b> methods usually suffer, we propose a method for finding and simultaneously adding multiple <b>cutting</b> <b>planes</b> which may complement well each other...|$|R
40|$|We {{study the}} Chvatal rank of polytopes as a {{complexity}} measure of unsatisfiable sets of clauses. Our first result establishes {{a connection between}} the Chvatal rank and the minimum refutation length in the <b>cutting</b> <b>planes</b> proof system. The result implies that length lower bounds for <b>cutting</b> <b>planes,</b> or even for tree-like <b>cutting</b> <b>planes,</b> imply rank lower bounds. We also show that the converse implication is false. Rank lower bounds don't imply size lower bounds. In fact we give an example of a class of formulas that have high rank and small size...|$|R
40|$|Dual {{fractional}} <b>cutting</b> <b>plane</b> algorithms, {{in which}} <b>cutting</b> <b>planes</b> {{are used to}} iteratively tighten a linear relaxation of an integer program, are well known and {{form the basis of}} the highly successful branch-and-cut method. It is rather less well-known that various primal <b>cutting</b> <b>plane</b> algorithms were developed in the 1960 s, for example by Young. In a primal algorithm, the main role of the <b>cutting</b> <b>planes</b> is to enable a feasible solution to the original problem to be improved. Research on these algorithms has been almost non-existent. In this paper we argue for a re-examination of these primal methods. We describe a new primal algorithm for pure 0 - 1 problems based on strong valid inequalities and give some encouraging computational results. Possible extensions to the case of general mixed-integer programs are also discussed...|$|R
40|$|A cutting-plane {{procedure}} for integer programming (IP) problems usually involves invoking a black-box procedure (such as the Gomory-Chvátal (GC) procedure) to compute a <b>cutting</b> <b>plane.</b> In this paper, we describe an alternative paradigm {{of using the}} same cutting-plane black-box. This involves two steps. In the first step, we design an inequality cx ≤ d, independent of the <b>cutting</b> <b>plane</b> black-box. In the second step, we verify that the designed inequality is a valid inequality by verifying that the set P ∩ {x ∈ Rn: cx ≥ d + 1 } ∩ Zn is empty using <b>cutting</b> <b>planes</b> from the black-box. (Here P is the feasible region of the linear-programming relaxation of the IP.) We refer to the closure of all <b>cutting</b> <b>planes</b> that can be verified to be valid using a specific <b>cutting</b> <b>plane</b> black-box as the verification closure of the considered black box. This verification paradigm naturally leads {{to the question of}} how much extra strength one might hope to gain by having an oracle in place that provides us with potential cutting-planes and we are left with the task of verifying that its output is valid. We show that the verification closures are almost admissible operators, i. e., they are well-defined closures and share many properties that are common to known <b>cutting</b> <b>planes</b> closures. Moreover the verification closur...|$|R
40|$|A {{computational}} {{study of}} some logarithmic barrier decomposition algorithms for semi [...] infinite programming {{is presented in}} this paper. The conceptual algorithm is a straightforward adaptation of the logarithmic barrier <b>cutting</b> <b>plane</b> algorithm which was presented recently by den Hertog et al., to solve semi-infinite programming problems. Usually decomposition (<b>cutting</b> <b>plane</b> methods) use <b>cutting</b> <b>planes</b> to improve the localization of the given problem. In this paper we propose an extension which uses linear cuts to solve large scale, difficult real world problems. This algorithm uses both static and (doubly) dynamic enumeration of the parameter space and allows for multiple cuts to be simultaneously added for larger/difficult problems. The algorithm is implemented both on sequential and parallel computers. Implementation issues and parallelization strategies are discussed and encouraging computational results are presented. Keywords: column generation, convex programming, <b>cutting</b> <b>plane</b> met [...] ...|$|R
40|$|Abstract. In this paper, we give {{a finite}} {{disjunctive}} programming procedure {{to obtain the}} convex hull of general mixed-integer linear programs (MILP) with bounded integer variables. We propose a finitely convergent convex hull tree algorithm which constructs a linear program that has the same optimal solution as the associated MILP. In addition, we combine the standard notion of sequential <b>cutting</b> <b>planes</b> with ideas underlying the convex hull tree algorithm to help guide the choice of disjunctions to use within a <b>cutting</b> <b>plane</b> method. This algorithm, which we {{refer to as the}} <b>cutting</b> <b>plane</b> tree algorithm, is shown to converge to an integral optimal solution in finitely many iterations. Finally, we illustrate the proposed algorithm on three well-known examples in the literature that require an infinite number of elementary or split disjunctions in a rudimentary <b>cutting</b> <b>plane</b> algorithm...|$|R
40|$|We {{investigate}} {{the use of}} <b>cutting</b> <b>planes</b> for integer programs with general integer variables. We show how <b>cutting</b> <b>planes</b> arising from knapsack inequalities can be generated and lifted {{as in the case}} of 0 - 1 variables. We also explore the use of Gomory's mixed integer cuts. We address both theoretical and computational issues and show how to embed these <b>cutting</b> <b>planes</b> in a branch-and-bound framework. We compare results obtained by using our cut generation routines in two existing systems with a commercially available branch-and-bound code on a range of test problems arising from practical applications...|$|R
40|$|Polynomial <b>cutting</b> <b>plane</b> methods {{based on}} the {{logarithmic}} barrier function and on the volumetric center are surveyed. These algorithms construct a linear programming relaxation of the feasible region, find an appropriate approximate center of the region, and call a separation oracle at this approximate center to determine whether additional constraints should {{be added to the}} relaxation. Typically, these <b>cutting</b> <b>plane</b> methods can be developed so as to exhibit polynomial convergence. The volumetric <b>cutting</b> <b>plane</b> algorithm achieves the theoretical minimum number of calls to a separation oracle. Long-step versions of the algorithms for solving convex optimization problems are presented. ...|$|R
5000|$|Section, {{a view of}} the {{interior}} at a particular <b>cutting</b> <b>plane</b> ...|$|R
40|$|Abstract. An {{exponential}} {{lower bound}} for the size of tree-like <b>cutting</b> <b>planes</b> refutations of a certain family of conjunctive normal form (CNF) formulas with polynomial size resolution refutations is proved. This implies an exponential separation between the tree-like versions and the dag-like versions of resolution and <b>cutting</b> <b>planes.</b> In both cases only superpolynomial separation...|$|R
30|$|As {{explained}} in “Computation of elemental distances” section, {{in order to}} implicitly describe an immersed object, its boundary is approximated by a collection of planar <b>cutting</b> <b>planes</b> defined for each intersected element of the background mesh. Therefore, this <b>cutting</b> <b>plane</b> has to be determined depending on the local intersection pattern. Determining this pattern is a challenging operation since different geometries may locally result in the same intersection pattern. Because of that, no unique definition of the <b>cutting</b> <b>plane</b> is possible. Thus, numerous special cases {{have to be considered}} in order to obtain a robust algorithm. How to determine the <b>cutting</b> <b>plane</b> for the most important scenarios is discussed in this section. All of these scenarios and the corresponding intersection patterns are conceptually visualized in Table 1. Note, that the scenarios are visualized in 2 D but they are readily transferable to the three-dimensional case.|$|R
40|$|A semidefinite {{programming}} {{problem is}} a nonsmooth optimization problem, {{so it can be}} solved using a <b>cutting</b> <b>plane</b> approach. In this paper, we analyze properties of such an algorithm. We discuss characteristics of good polyhedral representations for the semidefinite program. We show that the complexity of an interior point <b>cutting</b> <b>plane</b> approach based on a semi-infinite formulation of the semidefinite program has complexity comparable with that of a direct interior point solver. We show that <b>cutting</b> <b>planes</b> can always be found efficiently that support the feasible region. Further, we characterize the supporting hyperplanes that give high dimensional tangent planes, and show how such supporting hyperplanes can be found efficiently...|$|R
