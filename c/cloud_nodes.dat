82|100|Public
50|$|Execution {{follows a}} tile {{streaming}} paradigm: whenever possible, array tiles addressed by a query are fetched sequentially, and each tile is discarded after processing. This {{leads to an}} architecture scalable to data volumes exceeding server main memory by orders of magnitude. Query execution is parallelised. First, rasdaman offers inter-query parallelism: A dispatcher schedules requests into a pool of server processes on a per-transaction basis. Intra-query parallelism transparently distributes query subtrees across available cores, GPUs, or <b>cloud</b> <b>nodes.</b>|$|E
50|$|In July 2015, IMDEA Networks {{launched}} the Xhaul project, {{as part of}} the European H2020 5G Public-Private Partnership (5G PPP). Xhaul will develop an adaptive, sharable, cost-efficient 5G transport network solution integrating the fronthaul and backhaul segments of the network. This transport network will flexibly interconnect distributed 5G radio access and core network functions, hosted on in-network <b>cloud</b> <b>nodes.</b> Xhaul will greatly simplify network operations despite growing technological diversity. It will hence enable system-wide optimisation of Quality of Service (QoS) and energy usage as well as network-aware application development. The Xhaul consortium comprises 21 partners including leading telecom industry vendors, operators, IT companies, small and medium-sized enterprises and academic institutions.|$|E
30|$|Compare {{the recent}} TTL (time to live) {{histories}} of two <b>cloud</b> <b>nodes.</b>|$|E
30|$|General Manager would {{search for}} {{available}} suitable game <b>cloud</b> <b>node</b> for this request.|$|R
50|$|In 2013 it {{launched}} its first overseas services, with a mainland Europe <b>cloud</b> <b>node</b> based in Amsterdam.|$|R
50|$|Cloud + Edge - {{a central}} <b>cloud</b> <b>node</b> with local {{application}} services and business data that is stored locally.|$|R
30|$|Consider the {{shortest}} distance cloud node from set of <b>cloud</b> <b>nodes</b> to handover.|$|E
30|$|Compare {{the number}} of {{available}} virtual machines supporting game modes at HA levels, in each <b>cloud</b> <b>nodes.</b>|$|E
30|$|All <b>cloud</b> <b>nodes</b> are sorted in {{descending}} order based on nodal points that have the highest resources to serve the game requests.|$|E
30|$|General Manager {{would ask}} the user to select the {{available}} online game user from his table, and GM would now take the request and search the available game <b>cloud</b> <b>node.</b>|$|R
30|$|Here, {{parameter}} i {{represents the}} sensor node. φ represents the transmitting {{radius of the}} crowd <b>cloud</b> <b>node</b> signal. In the reliability of w measurement path and real-time path, we use the value of intellectual property group.|$|R
30|$|If a {{customer}} terminates the game or is disconnected, the <b>cloud</b> <b>node</b> will then {{sends a message}} to the GM with the request for disconnection notify the game session has ended. Resources of the virtual machine can then be released and become available for provision for a new session.|$|R
40|$|Abstract—A {{large-scale}} wireless {{sensor network}} constructed in terms of two-tiered architecture, where <b>cloud</b> <b>nodes</b> take charge of storing sensed data and processing queries {{with respect to the}} sensing nodes and querists, incurs security breach. This is because the importance of <b>cloud</b> <b>nodes</b> makes them attractive to adversaries and raises concerns about data privacy and query result correctness. To address these prob-lems, we propose an efficient approach, namely EQ (efficient query), which mainly prevents adversaries from gaining the information processed by or stored in <b>cloud</b> <b>nodes,</b> and detects the compromised <b>cloud</b> <b>nodes</b> when they misbehave. EQ can not only achieve the goals of data privacy and integrity preserving but also ensure the secure range query without incurring false positive. For data privacy preserving, EQ presents an order encryption mechanism by adopting stream cipher to encrypt/decrypt all sensed data such that a cloud node can only process issued queries over stored data in the encryption domain. For data integrity/completeness, we manipulate a data structure of XOR linked list (X 2 L), which allows a querist to verify the integrity of retrieved data via the so-called verification information, i. e., neighborhood difference in a storage-efficient manner. We demonstrate the feasibility and efficiency of EQ via experiments conducted on TelosB prototype sensor platform running TinyOS 1. 1. 15 and comparisons with state-of-the-arts...|$|E
30|$|Game Manager stores all the {{information}} about the game <b>cloud</b> <b>nodes,</b> viz., IP Address/URL Address, shortest node distance, available game list including single user games and multi user games, online available game users, active session lists.|$|E
40|$|Abstract—Cloud {{computing}} augments applications with easeof-access to {{the enormous}} resources on the Internet. Combined with mobile computing technologies, mobile applications can exploit the Cloud everywhere by statically distributing code segments or dynamically migrating running processes onto cloud services. Existing migration techniques are however too coarse-grained for mobile devices, so the overheads often offset the benefits of migration. To build a truly elastic mobile cloud computing infrastructure, we introduce eXCloud (eXtensible Cloud) –a middleware system with multi-level mobility support, ranging from as coarse as a VM instance to as fine as a runtime stack frame, and allows resources to be integrated and used dynamically. In eXCloud, a stack-on-demand (SOD) approach is used to support computation mobility throughout the mobile cloud environment. The approach is fully adaptive, goal-driven and transparent. By downward task migration, applications running on the <b>cloud</b> <b>nodes</b> can exploit or take control of special resources in mobile devices such as GPS and cameras. With a restorable MPI layer, task migrations of MPI parallel programs can happen between <b>cloud</b> <b>nodes</b> or be initiated from a mobile device. Our evaluation shows that SOD outperforms several existing migration mechanisms in terms of migration overhead and latency. All our techniques result in better resource utilization through task migrations among <b>cloud</b> <b>nodes</b> and mobile nodes. Keywords-stack-on-demand;mobile cloud;computation migration; cloud computing I...|$|E
40|$|International audienceWe {{propose to}} {{evaluate}} {{the performance of a}} <b>cloud</b> <b>node</b> (data center) using hysteresis queueing systems and stochastic bound methods. We represent the dynamic behavior of the <b>cloud</b> <b>node</b> by a hysteresis queueing system with forward and backward thresholds vectors. The client requests (or jobs) are represented by bulk arrivals arriving into the buffer, and executed by Virtual Machines (VMs) which are activated and deactivated according to the occupation of the queue, and the threshold vectors. As the system is quite difficult to analyze, we propose to define different bounding systems "less complex" and easier to study. Two approaches are used as well, one by aggregating the probability distribution of the batch arrivals and another by taking models with the same sequences of forward and backward threshold. We show the relevance of the proposed bounding system by presenting some numerical results for the performance measures of the data cente...|$|R
30|$|Repeat step 10 {{every time}} while {{choosing}} a new <b>cloud</b> storage <b>node</b> to handover.|$|R
30|$|The four {{algorithms}} impose {{vastly different}} amounts of overhead, {{as shown in}} Fig. 6. We changed only the hello time interval parameter (10 – 30 s). As the results, WCAP generate least control message overhead. The proposed ICM mostly generate additional message at hello time interval = 10, but when hello interval is larger than 20, the amount of overhead {{is less than the}} Ant Colony algorithm. Ant Colony uses the ants’ behavior to collect information of <b>cloud</b> <b>node.</b> However, it could easily cause a network overhead due to the large number of dispatched ants.|$|R
40|$|Cloud {{computing}} augments applications with ease-of-access to {{the enormous}} resources on the Internet. Combined with mobile computing technologies, mobile applications can exploit the Cloud everywhere by statically distributing code segments or dynamically migrating running processes onto cloud services. Existing migration techniques are however too coarse-grained for mobile devices, so the overheads often offset the benefits of migration. To build a truly elastic mobile cloud computing infrastructure, we introduce eXCloud (eXtensible Cloud) - a middleware system with multi-level mobility support, ranging from as coarse as a VM instance to as fine as a runtime stack frame, and allows resources to be integrated and used dynamically. In eXCloud, a stack-on-demand (SOD) approach is used to support computation mobility throughout the mobile cloud environment. The approach is fully adaptive, goal-driven and transparent. By downward task migration, applications running on the <b>cloud</b> <b>nodes</b> can exploit or take control of special resources in mobile devices such as GPS and cameras. With a restorable MPI layer, task migrations of MPI parallel programs can happen between <b>cloud</b> <b>nodes</b> or be initiated from a mobile device. Our evaluation shows that SOD outperforms several existing migration mechanisms in terms of migration overhead and latency. All our techniques result in better resource utilization through task migrations among <b>cloud</b> <b>nodes</b> and mobile nodes. published_or_final_versionThe 2011 International Conference on Cloud and Service Computing (CSC), Hong Kong, China, 12 - 14 December 2011. In Proceedings of CSC, 2011, p. 103 - 11...|$|E
40|$|We {{present a}} novel {{approach}} to solve the cloud storage issues and provide a fast load balancing algorithm. Our approach is based on partitioning and concurrent dual direction download of the files from multiple <b>cloud</b> <b>nodes.</b> Partitions of the files are saved on the cloud rather than the full files, which provide a good optimization to the cloud storage usage. Only partial replication is used in this algorithm to ensure the reliability and availability of the data. Our focus {{is to improve the}} performance and optimize the storage usage by providing the DaaS on the cloud. This algorithm solves the problem of having to fully replicate large data sets, which uses up a lot of precious space on the <b>cloud</b> <b>nodes.</b> Reducing the space needed will help in reducing the cost of providing such space. Moreover, performance is also increased since multiple cloud servers will collaborate to provide the data to the cloud clients in a faster manner...|$|E
40|$|This article {{presents}} {{a model of}} queuing system for broadband multimedia educational resources, {{as well as a}} model of access to a hybrid cloud system storage. These models are used to enhance the efficiency of computing resources in a distance learning system. An additional OpenStack control module has been developed to achieve the distribution of request streams and balance the load between <b>cloud</b> <b>nodes...</b>|$|E
3000|$|Several {{tests were}} {{performed}} in a cloud environment {{in order to find}} answers to the research questions. Initially, experiments were conducted separately for streaming and analysis of tweets without stream processing. Also, performance of Cassandra access from Spark was experimented. Subsequently, streaming and analysis of tweets was performed in near real time. The experiments were conducted initially on one <b>cloud</b> <b>node.</b> Finally, the amount of nodes was increased (up to 8 nodes) for studying scalability of the technologies. In the following the experiments are shortly described (Configuration of the experiments is provided in ''Test configuration [...] " [...] section).|$|R
30|$|Zhang et al. [13] {{proposed}} a VCC framework that combines vehicular cloud and cloudlets 1 to provide computing capabilities to smartphones. The framework requires two conditions to initiate computational tasks offloading from smartphones. The first condition is {{the availability of}} a reliable connection between the smartphone and VCC. Secondly, {{the availability of a}}ppropriate resources in the vehicular cloud. If the vehicle moves away from the vicinity of the smartphone during computation, cloudlet serves as multi-hop between the smartphone and the vehicular <b>cloud</b> <b>node.</b> The authors performed theoretical analysis, and it is shown that the technique has improved the performance and saves energy of smartphones from depletion.|$|R
30|$|Relevancy {{evaluation}} {{was based}} on word cosine distance-measure, which {{is used by the}} Word 2 Vec-implementation. Word 2 Vec model had to be loaded initially into memory, which takes ~ 4.5  min on a <b>cloud</b> <b>node.</b> Due to the slowness of loading, and large memory consumption, relevancy evaluation was performed in a separate Eucalyptus instance. The experiments indicated that relevancy evaluation was slower, when compared to evaluation of timeliness/popularity (Fig.  13). Word 2 Vec service in the Relevancy node (Fig.  4) read words of a tweet one line at a time from a single TCP socket. Performance of relevancy evaluation may be improved, if multiple sockets would be utilized for the communication.|$|R
30|$|In [27] Ge and Wei {{utilized}} {{genetic algorithm}} (GA) as an optimization technique utilized by the master node to schedule the waiting tasks to computing nodes. Before the scheduling procedure takes place all tasks {{in the job}} queue have to be evaluated first. Based on the authors the simulation results indicated reduction in make span and better balanced load across all <b>cloud</b> <b>nodes</b> for the GA over FIFO.|$|E
30|$|The {{resource}} analyzer {{takes care}} of the resource descriptors provided by OGE and the private Cloud environment. The analyzer component generates eight different job configurations {{on the basis of the}} cluster resource descriptor setting the amount of compute nodes for this job between one and eight nodes. Additionally, the analyzer component creates twelve job configurations setting the amount of <b>Cloud</b> <b>nodes</b> to be allocated from one to twelve.|$|E
30|$|Task {{scheduling}} algorithms vary {{in their}} technique in scheduling tasks among <b>cloud</b> <b>nodes</b> statically, dynamically, in batches or even online, eventually they are all trying to achieve the optimal distribution of tasks overs <b>cloud</b> <b>nodes.</b> Through this section different task scheduling algorithms applied in cloud environment with suitable verification and different aims will be presented and discussed in details. As Fang et al., in [13] introduced a two levels task scheduling mechanism based on load balancing in cloud computing. Through the first level a task description of each virtual machine (VM) is created including network resources, storage resources and other resources based {{on the needs of}} the tasks created by the user applications. In the second level scheduler assigns the adequate resources to each VM considering its load to achieve load balancing among VMs. According to the authors, this task scheduling mechanism can not only meet user’s requirements, but also get high resource utilization, which was proved by simulation results in the CloudSim toolkit, although this model did not consider the network bandwidth usability and its impact on VMs load.|$|E
30|$|Request {{tasks in}} a cloud {{computing}} environment are mutually independent. We use the HHGA-RBFNN model described above to predict the load of the current cloud computing system, and use the prediction result to calculate the polling weight of the <b>cloud</b> computing <b>nodes</b> periodically, and form a new dynamic load balancing algorithm—DPWRR through the combination with weighted round-robin algorithm.|$|R
40|$|International audienceThe paper {{considers}} {{the use of}} caching in mobile access networks and seeks to evaluate the optimal memory for band-width tradeoff at base station (BS), packet gateway (PGW) and a possible intermediate mobile <b>cloud</b> <b>node</b> (MCN). Formulas are derived for the hit rate under time varying popularity and for a novel cache insertion policy incorporating a pre-filter. The analytical model is applied first to demonstrate that reactive caching is not efficient for nodes with low demand due to {{the negative impact of}} content churn. This means BS or MCN caches must be managed proactively with popular content items pre-fetched under some centralized control. Quantifying the tradeoff at each level leads us to conclude that limited caching at BS and MCN levels brings significant savings while to store {{the vast majority of the}} content catalogue at the Internet edge, at the PGW or in some higher level shared facility, is clearly cost effective...|$|R
30|$|To {{solve the}} problem in the process of finding the best sensor <b>node</b> set and <b>cloud</b> {{platform}} work <b>node</b> set as the final wireless sensor network data transmission system planning.|$|R
40|$|License, which permits {{unrestricted}} use, distribution, {{and reproduction}} in any medium, provided the original work is properly cited. We present {{a novel approach}} to solve the cloud storage issues and provide a fast load balancing algorithm. Our approach is based on partitioning and concurrent dual direction download of the files from multiple <b>cloud</b> <b>nodes.</b> Partitions of the files are saved on the cloud rather than the full files, which provide a good optimization to the cloud storage usage. Only partial replication is used in this algorithm to ensure the reliability and availability of the data. Our focus {{is to improve the}} performance and optimize the storage usage by providing the DaaS on the cloud. This algorithm solves the problem of having to fully replicate large data sets, which uses up a lot of precious space on the <b>cloud</b> <b>nodes.</b> Reducing the space needed will help in reducing the cost of providing such space. Moreover, performance is also increased since multiple cloud servers will collaborate to provide the data to the cloud clients in a faster manner. 1...|$|E
30|$|Botnets {{are used}} for mundane tasks such as sending {{unsolicited}} commercial email (spam) and performing Distributed Denial of Service (DDoS) attacks, but could in theory be used for any task that is amenable to distributed computing on nodes with modest processing and memory resources. In the following, we will show that we can exploit some properties of a botnet, not by infecting <b>Cloud</b> <b>nodes,</b> but by running autonomous agents as legitimate processes on Cloud processing providers.|$|E
30|$|Queries {{have been}} {{successfully}} distributed across more than 1000 Amazon <b>cloud</b> <b>nodes</b> [24]. By using the same principle across data centres, federations can be established. Figure  10 shows a visualization of actual federated query processing between the European Centre for Medium-Range Weather Forecast (ECMWF) in the UK and National Computational Infrastructure (NCI) in Australia - both running rasdaman - for determining heavy rainfall risk areas from precipitation data at ECMWF and the Landsat 8 datacube at NCI.|$|E
40|$|International audienceIn {{order to}} solve the {{problems}} of low efficiency and backward methods in the agro-technical extension activities, this paper designed an agro-technical extension information system based on cloud storage technology. This paper studied the key technologies, such as cloud storage service engine, <b>cloud</b> storage management <b>node</b> and <b>cloud</b> storage data <b>node</b> and designed the overall architecture of the agro-technical extension information system based on cloud storage technology. The application results demonstrate that this system has significantly improved the agro-technical extension service levels and cloud storage can greatly improve data storage capacity of the agricultural extension information system...|$|R
30|$|Each Amazon Elastic Compute <b>Cloud</b> (EC 2) <b>node</b> {{provisioned}} has {{equivalent of}} 7.5 [*]GB of memory, 4 EC 2 Compute Units (2 virtual cores with 2 EC 2 Compute Units each), 850 [*]GB of local instance storage, 64 -bit platform.|$|R
40|$|International audienceThe ATLAS Metadata Interface (AMI) is {{a mature}} {{application}} {{of more than}} 15 years of existence. Mainly used by the ATLAS experiment at CERN, it consists of a very generic tool ecosystem for metadata aggregation and cataloguing. AMI {{is used by the}} ATLAS production system, therefore the service must guarantee a high level of availability. We describe our monitoring and administration systems and the Jenkins-based strategy used to dynamically test and deploy <b>cloud</b> OpenStack <b>nodes</b> on demand...|$|R
