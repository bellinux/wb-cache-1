3191|5365|Public
5|$|In {{terms of}} the {{implication}} graph, two literals {{belong to the same}} strongly <b>connected</b> <b>component</b> whenever there exist chains of implications from one literal to the other and vice versa. Therefore, the two literals must have the same value in any satisfying assignment to the given 2-satisfiability instance. In particular, if a variable and its negation both belong to the same strongly <b>connected</b> <b>component,</b> the instance cannot be satisfied, because it is impossible to assign both of these literals the same value. As Aspvall et al. showed, this is a necessary and sufficient condition: a 2-CNF formula is satisfiable if and only if there is no variable that belongs to the same strongly <b>connected</b> <b>component</b> as its negation.|$|E
5|$|Check {{whether any}} {{strongly}} <b>connected</b> <b>component</b> contains both a variable and its negation. If so, {{report that the}} instance is not satisfiable and halt.|$|E
5|$|The join-irreducible {{elements}} of this lattice are exactly connected graphs. This can be shown using {{the fact that a}} homomorphism maps a connected graph into one <b>connected</b> <b>component</b> of the target graph.|$|E
5000|$|... where V is {{the set of}} {{vertices}} of G and the [...] are the <b>connected</b> <b>components</b> of G. This definition {{mirrors the}} definition of cycle rank of directed graphs, which uses strong connectivity and strongly <b>connected</b> <b>components</b> in place of undirected connectivity and <b>connected</b> <b>components.</b>|$|R
5000|$|Tarjan's {{strongly}} <b>connected</b> <b>components</b> algorithm, an algorithm {{that gives}} the topologically sorted list of strongly <b>connected</b> <b>components</b> in a graph ...|$|R
40|$|Abstract—How do <b>connected</b> <b>components</b> evolve? What are the regularities {{that govern}} the dynamic growth process and the static {{snapshot}} of the <b>connected</b> <b>components?</b> In this work, we study patterns in <b>connected</b> <b>components</b> of large, real-world graphs. First, we study {{one of the largest}} static Web graphs with billions of nodes and edges and analyze the regularities among the <b>connected</b> <b>components</b> using GFD(Graph Fractal Dimension) as our main tool. Second, we study several time evolving graphs and find dynamic patterns and rules {{that govern the}} dynamics of <b>connected</b> <b>components.</b> We analyze the growth rates of top <b>connected</b> <b>components</b> and study their relation over time. We also study the probability that a newcomer absorbs to disconnected components {{as a function of the}} current portion of the disconnected components and the degree of the newcomer. Finally, we propose a generative model that explains both the dynamic growth process and the static regularities of <b>connected</b> <b>components...</b>|$|R
5|$|A <b>connected</b> <b>component</b> of an {{undirected graph}} is the {{subgraph}} {{consisting of the}} vertices and edges that {{can be reached by}} following edges from a single given starting vertex. A graph is connected if every vertex or edge is reachable from every other vertex or edge. A cycle in an undirected graph is a connected subgraph in which each vertex is incident to exactly two edges, or is a loop.|$|E
5|$|Important {{polynomial}} time computational problems on DAGs include topological sorting (finding a topological ordering), {{construction of the}} transitive closure and transitive reduction (the largest and smallest DAGs with the same reachability relation, respectively), and the closure problem, in which {{the goal is to}} find a minimum-weight subset of vertices with no edges connecting them {{to the rest of the}} graph. Transforming a directed graph with cycles into a DAG by deleting as few vertices or edges as possible (the feedback vertex set and feedback edge set problem, respectively) is NP-hard, but any directed graph can be made into a DAG (its condensation) by contracting each strongly <b>connected</b> <b>component</b> into a single supervertex. The problems of finding shortest paths and longest paths can be solved on DAGs in linear time, in contrast to arbitrary graphs for which shortest path algorithms are slower and longest path problems are NP-hard.|$|E
25|$|A poset is graded if {{and only}} if every <b>connected</b> <b>component</b> of its {{comparability}} graph is graded, so further characterizations will suppose this comparability graph to be connected. On each <b>connected</b> <b>component</b> the rank function is only unique up to a uniform shift (so the rank function can always be chosen so that the elements of minimal rank in their <b>connected</b> <b>component</b> have rank 0).|$|E
5000|$|The set [...] has [...] <b>connected</b> <b>components</b> (intervals). Hence, {{its image}} [...] also has [...] <b>connected</b> <b>components</b> (1-dimensional curves in [...] ).|$|R
30|$|Based on the {{algorithm}} presented in section  3.1, we propose a more generalized algorithm {{to generate the}} random graph with a prescribed number (one or multiple) of <b>connected</b> <b>components.</b> To obtain a random graph with n nodes and c <b>connected</b> <b>components,</b> we intend to generate the <b>connected</b> <b>components</b> one by one, and then form them into a whole graph. The first thing we should do {{is to determine the}} value of node number and average degree for each <b>connected</b> <b>components.</b>|$|R
5000|$|If X {{has only}} finitely many <b>connected</b> <b>{{component}}s,</b> then each component is the complement of a finite union of closed sets and therefore open. In general, the <b>connected</b> <b>components</b> {{need not be}} open, since, e.g., there exist totally disconnected spaces (i.e., [...] for all points x) which are not discrete, like Cantor space. However, the <b>connected</b> <b>components</b> of a locally connected space are also open, and thus are clopen sets. [...] It follows that a locally connected space X is a topological disjoint union [...] of its distinct <b>connected</b> <b>components.</b> Conversely, if for every open subset U of X, the <b>connected</b> <b>components</b> of U are open, then X admits a base of connected sets and is therefore locally connected.|$|R
25|$|Foreground pixels {{are grouped}} using 2D <b>connected</b> <b>component</b> analysis.|$|E
25|$|A cograph is a graph {{in which}} every <b>connected</b> <b>component</b> is a distance-hereditary graph with {{diameter}} at most 2.|$|E
25|$|According to the {{handshaking}} lemma, every <b>connected</b> <b>component</b> of an {{undirected graph}} has an even number of odd-degree vertices.|$|E
30|$|The <b>connected</b> <b>components</b> are sorted {{according}} {{to the number of}} vertices. The former K <b>connected</b> <b>components</b> are chosen as {{the main part of the}} repaired strategy.|$|R
50|$|The tree-depth of an {{undirected graph}} {{has a very}} similar definition, using undirected {{connectivity}} and <b>connected</b> <b>components</b> in place of strong connectivity and strongly <b>connected</b> <b>components.</b>|$|R
40|$|We present faster {{algorithms}} for computing the 2 -edge and 2 -vertex strongly <b>connected</b> <b>components</b> of a directed graph, {{which are}} straightforward generalizations of strongly <b>connected</b> <b>components.</b> While in undirected graphs the 2 -edge and 2 -vertex <b>connected</b> <b>components</b> {{can be found}} in linear time, in directed graphs only rather simple O(m n) -time algorithms were known. We use a hierarchical sparsification technique to obtain algorithms that run in time O(n^ 2). For 2 -edge strongly <b>connected</b> <b>components</b> our algorithm gives the first running time improvement in 20 years. Additionally we present an O(m^ 2 / n) -time algorithm for 2 -edge strongly <b>connected</b> <b>components,</b> and thus improve over the O(m n) running time also when m = O(n). Our approach extends to k-edge and k-vertex strongly <b>connected</b> <b>components</b> for any constant k with a running time of O(n^ 2 ^ 2 n) for edges and O(n^ 3) for vertices...|$|R
25|$|For every x in X, {{the fiber}} over x is a {{discrete}} subset of C. On every <b>connected</b> <b>component</b> of X, the fibers are homeomorphic.|$|E
25|$|Some sparse graphs do {{not have}} {{separators}} of sublinear size: in an expander graph, deleting up to a constant fraction of the vertices still leaves only one <b>connected</b> <b>component.</b>|$|E
25|$|Some authors {{consider}} a spanning forest to be a maximal acyclic subgraph of the given graph, or equivalently a graph {{consisting of a}} spanning tree in each <b>connected</b> <b>component</b> of the graph.|$|E
25|$|Closed {{surfaces}} {{with multiple}} <b>connected</b> <b>components</b> are classified by {{the class of}} each of their <b>connected</b> <b>components,</b> and thus one generally assumes that the surface is connected.|$|R
30|$|Denote by N(F) {{the number}} of <b>connected</b> <b>components</b> of the set F⊂R^d; 0 for an empty set, and +∞ if the set of <b>connected</b> <b>components</b> is infinite.|$|R
50|$|Closed {{surfaces}} {{with multiple}} <b>connected</b> <b>components</b> are classified by {{the class of}} each of their <b>connected</b> <b>components,</b> and thus one generally assumes that the surface is connected.|$|R
25|$|C is the <b>connected</b> <b>component</b> of {{the open}} set of {{invertible}} elements of E containing 1. It consists of exponentials of elements of E and the exponential map gives a diffeomorphism of E onto C.|$|E
25|$|Every cograph is a distance-hereditary graph, {{meaning that}} every induced path in a cograph is a {{shortest}} path. The cographs may be characterized among the distance-hereditary graphs as having diameter two in each <b>connected</b> <b>component.</b>|$|E
25|$|A {{consequence}} {{is that the}} kernel of the Artin map is the <b>connected</b> <b>component</b> of {{the identity of the}} idele class group, so that the abelianization of the Galois group of F is the profinite completion of the idele class group.|$|E
2500|$|If X {{has only}} finitely many <b>connected</b> <b>{{component}}s,</b> then each component is the complement of a finite union of closed sets and therefore open. [...] In general, the <b>connected</b> <b>components</b> {{need not be}} open, since, e.g., there exist totally disconnected spaces (i.e., [...] for all points x) which are not discrete, like Cantor space. [...] However, the <b>connected</b> <b>components</b> of a locally connected space are also open, and thus are clopen sets. [...] It follows that a locally connected space X is a topological disjoint union [...] of its distinct <b>connected</b> <b>components.</b> [...] Conversely, if for every open subset U of X, the <b>connected</b> <b>components</b> of U are open, then X admits a base of connected sets and is therefore locally connected.|$|R
30|$|The two {{important}} results {{in this paper}} are the intractability of the decomposition into (open) strongly <b>connected</b> <b>components</b> in FSDNs {{and the construction of}} DMSTs over an already existing strongly <b>connected</b> <b>components.</b> Note also that the very concept of Open <b>Connected</b> <b>Components</b> is completely new, and somewhat surprising, arising because of the dynamics of the networks, and may find important applications.|$|R
50|$|The {{usage of}} the term <b>connected</b> <b>components</b> {{labeling}} (CCL) and its definition is quite consistent in the academic literature, whereas <b>connected</b> <b>components</b> analysis (CCA) varies in terms of both, terminology and problem definition.|$|R
25|$|Note that {{in every}} step, the node with the {{smallest}} number in each <b>connected</b> <b>component</b> always enters I, so there is always some progress. In particular, in the worst-case of the previous algorithm (n/2 connected components with 2 nodes each), a MIS will {{be found in a}} single step.|$|E
25|$|As {{an example}} of the state of art, there are {{efficient}} algorithms to find at least a point in every <b>connected</b> <b>component</b> of a semi-algebraic set, and thus to test if a semi-algebraic set is empty. On the other hand, CAD is yet, in practice, the best algorithm to count the number of connected components.|$|E
25|$|This can {{be further}} {{generalized}} by defining a Q-valued Euler characteristic for certain finite categories, a notion compatible with the Euler characteristics of graphs, orbifolds and posets mentioned above. In this setting, the Euler characteristic of a finite group or monoid G is 1/|G|, and the Euler characteristic of a finite groupoid {{is the sum of}} 1/|Gi|, where we picked one representative group Gi for each <b>connected</b> <b>component</b> of the groupoid.|$|E
50|$|Unlike the <b>connected</b> <b>components</b> of a space, the {{irreducible}} components {{need not}} be disjoint (i.e. they need not form a partition). In general, the irreducible components will overlap. Since every irreducible space is <b>connected,</b> the irreducible <b>components</b> will always lie in the <b>connected</b> <b>components.</b>|$|R
40|$|This paper characterizes <b>connected</b> <b>components</b> of both {{directed}} and undirected graphs as atomic fixpoints. As algebraic structure for our investigations we combine complete Boolean algebras with the well-known theory of Kleene Algebra with domain. Using diamond operators as an algebraic generalization of relational image and preimage we show how <b>connected</b> <b>components</b> can be modeled as atomic fixpoints of functions operating on tests and prove some advanced theorems concerning <b>connected</b> <b>components...</b>|$|R
30|$|If {{resulting}} {{number of}} <b>connected</b> <b>components</b> is equal or higher than n (could be higher if {{a number of}} cells has the same activity level a) stop the algorithm defining selected <b>connected</b> <b>components</b> as the hotspots.|$|R
