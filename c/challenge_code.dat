2|379|Public
40|$|We {{propose a}} deep learning-based {{framework}} for instance-level object segmentation. Our method mainly {{consists of three}} steps. First, We train a generic model based on ResNet- 101 for foreground/background segmentations. Second, based on this generic model, we fine-tune it to learn instance-level models and segment individual objects by using augmented object annotations in first frames of test videos. To distinguish different instances in the same video, we compute a pixel-level score map for each object from these instance-level models. Each score map indicates the objectness likelihood and is only computed within the foreground mask obtained in the first step. To further refine this per frame score map, we learn a spatial propagation network. This network aims {{to learn how to}} propagate a coarse segmentation mask spatially based on the pairwise similarities in each frame. In addition, we apply a filter on the refined score map that aims to recognize the best connected region using spatial and temporal consistencies in the video. Finally, we decide the instance-level object segmentation in each video by comparing score maps of different instances. Comment: CVPR 2017 Workshop on DAVIS <b>Challenge.</b> <b>Code</b> is available at [URL]...|$|E
40|$|An {{analysis}} of different techniques for recognizing and detecting objects under extreme scale variation is presented. Scale specific and scale invariant design of detectors are compared by training them with different configurations of input data. To examine if upsampling images {{is necessary for}} detecting small objects, we evaluate the performance of different network architectures for classifying small objects on ImageNet. Based on this analysis, we propose a deep end-to-end trainable Image Pyramid Network for object detection which operates on the same image scales during training and inference. Since small and large objects are difficult to recognize at smaller and larger scales respectively, we present a novel training scheme called Scale Normalization for Image Pyramids (SNIP) which selectively back-propagates the gradients of object instances of different sizes {{as a function of}} the image scale. On the COCO dataset, our single model performance is 45. 7 % and an ensemble of 3 networks obtains an mAP of 48. 3 %. We use ImageNet- 1000 pre-trained models and only train with bounding box supervision. Our submission won the Best Student Entry in the COCO 2017 <b>challenge.</b> <b>Code</b> will be made available at [URL] CVPR 2018 submissio...|$|E
40|$|Campus speech codes {{began to}} spring up on {{university}} campuses during the 1980 s {{and continue to}} operate today. The codes regulate various forms of arguably offensive speech, including speech regarding race, gender, sexual orientation, ideology, views, and political affiliation. Numerous litigants have challenged the chilling effect these policies have on student and faculty speech, but {{in cases where the}} <b>challenged</b> <b>code</b> has not yet been enforced, some courts find that the plaintiff has not met the “injury-in-fact” requirement for Article III standing. The Supreme Court has not ruled on standing requirements in speech <b>code</b> <b>challenges</b> and lower courts are divided. This Comment analyzes this division and proposes that the injury-in-fact requirement should be satisfied by a plaintiff’s statement describing the intended speech and how it is chilled by the <b>challenged</b> speech <b>code...</b>|$|R
50|$|For example, {{when other}} {{communications}} security methods are unavailable, the U.S. military uses the AKAC-1553 TRIAD numeral cipher to authenticate and encrypt some communications. TRIAD includes {{a list of}} three-letter <b>challenge</b> <b>codes,</b> which the verifier is supposed to choose randomly from, and random three-letter responses to them. For added security, each set of codes is only valid for a particular time period which is ordinarily 24 hours.|$|R
50|$|Hack Reactor’s admissions process {{consists}} of a simple <b>coding</b> <b>challenge,</b> followed by a technical interview. The <b>coding</b> <b>challenge</b> focuses on basic JavaScript concepts, such as objects, arrays and functions. The technical interview is more involved and tests both technical skills and soft skills, such as the student’s willingness and ability to learn.|$|R
50|$|Authenticate: To request {{or provide}} a {{response}} for a <b>coded</b> <b>challenge.</b>|$|R
30|$|The {{affinity}} {{diagram of}} the data analysis creates the users’ flow which they recalled the order of their tasks during the interviews (Fig.  3). The user starts the journey with a challenge or task, which is coded in red. The goal coded in green is for the user to win the challenge and meet their expectations, coded in yellow. In addition, the aspect of teamwork in a <b>challenge,</b> <b>coded</b> in blue, suggests activities that users can do together. The diagram provides {{a clear picture of}} what users need to complete their tasks and what they want to have gained {{at the end of each}} task.|$|R
40|$|Assessing a {{software}} engineer's problem-solving ability to algorithmic programming tasks {{has been an}} essential part of technical interviews at some of the most successful technology companies for several years now. Despite the adoption of <b>coding</b> <b>challenges</b> among these companies, {{we do not know what}} influences the performance of different software engineers in solving such <b>coding</b> <b>challenges.</b> We conducted an exploratory study with software engineering students to find hypothesis on what individual characteristics make a good <b>coding</b> <b>challenge</b> solver. Our findings show that the better coding challengers have also better exam grades and more programming experience. Furthermore, conscientious as well as sad software engineers performed worse in our study...|$|R
5000|$|During the {{mathematical}} <b>challenge,</b> the <b>code</b> [...] "A=1, B=2, C=3, etc..." [...] gave the following {{answers to the}} puzzles: [...] "201 142 51". When re-arranged as 20, 1, 14, 25, 1 and using the same key to turn this back into letters, it spells TANYA.|$|R
40|$|In {{preparing}} for missions to the Moon and Mars, NASA has identified high priority “critical path roadmap ” (CPR) questions, {{two of which}} focus {{on the performance of}} mission control personnel. NASA flight controllers have always worked in an incredibly demanding setting, but the International Space Station (ISS) poses even more challenges than prior missions. We interviewed 14 senior and 12 junior ISS flight controllers about leadership and cultural challenges they face and strategies for addressing these <b>challenges.</b> <b>Coding</b> of qualitative data showed consensus on some issues, such as the importance of building a personal relationship with Russian colleagues. Viewpoints of junior and senior controllers differed in some areas, such as training. Findings provide some answers to both CPR questions...|$|R
50|$|Other coding {{competitions}} {{include the}} Reverse <b>Coding</b> <b>challenge,</b> and Algomaniac, which tests your analytical prowess along with pattern recognition skills.|$|R
50|$|One of {{the ongoing}} <b>challenges</b> in <b>Coding</b> Theory is to have error {{correcting}} codes achieve an optimal trade-off between (Coding) Rate and Error-Correction Radius. Though {{this may not be}} possible to achieve practically (due to Noisy Channel Coding Theory issues), quasi optimal tradeoffs can be achieved theoretically.|$|R
5000|$|In {{the late}} 1990s two long books {{summarized}} the cultural turn in social-movement studies, Alberto Melucci's <b>Challenging</b> <b>Codes</b> and James M. Jasper's The Art of Moral Protest. Melucci {{focused on the}} creation of collective identities as the purpose of social movements, especially the [...] "new social movements", whereas Jasper argued that movements provide participants with a chance to elaborate and articulate their moral intuitions and principles. Both recognized the importance of emotions in social movements, although Jasper developed this idea more systematically. Along with Jeff Goodwin and Francesca Polletta, Jasper organized a conference in New York in 1999 that helped put emotions on the intellectual agenda for many scholars of protest and movements. He has continued to write about the emotional dynamics of protest in the years since.|$|R
40|$|Due to {{the large}} amount of {{potential}} parallelism, resource management is a critical issue in multithreaded architectures. The <b>challenge</b> in <b>code</b> generation is to control the parallelism without reducing the machines ability to exploit it. Controlledparallelism reduces idle time, communication, and delay causedby synchronization. At the same time it increases the potential for exploitation of program *data structure* locality...|$|R
25|$|He gave women {{a unique}} place in Tunisian society, notably abolishing polygamy, {{creating}} a judicial procedure for divorce and requiring marriage {{to be performed}} only {{in the event of}} the mutual consent of both parties. Bourguiba's successor, Zine El Abidine Ben Ali, did not <b>challenge</b> the <b>Code</b> and himself introduced modifications that reinforced it, in particular with the July 1993 amendment.|$|R
40|$|We give an {{experimental}} study of a new O(mn ff(m; n)) time implementation of Edmonds' algorithm for a maximum-cardinality matching in a sparse general graph of n vertices and m edges. The implementation incorporates several optimizations stemming from choosing a depth-first order in which to examine edges during the search for augmenting paths, and we study the iteraction between several heuristics {{with the potential to}} speed up the code in practice. From experiments on several classes of graphs, we conclude that the simplest optimization, a stopping-test for the depth-first search for an alternating path, results in the greatest performance gain. The resulting code appears to be the fastest among those publicly available on random, random d-regular, random k-cycle, and k-nearest neighbor graphs with up to 100, 000 vertices and 500, 000 edges, achieving on the largest graphs a speedup of a factor of 4 to 350 over the LEDA and two of the DIMACS <b>challenge</b> <b>codes.</b> Keywords Unweighted matchi [...] ...|$|R
50|$|These {{patterns}} {{are just a}} few examples out of dozens {{that can be used to}} help children unpack the <b>challenging</b> English alphabetic <b>code.</b> While complex, English spelling does retain order and reason.|$|R
30|$|As {{presented}} in the previous sections, the complicated intermode decision consumes plenty of coding time, which prevents HEVC encoder from practical application. Hence, optimizing interprediction is a main <b>challenge</b> for fulfilling <b>coding</b> time saving.|$|R
5000|$|The toolkit is {{implemented}} using generic programming principles. Such heavily templated C++ <b>code</b> <b>challenges</b> many compilers; hence development {{was carried out}} with the latest versions of the MSVC, Sun, gcc, Intel, and SGI compilers.|$|R
40|$|Abstract—Efficiently porting {{ordinary}} {{applications to}} Blue Gene/Q supercomputers {{is a significant}} <b>challenge.</b> <b>Codes</b> are often originally developed without considering advanced archi-tectures and related tool chains. Science needs frequently lead users to want to run large numbers of relatively small jobs (of-ten called many-task computing, an ensemble, or a workflow), which can conflict with supercomputer configurations. In this paper, we discuss techniques developed to execute ordinary applications over leadership class supercomputers. We use the high-performance Swift parallel scripting framework and build two workflow execution techniques–sub-jobs and main-wrap. The sub-jobs technique, built {{on top of the}} IBM Blue Gene/Q resource manager Cobalt’s sub-block jobs, lets users submit multiple, independent, repeated smaller jobs within a single larger resource block. The main-wrap technique is a scheme that enables C/C++ programs to be defined as functions that are wrapped by a high-performance Swift wrapper and that are invoked as a Swift script. We discuss the needs, benefits, technicalities, and current limitations of these techniques. We further discuss the real-world science enabled by these techniques and the results obtained. 1...|$|R
40|$|The {{original}} publication {{is available}} at: www. springerlink. com???. Copyright Springer [Full text {{of this article}} is not available in the UHRA]While computers can be used to model human competencies, formalization has its limits. Sensori-motor dynamics are probably necessary to intelligence. Applied to language, verbal patterns become constraints or, in Elman???s (2004) terms, cues to meaning. Unlike symbol processors, humans act, mean and use the feeling of thinking (Harnad 2005). While language has an artificial (or formal) aspect, human intelligence is embodied. In spite of widespread belief to the contrary, brains do not need to generate sets of sentences. In <b>challenging</b> <b>code</b> views of language, we find parallels with the complex systems we call cells. Given DNA code-makers, formal features constrain protein synthesis. Life, Barbieri (2007) argues, can be traced to natural artifacts. 1 This parallels how culture enables us to bring biodynamics under the control of physical and non-physical (or cultural) patterns. In turning from physical symbol systems, weight falls on DEEDS: human thinking is Dynamical, Embodied, Embedded, Distributed and Situated (Walmsley 2008) ...|$|R
30|$|Following Betihavas et al.’s (2016) analysis, the {{challenges}} {{identified in the}} reviewed studies were categorized into three main themes, namely student-related challenges, faculty-related challenges, and operational challenges. Each category of <b>challenge</b> was further <b>coded</b> into sub-categories.|$|R
50|$|Technical {{candidates}} - or “Geeks” - are vetted {{through the}} Speak With A Geek platform. Geeks undergo testing, perform <b>code</b> <b>challenges,</b> {{take part in}} video interviews, and join hackathons through the Speak With A Geek platform.|$|R
30|$|We must {{acknowledge}} that the pedagogical principles were <b>challenging</b> to objectively <b>code,</b> and many iterations of coding were required to achieve definitional guidelines and clarity and reliability. We discuss some of our difficulties with particular codes below.|$|R
30|$|One {{commonly}} used advantage of 3 D {{is the ability}} to portray motion in the depth plane (e.g., motion toward or away from the viewer). This effect is often used in production. However, fast depth motion can lead to visual discomfort [16, 17]. The non-translational motion behavior (i.e., motion in the depth plane) <b>challenges</b> video <b>coding</b> algorithms, causing the appearance of different artifacts in the two views, which often results in binocular rivalry.|$|R
50|$|MacHack's small, {{informal}} {{ethic and}} on-site <b>coding</b> <b>challenges</b> {{have been carried}} on {{by a number of}} conferences; for example, the C4 conference was explicitly created as an attempt to fill the void left by the end of MacHack.|$|R
30|$|Preserving MCDC {{coverage}} on a transformed program is especially <b>challenging,</b> since the <b>code</b> transformation may produce arbitrary groupings of conditions into decisions. Especially {{the requirement that}} each condition can independently influence the outcome of its conditions, is rather complex to check.|$|R
50|$|It takes {{substantial}} time {{to develop}} the algorithmic and software infrastructure for commercial sequential mesh generation libraries. Moreover, improvements in terms of quality, speed, and functionality are openended which makes the task of creating leading edge parallel mesh generation <b>codes</b> <b>challenging.</b>|$|R
40|$|Syllabus for a graduate-level {{course with}} the {{following}} overview: "We will examine how theoretical discourse has evolved through shifting technological platforms, with {{particular attention to the}} <b>challenges</b> software, <b>code,</b> and networks present to our understanding of texts. We will engage with examples of complex procedural works ranging from video games to electronic literature and social media. Each of these new platforms challenges our understanding of knowledge and how knowledge is circulated, curated, and redefined in a web-centric culture. ...|$|R
50|$|The Sexual Revolution, {{also known}} as a time of Sexual Liberation, was a social {{movement}} that <b>challenged</b> traditional <b>codes</b> of behavior related to sexuality and interpersonal relationships throughout the Western world from the 1960s to the 1980s. Sexual liberation included increased acceptance of sex outside of traditional heterosexual, monogamous relationships (primarily marriage). The normalization of contraception and the pill, public nudity, pornography, premarital sex, homosexuality, and alternative forms of sexuality, and the legalization of abortion all followed.|$|R
40|$|We give an {{experimental}} study of a new O(mn ff(m; n)) -time implementation of Edmonds' algorithm for a maximum-cardinality matching in a sparse general graph of n vertices and m edges. The implementation incorporates several optimizations resulting from a depth-first order to search for augmenting paths, and we study the iteraction between four heuristics, each {{with the potential to}} significantly speed up the code in practice, through experiments with all sixteen possible variants. The experiments indicate that the simplest heuristic, an earlytermination test for the depth-first search, results in the greatest performance gain, and yields an implementation that on graphs with large degree actually finds an optimal solution in less time than a standard greedy heuristic. The resulting code appears to be the fastest among those publicly available on the classes of random, k-regular, union-of-k-cycle, and Euclidean k-nearest-neighbor graphs for tests with up to 100, 000 vertices and 500, 000 edges with average degree from 1 to 10, achieving a maximum speedup of 50 over the two LEDA codes, and 4 and 350 over two of the DIMACS implementation <b>challenge</b> <b>codes,</b> while never taking longer than these implementations...|$|R
40|$|Motivation. Information {{security}} is a pressing <b>challenge</b> for mobile <b>code</b> technologies. Current security architectures provide no end-to-end security guarantees for mobile code: such code may either intentionally or accidentally propagate sensitive information to an adversary. However, recent progress {{in the area of}} language-base...|$|R
40|$|GPU Offloading is {{emergent}} programming model. OpenMP includes in {{its latest}} 4. 0 specification the accelerator model. In this paper {{we present a}} newly implementation of this specification while generationg "native" GPU code in the OmpSs programming model developed at the Barcelona Supercomputing Center. Focused on targeting NVIDIA GPUs, our work {{is based on an}} OpenMP 4. 0 implementation in the Mercurium source-to-source compiler infrastructure referred MACC[1] (Mercurium ACCelerator compiler). Finally, the paper is also discuss <b>challenges</b> od <b>code</b> generation for GPUs...|$|R
40|$|Decoding of {{convolutional}} codes poses {{a significant}} <b>challenge</b> for <b>coding</b> theory. Classical methods, based on e. g. Viterbi decoding, suffer from being computationally expensive and are restricted therefore to codes of small complexity. Based on analogies with model predictive optimal control, we propose a new iterative method for convolutional decoding that is cheaper to implement than established algorithms, while still offering significant error correction capabilities. The algorithm is particularly well-suited for decoding special types of convolutional codes, such as e. g. cyclic convolutional codes...|$|R
50|$|It {{specifically}} <b>challenges</b> Utah <b>Code</b> § 67-5-19, §§ 76-10-1205 through 1206, and §§ 76-10-1230 through 1233. The plaintiffs are The King’s English, Inc.; Sam Weller’s Zion Bookstore; Nathan Florence; W. Andrew McCullough; Computer Solutions International, Inc.; Mountain Wireless Utah, LLC; the Sexual Health Network, Inc., Utah Progressive Network Education Fund, Inc.; the American Booksellers Foundation for Free Expression; the American Civil Liberties Union of Utah; the Association of American Publishers; the Comic Book Legal Defense Fund; the Freedom to Read Foundation; and the Publishers Marketing Association.|$|R
40|$|Abstract: Even with MPP {{architectures}} {{moving towards}} larger nodes with more powerful pro-cessors, communication delay remains {{a critical factor}} in application performance. We examine the use of scheduled or off-line routing to provide large-scale parallel computers with efficient com-munication. Off-line algorithms enable nearly 100 % wire utilization, priority ordering of packets, and extremely efficient switching. Moreover, optimal schedules are known for many of the most time-consuming communication tasks, the ones that dominate a number of grand <b>challenge</b> <b>codes.</b> Communication tasks executing under these optimal schedules have excellent complexity indepen-dent of the number of processors. They also often have the property that elements arrive at their destinations at regular intervals, typically averaging one element per cycle per node. This allows computation to be chained with communication with the result that communication contributes only trivially to computation time. This is {{in stark contrast to the}} actual timings that are obtained on current multicomputers where communication dominates. We show here that these results di-minish by only small factors even after accounting for realistic wire delay, pin bandwidth, pin-out, switching latency, and network dimensionality. We also present a preliminary comparison with an on-line network showing that the performance improvement—not including chaining—is a factor of between 4 and 13 for small networks, depending on implementation and configuration. ...|$|R
