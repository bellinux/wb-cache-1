9|37|Public
5|$|KAL007's {{divergence}} {{prevented the}} aircraft from transmitting its position via shorter range {{very high frequency}} radio (VHF). It therefore requested KAL015, also en route to Seoul, to relay reports to air traffic control on its behalf. KAL007 requested KAL015 to relay its position three times. At 14:43UTC, KAL007 directly transmitted a change of {{estimated time of arrival}} for its next waypoint, NEEVA, to the international flight service station at Anchorage, but it did so over the longer range high frequency radio (HF) rather than VHF. HF transmissions are able to carry a longer distance than VHF, but are vulnerable to electromagnetic interference and static; VHF is clearer with less interference, and preferred by flight crews. The inability to establish direct radio communications to be able to transmit their position directly did not alert the pilots of KAL007 of their ever-increasing divergence and was not considered unusual by air traffic controllers. Halfway between Bethel and waypoint NABIE, KAL007 passed through the southern portion of the North American Aerospace Defense <b>Command</b> <b>buffer</b> zone. This zone is north of Romeo 20 and off-limits to civilian aircraft.|$|E
50|$|Linux OpenGL {{drivers are}} split in two: a kernel-driver and a user-space driver. The user-space driver {{does all the}} {{translation}} of OpenGL commands into machine code to be submitted to the GPU. To {{reduce the number of}} system calls, the user-space driver implements marshalling. If the GPU's <b>command</b> <b>buffer</b> is full of rendering data, the API could simply store the requested rendering call in a temporary buffer and, when the <b>command</b> <b>buffer</b> is close to being empty, it can perform a switch to kernel-mode and add a number of stored commands all at once.|$|E
50|$|This is {{an issue}} because calling kernel-mode {{operations}} from user-mode requires performing a system call (i.e., making the CPU switch to kernel mode). This is a slow operation, taking {{on the order of}} microseconds to complete. During this time, the CPU can perform no operations. As such, minimizing the number of times this switching operation occurs would improve performance. For example, if the GPU's <b>command</b> <b>buffer</b> is full of rendering data, the API could simply store the requested rendering call in a temporary buffer and, when the <b>command</b> <b>buffer</b> is nearly empty, it can perform a switch to kernel-mode and add a set of stored commands in a batch. This is termed marshalling.|$|E
5000|$|Close to linear {{performance}} scaling from reordering <b>command</b> <b>buffers</b> onto multiple CPU cores ...|$|R
50|$|Sets size of <b>command</b> history <b>buffer</b> to size.|$|R
50|$|At a {{lower level}} {{developers}} can use LibGCM, which is an API that builds RSX <b>command</b> <b>buffers</b> at {{a lower level}}. (PSGL is actually implemented on top of LibGCM). This is done by setting up commands (via FIFO Context) and DMA Objects and issuing them to the RSX via DMA calls.|$|R
50|$|Primitive vertex {{attribute}} {{data may}} be inserted {{frame by frame}} into a <b>command</b> <b>buffer</b> by a rendering API. This involves significant bandwidth and processor time (especially if the graphics processing unit is on a separate bus), but may be advantageous for data generated dynamically by the CPU. It is less common {{since the advent of}} increasingly versatile shaders, with which a graphics processing unit may generate increasingly complex effects without the need for CPU intervention.|$|E
50|$|Rendering {{is done by}} {{presenting}} the library with a target XvMCSurface and up to two reference XvMCSurfaces for the motion compensation, a buffer of 8x8 blocks and a <b>command</b> <b>buffer</b> which describes {{how to use the}} 8x8 blocks along with motion compensation vectors to construct the data in the target XvMCSurface. When the pipeline starts at the iDCT level, Xv will perform the IDCT on the blocks before performing the motion compensation. A function is provided to copy/overlay a portion of the XvMCSurface to a drawable with arbitrary scaling.|$|E
50|$|KAL 007's {{divergence}} {{prevented the}} aircraft from transmitting its position via shorter range {{very high frequency}} radio (VHF). It therefore requested KAL 015, also en route to Seoul, to relay reports to air traffic control on its behalf. KAL 007 requested KAL 015 to relay its position three times. At 14:43 UTC, KAL 007 directly transmitted a change of {{estimated time of arrival}} for its next waypoint, NEEVA, to the international flight service station at Anchorage, but it did so over the longer range high frequency radio (HF) rather than VHF. HF transmissions are able to carry a longer distance than VHF, but are vulnerable to electromagnetic interference and static; VHF is clearer with less interference, and preferred by flight crews. The inability to establish direct radio communications to be able to transmit their position directly did not alert the pilots of KAL 007 of their ever-increasing divergence and was not considered unusual by air traffic controllers. Halfway between Bethel and waypoint NABIE, KAL 007 passed through the southern portion of the North American Aerospace Defense <b>Command</b> <b>buffer</b> zone. This zone is north of Romeo 20 and off-limits to civilian aircraft.|$|E
5000|$|The GEM API also {{provides}} ioctls {{for control of}} the execution flow (<b>command</b> <b>buffers),</b> but they are Intel specific [...] - to be used with Intel i915 and later GPUs. No other DRM driver has attempted to implement any part of the GEM API beyond the memory management specific ioctls.|$|R
5000|$|... 4 April 2007: First use of firecode reset of {{spacecraft}} {{at approximately}} 2130 UTC. This command toggles the reset {{switch on the}} MIP-405 processor and reboots the operating system. This reset returned the CFTP and MiDN experiments to off and cleared all <b>command</b> <b>buffers.</b> At 2324 UTC the spacecraft responded to a transmitter on command. Telemetry confirmed that the reboot was successful.|$|R
40|$|Volume: support {{loading of}} {{volumetric}} data from volume graphics files (via SCIFIO) FXSwapchain/OpenGLRenderer/SceneryPanel: bug fixes and performance improvements for JavaFX integration (thanks @hanslovsky!) VulkanRenderer: fixes race condition in Node initialisation VulkanRenderer: better caching of pre-recorded <b>command</b> <b>buffers</b> PointCloud: fixes bounding box discovery Line: reintroduces custom shaders for line rendering OpenGLRenderer: fix concurrency issues when updating textures dependency updates: bumps Kotlin to 1. 1. 61 bumps spirvcrossj to 0. 3. 1, fixes native library discovery issues when running from within Fiji/Image...|$|R
40|$|The goal of master&# 8217;s thesis was to {{demonstrate}} and benchmark peformance of Mantle and Vulkan APIs with different optimization methods. This thesis proposes a rendering toolkit with optimization methods based on parallel <b>command</b> <b>buffer</b> generating, persistent staging buffers mapping, minimal pipeline configuration and descriptor sets changing, device memory pre-allocating with managing and sharing between multiple resources. The result is reference implementation that could render dynamic scene {{with thousands of}} objects in real time...|$|E
40|$|The Fast-On-orbit Recording of Transient Events (FORTE) {{satellite}} is {{the second}} satellite to be developed and flown by Los Alamos National Laboratory and {{is scheduled to be}} launched August, 1997 by a Pegasus XL rocket. FORTE follows in the footsteps of the ALEXIS satellite in utilizing a very small operations crew for mission operations. Partially based upon the ALEXIS automation and World Wide Web (WWW) usage for data dissemination, FORTE began at an early stage of ground processing to use the web as a repository of information about all aspects of the satellite. Detailed descriptions of the various satellite and experiment components, cable diagrams, integration photographs as well as extensive test data have all been compiled into a single site as a means of archiving the data at a single location. In this manner, it is readily available during times of ground testing, ground station operation training as well as anomaly resolution. Small satellites usually require extensive effort to optimize operation under minimal resources. For the FORTE satellite, a unique planning tool has been developed over the past 2 years which balances the various resources of the satellite (power, memory, downlink, on board <b>command</b> <b>buffer,</b> etc.) to provide the maximum data acquisition. This paper will concentrate on a description of both the extensive web interface and the planning tool. 6 refs...|$|E
40|$|The {{mathematical}} {{theory of}} capillary surfaces has developed steadily over the centuries, {{but it was}} not until the last few decades that new technologies have put a more urgent demand on a substantially more qualitative and quantitative understanding of phenomena relating to capillarity in general. So far, the new theory development successfully predicts the behavior of capillary surfaces for special cases. However, an efficient quantitative mathematical prediction of capillary phenomena related to the shape and stability of geometrically complex equilibrium capillary surfaces remains a significant challenge. As one of many numerical tools, the open-source Surface Evolver (SE) algorithm has played an important role over the last two decades. The current effort was undertaken to provide a front-end to enhance the accessibility of SE for the purposes of design and analysis. Like SE, the new code is open-source and will remain under development for the foreseeable future. The ultimate goal of the current Surface Evolver Fluid Interface Tool (SEFIT) development is to build a fully integrated front-end with a set of graphical user interface (GUI) elements. Such a front-end enables the access to functionalities that are developed along with the GUIs to deal with pre-processing, convergence computation operation, and post-processing. In other words, SE-FIT is not just a GUI front-end, but an integrated environment that can perform sophisticated computational tasks, e. g. importing industry standard file formats and employing parameter sweep functions, which are both lacking in SE, and require minimal interaction by the user. These functions are created using a mixture of Visual Basic and the SE script language. These form the foundation for a high-performance front-end that substantially simplifies use without sacrificing the proven capabilities of SE. The real power of SE-FIT lies in its automated pre-processing, pre-defined geometries, convergence computation operation, computational diagnostic tools, and crash-handling capabilities to sustain extensive computations. SE-FIT performance is enabled by its so-called file-layer mechanism. During the early stages of SE-FIT development, it became necessary to modify the original SE code to enable capabilities required for an enhanced and synchronized communication. To this end, a file-layer was created that serves as a <b>command</b> <b>buffer</b> to ensure a continuous and sequential execution of commands sent from the front-end to SE. It also establishes a proper means for handling crashes. The file layer logs input commands and SE output; it also supports user interruption requests, back and forward operation (i. e. undo and redo), and others. It especially enables the batch mode computation of a series of equilibrium surfaces and the searching of critical parameter values in studying the stability of capillary surfaces. In this way, the modified SE significantly extends the capabilities of the original SE...|$|E
50|$|Status {{requests}} {{are performed}} as READ <b>BUFFER</b> SCSI <b>commands,</b> enclosure action requests as WRITE <b>BUFFER</b> <b>commands.</b>|$|R
50|$|ILCS was {{operational}} at most Minuteman II wings (except the 44th Missile Wing, {{which was}} never upgraded) {{by the late}} 1970s. Minuteman III wings had a similar install, designated <b>Command</b> Data <b>Buffer,</b> providing the newer system the potential for remote retarging.|$|R
50|$|In November 1975, {{the wing}} began an {{integrated}} improvement program {{that included a}} <b>command</b> data <b>buffer</b> and an improved launch control system. In 1985, the 341st SMW became the lead unit in the Minuteman Integrated Life Extension program (Rivet Mile).|$|R
5000|$|...c command : Execute <b>command</b> {{on first}} <b>buffer</b> loaded from file. May be used {{up to ten}} times.|$|R
5000|$|Epsilon, an Emacs clone by Lugaru Software. Versions for DOS, Windows, Linux, FreeBSD, Mac OS X and O/S 2 are {{bundled in}} the release. It uses a non-Lisp {{extension}} language with C syntax {{and used a}} very early concurrent <b>command</b> shell <b>buffer</b> implementation under the single-tasking MS-DOS.|$|R
5000|$|In Gypsy, no <b>command</b> or <b>buffer</b> {{was needed}} to insert new text. The user simply {{selected}} an insertion point with the mouse and typed the new text. Each inserted character went directly into the document at the insertion point, which was automatically repositioned after the new character.|$|R
5000|$|HISTORY (DR DOS 3.41 {{and higher}} only) : Enables and configures console and <b>command</b> line history <b>buffer</b> and {{extended}} pattern search functionality.|$|R
5000|$|File: LCC Blast Door 1.png|LCC tunnel junctionFile: LCEB Blast Door.png|Launch Control Equipment Building Blast DoorFile: SAS Container.png|Sealed Authenticator System {{safe with}} two crew locksFile: Foxtrot LCC Artwork.png|Art work at Foxtrot-01 LCCFile: Hotel LCC Artwork.png|Art work at Hotel-01 LCCFile: Blast Door Pins.png|Blast Door PinsFile: <b>Command</b> Data <b>Buffer</b> {{configuration}}.png|Command Data Buffer configuration ...|$|R
50|$|In November 1972, SAC {{initiated}} the Minuteman Integrated Improvement Program. The program entailed silo hardening and upgrading <b>command</b> data <b>buffers,</b> which allowed for quicker missile retargeting. In addition to receiving upgraded silos and launcher control facilities, Warren also received new missiles, with the Minuteman I being replaced with LGM-30G Minuteman III between 1973-1975.|$|R
50|$|The {{previous}} Minuteman III {{command and}} control system, designated <b>Command</b> Data <b>Buffer</b> or CDB, required over 20 hours to retarget the entire Minuteman force and 30 minutes to retarget a single ICBM. REACT system needs less than 10 hours to retarget all missiles, while individual missiles can be retargeted in matter of minutes.|$|R
50|$|<b>Command</b> Data <b>Buffer</b> (CDB) was a {{configuration}} {{for early}} Minuteman missiles at the 90th Missile Wing at FE Warren AFB, WY, the 91st Missile Wing at Minot AFB, ND, and the 351st Missile Wing at Whiteman AFB, MO. The overall {{layout of the}} LCC did not change through the upgrade to REACT, however there were some major equipment changes.|$|R
50|$|<b>Command</b> Data <b>Buffer</b> (CDB) was {{a system}} {{used by the}} United States Air Force's Minuteman ICBM force. CDB was a method to {{transfer}} targeting information from a Minuteman Launch Control Center to an individual missile by communications lines. Prior to CDB, new missile guidance {{would have to be}} physically loaded at the launch facility; the process usually took hours.|$|R
50|$|Such a <b>buffer</b> <b>command</b> can be {{implemented}} using system calls for reading and writing data. Wasteful busy waiting can be avoided by using facilities such as poll or select or multithreading.|$|R
50|$|The {{behavior}} of GNU Emacs {{can be modified}} and extended almost without limit by incorporating Emacs Lisp programs that define new <b>commands,</b> new <b>buffer</b> modes, new keymaps, add command-line options, and so on. Many extensions providing user-facing functionality define a major mode (either for a new file type or to build a non-text-editing user interface); others define only commands or minor modes, or provide functions that enhance another extension.|$|R
5000|$|... Headquarters SAC submits {{a request}} to the Joint Chiefs of Staff to study an {{expanded}} communications system, known as the SAC Total Information Network (SATIN). It would interconnect Air Force Satellite Communications (AFSATCOM), Advanced Airborne Command Post (AABNCP), Airborne Command Post (ABNCP), high frequency/single sideband radio HF/SSB radio, SAC Automated Command and Control System (SACCS), Automatic Digital Information Network (AUTODIN), Survivable Low Frequency Communications System (SLFCS) and <b>Command</b> Data <b>Buffer</b> (CDB) ...|$|R
40|$|A data {{handling}} system wherein {{the system is}} configured for receiving at an input a first plurality of commands, the plurality of commands comprising a plurality of read commands, and for producing at an output a second plurality of data objects; the system comprises: a plurality of memory banks, a distributor (102), a plurality of access modules (104), and a rearranging network (108). Wherein the <b>commands</b> are <b>buffered</b> to avoid bank conflicts, and wherein the retrieved data objects are rearranged by the rearrangement network...|$|R
40|$|SARC merges cache {{controller}} {{and network}} interface functions {{by relying on}} a single hardware primitive: each access checks the tag {{and the state of}} the addressed line for possible occurrence of events that may trigger responses like coherence actions, RDMA, synchronization, or configurable event notifications. The fully virtualized and protected user-level API is based on specially marked lines in the scratchpad space that respond as <b>command</b> <b>buffers,</b> counters, or queues. The runtime system maps communication abstractions of the programming model to data transfers among local memories using remote write or read DMA and into task synchronization and scheduling using notifications, counters, and queues. The on-chip network provides efficient communication among these configurable memories, using advanced topologies and routing algorithms, and providing for process variability in NoC links. We simulate benchmark kernels on a full-system simulator to compare speedup and network traffic against cache-only systems with directory-based coherence and prefetchers. Explicit communication provides 10 to 40 % higher speedup on 64 cores, and reduces network traffic by factors of 2 to 4, thus economizing on energy and power; lock and barrier latency is reduced by factors of 3 to 5. 1 EXPLICIT COMMUNICATION AND NETWORK INTERFACE EVOLUTION Interprocessor communication (IPC) is the basis of parallel processing. IPC can be implicit, when th...|$|R
5000|$|... #Caption: <b>Command</b> Data <b>Buffer</b> {{configuration}} in 2010, including {{part of the}} SACCS Replacement Keyboard (SRK), Line Printer Unit (LPU) {{and associated}} equipment rack (right edge of photo) in an underground missile launch facility. The 1983 [...] "WarGames" [...] movie scene in the ICBM launch center (filmed in a Missile Procedure Trainer at Vandenberg AFB) briefly shows a SACCS LCC mainframe computer inside the launch capsule. The SAC Control System circuits that terminated at the same Remote Communications Central (RCC) had diversified routing--circuits originating and terminating at common locations were routed via diverse paths.|$|R
40|$|Standalone SES {{logical unit}}s {{may use the}} WRITE <b>BUFFER</b> <b>command</b> for {{firmware}} (microcode) upgrades. For attached enclosure service processes, though, the WRITE <b>BUFFER</b> <b>command</b> only updates the firmware on the hosting logical unit (e. g. the disk drive). A diagnostic page is proposed to allow enclosure services firmware upgrades whether standalone or attached. It {{is based on the}} two interoperable modes defined for the WRITE <b>BUFFER</b> <b>command</b> in SPC- 3 -modes 6 h (download microcode with offsets) and 7 h (download microcode with offsets and save). Editor’s Note 1 : is the non-saving mode required? Editor’s Note 2 : The offset modes were chosen over the non-offse modes. The SEND DIAGNOSTIC 2 -byte PARAMETER LIST LENGTH limits the transfer to 64 KB, which is probably too small for some ROM images. WRITE BUFFER has a 3 byte PARAMETER LIST LENGTH field limiting transfer to a more usable 16 MB, and modes 4 h and 5 h define the PARAMETER LIST LENGTH field as vendor-specific so they can ignore that limit anyway. However, in the attached enclosure services case, the main logical unit (e. g. the disk drive) would probably not know to support a non-standard usage of the PARAMETER LIST LENGTH field for its parasite enclosure services process. Suggested changes to SES- 2 6. 1. 1 Diagnostic parameters overview This clause describes the diagnostic page structure and the diagnostic pages that are applicable to enclosure services devices and other device types that provide communications access to an enclosure services process. Control pages are accessed with the SEND DIAGNOSTIC command; status pages are accessed with the RECEIVE DIAGNOSTIC RESULTS command. The diagnostic page format is specified in SPC- 3. All diagnostic pages have the diagnostic page header defined in SPC- 3, including the PAGE CODE and PAGE LENGTH fields...|$|R
40|$|EMACS is a {{real-time}} editor primarily {{intended for}} display terminals. The intent of this memo {{is to describe}} EMACS in enough detail to allow a user to edit comfortably in most circumstances, knowing how {{to get more information}} if needed. Basic <b>commands</b> described cover <b>buffer</b> editing, file handling, and getting help. Two sections cover commands especially useful for editing LISP code, and text (word- and paragraph-commands). A brief "cultural interest" section describes the environment that supports EMACS commands...|$|R
40|$|CHAR PLOT is {{a routine}} which enables one {{to use the}} CalComp plotter as a {{versatile}} output device. It is presently available as CHPLOT BIN (English CHAR PLOT) on tape MS 3. The program CHAR PLOT is normally called by a PUSHJ P, PL:OTC with a code representing a command or character (as defined in Appendix I) in accumulator C. Upon calling, the routine will either plot a character or line, or perform an internal control function. A O code initializes the routine, erasing any unexecuted (<b>buffered)</b> <b>commands...</b>|$|R
