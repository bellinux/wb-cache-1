166|144|Public
5000|$|Consensus {{dynamics}} or agreement dynamics {{is an area}} {{of research}} lying at the intersection of systems theory and graph theory. A major topic of investigation is the agreement or consensus problem in multi-agent systems that concerns processes by which a collection of interacting agents achieve a common goal. Networks of agents that exchange information to reach consensus include: physiologicalsystems, gene networks, large-scale energy systems and fleets of vehicles on land, in the air or in space. The agreement protocol or consensus protocol is an unforced dynamical system that is governed by the interconnection topology and the initial condition for each agent. Other problems are the rendezvous problem, synchronization, flocking, formation control. One solution paradigm is distributed <b>constraint</b> <b>reasoning</b> ...|$|E
40|$|We {{document}} {{a connection}} between <b>constraint</b> <b>reasoning</b> and probabilistic reasoning. We present an algorithm, called probabilistic arc consistency, which is both a generalization of a well known algorithm for arc consistency used in <b>constraint</b> <b>reasoning,</b> and a specialization of the belief updating algorithm for singly-connected networks. Our algorithm is exact for singlyconnected constraint problems, but can work well as an approximation for arbitrary problems. We briefly discuss some empirical results, and related methods. 1 INTRODUCTION <b>Constraint</b> <b>reasoning</b> is about finding configurations which satisfy constraints, possibly optimizing the configurations according to some objective function. One {{of the most important}} tools in <b>constraint</b> <b>reasoning</b> is the process of arcconsistency, which reduces the configuration space to those configurations which meet minimal local consistencies and their immediate consequences. In this paper we present an algorithm, called probabilistic a [...] ...|$|E
40|$|What {{local action}} can agents take, {{without the benefit}} of global knowledge, to produce the best global solution? Many dynamic {{distributed}} systems can be modeled using techniques from distributed <b>constraint</b> <b>reasoning,</b> however, existing work in the distributed <b>constraint</b> <b>reasoning</b> community does not address the true dynamism inherent in many realworld systems...|$|E
40|$|Query {{containment}} is {{the most}} fundamental relationship between a pair of database queries: a query Q {{is said to be}} contained in a query Q if the answer for Q is always a subset of the answer for Q, independent of {{the current state of the}} database. Query containment is an important problem in a wide variety of data management applications, including verification of integrity <b>constraints,</b> <b>reasoning</b> about contents of data sources in data integration, semantic caching, verification of knowledge bases, determining queries independent of updates, and most recently, in query reformulation for peer data management systems. Query containment has been studied extensively in the relational context and for XPath queries, but not for XML queries with nesting...|$|R
40|$|Symmetry {{can be used}} to {{help solve}} many problems. For instance, Einstein’s famous 1905 paper (”On the Electrodynamics of Moving Bodies”) uses {{symmetry}} to help derive the laws of special relativity. In artificial intelligence, symmetry has {{played an important role in}} both problem representation and reasoning. I describe recent work on using symmetry to help solve constraint satisfaction problems. Symmetries occur within individual solutions of problems as well as between different solutions of the same problem. Symmetry can also be applied to the constraints in a problem to give new symmetric <b>constraints.</b> <b>Reasoning</b> about symmetry can speed up problem solving, and has led to the discovery of new results in both graph and number theory...|$|R
40|$|Discrete {{optimization}} problems (DOPs) {{arise in}} various {{applications such as}} planning, scheduling, computer aided design, robotics, game playing and <b>constraint</b> directed <b>reasoning.</b> Often, a DOP is formulated in terms of finding a (minimum cost) solution path in a graph from an initial node to a goal node and solved by graph/tree search methods. Availability of parallel computers has created substantial interest in exploring parallel formulations of these graph and tree search methods. This article provides a survey of various parallel search algorithms such as Backtracking, IDA*, A*, Branch-and-Bound techniques and Dynamic Programming. It addresses issues related to load balancing, communication costs, scalability and the phenomenon of speedup anomalies in parallel search. Discrete optimization problems (DOPs) arise in various applications such as planning, scheduling, computer aided design, robotics, game playing and <b>constraint</b> directed <b>reasoning.</b> Formally, a DOP can be stated as follow [...] ...|$|R
40|$|Abstract. We {{present a}} way of {{integrating}} machine learning capabilities in <b>constraint</b> <b>reasoning</b> systems {{by the use of}} partially defined constraints called Open Constraints. This enables a form of <b>constraint</b> <b>reasoning</b> with incomplete information: we use a machine learning algorithm to guess the missing part of the constraint and we put immediately this knowledge into the operational form of a solver. This approaches extends the field of applicability of <b>constraint</b> <b>reasoning</b> to problems which are difficult to model using classical constraints, and also potentially improves the efficiency of dynamic constraint solving. We illustrate our framework on online constraint solving applications which range from mobile computing to robotics. ...|$|E
40|$|Objective: Deep {{biomedical}} {{models are}} often expressed {{by means of}} differential equations. Despite their expressive power, they are difficult to reason about and make decisions, given their non-linearity and the important effects that the uncertainty on data may cause. The objective of this work is to propose a <b>constraint</b> <b>reasoning</b> framework to support safe decisions based on deep biomedical models. Methods and Material: The methods used in our approach include the generic constraint propagation techniques for reducing the bounds of uncertainty of the numerical variables complemented with new <b>constraint</b> <b>reasoning</b> techniques that we developed to handle differential equations. Results: The results of our approach are illustrated in biomedical models for the diagnosis of diabetes, tuning of drug design, and epidemiology where it was a valuable decision supporting tool notwithstanding the uncertainty on data. Conclusion: The main conclusion that follows from the results is that, in biomedical decision support, <b>constraint</b> <b>reasoning</b> may be a worthwhile alternative to traditional simulation methods, especially when safe decisions are required. Key words: <b>constraint</b> <b>reasoning,</b> differential models, decision support, biomedical modelling, diabetes, drug design, epidemiology...|$|E
40|$|Reminder {{systems support}} people with {{impaired}} prospective memory and/or executive function, by {{providing them with}} reminders of their functional daily activities. We integrate temporal <b>constraint</b> <b>reasoning</b> with reinforcement learning (RL) to build an adaptive reminder system and in a simulated environment demonstrate that it can personalize to a user and adapt to both short- and long-term changes. In addition to advancing the application domain, our integrated algorithm contributes to research on temporal <b>constraint</b> <b>reasoning</b> by showing how RL can select an optimal policy from amongst a set of temporally consistent ones, and it contributes to the work on RL by showing how temporal <b>constraint</b> <b>reasoning</b> {{can be used to}} dramatically reduce the space of actions from which an RL agent needs to learn. 1...|$|E
40|$|We {{examine the}} {{possible}} use of Description Logics as a knowledge representation and reasoning system for high-level scene interpretation. It is shown that aggregates composed of multiple parts and constrained primarily by {{temporal and spatial}} relations {{can be used to}} represent high-level concepts such as object configurations, occurrences, events and episodes. Scene interpretation is modelled as a stepwise process which exploits the taxonomical and compositional relations between aggregate concepts while incorporating visual evidence and contextual information. It is shown that aggregates can be represented by a Description Logic ALCF(D) which provides feature chains and a concrete domain extension for quantitative temporal and spatial <b>constraints.</b> <b>Reasoning</b> services of the DL system can be used as building blocks for the interpretation process, but additional information is required to generate preferred interpretations. A probabilistic model is sketched which can be integrated with the knowledge-based framework. 1...|$|R
40|$|Discrete {{optimization}} problems (DOPs) {{arise in}} various {{applications such as}} planning, scheduling, computer aided design, robotics, game playing and <b>constraint</b> directed <b>reasoning.</b> Often, a DOP is formulated in terms of finding a (minimum cost) solution path in a graph from an initial node to a goal node and solved by graph/tree search methods such as branch-and-bound and dynamic programming. Availability of parallel computers has created substantial interest in exploring the use of parallel processing for solving discrete optimization problems. This article {{provides an overview of}} parallel search algorithms for solving discrete optimization problems. 1 Introduction. Discrete optimization problems (DOPs) arise in various applications such as planning, scheduling, computer aided design, robotics, game playing and <b>constraint</b> directed <b>reasoning.</b> Formally, a DOP can be stated as follows : Given a finite discrete set X and a function f(x) defined on the elements of X, find an optimal element [...] ...|$|R
40|$|This paper {{addresses}} {{the problem of}} qualitative spatial reasoning and presents efficient algorithms to deal it. We assume a representation which views space as a totality of objects surrounded by a haze area and connected in terms of qualitative spatial relations. Statements relating objects in this represesentation are {{expressed in terms of}} haze-order <b>constraints.</b> <b>Reasoning</b> about haze-orders involves, first, determining the consistency of a set of haze-order constraints, and, second, deducing new relations from those that are already known. The developed reasoning algorithms make use of a data structure called haze-order graph which trades space for efficiency. Experimental results illustrate the efficiency of the algorithms. 1 Introduction Reasoning about the spatial relations between physical objects or regions of space is of fundamental importance. In many cases this can be done without precise quantitative information about these relations. In fact, some knowledge of the topol [...] ...|$|R
40|$|Software Testing, Automated {{test data}} generation, MC/DC, <b>constraint</b> <b>reasoning.</b> Property-based testing implies {{selecting}} test data satisfying coverage criteria on user-specified properties. However, current automatic test data generation techniques adopt direct generate-and-test approaches for this task. In FocalTest, a testing tool designed to generate test data for programs and properties {{written in the}} functionnal language Focal, test data are generated at random and rejected {{when they do not}} satisfy selected coverage criteria. In this paper, we improve FocalTest with a test-and-generate approach, through the usage of <b>constraint</b> <b>reasoning.</b> A particular difficulty is the generation of test data satisfying MC/DC on the precondition of a property, when it contains function calls with pattern matching and higher-order functions. Our experimental results show that a non-naive implementation of <b>constraint</b> <b>reasoning</b> on these constructions outperform traditional generation techniques when used to find test data for testing properties. ...|$|E
40|$|Abstract. Program testing implies {{selecting}} {{test data}} from the program input space. In many cases, test data satisfying user-specified properties or preconditions (a. k. a. positive test data) are required. However, current automatic test data generation techniques adopt direct generate-andtest approaches for this task. In FocalTest, the testing tool of the Focal correct-by-construction environment for developing certified objectoriented functional programs, test data are generated at random and rejected {{when they do not}} satisfy preconditions. In this paper, we improve FocalTest with a test-and-generate approach, through the usage of <b>constraint</b> <b>reasoning.</b> A particular difficulty is the handling of function calls in the preconditions as they require <b>constraint</b> <b>reasoning</b> on conditionals and pattern matching which introduce disjunctions in constraint systems. Our experimental results show that a non-naive implementation of <b>constraint</b> <b>reasoning</b> on these constructions outperform traditional generation techniques when used to find test data for testing properties. ...|$|E
40|$|AbstractWe {{present a}} formalism, Disjunctive Linear Relations (DLRs), for {{reasoning}} about temporal constraints. DLRs subsume {{most of the}} formalisms for temporal <b>constraint</b> <b>reasoning</b> proposed in the literature and is therefore computationally expensive. We also present a restricted type of DLRs, Horn DLRs, which have a polynomial-time satisfiability problem. We prove that most approaches to tractable temporal <b>constraint</b> <b>reasoning</b> can be encoded as Horn DLRs, including the ORD-Horn algebra by Nebel and Bürckert and the simple temporal constraints by Dechter et al. Thus, DLRs is a suitable unifying formalism for reasoning about temporal constraints...|$|E
40|$|Summary. We {{examine the}} {{possible}} use of Description Logics as a knowledge representation and reasoning system for high-level scene interpretation. It is shown that aggregates composed of multiple parts and constrained primarily by {{temporal and spatial}} relations {{can be used to}} represent high-level concepts such as object configurations, occurrences, events and episodes. Scene interpretation is modelled as a stepwise process which exploits the taxonomical and compositional relations between aggregate concepts while incorporating visual evidence and contextual information. It is shown that aggregates can be represented by concept expressions of a Description Logic which provides feature chains and a concrete domain extension for quantitative temporal and spatial <b>constraints.</b> <b>Reasoning</b> services of the DL system can be used as building blocks for the interpretation process, but additional information is required to generate preferred interpretations. A probabilistic model is sketched which can be integrated with the knowledge-based framework. 1. ...|$|R
40|$|We will {{consider}} cardinality {{constraints of the}} form M,! K, 2 f=;; g, stating that exactly, at most, at least) K elements out of a set M have to be chosen". We will show how a set C of constraints can be represented {{by means of a}} positivedisjunctive deductive database P C, such that the models of P C correspond to the solutions of C. This allows for embedding cardinality constraints into applications dealing with incomplete knowledge. We will also present a sound calculus represented by a denite logic program P cc=, which allows for directly reasoning with sets of exactlycardinality <b>constraints.</b> <b>Reasoning</b> with P cc= is very ecient, and it can be used for performance reasons before P C is evaluated. For obtaining completeness, however, P C is necessary, since we show the theoretical result that a sound and complete calculus for exactly cardinality constraints does not exist. Keywords disjunctive logic programming, constraint logic programming, cardinality constraints, [...] ...|$|R
40|$|Abstract. In {{this paper}} {{we present a}} new {{decision}} procedure for the satisfiabil-ity of Linear Arithmetic Logic (LAL), i. e. boolean combinations of propositional variables and linear constraints over numerical variables. Our approach {{is based on the}} well known integration of a propositional SAT procedure with theory de-ciders, enhanced in the following ways. First, our procedure relies on an incremental solver for linear arithmetic, that is able to exploit {{the fact that it is}} repeatedly called to analyze sequences of increas-ingly large sets of <b>constraints.</b> <b>Reasoning</b> in the theory of LA interacts with the boolean top level by means of a stack-based interface, that enables the top level to add constraints, set points of backtracking, and backjump, without restarting the procedure from scratch at every call. Sets of inconsistent constraints are found and used to drive backjumping and learning at the boolean level, and theory atoms that are consequences of the current partial assignment are inferred. Second, the solver is layered: a satisfying assignment is constructed by rea-soning at different levels of abstractions (logic of equality, real values, and intege...|$|R
40|$|We {{document}} {{a connection}} between <b>constraint</b> <b>reasoning</b> and probabilistic reasoning. We present an algorithm, called {em probabilistic arc consistency}, which is both a generalization of a well known algorithm for arc consistency used in <b>constraint</b> <b>reasoning,</b> and a specialization of the belief updating algorithm for singly-connected networks. Our algorithm is exact for singly- connected constraint problems, but can work well as an approximation for arbitrary problems. We briefly discuss some empirical results, and related methods. Comment: Appears in Proceedings of the Sixteenth Conference on Uncertainty in Artificial Intelligence (UAI 2000...|$|E
40|$|A common {{assumption}} behind many existing constraint programming techniques is {{that all}} information about problem variables and constraints is available locally. Distributed <b>Constraint</b> <b>Reasoning</b> (DCR) provides a framework for problem solving in which information and control about the problem is distributed among autonomous agents. This distributed model promises to more closely match the assumptions underlying an increasingly diverse range of real world multiagent problems. This DCR workshop series addresses modeling, solutions and applications of Distributed <b>Constraint</b> <b>Reasoning,</b> including both Distributed Constraint Satisfaction and Optimization Problems. The goal of the DCR workshop series is to bring together researchers from the many different areas {{that are relevant to}} distributed <b>constraint</b> <b>reasoning</b> so that commonalities and relationships can be discovered and understanding improved. DCR is an inter-disciplinary research area involving the Constraint Programming, Multiagent Systems and AI communities. As such, this workshop has historically rotated its location between the three major conferences in each of thes...|$|E
40|$|Abstract—In this paper, we {{formulate}} the microgrid islanding {{problem as}} distributed constraint optimization problem (DCOP) and investigate {{the feasibility of}} solving it using off-the-shelf DCOP algorithms. This paper puts forward the potential of distributed <b>constraint</b> <b>reasoning</b> paradigm {{as a candidate for}} solving common microgrids problems...|$|E
40|$|This paper {{presents}} a target detection and recognition mission by an autonomous Unmanned Aerial Vehicule (UAV) modeled as a Partially Observable Markov Decision Process (POMDP). The POMDP model deals {{in a single}} framework with both perception actions (controlling the camera's view angle), and mission actions (moving between zones and flight levels, landing) needed to achieve {{the goal of the}} mission, i. e. landing in a zone containing a car whose model is recognized as a desired target model with sufficient belief. We explain how we automatically learned the probabilistic observation POMDP model from statistical analysis of the image processing algorithm used on-board the UAV to analyze objects in the scene. We also present our "optimize-while-execute" framework, which drives a POMDP sub-planner to optimize and execute the POMDP policy in parallel under action duration <b>constraints,</b> <b>reasoning</b> about the future possible execution states of the robotic system. Finally, we present experimental results, which demonstrate that Artificial Intelligence techniques like POMDP planning can be successfully applied in order to automatically control perception and mission actions hand-in-hand for complex time-constrained UAV missions...|$|R
40|$|The {{design of}} a complex {{mechanical}} product is usually a top-down process carried out by different teams or designers that are geographically distributed. A systematical variation propagation mechanism {{is very important to}} fully support such a design process. In this paper, based on the framework for collaborative top-down assembly design previously proposed by the authors, an agent based approach is presented for addressing variation propagation for collaborative top-down assembly design. The approach achieves variation propagation during the collaborative top-down assembly design through the interaction and cooperation of the agents located at the clients and server. To make the variation propagation automated and intelligent, four kinds of variation reasoning including hierarchical variation <b>reasoning,</b> engineering <b>constraint</b> variation <b>reasoning,</b> feature variation <b>reasoning,</b> and assembly <b>constraint</b> variation <b>reasoning</b> are identified, and the corresponding algorithms are developed and utilized. Meanwhile, a distributed assembly model is put forward to effectively support the design variation propagation for the collaborative top-down assembly design. The approach is implemented and a variation propagation example is given. Key Words：Top-down, Collaborative assembly design, Agent, Variation propagatio...|$|R
40|$|Introduction Discrete {{optimization}} problems (DOPs) {{arise in}} various {{applications such as}} planning, scheduling, computer aided design, robotics, game playing and <b>constraint</b> directed <b>reasoning.</b> Often, a DOP is formulated in terms of finding a (least cost) solution path in a graph from an initial node to a goal node and solved by graph/tree search methods such as branch-and-bound and dynamic programming. Availability of parallel computers has created substantial interest in exploring the use of parallel processing for solving discrete optimization problems (se some references below) ...|$|R
40|$|We {{investigate}} how algorithms for Distributed <b>Constraint</b> <b>Reasoning</b> (DCR) {{can be modified}} to operate effectively over unreliable communication infrastructure. While DCR algorithms typically assume that communication is perfect, this assumption is problematic because unreliable communication is a common feature of many real-world multiagent domains...|$|E
40|$|Abstract. Distributed <b>constraint</b> <b>reasoning</b> is a {{powerful}} concept to model and solve naturally distributed constraint satisfaction/optimization problems. However, {{there are very few}} open-source tools dedicated to solve such problems: DisChoco, DCOPolis and FRODO. A distributed <b>constraint</b> <b>reasoning</b> platform must have some important features: It should be reliable and modular in order to be easy to personalize and extend, be independent of the communication system, allow the simulation of agents on a single virtual machine, make it easy for deployment on a real distributed framework, and allow agents with a local complex problems. This paper presents DisChoco 2. 0, a complete redesign of the DisChoco platform that guarantees these features and that can deal both with distributed constraint satisfaction problems and with distributed constraint optimization problems. ...|$|E
40|$|In {{this paper}} we {{describe}} Constraint-based Attribute and Interval Planning (CAIP), a paradigm for representing and reasoning about plans. The paradigm enables {{the description of}} planning domains with time, resources, concurrent activities, mutual exclusions among sets of activities, disjunctive preconditions and conditional effects. We provide a theoretical foundation for the paradigm, based on temporal intervals and attributes. We then show how the plans are naturally expressed by networks of constraints, and show {{that the process of}} planning maps directly to dynamic <b>constraint</b> <b>reasoning.</b> In addition, we de ne compatibilities, a compact mechanism for describing planning domains. We describe how this framework can incorporate the use of <b>constraint</b> <b>reasoning</b> technology to improve planning. Finally, we describe EUROPA, an implementation of the CAIP framework...|$|E
40|$|The paper {{presents}} {{some aspects}} of the customable Fuzzy e-Negotiation Agents (FeNAs) system for autonomous multi-issue negotiation in the presence of limited common knowledge and imprecise/soft constraints and preferences. The FeNAs use the principles of utility theory and fuzzy <b>constraint</b> based <b>reasoning</b> in order to find a consensus that maximizes the agent's utility at the highest possible level of fuzzy constraint satisfaction subject to its acceptability by other agents. A scenario for negotiating document translation services is used to illustrate FeNAs' capabilities for multi-issue integrative negotiation...|$|R
40|$|This paper {{studies the}} use of POMDP-like {{techniques}} to tackle an online multi-target detection and recognition mission by an autonomous rotorcraft UAV. Such robotics missions are complex and too large to be solved off-line, and acquiring information about the environment {{is as important as}} achieving some symbolic goals. The POMDP model deals in a single framework with both perception actions (controlling the camera's view angle), and mission actions (moving between zones and flight levels, landing) needed to achieve the goal of the mission, i. e. landing in a zone containing a car whose model is recognized as a desired target model with sufficient belief. We explain how we automatically learned the probabilistic observation POMDP model from statistical analysis of the image processing algorithm used on-board the UAV to analyze objects in the scene. We also present our "optimize-while-execute" framework, which drives a POMDP sub-planner to optimize and execute the POMDP policy in parallel under action duration <b>constraints,</b> <b>reasoning</b> about the future possible execution states of the robotic system. Finally, we present experimental results, which demonstrate that Artificial Intelligence techniques like POMDP planning can be successfully applied in order to automatically control perception and mission actions hand-in-hand for complex time-constrained UAV missions...|$|R
40|$|ICOM is an {{advanced}} conceptual modelling tool, {{which allows the}} user to design multiple ER or UML class diagrams with inter- and intra-model <b>constraints.</b> Complete logical <b>reasoning</b> is employed by the tool to verify the specification, infer implicit facts, devise stricter constraints, and manifest any inconsistency...|$|R
40|$|We {{propose a}} way to define the most {{expensive}} operation {{to be used in}} evaluations of complexity and efficiency for simulated distributed <b>constraint</b> <b>reasoning</b> (DCR) algorithms. We also report experiments showing that the cost associated with a constraint check, even within the same algorithm, depends on the problem size. The DCR research has seen heated debate regarding the correct way to evaluate efficiency of simulated algorithms. DCR has to accommodate two established practices coming from very different fields: distributed computing and <b>constraint</b> <b>reasoning.</b> The efficiency of distributed algorithms is typically evaluated in terms of the network load and overall computation time, while many (synchronous) algorithms are evaluated {{in terms of the number}} of rounds that they require. <b>Constraint</b> <b>reasoning</b> research evaluates efficiency in terms of constraint checks and visited search-tree nodes. We argue that an algorithm has to be evaluated from the point of view of specific operating points, namely of possible or targeted application scenarios. We then show how to report efficiency for a given operating point based on simulation. Additionally, new experiments we report here show the fact that the cost of a constraint check varies with the size of the problem, and we discuss the implications of this phenomenon...|$|E
40|$|Distributed <b>constraint</b> <b>reasoning</b> is {{concerned}} with modeling and solving naturally distributed problems. It has application to the coordination and negotiation between semi-cooperative agents, namely agents that want to achieve a common goal but would not give up private information over secret constraints. When compared to centralize...|$|E
40|$|The Distributed <b>Constraint</b> <b>Reasoning</b> (DCR) workshop, {{now in its}} fourteenth edition, {{continues}} a long {{sequence of}} meetings dedicated to distributed constraint satisfaction and optimization. These problems arise when variables or constraints are distributed among several autonomous agents and cannot be solved in a centralized form. Historically, th...|$|E
5000|$|Her {{research}} on artificial intelligence {{has a particular}} emphasis on preference modeling and <b>reasoning,</b> <b>constraint</b> processing, multi-agent systems. [...] She has published widely in international journals and conferences and also edited several volumes, including the Handbook of Constraint Programming. She co-authored a book on preferences and social choice.|$|R
40|$|How {{should we}} define the {{feasible}} set? Even when individuals agree on facts and values, as traditionally construed, different views on feasibility may suffice to produce very different policy conclusions. Focusing on {{the difficulties in}} the feasibility concept may help us resolve some policy disagreements, or at least identify the sources of those disagreements. Feasibility is most plausibly a matter of degree rather than of kind. Normative economic reasoning therefore faces a fuzzy social budget <b>constraint.</b> Iterative <b>reasoning</b> about feasibility and desirability may help us overcome these problems. ...|$|R
40|$|Constraints {{expressed}} within document definitions, data models, ontologies, and domain models, {{are a key}} constituent of the Semantic Web. Indeed, Semantic Web applications {{will rely}} on these <b>constraints</b> when <b>reasoning</b> about Web contents. This paper deals with the enforcement by Web interfaces, of constraints expressed at the conceptual level. Specifically, the paper presents an approach to mark up a conceptual model in order to generate a Web form capable of enforcing the constraints captured in the model. The feasibility and practicality of this approach have been validated {{through the development of}} a system that generates XForms code from ORM conceptual schemas...|$|R
