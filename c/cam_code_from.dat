0|10000|Public
50|$|The {{draughtsman}} {{works by}} using a system of <b>cams</b> that <b>code</b> {{the movements of the}} hand in two dimensions, plus one to lift the pencil. The automaton also moves on his chair, and he periodically blows on the pencil to remove dust.|$|R
5000|$|An {{optional}} region subtag {{based on}} a two-letter country <b>code</b> <b>from</b> ISO 3166-1 alpha-2 (usually written in upper case), or a three-digit <b>code</b> <b>from</b> UN M.49 for geographical regions; ...|$|R
50|$|Storwize V7000 {{provides}} {{a very similar}} architecture to SVC, using the RAID <b>code</b> <b>from</b> the DS8000 to provide internal managed disks and SSD <b>code</b> <b>from</b> the DS8000 for tiered storage.|$|R
40|$|<b>Codes</b> <b>from</b> the row spans over finite {{fields of}} {{adjacency}} matrices for graphs {{have not been}} found to have any uniform property that might be of use in classification of the graph. This is in contrast to <b>codes</b> <b>from</b> the incidence matrices (vertex set by edge set). However, like techniques may be used to study the <b>codes</b> <b>from</b> adjacency matrices of various classes of graphs, and this is in particular true for the broad class of uniform subset graphs. In this paper we examine ternary <b>codes</b> <b>from</b> adjacency matrices from a class of uniform subset graphs. Web of Scienc...|$|R
50|$|FreeBSD, NetBSD and DragonFly BSD {{integrated}} IPSec and IPv6 <b>code</b> <b>from</b> the KAME project; OpenBSD integrated just IPv6 code {{rather than}} both (having {{developed their own}} IPSec stack). Linux also integrated <b>code</b> <b>from</b> the project in its native IPsec implementation.|$|R
5000|$|Besides the Florida Building Code and Miami-Dade County, {{there is}} also the <b>Code</b> <b>from</b> the Texas Department of Insurance {{commonly}} known as TDI. The <b>Code</b> <b>from</b> the Texas Department of Insurance is in many aspects similar to the International Building Code.|$|R
40|$|We give a {{generalized}} CSS construction for nonbinary quantum error-correcting codes. Using this we construct nonbinary quantum stabilizer <b>codes</b> <b>from</b> algebraic curves. We also give asymptotically good nonbinary quantum <b>codes</b> <b>from</b> a Garcia-Stichtenoth tower of function fields which are constructible in polynomial time...|$|R
5000|$|A single primary {{language}} subtag {{based on a}} two-letter language <b>code</b> <b>from</b> ISO 639-1 (2002) or a three-letter <b>code</b> <b>from</b> ISO 639-2 (1998), ISO 639-3 (2007) or ISO 639-5 (2008), or registered through the BCP 47 process and composed of five to eight letters; ...|$|R
50|$|After Apple {{acquired}} NeXT, the Mach component was upgraded, Apple licensed OSFMK 7.3 {{from the}} OSF {{which is a}} heavily modified hybrid Mach kernel (OSFMK 7.3 includes applicable <b>code</b> <b>from</b> the University of Utah Mach 4 kernel and applicable <b>code</b> <b>from</b> the many Mach 3.0 variants that sprouted off from the original Carnegie Mellon University Mach 3.0 kernel) https://www.youtube.com/watch?v=ggnFoDqzGMU the BSD components were upgraded with <b>code</b> <b>from</b> the FreeBSD project and the Driver Kit was replaced with a C++ API for writing drivers called I/O Kit.|$|R
40|$|Linear {{complementary}} dual (LCD) codes is a {{class of}} linear codes introduced by Massey in 1964. LCD codes have been extensively studied in literature recently. In addition to their applications in data storage, communications systems, and consumer electronics, LCD codes have been employed in cryptography. More specifically, {{it has been shown}} that LCD codes can also help improve the security of the information processed by sensitive devices, especially against so-called side-channel attacks (SCA) and fault non-invasive attacks. In this paper, we are interested in the construction of particular algebraic geometry (AG) LCD codes which could be good candidates to be resistant against SCA. We firstly provide a construction scheme for obtaining LCD <b>codes</b> <b>from</b> elliptic curves. Then, some explicit LCD <b>codes</b> <b>from</b> elliptic curve are presented. MDS codes are of the most importance in coding theory due to their theoretical significance and practical interests. In this paper, all the constructed LCD <b>codes</b> <b>from</b> elliptic curves are MDS or almost MDS. Some infinite classes of LCD <b>codes</b> <b>from</b> elliptic curves are optimal due to the Griesmer bound. Finally, we introduce a construction mechanism for obtaining LCD <b>codes</b> <b>from</b> any algebraic curve and derive some explicit LCD <b>codes</b> <b>from</b> hyperelliptic curves and Hermitian curves...|$|R
40|$|Abstract. We {{investigate}} {{the properties of}} modern error-correcting <b>codes</b> <b>from</b> an algebraic perspective. First, using techniques of linear algebra over finite fields, we develop the basic concepts of linear codes such as minimum distance, dimension, and error-correcting capabilities. We then use the structure of polynomial rings to define an example of cyclic codes, the Reed-Solomon code, and derive some of its properties. Finally, we introduce algebraic function fields and reinterpret Reed-Solomon <b>codes</b> <b>from</b> that perspective, then introduce the BCH <b>code</b> <b>from</b> the perspective of both cyclic codes and functio...|$|R
40|$|Studies of the p-ary <b>codes</b> <b>from</b> the {{adjacency}} matrices {{of uniform}} subset graphs Γ(n,k,r) Γ(n,k,r) and their reflexive associates {{have shown that}} a particular family of codes defined on the subsets are intimately related to the <b>codes</b> <b>from</b> these graphs. We describe these codes here and examine their relation to some particular classes of uniform subset graphs. In particular we include a complete analysis of the p-ary <b>codes</b> <b>from</b> Γ(n, 3,r) Γ(n, 3,r) for p≥ 5 p≥ 5, thus extending earlier results for p= 2, 3 p= 2, 3...|$|R
50|$|CACHEBOX's caching engine employs <b>code</b> <b>from</b> the Squid project.|$|R
5000|$|... {{translating}} source <b>code</b> <b>from</b> one {{programming language}} to another ...|$|R
5000|$|Government {{hopes to}} {{implement}} direct tax <b>code</b> <b>from</b> April 2011.|$|R
5000|$|... #Subtitle level 3: Why Can it Discriminate <b>Coding</b> <b>from</b> Non-Coding? ...|$|R
40|$|The {{main results}} of this paper are derived by using only simple Gröbner basis techniques. We present a new {{construction}} of evaluation <b>codes</b> <b>from</b> Miura-Kamiya curves Cab. We estimate the minimum distance of the codes and estimate the minimum distance of a class of related one-point geometric Goppa codes. With respect to these estimates the new codes perform at least {{as well as the}} related geometric Goppa codes. In particular we consider <b>codes</b> <b>from</b> norm-trace curves. We show that our estimates give actually the true minimum distance of these codes. The new <b>codes</b> <b>from</b> norm-trace curves perform rather well. In many cases much better than the corresponding geometric Goppa codes. It turns out that an alternative description of the new <b>codes</b> <b>from</b> norm-trace curves can be made by using Høholdt et al. ’s construction of improved dual codes ([11]) ...|$|R
5000|$|Some games humorously penalize {{the player}} for using another game's cheat codes. For example, using cheat <b>codes</b> <b>from</b> Doom in Descent only {{displays}} sarcastic {{messages from the}} programmers on screen; using <b>codes</b> <b>from</b> Descent in its sequel Descent II lowers the player's shields and energy to 1%. <b>Codes</b> <b>from</b> Doom used in Heretic give {{the opposite of the}} desired effect, such as instant death instead of invulnerability or stripping weapons instead of providing them. The original Dooms [...] "god mode" [...] code [...] "IDDQD" [...] is non-functional in Doom 3, but produces a console message: [...] "Your memory serves you well." ...|$|R
25|$|G = B^(B >> 1); This gets gray <b>code</b> <b>from</b> binary.|$|R
5000|$|... #Caption: An {{example of}} MLX type-in program <b>code</b> <b>from</b> COMPUTE!s Gazette.|$|R
5000|$|The {{original}} <b>code</b> <b>from</b> the Unix Programming Environment book, including hoc.|$|R
5000|$|Note: the {{following}} conditions are subtypes of each <b>code</b> <b>from</b> E10-14: ...|$|R
5000|$|... {{optimize}} the <b>code</b> <b>from</b> certain documents (such as HTML or JavaScript).|$|R
5000|$|Two other <b>codes</b> <b>from</b> the 38 {{sequence}} {{have also}} been assigned: ...|$|R
30|$|Event-B to Java {{translator}}: this translator {{is using}} syntax-directed translation to generate Java <b>code</b> <b>from</b> the context and concrete machine files. The generated Java file contains formal code {{in term of}} constants, variables, arrays, functions, and event; the generation approach is based on generating <b>code</b> <b>from</b> the Event-B specification using lexical and syntactic analysis.|$|R
40|$|The {{study of}} MDS self-dual codes has {{attracted}} lots {{of attention in}} recent years. There are many papers on determining existence of $q-$ary MDS self-dual codes for various lengths. There are not existence of $q-$ary MDS self-dual codes of some lengths, even these lengths $< q$. We generalize MDS Euclidean self-dual codes to near MDS Euclidean self-dual codes and near MDS isodual codes. And we obtain many new near MDS isodual <b>codes</b> <b>from</b> extended negacyclic duadic codes and we obtain many new MDS Euclidean self-dual <b>codes</b> <b>from</b> MDS Euclidean self-dual codes. We generalize MDS Hermitian self-dual codes to near MDS Hermitian self-dual codes. We obtain near MDS Hermitian self-dual <b>codes</b> <b>from</b> extended negacyclic duadic <b>codes</b> and <b>from</b> MDS Hermitian self-dual codes. Comment: 12 page...|$|R
2500|$|Example: Condensed {{translation}} {{table for the}} Standard Genetic <b>Code</b> (<b>from</b> the [...] ).|$|R
50|$|Hawkins had source <b>code</b> <b>from</b> his {{previous}} employer {{on his home}} machine.|$|R
50|$|The Australian {{division}} used YD <b>codes</b> <b>from</b> 1962 {{to identify}} their projects.|$|R
5000|$|The {{ability to}} {{generate}} VHDL and Verilog <b>code</b> <b>from</b> a MyHDL design.|$|R
5000|$|Sabah (Kota Kinabalu) uses <b>codes</b> <b>from</b> 88xxx to 91xxx (Including Layang-Layang Island) ...|$|R
5000|$|... to {{separate}} source <b>code</b> <b>from</b> an application because of incompatible software licenses.|$|R
5000|$|There are {{multiple}} tools to generate java <b>code</b> <b>from</b> an existing WADL: ...|$|R
50|$|For <b>codes</b> <b>from</b> 0 to 127, the {{original}} 7-bit ASCII standard set, {{most of these}} characters can be used without a character reference. <b>Codes</b> <b>from</b> 160 to 255 can all be created using character entity names. Only a few higher-numbered codes can be created using entity names, but all can be created by decimal number character reference.|$|R
40|$|Projective {{geometry}} is used {{to decode}} and represent codes easily. Cameron [1] generated a binary linear <b>code</b> <b>from</b> PG(2, 2). In this paper we construct a binary linear <b>code</b> <b>from</b> PG(3, 2). Also we give a decoding rule for this code. A simulation study is given to compare this decoding algorithm with maximum likelihood decoding algorithm...|$|R
5000|$|Character <b>codes</b> <b>from</b> the 7-bit ASCII graphic range (0x20-0x7F), {{being on}} the left side of a {{character}} code table, are referred to as [...] "GL" [...] codes (with [...] "GL" [...] standing for [...] "graphics left") while <b>codes</b> <b>from</b> the [...] "high ASCII" [...] range (0xA0-0xFF), if available, are referred to as the [...] "GR" [...] codes ("graphics right").|$|R
