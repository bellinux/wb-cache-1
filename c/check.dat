10000|10000|Public
5|$|A king is in <b>check</b> when it {{is under}} attack {{by at least one}} enemy piece. A piece unable to move because it would place its own king in <b>check</b> (it is pinned against its own king) may still deliver <b>check</b> to the {{opposing}} player.|$|E
5|$|After the {{settlement}} process, Bank2 provides {{a copy of}} the substitute <b>check</b> to the customer who wrote the original <b>check</b> or includes information about the substitute <b>check</b> in that customer's monthly or periodic statement.|$|E
5|$|Bank1 captures {{an image}} of the front and back of the {{original}} <b>check</b> and the MICR line data {{from the front of the}} <b>check.</b> Bank1 then removes or truncates the original <b>check</b> from the clearing process and uses the <b>check</b> image, MICR data, its own electronic endorsement, and the electronic endorsements to create a substitute <b>check.</b>|$|E
40|$|Ontology formal {{model and}} {{ontology}} <b>checking</b> recently {{are still under}} hot discussion. In this paper, an ontology concept model is constructed using Description Logics. Based on model, the issue on Consistency <b>checking</b> of the extended ontology model is studied with {{the conclusion that the}} four kinds of term <b>checking,</b> including term satisfiability <b>checking,</b> term subsumption <b>checking,</b> term equivalence <b>checking</b> and term disjointness <b>checking,</b> can be reduced to the satisfiability <b>checking,</b> and satisfiability <b>checking</b> can be transformed into instantiation consistence <b>checking.</b> Key words: Ontology concept model, consistency <b>checking,</b> description logics...|$|R
5000|$|When {{the buffer}} is instead {{designed}} {{to track the}} number of inserted elements , <b>checking</b> for emptiness means <b>checking</b> [...] and <b>checking</b> for fullness means <b>checking</b> whether [...] equals the capacity.|$|R
50|$|FTN95, like it {{predecessor}} FTN77, {{has strong}} run-time <b>checking</b> options, collectively called CHECKMATE. Compiler switches {{can turn on}} various levels of run-time <b>checking.</b> These include array bound <b>checks,</b> constant modification, DO LOOP modification, argument <b>checking</b> and undefined variable use. Program run-times are increased when <b>checking</b> is used.|$|R
5|$|Bank1 {{electronically}} transmits the <b>check</b> {{image and}} the MICR line data captured from the original <b>check</b> to the paying bank (Bank2) for settlement. If no agreement exists between Bank1 and Bank2 to exchange <b>check</b> images and data, Bank1 must provide either the original <b>check</b> or the legal equivalent of the substitute <b>check</b> to Bank2.|$|E
5|$|Checkmate: The player whose turn {{it is to}} move is in <b>check</b> and has {{no legal}} move to escape <b>check.</b>|$|E
5|$|Image {{statements}} {{that include a}} series of pictures or images of original paper checks and/or substitute checks, photocopies of the original checks, and images of checks posted online are not recognized as the legal equivalents of substitute checks. Unlike a substitute <b>check,</b> a photocopy of a <b>check</b> cannot be presented through the <b>check</b> clearing process for settlement because the photocopy of the <b>check</b> does not adhere strictly to the requirements for substitute checks under the Check21 Act.|$|E
50|$|<b>Checks</b> include basic {{demographic}} and criminal record <b>checks</b> for all levels, and, depending {{on an individual}} appointment's requirements, credit <b>checks,</b> loyalty, and field <b>checks</b> might be conducted by the RCMP and/or CSIS.|$|R
40|$|Objective: {{patients}} with obsessive-compulsive disorder (ocD) typically report to have “not just right experiences” (NJRE). {{up till now}} it is unclear which behavioral ocD features may give rise to NJREs. We used an induced <b>checking</b> paradigm to experimentally study whether perseverative <b>checking</b> elicits NJREs. Method: two experiments separately tested this hypothesis among n = 48 (Experiment i) and n = 55 (Experiment ii) healthy participants. We used a virtual <b>checking</b> task, in which participants either <b>checked</b> gas stoves or light bulbs. all participants started and ended with a trial in which they <b>checked</b> a gas stove (i. e., pre- and post-test). in between, the experimental group repeatedly <b>checked</b> the gas stove (i. e., relevant <b>checking),</b> while the control group repeatedly <b>checked</b> light bulbs (i. e., irrelevant <b>checking).</b> at pre- and post-test, all participants answered questions about the corresponding gas stove <b>checking</b> trial (i. e., memory confidence, vividness and details) and rated their level of NJRE. Results: in line with previous research, both experiments showed that relevant <b>checking</b> (as opposed to irrelevant <b>checking)</b> resulted in reduced memory confidence and less vivid and detailed recollections of the last <b>checking</b> trial. Most importantly, both studies found a medium effect for increased NJREs after relevant <b>checking</b> compared to irrelevant <b>checking.</b> Since not all results reached statistical significance in the individual studies, we combined the findings in a meta-analysis that clearly confirmed our hypotheses. Conclusions: Data of Experiment i and ii strongly suggest that repeated <b>checking</b> results in NJRE...|$|R
40|$|Module <b>checking</b> {{has been}} {{introduced}} in late 1990 s to verify open systems, i. e., systems whose behavior depends on the continuous interaction with the environment. Classically, module <b>checking</b> has been investigated with respect to specifications given as CTL and CTL* formulas. Recently, {{it has been shown}} that CTL (resp., CTL*) module <b>checking</b> offers a distinctly different perspective from the better-known problem of ATL (resp., ATL*) model <b>checking.</b> In particular, ATL (resp., ATL*) module <b>checking</b> strictly enhances the expressiveness of both CTL (resp., CTL*) module <b>checking</b> and ATL (resp. ATL*) model <b>checking.</b> In this paper, we provide asymptotically optimal bounds on the computational cost of module <b>checking</b> against ATL and ATL*, whose upper bounds are based on an automata-theoretic approach. We show that module-checking for ATL is EXPTIME-complete, which is the same complexity of module <b>checking</b> against CTL. On the other hand, ATL* module <b>checking</b> turns out to be 3 EXPTIME-complete, hence exponentially harder than CTL* module <b>checking.</b> Comment: In Proceedings GandALF 2017, arXiv: 1709. 0176...|$|R
5|$|Note {{that the}} bishop on c1 effects the <b>check,</b> via a {{discovered}} <b>check.</b> 14...Kh7 results in 15.Qxg7#.|$|E
5|$|On the {{northbound}} Marne la Vallée-Chessy - London train, {{the security}} <b>check</b> and French passport <b>check</b> {{take place at}} Marne la Vallée-Chessy, while the UK passport <b>check</b> {{takes place at the}} UK arrival stations - this is the only route where passengers are not cleared by UK border officials before crossing the channel.|$|E
5|$|The {{elimination}} of the paper checks from the clearing process saves the banking and treasury management industries handling, sorting, transporting, storing, safeguarding, and mailing costs. After the financial institution truncates the original paper <b>check</b> and reconverts it to a substitute <b>check,</b> the financial institution can store or archive the paper <b>check,</b> return the paper <b>check</b> to its own customer according to state law, or later destroy the paper <b>check.</b>|$|E
40|$|We {{study the}} {{algorithmics}} of <b>checking</b> atomicity of in concurrent programs. Unearthing fundamental results behind scheduling algorithms in database control, we build space-efficient monitoring algorithms for <b>checking</b> atomicity. Second, by interpreting the monitoring algorithm as a deterministic automaton, we solve several key model <b>checking</b> problems for <b>checking</b> atomicity of finite-state concurrent models. We establish two main results: that <b>checking</b> atomicity for concurrent regular Boolean programs is PSPACE-complete, and that <b>checking</b> concurrent recursive programs is decidable. The results are based summarizing programs using profiles of runs, and <b>checking</b> if the profiles witness non-serializability...|$|R
40|$|Abstract. The two central {{decision}} {{problems that}} arise during {{the design of}} safety critical systems are the satisfiability and the model <b>checking</b> problem. While model <b>checking</b> can only be applied after implementing the system, satisfiability <b>checking</b> answers the question whether a system that satisfies the specification exists. Model <b>checking</b> is traditionally {{considered to be the}} simpler problem – for branching-time and fixed point logics such as CTL, CTL*, ATL, and the classical and alternating time µ-calculus, the complexity of satisfiability <b>checking</b> is considerably higher than the model <b>checking</b> complexity. We show that ATL * is a notable exception of this rule: Both ATL * model <b>checking</b> and ATL * satisfiability <b>checking</b> are 2 EXPTIME-complete. ...|$|R
40|$|Module <b>checking</b> is a {{decision}} problem proposed in late 1990 s to formalize verification of open systems, i. e., systems that must adapt their behavior to the input they receive from the environment. It was recently shown that module <b>checking</b> offers a distinctly different perspective from the better-known problem of model <b>checking.</b> So far, specifications in temporal logic CTL {{have been used for}} module <b>checking.</b> In this paper, we extend module <b>checking</b> to handle specifications in alternating-time temporal logic (ATL). We define the semantics of ATL module <b>checking,</b> and show that its expressivity strictly extends that of CTL module <b>checking,</b> {{as well as that of}} ATL itself. At the same time, we show that ATL module <b>checking</b> enjoys the same computational complexity as CTL module <b>checking.</b> We also investigate a variant of ATL module <b>checking</b> where the environment acts under uncertainty. Finally, we revisit the semantics of ability in the module <b>checking</b> problem, and propose a variant where strategies of agents in the module depend only on what the agents are able to observe...|$|R
5|$|The {{financial}} institution or processor must provide a warranty for the substitute <b>check.</b> This warranty {{must be provided}} by the {{financial institution}} when it removes or truncates the original paper <b>check</b> from the forward collection or return process and reconverts the paper <b>check</b> to a substitute <b>check.</b>|$|E
5|$|The {{financial}} institution or processor that truncated the original <b>check</b> must follow ASCX9.100-140 {{standards in the}} capture of <b>check</b> images and MICR data when it produces the substitute <b>check.</b>|$|E
5|$|The {{substitute}} <b>check</b> must accurately {{represent the}} MICR {{line of the}} original <b>check.</b>|$|E
40|$|International audiencee {{compare the}} {{complexities}} of the following two model <b>checking</b> problems: <b>checking</b> whether a linear-time formula is satis ed by all paths (which we call universal model <b>checking)</b> and <b>checking</b> whether a formula is satis ed by almost all paths (which we call fair model check- ing here). For many interesting classes of linear-time formulas, both prob- lems have the same complexity: for instance, they are PSPACE-complete for LTL. In this paper, we show that fair model <b>checking</b> can have lower complexity than universal model <b>checking,</b> viz., we prove that fair model <b>checking</b> for L(Finf) can be done in time linear {{in the size of the}} formula and of the system, while it is known that universal model <b>checking</b> for L(Finf) is co-NP-complete. L(Finf) denotes the class of LTL formulas in which Finf is the only temporal operator. We also present other new results on the complexity of fair and universal model <b>checking.</b> In particular, we prove that fair model <b>checking</b> for RLTL is co-NP-complete...|$|R
40|$|In the automata theoretic {{approach}} to explicit state LTL model <b>checking,</b> the synchronized {{product of the}} model and an automaton that represents the negated formula is <b>checked</b> for emptiness. In practice, a (transition-based generalized) Büchi automaton (TGBA) is used for this procedure. This paper investigates whether using a more general form of acceptance, namely transition-based generalized Rabin automata (TGRAs), improves the model <b>checking</b> procedure. TGRAs can have signi cantly fewer states than TGBAs, however the corresponding emptiness <b>checking</b> procedure is more involved. With recent advances in probabilistic model <b>checking</b> and LTL to TGRA translators, it is only natural to ask whether <b>checking</b> a TGRA directly is more advantageous in practice. We designed a multi-core TGRA <b>checking</b> algorithm and performed experiments on {{a subset of the}} models and formulas from the 2015 Model <b>Checking</b> Contest. We observed that our algorithm can be used to replace a TGBA <b>checking</b> algorithm without losing performance. In general, we found little to no improvement by <b>checking</b> TGRAs directly...|$|R
50|$|The port {{of entry}} covers an area of 1,000,100 m2, which {{includes}} a surveillance zone of 653,000 m2, living quarters of 68,000 m2, and a business service area of 295,000 m2 The surveillance zone has an eastern and western zone. The east zone is for cargo <b>checking</b> while the west is for passenger <b>checking.</b> The east of the cargo <b>checking</b> area is the entry <b>checking</b> field, and the west is the exit <b>checking</b> field. There are also 52 bus <b>checking</b> channels, including 12 car <b>checking</b> channels and 40 truck <b>checking</b> channels, 20 for entry and 20 for exit (10 were built after the immigration control carried out the policy of fast access); there are 50 passenger <b>checking</b> channels, including 25 for entry and 25 for exit. The designed carrying capacity is 50 thousand concurrent vehicles, and 50 thousand concurrent passengers.|$|R
5|$|Africa <b>Check,</b> a {{non-profit}} organisation that checks facts in claims made about Africa, and the Centre for the Study of Democracy have criticised polls by market research companies as unscientific. Africa <b>Check</b> warned that some polls are intentionally misleading {{and some are}} essentially conjecture.|$|E
5|$|Because of {{the change}} in {{designated}} values relative to the WHERE clause, from a logic perspective the law of excluded middle is a tautology for <b>CHECK</b> constraints, meaning <b>CHECK</b> (p OR NOT p) always succeeds. Furthermore, assuming Nulls are to be interpreted as existing but unknown values, some pathological CHECKs like the one above allow insertion of Nulls that could never be replaced by any non-null value.|$|E
5|$|Certain {{standards}} that exist for paper checks {{also apply to}} Image Replacement Documents. These standards include ANSX9.100-160-2 (Magnetic Ink Printing (MICR) Part 2 External Processing Code (EPC) Field Use), ANSX9.100-181 (Specifications for TIFF Image Format for Image Exchange), ANSX9.100-187 (Specifications for Electronic Exchange of <b>Check</b> and Image Data - Domestic), and Draft Standard for Trial Use (DSTU)X9.37 (Electronic Exchange of <b>Check</b> and Image Data).|$|E
50|$|In 2005, BackCheck 3 {{partnered with}} Workopolis to offer {{employers}} a background <b>checking</b> service that includes criminal background <b>checks,</b> employment reference <b>checks</b> and education verifications.|$|R
50|$|Serialization graph <b>checking</b> (also called Serializability, or Conflict, or Precedence graph <b>checking)</b> - <b>Checking</b> for cycles in the schedule's graph and {{breaking}} them by aborts.|$|R
50|$|Compulsive <b>checking</b> {{can include}} compulsively <b>checking</b> {{items such as}} locks, switches, and appliances. This type of {{compulsion}} usually deals with <b>checking</b> whether harm to oneself or others is possible. Usually, most <b>checking</b> behaviors occur due to wanting to keep others and the individual safe.|$|R
5|$|In 991 Byrhtnoth, Ealdorman of the East-Saxons, {{decided to}} <b>check</b> the Danes.|$|E
5|$|In early 2013, the Colorado {{legislature}} {{passed a}} series of gun control bills following the theater shooting in Aurora, Colorado and the Sandy Hook school shooting in Newtown, Connecticut. The new laws provided for a ban on magazines holding more than fifteen rounds of ammunition, a universal background <b>check,</b> and a requirement that buyers pay a fee for the background <b>check.</b>|$|E
5|$|Matusow {{wrote an}} {{autobiography}} entitled <b>Check</b> Raising the Devil that was released May 12, 2009.|$|E
40|$|The {{results of}} an {{empirical}} study of software error detection using self <b>checks</b> and N-version voting are presented. Working independently, each of 24 programmers first prepared a set of self <b>checks</b> using just the requirements specification of an aerospace application, and then each added self <b>checks</b> to an existing implementation of that specification. The modified programs were executed to measure the error-detection performance of the <b>checks</b> and to compare this with error detection using simple voting among multiple versions. The analysis of the <b>checks</b> revealed that there are great differences {{in the ability of}} individual programmers to design effective <b>checks.</b> It was found that some <b>checks</b> that might have been effective failed to detect an error because they were badly placed, and there were numerous instances of <b>checks</b> signaling nonexistent errors. In general, specification-based <b>checks</b> alone were not as effective as specification-based <b>checks</b> combined with code-based <b>checks.</b> Self <b>checks</b> made it possible to identify faults that had not been detected previously by voting 28 versions of the program over a million randomly generated inputs. This appeared to result {{from the fact that the}} self <b>checks</b> could examine the internal state of the executing program, whereas voting examines only final results of computations. If internal states had to be identical in N-version voting systems, then there would be no reason to write multiple versions...|$|R
40|$|We show strict lower bounds for the {{complexity}} of several model <b>checking</b> problems for BPA (Basic Process Algebra). Model <b>checking</b> BPA with Hennessy-Milner Logic is PSPACE-hard, while model <b>checking</b> BPA with the (alternation-free) modal µ-calculus is EXPTIME-hard. Model <b>checking</b> BPA with LTL is also EXPTIME- hard. By combining these results with already established upper bounds, {{it follows that the}} model <b>checking</b> problems are PSPACE-complete and EXPTIME-complete, respectively...|$|R
40|$|Temporal {{logic model}} <b>checking</b> {{involves}} <b>checking</b> the state-space {{of a model}} of a system to determine whether errors can occur in the system. Often this involves <b>checking</b> symmetrically equivalent areas of the state-space. The use of symmetry reduction to increase the efficiency of model <b>checking</b> has inspired a wealth of activity in the area of model <b>checking</b> research. We provide a survey of the associated literature...|$|R
