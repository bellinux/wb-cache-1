1080|2423|Public
5|$|Seattle {{also has}} a {{thriving}} alternative press, with the Web-based daily Seattle Post-Intelligencer, several other online dailies (including Publicola and <b>Crosscut),</b> The Stranger (an alternative, left-leaning weekly), Seattle Weekly, {{and a number of}} issue-focused publications, including the nation's two largest online environmental magazines, Worldchanging and Grist.org.|$|E
5|$|Wally Pfister {{gave each}} {{location}} and dream level a distinctive look {{to aid the}} audience's recognition of the narrative's location during the heavily <b>crosscut</b> portion of the film: the mountain fortress appears sterile and cool, the hotel hallways have warm hues, and the scenes in the van are more neutral.|$|E
5|$|The Amylostereaceae {{are white}} rot pathogens. They {{disintegrate}} the lignin {{of the host}} wood, whereby the infested wood parts become less stable and take a fibrous structure. The wood bleaches as fungal enzymes break down and remove the brown-pigmented lignin. The distribution in wood takes place mainly along the transport channels in the xylem. If the wood is <b>crosscut,</b> the red rot is vertically positioned, on which bleached, infested areas contrast with intact wood. Symptoms of infestion by the symbiotic partner—wood wasps—include circular exit holes in the crust and acute stress through dryness, common in hanging, falling or tanning needles.|$|E
40|$|Aspect-Oriented Programming (AOP) is a {{paradigm}} that aims at improving software modularization. Indeed, aspects are yet another dimension for structuring applications. The notion of aspect refers to any <b>crosscutting</b> property. Such <b>crosscutting</b> {{can be either}} dynamic or static. Dynamic <b>crosscutting</b> refers to applications execution flow. While, static <b>crosscutting</b> refers to applications structure. Although many AOP approaches does enable these two kinds of <b>crosscutting,</b> this support is not always satisfactory. Aspects code is complex and often requires different constructs for expressing static and dynamic <b>crosscutting.</b> We present in this paper the foundation for an AOP platform that unifies the description of both kinds of crosscuttings. This solution relies on reflection and mixin-based inheritance. Key words: aspect-oriented programming, static <b>crosscutting,</b> dynamic <b>crosscutting,</b> reflection, mixin-based inheritance...|$|R
40|$|<b>Crosscutting</b> {{concerns}} can hinder maintainability of {{a design}} {{because they do}} not adhere to a system’s underlying modular structure. Developers, therefore, may wish to refactor designs to improve modularisation or to implement <b>crosscutting</b> concerns as aspects. However, few tools currently exist that assist developers in detecting and classifying <b>crosscutting</b> concerns in their code. Classification is important because, as recent studies have shown, <b>crosscutting</b> concerns are not always harmful. This paper describes a tool, ConcernMorph, for identifying <b>crosscutting</b> concerns and classifying them into {{one of a number of}} predefined <b>crosscutting</b> patterns...|$|R
40|$|Aspect-oriented {{programming}} (AOP) is a programming {{paradigm for}} improving the modularity of software systems by localizing <b>crosscutting</b> concerns in the system into aspects. Aspect-oriented refactorings extend AOP to legacy systems, by identifying and encapsulating existing <b>crosscutting</b> concerns through aspect-mining (discovery of <b>crosscutting</b> concerns) and aspect refactoring (semantic-preserving code transformation to extract the <b>crosscutting</b> code into aspects). However, not all the data obtained from aspectmining corresponds to <b>crosscutting</b> concerns, and existing aspect languages may not be capable of refactoring all <b>crosscutting</b> concerns into aspects. In this thesis, we describe an approach for extracting <b>crosscutting</b> concerns in a system to a form that is suitable for refactoring. This process includes identifying the presence of <b>crosscutting</b> code clusters in aspect-mining results; assessing if the concerns should be extracted using various metrics; and performing code transformation to extract the <b>crosscutting</b> clusters into standalone methods with a common method signature and parameters. The work also describes the ConcernExtractor, a software tool that implements the concern cluster extraction technique. We apply ConcernExtractor to assess and extract the <b>crosscutting</b> concerns in existin...|$|R
5|$|Ganymede is {{composed}} of approximately equal amounts of silicate rock and water ice. It is a fully differentiated body with an iron-rich, liquid core, and an internal ocean that may contain more water than all of Earth's oceans combined. Its surface {{is composed}} of two main types of terrain. Dark regions, saturated with impact craters and dated to four billion years ago, cover {{about a third of}} the satellite. Lighter regions, <b>crosscut</b> by extensive grooves and ridges and only slightly less ancient, cover the remainder. The cause of the light terrain's disrupted geology is not fully known, but was likely the result of tectonic activity due to tidal heating.|$|E
25|$|In solid timber, docking {{of members}} for a butt joint {{is usually a}} <b>crosscut,</b> so a <b>crosscut</b> saw is best for this job. When working with sheetgoods, there is no {{distinction}} between <b>crosscut</b> and rip cut.|$|E
25|$|<b>Crosscut</b> sled: A <b>crosscut</b> sled is {{generally}} {{used to hold}} the workpiece at a fixed 90 degree angle to the blade, allowing precise repeatable cuts at {{the most commonly used}} angle. The sled is normally guided by a runner fastened under it that slides in a miter slot. This device is normally shop made, but can be purchased.|$|E
40|$|<b>Crosscutting</b> {{is usually}} {{described}} in terms of scattering and tangling. However, the distinction between these three concepts is vague. Precise definitions are mandatory for certain research areas such as the identification of <b>crosscutting</b> concerns at phases of the software life cycle. We propose a conceptual framework for <b>crosscutting</b> where <b>crosscutting</b> is defined in terms of trace relations. The definition of <b>crosscutting</b> is formalized using linear algebra, and represented with matrices and matrix operations. In this way, <b>crosscutting</b> can be clearly distinguished from scattering and tangling. With this definition and transitivity of trace relations, <b>crosscutting</b> can be identified and traced through software development, also in early phases. We describe some illustrative case studies to demonstrate the applicability of the analysis...|$|R
40|$|<b>Crosscutting</b> {{concerns}} {{consist in}} software system features having the implementation spread across modules as tangled and scattered code. In many cases, these <b>crosscutting</b> concerns represent design pattern clients, i. e., invocations to pattern features. When a design pattern evolves, this {{can cause the}} addition or the change of scattered and tangled code, which contributes {{to the evolution of}} the <b>crosscutting</b> concern. This paper empirically analyzes the relationship between design pattern evolution and the changes in the induced <b>crosscutting</b> concerns. Specifically, the paper investigates to what extent the <b>crosscutting</b> concern co-changes with the pattern, whether there is a relationship between the type of change and the induced <b>crosscutting</b> change, and whether different patterns induce different amount of <b>crosscutting.</b> The paper reports results from the analysis of Tomcat and JHotDraw evolution...|$|R
40|$|Over {{the last}} few years, several {{research}} efforts have been devoted for handling <b>crosscutting</b> concerns at the early phases of software development especially at requirements level. These efforts are meaningless unless all the <b>crosscutting</b> concerns are properly identified. Many approaches only consider non-functional concerns as <b>crosscutting</b> concerns. However, <b>crosscutting</b> concerns may also be functional. In this paper, we are proposing an integrated approach that supports complete separation of concerns i. e. handles both functional and non-functional concerns as <b>crosscutting.</b> Our work will surely contribute some positive in this direction...|$|R
25|$|Table saw using a mitre gauge, <b>crosscut</b> sled, or {{sliding table}} attachment.|$|E
25|$|Invented the <b>crosscut</b> sail, with panels {{running at}} right angles to the leech, in order to combat cotton canvas' {{tendency}} to distort under load.|$|E
25|$|Miter gauge: The table has {{one or two}} slots (grooves) {{running from}} front to back, also {{parallel}} to the cutting plane of the blade. These miter slots (or miter grooves) are used to position and guide either a miter gauge (also known as a <b>crosscut</b> fence) or <b>crosscut</b> sled. The miter gauge is usually set to be at 90 degrees to {{the plane of the}} blade's cut, to cause the cut made in the workpiece to be made at a right angle. The miter gauge can also be adjusted to cause the cut to be made at a precisely controlled angle (a so-called miter cut).|$|E
40|$|Our {{analysis}} of <b>crosscutting</b> concerns in real-life software systems (totaling over 500, 000 LOC) and in aspect-oriented literature, indicated {{a number of}} properties that allow for their decomposition in primitive building blocks which are atomic <b>crosscutting</b> concerns. We identify these blocks as <b>crosscutting</b> concern sorts, and we use them to describe the <b>crosscutting</b> structure of many (well-known) designs and common mechanisms in software systems. In this paper, we formalize the notion of <b>crosscutting</b> concern sorts by means of relational queries over (object oriented) source models. Based on these queries, we present a concern management tool called SOQUET, {{which can be used}} to document the occurrences of <b>crosscutting</b> concerns in object-oriented systems. We assess the sorts-based approac...|$|R
40|$|Abstract. Existing {{approaches}} to software development do not handle properly the <b>crosscutting</b> nature of some requirements, be functional or non-functional. Aspect-oriented approaches aim at handling effectively separation of <b>crosscutting</b> requirements. We have been investigating {{how to achieve}} separation of concerns, not only through functional and non-functional requirements, but also by providing mechanisms to identify, modularize, specify and compose <b>crosscutting</b> requirements. In this paper we envisage an aspectual use-case driven approach by extending the use case model to integrate non-functional requirements and identifying those use cases that are <b>crosscutting.</b> The examples of <b>crosscutting</b> concerns usually {{found in the literature}} are always non-functional. In this work we will explore the idea of <b>crosscutting</b> use cases and, therefore, functional concerns. ...|$|R
40|$|It {{is often}} claimed that {{inaccurate}} modularisation of <b>crosscutting</b> concerns hinders program comprehension and, as a consequence, leads to harmful software instabilities. However, {{recent studies have}} pointed out that <b>crosscutting</b> concerns are not always harmful to design stability. Hence, software maintainers would benefit from well documented patterns of <b>crosscutting</b> concerns and a better understanding about their actual impact on design stability. This paper presents a catalogue of <b>crosscutting</b> concern patterns recurrently observed in software systems. These patterns are described and classified based on an intuitive vocabulary that facilitates their recognition by software engineers. We analysed instances of the <b>crosscutting</b> patterns in object-oriented and aspect-oriented versions of three evolving programs. The outcomes of our exploratory evaluation indicated that: (i) a certain category of <b>crosscutting</b> patterns seems to be good indicator of harmful instabilities, and (ii) aspect-oriented solutions were unable to modularise concerns matching some <b>crosscutting</b> patterns...|$|R
25|$|In the United States Forest Service {{the use of}} {{chainsaws}} and <b>crosscut</b> saws requires training and certification. A great deal of that training describes situational awareness as an approach toward environmental awareness but also self-awareness which includes being aware of one's own emotional attitude, tiredness, and even caloric intake.|$|E
25|$|A second {{power station}} {{was built in}} the early 1920s, using water from a small {{concrete}} dam on the Swart Beck. This produced a 2,200volt AC supply which was taken into the mine along the Lucy Tongue Level and used to drive a new air compressor in Warsop's <b>Crosscut,</b> as well as a 250 volt DC supply used for the Lucy loco and the mill lights.|$|E
25|$|While the {{specific}} {{plant and equipment}} utilized by Lawrence & Foulks is not known, wooden shipbuilding firms in this era could be established for a remarkably small outlayas little as $11,000, and rarely more than $20,000. Tradesmen at this time mostly supplied their own tools, so a shipyard needed {{little more than a}} waterfront property large enough to hold a timber yard and a slipway or two, a derrick to lift heavy components, a large <b>crosscut</b> saw and a few other tools.|$|E
40|$|AORE/AOSD aims at {{addressing}} <b>crosscutting</b> {{issues in}} order to improve separation of system components that leads to better understanding for maintenance and evolution process. Initially, these issues were discovered from the <b>crosscutting</b> behavior that initially evolves from the method at implementation stage. However, there are growing needs to achieve possible understanding in <b>crosscutting</b> throughout stages in software development recently. Due to its nature, <b>crosscutting</b> which relates to intersection or mapping of components such as scattering and tangling at various stages may lead to some ambiguities. The aim {{of this paper is to}} evaluate several recent <b>crosscutting</b> AORE/AOSD approaches published in literature with the focus on their contributions to requirements and design <b>crosscutting.</b> The evaluation shows some significant results in understanding the traceability and analysis of requirements and design <b>crosscutting</b> approaches as a basis for improvement to ensure homogeneity in crosscutting-oriented software development and evolution process...|$|R
40|$|We {{propose a}} {{formalization}} of <b>crosscutting</b> {{based on a}} conceptual framework for AOSD. <b>Crosscutting</b> is clearly distinguished from the related concepts scattering and tangling. The definitions of these concepts are formalized and visualized with matrices and matrix operations. This allows more precise reasoning about <b>crosscutting...</b>|$|R
40|$|<b>Crosscutting</b> {{is usually}} {{described}} in terms of scattering and tangling. However, the distinction between these concepts is vague, which could lead to ambiguous statements. Sometimes, precise definitions are required, e. g. for the formal identification of <b>crosscutting</b> concerns. We propose a conceptual framework for formalizing these concepts based on a <b>crosscutting</b> pattern that shows the mapping between elements at two levels, e. g. concerns and representations of concerns. The definitions of the concepts are formalized in terms of linear algebra, and visualized with matrices and matrix operations. In this way, <b>crosscutting</b> can be clearly distinguished from scattering and tangling. The usability of dependency matrices is illustrated in the analysis of <b>crosscutting</b> across several refinement levels, which can be formalized through the cascading of the <b>crosscutting</b> pattern...|$|R
25|$|Preliminary work on {{the tunnel}} started in March 2011. The first {{blasting}} took place on 2 September 2011, when {{work on the}} tunnel's <b>crosscut</b> started. The National Rail Administration offered a service to residents {{in the area where}} they could receive a Short Message Service message every time blasting was to be carried out. Construction of the road segment commenced on 12 April 2012. Combined the projects cost NOK10.1 billion. One of the major contractors, Alpine Bau, filed for bankruptcy in June 2013, causing considerable delays in the project. However, this had little effect on the works on the Ulvin Tunnel.|$|E
25|$|Due {{to lack of}} suction, {{an infant}} with a cleft may have trouble feeding. An infant with a cleft palate will have greater success feeding in a more upright position. Gravity will help prevent milk from coming through the baby's nose if he/she has cleft palate. Gravity feeding can be {{accomplished}} by using specialized equipment, such as the Haberman Feeder, or by using a combination of nipples and bottle inserts like the one shown, is commonly used with other infants. A large hole, <b>crosscut,</b> or slit in the nipple, a protruding nipple and rhythmically squeezing the bottle insert can result in controllable flow to the infant without the stigma caused by specialized equipment.|$|E
25|$|Underground {{uranium mining}} is in {{principle}} {{no different from}} any other hard rock mining and other ores are often mined in association (e.g., copper, gold, silver). Once the ore body has been identified a shaft is sunk {{in the vicinity of the}} ore veins, and crosscuts are driven horizontally to the veins at various levels, usually every 100 to 150 metres. Similar tunnels, known as drifts, are driven along the ore veins from the <b>crosscut.</b> To extract the ore, the next step is to drive tunnels, known as raises when driven upwards and winzes when driven downwards, through the deposit from level to level. Raises are subsequently used to develop the stopes where the ore is mined from the veins.|$|E
40|$|Abstract. We {{propose a}} {{formalization}} of <b>crosscutting</b> {{based on a}} conceptual framework for AOSD. <b>Crosscutting</b> is clearly distinguished from the related concepts scattering and tangling. The definitions of these concepts are formalized and visualized with matrices and matrix operations. This allows more precise reasoning about <b>crosscutting...</b>|$|R
40|$|Aspect-Oriented Programming is {{proposed}} to improve modularity for <b>crosscutting</b> concerns. In aspect-oriented programming, an aspect can capture <b>crosscutting</b> structure based on Join Point Model which abstracts an execution of program as a sequence of join points. A join point represents a well-defined event during program execution such as method call, method execution, field access and exception handling. A concern is called as a <b>crosscutting</b> concern when the related code fragments of the concern spread across (<b>crosscuts)</b> the modules. A <b>crosscutting</b> concern is hard to maintain since a developer needs to maintain all code fragments consistently and code fragments of multiple <b>crosscutting</b> concerns are often mixed at different places. Although such <b>crosscutting</b> concerns are found in many programs, rewriting {{all of them in}} aspect-oriented language is infeasible. Therefore, finding concerns for which aspect-oriented programming is suitable and effective is important. In this paper, we propose and discuss two aspects related to objectoriented software development. 1. Dynamic analysis recording program executio...|$|R
40|$|Abstract. <b>Crosscutting</b> {{is usually}} {{described}} in terms of scattering and tangling. However, the distinction between these concepts is vague, which could lead to ambiguous statements. Sometimes, precise definitions are required, e. g., for the formal identification of <b>crosscutting</b> concerns. We propose a conceptual framework for formalizing these concepts based on a <b>crosscutting</b> pattern that shows the mapping between elements at two levels, e. g., concerns and representations of concerns. The definitions of the concepts are formalized in terms of linear algebra, and visualized with matrices and matrix operations. In this way, <b>crosscutting</b> can be clearly distinguished from scattering and tangling. The usability of dependency matrices is illustrated in the analysis of <b>crosscutting</b> across several refinement levels, which can be formalized through the cascading of the <b>crosscutting</b> pattern. 1...|$|R
25|$|After {{the first}} {{explosion}} on 19December, re-entry to the mine {{was carried out}} by mine rescue teams wearing breathing apparatus, until it was established that it was safe for the AWRE men to return. They found that the stemming in the <b>crosscut</b> had failed to contain the blast, which had destroyed the cables and control equipment for the second charge. This was repaired and the second explosion scheduled for 15January 1960. The evening before it was due, a group of Greenside men were finishing off some sandbagging. Two of these, who were not experienced underground workers, went off during their mid-evening break to visit a stope at the northern end of the mine, to collect pieces of white spar. They failed to return, and were found dead, overcome by gases that had lingered in the stope. The test was halted while more work was done to improve the extraction of gas from the explosion. The second test finally took place on 29April 1960. Venting the mine and checking for gases was carried out very thoroughly this time, and it was August 1960 before control of the mine was returned to the Greenside company.|$|E
25|$|Mine explorers, {{many with}} an {{interest}} in Lake District mining history, first entered the mine through the Glencoyne Level in 1977. They were able to make their way down to the Lucy Tongue Level using the long ladders of the old escape route. There had been a number of large roof-falls. One had blocked {{the north end of the}} Lucy Tongue Level, there was another at the junction with Warsop's <b>Crosscut</b> (although a way could be made round it), and deep water was found at the south end of the level, indicating another blockage further on. Some fine photographs were taken of the old workings in 1978. Attempts to enter other levels were made in 1987. The entrance to the High Horse Level was cleared, but it was found to be blocked by a collapse a few yards inside. The mouth of the Low Horse Level was also cleared, and this gave access as far as Marshall's Level and Johnston's Cross Vein, but further progress was blocked by more roof-falls. One potential danger to mine explorers was the fall of a large piece of rock in one of the shafts leading down to the Lucy Tongue Level in the late 1980s. They made this secure by bolting an RSJ girder across the shaft and fastening the rock to it with steel cables. To get the girder into place it had to be hauled up to the Glencoyne Level and through the workings to the shaft.|$|E
500|$|The Jarlsberg Tunnel {{constitutes}} the southernmost {{part of the}} [...] double-track segment of the Vestfold Line between Barkåker and Tønsberg. It is electrified at , has an NSI-63 signaling system and is dimensioned for [...] The <b>crosscut</b> serves as an emergency exit. The railway tunnel crosses [...] above the Frodeåsen Tunnel, a twin-tube tunnel of County Road 300. The tunnel's single <b>crosscut</b> serves as an emergency exit. The line is owned and maintained by the Norwegian National Rail Administration.|$|E
40|$|<b>Crosscutting</b> {{is usually}} {{described}} in terms of scattering and tangling. However, the distinction between these three concepts is vague, sometimes leading to ambiguous statements and confusion. We propose a conceptual framework for <b>crosscutting.</b> <b>Crosscutting</b> is clearly distinguished from scattering and tangling. The definitions of these concepts are formalized and visualized with matrices and matrix operations. We discuss the relation between the concepts <b>crosscutting,</b> decomposition and coupling. Categories and Subject Descriptors D. 1. 5 [Software Engineering]: Object-oriented programmin...|$|R
40|$|The {{identification}} of <b>crosscutting</b> {{is a prerequisite}} for applying aspect-oriented techniques in software development. We present an operationalization of the definition of <b>crosscutting</b> to support this identification. We use matrices to represent the relation between design elements at different levels of abstraction. We present some case studies about the {{identification of}} <b>crosscutting</b> concerns in order to illustrate the application of our approach. In particular, we apply the approach to the identification of <b>crosscutting</b> in some of the GoF design patterns...|$|R
50|$|Logging exemplifies a <b>crosscutting</b> {{concern because}} a logging {{strategy}} necessarily affects every logged {{part of the}} system. Logging thereby <b>crosscuts</b> all logged classes and methods.|$|R
