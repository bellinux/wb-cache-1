26|28|Public
5000|$|... a {{graphical}} debugger, inspector, stepper, profiler, <b>class</b> <b>browser,</b> etc.|$|E
5000|$|Like {{conjoined}} twins, {{classes and}} metaclasses are born together. [...] has an instance variable , which points to its conjoined class.Note that the usual Smalltalk <b>class</b> <b>browser</b> {{does not show}} metaclasses as separate classes. Instead the <b>class</b> <b>browser</b> allows to edit the class together with its metaclass at the same time.|$|E
5000|$|All major {{development}} environments supply some {{manner of}} <b>class</b> <b>browser,</b> including ...|$|E
50|$|With the {{popularity}} of C++ starting in the late-1980s, modern IDEs added <b>class</b> <b>browsers,</b> at first to simply navigate class hierarchies, and later {{to aid in the}} creation of new classes. With the introduction of Java in the mid-1990s <b>class</b> <b>browsers</b> became an expected part of any graphic development environment.|$|R
50|$|Modern <b>class</b> <b>browsers</b> {{fall into}} three general categories: the {{columnar}} browsers, the outline browsers, and the diagram browsers.|$|R
50|$|Besides the {{generation}} of code from a wizard or template, IDEs can also generate and manipulate code to automate code refactorings that would require multiple (error prone) manual steps, thereby improving developer productivity. Examples of such features in IDEs are the refactoring <b>class</b> <b>browsers</b> for Smalltalk and those found in Java IDEs like Eclipse.|$|R
5000|$|... #Caption: Screenshot of Gedit with Python, LaTeX and <b>Class</b> <b>Browser</b> extensions, {{displaying}} Inkscape's lorem ipsum extension.|$|E
5000|$|It is {{now going}} through a major code changes since the {{developer}} saw problems implementing the <b>class</b> <b>browser</b> using doxygen.|$|E
50|$|A <b>class</b> <b>browser</b> is {{a feature}} of an {{integrated}} development environment (IDE) that allows the programmer to browse, navigate, or visualize the structure of object-oriented programming code.|$|E
5000|$|DataFlex WebApp Server: Available for Microsoft IIS only, the DataFlex WebApp Server {{can be used}} {{to develop}} thin client {{applications}} such as browser based applications (both full <b>class</b> <b>browsers</b> such as Google Chrome, Internet Explorer, Mozilla Firefox and Opera, as well as WAP browsers). Developers can also create Web Service client and server applications.|$|R
50|$|In {{the early}} years of the 21st century <b>class</b> <b>browsers</b> began to morph into {{modeling}} tools, where programmers could not only visualize their class hierarchy as a diagram, but also add classes to their code by adding them to the diagram. Most of these visualization systems have been based on some form of the Unified Modeling Language (UML).|$|R
50|$|Provides a package-based {{browsing}} {{environment as}} an alternative to a conventional Smalltalk <b>class</b> hierarchy <b>browser.</b>|$|R
50|$|The IDE {{features}} syntax highlighting and code folding (through its Scintilla editor component), C++ code completion, <b>class</b> <b>browser,</b> a hex {{editor and}} many other utilities. Opened files are organized into tabs. The code editor supports font and font size selection and personalized syntax highlighting colours.|$|E
5000|$|...NET Reflector is a <b>class</b> <b>browser,</b> {{decompiler}} and {{static analyzer}} for software created with [...]NET Framework, originally written by Lutz Roeder. MSDN Magazine named {{it as one}} of the Ten Must-Have utilities for developers, and Scott Hanselman listed it as part of his [...] "Big Ten Life and Work-Changing Utilities".|$|E
50|$|It {{supports}} Source code editor with syntax highlighting {{with native}} support for Qt Keywords and integrates different Qt Tools such as Qt Designer and qmake. QDevelop's Editor features code completion and automatic indentation. There's also a project management {{system and a}} <b>class</b> <b>browser</b> that enables the programmer to navigate through classes and data structures.|$|E
5000|$|Most modern <b>class</b> <b>browsers</b> {{owe their}} origins to Smalltalk, {{one of the}} {{earliest}} object-oriented languages and development environments. The typical Smalltalk [...] "five-pane" [...] browser is a series of horizontally-abutting selection panes positioned above an editing pane, the selection panes allow the user to specify first a category and then a class, and further to refine the selection to indicate a specific class- or instance-method the implementation of which is presented in the editing pane for inspection or modification.|$|R
5000|$|Reflection is a {{constituent}} of the Java API that lets Java code examine and [...] "reflect" [...] on Java components at runtime {{and use the}} reflected members. Classes in the [...] package, along with [...] and [...] accommodate applications such as debuggers, interpreters, object inspectors, <b>class</b> <b>browsers,</b> and services such as object serialization and JavaBeans that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. This package was added in JDK 1.1.|$|R
40|$|Java {{software}} {{provides a}} vast amount of information about class and interface relations. Inheritance- or uses-relations of large software systems lay great demands on being able to overview the scene. <b>Class</b> <b>browsers</b> may help to master the information, although visualization is usually limited to two dimensions. We analyze the benefits of 3 D presentation and discuss experiences with our sualization tool J 3 Browser. The tool realizes these benefits and some selected visualization techniques within the Java context. This paper leads a step towards a CAD-like design of Java software in 3 D space...|$|R
50|$|As {{development}} environments add refactoring features, many {{of these}} features have been implemented in the <b>class</b> <b>browser</b> {{as well as in}} text editors. A refactoring browser can allow a programmer to move an instance variable from one class to another simply by dragging it in the graphic user interface, or to combine or separate classes using mouse gestures rather than a large number of text editor commands.|$|E
50|$|An {{editor of}} this type is {{positioned}} between a traditional text editor, a Smalltalk <b>class</b> <b>browser</b> anda web browser such as Mozilla. It displays a structured text file (marker-based folding) hierarchically, sometimes using multiple panes. A code browser usually supports syntax highlighting for major languages, and frequently allows users to define highlighting schemes for other files relevant to their activities; {{in some cases it}} may also integrate the output of other programs such as gdb.|$|E
50|$|One {{variant of}} the Seaside web {{framework}} in Smalltalk permits a <b>class</b> <b>browser</b> to be opened at runtime in the running web browser: an edit to a method then takes immediate effect in the running web application. In the case of Vistascript (Vista Smalltalk) for Microsoft IE7, a right-click on the background opens a ClassHierarchyBrowser. This is somewhat like editing JavaScript prototypes in a web browser or Ruby, Groovy or Jython classes in an IDE running in a JVM.|$|E
50|$|WURFL, the Wireless Universal Resource File, is an {{open-source}} {{product that}} addresses Device Detection {{and the ability}} to serve multiple user-experiences to different <b>classes</b> of <b>browsers</b> and devices, based on the capabilities of the requesting HTTP client.|$|R
2500|$|Object Browser: The Object Browser is a {{namespace}} and <b>class</b> library <b>browser</b> for Microsoft [...]NET. It {{can be used}} {{to browse}} the namespaces (which are arranged hierarchically) in managed assemblies. The hierarchy may or may not reflect the organization in the file system.|$|R
40|$|Object-oriented {{languages}} provide powerful programming {{features such}} as polymorphism, inheritance, and dynamic dispatch. While these features allow complex programs to be written more easily, they also make debugging and understanding these programs more di#cult. Object-oriented languages have relied on simple visualization tools such as <b>class</b> <b>browsers</b> to aid programmers in understanding their programs. In this paper, we argue that a completely visual object-oriented programming language, Vipr, has signi#cant advantages over textual objectoriented languages. We describe how Vipr represents all aspects of object-oriented programs including objects, classes, inheritance, polymorphism, and dynamic dispatch. By completely visual, we mean that the semantics of programs written in our language can be entirely described by simple graphical rules. Vipr provides a framework for and integrates existing methods of understanding the structure and execution of visual programs. Also, we [...] ...|$|R
5000|$|The Smalltalk system went on {{to become}} very influential, innovating in bitmap displays, {{personal}} computing, the <b>class</b> <b>browser</b> interface, and many other ways. For details see Kay's The Early History of Smalltalk. [...] Meanwhile, the Actor efforts at MIT remained focused on developing the science and engineering of higher level concurrency. (See the paper by Jean-Pierre Briot for ideas that were developed later on how to incorporate some kinds of Actor concurrency into later versions of Smalltalk.) ...|$|E
50|$|Amber {{includes}} an {{integrated development environment}} (IDE) with a <b>class</b> <b>browser,</b> Workspace, transcript, object inspector, and debugger. Amber is written in itself (is self-hosting), including the compiler, and compiles into JavaScript, mapping one-to-one with the JavaScript equivalent. This one-to-one mapping with JavaScript differentiates Amber from other Smalltalk variants such as Pharo, Seaside, and Squeak. Starting the Amber IDE requires Node.js. Amber doesn't run slowly on a bytecode virtual machine due to its convenient mapping to JavaScript, which makes compiled code run fast.|$|E
50|$|An {{integrated}} {{development environment}} (IDE) is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools and a debugger. Most modern IDEs have intelligent code completion. Some IDEs, such as NetBeans and Eclipse, contain a compiler, interpreter, or both; others, such as SharpDevelop and Lazarus, do not. The boundary between an {{integrated development environment}} {{and other parts of}} the broader software development environment is not well-defined. Sometimes a version control system, or various tools to simplify the construction of a Graphical User Interface (GUI), are integrated. Many modern IDEs also have a <b>class</b> <b>browser,</b> an object browser, and a class hierarchy diagram, for use in object-oriented software development.|$|E
25|$|The Web <b>Browser</b> <b>class</b> {{is further}} refined with the test aspect Brand, three {{possible}} classes are included here: Internet Explorer, Mozilla Firefox, and Apple Safari.|$|R
5000|$|An {{article in}} the Scotland on Sunday wrote that Kelman's debut [...] "landed among the literati like a mortar bomb at Heathrow". It {{highlights}} critics comments about the book as [...] "demonic" [...] due to [...] "the sheer profusion of profanity, academics and middle <b>class</b> book <b>browsers</b> could not cope with the verbal barrage", {{and goes on to}} conclude that [...] "what Cobb and his confreres failed to grasp was that The Busconductor Hines {{was the beginning of a}} revolution in the novel." ...|$|R
5000|$|Let's {{write an}} {{occurrence}} <b>browser</b> <b>class</b> for a text. This class lists the occurrences {{of a word}} in a text. Such an object is expensive to create as {{the locations of the}} occurrences need an expensive process to find. So, to duplicate such an object, we use the prototype pattern: ...|$|R
40|$|This paper {{describes}} {{a new approach}} to specifying graphical layouts of arbitrary objects, which is based on a TEXlike notation. Our simplest scheme offers specifications similar to TEX’s box-and-glue metaphor. Size and position of boxes and glue can be specified by constraints. Advantages of this TEX-like formalism are its expressiveness, user-predictable layouts, and efficient implementation schemes for the underlying layout algorithms. We extend and generalize this forms-oriented scheme for specifying advanced graphical user interfaces (e. g. CLOS <b>class</b> <b>browser).</b> ...|$|E
40|$|Maintaining {{software}} is very difficult, {{not only because}} of the number of software artifacts, but also because of the large variety of artifacts. Software includes programs, but also makefiles, architectural information, change logs, etc. Different software exploration tools have been proposed in the last decade. Unfortunately, these tools are either specific (e. g. a <b>class</b> <b>browser),</b> or customizable (e. g. Rigi or PBS) but require significant preparation before exploration. This paper presents a new approach to software exploration: software back-packing. This approach allows a simultaneous exploration of software entities and meta-information. Our experience with this approach is briefly presented through G SEE, a Generic Software Exploration Environment. 1...|$|E
40|$|The {{purpose of}} this {{homework}} is to ensure basic skills in Smalltalk programming, and to help you explore the literature a bit. This is an individual homework; that is, for this homework, you are {{to do the work}} on your own, not in teams. For all Smalltalk programs, you can run your code with either Squeak or VisualWorks Smalltalk, although we recommend using Squeak. See the “running smalltalk ” web page off the course web page. Hand in a printout of the “file out ” of your code and your testing. For classes you write, you can file out the entire class by selecting the Classes menu in the <b>class</b> <b>browser,</b> then choosin...|$|E
50|$|VisualWorks has a {{very active}} {{third-party}} developers community, with a non-commercial version available free. The non-commercial version has all the power and functionality of the commercial version. In both versions, as in all Smalltalks, the user {{can see all the}} source code. This includes all the system <b>classes,</b> including the <b>browser</b> and GUI builder.|$|R
50|$|Specialized {{debugging}} {{support for}} the Maxine VM {{is provided by the}} Maxine Inspector: a companion tool that acts as a combined object, <b>class,</b> and method <b>browser,</b> as well as a machine- and bytecode-level debugger. The Inspector runs out-of-process, requires no active VM support, and leverages code shared with the VM for specialized developer services.|$|R
50|$|For a {{database}} system, test design {{has to be}} performed. Applying the classification tree method, the identification of test relevant aspects gives the classifications: User Privilege, Operation and Access Method.For the User Privileges, two classes can be identified: Regular User and Administrator User.There are three Operations: Add, Edit and Delete.For the Access Method, again three classes are identified: Native Tool, Web Browser, API.The Web <b>Browser</b> <b>class</b> is further refined with the test aspect Brand, three possible classes are included here: Internet Explorer, Mozilla Firefox, and Apple Safari.|$|R
