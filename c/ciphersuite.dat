18|43|Public
25|$|The server {{responds}} with a ServerHello message, containing the chosen protocol version, a random number, <b>CipherSuite</b> and compression method from the choices {{offered by the}} client. To confirm or allow resumed handshakes the server may send a session ID. The chosen protocol version should be the highest that both the client and server support. For example, if the client supports TLS version 1.1 and the server supports version 1.2, version 1.1 should be selected; version 1.2 should not be selected.|$|E
5000|$|<b>CipherSuite</b> cipher_suites: {{a list of}} the {{cryptographic}} options {{supported by}} the client ...|$|E
5000|$|<b>CipherSuite</b> cipher_suite: the {{cipher suite}} {{selected}} by the server from the client's cipher_suites and revealed in the ServerHello message ...|$|E
5000|$|RFC 4279: [...] "Pre-Shared Key <b>Ciphersuites</b> for Transport Layer Security (TLS)".|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2002). All Rights Reserved. This document proposes several new <b>ciphersuites.</b> At present, the symmetric ciphers supported by Transport Layer Security (TLS) are RC 2, RC 4, International Data Encryption Algorithm (IDEA), Data Encryption Standard (DES), and triple DES. The protocol would be enhanced {{by the addition of}} Advanced Encryption Standard (AES) <b>ciphersuites.</b> Overview At present, the symmetric ciphers supported by TLS are RC 2, RC 4, IDEA, DES, and triple DES. The protocol would be enhanced by the addition of AES [AES] <b>ciphersuites,</b> for the following reasons: 1. RC 2, RC 4, and IDEA are all subject to intellectual property claims. RSA Security Inc. has trademark rights in the names RC 2 and RC 4, and claims that the RC 4 algorithm itself is a trade secret. Ascom Systec Ltd. owns a patent on the IDEA algorithm. 2. Triple DES is much less efficient than more modern ciphers. 3. Now that the AES process is completed there will be commercial pressure to use the selected cipher. The AES is efficient and has withstood extensive cryptanalytic efforts. The AES is therefore a desirable choice. Chown Standards Track [Page 1] RFC 3268 AES <b>Ciphersuites</b> for TLS June 2002 4. Currently the DHE <b>ciphersuites</b> only allow triple DES (along with some "export " variants which do not use a satisfactory key length). At the same time the DHE <b>ciphersuites</b> are the only ones to offer forward secrecy. This document proposes several new <b>ciphersuites,</b> with the aim of overcoming these problems. Cipher Usage The new <b>ciphersuites</b> proposed here are very similar to the following, defined in [TLS]...|$|R
5000|$|TLS-SRP {{is a set}} of <b>ciphersuites</b> for {{transport}} layer security that uses SRP.|$|R
5000|$|Using pre-shared keys can, {{depending}} on the <b>ciphersuite,</b> avoid the need for public key operations. This is useful if TLS is used in performance-constrained environments with limited CPU power.|$|E
5000|$|The server {{responds}} with a ServerHello message, containing the chosen protocol version, a random number, <b>CipherSuite</b> and compression method from the choices {{offered by the}} client. To confirm or allow resumed handshakes the server may send a session ID. The chosen protocol version should be the highest that both the client and server support. For example, if the client supports TLS version 1.1 and the server supports version 1.2, version 1.1 should be selected; version 1.2 should not be selected.|$|E
40|$|Status of this Memo This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2004). RFC 3261 currently specifies 3 DES as the mandatory-to-implement <b>ciphersuite</b> for implementations of S/MIME in the Session Initiation Protocol (SIP). This document updates the normative guidance of RFC 3261 to require the Advanced Encryption Standard (AES) for S/MIME...|$|E
40|$|The Secure Shell (SSH) {{protocol}} {{is widely}} used to provide secure remote access to servers, making it {{among the most important}} security protocols on the Internet. We show that the signed-Diffie [...] Hellman SSH <b>ciphersuites</b> of the SSH protocol are secure: each is a secure authenticated and confidential channel establishment (ACCE) protocol, the same security definition now used to describe the security of Transport Layer Security (TLS) <b>ciphersuites.</b> While the ACCE definition suffices to describe the security of individual <b>ciphersuites,</b> it does not cover the case where parties use the same long-term key with many different ciphersuites: it is common in practice for the server to use the same signing key with both finite field and elliptic curve Diffie [...] Hellman, for example. While TLS is vulnerable to attack in this case, we show that SSH is secure even when the same signing key is used across multiple <b>ciphersuites.</b> We introduce a new generic multi-ciphersuite composition framework to achieve this result in a black-box way...|$|R
2500|$|RFC 4785: [...] "Pre-Shared Key (PSK) <b>Ciphersuites</b> with NULL Encryption for Transport Layer Security (TLS)".|$|R
40|$|In this paper, we {{show how}} to design an efficient, provably secure password-based {{authenticated}} key exchange mechanism {{specifically for the}} TLS (Transport Layer Security) protocol. The goal {{is to provide a}} technique that allows users to employ (short) passwords to securely identify themselves to servers. As our main contribution, we describe a new password-based technique for user authentication in TLS, called Simple Open Key Exchange (SOKE). Loosely speaking, the SOKE <b>ciphersuites</b> are unauthenticated Diffie-Hellman <b>ciphersuites</b> in which the client’s Diffie-Hellman ephemeral public value is encrypted using a simple mask generation function. The mask is simply a constant value raised to the power of (a hash of) the password. The SOKE <b>ciphersuites,</b> in advantage over previous password-base...|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. The Extensible Authentication Protocol (EAP), defined in RFC 3748, provides support for multiple authentication methods. Transport Layer Security (TLS) provides for mutual authentication, integrity-protected <b>ciphersuite</b> negotiation, and key exchange between two endpoints. This document defines EAP-TLS, which includes support for certificate-based mutual authentication and key derivation. This document obsoletes RFC 2716. A summary of the changes betwee...|$|E
40|$|This memo defines an Experimental Protocol for the Internet community. It {{does not}} specify an Internet {{standard}} of any kind. Discussion {{and suggestions for}} improvement are requested. Distribution of this memo is unlimited. This document specifies EAP-IKEv 2, an Extensible Authentication Protocol (EAP) method {{that is based on}} the Internet Key Exchange (IKEv 2) protocol. EAP-IKEv 2 provides mutual authentication and session key establishment between an EAP peer and an EAP server. It supports authentication techniques that are based on passwords, high-entropy shared keys, and public key certificates. EAP-IKEv 2 further provides support for cryptographic <b>ciphersuite</b> negotiation, hash function agility, identity confidentiality (in certain modes o...|$|E
40|$|Abstract. The EAP-GPSK {{protocol}} is a lightweight, flexible authentication protocol {{relying on}} symmetric key cryptography. It {{is part of}} an ongoing IETF process to develop authentication methods for the EAP framework. We analyze the protocol and find three weaknesses: a repairable Denial-of-Service attack, an anomaly with the key derivation function used to create a short-term master session key, and a <b>ciphersuite</b> downgrading attack. We propose fixes to these anomalies, and use a finite-state verification tool to search for remaining problems after making these repairs. We then prove the fixed version correct using a protocol verification logic. We discussed the attacks and our suggested fixes with the authors of the specification document which has subsequently been modified to include our proposed changes. ...|$|E
2500|$|RFC 5054: [...] "Using the Secure Remote Password (SRP) Protocol for TLS Authentication". Defines the TLS-SRP <b>ciphersuites.</b>|$|R
2500|$|RFC 3268: [...] "AES <b>Ciphersuites</b> for TLS". Adds Advanced Encryption Standard (AES) cipher suites to the {{previously}} existing symmetric ciphers.|$|R
40|$|Abstract. In this paper, we {{show how}} to design an efficient, provably secure password-based {{authenticated}} key exchange mechanism {{specifically for the}} TLS (Transport Layer Security) protocol. The goal {{is to provide a}} technique that allows users to employ (short) passwords to securely identify themselves to servers. As our main contribution, we describe a new password-based technique for user authentication in TLS, called Simple Open Key Exchange (SOKE). Loosely speaking, the SOKE <b>ciphersuites</b> are unauthenticated Diffie-Hellman <b>ciphersuites</b> in which the client’s Diffie-Hellman ephemeral public value is encrypted using a simple mask generation function. The mask is simply a constant value raised to the power of (a hash of) the password. The SOKE <b>ciphersuites,</b> in advantage over previous password-based authentication <b>ciphersuites</b> for TLS, combine the following features. First, SOKE has formal security arguments; the proof of security based on the computational Diffie-Hellman assumption is in the random oracle model, and holds for concurrent executions and for arbitrarily large password dictionaries. Second, SOKE is computationally efficient; in particular, it only needs operations in a sufficiently large prime-order subgroup for its Diffie-Hellman computations (no safe primes). Third, SOKE provides good protocol flexibility because the user identity and password are onl...|$|R
40|$|Real-world {{cryptographic}} protocols such as {{the widely}} used Transport Layer Security (TLS) protocol support many different combinations of cryptographic algorithms (called ciphersuites) and simultaneously support different versions. Recent advances in provable security have shown that most modern TLS ciphersuites are secure authenticated and confidential channel establishment (ACCE) protocols, but these analyses generally focus on single ciphersuites in isolation. In this paper we extend the ACCE model to cover protocols with many different sub-protocols, capturing both multiple ciphersuites and multiple versions, and define a security notion for secure negotiation of the optimal sub-protocol. We give a generic theorem that shows how secure negotiation follows, with some additional conditions, from the authentication property of secure ACCE protocols. Using this framework, we analyse the security of <b>ciphersuite</b> and three variants of version negotiation in TLS, includin...|$|E
40|$|TLS {{is by far}} {{the most}} {{important}} protocol on the Internet for negotiating secure session keys and providing authentication. Only very recently, the standard ciphersuites of TLS have been shown to provide provably secure guarantees under a new notion called Authenticated and Confidential Channel Establishment (ACCE) introduced by Jager et al. at CRYPTO' 12. In this work, we analyse the variants of TLS that make use of pre-shared keys (TLS-PSK). In various environments, TLS-PSK is an interesting alternative for remote authentication between servers and constrained clients like smart cards, for example for mobile phone authentication, EMV-based payment transactions or authentication via electronic ID cards. First, we introduce a new and strong definition of ACCE security that covers protocols with pre-shared keys. Next, we prove that all <b>ciphersuite</b> families of TLS-PSK meet our strong notion of ACCE security. Our results do not rely on random oracles nor on any non-standard assumption...|$|E
40|$|This memo defines an Experimental Protocol for the Internet community. It {{does not}} specify an Internet {{standard}} of any kind. Discussion {{and suggestions for}} improvement are requested. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (1999). All Rights Reserved. The Point-to-Point Protocol (PPP) provides a standard method for transporting multi-protocol datagrams over point-to-point links. PPP also defines an extensible Link Control Protocol (LCP), {{which can be used}} to negotiate authentication methods, as well as an Encryption Control Protocol (ECP), used to negotiate data encryption over PPP links, and a Compression Control Protocol (CCP), used to negotiate compression methods. The Extensible Authentication Protocol (EAP) is a PPP extension that provides support for additional authentication methods within PPP. Transport Level Security (TLS) provides for mutual authentication, integrity-protected <b>ciphersuite</b> negotiation and key exchange between two endpoints. This document describes how EAP-TLS, which includes support for fragmentation and reassembly, provides for these TLS mechanisms within EAP. 2...|$|E
50|$|Transport layer {{security}} Secure Remote Password (TLS-SRP) <b>ciphersuites</b> are {{a set of}} cryptographic protocols {{that provide}} secure communication based on passwords, using an SRP password-authenticated key exchange.|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The IETF Trust (2007). This document specifies authentication-only <b>ciphersuites</b> (with no encryption) for the Pre-Shared Key (PSK) based Transport Layer Security (TLS) protocol. These <b>ciphersuites</b> are useful when authentication and integrity protection is desired, but confidentiality is not needed or not permitted...|$|R
2500|$|RFC 4279: [...] "Pre-Shared Key <b>Ciphersuites</b> for Transport Layer Security (TLS)", adds {{three sets}} of new cipher suites for the TLS {{protocol}} to support authentication based on pre-shared keys.|$|R
40|$|The Extensible Authentication Protocol (EAP) {{is widely}} used as an {{authentication}} framework to control the access to wireless networks, e. g. in IEEE 802. 11 and IEEE 802. 16 networks. In this paper, we discuss limitations of EAP secu-rity and demonstrate how these limitations can be exploited to launch attacks on existing EAP methods. In particular, we present a series of attacks which cause some standard se-curity claims, namely channel binding, protected <b>ciphersuite</b> negotiation and cryptobinding, to fail and compromise the key exchange, authentication and privacy of EAP communi-cations. Next, we identify the special security challenges of EAP systems that may cause the considered security claims to fail. EAP differs from other authentication frameworks as a two party protocol, like IKE and TLS, because it is conducted with three parties involved across two communi-cation links with different media. Another security challenge of EAP is the negotiability of EAP methods, ciphersuites, and protocol versions. These challenges {{make it difficult to}} derive a trust model for EAP and to securely adopt existing protocols. Finally, we conclude with recommendations for more secure EAP implementations...|$|E
40|$|Technologies {{make the}} mobile {{terminals}} such as smart phones, PDAs and handsets {{much more powerful}} to access mobile network in recent years. Especially with the widely use of mobile terminals, mobile network now becomes a primary tool for daily and business interactions. However, the proliferation of mobile terminals also draws mobile malware’s attention which will do damage to the mobile terminal and further affect the security of mobile network. But the traditional access control and authentication mechanism cannot resolve such security issues. On the basis of trusted computing technology, we proposed a mobile trusted network architecture by extending the trusted network connection in mobile environment. And an improvement EAP-EHash method {{is used in the}} proposed architecture to implement authentication. We defined two service scenarios in the authentication scheme, home network authentication and roaming network authentication. The process of each scenario is described in detail. By introducing the pseudonym mechanism, our scheme can protect user identity. And the connection status not only depends on the identification process, but also the trust status of the platform. The analysis shows that our scheme benefits the properties of user identity anonymity, mutual authentication, fake agent resistance, platform integrity verification, EAP and TNC Compatible. And the <b>ciphersuite</b> negotiation makes our scheme more suitable for resource limited mobile terminals...|$|E
40|$|International audienceHACL* is a {{verified}} portable C cryptographic library that implements modern cryptographic primitives {{such as the}} ChaCha 20 and Salsa 20 encryption algorithms, Poly 1305 and HMAC message authentication, SHA- 256 and SHA- 512 hash functions, the Curve 25519 elliptic curve, and Ed 25519 signatures. HACL* {{is written}} in the F* programming language and then compiled to readable C code. The F* source code for each cryptographic primitive is verified for memory safety, mitigations against timing side-channels, and functional correctness {{with respect to a}} succinct high-level specification of the primitive derived from its published standard. The translation from F* to C preserves these properties and the generated C code can itself be compiled via the CompCert verified C compiler or mainstream compilers like GCC or CLANG. When compiled with GCC on 64 -bit platforms, our primitives are as fast as the fastest pure C implementations in OpenSSL and Libsodium, significantly faster than the reference C code in TweetNaCl, and between 1. 1 x- 5. 7 x slower than the fastest hand-optimized vectorized assembly code in SUPERCOP. HACL* implements the NaCl cryptographic API and {{can be used as a}} drop-in replacement for NaCl libraries like Libsodium and TweetNaCl. HACL * provides the cryptographic components for a new mandatory <b>ciphersuite</b> in TLS 1. 3 and is being developed as the main cryptographic provider for the miTLS verified implementation. Primitives from HACL* are also being integrated within Mozilla's NSS cryptographic library. Our results show that writing fast, verified, and usable C cryptographic libraries is now practical...|$|E
5000|$|The server sends its ServerKeyExchange message (depending on the {{selected}} cipher suite, {{this may be}} omitted by the server). This message is sent for all DHE and DH_anon <b>ciphersuites.</b>|$|R
5000|$|RFC 4279: [...] "Pre-Shared Key <b>Ciphersuites</b> for Transport Layer Security (TLS)", adds {{three sets}} of new cipher suites for the TLS {{protocol}} to support authentication based on pre-shared keys.|$|R
2500|$|The server sends its ServerKeyExchange message (depending on the {{selected}} cipher suite, {{this may be}} omitted by the server). [...] This message is sent for all DHE and DH_anon <b>ciphersuites.</b>|$|R
40|$|This {{document}} is published {{as a historical}} record of the SSL 3. 0 protocol. The original Abstract follows. This document specifies version 3. 0 of the Secure Sockets Layer (SSL 3. 0) protocol, a security protocol that provides communications privacy over the Internet. The protocol allows client/server applications to communicate {{in a way that}} is designed to prevent eavesdropping, tampering, or message forgery. Foreword Although the SSL 3. 0 protocol is a widely implemented protocol, a pioneer in secure communications protocols, and the basis for Transport Layer Security (TLS), it was never formally published by the IETF, except in several expired Internet-Drafts. This allowed no easy referencing to the protocol. We believe a stable reference to the original document should exist and for that reason, this document describes what is known as the last published version of the SSL 3. 0 protocol, that is, the November 18, 1996, version of the protocol. There were no changes to the original document other than trivial editorial changes and the addition of a "Security Considerations" section. However, portions of the original document that no longer apply were not included. Such as the "Patent Statement " section, the "Reserved Ports Assignment " section, and the cipher-suite registrator note in the "The <b>CipherSuite</b> " section. The "US export rules" discussed in the document do not apply today but are kept intact to provide context for decisions taken in protocol design. The "Goals of This Document " section indicates the goals for adopters of SSL 3. 0, not goals of the IETF. The authors and editors were retained as in the original document. The editor of this {{document is}} Nikos Mavrogiannopoulo...|$|E
40|$|International audienceThe TLS Internet Standard {{features}} {{a mixed bag}} of cryptographic algorithms and constructions, letting clients and servers negotiate their use for each run of the handshake. Although many ciphersuites are now well-understood in isolation, their composition remains problematic, {{and yet it is}} critical to obtain practical security guarantees for TLS, as all mainstream implementations support multiple related runs of the handshake and share keys between algorithms. We study the provable security of the TLS handshake, as it is implemented and deployed. To capture the details of the standard and its main extensions, we rely on miTLS, a verified reference implementation of the protocol. We propose new agile security definitions and assumptions for the signatures, key encapsulation mechanisms (KEM), and key derivation algorithms used by the TLS handshake. To validate our model of key encapsulation, we prove that both RSA and Diffie-Hellman ciphersuites satisfy our definition for the KEM. In particular, we formalize the use of PKCS# 1 v 1. 5 and build a 3, 000 -line EasyCrypt proof of the security of the resulting KEM against replayable chosen-ciphertext attacks under the assumption that ciphertexts are hard to re-randomize. Based on our new agile definitions, we construct a modular proof of security for the miTLS reference implementation of the handshake, including <b>ciphersuite</b> negotiation, key exchange, renegotiation, and resumption, treated as a detailed 3, 600 -line executable model. We present our main definitions, constructions, and proofs for an abstract model of the protocol, featuring series of related runs of the handshake with different ciphersuites. We also describe its refinement to account for the whole reference implementation, based on automated verification tools...|$|E
40|$|The TLS Internet Standard {{features}} {{a mixed bag}} of cryptographic algorithms and constructions, letting clients and servers negotiate their use for each run of the handshake. Although many ciphersuites are now well-understood in isolation, their composition remains problematic, {{and yet it is}} critical to obtain practical security guarantees for TLS. We experimentally confirm that all mainstream implementations of TLS share key materials between different algorithms, some of them of dubious strength. We outline attacks in their handling of resumption and renegotiation, stressing the need to model multiple related instances of the handshake. We study the provable security of the TLS handshake, as it is implemented and deployed. To capture the details of the standard and its main extensions, we rely on miTLS, a verified reference implementation of the protocol. miTLS inter-operates with mainstream browsers and servers for many protocol versions, configurations, and ciphersuites; and it provides application-level, provable security for some. We propose new agile security definitions and assumptions for the signatures, key encapsulation mechanisms (KEM), and key derivation algorithms used by the TLS handshake. By necessity, our definitions are stronger than those expected with simple modern protocols. To validate our model of key encapsulation, we prove that both RSA and Diffie-Hellman ciphersuites satisfy our definition for the KEM. In particular, we formalize the use of PKCS# 1 v 1. 5 encryption in TLS, including recommended countermeasures against Bleichenbacher attacks, and build a 3, 000 -line EasyCrypt proof of the security of the resulting master secret KEM against replayable chosen-ciphertext attacks under the assumption that ciphertexts are hard to re-randomize. Based on our new agile definitions, we construct a modular proof of security for the miTLS reference implementation of the handshake, including <b>ciphersuite</b> negotiation, key exchange, renegotiation, and resumption, treated as a detailed 3, 600 -line executable model. We present our main definitions, constructions, and proofs for an abstract model of the protocol, featuring series of related runs of the handshake with different ciphersuites. We also describe its refinement to account for the whole reference implementation, based on automated verification tools...|$|E
50|$|Transport Layer Security {{pre-shared key}} <b>ciphersuites</b> (TLS-PSK) {{is a set}} of {{cryptographic}} protocols that provide secure communication based on pre-shared keys (PSKs). These pre-shared keys are symmetric keys shared in advance among the communicating parties.|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2005). This document specifies three sets of new <b>ciphersuites</b> for the Transport Layer Security (TLS) protocol to support authentication based on pre-shared keys (PSKs). These pre-shared keys are symmetric keys, shared in advance among the communicating parties. The first set of <b>ciphersuites</b> uses only symmetric key operations for authentication. The second set uses a Diffie-Hellman exchange authenticated with a pre-shared key, and the third set combine...|$|R
50|$|There {{are several}} ciphersuites: The {{first set of}} <b>ciphersuites</b> use only {{symmetric}} key operations for authentication. The second set use a Diffie-Hellman key exchange authenticated with a pre-shared key. The third set combine public key authentication of the server with pre-shared key authentication of the client.|$|R
