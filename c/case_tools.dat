763|1713|Public
2500|$|Programming {{languages}} {{available for}} the AS/400 include RPG, assembly language, C, C++, Pascal, Java, EGL, Perl, Smalltalk, COBOL, SQL, BASIC, PHP, PL/I, Python and REXX. Several <b>CASE</b> <b>tools</b> are available: [...] (see *), Synon, IBM Rational Business Developer Extension, Accelerator, LANSA, Uniface and GeneXus.|$|E
50|$|Another common way to {{distinguish}} <b>CASE</b> <b>tools</b> is {{the distinction between}} Upper CASE and Lower CASE. Upper <b>CASE</b> <b>Tools</b> support business and analysis modeling. They support traditional diagrammatic languages such as ER diagrams, Data flow diagram, Structure charts, Decision Trees, Decision tables, etc. Lower <b>CASE</b> <b>Tools</b> support development activities, such as physical design, debugging, construction, testing, component integration, maintenance, and reverse engineering. All other activities span the entire life-cycle and apply equally to upper and lower CASE.|$|E
5000|$|... #Subtitle level 3: Differences between metaCASE and <b>CASE</b> <b>tools</b> ...|$|E
40|$|The {{development}} of a <b>CASE</b> <b>tool</b> that supports Jackson’s methods – Problem Frames, JSD and JSP- is urged and justified. Jackson’s methods are sound, and fundamental ideas about design provide unity to his thought; in short, his contributions deserve {{to be part of}} the software engineering curriculum. A <b>CASE</b> <b>tool</b> would help to achieve this end. Moreover, teachers need a <b>CASE</b> <b>tool</b> to teach software engineering effectively – a Jackson methods <b>CASE</b> <b>tool</b> would help demonstrate the benefits of sound design convincingly to students. Finally, a Jackson Methods <b>CASE</b> <b>tool</b> would further research. 1...|$|R
5000|$|... #Subtitle level 2: Integration with Oracle Designer <b>CASE</b> <b>Tool</b> ...|$|R
2500|$|Oracle Designer - a <b>CASE</b> <b>tool</b> which {{integrates}} with Oracle Developer Suite ...|$|R
50|$|Another {{criticism}} {{was the focus}} on design documents, {{to the exclusion of}} Computer-Aided Software Engineering (<b>CASE)</b> <b>tools</b> being used in the industry. Vendors would often use the <b>CASE</b> <b>tools</b> to design the software, then write several standards-required documents to describe the CASE-formatted data. This created problems matching design documents to the actual product.|$|E
50|$|Reich Technologies sells {{off-the-shelf}} and tailored {{versions of}} their <b>CASE</b> <b>tools.</b>|$|E
50|$|Typical <b>CASE</b> <b>tools</b> {{exist for}} {{configuration}} management, data modeling, model transformation, refactoring, source code generation.|$|E
50|$|The ArgoUML <b>CASE</b> <b>tool</b> is able {{to export}} UML {{diagrams}} in PGML.|$|R
5000|$|Oracle Designer - a <b>CASE</b> <b>tool</b> which {{integrates}} with Oracle Developer Suite ...|$|R
50|$|Another definition: MetaCASE {{tools are}} {{software}} tools {{that support the}} design and generation of CASE tools.In general, metaCASE tools should provide generic <b>CASE</b> <b>tool</b> components that can be customised and instantiated into particular CASE tools.The intent of metaCASE tools is to capture the specification of the required <b>CASE</b> <b>tool</b> and then generate the tool from the specification.|$|R
5000|$|... to have {{easy to use}} {{graphical}} <b>CASE</b> <b>tools</b> {{to support}} simple and efficient user interactions ...|$|E
5000|$|Workbenches {{integrate}} {{two or more}} <b>CASE</b> <b>tools</b> {{and support}} specific software-process activities. Hence they achieve: ...|$|E
50|$|<b>CASE</b> <b>tools</b> {{support a}} fixed number of methodologies but {{software}} development organizations dynamically change their adopted methodologies.|$|E
5000|$|MonoUML is a <b>CASE</b> <b>tool</b> {{based on}} the Mono framework. Designed for {{allowing}} Unix/Linux developers to design computer systems faster using a friendly GUI application. Not only a diagramming tool but rather a complete <b>CASE</b> <b>tool</b> {{based on the}} OMG standards and fully compatible with proprietary tools. MonoUML supports reverse engineering of executables (.exe) or [...]NET assemblies.|$|R
40|$|Abstract: This paper {{presents}} a <b>CASE</b> <b>tool</b> for the high-level specification of web applications integrated with web services. The <b>CASE</b> <b>tool</b> {{is based on}} WebML, a conceptual modelling language used for the specification of {{the front end of}} web applications. WebML, extended with new primitives for modelling web services, allows one to specify complex interactions between a web application, driven by the user, and remote processes, represented by services. The <b>CASE</b> <b>tool</b> also allows the specification and deployment of application functionalities as web services and automatically generates the running code, including web pages, web services calls and the exposed web services. In this paper, we describe the primitives for web services modelling, the architecture of the <b>CASE</b> <b>tool</b> for designing the applications, and the runtime architecture of the generated applications. Finally, we give an overview of some industrial applications developed with the described approach...|$|R
40|$|Data Type and Client/Server {{paradigms}} were {{proposed for}} the NFRAssistant <b>CASE</b> <b>tool.</b> Each software architecture scheme was analyzed {{within the context of}} the 9 NFR-Assistant <b>CASE</b> <b>tool</b> to expose its advantages and disadvantages. With each clearly defined, proposed architecture as an operationalizing goal and its relationships readily linked among the established non-functional requirements, the NFR-Assistant <b>CASE</b> <b>tool</b> is able to forecast the effects of each design alternative. The Pipe-and-Filter architecture (shown in Figure 2) provides a very simple, direct process. It is most appropriate in applications where completely independent tasks are to be performed in succession. However, it is not amendable to random user input. Given the common usage scenario of this <b>CASE</b> <b>tool</b> to handle dynamic changes via user input, the Pipe-and-Filter architecture proves to be detrimental. Hence, it is probably not conducive to projections of distributedness. The Implicit Invocation architectural styl [...] ...|$|R
5000|$|<b>CASE</b> <b>tools</b> {{supports}} {{specific tasks}} {{in the software}} development life-cycle. They {{can be divided into}} the following categories: ...|$|E
5000|$|The lowest, {{the model}} level, {{is similar to}} that of <b>CASE</b> <b>tools.</b> It {{includes}} system designs as models.|$|E
50|$|Computer-aided {{software}} engineering (CASE) is {{the domain of}} software tools used to design and implement applications. <b>CASE</b> <b>tools</b> are similar to and were partly inspired by computer-aided design (CAD) tools used for designing hardware products. <b>CASE</b> <b>tools</b> are used for developing high-quality, defect-free, and maintainable software. CASE software {{is often associated with}} methods for the development of information systems together with automated tools {{that can be used in}} the software development process.|$|E
40|$|Existing <b>CASE</b> <b>tool</b> diagram editors have large, complex, and {{sophisticated}} graphical user interfaces. Because of their size, these interfaces {{are difficult to}} learn and hard to use. A minimal interface for a diagram editor provides only the essential behaviour required by the user in the simplest possible manner. Minimal interfaces are smaller than traditionalinterfaces, and should be easier and quicker to use. 1. Introduction A COMPUTER AIDED SOFTWARE ENGINEERING <b>tool</b> (or <b>CASE</b> <b>tool)</b> is a drawing tool used to produce and manage diagrams representing a software system's design. A <b>CASE</b> <b>tool</b> typically embodies the definitions {{of one or more}} software development methodologies. The tool allows a designer to enter diagrams in the method's notation, checks the diagrams for consistency, and may generate code or produce diagrams from pre-existing code. Unfortunately, providing information to a <b>CASE</b> <b>tool</b> often serves to subvert the design process. For example, Jim Coplien [3] recommends that key [...] ...|$|R
40|$|The {{aim of the}} {{research}} is to derive a framework for the evaluation of Computer Aided Software Engineering (<b>CASE)</b> <b>tool</b> learnability in educational environments. Drawing from the literature of Human Computer Interaction and educational research, a framework for evaluating <b>CASE</b> <b>tool</b> learnability in educational environments is derived. The two main differences between this framework and existing evaluation frameworks is that 1) it is specific to educational environments and 2) it recognizes the significance of contextual factors such as learning environment and teaching and learning methodologies in evaluating learnability. The framework is oriented towards learnability and is customisable. It helps to define the important issues related to <b>CASE</b> <b>tool</b> learnability, and allows conclusions to be drawn about all influential factors on learning in the given context. A detailed case study describes the application of the framework to evaluate the learnability of Rational Rose, a <b>CASE</b> <b>tool</b> used in an undergraduate Systems Analysis and Design course...|$|R
50|$|Objecteering is a UML and MDA <b>CASE</b> <b>tool</b> {{edited by}} Objecteering Software, a {{subsidiary}} of Softeam.|$|R
5000|$|Easy {{integration}} of <b>CASE</b> <b>tools</b> into JAD workshops improves session productivity and provides systems analysts with discussed {{and ready to}} use models.|$|E
5000|$|Tools: Especially {{emphasized}} were tools: structured programming, object-oriented programming, <b>CASE</b> <b>tools</b> such as ICL's CADES CASE system,Ada, documentation, {{and standards}} were touted as silver bullets.|$|E
50|$|The {{distinction}} between tools and applications is murky. For example, developers use simple databases (such as a file containing {{a list of}} important values) all the time as tools. However a full-blown database is usually thought of as an application or software in its own right. For many years, computer-assisted software engineering (<b>CASE)</b> <b>tools</b> were sought after. Successful tools have proven elusive.In one sense, <b>CASE</b> <b>tools</b> emphasized design and architecture support, such as for UML. But the most successful of these tools are IDEs.|$|E
5000|$|Encapsulator: {{tool for}} {{encapsulate}} any <b>CASE</b> <b>tool</b> into a Tool Slot if it supports standard I/O.|$|R
40|$|The {{aim of this}} {{bachelor}} {{thesis is}} to select a <b>CASE</b> <b>tool</b> for UML modeling and write a manual for this instrument, which will subsequently be used for teaching at the VŠE. In this work, therefore, can set the selection criteria and method of election of the resulting <b>CASE</b> <b>tool</b> for teaching. On the resulting <b>CASE</b> <b>tool</b> is written guide for use. Assuming that expectations of use are similar to VŠE, the program can also be recommend to use by other subjects. The first part deals primarily with the suitable candidates for teaching UML, setting of criteria for their selection and comparison. The second part is a practical guide to program- from download to creation the first diagram...|$|R
5000|$|W-Language - A French {{programming}} language {{used in the}} WinDev <b>CASE</b> <b>Tool.</b> A Chinese version is also available.|$|R
50|$|Text editors and/or word {{processors}} with template support {{are often used}} to write use cases. For large and complex system requirements, dedicated use <b>case</b> <b>tools</b> are helpful.|$|E
50|$|Generator {{contains}} Hardware/software {{environment that}} {{allows people to}} easily develop specific DSS applications. This level makes use of <b>case</b> <b>tools</b> or systems such as Crystal, Analytica and iThink.|$|E
50|$|With {{the decline}} of the mainframe, AD/Cycle and the Big <b>CASE</b> <b>tools</b> died off, opening the market for the {{mainstream}} <b>CASE</b> <b>tools</b> of today. Many {{of the leaders of the}} CASE market of the early 1990s ended up being purchased by Computer Associates, including IEW, IEF, ADW, Cayenne, and Learmonth & Burchett Management Systems (LBMS). The other trend that led to the evolution of <b>CASE</b> <b>tools</b> was the rise of object-oriented methods and tools. Most of the various tool vendors added some support for object-oriented methods and tools. In addition new products arose that were designed from the bottom up to support the object-oriented approach. Andersen developed its project Eagle as an alternative to Foundation. Several of the thought leaders in object-oriented development each developed their own methodology and CASE tool set: Jacobsen, Rumbaugh, Booch, etc. Eventually, these diverse tool sets and methods were consolidated via standards led by the Object Management Group (OMG). The OMG's Unified Modelling Language (UML) is currently widely accepted as the industry standard for object-oriented modeling.|$|E
40|$|This paper {{describes}} an overview on {{the implementation of}} CASE as a software automation and its classifications. The significance of <b>CASE</b> <b>tool</b> {{in the light of}} software development and maintenance is highlighted. The overall characteristics of each category of <b>CASE</b> <b>tool</b> and its environment are addressed. CASE is considered as an alternative application by the software developers in an attempt to increase the quality and productivity of the system development...|$|R
5000|$|A domain-specific {{language}} {{environment may}} {{be thought of}} as a metamodeling tool, i.e., a modeling tool used to define a modeling <b>tool</b> or <b>CASE</b> <b>tool.</b> The resulting tool may either work within the domain-specific language environment, or less commonly be produced as a separate stand-alone program. In the more common case, the domain-specific language environment supports an additional layer of abstraction when compared to a traditional <b>CASE</b> <b>tool.</b>|$|R
40|$|Abstract—The {{design and}} {{development}} of a large Multi Agent System (MAS) is a complex and difficult activity where a proper modeling notation may offer {{a significant contribution to}} the formulation of the best solution. The support provided by a specific <b>CASE</b> <b>tool</b> can significantly contribute to make the chosen approach technically valid and it is also a fundamental element of a feasible development strategy. The present work reports a UML profile and the related graphical notation for describing a MAS based on the Jason metamodel. Moreover a specific <b>CASE</b> <b>tool</b> has been developed for supporting MASs design and automatic code generation. The proposed notation is shown in details using a classical example from the Jason tutorial (domestic robot). Keywords-Jason; Multi-agent system; <b>CASE</b> <b>tool</b> I...|$|R
