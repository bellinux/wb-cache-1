138|148|Public
500|$|The Eriksson {{brothers}} and Johansson used the programming language BASIC {{to create the}} game, which Kimmo called noteworthy: it was considered impossible to write big programs in BASIC, and The Cottage was [...] "gigantic". The reason for their choice in programming language {{was that it was}} the only one all three knew beforehand; Kimmo said that they would no longer have chosen BASIC if they had programmed The Cottage in 1986, as they had access to many more programming languages by that time. According to Johansson, another reason was [...] "pure defiance" [...] towards the Eriksson brothers' father, who had told them they {{would never be able to}} get the game running if they programmed it in BASIC. Johansson said that the most challenging aspect of the development was getting the game to understand the Swedish language; to keep the size of the game's <b>command</b> <b>interpreter</b> [...] "reasonable", they decided to limit it to two-word commands. Acknowledging that different people use different words for things, they play-tested it with friends and family, writing down all attempted commands and deciding what the game should be expected to understand. During a short period of the game's development, the developers also logged all actions players at QZ had taken that the <b>command</b> <b>interpreter</b> had not understood; based on this data, they improved the interpreter and changed the outcomes to certain actions. At one point, the Eriksson {{brothers and}} Johansson took a two-year break from the game, but eventually returned to it and finished it in 1979. At this point, the only ways to play the game were by using a computer terminal in a university or by connecting to Oden via a modem.|$|E
2500|$|... 4DOS – {{designed}} {{to replace the}} default <b>command</b> <b>interpreter</b> COMMAND.COM ...|$|E
2500|$|Making the <b>command</b> <b>interpreter</b> an {{ordinary}} user-level program, with additional commands provided as separate programs, was another Multics innovation popularized by Unix. The Unix shell {{used the same}} language for interactive commands as for scripting (shell scripts– there was no separate job control language like IBM's JCL). Since the shell and OS commands were [...] "just another program", the user could choose (or even write) his own shell. New commands could be added without changing the shell itself. Unix's innovative command-line syntax for creating modular chains of producer-consumer processes (pipelines) made a powerful programming paradigm (coroutines) widely available. Many later command-line interpreters {{have been inspired by}} the Unix shell.|$|E
50|$|The wide {{adoption}} of Unicode, and UTF-8 on the web, resolved {{most of these}} historical limitations. ASCII remains the de facto standard for <b>command</b> <b>interpreters,</b> programming languages and text-based communication protocols.|$|R
25|$|The exec call is {{supported}} in many programming languages, including compilable languages and some scripting languages. In OS <b>command</b> <b>interpreters,</b> the exec built-in command replaces the shell process with the specified program.|$|R
5000|$|...bat: The first {{filename}} extension used by Microsoft for batch files. This extension runs with DOS and all versions of Windows, under COMMAND.COM or cmd.exe, despite {{the different ways}} the two <b>command</b> <b>interpreters</b> execute batch files.|$|R
50|$|The {{staff were}} {{motivated}} {{to write their}} own system software for the IBM installation {{as a result of}} their dissatisfaction with IBM's own interactive <b>command</b> <b>interpreter</b> TSO. The initial product of their efforts was a Phoenix <b>command</b> <b>interpreter</b> which completely replaced the TSO <b>command</b> <b>interpreter</b> and was also available as a language for controlling batch job submissions through the use of a single IBM JCL command to invoke the Phoenix <b>command</b> <b>interpreter.</b> The Phoenix <b>command</b> <b>interpreter</b> was based on that of the Titan Multiple Access System which had inline input files and was in service from 1967.|$|E
50|$|So-called shebang {{lines in}} script files are {{a special case}} of magic numbers. Here, the magic number is human-readable text that {{identifies}} a specific <b>command</b> <b>interpreter</b> and options to be passed to the <b>command</b> <b>interpreter.</b>|$|E
50|$|GEC's OS4000 JCL {{was based}} on the Phoenix <b>command</b> <b>interpreter.</b>|$|E
5000|$|These {{features}} {{are supported by}} COMMAND.COM in all versions of DOS Plus and DR-DOS, but not in MS-DOS or PC DOS. They are also supported by the <b>command</b> <b>interpreters</b> in Concurrent DOS, Multiuser DOS and REAL/32, although they use VT52 rather than ANSI control sequences by default (e.g. [...] ).|$|R
5000|$|KBM (Keyboard Monitor) - Analogous to <b>Command</b> Line <b>Interpreter.</b>|$|R
5000|$|<b>Command</b> line <b>interpreter</b> for utility {{applications}} and standard CGI programming ...|$|R
5000|$|... 4DOS - {{designed}} {{to replace the}} default <b>command</b> <b>interpreter</b> COMMAND.COM ...|$|E
5000|$|Festival Speech Synthesis System uses SIOD as its {{underlying}} <b>command</b> <b>interpreter.</b>|$|E
5000|$|ROM: 128 KB (text editor, <b>command</b> <b>interpreter,</b> Pascal compiler, and assembler) ...|$|E
5000|$|COMMAND.COM, the <b>command</b> line <b>interpreter</b> for DOS and Windows 9x ...|$|R
50|$|The <b>command</b> line <b>interpreter</b> is {{available}} under the Apache Software License.|$|R
5000|$|DIGITAL Command Language (DCL) - Digital Command Language - <b>command</b> line <b>interpreter.</b>|$|R
50|$|Users {{would sit}} at a {{terminal}} and type in programming language statements. The statements could either be entered into the system's <b>command</b> <b>interpreter</b> directly, or entered into a text editor, saved to a file, and loaded into the <b>command</b> <b>interpreter</b> from the file. Errors in source code were reported to the user immediately after the line was typed.|$|E
50|$|HP BASIC {{began as}} BASIC-PLUS, created by DEC for their RSTS-11 {{operating}} system and PDP-11 minicomputer. Programming language statements could either be typed into the <b>command</b> <b>interpreter</b> directly, or {{entered into a}} text editor, saved to a file, and then loaded into the <b>command</b> <b>interpreter</b> from the file. Errors in source code were reported to the user immediately after the line was entered.|$|E
5000|$|SHELL (DOS 2.0 and DR DOS 3.31 and higher; OS/2) : Loads the <b>command</b> <b>interpreter</b> shell.|$|E
5000|$|<b>Command</b> line <b>interpreter</b> and {{scripting}} support {{fully compatible}} with extant RasMol scripts ...|$|R
5000|$|CANDE {{provides}} a <b>command</b> line <b>interpreter</b> and line editor.Other notable {{features and functions}} include: ...|$|R
50|$|Unlike {{many other}} <b>command</b> line <b>interpreters,</b> PowerShell has built-in, language-level support for {{defining}} associative arrays.|$|R
50|$|Conversely, {{scripting}} programming languages, {{in particular}} {{those with an}} eval function (such as REXX, Perl, Python, Ruby or Jython), {{can be used to}} implement command-line interpreters and filters. For a few operating systems, most notably DOS, such a <b>command</b> <b>interpreter</b> provides a more flexible command line interface than the one supplied. In other cases, such a <b>command</b> <b>interpreter</b> can present a highly customised user interface employing the user interface and input/output facilities of the language.|$|E
5000|$|If {{not enabled}} by default, command {{extensions}} can be temporarily enabled using the [...] "" [...] switch for the <b>command</b> <b>interpreter.</b>|$|E
5000|$|Internal Commands are {{commands}} stored directly {{inside the}} [...] binary. Thus, {{they can only}} be executed directly from the <b>command</b> <b>interpreter.</b>|$|E
5000|$|The Windows [...] {{command is}} {{available}} in supported versions of the <b>command</b> line <b>interpreter</b> CMD.EXE.|$|R
5000|$|CCL, the <b>command</b> line <b>interpreter,</b> was {{supplied}} in source {{form and}} could be extended by the user.|$|R
40|$|Shells, as <b>command</b> <b>interpreters,</b> are the {{classical}} way {{for humans to}} interact with computing systems, and modern shell features have extended this basic functionality with higher-level programming language constructs. Although implementing compilation in these shell languages is generally unprofitable and intractable, many advantages, such as isolation, filesystem abstraction, security, portability, parallelization and locality optimization are possible, using standard compilation techniques. While compilation is not possible for all scripts, there exist shell scripts of a class that are, in practice, both profitable and tractable to compile and execute. This class of scripts is prevalent in the scientific computing community, where scripts are commonly used to automate data processing sequences. We describe a prototype shell compilation and implementation for these scripts, noting advantages and challenges, and illustrating the significant performance potential available. Our results show that shell compilation is a viable means of automatically identifying and exploiting high-level program parallelism using existing sequential script specification and without requiring reimplementation. Key words: programming languages, shell languages, domain-specific language, <b>command</b> <b>interpreters,</b> optimizing compiler, locality optimization, paralle...|$|R
5000|$|KornShell {{complies}} with POSIX.2, Shell and Utilities, <b>Command</b> <b>Interpreter</b> (IEEE Std 1003.2-1992.) Major differences between KornShell {{and the traditional}} Bourne shell include: ...|$|E
5000|$|The {{functionality}} of {{the original}} KornShell, , {{was used as a}} basis for the standard POSIX.2, Shell and Utilities, <b>Command</b> <b>Interpreter</b> (IEEE Std 1003.2-1992.) ...|$|E
5000|$|The [...] {{expression}} {{tells the}} <b>command</b> <b>interpreter</b> to run command and make its output {{appear as a}} file. The command can be any arbitrarily complex shell command.|$|E
5000|$|CCL (Concise Command Language) - {{equivalent}} to a command to run a program kept in the <b>Command</b> Line <b>Interpreter.</b>|$|R
50|$|TRIPOS {{provided}} {{features such}} as pre-emptive multi-tasking (using strict-priority scheduling), a hierarchical file system and multiple <b>command</b> line <b>interpreters.</b>|$|R
5000|$|Internal — {{recognized}} and processed by the <b>command</b> line <b>interpreter</b> itself and not dependent upon any external executable file.|$|R
