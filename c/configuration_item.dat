51|126|Public
25|$|Configuration status {{accounting}} is {{the ability}} to record and report on the configuration baselines associated with each <b>configuration</b> <b>item</b> at any moment of time.|$|E
25|$|Configuration Status Accounting: {{includes}} {{the process of}} recording and reporting <b>configuration</b> <b>item</b> descriptions (e.g., hardware, software, firmware, etc.) and all departures from the baseline during design and production. In the event of suspected problems, the verification of baseline configuration and approved modifications can be quickly determined.|$|E
2500|$|Configuration audits {{are broken}} into {{functional}} and physical configuration audits. [...] They occur either at delivery {{or at the}} moment of effecting the change. [...] A functional configuration audit ensures that functional and performance attributes of a <b>configuration</b> <b>item</b> are achieved, while a physical configuration audit ensures that a <b>configuration</b> <b>item</b> is installed in accordance with the requirements of its detailed design documentation.|$|E
50|$|Configuration {{identification}} - Identifying <b>configurations,</b> <b>configuration</b> <b>items</b> and baselines.|$|R
5000|$|... {{results in}} a new status {{of one or more}} <b>configuration</b> <b>items</b> (CIs) ...|$|R
50|$|<b>Configuration</b> <b>items,</b> their versions, {{and their}} changes {{form the basis}} of any {{configuration}} audit.|$|R
2500|$|Configuration {{identification}} {{is the process}} of identifying the attributes that define every aspect of a <b>configuration</b> <b>item.</b> [...] A <b>configuration</b> <b>item</b> is a product (hardware and/or software) that has an end-user purpose. [...] These attributes are recorded in configuration documentation and baselined. Baselining an attribute forces formal configuration change control processes to be effected in the event that these attributes are changed.|$|E
50|$|A release (itself a {{versioned}} entity) may {{consist of}} several configuration items. The set of changes to each <b>configuration</b> <b>item</b> {{will appear in}} the release notes, and the notes may contain specific headings for each <b>configuration</b> <b>item.</b> A complex hardware <b>configuration</b> <b>item</b> may have many levels of configuration items beneath its top level; each <b>configuration</b> <b>item</b> level must meet the same fundamental elements of the configuration management system.|$|E
5000|$|The <b>Configuration</b> <b>Item</b> Record {{will provide}} {{a record of the}} {{following}} information: ...|$|E
50|$|The SDR is a {{technical}} review conducted {{to evaluate the}} manner in which a project's system requirements have been allocated to <b>configuration</b> <b>items,</b> manufacturing considerations, next phase planning, production plans, and the engineering process that produced the allocation.This review is conducted when the system definition is at a point where system characteristics and <b>configuration</b> <b>items</b> are defined. A successful SDR establishes a 'functional baseline'.|$|R
5000|$|The entity must be uniquely {{identified}} {{so that it}} can {{be distinguished}} from all other <b>configuration</b> <b>items.</b>|$|R
5000|$|Event Management can {{be applied}} to any aspects of Service Management that can be {{controlled}} and can be automated (<b>Configuration</b> <b>Items)</b> ...|$|R
5000|$|From the {{perspective}} of the implementer of a change, the CI is the [...] "what" [...] of the change. Altering a specific baseline version of a <b>configuration</b> <b>item</b> creates {{a new version of the}} same <b>configuration</b> <b>item,</b> itself a baseline. In examining the effect of a change, two of the questions that must be asked are: ...|$|E
50|$|Configuration audits {{are broken}} into {{functional}} and physical configuration audits. They occur either at delivery {{or at the}} moment of effecting the change. A functional configuration audit ensures that functional and performance attributes of a <b>configuration</b> <b>item</b> are achieved, while a physical configuration audit ensures that a <b>configuration</b> <b>item</b> is installed in accordance with the requirements of its detailed design documentation.|$|E
50|$|Configuration {{identification}} {{is the process}} of identifying the attributes that define every aspect of a <b>configuration</b> <b>item.</b> A <b>configuration</b> <b>item</b> is a product (hardware and/or software) that has an end-user purpose. These attributes are recorded in configuration documentation and baselined. Baselining an attribute forces formal configuration change control processes to be effected in the event that these attributes are changed.|$|E
25|$|Configuration {{change control}} {{is a set of}} {{processes}} and approval stages required to change a <b>configuration</b> <b>item's</b> attributes and to re-baseline them.|$|R
50|$|The CMDB {{contains}} {{and records}} {{data that are}} also called <b>configuration</b> <b>items</b> (CI). It also provides details about the important attributes of CIs and the relationships between them.|$|R
40|$|To {{create a}} solid {{basis for the}} framework, cloudenvironments have to be formalized. Cloud-environments contain {{services}} and resources which can be configured to individual requirements. Thus, a cloud-environment {{can be regarded as}} a configuration of services and resources, as shown in Fig. 2. A configuration consists of a set of <b>configuration</b> <b>items</b> representing individual services or resources. <b>Configuration</b> <b>items</b> can be associated in different ways. By introducing the entities configuration and specifications from the real services and resources. Thus, a layer of indirection is created that allows assigning real services and resources...|$|R
5000|$|Software Requirements Specification (SRS) - The {{requirements}} {{to be met}} by a Computer Software <b>Configuration</b> <b>Item</b> (CSCI) ...|$|E
50|$|Configuration status {{accounting}} is {{the ability}} to record and report on the configuration baselines associated with each <b>configuration</b> <b>item</b> at any moment of time.|$|E
5000|$|The {{benefits}} for software customers, SAM practitioners, IT support professionals and end users {{of a given}} software <b>configuration</b> <b>item</b> include, {{but are not limited}} to: ...|$|E
50|$|Aldon CMDB is a {{centralized}} repository of <b>configuration</b> <b>items</b> (CIs), for IT Service Management. Aldon CMDB works {{in tandem with}} Aldon Community Manager to manage change, asset, and portfolio items.|$|R
25|$|Group Policy Preferences adds {{a number}} of new <b>configuration</b> <b>items.</b> These items also have {{a number of}} {{additional}} targeting options {{that can be used to}} granularly control the application of these setting items.|$|R
5000|$|BSM allows IT {{departments}} to operate by service {{rather than by}} individual <b>configuration</b> <b>items</b> or technology silo, enabling prioritization of efforts, ultimately improving the service that is delivered to the business or organization.|$|R
50|$|A <b>configuration</b> <b>item</b> type (or CI type) is {{the data}} type of the element or <b>configuration</b> <b>item</b> an {{enterprise}} wishes to store within the CMDB. At a minimum, all software, hardware, network, and storage CI types are stored and tracked in a CMDB. As enterprises mature, {{they start to}} track business CI types in their CMDB, such as people, markets, products, and 3rd party entities such as vendors and partners. This allows the relationships between CI's to become more meaningful and the CMDB to become a stronger source for knowledge management.|$|E
5000|$|... 2007: An {{unplanned}} interruption to an IT {{service or}} {{a reduction in}} the quality of an IT service. Failure of a <b>configuration</b> <b>item</b> that has not yet impacted service is also an incident. For example, failure of one disk from a mirror set.|$|E
5000|$|Configuration Status Accounting: {{includes}} {{the process of}} recording and reporting <b>configuration</b> <b>item</b> descriptions (e.g., hardware, software, firmware, etc.) and all departures from the baseline during design and production. In the event of suspected problems, the verification of baseline configuration and approved modifications can be quickly determined.|$|E
5000|$|Change History: Learn {{how your}} <b>configuration</b> <b>items</b> are {{changing}} over time: The tool not only discovers the configuration, but also changes in configuration to provide analytics. For example, The Procurement application worked last week, but not working today. What would have changed? ...|$|R
3000|$|The {{emulation}} {{behavior is}} controlled {{by a set of}} <b>configuration</b> <b>items,</b> which can be adjusted as necessary to emulate a specific scenario. Each scenario is described by its own configuration file, and is referred to as a canned scenario. The configuration files are: [...]...|$|R
40|$|The Controls Configuration Database (CCDB) and its {{interfaces}} {{have been}} developed over the last 25 years {{in order to become}} nowadays the basis for the Configuration Management of the Controls System for all accelerators at CERN. The CCDB contains data for all <b>configuration</b> <b>items</b> and their relationships, required for the correct functioning of the Controls System. The <b>configuration</b> <b>items</b> are quite heterogeneous, depicting different areas of the Controls System â€“ ranging from 3000 Front-End Computers, 75 000 software devices allowing remote control of the accelerators, to valid states of the Accelerators Timing System. The article will describe the different areas of the CCDB, their interdependencies and the challenges to establish the data model for such a diverse configuration management database, serving a multitude of clients. The CCDB tracks the life of the <b>configuration</b> <b>items</b> by allowing their clear identification, triggering of change management processes as well as providing status accounting and audits. This necessitated {{the development and implementation of}} a combination of tailored processes and tools. The Controls System is a data-driven one - the data stored in the CCDB is extracted and propagated to the controls hardware in order to configure it remotely. Therefore a special attention is placed on data security and data integrity as an incorrectly configured item can have a direct impact on the operation of the accelerators...|$|R
5000|$|A <b>configuration</b> <b>item</b> (CI) is an IT asset or a {{combination}} of IT assets that may depend on and/or have relationships with other IT processes. A CI will have attributes which may be hierarchical and relationships that will be assigned by the configuration manager in the CM database.|$|E
50|$|All {{activities}} and project results are versioned and automatically {{stored in a}} central product library. To alter a document {{it has to be}} checked out and in again. All changes to a <b>configuration</b> <b>item</b> {{can be seen in the}} revision history. Baselines can be used to mark significant states within a series of several changes.|$|E
50|$|An event can {{be defined}} as any {{detectable}} or discernible occurrence that has significance for the management of the IT Infrastructure or the delivery of IT service and evaluation of the impact a deviation might cause to the services. Events are typically notifications created by an IT service, <b>Configuration</b> <b>Item</b> (CI) or monitoring tool.|$|E
5000|$|A {{configuration}} management database (CMDB) is a repository {{that acts as}} a data warehouse for information technology (IT) installations. It holds data relating to a collection of IT assets (commonly referred to as <b>configuration</b> <b>items</b> (CI)), as well as to descriptive relationships between such assets. The repository provides a means of understanding: ...|$|R
40|$|This paper {{describe}} the principles, {{design and implementation}} of DERIVE, a deductive database for software configurations, in which primitive items (e. g. source files) are stored as facts, configurations are described by rules, compilers (and other derivation tools) are regarded as pure functions (over byte strings), and system building is realised by query evaluation meta-programmed in Prolog. <b>Configuration</b> <b>items</b> can have unlimited independent variance, which is inherited by derived items, and which interacts combinatorially. New degrees of variance {{can be added to}} an existing configuration. DERIVE makes extensive use of memoisation to achieve minimal recompilation; it employs partial evaluation to produce partly built product configurations which are described by mechanically generated make files or build scripts; and it employs abstract interpretation to answer queries about product feasibility. It demands and exploits referential transparency in all <b>configuration</b> <b>items,</b> infers al [...] ...|$|R
5000|$|Service asset and {{configuration}} management is primarily focused on maintaining information (i.e., <b>configurations)</b> about <b>Configuration</b> <b>Items</b> (i.e., assets) required to deliver an IT service, including their relationships. Configuration management is {{the management and}} traceability of every aspect of a configuration {{from beginning to end}} and it includes the following key process areas under its umbrella: ...|$|R
