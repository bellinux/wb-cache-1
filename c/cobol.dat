1160|9|Public
5|$|<b>COBOL</b> {{provides}} the SEARCH ALL verb for performing binary searches on <b>COBOL</b> ordered tables.|$|E
5|$|During 1960, {{the list}} of {{manufacturers}} planning to build <b>COBOL</b> compilers grew. By September, five more manufacturers had joined CODASYL (Bendix, Control Data Corporation, General Electric (GE), National Cash Register and Philco), and all represented manufacturers had announced <b>COBOL</b> compilers. GE and IBM planned to integrate <b>COBOL</b> into their own languages, GECOM and COMTRAN, respectively. In contrast, International Computers and Tabulators planned to replace their language, CODEL, with <b>COBOL.</b>|$|E
5|$|Efforts {{began to}} {{standardize}} <b>COBOL</b> to overcome incompatibilities between versions. In late 1962, both ISO and the United States of America Standards Institute (now ANSI) formed groups to create standards. ANSI produced USA Standard <b>COBOL</b> X3.23 in August 1968, {{which became the}} cornerstone for later versions. This version was known as American National Standard (ANS) <b>COBOL</b> and was adopted by ISO in 1972.|$|E
5000|$|<b>COBOL's</b> [...] facility, {{although}} considered [...] "primitive",influenced {{the development}} of include directives.|$|R
500|$|<b>COBOL's</b> {{conditional}} {{statements are}} [...] and [...] [...] is a switch-like statement {{with the added}} capability of evaluating multiple values and conditions. This {{can be used to}} implement decision tables. For example, the following might be used to control a CNC lathe: ...|$|R
500|$|Jean Sammet, a {{short-range}} committee member, {{noted that}} [...] "little {{attempt was made}} to cater to the professional programmer, in fact people whose main interest is programming tend to be very unhappy with COBOL" [...] which she attributed to <b>COBOL's</b> verbose syntax.|$|R
5|$|Meanwhile, RCA and Sperry Rand {{worked on}} {{creating}} <b>COBOL</b> compilers. The first <b>COBOL</b> program ran on 17 August on an RCA 501.|$|E
5|$|There {{was also}} {{significant}} condescension towards <b>COBOL</b> {{in the business}} community from users of other languages, for example FORTRAN or assembler, implying that <b>COBOL</b> could be used only for non-challenging problems.|$|E
5|$|By 1970, <b>COBOL</b> {{had become}} {{the most widely used}} {{programming}} language in the world.|$|E
5000|$|<b>COBOL's</b> {{conditional}} {{statements are}} [...] and [...] [...] is a switch-like statement {{with the added}} capability of evaluating multiple values and conditions. This {{can be used to}} implement decision tables. For example, the following might be used to control a CNC lathe: ...|$|R
5000|$|Jean Sammet, a {{short-range}} committee member, {{noted that}} [...] "little {{attempt was made}} to cater to the professional programmer, in fact people whose main interest is programming tend to be very unhappy with COBOL" [...] which she attributed to <b>COBOL's</b> verbose syntax.|$|R
5000|$|The {{goals for}} PL/I evolved {{during the early}} {{development}} of the language. Competitiveness with <b>COBOL's</b> record handling and report writing capabilities was needed. The [...] "scope of usefulness" [...] of the language grew to include system programming and event-driven programming. The additional goals for PL/I were: ...|$|R
5|$|<b>COBOL</b> {{programs}} were infamous for being monolithic and lacking modularization.|$|E
5|$|<b>COBOL</b> syntax {{has often}} been criticized for its verbosity. Proponents {{say that this was}} {{intended}} to make the code self-documenting, easing program maintenance. <b>COBOL</b> was also intended to be easy for programmers to learn and use, while still being readable to non-technical staff such as managers.|$|E
5|$|Near {{the end of}} the 20th century, {{the year}} 2000 problem (Y2K) was the focus of {{significant}} <b>COBOL</b> programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required to correct <b>COBOL</b> code has been attributed to the large amount of business-oriented <b>COBOL,</b> as business applications use dates heavily, and to fixed-length data fields. After the clean-up effort put into these programs for Y2K, a 2003 survey found that many remained in use.|$|E
5|$|<b>COBOL's</b> data {{structures}} influenced subsequent programming languages. Its {{record and}} file structure influenced PL/I and Pascal, and the REDEFINES clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded {{the development of}} database management systems and aggregated data was a significant advance over Fortran's arrays.|$|R
50|$|SNOBOL4 {{supports}} {{a number of}} built-in data types, such as integers and limited precision real numbers, strings, patterns, arrays, and tables (associative arrays), and also allows the programmer to define additional data types and new functions. SNOBOL4's programmer-defined data type facility was advanced at the time - it {{is similar to the}} earlier <b>COBOL's</b> and the later Pascal's records.|$|R
5000|$|<b>COBOL's</b> data {{structures}} influenced subsequent programming languages. Its {{record and}} file structure influenced PL/I and Pascal, and the [...] clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded {{the development of}} database management systems and aggregated data was a significant advance over Fortran's arrays. data declarations were incorporated into PL/I, with minor changes.|$|R
5|$|The <b>COBOL</b> {{specification}} was revised {{three times}} in the five years after its publication.|$|E
5|$|The Programming Language Committee also liaised with ECMA and the Japanese <b>COBOL</b> Standard committee.|$|E
5|$|Between 2003 and 2009, three {{technical}} reports were produced describing object finalization, XML processing and collection classes for <b>COBOL.</b>|$|E
5|$|<b>COBOL</b> Edition 1965 brought further {{clarifications}} to {{the specifications}} and introduced facilities for handling mass storage files and tables.|$|E
5|$|<b>COBOL</b> {{has been}} criticized {{throughout}} its life, however, for its verbosity, design process and poor support for structured programming, which resulted in monolithic and incomprehensible programs.|$|E
5|$|In 1997, Gartner Group {{estimated}} {{that there were a}} total of 200 billion lines of <b>COBOL</b> in existence, which ran 80% of all business programs.|$|E
5|$|In <b>COBOL</b> 2002, Areas A and B were merged to {{form the}} program-text area, which now ends at an implementor-defined column.|$|E
5|$|In contrast, in 2003, <b>COBOL</b> {{featured}} in 80% {{of information systems}} curricula in the United States, the same proportion as C++ and Java.|$|E
5|$|In late 1962, IBM {{announced}} that <b>COBOL</b> {{would be their}} primary development language and that development of COMTRAN would cease.|$|E
5|$|In {{the early}} 1990s, work began on adding object-orientation {{in the next}} full {{revision}} of <b>COBOL.</b> Object-oriented features were taken from C++ and Smalltalk.|$|E
5|$|On December 6 and 7, {{the same}} <b>COBOL</b> program (albeit with minor changes) ran on an RCA {{computer}} and a Remington-Rand Univac computer, demonstrating that compatibility could be achieved.|$|E
5|$|The CODASYL Executive Committee later {{created the}} <b>COBOL</b> Maintenance Committee to answer {{questions}} from users and vendors and to improve and expand the specifications.|$|E
5|$|The {{associated}} compiler listing generated {{over four}} pages of technical detail and job run information, {{for the single}} line of output from the 14 lines of <b>COBOL.</b>|$|E
5|$|The {{report writer}} was {{slated to be}} removed from <b>COBOL,</b> but was {{reinstated}} before the standard was published. ISO later adopted the updated standard in 1978.|$|E
5|$|This was {{a blow to}} the {{short-range}} committee, who {{had made}} good progress on the specification. Despite being technically superior, FACT had not been created with portability in mind or through manufacturer and user consensus. It also lacked a demonstrable implementation, allowing supporters of a FLOW-MATIC-based <b>COBOL</b> to overturn the resolution. RCA representative Howard Bromberg also blocked FACT, so that RCA's work on a <b>COBOL</b> implementation would not go to waste.|$|E
5|$|<b>COBOL</b> code {{is split}} into four {{divisions}} (identification, environment, data and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large standard library, the standard specifies 43 statements, 87 functions {{and just one}} class.|$|E
5|$|COBOL's syntax {{is usually}} {{described}} {{with a unique}} metalanguage using braces, brackets, bars and underlining. The metalanguage was developed for the original <b>COBOL</b> specifications. Although Backusâ€“Naur form did exist at the time, the committee had not heard of it.|$|E
5|$|FLOW-MATIC's inventor, Grace Hopper, {{also served}} as a {{technical}} adviser to the committee. FLOW-MATIC's major contributions to <b>COBOL</b> were long variable names, English words for commands and the separation of data descriptions and instructions.|$|E
