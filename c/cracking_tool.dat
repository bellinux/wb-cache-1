9|75|Public
50|$|Peslyak is {{the author}} of the widely popular {{password}} <b>cracking</b> <b>tool</b> John the Ripper. His code has also been used in various third-party operating systems, such as OpenBSD and Debian.|$|E
50|$|The conference {{featured}} Bruce Schneier, an American cryptographer, {{the author}} of Applied Cryptography, Datuk Mohd Noor Amin (from IMPACT, UN), and Alexander Peslyak (known as Solar Designer), {{the creator of the}} password <b>cracking</b> <b>tool</b> John the Ripper.|$|E
50|$|The same {{functionality}} {{which makes}} a debugger useful for eliminating bugs allows it {{to be used as}} a software <b>cracking</b> <b>tool</b> to evade copy protection, digital rights management, and other software protection features. It often also makes it useful as a general verification tool, fault coverage, and performance analyzer, especially if instruction path lengths are shown.|$|E
5000|$|Password <b>cracking</b> <b>tools</b> {{for testing}} {{password}} strength and implementation ...|$|R
5000|$|While {{traditional}} password <b>cracking</b> <b>tools</b> simply fed a pre-existing dictionary {{of words}} through the crypt (...) function Crack v4.0a introduced {{the ability to}} apply rules to this word list to generate modified versions of these word lists.|$|R
50|$|FR-2 can be {{machined}} by drilling, sawing, milling and hot punching. Cold punching and shearing are not recommended, as {{they leave}} a ragged edge and tend to cause <b>cracking.</b> <b>Tools</b> made of high-speed steel can be used, although tungsten carbide tooling is preferred for high volume production.|$|R
50|$|SoftICE is a {{kernel mode}} {{debugger}} for Microsoft Windows up to Windows XP. Crucially, {{it is designed}} to run underneath Windows such that the operating system is unaware of its presence. Unlike an application debugger, SoftICE is capable of suspending all operations in Windows when instructed. For driver debugging this is critical due to how hardware is accessed and the kernel of the operating system functions. Because of its low-level capabilities, SoftICE is also popular as a software <b>cracking</b> <b>tool.</b>|$|E
40|$|A {{fractured}} nutcracker {{was examined}} {{for determining the}} root cause/s for premature fracture/failure. This {{is one of the}} common tools usedtypically for cracking hard nuts. In this study, metallurgical failure analysis techniques namely, visual inspection, optical microscopy, SEM, and hardness tests were used in investigating the broken product. From the metallurgical analysis, it was determined that the combined effect of low carbon equivalent and presence of inclusions contributed to the sudden fracture of the nut <b>cracking</b> <b>tool...</b>|$|E
40|$|WLANs are {{become popular}} due to their {{different}} advantages. Beside all these advantages WLANs are also facing the major problem of the security, so that why {{lots of people are}} doing research on WLAN to improve the security because many companies want to transfer their sensible data over WLAN. This report discusses the security issues of WLAN based on IEEE 802. 11 standard, such type of networks are referred to as wifi network. WLAN is deployed as an extension of already existed wired LAN. Therefore it is necessary to provide the security of WLAN equals to Wired LAN. We worked in a lab environment in order to configure the three different security solutions (WEP, WPA & WPA 2 using IEEE 802. 1 X and RADIUS Server) on infrastructure mode for personnel and enterprise architecture of WLAN. For each security solution we used the backtrack as a security <b>cracking</b> <b>tool,</b> in order to break the WEP (64 and 128 bit long) security key of WLAN, make comparison between 64 and 128 bit long WEP key and also analyzed the different kind of attacks  and some drawbacks of using WEP security in WLAN. In the same way configure the WPA and WPA 2 (using IEEE 802. 1 X and RADIUS Server) security solution in infrastructure mode of WLAN and use the same security <b>cracking</b> <b>tool</b> backtrack in order to break the security of the WLAN and analyze the different attacks on the network in these architecture and drawbacks of using WPA and WPA 2 Security solutions. By using IEEE 802. 1 X and RADIUS Server we can improve the security of the enterprise network. In the end we come with many conclusions and suggestions that will help in order to provide better security while deploying Wireless LAN. Opponents: Ali Murtaza & Mansoor Ahme...|$|E
40|$|The main {{consideration}} in recovering the macadamia kernal is {{to crack the}} spherical nutshell without damaging the kernal. Five mechanical <b>cracking</b> <b>tools</b> were tested, and the fracture mechanisms of nutshells, under various cracking loads, were studied. A classical theoretical approach and a numerical method were both used to investigate the influence of crack face closure on the stress intensity factor for a cracked spherical shell subjected to membrane forces and bending moments...|$|R
50|$|In April 2010 a cross-site {{scripting}} vulnerability in Jira led to {{the compromise}} of two Apache Software Foundation servers. The Jira password database was compromised. The database contained unsalted password hashes, which are vulnerable to dictionary lookups and <b>cracking</b> <b>tools.</b> Apache advised users to change their passwords. Atlassian themselves were also targeted {{as part of the}} same attack and admitted that a legacy database with passwords stored in plain text had been compromised.|$|R
5000|$|For {{some kinds}} of {{password}} hash, ordinary desktop computers can test over a hundred million passwords per second using password <b>cracking</b> <b>tools</b> running on a general purpose CPU and billions of passwords per second using GPU-based password <b>cracking</b> <b>tools.</b> See: John the Ripper benchmarks. [...] The rate of password guessing depends heavily on the cryptographic function used by the system to generate password hashes. A suitable password hashing function, such as bcrypt, is many orders of magnitude better than a naive function like simple MD5 or SHA. A user-selected eight-character password with numbers, mixed case, and symbols, with commonly selected passwords and other dictionary matches filtered out, reaches an estimated 30-bit strength, according to NIST. 230 is only one billion permutations [...] and would be cracked in seconds if the hashing function is naive. When ordinary desktop computers are combined in a cracking effort, as {{can be done with}} botnets, the capabilities of password cracking are considerably extended. In 2002, distributed.net successfully found a 64-bit RC5 key in four years, in an effort which included over 300,000 different computers at various times, and which generated an average of over 12 billion keys per second. Graphics processors can speed up password cracking by a factor of 50 to 100 over general purpose computers. As of 2011, available commercial products claim the ability to test up to 2,800,000,000 passwords a second on a standard desktop computer using a high-end graphics processor. [...] Such a device can crack a 10 letter single-case password in one day. Note that the work can be distributed over many computers for an additional speedup proportional to the number of available computers with comparable GPUs.|$|R
40|$|Abstract. We present DNADroid, a {{tool that}} detects Android {{application}} copying, or “cloning”, by robustly computing the similarity between two applications. DNADroid achieves this by comparing program dependency graphs between methods in candidate applications. Using DNADroid, we found at least 141 applications {{that have been the}} victims of cloning, some as many as seven times. DNADroid has a very low false positive rate — we manually confirmed that all the applications detected are indeed clones by either visual or behavioral similarity. We present several case studies that give insight into why applications are cloned, including localization and redirecting ad revenue. We describe a case of malware being added to an application and show how DNADroid was able to detect two variants of the same malware. Lastly, we offer examples of an open source <b>cracking</b> <b>tool</b> being used in the wild. ...|$|E
40|$|John the Ripper (JtR) is an {{open source}} {{software}} package commonly used by system administrators to enforce password policy. JtR is designed to attack (i. e., crack) passwords encrypted {{in a wide variety}} of commonly used formats. While parallel implementations of JtR exist, there are several limitations to them. This research reports on two distinct algorithms that enhance this password <b>cracking</b> <b>tool</b> using the Message Passing Interface. The first algorithm is a novel approach that uses numerous processors to crack one password by using an innovative approach to workload distribution. In this algorithm the candidate password is distributed to all participating processors and the word list is divided based on probability so that each processor has the same likelihood of cracking the password while eliminating overlapping operations. The second algorithm developed in this research involves dividing the passwords within a password file equally amongst available processors while ensuring load-balanced and fault tolerant behavior. This paper describes John the Ripper, the design of these two algorithms and preliminary results. Given the same amount of time, the original JtR can crack 29 passwords, whereas our algorithms 1 and 2 can crack an additional 35 and 45 passwords respectively...|$|E
40|$|Objective: To {{design a}} {{portable}} telemedicine system {{for use in}} emergency and major disaster scenarios. Design: The system has to be cheap, able to interact with existing medical devices, easy to use, capable of secure, wireless transmission of medical data, video and audio, and function independently of other communication networks. Methods: The system consists of a telemedicine station {{that serves as the}} backbone of a feld-deployable flexible communications infrastructure and which can utilise existing medical data collection devices. The architecture consists of a self-configurable communications network based on identical stations, standard IEEE (Institute of Electrical and Electronics Engineers) protocols, Open Source software and wireless operation over the unlicensed 5. 8 GHz frequency spectrum. Data transmission between stations is achieved using WPA (WiFi Protected Access). Results: We demonstrated the feasibility of field-deploying an ad hoc communications infrastructure during emergency situations, where other communications grids e. g. GSM (Global System for Mobile Communications) are absent or damaged. The interface of medical data collection devices, such as biosignal monitors and electronic stethoscopes, with a data network that operates autonomously, was successfully achieved without the need of any user configuration. Data routing for scalability was shown to be supported for several dozen nodes spaced several hundred metres apart from each other. Video and audio data (including sounds from a digital stethoscope) were successfully transmitted by the system with adequate quality. Security of data encryption was demonstrated using a WPA <b>cracking</b> <b>tool.</b> Conclusion: The system offers flexibility for use in disaster scenarios. It utilises inexpensive and widely available commercial subsystems, Open Source software and provides strong communications security. © The Journal on Information Technology in Healthcare...|$|E
50|$|The LM hash {{also does}} not use {{cryptographic}} salt, a standard technique to prevent pre-computed dictionary attacks. A time-memory trade-off cryptanalysis attack, such as a rainbow table, is therefore feasible. In addition, any password that is shorter than 8 characters {{will result in the}} hashing of 7 null bytes, yielding the constant value of , hence making it easy to identify short passwords on sight. In 2003, Ophcrack, an implementation of the rainbow table technique, was published. It specifically targets the weaknesses of LM encryption, and includes pre-computed data sufficient to crack virtually all alphanumeric LM hashes in a few seconds. Many <b>cracking</b> <b>tools,</b> e.g. RainbowCrack, L0phtCrack and Cain, now incorporate similar attacks and make cracking of LM hashes fast and trivial.|$|R
40|$|Text-based {{passwords}} {{are still}} one of the main techniques to authenticate the users. Although a variety of measures (e. g. awareness activities, password-strength checkers, password-composition policies, etc.) are taken to prevent users from selecting weak passwords, the problem remains. A main factor that leads to weak passwords is the lack of awareness on what constitutes a strong password. Organizations should assess the users’ ability to construct a strong password through the assessment of their password’s strength, and taking into consideration the users’ practices that are typically applied when selecting a password. In this way, organizations can be aware of the situation, that is, if their users follow good or bad password construction practices. Depending on the practice utilized, the organization’s security level can be affected. Bad password construction practices can lead to weak passwords which can increase the risk of unauthorized access. Therefore, organizations should target for good practices to be utilized by their users in an effort to decrease the possibility of unauthorized access. A typical way to assess a password’s strength is by trying to crack it using password <b>cracking</b> <b>tools.</b> An assessor, e. g. system administrator, requires a fair amount of knowledge on how password <b>cracking</b> <b>tools</b> operate and need to be configured. Also, it is essential {{to be aware of the}} bad practices that users typically utilize. Such knowledge is not always present. Furthermore, these tools and their respective graphical user interface, have not been designed with the objective of assessing the users’ awareness level against bad password construction practices. This paper proposes a conceptual architecture to assist in designing a situation-aware user interface to assess users’ ability to construct a password that is not easily crackable. An initial mock prototype has been developed to realize the proposed architecture and identify the main features of the user interface...|$|R
5000|$|If a {{cryptographic}} hash function is well designed, it is computationally infeasible {{to reverse the}} function to recover a plaintext password. An attacker can, however, use widely available tools to attempt to guess the passwords. These tools work by hashing possible passwords and comparing the result of each guess to the actual password hashes. If the attacker finds a match, they know that their guess is the actual password for the associated user.Password <b>cracking</b> <b>tools</b> can operate by brute force (i.e. trying every possible combination of characters) or by hashing every word from a list; large lists of possible passwords in many languages are widely available on the Internet. The existence of password <b>cracking</b> <b>tools</b> allows attackers to easily recover poorly chosen passwords. In particular, attackers can quickly recover passwords that are short, dictionary words, simple variations on dictionary words or that use easily guessable patterns.A {{modified version of the}} DES algorithm was used {{as the basis for the}} password hashing algorithm in early Unix systems. The crypt algorithm used a 12-bit salt value so that each user’s hash was unique and iterated the DES algorithm 25 times in order to make the hash function slower, both measures intended to frustrate automated guessing attacks. [...] The user’s password was used as a key to encrypt a fixed value. More recent Unix or Unix like systems (e.g., Linux or the various BSD systems) use more secure password hashing algorithms such as PBKDF2, bcrypt, and scrypt which have large salts and an adjustable cost or number of iterations.A poorly designed hash function can make attacks feasible even if a strong password is chosen. See LM hash for a widely deployed, and insecure, example.|$|R
40|$|Password {{authentication}} is {{very critical}} for secure access to computing systems/servers as it verifies {{the identity of}} users and processes. Most authentication systems use some form Positive Identification (PI) to identify legitimate users. Specifically, these systems use a password profile containing all the user passwords that are authorized to access the system (or the server). The negative counterpart (non-self/anti-password space) represents strings {{that are not in}} the password file (which can possibly be exploited by hackers using password guessing or <b>cracking</b> <b>tools).</b> The paper describes a biologically-inspired authentication technique which is based on the negative (anti-password) concept. The goal is to keep the anti- password checking as the first line of Authentication (invisible to users) and be kept in a separate machine (probably outside the secure perimeter), while the positive authentication system should be inside the highly secure region...|$|R
40|$|The {{increasing}} {{complexity and}} number of digital forensic tasks required in criminal investigations demand {{the development of an}} effective and efficient testing methodology, enabling tools of similar functionalities to be compared based on their performance. Assuming that the tool tester is familiar with the underlying testing platform and has the ability to use the tools correctly, we provide a numerical solution for the lower bound on the number of testing cases needed to determine comparative capabilities of any set of digital forensic tools. We also present a case study on the performance testing of password <b>cracking</b> <b>tools,</b> which allows us to confirm that the lower bound on the number of testing runs needed is closely related to the row size of certain orthogonal arrays. We show how {{to reduce the number of}} test runs by using knowledge of the underlying system <br /...|$|R
5000|$|The DoS {{attack in}} itself {{does little to}} expose {{organizational}} data to a malicious attacker, since the interruption of the network prevents the flow of data and actually indirectly protects data by preventing it from being transmitted. The usual reason for performing a DoS attack is to observe {{the recovery of the}} wireless network, during which all of the initial handshake codes are re-transmitted by all devices, providing an opportunity for the malicious attacker to record these codes and use various <b>cracking</b> <b>tools</b> to analyze security weaknesses and exploit them to gain unauthorized access to the system. This works best on weakly encrypted systems such as WEP, where {{there are a number of}} tools available which can launch a dictionary style attack of [...] "possibly accepted" [...] security keys based on the [...] "model" [...] security key captured during the network recovery.|$|R
50|$|There {{are many}} {{password}} <b>cracking</b> software <b>tools,</b> {{but the most}} popular are Aircrack, Cain and Abel, John the Ripper, Hashcat, Hydra, DaveGrohl and ElcomSoft. Many litigation support software packages also include password cracking functionality. Most of these packages employ a mixture of cracking strategies, algorithm with brute force and dictionary attacks proving {{to be the most}} productive.|$|R
50|$|In {{addition}} to WPAv1, TKIP, WIDS and EAP may be added alongside. Also, VPN-networks (non-continuous secure network connections) may {{be set up}} under the 802.11-standard. VPN implementations include PPTP, L2TP, IPsec and SSH. However, this extra layer of security may also be <b>cracked</b> with <b>tools</b> such as Anger, Deceit and Ettercap for PPTP; and ike-scan, IKEProbe, ipsectrace, and IKEcrack for IPsec-connections.|$|R
40|$|Password {{policies}} alone do {{not stand}} a chance of securing computer systems which rely {{on the use of}} secretbased, password authentication methods. The enforcement of “strong ” passwords via pro-active password strengthening utilities and password <b>cracking</b> <b>tools</b> should be employed by system administrators {{to reduce the number of}} “weak ” passwords in a computer system. With the availability of low-cost computer and networking hardware, clustered solutions for large computational tasks, such as password cracking, are no longer restricted to larger organisations. John the Ripper and Cisilia are two open-source password cracking programs which have the ability to run in a clustered environment. This paper intends to make a comparison of John the Ripper to Cisilia in a clustered environment utilising the OpenMosix and Beowulf styles of parallel computation. Unfortunately, due to problems with Cisilia an in-depth comparative analysis could not be performed, but the analysis of the John the Ripper results does highlight some issues in regards to clustered password cracking...|$|R
40|$|At the Information-technology Promotion Agency (IPA), we {{have been}} {{developing}} a network intrusion detection system we have named IDA (for the Intrusion Detection Agent system). IDA has two distinctive features that most conventional intrusion detection systems lack. The first feature is a mechanism for tracing {{the origin of the}} break-in by means of mobile agents. The second feature {{is the way in which}} IDA detects intrusions: it watches events that may relate to intrusions rather than continuously monitoring the user's activities. If an event is discovered, the mobile agents will gather information related to it. The purpose of this paper is to explain the implementation of IDA. 1 Introduction With the rapid growth of the Internet, the number of security-relevant incidents on the Internet has increased[1]. Moreover, the Internet has experienced other remarkable changes during the past few years. For example, ffl It is possible to get <b>cracking</b> <b>tools</b> and information about c [...] ...|$|R
40|$|Fatigue of a {{circular}} saw made {{of tool steel}} and used in metal industry to cut, in particular, metal bars and pipes is investigated in this study. Due to having a small tooth root radius, the circular saw {{is much more likely}} to get crack damage at the tooth root region. Radial and tangen-tial forces are also effective at this region for fatigue crack initiation. In high cutting speeds and feed rates of the circular saw, higher stress concentration occurs particularly at that region. To examine the fatigue and failure in the circular saw, specimens used in an experiment are pre-pared from a damaged circular saw are subjected to different mechanical tests. In the theoretical study, stress and fracture behaviour of the saw is determined by the finite element method. Results and causes of the failure are assessed and compared. Key words: circular saw, failure analysis, <b>crack,</b> <b>tool</b> steel, finite element analysi...|$|R
40|$|This work explores a {{new concept}} in user {{authentication}} to improve security on login process. Most authentication systems use some form Positive Identification (PI) to identify legitimate users. Specifically, these systems use a password profile containing all the user passwords that are authorized to access the system (or the server). The negative counterpart (non-self/anti-password space) represents all strings {{that are not in}} the password file, which can possibly be exploited by hackers (using password guessing or <b>cracking</b> <b>tools).</b> While this Anti-Password (Anti-P) space appears to be very large, our technique utilizes a form of implicit clustering to generate a small set of Anti-P detectors to cover this password guessing space. The developed system demonstrated it is hard (if not impossible) to discover any individual password even though Anti-P detectors are being compromised. Moreover, experiments show that these detectors work as a password immunizer, filtering out all illegitimate users (hackers, crackers, etc.) before allowing the legal users to access the positive identification system...|$|R
40|$|Optimisation of John the Ripper in a {{clustered}} Linux environment To {{aid system}} administrators in enforcing strict-password policies, {{the use of}} password <b>cracking</b> <b>tools</b> (such as Cisilia or John the Ripper) have been employed {{as a tool to}} look for “weak ” passwords. John the Ripper (JtR) attempts to crack the passwords by using a dictionary, brute-force or “other ” mode of attack. Because of the computational intensity of cracking passwords, parallel-processing environments have been utilised to increase the speed of password cracking. Parallel-processing environments can either consist of single systems with multiple processors, or a collection of separate computers working together as a single, logical computer system; both of these configurations allow operations to run concurrently. This study aims to optimise JtR on a Beowulf cluster, which is a collection of computers configured to run in a parallel manner. This cluster will be a collection of AMD 64 Opteron systems, running the Linux operating system. An implementation of the Message Passing Interface (MPI), MPICH, will be used for inter-nod...|$|R
40|$|Wireless {{networks}} {{are continuing to}} grow around the world due to the advantages it offers and all the different services that it provides. In networking environments where the communication goes through a wireless connection, the importance of protecting the private information is a very significant task for network administrators. Beside the great benefits from having this type of network, the major issue of wireless communications is the weak security it provides. Companies and business organizations {{are more and more}} involved with the use of wireless networks because of the flexibility, mobility and the scalability it offers, but they are also concerned about the consequences of having a weaker security to protect their expensive investments and information. This thesis discusses the issues behind the security of wireless networks. It explains the background of the wireless networks and describes how the different security algorithms and encryptions work. The authors of this thesis decided to present some of the possible attacks that could occur in wireless networks and also give some security solutions to help others protect their network. The group that worked together on this project had the idea of investigating how secure the actual wireless algorithms and encryptions are. The approach of finding the necessary information for presenting the results and conclusions was to perform penetration tests on wireless networks that were implemented with the three famous security algorithms of WEP, WPA and WPA 2. The penetrations tests were performed in lab environments and in home networks with the use of <b>cracking</b> <b>tools.</b> The group used the open source Linux based distribution called BackTrack 5. This operating system provided the group the different <b>cracking</b> <b>tools</b> that would help them perform their investigation. The purpose of performing the penetration tests was to find out the vulnerabilities that each of the security algorithms poses and therefore be able to determine which of them offers the best protection to a wireless network. After the penetration tests were done, the group came up with some solutions by configuring a wireless network with the strongest security options. The solutions were aimed to help others how to configure a specific wireless network in a simple but effective way. The results indicated that the weakest security algorithm would present some major issues for a wireless network. It included a greater possibility of experiencing different network attacks by configuring a wireless network with a weak security algorithm. Overall, this thesis provided the group the necessary information that was beneficial for them to understand how strong a wireless network actually is, and how a penetration test was performed...|$|R
40|$|Many Internet applications, {{for example}} {{e-commerce}} or email services require that users create a username and password {{which serves as}} an authentication mechanism. Though text passwords {{have been around for}} a while, not much has been done in helping naive Internet users in creating strong passwords. Generally users prefer easy-to-remember passwords, but service provides prefer that users use a strong, difficult-to-guess password policy to protect their own resources. In this work we have explored how appropriate feedback on password strength can be useful in choosing a strong password. We first discuss the results of a security vs. usability study that we did, which shows the current trends in choosing passwords, and how a password <b>cracking</b> <b>tools</b> can easily guess a majority of weak passwords. Next, we propose a novel framework, which addresses our problem of enforcing password policies. Given a password policy, our framework is able to monitor password strength, and suggest passwords that are stronger. Moreover, since our passwords are pareto-efficient, and involve user participation in making a selection, we believe that our framework makes appropriate tradeoffs between password strength and difficulty in remembering. We also propose novel ways to compute the password reminder interval so that user-satisfaction remains within bounds. Experimental study shows that our approach is much better that current password creation models, and serves as a practical tool that can be integrated with Internet applications...|$|R
40|$|The work explores a new {{paradigm}} in user authentication in accessing {{in order to improve}} the security of computer systems. Most authentication systems use password data (self-id) to identify legitimate users, which is referred to as Positive Identification (PI). Specifically, these systems use a password profile containing all the user passwords that are authorized to access the system (or the server). The negative counterpart (non-self/anti-password space) represents all strings that are not in the password database, which can possibly be explored by hackers (using password guessing or <b>cracking</b> <b>tools).</b> While this Anti-Password (Anti-P) space appears to be very large, our technique uses a form of implicit clustering to generate a small set of Anti-P detectors to cover this password guessing space. The developed system demonstrated that by examining Anti-Password Clusters, it is possible to deduce what is in the password database it complemented. The novelty of this approach is that it is hard (if not impossible) to discover any individual password even though Anti-P detectors are being compromised. As a result this technique can filter out all illegitimate users (hackers, crackers, etc.) before allowing the legal users to access the positive password verification system. Thus, it can provide a robust solution in immunizing authentication systems (local, remote or online) by putting an additional layer of protection (invisible) to the user...|$|R
40|$|Lasers {{provide a}} {{non-contact}} and remote inspection method with high resolution and sensitivity. As a <b>crack</b> detection <b>tool,</b> laser ultrasonics {{can be used}} to image surface-breaking cracks with microscopic precision. By monitoring the local elastic scattering conditions and dynamic motion fields present in the immediate vicinity of a surface-breaking crack site, the local crack morphology can be mapped out in significant detail. Several crack imaging examples are provided for imaging and characterizing microscopic, surface-breaking cracks in aerospace superalloys. Brief overviews of laser probe methods, displacement-field imaging, and crack imaging are discussed. Keywords: Nondestructive Evaluation, Laser Ultrasound, Surface-Breaking Cracks 1...|$|R
50|$|After {{graduation}} he commenced {{work as a}} lab {{assistant and}} Unix administrator at the university. In 1988 he took a position as Systems Programmer at the University of Wales in Aberystwyth, {{and it was there}} that he wrote the first version of the dictionary attack <b>tool</b> <b>Crack.</b> He was active on the Zardoz list during this period.|$|R
40|$|Relatively {{few studies}} have {{explored}} sex differences {{in the use of}} foraging tools among primates other than apes. Although male primates are thought to be more innovative, researchers have reported a female sex bias in the use of feeding tools in wild chimpanzees. We investigate here {{the nature and extent of}} sex differences in foraging tool use over 12 mo in a free-ranging group of bearded capuchins (2 males, 5 females, and 3 juveniles) living in the dry Caatinga forests of the Serra da Capivara National Park, Piaui, Brazil. These capuchins used 3 major types of feeding tools: 1) tools for probing; 2) tools for pounding/cracking; and 3) digging stones to extract tubers or roots. Adult males performed 63 % (n= 134) of all events of tool use and used tools significantly more frequently than did females, although male bout lengths across all tools (57 s± 7. 9 SE) were equivalent to those of adult females (47. 3 s± 12. 6 SE). Both sexes used digging and <b>cracking</b> <b>tools,</b> although at different rates, whereas adult males used sticks to probe for prey and other rewards far more than females. Differential opportunities to use tools were not apparent: > 71 % of tool-use events occurred on the ground, and males and females spent equal time on the ground. We suggest that sex differences in tool use may function as opportunities for male signaling of investment quality...|$|R
40|$|The {{objective}} of the Clean Cast Steel Technology Program was to improve casting product quality by removing or minimizing oxide defects and to allow the production of higher integrity castings for high speed machining lines. Previous research has concentrated on macro-inclusions that break, chip, or <b>crack</b> machine <b>tool</b> cutters and drills and cause immediate shutdown of the machining lines. The overall goal of the project {{is to reduce the}} amount of surface macro-inclusions and improve the machinability of steel castings. Macro-inclusions and improve the machinability of steel castings. Macro-inclusions have been identified by industrial sponsors as a major barrier to improving the quality and marketability of steel castings...|$|R
40|$|Onboard any space-launch vehicle, {{composite}} over-wrapped {{pressure vessels}} (COPVs) may be utilized by propulsion or environmental control systems. The {{failure of a}} COPV {{has the potential to}} be catastrophic, resulting in the loss of vehicle, crew or mission. The latest COPV designs have reduced the wall-thickness of the metallic liner to the point where the material strains plastically during operation. At this time, the only method to determine the damage tolerance lifetime (safe-life) of a plastically responding metallic liner is through full-scale COPV testing. Conducting tests costs substantially more and can be far more time consuming than performing an analysis. As a result of this cost, there is a need to establish a qualifying process through the use of a <b>crack</b> growth analysis <b>tool.</b> This paper will discuss fracture analyses of plastically responding metallic liners in COPVs. Uni-axial strain tests have been completed on laboratory specimens to collect elastic-plastic crack growth data. This data has been modeled with the <b>crack</b> growth analysis <b>tool,</b> NASGRO 6. 20 to predict the response of laboratory specimens and subsequently the complexity of a COPV...|$|R
