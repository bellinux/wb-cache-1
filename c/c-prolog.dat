15|0|Public
50|$|Compatibility {{libraries}} for ISO Prolog {{and other}} Prolog dialects (<b>C-Prolog,</b> Quintus, SICStus, SWI-Prolog)enable the reuse of libraries written in those dialects.|$|E
5000|$|The first [...] "live" [...] {{translation}} {{occupied a}} 4Mb Microvax running Ultrix and <b>C-Prolog</b> {{for a complete}} weekend some time in early 1987. The sentence, translated from English into Danish, was [...] "Japan makes computers". The main problem faced by the system was the generation of so-called [...] "Parse Forests" [...] - often {{a large number of}} different grammar rules could be applied to any particular phrase, producing hundreds, even thousands of (often identical) parse trees. This used up huge quantities of computer store, slowing the whole process down unnecessarily.|$|E
40|$|<b>C-Prolog</b> can {{conveniently}} be {{used for}} logical inferences on knowledge bases. However, as similar to many search methods using backward chaining, {{a large number of}} redundant computation may be produced in recursive calls. To overcome this problem, the 'rid-redundant' procedure was designed to rid all redundant computations in running multi-recursive procedures. Experimental results obtained for <b>C-Prolog</b> on the Vax 11 / 780 computer show that there is an order of magnitude improvement in the running time and solvable problem size...|$|E
40|$|Approved {{for public}} release; {{distribution}} unlimited. This research examined {{the effectiveness of}} using computers in making personnel changes to an existing training flight schedule. The program uses heuristics based on the flight regulations provided by Chief, Naval Air Training Command for Advanced Strike Flight Training. The program was developed in <b>C-Prolog</b> on an Integrated Solutions, Incorporated (ISI) Optimum V Workstation. Lieutenant, United States Navy Reserv...|$|E
40|$|Approved {{for public}} release, {{distribution}} is unlimitedThis research examined the grammar structure of descriptive English captions on multimedia data. The research {{was composed of}} three phases. The first phase {{was to investigate the}} grammar structure of example descriptive captions from a variety of subject domains. The second phase was to develop a set of domain independent binary grammar rules {{to be used in the}} Caption-Based Interface (CBI) which is a natural language interface for the Multimedia Database System. The third phase of the research was to implement and test the grammar rules in the CBI. The program was implemented in <b>C-prolog</b> on a Sun SPARC workstation. The testing phase also includes timing and memory comparisons between <b>C-Prolog</b> an interpretive programming language and a compiled version of the code using Quintus Prolog. This thesis was able to show that the grammar rules that were developed could correctly identify their intended structures. Another accomplishment of this thesis was to demonstrate that the CBI could parse 25 out of 30 example captions and that it could correctly handle some semantic interpretations of the parsed captions. Captain, United States Marine Corp...|$|E
40|$|This thesis report {{describes}} {{the design and}} implementation of an interface between the two most common artificial intelligence languages, Lisp and Prolog. The interface is accomplished by small extensions to each language, and provides Prolog programs with the capability of invoking Lisp functions. The interface is simple yet powerful; it the supports passing of arbitrarily complex data objects, regardless of data type. The particular language implementations extended were <b>C-Prolog</b> [Pereira, 85] and XLISP [Betz, 86], both interpreters running under the Unix operating system...|$|E
40|$|We {{describe}} and exemplify the logic programming language Delta Prolog, an extension to Prolog to include AND-concurrency and interprocess communication. Besides its declarative semantics, its operational semantics, comprising distributed backtracking, is especially emphasized. The extension is obtained, at the language level, by introducing three additional goal types: splits, events, and choices. At the implementation level, the extension {{is provided by}} code in Prolog and C. A small number of core primitives facilitates portability. Currently Delta-Prolog supports distributed programs through the asynchronous execution of multiple instances of an extended <b>C-Prolog...</b>|$|E
40|$|ETRANS is an {{experimental}} English-Thai machine translation (MT) system that translates a simple English sentence into a grammatically correct Thai sentence. The entire system {{is written in}} <b>C-Prolog,</b> and runs on UNIX systems. The MT strategy taken by ETRANS is an interlingual strategy with a parser for English and a generator for Thai. The parser creates a semantic representation equivalent {{to the meaning of}} the English sentence. A generator then interprets the semantic representation into Thai. ETRANS employs frames as a means for representing knowledge, and an augmented transition network (ATN) as the linguistic framework for analyzing and generating sentences...|$|E
40|$|An {{analysis}} {{of the evolution of}} Natural Language front ends in the last three decades shows that the growth in portability brought, as a side effect, the narrowing of the provided coverage of contextually based linguistic phenomena, such as anaphora and ellipsis. This paper presents the design and state of development of a computational mechanism which provides pronominal Anaphora Resolution within the environment of a highly portable Natural Language front end to databases, SQUIRREL. Simple cases of Ellipsis are also treated by the proposed model. An Overview of SQUIRREL is presented, followed by a description of the Discourse Module and the results achieved so far. The prototype is implemented in <b>C-Prolog...</b>|$|E
40|$|This thesis {{examines}} {{the issue of}} uncertainty reasoning and representation in expert systems. Uncertainty and expert systems are defined. The value of uncertainty in expert systems as an approximation of human reasoning is stressed. Five alternative methods of dealing with uncertainty are explored. These include Bayesian probabilities, Mycin confirmation theory, fuzzy set theory, Dempster-Shafer 2 ̆ 7 s theory of evidence and a theory of endorsements. A toolkit to apply uncertainty processing in PROLOG expert systems is developed using fuzzy set theory {{as the basis for}} uncertainty reasoning and representation. The concepts of fuzzy logic and approximate reasoning are utilized in the implementation. The toolkit is written in <b>C-PROLOG</b> for the PYRAMID UNIX system at the Rochester Institute of Technology...|$|E
40|$|This paper {{reports on}} the {{practical}} experiences collected during the implementation of constraint logic programming techniques via metaterms and extended unification. During the actual implementation of extended unification in a concrete PROLOG implementation some minor refinements to a specification proposed earlier [3] {{had to be taken}} care of. Further, a convention related to the interpretation of the meaning of metaterms has been moved into the specification. This paper is also thought as a supplement to the <b>C-Prolog</b> manual [7], describing the additional predicates and conventions for the implementation of extended unification. 1 Introduction The incorporation of semantic unification into PROLOG was inspired by the work of Kornfeld [5]. His early paper provoked some clarifications in [2]. In Kornfeld's outline a failed syntactic unification was patched by trying to prove the equality of the two terms in the extended theory. This gave rise to some problems which can be avoided altog [...] ...|$|E
40|$|This paper {{presents}} a rigorous framework {{for studying the}} influence of side effects in Logic Programming. We exemplify this framework by analyzing the power of assert and retract restricted to ground clauses. The same model {{can be used to}} analyze the exact behavior of reconsult and other constructs which modify the underlying data base. 1 Introduction Given a logic program Σ and a query q we look at the yes=no-sequences which we obtain by repeatedly asking the query q. For pure logic programs Σ, this sequence is constant (or undefined, if the program loops). It is easy to produce logic programs containing assert and retract which give non-constant repetition sequences. The following two examples were written in <b>C-Prolog</b> and tested in UNIX-environments. Example 1. 1 A program which gives alternatively yes=no when asked p(a). p(a) :- asserta(p(b)), f. p(a) :- p(c), retract(p(b)), f. p(a) :- p(c), retract(p(c)), f. p(a) :- p(b), asserta(p(c)), f. p(a) :- p(b). Visiting Fall-Wint [...] ...|$|E
40|$|The Enhanced Frame Package {{is a tool}} {{to build}} Expert Systems. It is a frame based system, that {{initially}} was developed in <b>C-Prolog</b> by LaMora S. Hiss at Rochester Institute of Technology in 1987 for her master 2 ̆ 7 s thesis. It was enhanced in the current thsis to provide much larger expressive power andgreater ease of use. Several operators were modified/enhanced, and several new operators were added, while providing the user a balance of computational tractability, expressive power and consistency. Major concepts provided in the Enhanced Frame Package include - local consistency checking as opposed to global consistency checking and how the user can {{have the best of}} both options; the flexibility of loading a knowledge base file as a consistent system or as an inconsistent system; operations that work on working memory and operations that work on the original file in the working directory; the concept of a knowledge analyzer; the way one sees the human mind, knowledge and learning and its parallel in knowledge representation and the surrounding issues of consistency, expressive power and computational tractability...|$|E
40|$|Understanding {{a natural}} {{language}} requires knowledge about that {{language as a}} system of representation. Further, when the task is one of understanding an extended discourse, world knowledge is also required. This thesis explores {{some of the issues}} involved in representing both kinds of knowledge, and also makes an effort to arrive at some under standing {{of the relationship between the}} two. A part of this exploration involves an examination of some natural language understanding systems which have attempted to deal with extended discourse both in the form of stories and in the form of dialogues. The systems exam ined are heavily dependent on world knowledge. Another part of this exploration is an effort to build a dialogue system based on speech acts and practical argu ments, as they are described in 2 ̆ 2 Recognizing Promises, Advice, Threats, and Warnings 2 ̆ 2, a Masters Thesis presented to Rochester Institute of Technology, School of Computer Science and Technology, in 1986 by Kevin Donaghy. This dialogue system includes a deterministic syntactic parser, a semantic representation based on the idea of case frames, and a context interpreter that recognizes and represents groups of sentences as practical arguments. This Prolog implementation employs a frame package developed and described in 2 ̆ 2 A Frame Virtual Machine in <b>C-Prolog</b> 2 ̆ 2, a Masters Thesis presented to Rochester Institute of Technology, School of Computer Science and Technology, in 1987 by LeMora Hiss. While this automated dialogue system is necessarily limited in the domain that it recognizes, the opportunity it allows to build a mechanism and a system of representation brings with it a range of issues from the syntactic, through the semantic, to the contextual and the pragmatic. Here, the focus of inquiry came to settle in the semantic representa tion, where the relationship between knowledge about language and knowledge about the world seems to be naturally resident...|$|E
40|$|This Major Field Project Report {{describes}} {{the design and}} development of a computer-based tutorial program coded in Prolog. The purpose of this application was {{to solve a problem}} related to unanticipated blocks to effective learning experienced by students in the Doctor of Arts in Learning and Technology at Nova University. These blocks were associated with assignments involving the Prolog computer language. Students encountered tasks that required knowledge of the Prolog language to complete assignments but they had no previous experience with programming in logic. A tutorial program was conceived as an instructional intervention to remediate this deficiency. Design criteria and performance criteria were developed. Use of off-the-shelf programs as prototypes reduced the coding task after the internal logic had been ver 1 fied by testing a model of the software coded in Prolog. The software was written in Prolog and was accessible online for students to use and examine. This software uses the Prolog language to teach itself. The final tutorial application design parameters reflect both the intended operational environment, the Nova University Unix (tm) system and resident <b>C-Prolog</b> Interpreter. This tutorial program model serves as an example of an operational deli very system for a tutorial instructional system. Specific problems are addressed in the code for the program, screen clearing, interactive components of the language and design of expert systems. Because the Prolog language does not provide system dependent capability such as clearing the screen the UNIX system was accessed to provide this function. Prolog is a database language that {{describes the}} problem being addressed {{and is a member of}} the family of declarative computer languages. The Prolog database contains facts and rules that evaluate the information in the database. A Prolog database is both information and source code containing instructions to be executed at run-time. Fortunately, Prolog contains a built-in predicate that reads the Keyboard and makes possible real-time interaction with students. Although Prolog is a declarative language, it is also procedural and this capability provided for development of expert systems that controlled and evaluated the input of students. The tutorial content and conceptual design represent a functional prototype and is not intended to stand as a paradigm of Prolog coding or program design. Source code for this software was divided into frames. Each frame was supported by an expert system that processed student input or used a set of rules to direct branching decisions. Documentation for the program, both internal (source code) and external (on-line), should enable student comprehension of the driving source code. Students were able to access the source code by selecting menu options that printed the rules and database facts to the screen for each tutorial frame and also the entire program. Remark statements embedded in the source code. These were statements explained what each expert system controlled and identified branching destinations. Source code for this software served two purposes. F 1 rst it operated as the database of facts and rule and provided input facilities for the program at run-time. Second the code presented on request a functional example of Prolog code. The program menu provided options for downloading of the source code or portions of it. Design criteria for the program was stated in terms of performance expectations. These statements were used to evaluate the attainment of performance goals. The performance of the tutorial program was evaluated and the results are presented. This report also contains a UNIX 2 ̆ 2 man 2 ̆ 2 system entry file prepared for the program and also a user’s manual. A structured walk through explains the purpose and function of each Prolog coded frame. Syntax and branching is described where appropriate in the walk through...|$|E

