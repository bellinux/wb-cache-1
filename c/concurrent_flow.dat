152|261|Public
5000|$|... #Caption: Picture depicts {{reversal}} of counter-current flow to <b>concurrent</b> <b>flow,</b> {{which may be}} seen during flooding of a nuclear reactor core.(A) Counter-current annular flow(B) Point of flow reversal(C) Concurrent slug flow (or other flow) ...|$|E
50|$|In {{the counter}} flow dryer, the grain {{and the air}} are moving in {{opposite}} directions, which mean the driest grain is subjected to the hottest drying air. The kernels leave the drying region at the same temperature and the same moisture as in <b>concurrent</b> <b>flow</b> dryers. The suggesting air temperatures are less than 180 °F because the driest kernels {{are more likely to}} be damaged by hot air.|$|E
50|$|In the <b>concurrent</b> <b>flow</b> dryer, {{both the}} grain and air {{are moving in}} the same direction, which means the wettest grain is {{subjected}} to the hottest drying air. The kernels leave the drying region at the same temperature and the same moisture content. Energy efficiency is 40% better compared to cross flow dryer. However, the bed depth must be deeper than 12 inches depth than cross flow type. Thus, fan power requirements are high {{in this type of}} dryer.|$|E
30|$|Figure 8 {{shows the}} mean packet delay and TXOP loss factor. However, the mean packet delay of all videos for basic {{mechanism}} is not {{displayed in the}} graph due to their high delays (> 200 ms). If all <b>concurrent</b> <b>flows</b> are fully served (enough resource), e.g., 7 <b>concurrent</b> <b>flows</b> for Akiyo, the mean packet delay is quite constant. Once the demand is over the available resource, the mean packet delay starts to increase.|$|R
3000|$|For Coastguard (Figure 11 d), ATMV 2 and ARROW {{mechanisms}} {{show the}} same values as references for up to 5 <b>concurrent</b> <b>flows.</b> The 4 dB in PSNR [...]...|$|R
30|$|ATMV 1 is {{suitable}} for the slight movement video and can support up to 8 <b>concurrent</b> <b>flows.</b> However, the video quality has been degraded with other video categories.|$|R
5000|$|Under {{leadership}} of Normandeau Associates Inc., Rushing Rivers is mapping the Lamprey River for specific fish habitats {{to develop a}} water management plan. Besides habitat mapping, the study includes scuba diving in impoundments, monitoring for mussels, dragonfly nymphs and fish and the computation of physical habitat model. The influence of water levels in riparian and emergent wetlands on aquatic habitat and endangered species are modeled by scientists from Normandeau Associates. The hydrological analysis, including <b>concurrent</b> <b>flow</b> measurements, simulation of pre-colonial time series and ground water monitoring are conducted by UNH hydrologists. The collected data and models will support multi-criteria decision analysis, which is a foundation for a water management plan for the Lamprey River. There are many groups of stakeholders involved {{in the development of}} the plan, and the study team coordinates with involved parties and the state of New Hampshire.|$|E
50|$|The {{rationale}} for application {{is predicated on}} {{an understanding of the}} specific operational problem evidenced and forecasted to exist. The design should not define the operational need, but rather respond to the intended operation and attempt to fit within the specific corridor constraints that are often present. For example, highly directional congestion (i.e., inbound in the morning and outbound in the evening) may be addressed by a variety of different treatments such as concurrent, reversible or contraflow operations, and each will require a different design {{that may or may not}} fit within the corridor. The presence of congestion in both directions during the same daily commute may suggest only a bi-directional, <b>concurrent</b> <b>flow</b> operation (e.g., one dedicated lane operating in each direction) is appropriate. Similarly, the specific operational attributes of how many hours the managed lane is active, where access is applied and who can use it are determined in successive levels of evaluating the observed and forecast operational problems.|$|E
50|$|HOV lanes {{are present}} {{on more than}} 1200 North American freeway route-miles (1900 route-kilometers), and {{are by far the}} most common form of managed lane. All HOV lanes {{accommodate}} buses, and sometimes other vehicles such as motorcycles and hybrids since the combined demand of each of these modes can usually be accommodated by a single lane. The majority of HOV facilities exist as single lanes that are concurrent with adjacent general purpose freeway lanes. Most commonly, HOV lanes are separated from mixed use lanes by a painted stripe or buffer, although some are separated by a physical barrier, either fixed or moveable. Depending on the design, HOV lanes may have continuous access to <b>concurrent</b> <b>flow</b> lanes or traffic may only be able to enter and exit at designated access locations. Some HOV lanes are reversible to serve directional demands at different times of the day; these facilities are separated by a permanent barrier and are accessed via exclusive ramps. Contraflow HOV lanes borrow an off-peak direction lane for peak commute purposes, and they use placement of pylons or moveable barriers to safely segregate oncoming traffic flow.|$|E
30|$|DFM {{no longer}} needs keeping {{a record of}} a flow when the flow is over. End of a flow is {{detected}} by an interpacket delay {{that is more than}} 600 ms. Therefore, the space required for flow table varies and is {{based on the number of}} <b>concurrent</b> <b>flows.</b> Table  8 shows the size of the flow table in the DFM approach for each of the five evaluation data sets. Since the maximum number of <b>concurrent</b> <b>flows</b> was 1131, the maximum required space to store the flow table was about 25 KB on our testbed.|$|R
3000|$|... [...]) {{values for}} the case of {{less than or equal}} to 7 <b>concurrent</b> <b>flows.</b> For 8 flows, ATMV 1 is the only {{mechanism}} that can maintain the same quality. Normally, for more than 7 flows, the PSNR [...]...|$|R
3000|$|... {{are shown}} {{for the case}} of ATMV 1. For Highway (Figure 11 e), both values are as same as {{references}} for up to 7 <b>concurrent</b> <b>flows.</b> ATMV 1 has been degraded with the values closed to the basic mechanism.|$|R
40|$|The present work studies {{a kind of}} Maximum <b>Concurrent</b> <b>Flow</b> Problem, {{called as}} Extended Maximum <b>Concurrent</b> <b>Flow</b> Problem with Saturated Capacity. Our major {{contributions}} are as follows: (A) Propose the definition of Extensive Maximum <b>Concurrent</b> <b>Flow</b> Problem with Saturated Capacity and prove its solutions exist. (B) Design a approximation algorithm to solve the problem. (C) Propose and prove the complexity and the approximation measures of the algorithm we design. Comment: 11 page...|$|E
40|$|In this study, the {{existing}} seasonal snow cover area runoff forecasting {{models of the}} Indus, Kabul, Sutlej and Chenab basins were evaluated with the <b>concurrent</b> <b>flow</b> correlation model for the period 1975 - 79. In all the basins under study, correlation of <b>concurrent</b> <b>flow</b> model explained the variability in flow better than by the snow cover area runoff models. Actually, the <b>concurrent</b> <b>flow</b> correlation model explained more than 90 percent of the variability {{in the flow of}} these rivers. Compared to this model, the snow cover area runoff models explained less of the variability in flow. In the Himalayan river basins under study and at least for the period under observation, the <b>concurrent</b> <b>flow</b> correlation model provided a set of results with which to compare the estimates from the snow cover area runoff models...|$|E
40|$|In this paper, we {{describe}} new algorithms for approximately solving the concurrent multicommodity flow problem with uniform capacities. Our algorithms are {{much faster than}} previously known algorithms. Besides being an important problem in its own right, the uniform-capacity <b>concurrent</b> <b>flow</b> problem has many interesting applications. Leighton and Rao used uniform-capacity <b>concurrent</b> <b>flow</b> to find an approximately "sparsest cut" in a graph, and thereby approximately solve {{a wide variety of}} graph problems, including minimum feedback arc set, minimum cut linear arrangement, and minimum area layout. However, their method appeared to be impractical, as it required solving a large linear program. We show that their method might be practical by giving an O(m 2 log m) expected-time randomized algorithm for their <b>concurrent</b> <b>flow</b> problem on an m- edge graph. Raghavan and Thompson used uniform-capacity <b>concurrent</b> <b>flow</b> to approximately solve a channel width minimization problem in VLSI. We give an [...] ...|$|E
3000|$|... {{flows in}} a time slot. By definition, all flows with traffic streams in a {{transmission}} mode can be activated simultaneously. However, the <b>concurrent</b> <b>flows</b> may interfere {{with each other in}} the MIMO network. Thus, the scheduling algorithms should firstly generate interference-free [...]...|$|R
3000|$|For Container (Figure 11 b), ATMV 2 and ARROW {{mechanisms}} {{show the}} same values as references for up to 7 <b>concurrent</b> <b>flows.</b> In case of ATMV 1, the video quality is quite the same with small degradation of 1 dB for PSNR [...]...|$|R
3000|$|The {{performance}} of the routing protocols was evaluated by varying numbers of <b>concurrent</b> <b>flows,</b> node densities and CBR data rates. PDR, average delay and average path length are the most straightforward methods of evaluating the application's performance. The metrics {{used to assess the}} performance are as follows: [...]...|$|R
40|$|Abstract. This paper {{describes}} new algorithms {{for approximately}} solving the concurrent multicommodity flow problem with uniform capacities. These algorithms are {{much faster than}} algorithms discovered previously. Besides being an important problem in its own right, the uniform-capacity <b>concurrent</b> <b>flow</b> problem has many interesting applications. Leighton and Rao used uniform-capacity <b>concurrent</b> <b>flow</b> to find an approximately "sparsest cut " in a graph and thereby approximately solve {{a wide variety of}} graph problems, including minimum feedback arc set, minimum cut linear arrangement, and minimum area layout. However, their method appeared to be impractical as it required solving a large linear program. This paper shows that their method might be practical by giving an O(m log m) expectedtime randomized algorithm for their <b>concurrent</b> <b>flow</b> problem on an m-edge graph. Raghavan and Thompson used uniform-capacity <b>concurrent</b> <b>flow</b> to solve approximately a channel width minimization problem in very large scale integration. An O (k 3 / 2 (m + n log n)) expected-time randomized algorithm and an O (k min {n, k} (m + n log n) log k) deterministic algorithm is given for this problem when the channel width is f 2 (log n), where k denotes the number of wires to be routed in an n-node, m-edge network. Key words, multicommodity flow, approximation, <b>concurrent</b> <b>flow,</b> graph separators, VLSI routing AMS subject classification. 68 Q 25, 90 C 08, 90 C 27 1. Introduction. Th...|$|E
40|$|Abstract. It {{is shown}} that the minimum cut ratio is within a factor of O(log k) of the maximum <b>concurrent</b> <b>flow</b> for k-commodity flow {{instances}} with arbitrary capacities and demands. This improves upon the previously best-known bound of O(log 2 k) and is existentially tight, up to a constant factor. An algorithm for finding a cut with ratio within a factor of O(log k) of the maximum <b>concurrent</b> <b>flow,</b> and thus of the optimal min-cut ratio, is presented...|$|E
40|$|We compare two multicommodity flow problems, {{the maximum}} sum of flow, and the maximum <b>concurrent</b> <b>flow.</b> We show that, {{for a given}} graph and a given set of k {{commodities}} with specified demands, if the minimum capacity of a multicut is approximated by the maximum sum of flow within a factor of alpha, for any subset of commodities, then the minimum cut ratio is approximated by the maximum <b>concurrent</b> <b>flow</b> within a factor of O(alpha ln k) ...|$|E
40|$|The {{cocktail}} party effect refers to {{situations in which}} people must segregate auditory sources. One situation of interest is speech-in-speech comprehension, in which two types of masking are described: energetic masking produced when target and noise partially overlap in time and frequency; informational masking occurs when information from <b>concurrent</b> <b>flows</b> is o...|$|R
40|$|Abstract—Detecting heavy hitters is {{essential}} for many net-work management and security applications in the Internet and in data centers. Heavy hitter is the entity in a data stream whose amount of activity, such as bandwidth consumption or number of connections is higher than a given threshold. In this work, we propose a pipelined architecture for an online heavy hitter detector on FPGA. It also reports the top K heavy hitters. We design an application specific data forwarding mechanism to handle data hazards without stalling the pipeline. The stream size and the threshold for heavy hitter detection can be configured through run-time parameters. The post place-and-route results on a state-of-the-art FPGA shows that the architecture can achieve a throughput of 84 Gbps supporting 128 K <b>concurrent</b> <b>flows.</b> The proposed architecture can support large number of <b>concurrent</b> <b>flows</b> using external memory while sustaining the same throughput as the on-chip BRAM based implementation. I...|$|R
40|$|Abstract. We {{examine the}} problem of {{scheduling}} <b>concurrent</b> independent <b>flows</b> on multiple-disk I/O storage systems. Two models are considered: in the shared buffer model the memory buffer is shared among all the disks, while in the partitioned buffer model each flow has a private buffer. For the parallel disk model with d> 1 disks it is shown that {{the problem of}} minimizing the schedule length of n> 2 <b>concurrent</b> <b>flows</b> is NP-complete for both buffer models. A randomized scheduling algorithm for the partitioned buffer model is analyzed and probabilistic bounds on the schedule length are presented. Finally a heuristic based on static buffer allocation for the shared buffer model is discussed. ...|$|R
40|$|It {{is shown}} that the minimum cut ratio is within a factor of O(log k) of the maximum <b>concurrent</b> <b>flow</b> for k-commodity flow {{instances}} with arbitrary capacities and demands. This improves upon the previously best known bound of O(log 2 k) [27], and is existentially tight, up to a constant factor. An algorithm for finding a cut with ratio within a factor of O(log k) of the maximum <b>concurrent</b> <b>flow,</b> and thus of the optimal min cut ratio, is presented...|$|E
40|$|Abstract. We {{describe}} fully {{polynomial time}} approximation schemes for various multicommodity flow problems in graphs with m edges and n vertices. We present the first approximation scheme for maximum multicommodity flow that {{is independent of}} the number of commodities k, and our algorithm improves upon the runtime of previous algorithms by this factor of k, running in O ∗ (ɛ − 2 m 2) time. For maximum <b>concurrent</b> <b>flow,</b> and minimum cost <b>concurrent</b> <b>flow,</b> we present algorithms that are faster than the current known algorithms when the graph is sparse or the number of commodities k is large, i. e. k> m/n. Our algorithms build on the framework proposed by Garg and Könemann in FOCS 1998. They are simple, deterministic, and for the versions without costs, they are strongly polynomial. The approximation guarantees are obtained by comparison with dual feasible solutions found by our algorithm. Our maximum multicommodity flow algorithm extends to an approximation scheme for the maximum weighted multicommodity flow, which is faster than those implied by previous algorithms by a factor of k / log W where W is the maximum weight of a commodity. Key words. multicommodity flow, approximation algorithm, <b>concurrent</b> <b>flow,</b> VLSI routin...|$|E
40|$|In {{this paper}} we {{consider}} an optimization {{version of the}} multicommodity flow problem which {{is known as the}} maximum <b>concurrent</b> <b>flow</b> problem. We show that an approximate solution to this problem can be computed deterministically using O (k((Epsilon) ^- 2 + log k) log n) 1 -commodity minimum-cost flow computations, where k is the number of commodities, n is the number of nodes, and (Epsilon) is the desired precision. We obtain this bound by proving that in the randomized algorithm developed by Leighton et al. (1995) the random selection of commodities can be replaced by the deterministic round-robin without increasing the total running time. Our bound significantly improves the previously known deterministic upper bounds and matches the best known randomized upper bound for the approximation <b>concurrent</b> <b>flow</b> problem. ...|$|E
3000|$|Also {{when the}} number of {{simultaneous}} flows varies between 4 and 12, the throughput of RPCM results 30 % higher than the AODV on average. The delay is still lower for the RPCM, even if, {{when the number}} of flows increases, the improvement tends to reduce. From Figures 9 and 10 we see that, for RPCM, we can determine a [...] "threshold" [...] on the number of <b>concurrent</b> <b>flows,</b> until it is below 6, the performance is constant with very high throughputs and very low delays, {{when the number of}} flows is higher than 6, then the performance worsens.This result gives the designer a good hint about the number of <b>concurrent</b> <b>flows</b> to allow into the network, in order to have high performance. At least, the energy spent for received packet shows two different trends for AODV and RPCM, the first is not very affected by the number of flows and oscillates between 0.012 and 0.015 [...]...|$|R
30|$|In each experiment, 1000 packets were {{transmitted}} periodically {{at a rate}} of 3 [*]Hz from a sender to a receiver, {{without any}} other <b>concurrent</b> <b>flows.</b> Thus, the obtained results were isolated from network congestion effects (the reader may note that Section 8 is a study on the influence of background traffic on the routing metrics). All the experiments were carried out for the four routing metrics considered.|$|R
40|$|SystemC is the {{de facto}} system {{modeling}} language, and verification of SystemC models is a major research direction. Assertion-Based Monitoring is a dynamic verification technique that allows the user to dynamically verify formal properties of the system by automatically generating runtime monitors from them. A typical hardware-software system is concurrent and reactive. Examples of such systems can be a computer, an ATM server etc. Such systems perform multiple jobs of different types during their execution. For example, different types of jobs in a computer can be ‘launching a web browser’, ‘searching the file system’ etc. A job can be submitted by an external user or generated by an internal component of the system. A job can begin {{at any point in}} time during the execution of the system, the beginning time being completely unknown beforehand. A job begins with a set of inputs, travels from one system component to another to generate a set of outputs and ends after a finite amount of time. Since a job “flows” among the system components, we call it a <b>flow.</b> In a <b>concurrent</b> system multiple <b>flows</b> can begin and travel though the system at the same time. This work focuses on verifying formal properties about these dynamic and <b>concurrent</b> <b>flows</b> (called flow properties) in a concurrent reactive system, modeled in SystemC. The contribution of this thesis is three fold: First, a light-weight C++ library, called iii Flow Library, that enables modeling of flows in SystemC in a structured manner. Second, an algorithm, implemented in the FlowMonGen tool, to generate C++ monitor class from a flow property, which is an LTL formula interpreted over the finite trace of a flow. Third, a dynamic and decentralized algorithm to monitor the <b>concurrent</b> <b>flows</b> in a SystemC model. Our completely automated and efficient Flow Monitoring Framework implements this algorithm...|$|R
40|$|The {{study was}} {{executed}} to design, manufacture a pilot scale circulating <b>concurrent</b> <b>flow</b> dryer for drying rapeseed with capacity of 200 kg/batch and test {{to determine the}} operating parameters of the circulating <b>concurrent</b> <b>flow</b> rapeseed dryer. The effect of initial grain temperature, drying air temperature, drying air flow rate on the rapeseed temperature, exhaust air temperature, exhaust air relative humidity, drying rate, fuel energy consumption and germination ratio were investigated. Temperatures and moisture contents data were collected. For each experiment, rapeseed temperature, exhaust air temperature, exhaust air relative humidity were measured. The germination ratio of rapeseed was tested. The drying rate and fuel energy consumptions were calculated from experiment. The difference between theoretical values and measured values were evaluated by R 2  and RMSE. The analytic results shown that the experimental results is in good agreement with theoretical results</p...|$|E
40|$|We {{describe}} fully {{polynomial time}} approximation schemes for various multicommodity flow problems in graphs with m edges and n vertices. We present the first approximation scheme for maximum multicommodity flow that {{is independent of}} the number of commodities k, and our algorithm improves upon the runtime of previous algorithms by this factor of k, performing in O (ffl Γ 2 m 2) time. For maximum <b>concurrent</b> <b>flow,</b> and minimum cost <b>concurrent</b> <b>flow,</b> we present algorithms that are faster than the current known algorithms when the graph is sparse or the number of commodities k is large, i. e. k ? m=n. Our algorithms build on the framework proposed by Garg and Konemann [4]. They are simple, deterministic, and for the versions without costs, they are strongly polynomial. Our maximum multicommodity flow algorithm extends to an approximation scheme for the maximum weighted multicommodity flow, which is faster than those implied by previous algorithms by a factor of k= log W where W is [...] ...|$|E
40|$|International audienceIn this paper, a new {{decomposition}} {{approach is}} proposed to solve large size instances of Multicommodity Flow problems. Instead of generating paths, we generate trees in a convenient way. Numerical {{results show that}} the new approach is much more efficient than the classical paths generation approach. Moreover, we propose a combinatorial polynomial-time algorithm to solve the maximum <b>concurrent</b> <b>flow</b> problem (MCF) in the single-source case...|$|E
40|$|Abstract. Concurrent trace {{programs}} (CTPs) are {{slices of}} the concurrent programs that generate the concrete program execution traces, where inter-thread event order {{specific to the}} given traces are relaxed. For such CTPs, we introduce transaction sequence graph (TSG) {{as a model for}} efficient <b>concurrent</b> data <b>flow</b> analysis. The TSG is a digraph of thread-local control nodes and edges corresponding to transactions and possible context-switches. Such a graph captures all the representative interleavings of these nodes/transactions. We use a mutually atomic transaction (MAT) based partial order reduction to construct such a TSG. We also present a non-trivial improvement to the original MAT analysis to further reduce the TSG sizes. As an application, we have used interval analysis in our experiments to show that TSG leads to more precise intervals and more time/space efficient <b>concurrent</b> data <b>flow</b> analysis than the standard models such as <b>concurrent</b> control <b>flow</b> graph. ...|$|R
3000|$|... a). The descendent {{exponential}} curve behavior for the throughput {{can be explained}} by the increase of simultaneous connections among the non-mesh STAs that increases the interference. The low throughput of HWMP is partially explained by the high number of transmission outages due to <b>concurrent</b> <b>flows</b> generating traffic at higher data rates, which leads to long transmission queues (in some cases resulting in the dropping of the packet). As the network load increases, the channel condition and interference varies with time, and this cannot be captured with the standard ALM metric.|$|R
40|$|Abstract—We {{provide a}} {{comparative}} analysis of various routing strategies {{that affect the}} end-to-end performance in wireless mesh networks. We first improve well-known link quality metrics and routing algorithms to better operate in wireless mesh environments. We then investigate the route optimality {{and its impact on}} the network performance by comparing the achieved end-to-end performance with the optimal offline routing. Various network topologies, number of <b>concurrent</b> <b>flows,</b> and interference types are considered in our evaluation and we reveal that a nonoptimal route is easily established because of routing protocol’s misbehavior, interflow interference, and their interplay, thus affecting the end-to-end performance. I...|$|R
