93|1157|Public
25|$|The {{architecture}} {{defined a}} set of 32 integer registers and {{a set of}} 32 floating-point registers in addition to a program counter, two lock registers and a floating-point <b>control</b> <b>register</b> (FPCR). It also defined registers that were optional, implemented only if the implementation required them. Lastly, registers for PALcode were defined.|$|E
25|$|The {{program counter}} is a 64-bit {{register}} which contains a longword-aligned virtual byte address, that is, the low two {{bits of the}} program counter are always zero. The PC is incremented by four to {{the address of the}} next instruction when an instruction is decoded. A lock flag and locked physical address register are used by the load-locked and store-conditional instructions for multiprocessor support. The floating-point <b>control</b> <b>register</b> (FPCR) is a 64-bit register defined by the architecture intended for use by Alpha implementations with IEEE 754-compliant floating-point hardware.|$|E
2500|$|Thread mode (ARMv6-M, ARMv7-M, ARMv8-M): A mode {{which can}} be {{specified}} as either privileged or unprivileged, while whether Main Stack Pointer (MSP) or Process Stack Pointer (PSP) is used can also be specified in <b>CONTROL</b> <b>register</b> with privileged access. This mode is designed for user tasks in RTOS environment but it's typically used in bare-metal for super-loop.|$|E
5000|$|The ISA PNP {{specification}} {{divides the}} registers of a device in two categories: <b>control</b> <b>registers</b> and configuration registers. One of the device <b>control</b> <b>registers</b> defined by ISA PNP is (for example) the Activate register, which turns the card on or off.|$|R
50|$|Serial data {{transfers}} {{are provided}} by a serial to parallel/parallel to serial shift register, with bit transfers synchronized with the Ø2 clock. Application versatility is further increased by various <b>control</b> <b>registers,</b> including an interrupt flag register, an interrupt enable register and two Function <b>Control</b> <b>Registers.</b>|$|R
5000|$|... #Subtitle level 2: Additional <b>Control</b> <b>registers</b> in x86-64 series ...|$|R
50|$|The TIA {{is capable}} of {{generating}} different types of pulse and noise out its two oscillators (or channels) AUD0 and AUD1. Each oscillator has a 5-bit frequency divider and a 4-bit audio <b>control</b> <b>register</b> which manipulates the waveform. There is also a 4-bit volume <b>control</b> <b>register</b> per channel.|$|E
5000|$|A value {{provided}} in a <b>control</b> <b>register</b> for that channel (called N).|$|E
5000|$|ICR - Register (Index <b>Control</b> <b>Register,</b> 3 bits), also {{designated}} the [...] "B-register" ...|$|E
5000|$|... 0x0000-0x0007 : Processor special {{function}} <b>registers</b> (interrupt <b>control</b> <b>registers)</b> ...|$|R
5000|$|Controlling {{access to}} local {{resources}} such as <b>control</b> <b>registers</b> and memory.|$|R
40|$|Simpson’s four-slot fully {{asynchronous}} communication mechanism allows single reader and writer processes to access a shared memory {{in such a}} way that interference between concurrent reads and writes is avoided, the reader always accesses the most recent data stored by the writer, and neither process need wait for the other. In computer science parlance, it is a means for implementing a wait-free atomic register. We use the SAL model checking environment to examine this mechanism and show that concurrent reads and writes are indeed noninterfering but that access to the most recently written data requires the unattractive assumption that some of the <b>control</b> <b>registers</b> are already atomic. We exhibit counterexamples that reveal incorrect operation when the <b>control</b> <b>registers</b> are not atomic, and also when the mechanism is modified (following a suggestion of Simpson) so that <b>control</b> <b>registers</b> are written only when their values will be changed. We do successfully verify the algorithm when its <b>control</b> <b>registers</b> are assumed to be atomic. The requirement for atomic <b>control</b> <b>registers</b> is unattractive: it means that any application that uses Simpson’s mechanism must be accompanied by separate, strong evidenc...|$|R
5000|$|... Debug Status and <b>Control</b> <b>Register</b> (DSCR), 32 bits used {{to operate}} the debug {{facilities}} ...|$|E
5000|$|Eight data lines (D0-D7) are {{available}} (with an 8-bit data buffer) to read/write data into the ports or <b>control</b> <b>register</b> under {{the status of}} the RD (pin 5) and WR (pin 36), which are active-low signals for read and write operations respectively. Address lines A1 and A0 allow to access a data register for each port or a <b>control</b> <b>register,</b> as listed below: ...|$|E
50|$|The <b>control</b> <b>register</b> {{controls}} {{the number of}} stop bits, the word length, receiver clock source and transmit/receive rate.|$|E
50|$|This unit {{is part of}} the CPU. Has 16 32-bit <b>control</b> <b>registers.</b>|$|R
5000|$|Extended PSW Mode {{that enables}} {{additional}} interrupt masking and additional <b>control</b> <b>registers</b> ...|$|R
50|$|All of the {{peripheral}} <b>control</b> <b>registers</b> are memory-mapped {{in the normal}} address space.|$|R
5000|$|CR8, <b>Control</b> <b>register</b> number 8: enables x86 {{processors}} {{to prioritize}} external interrupts and {{is referred to}} as the task-priority register ...|$|E
5000|$|It {{requires}} two internal address A =0 {{for selecting}} data buffer and A = 1 for selecting <b>control</b> <b>register</b> of8279.|$|E
50|$|Unlike 286 {{protected}} mode, 386 CPUs can be {{put back}} into real mode merely by clearing {{a bit in the}} CR0 <b>control</b> <b>register.</b>|$|E
25|$|There were {{a number}} of 8-bit <b>control</b> <b>registers</b> and 32-bit status <b>registers</b> to <b>control</b> various device timing parameters.|$|R
50|$|A machine state {{register}} (MSR) is one {{of three}} process <b>control</b> <b>registers</b> present in the PowerPC processor architecture.|$|R
50|$|There were {{a number}} of 8-bit <b>control</b> <b>registers</b> and 32-bit status <b>registers</b> to <b>control</b> various device timing parameters.|$|R
5000|$|The Jazelle OS <b>Control</b> <b>Register</b> at CP14:c0(c1) is only {{accessible}} in {{kernel mode}} and will cause an exception when accessed in user mode.|$|E
50|$|In computing, {{a device}} <b>control</b> <b>register</b> is a {{hardware}} register that controls some computer hardware device, for example a peripheral or an expansion card.|$|E
5000|$|The Audio <b>Control</b> <b>register</b> generates and manipulates a {{pulse wave}} to create complex pulses or noise. The {{following}} table (with designed duplicates) explains how its tones are generated: ...|$|E
3000|$|By {{calling the}} mmap (...) function, the 3 D {{graphics}} test benches can move 3 D vertices into the 3 D vertex buffer. After configuring the context table (CT) of the GE, the test benches {{will enable the}} GE to start 3 D graphics operations. The CT contains the <b>control</b> <b>registers</b> of the GE, while the <b>control</b> <b>registers</b> for the RE are collectively known as the register table (RT).|$|R
5000|$|... 192 - 255: Peripheral <b>control</b> <b>registers</b> (GPIO ports, timers, etc.) The {{accumulator}} {{is mapped}} at address 255, but is more commonly addressed implicitly.|$|R
30|$|Initially <b>control</b> <b>registers</b> are transmitted, which {{indicates}} {{the availability of the}} crisp input values and the number of rules and also initiates the hardware FLC process.|$|R
5000|$|In {{protected}} mode with paging enabled (bit 31, , of <b>control</b> <b>register</b> [...] is set), but without PAE, x86 processors use a two-level page translation scheme. <b>Control</b> <b>register</b> [...] holds the page-aligned physical address {{of a single}} 4 KB long page directory. This is divided into 1024 four-byte page directory entries that in turn, if valid, hold the page-aligned physical addresses of page tables, each 4 KB in size. These similarly consist of 1024 four-byte page table entries which, if valid, hold the page-aligned physical addresses of 4 KB long pages of physical memory (RAM).|$|E
50|$|The <b>control</b> <b>{{register}}</b> (or {{the control}} logic, or the command word register) is an 8-bit register {{used to select}} the modes of operation and input/output designation of the ports.|$|E
50|$|The Program {{status word}} (PSW) is an IBM System/360 {{architecture}} and successors <b>control</b> <b>register</b> which performs {{the function of}} a Status register and Program counter in other architectures, and more.|$|E
50|$|The context {{data may}} {{be located in}} {{processor}} registers, memory used by the task, or in <b>control</b> <b>registers</b> used by some operating systems to manage the task.|$|R
50|$|In Cummings's {{freshman}} year she scored 43 goals and had 14 assists. She posted a team-high of 94 draw <b>controls,</b> <b>registered</b> 28 ground balls and caused 21 turnovers.|$|R
40|$|The turbo {{coprocessor}} (TCP) is a programmable peripheral for decoding IS 2000 / 3 GPP turbo codes, {{that are}} {{integrated into the}} Texas Instruments (TI) TMS 320 C 6416 digital signal processor. The TCP is controlled via memory-mapped <b>control</b> <b>registers</b> and data buffers. <b>Control</b> <b>registers</b> can be accessed directly by the CPU, whereas data buffers are typically accessed using the EDMA controller. This application report describes {{the relationship between the}} theory of turbo decoding and TCP implementation, outlines TCP programming procedures, and provides examples that demonstrate how to program TCPs for typica...|$|R
