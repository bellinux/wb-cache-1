2|596|Public
50|$|Denis Howe started EUROPa (Expanding Unidirectional Ring Of Pages) at Imperial College in 1994. The idea {{developed}} further when Giraldo Hierro conceptualized {{a central}} CGI (<b>Common</b> <b>Gateway</b> <b>Interface)</b> <b>script</b> to enhance functionality. Sage Weil developed such a script in May 1994. Weil's script gained popularity, pushing Weil in June 1995 {{to form a}} company called WebRing. In 1997, Weil sold WebRing to Starseed, Inc.|$|E
40|$|This article {{describes}} Java Servlet technology. It first provides background information about web servers, web containers and application servers. The article next discusses {{the implementation of}} the Servlet API in web applications. Finally, the article discusses the advantages of servlets and a brief comparison with CGI (<b>Common</b> <b>Gateway</b> <b>Interface)</b> <b>script...</b>|$|E
5000|$|In {{the mid to}} late 90s, {{when many}} website-based {{companies}} were starting up, free software became a popular choice for web servers. Apache HTTP Server became the most-used web-server software, a title that still holds as of 2015. Systems based on a common [...] "stack" [...] of software with the Linux kernel at the base, Apache providing web services, the MySQL database engine for data storage, and the PHP programming language for providing dynamic pages, came to be termed LAMP systems. In actuality, the programming language that predated PHP and dominated the web in the mid and late 90's was Perl. Web forms were processed on the server side through <b>Common</b> <b>Gateway</b> <b>Interface</b> <b>scripts</b> written in Perl.|$|R
40|$|SCORES (SpaceCraft Object-oriented Rocket Engine Simulation) is an {{analysis}} tool being developed for conceptual-level spacecraft and launch vehicle design. Written in C++, SCORES provides rocket thrust and Isp for propulsion system trade studies. <b>Common</b> <b>gateway</b> <b>interface</b> <b>scripts,</b> written in Perl, provide an interface with the World Wide Web. The design parameters used in SCORES are mixture ratio, chamber pressure, throat area, and expansion ratio, making SCORES effective in multidisciplinary design optimization. This paper describes {{the current status}} {{in the development of}} SCORES, compares chemical equilibrium results against accepted equilibrium codes STANJAN and CEA, compares engine thrust and Isp predictions against available engine data for nine rocket engines, and discusses areas for future work. SCORES accurately predicts equilibrium mole fractions and adiabatic flame temperature over a wide range of operating conditions within 0. 5 %. Uncorrected errors of less than 10 % within SCO [...] ...|$|R
50|$|Tripod offers {{free and}} paid Web hosting services, {{including}} 20 megabytes of storage {{space and the}} ability to run <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) <b>scripts</b> in Perl. In addition to basic hosting, Tripod also offers a blogging tool, a photo album manager, and the Trellix site builder for WYSIWYG page editing. Tripod's for-pay services include additional disk space, a shopping cart, domain names, web and POP/IMAP email.|$|R
5000|$|The {{advantages}} of using servlets are their fast performance {{and ease of}} use combined with more power over traditional CGI (<b>Common</b> <b>Gateway</b> <b>Interface).</b> Traditional CGI <b>scripts</b> written in Java have a number of performance disadvantages: ...|$|R
40|$|Web server {{programs}} {{are one of}} the most popular computer applications in existence today. Our goal is to study the behavior of modern Web server application programs to understand how they interact with the underlying Web server, hardware and operating system (OS) environment. We monitor and evaluate the performance of the system using hardware performance counters, for different workloads and identify the bottlenecks in the system based on the analysis of the collected data. Our workloads include static requests (to HTML files and images) which form a major percentage of the web traffic, as well as dynamic requests in the form of CGI (<b>Common</b> <b>Gateway</b> <b>Interface)</b> <b>scripts</b> and Servlets, both of which are gaining popularity and hence emerging to be a significant part of today's Web traffic. We include not only the Web server itself in our studies, but also the server applications that run under its control as CGI scripts or Java Servlets. An UltraSPARC-II is used to run the server program [...] ...|$|R
40|$|Determining {{the best}} method for {{granting}} World Wide Web (Web) users access to remote relational databases is difficult. Choosing the best supporting Web/database link method for implementation requires an in-depth understanding of the methods available {{and the relationship between}} the link designer's goals and the underlying issues of Performance and Functionality, Cost, Development Time and Ease, Serviceability, Flexibility and Openness, Security, State and Session. This thesis examined existing methods for enabling Web-client access to remote regional databases and found that most fall within the general categories of <b>Common</b> <b>Gateway</b> <b>Interface</b> <b>scripts,</b> Server Application Programming Interfaces, Web-enabled Database Management Systems exporting query results in Hypertext Markup Language, and independent client-based processes such as Java applets. To determine the best database access category we compared each one to the underlying link issues and conducted a case study for the IEEE Signal Processing Society. The results of this thesis are: (1) a taxonomy of existing Web. NAN...|$|R
40|$|DNA {{vaccines}} have slowly {{emerged as}} keystones in preventive immunology {{due to their}} versatility in inducing both cell-mediated as well as humoral immune responses. The design of an efficient DNA vaccine, involves choice of a suitable expression vector, ensuring optimal expression by codon optimization, engineering CpG motifs for enhanc-ing immune responses and providing additional sequence signals for efficient translation. DyNAVacS is a web-based tool created for rapid and easy design of DNA vaccines. It follows a step-wise design flow, which guides the user through the various sequential steps {{in the design of}} the vaccine. Further, it allows restriction enzyme map-ping, design of primers spanning user specified sequences and provides information regarding the vectors currently used for generation of DNA vaccines. The web version uses Apache HTTP server. The interface was written in HTML and utilizes the <b>Common</b> <b>Gateway</b> <b>Interface</b> <b>scripts</b> written in PERL for functionality. DyNAVacS is an integrated tool consisting of user-friendly programs, which require minimal information from the user. The software is available free of cost, as a web based application a...|$|R
40|$|The {{growth of}} the {{utilization}} of the World Wide Web (WWW) as a medium for the delivery of computer-based patient records (CBPR) {{has created a new}} paradigm in which clinical information may be delivered. Until recently the authoring tools and environment for application development on the WWW have been limited to Hyper Text Markup Language (HTML) utilizing <b>common</b> <b>gateway</b> <b>interface</b> <b>scripts.</b> While, at times, this provides an effective medium for the delivery of CBPR, it is a less than optimal solution. The server-centric dynamics and low levels of interactivity do not provide for a robust application which is required in a clinical environment. The emergence of Sun Microsystems' Java language is a solution to the problem. In this paper we examine the Java language and its implications to the CBPR. A quantitative and qualitative assessment was performed. The Java environment is compared to HTML and Telnet CBPR environments. Qualitative comparisons include level of interactivity, server load, client load, ease of use, and application capabilities. Quantitative comparisons include data transfer time delays. The Java language has demonstrated promise for delivering CBPRs...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis is a follow-on effort to work conducted by Michael Chalfant and Kevin Coats Ref. 1. The focus is {{the design and}} implementation of a web-based information system for the Asilomar Conference on Signals, Systems and Computers. This technical conference specializes in signal and image processing, communications, sensor systems, and computer hardware and software. Organized {{in collaboration with the}} Naval Postgraduate School, San Jose State University, and the IEEE Signal Processing Society, the Conference is conducted annually at the Asilomar Conference Facility in Pacific Grove, California. Initial project efforts concentrated on article submissions and system administration (i. e., database management). The article review process and overall implementation of the improved system is the focus of this thesis. The objectives of this thesis are to: (1) Analyze the article review process of the Asilomar Conference, (2) Implement a World Wide Web (WWW) based article review process, (3) Implement the improved Asilomar Conference information system. Internet automation is accomplished via interactive WWW pages, created using Borland's Delphi as a programming tool, O'Rielly's WebSite as the web server, and <b>Common</b> <b>Gateway</b> <b>Interface</b> <b>scripts</b> as the mechanism for interactivity. This interactivity provides seamless global access to the Conference database and processes[URL] Commander, U. S. Nav...|$|R
40|$|As {{more and}} more Web {{services}} are delivered {{in the form of}} <b>Common</b> <b>Gateway</b> <b>Interfaces</b> (CGI) <b>scripts,</b> the efficiency at which Web servers execute CGI scripts is becoming ever more important. In this paper we show that the performance overhead associated with invoking a conventional CGI script could potentially become a bottleneck, especially for servers directly connected to high-speed network links. While existing CGI execution model runs CGI scripts as independent processes, the LibCGI architecture described in this work allows the Web server to execute CGI scripts as part of its address space. On a 100 -Mbps Ethernet link and for web pages smaller than 10 KBytes, LibCGI is shown to be 2. 3 times as fast as FastCGI, and 3. 9 to 4. 6 times faster than the conventional CGI model. This paper describes in detail the design and evaluation of the LibCGI architecture and its prototype implementation. 1 Introduction <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) is a standard service invocation mechanism that W [...] ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis documents {{the development of}} an on-line information technology management (ITM) research catalog that can be accessed by DOD and DON agencies or other interested parties via the World Wide Web. The on-line research catalog allows the ITM professors at the Naval Postgraduate School (NPS) to quickly and easily maintain their own research information regardless of their operating platform. The logic for a multi-user relational database approach to managing the research catalog is addressed. A semantic object model and a relational diagram are developed to create a conceptual design for the database. Next, the application process and description of the <b>common</b> <b>gateway</b> <b>interface</b> (CGI) <b>scripts</b> are presented. Chapter four displays and discusses the catalog's major user interfaces. Finally, this thesis concludes with a plan for using the system and recommendations for further improvements[URL] United States Nav...|$|R
40|$|This paper {{presents}} {{our current}} {{development of the}} Sheffield Urban Contextual Databank (SUCoD) prototype that provides users with a Webbased interface for dynamic retrieval of architectural and urban contextual information {{of the city of}} Sheffield. In comparison with past attempts of building Virtual Cities accessible over the Internet, we have experimented with a different system architecture capable of generating VRML models and other related documents on the fly according to users'requests. Through working examples, we describe our methods of implementing the data communications between Java applets and <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) <b>scripts.</b> The SUCoD prototype has been developed to explore and demonstrate how user centred dynamic retrieval of urban contextual information can be supported, which we consider a user requirement of primary importance in its future use for collaborative design and research relating to the city of Sheffield...|$|R
40|$|The maintenance, {{visualization}} and query of 3 D urban {{data has}} always been problematic due {{to the complexity of}} geometry, diversity of attribute information, large amounts of data, demanded comprehensive analysis and queries requiring new techniques for visualization and query. The approach presented here aims visualization and query via Internet and utilizes established standards and techniques to access and retrieve remote data: Virtual Reality Modeling Language (VRML) and Hypertext Markup Language (HTML) to visualize respectively 3 D geometry and text information, Javascript and <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) <b>scripts</b> to control the interaction and query of the three dimensional Geographic Information Systems (3 D GIS) on the Web. The paper focuses a couple of aspects related to the data base structure on the GIS server: clarification of data needed to create VRML and HTML documents, and data structuring according to an elaborated classification of the information stored per object, i [...] . ...|$|R
40|$|In {{this paper}} {{we present a}} system for {{visualizing}} volume data from remote supercomputers (PermWeb). We have developed both parallel volume rendering algorithms, and the World Wide Web software for accessing the data at the remote sites. The implementation uses Hypertext Markup Language (HTML), Java, and <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) <b>scripts</b> to connect World Wide Web (WWW) servers/clients to our volume renderers. The front ends are interactive Java classes for specification of view, shading, and classification inputs. We present performance results, and implementation details for connections to our computing resources at the University of California Santa Cruz including a MasPar MP- 2, SGI Reality Engine-RE 2, and SGI Challenge machines. We apply the system {{to the task of}} visualizing trabecular bone from finite element simulations. Fast volume rendering on remote compute servers through a web interface allows us to increase the accessibility of the results to more users. User interface issues, overviews of parallel algorithm developments, and overall system interfaces and protocols are presented. Access is available through Uniform Resource Locator (URL) [URL] 26 refs., 7 figs...|$|R
40|$|This thesis {{describes}} the database {{design and implementation}} for DecisionNet [...] a distributed decision support technology server for the World Wide Web. The main premise of DecisionNet is that decision support technologies can be utilized by consumers as services over the World Wide Web instead of being purchased as stand-alone products. In this sense, DecisionNet performs {{the role of an}} 'agent,' facilitating transactions between consumers and providers. All of DecisionNet's functions involve some form of data lookup and modification, as well as common fields of data for similar classes of entities. As such, a database approach seems appropriate for DecisionNet. With this approach, the interaction of database queries with scripting languages can facilitate remote execution of decision support software. The DecisionNet prototype developed {{as a result of this}} research involves the use of a relational database that is directly accessed via <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) <b>scripts.</b> These CGI scripts are invoked by users with a simple web browser. This thesis contains a description of 'agent' models for transactions, the relational database design description of all CGI scripts, and development of a user interface for the system. NAU. S. Navy (U. S. N.) autho...|$|R
50|$|In {{the earlier}} {{days of the}} web, {{server-side}} scripting was almost exclusively performed by {{using a combination of}} C programs, Perl scripts, and shell <b>scripts</b> using the <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI). Those <b>scripts</b> were executed by the operating system, and the results were served back by the web server. Many modern web servers can directly execute on-line scripting languages such as ASP, JSP, Perl, PHP and Ruby either by the web server itself or via extension modules (e.g. mod_perl or mod_php) to the web server. For example, WebDNA includes its own embedded database system. Either form of scripting (i.e., CGI or direct execution) can be used to build up complex multi-page sites, but direct execution usually results in less overhead because of the lower number of calls to external interpreters.|$|R
50|$|He is {{co-author}} with David R. Robinson of RFC 3875, the <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) specification.|$|R
50|$|MacHTTP {{supports}} the <b>Common</b> <b>Gateway</b> <b>Interface</b> standard for generating dynamic content, {{as well as}} Apple Events for scriptability.|$|R
5000|$|... mod_perl can emulate a <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) environment, so that {{existing}} Perl CGI scripts {{can benefit from}} the performance boost without having to be re-written.|$|R
5000|$|... 8. There {{is also a}} <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) {{interface}} {{built into}} SheerPower, {{along with many other}} built-in functions designed for high-performance and increased programmer productivity.|$|R
50|$|No {{knowledge}} of Windows programming {{is required to}} create character mode or graphical applications with this compiler. <b>Common</b> <b>Gateway</b> <b>Interface</b> executables can also be compiled using PBCC.|$|R
25|$|Pages built using Server Side Includes or <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) {{instead of}} a web {{application}} written in a dynamic programming language such as Perl, PHP, Python or Ruby.|$|R
50|$|Different {{kinds of}} SAPIs exist for various web-server extensions. For example, in {{addition}} to those listed above, other SAPIs for the PHP language include the <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) and command-line interface (CLI).|$|R
50|$|Mason can be {{used with}} Apache HTTP Server via mod_perl - for which Mason {{provides}} its own handler, HTML::Mason::ApacheHandler. It also has support for <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI), and can therefore run on any CGI-enabled web server.|$|R
5000|$|In 2001, Grier exposed several {{security}} {{flaws in}} a number of techniques then popular in <b>Common</b> <b>Gateway</b> <b>Interface</b> web applications. [...] This was a contributing factor in the move from flat file databases to modern database management systems.|$|R
40|$|The <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) is a {{well-established}} flexible solution for extending an HTTP server functionality. Unfortunately, it has intrinsic problems with throughput and effective resource use. These shortcomings become particularly appreciable for the CGI scripts with advanced functionality. Thus, usin...|$|R
40|$|Data {{structures}} is {{the basic}} courses in computer science. However, students find it difficult in learning data structures. The application of A data structures visualization can help students to understand. This project is a visualization of a queue data structures. The author creates this queue visualization using cgi (<b>common</b> <b>gateway</b> <b>interface)</b> programming and canvas HTML 5. The cgi program is written in /var/www/cgi-bin folder and executed by apache server. This code makes a canvas code for browser. Then the canvas code draws a rectangle and line to make a visualization. The result of this project is queue visualization, user can add queue, call a queue and display a queue. Keyword: Queue, Visualization, <b>Common</b> <b>Gateway</b> <b>Interface,</b> HTML 5 canvas...|$|R
50|$|HTTP/1.0 {{was thought}} to only allow a single request and {{response}} during one Web/HTTP Session. Protocol version HTTP/1.1 improved this by completing the <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI), {{making it easier to}} maintain the Web Session and supporting HTTP cookies and file uploads.|$|R
5000|$|Historically CGI scripts {{were often}} written using the C language. RFC 3875 [...] "The <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI)" [...] {{partially}} defines CGI using C, as {{in saying that}} environment variables [...] "are accessed by the C library routine getenv (...) or variable environ".|$|R
500|$|PHP {{development}} {{began in}} 1995 when Rasmus Lerdorf wrote several <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) programs in C, {{which he used}} to maintain his personal homepage. He extended them to work with web forms and to communicate with databases, and called this implementation [...] "Personal Home Page/Forms Interpreter" [...] or PHP/FI.|$|R
50|$|FTP, SMTP, HTTP and {{the usual}} web {{languages}} such as PHP and Perl are supported by PWS. It also supports basic CGI (<b>Common</b> <b>Gateway</b> <b>Interface)</b> conventions and a subset of Classic ASP. Using these technologies, web applications running on PWS are capable of performing and interpreting database queries and results.|$|R
5000|$|PHP {{development}} {{began in}} 1995 when Rasmus Lerdorf wrote several <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI) programs in C, {{which he used}} to maintain his personal homepage. He extended them to work with web forms and to communicate with databases, and called this implementation [...] "Personal Home Page/Forms Interpreter" [...] or PHP/FI.|$|R
50|$|FastCGI is {{a binary}} {{protocol}} for interfacing interactive programs with a web server. FastCGI is {{a variation on}} the earlier <b>Common</b> <b>Gateway</b> <b>Interface</b> (CGI); FastCGI's main aim is to reduce the overhead associated with interfacing the web server and CGI programs, allowing a server to handle more web page requests at once.|$|R
50|$|RapidQ (also {{known as}} Rapid-Q) is a free, cross-platform, semi-object-oriented dialect of the BASIC {{programming}} language. It can create console, graphical user <b>interface,</b> and <b>Common</b> <b>Gateway</b> <b>Interface</b> applications. The {{integrated development environment}} includes a drag-and-drop form designer, syntax highlighting, and single-button compilation. Versions are available for Microsoft Windows, Linux, Solaris, and HP-UX.|$|R
