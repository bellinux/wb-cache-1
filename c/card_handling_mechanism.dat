0|804|Public
5000|$|SmartMedia <b>card</b> <b>handling</b> (8-128 MB) {{to store}} audio and midi files and backup (16MB) ...|$|R
50|$|Visa Inc. {{released}} Visa Tokenization Best Practices for tokenization uses {{in credit}} and debit <b>card</b> <b>handling</b> applications and services.|$|R
2500|$|Check control return {{codes and}} {{implement}} error <b>handling</b> <b>mechanisms</b> ...|$|R
50|$|CLU's {{exception}} <b>handling</b> <b>mechanisms</b> influenced later languages like C++ and Java.|$|R
50|$|In 2004, Ferguson {{produced}} and hosted {{a series of}} poker chip and <b>card</b> <b>handling</b> DVDs. Ferguson is also known for motivational speaking for at risk youth where he presents his keynote program called Magic Maker in which he focuses on overcoming obstacles and common sense.|$|R
5000|$|OWASP Development Guide: The Development Guide {{provides}} practical {{guidance and}} includes J2EE, ASP.NET, and PHP code samples. The Development Guide covers an extensive array of application-level security issues, from SQL injection through modern concerns such as phishing, credit <b>card</b> <b>handling,</b> session fixation, cross-site request forgeries, compliance, and privacy issues.|$|R
40|$|Exception <b>handling</b> <b>mechanisms</b> are an {{important}} part in achieving robust and reliable software. The project will look intowhatmakes exception handlingmechanisms diffi-cult to use. Next, the project will focus on methods for achieving better control over exception handling. i Exception handling suffers from a fluke in its evolution. Some time in the 1970 ’s, a researcher called Goodenough introduced the exception <b>handling</b> <b>mechanism,</b> known today as the try [...] . catch construct. At about the same time, two fellows called Parnas and Würges published a paper about ”undesired events”. This paper appears forgotten. The funny thing is, Parnas and Würges effectively described how to use exception <b>handling</b> <b>mechanisms.</b> There is a need to respond to this undesired event. Exception handling suffer...|$|R
40|$|In {{this study}} we discuss how to handle DDoS attack that coming from the {{attacker}} by using detection method and <b>handling</b> <b>mechanism.</b> Detection perform by comparing number of packets and number of flow. Whereas <b>handling</b> <b>mechanism</b> perform by limiting or drop the packets that detected as a DDoS attack. The study begins with simulation on real network, which aims to get the real traffic data. Then, dump traffic data obtained from the simulation used for detection method on our prototype system called DASHM (DDoS Attack Simulation and <b>Handling</b> <b>Mechanism).</b> From the result of experiment that has been conducted, the proposed method successfully detect DDoS attack and handle the incoming packet sent by attacker...|$|R
40|$|The {{design of}} an {{exception}} <b>handling</b> <b>mechanism</b> for communicating sequential processes is presented. It is {{primarily concerned with}} correctness of parallel programs using the mechanism. The proposed mechanism relies on only two basic additions to the notions already needed to cope with sequential program exceptions. To demonstrate that the exception <b>handling</b> <b>mechanism</b> serves the design of correct rubust parallel programs, a sound and relatively complete proof system is introduced for the enriched host programming language. Furthermore, {{the adequacy of the}} exception <b>handling</b> <b>mechanism</b> with the underlying programming model is shown. The programming language integrating the mechanism may be rewritten in terms of commands of the embedding language. Finally, comparison with related work is described...|$|R
50|$|Microsoft Windows OS family employs some {{exception}} <b>handling</b> <b>mechanisms</b> {{that are}} based on the operating system specifics.|$|R
5000|$|An {{advanced}} {{software interrupt}} facility that allowed user processes to operate asynchronously, using complex interrupt <b>handling</b> <b>mechanisms.</b>|$|R
40|$|Exception <b>handling</b> <b>mechanisms</b> are {{intended}} to help developers build robust systems. Although an exception <b>handling</b> <b>mechanism</b> provides a basis for structuring source code dealing with unusual situations, little information is available to help guide a developer in the appropriate application of the mechanism. In our experience, this lack of guidance leads to complex exception structures. In this paper, we reflect upon our experiences using the Java exception <b>handling</b> <b>mechanism.</b> Based on these experiences, we discuss two issues we believe underlie the difficulties encountered: exceptions are a global design problem, and exception sources are often difficult to predict in advance. We then describe a design approach, based on work by Litke for Ada programs, which we have used to simplify exception structure in existing Java programs...|$|R
50|$|One of the LEO III's quirkier {{features}} was {{a loudspeaker}} {{connected to the}} central processor which enabled operators to tell whether a program was looping by the distinctive sound it made. Another quirk was that many intermittent faults were due to faulty connectors and could be temporarily fixed by briskly strumming the <b>card</b> <b>handles.</b>|$|R
50|$|The throw-catch {{exception}} <b>handling</b> <b>mechanisms</b> {{can also}} be easily abused to create non-transparent control structures, just like goto can be abused.|$|R
30|$|Solutions for {{fault-tolerant}} SOA relying {{solely on}} exception handling - variant services are not employed {{as part of}} the exception <b>handling</b> <b>mechanism.</b>|$|R
5000|$|Its {{main focus}} is {{to hide behind}} simple {{wrappers}} existing Java functionality and to provide general application exception <b>handling</b> <b>mechanism.</b> In short it supports: ...|$|R
5000|$|Creation and {{processing}} of punched <b>cards</b> was <b>handled</b> {{by a variety}} of machines, including: ...|$|R
50|$|Rich Ferguson {{has been}} {{featured}} {{on the front page}} of The New Times, Pacific Coast Business Times, The San Luis Obispo Tribune and featured as a center spread in BLUFF, a popular gaming magazine which Rich wrote a monthly column for over two years. Ferguson showcased his Chip Tricks and <b>Card</b> <b>Handling</b> skills at the World Series of Poker in 2006.|$|R
40|$|Abstract. The paper {{describes}} the traffic <b>handling</b> <b>mechanisms</b> {{implemented in the}} AQUILA pilot QoS IP network [10]. The AQUILA project enhances the DiffServ architecture concept [1, 2, 3] by adding new functionality for admission control and resource management {{as well as by}} defining new set of network services. Each network service is optimised for specific type of traffic (e. g. nonreactive and reactive) and has its own traffic <b>handling</b> <b>mechanisms.</b> Exemplary measurement results verifying the effectiveness of AQUILA approach for providing QoS are also included. ...|$|R
40|$|Invocation <b>handling</b> <b>mechanisms</b> in many {{concurrent}} languages {{have significant}} limitations {{that make it}} difficult or costly to solve common programming situations encountered in program visualization, debugging, and scheduling scenarios. This paper discusses these limitations, introduces new language mechanisms aimed at remedying these limitations, and presents an implementation of the new mechanisms. The examples are given in SR; the new mechanisms and implementation are an extension of SR and its implementation. However, these new mechanisms are applicable to other concurrent languages. They can augment or replace current invocation <b>handling</b> <b>mechanisms...</b>|$|R
40|$|AbstractThis paper {{presents}} a Hoare-like {{system for the}} language Lexc containing typical statements, recursive procedures and an exception <b>handling</b> <b>mechanism.</b> The exception <b>handling</b> <b>mechanism</b> supports both termination and resumption as handler responses to an exception The semantics of the language is defined by a copy rule. The Hoare-like system {{is based on the}} system defined in Olderog (1981) for an Algol-like language. It is relatively complete for programs with a finite C-index (C stands for a copy rule). The example of a correctness proof fo a simple program is presented...|$|R
40|$|Abstract. Writing ambient-oriented {{software}} for mobile devices connected through wireless network connections provides {{a new challenge}} {{in the field of}} exception handling. It involves dealing with issues such as asynchronous communication, moving hardware and software, only to name a few. Building on an analysis of the fundamental differences between mobile networks and their stationary counterparts, this paper establishes a set of criteria for an ambient-oriented exception <b>handling</b> <b>mechanism.</b> We subsequently present ambient conversations, a novel distributed exception <b>handling</b> <b>mechanism</b> that adheres to the prescribed criteria, and describe its realisation in the ambient-oriented programming language AmbientTalk. ...|$|R
40|$|In complex System-on-a-Chip (SoC) designs, {{designers}} {{often need}} to add new features into an original processor core, such as to extend the exception <b>handling</b> <b>mechanism</b> to consider exceptions in the remaining portion of the SoC design. We present in this paper a scalable architecture {{that can be used}} to add complex exception <b>handling</b> <b>mechanisms</b> in processor cores and how it can be used to extend the fixed set of exceptions found in microprocessor cores. This mechanism is based on the use of assertion libraries linked by an assertion processor to incorporate these new functionalities...|$|R
40|$|The {{goals of}} {{exception}} <b>handling</b> <b>mechanisms</b> are to make programs more reliable and robust. The integration of exception <b>handling</b> <b>mechanisms</b> with object-oriented languages raises some unique issues. The requirements of exception handling often conflict {{with some of}} the goals of object-oriented designs, such as supporting design evolution, functional specialization, and abstraction for implementation transparency. This paper demonstrates these conflicts, illustrates that the use of exception handling in object-oriented systems poses potential pitfalls, and suggests that their resolution {{is one of the first}} steps necessary to make exception handling robust in object-oriented designs and languages...|$|R
40|$|Abstract. Several {{concurrent}} programming languages and systems — e. g., MPI and SR — provide mechanisms to facilitate communication between one process {{and a group}} of others. One such mechanism is SR’s concurrent invocation statement (co statement). It specifies a group of operation invocations and normally terminates when all of its invocations have completed. To make the co statement more flexible, it can specify code in the invoker to execute as each invocation completes or to terminate the entire co statement before all of its invocations have completed. We have added an SR-like co statement to JR. Unlike SR, JR provides exception <b>handling</b> <b>mechanisms,</b> which are integrated with Java’s exception <b>handling</b> <b>mechanism.</b> However, JR needs additional mechanisms to deal with sources of asynchrony. The co statement introduces additional such sources of asynchrony for the invocations it initiates. This paper describes the design and implementation of an exception <b>handling</b> <b>mechanism</b> for JR’s co statement. ...|$|R
5000|$|When Schwarzman {{first began}} to lecture at magicians clubs in 1961, Dai Vernon said of him, [...] "In the last few years, you have {{certainly}} taken your place among the top flight card men in New York ... I think I'm familiar {{with the work of}} almost everyone interested in <b>card</b> <b>handling,</b> both professional and amateur, in this country. I unhesitatingly assert you can hold your own in the fastest company."http://liesofbrian.com/ARTICLES/howie.html ...|$|R
50|$|The {{different}} MX-handling {{behaviors of}} email servers (MTAs) often {{comes up in}} discussions of nolisting and similar anti-spam strategies that rely on manipulating the MX order and exercising MTA failure <b>handling</b> <b>mechanisms.</b>|$|R
40|$|In {{a remote}} {{handling}} area {{for research and}} analysis we {{have to pick up}} certain samples from that surrounding or place some devices for monitoring. An unmanned Robotic vehicle can serve this purpose, but a lot of obstacles will be present {{in the path of the}} robot so it has to be so smart enough to avoid such obstacles. We have designed the Remote <b>handling</b> <b>mechanism</b> which will help it to move to the spot without getting damaged and carry out the given task successfully. Different Remote <b>Handling</b> <b>Mechanisms</b> are conceptualized, studied & designed in SOLIDWORKS and a comparative studied is completed. ...|$|R
40|$|Graduation date: 1998 Exception {{handling}} is a {{programming language}} feature that can help increase the reliability of programs. However, not much {{work has been done}} on exception handling in visual programming languages. We present an approach for improving the exception <b>handling</b> <b>mechanism</b> in Forms/ 3, a declarative visual programming language based on the spreadsheet paradigm. We show how this approach can be added without sacrificing referential transparency and lazy evaluation in Forms/ 3. We then present a comparison of the Forms/ 3 exception <b>handling</b> <b>mechanism</b> with the mechanisms available in Java, C++, Prograph, Haskell and Microsoft Excel, based on their expressive powers...|$|R
30|$|Aerospike is, henceforth, an in-memory {{database}} with disk persistence, automatic data partitioning and synchronous replication, offering cross {{data center}} replication and configurability in the failover <b>handling</b> <b>mechanism,</b> preferring full consistency or high consistency [10, 52, 55].|$|R
40|$|Abstract—Cooperative visual {{modeling}} is {{more and}} more necessary in our complicated world. A collaborative environment which supports interactive operation and communication is required to increase work efficiency. We present a collaborative visual modeling framework which collaborative platform could be built on. On this platform, cooperation and communication is available for designers from different regions. This framework, which is different from other collaborative frameworks, contains a uniform message format, a message <b>handling</b> <b>mechanism</b> and other functions such as message pretreatment and Role-Communication-Token Access Control (RCTAC). We also show our implementation of this framework called Orchestra Designer, which support BPLE workflow modeling cooperatively online. Keywords—colllaborative framework; visual modeling; message <b>handling</b> <b>mechanism</b> J I...|$|R
5000|$|Rich Ferguson (born Richard Jeffrey Evans; December 1, 1970), aka [...] "The Ice Breaker", is an American magician. He is the {{producer}} {{and host of}} the Official Poker Chip Tricks and <b>Card</b> <b>Handling</b> DVD Series. Ferguson went to college for engineering and worked for United Parcel Service prior to becoming a full-time entertainer and creative consultant in 1997. Ferguson married Traci Adams August 8, 2008. Ferguson also has a YouTube channel with over a million subscribers.|$|R
5000|$|MS-WEBDAVE: Web Distributed Authoring and Versioning Error Extensions Protocol Specification. This SharePoint Front-End Protocol {{describes}} extended {{error codes}} and extended error <b>handling</b> <b>mechanism</b> specified in MS-WDV to enable compliant servers to report error condition details on a server response.|$|R
40|$|This {{deliverable}} specifies {{the traffic}} <b>handling</b> <b>mechanisms</b> {{for the second}} trial. Traffic handling in AQUILA is composed of four related mechanisms operating at different time scales: provisioning (days to weeks), resource pools (hours), admission control (seconds to minutes), traffic control (milliseconds) ...|$|R
5000|$|Learning：Combine [...] and [...] to {{generate}} a new knowledge point [...] Normally [...] should be around ，and the distance with [...] {{is related to the}} distance between [...] and , and boundary <b>handling</b> <b>mechanism</b> should be incorporated here to ensure that [...]|$|R
40|$|This paper {{proposes a}} novel {{architecture}} for video-rate stereo machine. It is unfeasible to directly implement a video-rate machine with occlusion <b>handling</b> <b>mechanism,</b> because the computational {{cost for the}} correspondence search is {{higher than that of}} a simple polynocular stereo algorithm without occlusion handling. Our idea is to integrate two algorithms withlwithout occlusion <b>handling</b> <b>mechanism</b> in a framework of video-rate stereo machine. By switching two depth maps using motion information, the video-rate depth map is output for dynamic regions, while for static regions is given the dense depth map with sharp object boundaries. We have implemented a prototype system by using a commercially available video-rate stereo machine and a PC with an occlusion detectable algorithm on it. ...|$|R
