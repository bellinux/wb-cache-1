77|42|Public
5000|$|Lambda {{lifting and}} closure are both methods for {{implementing}} block structured programs. It implements block structure by eliminating it. All functions are lifted {{to the global}} level. <b>Closure</b> <b>conversion</b> provides a [...] "closure" [...] which links the current frame to other frames. <b>Closure</b> <b>conversion</b> takes less compile time.|$|E
50|$|Lambda lifting is not {{the same}} as <b>closure</b> <b>conversion.</b> It {{requires}} all call sites to be adjusted (adding extra arguments to calls) and does not introduce a closure for the lifted lambda expression. In contrast, <b>closure</b> <b>conversion</b> does not require call sites to be adjusted but does introduce a closure for the lambda expression mapping free variables to values.|$|E
50|$|Closures {{are closely}} related to {{function}} objects; the transformation from the former to the latter is known as defunctionalization or lambda lifting; see also <b>closure</b> <b>conversion.</b>|$|E
5000|$|... #Subtitle level 2: <b>Closure</b> and <b>conversion</b> {{to low-income}} housing ...|$|R
5000|$|... #Caption: The Oldham Loop Line in 2009, {{shortly before}} <b>closure</b> and <b>conversion</b> to Metrolink; a [...] {{approaches}} Shaw and Crompton.|$|R
50|$|In early 2005, Governor George Pataki drafted Berger to Chairman of New York State Commission on Health Care Facilities in the 21st Century. This commission, (often {{described}} as the Berger Commission) resulted in the first major restructure of New York’s health-care delivery system. In its final report, issued in November 2006, it mandated consolidations, <b>closures,</b> <b>conversions</b> and large-scale restructurings. In the end, nine institutions closed and 48 restructured —in many cases {{over the objections of}} health care executives, politicians and community residents.|$|R
50|$|One {{complication}} to {{this basic}} {{idea is that}} function abstractions may reference escaping variables. In such situations, defunctionalization must be preceded by <b>closure</b> <b>conversion</b> (lambda lifting), so that any free variables of a function abstraction are passed as extra arguments to apply. In addition, if closures are supported as first-class values, it becomes necessary to represent these captured bindings by creating data structures.|$|E
40|$|We {{study the}} typing {{properties}} of <b>closure</b> <b>conversion</b> for simply-typed and polymorphic -calculi. Unlike most accounts of <b>closure</b> <b>conversion,</b> which only treat the untyped -calculus, we translate well-typed source programs to welltyped target programs. This allows later compiler phases {{to take advantage}} of types for representation analysis and tagfree garbage collection, and it facilitates correctness proofs. Our account of <b>closure</b> <b>conversion</b> for the simply-typed language takes advantage of a simple model of objects by mapping closures to existentials. <b>Closure</b> <b>conversion</b> for the polymorphic language requires additional type machinery, namely translucency in the style of Harper and Lillibridge's module calculus, to express the type of a closure. 1 Introduction <b>Closure</b> <b>conversion</b> [30, 35, 6, 16, 15, 2, 38, 8] is a program transformation that achieves a separation between code and data. Functions with free variables are replaced by code abstracted on an extra environment parameter. Free va [...] ...|$|E
40|$|An {{integral}} part of implementing functional languages is <b>closure</b> <b>conversion</b> [...] -the process of converting code with free variables into closed code and auxiliary data structures. <b>Closure</b> <b>conversion</b> has been extensively studied in this context, but also arises in languages with first-class objects. In fact, one variant of Java's inner classes are an example of objects {{that need to be}} closure converted, and the transformation for converting these inner classes into Java Virtual Machine classes is an example of <b>closure</b> <b>conversion.</b> This paper argues that a direct formulation of object <b>closure</b> <b>conversion</b> is interesting and gives further insight into general <b>closure</b> <b>conversion.</b> It presents a formal closure-conversion translation for a second-order object language and proves it correct. The translation and proof generalise to other object-oriented languages, and the paper gives some examples to support this statement. Finally, the paper discusses the well known connection between function clos [...] ...|$|E
50|$|After <b>closure</b> and <b>conversion</b> the {{building}} was reopened in 1955 by the ex BFI director James Quinn as the Paris Pullman Cinema which showed art-house films until its final closure and demolition in 1983.|$|R
50|$|Poplar Baths reopened in 1947 and {{continued}} {{to be used as}} a swimming facility, attracting on average 225,700 bathers every year between 1954 and 1959, before the facility's eventual <b>closure</b> and <b>conversion</b> to an industrial training centre in 1988.|$|R
40|$|We {{present a}} type-preserving {{compilation}} of Featherweight IL. Featherweight IL {{is a significant}} subset of MS IL which models new features including value classes and their interaction with reference classes. Our translation makes use of a high-level intermediate language called Functional Featherweight IL. The target language LFLINT is a low-level language which is close to machine level implementations. During the compilation, we preserve and further identify the basic block structures of the program, and perform CPS and <b>closure</b> <b>conversions.</b> We use memory based fixpoint to handle mutually recursive classes at compile time. Standard linking techniques can be applied for separate compilation. A type-preservation theorem for the formal translation is presented. In the long run, our work aims at supporting certifying compilation of high-level class-based languages. ...|$|R
40|$|A {{categorical}} and graphical {{treatment of}} <b>closure</b> <b>conversion</b> This paper gives a formal {{basis for the}} <b>closure</b> <b>conversion</b> phase of functional programming languages with imperative features, using a graphical semantics for the language. We present normal forms of graphs, one corresponding to procedural languages, and one corresponding to object-oriented languages. Using <b>closure</b> <b>conversion,</b> we can prove normalization results for both normal forms. Thus, we obtain sound algorithms for compiling the language into either procedural or object-oriented code. We discuss efficiency issues of the translation and suggest some improvements on the algorithm. ...|$|E
40|$|AbstractAn {{integral}} part of implementing functional languages is closure conversion—the process of converting code with free variables into closed code and auxiliary data structures. <b>Closure</b> <b>conversion</b> has been extensively studied in this context, but also arises in languages with first-class objects. In fact, one variant of Java's inner classes are an example of objects {{that need to be}} closure converted, and the transformation for converting these inner classes into Java Virtual Machine classes is an example of <b>closure</b> <b>conversion.</b> This paper argues that a direct formulation of object <b>closure</b> <b>conversion</b> is interesting and gives further insight into general <b>closure</b> <b>conversion.</b> It presents a formal closure-conversion translation for a second-order object language and proves it correct. The translation and proof generalise to other object-oriented languages, and the paper gives some examples to support this statement. Finally, the paper discusses the well known connection between function closures and single-method objects. This connection is formalised by showing that an encoding of functions into objects, object <b>closure</b> <b>conversion,</b> and various object encodings compose to give various closure-conversion translations for functions...|$|E
40|$|We {{study the}} typing {{properties}} of <b>closure</b> <b>conversion</b> for simply-typed and polymorphic -calculi. Unlike most accounts of <b>closure</b> <b>conversion,</b> which only treat the untyped -calculus, we translate well-typed source programs to well-typed target programs. This allows later compiler phases {{to take advantage}} of types for representation analysis and tag-free garbage collection, and it facilitates correctness proofs. Our account of <b>closure</b> <b>conversion</b> for the simply-typed language takes advantage of a simple model of objects by mapping closures to existentials. <b>Closure</b> <b>conversion</b> for the polymorphic language requires additional type machinery, namely translucency in the style of Harper and Lillibridge's module calculus, to express the type of a closure. 1 Introduction The usual operational models of programming languages based on the -calculus compute by substituting terms for variables in other terms. But substitution is expensive because it requires traversing and copying a term in order t [...] ...|$|E
50|$|The <b>closure</b> and <b>conversion</b> {{had been}} mooted for several years, and public outcry at losing such a {{spectacular}} venue - {{most notably in}} the pages of the London weekly listings magazine Time Out, in which Hellboy screenwriter Peter Briggs played a vocal role - delayed the process on at least one occasion.|$|R
50|$|Following <b>closure</b> for Metro <b>conversion,</b> {{the station}} was {{demolished}} and rebuilt in the standard Metro style. The NER footbridge survives, however, at Pickering on the North Yorkshire Moors Railway.|$|R
50|$|Oregon Governor Tom McCall halted {{expansion}} {{and created a}} task force to study options for replacing Harbor Drive with a public place. The task force recommended <b>closure</b> and <b>conversion</b> to a park. The opening of the Fremont Bridge in 1973, which completed the Interstate 405 resulted in a second Interstate through the downtown area, but usefully resulted in reduced traffic levels on Harbor Drive.|$|R
40|$|The {{views and}} {{conclusions}} contained {{in this document}} {{are those of the}} authors and should not be interpreted as representing o cial policies, either expressed or implied, of the Advanced Research Projects Agency or the U. S. Government. Any opinions, ndings, and conclusions or recommendations expressed in this material are those of the We study the typing properties of <b>closure</b> <b>conversion</b> for simply-typed and polymorphic-calculi. Unlike most accounts of <b>closure</b> <b>conversion,</b> which only treat the untyped-calculus, we translate well-typed source programs to well-typed target programs. This allows later compiler phases to take advantage of types for representation analysis and tag-free garbage collection, and it facilitates correctness proofs. Our account of <b>closure</b> <b>conversion</b> for the simply-typed language takes advantage of a simple model of objects by mapping closures to existentials. <b>Closure</b> <b>conversion</b> for the polymorphic language requires additional type machinery, namely translucency in the style of Harper and Lillibridge's module calculus, to express the type of a closure...|$|E
40|$|Defunctionalization is {{a program}} {{transformation}} that aims to turn a higher-order functional program into a first-order one, that is, to eliminate the use of functions as first-class values. Its purpose is thus identical to that of <b>closure</b> <b>conversion.</b> It di#ers from <b>closure</b> <b>conversion,</b> however, by storing a tag, instead of a code pointer, within every closure. Defunctionalization has been used both as a reasoning tool and as a compilation technique...|$|E
40|$|This paper gives {{a formal}} {{basis for the}} <b>closure</b> <b>conversion</b> phase of {{functional}} programming languages with imperative features, using a graphical semantics for the language. We present normal forms of graphs, one corresponding to procedural languages, and one corresponding to object-oriented languages. Using <b>closure</b> <b>conversion,</b> we can prove normalization results for both normal forms. Thus, we obtain sound algorithms for compiling the language into either procedural or object-oriented code. We discuss efficiency issues of the translation and suggest some improvements on the algorithm. 1 Introduction This paper describes a categorical formalization of {{an important step in}} compiling higher-order languages: <b>closure</b> <b>conversion.</b> <b>Closure</b> <b>conversion</b> is a compilation step which takes nested procedures such as: proc f (x : X 1) : X 2 { rec g; proc g (y : Y 1) : Y 2 { return G (g, x, y); } return F (g, x); } and lifts the nested procedures up to top level: rec g_lift; proc g_lift (x : X 1, y : Y 1 [...] ...|$|E
50|$|Opened in 1892, the tramway has waxed and waned {{over the}} years. Currently, it {{comprises}} only one 8.85 km long interurban line, which runs via Auvernier and Colombier to Boudry, and is designated as line 5. All of the system's urban tram lines {{were converted to}} trolleybuses, the last such <b>closure</b> and <b>conversion</b> taking place in 1976, leaving just interurban line 5 (present line 215).|$|R
50|$|A local {{campaign}} to Save Our Civic made up {{from members of}} the Amateur Dramatic Societies in Bedford and the surrounding area and other users of the Civic Theatre opposed the <b>closure</b> and <b>conversion</b> of the Theatre. They were supported by Patrick Hall, the town's former Member of Parliament, and Richard Fuller the current MP. However the Civic Theatre was closed in 2012, and the building now houses a Customer Service Centre for Bedford Borough Council.|$|R
50|$|The church, rebuilt in the 19th century, {{contains}} some original features {{and a fine}} Elizabethan heraldic memorial. Lilley lies within the parliamentary constituency of Hitchin and Harpenden, currently represented by Peter Lilley. Until recently it had two public houses, the Silver Lion and the Lilley Arms. The recent <b>closure</b> and <b>conversion</b> of the Silver Lion leaves the Lilley Arms as the village's only pub. The low-lying land {{to the south of}} Lilley is called Lilley Bottom.|$|R
40|$|AbstractThis paper gives {{a formal}} {{basis for the}} <b>closure</b> <b>conversion</b> phase of {{functional}} programming languages with imperative features, using a graphical semantics for the language. We present normal forms of graphs, one corresponding to procedural languages, and one corresponding to object-oriented languages. Using <b>closure</b> <b>conversion,</b> we can prove normalization results for both normal forms. Thus, we obtain sound algorithms for compiling the language into either procedural or object-oriented code. We discuss efficiency issues of the translation and suggest some improvements on the algorithm...|$|E
40|$|<b>Closure</b> <b>conversion</b> is {{a program}} {{transformation}} used by compilers to separate code from data. Previous accounts of <b>closure</b> <b>conversion</b> use only untyped target languages. Recent studies show that translating to typed target languages is a useful methodology for building compilers, because a compiler can use the types to implement efficient data representations, calling conventions, and tag-free garbage collection. Furthermore, type-based translations facilitate security and debugging through automatic type checking, as well as correctness arguments through the method of logical relations. We present <b>closure</b> <b>conversion</b> as a type-directed, and type-preserving translation for both the simply-typed and the polymorphic -calculus. Our translations {{are based on a}} simple "closures as objects" principle: higher-order functions are viewed as objects consisting of a single method (the code) and a single instance variable (the environment). In the simply-typed case, the Pierce-Turner model of object [...] ...|$|E
40|$|This paper {{presents}} a new <b>closure</b> <b>conversion</b> algorithm for simply-typed languages. We have have implemented the algorithm {{as part of}} MLton, a whole-program compiler for Standard ML (SML). MLton first applies all functors and eliminates polymorphism by code duplication to produce a simply-typed program. MLton then performs <b>closure</b> <b>conversion</b> to produce a first-order, simply-typed program. In contrast to typical functional language implementations, MLton performs most optimizations on the first-order language, after <b>closure</b> <b>conversion.</b> There are two notable contributions of our work: 1. The translation uses a general flow-analysis framework which includes OCFA. The types in the target language fully capture {{the results of the}} analysis. MLton uses the analysis to insert coercions to translate between different representations of a closure to preserve type correctness of the target language program. 2. The translation is practical. Experimental results over a range of benchmarks [...] ...|$|E
50|$|Some Chinese {{elites in}} Singapore had criticized that the Mandarin {{standard}} of Chinese Singaporean has dropped greatly {{due to the}} <b>closure</b> or subsequent <b>conversion</b> of Chinese-medium schools to English-medium schools in the 1980s. Others attributed the drop in standard {{to the lack of}} learning Chinese literature in schools.|$|R
50|$|The Upfield {{line has}} one of the least-frequent peak-period {{services}} in Melbourne's railway network, with trains operating every 18 minutes during the morning peak, and 20 minutes during the remainder of the day on weekdays (including peak periods) and weekends, and every 30 minutes during early morning, Sundays and throughout the later evening through to the last train. Until the late 1990s, when the line was under threat of <b>closure</b> or <b>conversion</b> to light rail, late evening and Sunday services were provided by nearby tram lines and a bus service that connected {{with the end of the}} nearby tram line.|$|R
50|$|Providence Chapel is {{a former}} Calvinistic Baptist place of worship {{in the village of}} Hadlow Down in Wealden, one of six local {{government}} districts in the English county of East Sussex. Although built in 1849, the chapel can trace its origins to the founding in 1824 of an Independent Baptist place of worship in the village (pre-dating the local Anglican church by 12 years). The new building was in religious use for nearly 150 years, but storm damage led to its <b>closure</b> and <b>conversion</b> into a private dwelling in 1993—although its former graveyard survives. The chapel is a Grade II Listed building.|$|R
40|$|We {{describe}} how to separately analyze a program context and a term substitution in an untyped higher-order language, {{in order to}} perform selective <b>closure</b> <b>conversion.</b> Each node of the parse trees for the context and the substitution is annotated by solving constraints; the solutions may be considered regular trees. A translation merges the separate annotations into annotations for the substituted context. Substituting the transformed term into the transformed context is equivalent to transforming the substituted context. Using earlier results for selective <b>closure</b> <b>conversion,</b> the separate transformation is shown correct. ...|$|E
40|$|<b>Closure</b> <b>conversion</b> is {{a program}} {{transformation}} widely used in modern compilers. For {{a variety of reasons}} it is desirable that compilation preserve types. We consider a <b>closure</b> <b>conversion</b> mapping e to O[e] which is naive in the sense that O[e] does not contain pack or unpack programming constructs. The main theorem states that, for this fixed notion of <b>closure</b> <b>conversion,</b> any "normal" type system T for the lambda calculus can be mechanically converted to an object-oriented type system T' such that for any lambda term e we have that e is typable by T iff O[e] is typable by T'. Simple types, partial types, union types, intersection types, HindleyMilner types and system F are all normal. The main theorem can also be interpreted as a formalization of the common claim that objects subsume procedures and that first-order object-oriented programs are as expressive as the lambda calculus. 1 Introduction C++ and Java, the most widely used object-oriented programming languages, do n [...] ...|$|E
40|$|<b>Closure</b> <b>conversion</b> is a {{critical}} program transformation for higher-order languages that eliminates lexically nested, first-class functions or procedures. In particular, <b>closure</b> <b>conversion</b> translates each function definition f into a closure [...] a data structure consisting of a pointer to closed code and another data structure which represents the environment or context of the function. The code abstracts the arguments of f {{as well as the}} free variables of f, and the environment provides the values for the free variables of f. Function application is translated to a sequence which invokes the code of the function's closure on the environment of the closure and the arguments. Since the code is closed and separated from the data which it manipulates, it may be defined [...] ...|$|E
50|$|The {{distribution}} of Christian {{literature and the}} evangelizing of Muslims are prohibited by law. Bibles are rarely printed or distributed. State oppression has included the arrest of Mauritanian Christians due to their religious beliefs and the <b>closure</b> of churches. <b>Conversion</b> from Islam is punishable by death and other religions are not recognized by the state.|$|R
2500|$|Providence Chapel is {{a former}} Calvinistic Baptist place of worship {{in the village of}} Hadlow Down in Wealden, one of six local {{government}} districts in the English county of East Sussex. [...] Although built in 1849, the chapel can trace its origins to the founding in 1824 of an Independent Baptist place of worship in the village (pre-dating the local Anglican church by 12 years). [...] The new building was in religious use for nearly 150 years, but storm damage led to its <b>closure</b> and <b>conversion</b> into a private dwelling in 1993—although its former graveyard survives. [...] The chapel is a Grade II Listed building.|$|R
30|$|A myoma {{was defined}} as subserous if the {{greatest}} diameter lay outside the uterine contour; the fibroid was also judged intramural in cases of marginal submucosal extension, provided that the greatest diameter was outside the uterine cavity. Moreover, a tumour was classified {{with respect to the}} uterine body as anterior, fundal, or posterior. The presence of other pathology and associated operative procedures were noted. Laparoscopic-assisted myomectomy {{was defined as}} the use of mini-laparotomy (< 5  cm) to perform either enucleation of myoma or uterine <b>closure</b> [11]. <b>Conversion</b> to laparotomy was defined as the use of laparotomy before the end of cleavage of all the myomas.|$|R
