10000|6173|Public
5|$|After DNA damage, {{cell cycle}} checkpoints are activated. <b>Checkpoint</b> {{activation}} pauses the cell cycle {{and gives the}} cell time {{to repair the damage}} before continuing to divide. DNA damage checkpoints occur at the G1/S and G2/M boundaries. An intra-S <b>checkpoint</b> also exists. <b>Checkpoint</b> activation is controlled by two master kinases, ATM and ATR. ATM responds to DNA double-strand breaks and disruptions in chromatin structure, whereas ATR primarily responds to stalled replication forks. These kinases phosphorylate downstream targets in a signal transduction cascade, eventually leading to cell cycle arrest. A class of <b>checkpoint</b> mediator proteins including BRCA1, MDC1, and 53BP1 has also been identified. These proteins seem to be required for transmitting the <b>checkpoint</b> activation signal to downstream proteins.|$|E
5|$|The largest was at Helmstedt-Marienborn on the Hanover–Berlin autobahn (A 2), {{through which}} 34.6million {{travellers}} passed between 1985–89. Codenamed <b>Checkpoint</b> Alpha, {{this was the}} first of three Allied checkpoints on the road to Berlin. The others were <b>Checkpoint</b> Bravo, where the autobahn crossed from East Germany into West Berlin, and most famous of all, <b>Checkpoint</b> Charlie, the only place where non-Germans could cross from West to East Berlin.|$|E
5|$|At {{least four}} of the gunmen were {{soldiers}} from the UDR, the locally recruited infantry regiment of the British Army in Northern Ireland. Martin Dillon suggested in The Dirty War, that at least five serving UDR soldiers were present at the <b>checkpoint.</b> All the gunmen {{were members of the}} UVF's Mid-Ulster Brigade, and had been lying in wait to ambush the band, having set up the <b>checkpoint</b> just minutes before.|$|E
40|$|Abstract — Performance of a <b>checkpointing</b> based {{multiple}} {{fault tolerance}} is low. The main reason is overheads associate with <b>checkpointing.</b> A <b>checkpointing</b> algorithm {{can be improved}} by improved storing strategy and <b>checkpointing</b> scheduling. Improved storage strategy and <b>checkpointing</b> scheduling will reduce the overheads associated with <b>checkpointing.</b> Performance and efficiency is most desirable feature of recovery based on <b>checkpointing.</b> In this paper important critical issues involved in fast and efficient recovery are discussed based on <b>checkpointing.</b> Impact of each issue on performance of <b>checkpointing</b> based recovery is also discussed. Relationships among issues are also explored. Finally comparisons of important issues are done between coordinated <b>checkpointing</b> and uncoordinated <b>checkpointing...</b>|$|R
40|$|Efficient <b>checkpointing</b> and {{resumption}} of multicomputer applications is essential if multicomputers are to support time-sharing and the automatic {{resumption of}} jobs after a system failure. We present a <b>checkpointing</b> scheme that is transparent, imposes overhead only during <b>checkpoints,</b> requires minimal message logging, {{and allows for}} quick resumption of execution from a <b>checkpointed</b> image. Furthermore, the <b>checkpointing</b> algorithm allows each processor p to continue running the application being <b>checkpointed</b> except {{during the time that}} p is actively taking a local snapshot, and requires no global stop or freeze of the multicomputer. Since <b>checkpointing</b> multicomputer applications poses requirements different from those posed by <b>checkpointing</b> general distributed systems, existing distributed <b>checkpointing</b> schemes are inadequate for multicomputer <b>checkpointing.</b> Our <b>checkpointing</b> scheme makes use of special properties of wormhole routing networks to satisfy this new set of requirements. Ke [...] ...|$|R
40|$|This survey covers {{backward}} {{error recovery}} techniques for distributed systems specially the distributed mobile systems. Backward error recovery protocols have been classified into user triggered <b>checkpointing</b> and transparent <b>checkpointing.</b> Transparent <b>checkpointing</b> can be uncoordinated <b>checkpointing,</b> Coordinated <b>checkpointing,</b> Quasi Synchronous or communication-induced <b>checkpointing</b> and Message Logging based <b>Checkpointing.</b> Through out this survey we, highlight the research {{issues that are}} at the core of backward error recovery and present the solutions that currently address them...|$|R
5|$|In 1996, {{the trail}} was rerouted through Pelly Crossing and a <b>checkpoint</b> was added there, and the Lake Laberge stretch was {{replaced}} by a route through Braeburn and along the Dawson-Whitehorse Overland Trail. In 1997, mushers were routed through the Chena River Lakes Flood Control Project and to the Alaska town of North Pole before continuing on to Fairbanks. The North Pole loop was removed before the 2009 race, and mushers were directed through Two Rivers instead. Starting in the 2010 race, the Mile 101 location was upgraded from a dog drop to a full-fledged <b>checkpoint.</b> In the past several races, the Two Rivers <b>checkpoint</b> has changed locations annually: from a lodge to a campground, and then to a gravel pit in 2011.|$|E
5|$|Landside {{facilities}}, or {{the facilities}} located outside the TSA security <b>checkpoint,</b> include check-in, car rental, baggage claim and a taxi hire. The upper-level {{has a small}} cafe and newsstand. The upper-level Airside, or the facilities located inside the TSA security <b>checkpoint,</b> has seven gates (Gates 1–6 and 5A), and a small cafe area. Additionally, the entire terminal has been a free wi-fi hotspot since April 2, 2003, when the service was initiated.|$|E
5|$|On 24 August 1975, Catholic civilians Colm McCartney and Sean Farmer {{were stopped}} {{in their car}} at another fake British Army <b>checkpoint</b> at Altnamachin (near Newtownhamilton). They were driving home from a Gaelic {{football}} match in Dublin. The two men were found shot dead nearby. Earlier that night, three RUC officers in an unmarked car had been stopped at the same <b>checkpoint</b> but allowed through. However, the officers suspected that the <b>checkpoint</b> was fake. After receiving radio confirmation {{that there were no}} authorised checkpoints in the area that night, they reported the incident and requested help from the British Army to investigate it, but no action was taken. RUC officer John Weir claims that UDR corporal Robert McConnell was involved in the attack.|$|E
40|$|<b>Checkpointing</b> {{is one of}} the {{commonly}} used techniques to provide fault tolerance in distributed systems so that the system can operate even if one or more components have failed. However, mobile computing systems are constrained by low bandwidth, mobility, lack of stable storage, frequent disconnections and limited battery life. Hence <b>checkpointing</b> protocols which have fewer <b>checkpoints</b> are preferred in mobile environment. In this paper, we propose a minimum-process coordinated <b>Checkpointing</b> algorithm for <b>checkpointing</b> deterministic distributed applications on mobile systems. We eliminate useless <b>checkpoints</b> as well as blocking of processes during <b>checkpoints</b> at the cost of logging anti-messages of very few messages during <b>Checkpointing.</b> We also try to minimize the loss of <b>checkpointing</b> effort. 1...|$|R
40|$|To {{minimize}} work lost due to system failures, large parallel applications perform periodic <b>checkpoints.</b> These <b>checkpoints</b> {{are typically}} inserted manually by application programmers, resulting in synchronous <b>checkpoints,</b> or <b>checkpoints</b> that {{occur at the}} same program point in all processes. While this solution is tenable for current systems, it will become problematic for future supercomputers that have many {{tens of thousands of}} nodes, because contention for both the network and file system will grow. This paper shows that staggered checkpoints—globally consistent <b>checkpoints</b> in which processes perform <b>checkpoints</b> at different points in the code—can significantly reduce network and file system contention. We describe a compiler-based approach for inserting staggered <b>checkpoints,</b> and we show, using trace-driven simulation, that staggered <b>checkpointing</b> is 23 times faster that synchronous <b>checkpointing.</b> 1...|$|R
40|$|Diskless <b>Checkpointing</b> is a {{technique}} for <b>checkpointing</b> the state of a long-running computation on a distributed system without relying on stable storage. As such, it eliminates the performance bottleneck of traditional <b>checkpointing</b> on distributed systems. In this paper, we motivate diskless <b>checkpointing</b> and present the basic diskless <b>checkpointing</b> scheme along with several variants for improved performance. The performance of the basic scheme and its variants is evaluated on a high-performance network of workstations and compared to traditional disk-based <b>checkpointing.</b> We conclude that diskless <b>checkpointing</b> is a desirable alternative to disk-based <b>checkpointing</b> that can improve the performance of distributed applications {{in the face of}} failures...|$|R
5|$|On {{the morning}} of September 11, 2001, the five hijackers arrived at Washington Dulles International Airport. At 07:15, Khalid al-Mihdhar and Majed Moqed checked in at the American Airlines ticket counter for Flight 77, {{arriving}} at the passenger security <b>checkpoint</b> {{a few minutes later}} at 07:18. Both men set off the metal detector and were put through secondary screening. Moqed continued to set off the alarm, so he was searched with a hand wand. The Hazmi brothers checked in together at the ticket counter at 07:29. Hani Hanjour checked in separately and arrived at the passenger security <b>checkpoint</b> at 07:35. Hanjour was followed minutes later at the <b>checkpoint</b> by Salem and Nawaf al-Hazmi, who also set off the metal detector's alarm. The screener at the <b>checkpoint</b> never resolved what set off the alarm. As seen in security footage later released, Nawaf Hazmi appeared to have an unidentified item in his back pocket. Utility knives up to four inches were permitted at the time by the Federal Aviation Administration (FAA) as carry-on items. The passenger security <b>checkpoint</b> at Dulles International Airport was operated by Argenbright Security, under contract with United Airlines.|$|E
5|$|Opinions on the game's mid-level <b>checkpoint</b> {{system were}} mixed. Matt Cullen of Canadian Online Gaming {{noted that the}} checkpoints meant that players were not sent too far back into the level after each death, saving time. Official Xbox Magazine's Taylor Cocke, however, noted that the checkpoints save players' point progress, meaning that players would have to start the level over if their {{performance}} wasn't good enough before they reached the <b>checkpoint.</b>|$|E
5|$|Blackwater Worldwide, {{acting as}} an agent of the United States, {{deployed}} CS in the Iraq War from a helicopter hovering over a <b>checkpoint</b> in the Green Zone in Baghdad.|$|E
40|$|A "consistent checkpointing" {{algorithm}} saves {{a consistent}} {{view of the}} distributed system state on stable storage. The loss of computation upon a failure can be bounded by taking consistent <b>checkpoints</b> with adequate frequency. The traditional consistent <b>checkpointing</b> algorithms require the different processes to save their state {{at about the same}} time. This causes contention for the stable storage, potentially resulting in large overheads. Staggering the <b>checkpoints</b> taken by various processes can reduce the overhead. Some techniques for staggering the <b>checkpoints</b> have been proposed previously [9], however, these techniques result in "limited staggering" in that not all processes' <b>checkpoints</b> can be staggered. Ideally, one would like to stagger the <b>checkpoints</b> arbitrarily. This report presents a simple approach to arbitrarily stagger the <b>checkpoints.</b> Our approach requires that the processes take consistent logical <b>checkpoints,</b> as compared to consistent physical <b>checkpoints</b> enforced by e [...] ...|$|R
40|$|As {{a widely}} used {{fault-tolerance}} technique, <b>checkpointing</b> {{can be divided}} into three categories: independent <b>checkpointing,</b> coordinated <b>checkpointing,</b> and communication-induced <b>checkpointing</b> (CIC). Independent <b>checkpointing</b> and coordinated <b>checkpointing</b> have been widely used in the design of fault-tolerant mobile agent systems, but CIC has not attracted much attention. CIC is flexible, efficient, and scalable, which is desirable for mobile agent (MA) systems. Furthermore, CIC can be well integrated with independent <b>checkpointing</b> for reliable MA migrations. In this paper, we propose two CIC-based <b>checkpointing</b> algorithms for MA systems. The Basic-CIC algorithm is developed by applying the classic CIC technique to MA systems, while the deferred message processing-based CIC (DM-CIC) improves the time efficiency by deciding when to make the forced <b>checkpointing.</b> Simulation results show that DM-CIC is stable and can help the system recover fast from failures. Department of Computin...|$|R
40|$|The {{overhead}} {{of saving}} <b>checkpoints</b> to stable storage {{is the dominant}} performance cost in <b>checkpointing</b> systems. In this paper, we present a complete study of compressed differences, a new algorithm for fast incremental <b>checkpointing.</b> Compressed differences reduce the overhead of <b>checkpointing</b> by saving only the words that have changed in the current <b>checkpointing</b> interval while monitoring those changes using page protection. We describe two <b>checkpointing</b> algorithms based on compressed differences, called standard and online compressed differences. These algorithms are analyzed in detail to determine the conditions that are necessary for them to improve the performance of <b>checkpointing.</b> We then present results of implementing these algorithms in a uniprocessor <b>checkpointing</b> system. These results both corroborate the analysis and show that in this environment, standard compressed differences almost invariably improve the performance of both sequential and incremental <b>checkpointing...</b>|$|R
5|$|The four hijackers {{checked in}} for the flight between 07:03 and 07:39Eastern Time. At 07:03, Ghamdi checked in without any luggage while Nami checked in two bags. At 07:24, Haznawi checked in one bag and at 07:39, Jarrah checked in without any luggage. Haznawi was the only hijacker {{selected}} for extra scrutiny by the Computer Assisted Passenger Prescreening System (CAPPS). His checked bag underwent extra screening for explosives, with no extra scrutiny required by CAPPS at the passenger-security <b>checkpoint.</b> None of the security <b>checkpoint</b> personnel reported anything unusual about the hijackers.|$|E
5|$|DNA damage <b>checkpoint</b> is {{a signal}} {{transduction}} pathway that blocks cell cycle progression in G1, G2 and metaphase and slows down {{the rate of}} S phase progression when DNA is damaged. It leads to a pause in cell cycle allowing the cell time {{to repair the damage}} before continuing to divide.|$|E
5|$|During the deportations, {{he tried}} to secure more work permits from the Germans but they refused to issue them. He {{attempted}} to protect those he could. During the Aktion on 3–5 November, in which the paperwork of everyone in the ghetto was checked, holders of work passes– which allowed the holder to protect a spouse and only two children under 16– were checked and anyone not listed on someone's work permit was sent to Ponary. At one point, while Gens was checking permits, a family with three children went through the <b>checkpoint,</b> and Gens pulled aside the third child. Shortly afterwards, a family with only one child passed through the <b>checkpoint.</b> Gens began berating the father for losing track of his second child, and pushed the third child from the first family into the second family. This incident took place {{under the supervision of}} German officials, who did not intervene.|$|E
40|$|Abstract- In this paper, we have {{proposed}} a new <b>checkpointing</b> / recovery algorithm for ring network architecture. The <b>checkpointing</b> algorithm produces a consistent set of <b>checkpoints</b> in a uni-directional network {{with the help of}} few control messages and also avoids the overhead of taking temporary <b>checkpoints</b> unlike most other existing <b>checkpointing</b> algorithms. The number of interrupts to the processes is also less that ensures fast termination of the <b>checkpointing</b> algorithm as well as the application program. The main features of the recovery algorithm are that it is a single step, non-blocking algorithm, with very few interrupts to the processes. Keywords: Ring Network, <b>Checkpointing,</b> Recovery, Non-blocking. 1...|$|R
5|$|Where society's need is great, {{no other}} {{effective}} means of meeting the need is available, and intrusion on people's privacy is minimal, certain discretionless <b>checkpoints</b> toward that end may briefly detain motorists. In United States v. Martinez-Fuerte (1976), the Supreme Court allowed discretionless immigration <b>checkpoints.</b> In Michigan Dept. of State Police v. Sitz (1990), the Supreme Court allowed discretionless sobriety <b>checkpoints.</b> In Illinois v. Lidster (2004), the Supreme Court allowed focused informational <b>checkpoints.</b> However, in City of Indianapolis v. Edmond (2000), the Supreme Court ruled that discretionary <b>checkpoints</b> or general crime-fighting <b>checkpoints</b> are not allowed.|$|R
40|$|Cooperative <b>checkpointing</b> {{increases}} {{the performance and}} robustness of a system by allowing <b>checkpoints</b> requested by applications to be dynamically skipped at runtime. A robust system must be more than merely resilient to failures; it must be adaptable and flexible {{in the face of}} new and evolving challenges. A simulation-based experimental analysis using both probabilistic and harvested failure distributions reveals that cooperative <b>checkpointing</b> enables an application to make progress under a wide variety of failure distributions that periodic <b>checkpointing</b> lacks the flexibility to handle. Cooperative <b>checkpointing</b> can be easily implemented on top of existing application-initiated <b>checkpointing</b> mechanisms and may be used to enhance other reliability techniques like QoS guarantees and fault-aware job scheduling. The simulations also support a number of theoretical predictions related to cooperative <b>checkpointing,</b> including the non-competitiveness of periodic <b>checkpointing...</b>|$|R
5|$|Midtown Madness {{features}} 4 single-player modes: Blitz, Circuit, <b>Checkpoint,</b> and Cruise. In Blitz, {{the player}} must swing through 3 checkpoints {{and drive to}} the finish line within a time limit. The Circuit mode curtains off most of the city to resemble race tracks and pits the player against other cars. The <b>Checkpoint</b> mode combines the features of Blitz and Circuit has the player race against other cars to a destination—but also adds the complication of other traffic, such as police cars and pedestrians. In the Cruise mode, the player can simply explore the city at their own pace. All of these modes except Cruise are divided into missions; completing one unlocks the next. Environmental conditions that traverse all modes include weather (sunny, rainy, cloudy, and snowy), time of day (sunrise, afternoon, sunset, and night-time), and the density of pedestrians, traffic, and police vehicles. The heads-up display includes, alongside information about the race, a detailed map, but this display can be turned off.|$|E
5|$|Russia {{continued}} {{to maintain a}} single <b>checkpoint</b> in the border village of Perevi. On 12 December, Russian forces withdrew; eight hours later they re-entered the village and Georgian police withdrew after the Russians threatened to fire. Russian forces then set up three checkpoints in the village. On 18 October 2010 all Russian troops in Perevi withdrew to South Ossetia and a Georgian Army unit moved in.|$|E
5|$|The {{race was}} planned {{to begin at}} 2:30 AM local time by the organizers, but due to large crowds and some {{participants}} arriving late, the race officially started at 2:43. The riders formed three groups on the road, of which the first one contained twenty riders when it passed through the <b>checkpoint</b> in Brescia. The group further thinned to sixteen {{by the time it}} reached Verona, and to eleven when it arrived at the <b>checkpoint</b> in Vicenza. From the group, the sprint to the finish line was mainly contested by Giovanni Micheletto and Giuseppe Santhià, of which the former managed to win the leg. With Atala-Dunlop's Micheletto winning the stage and his teammate Carlo Galetti finishing third, Atala-Dunlop acquired seven points and the lead in the race.|$|E
40|$|Abstract. Two {{opposite}} approaches were {{proposed to}} address some scalability problem resulting from coordinated checkpointing's synchronization during failure-free operation: minimizing the number of <b>checkpointing</b> participants and having the <b>checkpointing</b> process non-blocking. However, these previous approaches, oblivious to the underlying network, may not fundamentally provide any breakthrough for ensuring high scalability required in very large-scale P 2 P-based systems. This paper proposes a non-blocking coordinated <b>checkpointing</b> protocol to significantly reduce <b>checkpointing</b> synchronization overhead by structuring the peer-to-peer network into a set of groups according to a particular criterion. In this protocol, among processes in a group, one is designated as representative with the following special roles, intra-group and inter-group <b>checkpointing</b> coordination. Intra-group <b>checkpointing</b> coordination addresses the <b>checkpointing</b> procedure among processes within a group. On the other hand, inter-group <b>checkpointing</b> coordination is performed only among representatives. Thanks to this beneficial feature, the proposed protocol may considerably {{reduce the number of}} <b>checkpointing</b> control messages routed on core networks compared with the existing ones...|$|R
40|$|International audienceThis paper {{sets out}} to present the {{integration}} of the scheduling of deadline-constrained <b>checkpointing</b> in a batch scheduler for dynamic environments such as virtual clusters. The <b>checkpointing</b> scheduler implemented focuses on the parallel <b>checkpointing</b> on a unique server of long-running independent applications in a virtual cluster made up of free resources for long periods of an intranet network, assuming that the resources must be released within a delay T. As parallel <b>checkpointing</b> on a unique server can face bandwidth constraints, the <b>checkpointing</b> scheduler uses a func tion that gives the aggregated bandwidth suitable for the parallel <b>checkpointing</b> of m applications of aggregated size V to solve the deadline-constrained <b>checkpointing</b> problem within the deadline T. Specifically, we present {{the integration of the}} <b>checkpointing</b> scheduler in the batch scheduler OAR. This implementation uses data from the OAR database for the <b>checkpointing</b> scheduling. It is portable and can be easily modified to interact with any other batch scheduler, provided that the structure of the database is known and an estimator of the bandwidth of the system suitable for parallel <b>checkpointing</b> available. Experimental results obtained on a virtual cluster built on GRID 5000 show that the implementation of the <b>checkpointing</b> scheduler does not induce a significant overhead on <b>checkpointing</b> mechanisms. As a consequence, this work aims at providing HPC platforms for a tool to enhance the quality of services offered to end users...|$|R
25|$|According to B'Tselem, {{there were}} 99 fixed <b>checkpoints</b> in the West Bank in September 2013, in {{addition}} to the 174 surprise flying <b>checkpoints.</b> In August 2013, 288 flying <b>checkpoints</b> were counted.|$|R
5|$|The {{traditional}} {{starting line}} is in Whitehorse on First Avenue, near the former White Pass and Yukon Route train station, which today houses the Canadian offices of Yukon Quest International. Shortly {{after leaving the}} starting line, racers follow the frozen Yukon River north out of town. Crossing onto the Takhini River, mushers follow it north to the Klondike-era Overland Trail. Racers take the trail to Braeburn Lodge, the first <b>checkpoint.</b>|$|E
5|$|Upon {{arrival at}} Los Angeles Airport, Cobb passes the U.S. {{immigration}} <b>checkpoint</b> and Professor Miles accompanies {{him to his}} home. Using his totem—a spinning top that spins indefinitely in a dream world but falls over in reality—Cobb conducts a test {{to prove that he}} is indeed in the real world, but he ignores its result and instead joins his children in the garden.|$|E
5|$|AQI {{launched}} {{a series of}} attacks in Jordan in late 2005 that were partially based out of Anbar. The group had already unsuccessfully attacked the Trebil <b>checkpoint</b> along the Jordanian border with Anbar Province in December 2004. In August, two US warships in Aqaba, the USS Kearsarge and the USS Ashland, were attacked with rockets; the cell which carried out the attacks then fled into Iraq. On 9 November, three Iraqis from Anbar carried out suicide bombings in Amman, killing 60. A fourth bomber, also from Anbar, was caught.|$|E
40|$|In {{this paper}} we present compiler-assisted <b>checkpointing,</b> a new {{technique}} which uses static program analysis to optimize the performance of <b>checkpointing.</b> We achieve this performance gain using libckpt, a <b>checkpointing</b> library which implements memory exclusion {{in the context of}} user-directed <b>checkpointing,</b> The correctness of user-directed <b>checkpointing</b> is dependent on program analysis and insertion of memory exclusion calls by the programmer. With compilerassisted <b>checkpointing,</b> this analysis is automated by a compiler or preprocessor. The resulting memory exclusion calls will optimize the performance of <b>checkpointing,</b> and are guaranteed to be correct. We provide a full description of our program analysis techniques and present detailed examples of analyzing three fortran programs. The results of these analyses have been implemented in libckpt, and we present the performance improvements that they yield. 1 Introduction <b>Checkpointing</b> is an important method for providing fault tolerance [...] ...|$|R
40|$|In <b>checkpointing</b> schemes with task duplication, <b>checkpointing</b> serves two purposes: {{detecting}} faults {{by comparing}} the processors' states at <b>checkpoints,</b> and reducing fault recovery time by supplying a safe point to rollback to. In this paper, we show that, by tuning the <b>checkpointing</b> schemes to a given architecture, {{a significant reduction in}} the execution time can be achieved. The main idea is to use two types of checkpoints: compare-checkpoints (comparing the states of the redundant processes to detect faults) and store-checkpoints (storing the states to reduce recovery time). With two types of <b>checkpoints,</b> we can use both the comparison and storage operations in an efficient way and improve the performance of <b>checkpointing</b> schemes. Results we obtained show that, in some cases, using compare and store <b>checkpoints</b> can reduce the overhead of DMR <b>checkpointing</b> schemes by as much as 30 percent...|$|R
40|$|Incremental <b>checkpointing,</b> {{which is}} {{intended}} to minimize <b>checkpointing</b> overhead, saves only the modified pages of a process. This means that in incremental <b>checkpointing,</b> the time consumed for <b>checkpointing</b> varies according {{to the amount of}} modified pages. Thus, efficient intervals of <b>checkpointing</b> have to be determined on run-time of a process. In this paper, we present an efficient and adaptive page-level incremental check-pointing facility that is based on the taking point decision mechanism for minimizing the total execution time. Our simulation results show that the expected execution time was significantly reduced compared with existing periodic page-level incremental <b>checkpointing...</b>|$|R
