10000|1863|Public
5|$|A <b>continuation</b> of the Second Avenue Subway {{south of}} 34th Street to Battery Park.|$|E
5|$|Its <b>continuation,</b> Agency, {{is to be}} {{released}} in April 2018.|$|E
5|$|John Edmund Gardner (20 November 1926– 3 August 2007) was an English spy and thriller novelist, {{best known}} for his James Bond <b>continuation</b> novels, but also for his series of Boysie Oakes books and three <b>continuation</b> novels {{containing}} Sir Arthur Conan Doyle's fictional villain, Professor Moriarty.|$|E
40|$|This paper {{outlines}} the recurring use of <b>continuations.</b> A {{brief overview of}} <b>continuations</b> is given. This is followed by several patterns that outline the use of <b>continuations</b> leading up to using <b>continuations</b> to implement coroutines, explicit backtracking, and multitasking. Scheme {{is used for the}} examples as it supports first class <b>continuations.</b> ...|$|R
40|$|Delimited <b>continuations</b> are {{the mother}} of all monads! So goes the slogan {{inspired}} by Filinski's 1994 paper, which showed that delimited <b>continuations</b> can implement any monadic effect, letting the programmer use an effect as easily as if it was built into the language. It's a shame that not many languages have delimited <b>continuations.</b> Luckily, exceptions and state are also {{the mother of}} all monads! In this Pearl, we show how to implement delimited <b>continuations</b> in terms of exceptions and state, a construction we call thermometer <b>continuations.</b> While traditional implementations of delimited <b>continuations</b> require some way of "capturing" an intermediate state of the computation, the insight of thermometer <b>continuations</b> is to reach this intermediate state by replaying the entire computation from the start, guiding it using a "replay stack" it so that the same thing happens until the captured point. Along the way, we explain delimited <b>continuations</b> and monadic reflection, show how the Filinski construction lets thermometer <b>continuations</b> express any monadic effect, share an elegant special-case for nondeterminism, and discuss why our construction is not prevented by theoretical results that exceptions and state cannot macro-express <b>continuations...</b>|$|R
50|$|Delimited <b>continuations</b> {{are also}} useful in {{linguistics}}: see <b>Continuations</b> in linguistics for details.|$|R
5|$|The UKSF {{course is}} {{broken down into}} two main parts, Selection and <b>Continuation</b> Training.|$|E
5|$|The {{ultimate}} {{guide is}} a <b>continuation</b> of Warriors: Cats of the Clans.|$|E
5|$|A film <b>continuation,</b> {{released}} in early 2014, was confirmed after a successful Kickstarter campaign launched by Rob Thomas which raised over $5.7 million.|$|E
40|$|Delimited <b>continuations</b> {{are more}} {{expressive}} than traditional abortive <b>continuations</b> and they apparently require a framework beyond traditional continuation-passing style (CPS). We {{show that this}} is not the case: standard CPS is sufficient to explain the common control operators for delimited <b>continuations.</b> We demonstrate this fact and present an implementation as a Scheme library. We then investigate a typed account of delimited <b>continuations</b> that makes explicit where control effects can occur. This results in a monadic framework for typed and encapsulated delimited <b>continuations,</b> which we design and implement as a Haskell library. ...|$|R
40|$|AbstractWe {{consider}} the natural combinations of algebraic computational effects such as side-effects, exceptions, interactive input/output, and nondeterminism with <b>continuations.</b> <b>Continuations</b> {{are not an}} algebraic effect, but previously developed combinations of algebraic effects given by sum and tensor extend, with effort, to include commonly used combinations of the various algebraic effects with <b>continuations.</b> <b>Continuations</b> also {{give rise to a}} third sort of combination, that given by applying the <b>continuations</b> monad transformer to an algebraic effect. We investigate the extent to which sum and tensor extend from algebraic effects to arbitrary monads, {{and the extent to which}} Felleisen et al. ’s C operator extends from <b>continuations</b> to its combination with algebraic effects. To do all this, we use Dubuc’s characterisation of strong monads in terms of enriched large Lawvere theories...|$|R
50|$|Since Scheme {{provides}} {{full support}} for <b>continuations,</b> implementing coroutines is nearly trivial, requiring only that a queue of <b>continuations</b> be maintained.|$|R
5|$|For {{the first}} decade of the 20th century many areas of Leeds saw a <b>continuation</b> of Victorian style architecture, {{particularly}} in areas like Beeston.|$|E
5|$|For the post-Fleming <b>continuation</b> Bond authors, Leiter {{has also}} {{appeared}} on a periodic basis. After John Gardner took over writing the James Bond novel series, Leiter made an occasional appearance and the novel For Special Services introduces his daughter, Cedar Leiter, {{who is also a}} CIA officer (and briefly Bond's romantic conquest). Raymond Benson also included Leiter's character in some of his novels, including The Facts of Death and Doubleshot. Similarly the more recent <b>continuation</b> Bond novels—the 2008 Sebastian Faulks novel Devil May Care and the 2011 novel Carte Blanche by Jeffery Deaver—both contained the character.|$|E
5|$|History and Progress of Oregon After 1845: In <b>Continuation</b> of the History of Oregon Before 1845, as Given in Deady's Address to the Pioneers at Salem in 1875. With Hubert Howe Bancroft.|$|E
40|$|We {{consider}} the natural combinations of algebraic computational effects such as side-effects, exceptions, interactive input/output, and nondeterminism with <b>continuations.</b> <b>Continuations</b> {{are not an}} algebraic effect, but previously developed combinations of algebraic effects given by sum and tensor extend, with effort, to include commonly used combinations of the various algebraic effects with <b>continuations.</b> <b>Continuations</b> also {{give rise to a}} third sort of combination, that given by applying the <b>continuations</b> monad transformer to an algebraic effect. We investigate the extent to which sum and tensor extend from algebraic effects to arbitrary monads, {{and the extent to which}} Felleisen et al. ’s C operator extends from <b>continuations</b> to its combination with algebraic effects. To do all this, we use Dubuc’s characterisation of strong monads in terms of enriched large Lawvere theories...|$|R
50|$|One {{area that}} has seen {{practical}} use of <b>continuations</b> is in Web programming. The use of <b>continuations</b> shields the programmer from the stateless nature of the HTTP protocol. In the traditional model of web programming, the lack of state {{is reflected in the}} program's structure, leading to code constructed around a model that lends itself very poorly to expressing computational problems. Thus <b>continuations</b> enable code that has the useful properties associated with inversion of control, while avoiding its problems. Inverting back the inversion of control or, <b>Continuations</b> versus page-centric programming is a paper that provides a good introduction to <b>continuations</b> applied to web programming.|$|R
40|$|To draw a {{parallel}} between coherence-driven and question-under-discussion (QUD) models of discourse •  To test whether peopleʼs expectations about upcoming story <b>continuations</b> match their expectations about upcoming questions. Problem: Different {{models have been}} proposed to capture the relationships that underlie a coherent discourse, with some models applied to monologue (Hobbs 1979, Kehler 2002) and some to dialog (Roberts 1996). This work considers whether the coherence relations that have been posited to implicitly structure a monologue {{can be linked to}} the questions-under-discussion (QUDs) that have been positied to explicitly structure a dialog. Proposal: Using story and dialog <b>continuations,</b> we test whether people write story <b>continuations</b> that answer the questions that they are likely to pose for similar contexts in dialog <b>continuations.</b> Results: We find that biases toward particular questions in dialog <b>continuations</b> are reliably correlated with biases for particular coherence relations in story <b>continuations.</b> The results suggest that parallels can be drawn between two different types of discourse models and between the <b>continuations</b> in a single-speaker passage and the discourse moves in a dialog...|$|R
5|$|In 1990, {{following}} {{the cancellation of}} the live action series, the BBC approached the Canadian animation house Nelvana to propose an animated <b>continuation</b> of the show. The cartoon series was to feature an unspecified Doctor, incorporating elements of various BBC series Doctors. It {{was not to be}} oriented to a younger audience than the live action series; rather, it was intended to be a <b>continuation</b> of the cancelled series in animated form in order to save costs, with design elements that would promote merchandise sales.|$|E
5|$|In 2013 the William Boyd-written <b>continuation</b> novel Solo was released; it ignored Deaver's new {{timeframe}} and {{was set in}} 1969.|$|E
5|$|In the 2013 {{municipal}} elections, Boye {{was successful}} in obtaining sufficient support from the Liberals and the left to ensure his <b>continuation</b> as mayor {{from the beginning of}} 2014.|$|E
40|$|AbstractWe {{develop a}} “complete” {{embedding}} of logic programming into scheme—a lexically scoped lisp dialect with first-class <b>continuations.</b> Logic variables are bound {{in the scheme}} environment, and the success and failure <b>continuations</b> are represented as scheme <b>continuations.</b> To account for the semantics of logic variables and failure <b>continuations,</b> the state-space model of control is modified in a novel way that generalizes the trail mechanism. This ensures that logic variable bindings are properly restored when <b>continuations</b> are invoked to perform “lateral” control transfers that are not possible in a traditional logic programming context. It is thereby possible to obtain greater control flexibility while allowing much of a program to be expressed with logic programming...|$|R
40|$|There are a {{great variety}} of control {{constructs}} in programming languages: conditionals, goto, coroutines, threads, processes, break, return, and, of course, <b>continuations.</b> The advantage of <b>continuations</b> over the others {{is that many of the}} other control constructs are expressible in terms of them. Unfortunately, the global <b>continuations</b> operators (e. g., call/cc) that are implemented in language...|$|R
40|$|A {{new program}} {{transformation}} is presented that allows to remove control operators related to partial <b>continuations.</b> The {{basis for the}} transformation is to adopt an improved representation for <b>continuations</b> that makes frames apparent. Various examples of control operators with or without dynamic extent stress are presented. Scheme [IEE 91], offers first-class <b>continuations</b> with indefinite extent. Pioneered in [Lan 65, Rey 72], <b>continuations</b> proved to be very useful tools allowing to program {{a wide variety of}} control features such as coroutines [Wan 80], engines [HF 84], escapes [HFW 84] etc. The call/cc function reifies [Wan 86] <b>continuations</b> into monadic functions, transfer of control occurs when these functional objects are applied. A transformation called "Continuation Passing Style" (or CPS for short) exists that transforms a program using call/cc into a new semantically equivalent program without call/cc. In this transformation, <b>continuations</b> are transformed again into monadic functions [...] . ...|$|R
5|$|Janet Shirley, Crusader Syria in the Thirteenth Century: The Rothelin <b>Continuation</b> of the History of William of Tyre {{with part of}} the Eracles or Acre text. Aldershot: Ashgate, 1999.|$|E
5|$|September 8, 1667 — A 'severe storm' is {{reported}} in Manhattan and {{is reported}} to be a <b>continuation</b> of a powerful hurricane which affected the Mid-Atlantic.|$|E
5|$|Storytelling is {{an ancient}} custom in Somali culture. Love of cinema in Somalia is but a modern, visual {{incarnation}} and <b>continuation</b> of this well-established oral tradition.|$|E
40|$|Partial <b>continuations</b> are control {{operators}} in functional programming such that a function-like object is abstracted from {{a part of}} the rest of computation, rather than the whole rest of computation. Several dierent formulations of partial <b>continuations</b> have been proposed by Felleisen, Danvy&Filinski, Hieb et al, and others, but as far as we know, no one ever studied logic for partial <b>continuations,</b> nor proposed a typed calculus of partial <b>continuations</b> which corresponds to a logical system through the Curry-Howard isomorphism. This paper gives a simple type-theoretic formulation of a form of partial <b>continuations</b> (which we call delimited <b>continuations),</b> and study its properties. Our calculus does reect the intended operational semantics, and enjoys nice properties such as subject reduction and conuence. By restricting the type of delimiters to be atomic, we obtain the normal form property. We also show a few examples. 1 Introduction The mechanism of rst-class cont [...] ...|$|R
50|$|<b>Continuations</b> simplify {{and clarify}} the {{implementation}} of several common design patterns, including coroutines/green threads and exception handling, by providing the basic, low-level primitive which unifies these seemingly unconnected patterns. <b>Continuations</b> can provide elegant solutions to some difficult high-level problems, like programming a web server that supports multiple pages, accessed {{by the use of}} the forward and back buttons and by following links. The Smalltalk Seaside web framework uses <b>continuations</b> to great effect, allowing one to program the web server in procedural style, by switching <b>continuations</b> when switching pages.|$|R
40|$|Abstract. <b>Continuations</b> {{are used}} to define the flow of {{messages}} between low level tasks in a parallel logic programming language. A combination of compiler and runtime operations reduces message traffic by up to 50 % when success <b>continuations</b> are passed as parameters in messages that start new processes. <b>Continuations</b> are also the key to fast task switching, a critical operation in this fine grain parallel system. Data from sample programs shows the effectiveness of <b>continuations</b> in reducing message traffic and {{the speed with which}} task switches are performed on a typical host architecture...|$|R
5|$|The Hungarian chronicles {{preserved}} {{two separate}} {{lists of the}} Hungarians' leaders {{at the time of}} the Conquest. Anonymous knows of Álmos, Előd, Künd, Ónd, Tas, Huba and Tétény, while Simon of Kéza and the Illuminated Chronicle list Árpád, Szabolcs, Gyula, Örs, Künd, Lél and Vérbulcsú. Contemporaraneous or nearly contemporaraneous sources make mention of Álmos (Constantine Porphyrogenitus), of Árpád (<b>Continuation</b> of the Chronicle by George the Monk and Constantine Porphyrogenitus), of Liountikas (Constantine Porphyrogenitus) and of Kurszán (<b>Continuation</b> of the Chronicle by George the Monk).|$|E
5|$|The {{primary sources}} for the battle are Theophanes Continuatus, Leo the Grammarian's Chronicle, the <b>continuation</b> of George Hamartolos' Chronicle and John Skylitzes' Synopsis of Histories.|$|E
5|$|The {{primary sources}} for the battle are the <b>continuation</b> of George Hamartolos' Chronicle and John Skylitzes' Synopsis of Histories.|$|E
40|$|Exceptions and {{first-class}} <b>continuations</b> are {{the most}} powerful forms of control in programming languages. While both are a form of non-local jumping, {{there is a fundamental}} difference between them. We formalize this difference by proving a contextual equivalence that holds in the presence of exceptions, but not continuations; and conversely, we prove an equivalence that holds in the presence of <b>continuations,</b> but not exceptions. By the same technique, we show that exceptions and <b>continuations</b> together do not give rise to state, and that exceptions and state do not give rise to <b>continuations...</b>|$|R
40|$|This paper {{studies the}} dierences between {{exceptions}} and <b>continuations</b> via {{the problem of}} expressing exceptions using rst-class <b>continuations</b> in a functional-imperative language. The main result is that exceptions cannot be macro-expressed using rst-class <b>continuations</b> and references (contrary to "). This is shown using two kinds of counterexample. The rst consists of two terms which are equivalent with respect to contexts containing <b>continuations</b> and references, but which can be distinguished using exceptions. It is shown, however, {{that there are no}} such terms which do not contain callcc. However, there is a 1 sentence of rst-order logic which is satised when interpreted in the domain of programs containing <b>continuations</b> and references but not satised in the domain of programs with exceptions and references...|$|R
40|$|We {{compare the}} {{expressive}} power of exceptions and <b>continuations</b> when {{added to a}} language with local state {{in the setting of}} operational semantics. <b>Continuations</b> are shown to be more expressive than exceptions because they can cause a function call to return more than once, whereas exceptions only allow discarding part of the calling context. 1 Introduction Exceptions are part of nearly all modern programming languages, including mainstream ones like Java and C++. <b>Continuations</b> are present only in Scheme and the New Jersey dialect of ML, yet are much more intensely studied by theoreticians and logicians. The relationship between exceptions and <b>continuations</b> is not as widely understood as one would hope, partly because <b>continuations,</b> though in some sense canonical, are more powerful than would at rst appear, and because the control aspect of exceptions can be obscured by intricacies of typing and syntax. We have recently shown that exceptions and <b>continuations,</b> when added to a purely [...] ...|$|R
