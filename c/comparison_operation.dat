38|377|Public
5000|$|Offset binary, also {{referred}} to as excess-K, excess-N, excess code or biased representation, is a digital coding scheme where all-zero corresponds to the minimal negative value and all-one to the maximal positive value. There is no standard for offset binary, but most often the offset K for an n-bit binary word is K = 2n−1. This has the consequence that the [...] "zero" [...] value is represented by a 1 in the most significant bit and zero in all other bits, and in general the effect is conveniently the same as using twos complement except that the most significant bit is inverted. It also has the consequence that in a logical <b>comparison</b> <b>operation,</b> one gets the same result as with a twos complement numerical <b>comparison</b> <b>operation,</b> whereas, in twos complement notation a logical comparison will agree with twos complement numerical <b>comparison</b> <b>operation</b> if and only if the numbers being compared have the same sign. Otherwise the sense of the comparison will be inverted, with all negative values being taken as being larger than all positive values.|$|E
50|$|Ligand-based methods {{typically}} {{require a}} fraction of a second for a single structure <b>comparison</b> <b>operation.</b> A single CPU is enough to perform a large screening within hours. However, several comparisons can be made in parallel in order to expedite the processing of a large database of compounds.|$|E
5000|$|A {{comparison}} sort {{is a type}} of sorting algorithm {{that only}} reads the list elements through a single abstract <b>comparison</b> <b>operation</b> (often a [...] "less than or equal to" [...] operator or a three-way comparison) that determines which of two elements should occur first in the final sorted list. The only requirement is that the operator obey two of the properties of a total order: ...|$|E
5000|$|... stores {{the result}} of all <b>comparison</b> <b>operations</b> for branch testing ...|$|R
50|$|The {{standard}} {{provides a}} predicate totalOrder which defines a total ordering for all floating numbers for each format. The predicate {{agrees with the}} normal <b>comparison</b> <b>operations</b> when they say one floating point number is less than another. The normal <b>comparison</b> <b>operations</b> however treat NaNs as unordered and compare −0 and +0 as equal. The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.|$|R
5000|$|<b>Comparison</b> <b>operations.</b> Besides {{the more}} obvious results, IEEE 754 defines that −∞ = −∞, +∞ = +∞ and x ≠ [...] for any x (including [...] ).|$|R
5000|$|Thus, it {{is often}} {{difficult}} or impossible to avoid all [...] "undefined" [...] comparisons of sequence numbers.However, a relatively simple solution is available. By mapping the unsigned sequence numbers onto signed Two's complement arithmetic operations, every comparison of any sequence number is defined, and the <b>comparison</b> <b>operation</b> itself is dramatically simplified. All comparisons specified by the RFC retain their original truth values; only the formerly [...] "undefined" [...] comparisons are affected.|$|E
50|$|Radix trees {{also share}} the {{disadvantages}} of tries, however: {{as they can}} only be applied to strings of elements or elements with an efficiently reversible mapping to strings, they lack the full generality of balanced search trees, which apply to any data type with a total ordering. A reversible mapping to strings {{can be used to}} produce the required total ordering for balanced search trees, but not the other way around. This can also be problematic if a data type only provides a <b>comparison</b> <b>operation,</b> but not a (de)serialization operation.|$|E
5000|$|If {{the target}} program {{picks up the}} value from a [...] "random" [...] {{location}} in memory (one it doesn't 'own' usually), it may for example be nulls (X"00") in almost every normal situation and the program works OK. If the monitoring program shifts the load point, it may pick up say X"FF" [...] and the logic would cause different results during a <b>comparison</b> <b>operation.</b> Alternatively, if the monitoring program is now occupying the space where the value is being [...] "picked up" [...] from, similar results might occur.|$|E
5000|$|Scientific data {{processing}} [...] "usually involves {{a great deal}} of computation (arithmetic and <b>comparison</b> <b>operations)</b> upon a relatively small amount of input data, resulting in a small volume of output." ...|$|R
50|$|Version Control for {{engineers}} {{is a free}} Subversion client. It {{provides an}} interface to perform the most common revision control operations, and focuses on image and document visual diff (<b>comparison)</b> <b>operations</b> for CAD files and technical drawings.|$|R
5000|$|Quiet NaNs, or qNaNs, do {{not raise}} any {{additional}} exceptions as they propagate through most operations. The exceptions are where the NaN cannot simply be passed through unchanged to the output, {{such as in}} format conversions or certain <b>comparison</b> <b>operations</b> (which do not [...] "expect" [...] a NaN input).|$|R
3000|$|... users. Every {{order change}} {{requires}} first the sorting operation {{and then the}} <b>comparison</b> <b>operation</b> that have complexity of [...]...|$|E
40|$|We {{demonstrate}} an all-optical {{label and}} payload processor based on nonlinear optical signal processing with semiconductor optical amplifiers. The processor separates the label and the payload, and generates a synchronization pulse, {{used to control}} the label <b>comparison</b> <b>operation</b> in an all-optical routing nod...|$|E
40|$|Abstract- Data {{aggregation}} in {{wireless sensor networks}} (WSN) helps eliminate information redundancy {{and increase}} the lifetime of the network. When homomorphic encryption is used for data aggregation, end-to-end encryption is achieved and aggregation function like average or minimum/maximum can be computed on the encrypted data. Aggregation functions like minimum/maximum rely on <b>comparison</b> <b>operation.</b> But, {{it has been shown}} that any homomorphic encryption is insecure against ciphertext only attacks if they support <b>comparison</b> <b>operation.</b> The order preserving encryption scheme (OPES) has been suggested for WSNs, for secure comparison of encrypted data at the aggregator node in WSNs. But, the computational cost at the sensor nodes in WSNs by using OPES is huge. This paper provides an alternative for OPES when used to calculate aggregation function minimum/maximum. In this paper we briefly describe some homomorphic encryption schemes and show how the sensed data is encrypted by using these homomorphic encryption schemes. we show how aggregation function minimum/maximum can be computed at the aggregator node in WSNs by performing addition operation and not <b>comparison</b> <b>operation</b> on the data encrypted with homomorphic encryption schemes. We also show how our scheme helps eliminate the encryption cost at the sensor node in WSNs. Index Terms—Wireless sensor networks, data encryption, data aggregation, homomorphic encryption schemes. ...|$|E
50|$|There {{is a price}} <b>comparison</b> service <b>operation</b> in Canada.|$|R
40|$|The number type leda real {{provides}} exact computation for {{a subset}} of real algebraic numbers: Every integer is a leda real, and leda reals are closed under the basic arithmetic operations +, −, ∗, / and k-th root operations. leda reals guarantee correct results in all <b>comparison</b> <b>operations.</b> The number type is availabl...|$|R
2500|$|Usually, sorting {{and searching}} {{algorithms}} have {{been characterized by}} the number of <b>comparison</b> <b>operations</b> that must be performed using order notation. A binary search of a sorted table with [...] records, for example, can be done in roughly [...] comparisons. If the table had 1,000,000 records, then a specific record could be located with at most 20 comparisons: [...]|$|R
30|$|The bit <b>comparison</b> <b>operation</b> Cb is {{implemented}} with a bitwise logical XOR instruction, assuming that each {{bit of the}} received word has been previously stored in an integer type variable. Table 6 shows {{the details of the}} implementation of this operation. Similarly, three machine cycles are necessary to implement the operation Cb.|$|E
30|$|Modification of sorting {{operation}}. Because {{the index}} operation and pattern string <b>comparison</b> <b>operation</b> of specific network data only use the first 6  bytes {{of the pattern}} string array, it is rather redundant for the quick sorting of the whole pattern string array, {{and in terms of}} later application, only the first 6  bytes need to be sorted.|$|E
40|$|A {{series of}} {{experiments}} found that when subjects are instructed to judge "differences " or "ratios," the rank order of the responses is virtually identical. ’ Since actual ratios and differences of the same numbers are not monotonically related in suitable (factorial) designs, this finding has been interpreted as consistent with Torgerson’s (1961) theory that subjects use one <b>comparison</b> <b>operation</b> for both task...|$|E
3000|$|Delete: To delete a data point, the Hilbert {{value of}} the data point to be deleted is sent in an {{encrypted}} format by the DO to the CSP. The Hilbert value (H) is encrypted using OPE, so that <b>comparison</b> <b>operations</b> can be conducted on the index. In the Hilbert R-tree deletion process, the entry with the Hilbert key value (i.e. leaf node, n [...]...|$|R
40|$|When a {{data set}} {{is too large}} to be stored in a computer's primary memory, direct sorting methods for finding the sample {{quantiles}} cannot be used. In this paper, a memory-saving method is proposed that can {{reduce the number of}} <b>comparison</b> <b>operations</b> so that CPU time is dramatically reduced. Moreover, in contrast to other memory-saving methods which give approximations to the sample quantiles, this one produces the exact sample quantile. ...|$|R
40|$|An {{unsorted}} database {{consists of}} N records, {{out of which}} only one is of particular interest. Implementation of classical sequential search and quantum search algorithms on such database gives an upper bound complexity of O(N) and O(sqrtN) respectively. We hereby describe a new approach which deploys simple arithmetic and <b>comparison</b> <b>operations</b> {{to search for a}} record in an upper bound space and time complexity of O(N) and O(sqrtN) respectively...|$|R
40|$|Abstract:-In {{this paper}} we have {{proposed}} a new solution for sorting algorithms. In {{the beginning of the}} sorting algorithm for serial computers (Random access machines, or RAM’S) that allow only one operation to be executed at a time. We have investigated sorting algorithm based on a comparison network model of computation, in which many <b>comparison</b> <b>operation</b> can be performed simultaneously. Index Terms Sorting algorithms, comparison network, sorting network, the zero one principle, bitonic sorting networ...|$|E
40|$|This paper {{construct}} {{a comparison between}} two main software’s used in programming applications that are Java and C++, the <b>comparison</b> <b>operation</b> includes {{the time needed to}} perform some algorithm i. e. speed of operation, flexibility to adjusting some code, and efficiency. The same code is used to compare between the two software to determine which one is better. It is found that C++ needs less time to execute the same code comparing with Java. Java needs about 10 % excess time to execute the same code segment comparing to C++...|$|E
30|$|In HW_v 1, the K vector is {{computed}} {{before the}} final step 7 (in stage 2), which is to perform the <b>comparison</b> <b>operation.</b> The K vector {{is one of the}} first operands of stage 3. The K vector computation requires a minimum of 32 subtractions. In this case, in order to ensure that K is ready for stage 3, K vector is computed before performing the comparison as presented in Eq. (31), MΔuο[*]≤[*]γ. As illustrated in Fig.  19 b, K module is a simple V-V module, which consists of a subtractor to subtract each element of the input vectors.|$|E
40|$|Many current {{general purpose}} {{processors}} use extensions {{to the instruction}} set architecture to enhance the performance of digital image processing and multimedia applications. In this paper, a MATLAB Application Program Interface (API) is constructed for the performance evaluation of Intel image processing functions. The Intel image processing functions are constructed for high performance operations which have been optimized for Intel architecture processors. Several functions are developed and categorized within the following groups: arithmetic and logical <b>comparison</b> <b>operations,</b> morphological operations, geometric operations, filtering operations, point operations and linear transform operations. We present a comparison of image processing functions between MATLAB M-files, built-in functions and functions based on the Intel image processing library...|$|R
40|$|This paper {{presents}} a new cell matching method {{which could be}} effectively used for MUX-based FPGA technology mapping. In this method, a well organized cell library of a manageable size is constructed for each target architecture a priori, and cell matchings are performed by searching the correspondingentry in the library using integer <b>comparison</b> <b>operations.</b> Experimental results for some MCNC benchmarks show that our approach indeed reduces significantly the computation time, while preserving the exact cell matching. 1...|$|R
40|$|According to {{the demand}} of harmonia {{renewable}} particles sorting in domestic plastics recycling industry,mainly for white and gray recycled plastic particles,a mathematical model is built in RGB color {{space and a}} kind of high accuracy, real-time sorting algorithm based on image processing is proposed. This algorithm is intended to use related multiplication, addition and <b>comparison</b> <b>operations</b> of particles pixels R, G, B component,,instead of sorting algorithm based on the difference and threshold processing commonly used in domestic products,and verify its effectiveness through simulation...|$|R
40|$|A {{high-speed}} tree-based 64 -bit CMOS binary comparator {{is proposed}} in this brief. Comparison is most basic arithmetic operation that determines if one number is greater than, equal to, {{or less than}} the other number. Comparator is most fundamental component that performs <b>comparison</b> <b>operation.</b> This brief presents comparison of modified and existing 64 -bit binary comparator designs concentrating on delay. Means some modifications are done in existing 64 -bit binary comparator design to improve {{the speed of the}} circuit. Comparison between modified and existing 64 -bit binary comparator designs is calculated by simulation that is performed a...|$|E
40|$|Designing a terminological {{knowledge}} base consists in collecting terms and associating {{them to their}} definition. Our objective is to define a process model and a formal concept model that supoorts collaborative work. The proposed concept model, {{which is based on}} terminological logic and IBIS. The terminological logic part is intended to formally express definitions, while the IBIS part enable users to to express arguments and endorsements on links between terms and definitions. The process model is based on a cyclic conflict resolution process. It includes a formal concept <b>comparison</b> <b>operation,</b> to highlight definition conflicts and their nature, and other operations (derivation, conjunction, disjunction, etc.) to solve the detected conflicts. ...|$|E
40|$|Service {{discovery}} in web service infrastructure must consider abstract processes to guarantee successful business {{interactions with the}} matched services. Unfortunately, matchmaking process annotations requires a significant processing effort, thus, finding relevant service providers in a large collection is time consuming and requires more efficient access methods than sequential scanning. The paper presents an approach supporting more efficient querying of abstract processes by introducing an abstraction to reduce the computational complexity of the <b>comparison</b> <b>operation.</b> Experimental studies on a collection of over 800 abstract business processes derived from the RosettaNet PIP specification show that our approach outperforms naive sequential scanning by up to an order of magnitude. 1...|$|E
40|$|Among other factors, high {{complexity}} and mandatory expert computer knowledge make many music IR and music analysis systems unsuitable {{for the majority}} of largely computer-illiterate musicologists. The JRing system offers highly flexible yet intuitively usable search and <b>comparison</b> <b>operations.</b> to aid musicologists during score analysis. This paper discusses the requirement analysis that led to JRing' s inception, its IR tools and graphical user interface plus the kind of musical material it works on and the Humdrum-based technical realization of IR operations...|$|R
30|$|The most used {{operators}} are addition, multiplication of a variable by a fixed coefficient, increment, absolute value, and <b>comparison.</b> Conditional <b>operations</b> are needed, their executions depending upon comparison results referred to states.|$|R
2500|$|Ternary {{heapsort}} uses a ternary heap {{instead of}} a binary heap; that is, each element in the heap has three children. It is more complicated to program, but does a constant number of times fewer swap and <b>comparison</b> <b>operations.</b> [...] This is because each sifting step in a ternary heap requires three comparisons and one swap, whereas in a binary heap two comparisons and one swap are required. Two levels in a ternary heap cover 9 elements, doing more work with {{the same number of}} comparisons as three levels in the binary heap, which only cover 8.|$|R
