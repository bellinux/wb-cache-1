568|1765|Public
25|$|Service Data Objects (SDO) {{framework}} {{provides a}} unified framework for data application development. With SDO, developers {{do not need}} to be familiar with any specific API in order to access and utilize data. Through SDO, developers simply work with data from multiple data sources, such as relational databases, entity EJB components, XML pages, Web services, the Service <b>Component</b> <b>Architecture,</b> and JavaServer Pages pages.|$|E
2500|$|An ESB {{mediation}} flow {{is one of}} the [...] component {{types in}} a Service <b>Component</b> <b>Architecture</b> (SCA). Like any SCA component, the program accesses a mediation flow through exports that it provides, and the mediation flow forwards messages to other external services via imports. Special kinds of imports and exports for JMS, called JMS bindings, enable developers to specify the binding configuration and write data handling code. The mediation flow consists of a series of mediation primitives that manipulate messages as they flow through the bus.|$|E
50|$|The {{libraries}} underlying BlueBream {{have been}} evolving into {{a collection of}} useful libraries for web application development rather than a single, monolithic application server. BlueBream includes separate packages for interfaces, <b>component</b> <b>architecture,</b> HTTP server, publisher, Zope Object Database (ZODB), Zope Page Templates, I18N, security policy, and so on. The <b>component</b> <b>architecture</b> is used to glue these together. The <b>component</b> <b>architecture</b> is configured using a ZCML (Zope Configuration Markup Language), an XML based configuration file language.|$|E
40|$|Enterprise {{information}} systems and e-commerce applications are tightly integrated in today ’s modern enterprises. <b>Component</b> <b>architectures</b> are {{the base for}} building such multi-tier, distributed applications. This paper examines the security threats those systems must confront and the solutions proposed by the major existing <b>component</b> <b>architectures.</b> A comparative evaluation of both security features and implementation issues is carried out to determine each architecture’s strong points and drawbacks...|$|R
40|$|This {{position}} paper presents an approach for predicting functional and extra-functional properties of layered software <b>component</b> <b>architectures.</b> Our approach {{is based on}} parameterised contracts a generalisation of design-bycontract. The main contributions of the paper are twofold. Firstly, it attempts to clarify the meaning of "contractual use of components" a term sometimes used loosely [...] or even inconsistently [...] in current literature. Secondly, we demonstrate how to deploy parameterised contracts to predict properties of <b>component</b> <b>architectures</b> with non-cyclic dependencies...|$|R
50|$|The tour saw Eleverum play a {{national}} run including shows in Hobart and Ballarat. Whilst touring he collaborated {{with a number}} of musicians from bands including Ground <b>Components,</b> <b>Architecture</b> In Helsinki, Eddy Current Suppression Ring and Midnight Juggernauts.|$|R
5000|$|Open Service-Oriented Architecture's Service <b>component</b> <b>architecture</b> (SCA) ...|$|E
5000|$|The {{standard}} <b>component</b> <b>architecture</b> {{for building}} distributed object-oriented business applications in Java.|$|E
5000|$|... use a plug-in or <b>component</b> <b>architecture</b> {{for nearly}} {{every aspect of}} its {{function}} ...|$|E
40|$|The {{first part}} of this chapter {{provides}} an overview of the general requirements for modern synchrotron light source control systems. This description covers different <b>components,</b> <b>architectures,</b> and aspects of the operator interface. In addition, features of the computer infrastructure, on-line communication facilities, and front-end interfaces ar...|$|R
5000|$|... #Subtitle level 3: The <b>Component</b> Collaboration <b>Architecture</b> (CCA) ...|$|R
40|$|Distributed {{software}} <b>component</b> <b>architectures</b> {{provide a}} promising {{approach to the}} problem of building large scale, scientific Grid applications [18]. Communication in these <b>component</b> <b>architectures</b> is based on Remote Method Invocation (RMI) protocols that allow one software component to invoke the functionality of another. Examples include Java remote method invocation (Java RMI) [25] and the new Simple Object Access Protocol (SOAP) [15]. SOAP has the advantage that many programming languages and component frameworks can support it. This paper describes experiments showing that SOAP by itself is not efficient enough for large scale scientific applications. However, when it is embedded in a multi-protocol RMI framework, SOAP can be effectively used as a universal control protocol, that can be swapped out by faster, more special purpose protocols when large data transfer speeds are needed...|$|R
50|$|All xUnit {{frameworks}} {{share the}} following basic <b>component</b> <b>architecture,</b> with some varied implementation details.|$|E
5000|$|Defined the {{distinct}} [...] "EJB Roles" [...] that are assumed by the <b>component</b> <b>architecture.</b>|$|E
5000|$|Java/C++ based <b>component</b> <b>architecture</b> (UObject) with {{possibility}} to link objects or run them remotely ...|$|E
2500|$|The MKDE was {{retained}} in Pervasive.SQL 7. However, {{due to the}} new <b>component</b> <b>architecture's</b> dynamic binding, the internal architecture was modified. The application using Btrieve calls a services manager which then searches through various configured directories for specific encoded filename. The file name loaded for Btrieve files in Backus-Naur form is: ...|$|R
40|$|In process algebras like µCRL [6] and ACP [2] {{communication}} is defined globally. In {{the context of}} <b>component</b> based <b>architectures</b> one wishes to define subcomponents of a system separately, including communication within that subcomponent. In this document we define a process algebra that has a local communication function that facilitates <b>component</b> based <b>architectures.</b> ...|$|R
40|$|The {{need for}} {{coordination}} among autonomous entities {{is common in}} dynamically changing domains. One such domain is the coordination of components in distributed <b>component</b> <b>architectures.</b> In these architectures, asynchronous communication is used to ensure autonomy. Management systems that control such architectures must respect this autonomy by decentralizing interaction policies and control. Middle agents [6] have been introduced as brokers or mediators in such dynamic settings. Rule-Driven Coordination (RDC) Agents are middle agents that act as brokers to the individual <b>components</b> in <b>component</b> <b>architectures.</b> These RDC agents encapsulate the interaction policy definition (rules) and the aspects of communication, data management, and policy execution. This paper defines each of these aforementioned aspects of the RDC agents. Furthermore, there {{is the use of}} RDC agents to manage a workflow of Java-based components in a typical electronic commerce domain. 1...|$|R
50|$|Common <b>Component</b> <b>Architecture</b> {{activity}} {{appears to}} have ceased, with no news on the webpage since 2006.|$|E
50|$|The Common <b>Component</b> <b>Architecture</b> was a {{standard}} for Component-based software engineering used in high-performance also known as scientific) computing. Features of the Common <b>Component</b> <b>Architecture</b> that distinguish it from commercial component standards Component Object Model, CORBA, Enterprise Java Beans include support for FORTRAN programmers, multi-dimensional data arrays, exotic hardware and operating systems, {{and a variety of}} network data transports not typically suited for wide area networks.|$|E
50|$|XULJet {{provides}} a <b>component</b> <b>architecture</b> and user interface elements description inspired by Seaside. It implements some CommonJS specifications.|$|E
40|$|An {{overview}} {{and comparison}} of di#erent topologies for wireless architectures are discussed, where {{the main focus}} lies on the power consumption and possibilities towards integration and reduction of external <b>components.</b> <b>Architectures</b> with reduced number of building blocks (both internal and external) are presented where the main benefits are the low costs, both in the CMOS technology {{as well as the}} power...|$|R
40|$|ABSTRACT: In recent years, mass {{customization}} and {{computer aided manufacturing}} (CAM) technologies have transformed off-site building component fabrication. At the same time, traditional repetitive manufacturing still dominates building component production. Bricks, bathroom fixtures, window mullions, and door hardware are all repetitively manufactured. Ironically, CAM’s computer numerical controlled (CNC) machines have made the fabrication of custom molds for repetitive manufacturing easier. This allows architects to customize repetitively manufactured <b>architecture</b> <b>components.</b> I am using the term customized repetitive manufacturing (CRM) to refer {{to this type of}} work. Through my ongoing research, I have identified a wide range of historic and contemporary examples of CRM for <b>architecture</b> <b>components.</b> Designs for repetitive manufacturing <b>architecture</b> <b>components</b> involve coordination between the architect and the manufacturer. Both must balance capital costs with production runs, mold complexity with manufacturing parameters, and size restrictions with manufacturer’s abilities. How these issues are balanced depends on the application of the architectural component. I have identified three categories of custom designed <b>architecture</b> <b>components</b> based on application—custom <b>components,</b> <b>architecture</b> prototypes, and architecture products. This paper presents the three categories of application in reference to CRM. I define each category, provide multiple examples, and analyse particular case studies. Analysis of the case studies provides the architectural and manufacturing impacts on CRM within each category...|$|R
40|$|Even though {{graphics}} {{hardware and}} 3 D technologies are rapidly evolving, {{the development of}} three-dimensional applications is still complicated and demands expert knowledge. This paper investigates the component-based development of 3 D applications. Current 3 D component approaches are classified {{and a set of}} technical and authoring requirements for threedimensional <b>component</b> <b>architectures</b> derived. The CONTIGRA architecture is introduced as a declarative high-level 3 D component framework entirely based on XML documents...|$|R
50|$|KDbg is a {{free and}} {{open-source}} graphical front-end for the GNU Debugger. KDbg is implemented using the KDE <b>component</b> <b>architecture.</b>|$|E
50|$|In 2001, {{she won the}} Royal Academy of Engineering Silver Medal for the {{invention}} and engineering of Reusable Software <b>Component</b> <b>Architecture.</b>|$|E
50|$|Service <b>Component</b> <b>Architecture</b> (SCA) and Service Data Objects (SDO), {{which are}} {{alternatives}} to WCF in the Java world standardized by OASIS.|$|E
40|$|This {{technical}} report report describes current stage of an experimental SOFA implementation created at the Department of Computer Scienence and Engineering, University of West Bohemia. The information hereafter is {{intended mainly for}} new SOFA team members and students of master degree that participate on the project. However, it could be interesting also for external spectators that {{are interested in the}} SOFA framework or in <b>component</b> <b>architectures</b> in general...|$|R
50|$|The FDIC EA {{framework}} includes five components. The first <b>component,</b> the Business <b>Architecture,</b> {{focuses on}} FDIC's business needs. The next three <b>components,</b> the Data <b>Architecture,</b> Applications Architecture, and Technical Infrastructure Architectures, {{focus on the}} technological capabilities that support the business and information needs. The final <b>component,</b> the Security <b>Architecture,</b> focuses on specific aspects {{of interest to the}} Corporation that span the enterprise and must be integral parts of all other architectures.|$|R
30|$|The fourth paper, “Exception Handling System for Service Component Architectures” by Fernando Castor, Douglas Siqueira Leite and Cecília Mary F. Rubira, {{presents}} {{the design and}} implementation of an exception-handling model that target Service <b>Component</b> <b>Architectures</b> (SCA). The proposed model supports coordinated exception handling and allows the creation, in a flexible way, of fault-tolerant asynchronous service compositions in SCA implementations. This model {{is designed to be}} easily instantiated to new and existing applications using aspect-oriented programming.|$|R
50|$|Users can {{configure}} the Foobar2000 Media Library with automated folder {{watching and}} Windows Media streaming. The client is built {{with an open}} <b>component</b> <b>architecture,</b> allowing third-party developers to extend functionality of the player.|$|E
50|$|Intelligent {{tutoring}} systems (ITS) traditionally had a three-component architecture: domain model, student model, and tutoring model. Later, {{a fourth}} component was added: the interface component. Now ITS is commonly {{known to have}} a four <b>component</b> <b>architecture.</b>|$|E
50|$|URBI is a {{parallel}} and event-driven language, with interfaces to C++/Java and MATLAB. It {{also has a}} <b>component</b> <b>architecture</b> (UObject) for distributed computation. Urbi is compatible with many robots, including Nao (cf Robocup), Bioloid or Aibo.|$|E
40|$|By impersonating {{legitimate}} users, intruders can use {{the abundant}} resources of cloud computing environments. This paper develops a framework for "CIDS" a cloud based intrusion detection system, to solve the deficiencies of current IDSs. CIDS also provides a component to summarize the alerts and inform the cloud administrator. CIDS architecture is scalable and elastic with no central coordinator. This paper describes the <b>components,</b> <b>architecture,</b> detection models, and advantages of CIDS. © 2012 IEEE...|$|R
40|$|Modern dialog and {{information}} systems are increasingly based on distributed <b>component</b> <b>architectures</b> {{to cope with}} all kinds of heterogeneity and to enable flexible re-use of existing software components. This contribution presents the MULTIPLATFORM testbed as a powerful framework for the development of integrated multimodal dialog systems. The paper provides a general overview of our approach and explicates its foundations. It describes advanced sample applications that have been realized using the integration platform and compares our approach to related works...|$|R
40|$|Designingcomponents and {{composing}} {{them into}} an architecture inherentlyinvolves describing their behavior. The classical software engineering approach to specifying requirements for large-scale components is to start with use cases. However, employing use cases to <b>component</b> <b>architectures</b> triggers the need of (i) assembling the behavior specified by several use cases, (ii) composing the behavior of communicating entities, and (iii) reasoning on consistency of the composed behavior. Applying a modeling language, such as UML,while dealing with these issues is desirable...|$|R
