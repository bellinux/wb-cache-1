60|292|Public
50|$|<b>Corner</b> <b>case,</b> {{a common}} {{area in which}} systems are brittle.|$|E
5000|$|... (Note: In the {{original}} paper, the expression {{near the end}} is , due to a <b>corner</b> <b>case</b> in the specification of the semantics of ALGOL 60's for statement.) ...|$|E
50|$|The drivers which work {{properly}} in normal circumstances {{can go wrong}} in rare and exceptional cases and the traditional testing techniques may not help in detecting the <b>corner</b> <b>case</b> behavior of the drivers.|$|E
5000|$|Note: {{this will}} go into an {{infinite}} loop if [...] or other such <b>corner</b> <b>cases.</b>|$|R
50|$|An {{implementation}} of the full algorithm must address many <b>corner</b> <b>cases</b> and tie situations not discussed here.|$|R
50|$|If {{the message}} broker, the ESB software, {{translates}} {{a message from}} one format to another, then as with any translation, there {{is the issue of}} semantics of the message. For example, a record can be translated from JSON to XML, but the same set of fields can be interpreted differently by different applications, specially {{in the case of the}} various <b>corner</b> <b>cases</b> that are usually known only to developers that have extensive experience with the application that is connected to the ESB. For the known <b>corner</b> <b>cases</b> the number of tests that cover all <b>corner</b> <b>cases</b> increases exponentially with every application that is connected to the ESB, because every ESB-connected application must be tested against every other application that is connected to the ESB.|$|R
50|$|Contrast a <b>corner</b> <b>case</b> {{with an edge}} case, {{an issue}} that occurs only at a (single) maximum or minimum parameter. For example, a speaker may distort audio at maximum volume, {{even in the absence}} of other extreme {{settings}} or conditions.|$|E
50|$|In engineering, a <b>corner</b> <b>case</b> (or {{pathological}} case) {{involves a}} problem or situation that occurs only outside of normal operating parameters—specifically one that manifests itself when multiple environmental variables or conditions are simultaneously at extreme levels, even though each parameter is within the specified range for that parameter.|$|E
50|$|Corner cases {{form part}} of an {{engineer}}'s lexicon—especially an engineer involved in testing or debugging a complex system. Corner cases are often harder and more expensive to reproduce, test, and optimize because they require maximal configurations in multiple dimensions. They are frequently less-tested, given the belief that few product users will, in practice, exercise the product at multiple simultaneous maximum settings. Expert users of systems therefore routinely find <b>corner</b> <b>case</b> anomalies, and in many of these, errors.|$|E
30|$|The {{simulation}} results {{demonstrate that the}} model does not present any signal integrity problem (neither in the <b>corner</b> <b>cases).</b>|$|R
50|$|The default {{method of}} snakes has various {{limitation}} and <b>corner</b> <b>cases</b> where the convergence performs poorly. Several alternatives exist which addresses {{issues of the}} default method, though with their own trade-offs. A few are listed here.|$|R
50|$|In this example, the {{verification}} engineer {{is interested}} in the distribution of broadcast and unicast frames, the size/f_type field and the payload size. The ranges in the payload size coverpoint reflect the interesting <b>corner</b> <b>cases,</b> including minimum and maximum size frames.|$|R
50|$|Something {{might be}} a kludge if it fails in corner cases, {{but this is a}} less common sense, as such {{situations}} are not expected to come up in typical usage. More commonly, a kludge is a poorly working heuristic which was expected to work adequately. An intimate knowledge of the context (i.e., problem domain and/or the kludge's execution environment) is typically required to build a <b>corner</b> <b>case</b> kludge. As a consequence, they are sometimes ironically praised.|$|E
5000|$|The term [...] "corner case" [...] {{comes about}} by {{physical}} analogy with [...] "edge case" [...] {{as an extension}} of the [...] "flight envelope" [...] metaphor to a set of testing conditions whose boundaries are determined by the 2n combinations of extreme (minimum and maximum) values for the number n of variables being tested, i.e., the total parameter space for those variables. Where an edge case involves pushing one variable to a minimum or maximum, putting users at the [...] "edge" [...] of the configuration space, a <b>corner</b> <b>case</b> involves doing so with multiple variables, which would put users at a [...] "corner" [...] of a multidimensional configuration space.|$|E
5000|$|The empty {{interface}} [...] is {{an important}} <b>corner</b> <b>case</b> because it can refer to an item of any concrete type. It {{is similar to the}} [...] class in Java or C# and is satisfied by any type, including built-in types like [...] Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the [...] value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's [...] package. Because [...] can refer to any value, it is a limited way to escape the restrictions of static typing, like [...] in C but with additional run-time type checks.|$|E
40|$|The {{quality of}} systems that {{integrate}} Web {{services provided by}} independent organizations depends on the ways the sys-tems interact with the services, i. e., on their interaction pro-tocols, which are {{not always easy to}} deduce by inspecting the code. Accurate models of interaction protocols provide a comprehensive view of the interactions, and support man-ual and automatic analysis of <b>corner</b> <b>cases</b> that are often difficult to discover, and are responsible from many subtle failures. Models of program behavior can be extracted either sta-tically from the source code or dynamically from execution traces. Dynamic techniques cannot reveal behaviors that have not been executed, and thus dynamic models are par-tially useful to identify critical <b>corner</b> <b>cases.</b> Static tech...|$|R
50|$|EXA was {{introduced}} as a stopgap measure, to provide better integration with XRender than XAA did, improving the X.Org Server 2D performance. In practice, while this proved quite advantageous in some respects, it also exhibited {{a number of}} <b>corner</b> <b>cases</b> and regressions.|$|R
5000|$|According to a VMware {{evaluation}} paper: [...] "EPT provides performance {{gains of}} up to 48% for MMU-intensive benchmarks and up to 600% for MMU-intensive microbenchmarks", although it can actually cause code to run slower than a software implementation in some <b>corner</b> <b>cases.</b>|$|R
5000|$|SiConnect's {{technology}} combined simple {{building blocks}} within a holistic system design, {{with the aim}} being to avoid the complexity of heavily engineered approaches such as HomePlug's so as to achieve similar performance {{at a much lower}} price. The first generation of its POEM technology had a 21 Mbit/s PHY layer, from which it could easily deliver 14 Mbit/s of application-level performance - very similar to its contemporary [...] "HomePlug Turbo" [...] technology, despite its much higher PHY rate of 85 Mbit/s. Whereas HomePlug-style approaches relied heavily on FEC and other coding techniques to ensure end-to-end throughput over a heavyweight OFDM modulation layer, POEM used lightweight agile carriers that were able to re-tune to dodge any major sources of dynamic noise on any given link, thereby relieving the need for strong FEC. <b>Corner</b> <b>case</b> performance would not have been as strong, but the typical scenarios were served as well as with HomePlug, but with much lower implementation cost.|$|E
50|$|The Archaeological Collection of Galaxidi {{is under}} the {{directorate}} of the Ephorate of Antiquities of Phocis. The collection was established in 1932 in order to host antiquities found and donated by citizens as well as excavation finds from the regions in and around Galaxeidi. The exhibition is organised in three main themes: (a) Private and daily life, (b) Trade and maritime activity and (c) Cemeteries. It focuses on the educational aspects as the finds are accompanied by pictures and texts, revealing the history of ancient Haleion, the precursor of Galaxeidi. The settlements represented in the first window case are Dexameni, Kefalari, Apsifia and Anemokambi; the Early Helladic period (3200-1900 B.C.)of Haleion itself is also represented. Among the exhibits stand out Mycenaean vessels (three-eared pithoid amphora, stirrup jar and pyxis) and Geometric vessels from the cemetery of Agios Athanasios. In the next case are exhibited finds {{from the city of}} Haleion (Galaxeidi) itself. The city wall, dating to the period of the Aetolian League delimited the settlement and made it one of the best protected ports of the Corinthian gulf. At Heroon Square there was excavated a cemetery rich in finds, which reveal aspects of the daily life in Haleion. Among the finds stands out a black glazed kantharos, two lagynoi, some spindle-shaped unguentaria and terracotta lamps. To the Archaic period (7th century BC) date cotylae with angular handles, aryballoi and pyxides originating from Corinth and other vessels. Attic pottery is also represented through black-figure cylixes and lekythoi and two black-glazed kantharoi. Particularly interesting is the red-figured pelike with the representation of a man wearing the himation, supported by a stick and talking to a young man, also wearing the himation (2nd quarter of the 5th century B.C.).This is a type quite common as a similar one is exhibited in the Archaeological Museum of Amphissa and one in the Archaeological Museum of Messenia, found in Nihoria.Seven glass vessels represent the glassmaking of the 1st century A.D. Among them stands out a cast cup, bearing the inscription “Be happy in everything that you participate at”. From the woman's world are displayed mainly beauty items, such as the two bronze mirrors, pieces of bronze Geometric jewelry and a remarkable pendant {{in the form of a}} head of Ammon Zeus probably dating to the Roman period. Household weaving, one of the basic women's activities, is attested by numerous clay loom weights one of which bears the name “Agesiou”. The case opposite to the entrance comprises clay figurines and metal vessels and tools from the site Akona or Ankona. They are mainly busts, seated figures and standing figures with a tall headcover holding a bird in her chest. More than 100 bronze vessels and utensils from Galaxeidi are found scattered in 15 museums in America and Europe. They have all been illegally exported in the 19th century. In 1973 these vessels were identified through the discovery of a bell-shaped lekythos and a tall handle, which reminded of the two lekythoi of the British Museum and the one in Edinburgh which bear the indication “Galaxeidi”. In a <b>corner</b> <b>case</b> is displayed a globular amphora of the Late Early Helladic II period(2400-2200 B.C.) from Anemokambi, covered entirely with shells' residues. In a compartment with sand on the floor have been placed seven commercial amphoras for transportation of wine, dated in various periods and coming from different regions (Corinth, Corfu, Cnidus, Hellensitic of the 1st century B.C., Aegean type of the 5th-6th century A.D). At the end of the hall are displayed finds from Agios Athanasios (Geometric period) and from the town of Galaxeidi itself (Classical-Roman period). Part of a Roman marble statue and a funerary relief as well as three inscribed funerary stele of the late Hellenistic period are displayed. Geometric pottery comprises mainly skyphoi and wine jugs from Corinth as well as other vessels. The Hellenistic pottery comprises lagynoi, Corinthian kantharoi, miniature lekythoi,etc. Among the Roman vessels stands out one with the pattern of a gladiator, another one with a cupid and a third one with the depiction of a female figure, holding torches and bearing a crescent on the head, possibly an incarnation of the Night.|$|E
40|$|This paper {{describes}} a three step formal audit process which will identify designs {{that have a}} high risk of <b>corner</b> <b>case</b> bugs and will require a large amount of random testing to verify. The audit will also highlight areas of the design which are at the most risk. Methods are demonstrated which reduce both the amount of random testing needed to verify a design and the risk associated with <b>corner</b> <b>case</b> bugs showing up after tape-out...|$|E
25|$|The kernel often {{interfaces}} {{with the}} process manager. The level of abstraction is such that the kernel never calls into the process manager, only {{the other way around}} (save for a handful of <b>corner</b> <b>cases,</b> still never to the point of a functional dependence).|$|R
40|$|We {{propose a}} unified {{framework}} to study relational contracting and hold-up problems in infinite horizon stochastic games. We first illustrate that {{with respect to}} long run decisions, the common formulation of relational contracts as Pareto-optimal public perfect equilibria is {{in stark contrast to}} fundamental assumptions of hold-up models. We develop a model in which relational contracts are repeatedly newly negotiated during relationships. Negotiations take place with positive probability and cause bygones to be bygones. Traditional relational contracting and hold-up formulations are nested as opposite <b>corner</b> <b>cases.</b> Allowing for intermediate cases yields very intuitive results and sheds light on many plausible trade-offs that do not arise in these <b>corner</b> <b>cases.</b> We establish a general existence result and a tractable characterization for stochastic games in which money can be transferred...|$|R
50|$|The {{more complex}} the product or situation, the more {{necessary}} {{a good understanding}} of its failure cause is to ensuring its proper operation (or repair). Cascading failures, for example, are particularly complex failure causes. Edge <b>cases</b> and <b>corner</b> <b>cases</b> are situations in which complex, unexpected, and difficult-to-debug problems often occur.|$|R
40|$|A {{comparison}} is presented of a computational {{investigation of the}} flowfield created by supersonic flow over an internal corner with rounding and experimental results at a freestream Mach number of 4. 1. The computational study uses a shock-fitting finite difference scheme with explicit formulation of the transformation to computational coordinates. The solutions calculated agree with previous ones for the sharp <b>corner</b> <b>case</b> and with the experimental investigation results for the rounded <b>corner</b> <b>case.</b> Parametric effects were computed for variations in corner rounding, freestream Mach number, symmetric wedge angle and unsymmetric wedge angle. A region is described over which successful executions were obtained...|$|E
30|$|When the {{roll-off}} {{is equal}} to zero, the self-interference is absent, both RRC and RC became a rect filter in frequency domain. This is a <b>corner</b> <b>case</b> where GFDM implements the orthogonal concept of the localized single-carrier frequency-division multiple access (SC-FDMA) scheme [18].|$|E
40|$|First {{beta release}} of fully {{featured}} version with complete unit test coverage. Code deliberately {{not covered by}} tests is marked #pragma: no cover so it does not {{show up in the}} coverage tool. Several minor <b>corner</b> <b>case</b> bugs were corrected, and additional features such as [...] conservative and [...] cigar_score added...|$|E
5000|$|There {{are some}} <b>corner</b> <b>cases</b> {{that are not}} well {{explained}} in the rules, such as [...] "What happens to fire if one pawn removes the pawn with fire by landing on its square?". Should the fire be set back to out of play, or should it transfer to the attacking pawn? ...|$|R
40|$|Transitional buoyant jet {{diffusion}} flames are investigated by 3 D spatial direct numerical simulations (DNS). To examine the fuel source and sidewall geometry effects, a comparative {{study has been}} performed with four computational cases: a free-square and a free-round case in an open boundary domain, and a corner-square and a corner-round case in a half-confined domain. A grid system of 192 × 192 × 288 nodes is employed to obtain the near field flame structure. Due to the absolute buoyancy instability and the geometry effects, the {{jet diffusion}} flames display unsteady dynamic behavior. The free-square case is more vortical and entrains more efficiently than the free-round case because of the self-induced vortex deformation associated with the noncircular source geometry. The sidewall effects {{are found to be}} significant on the flame structure because of the wall-induced vortex deformation. Compared with the free <b>cases,</b> the <b>corner</b> <b>cases</b> have a stronger tendency of transition to turbulence. The corner-round case has a much stronger wall-induced vortex deformation than the corner-square <b>case.</b> Although the <b>corner</b> <b>cases</b> are half-confined in the cross-streamwise directions, entrainment of the <b>corner</b> <b>cases</b> is not lower than that of the free cases due to the wall-induced vortex deformation. In contrast with the comparison between the free-round and free-square cases, entrainment of the corner-round case is higher than that of the corner-square case...|$|R
40|$|This version fixes ncap 2 cell_methods <b>corner</b> <b>cases.</b> Implements {{prototype}} 2 -D UGRID output. Finishes bare-bones [...] lst_rnk_ge 2 implementation {{for native}} and regridded datasets. Improves handling of mask variables inferred by nco_grd_nfr, and makes inferral more robust to presence/absence of area/mask variaables. Finally it fixes an embarassing problem where nearestdtos actually invokednfr neareststod...|$|R
40|$|Power gating (PG) {{and body}} biasing (BB) are popular leakage control {{techniques}} at microarchitectural level. However, their large overhead {{prevents them from}} being applied for active leakage reduction. The overhead problem is further magnified by temperature and process variation, leading to the “corner case leakage control ” problem. This paper presents an Adaptive Light-Weight Vth Hopping technique. This technique dramatically reduces the overhead for mode transition, addresses the <b>corner</b> <b>case</b> leakage control problem, and thus enables active leakage control. 1...|$|E
40|$|Constraint-based random {{simulation}} is state-of-the-art in {{verification of}} multi-million gate industrial designs. This method {{is based on}} stimulus generation by constraint solv-ing. The resulting stimuli will particularly cover <b>corner</b> <b>case</b> test scenarios which are usually hard to identify manu-ally by the verification engineer. Consequently, constraint-based random simulation will catch <b>corner</b> <b>case</b> bugs that would remain undetected otherwise. Therefore, the quality of design verification is increased significantly. However, {{in the process of}} constraint specification for a specific test sce-nario, the verification engineer is faced with the problem of over-constraining, i. e. the overall constraint specified for a test scenario has no solution. In this case the root cause of the contradiction has to be identified and resolved. Given the complexity of constraints used to describe test scenar-ios, this can be a very time-consuming process. In this paper we propose a fully automated contradic-tion analysis method. Our method determines all “non rel-evant ” constraints and computes all reasons that lead to the over-constraining. Thus, we pinpoint the verification engineer to exactly the sets of constraints that have to be considered to resolve the over-constraining. Experiments have been conducted in a real-life SystemC-based verifi-cation environment at AMD Dresden Design Center. They demonstrate a significant reduction of the constraint con-tradiction debug time. 1...|$|E
40|$|Deep {{learning}} (DL) {{systems are}} increasingly deployed in safety- and security-critical domains including self-driving cars and malware detection, where the correctness and predictability of a system's behavior for <b>corner</b> <b>case</b> inputs are of great importance. Existing DL testing depends heavily on manually labeled data and therefore often fails to expose erroneous behaviors for rare inputs. We design, implement, and evaluate DeepXplore, the first whitebox framework for systematically testing real-world DL systems. First, we introduce neuron coverage for systematically measuring {{the parts of}} a DL system exercised by test inputs. Next, we leverage multiple DL systems with similar functionality as cross-referencing oracles to avoid manual checking. Finally, we demonstrate how finding inputs for DL systems that both trigger many differential behaviors and achieve high neuron coverage can be represented as a joint optimization problem and solved efficiently using gradient-based search techniques. DeepXplore efficiently finds thousands of incorrect <b>corner</b> <b>case</b> behaviors (e. g., self-driving cars crashing into guard rails and malware masquerading as benign software) in state-of-the-art DL models with thousands of neurons trained on five popular datasets including ImageNet and Udacity self-driving challenge data. For all tested DL models, on average, DeepXplore generated one test input demonstrating incorrect behavior within one second while running only on a commodity laptop. We further show that the test inputs generated by DeepXplore {{can also be used}} to retrain the corresponding DL model to improve the model's accuracy by up to 3 %. Comment: To be published in SOSP' 1...|$|E
50|$|The 3D {{acceleration}} set {{was provided}} via the Direct Rendering Manager, which worked by mapping 3D rendered pictures {{on top of}} the 2D picture. This had some buggy <b>corner</b> <b>cases,</b> but more or less worked, until compositing entered into the desktop. This distinction has become the source of a lot of bugs, and performance problems.|$|R
30|$|Static (or analytic) {{methods are}} {{typically}} used in early design-space exploration to find different <b>corner</b> <b>cases.</b> Analytical models cannot {{take into consideration}} sporadic effects in the system behavior, such as aperiodic interrupts or other aperiodic external events. Static models are suited for performance evaluation when deterministic behavior {{of the system is}} accurate enough for the analysis.|$|R
50|$|Orthographic {{rules are}} general rules used when {{breaking}} a word into its stem and modifiers. An example would be: singular English words ending with -y, when pluralized, end with -ies. Contrast this to Morphological rules which contain <b>corner</b> <b>cases</b> to these general rules. Both {{of these types}} of rules are used to construct systems that can do morphological parsing.|$|R
