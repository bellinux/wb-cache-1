5|26|Public
5000|$|Devices of {{the time}} mainly had 480×240 pixel {{displays}} {{with the exception of}} the Hewlett-Packard 'Palmtop PC' which had a 640×240 display. Each window took over the full display. Navigation was done by tapping or double tapping on an item. A contextual menu was also available by the user pressing the ALT key and tapping on the screen. Windows CE 1.0 did not include a cascading Start menu unlike Windows 95 and Windows NT 4.0 did. Microsoft released the Windows CE 1.0 Power Toys that included a <b>cascading</b> <b>menu</b> icon that appeared in the system tray. Also bundled were several other utilities, most notable were a sound applet for the system tray, enabling the user to quickly mute or unmute their device or adjust the volume and a 'pocket' version of Paint.|$|E
50|$|The {{release of}} Windows CE 2.0 was well received. Microsoft learned its lessons from {{consumer}} feedback of Windows CE 1.0 and made many {{improvements to the}} operating system. The Start menu was a <b>cascading</b> <b>menu,</b> identical to those found on Windows 95 and Windows NT 4.0. Color screens were also supported and manufacturers raced to release the first color H/PC. The first to market however, was Hewlett Packard with the HP 620LX. Windows CE 2.0 also supported {{a broader range of}} CPU architectures. Programs could be also installed directly in the OS by double clicking on CAB files. Due {{to the nature of the}} ROMs that contained the operating system, users were not able to flash their devices with the newer operating system. Instead manufacturers released upgrade ROMs that users had to physically install in their devices, after removing the previous version. This would usually wipe the data on the device and present the user with the setup wizard upon first boot.|$|E
50|$|Within human-computer interaction, {{the law was}} rediscovered by Johnny Accot and Shumin Zhai, who mathematically derived it in a novel {{way from}} Fitts's law using {{integral}} calculus, experimentally verified it for a class of tasks, and developed the most general mathematical statement of it. Some researchers within this community have sometimes referred to the law as the Accot-Zhai steering law or Accot's law (Accot is pronounced ah-cot in English and ah-koh in French). In this context, the steering law is a predictive model of human movement, concerning the speed and total time with which a user may steer a pointing device (such as a mouse or stylus) through a 2D tunnel presented on a screen (i.e. with a bird's eye view of the tunnel), where the user must travel {{from one end of}} the path to the other as quickly as possible, while staying within the confines of the path. One potential practical application of this law is in modelling a user's performance in navigating a hierarchical <b>cascading</b> <b>menu.</b>|$|E
50|$|This version also {{features}} a revamped user interface. Instead of a static toolbar, items are accessed via <b>cascading</b> <b>menus</b> from {{the right of the}} screen, resulting in more screen real-estate for SimCity itself, without sacrificing functionality.|$|R
40|$|<b>Cascading</b> <b>menus</b> are {{commonly}} seen in most GUI systems. However, people sometimes choose the wrong items by mistake, or become frustrated when submenus pop up unnecessarily. This paper proposes two methods {{for improving the}} usability of <b>cascading</b> <b>menus.</b> The first uses the direction of cursor movement to change the menu behavior: horizontal motion opens/closes submenus, while vertical motion changes the highlight within the current menu. This feature can reduce cursor movement errors. The second causes a submenu to pop up at the position where horizontal motion occurs. This is expected to reduce {{the length of the}} movement path for menu traversal. A user study showed that our methods reduce menu selection times, shorten search path lengths, and prevent unexpected submenu appearance and disappearance...|$|R
50|$|Besides {{restoring}} past behavior, {{there are}} several new features. These include showing the menu next to the taskbar when it is vertical, multi-monitor support, launching multiple programs at once, custom shutdown-related actions, Universal app launching, expanding any file folder as <b>cascading</b> <b>menus,</b> and additional keyboard shortcuts. The search box can search the system path, can show partial matches, and can show all results inside the menu.|$|R
5000|$|With Windows XP, the Start button {{has been}} updated to support Fitts's law. To help the user access {{a wider range}} of common {{destinations}} more easily from a single location, the Start menu was expanded to two columns; the left column focuses on the user's installed applications, while the right column provides access to the user's documents, and system links which were previously located on the desktop. Links to the My Documents, My Pictures and other special folders are brought to the fore. The My Computer and My Network Places (Network Neighborhood in Windows 95 and 98) icons were also moved off the Desktop and into the Start menu, making it easier to access these icons while a number of applications are open and so that the desktop remains clean. Moreover, these links can be configured to expand as a <b>cascading</b> <b>menu.</b> Frequently used programs are automatically displayed in the left column, newly installed programs are highlighted, and the user may opt to [...] "pin" [...] programs to the start menu so that they are always accessible without having to navigate through the Programs folders. The default internet browser and default email program are pinned to the Start menu. The Start menu is fully customizable, links can be added or removed; the number of frequently used programs to display can be set. The All Programs menu expands like the classic Start menu to utilize the entire screen but can be set to scroll programs. The user's name and user's account picture are also shown on the Start menu.|$|E
40|$|Humans have {{a strong}} natural ability to {{remember}} item locations. In graphical user interfaces, this ability {{is one of the}} primary mechanisms by which users become efficient. However, there are two ways in which modern applications often fail to exploit the potential of spatial memory. First, they overuse hierarchical structures such as cascading menus, which slows down interaction for expert users who already know item locations; and second, they move items around, most commonly in response to changing display geometry. The three goals of this thesis are therefore to (1) develop a better understanding of human spatial memory in the context of user interfaces; (2) design and validate efficient command-selection interfaces based on the strength of spatial memory; and (3) design and validate interface strategies that allow users to maintain spatial memory even when display geometry changes. Addressing goal (1), a comprehensive literature review of spatial memory for user interfaces is presented. The review covers underlying psychological models of spatial memory, the observable properties of spatial memory, and existing applications of spatial memory to human-computer interaction. In addition to informing the research in this thesis, the review is intended to provide a useful summary of the state of spatial memory research for scientists in HCI, as well as providing a set of design guidelines on spatial memory for practitioners. Addressing goal (2), this thesis presents the design and evaluation of two related user interface techniques, CommandMaps and StencilMaps. The CommandMap is a spatially stable interface with a flattened hierarchy, intended as a replacement for <b>cascading</b> <b>menu</b> systems. Theoretical performance predictions indicate that CommandMaps should be significantly faster than traditional user interfaces such as menus and the Microsoft Office Ribbon, and laboratory-based empirical studies of command selection confirm these predictions. These positive results motivated the design and implementation of two real-world CommandMap user interfaces based on Microsoft Word and Pinta (an open-source image editing application). Evaluation results confirmed that CommandMaps continue to demonstrate performance and subjective advantages in the context of actual tasks, including interleaved command selection, typing, and direct manipulation. Qualitative data gathered from interviews, questionnaires, and conversations provide substantial insight into users' reactions to CommandMaps, leading to a set of design recommendations regarding when and how they should be implemented in real applications. One design limitation identified during CommandMap evaluations was that novice users could be initially overwhelmed by the number of controls displayed at once. To address this concern, an extension to the CommandMap, called a StencilMap, was designed and evaluated. By using a stencil overlay to de-emphasise more advanced controls, the StencilMap directs users' visual search to a subset of controls they are most likely to need. Then, when novice users progress to the full interface, they can utilise their existing knowledge of command locations. An initial study shows that stencils are more effective at guiding visual search than ephemeral adaptation, another subset emphasis technique; however, users' spatial learning decreases as the amount of guidance increases. A second study compared StencilMaps to a palette-based subset interface, which displays the most likely commands in a ready-to-hand tool panel. Results show that StencilMaps enable stronger learning of the full UI compared to the palette approach. Addressing goal (3), this thesis presents an investigation of how interfaces can be adapted to changing interface constraints while still supporting the user's memory for item locations. A human factors study on spatially consistent transformations was conducted, with results showing that people's spatial memory is only minimally disrupted by geometric transformations (such as scaling, translation, or perspective distortion), as long as the set of items in a display is transformed as a whole. This idea is then applied to a file browser layout: by scaling the item grid when the parent window is resized, rather than reflowing items, memory for item locations can be maintained. A second study validates this idea, showing that a scaling interface outperforms both reflow and scrolling-based techniques for revisitation when windows are resized. In summary, the contributions of this thesis are: (1) an in-depth literature review of spatial memory in psychology and HCI, which is intended to inform designers and future researchers as well as the material in this thesis; (2) the design, implementation and evaluation of a new interface, the CommandMap, which shows that spatial stability and hierarchy flattening enable a high ceiling of expert performance; (3) the design of a stencil overlay technique to help novice users find commands, and an evaluation highlighting the key trade-off between helping users and allowing them to learn; and (4) empirical evidence showing that most types of whole-interface transformations have a small effect on spatial memory, and that correspondingly, scaling interfaces outperform reflowing interfaces under changing window constraints...|$|E
40|$|<b>Cascading</b> <b>menus</b> {{are used}} in almost all {{graphical}} user interfaces. Most current cascade widgets implement an explicit delay between the cursor entering/leaving a parent <b>cascade</b> <b>menu</b> item and posting/unposting the associated menu. The delay allows users to make small steering errors while dragging across items, and it allows optimal diagonal paths from parent to cascade items. However, the delay slows the pace of interaction for users who wait for the delay to expire, and it demands jerky discrete movements for experts who wish to pre-empt the delay by clicking. This paper describes Enlarged activation area MenUs (EMUs), which have two features: first, they increase {{the area of the}} parent menu associated with each cascade; second, they eliminate the posting and unposting delay. An evaluation shows that EMUs allow cascade items to be selected up to 29 % faster than traditional menus, without harming top-level item selection times. They also have a positive smoothing effect on menu selections, allowing continuous sweeping selections in contrast to discrete movements that are punctuated with clicks. CR Categories: H 5. 2 [User Interfaces]: Interaction styles...|$|R
50|$|JAWS was {{originally}} {{created for the}} MS-DOS operating system. It {{was one of several}} screen readers giving blind users access to text-mode MS-DOS applications. A feature unique to JAWS at the time was its use of <b>cascading</b> <b>menus,</b> {{in the style of the}} popular Lotus 1-2-3 application. What set JAWS apart from other screen readers of the era was its use of macros that allowed users to customize the user interface and work better with various applications.|$|R
40|$|For Fall {{semester}} 2016 the ABE department {{moved the}} course ASM 540 Basic GIS from ArcGIS Desktop 10. 2 to ArcGIS Pro 1. 3. This software from ESRI has {{a completely new}} look and feel, (ribbon-based rather than <b>cascading</b> <b>menus)</b> and is a true 64 bit application, capable of multi-threading, and built on Python 3. After ArcGIS Desktop 10. 5 is released, desktop ends and the future release will be ArcGIS Pro; {{so it makes sense}} to switch sooner rather than later. This talk will discuss some issues and some observations of that process...|$|R
5000|$|Windows 7 and Windows Server 2008 R2 {{supports}} showing icons in {{the context}} <b>menu</b> and creating <b>cascaded</b> context <b>menus</b> with static verbs in submenus using the Registry instead of a shell extension.|$|R
40|$|Part 1 : Long and Short PapersInternational audienceMenu {{research}} has focused predominantly on linear <b>menus</b> (e. g., <b>cascading</b> <b>menus).</b> Little is known about user behavior with radial menus, which {{have been around for}} some time. The paper investigates the order in which users find items in radial menus. We analyze data collected in a controlled experiment and define serial position for items laid out in a circular fashion. For the first level (ring), the serial positions start at 12 o’clock position and alternate between both sides of the ring. For subsequent levels, the serial positions follow distance from a parent item. The defined search pattern yields strong fit and has substantial effect on search performance. We discuss the results in the context of radial menu design...|$|R
40|$|Abstract. Trajectory-based {{tasks are}} common in many {{applications}} and have been widely studied. Recently, researchers have shown that even very simple tasks, such as selecting items from <b>cascading</b> <b>menus,</b> can benefit from hapticforce guidance. Haptic guidance is also of significant value in many applications such as medical training, handwriting learning, and in applications requiring precise manipulations. There are, however, only very few guiding principles for selecting parameters that are best suited for proper force guiding. In this paper, we present a model, derived from the steering law that relates movement time to the essential components of a tunneling task {{in the presence of}} haptic-force guidance. Results of an experiment show that our model is highly accurate for predicting performance times in force-enhanced tunneling tasks...|$|R
40|$|Abstract. Menu {{research}} has focused predominantly on linear <b>menus</b> (e. g., <b>cascading</b> <b>menus).</b> Little is known about user behavior with radial menus, which {{have been around for}} some time. The paper investigates the order in which users find items in radial menus. We analyze data collected in a controlled experiment and define serial position for items laid out in a circular fashion. For the first level (ring), the serial positions start at 12 o’clock position and alternate between both sides of the ring. For subsequent levels, the serial positions follow distance from a parent item. The defined search pattern yields strong fit and has substantial effect on search performance. We discuss the results in the context of radial menu design...|$|R
40|$|Different {{presentations of}} {{candidate}} expansion terms {{have not been}} f,~lly explored in interactive query expansion (IQE). Most existing systems that offer an IQE facility use a list form of presentation. This paper examines an hierarchical presentation of the expansion terms which are automatically generated from a set of retrieved documents, organisad in a general to apecific manner, and visu-alised by <b>cascade</b> <b>menus.</b> To evaluate the effactiveness of the pre-sentation, a user test was carried out to compare the hierarchical form with the conventional list form. This shows that users of the hierarchy can complete the expansion task in less time and with fewer terms over those using the lists. Relations between initial query terms and selected expansion terms were also investigated. Keywords Information retrieval, interactive query expansion, concept hierar-chies 1...|$|R
40|$|Selecting {{items in}} <b>cascading</b> {{pull-down}} <b>menus</b> {{is a frequent}} task in most GUIs. These selections involve two major components: steering and selection, with the steering component being the most time-consuming and error-prone. We describe a new technique, called Adaptive Activation-Area Menu (AAMU) that eliminate corner steering. AAMUs contain an enlarged activation area which dynamically resizes itself providing a broader steering path for menu navigation. We also combined AAMUs with Force-field menus, to create Force-AAMUs. We empirically demonstrate that AAMUs and Force-AAMUs outperformed the current default menu. We also compared performances of various other menus including Enlarged activation area menus (EMUs) and Gesture based selection with mouse as an input device. Overall, users show higher satisfaction rates for AAMUs over other menu designs. Author Keywords <b>Cascading</b> pull-down <b>menus,</b> menu navigation, steering...|$|R
50|$|Future Windows releases, like Windows 95C (OSR 2.5) and Windows 98, {{included}} Internet Explorer 4 and {{the features}} of the Windows Desktop Update already built in. Improvements were made in Windows 2000 and Windows ME, such as personalized menus, ability to drag and sort menu items, sort by name function in <b>menus,</b> <b>cascading</b> Start <b>menu</b> special folders, customizable toolbars for Explorer, auto-complete in Windows Explorer address bar and Run box, displaying comments in file shortcuts as tooltips, advanced file type association features, extensible columns in Details view (IColumnProvider interface), icon overlays, places bar in common dialogs, high-color notification area icons and a search pane in Explorer.|$|R
50|$|The {{compositing}} mode for a clip {{is changed}} by control-clicking or right-clicking on the clip and selecting {{it from the}} <b>cascading</b> contextual <b>menu,</b> or by selecting the mode from the application's 'modify' menu. For either matte modes, the clip that will perform the key is placed overneath the fill clip on the Timeline.|$|R
40|$|In both {{real and}} 3 D virtual worlds, people and avatars (rep-resentations of people) {{need to be}} able to {{communicate}} with things around them. Without guidance, however, people cannot use the language that the things can understand. The goal of our research is to extend the 3 D virtual world Second Life ® to better model pervasive computing and overcome the boundaries of communi-cation. The aim of this paper is to show how to build a dynamic menu-based user interface that enables humans to communicate with model entities. The focus is the applicability of object-specific grammars associated with things (objects in the real and virtual worlds) and a GUI consisting of <b>cascaded</b> <b>menus</b> to guide people in “talking to ” things. This paper discusses the prototype model of a new virtual controller that takes us closer to the ultimate goal – a system that extends the Second Life user interface so that peopl...|$|R
40|$|Providing a user {{friendly}} and sophisticated user interface is a time-consuming and difficult task. On the other hand, {{the success of}} a software system {{is directly related to the}} quality of the user interface that it provides. In this thesis, a technique for the development of an automatic user interface is described and implemented; that is, we provide a tool that can be used to develop user interfaces on a platform known as the X-Window System. The hallmark of this tool is its ability to aid in developing reasonably sophisticated Graphical User Interfaces (GUI) interactively in relatively short time. The burden of programming is completely eliminated for the developer of the GUI, enabling him/her to concentrate on the details of the application for which the GUI is being developed, thus boosting his productivity. An attempt has been made to accommodate many features for the development of User Interfaces and provision has been made so that the implementation can be extended to include additional features easily. Buttons and <b>cascade</b> <b>menus</b> can be created, and functions can be associated with them just by a click of the mouse button...|$|R
40|$|Abstract—Current {{interfaces}} {{for common}} information visualizations such as bar graphs, line graphs, and scatterplots usually {{make use of}} the WIMP (Windows, Icons, Menus and a Pointer) interface paradigm with its frequently discussed problems of multiple levels of indirection via <b>cascading</b> <b>menus,</b> dialog boxes, and control panels. Recent advances in interface capabilities such as the availability of pen and touch interaction challenge us to re-think this and investigate more direct access to both the visualizations and the data they portray. We conducted a Wizard of Oz study to explore applying pen and touch interaction to the creation of information visualization interfaces on interactive whiteboards without implementing a plethora of recognizers. Our wizard acted as a robust and flexible pen and touch recognizer, giving participants maximum freedom in how they interacted with the system. Based on our qualitative analysis of the interactions our participants used, we discuss our insights about pen and touch interactions in the context of learnability and the interplay between pen and touch gestures. We conclude with suggestions for designing pen and touch enabled interactive visualization interfaces. Index Terms—Pen and touch, interaction, Wizard of Oz, whiteboard, data exploration. ...|$|R
40|$|Walking {{near where}} I {{live on a}} warm winter afternoon, it hit me. Layers. Everywhere I looked there were layers of rocks, {{leftovers}} from millions of years ago, now exposed by weathering. How apropos {{to many of the}} topics covered in this issue. There are layers in virtualization, layers in file systems, layers in networking, as well as pluses and minuses with having so many layers. Layers are not necessarily a bad thing. I was once asked to create drop-down, <b>cascading</b> <b>menus</b> using a primitive drawing library. Popping open a menu of choices was fairly easy, as was drawing a second-level menu. I just created a bunch of text rectangles of the correct size, making certain they stacked perfectly. But I also needed to deal with saving the pixels that were present before I drew the menu and with replacing those pixels once a selection was made. Today, you would just use a library, a list of menu items, a corresponding list of functions to call, and everything would get taken care of. In other words, you would take advantage of higher layers of software that made a task that was once difficult easy to do. Layer...|$|R
40|$|High {{functionality}} {{computer applications}} are rapidly growing {{in size and}} complexity. Loaded with <b>cascading</b> functions and <b>menus,</b> modern direct manipulation applications have steadily evolved into environments rich with tools, but requiring extensive knowledge about {{when and how to}} employ program features and functionality...|$|R
40|$|This paper {{introduces}} bubbling menus, a {{new design}} for <b>cascading</b> drop-down <b>menus.</b> Bubbling menus combine the bubble cursor [10] with directional mouse-gesture techniques {{to facilitate the}} access of certain items in a menu, such as frequently selected items. Through an extensive iterative design process, we explore bubbling menus {{in the context of}} adaptive and customizable user interfaces. Unlike other adaptation and customization techniques such as split menus, bubbling menus do not disrupt the original structure of menus and enable the activation of menus far from a menu bar. Results from two evaluation studies presented in the paper show that bubbling menus provide an effective alternative to accelerate menu selections tasks. ACM Classification: H 5. 2 [Information interfaces an...|$|R
2500|$|Windows Vista and its successors added {{minor changes}} to the menu. Prior to Windows Vista and Windows Server 2008, the Start menu {{consisted}} of a group of menus and sub-menus that cascaded and expanded, obscuring the initially visible portions of the screen beneath them. In Windows Vista, however, <b>cascading</b> <b>menus</b> were replaced by a sliding window in the left pane of the Start menu. Whenever All Programs item is clicked, the contents of the left pane slide off the left edge of the Start menu and the All Programs menu slides in from the right edge of the left column. This menu presents a tree view of it hierarchy that expands towards the bottom, with a vertical scrollbar whenever needed. Also added in Windows Vista is a Search box that allows users to search for the Start menu shortcuts or other files and folders. The search box features incremental search: If indexing is not turned off, the search box returns results on-the-fly as users type into it. Since the found items can be immediately opened, the Start menu search box replaces the function of Run command from previous versions of Windows. The Run command can also be added separately to the right column in the Start menu. In Windows 7 and Windows Server 2008 R2, the search results pane covers both columns of the Start menu. The search box is extended to support searching Control Panel items. The right column in Windows 7 links to Libraries instead of ordinary folders. Most importantly, however, items on the Start menu support Jump lists through cascade buttons on their right. Unlike prior versions, the ability to revert to the [...] "Classic" [...] Start menu design is no longer available.|$|R
50|$|Windows ME {{featured}} the shell enhancements inherited from Windows 2000 such as personalized menus, customizable Windows Explorer toolbars, auto-complete in Windows Explorer address bar and Run box, Windows 2000 advanced file type association features, displaying comments in shortcuts as tooltips, extensible columns in Details view (IColumnProvider interface), icon overlays, integrated search pane in Windows Explorer, sort by name function for menus, Places bar in common dialogs for Open and Save, <b>cascading</b> Start <b>menu</b> special folders, some Plus! 95 and Plus! 98 themes, and updated graphics. The notification area in Windows ME and later supported 16-bit high color icons. The Multimedia control panel was also updated from Windows 98 SE. Taskbar and Start Menu options allowed disabling of the {{drag and drop}} feature and could prevent moving or resizing the taskbar, which was easier for new users.|$|R
40|$|This report {{describes}} a three-year project (2000 - 03) {{undertaken in the}} Information Studies Department at The University of Sheffield and funded by Resource, The Council for Museums, Archives and Libraries. The overall {{aim of the research}} was to provide user support for query formulation and reformulation in searching large-scale textual resources including those of the World Wide Web. More specifically the objectives were: to investigate and evaluate methods for the automatic generation and organisation of concepts derived from retrieved document sets, based on statistical methods for term weighting; and to conduct user-based evaluations on the understanding, presentation and retrieval effectiveness of concept structures in selecting candidate terms for interactive query expansion. The TREC test collection formed the basis for the seven evaluative experiments conducted {{in the course of the}} project. These formed four distinct phases in the project plan. In the first phase, a series of experiments was conducted to investigate further techniques for concept derivation and hierarchical organisation and structure. The second phase was concerned with user-based validation of the concept structures. Results of phases 1 and 2 informed on the design of the test system and the user interface was developed in phase 3. The final phase entailed a user-based summative evaluation of the CiQuest system. The main findings demonstrate that concept hierarchies can effectively be generated from sets of retrieved documents and displayed to searchers in a meaningful way. The approach provides the searcher with an overview of the contents of the retrieved documents, which in turn facilitates the viewing of documents and selection of the most relevant ones. Concept hierarchies are a good source of terms for query expansion and can improve precision. The extraction of descriptive phrases as an alternative source of terms was also effective. With respect to presentation, <b>cascading</b> <b>menus</b> were easy to browse for selecting terms and for viewing documents. In conclusion the project dissemination programme and future work are outlined...|$|R
5000|$|Windows shell: The new Windows shell {{offers a}} new range of organization, navigation, and search capabilities: Task panes in Windows Explorer are removed, {{integrating}} the relevant task options into the toolbar. A [...] "Favorite links" [...] pane has been added, enabling one-click access to common directories. A search box appears in every Explorer window. The address bar has been replaced with a breadcrumb navigation bar. Icons of certain file types in Windows Explorer are [...] "live" [...] and can be scaled in size up to 256 × 256 pixels. The preview pane allows users to see thumbnails of various files and view the contents of documents. The details pane shows information such as file size and type, and allows viewing and editing of embedded tags in supported file formats. The Start menu has changed as well; incorporating an instant search box, and the All Programs list uses a horizontal scroll bar instead of the <b>cascading</b> flyout <b>menu</b> seen in Windows XP. The word [...] "Start" [...] itself has been removed {{in favor of a}} blue orb that bears the Windows logo.|$|R
40|$|The {{demand for}} {{performance}} and resources that {{is placed on}} the system is dictated by the application alone in non-interactive environments, and by a combination of application and user interactions in interactive environments. Understanding user interaction can provide valuable information about which resources will be needed ahead of time. This leads to performance optimizations such as better resource allocations for applications that can utilize a given resource more productively, and transitioning devices to a more appropriate energy performance state before the demand arrives. The challenge is to provide a performance/energy schedule that best matches the task at hand, since keeping the device in one performance level is not energy efficient due to the continually changing demand placed on the device. This dissertation addresses the challenge of designing energy efficient systems by examining the role of user interaction in energy consumption and in providing an energy-performance schedule that adequately accommodates user demand. It is shown that system performance can be tailored to a user's pattern of interaction and it's energy-performance schedule optimized. First, a detailed design of context capture systems in Linux's X-Window System is presented with an evaluation of the associated storage and computation overheads. Due to the overall low complexity of the application window representations, the overheads of computing interaction identifiers and storing a secondary representation of the application interface within the context capture system are likewise low. Additionally, a Microsoft Windows-based context capture system leveraging the Active Accessibility framework is discussed and applied to improving the navigation of <b>cascading</b> pull-down <b>menus.</b> Secondly, this dissertation addresses the application of interaction capture in energy and delay management of Wireless Network Interface Controllers/Cards (WNICs) and hard drives. The Interaction Aware Prediction (IAP) system for WNICs is evaluated showing that the available power modes can be effectively managed to provide energy efficiency while maintaining performance. Similarly, the Interaction Aware Spin-up Prediction (IASP) uses interaction awareness to reduce or eliminate the interactive delays associated with aggressive hard disk energy management...|$|R

