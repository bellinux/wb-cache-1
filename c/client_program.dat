290|701|Public
5|$|A Folding@home {{participant}} installs a <b>client</b> <b>program</b> {{on their}} personal computer. The user interacts with the client, which manages the other software components in the background. Through the client, the user may pause the folding process, open an event log, check the work progress, or view personal statistics. The computer clients run continuously in the background at a very low priority, using idle processing power so that normal computer use is unaffected. The maximum CPU use can be adjusted via client settings. The client connects to a Folding@home server and retrieves a work unit and may also download the appropriate core for the client's settings, operating system, and the underlying hardware architecture. After processing, the work unit is returned to the Folding@home servers. Computer clients are tailored to uniprocessor and multi-core processor systems, and graphics processing units. The diversity and power of each hardware architecture provides Folding@home {{with the ability to}} efficiently complete many types of simulations in a timely manner (in a few weeks or months rather than years), which is of significant scientific value. Together, these clients allow researchers to study biomedical questions formerly considered impractical to tackle computationally.|$|E
25|$|In {{cases such as}} MyDoom {{the tools}} are {{embedded}} in malware, and launch their attacks without {{the knowledge of the}} system owner. Stacheldraht {{is a classic example of}} a DDoS tool. It uses a layered structure where the attacker uses a <b>client</b> <b>program</b> to connect to handlers, which are compromised systems that issue commands to the zombie agents, which in turn facilitate the DDoS attack. Agents are compromised via the handlers by the attacker, using automated routines to exploit vulnerabilities in programs that accept remote connections running on the targeted remote hosts. Each handler can control up to a thousand agents.|$|E
25|$|The API {{is defined}} as a set of {{functions}} which may be called by the <b>client</b> <b>program,</b> alongside a set of named integer constants (for example, the constant GL_TEXTURE_2D, which corresponds to the decimal number 3553). Although the function definitions are superficially {{similar to those of the}} programming language C, they are language-independent. As such, OpenGL has many language bindings, some of the most noteworthy being the JavaScript binding WebGL (API, based on OpenGL ES 2.0, for 3D rendering from within a web browser); the C bindings WGL, GLX and CGL; the C binding provided by iOS; and the Java and C bindings provided by Android.|$|E
50|$|X uses a {{client-server}} model. An X server program runs on {{a computer}} with a graphical display and communicates with various <b>client</b> <b>programs.</b> The X server acts as a go-between for the user and the <b>client</b> <b>programs,</b> accepting requests on TCP port 6000 for graphical output (windows) from the <b>client</b> <b>programs</b> and displaying them to the user(display), and receiving user input (keyboard, mouse) and transmitting it to the <b>client</b> <b>programs.</b>|$|R
5000|$|... l) Talk with <b>clients,</b> <b>program</b> staff, {{and audiences}} (Stake, 1976) ...|$|R
5000|$|Failure transparency; the <b>client</b> and <b>client</b> <b>programs</b> should operate {{correctly}} after {{a server}} failure.|$|R
25|$|A {{system may}} also be {{compromised}} with a trojan, allowing the attacker to download a zombie agent, or the trojan may contain one. Attackers can also break into systems using automated tools that exploit flaws in programs that listen for connections from remote hosts. This scenario primarily concerns systems acting as servers on the web. Stacheldraht {{is a classic example}} of a DDoS tool. It uses a layered structure where the attacker uses a <b>client</b> <b>program</b> to connect to handlers, which are compromised systems that issue commands to the zombie agents, which in turn facilitate the DDoS attack. Agents are compromised via the handlers by the attacker, using automated routines to exploit vulnerabilities in programs that accept remote connections running on the targeted remote hosts. Each handler can control up to a thousand agents. In some cases a machine may become part of a DDoS attack with the owner's consent, for example, in Operation Payback, organized by the group Anonymous. These attacks can use different types of internet packets such as: TCP, UDP, ICMP etc.|$|E
2500|$|SeaMonkey {{consists}} of a web browser, which is a descendant of the Netscape family, an e-mail and news <b>client</b> <b>program</b> (SeaMonkey Mail & Newsgroups, which shares code with Mozilla Thunderbird), an HTML editor (SeaMonkey Composer) and an IRC client (ChatZilla). The software suite supports skins. [...] It comes with two skins in the default installation, Modern and Classic.|$|E
2500|$|X's network {{protocol}} {{is based on}} X command primitives. [...] This approach allows both 2D and (through extensions like GLX) 3D operations by an X client application which might be running on a different computer to still be fully accelerated on the X server's display. [...] For example, in classic OpenGL (before version 3.0), display lists containing large numbers of objects could be constructed and stored entirely in the X server by a remote X <b>client</b> <b>program,</b> and each then rendered by sending a single glCallList(which) across the network.|$|E
50|$|Encapsulating {{business}} logic: Stored procedures allow programmers {{to embed}} business logic as an API in the database, which can simplify data management {{and reduce the}} need to encode the logic elsewhere in <b>client</b> <b>programs.</b> This {{can result in a}} lesser likelihood of data corruption by faulty <b>client</b> <b>programs.</b> The database system can ensure data integrity and consistency with the help of stored procedures.|$|R
50|$|Most <b>client</b> <b>programs</b> {{communicate}} with the server via the Xlib client library. Beside Xlib, the XCB library operates more closely to X protocol. In particular, most clients use libraries such as Xaw, Motif, GTK+, or Qt which in turn use Xlib for interacting with the server. Qt switched from Xlib to XCB with the 5.0 release, but <b>client</b> <b>programs</b> were almost entirely unaffected by this change.|$|R
3000|$|OWSLib, {{which enables}} <b>client</b> <b>programming</b> with OGC Web Services (OWS) {{supported}} by Hypermap: CSW, WMS, WMTS, TMS [...]...|$|R
2500|$|XMS {{provided}} a basic protocol which allowed the <b>client</b> <b>program</b> to load a custom protected mode kernel. This was {{available on the}} Intel 80286 and newer processors. The problem with {{this approach is that}} while in 286 protected mode, direct DOS calls could not be made. The workaround was to implement a callback mechanism, requiring a reset of the 286. On the 286, this was a major problem. The Intel 80386, which introduced [...] "Virtual 86 mode", allowed the guest kernel to emulate the 8086 and run the host operating system without having to actually force the processor back into [...] "real mode".|$|E
50|$|ISPF for z/OS {{provides}} a built-in downloadable <b>client</b> <b>program</b> that can install and run on Windows PCs and UNIX workstations. This <b>client</b> <b>program,</b> called the ISPF Workstation Agent, communicates directly with ISPF on z/OS and {{provides a}} point-and-click graphical user interface automatically.|$|E
50|$|If the GTK-server is {{compiled}} as {{a shared}} object, it exports the function 'gtk', {{which must be}} imported in the <b>client</b> <b>program</b> first. After that, the <b>client</b> <b>program</b> can start sending GTK function calls in S-Expression format as argument to the imported 'gtk' function.|$|E
50|$|Other HTTP <b>client</b> <b>programs,</b> like {{download}} {{managers and}} offline browsers, often {{have the ability}} to change the user agent string.|$|R
5000|$|Direct Graphics Access is a plug-in for the X display servers {{that allows}} <b>client</b> <b>programs</b> {{direct access to}} the frame-buffer.|$|R
40|$|AbstractConcurrent data {{structures}} are usually designed to satisfy correctness {{conditions such as}} sequential consistency or linearizability. In this paper, we consider the following fundamental question: What guarantees are provided by these conditions for <b>client</b> <b>programs?</b> We formally show that these conditions can be characterized in terms of observational refinement. Our study also provides {{a new understanding of}} sequential consistency and linearizability in terms of abstraction of dependency between computation steps of <b>client</b> <b>programs...</b>|$|R
50|$|Direct Graphics Access allows {{direct access}} to the frame-buffer and the X-server hands over control of the frame-buffer to the <b>client</b> <b>program</b> and waits for the client to hand it back. This means that the <b>client</b> <b>program</b> has control of the whole screen, and so it is mostly used for full-screen video/games.|$|E
50|$|KNode is {{the news}} <b>client</b> <b>program</b> for the KDE desktop environment.|$|E
50|$|Other {{bibliography}} {{information is}} available inside the Rundata <b>client</b> <b>program</b> by pressing F4.|$|E
50|$|The X server {{provides}} {{a set of}} basic services. The <b>client</b> <b>programs</b> realize more complex functionalities by interacting with the server.|$|R
50|$|There are two {{internet}} streams: 64 kbit/s Joint Mono MP3 and 64kbit/s stereo AAC, {{to support}} a variety of listening <b>client</b> <b>programs.</b>|$|R
50|$|File Transfer: the {{software}} allows {{the user to}} transfer files between the local and remote computers, from within the <b>client</b> <b>program's</b> user interface.|$|R
5000|$|... {{commands}} to reshape and position windows; and a message passing facility enabling client programs to rendezvous and exchange messages. Client programs may {{ask to be}} informed when {{a change in the}} window system occurs, such as a reshaped window, a pushed mouse button, or a message sent from another <b>client</b> <b>program.</b> These changes are called events. MGR notifies a <b>client</b> <b>program</b> of an event by sending it an ASCII character string in a format specified by the <b>client</b> <b>program.</b> Existing applications can be integrated into the windowing environment without modification by having MGR imitate keystrokes in response to user defined menu selections or other events.|$|E
50|$|ShareReactor {{delivers}} {{links that}} can be used together with a P2P <b>client</b> <b>program</b> that understands eD2k links or torrent files.|$|E
5000|$|... a <b>client</b> <b>program</b> (program) on {{a system}} (local system) with data to back up or archive generates a random private key PRIV ...|$|E
50|$|The {{following}} tables compare {{general and}} technical information between {{a number of}} IRC <b>client</b> <b>programs</b> which have been discussed in independent published literature.|$|R
5000|$|The [...] {{interface}} {{provides the}} application theability to control transaction boundaries programmatically. This interface may be usedby Java <b>client</b> <b>programs</b> or EJB beans.|$|R
50|$|The {{following}} tables compare {{general and}} technical {{features of a}} number of email <b>client</b> <b>programs.</b> Please see the individual products' articles for further information.|$|R
5000|$|The E-mail <b>client</b> <b>program</b> PMMail encodes the UNIX {{time of the}} email's {{arrival and}} uses this {{for the first six}} {{characters}} of the message's filename.|$|E
50|$|ForCIS is a <b>client</b> <b>program</b> {{which was}} used to connect to the CompuServe Information Service. It is the {{predecessor}} to NavCIS. It was available for MS-DOS.|$|E
50|$|Upon starting, {{the service}} {{establishes}} a connection across the Internet with MioNet. The <b>client</b> <b>program</b> is distributed in 2 formats, as a Java applet, and an installable program.Both client formats can {{connect to the}} server, across a LAN or across the Internet, after first connecting to MioNet. The installable <b>client</b> <b>program</b> is initially required to register and associate the NAS with a MioNet account. MioNet then facilitates all connections to the NAS service. Once connected, the client may upload or download files to the NAS.|$|E
50|$|UCanAccess is an {{open source}} pure Java JDBC Driver {{implementation}} which allows Java developers and jdbc <b>client</b> <b>programs</b> to read/write MDB and ACCDB files.|$|R
40|$|Concurrent data {{structures}} are usually designed to satisfy correctness {{conditions such as}} sequential consistency or linearizability. In this paper, we consider the following fundamental question: What guarantees are provided by these conditions for <b>client</b> <b>programs?</b> We formally show that these conditions can be characterized in terms of observational refinement. Our study also provides {{a new understanding of}} sequential consistency and linearizability in terms of abstraction of dependency between computation steps of <b>client</b> <b>programs.</b> © 2010 Elsevier B. V. All rights reserved...|$|R
40|$|The X Window System {{has become}} widely {{accepted}} by many manufacturers. X provides network transparent access to display servers, allowing local and remote <b>client</b> <b>programs</b> to access a user's display. X {{is used on}} high performance workstation displays as well as terminals, and <b>client</b> <b>programs</b> run on everything from micro to super computers. This paper describes the tradeo s and basic design decisions made during the design of X Version 11. We presume familiarity with the paper describing X Version 10...|$|R
