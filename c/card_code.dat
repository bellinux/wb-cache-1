24|243|Public
5000|$|... 1 token <b>card</b> <b>code</b> for in-game content (downloaded over Xbox Live) ...|$|E
5000|$|In IBM 026 punched <b>card</b> <b>code</b> {{the square}} lozenge variant [...] is (12-8-4), ...|$|E
50|$|There {{was also}} a 2nd European release of the Limited Edition game which {{featured}} the extra features minus the token <b>card</b> <b>code</b> for downloadable content.|$|E
5000|$|The game {{shifts to}} Eddie's story. Nick and Jimmer Collins had {{originally}} planned to steal credit <b>card</b> <b>codes</b> and print their own cards. When Danny West owes a gambling debt to Jimmer, he forces Danny {{to get people}} to steal the credit <b>card</b> <b>codes</b> from the [...] "Skobel Group", and steal [...] "The Icon" [...] (a small religious artifact, which in the end is revealed to be a case in which diamonds are hidden), so that no one realizes the <b>card</b> <b>codes</b> were stolen. Eddie O'Connor (Dave Legeno), along with others, raid the Skobel group's bank to retrieve the icon, but everyone, except Eddie who is tortured, Sam who escapes through a vent, and John, who double-crosses and runs off with the icon, is killed. Eddie and Sam escape and find John dead at a bar, but Eddie manages to retrieve the icon.|$|R
50|$|The <b>card</b> {{security}} <b>code</b> {{is typically}} {{the last three}} or four digits printed, not embossed like the card number, on the signature strip on the back of the card. On American Express cards, the <b>card</b> security <b>code</b> is the four digits printed (not embossed) on the front towards the right. The <b>card</b> security <b>code</b> is not encoded on the magnetic stripe but is printed flat.|$|R
40|$|The way {{in which}} users' early online {{experiences}} with Derwent's World Patents Index influenced {{the development of the}} database from the late 1970 s up to the present time is reviewed. Topics covered include: the pre-online situation [...] paper format, microform and punch <b>card</b> <b>codes,</b> the impact of online delivery, subscriber liaison, chemical coding enhancements, and some current issues. The author concludes that much has changed since the 1970 s, but much remains to be done, and that current rapid changes in the patent information industry are also likely to significantly affect these databases. Derwent databases Historical review Microform Punch <b>card</b> <b>codes</b> Online Fragmentation codes Subscriber liaison Chemical coding Compound registry...|$|R
50|$|Remington Rand keypunches included: UNIVAC <b>Card</b> <b>Code</b> Punch Type 306-5, 90 Column Alphabetical (Types 306-2, 306-3), 90 Column Numerical (Types 204-2, 204-3), Portable Electric Punch Type 202, Spot Punch Type 301, and the Automatic Verifying Machine Type 313.|$|E
50|$|Six-bit BCD {{code was}} the {{adaptation}} of the punched <b>card</b> <b>code</b> to binary code. IBM applied the terms binary-coded decimal and BCD to the variations of BCD alphamerics used in most early IBM computers, including the IBM 1620, IBM 1400 series, and non-Decimal Architecture members of the IBM 700/7000 series.|$|E
50|$|Other special {{characters}} and punctuation marks {{were added to}} the <b>card</b> <b>code,</b> involving as many as three punches per column (and in 1964 with the introduction of EBCDIC as many as six punches per column). The 083 and 084 sorters recognized these multiple digit or multiple zone punches, sorting them to the error pocket.|$|E
50|$|There is {{a website}} for {{fans of the}} {{magazine}} featuring free games based on challenges from the TV show and a 'garage' where users can log their cards. www.topgearturbo.com links the BBC’s fortnightly magazine partwork Top Gear Turbo Challenge and the collectable cards {{that come with the}} magazine or are available separately. These three elements provide three distinct entry points for the brand and support each other with the magazine promoting the collectable <b>cards</b> and <b>card</b> <b>codes</b> unlocking game content and power-ups on the website. The free games and power-ups are central to the experience, working hand-in-hand with unique trading <b>card</b> <b>codes</b> and magazine editorial to maximise the engagement, reward the user and ultimately drive subscriptions.|$|R
50|$|A <b>card</b> {{security}} <b>code</b> (CSC) (also termed <b>card</b> verification <b>code</b> (CVC) and <b>card</b> verification value (CVV/CVV2)) is {{also associated}} with the virtual credit card; as in standard credit cards, a CVV is used in virtual credit cards to establish card ownership by the buyer and to authorize transactions.|$|R
50|$|Multiple user {{identifiers}} - Employees can {{be recorded}} in an ECRS {{so that they}} may have an unlimited number of identifiers that are used with third-party systems to associate them with transactions and/or types of transactions. Identifiers may include telephone extensions, photocopy IDs, cell phone numbers, calling <b>card</b> <b>codes,</b> service account codes, login IDs, and credit card numbers.|$|R
5000|$|A card {{security}} code (CSC; {{also called}} card verification data CVD or a card verification number, card verification value CVV, card verification value code, card verification code CVC, verification code or V code, <b>card</b> <b>code</b> verification, or signature panel code SPC) is a security feature for [...] "card not present" [...] payment card transactions instituted {{to reduce the}} incidence of credit card fraud.|$|E
50|$|The (national) bank codes {{differ from}} the {{international}} Bank Identifier Code (BIC/ISO 9362, a normalized code - also known as Business Identifier Code, Bank International Code and SWIFT code). Those countries which use International Bank Account Numbers (IBAN) have mostly integrated the bank code into the prefix of specifying IBAN account numbers. The bank codes also {{differ from the}} Bank <b>card</b> <b>code</b> (CSC).|$|E
5000|$|A signed {{overpunch}} is a code used {{to store}} {{the sign of a}} number by changing the last digit. It is used in COBOL, especially when using EBCDIC. Its purpose is to save a character that would otherwise be used by the sign digit. [...] The code is derived from the Hollerith Punched <b>Card</b> <b>Code,</b> where both a digit and a sign can be entered in the same card column.|$|E
5000|$|Requesting {{additional}} information, {{such as a}} PIN, ZIP <b>code,</b> or <b>Card</b> Security <b>Code</b> ...|$|R
5000|$|Stationery Kit (which {{could produce}} <b>cards,</b> secret <b>coded</b> {{messages}} and flyers with tear-off strips) ...|$|R
50|$|The “Master Gunny” was {{a member}} and {{frequent}} visitor of the Toledo, Ohio Jewish Serviceman's USO Club sponsored by the National Jewish Welfare Board (NJWB) in 1943 as indicated by his registration <b>card</b> <b>coded</b> as a NON-JEW with a hole punched in the top left hand corner. Diamond was a practicing Episcopalian {{as noted in the}} notes of journalist Marc Parrott who was present at Master Gunny Diamond's Episcopalian funeral services.|$|R
5000|$|In 1931 IBM began {{introducing}} multiple punches for upper-case {{letters and}} special characters. A letter has two punches (zone 12,11,0 + digit 1-9); most special characters {{have two or}} three punches (zone none + digit 2-7 + 8); a few special characters were exceptions (in EBCDIC [...] "&" [...] is 12 only, [...] "-" [...] is 11 only, and [...] "/" [...] is 0 + 1). With these changes, the information represented in a column by a combination of zones 11 and digits 1-9 is dependent on the use of that column. For example, the combination [...] "12-1" [...] is the letter [...] "A" [...] in an alphabetic column, a plus signed digit [...] "1" [...] in a signed numeric column, or an unsigned digit [...] "1" [...] in a column where the [...] "12" [...] have some other use. The introduction of EBCDIC in 1964 allowed columns with as many as six punches (zones 12,11,0,8,9 + digit 1-7). IBM and other manufacturers used many different 80-column card character encodings. A 1969 American National Standard defined the punches for 128 characters and was named the Hollerith Punched <b>Card</b> <b>Code</b> (often referred to simply as Hollerith <b>Card</b> <b>Code),</b> honoring Hollerith.|$|E
50|$|The {{standard}} punched <b>card</b> <b>code</b> for the groupmark {{character on}} the IBM 1401 computer system used punches in rows 12, 7, and 8 of a card column (written as 12-7-8). The older IBM 705 computer used 12-5-8 for this character. An RPQ {{was available for}} the 1401 for compatibility that allowed the system to read or punch the 705 code rather than the standard code. Since not all 1401 users would need this feature it was marketed as an RPQ.|$|E
5000|$|The BCD code is the {{adaptation}} of the punched <b>card</b> <b>code</b> to a six-bit binary code by encoding the digit rows (nine rows, plus unpunched) into the low four bits, and the zone rows (three rows, plus unpunched) into the high two rows. [...] The digit zero (a single punch in row 0) is usually handled specially in some way, and the digit code was extended to values 10 through 15 by combining a digit in the range 2-7 with a punch in row 8. IBM applied the terms binary-coded decimal and BCD to the variations of BCD alphamerics used in most early IBM computers, including the IBM 1620, IBM 1400 series, and non-Decimal Architecture members of the IBM 700/7000 series.|$|E
5000|$|Do not retain {{full track}} data, <b>card</b> {{verification}} <b>code</b> or value (CAV2, CID, CVC2, CVV2), or PIN block data.|$|R
50|$|The <b>card</b> {{security}} <b>code</b> {{system has}} been set up to reduce the incidence of credit card fraud arising from CNP.|$|R
5000|$|Formal {{proof of}} {{bytecode}} verifiers {{have been done}} by the Javacard industry (Formal Development of an Embedded Verifier for Java <b>Card</b> Byte <b>Code)</b> ...|$|R
50|$|Coding {{techniques}} {{used in a}} practical Java Card program differ significantly from that used in a Java program. Still, that Java Card uses a precise subset of the Java language speeds up the learning curve, and enables using a Java environment to develop and debug a Java Card program (caveat: even if debugging occurs with Java bytecode, {{make sure that the}} class file fits the limitation of Java Card language by converting it to Java Card bytecode; and test in a real Java Card smart card early on {{to get an idea of}} the performance); further, one can run and debug both the Java <b>Card</b> <b>code</b> for the application to be embedded in a smart card, and a Java application that will be in the host using the smart card, all working jointly in the same environment.|$|E
5000|$|Open-source {{software}} {{advocate and}} hacker Eric S. Raymond {{writes in his}} Jargon File that EBCDIC was almost universally loathed by early hackers and programmers. The Jargon File 4.4.7 gives the following definition: EBCDIC: /eb´s@·dik/, /eb´see`dik/, /eb´k@·dik/, n.Extended Binary Coded Decimal Interchange Code An alleged character set used on IBM dinosaurs. It exists in at least six mutually incompatible versions, all featuring such delights as non-contiguous letter sequences {{and the absence of}} several ASCII punctuation characters fairly important for modern computer languages (exactly which characters are absent varies according to which version of EBCDIC you're looking at). IBM adapted EBCDIC from punched <b>card</b> <b>code</b> in the early 1960s and promulgated it as a customer-control tactic (see connector conspiracy), spurning the already established ASCII standard. Today, IBM claims to be an open-systems company, but IBM's own description of the EBCDIC variants and how to convert between them is still internally classified top-secret, burn-before-reading. Hackers blanch at the very name of EBCDIC and consider it a manifestation of purest evil. The Jargon file 4.4.7 ...|$|E
40|$|All {{records are}} of equal length- 228 bytes. *There are 3 {{different}} record types, each uniquely identified by <b>card</b> <b>code,</b> as follows: card codes 01 through 02, & 99. ACCOUNT / REPORT HEADER RECORDS (<b>CARD</b> <b>CODE</b> 01) Control record which signifies {{the beginning of}} the report for a given account. Contains recipient account and report identification items. COMPARED POOL INSTRUCT DETAIL RECORD (<b>CARD</b> <b>CODE</b> 02) Detail record containing a single status item for a compared pool instruct record...|$|E
5000|$|The term [...] "bank code" [...] is {{sometimes}} (inappropriately) used by merchants {{to refer to}} the <b>Card</b> Security <b>Code</b> printed on a credit card.|$|R
5000|$|... #Caption: On American Express cards, the <b>card</b> {{security}} <b>code</b> is a printed, not embossed, {{group of}} four digits on the front towards the right.|$|R
50|$|Numeric columns {{have one}} punch in rows 0-9, {{possibly}} a sign overpunch in rows 11-12, {{and can be}} sorted {{in a single pass}} through the sorter. Alphabetic columns have a zone punch in rows 12, 11, or 0, a digit punch in one of the rows 1-9, and can be sorted by passing {{some or all of the}} cards through the sorter twice on that column. For more details of punched <b>card</b> <b>codes</b> see Punched card#IBM 80-column punched card formats and character codes.|$|R
40|$|Credit {{institutions}} issuing {{and accepting}} cards have responsibility for identifying, evaluating and mitigation fraud and activities with potentially risk. Risk management {{is necessary to}} avoid losses that may occur both directly through fraud and indirectly through loss of customer confidence regarding safety card operations. The risk management in cards activities aims to identifying those events which by their appearance would produce adverse effects on the activity, possible generating financial loss and find solutions to avoid them and reduce their effect. Credit card fraud refers to any situation where a person deliberately uses: card obtained through illegal methods, a counterfeit card, a valid <b>card</b> <b>code,</b> {{in order to obtain}} cash, goods or undue services...|$|E
40|$|This paper {{presents}} a methodology for the rigorous development of Java Card smart card applications, using the B Method. Its main feature is to abstract the particularities of Java Card and smart card aware applications from the specifier {{as much as}} possible. In the proposed approach, the specification of the aplication logic {{does not need to}} take into account the specific aspects of the Java Card platform (in particular, communication between the card acceptance device and the smart card itself). A sequence of preestablished refinements is then applied to the original specification to yield an implementation-level B description of the component, which can then be used to synthesize Java <b>Card</b> <b>code.</b> An interesting side-effect of this approach is that the specification may be reused with any other platform of implementation. 1...|$|E
40|$|Abstract: In {{the field}} of annotation-based source code level program {{verification}} for Java-like languages, separation-logic based verifiers offer a promising alterna-tive to classic JML based verifiers such as ESC/Java 2, the Mobius tool or Spec#. Researchers have demonstrated the advantages of separation logic based verifica-tion by showing that it is feasible to verify very challenging (though very small) sample code, such as design patterns, or highly concurrent code. However, there is little experience in using this new breed of verifiers on real code. In this paper we report on our experience of verifying several thousands of lines of Java <b>Card</b> <b>code</b> using VeriFast, one of the state-of-the-art separation logic based verifiers. We quantify annotation overhead, verification performance, and impact on code quality (number of bugs found). Finally, our experiments suggest a number of potential improvements to the VeriFast tool...|$|E
2500|$|... Series VI: Studies and Projects, 1935–1997 (Housing Study/Craftown and Winfield – Memos and Drafts 1945–1946 – Winfield, General 1945, <b>Card</b> Design, <b>Code</b> Book 1945–1946, Questionnaires 1945–1946) ...|$|R
5000|$|... in {{conjunction}} with an ATM controller, verify credit/debit card transactions by checking <b>card</b> security <b>codes</b> or by performing host processing component of an EMV based transaction ...|$|R
5000|$|To {{express that}} all occurrences of <b>card</b> and <b>code</b> should {{mean the same}} card and the same code, ACE {{provides}} anaphoric references via the definite article: ...|$|R
