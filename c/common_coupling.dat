626|589|Public
25|$|A {{group of}} EVs and HEVs during their {{charging}} process draw very high current {{for a short}} duration of time which creates power pulsation on the grid. Power pulsation not only reduces {{the efficiency of the}} grid and cause voltage drop in the <b>common</b> <b>coupling</b> bus, but it can cause considerable frequency fluctuation in the entire system. To overcome this problem, supercapacitors can be implemented as an interface between the charging station and the grid to buffer the grid from the high pulse power drawn from the charging station.|$|E
500|$|In many insect species, the forewing and hindwing are coupled together, which {{improves}} the aerodynamic efficiency of flight. The most <b>common</b> <b>coupling</b> mechanism (e.g., Hymenoptera and Trichoptera) is {{a row of}} small hooks on the forward margin of the hindwing, or [...] "hamuli", which lock onto the forewing, keeping them held together (hamulate coupling). In some other insect species (e.g., Mecoptera, Lepidoptera, and some Trichoptera) the jugal lobe of the forewing covers {{a portion of the}} hindwing (jugal coupling), or the margins of the forewing and hindwing overlap broadly (amplexiform coupling), or the hindwing bristles, or frenulum, hook under the retaining structure or retinaculum on the forewing.|$|E
50|$|Common coupling: <b>Common</b> <b>coupling</b> (also {{known as}} Global coupling) occurs when two modules {{share the same}} global data (e.g., a global variable). Changing the shared {{resource}} might imply changing all the modules using it.|$|E
30|$|We {{can easily}} prove the {{uniqueness}} of <b>common</b> <b>coupled</b> fixed point {{under the assumption that}} (x^∗, y^∗) is another <b>common</b> <b>coupled</b> fixed point of P and Q.|$|R
2500|$|Touching in {{intimate}} relationships {{may also be}} violent at times. [...] McEwan and Johnson categorize violent touch in relationships into two categories: intimate terrorism and <b>common</b> <b>couple</b> violence. [...] Intimate terrorism {{is characterized by a}} need to control or dominate a relationship, escalation over time, high frequency and severity. <b>Common</b> <b>couple</b> violence, on the other hand, is often a result of minor conflict. [...] <b>Common</b> <b>couple</b> violence is less frequent and severe, and does not escalate over time. [...] There are two major differences between intimate terrorism and <b>common</b> <b>couple</b> violence. [...] <b>Common</b> <b>couple</b> violence comes in episodes rather than escalating over time. One study in 1999 by Geiser gave further evidence to this notion and reported that in fact males are significantly {{more likely to engage in}} nonverbal aggression and violence. [...] Persons seeking help with violent {{intimate relationships}} may contact the National Domestic Violence Hotline or [...]|$|R
3000|$|... [...]. If T(X × X) ⊆ f(X), f(X) is G 1 -complete {{subset of}} X, then T and f {{have a unique}} <b>common</b> <b>coupled</b> {{coincidence}} point. Moreover, if T is w*-compatible with f, then T and f have a unique <b>common</b> <b>coupled</b> fixed point.|$|R
5000|$|Examining the {{physical}} phenomena {{responsible for the}} creation of undesired signals in a digital circuit and the mechanisms of their transport {{to other parts of the}} system. The substrate is the most <b>common</b> <b>coupling</b> mechanism, but capacitive coupling, mutual inductance, and coupling through power supplies are also analyzed.|$|E
5000|$|In {{coupling}} reactions a metal catalyses a coupling between two formal radical fragments. <b>Common</b> <b>coupling</b> reactions with arenes {{result in the}} formation of new carbon-carbon bonds e.g., alkylarenes, vinyl arenes, biraryls, new carbon-nitrogen bonds (anilines) or new carbon-oxygen bonds (aryloxy compounds). An example is the direct arylation of perfluorobenzenes ...|$|E
50|$|A {{group of}} EVs and HEVs during their {{charging}} process draw very high current {{for a short}} duration of time which creates power pulsation on the grid. Power pulsation not only reduces {{the efficiency of the}} grid and cause voltage drop in the <b>common</b> <b>coupling</b> bus, but it can cause considerable frequency fluctuation in the entire system. To overcome this problem, supercapacitors can be implemented as an interface between the charging station and the grid to buffer the grid from the high pulse power drawn from the charging station.|$|E
30|$|We {{can easily}} check that all other {{conditions}} of Theorem  3.7 hold. Therefore, g and F {{have a unique}} <b>common</b> <b>coupled</b> fixed point. In this example, {{we can see that}} a point (0, 0) ∈ X× X is a unique <b>common</b> <b>coupled</b> fixed point of g and F.|$|R
3000|$|... [...]. If S(X × X) ⊆ f(X), T(X × X) ⊆ f(X), f(X) is G 1 -complete {{subset of}} X, then S, T, and f {{have a unique}} <b>common</b> <b>coupled</b> {{coincidence}} point. Moreover, if S or T is w*-compatible with f, then f, S, and T have a unique <b>common</b> <b>coupled</b> fixed point.|$|R
3000|$|... (CC 1) a <b>common</b> <b>coupled</b> {{coincidence}} {{point of}} the mappings T, S : X × X → X and f : X → X if T(x, y) = S(x, y) = fx and T(y, x) = S(y, x) = fy, {{and in this case}} (fx, fy) is called a <b>common</b> <b>coupled</b> point of coincidence; [...]...|$|R
5000|$|In many insect species, the forewing and hindwing are coupled together, which {{improves}} the aerodynamic efficiency of flight. The most <b>common</b> <b>coupling</b> mechanism (e.g., Hymenoptera and Trichoptera) is {{a row of}} small hooks on the forward margin of the hindwing, or [...] "hamuli", which lock onto the forewing, keeping them held together (hamulate coupling). In some other insect species (e.g., Mecoptera, Lepidoptera, and some Trichoptera) the jugal lobe of the forewing covers {{a portion of the}} hindwing (jugal coupling), or the margins of the forewing and hindwing overlap broadly (amplexiform coupling), or the hindwing bristles, or frenulum, hook under the retaining structure or retinaculum on the forewing.|$|E
50|$|A {{microgrid}} is a localized {{grouping of}} electricity generation, energy storage, and loads that normally operates {{connected to a}} traditional centralized grid (macrogrid). This single point of <b>common</b> <b>coupling</b> with the macrogrid can be disconnected. The microgrid can then function autonomously. Generation and loads in a microgrid are usually interconnected at low voltage and it can operate in DC, AC or the combination of both. According to the recent developments in renewable energy systems, storage systems, {{and the nature of}} newly emerging loads, there have been some researches for comparing the efficiency and performance of AC and DC microgrids. From {{the point of view of}} the grid operator, a connected microgrid can be controlled as if it were one entity.|$|E
5000|$|This {{method is}} an active {{islanding}} detection method {{which can be used}} by three-phase electronically coupled distributed generation (DG) units. The method is based on injecting a negative-sequence current through the voltage-sourced converter (VSC) controller and detecting and quantifying the corresponding negative-sequence voltage at the point of <b>common</b> <b>coupling</b> (PCC) of the VSC by means of a unified three-phase signal processor (UTSP). The UTSP system is an enhanced phase-locked loop (PLL) which provides a high degree of immunity to noise, and thus enables islanding detection based on injecting a small negative-sequence current. The negative-sequence current is injected by a negative-sequence controller which is adopted as the complementary of the conventional VSC current controller. The negative-sequence current injection method detects an islanding event within 60 ms (3.5 cycles) under UL1741 test conditions, requires 2% to 3% negative-sequence current injection for islanding detection, can correctly detect an islanding event for the grid short circuit ratio of 2 or higher, and is insensitive to variations of the load parameters of UL1741 test system.|$|E
3000|$|... [...]. If S(X × X) ⊆ f (X), T(X × X) ⊆ f(X), f(X) is G 1 -complete {{subset of}} X, then S, T, and f {{have a unique}} <b>common</b> <b>coupled</b> {{coincidence}} point. Moreover, if S or T is w*-compatible with f, then f, S, and T have a unique <b>common</b> <b>coupled</b> fixed point.|$|R
40|$|We {{introduce}} {{and study}} the notion of <b>common</b> <b>coupled</b> fixed points {{for a pair of}} mappings in complex valued metric space and demonstrate the existence and uniqueness of the <b>common</b> <b>coupled</b> fixed points in a complete complex-valued metric space in view of diverse contractive conditions. In addition, our investigations are well supported by nontrivial examples...|$|R
30|$|Hence, (x, y) is a <b>common</b> <b>coupled</b> {{fixed point}} of S, T and R.|$|R
5000|$|Vinyl halides are <b>common</b> <b>coupling</b> {{partners}} in the Stille reaction, and reactions of this type are found in numerous natural product total syntheses. Normally, vinyl iodides and bromides are used. Vinyl chlorides are insufficiently reactive toward oxidative addition to Pd(0). Iodides are normally preferred: they will typically react faster and under milder conditions than will bromides. This difference is demonstrated below by the selective coupling of a vinyl iodide {{in the presence of}} a vinyl bromide.Normally, the stereochemistry of the alkene is retained throughout the reaction, except under harsh reaction conditions. A variety of alkenes may be used, and these include both α- and β-halo-α,β unsaturated ketones, esters, and sulfoxides (which normally need a copper (I) additive to proceed), and more (see example below). [...] Vinyl triflates are also sometimes used. Some reactions require the addition of LiCl and others are slowed down, implying that two mechanistic pathways are present.Another class of common electrophiles are aryl and heterocyclic halides. As for the vinyl substrates, bromides iodides are more common despite their greater expense. A multitude of aryl groups can be chosen, including rings substituted with electron donating substituents, biaryl rings, and more. Halogen-substituted heterocycles have also been used as coupling partners, including pyridines, furans, thiophenes, thiazoles, indoles, imidazoles, purines, uracil, cytosines, pyrimidines, and more (See below for table of heterocycles; halogens can be substituted at a variety of positions on each).Below is an example of the use of Stille coupling to build complexity on heterocycles of nucleosides, such as purines. [...] Aryl triflates and sulfonates are also couple to a wide variety of organostannane reagents. Triflates tend to react comparably to bromides in the Stille reaction.|$|E
40|$|The {{increase}} in maintenance of software {{and the increased}} amounts of reuse are having major positive impacts {{on the quality of}} software, but are also introducing some rather subtle negative impacts on the quality. Instead of talking about existing problems (faults), developers now discuss "potential problems", that is, aspects of the program that do not affect the quality initially, but could have deleterious consequences when the software goes through some maintenance or reuse. One type of potential problem is that of <b>common</b> <b>coupling,</b> which unlike other types of coupling can be clandestine. That is, the number of instances of <b>common</b> <b>coupling</b> between a module M and the other modules can be changed without any explicit change to M. This paper presents results from a study of clandestine <b>common</b> <b>coupling</b> in 391 versions of Linux. Specifically, the <b>common</b> <b>coupling</b> between each of 5332 kernel modules {{and the rest of the}} product as a whole was measured. In more than half of the new versions, a change in <b>common</b> <b>coupling</b> was observed, even though none of the modules themselves was changed. In most cases where this clandestine <b>common</b> <b>coupling</b> was observed, the number of instances of <b>common</b> <b>coupling</b> increased. These results provide yet another reason for discouraging the use of <b>common</b> <b>coupling</b> in software products. 8 page(s...|$|E
40|$|Abstract—Data {{coupling}} between modules, especially <b>common</b> <b>coupling,</b> {{has long}} been considered a source of concern in software design, {{but the issue is}} somewhat more complicated for products that are comprised of kernel modules together with optional nonkernel modules. This paper presents a refined categorization of <b>common</b> <b>coupling</b> based on definitions and uses between kernel and nonkernel modules and applies the categorization to a case study. <b>Common</b> <b>coupling</b> is usually avoided when possible because of the potential for introducing risky dependencies among software modules. The relative risk of these dependencies is strongly related to the specific definition-use relationships. In a previous paper, we presented results from a longitudinal analysis of multiple versions of the open-source operating system Linux. This paper applies the new <b>common</b> <b>coupling</b> categorization to version 2. 4. 20 of Linux, counting the number of instances of <b>common</b> <b>coupling</b> between each of the 26 kernel modules and all the other nonkernel modules. We also categorize each coupling in terms of the definition-use relationships. Results show that the Linux kernel contains a large number of common couplings of all types, raising a concern about the long-term maintainability of Linux. Index Terms—Modularity, dependencies, <b>common</b> <b>coupling,</b> definition-use analysis, kernel-based software, open-source software, Linux...|$|E
5000|$|<b>Common</b> <b>couple</b> violence, {{where both}} {{partners}} {{are engaged in}} domestic violence actions.|$|R
30|$|Inspired by above notions, Lakshmikantham and Ćirić in [2] {{introduced}} {{the concepts of}} the coupled coincidence point, the <b>common</b> <b>coupled</b> fixed point and g-mixed monotone property for mappings F:X× X⟶ X and g:X⟶ X. In subsequent papers several authors proved various <b>coupled</b> and <b>common</b> <b>coupled</b> fixed point theorems (e.g., [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]).|$|R
30|$|Now, we {{show that}} f, S, and T have <b>common</b> <b>coupled</b> fixed point.|$|R
30|$|RMS {{current level}} {{at the point}} of <b>common</b> <b>coupling</b> (PCC).|$|E
40|$|Abstract: In most {{empirical}} research on software evolution, {{analysis of the}} data is performed with respect to the release sequence number, rather than the release date. This distinction is important when the intervals between release dates vary widely, as is generally the case with open-source software. A widely cited paper on the maintainability of Linux was published in this journal in 2002. The paper showed that, whereas the size of the Linux kernel grew linearly with respect to release sequence number, the amount of <b>common</b> <b>coupling</b> grew exponentially. In view of the adverse effect of <b>common</b> <b>coupling</b> on maintainability, the conclusion drawn in that paper was that Linux needed to be refactored with minimal <b>common</b> <b>coupling.</b> Here we show that, if the same data is analysed with respect to release date, the amount of <b>common</b> <b>coupling</b> grows linearly; hence, {{there is no need to}} refactor Linux to promote maintainability. We also analyse three stable series of Linux releases, and observe that the size and the <b>common</b> <b>coupling</b> grow linearly. We conclude that rates of growth should be computed with respect to temporal variables, such as release date. Thomas et al. 22 -Sep- 2008 Page 2 of 24...|$|E
30|$|An {{obstacle}} to software reuse {{is the large}} number of major modifications that frequently have to be made as a consequence of dependencies within the reused software components. In this paper, <b>common</b> <b>coupling</b> is categorized and used as a measure of the dependencies between software components. We compared <b>common</b> <b>coupling</b> in three operating systems, Linux, FreeBSD, and Mach, and related it to the reuse effort of these systems. The measure is evaluated by studying the creation of two operating systems, MkLinux which is based on the reuse of Linux and Mach, and Darwin which is based on the reuse of FreeBSD and Mach. We conclude that the way that <b>common</b> <b>coupling</b> is implemented in Linux kernel induces large dependencies between software components, which required more effort in order to be reused to produce MkLinux, while the <b>common</b> <b>coupling</b> implemented in the Mach and FreeBSD kernels induces few dependencies between software components, which required less effort in order to be reused to produce Darwin.|$|E
30|$|Let (x^*,y^*)∈ X× X {{be another}} <b>common</b> <b>coupled</b> fixed point of S and T.|$|R
30|$|Nashine [54] studied <b>common</b> <b>coupled</b> {{fixed points}} on ordered G-metric spaces and proved the {{following}} theorems.|$|R
3000|$|Recently, Nashine et al. [33] {{established}} <b>common</b> <b>coupled</b> {{fixed point}} theorems for mixed g-monotone and [...]...|$|R
40|$|<b>Common</b> <b>coupling</b> is an {{important}} factor that needs to be considered in software design. It affects software dependency via the definition-use relationship of global variables. <b>Common</b> <b>coupling</b> can arise in all types of software; here we focus on issues specific to kernel-based software. In a previous paper, we described a categorization of <b>common</b> <b>coupling</b> and used it to study the maintainability of the Linux operating system. In this paper, we present a detailed description of this categorization, prove its completeness, and suggest further applications. We hope that, by this approach, we can make it easier for others to use our categorization to measure the maintainability of other kernel-based software. Categories and Subject Descriptors D. 2. 2. d [Modules and interfaces], D. 2. 7. g [Maintainability]...|$|E
40|$|We have {{examined}} 365 versions of Linux. For every version, we counted {{the number of}} instances of common (global) coupling between each of the 17 kernel modules {{and all the other}} modules in that version of Linux. We found that the number of instances of <b>common</b> <b>coupling</b> grows exponentially with version number. This result is significant at the 99. 99 % level, and no additional variables are needed to explain this increase. On the other hand, the number of lines of code in each kernel modules grows only linearly with version number. We conclude that, unless Linux is restructured with a bare minimum of <b>common</b> <b>coupling,</b> the dependencies induced by <b>common</b> <b>coupling</b> will, at some future date, make Linux exceedingly hard to maintain without inducing regression faults...|$|E
40|$|The {{authors have}} {{examined}} 365 versions of Linux. For every version, they counted {{the number of}} instances of common (global) coupling between each of the 17 kernel modules {{and all the other}} modules in that version of Linux. They found that the number of instances of <b>common</b> <b>coupling</b> grows exponentially with the version number. This result is significant at the 99. 99 % level, and no additional variables are needed to explain this increase. On the other hand, the number of lines of code in each kernel module grows only linearly with the version number. They conclude that, unless Linux is restructured with a bare minimum of <b>common</b> <b>coupling,</b> the dependencies induced by <b>common</b> <b>coupling</b> will, at some future date, make Linux exceedingly hard to maintain without inducing regression faults. 6 page(s...|$|E
30|$|The aim of {{this work}} is to prove some <b>common</b> <b>coupled</b> fixed point theorems for Geraghty-type {{contraction}} mappings by using monotone and g-monotone property instead of mixed monotone and g-mixed monotone property. An illustrative example is presented in this work showing how our results {{can be used in}} proving the existence of a <b>common</b> <b>coupled</b> fixed point, while the results of many other papers cannot.|$|R
3000|$|... for all x, y, u, v, s, t ∈ X, where α, β, γ ≥ 0, and α + β + γ < 1. If T(X × X) ⊆ f(X), f(X) is G 1 -complete {{subset of}} X, then T and f {{have a unique}} <b>common</b> <b>coupled</b> {{coincidence}} point. Moreover, if T is w*-compatible with f, then f and T have a unique <b>common</b> <b>coupled</b> fixed point.|$|R
30|$|We now {{state and}} prove the first <b>common</b> <b>coupled</b> fixed point {{existence}} theorem for the weakly related mappings.|$|R
