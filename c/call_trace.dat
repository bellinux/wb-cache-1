39|632|Public
50|$|Malicious caller {{identification}} facility, also called malicious <b>call</b> <b>trace</b> or caller activated malicious <b>call</b> <b>trace,</b> when subscribed or enabled, works by allowing {{a phone call}} recipient to mark or flag the preceding phone call connection as malicious (i.e. harassing, threatening, obscene, etc.) The phone system will then automatically trace the call by flagging station to station billing and routing data including start and end times. The <b>call</b> <b>trace</b> is not dependent upon call duration (as envisioned in dramatic movie plots) and will record all meta-data regardless of source conditions - even if the call was made from an unlisted number, a payphone or a number with {{caller identification}} disabled. To protect privacy the resulting trace data is only made available to law enforcement.|$|E
50|$|In Canada, {{the service}} is usually marketed as <b>call</b> <b>trace,</b> and fees {{generally}} only apply when {{the service is}} used.|$|E
50|$|Products include network <b>call</b> <b>trace,</b> service assurance, {{customer}} experience management, microwave, radio frequency (RF), and optical signal generators, spectrum analyzers, and network analyzers.|$|E
5000|$|There are {{two types}} of <b>call</b> <b>tracing.</b> Permanent <b>call</b> <b>tracing</b> permits <b>tracing</b> of all <b>calls.</b> On-demand <b>call</b> <b>tracing</b> permits tracing, upon request, of a {{specific}} call, provided that the called party dials a designated code immediately after the <b>call</b> to be <b>traced</b> is disconnected immediately.|$|R
50|$|The forward {{rules are}} UTID suffix match (<b>called</b> <b>tracing</b> rule in this paper) and {{namespace}} match (<b>called</b> <b>tracing</b> track in this paper). The underlying protocol of IDTP may be TCP, UDP, UDP multicast, HTTP, HTTPS, Web Service, or local handling without forwarding.|$|R
50|$|Other {{fields that}} are added {{on top of}} the header by the {{receiving}} server may be <b>called</b> <b>trace</b> fields, in a broader sense.|$|R
50|$|Applications {{served by}} probes include {{solutions}} for inter-carrier billing, revenue loss (by-pass/phantom traffic and analysis services), fraud prevention, billing, local number portability, quality of service, surveillance (global <b>call</b> <b>trace),</b> maintenance (protocol analysis), traffic engineering (link and trunk forecasting), alarming and SS7, Sigtran and IS-41 monitoring.|$|E
5000|$|Improving {{traceability}} (i.e. most languages offer ways {{to obtain}} the <b>call</b> <b>trace</b> which includes {{the names of the}} involved subroutines and perhaps even more information such as file names and line numbers); by not decomposing the code into subroutines, debugging would be impaired severely ...|$|E
5000|$|In {{the month}} of January 2012 alone, Gardaí applied for 1,829 [...] "requests for disclosure" [...] from {{telecommunications}} and internet companies based in Ireland. There were 1,296 subscriber requests, 494 <b>call</b> <b>trace</b> requests and 39 IP (computer address) requests. Taken as an average monthly total, theoretically Gardaí would be seeking details of over 20,000 phone and broadband subscribers per annum. These requests {{have been the subject}} of an investigation by the Office of the Data Protection Commissioner.|$|E
50|$|In October 2008 The British Red Cross {{created a}} serious ARG <b>called</b> <b>Traces</b> of Hope {{to promote their}} {{campaign}} about civilians caught up in conflict.|$|R
50|$|In 2008, {{the first}} {{installment}} of the prequel series The Alchymist's Legacy was published, which is <b>called</b> <b>Tracing</b> the Shadow and is set primarily in Francia.|$|R
40|$|A {{representation}} π of {{a locally}} compact group G is <b>called</b> <b>trace</b> class, if for every test function f the induced operator π(f) is a trace class operator. The group G is <b>called</b> <b>trace</b> class, if every π∈ G is trace class. We show that trace class groups are type I {{and give a}} criterion for semi-direct products to be trace class and show that a representation π is trace class {{if and only if}} π⊗π' can be realized in the space of distributions...|$|R
50|$|The tracing {{of calls}} within the {{exchange}} was instantly displayed digitally {{on the test}} console. Occasionally the <b>call</b> <b>trace</b> did not work, but the engineers worked out a way of manually tracing a call. What they did was to buy a little compass and glue a piece of magnetic ferrite on the side to pull the compass needle away from north. They would then run this compass along outside of the reed relays, and when a relay was operated the needle would move back to north. This was repeated over several sets of the switching path until the trace was complete.|$|E
40|$|Abstract. Call traces {{can provide}} {{detailed}} {{insight into the}} operation of distributed embedded systems. Developers inspect traces to understand and debug systems using manual and automatic techniques such as data mining. Correlation of traces between nodes provides a network level view of system. These traces are typically gathered by logging a globally unique identifier for each called function. Unfortunately, this naive <b>call</b> <b>trace</b> gathering technique results in excessive consumption of the limited memory, bandwidth, and energy resources available in wireless sensor networks. This paper proposes three new <b>call</b> <b>trace</b> gathering techniques that are designed specifically for the computing platforms with extreme resource constraints. The first technique uses local name spaces and caller side logging to significantly reduce the bit size of function identifiers. The second technique reconstructs call traces from a log of the runtime control flow decisions made by a program. The third technique performs a novel reduction over a program’s control flow graph to limit logging to control flow nodes effecting runtime call decisions. Our work automates the insertion of logging statements into source code for all the techniques described above. Our experimental results show promising outlook where two of the techniques reduced {{the size of the}} log to less than 15 % of traces produced by traditional methods. These savings make the new <b>call</b> <b>trace</b> capturing techniques attractive additions to the toolbox employed by developers and users of wireless sensor networks. ...|$|E
40|$|We {{describe}} {{a novel approach}} to monitoring high level behaviors using concepts from AI planning. Our goal is to understand what a program is doing based on its system <b>call</b> <b>trace.</b> This ability is particularly important for detecting malware. We approach this problem by building an abstract model of the operating system using the STRIPS planning language, casting system calls as planning operators. Given a system <b>call</b> <b>trace,</b> we simulate the corresponding operators on our model and by observing {{the properties of the}} state reached, we learn {{about the nature of the}} original program and its behavior. Thus, unlike most statistical detection methods that focus on syntactic features, our approach is semantic in nature. Therefore, it is more robust against obfuscation techniques used by malware that change the outward appearance of the trace but not its effect. We demonstrate the efficacy of our approach by evaluating it on actual system call traces...|$|E
30|$|The {{analysis}} of integrity performance (e.g., {{in terms of}} user throughput) in live networks has also gained attention in the research community. This kind of analysis {{can be carried out}} by means of field trials [22 – 24] or by using <b>call</b> <b>traces</b> (or MDT) [25]. However, in the case of field trials, the conclusions may not be representative of the real QoS experienced by the users. In the case of <b>call</b> <b>traces,</b> the correlation analysis presented in [25] is rather limited {{in terms of the number}} of radio measurements employed and no method for root-cause analysis was applied.|$|R
40|$|This paper {{focuses on}} {{intrusion}} detection and countermeasures {{with respect to}} widely-used operating systems and networks. The design and architecture of an intrusion detection system built from distributed agents is proposed to implement an intelligent system on which data mining can be performed to provide global, temporal views of an entire networked system. A starting point for agent intelligence in our system is the research into the use of machine learning over system <b>call</b> <b>traces</b> from the privileged sendmail program on UNIX. We use a rule learning algorithm to classify the system <b>call</b> <b>traces</b> for intrusion detection purposes and show the results...|$|R
50|$|In telecommunication, <b>call</b> <b>tracing</b> is a {{procedure}} that permits an entitled user to be informed about the routing of data for an established connection, identifying the entire route from the origin to the destination.|$|R
30|$|With PerfCompass [6], Dean et al. used kernel tracing on virtual {{machines}} and created an online system <b>call</b> <b>trace</b> analysis, able to extract fault features from the trace. The {{advantage of their}} work is that it only needs to trace the virtual machine’s system calls and not the host. Consequently, their solution has a low overhead impact {{and is able to}} distinguish between external and internal faults. However, {{it is not possible to}} see the direct interactions of the VM with neither the host nor the other VMs and the containers.|$|E
40|$|We {{introduce}} {{a method of}} computing biquandle brackets of oriented knots and links using a type of decorated trivalent spatial graphs we <b>call</b> <b>trace</b> diagrams. We identify algebraic conditions on the biquandle bracket coefficients for moving strands over and under traces and identify a new stop condition for the recursive expansion. In the case of monochromatic crossings we show that biquandle brackets satisfy a Homflypt-style skein relation and we identify algebraic conditions on the biquandle bracket coefficients to allow pass-through trace moves. Comment: 22 pages; version 2 includes typo fixes. To appear in Int'l J. Mat...|$|E
40|$|Automata expressiveness is an {{essential}} feature in understanding which of the formalisms available should be chosen for modelling a particular problem. Probabilistic and stochastic automata are suitable for modelling systems exhibiting probabilistic behavior and their expressiveness has been studied relative to non-probabilistic transition systems and Markov chains. In this paper, we consider previous formalisms of Timed, Probabilistic and Stochastic Timed Automata, we present our new model of Timed Automata with Polynomial Delay, we introduce a measure of expressiveness for automata we <b>call</b> <b>trace</b> expressiveness and we characterize the expressiveness of these models relative to each other under this new measure...|$|E
5|$|When {{displayed}} in museum exhibitions, the interactive DVD installation is <b>called</b> <b>Tracing</b> the Decay of Fiction. The presentation {{is shown in}} a continuous loop and allows museum patrons to explore the narrative and create their own stories.|$|R
50|$|Because the {{algorithm}} traces the implicit curve it is <b>called</b> <b>tracing</b> algorithm.The algorithm traces only connected {{parts of the}} curve. If the implicit curve consists of several parts {{it has to be}} started several times with suitable starting points.|$|R
3000|$|The gain in {{accuracy}} {{achieved by}} the proposed method is {{at the cost of}} increasing the operational complexity due to the management of a larger amount of information, given by the <b>call</b> <b>traces.</b> To estimate the computational cost, let C [...]...|$|R
30|$|The Hybrid Virtual IDS is a {{solution}} that leverages {{the strengths of the}} cloud and improves upon the previous Snort implementation [27]. The approach combines resilience of a virtual IDS and the versatility offered by a host based IDS. This is possible through the use of integrity checking [28] and system <b>call</b> <b>trace</b> analysis [29]. Integrity checking is a static detection process in which a changed file is compared to a gold standard to determine if the change is malicious. System <b>call</b> <b>trace</b> analysis dynamically flags anomalous system call behavior as potentially dangerous. These two approaches are implemented inside of a virtual machine to provide an isolated environment. A custom hypervisor is then used to ensure the isolation between all virtual machines. To provide functionality to the IDS, the hypervisor has hooks that allow the inspection of other guest virtual machines running on the hypervisor. This allows the hybrid virtual IDS to remain isolated from other running virtual machines, while still allowing it to access data from the virtual machines it is monitoring. This technique performed well in testing conducted by the authors of the Hybrid Virtual IDS, but returned unexpected performance results: as the IDS decreases the length of time between inspecting of the monitored virtual machine, the workload processing time did not increase linearly as to be expected and instead became erratic. The cause of this erratic performance is open to additional research.|$|E
40|$|We give {{semantic}} characterizations for reachability {{and trace}} equivalence in {{a version of}} asynchronous process calculus based on linear logic. Usually the reachabtlity relation in linear logic-based process calculi {{is characterized by the}} logical notion of provability, which is in turn characterized by model-theoretic semantics such as phase semantics. We introduce considerably simplified phase models, which we call naive phase models, and show that reachability is also characterized by the completeness with respect to the naive phase models. On the other hand, logical provability does not provide any satisfactory notion of equiva-lence on processes. We consider the trace equivalence (Hoare[7]) on our process calculus and introduce certain algebraic models, which we <b>call</b> <b>trace</b> models. Then the trace equivalence is characterized by the completeness with respect to the trace models. ...|$|E
40|$|Visualising {{the inner}} {{workings}} of a self learning classifier: Improving the usability of intrusion detection systems Current advanced intrusion detection systems that benefit from utilising machine learning principles are not as easy to use as might be hoped for. As a result the user has difficulties in judging the quality of the output, i. e. identifying false and true alarms. Problems in training the system might also go unnoticed. To counteract this we propose to use information visualisation to make the operation of a self learning classifier of our own devising visible and hence more accessible to the user. The resulting system was tested on two corpora of data: Web access logs and system <b>call</b> <b>trace</b> data. The visualisation of the detector proved successful and helped the user correctly differentiate between false and true alarms...|$|E
50|$|M-Phazes {{was born}} on 1 February 1983. He went to Miami High School on the Gold Coast and lived in Burleigh Heads, Queensland. His first rap group was <b>called</b> <b>Trace</b> Elements which also {{consisted}} of Jake Dangerous, Tactic One and Syntax.|$|R
50|$|The {{pairs of}} letters in an {{independency}} relation induce an equivalence relation {{on the free}} monoid of all possible strings of finite length. The elements of the equivalence classes induced by the independency are <b>called</b> <b>traces,</b> and are studied in trace theory.|$|R
30|$|At {{user level}} {{a series of}} {{magnitudes}} extracted from <b>call</b> <b>traces</b> are aggregated in order to calculate different metrics, e.g., the experimented average SNR in a dedicated channel or the voice call drop rate. These metrics are {{the starting point of}} the SatiX process calculation.|$|R
40|$|Predicting {{anomalous}} behaviour of {{a running}} process using system <b>call</b> <b>trace</b> {{is a common}} practice among security community {{and it is still}} an active research area. It is a typical pattern recognition problem and can be dealt with machine learning algorithms. Standard system call datasets were employed to train these algorithms. However, advancements in operating systems made these da-tasets outdated and un-relevant. Australian Defence Force Academy Linux Dataset (ADFA-LD) and Australian Defence Force Academy Windows Dataset (ADFA-WD) are new generation system calls datasets that contain labelled system call traces for modern exploits and attacks on various appli-cations. In this paper, we evaluate performance of Modified Vector Space Representation tech-nique on ADFA-LD and ADFA-WD datasets using various classification algorithms. Our experi-mental results show that our method performs well and it helps accurately distinguishing process behaviour through system calls...|$|E
40|$|Abstract. Signature-based malware {{detection}} {{will always}} be a step behind as novel malware cannot be detected. On the other hand, machine learning-based methods are capable of detecting novel malware but classification is frequently done in an offline or batched manner and is often associated with time overheads that make it impractical. We propose an approach that bridges this gap. This approach makes use of a support vector machine (SVM) to classify system call traces. In contrast to other methods that use system call traces for malware detection, our approach makes use of a string kernel to make better use of the sequential information inherent in a system <b>call</b> <b>trace.</b> By classifying system call traces in small sections and keeping a moving average over the probability estimates produced by the SVM, our approach is capable of detecting malicious behavior online and achieves great accuracy...|$|E
40|$|Document-based code {{injection}} attacks, where-in {{malicious code}} (coined shellcode) {{is embedded in}} a document, have quickly replaced network-service based exploits as the pre-ferred method of attack. In this paper, we present a new tech-nique to aid in forensic and diagnostic analysis of malicious documents detected using dynamic code analysis techniques — namely, automated API call hooking and simulation. Our approach provides an API <b>call</b> <b>trace</b> of a shellcode in a few milliseconds. We also present {{the results of a}} large empirical analysis of malicious PDFs collected in the wild over the last few years. To our surprise, we found that 90 % of shellcode embedded in documents make no use of machine-code level polymorphism, in stark contrast to prior shellcode studies based on samples collected from network-service level at-tacks. We also observed a heavy-tailed distribution of API call sequences used by contemporary shellcode...|$|E
40|$|Reference based {{analysis}} (RBA) {{is a novel}} {{data mining}} tool for exploring a test data set {{with respect to a}} reference data set. The power of RBA lies in it ability to transform any complex data type, such as symbolic sequences and multivariate categorical data instances, into a multivariate continuous representation. The transformed representation not only allows visualization of the complex data, which cannot be otherwise visualized in its original form, but also allows enhanced anomaly detection in the transformed feature space. We demonstrate the application of the RBA framework in analyzing system <b>call</b> <b>traces</b> and show how the transformation results in improved intrusion detection performance over state of art data mining based intrusion detection methods developed for system <b>call</b> <b>traces...</b>|$|R
40|$|A {{trace of}} a workload's system calls can be {{obtained}} with minimal interference, {{and can be used}} to drive repeatable experiments to evaluate system configuration alternatives. Replaying system <b>call</b> <b>traces</b> alone sometimes leads to inaccurate predictions because paging, and access to memorymapped files, are not modelled...|$|R
50|$|Ray Bradbury had at {{one time}} written {{a story about a}} {{telephone}} switch box that gained sentience. Its first order of business in the world, stalking. Eventually the person documenting the <b>calls</b> <b>traced</b> it down to a specific phone box and was summarily executed by said box through electrocution.|$|R
