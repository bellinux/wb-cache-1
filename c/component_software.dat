193|10000|Public
25|$|Oster, Z., Santhanam, G., Basu, S. and Honavar, V. (2013). Model Checking of Qualitative Sensitivity Preferences to Minimize Credential Disclosure. International Symposium on Formal Aspects of <b>Component</b> <b>Software.</b> Springer-Verlag Lecture Notes in Computer Science Vol. 7684, pp.205–223, 2013.|$|E
25|$|Each of the <b>component</b> <b>software</b> {{products}} in the GNOME project has its own version number and release schedule. However, individual module maintainers coordinate their efforts to create a full GNOME stable release on an approximately six-month schedule, alongside its underlying libraries such as GTK+ and GLib. Some experimental projects are excluded from these releases.|$|E
5000|$|JavaBeans: Developing <b>Component</b> <b>Software</b> in Java (John Wiley & Sons, 1997), ...|$|E
5000|$|... "Safety requirements" [...] are {{allocated}} to architectural components (subsystems, hardware <b>components,</b> <b>software</b> <b>components)</b> ...|$|R
40|$|<b>Component</b> based <b>software</b> {{development}} (CBSD) {{endeavors to}} deliver cost-effective and quality software systems through {{the selection and}} integration of commercially available <b>software</b> <b>components.</b> CBSD emphasizes the design and development of software systems using preexisting <b>components.</b> <b>Software</b> <b>component</b> reusability is an indispensable part of <b>component</b> based <b>software</b> development life cycle (CBSDLC), which consumes {{a significant amount of}} organization’s resources, that is, time and effort. It is convenient in <b>component</b> based <b>software</b> system (CBSS) to select the most suitable and appropriate <b>software</b> <b>components</b> that provide all the required functionalities. Selecting the most appropriate components is crucial for the success of the entire system. However, decisions regarding <b>software</b> <b>component</b> reusability are often made in an ad hoc manner, which ultimately results in schedule delay and lowers the entire quality system. In this paper, we have discussed the analytic network process (ANP) method for <b>software</b> <b>component</b> selection. The methodology is explained and assessed using a real life case study...|$|R
40|$|Component-based {{software}} engineering (CBSE) is {{the construction of}} software systems from <b>software</b> <b>components.</b> <b>Software</b> <b>components</b> are independently deployable units of executable code that can be assembled into a system based on their externally visible properties, which are made available to system developers via the <b>components</b> interface specifications. <b>Software</b> <b>components</b> provide a means for large-scale reuse o...|$|R
5000|$|TASCS - SciDAC Center for Technology for Advanced Scientific <b>Component</b> <b>Software</b> ...|$|E
50|$|Once {{a client}} system begins the JumpStart process, it then accesses the {{operating}} system <b>component</b> <b>software</b> packages stored on the JumpStart server, usually but not exclusively using Network File System.|$|E
50|$|The name of {{the company}} was changed to Affecto Plc in 2007. The same year saw the {{expansion}} of operations to Norway and Denmark with the purchase of Norwegian <b>Component</b> <b>Software</b> Group.|$|E
3000|$|Systems software—i.e. {{operating}} systems, networking/communications, device/peripheral drivers, support utilities, middleware {{and system}} <b>components,</b> <b>software</b> backplanes (e.g. Eclipse), servers and malware [...]...|$|R
40|$|Moebius is a {{representation}} and interface language {{based on a}} subset of English. It is designed {{for use as a}} means of encoding information and as a means of conveying information between <b>software</b> <b>components</b> and other <b>software</b> <b>components,</b> between <b>software</b> <b>components</b> and humans, and between data repositories and their users [...] human or machine. This report describes the structure and use of the Moebius language and presents three applications of the language to date...|$|R
50|$|DISA's {{computing}} services portfolio includes mainframe hosting, application monitoring, and server hosting and virtualization. DISA manages all {{the partner}} data, hardware <b>components,</b> <b>software,</b> and labor.|$|R
5000|$|EasyBlog is a {{commercial}} opensource <b>component</b> <b>software</b> for the Joomla! Content Management System developed by Stackideas. EasyBlog {{was first introduced}} on May 19, 2010. EasyBlog is compatible with Joomla! versions 1.5, 1.6, 1.7, 2.5 and 3.0.x ...|$|E
5000|$|IBM led {{the path}} with their System Object Model (SOM) {{in the early}} 1990s. As a reaction, Microsoft {{paved the way for}} actual {{deployment}} of <b>component</b> <b>software</b> with OLE and COM. [...] many successful software component models exist.|$|E
5000|$|Oster, Z., Santhanam, G., Basu, S. and Honavar, V. (2013). Model Checking of Qualitative Sensitivity Preferences to Minimize Credential Disclosure. International Symposium on Formal Aspects of <b>Component</b> <b>Software.</b> Springer-Verlag Lecture Notes in Computer Science Vol. 7684, pp. 205-223, 2013.|$|E
40|$|<b>Component</b> Based <b>Software</b> Engineering (CBSE) is anenvironment {{which uses}} <b>software</b> <b>components</b> as main {{building}} block during designing {{and creation of}} a <b>software</b> system. A <b>Component</b> is a <b>software</b> entity with independent identity which has a perceptible reusable interface. This property motivates the programmer to design and develop Softwareusing <b>Component</b> Based <b>Software</b> Development (CBSD) and further Software Metrics for these systems. In this paper, new early stage <b>component</b> based <b>software</b> metrics are designed for CBSD namely Component Composition Metrics (CCM) & Component Ratio Metrics (CRM) to determine the Effort using Likert 3 -point rating in terms of time, cost, quality, operability, changeability, adaptability etc. for a software system. CCM and CRM are designed and analyzed using knot model of <b>component</b> based <b>software</b> life cycle...|$|R
50|$|SES-imagotag is a {{specialist}} in Electronic shelf labeling systems. The Group designs and markets all of its system's <b>components</b> (<b>software,</b> radio- frequency infrastructure, labels and mountings).|$|R
40|$|<b>Software</b> <b>component</b> reuse {{is the use}} of {{existing}} <b>software</b> <b>components</b> to build a new software system. Effective storage and retrieval of <b>software</b> <b>components</b> is much essential in <b>software</b> <b>components</b> reuse process. The researchers have developed a number of <b>software</b> <b>components</b> reuse techniques for storage and retrieval of <b>software</b> <b>components.</b> No one technique is complete in its own; every technique has its own merits and demerits. This paper presents a meta-data model and faceted classification for storage and retrieval of <b>software</b> <b>components</b> that considers domain semantic information based on ontologies and texonomies. In contrast to most existing repositories, which only retrieve a limited set of components, the proposed meta-data model makes possible the recommendation of interrelated components, as ontolog...|$|R
50|$|One of Smith’s side {{projects}} at Apple was <b>component</b> <b>software.</b> In hardware, the designer does not descend {{to the level}} of individual transistors and resistors, but rather, goes to a component catalogue, selects a set of integrated circuits, and pieces them together. However, in software, the designer deals with the lowest level elements: conditional statements, variables, and procedure calls. Sometimes a library will provide predefined routines that can be called, thereby saving the designer the work of implementing them. However, these libraries often don't do what is needed or they cannot be used properly. <b>Component</b> <b>software</b> attempted to enable software components for use in an analogous way with hardware components. Like many of Smith's other projects, it did not continue past the prototype stage.|$|E
5000|$|Lenz Belzner, Rolf Hennicker, Martin Wirsing: OnPlan: A Framework for Simulation-Based Online Planning. Christiano Braga, Peter Csaba Ölveczky: Formal Aspects of <b>Component</b> <b>Software</b> - 12th International Conference, FACS 2015, Niterói, Brazil, October 14-16, 2015, Revised Selected Papers. Lecture Notes in Computer Science 9539, Springer 2016, pp. 1-30 (...) ...|$|E
5000|$|UIMA ( [...] ), {{short for}} Unstructured Information Management Architecture, is an OASIS {{standard}} [...] for content analytics, originally developed at IBM. It provides a <b>component</b> <b>software</b> architecture for the development, discovery, composition, and deployment of multi-modal analytics {{for the analysis}} of unstructured information and integration with search technologies.|$|E
50|$|Several {{companies}} are also using the Visual <b>Components</b> <b>software</b> {{as a platform}} for their own proprietary simulation software. Examples include the KUKASim software developed by KUKA and Octopuz developed by In-House Solutions.|$|R
40|$|Abstract. Current {{models for}} <b>{{software}}</b> <b>components</b> have made component-based software engineering practical. However, these models {{are limited in}} the sense that their support for the characterization/specification of <b>software</b> <b>components</b> primarily deals with syntactic issues. To avoid mismatch and misuse of components, more comprehensive specification of <b>software</b> <b>components</b> is required, especially in a scenario where components are dynamically discovered and used at run-time over corporate intranets and the Internet. Our approach to <b>software</b> <b>component</b> specification aims at comprehensive interface modelling/packaging for <b>software</b> <b>components.</b> It deals with the semantic, usage, quality as well as syntactic aspects of <b>software</b> <b>component</b> specification...|$|R
40|$|The method {{involves}} determining (110) {{running time}} request of <b>software</b> <b>component</b> (102). The resources required for migration of <b>software</b> <b>component</b> are determined (112) based on running time requests. The {{point of time}} to which determined resources for migration of <b>software</b> <b>component</b> of hardware platform (104 - 1) are obtained on objective hardware platform is determined (114). The <b>software</b> <b>component</b> of hardware platform is migrated (116) on objective hardware platform at predetermined point of time. Independent claims are included for the following: (1) computer program for migrating <b>software</b> <b>component</b> of distributed embedded system; and (2) control device for controlling migration <b>software</b> <b>component</b> of distributed embedded system...|$|R
5000|$|The Spatiotemporal Epidemiological Modeler (STEM) {{is a free}} {{software}} available through the Eclipse Foundation. Originally developed by IBM Research, STEM is a framework and development tool designed to help scientists create and use spatial and temporal models of infectious disease. STEM uses a <b>component</b> <b>software</b> architecture based on the OSGi standard. The Eclipse Equinox platform is a reference implementation of that standard. By using a <b>component</b> <b>software</b> architecture, all of the components or elements required for a disease model, including the code and the data are available as software building blocks that can be independently exchanged, extended, reused, or replaced. These building blocks or plug-ins are called eclipse [...] "plug-ins" [...] or [...] "extensions". STEM plug-ins contain denominator data for administrative regions of interest. The regions are indexed by standard (ISO3166) codes.|$|E
50|$|Each of the <b>component</b> <b>software</b> {{products}} in the GNOME project has its own version number and release schedule. However, individual module maintainers coordinate their efforts to create a full GNOME stable release on an approximately six-month schedule, alongside its underlying libraries such as GTK+ and GLib. Some experimental projects are excluded from these releases.|$|E
5000|$|Zhiming Liu is {{the founder}} of International Colloquium on Theoretical Aspects of Computing (ICTAC), the International Symposium on Formal Aspects of <b>Component</b> <b>Software</b> (FACS), and International Symposium On Foundations of Health Information Engineering and systems (FHIES). He has served as a PC chair for a number of {{conferences}} and PC members of a number of conferences. He has also edited a number of books.|$|E
40|$|Software reuse {{has become}} a topic of much {{interest}} in the software community due to its potential benefits, which include increased productivity, quality, and reliability, and decreased costs and implementation time. There are many potential alternatives to consider including Commercial Off The Shelf (COTS) <b>components,</b> Free/Open Source <b>Software</b> (F/OSS) <b>components,</b> or Custom <b>software.</b> This paper analyses the main advantages and issues related to reuse of Free <b>Software</b> <b>components</b> in <b>software</b> development. 1...|$|R
40|$|A key {{challenge}} in <b>Component</b> Based <b>Software</b> Engineering (CBSE) approaches to build software systems using pre-existing <b>software</b> <b>components</b> is searching and selecting <b>software</b> appropriate <b>software</b> <b>components</b> for reuse. The ComponentXchange already supports a <b>software</b> <b>component</b> market place, where component integrators and component vendors can {{buy and sell}} <b>software</b> <b>components</b> respectively. The existing system has limitations of component retrieval being based on keyword search and thus it does not allow efficient and intelligent search of the components in the repository. In the present report, we present the enhancements {{in the design and}} architecture of the present system...|$|R
40|$|It {{is widely}} {{understood}} that component based development {{is different from}} conventional development because components offer accelerated growth. In {{the absence of an}} effective component assessment strategy the developers of a software project have no way of assessing the quality of the <b>software</b> <b>component</b> they are about to incorporate into the project. We present two laws that link <b>software</b> <b>components,</b> <b>software</b> projects and their quality. We further propose a simple <b>software</b> <b>component</b> assessment strategy based on which both the component developers and component consumers can independently assess their component...|$|R
50|$|Apple's ATG was {{the birthplace}} of Color QuickDraw, QuickTime, QuickTime VR, QuickDraw 3D, QuickRing, 3DMF the 3D {{metafile}} graphics format, ColorSync, HyperCard, Apple events, AppleScript, Apple's PlainTalk speech recognition software, Apple Data Detectors, the V-Twin software for indexing, storing, and searching text documents, Macintalk Pro Speech Synthesis, the Newton handwriting recognizer, the <b>component</b> <b>software</b> technology leading to OpenDoc, MCF, HotSauce, Squeak, and the children's programming environment Cocoa (a trademark Apple later reused for its otherwise unrelated Cocoa application frameworks).|$|E
50|$|Although {{the three}} CeCILL {{licenses}} were developed {{and used for}} strategic French research systems (in the domain of defense, space launching systems, medical research, meteorology/climatology, and various domains of fundamental or applied physics), they are made to be usable also {{by the general public}} or any other commercial or non-profit organization, including from other governments, simply because these software component need and use (or are integrated with) <b>component</b> <b>software</b> or systems which were initially released with an open-source or free license, and they are operated by organizations that also have a commercial status.|$|E
5000|$|In 1993, Gewirtz {{moved to}} New Jersey and founded <b>Component</b> <b>Software</b> Corporation {{to publish the}} FileFlex {{relational}} database engine, which was [...] "the first, and at one time, the most popular commercial PC database designed for multimedia applications." [...] It allowed developers to embed a relational database engine in Macromedia Director. Gewirtz acquired all rights to the product in September 1993, rewrote the product {{from the ground up}} using new searching, floating point, and compiler technology. and licensed the product to Macromedia (now part of Adobe Systems) for inclusion in Director.|$|E
50|$|Reusability is an {{important}} characteristic of a high-quality <b>software</b> <b>component.</b> Programmers should design and implement <b>software</b> <b>components</b> {{in such a way}} that many different programs can reuse them. Furthermore, component-based usability testing should be considered when <b>software</b> <b>components</b> directly interact with users.|$|R
5000|$|Synnex {{distributes}} {{products and}} related logistics services. As a {{business process outsourcing}} and contract assembly it works with industry suppliers of IT systems, peripherals, system <b>components,</b> <b>software</b> and networking equipment. [...] The company {{is one of the}} major employers in Greenville, South Carolina.|$|R
40|$|Component-based {{software}} development {{is widely regarded}} as a promising approach to improving productivity and quality. However, progress in component-based {{software development}} has been slower than expected. A possible explanation for this slow progress is that there are not enough <b>software</b> <b>components</b> that can satisfy users (consumers). From this perspective, {{the purpose of this paper}} is to increase our knowledge about consumers of <b>software</b> <b>components</b> and to understand what aspects of <b>software</b> <b>components</b> are likely to affect consumer behavior. Specifically, this paper seeks to establish links between objective features of <b>software</b> <b>components</b> and consumers' preferences and purchasing behavior. The pragmatic utility of using objective features as predictors of consumers' behavior in regard to <b>software</b> <b>components</b> can be high. Since these objective features are under the direct control of producers, by understanding the relationship between the objective features and consumer behavior, producers can more effectively develop <b>software</b> <b>components</b> adapted to consumers' needs. We conducted this research in an artificial environment using a system called SofTrade, which was built for the purpose of teaching and studying the design, production, marketing, and purchasing of <b>software</b> <b>components.</b> Our results suggest that objective features of <b>software</b> <b>components</b> can be effective predictors of consumers' preferences and purchasing behavior, and therefore may provide practical guidance to <b>software</b> <b>component</b> producers regarding how to develop more marketable <b>software</b> <b>components...</b>|$|R
