10000|10000|Public
5|$|An Act <b>Concerning</b> Aliens. Act of June 25, 1798, ch. 58, 1 Stat. 570.|$|E
5|$|Delaware {{appears to}} have passed no laws <b>concerning</b> Indian lands.|$|E
5|$|Extensive marking on verbs of inflectional {{information}} <b>concerning</b> person.|$|E
40|$|Many <b>concern</b> metrics {{have been}} defined to {{quantify}} properties of crosscutting <b>concerns,</b> such as scattering, tangling, and dedication. To quantify these properties, <b>concern</b> metrics directly {{rely on the}} projection (assignment) of <b>concerns</b> into source code. Although <b>concern</b> identification tools have emerged over the last years, they are still rarely used in practice to support <b>concern</b> projection and, therefore, it is a task often performed manually. This means {{that the results of}} <b>concern</b> metrics are likely to be influenced by how accurately programmers assign <b>concerns</b> to code elements. Even though <b>concern</b> assignment is an important and long-standing problem in software engineering, its impact on accurate measures of crosscutting <b>concerns</b> has never been studied and quantified. This paper presents a series of 5 controlled experiments to quantify and analyse the impact of <b>concern</b> projection on crosscutting <b>concern</b> measures. A set of 80 participants from 4 different institutions projected 10 <b>concern</b> instances into the source code of two software systems. We analyse the accuracy of <b>concern</b> projections independently made by developers, and their impact on a set of 12 <b>concern</b> metrics. Our results suggest that: (i) programmers are conservative when projecting crosscutting <b>concerns,</b> (ii) all <b>concern</b> metrics suffer with such conservative behaviour, and (iii) fine-grained tangling measures are more sensitive to different <b>concern</b> projections than coarse-grained scattering metrics...|$|R
30|$|Aspect-Oriented Programming (AOP) aims at {{improving}} the modularization {{of a system}} by providing language abstractions that are dedicated to modularize crosscutting <b>concerns</b> (CCs). CCs are <b>concerns</b> which cannot be accurately modularized by using conventional paradigms (Kiczales et al. 1997). Without proper language abstractions, crosscutting <b>concerns</b> become scattered and tangled with other <b>concerns</b> of the software, affecting maintainability and reusability. In AOP, there is usually a distinction between base <b>concerns</b> and crosscutting <b>concerns.</b> The base <b>concerns</b> (or Core-concerns) are those which the system was originally designed to deal with. The crosscutting <b>concerns</b> are the <b>concerns</b> which affect on other <b>concerns.</b> Examples of crosscutting <b>concerns</b> include global restrictions, data persistence, authentication, access control, concurrency and cryptography (Kiczales et al. 1997).|$|R
5000|$|Separation of <b>concerns</b> (Core <b>concern</b> and <b>Concern</b> (computer science)) ...|$|R
5|$|For an {{explanation}} of terms <b>concerning</b> Shinto, shrines and shrine architecture, see the glossary of Shinto.|$|E
5|$|Herbert {{identifies}} two philosophical problems {{presented by}} quantum theory—the interpretation question, <b>concerning</b> the physical {{nature of the}} reality underlying observation; and the measurement problem, <b>concerning</b> the apparently special role of the measurement act in quantum theory, and various approaches to formally defining the measurement act.|$|E
5|$|Sources vary <b>concerning</b> {{exactly which}} side was victorious during the battle.|$|E
30|$|By {{keeping the}} focus on the columns of a {{crosscutting}} matrix, the software engineer will have an overview on which <b>concerns</b> cut across the behavior of other <b>concerns.</b> The more a <b>concern</b> “A” affects other software <b>concerns,</b> the higher is the likelihood of “A” to be a crosscutting <b>concern.</b> To know which requirements are affected by a specific <b>concern,</b> the list of requirements and related <b>concerns</b> (Table  3) may be used.|$|R
30|$|A <b>concern</b> catalog {{may have}} several {{software}} <b>concerns.</b> To register a <b>concern,</b> the researcher must inform the <b>concern</b> name {{that must be}} unique {{in the context of}} the current catalog and the type of this <b>concern,</b> which may be “Functional” or “Non-functional.” As optional information, the researcher may provide a description of the <b>concern.</b>|$|R
40|$|A {{software}} modification task often addresses several <b>concerns.</b> A <b>concern</b> {{is anything}} a stakeholder {{may want to}} consider as a conceptual unit, including features, nonfunctional requirements, and design idioms. In many cases, the source code implementing a <b>concern</b> is not encapsulated in a single programming language module, and is instead scattered and tangled throughout a system. Inadequate separation of <b>concerns</b> increases the difficulty of evolving software in a correct and costeffective manner. To make it easier to modify <b>concerns</b> that are not well modularized, we propose an approach in which the implementation of <b>concerns</b> is documented in artifacts, called <b>concern</b> graphs. <b>Concern</b> graphs are abstract models that describe which parts of the source code are relevant to different <b>concerns.</b> We present a formal model for <b>concern</b> graphs and the tool support we developed to enable software developers to create and use <b>concern</b> graphs during software evolution tasks. We report on five empirical studies, providing evidence that <b>concern</b> graphs support views and operations that facilitate the task of modifying the code implementing scattered <b>concerns,</b> are costeffectiv...|$|R
5|$|The JACC is {{the primary}} source of {{information}} from Australian government <b>concerning</b> the search.|$|E
5|$|The Noise of Time - a novel <b>concerning</b> Shostakovich by English author Julian Barnes.|$|E
5|$|The {{album was}} also notable in Canada for {{creating}} controversy <b>concerning</b> {{the system of}} Canadian content.|$|E
5000|$|Aspect-oriented {{programming}} entails {{breaking down}} program logic into distinct parts (so-called <b>concerns,</b> cohesive areas of functionality). Nearly all programming paradigms support {{some level of}} grouping and encapsulation of <b>concerns</b> into separate, independent entities by providing abstractions (e.g., functions, procedures, modules, classes, methods) {{that can be used}} for implementing, abstracting and composing these <b>concerns.</b> Some <b>concerns</b> [...] "cut across" [...] multiple abstractions in a program, and defy these forms of implementation. These <b>concerns</b> are called cross-cutting <b>concerns</b> or horizontal <b>concerns.</b>|$|R
30|$|In {{an ideal}} scenario, each <b>concern</b> should only affect {{requirements}} {{for which it}} is its main <b>concern.</b> In other words, the column related to this <b>concern</b> should contain only empty cells. Hence, in the ObasCId approach, all columns with at least an “X” symbol regard to crosscutting <b>concerns</b> candidates. In the case of Table 5, all <b>concerns,</b> except the “Complaint” (column 2), are considered crosscutting <b>concern</b> candidates.|$|R
40|$|Cosmos is a schema for {{modeling}} software <b>concerns</b> {{across the}} life cycle. It defines a metamodel, including <b>concern</b> types, relationships, and predicates, for modeling multidimensional <b>concern</b> spaces. Cosmos allows <b>concerns</b> to be modeled independently of development formalisms, tools, and methods, and it complements and supports advanced separation of <b>concerns</b> technologies...|$|R
5|$|There are {{numerous}} theories <b>concerning</b> when the text was completed and <b>concerning</b> {{the identity of}} the author or authors, but archeological recoveries show The Art of War had taken roughly its current form by at least the early Han. Because it is impossible to prove definitively when the Art of War was completed before this date, the differing theories <b>concerning</b> the work's author or authors and date of completion are unlikely to be completely resolved. Some modern scholars believe that it contains not only the thoughts of its original author but also commentary and clarifications from later military theorists, such as Li Quan and Du Mu.|$|E
5|$|There {{have been}} three referendums in modern Croatia: Croatian {{independence}} referendum, Croatian European Union membership referendum and Marriage definition referendum, and in all three majority voted in favor. There have been four other public initiatives to collect the support of 10 percent of voters for a referendum, none of which were successful: <b>concerning</b> Croatian cooperation with the International Criminal Tribunal for the former Yugoslavia, <b>concerning</b> accession of Croatia to NATO in 2008, <b>concerning</b> Arbitration Agreement on Croatian-Slovenian border issues in 2009, and <b>concerning</b> Labour Act in 2010.|$|E
5|$|Al-kunūz al-faniyyah fī al-rumūz al-Maymūniyyah (Artistic Treasures <b>Concerning</b> the Symbolic Visions of Maymun), 1870—poem {{of almost}} 500 verses.|$|E
50|$|The Act defines three {{different}} kinds of concern: the contractual <b>concern,</b> the factual <b>concern,</b> and the flat <b>concern.</b>|$|R
30|$|In {{the context}} of {{requirements}} engineering (RE), a <b>concern</b> {{can be understood as}} a set of software requirements related to the same purpose [1]. The two main categories of software <b>concerns</b> are functional and non-functional <b>concerns.</b> The first one regards to <b>concerns</b> that are related to the functional features of the software, such as “Payment,” “Order Management,” “Reservation,” among others. The last one corresponds to <b>concerns</b> related to the non-functional features of the software, such as “Security,” “Persistence,” “Performance,” “Logging,” among others. Several traditional RE approaches, such as those based on viewpoints, goals, use cases, and scenarios have been developed in order to allow the modularization of software <b>concerns</b> in a more appropriated way [2]. However, there are some <b>concerns</b> that may not be easily modularized, even in the early phases of software development cycle. These <b>concerns</b> are known as CrossCutting <b>Concerns</b> or Early-Aspects and consist of software <b>concerns</b> (functional or non-functional) whose requirements are spread over requirements of other software <b>concerns</b> [3]. For instance, a security <b>concern</b> may contain requirements related to the encryption and/or authorization mechanisms. These requirements, in turn, may affect (cut across) some requirements related to “Orders Management” <b>concern,</b> for instance.|$|R
40|$|Objective 1) {{to assess}} patients’ {{descriptions}} of <b>concerns,</b> and 2) to inform {{a conceptual framework}} in which {{the impact of the}} nature of <b>concerns</b> on doctor-patient communication is specified. Methods Six focus groups were conducted with 39 cancer patients and survivors. In these focus groups participants were asked to describe their <b>concerns</b> during and after their illness. Results <b>Concerns</b> were described as instrumental <b>concerns</b> (e. g., receiving insufficient information) and emotions (e. g., sadness). Patients frequently explained their <b>concerns</b> as an interplay of instrumental <b>concerns</b> and emotions. Examples of the interplay were “receiving incorrect information” and “frustration”, and “difficulties with searching, finding and judging of information” and “fear”. Conclusion Instrumental <b>concerns</b> need {{to be taken into account}} in the operationalization of <b>concerns</b> in research. Based on the interplay, the conceptual framework suggests that patients can express instrumental <b>concerns</b> as emotions and emotions as instrumental <b>concerns.</b> Consequently, providers can respond with instrumental and emotional communication when patients express an interplay of <b>concerns.</b> Practice implications The results of this study can be used to support providers in recognizing <b>concerns</b> that are expressed by patients in consultations...|$|R
5|$|An Enquiry <b>Concerning</b> the Principles of Natural Knowledge. Cambridge: Cambridge University Press, 1919. Available {{online at}} https://archive.org/details/enquiryconcernpr00whitrich.|$|E
5|$|Arrowsmith-Brown, J. H. (translator), Prutky's {{travels to}} Ethiopia and other countries. London: Hakluyt Society, 1991. The section <b>concerning</b> Prester John is pp.115–117.|$|E
5|$|As well as {{providing}} {{a history of}} the IDSO's operations, Collard relates a number of illustrative vignettes <b>concerning</b> the diamond smuggling cases he and the organisation dealt with.|$|E
30|$|The primary {{actions and}} the process of action {{classification}} are similar to the concepts of main <b>concern</b> and <b>concern</b> classification activity in ObasCId approach. However, ObasCId takes into consideration the relationships between requirements and <b>concerns</b> to improve the effectiveness the <b>concern</b> identification and classification process. Furthermore, ObasCId provides resources to represent and reuse the knowledge about <b>concern</b> domain in other projects, such as <b>concern</b> catalogs, heuristics, among others.|$|R
40|$|In {{the field}} of {{advanced}} separation of <b>concerns,</b> most researches focus on programming levels. On the other hand, many analysis/design techniques utilize separation of <b>concerns,</b> as {{it is one of}} the common techniques in the software engineering field. Though the utilization of these <b>concerns</b> is slightly different from that in programming level techniques dealing with advanced separation of <b>concerns,</b> it is important to recognize what kinds of <b>concerns</b> are used in the analysis/design field, and to clarify the current issues. In this paper, we analyze the <b>concerns</b> in the analysis/design field, observe the current status of separation of <b>concerns,</b> and discuss issues and future research directions. 1. CONCERNS IN ANALYSIS/DESIGN TECHNIQUES Separation of <b>concerns</b> is one of the basic techniques in software engineering fields, and many analysis/design techniques apply the technique. Though their utilization of <b>concerns</b> is not as same as that of advanced separation of <b>concerns</b> [2][3], it is important to analyze the existing <b>concerns</b> and clarify the difference for further researches. The followings are listings of typical <b>concerns</b> used in the analysis/design techniques...|$|R
40|$|Building softwares in a <b>concern</b> {{oriented}} fashion can be splited in {{two main}} steps : first defining each <b>concern</b> separately (or reusing existing ones) and then composing (i. e. integrating) those <b>concerns</b> together. Among existing approaches {{to support this}} development scheme, {{we are interested in}} reflection. This interest is particularly motivated by the natural separation between functional and non-functional <b>concerns</b> provided by reflection. In this paper, we describe our approach based on reflection. We provide a solution to define and compose reusable non-functional <b>concerns,</b> while minimizing integration efforts. Keywords: <b>Concerns</b> Composition; <b>Concern</b> Reuse; Metaclasses; Reflection; Smalltalk. 1 Introduction Separation of <b>concerns</b> [Dij 76] [HL 95] is the foundation for the programming paradigm that we named <b>Concern</b> Oriented Programming (COP). This programming paradigm consists of separating <b>concerns</b> before composing (i. e. integrating) them to produce softwares. Once concer [...] ...|$|R
5|$|By 1659, Cosimo {{had ceased}} smiling in public. He {{frequently}} visited places of religious worship and {{surrounded himself with}} friars and priests, <b>concerning</b> Grand Duke Ferdinando.|$|E
5|$|Calumny: {{lying to}} harm a person's {{reputation}} and providing opportunity to others to make false judgements <b>concerning</b> them.|$|E
5|$|Collins, Anthony. A Philosophical Inquiry <b>concerning</b> Human Liberty, Republished with a Preface by Joseph Priestley. n.l.: n.p., 1790.|$|E
40|$|Software {{engineering}} considers many assets {{relevant for}} developing a software system, ranging from requirements to source code. In this context, a <b>concern</b> is a particular goal, concept, or area of interest {{that needs to be}} considered throughout a number of these assets. Even though the <b>concerns</b> in a software system usually have many interdependencies among each other, specifying the interdependent behavior of <b>concerns</b> is not a focus of today’s (<b>concern)</b> modeling approaches. In this paper, we present an approach to model interdependent <b>concern</b> behavior using extended UML 2 activity models. Within these <b>concern</b> activity models, we directly support the separation of interdependent <b>concerns.</b> In addition, we provide bindings of the <b>concern</b> activity models to UML class and interaction models to enable a detailed specification of <b>concern</b> behavior. ...|$|R
40|$|<b>Concern</b> {{modeling}} {{plays an}} important role in software design, implementation and maintenance. Hyperspace has provided a strong conceptual framework to separate <b>concerns</b> in multidimensional levels. The contribution of this work is to create an architectural element, called a <b>concern</b> connector, to support the implementation of hyperspace in the architectural design phase. The paper makes three basic claims for this idea. First, using <b>concern</b> connectors allows the scope of each hyperslice in a certain <b>concern</b> dimension to be defined and stored. Second, the <b>concern</b> interactions within each hypermodule can be specified in the <b>concern</b> connectors. Third, the association of <b>concern</b> modeling with this distinctive architectural element improves the flexibility of <b>concern</b> maintenance and evolution during the development process. To test these claims the paper investigate...|$|R
40|$|In {{this paper}} we {{initiate}} {{a discussion of}} a possible process to compose crosscutting <b>concerns</b> with the <b>concerns</b> they cut across. This process {{should be regarded as}} a task of an approach to manage <b>concerns</b> at the requirements level. The main concepts behind this process are those of match point, conflicting aspect, dominant aspect and composition rule. A match point is where one or more crosscutting <b>concerns</b> are applied to a given functional <b>concern</b> (or model element). This information is useful to identify conflicting crosscutting <b>concerns.</b> To resolve conflicts we need to identify dominant crosscutting <b>concerns,</b> i. e. the <b>concerns</b> with higher priority. Finally, the composition rule is defined as a sequential list of simpler compositions of crosscutting <b>concern,</b> some operators and the model element...|$|R
