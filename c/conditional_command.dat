6|18|Public
2500|$|For all {{commands}} the exit status {{is stored in}} the special variable $?. [...] Bash also supports [...] and [...] forms of <b>conditional</b> <b>command</b> evaluation.|$|E
6000|$|Answ. The {{thing that}} I strike at is this, {{that a man}} in or with a legal spirit should not, nay, cannot, do any <b>conditional</b> <b>command</b> of the Gospel acceptably, as to his eternal state, because he doth it in an old-covenant spirit. [...] "No man putteth new wine into old bottles"; but new wine must have new bottles, a Gospel command must have a Gospel spirit, or else the wine will break the bottles, or the {{principle}} will break the command.|$|E
6000|$|There are two {{distinct}} and contrasting methods of limiting liberty; {{the first is}} Prohibition, [...] "thou shalt not," [...] and the second Command, [...] "thou shalt." [...] There is, however, a sort of prohibition that {{takes the form of}} a <b>conditional</b> <b>command,</b> and this one needs to bear in mind. It says if you do so-and-so, you must also do so-and-so; if, for example, you go to sea with men you employ, you must go in a seaworthy vessel. But the pure command is unconditional; it says, whatever you have done or are doing or want to do, you are to do this, as when the social system, working through the base necessities of base parents and bad laws, sends a child of thirteen into a factory. Prohibition takes one definite thing from the indefinite liberty of a man, but it still leaves him an unbounded choice of actions. He remains free, and you have merely taken a bucketful from the sea of his freedom. But compulsion destroys freedom altogether. In this Utopia of ours there may be many prohibitions, but no indirect compulsions--if one may so contrive it--and few or no commands. As far as I see it now, in this present discussion, I think, indeed, there should be no positive compulsions at all in Utopia, at any rate for the adult Utopian--unless they fall upon him as penalties incurred.|$|E
5000|$|The MTS command macro {{processor}} {{allows users to}} define their own MTS commands. It provides a [...] "scripting" [...] language with <b>conditional</b> <b>commands</b> and is available for use with any lines read from *SOURCE* by user programs or command language sub-systems as well with MTS commands. Macro processor lines are usually prefixed with the greater than character (>). The command {{macro processor}} is controlled using the $SET command {{as well as by}} I/O modifiers on FDnames.|$|R
5000|$|The <b>conditional</b> [...] <b>command</b> {{can perform}} case-insensitive {{comparisons}} and numeric equality and inequality comparisons {{in addition to}} case-sensitive string comparisons. This was available in DR-DOS (by Novell) but not in PC DOS (by IBM) or MS-DOS (by Microsoft).|$|R
40|$|The MTS Manual is {{a series}} of volumes that {{describe}} in detail the facilities provided by the Michigan Terminal System. The MTS command extension and macro processor is a special set of system programs that act as an interface between the user and MTS. The processor has the following capabilities: (1) Provides a series of command extensions which allow the setting and displaying of system variables that describe the current status of MTS; (2) Provides <b>conditional</b> <b>commands</b> that allow flow control depending on the results of previous commands, programs, or system variables; and (3) Allows the user to create procedures (or macros). This volume is divided into two sections, a tutorial section and a reference section. ...|$|R
5000|$|For all {{commands}} the exit status {{is stored in}} the special variable [...] Bash also supports [...] and [...] forms of <b>conditional</b> <b>command</b> evaluation.|$|E
40|$|In {{the last}} five years, the {{discrete}} event simulator, SEQuence GENerator (SEQGEN), developed at the Jet Propulsion Laboratory to plan deep-space missions, has greatly increased uplink operations capacity to deal with increasingly complicated missions. In this paper, we describe how the Mars Science Laboratory (MSL) project makes full use of an interpreted environment to simulate change in more than fifty thousand flight software parameters and <b>conditional</b> <b>command</b> sequences to predict the result of executing a conditional branch in a command sequence, and enable the ability to warn users whenever one or more simulated spacecraft states change in an unexpected manner. Using these new SEQGEN features, operators plan more activities in one sol than ever before...|$|E
40|$|The design {{decisions}} made by Stata in handling missing data in relational and logical expressions have, for the user, complex, pernicious, and poorly understood consequences. This presentation intends to substantiate that claim and to present two possible resolutions to the problem. As is well documented and reasonably well known, Stata considers p & q (and p | q) to be true when both p and q are indeterminate. This interpretation is counterintuitive and {{at odds with the}} formal-logic definition of these operators. To assert two unknowns is not to assert truth. Nevertheless, introductions to Stata characteristically present this as merely a â€œfeatureâ€ and suggest that the obligation imposed on users (us) to explicitly test for missing data is straightforwardly implementable. Simple cases are indeed simple but, it will be argued, do not readily scale up to complex, real-life instances. For example, the one-line Stata command to implement the intention, "generate v = p|q" becomes "generate v = p|q if !mi(p,q) |(p&!mi(p)) |(q&!mi(q)) " And so forth. Such coding is a problem, not a featureâ€”so solutions should be sought. One solution (really a work-around) introduces my command, validly, which allows expressions such as "validly generate v = p|q" and correctly, without fuss, interprets the logical or relational operators (here returning true if p is true but q indeterminate and indeterminate if p is false but q indeterminate). More generally, validly serves as a â€œwrapperâ€ for any standard <b>conditional</b> <b>command.</b> So, for example, "validly reg a b c if p|q" is handled correctly. But validly (its code deploys nested calls to cond()) is computationally expensive. The better resolution would be for Stata, in its next release, to redesign its core code so that logical and relational operators would (as algebraic operators currently do) handle missing data appropriately. (Objections to this strategy are examined and deemed to lack force.) I would like to enlist the informed and active judgment of the participants of the 14 th Users Group meeting to help bring this about. ...|$|E
60|$|Object. But, {{you will}} say, by these words of yours you {{do seem to}} deny that there are {{conditional}} promises in the Gospel, as is clear, in that you strike at such practices as are <b>conditional,</b> and <b>commanded</b> to be done upon the same.|$|R
5000|$|Finally, we can {{use this}} macro {{mechanism}} to provide <b>conditionals.</b> The <b>command</b> '=r' will pop two values from the stack, and execute the macro stored in register 'r' {{only if they are}} equal. So this will print the string 'equal' only if the top of the stack is equal to 5: ...|$|R
5000|$|... a {{built-in}} editor {{that allows a}} macro to be composed rather than recorded. This includes adding <b>conditional</b> statements, custom <b>commands</b> such as [...] "open file", [...] "launch website" [...] or [...] "shutdown computer".|$|R
50|$|Sam extends {{its basic}} {{text-editing}} command set to handling of multiple files, providing similar pattern-based <b>conditional</b> and loop <b>commands</b> for filename specification. Any sequence of text-editing commands may be applied {{as a unit}} to each such specification.|$|R
5000|$|In {{programming}} languages with {{a built-in}} Boolean data type, such as Pascal and Java, the comparison operators such as [...] and [...] are usually defined to return a Boolean value. <b>Conditional</b> and iterative <b>commands</b> may be defined to test Boolean-valued expressions.|$|R
40|$|An {{imperative}} conditional is a conditional in {{the imperative}} mood (by analogy with “indicative conditional”, “subjunctive conditional”). What, in general, {{is the meaning}} and the illocutionary effect of an imperative conditional? I survey four answers: the answer that imperative <b>conditionals</b> are <b>commands</b> {{to the effect that}} an indicative conditional be true; two versions of the answer that imperative conditionals express irreducibly conditional commands; and finally, the answer that imperative conditionals express a kind of hybrid speech act between command and assertion. ...|$|R
40|$|The ZED {{editor for}} the DEC VAX is a simple, yet {{powerful}} line editor for text, program source code, and non-binary data. Line editors can be superior to screen editors in some cases, such as executing complex multiple or <b>conditional</b> <b>commands,</b> or editing via slow modem lines. ZED excels {{in the area of}} text processing by using procedure files. For example, such procedures can reformat a file of addresses or remove all comment lines from a FORTRAN program. In addition to command files, ZED also features versatile search qualifiers, global changes, conditionals, on-line help, hexadecimal mode, space compression, looping, logical combinations of search strings, journaling, visible control characters, and automatic detabbing. The ZED editor was originally developed at Cambridge University in London and has been continuously enhanced since 1976. Users of the Cambridge implementation have devised such elaborate ZED procedures as chess games, calculators, and programs for evaluating Pi. This implementation of ZED strives to maintain the characteristics of the Cambridge editor. A complete ZED manual is included on the tape. ZED is written entirely in C for either batch or interactive execution on the DEC VAX under VMS 4. X and requires 80, 896 bytes of memory. This program was released in 1988 and updated in 1989...|$|R
50|$|In its {{simplest}} form, {{like many}} other web scripting languages, CFML augments standard HTML files with database <b>commands,</b> <b>conditional</b> operators, high-level formatting functions, and other elements to produce web applications. CFML also includes numerous other constructs including ColdFusion Components (CFCs), CFML's version of objects, that allow for separation of business logic from presentation.|$|R
5000|$|The {{so-called}} -te verb form is {{used for}} a variety of purposes: either progressive or perfect aspect (see above); combining verbs in a temporal sequence (Asagohan o tabete sugu dekakeru [...] "Ill eat breakfast and leave at once"), simple <b>commands,</b> <b>conditional</b> statements and permissions (Dekakete-mo ii? [...] "May I go out?"), etc.|$|R
5000|$|Here's {{an example}} to show all this at work: a simple <b>command,</b> <b>Conditional</b> Jump, a special type of {{conditional}} branch (forward only, up to 256 bytes) suitable mainly for jumping over short blocks of code:Op code byte= F2 (this is in hexadecimal, Hex F is binary 1111, Hex 2 (0010) defines the op);Q byte= 00000001 specifies that we [...] "jump" [...] if the condition register has the [...] "equal" [...] bit on;Operand= 00011000: if the condition is met we jump forward 24 bytes.|$|R
50|$|There are 9 {{simple and}} 20 {{compound}} tenses in Turkish. 9 simple tenses are simple past (di'li geçmiş), inferential past (miş'li geçmiş), present continuous, simple present (aorist), future, wish, demand, necessitative ("must") and order. There are {{three groups of}} compound forms. Story (hikaye) is the witnessed past of the above forms (except command), rumor (rivayet) is the unwitnessed past of the above forms (except inferential past and <b>command),</b> <b>conditional</b> wish (koşul) is the conditional form of the first five basic tenses. In the example below the second person singular of the verb git ("go") is shown.|$|R
40|$|An {{extension}} of process algebra for modelling processes with backtracking is introduced. This extension is semantically based on processes that transform data because, in our view, backtracking is the undoing {{of the effects}} caused by a process in some initial data-state if this process fails. The data-states are given by a data environment, which is a structure that also defines in which data-states guards hold, and how (atomic) actions either transform these states or block and prevent subsequent processes from being executed. State operators are used to relate process terms to a given data environment. Backtracking is axiomatised in a few phases. First guarded <b>commands</b> (<b>conditionals)</b> and a standard type of guards, expressing the enabledness of actions, are added to basic process algebra (process algebra without operators for parallelism) by involving a Boolean algebra. Then the set of actions is partitioned in order to distinguish between different types of behaviour of actions in [...] ...|$|R
40|$|The program PDFFIT is {{designed}} for the full pro®le structural re®nement of the atomic pair distribution function (PDF). In contrast to conventional structure re®nement based on Bragg intensities, the PDF probes the local structure of the studied material. The program presented here allows the re®nement of atomic positions, anisotropic thermal parameters and site occupancies as well as lattice parameters and experimental factors. By selecting individual atom types one can calculate partial and differential PDFs {{in addition to the}} total PDF. Furthermore one can re®ne multiple data sets and/or multiple structural phases. The program is controlled by a command language which includes a Fortran style interpreter supporting loops and <b>conditional</b> statements. This <b>command</b> language is also used to de®ne the relation between re®nement parameters and structural or experimental information, allowing virtually any constraint to be implemented in the model. PDFFIT is written in Fortran- 77, and the source code and documentation are available via the World Wide Web. 1...|$|R
40|$|XML {{technologies}} have been recently introduced in network management towards alleviating limitations of SNMP. The XML W 3 C standard, along with XML technologies {{has the potential}} to boost open, interoperable, cost-effective and standards-based management solutions. This paper highlights recent efforts towards XML network management and introduces an architecture supporting XML-based network management applications. This architecture specifies a runtime environment that parses XML documents containing composite operations for individual devices, as well as for heterogeneous mutli-vendor networks. Management operations in the scope of XML documents are defined in a programmable fashion based on an XML-based composition language supporting aggregations of elementary operations, looping <b>commands,</b> <b>conditional</b> statements, as well as simple rules signifying the occurrence of specific events. The introduced environment allows network managers to define management operations featuring high-level semantics and accordingly produce sophisticated applications through XML authoring. Following the illustration of the architecture, its composition language and issues relating to security and error handling, the paper ends up presenting a prototype implementation, along with associated performance evaluation results. © 2005 Springer Science+Business Media, Inc...|$|R
40|$|This {{document}} was {{originally intended to}} be a section of Schagrin, Morton L.; Rapaport, William J.; & Dipert, Randall R. (1985), Logic: A Computer Approach (New York: McGraw-Hill). This document discusses the ternary (i. e., 3 -place) if-then-else sentential connective, which is based on the if-then-else instruction of computer programming languages. Before we begin, however, we should look closely at an important difference between the use of if-then (and of if-then-else) in programming languages and its use in sentential (i. e., propositional) logic. In most logic texts (e. g., Shagrin et al. 1985) that are about the logic of declarative sentences—i. e., sentences, expressing propositions, that can be either true or false—the antecedent and consequent of a conditional sentence are themselves declarative sentences. But in an “imperative ” programming language such as Basic or Pascal, an if-then statement is really a <b>conditional</b> instruction or <b>command</b> whose antecedent is a delcarative sentence but whose consequent is an instruction or command, i. e., an imperative sentence. Thus, whereas in sentential logic we are interested in conditional sentences such as: If Ann goes to the party, then Bob will go to the party in many programming languages, we would be interested in conditional instructions such as...|$|R

