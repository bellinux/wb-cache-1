36|92|Public
5|$|At this point, Rejewski {{ran into}} {{difficulties}} {{due to the}} large number of unknowns in the set of equations that he had developed. He would later comment in 1980 that it was still not known whether such a set of six equations was soluble without further data. But he was assisted by cryptographic documents that Section D of French military intelligence (the Deuxième Bureau), under future General Gustave Bertrand, had obtained and passed on to the Polish Cipher Bureau. The documents, procured from a spy in the German <b>Cryptographic</b> <b>Service,</b> Hans-Thilo Schmidt, included the Enigma settings for the months of September and October 1932. About 9 or 10 December 1932, the documents were given to Rejewski. They enabled him {{to reduce the number of}} unknowns and solve the wirings of the rotors and reflector.|$|E
25|$|Word's 2003/XP version default {{protection}} {{remained the}} same but an option that allowed advanced users choosing a <b>Cryptographic</b> <b>Service</b> Provider was added. If a strong CSP is chosen, guaranteed document decryption becomes unavailable, and therefore a password can't {{be removed from the}} document. Nonetheless, a password can be fairly quickly picked with brute-force attack, because its speed is still high regardless of the CSP selected. Moreover, since the CSPs are not active by the default, their use is limited to advanced users only.|$|E
5000|$|TIMCOM IF-190 The Organization and History of the <b>Cryptographic</b> <b>Service</b> Within the German Army.|$|E
5000|$|Regulates the {{provision}} of <b>cryptographic</b> <b>services</b> in the UK (ss.1-6); and ...|$|R
2500|$|The Secure Real-time Transport Protocol (SRTP) (...) {{defines a}} profile of RTP that {{provides}} <b>cryptographic</b> <b>services</b> for the transfer of payload data.|$|R
5000|$|Cryptography: Commonly used {{symmetric}} key algorithms like DES, Triple DES, AES, and a{{symmetric key}} algorithms such as RSA, elliptic curve cryptography are supported {{as well as}} other <b>cryptographic</b> <b>services</b> like signing, key generation and key exchange.|$|R
50|$|In 1764, he was {{appointed}} as a head of the <b>cryptographic</b> <b>service</b> of Russia, and held this position till 1797, during 33 years.|$|E
50|$|As for {{the third}} key, Microsoft claimed {{it was only in}} beta builds of Windows 2000 and that its purpose was for signing <b>Cryptographic</b> <b>Service</b> Providers.|$|E
5000|$|Microsoft CryptoAPI uses <b>Cryptographic</b> <b>Service</b> Providers {{to offer}} {{encryption}} implementations. The Microsoft AES Cryptographic Provider {{was introduced in}} Windows XP {{and can be used}} with any version of the Microsoft CryptoAPI.|$|E
40|$|Abstract:- Pseudorandom {{generators}} are a basic {{foundation of}} many <b>cryptographic</b> <b>services</b> and information security protocols. We propose {{a modification of}} a previously published matricial pseudorandom generator that significantly improves performance and security. The resulting generator is successfully compared to world class standards...|$|R
40|$|Early {{applications}} of smart cards have focused {{in the area}} of per-sonal security. Recently, there has been an increasing demand for networked, multi-application cards. In this new scenario, enhanced application-specific on-card Java applets and complex <b>cryptographic</b> <b>services</b> are executed through the smart card Java Virtual Machine (JVM). In order to support such computation-intensive applica-tions, contemporary smart cards are designed with built-in micro-processors and memory. As smart cards are highly area-constrained environments with memory, CPU and peripherals competing for a very small die space, the VM execution engine of choice is often a small, slow interpreter. In addition, support for multiple applica-tions and <b>cryptographic</b> <b>services</b> demands high performance VM execution engine. The above necessitates the optimization of the JVM for Java Cards...|$|R
50|$|KnownSafe, Inc. was a <b>{{cryptographic}}</b> <b>services</b> company {{founded in}} April 2000 by Bruce Perens, Len Sassaman, and Rodney Thayer. The company aimed to provide novel cryptographic assurance capabilities to consumers based on privacy-preserving PKI techniques, {{but failed to}} secure necessary funding following {{the collapse of the}} Dot-com bubble.|$|R
50|$|The {{most common}} way to access {{cryptographic}} smart card functions {{on a computer}} {{is to use a}} vendor-provided PKCS#11 library. On Microsoft Windows the <b>Cryptographic</b> <b>Service</b> Provider (CSP) API is also supported.|$|E
5000|$|In Microsoft Windows, a <b>Cryptographic</b> <b>Service</b> Provider (CSP) is a {{software}} library that implements the Microsoft CryptoAPI (CAPI). CSPs implement encoding and decoding functions, which computer application programs may use, for example, to implement strong user authentication or for secure email.|$|E
50|$|The {{experience}} of 1940 showed that considerable {{expansion in the}} German Army <b>cryptographic</b> <b>service</b> was desirable. This organisation {{was carried out by}} Major Mang. His aim was not only to increase the cryptanalysis staff at the centre, but also to provide reserves of cryptographic to work in certain key areas. The cryptanalysis section thereupon became independent and was reorganised as Group VI of In 7. Henceforth it was subordinated to the reserve army for personnel and administrative matters, but remained subordinated to Chef HNW of Field Army, just as Horchleitstelle was converted to Group IV. Nevertheless, this curious form of organization paid, and enabled the <b>cryptographic</b> <b>service</b> to recruit sufficient personnel without serious interference.|$|E
5000|$|Ant Financial Services - {{streamlines}} {{payment services}} for e-commerce website AliExpress: V-Key provides a virtual software solution V-OS for Ant Financial to secure transactions on AliExpress, and provides <b>cryptographic</b> <b>services</b> and trusted environments to secure payments that are processed by Alipay on AliExpress, {{as well as}} risk management for every transaction.|$|R
5000|$|S/MIME {{provides}} the following <b>cryptographic</b> security <b>services</b> for electronic messaging applications: ...|$|R
40|$|Pseudorandom {{generators}} are a basic {{foundation of}} many <b>cryptographic</b> <b>services</b> and information security protocols. We propose {{a modification of}} a previously published matricial pseudorandom generator that significantly improves performance and security. The resulting generator is successfully compared to world class standards. This research was partially supported by the Spanish grant GV 06 / 018...|$|R
50|$|CryptoAPI {{works with}} a number of CSPs (<b>Cryptographic</b> <b>Service</b> Providers) {{installed}} on the machine. CSPs are the modules that do the actual work of encoding and decoding data by performing the cryptographic functions. Vendors of HSMs may supply a CSP which works with their hardware.|$|E
50|$|CNG also {{supports}} elliptic curve cryptography which, because it uses shorter keys {{for the same}} expected level of security, is more efficient than RSA. The CNG API integrates with the smart card subsystem by including a Base Smart Card <b>Cryptographic</b> <b>Service</b> Provider (Base CSP) module which encapsulates the smart card API. Smart card manufacturers {{just have to make}} their devices compatible with this, rather than provide a from-scratch solution.|$|E
50|$|<b>Cryptographic</b> <b>service</b> {{providers}} can be {{used for}} encryption of Word, Excel, and PowerPoint documents starting from Microsoft Office XP. A standard encryption algorithm with a 40-bit key is used by default, but enabling a CSP enhances key length and thus makes decryption process more continuous. This only applies to passwords that are required to open document because this password type {{is the only one that}} encrypts a password-protected document.|$|E
40|$|Abstract There {{are several}} types of attacks, in-cluding multi-protocol attacks, that occur when in-correct {{assumptions}} are made about the operating environment of a cryptographic protocol. This pa-per introduces {{the concept of a}} protocol service layer providing separation between <b>cryptographic</b> <b>services</b> and their uses. This layer implements the necessary security functions needed to implement the secure environment assumed by many protocol designers...|$|R
40|$|In {{elliptic}} curves cryptography, {{the curves}} are always defined over a particular finite field {{to provide the}} required <b>cryptographic</b> <b>services.</b> Currently, such services are the engine of most network security applications in practice. Scalar multiplication is the core operation of most such <b>cryptographic</b> <b>services.</b> Scalar multiplication performs field inversion very frequently in the underlying finite field. Field inversion is the most time-consuming operation that requires a special attention. Therefore, by accelerating field inversion, {{in addition to their}} inherent high level of security, such <b>cryptographic</b> <b>services</b> are executed fast. In finite extension fields GF(pm) with the extension degree m, accelerating field inversion by following Fermat 2 ̆ 7 s approach is reduced to the problem of finding a clever way to compute an exponentiation, which {{is a function of the}} field 2 ̆ 7 s extension degree m. By applying the concept of short addition chains combined with the idea of decomposing (m- 1) into several factors plus a remainder, with some restrictions applied, field inversion in such fields is computed very fast. Two field inversion algorithms are proposed based on the suggested methods above. They are mainly proposed for extension fields of characteristic p two and three using normal basis representation. Fast Frobenius map operation proposed and extended to higher characteristic extension fields. Both algorithms, relative to existing inversion algorithms, require the minimal number of field multiplications, the second costly operations, those necessary to perform the exponentiation for field inversion. The obtained results confirmed the validity of the proposed ideas herein...|$|R
50|$|The Base Services Layer is {{the lowest}} level {{reachable}} by user-side operations; it includes the File Server and User Library, a Plug-In Framework which manages all plug-ins, Store, Central Repository, DBMS and <b>cryptographic</b> <b>services.</b> It also includes the Text Window Server and the Text Shell: the two basic services from which a completely functional port can be created {{without the need for}} any higher layer services.|$|R
50|$|In Excel 2003/XP the {{encryption}} {{is slightly}} better - a user can choose any encryption algorithm {{that is available}} in the system (see <b>Cryptographic</b> <b>Service</b> Provider). Due to the CSP, an Excel file can't be decrypted, and thus the password to open can't be removed, though the brute-force attack speed remains quite high. Nevertheless, the older Excel 97/2000 algorithm is set by the default. Therefore, users who did not changed the default settings lack reliable protection of their documents.|$|E
50|$|IAIK-JCE is a Java-based <b>Cryptographic</b> <b>Service</b> Provider, {{which is}} being {{developed}} at the Institute for Applied Information Processing and Communications (IAIK) at the Graz University of Technology. It offers support for many commonly used cryptographic algorithms, such as hash functions, message authentication codes, symmetric, asymmetric, stream and block encryption. Its development started in 1996 and as such IAIK-JCE {{was one of the}} first Java-based cryptography providers. It is written entirely in Java and based on the same design principles as Oracle's JCA/JCE.|$|E
5000|$|As {{a result}} of Commanders of forward {{intercept}} units were allowed {{to create their own}} cryptanalysts teams. Two difficulties were encountered in this connection; firstly, a lack of technical knowledge, and secondly the entry into the <b>cryptographic</b> <b>service</b> of personal who were untrustworthy from the security point of view. In two cases in KONA 2 in Smolensk personnel were unearthed who were guilty of espionage. [...] As {{a result of}} this a security vetting for all security, translators and cryptanalysis personnel was introduced.|$|E
40|$|The need {{to secure}} {{communication}} in ad hoc network is extremely challenging {{because of the}} dynamic nature of the network {{and the lack of}} centralized management. This makes public key <b>cryptographic</b> <b>services</b> particularly difficult to support. We propose a distributed certificate authority intended for deployment in an NTDR cluster-based architecture. We also outline procedures for maintaining this distributed certificate authority amongst a highly dynamic membership of shareholding nodes. ...|$|R
40|$|Abstract:- Most <b>cryptographic</b> <b>services</b> and {{information}} security protocols require a dependable source of random data; pseudorandom generators are convenient and efficient for this application working {{as one of}} the basic foundation blocks on which to build the required security infrastructure. We propose a modification of a previously published matricial pseudorandom generator that significantly improves performance and security by using word packed matrices and modifying key scheduling and bit extraction schemes. The resulting generator is then successfully compared to world class standards...|$|R
40|$|In 1993, {{there were}} an {{estimated}} two million hosts connected to the Internet with a user population of around twenty million, in seventy countries. Increasingly, the information being transmitted within the Internet community is sensitive and concerns about data privacy and integrity are growing. This thesis examines the internet environment and the issues that have lead to this raised level of concern regarding security. We will also examine some of the primitive <b>cryptographic</b> <b>services</b> {{that are available to}} promote trust between users...|$|R
50|$|Word's 2003/XP version default {{protection}} {{remained the}} same but an option that allowed advanced users choosing a <b>Cryptographic</b> <b>Service</b> Provider was added. If a strong CSP is chosen, guaranteed document decryption becomes unavailable, and therefore a password can't {{be removed from the}} document. Nonetheless, a password can be fairly quickly picked with brute-force attack, because its speed is still high regardless of the CSP selected. Moreover, since the CSPs are not active by the default, their use is limited to advanced users only.|$|E
50|$|The default {{protection}} in Office XP and 2003 was not changed, but {{an opportunity to}} use a custom protection algorithm was added. Choosing a non-standard <b>Cryptographic</b> <b>Service</b> Provider allows increasing a key length so that a key {{which is used to}} encrypt a document can’t be found. However, password-cracking programs can enter multiple random passwords with the same speed, so use of CSPs does not slow down password recovery at all. Weak passwords can still be recovered fast enough even if a custom CSP is on.|$|E
50|$|At this point, Rejewski {{ran into}} {{difficulties}} {{due to the}} large number of unknowns in the set of equations that he had developed. He would later comment in 1980 that it was still not known whether such a set of six equations was soluble without further data. But he was assisted by cryptographic documents that Section D of French military intelligence (the Deuxième Bureau), under future General Gustave Bertrand, had obtained and passed on to the Polish Cipher Bureau. The documents, procured from a spy in the German <b>Cryptographic</b> <b>Service,</b> Hans-Thilo Schmidt, included the Enigma settings for the months of September and October 1932. About 9 or 10 December 1932, the documents were given to Rejewski. They enabled him {{to reduce the number of}} unknowns and solve the wirings of the rotors and reflector.|$|E
40|$|This paper {{presents}} an open protocol for interoperability across multi-vendor programmable smart cards. It allows exposition of on-card storage and <b>cryptographic</b> <b>services</b> to host applications in a unified, card-independent way. Its design, {{inspired by the}} standardization of on-card Java language and cryptographic API, has been kept as generic and modular as possible. The protocol security model has been designed {{with the aim of}} allowing multiple applications to use the services exposed by a same card, with either a cooperative or a no-interference approach, depending on application requirements...|$|R
5000|$|By default, wolfSSL {{uses the}} <b>cryptographic</b> <b>services</b> {{provided}} by wolfCrypt. [...] wolfCrypt Provides RSA, ECC, DSS, Diffie-Hellman, EDH, NTRU, DES, Triple DES, AES (CBC, CTR, CCM, GCM), Camellia, IDEA, ARC4, HC-128, ChaCha20, MD2, MD4, MD5, SHA-1, SHA-2, BLAKE2, RIPEMD-160, Poly1305, Random Number Generation, Large Integer support, and base 16/64 encoding/decoding. An experimental cipher called Rabbit, a {{public domain software}} stream cipher from the EU's eSTREAM project, is also included. Rabbit is potentially useful to those encrypting streaming media in high performance, high demand environments.|$|R
40|$|Ptolemy II is a {{powerful}} software package that models heterogeneous systems. Its infrastructure offers {{the ability to create}} distributed models, but lacks the security mechanisms to protect data being transferred in these models. The lack of security can lead to many potential threats and breaches of information. Potential attackers can jeopardize system stability by manipulating data in transit or by transmitting harmful models. Distributed models may also pass security sensitive data where outside parties should not be able to determine the information being passed. The current infrastructure however has no means to keep such information secure from eavesdropping. Eliminating these security threats requires the implementation of various <b>cryptographic</b> <b>services</b> including ciphers and digital signatures. The Sun Java Cryptography Architecture and Java Cryptography Extension packages provide the tools needed in eliminating these breaches of security. The semantics used by the abovementioned Java packages allow for the creation of actors in which a diverse number of algorithms can be used with minimal knowledge of cryptography. By creating Ptolemy II actors that implement <b>cryptographic</b> <b>services,</b> we achieve a flexible yet, powerful defense of potential security leaks in distributed models. The result is being able to send and receive data Ptolemy II distributed models without the concern of information leaks or receiving adverse applications. 1...|$|R
