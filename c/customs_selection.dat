0|44|Public
50|$|Bach Technology is {{a company}} that {{licenses}} an Internet-accessible database containing information about the contents of audiofiles, and other software related to music recognition. Bach Technology uses MPEG-7 technology to create <b>custom</b> <b>selections</b> based upon the customer's preferences for multi-media content. Dagfinn Bach and Sebastian Schmidt are named on the United States patent for the technology to manage the communication of multiple types of data.|$|R
50|$|This group's {{composition}} {{was even}} more fluid {{than that of the}} original Defenders, but typically included either Doctor Strange or Doctor Druid as leader, joined by a <b>custom</b> <b>selection</b> of heroes chosen for the mission at hand. At various times, War Machine, Darkhawk, Thunderstrike, Wolverine, the second Spider-Woman, Ant-Man, Iceman, Nomad, and many others were members. At the end of its existence, the group had a somewhat regular composition including Cadaver, Sepulchre, Joshua Pryce, and Doctor Druid.|$|R
40|$|The {{problems}} {{inherent in}} providing natural language generation of colour names are discussed. Three models for generating natural language descriptions of HSL colours are described. The effectiveness of these models in describing colours is compared experimentally. It is concluded that a rigid syntactic mapping of HSL components to orthogonal linguistic axes is generally inferior to exhaustive enumeration of colours or <b>custom</b> <b>selection</b> of adjectival colour modifiers. Interesting variations of model preference for different hues and different numbers of adjectival modifiers are noted...|$|R
40|$|Finding {{effective}} {{solutions for}} cold-starting Context-Aware Recommender Systems (CARSs) {{is important because}} usually low quality recommendations are produced for users, items or contextual situations that are new to the system. In this paper, we tackle this problem with a switching hybrid solution that exploits a <b>custom</b> <b>selection</b> of two CARS algorithms, each one suited for a particular cold-start situation, and switches between these algorithms depending on the detected recommendation situation (new user, new item or new context). We evaluate the proposed algorithms in an off-line experiment by using various contextually-tagged rating datasets. We illustrate some significant performance differences between the considered algorithms and show {{that they can be}} effectively combined into the proposed switching hybrid to cope with different types of cold-start problems. Peer ReviewedPostprint (published version...|$|R
40|$|Application-Specific Instruction set Processor (ASIP) {{has become}} an {{increasingly}} popular platform for embedded systems because of its high performance, great flexibility, and short turn-around time. Multiple requirements on such processors have been imposed by the rapidly developing embedded application market. Such requirements include high performance, high energy efficiency, small circuit size and high security and reliability. ^ In this dissertation, we develop a holistic multi-objective ASIP design flow to target these design goals. The design flow includes three major steps - <b>custom</b> instruction set <b>selection,</b> <b>custom</b> hardware extension generation, and the underlying microarchitecture optimization. We propose to formulate the <b>custom</b> instruction <b>selection</b> problem based on 2 ̆ 2 Operation Scheduling 2 ̆ 2. Both Mixed Integer Linear Programming (MILP) and Simulated Annealing (SA) algorithms are developed to efficiently identify a set of custom instruction candidates, targeting performance, energy efficiency, or area overhead reduction. This technique identifies custom instruction set that can achieve 1. 64 performance speedup and 29. 8...|$|R
40|$|Abstract. The rapidly {{increasing}} use of large-scale data on the Web has made named entity disambiguation a key research challenge in Information Extraction (IE) {{and development of the}} Semantic Web. In this paper we propose a novel disambiguation framework that utilizes background semantic information, typically in the form of Linked Data, to accurately determine the intended meaning of detected semantic entity references within texts. The novelty of our approach lies in the definition of a structured semi-automatic process that enables the <b>custom</b> <b>selection</b> and use of the semantic data that is optimal for the disambiguation scenario at hand. This process allows our framework to adapt to the particular characteristics of different domains and scenarios and, as experiments show, to be more effective than approaches primarily designed to work in open domain and unconstrained situations. ...|$|R
40|$|This thesis {{describes}} {{the design and}} implementation of CopyStyler, a tool to enable novice web users to style their own web pages by emulating the style of existing pages on the Web. The tool is implemented as a browser extension on Firefox, created using Chickenfoot. The tool lays the user’s page and the page they wish to emulate side by side, and the user uses a <b>custom</b> <b>selection</b> process to define which page styles {{he would like to}} copy and which page elements he would like to change. The tool was evaluated on a variety of web pages and structures, as well as with a variety of users. This thesis also proposes additions to CopyStyler that could be created to enhance its ability in other areas of style copying...|$|R
40|$|Path {{profiling}} {{records the}} frequency of each path in an executed program. To accomplish profiling, probes are instrumented in the program and executed as the program runs. So, the number of probes has {{a significant impact on}} the efficiency of a profiling technique. By profiling only the interesting paths, existing techniques try to improve the profiling efficiency by reducing the number of probes and optimize path encodings for efficient storage. However, they lack accuracy, waste time on running uninteresting paths, and can mainly deal with acyclic paths. In this article, a novel technique called Profiling Selected Paths (PSP) is introduced to profile selected paths, which enables <b>custom</b> <b>selection</b> for both acyclic and cyclic paths and increases the execution efficiency by early termination on uninteresting paths. Theoretical analysis and experimental evaluation indicate that PSP performs better than existing techniques. Department of Computin...|$|R
50|$|WinZip 11 {{added support}} for {{creating}} and extracting WavPack-compressed ZIP archives. The installer still installed to Windows 98/ME, but these operating systems {{were no longer}} officially supported. WinZip Pro added Passive FTP support, FTP transfers, e-mail notification option for Job Wizard, <b>custom</b> jobs <b>selection,</b> full-size image viewer when opening archive. This version was released in 2006.|$|R
40|$|The {{problems}} {{inherent in}} providing natural language generation of colour names are discussed. Three models for generating natural language descriptions of HSL colours are described. The effectiveness of these models in describing colours is compared experimentally. It is concluded that a rigid syntactic mapping of HSL components to orthogonal linguistic axes is generally inferior to exhaustive enumeration of colours or <b>custom</b> <b>selection</b> of adjectival colour modifiers. Interesting variations of model preference for different hues and different numbers of adjectival modifiers are noted. Introduction Research in colour modelling for computational purposes has concentrated on finding numerical representations of colours which are convenient for use in computer graphics and image processing. These representation schemes use a three dimensional colour space (RGB, CMY, YIQ, HSV, HSL, XYZ, L*a*b*, L*u*v*, etc.) and quantify colours as points in that space [3, 4, 6, 9]. This provides a means of [...] ...|$|R
30|$|SaaS {{providers}} {{can also}} implement their own control mechanisms. The CallContext contains much relevant information that enables other control mechanisms {{to be implemented}} (see Figure 3). For example, an application can implement a user policy that allow to define individual policies on a per end user (of tenants) basis. Furthermore, a custom implementation of a policy engine can be provided and inserted into the dispatcher to support <b>custom</b> component <b>selection.</b>|$|R
40|$|International audienceThe application-specific {{instruction}} set processors (ASIPs) have received {{more and more}} attention in recent years. ASIPs make trade-offs between flexibility and performance by extending the base {{instruction set}} of a general-purpose processor with custom functional units (CFUs). Custom instructions, executed on CFUs, {{make it possible to}} improve performance and achieve flexibility for extensible processors. The custom instruction synthesis flow involves two essential issues: custom instruction enumeration (subgraph enumeration) and <b>custom</b> instruction <b>selection</b> (subgraph selection). However, both enumerating all possible custom instructions of a given data-flow graph and selecting the most profitable custom instructions from the enumerated custom instructions are computationally difficult problems. In this paper, we propose efficient algorithms for custom instruction enumeration and <b>custom</b> instruction <b>selection.</b> Compared with previously proposed well-known enumeration algorithms, our approach can achieve a significant speedup while generating the identical set of all possible custom instructions or only connected custom instructions. Experimental results also show that a code size reduction rate up to 76 % can be achieved for a set of computational intensive programs, and the speed-up achieved is up to 8. 2 ×...|$|R
40|$|Runtime {{reconfiguration}} is {{a promising}} solution for reducing hardware cost in embedded systems, without compromising on performance. We present {{a framework that}} aims to increase the performance benefits of reconfigurable processors that support full or partial runtime reconfiguration. The proposed framework achieves this by: (1) providing a means for choosing suitable <b>custom</b> instruction <b>selection</b> heuristics, (2) leveraging FPGA-awaremerging of custom instructions to maximize the reconfigurable logic block utilization in each configuration, and (3) incorporating a hierarchical loop partitioning strategy to reduce runtime reconfiguration overhead. We show that the performance gain can be improved by employing suitable <b>custom</b> instruction <b>selection</b> heuristics that, in turn, depend on the reconfigurable resource constraints and the merging factor (extent to which the selected custom instructions can be merged). The hierarchical loop partitioning strategy leads to an average performance gain of over 31 % and 46 % for full and partial runtime reconfiguration, respectively. Performance gain can be further increased to over 52 % and 70 % for full and partial runtime reconfiguration, respectively, by exploiting FPGA-aware merging of custom instructions...|$|R
25|$|There {{are many}} tools {{that can be}} used for editing images in GIMP. The more common tools include a paint brush, pencil, airbrush, eraser and ink tools used to create new or blended pixels. The Bucket Fill tool can be used to fill a {{selection}} with a color or pattern. The Blend tool can be used to fill a selection with a color gradient. These color transitions can be applied to large regions or smaller <b>custom</b> path <b>selections.</b>|$|R
5000|$|Technologies {{are under}} {{development}} to facilitate production of customized polypills, such as for example {{by the use}} of ink-jet printing mechanisms to precisely deposit selected drug substance(s) onto sheets which can then be inserted into capsules (enabling [...] "individualized dosing and automated fabrication of medicines containing multiple drugs," [...] in addition to custom single-drug products). Similar technology {{can also be used to}} print tablets, more directly. Ink-jet or fluid-jet approaches do require each drug substance to be dissolved in a liquid solvent, but they can be particularly conducive to custom formulation with various possible excipients (in addition to <b>custom</b> drug/dose <b>selections).</b>|$|R
5000|$|The lasso tool {{is similar}} to the [...] "marquee" [...] tool, however, the user can make a <b>custom</b> <b>selection</b> by drawing it freehand. There are three options for the [...] "lasso" [...] tool - regular, polygonal, and magnetic. The regular [...] "lasso" [...] tool allows the user to have drawing capabilities. Photoshop will {{complete}} the selection once the mouse button is released. The user may also complete the selection by connecting the end point to the starting point. The [...] "marching ants" [...] will indicate if a selection has been made. The [...] "polygonal lasso" [...] tool will draw only straight lines, which makes it an ideal choice for images with many straight lines. Unlike the regular [...] "lasso" [...] tool, the user must continually click around the image to outline the shape. To complete the selection, the user must connect the end point to the starting point just like the regular lasso tool. [...] "Magnetic lasso" [...] tool is considered the smart tool. It can do the same as the other two, but it can also detect the edges of an image once the user selects a starting point. It detects by examining the color pixels as the cursor move over the desired area. A pixel is the smallest element in an image. Closing the selection {{is the same as the}} other two, which should also should display the [...] "marching ants" [...] once the selection has been closed.|$|R
40|$|International audienceIn {{most parts}} of the world there are {{multiple}} ways to access a given network. Users can benefit from this plethora of access networks, as they are able to select the best possible connection at all times. However, current methods used to select the best network, mostly based on link quality, do not always guarantee that users will connect to the one best suited to their needs. Devices have different interfaces for accessing different type of technologies, which also means that the selection has to be made regardless of the type of networks the user has access to. In order to support this type of <b>custom</b> <b>selection,</b> networks need to advertise their capabilities prior to the connection process. Moreover, in addition to supporting multihoming, devices must be able to assign each applications flow towards the most suitable network. Ideally, this new connection process would be completely transparent for the user. In this paper, we present a solution to ensure that devices in this multi-access environment are able to maintain the best possible connection for each service at any given time and in any given location. This proposal allows providers to send information to devices regarding the services supported by each point of attachment to their network. This additional information helps devices select the most suitable network for each service. We define a service announcement mechanism to facilitate the advertisement of available services. This mechanism, associated with other existing protocols, enables this solution to be used with different types of access networks...|$|R
50|$|Beginning {{with the}} 1.0 version launch in mid-1998, a new process {{was added to}} the file {{deletion}} process known as “bleaching”. This file encryption process seeks out files with random characters in their names, destroys them and then permanently removes them from the computer’s hard drive. A <b>custom</b> cookie <b>selection</b> feature was also added to allow users to select specific cookies to be excluded from the deletion process making it so homepages, internet preferences, logins and passwords can be stored for future visits to a website. Software updates also included the ability to clean CHK files created by scandisk and third party programs files such as ActiveX and Java that are downloaded by Internet Explorer.|$|R
40|$|The main aim of {{this article}} is to {{demonstrate}} that a fast and accurate FPGA estimation engine is indispensable in design flows for <b>custom</b> instruction (template) <b>selection.</b> The need for a FPGA estimation engine stems from the difficulty in predicting the FPGA performance measures of selected custom instructions. We will present a FPGA estimation technique that partitions the high-level representation of custom instructions into clusters based on the structural organization of the target FPGA, while taking into account general logic synthesis principles adopted by FPGA tools. In this work, we have evaluated a widely used graph covering algorithm with various heuristics for <b>custom</b> instruction <b>selection.</b> In addition, we present an algorithm called Refined Largest Fit First (RLFF) that relies on a graph covering heuristic to select nonoverlapping superset templates, which typically incorporate frequently used basic templates. The initial solution is further refined by considering overlapping templates that were ignored previously to see if their introduction could lead to higher performance. While RLFF provides the most efficient cover compared to the ILP method and other graph covering heuristics, FPGA estimation results reveals that RLFF leads to the worst performance in certain applications. It is therefore a worthy proposition to equip design flows with accurate FPGA estimation in order to rapidly determine the most profitable custom instruction approach for a given application...|$|R
50|$|These efforts {{often lead}} to the {{creation}} of a course website that offers students convenient access to online course information, including <b>custom</b> content, <b>selections</b> from Columbia's Digital Library Collection, and communication tools. CCNMTL's educational technologists assist faculty and instructors interested in using CourseWorks, Columbia University's course management system, and Columbia Wikispaces, a service from Wikispaces.com that provides a wiki to every registered course at Columbia University. In 2008, CCNMTL also launched Columbia on iTunes U, which allows Columbia students, faculty, and the public to download free lectures, seminars, and other Columbia-produced media content to mobile devices or personal computers via Apple's iTunes. Additionally, CCNMTL offers workshops for Columbia faculty and instructors who wish to explore uses of new media in teaching and learning.|$|R
40|$|Abstract|Eciency and exibility are critical, {{but often}} con ict-ing, design goals in {{embedded}} system design. The recent emergence of extensible processors promises a favorable tradeo between e-ciency and exibility, while keeping design turnaround times short. Current extensible processor design ows automate several tedious tasks, but typically require designers to manually select {{the parts of}} the program that are to be implemented as custom instructions. In this work, we describe an automatic methodology to select custom instructions to augment an extensible processor, in order to maximize its eciency for a given application program. We demon-strate that the number of custom instruction candidates grows rapidly with program size, leading to a large design space, and that the quality (speedup) of custom instructions varies signicantly across this space, motivating the need for the proposed ow. Our methodology features cost functions to guide the <b>custom</b> instruction <b>selection</b> process, as well as static and dynamic pruning techniques to eliminate inferior parts of the design space from consideration. Further, we employ a two-stage process, wherein a limited num-ber of promising instruction candidates are rst selected, and then evaluated in more detail through cycle-accurate instruction set sim-ulation and synthesis of the corresponding hardware, to identify the custom instruction combinations that result in the highest program speedup or maximize speedup under a given area constraint. We have evaluated the proposed techniques using a state-of-the-art extensible processor platform, {{in the context of a}} commercial design ow. Experiments with several benchmark programs indi-cate that custom processors synthesized using automatic <b>custom</b> instruction <b>selection</b> can result in large improvements in perfor-mance (upto 5. 4 X, average of 3. 4 X), energy (upto 4. 5 X, average of 3. 2 X), and energy-delay product (upto 24. 2 X, average of 12. 6 X), while speeding up the design process signicantly. I...|$|R
40|$|Instruction-set {{extensible}} processors {{allow an}} existing processor core {{to be extended}} with application-specific custom instructions. In this paper, we explore a novel application of instruction-set extensions to meet timing constraints in real-time embedded systems. In order to satisfy real-time constraints, the worst-case execution time (WCET) of a task should be reduced as opposed to its average-case execution time. Unfortunately, existing <b>custom</b> instruction <b>selection</b> techniques based on average-case profile information may not reduce a task’s WCET. We first develop an Integer Linear Programming (ILP) formulation to choose optimal instruction-set extensions for reducing the WCET. However, ILP solutions for this problem are often too expensive to compute. Therefore, we also propose an efficient and scalable heuristic that obtains quite close to the optimal results. Experiment results indicate that suitable choice of custom instructions can reduce the WCET of our benchmark programs {{by as much as}} 42 % (23. 5 % on an average) ...|$|R
40|$|Abstract—Many {{reconfigurable}} processors {{allow their}} instruction sets to be tailored {{according to the}} performance requirements of target applications. They have gained immense popularity in recent years because of this flexibility of adding custom instructions. However, most design automation algorithms for instruction set customization (like enumerating and selecting the optimal set of custom instructions) are computationally intractable. As such, existing tools to customize instruction sets of extensible processors rely on approximation methods or heuristics. In contrast to such traditional approaches, we propose to use GPUs (Graphics Processing Units) to efficiently solve computationally expensive algorithms in the design automation tools for extensible processors. To demonstrate our idea, we choose a <b>custom</b> instruction <b>selection</b> problem and accelerate it using CUDA (CUDA is a GPU computing engine). Our CUDA implementation is devised to maximize the achievable speedups by various optimizations like exploiting on-chip shared memory and register usage. Experiments conducted on well known benchmarks show significant speedups over sequential CPU implementations as well as over multi-core implementations. I...|$|R
5000|$|The game advertised {{itself as}} [...] "three games in one" [...] {{since it was}} the first Sierra game that (according to RPG <b>customs)</b> allowed the <b>selection</b> of a {{character}} out of three classes: Fighter, Magic User, and Thief. What class the hero assigns to a character largely determines with what equipment the character begins, how they can solve puzzles and what quests they will run into. However, the distinction between classes was not an absolute one; players could add skills to a character and allow them to complete quests related to other classes in this game and others in the series.|$|R
40|$|Application {{code and}} {{processor}} parallelization, together with instruction set customization, {{are the most}} common and effective ways to enhance the performance and efficiency of application-specific processors (ASIPs). Both the effective code parallelization and data/task parallelism exploitation, as well as effective instruction set customization, enable an ASIP to achieve a significant performance improvement using limited extra hardware resources. However, a naive parallelization or instruction set customization may not result in the required performance improvement, leading to a waste of computing and energy resources. Therefore, when performing parallelization or <b>custom</b> instruction <b>selection,</b> complex tradeoffs between processing speed, circuit area and power consumption must be closely observed. In this paper, we propose and discuss an efficient ASIP-based Multi-Processor System-on-a-Chip (MPSoC) design for ray-tracing, exploiting application parallelism and hardware replication-aware instruction set customization. Without hardware sharing among the custom instructions units, the proposed parallel ray-tracer MPSoC design with custom instructions achieves 77 % speed up in comparison to a single microprocessor design with the default instruction set. However, with the replication-aware instruction set customization, the speed up increases to 81 %...|$|R
40|$|Conventional {{scheduling}} technology, which {{tries to}} optimise performance metrics such as utilisation and makespan, works well in environments {{where there is}} a high degree of stability, and hence certainty. However, in uncertain situations, schedules that try to achieve optimality have trouble achieving this target. An often used technique to circumvent the issues with uncertainty that optimal policies display, is the use of rules that are triggered when a job enters the system or a machine becomes available. Such rules are by definition reactive, and can thus deal very well with uncertainty. The downside of these rules is that they make local decisions, which may result in non-optimal behaviour. This becomes especially apparent in light of significant sequence dependent setup times. These are, by nature, dependent upon the global sequence, something that rules cannot deal well with. In this paper, we investigate a method to generate <b>custom</b> machine <b>selection</b> rules that lead to improved setup times. We illustrate the advantages of this new type of rule by presenting an experimental analysis of using these rules at the cartoning department of a large manufacturing company...|$|R
40|$|Micro and macro level {{impacts of}} {{offshore}} outsourcing {{are far from}} clear. Thus there are some well-founded rationales for and against offshore outsourcing {{as well as a}} number of misinformed and ill guided viewpoints. Using institutional theory as a lens, this paper analyzes the drivers of offshore business process and information technology outsourcing. We examine the mechanisms by which regulative rules, social rules, culturally supported habits and subconsciously accepted rules and <b>customs</b> influence assessment, <b>selection</b> as well as continuation of outsourcing projects. Managerial and policy implications are discussed and directions for future research have been suggested. Offshore outsourcing Institutions Privacy laws Rule of law Codes of conduct...|$|R
40|$|We {{introduce}} a lightweight, scalable and accurate framework for performing node selection based on network location. The framework, called Meridian, {{consists of an}} overlay network structured around multi-resolution rings, gossip protocols for ring maintenance, and query routing with direct measurements to satisfy user specified latency constraints. We show how this framework {{can be used to}} address three commonly encountered problems, namely, closest node discovery, central leader election, and locating nodes that satisfy target latency constraints in large-scale distributed systems without having to compute absolute coordinates. We also present the Meridian Query Language, a domain specific language for users to construct <b>custom</b> node <b>selection</b> queries based on their specific network location requirements. To facilitate adoption of Meridian, we have deployed a service called ClosestNode. com that provides a DNS to Meridian gateway for oblivious clients to initiate Meridian lookups. We show analytically that the framework is scalable with logarithmic convergence when Internet latencies are modeled as a growth-constrained metric, a low-dimensional Euclidean metric, or a metric of low doubling dimension. Large scale simulations, based on latency measurements from 6. 25 million node-pairs as well as an implementation deployed on PlanetLab show that the framework is accurate and effective...|$|R
40|$|Introduction. There {{has been}} a trend {{over the last few}} years of using {{specialties}} of regional cuisine as an independent tourist attraction. The creation of local brands is an important element in the promotion of a given region and it also influences the development of culinary tourism. The aim of the studies conducted was to identify regional dishes - a choice of dishes that could be described as 'brand dishes' and the use of those dishes as tourist attractions in Roztocze. Material and methods. Studies were conducted on a group of students studying tourism and recreation at State Higher School of Vocational Education (PWSZ) in Zamość using a questionnaire. Results. The questionnaire provided an assessment of the levels of knowledge of regional cuisine among Polish and Ukrainian students, identified the most characteristic dishes and selected brand products, and helped to arrive at a suitable method of promotion. Conclusions. Nationality, family <b>customs</b> and <b>selection</b> of local restaurants highly influence knowledge of regional cuisine. Interviewees decided that the most outstanding products from Roztocze were Zwierzyniec beer, and Biłgoraj pie. Regional products should be used as a tourist attraction in Roztocze...|$|R
40|$|We {{describe}} TissueInfo, a knowledge-based {{method for}} the high-throughput identification of tissue expression profiles and tissue specificity. TissueInfo defines {{a set of}} tissue information calculations that can be computed for large numbers of genes, expressed sequence tags (ESTs) or proteins. Tissue information records that result from the TissueInfo calculations are used to generate tables suitable for data mining and for the selection of genes according to a given expression profile or specificity. When benchmarked against a test set of 116 proteins and literature information, TissueInfo {{was found to be}} accurate for 69 % of identified tissue specificities and for 80 % of expression profiles. The accuracy of the identifications can be increased if query sequences for which little information is available from dbEST are ignored. Thus, with 80 % coverage, TissueInfo achieves an accuracy of 76 % for specificity and 89 % for expression. For the same set of proteins, the curated tissue specificity offered in SWISS-PROT was accurate in 78 % of cases. TissueInfo can be useful for the selection of clones for <b>custom</b> microarrays, <b>selection</b> of training sets for ab initio identification of tissue information, gene discovery and genome-wide predictions. Further information about the program can be found at [URL]...|$|R
40|$|E#ciency and {{flexibility}} are critical, but often conflicting, design goals in embedded system design. The recent emergence of extensible processors promises a favorable tradeo# between e#- ciency {{and flexibility}}, while keeping design turnaround times short. Current extensible processor design flows automate several tedious tasks, but typically require designers to manually select {{the parts of}} the program that are to be implemented as custom instructions. In this work, we describe an automatic methodology to select custom instructions to augment an extensible processor, in order to maximize its e#ciency for a given application program. We demonstrate that the number of custom instruction candidates grows rapidly with program size, leading to a large design space, and that the quality (speedup) of custom instructions varies significantly across this space, motivating the need for the proposed flow. Our methodology features cost functions to guide the <b>custom</b> instruction <b>selection</b> process, as well as static and dynamic pruning techniques to eliminate inferior parts of the design space from consideration. Further, we employ a two-stage process, wherein a limited number of promising instruction candidates are first selected, and then evaluated in more detail through cycle-accurate instruction set simulation and synthesis of the corresponding hardware, to identify the custom instruction combinations that result in the highest program speedup or maximize speedup under a given area constraint...|$|R
40|$|As {{a result}} of {{technological}} advances, romantic dating is increasingly becoming a commodity, where the promise of true love and marriage is bought and sold through online dating websites. This commodification allows single American adults {{to rely on a}} screening process in order to ensure the best investment is made. For my thesis, I analyze literature on risk and technology, dating and marriage <b>selection</b> <b>customs</b> over the last five centuries in addition to the popularity of online dating websites in order to answer the following questions: How do single American adults rely on online communication to make offline connections? Additionally, how do they mediate emerging risks associated with information technologies? I utilize theoretical perspectives of risk to examine the role of modernization, particularly information technology, to changes in dating practices over time. My analysis of online dating focuses on the key themes of initiation, marketability, intimacy, and accessibility...|$|R
40|$|The Lancaster County Old Order Amish are inbred. Are they {{consciously}} {{choosing to}} marry their first cousins, uncles, or nieces? Has the inbreeding had any negative consequences on their lives? If so, have they ever considered making {{a conscious effort}} to reduce it? The <b>customs</b> surrounding mate <b>selection</b> encourages marrying for love. If the one they fall in love with {{turns out to be a}} fourth, third or even second cousin, the general cultural attitude seems to be that God has overseen what's happened, and that God's will should not be disputed or disregarded simply for the purposes of avoiding a consanguineous marriage. However, the major consequence of the inbreeding that has taken place in all of the Old Order sects in Lancaster County has been an increased incidence of a number of genetic disorders, due to the high density of certain deleterious mutations. Methodology includes a literature review...|$|R
40|$|What is YARDstick? … a {{building}} block for ASIP development, integrating application analysis, <b>custom</b> instruction generation, <b>selection</b> and synthesis with user-defined (compiler) IRs •YARDstick provides a compiler- and simulator-agnostic infrastructure •Separates design space exploration from compiler/simulator idiosyncrasies •Different compilers/simulators can be plugged-in •Both high- (ANSI C) and low-level (assembly for a machine/VM) input {{can be analyzed}} YARDstick What {{is the need for}} YARDstick? •ASIP development flows for contemporary embedded SoCs involve –Architecture specification, design space exploration, profiling –Exploitation of results: custom instruction (-set extension) generation and synthesis –Toolchain generation/retargeting •Certain practical issues in ASIP development are often neglected –Assumptions of the IR do affect the solution quality –The exploration infrastructure tied up to the conventions of certain SW development tools –Support for low-level entry is some times desirable (reverse engineering, legacy code porting) YARDstick has been designed with these issues in mind 1) The YARDstick context C/C++/? compiler simulator assembly SALTO transforms ISeq Application profil...|$|R
40|$|Efficiency and {{flexibility}} are critical, but often conflicting, design goals in embedded system design. The recent emergence of extensible processors promises a favorable tradeoff between efficiency {{and flexibility}}, while keeping design turnaround times short. Current extensible processor design flows automate several tedious tasks, but typically require designers to manually select {{the parts of}} the program that are to be implemented as custom instructions. In this work, we describe an automatic methodology to select custom instructions to augment an extensible processor, in order to maximize its efficiency for a given application program. We demonstrate that the number of custom instruction candidates grows rapidly with program size, leading to a large design space, and that the quality (speedup) of custom instructions varies significantly across this space, motivating the need for the proposed flow. Our methodology features cost functions to guide the <b>custom</b> instruction <b>selection</b> process, as well as static and dynamic pruning techniques to eliminate inferior parts of the design space from consideration. Furthermore, we employ a two-stage process, wherein a limited number of promising instruction candidates are first short-listed using efficient selection criteria, and then evaluated in more detail through cycle-accurate instruction set simulation and synthesis of the corresponding hardware, to identify the custom instruction combinations that result in the highest program speedup or maximize speedup under a given area constraint. We have evaluated the proposed techniques using a state-of-the-art extensible processor platform, {{in the context of a}} commercial design flow. Experiments with several benchmark programs indicate that custom processors synthesized using automa [...] ...|$|R
40|$|The AutoSched TM finite {{capacity}} {{planning and}} scheduling tool helps you increase throughput, reduce in-process inventory, and increase equipment and personnel utilization. AutoSched efficiently schedules {{all of the}} constraints in your factory, such as shift schedules, work setup rules, batching, preventative maintenance, machine efficiency, and operator skill classes. With AutoSched, you can identify your bottleneck resources and apply intelligent operating rules to improve performance. One manufacturer reduced its average cycle time from 25 to 5 days, and reduced inprocess inventory to one-fifth previous levels using AutoSched. Scheduling with AutoSched allows you to set accurate commit dates, based on the current mix of work, available resources, and existing commit dates. AutoSched uses the AutoMod TM simulation system, AutoSimulations' proprietary simulation technology. AutoMod provides the discrete event simulation engine, 3 -D graphics, and material handling constructs that are the foundation for AutoSched. Built-in task selection rules in AutoSched allow you to model how machines and personnel select tasks to increase factory performance. You can also easily customize AutoSched with an engineering-oriented, English-like language that provides the flexibility to create <b>custom</b> task <b>selection</b> rules. In addition to scheduling, the AutoSched planning tool {{can be used for}} capacity analysis. Simulation technology makes it possible for you to quickly and easily consider what if questions such as, "What new equipment do we need to buy for producing the new product?" Simply add the new equipment to the model, rerun it, and review the results. Effects of capital acquisitions, process changes, and changing product mixes can be evaluated prior to implementation. ...|$|R
