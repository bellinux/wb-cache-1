0|10000|Public
40|$|This paper aims to {{construct}} a common set <b>of</b> <b>functional</b> <b>requirements</b> for metadata systems based on the research of metadata system specifications at the National Digital Archives Program (NDAP) in Taiwan. Eight projects of the NDAP are chosen {{as a case study}} to examine the <b>functional</b> <b>requirements</b> <b>of</b> metadata systems across museums, libraries, archives, and herbaria communities. To enable deeper analysis <b>of</b> <b>functional</b> <b>requirements,</b> interviewing and system prototyping are also employed. The study concludes with four findings for metadata system functions and proposes two recommendations, including (1) a set of recommendations for content experts, metadata professionals, and system designers to develop a clear and appropriate metadata system; and (2) the spectrum <b>of</b> <b>functional</b> <b>requirements</b> for metadata system design and testing...|$|R
40|$|Most of the {{individual}} requirements cannot be treated in isolation. Requirements may affect each other in various ways. The dependency between requirements impacts a number of software development aspects and activities. How to classify and specify requirements dependency remains a classic research topic. This research aims at providing an approach <b>of</b> specifying <b>functional</b> <b>requirements</b> dependency. In this thesis we generalize a classification <b>of</b> <b>functional</b> <b>requirements</b> dependency. We also propose a process meta-model to specify the semantic information <b>of</b> <b>functional</b> <b>requirements</b> dependency and deploy it on a wiki platform named Semantic REWiki. Taken advantage of this system, we can specify the <b>functional</b> <b>requirements</b> dependency semantically to support requirements validation and provide an effective method to represent the <b>functional</b> flow <b>of</b> the software system. Asiasanat:Requirements, <b>Requirements</b> Dependency, <b>Functional</b> <b>Requirements</b> Dependency, Semantic Information, Semantic Media Wik...|$|R
40|$|Boost metaprogram {{library is}} one of the most {{important}} foundation for C++ template metaprogramming. The library implements commonly used compilation-time algorithms and meta-datastructures in an ex-tendible and reusable way. Despite the well-known <b>commonality</b> <b>of</b> <b>functional</b> programming paradigm, boost mpl lacks a few important features to directly support functional style. In this paper we propose some new library elements to boost mpl for more explicit support <b>of</b> <b>functional</b> programming...|$|R
40|$|After briefly {{describing}} how {{the emergence of}} electronic records has brought changes to records management, {{we focus on the}} design and implementation of electronic records management systems, and specifically on the establishment <b>of</b> <b>functional</b> <b>requirements.</b> A number <b>of</b> <b>functional</b> <b>requirements</b> lists are then analysed, with particular attention given to the European MoReq specification. To conclude there is a listing of broad areas in which this type of requirement is being established, as well as a table comparing each one of these lists with MoReq...|$|R
40|$|As it {{is clear}} that the full {{packaging}} life cycle – at least partially – coincides with the product life cycle, both cycles are interwoven. Each has a network <b>of</b> <b>functional</b> <b>requirements,</b> with specific hierarchic propensities. These networks overlap, with prevailing hierarchies playing important roles in combined product/packaging development cycles. This publication describes the role <b>of</b> <b>functional</b> <b>requirements</b> in the complex context of product/packaging life cycles and shows ways to adequately uncover <b>functional</b> <b>requirement</b> specifications besides, or even instead of, technical specifications. A working method is presented, guiding product/packaging development cycles based on structured functional hierarchies. The applicability of the method is shown in a case study...|$|R
50|$|As {{defined in}} <b>requirements</b> engineering, <b>functional</b> <b>requirements</b> specify {{particular}} {{results of a}} system. This should be contrasted with non-functional requirements which specify overall characteristics such as cost and reliability. <b>Functional</b> <b>requirements</b> drive the application architecture of a system, while non-functional requirements drive the technical architecture of a system. In some cases a requirements analyst generates use cases after gathering and validating a set <b>of</b> <b>functional</b> <b>requirements.</b> The hierarchy <b>of</b> <b>functional</b> <b>requirements</b> is: user/stakeholder request → feature → use case → business rule. Each use case illustrates behavioral scenarios through one or more <b>functional</b> <b>requirements.</b> Often, though, an analyst will begin by eliciting a set of use cases, from which the analyst can derive the <b>functional</b> <b>requirements</b> that must be implemented to allow a user to perform each use case.|$|R
40|$|Despite the {{advances}} in software engineering since 1968, current methods for going from a set <b>of</b> <b>functional</b> <b>requirements</b> to a design {{are not as}} direct, repeatable and constructive as we would like. Progress with this fundamental problem is possible once we recognize that individual <b>functional</b> <b>requirements</b> represent fragments <b>of</b> behaviour, while a design that satisfies a set <b>of</b> <b>functional</b> <b>requirements</b> represents integrated behaviour. This perspective admits the prospect of constructing a design out of its requirements. A formal representation for individual <b>functional</b> <b>requirements,</b> called behavior trees makes this possible. Behaviour trees <b>of</b> individual <b>functional</b> <b>requirements</b> may be composed, one at a time, to create an integrated design behaviour tree. From this problem domain representation it is then possible to transition directly and systematically to a solution domain representation of the component architecture {{of the system and}} the behaviour designs of the individual components that make up the system - both are emergent properties. Full Tex...|$|R
40|$|The thesis {{focuses on}} the {{creation}} <b>of</b> <b>functional</b> <b>requirements</b> for an information system based on process analysis of an organization. In the theoretical part introduces the reader to the basic concepts related to business processes, their modeling and relationship with the company information system. Then, two approaches to analysing {{the functioning of the}} organization are presented, namely the approach of consultancy company Logio and the MMABP methodology. The practical part describes a real project of process analysis and creation <b>of</b> <b>functional</b> <b>requirements</b> for IS <b>of</b> a trading company. The MMABP approach is then applied to the same company. In conclusion, suitability of both approaches is evaluated and observed differences between them are identified...|$|R
40|$|The {{evolution}} of mod & forest resource management {{is focusing on}} ecologically-sensitive forest operations. This shift in management strategies is producing a new set <b>of</b> <b>functional</b> <b>requirements</b> for forest operations. Systems to implement ecosystem management prescriptionsmay need to be economically viable over {{a wider range of}} piece sizes, for example. Increasing demands for more efficient fiber utilization and recovery from forest operations also put pressure on merchandizing the resource for maximum value recovery. Conventional forest operations are often not well-suited to meet these constraints. This paper reviews the development <b>of</b> <b>functional</b> <b>requirements</b> for forest operations in ecosystem management and summarizes regional investigations in the northeast, south, and Pacific Northwest...|$|R
40|$|The {{definition}} <b>of</b> <b>functional</b> <b>requirements</b> is one <b>of</b> {{the most}} critical and difficult steps in the Axiomatic Design process. This paper presents five classes of procedural errors made by both novice and expert designers during the definition <b>of</b> <b>functional</b> <b>requirements</b> in Axiomatic Design Theory. Each category is described in detail, the linguistic markers for the errors are identified, examples from the literature are provided, and strategies for avoiding these errors are suggested. The implications of these errors for design practitioners, educators, and researchers are considered. The paper ends with {{a discussion about the}} nature of requirements and future requirements research topics in Axiomatic Design Theory...|$|R
50|$|A product {{wish list}} {{is similar to}} a list <b>of</b> <b>functional</b> <b>requirements.</b> The {{difference}} is mainly the importance of the requested functionality. Items that might be on the wish list at one time may be expected to be requirements later.|$|R
50|$|At {{the core}} of GENIVI {{deliverables}} is a software architecture consisting <b>of</b> <b>functional</b> <b>requirements</b> and the software components that implement them. The Architecture is best described in the GENIVI Platform Compliance Specification, a members-only document that is updated twice a year.|$|R
50|$|Continuous testing {{includes}} the validation <b>of</b> both <b>functional</b> <b>requirements</b> and non-functional requirements.|$|R
40|$|Modeling is a {{fundamental}} activity within the requirements engineering process and concerns the construction of abstract descriptions of requirements that are amenable to interpretation and validation. The choice of a modeling technique is critical whenever {{it is necessary to}} discuss the interpretation and validation of requirements. This is particularly true in the case <b>of</b> <b>functional</b> <b>requirements</b> and stakeholders with divergent goals and different backgrounds and experience. This paper presents the results of a family of experiments conducted with students and professionals to investigate whether the comprehension <b>of</b> <b>functional</b> <b>requirements</b> is influenced by the use of dynamic models that are represented by means of the UML sequence diagrams. The family contains five experiments performed in different locations and with 112 participants of different abilities and levels of experience with the UML. The results show that sequence diagrams improve the comprehension <b>of</b> the modeled <b>functional</b> <b>requirements</b> in the case of high ability and more experienced participants...|$|R
5000|$|The DEXPI project: The {{objective}} of DEXPI {{is to develop}} and promote a general standard for the process industry covering all phases of the lifecycle of a (petro-)chemical plant, ranging from specification <b>of</b> <b>functional</b> <b>requirements</b> to assets in operation. See more at dexpi.org ...|$|R
5000|$|Axiom 1: The Independence Axiom. Maintain the {{independence}} <b>of</b> the <b>functional</b> <b>requirements</b> (FRs).|$|R
30|$|Usually the {{non-functional}} requirements can be reused {{independently of the}} domain, i.e., they appear {{in the same way}} in different projects. On the contrary, the reuse <b>of</b> <b>functional</b> <b>requirements,</b> in most cases, is only possible for a given software domain (Palomares et al. 2013).|$|R
40|$|Timber Volume Element {{prefabrication}} (TVE) is an industrialised production system, where {{wall and}} floor elements are assembled in factories to volumes before {{being delivered to}} the construction site. TVE manufactures buildings to a low production cost without any consideration of methods regarding life-cycle concern. An interview study, with potential clients of TVE, shows {{that there is an}} uncertainty about fulfilment <b>of</b> <b>functional</b> <b>requirements,</b> resulting shows that there is an uncertainty about fulfilment <b>of</b> <b>functional</b> <b>requirements,</b> resulting in a perception of inferior sustainability of the finished building. During design, decisions are taken concerning choice of material, components and installations that affect the durability as well as operating and maintenance costs during the service life of a building. Godkänd; 2007; 20070316 (ysko...|$|R
5000|$|Bemelmans further {{states that}} one a {{comprehensive}} set <b>of</b> <b>functional</b> <b>requirements</b> {{can not think}} that applies to all types of organizations. One can indeed some [...] "body system" [...] as standard agree, then each individual organization based on that trunk system can develop its own information system.|$|R
40|$|Abstract. Non-functional {{requirements}} are commonly called the qualitative {{aspects of a}} system [...] testability, mobility, and scalability, to name a few. However, when taking a holistic view of a system, non-functional requirements take on a quantitative nature. This paper will describe the Requirements Hierarchy Approach (RHA), a quantifiable method to measure and manipulate the effect non-functional requirements have on a system by capturing the utility <b>of</b> <b>functional</b> <b>requirements.</b> Through the use of agent-oriented programming, multiattribute utility analysis (MAUA), and decision science theory, non-functional attributes (of a system) {{can be used as}} containers in an attempt to capture the broadest cross-section <b>of</b> <b>functional</b> <b>requirements,</b> based on stakeholder input. The final result will be an optimal set of requirements that satisfy the stakeholder’s needs and are not in opposition to one another...|$|R
40|$|This {{document}} {{presents a}} number of user scenarios and use cases developed to support the wider community’s use of palaeoclimate simulation and historical data, including the arts and humanities and the sciences. The use cases presented are used as a source <b>of</b> <b>functional</b> <b>requirements</b> for PEG‐BOARD metadata and API developments...|$|R
50|$|Positive {{train control}} (PTC) {{is a system}} <b>of</b> <b>functional</b> <b>requirements</b> for {{monitoring}} and controlling train movements and {{is a type of}} train protection systems. The term stems from Control Engineering. The train is only allowed to move in case of positive movement allowance. It generally improves the safety of railway traffic.|$|R
50|$|Traceability tags (see Section 1.2 of {{behavior}} tree notation) in behavior tree nodes link the formal representation to the corresponding natural language requirement. Behavior trees accurately capture behavior {{expressed in the}} natural language representation <b>of</b> <b>functional</b> <b>requirements.</b> Requirements behavior trees strictly use the vocabulary of the natural language requirements but employ graphical forms for behavior composition in order to eliminate risk of ambiguity. By doing this they provide a direct and clearly traceable relationship between what is expressed in the natural language representation and its formal specification.|$|R
40|$|The {{contribution}} presents methodology <b>of</b> <b>functional</b> <b>requirements</b> specification <b>of</b> {{the system}} ERTMS/ETCS. This methodology {{is based on}} Use Cases of Unified Modelling Language. In the first part there is a brief introduction to Use Cases - their description, aim and structure. Next there is a description of particular parts of Use Cases, their aim, qualities and their mutual relationships with respecting solved problem. The following part is dedicated to relationships between particular Use Cases and their hierarchical arrangement. There are also mentioned the relationships to the following steps <b>of</b> the <b>functional</b> <b>requirements</b> specification and to verification and validation activities in the contribution. Also Use Cases management problem is presented...|$|R
5000|$|<b>Functional</b> <b>Requirement</b> Specification (FRS): the {{definition}} <b>of</b> higher lever <b>functional</b> <b>requirements</b> ...|$|R
5000|$|Construction {{incrementally}} fills-in {{the architecture}} with production-ready code produced from analysis, design, implementation, and testing <b>of</b> the <b>functional</b> <b>requirements.</b>|$|R
50|$|Novice misunderstandings. Each step of a well-written {{use case}} should present actor goals or {{intentions}} (the essence <b>of</b> <b>functional</b> <b>requirements),</b> and normally {{it should not}} contain any user interface details, e.g. naming of labels and buttons, UI operations etc., which is a bad practice and will unnecessarily complicate the use case writing and limit its implementation.|$|R
40|$|Abstract. Use {{cases are}} a popular way <b>of</b> specifying <b>functional</b> <b>requirements</b> <b>of</b> {{computer-based}} systems. Each use case contains {{a sequence of}} steps which are described with a natural language. Use cases, as any other description <b>of</b> <b>functional</b> <b>requirements,</b> must go through a review process to check their quality. The problem is that such reviews are time consuming. Moreover, effectiveness of a review depends on quality of the submitted document- if a document contains many easy-to-detect defects, then reviewers tend to find those simple defects and they feel exempted from working hard to detect difficult defects. To solve the problem it is proposed to augment a requirements management tool with a detector that would find easy-to-detect defects automatically. ...|$|R
5000|$|They {{build the}} {{behavior}} of a system out <b>of</b> its <b>functional</b> <b>requirements</b> in a directly traceable way which aids verification and validation.|$|R
40|$|Over {{the last}} few years, the {{software}} engineering community has proposed a number of modeling meth- ods to represent <b>functional</b> <b>requirements.</b> Among them, use cases are recognized as an {{easy to use and}} intuitive way to capture and define <b>functional</b> <b>requirements.</b> To improve the comprehension <b>of</b> <b>functional</b> <b>requirements,</b> screen mockups (also called user-interface sketches or user interface-mockups) can be used in conjunction with use cases. In this paper, we aim at quantifying the benefits achievable by augmenting use cases with screen mockups in the comprehension <b>of</b> <b>functional</b> <b>requirements</b> with respect to effectiveness, effort, and efficiency. For this purpose, we conducted a family of four controlled experiments, involving 139 participants having different profiles. The experiments involved comprehension tasks performed on the re- quirements documents of two desktop applications. Independently from the participants’ profile, we found a statistically significant large effect of the presence of screen mockups on both comprehension effectiveness and comprehension task efficiency. While no significant effect was observed on the effort to complete tasks. The main “take away” lesson is that screen mockups are able to almost double the efficiency of comprehen- sion tasks...|$|R
40|$|During {{the last}} couple of decades, the term {{complexity}} has been commonly found in use in many fields of science, sometimes as a measurable quantity with a rigorous but narrow definition and other times as merely an ad hoc label. With an emphasis on pragmatic engineering applications, this thesis investigates the complexity concept defined in axiomatic design theory to avoid vague use of the term 'complexity' in engineering system design, to provide deeper insight into possible causes of complexity, and to develop a systematic approach to complexity reduction. The complexity concept in axiomatic design theory is defined as a measure of uncertainty in achieving a desired set <b>of</b> <b>functional</b> <b>requirements.</b> In this thesis, it is revisited to refine its definition. Four different types of complexity are identified in axiomatic design complexity theory: time-independent real complexity, time-independent imaginary complexity, time-dependent combinatorial complexity and time-dependent periodic complexity. Time-independent real complexity is equivalent to the information content, which is a measure of a probability <b>of</b> achieving <b>functional</b> <b>requirements.</b> Time-independent imaginary complexity is defined as the uncertainty due to ignorance of the interactions between <b>functional</b> <b>requirements</b> and design parameters. Time-dependent complexity consists of combinatorial complexity and periodic complexity, depending on whether the uncertainty increases indefinitely or occasionally stops increasing at certain point and returns to the initial level of uncertainty. In this thesis, existing definitions for each of the types of complexity are further elaborated with a focus on time-dependent complexity. In particular, time-dependent complexity is clearly defined using the concepts of time-varying system ranges and time-dependent sets <b>of</b> <b>functional</b> <b>requirements.</b> (cont.) Clear definition of the complexity concept that properly addresses the causes of complexity leads to a systematic approach for complexity reduction. As techniques for reducing time-independent complexity are known within and beyond axiomatic design theory, this thesis focuses on dealing with time-dependent complexity. From the definition of time-dependent complexity, combinatorial complexity must be transformed into periodic complexity to prevent the uncertainty from growing unboundedly. Time-dependence of complexity is attributed to two factors. One is a time-varying system range and the other is a time-dependent set <b>of</b> <b>functional</b> <b>requirements.</b> This thesis shows that achieving periodicity in time-varying system ranges and maintaining <b>functional</b> periodicity <b>of</b> time-dependent sets <b>of</b> <b>functional</b> <b>requirements</b> prevent a system from developing time-dependent combinatorial complexity. Following this argument, a re-initialization concept as a means to achieve and maintain periodicity is presented. Three examples are drawn from different fields, tribology, manufacturing system, and the cell biology, to support the periodicity argument and illustrate the re-initialization concept. by Taesik Lee. Thesis (Ph. D.) [...] Massachusetts Institute of Technology, Dept. of Mechanical Engineering, 2003. Includes bibliographical references (p. 177 - 182) ...|$|R
40|$|The design {{activity}} is the transformation <b>of</b> <b>functional</b> <b>requirements</b> into design parameters. This article presents a structuring method {{for the design}} problem exploiting existent and mastered knowledge. The proposed energy analysis leads to the structural definition of the product and {{the definition of a}} basis of functions and components. This approach allows efficient implementation of optimization models in preliminary design...|$|R
3000|$|In Eq. (1), [...] _t_j= 1 {F(T_j)} is {{the union}} <b>of</b> branches/ <b>functional</b> <b>requirement</b> subsets {{covered by the}} {{selected}} test cases (i.e., T [...]...|$|R
50|$|Depending on the product, {{type and}} {{complexity}} of the existing SRP, the relative importance <b>of</b> the <b>functional</b> <b>requirements</b> stated above may be different. Often, not all <b>functional</b> <b>requirements</b> can be realized equally by a SRP.|$|R
40|$|The {{purpose of}} this paper is to examine the {{characteristics}} and nature <b>of</b> <b>functional</b> <b>requirements</b> for electronic records management systems (ERMS). It attempts to highlight several electronic records management systems <b>functional</b> <b>requirement</b> models developed aiming at facilitating an efficient and effective electronic records management. The study employed literature reviews to gather information on <b>functional</b> <b>requirements</b> <b>of</b> the leading advocates on electronic records management. It provides a critical analysis of several electronic records management systems <b>functional</b> <b>requirement</b> models such as the Trust Model; Business-Driven Recordkeeping Model; and the ICA Model <b>of</b> High level <b>Functional</b> <b>Requirements</b> for ERMS. The findings illustrate that ERMS <b>functional</b> <b>requirements</b> are important to protect the reliability, accuracy, authenticity and the trustworthiness of electronic records as evidence, thus establishing the trusted electronic records management systems. The insights in this paper will be useful to stakeholders and key players in electronic records management such as archivists, records managers, administrators and IT personnel...|$|R
40|$|Poor {{requirement}} specification {{is a source}} of many defects in software application development. To address this problem, we propose a requirement-driven method — MasterCraft Agile Process (MAP). The proposed method separates the problem domain and solution domain clearly and identifies four distinct contexts for capturing, analyzing, modelling and prototyping requirements. It is {{for the first time that}} types of requirements have been explored as the basic distinguishing criteria for defining viewpoints. In this paper, we focus on analysis <b>of</b> <b>functional</b> <b>requirement</b> models to detect inconsistencies. We show how modelchecking, simulation and prototyping <b>of</b> <b>functional</b> <b>requirements</b> can help consolidate requirements at an early stage of software development. Once validated, the requirement models can be used to synthesise an implementation using standard design patterns. Some of the proposed techniques are implemented in a casetool — MasterCraft. The separation <b>of</b> <b>functional</b> and technical concerns prescribed in our approach and supported in our tool-set empowers the application developer to adapt efficiently to changing requirements and thus renders agility to application development. 1...|$|R
