24|13|Public
50|$|SafeLogic is an {{information}} security software company that offers encryption software and services. The company {{is based in}} Palo Alto, CA and known for FIPS 140-2 validation service and developing <b>cryptographic</b> <b>engine</b> products.|$|E
50|$|ACE (Advanced <b>Cryptographic</b> <b>Engine)</b> — the {{collection}} of units, implementing both a public key encryption scheme and a digital signature scheme. Corresponding names for these schemes — «ACE Encrypt» and «ACE Sign». Schemes are based on Cramer-Shoup public key encryption scheme and Cramer-Shoup signature scheme. Introduced variants of these schemes are intended to achieve a good balance between performance and security of the whole encryption system.|$|E
50|$|The KOV-21 is a {{cryptographic}} PC card module developed {{under the}} auspices of the U.S. National Security Agency and manufactured by Sypris Electronics LLC. It is intended to be the <b>cryptographic</b> <b>engine</b> for next generation key management devices, such as the AN/PYQ-10 key loader, as part of the U.S. Government’s Cryptographic Modernization Initiative. Sypris was awarded a contract for production of KOV-21 units in November, 2007.|$|E
5000|$|CryptoComply, {{a family}} of <b>cryptographic</b> <b>engines</b> {{designed}} for use in cloud, mobile, wearable, IoT, server, workstation, and appliance environments.|$|R
50|$|CuBox is a {{low-power}} ARM architecture CPU based computer, {{using the}} Marvell Armada 510 (88AP510) SoC with an ARM v6/v7-compliant superscalar processor core, Vivante GC600 OpenGL 3.0 and OpenGL ES 2.0 capable 2D/3D graphics processing unit, Marvell vMeta HD Video Decoder hardware engine, and TrustZone security extensions, <b>Cryptographic</b> <b>Engines</b> and Security Accelerator (CESA) co-processor.|$|R
40|$|In the {{implementation}} of Radio Frequency Identification (RFID) systems concerns have been raised regarding information security and violations of end-user privacy. There is a large collection of literature available on efficient and inexpensive <b>cryptographic</b> <b>engines,</b> {{but they are still}} extravagant solutions for low cost RFID systems. Security and privacy provided by low cost RFID is both directly and indirectly limited by a number of factors that are unique to low cost RFID. This paper examines security and privacy issues regarding RFID and presents the challenges that arise in view of the unique environment presented by low cost RFID systems. 1...|$|R
50|$|Cotton Candy is a {{low-power}} ARM architecture CPU based computer {{which uses}} dual-core processors {{such as the}} dual-core 1.2 GHz Exynos 4210 (45 nm ARM Cortex-A9 with 1MB L2 cache) SoC (System on a chip) by Samsung, featuring a quad-core 200 MHz ARM Mali-400 MP GPU OpenGL ES 2.0 capable 2D/3D graphics processing unit, an Audio and Video Decoder hardware engine, and TrustZone (Security Extensions) <b>Cryptographic</b> <b>Engine</b> and Security Accelerator (CESA) co-processor. The platform {{is said to be}} able to stream and decode H.264 1080p content, and be able to use desktop class interfaces such as KDE or GNOME under Linux.|$|E
40|$|This paper {{discusses}} {{the design and}} implementation of the Confidentiality and Integrity algorithms, which have been standardized by the 3 - rdGeneration Partnership Project. Both algorithms use {{a modified version of the}} MISTY scheme, named KASUMI, as a basic <b>cryptographic</b> <b>engine.</b> Various architectural approaches have been examined and implemented in different hardware platforms (FPGAs, ASICs) providing useful information regarding the require...|$|E
40|$|This {{document}} {{describes the}} Advanced <b>Cryptographic</b> <b>Engine</b> (ACE). It specifies a {{public key encryption}} scheme {{as well as a}} digital signature scheme with enough detail to ensure interoperability between different implementations. These schemes are almost as efficient as commercially used schemes, yet unlike such schemes, can be proven secure under reasonable and well-defined intractability assumptions. A concrete security analysis of both schemes is presented...|$|E
40|$|Abstract We {{define a}} new {{authentication}} {{tree in the}} symmetric key setting, which has the same computational time, storage and security parameters as the well known Merkle authentication tree, but which unlike the latter, allows for all the cryptographic operations required for an update to be performed in parallel. The cryptographic operations required for verification can also be parallelized. In particular, we show a provably secure scheme for incremental MAC with partial authentication secure against substitution and replay attacks, which on total data of size 2 n blocks, and given n <b>cryptographic</b> <b>engines,</b> can compute incremental macs and perform individual block authentication with a critical path of only one cryptographic operation 1...|$|R
40|$|Copyright © September 2005 In the {{implementation}} of Radio Frequency Identification (RFID) systems concerns have been raised regarding information security and violations of end-user privacy. There is a large collection of literature available on efficient and inexpensive <b>cryptographic</b> <b>engines,</b> {{but they are still}} extravagant solutions for low cost RFID systems. Security and privacy provided by low cost RFID is both directly and indirectly limited by a number of factors that are unique to low cost RFID. This paper examines security and privacy issues regarding RFID and presents the challenges that arise in view of the unique environment presented by low cost RFID systems. Damith C. Ranasinghe, Daniel W. Engels, Peter H. Col...|$|R
50|$|GCM {{has been}} criticized for example by Silicon Labs in the {{embedded}} world as the parallel processing is not suited to performant use of <b>cryptographic</b> hardware <b>engines</b> and therefore reduces the performance of encryption for some of the most performance sensitive devices.|$|R
40|$|This paper {{presents}} a SoPC (System-on-a-Programmable-Chip) embedded system featuring self-reconfigurable capability. It addresses {{the factors that}} limit the system performance when FPGAs are used to implement various encryption algorithms dynamically. The limiting factors are the data transfer rate between the host and the FPGA, and the reconfiguration latency. The results generated by the <b>cryptographic</b> <b>engine</b> reported in this paper show {{that in order to}} attain optimal performance, it is crucial to floor-plan the reconfigurable part of the FPGA. link_to_subscribed_fulltex...|$|E
40|$|Recently, Grid {{infrastructures}} {{have provided}} wide integrated use of resources. DotGrid intends to introduce required Grid services and toolkits that are implemented as a layer wrapped over the existing operating systems. Our DotGrid {{has been developed}} based on Microsoft. NET in Windows and MONO. NET in Linux and UNIX. Using DotGrid APIs, Grid middlewares and applications can be implemented easily. We evaluated our DotGrid capabilities by implementing some applications including a gridbased distributed <b>cryptographic</b> <b>engine</b> and also a typical computational problem. 1...|$|E
30|$|Trusted {{computing}} {{ensures that}} executable binaries are not tampered (David et al. 2008; Trusted Computing 2008). The foundation for trusted computing {{relies on a}} dedicated chip, which {{is defined as a}} Trusted Platform Module (TPM), to measure the integrity of executable binaries by verifying their hash values. To implement this measuring idea, the TPM is designed as a coprocessor that helps the platform software to verify itself using a predefined sequence as well as a <b>cryptographic</b> <b>engine</b> that accelerates encryption, digital signatures, and hashing.|$|E
40|$|Nowadays, {{there exists}} a {{manifold}} variety of cryptographic applications: from low level embedded crypto implementations up to high end <b>cryptographic</b> <b>engines</b> for servers. The latter require a exible implementation {{of a variety of}} cryptographic primitives in order to be capable of communicating with several clients. On the other hand, on the client it only requires an implementation of one speci c algorithm with xed parameters such as a xed eld size or xed curve parameters if using ECC/ HECC. In particular for embedded environments like PDAs or mobile communication devices, xing these parameters can be crucial regarding speed and power consumption. In this contribution, we propose a highly ecient algorithm for a hyperelliptic curve cryptosystem of genus two, well suited for these constraint devices...|$|R
40|$|The Trusted Platform Module (TPM) {{currently}} used by PCs is {{not suitable for}} embedded systems, {{it is necessary to}} improve existing TPM. The paper proposes a trusted computing architecture with new TPM and the cryptographic system developed by China for the embedded system. The improved TPM consists of the Embedded System Trusted Cryptography Module (eTCM) and the Embedded System Trusted Platform Control Module (eTPCM), which are combined and implemented the TPM’s autonomous control, active defense, high-speed encryption/decryption and other function through its internal bus arbitration module and symmetric and asymmetric <b>cryptographic</b> <b>engines</b> to effectively protect the security of embedded system. In our improved TPM, a trusted measurement method with chain model and star type model is used. Finally, the improved TPM is designed by FPGA, and it is used to a trusted PDA to carry out experimental verification. Experiments show that the trusted architecture of the embedded system based on the improved TPM is efficient, reliable and secure...|$|R
40|$|There {{exists a}} {{manifold}} variety of cryptographic applications: from low level embedded crypto implementations up to high end <b>cryptographic</b> <b>engines</b> for servers. The latter require a flexible {{implementation of a}} variety of cryptographic primitives in order to be capable of communicating with several clients. On the other hand, on the client it only requires an implementation of one specific algorithm with fixed parameters such as a fixed field size or fixed curve parameters if using ECC / HECC. In particular for embedded environments like PDAs or mobile communication devices, fixing these parameters can be crucial regarding speed and power consumption. In this chapter, we propose a highly efficient algorithm for a hyperelliptic curve cryptosystem of genus two, well suited for these constrained devices. This work presents a major improvement of HECC arithmetic for certain non-supersingular curves defined over fields of characteristic two. We optimized the group doubling operation and managed to speed up the whole cryptosystem by approximately 27 %. Furthermore, an actual implementation of the new formulae on an embedded processor shows its practical relevance...|$|R
40|$|This paper {{describes}} an embedded security coprocessor {{that consists of}} four components: an Advanced Encryption Standard (AES) based <b>cryptographic</b> <b>engine,</b> a fingerprint matching oracle, template storage, and an interface unit. Two functionally-identical coprocessors are fabricated using a TSMC 6 M 0. 18 -μm process. The first coprocessor uses standard cells and encrypts at 3. 84 Gb/s. The second coprocessor uses Wave Dynamic Differential Logic (WDDL) combined with differential routing to combat side-channel information leakage through power analysis attacks. It encrypts at 0. 99 Gb/s. The coprocessor {{is part of a}} security-partitioned embedded system called ThumbPod...|$|E
40|$|In {{this paper}} a {{hardware}} {{implementation of a}} dual operation <b>cryptographic</b> <b>engine</b> PANAMA is presented. The implementation of PANAMA algorithm can be used both as a hash function and a stream cipher. A basic characteristic of PANAMA is {{a high degree of}} parallelism which has as result high rates for the overall system throughput. An other profit of the PANAMA is that one only architecture supports two cryptographic operations – encryption/ decryption and data hashing. The proposed system operates in 96. 5 MHz frequency with maximum data rate 24. 7 Gbps. The proposed system outperforms previous any hash functions and stream ciphers implementations in terms of performance. Additional techniques can increase the achieved throughput about 90 %. 1...|$|E
40|$|This paper {{introduces}} a <b>cryptographic</b> <b>engine,</b> Janus, that assists clients in establishing and maintaining secure and pseudonymous relationships with multiple servers. The setting {{is such that}} clients reside on a particular subnet (e. g., corporate intranet, ISP) and the servers reside anywhere on the Internet. The Janus engine allows for each client-server relationship to use either weak or strong authentication on each interaction. At the same time, each interaction preserves privacy by neither revealing a client's true identity (&quot; the subnet) nor the set of servers a particular client interacts with. Furthermore, clients do not need any secure long-term memory, enabling scalability and mobility. The interaction model extends to allow servers to send data back toclients via e-mail at a later date. Hence, our results complement the functionality of current network anonymity tools and remailers. ...|$|E
40|$|Embedded {{processors}} {{have been}} increasingly exploiting hardware parallelism. Vector units, multiple processors or cores, hyper-threading, special-purpose accelerators such as DSPs or <b>cryptographic</b> <b>engines,</b> {{or a combination}} of the above have appeared in a number of processors. They serve to address the increasing performance requirements of modern embedded applications. How this hardware parallelism can be exploited by applications {{is directly related to the}} amount of parallelism inherent in a target application. In this paper we evaluate the performance potential of different types of parallelism, viz., true thread-level parallelism, speculative threadlevel parallelism and vector parallelism, when executing loops. Applications from the industry-standard EEMBC 1. 1, EEMBC 2. 0 and the MiBench embedded benchmark suites are analyzed using the Intel C compiler. The results show what can be achieved today, provide upper bounds on the performance potential of different types of thread parallelism, and point out a number of issues that need to be addressed to improve performance. The latter include parallelization of libraries such as libc and design of parallel algorithms to allow maximal exploitation of parallelism. The results also point to the need for developing new benchmark suites more suitable to parallel compilation and execution...|$|R
40|$|Latest {{nanometer}} CMOS technology nodes {{have highlighted}} new issues in security of cryptographic hardware implementations. The constant {{growth of the}} static power consumption {{has led to a}} new class of side-channel attacks. Common attacks exploiting static power use an univariate approach to recover information from <b>cryptographic</b> <b>engines.</b> In our work, a multivariate approach based on information theoretic security metrics is presented. The temperature-dependence helps to exploit more information leakage from the hardware implementation. Starting from a univariate analysis, mutual information reveals that increasing the working temperature, the information leaked through the static power side channel is increased as well. In this work a multivariate analysis exploiting static power consumption is presented in which the temperature-domain is used to extract more information. The use of information theoretic approach allows to precisely quantify the amount of information that can be leaked from a cryptographic hardware implementation. The perceived information shows taking advantage of the use of more than one temperature, the security level can be decreased. The improvement achieved using the presented approach is demonstrated on a 40 nm CMOS implementation of the Present 80 crypto core...|$|R
40|$|This thesis {{describes}} the system {{design and implementation}} of the secure Ephemerizer System that was first introduced by Radia Perlman in 2005. The system is designed to enable users to keep data for a finite period of time before making the data unrecoverable by destroying the keys with which the data was encrypted. The task of the Ephemerizer System service is to create, advertise, and destroy keys required for the Ephemerizer System's functionalities. We designed the Ephemerizer System Service's security by placing the sensitive key management modules into a Trusted Computing Base (TCB). Our compartmentalized approach distributes security requirements at different sensitivity levels into different protection domains. In our approach, we implement the trusted protection domain (our TCB) on a tamper-resistant Javacard. We placed the key storage database into the partly trusted protection domain to improve scalability and availability of the Ephemerizer System. The partly trusted protection domain requires memory isolation and other security mechanisms provided by the underlying operating system. We implemented several mechanisms on the TCB, such as the signature <b>engine,</b> <b>cryptographic</b> modules, the on-card expiration validator, and on-card time verification. We make the Ephemerizer System available to users as a web service and expose it though a uniform API. This approach enables the seamless integration of the Ephemerizer System into business processes on heterogeneous platforms...|$|R
40|$|Security becomes {{increasingly}} important for many applications, such as video surveillance, confidential transmission military and medical applications. Data hiding {{has been used}} for several years to transmit data without being intercepted by unwanted viewers. The core of the system is two widely used cryptographic algorithm core: Secure Hash Algorithm SHA- 256 and Advanced Encryption Standard AES- 128. The system design is with hardware’s effectiveness in mind. This <b>cryptographic</b> <b>engine</b> was used {{as an integral part of}} security data storage system. Cryptography algorithm is implemented on Software using computer. It has been observed that the performance of the software is not up to the mark. Moreover Security flaws were identified in Secure Hash Algorithm SHA– 1, namely that a mathematical weakness exist, that indicating a stronger hash function would be desirable. So SHA- 256 is used to overcome this...|$|E
40|$|Security ICs are {{vulnerable}} to side-channel attacks (SCAs) that find the secret key by monitoring the power consumption or other information that is leaked by the switching behavior of digital CMOS gates. This paper describes a side-channel attack resistant coprocessor IC fabricated in 0. 18 -mu m CMOS consisting of an Advanced Encryption Standard (AES) based <b>cryptographic</b> <b>engine,</b> a fingerprint-matching engine, template storage, and an interface unit. Two functionally identical coprocessors have been fabricated on the same die. The first coprocessor was implemented using standard cells and regular routing techniques. The second coprocessor was implemented using a logic style called wave dynamic differential logic (WDDL) and a layout technique called differential routing to combat the differential power analysis (DPA) side-channel attack. Measurement-based experimental results show that a DPA attack on the insecure coprocessor requires only 8000 encryptions to disclose the entire 128 -bit secret key. The same attack on the secure coprocessor does not disclose the entire secret key even after 1500 000 encryptions. status: publishe...|$|E
40|$|Abstract—Security ICs are {{vulnerable}} to side-channel attacks (SCAs) that find the secret key by monitoring the power consumption or other information that is leaked by the switching behavior of digital CMOS gates. This paper describes a side-channel attack resistant coprocessor IC fabricated in 0. 18 - m CMOS consisting of an Advanced Encryption Standard (AES) based <b>cryptographic</b> <b>engine,</b> a fingerprint-matching engine, template storage, and an interface unit. Two functionally identical coprocessors have been fabricated on the same die. The first coprocessor was implemented using standard cells and regular routing techniques. The second coprocessor was implemented using a logic style called wave dynamic differential logic (WDDL) and a layout technique called differential routing to combat the differential power analysis (DPA) side-channel attack. Measurement-based experimental results show that a DPA attack on the insecure coprocessor requires only 8000 encryptions to disclose the entire 128 -bit secret key. The same attack on the secure coprocessor does not disclose the entire secret key even after 1 500 000 encryptions. Index Terms—Advanced Encryption Standard (AES), biometrics, cryptography, differential power analysis, security, side-channel attacks. I...|$|E
40|$|The area of this {{research}} is security in distributed environment such as cloud computing and network applications. Specific focus was design and implementation of high assurance network environment, comprising various secure and security-enhanced applications. “High Assurance” means that -               our system is guaranteed to be secure, -               it is verifiable to provide the complete set of security services, -               we prove that it always functions correctly, and -               we justify our claim {{that it can not be}} compromised without user neglect and/or consent.   We do not know of any equivalent research results or even commercial security systems with such properties. Based on that, we claim several significant research and also development contributions to the state–of–art of computer networks security. In the last two decades there were many activities and contributions to protect data, messages and other resources in computer networks, to provide privacy of users, reliability, availability and integrity of resources, and to provide other security properties for network environments and applications. Governments, international organizations, private companies and individuals are investing a great deal of time, efforts and budgets to install and use various security products and solutions. However, in spite of all these needs, activities, on-going efforts, and all current solutions, it is general belief that the security in today networks and applications is not adequate. At the moment there are two general approaches to network application’s security. One approach is to enforce isolation of users, network resources, and applications. In this category we have solutions like firewalls, intrusion–detection systems, port scanners, spam filters, virus detection and elimination tools, etc. The goal is to protect resources and applications by isolation after their installation in the operational environment. The second approach is to apply methodology, tools and security solutions already in the process of creating network applications. This approach includes methodologies for secure software design, ready–made security modules and libraries, rules for software development process, and formal and strict testing procedures. The goal is to create secure applications even before their operational deployment. Current experience clearly shows that both approaches failed to provide an adequate level of security, where users would be guaranteed to deploy and use secure, reliable and trusted network applications. Therefore, in the current situation, it is obvious that a new approach and a new thinking towards creating strongly protected and guaranteed secure network environments and applications are needed. Therefore, in our research we have taken an approach completely different from the two mentioned above. Our first principle is to use cryptographic protection of all application resources. Based on this principle, in our system data in local files and database tables are encrypted, messages and control parameters are encrypted, and even software modules are encrypted. The principle is that if all resources of an application are always encrypted, i. e. “enveloped in a cryptographic shield”, then -               its software modules are not vulnerable to malware and viruses, -               its data are not vulnerable to illegal reading and theft, -               all messages exchanged in a networking environment are strongly protected, and -               all other resources of an application are also strongly protected.   Thus, we strongly protect applications and their resources before they are installed, after they are deployed, and also all the time during their use. Furthermore, our methodology to create such systems and to apply total cryptographic protection was based on the design of security components in the form of generic security objects. First, each of those objects – data object or functional object, is itself encrypted. If an object is a data object, representing a file, database table, communication message, etc., its encryption means that its data are protected all the time. If an object is a functional object, like cryptographic mechanisms, encapsulation module, etc., this principle means that its code cannot be damaged by malware. Protected functional objects are decrypted only on the fly, before being loaded into main memory for execution. Each of our objects is complete in terms of its content (data objects) and its functionality (functional objects), each supports multiple functional alternatives, they all provide transparent handling of security credentials and management of security attributes, and they are easy to integrate with individual applications. In addition, each object is designed and implemented using well-established security standards and technologies, so the complete system, created as a combination of those objects, is itself compliant with security standards and, therefore, interoperable with exiting security systems. By applying our methodology, we first designed enabling components for our security system. They are collections of simple and composite objects that also mutually interact in order to provide various security services. The enabling components of our system are:  Security Provider, Security Protocols, Generic Security Server, Security SDKs, and Secure Execution Environment. They are all mainly engine components of our security system and they provide the same set of cryptographic and network security services to all other security–enhanced applications. Furthermore, for our individual security objects and also for larger security systems, in order to prove their structural and functional correctness, we applied deductive scheme for verification and validation of security systems. We used the following principle: “if individual objects are verified and proven to be secure, if their instantiation, combination and operations are secure, and if protocols between them are secure, then the complete system, created from such objects, is also verifiably secure”. Data and attributes of each object are protected and secure, and they can only be accessed by authenticated and authorized users in a secure way. This means that structural security properties of objects, upon their installation, can be verified. In addition, each object is maintained and manipulated within our secure environment so each object is protected and secure in all its states, even after its closing state, because the original objects are encrypted and their data and states stored in a database or in files are also protected. Formal validation of our approach and our methodology is performed using Threat Model. We analyzed our generic security objects individually and identified various potential threats for their data, attributes, actions, and various states. We also evaluated behavior of each object against potential threats and established that our approach provides better protection than some alternative solutions against various threats mentioned. In addition, we applied threat model to our composite generic security objects and secure network applications and we proved that deductive approach provides better methodology for designing and developing secure network applications. We also quantitatively evaluated the performance of our generic security objects and found that the system developed using our methodology performs cryptographic functions efficiently. We have also solved some additional important aspects required for the full scope of security services for network applications and cloud environment: manipulation and management of cryptographic keys, execution of encrypted software, and even secure and controlled collaboration of our encrypted applications in cloud computing environments. During our research we have created the set of development tools and also a development methodology which can be used to create cryptographically protected applications. The same resources and tools are also used as a run–time supporting environment for execution of our secure applications. Such total cryptographic protection system for design, development and run–time of secure network applications we call CryptoNET system. CrytpoNET security system is structured in the form of components categorized in three groups: Integrated Secure Workstation, Secure Application Servers, and Security Management Infrastructure Servers. Furthermore, our enabling components provide the same set of security services to all components of the CryptoNET system. Integrated Secure Workstation is designed and implemented in the form of a collaborative secure environment for users. It protects local IT resources, messages and operations for multiple applications. It comprises four most commonly used PC applications as client components: Secure Station Manager (equivalent to Windows Explorer), Secure E-Mail Client, Secure Web Browser, and Secure Documents Manager. These four client components for their security extensions use functions and credentials of the enabling components in order to provide standard security services (authentication, confidentiality, integrity and access control) and also additional, extended security services, such as transparent handling of certificates, use of smart cards, Strong Authentication protocol, Security Assertion Markup Language (SAML) based Single-Sign-On protocol, secure sessions, and other security functions. Secure Application Servers are components of our secure network applications: Secure E-Mail Server, Secure Web Server, Secure Library Server, and Secure Software Distribution Server. These servers provide application-specific services to client components. Some of the common security services provided by Secure Application Servers to client components are Single-Sign-On protocol, secure communication, and user authorization. In our system application servers are installed in a domain but it can be installed in a cloud environment as services. Secure Application Servers are designed and implemented using the concept and implementation of the Generic Security Server. It provides extended security functions using our engine components. So by adopting this approach, the same sets of security services are available to each application server. Security Management Infrastructure Servers provide domain level and infrastructure level services to the components of the CryptoNET architecture. They are standard security servers, known as cloud security infrastructure, deployed as services in our domain level could environment. CryptoNET system is complete in terms of functions and security services that it provides. It is internally integrated, so that the same <b>cryptographic</b> <b>engines</b> are used by all applications. And finally, it is completely transparent to users – it applies its security services without expecting any special interventions by users. In this thesis, we developed and evaluated secure network applications of our CryptoNET system and applied Threat Model to their validation and analysis. We found that deductive scheme of using our generic security objects is effective for verification and testing of secure, protected and verifiable secure network applications. Based on all these theoretical research and practical development results, we believe that our CryptoNET system is completely and verifiably secure and, therefore, represents a significant contribution to the current state-of-the-art of computer network security. QC 2011042...|$|R
40|$|Architectures that {{implement}} the Internet Protocol Security (IPSec) standard {{have to meet}} the enormous computing demands of cryptographic algorithms. In addition, IPSec architectures have to be flexible enough to adapt to diverse security parameters. This paper proposes an FPGA-based Adaptive <b>Cryptographic</b> <b>Engine</b> (ACE) for IPSec architectures. By taking advantage of FPGA technology, ACE can adapt to diverse security parameters on the fly while providing superior performance compared with software-based approaches. For example, for the final candidate algorithms of the Advanced Encryption Standard (AES), our techniques lead to throughput speed-up of £¥¤§¦© ¨ while the key-setup latency time is reduced {{by a factor of}} ¦�¨�¤��©¨©¨ compared with software-based approaches. We also develop a compression technique that reduces the memory requirements of ACE without the need for dedicated hardware. Though data compression has been extensively studied before, we are not aware of any prior work that addresses the compression problem of FPGA-based embedded systems with respect to the implementation cost. Using our technique, we demonstrate up to 40 % savings in memory for various configuration bit-streams...|$|E
40|$|In {{this paper}} we {{present the results}} of the {{experimental}} analysis of the transmission of voice over secure communication links implementing IPsec. Critical parameters characterizing the real-time transmission of voice over an IPsec-ured Internet connection, as well as techniques that could be adopted to overcome some of the limitations of VoIPsec (Voice over IPsec), are presented. Our results show that the effective bandwidth can be reduced up to 50 % with respect to VoIP in case of VoIPsec. Furthermore, we show that the <b>cryptographic</b> <b>engine</b> may hurt the perfomance of voice traffic because of the impossibility to schedule the access to it in order to prioritize traffic. We present an efficient solution for packet header compression, which we call cIPsec, for VoIPsec traffic. Simulation results show that the proposed compression scheme significantly reduces the overhead of packet headers, thus increasing the effective bandwidth used by the transmission. In particular, when cIPsec is adopted, the average packet size is only 2 % bigger than in the plain case (VoIP), which makes VoIPsec and VoIP equivalent from the bandwidth usage point of view. 1...|$|E
40|$|Abstract: Elliptic Curve Cryptography (ECC) {{can be used}} as a {{tool for}} {{encrypting}} data, creating digital signatures, and performing key exchanges. Regarding the encryption capability, the first schemes that appeared were either versions of already existing public-key algorithms (Massey-Omura and ElGamal) or new schemes specified ad hoc (Menezes-Vanstone). However, all the initial elliptic curve encryption schemes had similar problems, and thus were conveniently discarded by the academic community. The encryption schemes currently used are known as hybrid cryptosystems, as they use both symmetric and asymmetric techniques. Among those hybrid cryptosystems based on ECC, the best known ones are the Elliptic Curve Integrated Encryption Scheme (ECIES), the Provably Secure Elliptic Curve encryption scheme (PSEC), and the Advanced <b>Cryptographic</b> <b>Engine</b> (ACE). In this work, we present an extensive review of the basic concepts of elliptic curves, the initial ECC encryption algorithms, and the current ECC hybrid cryptosystems. After that, we provide a comprehensive comparison of ECIES, PSEC, and ACE, highlighting the main differences between them. Finally, we conclude that, with the available data, it can be stated that ECIES is the best ECC encryption scheme from a performance and ease of implementation point of view...|$|E
40|$|Trusted {{computing}} {{is gaining}} an increasing acceptance {{in the industry}} and finding its way to cloud computing. With this penetration, the question arises whether the concept of hardwired security modules will cope with the increasing sophistication and security requirements of future IT systems and the ever expanding threats and violations. So far, embedding cryptographic hardware engines into the Trusted Platform Module (TPM) has been regarded as a security feature. However, new developments in cryptanalysis, side-channel analysis, {{and the emergence of}} novel powerful computing systems, such as quantum computers, can render this approach useless. Given that, the question arises: Do we have to throw away all TPMs and lose the data protected by them, if someday a <b>cryptographic</b> <b>engine</b> on the TPM becomes insecure? To address this question, we present a novel architecture called Sustainable Trusted Platform Module (STPM), which guarantees a secure update of the TPM cryptographic engines without compromising the system’s trustworthiness. The STPM architecture has been implemented as a proof-of-concept on top of a Xilinx Virtex- 5 FPGA platform, demonstrating the test cases with an update of the fundamental hash and asymmetric engines of the TPM...|$|E
40|$|Radio {{frequency}} identification (RFID) is a {{key technology}} for the Internet of Things era. One important advantage of RFID over barcodes is that line-of-sight is not required between readers and tags. Therefore, it is widely used to perform automatic and unique identification of objects in various applications, such as product tracking, supply chain management, and animal identification. Due to the vulnerabilities of wireless communication between RFID readers and tags, security and privacy issues are significant challenges. The most popular passive RFID protocol is the Electronic Product Code (EPC) standard. EPC tags have many constraints on power consumption, memory, and computing capability. The field of lightweight cryptography was created to provide secure, compact, and flexible algorithms and protocols suitable for applications where the traditional cryptographic primitives, such as AES, are impractical. In these lightweight algorithms, tradeoffs are made between security, area/power consumption, and throughput. In this thesis, {{we focus on the}} hardware implementations and optimizations of lightweight cryptography and present the Simeck block cipher family, the WG- 8 stream cipher, the Warbler pseudorandom number generator (PRNG), and the WGLCE <b>cryptographic</b> <b>engine.</b> Simeck is a new family of lightweight block ciphers. Simeck takes advantage of the good components and design ideas of the Simon and Speck block ciphers and it has three instances with different block and key sizes. We provide an extensive exploration of different hardware architectures in ASICs and show that Simeck is smaller than Simon in terms of area and power consumption. For the WG- 8 stream cipher, we explore four different approaches for the WG transformation module, where one takes advantage of constant arrays and the other three benefit from the tower field constructions of the finite field _ 2 ^ 8 and also efficient basis conversion matrices. The results in FPGA and ASICs show that the constant arrays based method is the best option. We also propose a hybrid design to improve the throughput with a little additional hardware. For the Warbler PRNG, we present the first detailed and smallest hardware implementations and optimizations. The results in ASICs show that the area of Warbler with throughput of 1 bit per 5 clock cycles (1 / 5 bpc) is smaller than that of other PRNGs and is in fact smaller than that of most of the lightweight primitives. We also optimize and improve the throughput from 1 / 5 bpc to 1 bpc with a little additional area and power consumption. Finally, we propose a <b>cryptographic</b> <b>engine</b> WGLCE for passive RFID systems. We merge the Warbler PRNG and WG- 5 stream cipher together by reusing the finite state machine for both of them. Therefore, WGLCE can provide data confidentiality and generate pseudorandom numbers. After investigating the design rationales and hardware architectures, our results in ASICs show that WGLCE meets the constraints of passive RFID systems...|$|E
40|$|Parallelism {{has long}} been known to {{increase}} the throughput of applications that process independent data. It has been used in a broad range of designs, from functional units to large parallel supercomputers. With the advent of multicore technology designers and programmers are increasingly forced to think in parallel. It is clear that parallelism will be key to the implementation of efficient computing systems in the future. In this paper we present the evaluation of an encryption core capable of handling multiple data streams. The design is oriented towards future scenarios for internet, where throughput capacity requirements together with privacy and integrity will be critical for both personal and corporate users. To power such scenarios we present a technique that increases the efficiency of memory bandwidth utilization of cryptographic cores. We propose to feed cryptographic engines with multiple streams to better exploit the available bandwidth. We describe some specific cases in which such a <b>cryptographic</b> <b>engine</b> can be successfully implemented. We also show how multiple interfaces – such as vector or hardware scheduling – can be used to control such engines. To validate our claim, we have developed an AES core capable of encrypting two streams in parallel using either ECB or CBC modes. Our AES core implementation consumes trivial amount of resources when Virtex-II Pro FPGA device is targeted. 1...|$|E
40|$|Security ICs are {{vulnerable}} to side-channel attacks (SCAs) that find the secret key by monitoring the power consumption and other information that is leaked by the switching behavior of digital CMOS gates. This paper describes a side-channel attack resistant coprocessor IC and its design techniques. The IC has been fabricated in 0. 18 µm CMOS. The coprocessor, which is used for embedded cryptographic and biometric processing, consists of four components: an Advanced Encryption Standard (AES) based <b>cryptographic</b> <b>engine,</b> a fingerprint-matching oracle, a template storage, and an interface unit. Two functionally identical coprocessors have been fabricated on the same die. The first, ‘secure’, coprocessor is implemented using a logic style called Wave Dynamic Digital Logic (WDDL) and a layout technique called differential routing. The second, ‘insecure’, coprocessor is implemented using regular standard cells and regular routing techniques. Measurement-based experimental results show that a differential power analysis (DPA) attack on the insecure coprocessor requires only 8, 000 acquisitions to disclose the entire 128 b secret key. The same attack on the secure coprocessor still does not disclose the entire secret key at 1, 500, 000 acquisitions. This improvement in DPA resistance of at least 2 orders of magnitude makes the attack de facto infeasible. The required number of measurements {{is larger than the}} lifetime of the secret key in most practical systems...|$|E

