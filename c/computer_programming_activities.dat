3|10000|Public
40|$|We {{present the}} design of an {{interactive}} tabletop exhibit intended to engage visitors in free-form <b>computer</b> <b>programming</b> <b>activities</b> at the Computer History Museum in Mountain View, California. We describe our design goals and outline challenges associated with creating this interactive experience for a free-choice learning environment. We review results of testing sessions with users from our target audience across three successive prototypes. Author Keywords Computer programming; Computer science education...|$|E
40|$|A {{common problem}} in {{computer}} programming use {{for education in}} general, not simply as a technical skill, is that children and teachers find themselves constrained by what is possible through limited expertise in computer programming techniques. This is particularly noticeable at the preliterate level, where constructs tend {{to be limited to}} extremely simple elements. Having worked for 4 years with over 150 children, aged 3 to 5, we present age-appropriate <b>computer</b> <b>programming</b> <b>activities</b> involving different computer programming techniques, from the basic (computer language syntax) to the advanced (client-server). These may contribute to expand the panorama on viable computer programming techniques available to children and educators, thus broadening the variety of educational activities and projects that can be approached in educational settings using computer programming. Computer programming by preschoolers and kindergartners Computer programming is the craft of specifying the behaviour of a computer. It is employed by computer professionals who create applications or games for use by the general public, by professionals in other fields to produce computer tools o...|$|E
40|$|Having a broad {{understanding}} of functions is paramount to student success in higher math classes, however most students fail to fully develop this concept during {{their high school}} years. While the concept of function is multifaceted and a full understanding requires a broad knowledge base, understanding rate of change {{can be considered a}} fundamental component of the concept. Unfortunately, even AP Calculus students have difficulty with rate of change (Teuscher 2 ̆ 6 Reys, 2012). The problem may stem from the approach taken in most curricula that focus on the correspondence view of functions rather than the covariational perspective as advocated by researchers and the National Council of Teachers of Mathematics. ^ This qualitative study was a probe into student reasoning about rate of change within the covariational framework developed by Carlson, Jacobs, Coe, Larsen, and Hsu (2002), and the effectiveness of a series of <b>computer</b> <b>programming</b> <b>activities</b> on students’ reasoning abilities. The study was conducted at a public urban high school in the southwest United States with 15 student and 2 teacher participants from two ninth grade Algebra I classes. Students were given a pre-assessment prior to completing a series of activities in which they used the VPython programming language to write code that would produce graphs for given data sets and scenarios. Afterwards, the students then completed a post-assessment to measure changes in reasoning. ^ Overall, student participants had an impoverished {{understanding of}} rate of change with reasoning at the lowest levels of the covariational framework. In addition, while the activities did not produce a significant change in student reasoning, it appears that they were somewhat effective in improving student reasoning in the context of linear functions and in bringing students’ covariational reasoning to the forefront. With subsequent revision and iterations, the lessons may develop into an effective means of teaching rate of change from a covariational perspective. ...|$|E
5000|$|PC², the Programming Contest Control System {{in support}} of <b>Computer</b> <b>Programming</b> Contest <b>activities</b> (used at ACPC Finals) ...|$|R
5000|$|PC², the Programming Contest Control System {{in support}} of <b>Computer</b> <b>Programming</b> Contest <b>activities</b> (used at ICPC World Finals until 2008) ...|$|R
40|$|This {{dissertation}} analyzes cultural {{aspects of}} fluidity in children’s collaboration during a <b>computer</b> <b>programming</b> <b>activity.</b> Pairs of 8 - to- 11 -year-old children, 25 U. S. Mexican-heritage and 25 European American, {{were invited to}} work on a <b>computer</b> <b>programming</b> <b>activity.</b> Ten minutes of their collaboration were analyzed for cultural differences in how much time the pairs spent collaborating fluidly or working using individual agendas. Pairs of children from both cultural backgrounds spent substantial time collaborating by building on each other's ideas with proposals. However, U. S. Mexican-heritage pairs spent significantly more time in fluid synchrony, with anticipation of each other’s contributions, compared to European American pairs, who spent more time resisting partner contributions, negotiating whose idea should be used, and bossing their partner to implement their plan. Thus, children of both backgrounds collaborated; however, the Mexican-heritage children collaborated more and their collaboration included a particularly fluid, seamless approach that was rare among European American children...|$|R
40|$|Artificial Intelligence is {{the science}} and {{engineering}} of making intelligent machine especially intelligent <b>computer</b> <b>programs.</b> <b>Activities</b> in AI include Searching, Recognizing patterns and Making logical inferences. This paper discuss on Artificial intelligence technique used for System diagnostics and prognostics. Three approaches of AI for diagnostics and prognostics are 1. Rule based diagnostics 2. Model based diagnostics and 3. Data Driven Approaches. System diagnosis {{is the process of}} inferring the cause of any abnormal or unexpected behavior. A prognostic is predicting the time at which a system or a component will no longer perform its intended function...|$|R
50|$|PC² is the Programming Contest Control System {{developed}} at California State University, Sacramento {{in support of}} <b>Computer</b> <b>Programming</b> Contest <b>activities</b> of the ACM, {{and in particular the}} ACM International Collegiate Programming Contest. It was used to conduct the ACM ICPC World Finals until 2008. As of 2009, the ACM ICPC World Finals switched to using Kattis, the KTH automated teaching tool.|$|R
5000|$|<b>Computer</b> <b>programming</b> (often {{shortened}} to programming) is {{a process}} that leads from an original formulation of a computing problem to executable <b>computer</b> <b>programs.</b> <b>Programming</b> involves <b>activities</b> such as analysis, developing understanding, generating algorithms, verification of requirements of algorithms including their correctness and resources consumption, and implementation (commonly referred to as coding) of algorithms in a target programming language. Source code is written in one or more programming languages. The purpose of programming is to find a sequence of instructions that will automate performing a specific task or solving a given problem. The process of programming thus often requires expertise in many different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.|$|R
40|$|The {{anonymity}} of Bitcoin prevents analysis of its users. We collect Google Trends data to examine determinants {{of interest in}} Bitcoin. Based on anecdotal evidence regarding Bitcoin users, we construct proxies for four possible clientele: <b>computer</b> <b>programming</b> enthusiasts, 10 speculative investors, Libertarians and criminals. <b>Computer</b> <b>programming</b> and illegal <b>activity</b> search terms are positively correlated with Bitcoin interest, while Libertarian and investment terms are not...|$|R
40|$|Abstract. The Japanese Committee for the IOI (JCIOI) is {{a nonprofit}} {{organization}} {{and one of its}} purposes is promoting the interest of Japanese secondary school students in computer science as well as <b>computer</b> <b>programming</b> through various <b>activities</b> including Japanese Olympiad in Infor-matics. This article describes the process of selecting and training the Japanese IOI team and the key issues that faces JCIOI...|$|R
30|$|Our {{conclusions}} are necessarily preliminary. However, feedback forms suggest methods were generally well received among the participants; “Easy to follow. Clear explanation” and “Very easy. Demonstrators were very informative.” Our event, {{held at a}} local Science Centre in Dundee, demonstrates that <b>computer</b> games and <b>programming</b> <b>activities</b> suitable for young children can be performed alongside a more specialised and applied introduction to computational science for older visitors.|$|R
40|$|Coumarin- 4 -acetic acids {{have been}} {{synthesized}} from various phenols and citric acid under Pechmann cyclisation conditions. All the compounds {{have been evaluated}} for antiinflammatory and analgesic activity in acute models. Compounds have also been evaluated for their ulcerogenic potential. Using the <b>computer</b> <b>program,</b> prediction of <b>activity</b> spectra for substances, prediction results and their Pharma Expert software, we have found a correlation between the observed and predicted antiinflammatory activity...|$|R
50|$|Dysfunctions in form {{perception}} occur {{in several areas}} that involve visual processing, which is how visual information is interpreted. These dysfunctions {{have nothing to do}} with actual vision but rather affect how the brain understands what the eye sees. Problems can occur in the areas of visual closure, visual-spatial relationships, visual memory, and visual tracking. After identifying the specific visual problem that exists, intervention can include eye exercises, work with <b>computer</b> <b>programs,</b> neurotherapy, physical <b>activities,</b> and academic adjustments.|$|R
40|$|This chapter {{explores the}} idea that when given {{appropriate}} tools, young children can actively engage in <b>computer</b> <b>programming</b> and robotics <b>activities</b> {{in a way that}} is consistent with developmentally appropriate practice. In particular, this project proposes the use of emerging tangible user interface (TUI) technology to fundamentally re-envision the way in which children <b>program</b> <b>computers.</b> In short, rather than using a mouse or keyboard to write programs to control robots, children instead construct physical <b>computer</b> <b>programs</b> by connecting interlocking, “smart ” wooden blocks. In this chapter we will describe our development efforts both in terms of curriculum and technology. We will also share results from a two-year design-based research study conducted in three kindergarten classrooms. Tangible Programming...|$|R
40|$|The aim of {{our study}} is to expose {{in the first place}} the {{possibility}} to develop oral skills using a cellphone in teaching French as a foreign language, and then discovering whether a specific audience, the new generation, prefer working on computers or cell phones {{when it comes to their}} oral skills. To achieve this objective, we created a series of activites using a cellphone application and a specific <b>computer</b> <b>program.</b> These <b>activities</b> were presented to the students of the North-West University (NWU) on the Potchefstroom campus. We administered questionnaires both before and after the activites to discover students' preferences in working on the two different platforms. From the results we came to the conclusion that students, or more specifically, the new generation, prefer working on their cellphones. Furthermore, we presented recommendations to those who wish to continue research or create and implement activities using a cellphone in language learning...|$|R
40|$|The {{effect of}} {{vigabatrin}} (GVG) monotherapy on EEG interictal abnormalities and on background activity recorded at rest and during mental tasks was studied in 14 patients suffering from focal epilepsy. A long-term EEG monitoring {{was performed in}} each patient before and 3 months after the beginning of GVG therapy. Ictal and interictal EEG abnormalities (IEA) were quantified by specific <b>computer</b> <b>programs.</b> Background <b>activity</b> was evaluated by spectral analysis at rest with eyes closed (EC), during blocking reaction (BR) and during fixation of cartoons (FIX). During treatment, IEA was either decreased or unmodified independently from seizure occurrence, which clearly improved {{in the majority of}} patients. The only EEG modifications induced by GVG monotherapy were a more pronounced slowing of the background activity at rest with EC and a reduced responsiveness to BR. EEG data suggest a GVG monotherapy induced mild "sedative" action on attentive tasks rather than on cognitive function...|$|R
40|$|The {{title of}} this diploma thesis: Copyright {{protection}} of <b>computer</b> <b>programs</b> The general purpose of this thesis is to describe the most {{important aspects of the}} legal protection of <b>computer</b> <b>programs,</b> particularly the aspects of copyright protection. In this thesis I describe the form in which a <b>computer</b> <b>program</b> is protected, the activities that are permitted by law in relation to a <b>computer</b> <b>program</b> and what <b>activities</b> constitute an unauthorised intereference with author's rights. In addition to the copyright regime I also briefly described patent protection of <b>computer</b> <b>programs,</b> since it recently was subject to heated discussions in Europe and we can anticipate further development in this matter in the future, especially with regard to the decision-making practice of the European Patent Office and possible legislative establishment of patent protection of software at EU level. I have analyzed the above mentioned aspects under the Czech law (in close relation to the law of EU) but also under the law of the USA. Therefore, another aim of this thesis was to compare the legal protection of software in the USA and in the Czech Republic (EU respectively). Finally, this thesis also describes the issue called "software piracy", i. e. illegal distribution and use of <b>computer</b> <b>programs.</b> More specifically, I [...] ...|$|R
40|$|An {{interactive}} learning environment {{for teaching and}} learning of <b>computer</b> <b>programming</b> This paper is to investigate how new technology can be most appropriately applied {{in the service of}} teaching <b>computer</b> <b>programming</b> at a distance. Main elements include: building an online system that provides an integrated environment for students doing <b>programming</b> <b>activities</b> and coursework; how to provide students with timely and useful feedback about <b>programming</b> <b>activities</b> without the need to have instructors and students meet {{at the same time and}} the same place; how to build effective instructor-to-student interaction; and how programming assignments can be handled and managed in a much more efficient and effective manner than the existing ways. 1...|$|R
40|$|Abstract. The use of {{informatics}} {{in education}} has provided many {{contributions to the}} understanding of teaching and learning processes. First, it made possible the distinction between instructionism, seen as transmission of information, and constructionism, as the process of knowledge construction that takes place when a learner produces a meaningful product through the use of <b>computers.</b> Second, <b>programming</b> <b>activity,</b> especially with the Logo language, has helped to understand how knowledge is constructed in the learner-computer interaction. The article shows that this understanding has evolved {{over the course of the}} years. Initially the knowledge representation aspect was emphasized. Later the program development process began to be seen as a cycle of actions, description-execution-reflection-debugging-description. Finally, a spiral is shown to be the best model to represent the relation of these actions in the knowledge construction process. The article explores the cycle and the spiral models to discuss the role of each of the actions and to explain how knowledge is constructed based upon several concepts used by Piaget and Papert, particularly reflection and debugging...|$|R
40|$|This paper aims {{to provide}} ideas {{regarding}} implementation of Problem-Based Learning (PBL) in <b>computer</b> <b>programming,</b> where practical <b>activities</b> {{are included in}} order to generate interaction between software and hardware. The details regarding the experience, mode of delivering, obstacles and suggestion for future improvement are described in the paper. It presents the procedures involved in developing PBL cases for some basic electrical engineering problems. The approach begins with the students exploring the given problems and proposing the outcomes of their brainstorming session. They are then put into groups {{in order to encourage}} team working between team members, and cooperation between groups. To practice communication skills, each group is required to present their findings. With this initiative and approach, it is found that the students have the ability to present their own creative ideas, lending {{to a better understanding of}} the course...|$|R
40|$|The goal of {{competitive}} programming {{is being able}} to find abstract solutions for some given algorithmic problems, and and also being able to code those ideas into an efficient and correct <b>computer</b> <b>program.</b> Performing this <b>activity</b> at a high level requires a bit of natural ability, (at least) hundreds of training hours, and a wide range of knowledge, obviously including many algorithms and data structures, some of them not trivial at all. This project constitutes a compilation of problems from several different relevant topics in competitive programming, with an explanation and analysis of their solution. Most of these problems were solved while training with the UPC programming teams, which have dominated their regional competition for more than one decade. The author hopes that this collection may eventually increase the interest of some readers towards competitive programming...|$|R
40|$|Background: A novel breast cancer–associated antigen, mammaglobin-A, is {{expressed}} in 80 % of primary breast tumors. The characterization of immune responses against this highly expressed breast cancer–specific antigen would be of value {{in the development of}} new therapeutic strategies for breast cancer. Methods: We developed an in vivo model using human leukocyte antigen-A* 0201 /human CD 8 (HLA-A 2 /hCD 8) double-transgenic mice to define the epitopes and to study the level of protection acquired by mammaglobin-A cDNA vaccination toward mammaglobin-A/HLA-A 2 breast cancer cell lines. Mammaglobin-A epitopes were identified using an HLA class I peptide bind-ing prediction <b>computer</b> <b>program,</b> and their <b>activity</b> was verified using gamma interferon ELISPOT and cytotoxicity assays. Results: We identified seven mammaglobin-A– derived candidate epitopes that bind the HLA-A* 0201 mol-ecule (Mam-A 2. 1 – 7). CD 8 cytotoxic T lymphocytes (CTLs) from HLA-A 2 /hCD 8 mice reacted to the Mam-A 2. ...|$|R
40|$|The authors {{acknowledge}} the BBSRC Doctoral Training fund (ACH 0 - BDTG 09) for funding this research. Background The {{increasing use of}} computers in science allows for the scientific analyses of large datasets at an increasing pace. We provided examples and interactive demonstrations at Dundee Science Centre {{as part of the}} 2015 Women in Science festival, to present aspects of computational science to the general public. We used low-cost Raspberry Pi computers to provide hands on experience in <b>computer</b> <b>programming</b> and demonstrated the application of computers to biology. Computer games were used as a means to introduce computers to younger visitors. The success of the event was evaluated by voluntary feedback forms completed by visitors, in conjunction with our own self-evaluation. This work builds on the original work of the 4273 π bioinformatics education program of Barker et al. (2013, BMC Bioinform. 14 : 243). 4273 π provides open source education materials in bioinformatics. This work looks at the potential to adapt similar materials for public engagement events. Results It appears, at least in our small sample of visitors (n = 13), that basic computational science can be conveyed to people of all ages by means of interactive demonstrations. Children as young as five were able to successfully edit simple <b>computer</b> <b>programs</b> with supervision. This was, in many cases, their first experience of <b>computer</b> <b>programming.</b> The feedback is predominantly positive, showing strong support for improving computational science education, but also included suggestions for improvement. Conclusions Our conclusions are necessarily preliminary. However, feedback forms suggest methods were generally well received among the participants; “Easy to follow. Clear explanation” and “Very easy. Demonstrators were very informative. ” Our event, held at a local Science Centre in Dundee, demonstrates that <b>computer</b> games and <b>programming</b> <b>activities</b> suitable for young children can be performed alongside a more specialised and applied introduction to computational science for older visitors. Publisher PDFPeer reviewe...|$|R
50|$|Extracurricular <b>programs</b> and <b>activities</b> include Student Council, Yearbook Committee, Debate and Model United Nations Team, Music, Visual Arts and Photography, Chess and Gaming Club, Math League, <b>Computer</b> <b>Programming</b> {{as well as}} {{community}} events like field trips, bake sales, and donation drives.|$|R
40|$|The {{objectives}} {{of this procedure}} are to determine, primarily through review of select permanent plant modifications, whether: 01. 01 The licensee or certificate holder has established an effective configuration management system to evaluate, implement, and track each permanent plant modification to the site which could affect safety. 01. 02 The licensee or certificate holder’s configuration management system ensures that permanent plant modifications do not degrade the performance capabilities of items relied on for safety (IROFS) or other safety controls {{that are part of}} the safety design base. 01. 03 The licensee or certificate holder’s configuration management system effectively identifies and resolves the effects of permanent plant modifications to IROFS and other safety controls, processes, equipment, <b>computer</b> <b>programs,</b> and <b>activities</b> of personnel. 01. 04 The licensee, if subject to the requirements of 10 CFR 70, has addressed the baseline design criteria stipulated in 10 CFR 70. 64 in the designs for permanent plant modifications. For licensees or certificate holders not subject to 10 CFR 70, the designs of permanent plant modifications meet their specific required design criteria. 01. 05 The licensee or certificate holder, if subject to the requirements of 10 CFR 70, has addressed the impacts or modifications to the integrated safety analysis (ISA), ISA Summary, or other safety program information developed in accordance with 10 CF...|$|R
40|$|Background We {{set out to}} {{investigate}} the feasibility of incorporating a computer-tailored health behaviour program into routine care {{in a group of}} primary care practices in Rhode Island. Methods Two existing <b>computer</b> <b>programs</b> (physical <b>activity,</b> smoking) that tailored text and graphical feedback to survey responses were combined and adapted for use in primary care directly by patients. Ten primary care practices were recruited and worked closely with project staff to develop a practice-specific plan for incorporating the program into the workflow and office routine. Feasibility was measured by the percentage of patients who used the program during the day of their visit. Results Only one of the ten offices was able to successfully incorporate the program into their office workflow and delivery of routine care. The main categories of barriers to incorporating the <b>computer</b> <b>program</b> into routine care included: • the program was viewed overall as inconsistent with practice workflow • the staff was inexperienced with the program • technical problems with the computer and/or printer • the program placed an additional time burden on staff who already felt overworked. Suggestions for improving the program or the way that it was incorporated into routine care included: • shortening the program • modifying the program’s orientation to a target population (such as patients with hypertension) and incorporating decision-support feedback to help physicians manage the target condition • modifying the program to include other programs pertinent to primary care (for example, depression screening) • selecting patients to use the program, rather than asking all patients to use it. Conclusions After working closely with ten highly motivated primary care offices, we were unable to fully implement a point-of-care health behaviour computer system for patients and providers. Suggestions for disseminating computer-tailored health behaviour communications in primary care settings are discussed...|$|R
40|$|A {{theory of}} human {{cognitive}} processes in writing code for <b>computer</b> <b>programs</b> is presented which views behavior {{in terms of}} three processes: understanding, planning, and coding. Using this theory, {{a model of the}} coding process has been created which reproduces the code generation behavior of an experienced, human programmer working on a set of 2 3 FORTRAN problems. The model is stated as a <b>computer</b> <b>program</b> organized as a production system. A Theory of Human <b>Computer</b> <b>Programming</b> Behavior <b>Programming</b> is an <b>activity</b> which is engaged in, in one form or another, by {{more than a million people}} (Boehm, 1972). Surprisingly, research on human behavior in programming is very sparse an...|$|R
40|$|This {{interactivity}} demonstrates Tern, {{a tangible}} programming language {{for middle school}} and late elementary school students. Tern consists {{of a collection of}} wooden blocks shaped like jigsaw puzzle pieces. Children connect these blocks to form physical <b>computer</b> <b>programs,</b> which may include action commands, loops, branches, and subroutines. With Tern we attempt to provide the ability for teachers to conduct engaging <b>programming</b> <b>activities</b> in their classrooms, even if there are only one or two computers available. In designing Tern, we focused on creating an inexpensive, durable, and practical system for classroom use...|$|R
5000|$|Can a <b>computer</b> <b>program</b> only be {{excluded}} as a <b>computer</b> <b>program</b> as such {{if it is}} explicitly claimed as a <b>computer</b> <b>program?</b> ...|$|R
50|$|Profiling (<b>computer</b> <b>programming)</b> {{can be done}} by work {{sampling}} a <b>computer</b> <b>program.</b>|$|R
40|$|Cover title. Includes bibliographies. v. 1. Theory {{manual for}} STARS- 2 P digital <b>computer</b> <b>program.</b> [...] v. 2. User's manual for STARS- 2 P digital <b>computer</b> <b>program.</b> [...] v. 3. Engineer's program manual for STARS- 2 P digital <b>computer</b> <b>program.</b> [...] v. 4. SATELLITE- 1 P program for STARS- 2 P digital <b>computer</b> <b>program.</b> Mode of access: Internet...|$|R
40|$|The {{objectives}} {{of this procedure}} are to determine through review of the configuration management and change control program, whether: 01. 01 The licensee or certificate holder has established an effective configuration management system to evaluate, implement, and track each permanent plant modification to the site which could affect safety. 01. 02 The licensee or certificate holder’s configuration management system ensures that permanent plant modifications do not degrade the performance capabilities of items relied on for safety (IROFS) or other safety controls {{that are part of}} the safety design base. 01. 03 The licensee or certificate holder’s configuration management system effectively identifies and resolves the effects of permanent plant modifications to IROFS and other safety controls, processes, equipment, <b>computer</b> <b>programs,</b> and <b>activities</b> of personnel. 88071 - 02 INSPECTION REQUIREMENTS 02. 01 Programmatic Review. This procedure will be performed if, based on the results of an inspection performed according to Inspection Procedure 88070, Plant Safety Modifications, it was determined that there were programmatic or significant noncompliance issues with the licensee or certificate holder’s performance due to the configuration management and change control program. 88071. 03 INSPECTION GUIDANCE 03. 01 Programmatic Review. If the inspection performed according to Inspection Procedure 88070, Plant Safety Modifications, determined that a programmatic review of the licensee or certificate holder’s configuration management system and change control program was necessary, the following inspection guidance should be used: a. Configuration Management. 1. Configuration Management Program. The licensee or certificate holder should have a well developed and documented configuration management program for generation and retention of documents that define the establishment and maintenance of the plant Integrated Safety Analysis (ISA...|$|R
50|$|An {{application}} launcher is a <b>computer</b> <b>program</b> that helps a user {{to locate and}} start other <b>computer</b> <b>programs.</b> An {{application launcher}} provides shortcuts to <b>computer</b> <b>programs,</b> and stores the shortcuts in one place so they are easier to find.|$|R
40|$|Describes the Electrical and Computer Engineering Department's <b>Computer</b> Engineering <b>Program's</b> {{assessment}} <b>activities</b> for {{the academic}} year 2013 - 2014. The Computer Engineering annual assessment report to the College for the Office of Academic Assessment. The program inaugurated the 3 -semester implementation phase of its new three-year assessment cycle with a Program Improvement Plan developed in response to indirect survey assessments from 2012 - 13 (closing the loop). Completed elements of the Plan include increased instruction in ethics, targeted assignments for SLOs h, I, and j (submitted to ABET), a revision of the ECE 240 L lab manual, the development of videos to instruct students in {{the proper use of}} lab equipment, the writing of an ECE 309 lab manual, the addition of a Simulink to ECE 309, a requirement for Senior Design students to add a slide to their oral presentations, and the forming of a faculty committee to eliminate curriculum overlap in the math sequence. Implementation will continue through fall 2014, with Major Assessment (collection and scoring of student work) beginning in Spring 2015...|$|R
5000|$|Gene {{expression}} programming (GEP) {{also uses}} populations of <b>computer</b> <b>programs.</b> These complex <b>computer</b> <b>programs</b> are encoded in simpler linear chromosomes of fixed length, which are afterwards expressed as expression trees. Expression trees or <b>computer</b> <b>programs</b> evolve because the chromosomes undergo mutation and recombination {{in a manner}} similar to the canonical GA. But thanks to the special organization of GEP chromosomes, these genetic modifications always result in valid <b>computer</b> <b>programs.</b>|$|R
