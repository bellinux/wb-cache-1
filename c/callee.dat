198|56|Public
6000|$|Hop Sing (slowly and sententiously). Me shabe man you <b>callee</b> Diego. Me shabbee Led Gulchee call Sandy. Me shabbee man Poker Flat <b>callee</b> Alexandlee Molton. Allee same, John! Allee same! ...|$|E
50|$|In the IMS framework, it is {{required}} {{that once the}} <b>callee</b> is alerted, {{the chances of a}} session failure are minimum. An important source of failure is the inability to reserve network resources to support the session, so these resources should be allocated before the phone rings. However, in the IMS, to reserve resources the network needs to know the callee's IP address, port and session parameters and therefore it is necessary that the initial offer/answer exchange to establish a session has started (INVITE request). In basic SIP, this exchange eventually causes the <b>callee</b> to be alerted. To solve this problem, the concept of preconditions was introduced. In this concept the caller states a set of constraints about the session (i.e. codecs and QoS requirements) in the offer, and the <b>callee</b> responds to the offer without establishing the session or alerting the user. This establishment will occur if and only if both the caller and the <b>callee</b> agree that the preconditions are met.|$|E
5000|$|Abilene Maverick [...] "The Governor's Daughter" [...] (<b>Callee</b> Wilkerson): Tag Team {{partner of}} Candace LaRae.|$|E
5000|$|The Great American Name Game — Finding humorous {{names in}} American {{telephone}} directories, {{with the objective}} of getting the <b>callees</b> to say their name ...|$|R
50|$|STS relay is the speech-to-speech relay service {{available}} to any telephone callers or <b>callees</b> with speech disability {{and to those}} who wish to talk with them.|$|R
40|$|This paper {{addresses}} {{the problem of}} static checking of programs {{to ensure that they}} satisfy confidentiality policies in the presence of dynamic access control in the form of Abadi and Fournet's history-based access control mechanism. The Java virtual machine's permission-based stack inspection mechanism, provides dynamic access control and is useful in protecting trusted <b>callees</b> from untrusted callers. History-based access control, in contrast to stack inspection, provides a stateful view of permissions: permissions after execution are at most the permissions before execution. This allows protection of both callers and <b>callees.</b> The main contribution [...] ...|$|R
50|$|When the {{reference}} is {{passed to the}} <b>callee</b> uninitialized, this evaluation strategy may be called call by result.|$|E
5000|$|Conventions {{on which}} {{registers}} may be directly {{used by the}} <b>callee,</b> without being preserved (otherwise regarded as an ABI detail) ...|$|E
5000|$|How local {{variables}} are allocated can sometimes also {{be part of}} the calling convention (when the caller allocates for the <b>callee)</b> ...|$|E
40|$|Abstract. Pointer {{disambiguation}} has a {{vital role}} to play in assisting the compiler to get a much more clearer view about the program. In addition to better program comprehension, it can help one get better performance. In this work, we consider the problem of resolving function pointers to their potential <b>callees.</b> Typically profile information is used {{to come up with a}} reasonably accurate set of potential <b>callees</b> for an indirect call site. But in this paper, we propose a static name based heuristic that can be used in the absence of profile information. The name based heuristic works with the properties of names of function pointers and functions. We exploit the name property to help us narrow down the possible choices of <b>callees</b> at an indirect call site. We first evaluate a simple static heuristic based on signature match and observe that there is scope for further improvement. Applying the name heuristic, we get upto 2. 5 % improvement in the SpecFp 2000 benchmark 177. mesa...|$|R
5000|$|Hotspot {{visualization}} is {{a complete}} list of symbols encountered in the profile that is used in conjunction with a side-by-side tree and leaf views (butterfly view). Selecting a symbol in the hotspot list shows the callers and <b>callees</b> of that symbol in the butterfly view.|$|R
5000|$|The given {{epilogue}} will {{reverse the}} effects of either of the above prologues (either the full one, or the one which uses [...] ). Under certain calling conventions it is the <b>callee's</b> responsibility to clean the arguments off the stack, so the epilogue can also include the step of moving the stack pointer down or up.|$|R
5000|$|How {{the task}} of {{preparing}} the stack for, and restoring after, a function call is divided between the caller and the <b>callee</b> ...|$|E
5000|$|How {{the task}} of setting up for and {{cleaning}} up after a function call is divided between the caller and the <b>callee</b> ...|$|E
50|$|STS Relay is {{available}} via 711 in the US through the Telecommunications Relay Service; {{in a telephone}} call, first dial 711, then ask for STS. A trained communication assistant will ask you what number you want to call. The assistant will repeat what the caller with the speech disability is saying. The <b>callee</b> can then respond. The caller can then reply. The communication assistant will revoice the caller's message. The <b>callee</b> then responds in this three-way assisted phone conversation.|$|E
5000|$|The {{question}} is how many middle subswitches are needed, and therefore how many total wires should connect the input layer to the middle layer. Since telephone switches are symmetric (callers and <b>callees</b> are interchangeable), the same logic will apply to the output layer, and the middle subswitches will be [...] "square", having {{the same number of}} inputs as outputs.|$|R
40|$|Abstract. This paper {{addresses}} {{the problem of}} static checking of programs {{to ensure that they}} satisfy confidentiality policies in the presence of dynamic access control in the form of Abadi and Fournet’s historybased access control mechanism. The Java virtual machine’s permissionbased stack inspection mechanism provides dynamic access control and is useful in protecting trusted <b>callees</b> from untrusted callers. In contrast, history-based access control provides a stateful view of permissions: permissions after execution are at most the permissions before execution. This allows protection of both callers and <b>callees.</b> The main contributions of this paper are to provide a semantics for history-based access control and a static analysis for confidentiality that takes history-based access control into account. The static analysis is a type and effects analysis where the chief novelty is the use of security types dependent on permission state. We also show that in contrast to stack inspection, confidential information can be leaked by the historybased access control mechanism itself. The analysis ensures a noninterference property formalizing confidentiality. ...|$|R
25|$|The {{structure}} of a switch is an odd number of layers of smaller, simpler subswitches. Each layer is interconnected by a web of wires that goes from each subswitch, {{to a set of}} the next layer of subswitches. In most designs, a physical (space) switching layer alternates with a time switching layer. The layers are symmetric, because in a telephone system callers can also be <b>callees.</b>|$|R
5000|$|For aspect-oriented {{programming}} (AOP) - {{can introduce}} new methods into a class and insert before/after/around advice {{at both the}} caller and <b>callee</b> sides ...|$|E
5000|$|Which {{registers}} {{are considered}} to be volatile and, if volatile, need not be restored by the <b>callee</b> (often regarded as an ABI detail) ...|$|E
50|$|Flat {{profilers}} {{compute the}} average call times, from the calls, {{and do not}} break down the call times based on the <b>callee</b> or the context.|$|E
40|$|Calls. calm {{facilitates}} the ongoing interaction between two people; it works by enabling callers {{to make a}} reasonable choice of time and means for communication, by providing them with key information about the <b>callee’s</b> situation. Calls. calm is a web-based application, supporting minibrowsers on web-enabled mobile phones and desktop browsers. Calls. calm was deployed for a month within two small work teams. Results from the deployment points to future direction for research and design...|$|R
40|$|Approaching {{discourse}} analysis from a diachronic perspective, {{this study examines}} Chinese telephone interactions between customer callers and employee <b>callees</b> in Shanghai, China by utilizing two sets of comparable data gathered a decade apart. Focusing on closings in telephone interactions, this research found salient differences in patterns of closing {{as well as in}} business and service employees’ participation structure of closing between the two sets of data. Observed differences indicate a shift in the discursive practice of businesses and services in Shanghai...|$|R
40|$|International audienceContext aware {{systems are}} a {{promising}} approach to facilitate daily-life activities. Concerning communication services, business users may be sometimes overloaded with work {{so that they}} become temporally unable to handle incoming communications. After having surveyed the challenges to build context-aware systems, we introduce here HEP, a system that recommends communication services to the caller based on the <b>callee's</b> context. HEP's main context source is the usage history of the different communication services {{as well as the}} users' calendars. It has been prototyped and tested at Orange Labs...|$|R
50|$|These can be {{done without}} inlining, but require a {{significantly}} more complicated compiler and linker (in case caller and <b>callee</b> are in separate compilation units).|$|E
5000|$|How a (possibly long or complex) {{return value}} is {{delivered}} from the <b>callee</b> {{back to the}} caller (on the stack, in a register, or within the heap) ...|$|E
50|$|Call graph {{profilers}} {{show the}} call times, and frequencies of the functions, {{and also the}} call-chains involved based on the <b>callee.</b> In some tools full context is not preserved.|$|E
40|$|Abstract—The {{need for}} serial {{multicast}} remote procedure calls (RPCs) arises in many distributed systems to avoid network bottlenecks and high-latency links, {{especially when the}} caller wants to send {{a large amount of}} data to multiple <b>callees.</b> In this paper, we present a mathematical model of serial multicast calls in order to understand their performance behavior. Through our evaluations on the real platform, we find our model is very effective in predicting the performance of serial multicast RPCs. Index Terms—Serial multicast, remote procedure calls (RPCs), model, distributed systems. I...|$|R
40|$|ABSTRACT Tame {{is a new}} event-based {{system for}} {{managing}} con-currency in network applications. Code written with Tame abstractions does not suffer from the &quot;stack-ripping &quot; problem associated with other event libraries. Like threaded code, tamed code uses standard control flow,automatically-managed local variables, and modular interfaces between callers and <b>callees.</b> Tame's implementationconsists of C++ libraries and a source-to-source translator; no platform-specific support or compiler modifications arerequired, and Tame induces little runtime overhead. Experience with Tame in real-world systems, including a pop-ular commercial Web site, suggests {{it is easy to}} adopt and deploy...|$|R
50|$|In {{software}} development {{it is often}} very useful {{to be able to}} find the callers of a function because this is the way to understand how code works and what other parts of the program expect from a function. cscope can find the callers and <b>callees</b> of functions, but it is not a compiler and it does that by searching the text for keywords. This has the disadvantages that macros and duplicate symbol names can generate an unclear graph. There are other programs that can extract this information by parsing the source code or looking at the generated object files.|$|R
50|$|If the <b>callee</b> is a variadic function, {{then the}} number of {{floating}} point arguments passed to the function in vector registers must be provided by the caller in the RAX register.|$|E
5000|$|Media address negotiation: In {{order to}} be able to {{traverse}} all kinds of NAT, the WebRTC specifications indicate that WebRTC applications must use STUN and ICE in order to detect the addresses under which two end points can exchange media packets. While these technologies are also implemented by some SIP user agents, this is not mandatory. If the <b>callee</b> does not support ICE or in case media transport layer needs mapping or media transcoding is required then the WebRTC gateway will have to act as an ICE end point and route the media packets between the caller and <b>callee.</b>|$|E
50|$|Based on the Borland Pascal {{programming}} language's calling convention, {{the parameters}} are pushed on the stack in left-to-right order (opposite of cdecl), and the <b>callee</b> {{is responsible for}} balancing the stack before return.|$|E
40|$|Traditional Voice-over-IP {{applications}} such as Microsoft NetMeeting assume that the user is on a machine with a fixed IP address. If, however, the user connects to the Internet, via a wireless network, on a handheld device, his IP address frequently changes as he moves from one subnet to another. In such a situation, we need a service that can be queried for the most current IP address of a person whom we wish to contact. In this project, we design and implement such a directory service. The service authenticates all callers and <b>callees,</b> is robust against most host failure, and scales to several thousand registered users...|$|R
2500|$|Zvi Kamil, an Israeli inventor, filed his UK patent {{application}} number 8600691 for a [...] "telephone system" [...] on 13 January 1986, claiming priority from two previous Israeli {{patent application}}s filed on 13 January 1985 and 10 November 1985. The application {{related to a}} [...] "special" [...] telephone exchange. A caller has an account with the owner of that exchange and deposits a credit with him. The caller has a code. To make a call he calls {{the number of the}} special exchange and inputs his code and then the <b>callee's</b> number. If the code is verified and there is enough credit he is put through: the call will be terminated if his credit runs out.|$|R
40|$|Abstract. As current Voice-over-IP (VoIP) systems {{encourage}} a direct {{communication between the}} <b>callees</b> they are similar in design to peer-to-peer (P 2 P) approaches. Therefore, we introduce a framework to build distributed supplementary services for VoIP. Some of these services like completion of calls on no reply or holding are already commonly estab-lished in public switched telephone networks or realized in centralized VoIP servers like Asterisk [1]. In order to foster the completely decentral-ization of these features we suggest corresponding services implemented {{on top of a}} structured P 2 P network. Using a resource-based approach new features can easily be deployed and announced. Key words: Voice over IP, telephony services, Peer-to-Peer, Framework...|$|R
