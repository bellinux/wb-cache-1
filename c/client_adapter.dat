2|8|Public
5000|$|Reboot Stack: The AP {{applies the}} SSID and key {{for the highest}} level of {{encryption}} supported by the client and reboots. The previously used WEP64 and RC4 tunnel are no longer used. The <b>client</b> <b>adapter</b> will automatically reboot or re-initialize and connect to the SSID using the proper encryption key.|$|E
5000|$|The Microsoft Windows Network Driver Interface Specification (NDIS) API {{does not}} support any {{extensions}} for wireless monitor mode in older versions of Windows. With NDIS 6, available in Windows Vista and later versions of Windows, {{it is possible to}} enable monitor mode. [...] NDIS 6 supports exposing 802.11 frames to the upper protocol levels; with previous versions of NDIS only fake Ethernet frames translated from the 802.11 data frames can be exposed to the upper protocol levels. Monitor mode support in NDIS 6 is an optional feature and {{may or may not be}} implemented in the <b>client</b> <b>adapter</b> driver. The implementation details and compliance with the NDIS specifications vary from vendor to vendor. In many cases, monitor mode support is not properly implemented by the vendor. For example, Ralink drivers report incorrect dBm readings and Realtek drivers do not include trailing 4-byte CRC values.|$|E
40|$|Wireless LAN (WLAN) market {{consists}} of IEEE 802. 11 MAC standard conformant devices (e. g., access points (APs), <b>client</b> <b>adapters)</b> from multiple vendors. Certain third party certifications {{such as those}} specified by the Wi-Fi alliance {{have been widely used}} by vendors to ensure basic conformance to the 802. 11 standard, thus leading to the expectation that the available devices exhibit identical MAC level behavior. In this paper, however, we present what we believe to be the first ever set of experimental results that highlight the fact that WLAN devices from different vendors in the market can have heterogeneous MAC level behavior. Specifically, we demonstrate with examples and data that in certain cases, devices may not be conformant with the 802. 11 standard while in other cases, they may differ in details that are not a part of mandatory (but still important) specifications of the standard. We argue that heterogeneous MAC implementations can adversely impact WLAN operations leading to unfair bandwidth allocation, potential break-down of related MAC functionality and difficulties in provisioning the capacity of a WLAN. However, on the positive side, MAC level heterogeneity can be useful in applications such as vendor/model level device fingerprinting...|$|R
50|$|Quantenna {{released}} the first 802.11ac chipset for retail Wi-Fi routers and consumer electronics on November 15, 2011. Redpine Signals {{released the}} first low power 802.11ac technology for smartphone application processors on December 14, 2011. On January 5, 2012, Broadcom announced its first 802.11ac Wi-Fi chips and partners and on April 27, 2012, Netgear announced the first Broadcom-enabled router. On May 14, 2012, Buffalo Technology released the worldâ€™s first 802.11ac products to market, releasing a wireless router and <b>client</b> bridge <b>adapter.</b> On December 6, 2012, Huawei announced commercial {{availability of the}} industry's first enterprise-level 802.11ac Access Point.|$|R
40|$|Abstract: IEEE 802. 11 {{standard}} specifies {{a protocol}} for data link (i. e., {{medium access control}} or MAC) level communication in a {{wireless local area network}} (WLAN). The WLAN market consists of various products (e. g., access points (APs), <b>client</b> <b>adapters)</b> that have been released by multiple vendors. Certain third party certifications such as those specified by the Wi-Fi alliance have been widely used by vendors to ensure interoperability and basic conformance to the 802. 11 standard, thus leading to the expectation that such certified devices exhibit identical MAC level behavior. In this paper, however, we present what we believe to be the first ever set of experimental results that highlight the fact that WLAN devices from different vendors in the market can have heterogeneous MAC level behavior. Specifically, we demonstrate with examples and data that in certain cases, devices may not be conformant with the 802. 11 standard (e. g., due to incorrect implementations), while in other cases, they may differ in details that are not a part of mandatory specifications of the standard, but still important for WLAN operations. We argue that heterogeneous MAC implementations can adversely impact WLAN operations leading to unfair bandwidth allocation, poor network utilization, potential break-down of related MAC functionality and difficulties in provisioning the capacity of a WLAN. However, on the positive side, MAC level heterogeneity can be useful in applications such as vendor/model level device fingerprinting. 1...|$|R
40|$|In {{this paper}} we {{describe}} a platform that enables Web site automation and monitoring. The platform automat-ically gathers high quality site activity data, {{both from the}} server and <b>client</b> sides. Web <b>adapters,</b> such as rec-ommender systems, can be easily plugged into the plat-form, {{and take advantage of}} the up-to-date activity data. The platform also includes a module to support the ed-itor of the site to monitor and assess the effects of au-tomation. We illustrate the features of the platform on a case study, where we show how {{it can be used to}} gather information not only to model the behavior of users but also the impact of the personalization mechanism...|$|R
40|$|Video {{streaming}} over Wireless Local Area Networks (WLANS) {{is becoming}} an increasingly popular service. However, end user OoS is highly influenced by many factors. These include the video codec used, the packetization scheme, error concealment and correction techniques, {{the complexity of the}} video, propagation losses, and the line rate. In this paper the effect of the line rate on the capacity of the network when streaming multimedia content is analyzed experimentally. It is shown that as the line rate decreases the bandwidth load of the video stream dramatically increases leading to poor QoS at the client side. As automatic line rate adaptation schemes are typically employed in the majority of WLAN <b>adapters,</b> <b>clients</b> have no control over the line rate of their connection and consequently can suffer from a poor QoS for their video streaming services...|$|R
40|$|ION LAYER DEVICE LAYER USER SPACE KERNEL SPACE SOURCE DEVICE NETWORK <b>ADAPTER</b> <b>CLIENT</b> APPLICATION LAYER STANDARD I/O LAYER ABSTRACTION LAYER DEVICE LAYER USER SPACE KERNEL SPACE NETWORK ADAPTER SINK DEVICE ROUTER ROUTER NETWORK Figure 2 An End-to-End Data Path from a Source Device on One Workstation to a Sink Device on Another Workstation {{device is}} a network adapter. In this paper, {{we use the}} term data {{transfer}} problemto refer {{to the problem of}} reducing these overheads to achieve high throughput between a source device and a sink device, either of which can be a network adapter within a single workstation. Although the data transfer problem may also exist in intermediate routers, it does so to a much lesser degree than with end-user workstations (assuming modern router software and hardware technology). This is because of a router's simplified execution environment and its reduced needs for transfers across multiple protected domains. However, there is nothing that precludes the appli [...] ...|$|R
40|$|Abstract [...] In the network-centric {{computing}} paradigm the net gains more importance. Software {{and hardware}} components, often abstracted as services, form an application that is distributed over {{the network and}} only loosely coupled. Clients that depend on those services communicate remotely and download the necessary code they need. Jini is a framework, based on Java that provides an infrastructure for network-centric computing. A Jini environment {{is a collection of}} interacting Java programs, called services, which are distributed over a network, and which need to register themselves with the Jini lookup service (LUS). The LUS works like the yellow pages allowing clients to lookup services. An exact type match between the service interface registered with the LUS and the one requested by the client is needed for a lookup. Therefore a client cannot use a service integrated into the network, which does not match a known interface. The adapter pattern applied to Jini services solves this problem by creating adapters for services unknown to the <b>clients.</b> An <b>adapter</b> implements the known interface making it accessible by the client and operating as a link between the client and the unknown service. Since manually creating these adapters would result in a redundant coding effort, we propose using a tool, called the Generic Adapter, which combines automatic adaptation and adaptation requiring user interaction as strategies to facilitate the adapter creation. An intuitive graphical user interface reduces the effort for the user to a minimum allowing drag-and-drop operations to define mapping relations and to simply add custom code. The Generic Adapter tool can be easily integrated into a networkcentric architecture like Jini. Service adaptation is performed on the basis of Java Reflection, XML or Javadoc service descriptions, and the mapping relations, which are either automatically determined or specified by the user, and which are stored in a central mapping table. Index Terms [...] Module adaptation, adapter design pattern, Java, network-centric computing, Jini, component based software, reflection...|$|R
50|$|An {{important}} {{example of}} a cryptographic protocol that failed because of a related-key attack is Wired Equivalent Privacy (WEP) used in WiFi wireless networks. Each <b>client</b> Wi-Fi network <b>adapter</b> and wireless access point in a WEP-protected network shares the same WEP key. Encryption uses the RC4 algorithm, a stream cipher. It is essential that the same key never be used twice with a stream cipher. To prevent this from happening, WEP includes a 24-bit initialization vector (IV) in each message packet. The RC4 key for that packet is the IV concatenated with the WEP key. WEP keys have to be changed manually and this typically happens infrequently. An attacker therefore can assume that all the keys used to encrypt packets share a single WEP key. This fact opened up WEP {{to a series of}} attacks which proved devastating. The simplest to understand uses the fact that the 24-bit IV only allows a little under 17 million possibilities. Because of the birthday paradox, it is likely that for every 4096 packets, two will share the same IV and hence the same RC4 key, allowing the packets to be attacked. More devastating attacks take advantage of certain weak keys in RC4 and eventually allow the WEP key itself to be recovered. In 2005, agents from the U.S. Federal Bureau of Investigation publicly demonstrated the ability to do this with widely available software tools in about three minutes.|$|R

