0|293|Public
40|$|Recently a new {{generation}} of P 2 P systems, offering distributed hash table (DHT) functionality, have been proposed. These systems greatly improve the scalability and exact-match accuracy of P 2 P systems, but offer only the exact-match <b>query</b> <b>facility.</b> This paper outlines a research agenda for building complex <b>query</b> <b>facilities</b> on top of these DHT-based P 2 P systems. We describe the issues involved and outline our research plan an...|$|R
5000|$|Powerful <b>query</b> <b>facilities,</b> with boolean searches, wildcards, phrases, proximity, filter on {{file types}} and {{directory}} tree. GUI Boolean search build tool.|$|R
40|$|Problem statement: Metering and {{charging}} are basic accounting functions {{that are essential}} for commercial usage of web services. Current charging and accounting schemes primarily involve users being charged flat or based on the connection/session time. Accounting management of web services should provide for metering, charging, accounting, billing, payment and auditing. We have extended our earlier work, a Policy based Accounting for Web Services (WS-PACT), to develop a generic and comprehensive charging policy that can cater to different charging patterns. WS-PACT provides a flexible model to meet the varying billing and payment needs of service providers. Approach: Policies are expressed in WS-Policy and policy <b>query</b> <b>facility</b> has been developed using XQuery. Results: Users can use the <b>query</b> <b>facility</b> to obtain the charges being levied and can decide on which services to use by taking into account their preferred spending limits and payment patterns. Conclusion: We have implemented and tested the charging policy and <b>query</b> <b>facility</b> with a sample application...|$|R
50|$|It was a {{relational}} query {{system with}} powerful <b>query</b> <b>facilities,</b> but very limited update facility and no simultaneous multiuser facility. PRTV was a follow-on {{from the very}} first relational implementation, IS1.|$|R
40|$|Enhanced Multimedia Meta Objects (EMMOs) are a novel {{approach}} to multimedia content modeling, combining media, semantic relationships between those media, as well as functionality on the media, such as rendering, into tradeable knowledge-enriched units of multimedia content. For the processing of EMMOs and the knowledge they contain, suitable <b>querying</b> <b>facilities</b> are required. In this paper, we present EMMA, an expressive query algebra that is adequate and complete {{with regard to the}} EMMO model. EMMA o#ers a rich set of formally-defined, orthogonal query operators that give access to all aspects of EMMOs, enable query optimization, and allow the representation of elementary ontology knowledge within queries. Thereby, EMMA provides a sound and adequate foundation for the realization of powerful EMMO <b>querying</b> <b>facilities...</b>|$|R
40|$|This paper {{presents}} a visual <b>query</b> <b>facility</b> prototype developed for Newson-demand, a multimedia news application. The {{graphical user interface}} provides three major facilities for users of this application: presentation, navigation and querying of multimedia news documents. The main focus, however, is querying of multimedia objects stored in the database. 1...|$|R
40|$|Developed {{practical}} {{techniques for}} sentiment analysis from unstructured text data – Classified customers {{according to their}} satisfaction level from auto-decrypted phone conversations with the customer service – Developed a web application (database front end) for the database of customer surveys with advanced <b>querying</b> <b>facility.</b> Application is developed in Java connecting to an Oracle server...|$|R
40|$|This paper {{presents}} GoNTogle, a tool {{which provides}} advanced document annotation and search facilities. GoNTogle {{allows users to}} annotate several document formats, using ontology concepts. It also produces automatic annotation suggestions based on textual similarity and previous document annotations. Finally, GoNTogle combines keyword and semantic-based search, offering advanced ontology <b>query</b> <b>facilities.</b> © 2010 Springer-Verlag...|$|R
40|$|Web users rely on World Wide Web search engines, such as Yahoo! and AltaVista, to {{retrieve}} Web documents of interest. Whether {{a search engine}} provides categories for a user to click on or a <b>query</b> <b>facility</b> for a user to type in keywords, the Web documents retrieved still suffer from poor precision (i. e., too many irrelevant documents ar...|$|R
40|$|Virtualized web {{application}} servers within computational clouds, {{such as the}} GoogleApp Engine, generally restrict resource usage and therefore provide limited,relationally none-complete <b>query</b> <b>facilities</b> only. This work investigates how scalable,reliable and a more powerful access to the App Engine Datastore can beaccomplished and an Optimized Distributed Datastore Exchange (ODDSE) ispresented. Being aware of the App Engine’s resource restrictions ODDSE provides areliable and failure safe query interface to transparently exchange data with thedistributed Datastore using full SQL or AmosQL. ODDSE therefore wraps Datastorerelations and utilizes the extensible database system Amos II to compensate formissing <b>query</b> <b>facilities</b> in Google’s relationally none-complete query language GQL. Under the covers ODDSE furthermore implements an adaptive and reliablemanagement of interactions with App Engine servers. For scalability and highperformance the interaction is parallelized and continuously adapted. Theperformance of ODDSE is evaluated and compared to a similar system showing itsconsiderably good results for both bulk uploading and query processing...|$|R
40|$|Database query languages, while {{providing}} strong <b>query</b> <b>facilities,</b> lack the constructs needed to express complex algorithmic retrieval {{tasks such as}} those that occur during software maintenance. Although {{there are a variety of}} solutions to this problem, we advocate the merger of an existing query language with a well-known general purpose programming language. To support the target domain of semi-structured data, we combined the list-based query language GCL with the functional programming language Scheme. Their common data structures provide a foundation for their integration, resulting in a language that has powerful <b>query</b> <b>facilities</b> but is expressive and easy to use. To demonstrate the utility of the resultant functional query language, we have applied it to tasks in the areas of software engineering and information retrieval. 1 Introduction Query languages, such as SQL [14], OQL [4], GraphLog [7] and Lorel [2] provide powerful and ecient constructs for the retrieval [...] ...|$|R
40|$|In this paper, {{we present}} {{algorithms}} which allow an object-oriented querying of existing relational databases. Our {{goal is to}} provide an improved query interface for relational systems with better <b>query</b> <b>facilities</b> than SQL. This {{seems to be very}} important since, in real world applications, relational systems are most commonly used and their dominance will remain in the near future. To overcome the drawbacks of relational systems, especially the poor <b>query</b> <b>facilities</b> of SQL, we propose a schema transformation and a query translation algorithm. The schema transformation algorithm uses additional semantic information to enhance the relational schema and transform it into a corresponding object-oriented schema. If the additional semantic information can be deducted from an underlying entity-relationship design schema, the schema transformation may be done fully automatically. To query the created object-oriented schema, we use the Structured Object Query Language (SOQL) which provides de [...] ...|$|R
5000|$|XQuery 3.1 {{became a}} W3C Recommendation on March 21, 2017. [...] "The {{mission of the}} XML Query project is to provide {{flexible}} <b>query</b> <b>facilities</b> to extract data from real and virtual documents on the World Wide Web, therefore finally providing the needed interaction between the Web world and the database world. Ultimately, collections of XML files will be accessed like databases".|$|R
40|$|Multimedia {{databases}} store large data {{objects with}} complex {{spatial and temporal}} relationships. For users to easily and effectively access and make use of this large information space, {{there is a need}} for an interactive user interface to act as an intermediary between the database and the user. Many existing multimedia systems provide a browsing-based user interface for their users. However, with large information spaces, browsing does not provide an efficient mechanism for accessing the database. Thus, {{there is a need for}} a <b>query</b> <b>facility</b> which enables users to pose queries to the database, and, directly, retrieve information of interest. This research determines the user interface requirements of multimedia information systems and provides a template solution. That is, it presents an easy and efficient way of accessing a multimedia database. This is achieved through a visual <b>query</b> <b>facility</b> which provides a rich visual query interface as well as a browsing <b>facility.</b> The visual <b>query</b> fa [...] ...|$|R
40|$|Most {{object-oriented}} databases {{can only}} be accessed by a programming language rather than a query language, although an ad hoc <b>query</b> <b>facility</b> is a desirable feature of such systems. In this paper, we present a way to process queries to extract data from a collection of interacting objects. We adopt the object-oriented paradigm to describe the operational semantics of queries given as expressions of a query algebra. An expression can {{be transformed into a}} collection of active objects performing the operations. We show that we are able to implement query processing using the existing framework for collections of objects, which is based on objects modeled as processes. Our approach makes parallel query processing possible. 1 Introduction A central feature of modern database systems is an ad hoc <b>query</b> <b>facility</b> (cf. [Mai 83, Dat 86]) offering efficient access to stored information. Although the field of objectoriented database systems (OODBS) is rapidly growing [DD 86, Dit 88], query languages [...] ...|$|R
40|$|Currently {{much effort}} {{is being spent}} on {{providing}} objectoriented databases with ad hoc <b>query</b> <b>facilities.</b> In this paper we present a SQL-like query calculus whose major contribution lies in its inherent orthogonality and rigorous mathematical foundation. The calculus is essentially a calculus of complex values but it is defined independently of any concrete database model. The calculus {{can be used to}} formulate queries in value-based and object-based data models. Moreover it provides a general facility for the manipulation of complex values. 1 Introduction Object-oriented database systems (OODB) are usually embedded in a programming language environment providing full computational power. Consequently, designers of OODB at first did not feel the need to integrate ad hoc <b>query</b> <b>facilities</b> into their systems. However, it has been recognized that some associative retrieval is of importance even for OODB [8, 12, 13]. A well-tried ad hoc query language is SQL. SQL came up with relational da [...] ...|$|R
40|$|Using archetypes is a {{promising}} approach in providing semantic interoperability among healthcare systems. To realize archetype based interoperability, the healthcare systems need {{to discover the}} existing archetypes based on their semantics; annotate their archetypes with ontologies; compose templates from archetypes and retrieve corresponding data from the underlying medical information systems. In this paper, we describe how ebXML Registry semantic constructs {{can be used for}} annotating, storing, discovering and retrieving archetypes. For semantic annotation of archetypes, we present an example archetype metadata ontology and describe the techniques to access archetype semantics through ebXML <b>query</b> <b>facilities.</b> We present a GUI <b>query</b> <b>facility</b> and describe how the stored procedures we introduce, move the semantic support beyond what is currently available in ebXML registries. We also address how archetype data can be retrieved from clinical information systems by using ebXML Web services. A comparison of Web service technology with ebXML messaging system is provided to justify the reasons for using Web services. 1...|$|R
40|$|The {{goal of the}} DataWeb Project is to {{facilitate}} the querying and browsing of multimedia databases over {{a wide spectrum of}} networks and media. The explosive use of the World Wide Web has made it possible for organizations to make data available to an ever widening audience for an ever growing spectrum of uses. However, the Web also has altered the requirements for querying, and these new requirements must be addressed before the potential of Web-based applications can be fulfilled. As part of the DataWeb project, we have developed an intelligent <b>query</b> <b>facility</b> that builds on the access paradigms supported by current hypertext-style web applications and on decision support systems. This facility generalizes the basic navigation and abstraction mechanisms of these applications to be both extensible and scalable. Enabling users with minimal familiarity of the database contents to easily locate data of interest, this <b>query</b> <b>facility</b> forms the multimedia querying mechanism for a database pub [...] ...|$|R
40|$|Summary: The Web Ontology Language (OWL) {{provides}} a sophisticated language for building complex domain ontologies and {{is widely used}} in bio-ontologies such as the Gene Ontology. The Protégé-OWL ontology editing tool {{provides a}} <b>query</b> <b>facility</b> that allows composition and execution of queries with the human-readable Manchester OWL syntax, with syntax checking and entity label lookup. No equivalent <b>query</b> <b>facility</b> such as the Protégé Description Logics (DL) query yet exists in web form. However, many users interact with bio-ontologies such as chemical entities of biological interest and the Gene Ontology using their online Web sites, within which DL-based querying functionality is not available. To address this gap, we introduce the OntoQuery web-based query utility. Availability and implementation: The source code for this implementation together with instructions for installation is available at [URL] OntoQuery software is fully compatible with all OWL-based ontologies and is available for download (CC- 0 license). The ChEBI installation, ChEBI OntoQuery, is available at [URL] Contact: hastings@ebi. ac. u...|$|R
40|$|RDF-based P 2 P {{networks}} {{have a number}} of advantages compared with simpler P 2 P networks such as Napster, Gnutella or with approaches based on distributed indices such as CAN and CHORD. RDF-based P 2 P networks allow complex and extendable descriptions of resources instead of fixed and limited ones, and they provide complex <b>query</b> <b>facilities</b> against these metadata instead of simple keyword-based searches...|$|R
40|$|Documents, pictures, {{and other}} such non-quantitative {{information}} pose interesting new problems in the database world. Such data has traditionally been stored in file systems, which do not provide the security, integrity, or query features of database management systems. We have developed HyperFile, a data server that provides <b>query</b> <b>facilities</b> (as well as some other database features) while maintaining the flexibility and efficiency of a file system...|$|R
40|$|We {{describe}} an infrastructure {{for the collection}} and management of large amounts of text, and discuss the possibility of information extraction and visualisation from text corpora with statistical methods. The paper gives an overview of processing steps, the contents of our text databases as well as different <b>query</b> <b>facilities.</b> Our {{focus is on the}} extraction and visualisation of collocations and their usage for aiding web searches...|$|R
40|$|RDF-based P 2 P {{networks}} {{have a number}} of advantages compared to simpler P 2 P networks such as Napster, Gnutella or to approaches based on distributed indices on binary keys such as CAN and CHORD. RDF-based P 2 P networks allow complex and extendable descriptions of resources instead of fixed and limited ones, and they provide complex <b>query</b> <b>facilities</b> against these metadata instead of simple keyword-based searches...|$|R
40|$|The {{widespread}} {{dissemination of}} computer and information systems to nontechnically trained individuals requires {{a new approach}} to the design and development of database interfaces. This paper provides the motivational background for controlled psychological experimentation in exploring the person/machine interface. Frameworks for the reductionist approach are given, research methods discussed, research issues presented, and a small experiment is offered as an example of what can be accomplished. Thii experiment is a comparison of natural and artificial language <b>query</b> <b>facilities.</b> Although subjects posed approximately equal numbers of valid <b>queries</b> with either <b>facility,</b> natural language users made significantly more invalid queries which could not be answered from the database that was described...|$|R
30|$|This {{evolution}} {{responded to}} the need of providing flexibility to the logic level adapting the physical level in consequence. The idea was to approach the three levels by offering ad hoc <b>query</b> <b>facilities,</b> and let applications define the way they could navigate the objects collections, for instance, a graphical browser could be sufficient to fulfill this functionality [8]. This facility could be supported by the data manipulation language or a subset of it.|$|R
40|$|We {{present the}} design of a visual {{database}} system for data and experiment management. Our system was designed as a general scientific database system, but motivated by and intended for use in model-based computer vision. We provide a unified data model, a highly graphical user interface, an advanced <b>query</b> <b>facility,</b> and an interactive laboratory notebook. We hope that the system, when completed, will aid in scientific experimentation and will promote data sharing in the computer vision research community...|$|R
40|$|We propose {{combining}} query approximation and query relaxation {{techniques in}} order to support flexible querying of heterogeneous data arising from lifelong learners' educational and work experiences. A key aim of such <b>querying</b> <b>facilities</b> is to allow learners to identify possible choices for their future learning and professional development from what others have done. With our approach, query results can be computed incrementally, in polynomial time, and returned in order of increasing "distance" from the user's original query...|$|R
40|$|The WebCorp {{project has}} {{demonstrated}} how the Web {{may be used}} as a source of linguistic data. One feature of standard corpus analysis tools hitherto missing in WebCorp is the ability to filter and sort results by date. This paper discusses the dating mechanisms available on the Web and the date <b>query</b> <b>facilities</b> offered by standard Web search engines. The new date heuristics built into WebCorp are then discussed and illustrated with a case study. 1...|$|R
40|$|The goal of {{this task}} {{was to create a}} design and {{prototype}} implementation of a database environment that is particular suited for handling the image, vision and scientific data associated with the NASA's EOC Amazon project. The focus was on a data model and <b>query</b> <b>facilities</b> that are designed to execute efficiently on parallel computers. A key feature of the environment is an interface which allows a scientist to specify high-level directives about how query execution should occur...|$|R
40|$|Abstract: In this paper, {{we present}} {{algorithms}} which allow an object-oriented querying of existing relational databases. Our {{goal is to}} provide an improved que-ry interface for relational systems with better <b>query</b> <b>facilities</b> than SQL. This {{seems to be very}} important since, in real world applications, relational systems are most commonly used and their dominance will remain in the near future. To overcome the drawbacks of relational systems, especially the poor <b>query</b> <b>facilities</b> of SQL, we propose a schema transformation and a query translation algorithm. The schema transformation algorithm uses additional semantic information to en-hance the relational schema and transform it into a corresponding object-oriented schema. If the additional semantic information can be deducted from an underly-ing entity-relationship design schema, the schema transformation may be done fully automatically. To query the created object-oriented schema, we use the Structured Object Query Language (SOQL) which provides declarative query fa-cilities on objects. SOQL queries using the created object-oriented schema are much shorter, easier to write and understand and more intuitive than correspond-ing SQL queries leading to an enhanced usability and an improved querying of the database. The query translation algorithm automatically translates SOQL que-ries into equivalent SQL queries for the original relational schema. ...|$|R
50|$|Since the {{buildings}} are of relatively low height, the complex sprawls out over a large area of land. The interior of the headquarters is furnished with items like shade lamps and giant rubber balls. The lobby contains a piano and a projection of current live Google search <b>queries.</b> <b>Facilities</b> include free laundry rooms (Buildings 40, 42 & CL3), two small swimming pools, multiple sand volleyball courts, and eighteen cafeterias with diverse menus. Google has also installed replicas of SpaceShipOne and a dinosaur skeleton.|$|R
30|$|Another way of {{addressing}} DBMS “componentization” {{was to provide}} database middlewares. Such middlewares leave data items {{under the control of}} their original (external) management systems while integrating them into a common DBMS-style framework. External systems exhibit, in many cases, different capabilities, such as query languages with varying power or no <b>querying</b> <b>facilities</b> at all. The different data stores might also have different data models (i.e., different data definition and structuring means), or no explicit data model at all. The goal of graceful integration is achieved through componentization.|$|R
40|$|Abstract. In {{this paper}} we {{describe}} Racer, {{which can be}} considered as a core inference engine for the semantic web. The Racer inference server offers two APIs that are already used by at least three different network clients, i. e., the ontology editor OilEd, the visualization tool RICE, and the ontology development environment Protege 2. The Racer server supports the standard DIG protocol via HTTP and a TCP based protocol with extensive <b>query</b> <b>facilities.</b> Racer currently supports the web ontology languages DAML+OIL, RDF, and OWL. ...|$|R
40|$|Abstract. Intelligent {{retrieval}} of hypermedia documents requires sophisticated document representations and <b>querying</b> <b>facilities</b> {{that allow for}} content-based and fact-based querying as well as considering the structure of documents. This paper describes POOL, a Probabilistic Object-Oriented four-valued Logic, which allows a uniform view on hypermedia documents {{for the purpose of}} their retrieval: documents, images, authors, dates, etc. are treated as objects and POOL models the content of objects, the facts about objects, and the structure of objects to provide for a relevance-based ranking of hypermedia documents...|$|R
40|$|In {{this paper}} we {{describe}} Racer, {{which can be}} considered as a core inference engine for the semantic web. The Racer inference server o#ers two APIs that are already used by at least three di#erent network clients, i. e., the ontology editor OilEd, the visualization tool RICE, and the ontology development environment Protege 2. The Racer server supports the standard DIG protocol via HTTP and a TCP based protocol with extensive <b>query</b> <b>facilities.</b> Racer currently supports the web ontology languages DAML+OIL, RDF, and OWL...|$|R
40|$|AbstractSoftware {{development}} environments {{should include}} query handlers. Query handlers {{based on the}} relational database model are attractive because the model provides a uniform, non-procedural approach to query writing. There are two drawbacks to using the relational model to support query handlers in software development systems: (1) Standard relational database systems require that all information be stored in relations; however, the data structures used by existing software development environments are generally non-relational, and it is impractical to replace them with relations. (2) The standard relational operators are not powerful enough to express certain important classes of queries. We have previously proposed a model of editing environments (Horwitz, Teitelbaum, 1986), based {{on the use of}} relationally-attributed grammars, that supports a relational <b>query</b> <b>facility.</b> We introduced a new kind of relation, implicit relations, and a new approach to query evaluation to handle queries that use implicit relations. In this paper we illustrate the utility of implicit relations in contexts other than relationally-attributed grammars. We extend the definition of implicit relations and show how they can be used to support relational <b>query</b> <b>facilities</b> in software development environments without giving up the use of non-relational data structures. Implicit relations {{can also be used to}} provide non-standard relational operations such as transitive closure...|$|R
