3|10000|Public
50|$|The NetWare Core Protocol (NCP) is {{a network}} {{protocol}} {{used in some}} products from Novell, Inc. It is usually associated with the <b>client-server</b> <b>operating</b> <b>system</b> Novell NetWare which originally supported primarily MS-DOS client stations, but later support for other platforms such as Microsoft Windows, the classic Mac OS, Linux, Windows NT, Mac OS X, and various flavors of Unix was added.|$|E
50|$|Within the “backup” {{portion of}} the data {{protection}} spectrum, one Veritas product, Backup Exec, {{has been in the}} market for more than two decades. Since the early days of Microsoft’s journey to turn its Windows Server into the world’s dominant <b>client-server</b> <b>operating</b> <b>system,</b> Backup Exec has been {{one of a handful of}} technologies to protect it. As the WinSvr OS grew to become a platform of choice for application enablement and user productivity, Backup Exec’s media/platform support, application support, and internal operation evolved at a similar pace.|$|E
40|$|This paper {{highlights}} some of {{the lessons}} learned {{during the course of}} implementing xFS, a fully distributed file system. xFS is an interesting case study for two reasons. First, xFS's serverless architecture leads to more complex distributed programming issues than are faced by traditional <b>client-server</b> <b>operating</b> <b>system</b> services. Second, xFS implements a complex, multithreaded service that is tightly coupled with the underlying operating system. This combination turned out to be quite challenging. On one hand, the complexity of the system forced us to turn to distributed programming tools based on formal methods to verify the correctness of our distributed algorithms; on the other hand the complex interactions with the operating system on individual nodes violated {{some of the}} tools' assumptions, making it difficult to use them in this environment. Furthermore, the xFS system tested the limits of abstractions such as threads, RPC, and vnodes that have traditionally been used in buildi [...] ...|$|E
40|$|This thesis {{deals with}} the {{management}} of computer servers. The theoretical part describes the <b>client-server</b> architecture, <b>operating</b> <b>system</b> GNU/Linux and server management tools. The second chapter is devoted to design an own application to manage servers. The next chapter describes the design and implementation of individual modules from which application is build. In the fourth chapter there is described how to install and configure the application on the GNU/Linuw <b>operating</b> <b>system.</b> The penultimate chapter is written as a user manual and acquaints reader with application control. In the last section there are results obtained in testing the application presented and commented...|$|R
40|$|Load {{sensitive}} faults are programming errors {{with which}} the program executes successfully if executed {{for a short time}} or small workload, but cause the program to fail when it is executed under a heavy load or continuously. Example applications that are prone to load sensitive faults include networking programs, <b>client-server</b> programs, <b>operating</b> <b>system</b> modules, and embedded systems. An important component of testing these programs is load or stress testing, which is directed towards detecting load sensitive faults, and also often performed to insure that a system satisfies a particular performance requirement under a heavy load. Current approaches to load testing treat the system as a black box, generating test data based on parameters specified by the tester within an operational profile. This method of load testing is applied at system integration time, typically resulting in a high maintenance cost in response to detecting a fault. This method can be applied only when the distributi [...] ...|$|R
40|$|The {{paper is}} based on the {{experience}} of the author with the FreeBSD server <b>operating</b> <b>system</b> administration on three servers in use under academicdirect. ro domain. The paper describes a set of installation, preparation, and administration aspects of a FreeBSD server. First issue of the paper is the installation procedure of FreeBSD <b>operating</b> <b>system</b> on i 386 computer architecture. Discussed problems are boot disks preparation and using, hard disk partitioning and <b>operating</b> <b>system</b> installation using a existent network topology and a internet connection. Second issue is the optimization procedure of <b>operating</b> <b>system,</b> server services installation, and configuration. Discussed problems are kernel and services configuration, system and services optimization. The third issue is about <b>client-server</b> applications. Using <b>operating</b> <b>system</b> utilities calls we present an original application, which allows displaying the system information in a friendly web interface. An original program designed for molecular structure analysis was adapted for systems performance comparisons and it serves for a discussion of Pentium, Pentium II and Pentium III processors computation speed. The last issue of the paper discusses the installation and configuration aspects of dial-in service on a UNIX-based <b>operating</b> <b>system.</b> The discussion includes serial ports, ppp and pppd services configuration, ppp and tun devices using. ...|$|R
40|$|Shared {{clusters}} {{represent an}} excellent {{platform for the}} execution of parallel applications given their low price/performance ratio {{and the presence of}} cluster infrastructure in many organisations. The focus of recent research efforts are on parallelism management, transport and efficient access to resources, and making clusters easy to use. In this thesis, we examine reliable parallel computing on clusters. The aim of this research is to demonstrate the feasibility of developing an <b>operating</b> <b>system</b> facility providing transport fault tolerance using existing, enhanced and newly built <b>operating</b> <b>system</b> services for supporting parallel applications. In particular, we use existing process duplication and process migration services, and synthesise a group communications facility for use in a transparent checkpointing facility. This research is carried out using the methods of experimental computer science. To provide a foundation for the synthesis of the group communications and checkpointing facilities, we survey and review related work in both fields. For group communications, we examine the V Distributed System, the x-kernel and Psync, the ISIS Toolkit, and Horus. We identify a need for services that consider the placement of processes on computers in the cluster. For Checkpointing, we examine Manetho, KeyKOS, libckpt, and Diskless Checkpointing. We observe the use of remote computer memories for storing checkpoints, and the use of copy-on-write mechanisms to reduce the time to create a checkpoint of a process. We propose a group communications facility providing two sets of services: user-oriented services and system-oriented services. User-oriented services provide transparency and target application. System-oriented services supplement the user-oriented services for supporting other <b>operating</b> <b>systems</b> services and do not provide transparency. Additional flexibility is achieved by providing delivery and ordering semantics independently. An <b>operating</b> <b>system</b> facility providing transparent checkpointing is synthesised using coordinated checkpointing. To ensure a consistent set of checkpoints are generated by the facility, instead of blindly blocking the processes of a parallel application, only non-deterministic events are blocked. This allows the processes of the parallel application to continue execution during the checkpoint operation. Checkpoints are created by adapting process duplication mechanisms, and checkpoint data is transferred to remote computer memories and disk for storage using the mechanisms of process migration. The services of the group communications facility are used to coordinate the checkpoint operation, and to transport checkpoint data to remote computer memories and disk. Both the group communications facility and the checkpointing facility have been implemented in the GENESIS cluster <b>operating</b> <b>system</b> and provide proof-of-concept. GENESIS uses a microkernel and <b>client-server</b> based <b>operating</b> <b>system</b> architecture, and is demonstrated to provide an appropriate environment for the development of these facilities. We design a number of experiments to test the performance of both the group communications facility and checkpointing facility, and to provide proof-of-performance. We present our approach to testing, the challenges raised in testing the facilities, and how we overcome them. For group communications, we examine the performance of a number of delivery semantics. Good speed-ups are observed and system-oriented group communication services are shown to provide significant performance advantages over user-oriented semantics in the presence of packet loss. For checkpointing, we examine the scalability of the facility given different levels of resource usage and a variable number of computers. Low overheads are observed for checkpointing a parallel application. It is made clear by this research that the microkernel and <b>client-server</b> based cluster <b>operating</b> <b>system</b> provide an ideal environment {{for the development of a}} high performance group communications facility and a transparent checkpointing facility for generating a platform for reliable parallel computing on clusters...|$|R
40|$|Distributed Shared Memory (DSM) {{provides}} programmers with {{a shared}} memory environment in systems where memory is not physically shared. Clusters of Workstations (COWs), an often untapped source of computing power, are characterised {{by a very}} low cost/performance ratio. The combination of Clusters of Workstations (COWs) with DSM provides {{an environment in which}} the programmer can use the well known approaches and methods of programming for physically shared memory systems and parallel processing can be carried out to make full use of the computing power and cost advantages of the COW. The aim of this research is to synthesise and develop a distributed shared memory system {{as an integral part of}} an <b>operating</b> <b>system</b> in order to provide application programmers with a convenient environment in which the development and execution of parallel applications can be done easily and efficiently, and which does this in a transparent manner. Furthermore, in order to satisfy our challenging design requirements we want to demonstrate that the <b>operating</b> <b>system</b> into which the DSM system is integrated should be a distributed <b>operating</b> <b>system.</b> In this thesis a study into the synthesis of a DSM system within a microkernel and <b>client-server</b> based distributed <b>operating</b> <b>system</b> which uses both strict and weak consistency models, with a write-invalidate and write-update based approach for consistency maintenance is reported. Furthermore a unique automatic initialisation system which allows the programmer to start the parallel execution of a group of processes with a single library call is reported. The number and location of these processes are determined by the <b>operating</b> <b>system</b> based on system load information. The DSM system proposed has a novel approach in that it provides programmers with a complete programming environment in which they are easily able to develop and run their code or indeed run existing shared memory code. A set of demanding DSM system design requirements are presented and the incentives for the placement of the DSM system with a distributed <b>operating</b> <b>system</b> and in particular in the memory management server have been reported. The new DSM system concentrated on an event-driven set of cooperating and distributed entities, and a detailed description of the events and reactions to these events that make up the operation of the DSM system is then presented. This is followed by a pseudocode form of the detailed design of the main modules and activities of the primitives used in the proposed DSM system. Quantitative results of performance tests and qualitative results showing the ease of programming and use of the RHODOS DSM system are reported. A study of five different application is given and the results of tests carried out on these applications together with a discussion of the results are given. A discussion of how RHODOS’ DSM allows programmers to write shared memory code in an easy to use and familiar environment and a comparative evaluation of RHODOS DSM with other DSM systems is presented. In particular, the ease of use and transparency of the DSM system have been demonstrated through the description of the ease with which a moderately inexperienced undergraduate programmer was able to convert, write and run applications for the testing of the DSM system. Furthermore, the description of the tests performed using physically shared memory shows that the latter is indistinguishable from distributed shared memory; this is further evidence that the DSM system is fully transparent. This study clearly demonstrates that the aim of the research has been achieved; it is possible to develop a programmer friendly and efficient DSM system fully integrated within a distributed <b>operating</b> <b>system.</b> It is clear from this research that client-server and microkernel based distributed <b>operating</b> <b>system</b> integrated DSM makes shared memory operations transparent and almost completely removes the involvement of the programmer beyond classical activities needed to deal with shared memory. The conclusion can be drawn that DSM, when implemented within a client-server and microkernel based distributed <b>operating</b> <b>system,</b> is one of the most encouraging approaches to parallel processing since it guarantees performance improvements with minimal programmer involvement...|$|R
40|$|Abstract- Virtualization enables {{installation}} and running of multiple virtual machines {{on the same}} computer <b>system.</b> <b>Operating</b> <b>system</b> that communicates directly with hardware {{is known as the}} host <b>operating</b> <b>system</b> whereas virtual <b>operating</b> <b>systems</b> have all the features of a real <b>operating</b> <b>system,</b> but they run inside the host <b>operating</b> <b>system.</b> A virtual machine is separated from the computer hardware resources and it runs on the emulated hardware. Performance of the virtual <b>operating</b> <b>system</b> running on the same computer system hardware depends on the performance of the host <b>operating</b> <b>system.</b> In this paper we study how different host <b>operating</b> <b>systems</b> influence virtual machine performance. Windows XP®, Windows Vista ™ and Windows 7 ™ are used as host <b>operating</b> <b>systems</b> using Windows Vista as a virtual <b>operating</b> <b>system.</b> Performance measurement of the virtual <b>operating</b> <b>system</b> is done in the same controlled conditions for all three host <b>operating</b> <b>systems</b> using benchmark applications. Performance measurement results show that the virtual <b>operating</b> <b>system</b> has the best performance when Windows 7 is used as the host <b>operating</b> <b>system...</b>|$|R
50|$|The Pick <b>operating</b> <b>system</b> was a {{complete}} <b>operating</b> <b>system.</b> Prime Information was not an <b>operating</b> <b>system,</b> but a 4GL system that ran from the Prime PRIMOS <b>operating</b> <b>system.</b>|$|R
50|$|For example, Solaris Zones {{supports}} multiple guest <b>operating</b> <b>systems</b> running {{under the}} same <b>operating</b> <b>system</b> such as Solaris 10. Guest <b>operating</b> <b>systems</b> can use the same kernel level with the same <b>operating</b> <b>system</b> version, or can be a separate copy of the <b>operating</b> <b>system</b> with a different kernel version using Solaris Kernel Zones. Solaris native Zones also requires that the host <b>operating</b> <b>system</b> is a version of Solaris; other <b>operating</b> <b>systems</b> from other manufacturers are not supported. However, Solaris Branded Zones {{would need to be}} used to have other <b>operating</b> <b>systems</b> as zones.|$|R
50|$|Because of {{the large}} number and variety of {{available}} Linux distributions, they are all grouped under a single entry; see comparison of Linux distributions for a detailed comparison. There are also a variety of BSD <b>operating</b> <b>systems</b> and DOS <b>operating</b> <b>systems,</b> covered in comparison of BSD <b>operating</b> <b>systems</b> and comparison of DOS <b>operating</b> <b>systems.</b> For information on views of each <b>operating</b> <b>system,</b> see <b>operating</b> <b>system</b> advocacy.|$|R
50|$|An {{embedded}} <b>operating</b> <b>system</b> is an <b>operating</b> <b>system</b> for {{embedded computer}} <b>systems.</b> These <b>operating</b> <b>systems</b> {{are designed to}} be compact, efficient at resource usage, and reliable, forsaking many functions that non-embedded computer <b>operating</b> <b>systems</b> provide, and which may not be used by the specialized applications they run. They are frequently also referred to as real-time <b>operating</b> <b>systems,</b> and the term RTOS is often used as a synonym for embedded <b>operating</b> <b>system.</b>|$|R
50|$|The first <b>operating</b> <b>systems</b> for the GEC 4000 series were COS (Core <b>Operating</b> <b>System)</b> and DOS (Disk <b>Operating</b> <b>System).</b> These were {{basically}} single-user multi-tasking <b>operating</b> <b>systems,</b> designed for developing and running Process control type applications.|$|R
40|$|This paper {{presents}} an architecture that allows multiple isolated commodity <b>operating</b> <b>systems</b> to run concurrently on a microkernel-based <b>operating</b> <b>system</b> without restricting the CPU architecture of guest <b>operating</b> <b>systems.</b> There are several systems that can execute multiple guest <b>operating</b> <b>systems</b> {{by using a}} virtual machine monitor or a microkernel-based <b>operating</b> <b>system.</b> Almost all of them, however, require that the CPU architecture of a guest <b>operating</b> <b>system</b> and a host <b>operating</b> <b>system</b> are identical and the guest <b>operating</b> <b>system</b> needs to be modified. Our architecture {{does not require the}} both of them and the prototype system that we have developed achieved the execution of multiple guest <b>operating</b> <b>systems</b> such as Linux and FreeBSD compiled for several CPU architecture without the modification of them. Since it involved decreasing the performance of a guest <b>operating</b> <b>system,</b> we propose several techniques to improve the performance in this paper. Future embedded system will become more complex, so our approach offers a new way to reuse existing applications and <b>operating</b> <b>systems.</b> 1...|$|R
40|$|In my thesis, I focus on the <b>operating</b> <b>system</b> Google Chrome OS, {{determination}} of its characteristics, definition of target {{group of the}} <b>operating</b> <b>system's</b> users and comparison of available applications with those available for other <b>operating</b> <b>systems.</b> In the theoretical part, historical development of Google is analysed first, followed by the issue of Google Chrome web browser and analyse of the <b>operating</b> <b>system</b> Google Chrome OS. The practical part starts with evaluation of survey on the <b>operating</b> <b>system</b> Google Chrome OS and is followed by multi-criteria analysis of variants comparing various categories of applications available for the <b>operating</b> <b>system</b> Google Chrome OS and other <b>operating</b> <b>systems,</b> in this case represented by the <b>operating</b> <b>system</b> Microsoft Windows 8. 1 and distribution of Linux <b>operating</b> <b>system</b> Ubuntu 14. 04 LTS...|$|R
40|$|Typical {{undergraduate}} <b>operating</b> <b>systems</b> projects use {{services provided}} by an <b>operating</b> <b>system</b> via system calls or develop code in a simulated <b>operating</b> <b>system.</b> However, with the increasing popularity of <b>operating</b> <b>systems</b> with open source code such as Linux, there are untapped possibilities for <b>operating</b> <b>systems</b> projects to modify real <b>operating</b> <b>system</b> code. We present the hardware and software configuration of an open source laboratory that promises to provide students that use it with {{a better understanding of}} <b>operating</b> <b>system</b> internals than is typically gained in a traditional <b>operating</b> <b>systems</b> course. Our preliminary projects and evaluation suggest that thus far the lab has achieved its primary goal in that students that used the lab feel more knowledgeable in <b>operating</b> <b>system</b> and more confident in their ability to write and modify <b>operating</b> <b>system</b> code. 1 Introduction Worcester Polytechnic Institute (WPI) is a private university with approximately 2800 undergraduate students and [...] ...|$|R
50|$|OSP, an Environment for <b>Operating</b> <b>System</b> Projects, is a {{teaching}} <b>operating</b> <b>system</b> {{designed to provide}} an environment for an introductory course in <b>operating</b> <b>systems.</b> By selectively omitting specific modules of the <b>operating</b> <b>system</b> and having the students re-implement the missing functionality, an instructor can generate projects that require students to understand fundamental <b>operating</b> <b>system</b> concepts.|$|R
50|$|OpenBSD {{claims to}} be the only <b>operating</b> <b>system</b> that is fully secure by default. This, however, does not mean it's {{inherently}} the most secure <b>operating</b> <b>system,</b> because that depends on the definition of an <b>operating</b> <b>system.</b> There are many <b>operating</b> <b>systems</b> that are not capable of networking with other systems. Thus, considering the amount of network-based security compromises today, one can argue such an <b>operating</b> <b>system</b> is more secure. OpenBSD is a network <b>operating</b> <b>system.</b>|$|R
5000|$|An {{important}} difference between most embedded <b>operating</b> <b>systems</b> and desktop <b>operating</b> <b>systems</b> {{is that the}} application, including the <b>operating</b> <b>system,</b> is usually statically linked together into a single executable image. Unlike a desktop <b>operating</b> <b>system,</b> the embedded <b>operating</b> <b>system</b> does not load and execute applications. [...] This means {{that the system is}} only able to run a single application.|$|R
50|$|An <b>operating</b> <b>system</b> crash {{commonly}} {{occurs when}} a hardware exception occurs that cannot be handled. <b>Operating</b> <b>system</b> crashes can also occur when internal sanity-checking logic within the <b>operating</b> <b>system</b> detects that the <b>operating</b> <b>system</b> has lost its internal self-consistency.|$|R
40|$|This work {{presents}} several {{approaches for}} designing self-stabilizing <b>operating</b> <b>systems.</b> The first approach {{is based on}} periodical automatic reinstalling of the <b>operating</b> <b>system</b> and restart. The second, reinstalls the executable portion of the <b>operating</b> <b>system</b> and uses predicates on the <b>operating</b> <b>system</b> state (content of variables) {{to ensure that the}} <b>operating</b> <b>system</b> does not diverge from its specifications. The last approach presents an example of a tailored self-stabilizing very-tiny <b>operating</b> <b>system.</b> Prototypes using the Intel Pentium processor were composed. ...|$|R
5000|$|Persistent <b>operating</b> <b>systems</b> are <b>operating</b> <b>systems</b> {{that remain}} {{persistent}} {{even after a}} crash or unexpected shutdown. <b>Operating</b> <b>systems</b> that employ this ability include ...|$|R
2500|$|MS-DOS ( [...] {{acronym for}} Microsoft Disk <b>Operating</b> <b>System)</b> is a {{discontinued}} <b>operating</b> <b>system</b> for x86-based personal computers mostly developed by Microsoft. Collectively, MS-DOS, its rebranding as IBM PC DOS, and some <b>operating</b> <b>systems</b> attempting to {{be compatible with}} MS-DOS, are {{sometimes referred to as}} [...] "DOS" [...] (which is also the generic acronym for disk <b>operating</b> <b>system).</b> MS-DOS was the main <b>operating</b> <b>system</b> for IBM PC compatible personal computers during the 1980s and the early 1990s, when it was gradually superseded by <b>operating</b> <b>systems</b> offering a graphical user interface (GUI), in various generations of the graphical Microsoft Windows <b>operating</b> <b>system.</b>|$|R
40|$|The goal of {{this thesis}} is to {{approach}} the issue of cloud <b>operating</b> <b>systems,</b> implementation of concrete solutions and comparism of their practical use in personal and corporate sectors. In the theoretical part the basic concepts of cloud computing and <b>operating</b> <b>systems</b> are explained. The theoretical part also contains a summary of cloud <b>operating</b> <b>systems</b> based on Linux and web <b>operating</b> <b>systems.</b> In the practical part three <b>operating</b> <b>systems</b> are chosen, implemented and subjected to comparison. The tested solutions include cloud <b>operating</b> <b>system</b> Chrome OS, Joli OS and eyeOS. All <b>operating</b> <b>systems</b> are launched, configured, tested and their practical potential is evaluated...|$|R
5000|$|MS-DOS ( [...] {{acronym for}} Microsoft Disk <b>Operating</b> <b>System)</b> is a {{discontinued}} <b>operating</b> <b>system</b> for x86-based personal computers mostly developed by Microsoft. Collectively, MS-DOS, its rebranding as IBM PC DOS, and some <b>operating</b> <b>systems</b> attempting to {{be compatible with}} MS-DOS, are {{sometimes referred to as}} [...] "DOS" [...] (which is also the generic acronym for disk <b>operating</b> <b>system).</b> MS-DOS was the main <b>operating</b> <b>system</b> for IBM PC compatible personal computers during the 1980s and the early 1990s, when it was gradually superseded by <b>operating</b> <b>systems</b> offering a graphical user interface (GUI), in various generations of the graphical Microsoft Windows <b>operating</b> <b>system.</b>|$|R
40|$|Virtualization is {{a virtual}} machine that is created {{in the form of}} {{software}} and used to make other <b>operating</b> <b>system</b> in the computer <b>operating</b> <b>systems.</b> Virtualiasasi example is VirtualBox, On this Project to install VirtualBox in computer <b>operating</b> <b>systems</b> and installation <b>operating</b> <b>system</b> Ubuntu 14. 04, Fedora 22 dan OpenSUSE 13. 1 into VirtualBox. The next stage of the third <b>operating</b> <b>system</b> already installed on VirtualBox can use the existing features in VirtualBox. Then install the database software on the Ubuntu <b>operating</b> <b>system,</b> installation of a networking software in Fedora <b>operating</b> <b>system</b> and software installation routines in the OpenSUSE <b>operating</b> <b>system.</b> PHPVirtualBox is Virtualization Software that functions the same as VirtualBox but it had excess <b>operating</b> <b>system</b> can display in the browser. To the end of the Project, display and run the <b>operating</b> <b>system</b> Ubuntu, Fedora and OpenSUSE in a web browser using PHPVirtualBox from the first computer to the second computer via a LAN cable...|$|R
50|$|Exokernel is an <b>operating</b> <b>system</b> kernel {{developed}} by the MIT Parallel and Distributed <b>Operating</b> <b>Systems</b> group, and also a class of similar <b>operating</b> <b>systems.</b>|$|R
50|$|See the {{comparison}} of real-time <b>operating</b> <b>systems</b> for a comprehensive list. Also, see the list of <b>operating</b> <b>systems</b> {{for all types of}} <b>operating</b> <b>systems.</b>|$|R
25|$|The {{alternative}} CP-67 {{system for}} the S/360-67 started a whole line of IBM <b>operating</b> <b>systems</b> focused {{on the concept of}} virtual machines. Other <b>operating</b> <b>systems</b> used on IBM S/360 series mainframes included systems developed by IBM: COS/360 (Compatibility <b>Operating</b> <b>System),</b> DOS/360 (Disk <b>Operating</b> <b>System),</b> TSS/360 (Time Sharing <b>System),</b> TOS/360 (Tape <b>Operating</b> <b>System),</b> BOS/360 (Basic <b>Operating</b> <b>System),</b> and ACP (Airline Control Program), as well as a few non-IBM systems: MTS (Michigan Terminal System), MUSIC (Multi-User System for Interactive Computing), and ORVYL (Stanford Timesharing System).|$|R
50|$|From an <b>operating</b> <b>system</b> {{perspective}} a DPE server infrastructure {{can exist}} on one server <b>operating</b> <b>system</b> (homogeneous server infrastructure) or exist as on a defined set of servers with different multiple <b>operating</b> <b>systems</b> (heterogeneous server infrastructure). The server instances or VMs provisioned by the DPE {{could be one}} specific server <b>operating</b> <b>system</b> or multiple server <b>operating</b> <b>systems.</b> Same idea for client systems instantiated by the DPE. The client instantiated by the DPE could be one or multiple client/desktop <b>operating</b> <b>systems.</b>|$|R
50|$|The {{alternative}} CP-67 {{system for}} the S/360-67 started a whole line of IBM <b>operating</b> <b>systems</b> focused {{on the concept of}} virtual machines. Other <b>operating</b> <b>systems</b> used on IBM S/360 series mainframes included systems developed by IBM: COS/360 (Compatibility <b>Operating</b> <b>System),</b> DOS/360 (Disk <b>Operating</b> <b>System),</b> TSS/360 (Time Sharing <b>System),</b> TOS/360 (Tape <b>Operating</b> <b>System),</b> BOS/360 (Basic <b>Operating</b> <b>System),</b> and ACP (Airline Control Program), as well as a few non-IBM systems: MTS (Michigan Terminal System), MUSIC (Multi-User System for Interactive Computing), and ORVYL (Stanford Timesharing System).|$|R
50|$|There is a {{computer}} industry security view that general public desktop operating systems(os) have greater risks as <b>operating</b> <b>systems</b> for cash dispensing machines than other types of <b>operating</b> <b>systems</b> like (secure) real-time <b>operating</b> <b>systems</b> (RTOS). RISKS Digest has many articles about ATM <b>operating</b> <b>system</b> vulnerabilities.|$|R
50|$|The usage {{share of}} desktop <b>operating</b> <b>systems</b> is the {{percentage}} of the <b>operating</b> <b>systems</b> (OS) used in computers (approximately market share) with so-called (retronym) desktop <b>operating</b> <b>system,</b> that also run on e.g. laptops. Originally the only computers running those <b>operating</b> <b>systems,</b> where desktop computers, while with the introduction of so-called new class of mobile <b>operating</b> <b>systems,</b> desktop got to be the part of the name of the former class of OSes. The computers running these OSes have the desktop metaphor style of GUI, unlike the mobile OSes. See also usage share of <b>operating</b> <b>systems</b> for breakdown of the share of desktop, mobile (and other styles of) <b>operating</b> <b>systems,</b> separately, and share of those all <b>operating</b> <b>systems</b> as part of across classes.|$|R
50|$|Bochs {{is mostly}} used for <b>operating</b> <b>system</b> {{development}} (when an emulated <b>operating</b> <b>system</b> crashes, {{it does not}} crash the host <b>operating</b> <b>system,</b> so the emulated OS can be debugged) and to run other guest <b>operating</b> <b>systems</b> inside already running host <b>operating</b> <b>systems.</b> It {{can also be used}} to run older software - such as PC games - which will not run on non-compatible, or too fast computers.|$|R
40|$|An {{instructional}} <b>operating</b> <b>system</b> is one {{intended for}} use in teaching courses in <b>operating</b> <b>systems.</b> Student programming assignments develop or enhance the instructional <b>operating</b> <b>system.</b> This paper presents {{an overview of the}} issues related to using <b>operating</b> <b>systems,</b> especially instructional ones, in coursework. We also present results of a survey we conducted to determine which instructional <b>operating</b> <b>systems</b> are in use at campuses in the United States...|$|R
