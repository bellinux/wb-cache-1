28|7360|Public
25|$|Alpha, {{originally}} {{known as}} Alpha AXP, is a 64-bit reduced instruction set computing (RISC) instruction set architecture (ISA) developed by Digital Equipment Corporation (DEC), designed to replace their 32-bit VAX <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) ISA. Alpha was implemented in microprocessors originally developed and fabricated by DEC. These microprocessors were most prominently {{used in a}} variety of DEC workstations and servers, which eventually formed the basis for almost all of their mid-to-upper-scale lineup. Several third-party vendors also produced Alpha systems, including PC form factor motherboards.|$|E
2500|$|A reduced {{instruction}} set computer, or RISC (pronounced 'risk', [...] ), is one whose {{instruction set}} architecture (ISA) has {{a set of}} attributes that allows it to have a lower cycles per instruction (CPI) than a <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC). Various suggestions have been made regarding a precise definition of RISC, but the general concept {{is that of a}} computer that has a small set of simple and general instructions, rather than a large set of complex and specialized instructions. Another common RISC trait is their load/store architecture, where memory is only accessed through specific instructions, rather than as a part of most instructions.|$|E
2500|$|Intel {{had tried}} unsuccessfully to push Apple to migrate the Macintosh {{platform}} to Intel chips. Apple concluded that Intel's CISC (<b>Complex</b> <b>Instruction</b> <b>Set</b> <b>Computer)</b> architecture ultimately {{would not be able}} to compete against RISC (Reduced Instruction Set Computer) processors. While the Motorola 68040 [...] offered the same features as the Intel 80486 and could on a clock-for-clock basis significantly outperform the Intel chip, the 486 had the ability to be clocked significantly faster without suffering from overheating problems, especially the clock-doubled i486DX2 which ran the CPU logic at twice the external bus speed, giving such equipped IBM compatible systems a significant performance lead over their Macintosh equivalents. Apple's product design and engineering did not help matters as they restricted the use of the '040 to their expensive Quadras for a time while the 486 was readily available to OEMs as well as enthusiasts who put together their own machines. In late 1991, as the higher-end Macintosh desktop lineup transitioned to the '040, Apple was unable to offer the '040 in their top-of-the-line PowerBooks until early 1994 with the PowerBook 500 series, several years after the first 486-powered IBM compatible laptops hit the market which cost Apple considerable sales. In 1993 Intel rolled out the Pentium processors as the successor to the 486, while the Motorola 68050 was never released, leaving the Macintosh platform a generation behind IBM compatibles in the latest CPU technology. In 1994, Apple abandoned Motorola CPUs for the RISC PowerPC architecture developed by the AIM alliance of Apple Computer, IBM, and Motorola. The Power Macintosh line, the first to use the new chips, proved to be highly successful, with over a million PowerPC units sold in nine months. However, in the long run, spurning Intel for the PowerPC was a mistake as the commoditization of Intel-architecture chips meant Apple couldn't compete on price against [...] "the Dells of the world".|$|E
40|$|Retargetable Instruction Scheduling for Pipelined Processors by David Gordon Bradlee Chairperson of the Supervisory Committee: Professor Susan J. Eggers Department of Computer Science and Engineering Retargetable code {{generators}} for <b>complex</b> <b>instruction</b> <b>set</b> <b>computers</b> (CISCs) {{have focused}} on sophisticated pattern matching code selection, because CISCs provide many machine instruction sequence choices. Recent pipelined processors, known as reduced <b>instruction</b> <b>set</b> <b>computers</b> (RISCs), provide fewer instruction sequence choices, but expose pipeline and functional unit costs to the compiler. For RISCs the compiler's emphasis must be shifted from code selection to instruction scheduling, resulting in code generation issues that are different than those for CISCs. In particular, the machine description language for a retargetable RISC compiler must contain scheduling requirements. Also, the interaction between register allocation and instruction scheduling is significant. This dissertation com [...] ...|$|R
5000|$|In early computers, {{memory was}} expensive, so {{minimizing}} {{the size of}} a program to make sure it would fit in the limited memory was often central. Thus the combined size of all the instructions needed to perform a particular task, the code density, was an important characteristic of any <b>instruction</b> <b>set.</b> <b>Computers</b> with high code density often have <b>complex</b> <b>instructions</b> for procedure entry, parameterized returns, loops, etc. (therefore retroactively named <b>Complex</b> <b>Instruction</b> <b>Set</b> <b>Computers,</b> CISC). However, more typical, or frequent, [...] "CISC" [...] instructions merely combine a basic ALU operation, such as [...] "add", with the access of one or more operands in memory (using addressing modes such as direct, indirect, indexed, etc.). Certain architectures may allow two or three operands (including the result) directly in memory or may be able to perform functions such as automatic pointer increment, etc. Software-implemented <b>instruction</b> <b>sets</b> may have even more <b>complex</b> and powerful <b>instructions.</b>|$|R
40|$|International Telemetering Conference Proceedings / October 28 - 31, 1996 / Town and Country Hotel and Convention Center, San Diego, CaliforniaDeutsche Telekom {{has been}} {{operating}} different communication satellites for several years. The Satellite Control Center (SCC) of Deutsche Telekom is located near Usingen, about 50 km northwest of Frankfurt/Main. The system has been under operation since {{the launch of the}} first flight model DFS in June 1989. The entire computer system was based on Digital Equipment Corporation (DEC) VAX type computers. The maintenance costs of these old <b>Complex</b> <b>Instruction</b> <b>Sets</b> <b>Computers</b> (CISC) were increased significantly during the last years. Due to the high operational costs Deutsche Telekom decided to exchange the operational computer system. Present-day information technology world uses more and more powerful Reduced <b>Instruction</b> <b>Set</b> <b>Computers</b> (RISC). These new designs allow operational costs to be reduced appreciably. The VAX type computers will be replaced by DEC Alpha AXP Computers. This paper describes the transition process from CISC to RISC computers in an operational realtime environment...|$|R
50|$|The Intel MCS-51 (commonly termed 8051) is an {{internally}} Harvard architecture, <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) instruction set, single chip microcontroller (ÂµC) series {{developed by}} Intel in 1980 {{for use in}} embedded systems. Intel's original versions were popular in the 1980s and early 1990s and enhanced binary compatible derivatives remain popular today.|$|E
50|$|Another {{principle}} {{was the use}} of very high-level complex {{instructions to}} be implemented in microcode. As an example, one of the instructions, , was a complete linkage editor. Other instructions were designed to support the internal data structures and operations of programming languages such as FORTRAN, COBOL, and PL/I. In effect, FS was designed to be the ultimate <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC).|$|E
50|$|In the past, {{microprocessor}} {{design technology}} evolved from <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) to {{reduced instruction set computer}} (RISC). In {{the early days}} of the computer industry, compiler technology did not exist and programming was done in assembly language. To make programming easier, computer architects created complex instructions which were direct representations of high level functions of high level programming languages. Another force that encouraged instruction complexity was the lack of large memory blocks.|$|E
40|$|This report {{makes the}} case that a well-designed Reduced <b>Instruction</b> <b>Set</b> <b>Computer</b> (RISC) can match, and even exceed, the {{performance}} and code density of existing commercial <b>Complex</b> <b>Instruction</b> <b>Set</b> <b>Computers</b> (CISC) while maintaining the simplicity and cost-effectiveness that underpins the original RISC goals. We begin by comparing the dynamic instruction counts and dynamic instruction bytes fetched for the popular proprietary ARMv 7, ARMv 8, IA- 32, and x 86 - 64 <b>Instruction</b> <b>Set</b> Architectures (ISAs) against the free and open RISC-V RV 64 G and RV 64 GC ISAs when running the SPEC CINT 2006 benchmark suite. RISC-V {{was designed as a}} very small ISA to support a wide range of implementations, and has a less mature compiler toolchain. However, we observe that on SPEC CINT 2006 RV 64 G executes on average 16 % more instructions than x 86 - 64, 3 % more instructions than IA- 32, 9 % more instructions than ARMv 8, but 4 % fewer instructions than ARMv 7. CISC x 86 implementations break up <b>complex</b> <b>instructions</b> into smaller internal RISC-like micro-ops, and the RV 64 G instruction count is within 2 % of the x 86 - 64 retired micro-op count. RV 64 GC, the compressed variant of RV 64 G, is the densest ISA studied, fetching 8 % fewer dynamic instruction bytes than x 86 - 64. We observed that much of the increased RISC-V instruction count is due to a small set of common multi-instruction idioms. Exploiting this fact, the RV 64 G and RV 64 GC effective instruction count can be reduced by 5. 4 % on average by leveraging macro-op fusion. Combining the compressed RISC-V ISA extension with macro-op fusion provides both the densest ISA and the fewest dynamic operations retired per program, reducing the motivation to add more instructions to the ISA. This approach retains a single simple ISA suitable for both low-end and high-end implementations, where high-end implementations can boost performance through microarchitectural techniques...|$|R
5000|$|<b>Complex</b> <b>instruction</b> <b>set</b> {{computing}} (CISC [...] ) is {{a processor}} design, where single instructions can execute several low-level operations (such as a load from memory, an arithmetic operation, and a memory store) or {{are capable of}} multi-step operations or addressing modes within single instructions. The term was retroactively coined in contrast to reduced <b>instruction</b> <b>set</b> <b>computer</b> (RISC) and has therefore become something of an umbrella term for everything that is not RISC, from large and complex mainframe computers to simplistic microcontrollers where memory load and store operations are not separated from arithmetic instructions.|$|R
50|$|Architectures {{with even}} less {{complexity}} have been studied, {{such as the}} minimal <b>instruction</b> <b>set</b> <b>computer</b> (MISC) and one <b>instruction</b> <b>set</b> <b>computer</b> (OISC). These are theoretically important types, but have not been commercialized.|$|R
50|$|An ISA may be {{classified}} {{in a number}} of different ways. A common classification is by architectural complexity. A <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) has many specialized instructions, some of which may only be rarely used in practical programs. A reduced instruction set computer (RISC) simplifies the processor by efficiently implementing only the instructions that are frequently used in programs, while the less common operations are implemented as subroutines, having their resulting additional processor execution time offset by infrequent use.|$|E
50|$|Alpha, {{originally}} {{known as}} Alpha AXP, is a 64-bit reduced instruction set computing (RISC) instruction set architecture (ISA) developed by Digital Equipment Corporation (DEC), designed to replace their 32-bit VAX <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) ISA. Alpha was implemented in microprocessors originally developed and fabricated by DEC. These microprocessors were most prominently {{used in a}} variety of DEC workstations and servers, which eventually formed the basis for almost all of their mid-to-upper-scale lineup. Several third-party vendors also produced Alpha systems, including PC form factor motherboards.|$|E
50|$|The {{design of}} {{instruction}} sets {{is a complex}} issue. There were two stages in history for the microprocessor. The first was the CISC (<b>Complex</b> <b>Instruction</b> <b>Set</b> <b>Computer),</b> which had many different instructions. In the 1970s, however, places like IBM did research and found that many instructions in the set could be eliminated. The result was the RISC (Reduced Instruction Set Computer), an architecture that uses a smaller set of instructions. A simpler instruction set may offer the potential for higher speeds, reduced processor size, and reduced power consumption. However, a more complex set may optimize common operations, improve memory and cache efficiency, or simplify programming.|$|E
50|$|The acronym ZISC {{alludes to}} reduced <b>instruction</b> <b>set</b> <b>computer</b> (RISC).|$|R
50|$|Some of {{the first}} digital <b>computers</b> {{implemented}} with <b>instruction</b> <b>sets</b> were by modern definition Minimal <b>Instruction</b> <b>Set</b> <b>computers.</b>|$|R
50|$|A one <b>instruction</b> <b>set</b> <b>computer</b> is {{a machine}} which {{supports}} only one operation.|$|R
5000|$|A reduced {{instruction}} set computer, or RISC (pronounced 'risk', [...] ), is one whose {{instruction set}} architecture (ISA) has {{a set of}} attributes that allows it to have a lower cycles per instruction (CPI) than a <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC). Various suggestions have been made regarding a precise definition of RISC, but the general concept {{is that of a}} computer that has a small set of simple and general instructions, rather than a large set of complex and specialized instructions. Another common RISC trait is their load/store architecture, where memory is only accessed through specific instructions, rather than as a part of most instructions.|$|E
5000|$|Note {{that there}} is no {{generally}} accepted way of naming the various addressing modes. In particular, different authors and computer manufacturers may give different names to the same addressing mode, or the same names to different addressing modes. Furthermore, an addressing mode which, in one given architecture, is treated as a single addressing mode may represent functionality that, in another architecture, is covered by two or more addressing modes. For example, some <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) architectures, such as the Digital Equipment Corporation (DEC) VAX, treat registers and literal or immediate constants as just another addressing mode. Others, such as the IBM System/360 and its successors, and most reduced instruction set computer (RISC) designs, encode this information within the instruction. Thus, the latter machines have three distinct instruction codes for copying one register to another, copying a literal constant into a register, and copying the contents of a memory location into a register, while the VAX has only a single [...] "MOV" [...] instruction.|$|E
5000|$|Intel {{had tried}} unsuccessfully to push Apple to migrate the Macintosh {{platform}} to Intel chips. Apple concluded that Intel's CISC (<b>Complex</b> <b>Instruction</b> <b>Set</b> <b>Computer)</b> architecture ultimately {{would not be able}} to compete against RISC (Reduced Instruction Set Computer) processors. While the Motorola 68040 offered the same features as the Intel 80486 and could on a clock-for-clock basis significantly outperform the Intel chip, the 486 had the ability to be clocked significantly faster without suffering from overheating problems, especially the clock-doubled i486DX2 which ran the CPU logic at twice the external bus speed, giving such equipped IBM compatible systems a significant performance lead over their Macintosh equivalents. Apple's product design and engineering did not help matters as they restricted the use of the '040 to their expensive Quadras for a time while the 486 was readily available to OEMs as well as enthusiasts who put together their own machines. In late 1991, as the higher-end Macintosh desktop lineup transitioned to the '040, Apple was unable to offer the '040 in their top-of-the-line PowerBooks until early 1994 with the PowerBook 500 series, several years after the first 486-powered IBM compatible laptops hit the market which cost Apple considerable sales. In 1993 Intel rolled out the Pentium processors as the successor to the 486, while the Motorola 68050 was never released, leaving the Macintosh platform a generation behind IBM compatibles in the latest CPU technology. In 1994, Apple abandoned Motorola CPUs for the RISC PowerPC architecture developed by the AIM alliance of Apple Computer, IBM, and Motorola. The Power Macintosh line, the first to use the new chips, proved to be highly successful, with over a million PowerPC units sold in nine months. However, in the long run, spurning Intel for the PowerPC was a mistake as the commoditization of Intel-architecture chips meant Apple couldn't compete on price against [...] "the Dells of the world".|$|E
5000|$|A MISC CPU cannot {{have one}} {{instruction}} {{as that is}} a one <b>instruction</b> <b>set</b> <b>computer</b> ...|$|R
5000|$|A MISC CPU cannot {{have zero}} {{instructions}} {{as that is}} a zero <b>instruction</b> <b>set</b> <b>computer.</b>|$|R
5000|$|However, the CPU {{could only}} execute {{a limited number}} of simple instructions. A typical CPU of the era had a <b>complex</b> <b>instruction</b> <b>set,</b> which {{included}} <b>instructions</b> to handle all the normal [...] "housekeeping" [...] tasks such as memory access and input/output. Cray instead implemented these instructions in separate, simpler processors dedicated solely to these tasks, leaving the CPU with a much smaller <b>instruction</b> <b>set.</b> (This was the first of what later came to be called reduced <b>instruction</b> <b>set</b> <b>computer</b> (RISC) design.) By allowing the CPU, peripheral processors (PPs) and I/O to operate in parallel, the design considerably improved the performance of the machine. Under normal conditions a machine with several processors would also cost a great deal more. Key to the 6600's design was to make the I/O processors, known as peripheral processors (PPs), as simple as possible. The PPs were based on the simple 12-bit CDC 160-A, which ran much slower than the CPU, gathering up data and transmitting it as bursts into main memory at high speed via dedicated hardware.|$|R
40|$|The {{development}} of a 32 -bit <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) microprocessor with about 200000 transistors is described. The chip, called ALA, has been fabricated on a 1 -Î¼m double-layer metal CMOS technology and it runs at 10 MHz. The microprocessor includes a virtual memory management unit (VMMU) and three arithmetic logic units (ALUs) : integer, floating point, and decimal. It was completed in 15 months {{by a team of}} ten designers, and required the {{development of}} a new design methodolog...|$|E
40|$|In {{response}} to a request from the DoD, an analysis of a Reduced Instruction Set Computer (RISC) processor, the MIPS M/ 500, was performed. All aspects of processor capabilities and support software were evaluated, tested, and compared to familiar <b>Complex</b> <b>Instruction</b> <b>Set</b> <b>Computer</b> (CISC) architectures. In all cases, the RISC computer and its support software performed better than a comparable CISC computer. This report provides the general and specific results of these analyses, along with the recommendation that the DoD and other government agencies seriously consider this or other RISC architectures as a highly viable and attractive alternative to the more familiar but less efficient CISC architectures...|$|E
40|$|The paper {{explores the}} recent {{architecture}} evaluations and related issues and compares NISC (No Instruction Set Computer) features {{to those of}} CISC (<b>Complex</b> <b>Instruction</b> <b>Set</b> <b>Computer)</b> and RISC (Reduced Instruction Set Computer) processors. It has been observed that the complexities with embedded systems have increased manifold and the design community has been searching a suitable method that can handle such complexities with dual aims of (i) increased efficiency and (ii) reduction in time to introduce the product in the market that increase designer productivity without sacrificing the design quality. The paper presents a review of different processors and compares the variation in their utility and desig...|$|E
3000|$|... [...]. The module is {{equipped}} with a low-power 32 -bit reduced <b>instruction</b> <b>set</b> <b>computer</b> (RISC) central processing unit (CPU)[25].|$|R
50|$|POWER is {{a reduced}} <b>instruction</b> <b>set</b> <b>computer</b> (RISC) <b>instruction</b> <b>set</b> {{architecture}} (ISA) developed by IBM. The name is {{an acronym for}} Performance Optimization With Enhanced RISC.|$|R
40|$|AbstractThe Dynamic Reconfiguration Technology {{provides}} powerful technological {{support to}} achieve high-performance general-purpose CPU system in resolving {{the application of}} diversity issues, meanwhile improving the enhanced on-chip resource utilization, reducing {{the complexity of the}} design, cost and power consumption. The dissertation designs the integer part of the Intel SSE <b>Instruction</b> <b>Set</b> computing Reduced <b>Instruction</b> <b>Set</b> <b>Computer</b> CPU (RISC_CPU) and dynamically self-reconfigurable DISC_CPU, combining the Dynamic Reconfiguration Technology with the general-purpose CPU technology, and achieves Dynamic <b>Instruction</b> <b>Set</b> <b>Computer</b> CPU (DISC_CPU) supporting for multiple SSE (Streaming SIMD Extensions) <b>Instruction</b> <b>Set</b> on a single-chip FPGA...|$|R
40|$|This paper {{presents}} {{an investigation into}} the nature of advanced high performance <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) processors, reduced instruction set computer (RISC) processors and digital signal processing (DSP) devices. Several DSP and control algorithms of regular and irregular nature are considered to explore the real-time characteristics of the different processors. The algorithms are implemented on several CISC, RISC and DSP processors. The hardware and software resources and capabilities of the processors and the characteristics of the algorithms are discussed to provide a matching between the algorithms and the architectures. Finally, a comparison {{of the results of the}} implementations is made, on the basis of real-time computation performance, to lead to merits of development of fast processing techniques for real-time DSP and control applications...|$|E
40|$|A program mode is {{a regular}} {{trajectory}} of the execution of a program that {{is determined by the}} values of its input variables. By exploiting program modes, we may make worst-case execution time (WCET) analysis more precise. This paper presents a novel method to automatically find program modes and calculate the WCET estimates of programs. First, the modes of a program will be identified automatically by mode-relevant program slicing, and the precondition will be calculated for each mode using a path-wise test data generation method. Then, for each feasible mode, we show how to calculate its WCET estimate for modern reduced instruction set computer (RISC) processors with caches and pipelines and for traditional <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> (CISC) processors. We also present a method to obtain the symbolic expression for each mode for CISC processors. The experimental results show the effectiveness of the method...|$|E
40|$|Graduation date: 1990 The {{objective}} of this thesis is to describe the design and implementation of a VSLI {{reduced instruction set computer}} (RISC). The RISC machine constitutes a new style of computer architecture. It differs significantly from the <b>complex</b> <b>instruction</b> <b>set</b> <b>computer</b> architectures (CISC) of the past. RISC architectures are characterized by their high performance, simple instruction sets, minimal hardware requirements, and their ability to support block structured programming languages adequately. In this thesis a 16 -bit single chip RISC was designed using the Genesil Silicon Compiler. It has 14 instructions, an overlapped register window structure, and on chip memory. It can execute most instructions in a single clock cycle, including procedure calls and returns. The peak performance of this chip is approximately 6 MIPS. The chip was implemented in 2 micron CMOS technology. The chip size is 516. 54 X 514. 27 mils. This chip has not been fabricated...|$|E
5000|$|... (Not to be {{confused}} with multiple <b>instruction</b> <b>set</b> <b>computer,</b> also abbreviated MISC, such as the HLH Orion or the OROCHI VLIW processor.) ...|$|R
50|$|Their design uses a fixed {{architecture}} - {{it requires}} {{changes in the}} wiring if the <b>instruction</b> <b>set</b> is modified or changed.This architecture is preferred in reduced <b>instruction</b> <b>set</b> <b>computers</b> (RISC) as they use a simpler <b>instruction</b> <b>set.</b>|$|R
50|$|A one <b>instruction</b> <b>set</b> <b>computer</b> (OISC), {{sometimes}} called an ultimate reduced <b>instruction</b> <b>set</b> <b>computer</b> (URISC), is an abstract machine that uses only one instructionobviating {{the need for}} a machine language opcode. With a judicious choice for the single instruction and given infinite resources, an OISC is capable of being a universal computer {{in the same manner as}} traditional computers that have multiple instructions. OISCs have been recommended as aids in teaching computer architecture and have been used as computational models in structural computing research.|$|R
