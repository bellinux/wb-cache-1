32|166|Public
5000|$|... #Subtitle level 3: M855A1 Familiarization Shoot and <b>Compatibility</b> <b>Check</b> ...|$|E
5000|$|Dangerous goods {{data base}} (IBC, CHRIS Code) {{printout}} of substance information page, cargo segregation and <b>compatibility</b> <b>check</b> ...|$|E
50|$|Extensions contain XML files bearing {{metadata}} {{utilized by}} the mechanism which controls add-on installation. Among other things, this file identifies maximum and minimum {{versions of a}} Mozilla project application on which the add-on may be used. If an attempt is made to install the add-on on a version outside of this range, it will install but will be disabled. The success of a formal <b>compatibility</b> <b>check</b> is no guarantee the add-on will work, however. It is even possible to override the <b>compatibility</b> <b>check</b> using various extensions.|$|E
50|$|A small {{subset of}} code was {{programmed}} in 8086 assembly language. The assembler used had a preprocessor that imported identifiers from the COMPOOL, allowing type <b>compatibility</b> <b>checking</b> between PASCAL and assembly.|$|R
50|$|JavaScript editor {{features}} comprise syntax highlighting, refactoring, code completion {{for native}} objects and functions, generation of JavaScript class skeletons, generation of Ajax callbacks from a template; and automatic browser <b>compatibility</b> <b>checks.</b>|$|R
25|$|The Airbus A380 first {{landed at}} Logan International Airport for <b>compatibility</b> <b>checks</b> on February 8, 2010. On March 26, 2017, British Airways began flying the A380 to Logan, {{operating}} the aircraft {{three times per}} week.|$|R
5000|$|The X1541 cables allow (full {{emulation}} of? /) copying to {{and from}} the Commodore 1541 disk drive. The realtime requirements for emulating the 1541 disk drive are exceptionally hard, and a variety of cable flavors have been constructed to improve compatibility with multi-tasking systems and faster PCs than the Pentium to some degree. For <b>compatibility,</b> <b>check</b> the documentation of each application, or confer the reference. The X1541 cable is available through both building instructions and shops. The original X1541 cable was designed in 1992 by Leopoldo Ghielmetti for use with the X1541 software.|$|E
50|$|Alongside the {{existing}} WinPE-based Windows Setup (which {{is used for}} installations that are initiated by booting from DVD, USB, or network), Upgrade Assistant is offered to provide a simpler and faster process for upgrading to Windows 8 from previous versions of Windows. The program runs a <b>compatibility</b> <b>check</b> to scan the device's hardware and software for Windows 8 compatibility, and then allows the user to purchase, download, generate installation media with a DVD or USB flash drive and install Windows 8. The new installation process also allows users to transfer user data into a clean installation of Windows. A similar program, branded as Windows 8 Setup, is used for installations where the user already has a product key.|$|E
50|$|Configuration {{of these}} {{surfaces}} is done through a pixel format selection process where different compatible layers of rendering information are combined {{to form a}} framebuffer. Examples of such layers are color buffers, transparency buffers (alpha), stencil buffers, and depth buffers. The CGL function CGLChoosePixelFormat is used to perform this buffer <b>compatibility</b> <b>check.</b> CGLChoosePixelFormat will, based on input parameters and their scoring policy, choose a pixel format that represents a compatible buffer configuration that {{is supported by the}} underlying renderer that will be used to process graphics commands. Renderers may be either hardware based, such that they correspond to graphics cards installed in the system or they may be software based, where the main CPU of the system handles all of the graphics command processing and final rasterization work.|$|E
40|$|Embedded {{software}} {{systems are}} highly configurable and consist of many software components in different variants and versions. However, component updates or upgrades often result in unpredictable incompatibilities with its environment. Existing research addresses this challenge by employing formal methods with a fixed set of encoded static <b>compatibility</b> <b>checks,</b> making {{it nearly impossible}} for engineers to add new or modify existing ones. This paper presents a highly adaptable infrastructure to define constraints for <b>compatibility</b> <b>checks.</b> The underlying approach transforms software components into instances of a C&C meta-model, enriched with OCL compatibility constraints at runtime, then evaluated by a solver. The result is transformed back into a C&C model showing compatibility or incompatibility. The easy to integrate infrastructure is based on industrial requirements and allows to add, modify or delete constraints without restarting the tool infrastructure...|$|R
40|$|International audienceIn {{distributed}} systems, {{asynchronous communication}} is {{often viewed as}} a whole whereas there are actually many different interaction protocols whose properties {{are involved in the}} compatibility of peer compositions. A hierarchy of asynchronous communication models, based on refinements, is established and proven with the TLA+ Proof System. The work serves as a first step {{in the study of the}} substituability of the communication models when it comes to <b>compatibility</b> <b>checking...</b>|$|R
40|$|Web service {{policies}} {{capture the}} capabilities and requirements of Web services from both functional and nonfunctional perspectives. Policies of a Web service govern and ensure the runtime {{consistency of the}} service, i. e., people or services interacting with this service are only allowed to perform legitimate actions. When composing Web services, policies of the participated Web services have to be compatible {{in order to make}} sensible compositions. Unfortunately, due to heterogeneity of policy specification languages, it is difficult to compare policies of different Web services directly. In this paper, we propose an approach for <b>compatibility</b> <b>checking</b> of Web service policies specified in difference languages. In particular, our approach applies the model-oriented specification from the Vienna Development Method (VDM++). An executable formal model of policy languages is represented in VDM++ and different policies are then translated to this VDM++ model for <b>compatibility</b> <b>checking.</b> Our approach has been validated by a prototype with different Web service policy languages such as WSPL and WS-Policy. Quan Z. Sheng, Jian Yu, Zakaria Maamar, Wei Jiang, and Xitong Li[URL]...|$|R
40|$|Identification of the {{aerodynamic}} {{characteristics of}} an aircraft requires accurate {{information about the}} actual flow properties like airspeed, angle of attack, angle of sideslip, static pressure and temperature. This report contains {{the results of a}} data <b>compatibility</b> <b>check</b> being applied to flight test data from DLR’s research aircraft A 320 -ATRA...|$|E
40|$|International audienceThe {{methodology}} presented {{can improve}} {{safe and secure}} software development. The SNG Router case study extends aeronautical network capabilities. Additional tool chains to complete formal checking toolkit is also presented. A <b>compatibility</b> <b>check</b> is performed between methodology and D 0178 C. An extension of network security requirements for router SNG is presented...|$|E
40|$|Software {{components}} {{can give}} rise to several kinds of architectural mismatches when assembled together in order to form a software system. A formal description of {{the architecture of the}} resulting component based software system may help to detect such architectural mismatches and to single out the components that cause the mismatches. In this paper we concentrate on deadlock related architectural mismatches arising from three different causes that we identify: incompatibility between two components due to a single interaction, incompatibility between two components due to the combination of several interactions, and lack of interoperability among a set of components forming a cyclic topology. We develop a process algebra based architectural description language called PADL, which deals with all the three causes through an architectural <b>compatibility</b> <b>check</b> and an architectural interoperability check relying on standard observational equivalences. The adequacy of the architectural <b>compatibility</b> <b>check</b> is assessed on a compressing proxy system, while the adequacy of the architectural interoperability check is assessed on a cruise control system. We then address the issue of scaling the architectural compatibility and interoperability checks to architectural styles through an extension of PADL. The formalization of an architectural style is complicated by the presence of two degrees of freedom within the se...|$|E
5000|$|Brower <b>Compatibility</b> - <b>check</b> {{cross-browser}} <b>compatibility</b> of HTML, CSS and JavaScript (i.e. find {{code that}} doesn't work in all browsers) ...|$|R
30|$|The {{component}} models {{described above}} offer runtime support for introspection and reconfiguration. However, while the introspection {{services provided by}} these models may expose functional details, they do not provide a semantic description of the services offered by components, {{making it difficult to}} discover, reconfigure or reuse third-party components on the fly. In addition, these component models provide no support for <b>compatibility</b> <b>checking</b> between interfaces, which increases the burden on the developer and the scope for errors in application composition.|$|R
30|$|In Kane et al.’s review, {{the issues}} that require {{additional}} attention included dose adjustment for decreased kidney and liver function, prevention and monitoring of ADRs, drug interactions caused by complex drug regimens, nutritional assessment due to poor oral intake and change in calorie needs, <b>compatibility</b> <b>checks</b> due to a patient’s extensive list of intravenous medications, and treatment and prevention of life-threatening infections, which {{are the same as}} the intervention issues encountered in the present study (Kane et al. 2003).|$|R
40|$|Preliminary {{estimates}} of aerodynamic parameters of an advanced fighter aircraft {{were obtained from}} flight data of different values of the angle of attack from 8 to 54 deg. The data were analyzed by a stepwise regression with the ordinary least squares technique. The estimated stability and control derivatives are plotted against the angle of attack and compared with wind tunnel measurement and previous flight results. Also included is the data <b>compatibility</b> <b>check</b> of measured data. The effect of various input forms on the estimates is demonstrated in two examples using simulated data...|$|E
40|$|A {{specific}} {{scale factor}} in Robertson-Walker metric {{with the prospect}} of giving the overall cosmic history in a unified picture roughly is considered. The corresponding energy-momentum tensor is identified as that of two scalar fields where one plays the roles of both inflaton and dark matter while the other accounts for dark energy. A preliminary phenomenological analysis gives an order of magnitude agreement with observational data. The resulting picture may be considered as a first step towards a single model for all epochs of cosmic evolution. Comment: 25 pages. The model is given in 3 pages. The rest is <b>compatibility</b> <b>check</b> with observations and supplementary materia...|$|E
40|$|International audienceInterface automata are {{light-weight}} {{models that}} capture the temporal interface behavior of software components. They {{have the ability}} to model both the input requirements and the output behavior of a component. They support the <b>compatibility</b> <b>check</b> between interface models to ensure a correct interaction between components and they adopt an alternating simulation approach to design refinement. In this paper, we extend our previous works on checking interface automata interoperability by adapting their alternating refinement relation to the action semantics. We show the relation between pre and post-conditions of transitions in the abstract version of an interface and their corresponding ones in its concrete version. We illustrate our extensions by a case study of the CyCab car component-based system...|$|E
40|$|Abstract. This {{paper is}} meant to motivate tools and methods {{research}} in the field of model-based embedded software development. In particular, we include usage scenarios to describe how an automated model assembler called a model compiler could support automotive embedded control systems development. We describe some desired characteristics and features of the envisioned model compiler and place particular emphasis on support for model <b>compatibility</b> <b>checking.</b> Finally, we describe characteristics of model components that are commonly used in practice. ...|$|R
40|$|This article {{extends the}} inverse Bayes {{formulae}} (IBF) {{in the product}} measurable space (PMS) to the non-product measurable space (NPMS) and focuses on their applications in <b>compatibility</b> <b>checking</b> and Bayesian computation. We show that IBF hold only in PMS and derive the modified IBF in NPMS. The potential of using IBF in obtaining exact solution is demonstrated via problems in distribution theory and several Bayesian missing data models. © 2003 Elsevier Science B. V. All rights reserved. link_to_subscribed_fulltex...|$|R
40|$|Abstract Conflict {{problem is}} one of the major issues in Collaborative CAD systems. Based on a {{flexible}} multi-user interaction framework for replicated Collaborative Solid Modeling (CSM) systems, typical conflict issues are researched. The casualty conflict was discussed at first. Then, the name conflict was analyzed. Finally, <b>compatibility</b> <b>checking</b> for operations that may result in possible conflicts is studied. Based the analysis, some interesting results are discovered. The results will be helpful to utilize the potential advantages of replicated CSM systems in future...|$|R
40|$|AbstractA general {{algorithm}} is provided {{for determining the}} compatibility among full conditionals of discrete random variables with structural zeros. The {{algorithm is}} scalable {{and it can be}} implemented in a fairly straightforward manner. A MATLAB program is included in the Appendix and therefore, it is now feasible to check the compatibility of multi-dimensional conditional distributions with constrained supports. Rather than the linear equations in the restricted domain of Arnold et al. (2002) [11] Tian et al. (2009) [16], the approach is odds-oriented and it is a discrete adaptation of the <b>compatibility</b> <b>check</b> of Besag (1994) [17]. The method naturally leads to the calculation of a compatible joint distribution or, in the absence of compatibility, a nearly compatible joint distribution. Besag’s [5] factorization of a joint density in terms of conditional densities is used to justify the algorithm...|$|E
40|$|International audienceWeb {{services}} {{composition is}} an emerging paradigm for enabling application integration {{within and across}} organizational boundaries. In this context, we propose an approach based on Symbolic Observation Graphs (SOG) allowing to decide whether two (or more) web services can cooperate safely. The compatibility between two web services {{is defined by the}} well known soundness property on open workflow nets. This property guarantees the absence of anomalies (e. g. deadlock) that can appear after composition. We propose to abstract the concrete behavior of a web service using a SOG and show how composition of web services as well as the <b>compatibility</b> <b>check</b> can be achieved through the composition of their abstractions (i. e. SOGs). This approach allows to respect the privacy of the services since SOGs are based on collaborative activities only and hide the internal structure and behavior of the corresponding service...|$|E
40|$|Component Based Development is {{considered}} to be a promising technology to cure the software crisis. However, until now designing and developing component-based applications turns out to be very hard. Current component based development not only involves a component configuration phase, but also writing a lot of glue-code. Much of the existing glue-code in current systems is written to "hack" components together instead of following a careful design. In this paper we introduce a component composition methodology based on the concept of composition patterns. A composition pattern describes an interaction between a set of roles using an extended sequence chart. It serves as a bridge between the design and the implementation. We further propose a component documentation and a set of algorithms based on finite automata theory to perform an automatic <b>compatibility</b> <b>check</b> and glue-code generation to support this methodology...|$|E
40|$|Abstract. Reuse of high {{confidence}} subsystems {{depends on}} their appropriate modelling and documentation. This paper discusses the different aspects {{that have to be}} considered when modelling a system and its subsystems. We propose a concrete artefact model for integrated reuse from requirements to technical architecture, which satisfies documentation demands with respect to functionality and the context assumed by the subsystem. Based on the artefact model, we describe the steps for conformity and <b>compatibility</b> <b>checking</b> at the development stage of subsystem integration and/or reuse. ...|$|R
30|$|The {{property}} of global <b>compatibility</b> is <b>checked</b> between the spaces Y_δ^* and M_δ. This {{results in the}} existence of an Inf-Sup condition on the form b_δ^*(·,·).|$|R
40|$|The {{process of}} {{component}} integration for distributed application sofrware development requires identifying the candidate components and performing <b>compatibility</b> <b>checks</b> {{based on the}} functional as well as non-functional requirements of the target application sofhvare. Since these requirements vary, {{it is important that}} distributed components themselves provide a set of specific services to facilitate component integration. In this paper, an approach to component integration for distributed application software is given. An object-oriented distributed component framework and a distributed connector model are presented to facilitate component integration...|$|R
40|$|A general {{algorithm}} is provided {{for determining the}} compatibility among full conditionals of discrete random variables with structural zeros. The {{algorithm is}} scalable {{and it can be}} implemented in a fairly straightforward manner. A MATLAB program is included in the Appendix and therefore, it is now feasible to check the compatibility of multi-dimensional conditional distributions with constrained supports. Rather than the linear equations in the restricted domain of Arnold etÂ al. (2002) [11] Tian etÂ al. (2009) [16], the approach is odds-oriented and it is a discrete adaptation of the <b>compatibility</b> <b>check</b> of Besag (1994) [17]. The method naturally leads to the calculation of a compatible joint distribution or, in the absence of compatibility, a nearly compatible joint distribution. Besag's [5] factorization of a joint density in terms of conditional densities is used to justify the algorithm. Consecutive site Full conditionals Geometric average Incidence set Nearly compatible Odds Path...|$|E
40|$|AbstractDuring the {{lifecycle}} of mechatronic manufacturing systems, repeatedly {{exchanges of}} different system elements {{have to be}} conducted. These system elements can be either single discipline-specific components, or modules composed of components or further modules. In order to ensure the elements’ compatibility and the system's functionality, which must comply with the specification after the exchange, a model-based analysis of the change influences is presented in this paper. A SysML-based modeling approach is combined with the formal representation of the model in an OWL ontology to conduct the required <b>compatibility</b> <b>check.</b> By that, the disciplines involved in the engineering process, e. g. mechanics, electrics/electronics and software, can be modeled and taken into account {{for the analysis of}} change influences. Thus, this paper contributes to the domain of manufacturing systems by providing a meta model for the interdisciplinary modeling of manufacturing systems {{on the one hand and}} by defining a corresponding formal representation intended to ensure system elements’ compatibility on the other hand...|$|E
40|$|Architectural {{description}} {{languages are}} {{a useful tool}} for modeling complex software systems at a high level of abstraction and, if based on formal methods, for enabling the early verification of various properties among which correct component coordination. This is the case with process algebraic architectural description languages, as they have been equipped with several techniques for verifying the absence of coordination mismatches in the case of synchronous communications. The objective of this paper is twofold. On the modeling side, we show how to enhance the expressiveness of a typical process algebraic architectural description language by including the capability of representing non-synchronous communications, {{in such a way that}} the usability of the original language is preserved. On the analysis side, we show how to modify the <b>compatibility</b> <b>check</b> for acyclic topologies and the interoperability check for cyclic topologies, in such a way that both checks can still be applied in the presence of non-synchronous communications...|$|E
40|$|Abstract. Surveying {{results from}} [5] and [6], we motivate and {{introduce}} {{the theory behind}} formalizing rich interfaces for software and hardware components. Rich interfaces specify the protocol aspects of component interaction. Their formalization, called interface automata, permits a compiler to <b>check</b> the <b>compatibility</b> of component interaction protocols. Interface automata support incremental design and independent implementability. Incremental design means that the <b>compatibility</b> <b>checking</b> of interfaces can proceed for partial system descriptions, without knowing the interfaces of all components. Independent implementability means that compatible interfaces can be refined separately, while still maintaining compatibility. ...|$|R
40|$|Abstract. Composing {{services}} {{makes sense}} {{only if they}} are compatible, i. e. composition does not lead to problems such as livelocks or deadlocks. In general, <b>compatibility</b> can be <b>checked</b> using state space explorations on any kind of formal models of services. Petri nets, one of the formal models in use, offer a rich theory for reasoning without exploring a state space. Among the techniques is the so-called state equation which forms a linear algebraic necessary condition for reachability of states. In this article, we show how the state equation can be applied for a necessary condition for compatibility. This way, the number of expensive state space based <b>compatibility</b> <b>checks</b> can be drastically reduced. The condition can be applied even if compatibility is achieved through the construction of a behavioral adapter (mediator). ...|$|R
40|$|International audienceIn {{this paper}} a new {{methodology}} {{to support the}} development process of safety-critical systems with contracts is described. The meta-model of Heterogeneous Rich Component (HRC) is extended to a Common System Meta-Model (CSM) that benefits from the semantic foundation of HRC and provides analysis techniques such as <b>compatibility</b> <b>checks</b> or refinement analyses. The idea of viewpoints, perspectives, and abstraction levels is discussed in detail to point out how the CSM supports separation of concerns. An example is presented to detail the transition concepts between models. From the example we conclude that our approach proves valuable and supports the development process...|$|R
