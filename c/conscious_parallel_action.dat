0|407|Public
40|$|Along {{with the}} {{progress}} of the micro-electronics technology, various types of multi-processor systems have been developed experimentally, and various types of representations of parallel algorithms have been adopted on trial. In this paper, we attempt to classify the types of parallel algorithms from the viewpoint of the composition of <b>actions</b> executable in <b>parallel</b> (we call them <b>parallel</b> <b>actions</b> in short). Three types of them are as follows. 1) the number of <b>parallel</b> <b>actions</b> is known from the source program. 2) some <b>parallel</b> <b>actions</b> are created or deleted depending on the execution of one action. 3) the number of the <b>parallel</b> <b>actions</b> is changeable dynamically depending on some processing in the past. From this classification we can derive some suggestion concerning the programming language suitable to parallel algorithms and the multi-processor system being able to execute these algorithms...|$|R
50|$|The {{strategy}} was {{a course of}} <b>parallel</b> <b>action,</b> the revolutionary and constitutional wings, a secret movement and an open movement, to run in tandem.|$|R
50|$|Skai Book: The {{publishing}} {{house of the}} group. It was created in July 2008. Its publications are connected with the programs of Skai TV or with the <b>parallel</b> <b>actions</b> of the group.|$|R
5000|$|The term [...] "recovering Catholic" [...] {{is used by}} {{some former}} {{practicing}} Roman Catholics to describe their religious status. The {{use of the term}} implies that the person considers their former Catholicism to have been a negative influence on their life, to be [...] "recovered" [...] from. The term first came into use in the 1980s. The term is sometimes used with humorous intent, with a <b>conscious</b> <b>parallel</b> being drawn to the 12-step recovery programs often used by those recovering from addictions, although practicing Catholics often find the term provocative.|$|R
40|$|Multi-agent systems often exhibit rich {{parallelism}} among agents. It {{is desirable}} in a multi-agent planner to explicitly represent <b>parallel</b> <b>actions.</b> This paper presents an approach for generating parallel execution plans {{based on the}} planning graph analysis. Instead of representing a planning problem by STRIPS operators, we model multi-agent planning domains using Predicate/Transition (PrT) nets (a high-level formalism of Petri nets), which are well suited for capturing dynamic behaviors of concurrent systems. We demonstrate that the planning graph analysis is adaptable {{for the analysis of}} PrT nets. Based on the planning graph analysis of a PrT net, a parallel plan with explicit representation of <b>parallel</b> <b>actions</b> can be automatically generated...|$|R
40|$|The propositional {{contingent}} planner ZANDER solves finitehorizon, partially observable, probabilistic planning {{problems at}} state-of-the-art-speeds by converting the planning problem to a stochastic satisfiability (SSAT) problem and solving that problem instead (Majercik 2000). ZANDER obtains these results using a relatively inefficient SSAT encoding {{of the problem}} (a linear action encoding with classical frame axioms). We describe and analyze three alternative SSAT encodings for probabilistic planning problems: a linear action encoding with simple explanatory frame axioms, a linear action encoding with complex explanatory frame axioms, and a <b>parallel</b> <b>action</b> encoding. Results on a suite of test problems indicate that linear action encodings with simple explanatory frame axioms and <b>parallel</b> <b>action</b> encodings show particular promise, improving ZANDER’s efficiency {{by as much as}} three orders of magnitude...|$|R
40|$|The {{specification}} and modelling {{of complex}} software systems request for formal methods. We use these methods to describe sequentiell and <b>parallel</b> <b>actions.</b> The method of algebraic specification of abstract datatypes {{is suitable for}} the description of sequentiell <b>actions</b> of datastructures. <b>Parallel</b> <b>actions</b> can be very good described with petri nets. Therefore in our approach and our tool SMARAGD (Specification, Modelling and Reachability Analysis Graphical Development system for High-level Petri Nets) we combine the methods of algebraic specification and petri nets. Furthermore this paper describes the SMARAGD-analyzer which includes an automatically reachability analysis. We conclude with {{a comparison of the}} SMARAGD-tool with other petri net tools and an overview about future developments of SMARAGD. (orig.) SIGLEAvailable from TIB Hannover: ZA 5141 (5246) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDEGerman...|$|R
40|$|Despite their near dominance, {{heuristic}} state search planners still {{lag behind}} disjunctive planners {{in the generation}} of parallel plans in classical planning. The reason is that directly searching for parallel solutions in state space planners would require the planners to branch on all possible subsets of <b>parallel</b> <b>actions,</b> thus increasing the branching factor exponentially...|$|R
25|$|ALGOL 68 {{supports}} programming {{of parallel}} processing. Using the keyword par, a collateral clause {{is converted to}} a parallel clause, where the synchronisation of actions is controlled using semaphores. In A68G the <b>parallel</b> <b>actions</b> are mapped to threads when available on the hosting operating system. In A68S a different paradigm of parallel processing was implemented (see below).|$|R
50|$|The {{idea that}} certain <b>parallel</b> <b>actions</b> could be {{initiated}} and linked by 'sympathetic' mysterious forces was widespread at this time, probably arising {{mainly from the}} actions of the magnet, shown by Gilbert, to always point towards some point in the northern sky. The idea owed a lot of the older Aristotelian and neoPlatonic views about soul-like forces.|$|R
40|$|Abstract — The {{development}} of robot control programs {{is a complex}} task. Many robots are different in their electrical and mechanical structure which is also reflected in the software. Specific robot software environments support the program development, but are mainly text-based and usually applied by {{experts in the field}} with profound knowledge of the target robot. This paper presents a graphical programming environ-ment which aims to ease the {{development of}} robot control programs. In contrast to existing graphical robot programming environments, our approach focuses on the composition of <b>parallel</b> <b>action</b> sequences. The developed environment allows to schedule independent robot <b>actions</b> on <b>parallel</b> execution lines and provides mechanism to avoid side-effects of <b>parallel</b> <b>actions.</b> The developed environment is platform-independent and based on the model-driven paradigm. The feasibility of our approach is shown by the application of the sequencer to a simulated service robot and a robot for educational purpose. I...|$|R
50|$|Roughly the {{dramatic}} work of Abell might {{be divided into}} three phases: a) criticism of middle class conventions, b) fighting Nazism and c) criticism of post-war pessimism and urge for death. Perhaps {{he is the first}} consequent modernist among Danish playwrights with his use of a flash back Chinese box system and a growing use of symbols and <b>parallel</b> <b>actions.</b>|$|R
50|$|A Goevier {{was used}} to develop the now {{ubiquitous}} Schempp-Hirth airbrake with its <b>parallel</b> ruler <b>action.</b>|$|R
50|$|Although film {{director}} D.W. Griffith {{was not part}} of the montage school, he was one of the early proponents of the power of editing — mastering cross-cutting to show <b>parallel</b> <b>action</b> in different locations, and codifying film grammar in other ways as well. Griffith's work in the teens was highly regarded by Kuleshov and other Soviet filmmakers and greatly influenced their understanding of editing.|$|R
50|$|The {{software}} application {{can be accessed}} directly. The homepage shows three panels: Query pane, Results pane and the Search History pane. The user may resize these panes to perform <b>parallel</b> <b>actions</b> {{in any of these}} panes. In a single browser it is possible to run parallel BLAST searches on different sequences, analyzing them or viewing the restriction digests for each document of a BLAST result.|$|R
40|$|In {{this paper}} we present the recent {{developments}} of the approach {{to the design of}} Cognitive Robots (i. e. robots whose actions are driven by a formally developed theory of action), that are capable of performing tasks in a coordinated way. The logic of actions that we adopt is an epistemic dynamic logic, where it is possible to derive acyclic branching plans (branches corresponding to sensing <b>actions),</b> including primitive <b>parallel</b> <b>actions...</b>|$|R
50|$|<b>Parallel</b> <b>action</b> follows {{with the}} Balibo Five tracked from East Timor's capital to their terrifying end after filming the Indonesian advance, and East and Ramos-Horta {{retracing}} their steps through by now extremely dangerous territory. Shackleton's last surviving report is recreated: {{sitting in a}} village, he says its inhabitants don't know if they will be alive tomorrow and have asked him why no one in Australia or anywhere else will help.|$|R
50|$|The {{extensive}} {{series of}} mechanical changes {{implemented by the}} reputed French house includes replacing the fusee motor employed by all the Swiss makers until then, by a simple going-barrel, the stack of eight song/air cams by just two and the <b>parallel</b> <b>action</b> bellows by a Vee-form bellows, the automaton internal mechanism was much simplified as well. This basic movement was to become pattern and standard for all succeeding makers up to the present.|$|R
30|$|Supplement {{means to}} add a <b>parallel</b> {{different}} <b>action</b> or description of property/state to the original one. It could be either future-oriented or not.|$|R
40|$|Abstract:- In {{this paper}} we propose a {{compound}} grammar with horizontal and vertical parallelism. This grammar combines horizontal parallelism from compound grammars introduced by Abraham and vertical parallelism from matrix grammars introduced by Greibach and Abraham. We named this hierarchy of grammars bi-parallel grammar. This combination permits a unitary formal model of hierarchy processes with <b>parallel</b> <b>actions.</b> Also strings generating process may be done on a parallel-computing environment. Key-Words:- formal languages, Chomsky hierarchy, context-sensitive grammar, context-free grammar, compound grammars, matrix grammars. ...|$|R
40|$|This is {{a survey}} on {{reasoning}} about situations, actions, and causality within equational logic. Its main {{feature is the}} representation of situations as multisets of resources. Such resources are consumed whenever the conditions of an action are satisfied and are produced whenever the action is applied. It is demonstrated that the well-known frame and ramification problems can be elegantly solved within such a framework. Moreover, <b>parallel</b> <b>actions</b> as well as hierarchical planning problems can be naturally represented in this approach...|$|R
25|$|Recent {{judicial}} opinions {{have indicated}} that provincial legislative national opt-out powers should not be exercised {{to interfere with the}} ability of another province to certify a <b>parallel</b> class <b>action</b> for residents of other provinces. The first court to certify will generally exclude residents of provinces whose courts have certified a <b>parallel</b> class <b>action.</b> However, in the Vioxx litigation, two provincial courts recently certified overlapping class actions whereby Canadian residents are class members in two class actions in two provinces. Both decisions are under appeal.|$|R
40|$|Pact is a {{parallel}} programming environment relieving the programmer from {{the burdens of}} parallel programming which are not really necessary to write efficient parallel programs. This is done by providing a simple synchronization model and virtual shared data with user-defined granularity and automatic consistency control. Pact guarantees user-transparent fault-tolerance with low overhead by using atomic actions as basic units of parallel execution. Additionally, the runtime system maps <b>parallel</b> <b>actions</b> to server processes using dynamic load-balancing. An included on-line visualization tool helps tuning and debugging parallel programs. ...|$|R
50|$|Recent {{judicial}} opinions {{have indicated}} that provincial legislative national opt-out powers should not be exercised {{to interfere with the}} ability of another province to certify a <b>parallel</b> class <b>action</b> for residents of other provinces. The first court to certify will generally exclude residents of provinces whose courts have certified a <b>parallel</b> class <b>action.</b> However, in the Vioxx litigation, two provincial courts recently certified overlapping class actions whereby Canadian residents are class members in two class actions in two provinces. Both decisions are under appeal.|$|R
5000|$|Santa Claus is a 1898 British short silent drama film, {{directed}} by George Albert Smith, which features Santa Claus visiting {{a house on}} Christmas Eve. The film, according to Michael Brooke of BFI Screenonline, [...] "is {{believed to be the}} cinema's earliest known example of <b>parallel</b> <b>action</b> and, when coupled with double-exposure techniques that Smith had already demonstrated in the same year's The Mesmerist (1898) and Photographing a Ghost (1898), the result {{is one of the most}} visually and conceptually sophisticated British films made up to then." ...|$|R
50|$|Verilog and Verilog/AMS are not {{procedural}} programming languages, but event-based hardware description languages (HDLs). As such, they provide sophisticated and powerful language features for definition and synchronization of <b>parallel</b> <b>actions</b> and events. On the other hand, many actions defined in HDL program statements can {{run in parallel}} (somewhat similar to threads and tasklets in procedural languages, but much more fine-grained). However, Verilog/AMS can be coupled with procedural languages like the ANSI C language using the Verilog Procedural Interface of the simulator, which eases testsuite implementation, and allows interaction with legacy code or testbench equipment.|$|R
3000|$|... 17. In <b>parallel</b> to <b>action</b> preparation, {{the sensory}} {{representations}} and feelings for each option are also activated, {{but due to}} the assigned slightly lower value for weight link ω [...]...|$|R
40|$|THIS PAPER IS CIRCULATED FOR DISCUSSION PURPOSES AND ITS CONTENTS SHOULD BE CONSIDERED PRELIMINARY AND CONFIDENTIAL. NO REFERENCE TO MATERIAL CONTAINED HEREIN MAY BE MADE WITHOUT THE CONSENT OF THE AUTHORS. This paper {{considers}} {{the means by}} which mergers are assessed by competition authorities in oligopolistic markets. The focus of the paper is on whether a merger would lead to the emergence of <b>conscious</b> <b>parallel</b> behaviour arising from the joint dominance of the leading players. This assessment is typically conducted informally relying on a checklist of known market conditions that support the formation of cartels. This paper highlights the problems that can arise with this approach and the need for competition authorities to place greater emphasis on empirical assessment of market conduct. By way of illustration, the paper considers market conduct in the UK beer market in light of the conclusion of the UK Competition Commission that co-ordinated behaviour would arise following the Interbrew/Bass merger. The analysis here points to flaws in the Competition Commission’s arguments and consequently challenges its findings...|$|R
40|$|International audienceModeling {{languages}} propose convenient abstractions and transformations {{to handle}} the complexity of today's embedded systems. Based on the formalism of Hierarchical State Machine, they enable the expression of hierarchical control parallelism. However, they face two importants challenges {{when it comes to}} model data-intensive applications: no unified approach that also accounts for data-parallel actions; and no effective code optimization and generation flows. We propose a modeling language extended with <b>parallel</b> <b>action</b> semantics and hierarchical indexed-state machines suitable for computationally intensive applications. Together with its formal semantics, we present an optimizing model compiler aiming for the generation of efficient data-parallel implementations...|$|R
5000|$|... #Subtitle level 3: Federal {{criminal}} prosecution and <b>parallel</b> SEC civil <b>action</b> ...|$|R
40|$|The Pact (<b>parallel</b> <b>actions)</b> <b>parallel</b> {{programming}} environment provides an easy-to-use parallel execution and synchronization model based on task parallelization. To give the programmer an abstraction for global data (even on distributed memory machines) the Pact runtime system uses virtual shared memory. Execution's efficiency is improved with data-dependent dynamic load balancing and latency-masking by multithreaded servers. Fault tolerance in Pact {{is based on}} atomic actions and is guaranteed by the runtime system in a fully user-transparent way. This article describes the Pact runtime system's design together with its logging and recovery algorithms for an implementation on a massively parallel distributed memory computer. 1 Introduction Although parallelism {{can be used to}} build fault-tolerant computers (as in [1] and [4]), most parallel computers and their operating systems are not designed for this purpose. The design goal is high performance, but this often causes relatively low r [...] ...|$|R
40|$|Abstract. The propositional dynamic logic (PDL) is an {{adequate}} tool {{to write down}} programs. In a previous article we used PDL to formulate cryptographic protocols as parallel programs. In these protocols at least two agent/individual exchange messages, so we needed to use product logic to formulate the <b>parallel</b> <b>actions.</b> Ágnes Kurucz proved that S 5 ×S 5 ×S 5 — which is the simplest triple product logic — is undecidable, hence it follows that PDL×PDL×PDL is undecidable, too. It is easy {{to show that the}} PDL logic (without the star operator) is decidable, so it is an interesting problem, that the PDL×PDL product logic is decidable or not. 1...|$|R
5000|$|The nearest <b>parallel</b> <b>action</b> {{the federal}} {{government}} has taken was in investments made by the Reconstruction Finance Corporation (RFC) in the 1930s. The RFC, an agency chartered during the Herbert Hoover administration in 1932, made loans to distressed banks and bought stock in 6,000 banks, totalling $1.3 billion. The New York Times, citing finance experts on October 13, 2008, noted that, [...] "A similar effort these days, in proportion to today's economy, would be about $200 billion." [...] When the economy had stabilized, the government sold its bank stock to private investors or the banks, and is estimated to have received approximately the same amount previously invested.|$|R
40|$|The overall aim of {{this thesis}} is the {{development}} of new concepts for parallel and distributed graph transformation to increase their applicability to communication-based systems. All concepts for parallel and distributed graph transformation pre-sented are formalized and compared with respect to their expressive power. Based on parallel graph grammars introduced by Ehrig and Kreowski the main concepts of existing approaches to parallel graph replacement are integrated into a new approach and generalized concerning exible synchronization mechanisms for <b>parallel</b> <b>actions</b> and restriction concepts for un-bounded <b>parallel</b> execution of <b>actions.</b> Distributed graph transformation as developed in this thesis combines structured graph transformation on two abstraction levels, the network and the local level, with the concept of synchronization by interface graphs into a new approach. In this new approach the main distribution concepts of categorical graph grammars presented by Schneider are combined with the algebraic approach to distributed graph transformation introduced by Ehrig et. al. Modeling of distributed system...|$|R
40|$|Alternative market {{structures}} are distinguishable {{by the degree}} of <b>parallel</b> <b>action</b> exhibited by producers. We show that the correlation between output levels varies systematically with the degree of interdependence among firms, and establish an ordering among alternative behavioral hypotheses (Cournot, Stackelberg, Edgeworth/Bertrand, collusion, and perfect competition). Because the ordering is invariant {{to the values of}} background parameters, statistical tests of market conduct may be possible even when the slopes of the demand curve and marginal cost curves are unknown. An application to the world oil market finds strong evidence of collusive behavior among OPEC members, but not elsewhere. (JEL: D 43, L 11, L 13, Q 41) Keywords: cartels, collusive behavior, interdependence, oligopoly, OPEC...|$|R
40|$|We {{consider}} the general {{problem of the}} optimal transformation of N uses of (possibly different) unitary channels to a single use of another unitary channel in any finite dimension. We show how the optimal transformation can be fully parallelized, consisting in a preprocessing channel followed by a <b>parallel</b> <b>action</b> of all the N unitaries and a final postprocessing channel. Our techniques allow to achieve an exponential {{reduction in the number}} of the free parameters of the optimization problem making it amenable to an efficient numerical treatment. Finally, we apply our general results to find the analytical solution for special cases of interest like the cloning of qubit phase gates. Comment: 14 pages, 2 figure...|$|R
