136|401|Public
25|$|By re-establishing a {{continuous}} front on Army Group South's left flank, the 4th Panzer Army and the 8th Army {{had for the}} moment, blunted a deadly thrust, but {{to the north and}} southeast fresh blows had already been dealt or were in the making. Employing the peculiar rippling effect that marked their offensives, the Red Army, thwarted in one place, had shifted to others. For {{the first time in the}} war they had the full strategic initiative, and they used it well. The failure of Operation Citadel meant the Germans permanently lost the strategic initiative on the Eastern Front without any hope of regaining it, although Hitler refused to acknowledge it. The large manpower losses of the Wehrmacht in July and August 1943 severely restricted both Army Groups South & Centre to react to future thrusts during the winter and 1944. Operations Polkovodets Rumyantsev, along with the <b>concurrent</b> <b>Operation</b> Kutuzov marked the first time in the war that the Germans were not able to defeat a major Soviet offensive during the summer and regain their lost ground and the strategic initiative.|$|E
2500|$|At the {{beginning}} of Operation Barbarossa German units of Army of Norway, commanded by Nikolaus von Falkenhorst, [...] attacked from Norway to secure Petsamo at the Finnish-Soviet border as part of Operation Reindeer. They joined Finnish forces {{on the border of}} Soviet territory. These divisions consisted of elite mountain troops mostly from Austria specially trained to operate above the Arctic Circle. The Finnish-German forces launched Operation Silver Fox (Silberfuchs), attacking Murmansk from two directions. The assault from Finnish Petsamo directly towards the port of Murmansk was codenamed Platinum Fox (Platinfuchs). The other assault was an attack Kandalaksha from Salla and to isolate Murmansk from the south by cutting off the Murmansk railway. This <b>concurrent</b> <b>operation</b> was codenamed Operation Arctic Fox (Polarfuchs).|$|E
5000|$|In a {{database}} transaction, if the transaction cannot be completed {{due to a}} <b>concurrent</b> <b>operation</b> (e.g. in a deadlock), the transaction will be aborted and the user must try again.|$|E
50|$|Initially, the {{trolleybus}} system {{only partially}} replaced Coimbra's tramway network, but after several decades of <b>concurrent</b> <b>operations</b> {{the latter was}} closed, in January 1980.|$|R
50|$|SCOOP (Scalable <b>Concurrent</b> <b>Operations</b> in Python) is a Python {{software}} module for distributing concurrent tasks on various environments, from heterogeneous grids of workstations to supercomputers.|$|R
5000|$|The {{transformation}} function {{is responsible for}} merging two <b>concurrent</b> <b>operations.</b> It is application dependent. For example, a text editor has different operations than a whiteboard application.|$|R
50|$|In {{computer}} science, {{a system}} that allows <b>concurrent</b> <b>operation</b> of multiple processes and locking of resources and which does not provide mechanisms to avoid or prevent deadlock must support a mechanism to detect deadlocks and an algorithm for recovering from them.|$|E
50|$|By 1834, the Main Line of Public Works, {{a system}} of {{interlocking}} canals, railways, and inclined planes, was hauling passengers and freight up to 391 mi between Philadelphia and Pittsburgh. Though not all in <b>concurrent</b> <b>operation,</b> the total length of the canals built in Pennsylvania eventually reached 1243 mi.|$|E
5000|$|Pacific Angel 2008-01 was {{designed}} to be a <b>concurrent</b> <b>operation</b> with the Royal Thai Air Force and the Royal Cambodian Armed Forces. In Thailand, an aeromedical evacuation subject matter expert exchange (SMEE) was planned with aeromedical evacuation personnel at U’tapao military airfield in Thailand. In Cambodia, the bulk of the HCA mission was to take place. Sites were placed outside of Kampong Chhnang and Kampong Cham, approximately 130 km north of the capital city of Phnom Penh ...|$|E
40|$|We {{address the}} problem of testing {{atomicity}} of composed <b>concurrent</b> <b>operations.</b> <b>Concurrent</b> libraries help programmers exploit parallel hardware by providing scalable <b>concurrent</b> <b>operations</b> with the illusion that each operation is executed atomically. However, client code often needs to compose atomic operations {{in such a way that}} the resulting composite operation is also atomic while preserving scalability. We present a novel technique for testing the atomicity of client code composing scalable <b>concurrent</b> <b>operations.</b> The challenge in testing this kind of client code is that a bug may occur very rarely and only on a particular interleaving with a specific thread configuration. Our technique is based on modular testing of client code in the presence of an adversarial environment; we use commutativity specifications to drastically reduce the number of executions explored to detect a bug. We implemented our approach in a tool called COLT, and evaluated its effectiveness on a range of 51 realworld concurrent Java programs. Using COLT, we found 56 atomicity violations in Apache Tomcat, Cassandra, MyFaces Trinidad, and other applications...|$|R
40|$|Abstract. A {{constraint}} specifies {{a relation}} or condition {{that must be}} maintained in a system. It is common for a single user graphic system to specify some constraints and provide methods to satisfy these constraints automatically. Constraints are even more useful in collaborative systems, which can confine and coordinate <b>concurrent</b> <b>operations,</b> but satisfying constraints {{in the presence of}} concurrency in collaborative systems is difficult. In this article, we discuss the issues and techniques in maintaining constraints in collaborative systems. In particular, we also proposed a novel strategy that is able to maintain both constraints and system consistency in the face of <b>concurrent</b> <b>operations.</b> The strategy is independent of the execution orders of <b>concurrent</b> <b>operations</b> and able to retain the effects of all operations in resolving constraint violation. The proposed strategy has been implemented in a Collaborative Genetic Software Engineering system, called CoGSE, for maintaining the tree structure constraint. Specific issues related to CoGSE are also discussed in detail...|$|R
50|$|In {{information}} technology and computer science, especially {{in the fields of}} computer programming, operating systems, multiprocessors, and databases, concurrency control ensures that correct results for <b>concurrent</b> <b>operations</b> are generated, while getting those results as quickly as possible.|$|R
50|$|After the war ended, the U.S. Army issued battle {{credit in}} the form of the Ardennes-Alsace {{campaign}} citation to units and individuals that took part in operations in northwest Europe. The citation covered troops in the Ardennes sector where the main battle took place, as well as units further south in the Alsace sector, including those in the northern Alsace which filled in the vacuum created by the U.S. Third Army racing north, engaged in the <b>concurrent</b> <b>Operation</b> Nordwind diversion in central and southern Alsace launched to weaken Allied response in the Ardennes, and which provided reinforcements to units fighting in the Ardennes.|$|E
50|$|In {{that year}} Amago Haruhisa {{conceived}} {{of a plan}} to destroy Mōri Motonari and bring Aki province under the sway of the Amago. When a council of the Amako retainers was called to discuss the planned campaign, almost all spoke in favor of the attack. Amago Hisayuki, however, considered the risks to be too great and spoke out against it, but was derided by Tsunehisa as a coward and publicly humiliated. Hisayuki was given the task of engaging the Mōri's ally, the Shishido clan in Aki as part of an initial and <b>concurrent</b> <b>operation</b> of the larger Amago campaign into Aki.|$|E
50|$|In 1974, the 125th Fighter Interceptor Group {{converted}} from the F-102 Delta Dagger to the F-106 Delta Dart. By {{the end of}} the year, with the conversion complete and the F-106 formally integrated into the 125 FIG weapons inventory, alert status resumed at Jacksonville International Airport. Pilots and ground-crew members received extensive training in the operations and maintenance of the new aircraft and they soon gained the expertise needed to handle the sophisticated all-weather supersonic fighter-interceptor. <b>Concurrent</b> <b>operation</b> of the T-33 Shooting Star also continued, functioning as a simulated target aircraft for intercept training and for other pilot proficiency training.|$|E
25|$|Channels {{differ in}} the number and type of <b>concurrent</b> I/O <b>operations</b> they support. In IBM terminology, a {{multiplexer}} channel supports a number of <b>concurrent</b> interleaved slow-speed <b>operations,</b> each transferring one byte from a device at a time. A selector channel supports one high-speed operation, transferring a block of data at a time. A block multiplexer supportes a number of <b>concurrent</b> high-speed <b>operations.</b>|$|R
50|$|Other {{databases}}, such as SQL Server 2005 (and later), do {{not impose}} this limitation. However, databases that allow multiple <b>concurrent</b> <b>operations</b> on each connection usually incur far more overhead {{than those that}} only allow one operation at a time.|$|R
3000|$|Construction {{productivity}} is poor due to <b>concurrent</b> <b>operations</b> and H 2 S safety measures This {{is similar to}} risk No. 1 with the difference that the delay due to this risk is solely driven by the safety measures and not by fatality occurrence.|$|R
50|$|The {{operation}} of double interlock systems {{are similar to}} deluge systems except that automatic sprinklers are used. These systems require that both a “preceding” fire detection event, typically the activation of a heat or smoke detector, and an automatic sprinkler operation take place prior to the “action” of water introduction into the system’s piping. Activation of either the fire detectors alone, or sprinklers alone, without the <b>concurrent</b> <b>operation</b> of the other, will not allow water to enter the piping. Because water does not enter the piping until a sprinkler operates, double interlock systems are considered as dry systems in terms of water delivery times, and similarly require a larger design area.|$|E
50|$|At the {{beginning}} of Operation Barbarossa German units of Army of Norway, commanded by Nikolaus von Falkenhorst, attacked from Norway to secure Petsamo at the Finnish-Soviet border as part of Operation Reindeer. They joined Finnish forces {{on the border of}} Soviet territory. These divisions consisted of elite mountain troops mostly from Austria specially trained to operate above the Arctic Circle. The Finnish-German forces launched Operation Silver Fox (Silberfuchs), attacking Murmansk from two directions. The assault from Finnish Petsamo directly towards the port of Murmansk was codenamed Platinum Fox (Platinfuchs). The other assault was an attack Kandalaksha from Salla and to isolate Murmansk from the south by cutting off the Murmansk railway. This <b>concurrent</b> <b>operation</b> was codenamed Operation Arctic Fox (Polarfuchs).|$|E
50|$|On 28 April 2016, AeroVironment {{announced}} they had developed an upgrade for the Switchblade Tactical Missile system designated Block 10C. It incorporates a Digital Data Link (DDL) {{to provide a}} stable and secure encrypted communication link through more efficient use of existing frequency bands and significantly reduced likelihood of signal interception, as well as enables <b>concurrent</b> <b>operation</b> of multiple Switchblade systems in the same vicinity without signal conflict, gives opportunity to extend operational ranges using another DDL arbiter such as a different AeroVironment UAV, and facilitates sensor to shooter operations through automatic communication of mission plans from one AeroVironment UAS to a Switchblade. In October 2016, AeroVironment revealed the Multi-Pack Launcher (MPL), a system to carry and remotely launch several Switchblades. MPL comes in a standard 6-pack configuration weighing 160 lb fully loaded, though design is scalable from 2 to 20 rounds and enables rapid reloading of less than 30 seconds per round.|$|E
5000|$|In {{distributed}} systems, maintaining sequential {{consistency in}} order to control the <b>concurrent</b> <b>operations</b> is essential. In some special data stores without simultaneous updates, client-centric consistency models can deal with inconsistencies in a less costly way. The following models are some client-centric consistency models: ...|$|R
40|$|Cloud {{application}} development is currently for professionals only. To make the cloud more accessible, cloud applications should ideally {{be easy to}} develop so that virtually anyone can develop their own cloud applications. However, they are difficult to develop, because they are essentially distributed systems, where the <b>concurrent</b> <b>operations</b> may take place, and reasoning about the behavior of <b>concurrent</b> <b>operations</b> to ensure correctness is not trivial. Additionally, programmers must consider failure handling, scalability, consistency, modularity, elasticity. ^ A programming model approach to ease the development is to let programmers write code in sequential semantics, and then use a runtime system to transform the sequential code into parallel operations. One well known example is Hadoop: the programmers write MapReduce tasks which appear sequential, and the Hadoop runtime system executes the tasks in a parallel fashion on multiple nodes. Its runtime system also enables automatic failure recovery. ^ However, Hadoop and many similar frameworks are designed for data parallel computation. When it comes to more general distributed systems, which usually have some mutable state shared by <b>concurrent</b> <b>operations,</b> these frameworks become useless. This dissertation describes a new programming framework that not only offers simple sequential semantics, but also provides distributed applications with desirable properties, including elasticity, failure handling, scalability, consistency and modularity. ...|$|R
40|$|A {{constraint}} {{expresses a}} relationship among {{one or more}} variables. Constraints are very useful {{in the development of}} collaborative applications, such as collaborative CAD and CASE systems, but satisfying constraints in the presence of concurrency in collaborative systems is difficult. In this article, we discuss the issues and techniques in maintaining constraints in collaborative systems. In particular, we also proposed a novel priority strategy that is able to maintain both constraints and system consistency in the face of <b>concurrent</b> <b>operations.</b> The strategy is able to resolve constraint violations in multi-constraint systems and is independent of the execution orders of <b>concurrent</b> <b>operations.</b> To illustrate the applicability of the proposed priority strategy, the applications of the approach in various collaborative systems are discussed in detail. Griffith Sciences, School of Information and Communication TechnologyNo Full Tex...|$|R
50|$|By re-establishing a {{continuous}} front on Army Group South's left flank, the 4th Panzer Army and the 8th Army {{had for the}} moment, blunted a deadly thrust, but {{to the north and}} southeast fresh blows had already been dealt or were in the making. Employing the peculiar rippling effect that marked their offensives, the Red Army, thwarted in one place, had shifted to others. For {{the first time in the}} war they had the full strategic initiative, and they used it well. The failure of Operation Citadel meant the Germans permanently lost the strategic initiative on the Eastern Front without any hope of regaining it, although Hitler refused to acknowledge it. The large manpower losses of the Wehrmacht in July and August 1943 severely restricted both Army Groups South & Centre to react to future thrusts during the winter and 1944. Operations Polkovodets Rumyantsev, along with the <b>concurrent</b> <b>Operation</b> Kutuzov marked the first time in the war that the Germans were not able to defeat a major Soviet offensive during the summer and regain their lost ground and the strategic initiative.|$|E
50|$|With {{the advent}} of war with Japan and Germany in December 1941, the Navy began anti-submarine patrols along the Florida coast using PBY Catalina and PBM Mariner {{seaplanes}} based at this facility. PBMs returned to training duty in March 1942 when replaced on patrol by OS2U Kingfisher seaplanes. Landing strips were constructed in 1943, thereby allowing for <b>concurrent</b> <b>operation</b> of shore based aircraft. Officers of the Free French Naval Air Service also trained in PBMs at NAS Banana River at this time. Various military related activities took place at NAS Banana River, including maritime patrol aviation operations against German U-Boats, air search and rescue operations, patrol bomber bombardier training, seaplane pilot training, and communications research. Other activities included a blimp squadron detachment, an Aviation Navigation Training School, and an experimental training unit termed Project Baker, a confidential program that developed and tested instrument landing equipment. NAS Banana River hosted and a major aircraft repair and maintenance facility. Later in the war, a small detachment of German POWs from Camp Blanding worked at NAS Banana River on cleanup details. At its peak, the base complement included 278 aircraft, 587 civilian employees, and over 2800 officers and enlisted personnel.|$|E
5000|$|The Court did not {{spell it}} out, but the {{consequence}} of this decision {{is not that the}} ACT act is void. Rather, the act is [...] "of no effect" [...] or, as the Court adds, [...] "inoperative". [...] The Court is using the language of its established interpretation of Constitution section 109, which provides that a state law will be [...] "invalid" [...] {{to the extent that it}} is [...] "inconsistent" [...] with a federal law. The Court has understood [...] "invalid" [...] in section 109 to mean not that the state law is simply void but that it is [...] "inoperative" [...] for so long as the inconsistency remains; if that federal law were to be changed so as to remove the inconsistency, the state law would revive. [...] The words [...] "of no effect" [...] in section 28(1) of the ACT self-government act appear to reflect that. The addition of <b>concurrent</b> <b>operation</b> (which is not in Constitution section 109) does not create an exception to inconsistency as such, but specifies a circumstance in which inconsistency will not arise. The Court found that, regarding the ACT's same-sex marriage act, this circumstance did not arise.|$|E
40|$|Abstract. To avoid data races, <b>concurrent</b> <b>operations</b> should {{either be}} at {{distinct}} times or on distinct data. Atomicity is the abstraction that an operation takes effect at a single, discrete instant in time, with lin-earisability being a well-known correctness condition which asserts that <b>concurrent</b> <b>operations</b> appear to behave atomically. Disjointness is the abstraction that operations act on distinct data resource, with concur-rent separation logics enabling reasoning about threads {{that appear to}} operate independently on disjoint resources. We present TaDA, a program logic that combines the benefits of ab-stract atomicity and abstract disjointness. Our key contribution is the introduction of atomic triples, which offer an expressive approach to spec-ifying program modules. By building up examples, we show that TaDA supports elegant modular reasoning {{in a way that}} was not previously possible. ...|$|R
40|$|Data {{consistency}} can be violated in Distributed Hash Tables (DHTs) due to inconsistent lookups. In this paper, {{we identify}} {{the events leading}} to inconsistent lookups and inconsistent responsibilities for a key. We find the inaccuracy of failure detectors as {{the main reason for}} inconsistencies. By simulations with inaccurate failure detectors, we study the probability of reaching a system configuration which may lead to inconsistent data. We analyze majority-based algorithms for operations on replicated data. To ensure that <b>concurrent</b> <b>operations</b> do not violate consistency, they have to use non-disjoint sets of replicas. We analytically derive the probability of <b>concurrent</b> <b>operations</b> including disjoint replica sets. By combining the simulation and analytical results, we show that the probability for a violation of data consistency is negligibly low for majority-based algorithms in DHTs. 1...|$|R
40|$|AbstractA {{general theory}} of {{interactive}} systems with changing structure, the π-calculus, is used to study <b>concurrent</b> <b>operations</b> on {{a variant of the}} B-tree. An improved algorithm for compression of the data structure is given. Some general results on partially confluent processes and on client-server systems, couched in the π-calculus, are presented...|$|R
5000|$|KXLF-TV {{moved to}} channel 4 in October 1956 due to {{concerns}} that the <b>concurrent</b> <b>operation</b> of channel 6 stations in Butte and Pocatello, Idaho would result in interference (channel 4 had previously been used in Butte by KOPR-TV from 1953 to 1954, while channel 6 {{would return to the}} air in Butte as KTVM in 1970). The following year was a time of change for the station. A complicated operation saw the transmitter moved on top of a mountain east of Butte, subsequently dubbed XL Heights. The transmitter tower was directly positioned on the Continental Divide, thereby giving the station the moniker [...] "The Continental Divide Station." [...] The new transmitter location made an off-air signal available for KXLJ-TV in Helena (now KTVH-DT) creating the first TV [...] "network" [...] in Montana. Also in 1957, KXLF found a permanent home in the former Chicago, Milwaukee, St. Paul and Pacific Railroad station on Montana Street. The station was built in 1916 and features a 95 ft clock tower. In the 1970s, the depot became one of Butte's first major restoration projects. It continues to serve as an example of historic restoration. In the late 1990s, KXLF installed a live webcam atop the clock tower, which offers a live view of downtown Butte.|$|E
50|$|Mori {{successfully}} defended {{an attack}} by Amago Haruhisa on his castle in the 1540-41 Siege of Koriyama. Tsunehisa had nominally retired and turned over {{the leadership of the}} clan to his grandson, Haruhisa (also known as Akihisa). Amago Haruhisa conceived of a plan to destroy Mōri Motonari and bring Aki province under the sway of the Amago. When a council of the Amago retainers was called to discuss the planned campaign, almost all spoke in favor of the attack. Amago Hisayuki, however, considered the risks to be too great and spoke out against it, but was derided by Amago Tsunehisa as a coward and publicly humiliated. Amago Hisayuki was given the task of engaging the Mōri's ally, the Shishido clan in Aki as part of an initial and <b>concurrent</b> <b>operation</b> of the larger Amago campaign into Aki. Amago Haruhisa, with 30,000 men, attacked Motonari's main base, Yoshida-Kōriyama Castle, which was defended by 8,000 men. The initial phase of the campaign began in June 1540, which involved {{an attack by}} the troops of Amago Hisayuki, his son Amago Masahisa and his nephew Kunihisa on the domain of Motonari's ally, the Shishido clan, a foray that was to prove of little effect except to deny Haruhisa of some of his most capable generals and soldiers for the attack on Yoshida-Kōriyama Castle. In August, Amago Haruhisa had gathered a force of 30,000 and departed Izumo province, moving into the vicinity of Motonari's Yoshida-Kōriyama Castle and establishing a headquarters nearby. Meanwhile, Motonari had evacuated over 5,000 of Yoshida's citizens inside the walls of Yoshida-Kōriyama Castle. The castle itself was defended by around 3,000 soldiers, by which time urgent requests for aid were dispatched to the Ōuchi in Suo Province. Two days after arriving, the Amago launched an attack on Yoshida-Kōriyama Castle, which continued for several months.|$|E
40|$|The overall {{objective}} of this program was the development of control algorithms that allow the <b>concurrent</b> <b>operation</b> of slewing, pointing, vibration, and shape control subsystems. This objective is important for near-term space surveillance missions that require the rapid retargeting and precise pointing of large flexible satellites. The success of these missions requires the design and <b>concurrent</b> <b>operation</b> of the various interacting control subsystems. There were two phases conducted: phase 1 was mathematical model development, and phase 2 was control development. The program is detailed and major conclusions given...|$|E
5000|$|A {{common theme}} when {{designing}} linearizable objects {{is to provide}} an all-or-nothing interface: either an operation succeeds completely, or it fails and does nothing. (ACID databases refer to this principle as atomicity.) If the operation fails (usually due to <b>concurrent</b> <b>operations),</b> the user must retry, usually performing a different operation. For example: ...|$|R
40|$|An {{algorithm}} for synchronizing <b>concurrent</b> <b>operations</b> on extendible hash files is presented. The {{algorithm is}} deadlock free {{and allows the}} search operations to proceed concurrently with insertion operations without having to acquire locks on the direc-tory entries or the data pages. It also allows <b>concurrent</b> insertion/deletion <b>operations</b> to proceed without having to acquire locks on the directory entries. The algorithm is also unique in that it combines the notion of verification, fundamental to the optimis-tic concurrency control algorithm, and the special and known semantics of the operations in extendible hash files. A proof of correctness for the proposed algorithm is also presented...|$|R
40|$|Multi-way {{dataflow}} constraints {{are very}} {{useful in the}} development of collaborative applications, such as collaborative CAD and CASE systems, but satisfying multi-way dataflow constraints in the presence of concurrency in collaborative systems is difficult. In this article, we discuss the issues and techniques in maintaining multi-way dataflow constraints in concurrent environments. In particular, we also proposed a novel strategy that is able to reconstruct computation flows to satisfy multi-way dataflow constraints according to <b>concurrent</b> user <b>operations</b> in collaborative systems. Our strategy ensures both constraint satisfaction and system consistency, which is independent of the execution orders of <b>concurrent</b> <b>operations.</b> 1...|$|R
