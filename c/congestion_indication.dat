53|15|Public
5000|$|PT bit 2: Explicit forward <b>{{congestion}}</b> <b>indication</b> (EFCI); 1 = {{network congestion}} experienced ...|$|E
50|$|Upon {{receiving}} an IP packet with the Congestion Experienced codepoint, the TCP receiver echoes back this <b>congestion</b> <b>indication</b> using the ECE flag in the TCP header. When an endpoint receives a TCP segment with the ECE bit it reduces its congestion window {{as for a}} packet drop. It then acknowledges the <b>congestion</b> <b>indication</b> by sending a segment with the CWR bit set.|$|E
50|$|When the {{destination}} replies, the corresponding ACK includes {{a bit of}} congestion. The sender receives the ACK and calculates how many packets it received with the <b>congestion</b> <b>indication</b> bit set to one. If {{less than half of}} the packets in the last window had the <b>congestion</b> <b>indication</b> bit set, then the window is increased linearly. Otherwise, the window is decreased exponentially.|$|E
5000|$|Unlike other stochastically fair queuing disciplines, such as SFQ (Stochastic Fairness Queuing), SFB can be {{implemented}} using a bloom filter rather than a hash table, which dramatically reduces its storage requirements {{when the number of}} flows is large.When a flow's drop/mark probability reaches 1, the flow has been shown to not react to <b>congestion</b> <b>indications</b> from the network. Such an inelastic flow is put in a [...] "penalty box", and rate-limited.|$|R
40|$|To provide {{high-quality}} service {{under heavy}} user loads, the Internet depends on congestion avoidance mechanisms {{implemented in the}} transport-layer such as the transmission-control protocol (TCP). However, many TCP implementations don’t include—either deliberately or by accident— a congestion avoidance mechanism. Moreover, {{a growing number of}} user datagram protocol (UDP) -based applications running on the Internet don’t back off properly when they receive <b>congestion</b> <b>indications.</b> As a result, these applications aggressively use more bandwidth than other TCP-compatible flows. Therefore, it’s necessary to have router mechanism...|$|R
40|$|We {{observe that}} even when the system {{throughput}} is relatively stable, end users of media-streaming applications do not necessarily experience smooth throughput, due to the unsynchronized window adjustments triggered by random <b>congestion</b> <b>indications.</b> We analyze and evaluate {{the negative impact of}} random window adjustments on smoothness, short-term fairness, and long-term fairness. We further propose an experimental congestion avoidance mechanism, namely TCP (,,,), based on coordinated window adjustments. The flow-level smoothness is enhanced significantly for media-streaming applications, without a cost on fairness and responsiveness. Responsiveness is even boosted when bandwidth is underutilized...|$|R
50|$|Without ECN, <b>congestion</b> <b>indication</b> echo is {{achieved}} indirectly by {{the detection of}} lost packets. With ECN, the congestion is indicated by setting the ECN field within an IP packet to CE and is echoed back by the receiver to the transmitter by setting proper bits in the header of the transport protocol. For example, when using TCP, the <b>congestion</b> <b>indication</b> is echoed back by setting the ECE bit.|$|E
50|$|By {{providing}} endpoints with <b>congestion</b> <b>indication</b> {{before the}} queue is full, AQM disciplines {{are able to}} maintain a shorter queue length than drop-tail queues, which combats bufferbloat and reduces network latency.|$|E
5000|$|Congestion may {{be handled}} {{only by the}} transmitter, but since it {{is known to have}} {{happened}} only after a packet was sent, there must be an echo of the <b>congestion</b> <b>indication</b> by the receiver to the transmitter.|$|E
40|$|Abstract—We {{observe that}} even when the system {{throughput}} is relatively stable, end users of media-streaming applications do not necessarily experience smooth throughput, due to the unsyn-chronized window adjustments triggered by random <b>congestion</b> <b>indications.</b> We analyze and evaluate {{the negative impact of}} random window adjustments on smoothness, short-term fairness, and long-term fairness. We further propose an experimental congestion avoidance mechanism, namely TCP (,,,), based on coordinated window adjustments. The flow-level smoothness is enhanced significantly for media-streaming applications, without a cost on fairness and responsiveness. Responsiveness is even boosted when bandwidth is underutilized. Index Terms—Congestion control, fairness, multimedia commu-nication, smoothness, transport protocols. I...|$|R
40|$|We propose several {{stochastic}} approximation implementations for related algorithms in flow-control {{of communication}} networks. First, a discrete-time implementation of Kelly's primal flow-control algorithm is proposed. Convergence with probability 1 is shown, {{even in the}} presence of communication delays and stochastic effects seen in link <b>congestion</b> <b>indications.</b> This ensues from an analysis of the flow-control algorithm using the asynchronous stochastic approximation (ASA) framework. Two relevant enhancements are then pursued: a) an implementation of the primal algorithm using second-order information, and b) an implementation where edge-routers rectify misbehaving flows. Next, discretetime implementations of Kelly's dual algorithm and primaldual algorithm are proposed. Simulation results a) verifying the proposed algorithms and, b) comparing the stability properties are presented...|$|R
40|$|This {{document}} provides {{recommendations of}} {{best current practice}} for dropping or marking packets using any active queue management (AQM) algorithm, including Random Early Detection (RED), BLUE, Pre-Congestion Notification (PCN), and newer schemes such as CoDel (Controlled Delay) and PIE (Proportional Integral controller Enhanced). We give three strong recommendations: (1) packet size {{should be taken into}} account when transports detect and respond to <b>congestion</b> <b>indications,</b> (2) packet size should not be taken into account when network equipment creates congestion signals (marking, dropping), and therefore (3) in the specific case of RED, the byte-mode packet drop variant that drops fewer small packets should not be used. This memo updates RFC 2309 to deprecate deliberate preferential treatment of small packets in AQM algorithms. Status of This Mem...|$|R
50|$|Dr. Jain is the {{co-inventor}} of the DEC-bit {{scheme for}} congestion avoidance in computer networks {{which has been}} adapted for implementation in Frame Relay networks as {{forward explicit congestion notification}} (FECN), ATM Networks as Explicit Forward <b>Congestion</b> <b>Indication</b> (EFCI), and TCP/IP networks as Explicit Congestion Notification(ECN).|$|E
50|$|Conventionally, TCP/IP {{networks}} signal congestion {{by dropping}} packets. When ECN is successfully negotiated, an ECN-aware router may set a {{mark in the}} IP header instead of dropping a packet in order to signal impending congestion. The receiver of the packet echoes the <b>congestion</b> <b>indication</b> to the sender, which reduces its transmission rate as if it detected a dropped packet.|$|E
5000|$|TCP {{supports}} ECN {{using three}} flags in the TCP header. The first one, the Nonce Sum (NS), {{is used to}} protect against accidental or malicious concealment of marked packets from the TCP sender. [...] The other two bits are used to echo back the <b>congestion</b> <b>indication</b> (i.e. signal the sender {{to reduce the amount}} of information it sends) and to acknowledge that the congestion-indication echoing was received. These are the ECN-Echo (ECE) and Congestion Window Reduced (CWR) bits.|$|E
40|$|Abstract — We propose several {{stochastic}} approximation implementations for related algorithms in flow-control {{of communication}} networks. First, a discrete-time implementation of Kelly’s primal flow-control algorithm is proposed. Convergence with probability ¢ is shown, {{even in the}} presence of communication delays and stochastic effects seen in link <b>congestion</b> <b>indications.</b> This ensues from an analysis of the flow-control algorithm using the asynchronous stochastic approximation (ASA) framework. Two relevant enhancements are then pursued: a) an implementation of the primal algorithm using second-order information, and b) an implementation where edge-routers rectify misbehaving flows. Next, discretetime implementations of Kelly’s dual algorithm and primaldual algorithm are proposed. Simulation results a) verifying the proposed algorithms and, b) comparing the stability properties are presented. Keywords Network flow-control, Kelly’s primal algorithm, asynchronous stochastic approximation, SPSA, edgerouter based rectification...|$|R
40|$|We {{consider}} certain {{variants of}} the additive-increase and multiplicative-decrease end-to-end congestion avoidance algorithms. The algorithms of concern are tailored {{to reflect the}} behavior of TCP congestion avoidance, in particular, the response to multiple <b>congestion</b> <b>indications</b> within a single round-trip time. We derive the limit mean ordinary differential equation (ODE) for each algorithm, which solution yields the limit throughput distribution. We focus on {{the fairness of the}} throughput distribution and bias against long round-trip time connections. The modeling by the ODE method is justified for an asymptotically small adaptation of the rate process, which corresponds to small additive-increase and multiplicative-decrease parameters. We verify, through numerical simulation, how well the limit mean ODE result matches the behavior of the system with a realistic non-asymptotic setting. On the basis of our results, we discuss conditions under which the limit mean ODE method is applicable...|$|R
40|$|As {{wireless}} {{channels are}} becoming common, {{the performance of}} TCP over networks with such links is important. TCP performance suffers substantially when packet error rates increase beyond a value of about 1 %- 5 %. This paper proposes an end-end mechanism to improve TCP performance over networks comprising lossy wireless link. The scheme separates the <b>congestion</b> <b>indications</b> from the wireless packet erasures by exploiting ECN. To overcome packet erasures we use a dynamic and adaptive Forward Error Correction (FEC) scheme that includes adaptation of the Maximum Segment Size for TCP. Redundancy is added {{in the form of}} proactive FEC which tunes itself to the measured error rate. The residual packet errors are handled by an enhanced retransmission scheme using reactive FEC repair packets to complement proactive FEC and SACK retransmission. Dynamically changing the MSS tailors the number of segments in the window for optimal performance. The scheme is built on top of TCP-SACK and depends on SACK and timeouts as a last resort. ns- 2 simulations show that our scheme substantially improves TCP performance even for packet loss rates up to 30 %, thus extending the dynamic range and performance of TCP over lossy wireless networks. I...|$|R
50|$|When {{a router}} wants to signal {{congestion}} to the sender, it adds {{a bit in}} the header of packets sent. When a packet arrives at the router, the router calculates the average queue length for the last (busy + idle) period plus the current busy period. (The router is busy when it is transmitting packets, and idle otherwise). When the average queue length exceeds 1, then the router sets the <b>congestion</b> <b>indication</b> bit in the packet header of arriving packets.|$|E
5000|$|When both {{endpoints}} support ECN they {{mark their}} packets with ECT(0) or ECT(1). If the packet traverses an active queue management (AQM) queue (e.g., a queue that uses random early detection (RED)) that is experiencing congestion {{and the corresponding}} router supports ECN, it may change the codepoint to [...] instead of dropping the packet. This act {{is referred to as}} “marking” and its purpose is to inform the receiving endpoint of impending congestion. At the receiving endpoint, this <b>congestion</b> <b>indication</b> is handled by the upper layer protocol (transport layer protocol) and needs to be echoed back to the transmitting node in order to signal it to reduce its transmission rate.|$|E
40|$|Transmission control {{protocol}} (TCP), the widely used transport protocol in the Internet, assumes that packet losses are because of congestion. Wireless networks have higher error rates than wired networks; TCP misinterprets the error losses as congestion and wrongly invokes congestion control algorithms. In the proposed scheme, {{we show that}} by using <b>congestion</b> <b>indication</b> feedback from the network, performance of TCP can be improved in network paths containing wireless links. The routers in the network detect congestion and set a <b>congestion</b> <b>indication</b> bit on packets owing in the forward direction. The <b>congestion</b> <b>indication</b> is communicated back to the users through the transport-level acknowledgement. When the sender encounters a packet loss, explicit <b>congestion</b> <b>indication</b> feedback received for the packets sent {{before and after the}} packet dropped are used to identify the state of the network at the time of drop. If the network is identi ed as not congested when the packet was lost and the recent <b>congestion</b> <b>indication</b> feedback is also low, then the packet is considered to be lost because of transmission error. We compared our scheme against TCP-Reno which assumes that all packet losses are because of congestion. Under low congestion in the network, our scheme can lead to signi cant throughput improvement...|$|E
40|$|In this paper, {{we observe}} that {{although}} multiplicative decrease {{is necessary to}} accomplish fairness in congestion control, it does not inevitably sacrifice system throughput, {{as long as the}} system operates between the knee and the cliff, according to an equation. However, even when the system throughput is relatively stable, end users of real-time applications do not necessarily experience a smooth traffic, mainly caused by the unsynchronized window adjustments due to random <b>congestion</b> <b>indications.</b> We analyzed and evaluated the negative impact of random window adjustments on smoothness, short-term fairness, and even long-term fairness measured by a novel fairness metric defined in this paper. Therefore, we propose an experimental congestion avoidance mechanism to improve TCP smoothness for media-streaming applications. The mechanism relies on a fine-grained RTT estimation to measure the network condition, and coordinates the upward and backward window adjustments to abolish the damage of unsynchronized window control. Congestive packet drops are reduced by a new control parameter γ, and the bottleneck queue length can also be controlled in an end-to-end way. Simulation results confirm that the new mechanism enhance significantly the smoothness and fairness, without a cost of responsiveness. In fact, by enabling a new parameter δ, the responsiveness can be even enhanced when the bandwidth is under-utilized...|$|R
40|$|Service {{prioritization}} {{among different}} traffic classes {{is an important}} goal for the future Internet. Conventional approaches to solving this problem consider the existing best-effort class as the low-priority class, and attempt to develop mechanisms that provide "better-than-best-effort" service. In this paper, we explore the opposite approach, and devise a new distributed algorithm to realize a low-priority service ({{as compared to the}} existing best effort) from the network endpoints. To this end, we develop TCP Low Priority (TCP-LP), a distributed algorithm whose goal is to utilize only the excess network bandwidth as compared to the "fair share" of bandwidth as targeted by TCP. The key mechanisms unique to TCP-LP congestion control are the use of one-way packet delays for <b>congestion</b> <b>indications</b> and a TCP-transparent congestion avoidance policy. Our simulation results show that: (1) TCP-LP is largely non-intrusive to TCP traffic; (2) both single and aggregate TCP-LP flows are able to successfully utilize excess network bandwidth; moreover, multiple TCP-LP flows share excess bandwidth fairly; (3) substantial amounts of excess bandwidth are available to low-priority class, even in the presence of "greedy" TCP flows; (4) the response times of web connections in the best-effort class decrease by up to 90 % when long-lived bulk data transfers use TCP-LP rather than TCP...|$|R
40|$|Abstract—Service {{prioritization}} {{among different}} traffic classes {{is an important}} goal for the Internet. Conventional approaches to solving this problem consider the existing best-effort class as the low-priority class, and attempt to develop mechanisms that provide “better-than-best-effort ” service. In this paper, we explore the opposite approach, and devise a new distributed algorithm to realize a low-priority service ({{as compared to the}} existing best effort) from the network endpoints. To this end, we develop TCP Low Priority (TCP-LP), a distributed algorithm whose goal is to utilize only the excess network bandwidth as compared to the “fair share” of bandwidth as targeted by TCP. The key mechanisms unique to TCP-LP congestion control are the use of one-way packet delays for early <b>congestion</b> <b>indications</b> and a TCP-transparent congestion avoidance policy. The results of our simulation and Internet experiments show that that: (1) TCP-LP is largely non-intrusive to TCP traffic; (2) both single and aggregate TCP-LP flows are able to successfully utilize excess network bandwidth; moreover, multiple TCP-LP flows share excess bandwidth fairly; (3) substantial amounts of excess bandwidth are available to the low-priority class, even in the presence of “greedy ” TCP flows; (4) the response times of web connections in the best-effort class decrease by up to 90 % when long-lived bulk data transfers use TCP-LP rather than TCP; (5) despite their low-priority nature, TCP-LP flows are able to utilize significant amounts of available bandwidth in a wide-area network environment. Keywords — TCP-LP, TCP, available bandwidth, service prioritization, TCP-transparency. I...|$|R
40|$|Due to the {{character}} of the original source materials and the nature of batch digitization, quality control issues may be present in this document. Please report any quality issues you encounter to digital@library. tamu. edu, referencing the URI of the item. Includes bibliographical references (leaves 36 - 37). Issued also on microfiche from Lange Micrographics. Transmission control protocol (TCP), the widely used transport protocol in the Internet, assumes that packet losses are because of congestion. Wireless networks have higher error rates than wired networks; TCP misinterprets the error losses as congestion and wrongly invokes congestion control algorithms. In the proposed scheme, we show that by using <b>congestion</b> <b>indication</b> feedback from the network, performance of TCP can be improved in network paths containing wireless links. The routers in the network detect congestion and set a <b>congestion</b> <b>indication</b> bit on packets flowing in the forward direction. The <b>congestion</b> <b>indication</b> is communicated back to the users through the transport-level acknowledgement. When the sender encounters a packet loss, explicit <b>congestion</b> <b>indication</b> feedback received for the packets sent before and after the packet dropped are used to identify the state of the network at the time of drop. If the network is identified as not congested when the packet was lost and the recent <b>congestion</b> <b>indication</b> feedback is also low, then the packet is considered to be lost because of transmission error. We compared our scheme against TCP-Reno which assumes that all packet losses are because of congestion. Under low congestion in the network, our scheme can lead to significant throughput improvement...|$|E
40|$|We {{propose a}} scheme for {{congestion}} avoidance in networks using a connectionless protocol {{at the network}} layer. The scheme uses feedback from the network to the users of the network. The interesting challenge for the scheme {{is to use a}} minimal amount of feedback (one bit in each packet) from the network to adjust the amount of traffic allowed into the network. The servers in the network detect congestion and set a <b>congestion</b> <b>indication</b> bit on packets flowing in the forward direction. The <b>congestion</b> <b>indication</b> is communicated back to the users through the transport level acknowledgement. The scheme is distributed [...] ...|$|E
40|$|Mathematical {{models of}} {{congestion}} control capture the <b>congestion</b> <b>indication</b> mechanism at the router {{in two different}} ways: rate-based models, where the queue-length at the router does not explicitly appear in the model, and queue-based models, where the queue length at the router is explicitly {{a part of the}} model. Even though most <b>congestion</b> <b>indication</b> mechanisms use the queue length to compute the packet marking or dropping probability to indicate congestion, we argue that, depending upon the choice of the parameters of the AQM scheme, one would obtain a rate-based model or a rate-and-queue-based model as the deterministic limit of a stochastic system with a large number of users...|$|E
40|$|Some new Internet-based {{applications}} such as streaming media cannot function well with TCP's decrease-by-half response to <b>congestion</b> <b>indications</b> from the network. However, to prevent congestion collapse, {{it is imperative that}} all applications use some form of congestion control. Furthermore, for such a mechanism to be feasible, it must converge to fairness and efficiency, just as TCP does. This thesis presents a framework that allows an application to choose a suitably aggressive or smooth congestion response from a wide family of window-based protocols called CYRF (for Choose Your Response Function) that are designed to converge to fairness. We also give a simple rule for smooth CYRF flows to be TCP-friendly. We first derive a sufficient condition that ensures convergence to fairness. We then present the surprising result that an application can satisfy this fairness condition and construct a congestion response tailored to its needs by choosing from almost any pair of monotonically non-decreasing functions. Constructing a window increase policy using a slowly increasing function results in an aggressive protocol. Similarly, a slowly increasing function in the decrease policy gives rise to smooth protocols. We characterize TCP-friendliness in steady-state and show that any smooth CYRF protocol can be TCP-friendly if the product of its window increase and decrease functions is proportional to the window size. An interesting aspect of this work is that all commonly used window-based protocols such as TCP, GAIMD, and binomial congestion control are shown to be special cases of a single family of protocols, thus providing a powerful unified framework for analyzing them. We derive most of the important results about these protocols as special cases of the results for CYRF...|$|R
50|$|The {{hardware}} {{was again}} a multiprocessor structure with 16 processors sharing a common memory but this latter one {{was not a}} separate PCB but, rather than this, it was distributed among the 16 PCBs to avoid single points of failure. The interconnection of PCBs was a shared multimaster bus of 40Mbit/s capacity as designed and manufactured by the company DIMAT, S.A.. It also included a series channel for maintenance, monitoring, reprogramming and reinitialization of the different modules by a terminal connected to them. The software was developed by ENHER {{in collaboration with the}} company DIMAT, S.A.. The routing algorithm continue to be the same but the distance function was changed to a less dynamic one. A flow control procedure based on metering the <b>congestion</b> and backwards <b>indication</b> to the source was introduced.|$|R
40|$|In Chapter 2, {{we propose}} several two-timescale simulation-based actor-critic {{algorithms}} for solution of infinite horizon Markov Decision Processes (MDPs) with finite state-space under {{the average cost}} criterion. On the slower timescale, all the algorithms perform a gradient search over corresponding policy spaces using two different Simultaneous Perturbation Stochastic Approximation (SPSA) gradient estimates. On the faster timescale, the differential cost function corresponding to a given stationary policy is updated and averaged for enhanced performance. A proof of convergence to a locally optimal policy is presented. Next, a memory efficient implementation using a feature-vector representation of the state-space and TD (0) learning along the faster timescale is discussed. A three-timescale simulation based algorithm for solution of infinite horizon discounted-cost MDPs via the Value Iteration approach is also proposed. An approximation of the Dynamic Programming operator T {{is applied to the}} value function iterates. A sketch of convergence explaining the dynamics of the algorithm using associated ODEs is presented. Numerical experiments on rate based flow control on a bottleneck node using a continuous-time queueing model are presented using the proposed algorithms. Next, in Chapter 3, we develop three simulation-based algorithms for finite-horizon MDPs (FHMDPs). The first algorithm is developed for finite state and compact action spaces while the other two are for finite state and finite action spaces. Convergence analysis is briefly sketched. We then concentrate on methods to mitigate the curse of dimensionality that affects FH-MDPs severely, as there is one probability transition matrix per stage. Two parametrized actor-critic algorithms for FHMDPs with compact action sets are proposed, the ‘critic’ in both algorithms learning the policy gradient. We show w. p 1 convergence to a set with the necessary condition for constrained optima. Further, a third algorithm for stochastic control of stopping time processes is presented. Numerical experiments with the proposed finite-horizon algorithms are shown for a problem of flow control in communication networks. Towards stochastic optimization, in Chapter 4, we propose five algorithms which are variants of SPSA. The original one measurement SPSA uses an estimate of the gradient of objective function L containing an additional bias term not seen in two-measurement SPSA. We propose a one-measurement algorithm that eliminates this bias, and has asymptotic convergence properties making for easier comparison with the two-measurement SPSA. The algorithm, under certain conditions, outperforms both forms of SPSA with the only overhead being the storage of a single measurement. We also propose a similar algorithm that uses perturbations obtained from normalized Hadamard matrices. The convergence w. p. 1 of both algorithms is established. We extend measurement reuse to design three second-order SPSA algorithms, sketch the convergence analysis and present simulation results on an illustrative minimization problem. We then propose several stochastic approximation implementations for related algorithms in flow-control of communication networks, beginning with a discrete-time implementation of Kelly’s primal flow-control algorithm. Convergence with probability 1 is shown, even in the presence of communication delays and stochastic effects seen in link <b>congestion</b> <b>indications.</b> Two relevant enhancements are then pursued :a) an implementation of the primal algorithm using second-order information, and b) an implementation where edge-routers rectify misbehaving flows. Also, discrete-time implementations of Kelly’s dual algorithm and primal-dual algorithm are proposed. Simulation results a) verifying the proposed algorithms and, b) comparing stability properties with an algorithm in the literature are presented...|$|R
40|$|We compare {{between the}} binary <b>congestion</b> <b>indication</b> scheme and the {{explicit}} rate indication scheme proposed for congestion control of ATM's available bit rate service (ABR). The fairness {{problems of the}} binary <b>congestion</b> <b>indication</b> scheme that arise when mixing long and short distance traffic are investigated. Our simulations suggest that the unfairness noticed in this case towards the long distance traffic mainly results from {{the difference in the}} number of the traversed hops and not from the difference in propagation delay. We also introduce a simple approach with which this unfairness can be avoided. This approach is based on setting the multiple decrease factor in an inverse relation to the number of the traversed hops...|$|E
40|$|We {{consider}} a simple model of parallel TCP connections defined as follows. There are N connections competing for a bottleneck of fixed capacity. Each connection {{is assumed to}} increase its send rate linearly in time in absence of <b>congestion</b> <b>indication</b> and otherwise decreases its rate to a fraction β of the current send rate. Whenever aggregate send rate of the connections hits the link capacity, a single connection is signalled a <b>congestion</b> <b>indication.</b> Under the prevailing assumptions, and assuming only in addition a mild stability condition, we obtain that the throughput is the factor of the link capacity, 1 − 1 /(1 + const N), with const =(1 + β) /(1 − β). This result appears to be previously unknown; despite simplicity of its final form, it is not immediate. The result is of practical importance as it elucidates the throughpu...|$|E
40|$|We {{propose a}} scheme for {{congestion}} avoidance in networks using a connectionless protocol {{at the network}} layer. The scheme uses feedback from the network to the users of the network. The interesting challenge for the scheme {{is to use a}} minimal amount of feedback (one bit in each packet) from the network to adjust the amount of traffic allowed into the network. The servers in the network detect congestion and set a <b>congestion</b> <b>indication</b> bit on packets flowing in the forward direction. The <b>congestion</b> <b>indication</b> is communicated back to the users through the transport level acknowledgement. The scheme is distributed, adapts to the dynamic state of the network, converges to the optimal operating point, is quite simple to implement, and has low overhead while operational. The scheme also addresses a very important aspect of fairness in the service provided to the various sources utilizing the network. The scheme attempts to maintain fairness in service provided to multiple sources. This paper presents the scheme and the analysis that went into the choice of the various decision mechanisms. We also address the performance of the scheme under transient changes in the network and for pathological conditions...|$|E
40|$|This paper {{deals with}} the {{introduction}} and designing of a buffer manager, which {{is a part of}} the quality manager of the client. The aim of designing buffer manager is to prevent the buffer from overflowing, under flowing, control the jitter and send the <b>congestion</b> <b>indication</b> signals to the server. When the play out buffer indicates buffer overflow, it is not possible for the decoder to decode all frames with in stipulated time, then some of the low quality frames will be dropped. To drop frames, an algorithm named as ‘Balanced Frame Drop ’ is proposed in this paper [...] The <b>congestion</b> <b>indication</b> mechanism at receiver has been discussed in this paper. If the number of packets loss is greater than the threshold value, then it is treated as another indication for congestion. Jitter can cause jerkiness in playback due to the failure of some samples to meet their presentation deadlines. The use of buffering effectively extends the presentation deadlines for all media samples and in most cases practically eliminates playback jerkiness due to delay jitter. The playback buffer reduces the number of packets that arrived with in their playback deadline. The extended presentation deadlines for the media samples allow retransmission to take place when packets are lost; it is possible through playback buffer and play out scheduler. Key words: Frame drop, play out buffer, Jitter, buffer underflow, buffer overflo...|$|E
40|$|Rate based {{congestion}} control promises effective traffic management for ABR service class suitable to data communications in ATM networks. The rate based {{congestion control}} algorithm dynamically regulates transmission rate of source end system according to feedback {{information from the}} network. In this paper, we described two rate based congestion control algorithms, Explicit Forward <b>Congestion</b> <b>Indication</b> (EFCI) and Explicit Rate Indication Congestion Avoidance (ERICA) developed by ATM forum. From the simulation results, we can observe that, both have cell drop problem at intermediate switch in ATM network. We then propose an improvement to ERICA scheme to overcome this proble...|$|E
40|$|The {{growth of}} network {{intensive}} Internet applications has made gateway congestion control a high priority. The IETF Performance and Congestion Control Working Group surveyed and reviewed gateway congestion control and avoidance approaches {{in a series}} of meetings during 1988 and 1989. The {{purpose of this paper is}} to present our review of the congestion control approaches, as a way of encouraging new discussion and experimentation. Included in the survey are Source Quench, Random Drop, <b>Congestion</b> <b>Indication</b> (DEC Bit), and Fair Queueing. The task remains for Internet implementors to determine and agree on the most effective mechanisms for controlling gateway congestion...|$|E
