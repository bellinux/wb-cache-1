1060|205|Public
5|$|Many {{algorithmic}} {{methods for}} finding graph homomorphisms, like backtracking, <b>constraint</b> <b>propagation</b> and local search, {{apply to all}} CSPs.|$|E
50|$|Every local {{consistency}} condition can {{be enforced}} by a transformation {{that changes the}} problem without changing its solutions. Such a transformation is called <b>constraint</b> <b>propagation.</b> <b>Constraint</b> <b>propagation</b> works by reducing domains of variables, strengthening constraints, or creating new ones. This leads to a reduction of the search space, making the problem easier to solve by some algorithms. <b>Constraint</b> <b>propagation</b> {{can also be used}} as an unsatisfiability checker, incomplete in general but complete in some particular cases.|$|E
50|$|<b>Constraint</b> <b>propagation</b> {{techniques}} are {{methods used to}} modify a constraint satisfaction problem. More precisely, they are methods that enforce a form of local consistency, which are conditions related to the consistency {{of a group of}} variables and/or constraints. <b>Constraint</b> <b>propagation</b> has various uses. First, it turns a problem into one that is equivalent but is usually simpler to solve. Second, it may prove satisfiability or unsatisfiability of problems. This is not guaranteed to happen in general; however, it always happens for some forms of <b>constraint</b> <b>propagation</b> and/or for certain kinds of problems. The most known and used form of local consistency are arc consistency, hyper-arc consistency, and path consistency. The most popular <b>constraint</b> <b>propagation</b> method is the AC-3 algorithm, which enforces arc consistency.|$|E
40|$|International audienceComplex {{systems design}} and {{especially}} automotive design is facing continuous technological evolution that needs stronger integration. In this paper, {{a method for}} representing system architecture is presented. This method is based on dependencies and <b>constraints</b> <b>propagation</b> which allows us {{to focus on the}} co-evolution of product, organization and processes domains...|$|R
40|$|Abstract. This article {{introduces}} {{two techniques}} {{to improve the}} propagation efficiency of CSP based finite model generation methods. One approach consists in statically rewriting some selected clauses so as to trigger added <b>constraint</b> <b>propagations.</b> The other approach uses a dynamic lookahead strategy to both filter out inconsistent domain values and select the most appropriate branching variable according to a first fail heuristic. ...|$|R
40|$|In {{order to}} get {{continuous}} dynamic localization of a mobile robot, dead reckoning and absolute sensors are usually merged. The models used for this fusion are non linear and, therefore, classical tools (such as Kalman filter) cannot guarantee a maximum error estimation. In some applications, integrity is essential {{and the ability to}} guaranty the result is a crucial point. There are ensemblist approaches that are insensitive to non linearity. In this context, the random errors are only modeled by their maximum bound. This paper presents a new technique to merge the data of redundant sensors with a guaranteed result based on <b>constraints</b> <b>propagation</b> techniques on intervals. We have thus developed an approach for the fusion of the 4 ABS wheel encoders, a measure of the angle of the driving wheel and a differential GPS receiver. Experimental results show that the precision that one can obtain is very good with a guaranteed result. Moreover, <b>constraints</b> <b>propagation</b> techniques are well adapted to a real time implementation. I...|$|R
5000|$|Constant {{propagation}} and <b>constraint</b> <b>propagation</b> {{using an}} event-driven approach.|$|E
5000|$|... #Subtitle level 3: <b>Constraint</b> <b>propagation</b> for arc and path {{consistency}} ...|$|E
5000|$|... logilab-{{constraint}}, an {{open source}} constraint solver written in pure Python with <b>constraint</b> <b>propagation</b> algorithms.|$|E
40|$|ABSTRACT: Complex {{systems design}} and {{especially}} automotive design is facing continuous technological evolution that needs stronger integration. In this paper, {{a method for}} representing system architecture is presented. This method is based on dependencies and <b>constraints</b> <b>propagation</b> which allows us {{to focus on the}} co-evolution of product, organization and processes domains. hal- 00331722, version 1 - 17 Oct 2008 KEY-WORDS: competencies product architecture, organization structure, processes structure, DSM, 1...|$|R
40|$|In {{this chapter}} we explain briefly the {{fundamentals}} of the interactive scores formalism. Then we develop a solution for implementing the ECO machine by mixing petri nets and <b>constraints</b> <b>propagation.</b> We also present another solution for implementing the ECO machine using concurrent constraint programming. Finally, we present an extension of interactive score with conditional branching. Comment: Extended version of Book Chapter published in Constraint Programming in Music, 201...|$|R
40|$|The {{planning}} {{problem is}} based on a production specification that is composed of real world tasks which can be described by functions and constraints. This work deal with a description of a reactive workshop guide tool system, which takes unknown factors into account. This system {{is based on}} task definition and the feasibility of the tasks can be verified by analyzing the coherence among their constraints by using <b>constraints</b> <b>propagation...</b>|$|R
50|$|The form of <b>constraint</b> <b>propagation</b> that enforces path {{consistency}} might {{introduce new}} constraints. When two variables {{are not related}} by a binary constraint, they are virtually related by the constraint allowing any pair of values. However, some pair of values might be removed by <b>constraint</b> <b>propagation.</b> The resulting constraint is no longer satisfied by all pairs of values. Therefore, {{it is no longer}} a virtual, trivial constraint.|$|E
50|$|The {{iterated}} {{application of}} the unit clause rule {{is referred to as}} unit propagation or Boolean <b>constraint</b> <b>propagation</b> (BCP).|$|E
50|$|<b>Constraint</b> <b>propagation</b> in {{constraint}} satisfaction problems {{is a typical}} example of a refinement model, and spreadsheets are a typical example of a perturbation model.|$|E
40|$|International audienceToday, the on-demand {{transportation}} {{is used for}} elderly and disabled people for short distances. Each user provides a specific demand: a particular ride from an origin to a destination with hard time constraints like time windows, maximum user ride time, maximum route duration limits and precedence. This paper deals with the resolution of these problems (Dial-a-Ride Problems - DARP), including the possibility of one transshipment from a transfer point by request. We propose an algorithm based on insertion techniques and <b>constraints</b> <b>propagation...</b>|$|R
50|$|Arithmetic {{constraints}} over finite domains, finite set <b>constraints,</b> generalized <b>propagation,</b> interval reasoning over non-linear constraints, interfaces {{to external}} simplex solvers, constraint handling rules (CHR) and more.|$|R
40|$|We propose an {{algebraic}} {{approach to}} the design and transformation of constraint networks, inspired by Architectural Design Rewriting. The approach {{can be understood as}} (i) an extension of ADR with constraints, and (ii) an application of ADR to the design of reconfigurable constraint networks. The main idea is to consider classes of constraint networks as algebras whose operators are used to denote constraint networks with terms. Constraint network transformations such as <b>constraint</b> <b>propagations</b> are specified with rewrite rules exploiting the network’s structure provided by terms...|$|R
50|$|Constraint {{satisfaction}} {{problems on}} finite domains are typically solved using {{a form of}} search. The most used techniques are variants of backtracking, <b>constraint</b> <b>propagation,</b> and local search.|$|E
50|$|Unit {{propagation}} (UP) or Boolean <b>Constraint</b> <b>propagation</b> or the one-literal rule (OLR) is {{a procedure}} of automated theorem proving that can simplify {{a set of}} (usually propositional) clauses.|$|E
50|$|His Ph.D. {{dissertation}} on computer vision initiated {{the field of}} <b>constraint</b> <b>propagation,</b> which allowed a computer program to generate a detailed three-dimensional view of an object given a two dimensional drawing with shadows.|$|E
40|$|In micro {{electronics}} design, power consumption, {{speed of}} operation, are crucial <b>constraints.</b> <b>Propagation</b> delay of circuit component {{has an impact}} on such factors. This paper investigates the effect of supply and threshold voltages and frequency at which the VLSI chip is operated and the desired techniques for lowering the voltage and frequencies to obtain the low power consumed VLSI system. Some special techniques which can reduce the clock frequency like pipelining and parallel processing strategies for desirable propagation delays are explained in brief in this pape...|$|R
40|$|In {{microelectronics}} design, power consumption, {{speed of}} operation, are crucial <b>constraints.</b> <b>Propagation</b> delay of circuit component {{has an impact}} on such factors. Pipelining and parallel processing strategies are utilized for desirable propagation delays and hence for clock and throughput variation respectively. To some extent variation in propagation delay is responsible for power consumption reduction. In this paper, pipelining and parallel processing concepts are analyzed with reference to task scheduling in real time system. Power consumption and speed of operation issues of such systems are analyzed...|$|R
40|$|We {{propose a}} {{formalism}} for construction {{and performance of}} musical pieces composed of temporal structures involving discrete interactive events. The occurrence in time of these structures and events is partially defined according to constraints, such as Allen temporal relations. We represent the temporal structures using two constraint models. A <b>constraints</b> <b>propagation</b> model {{is used for the}} score composition stage whereas a non deterministic temporal concurrent constraint calculus (NTCC) is used for the performance phase. The models are tested with examples of temporal structures computed with the GECODE constraint system library and run with a NTCC interpreter. 1...|$|R
50|$|Constraint {{satisfaction}} {{problems on}} finite domains are typically solved using {{a form of}} search. The most used techniques are variants of backtracking, <b>constraint</b> <b>propagation,</b> and local search. These techniques are used on problems with nonlinear constraints.|$|E
50|$|One {{could also}} allow the next {{function}} {{to choose which}} variable should be assigned when extending a partial candidate, based on {{the values of the}} variables already assigned by it. Further improvements can be obtained by the technique of <b>constraint</b> <b>propagation.</b>|$|E
50|$|All {{forms of}} local {{consistency}} can be enforced by <b>constraint</b> <b>propagation,</b> which {{may reduce the}} domains of variables and the sets of assignments satisfying a constraint and may introduce new constraints. Whenever <b>constraint</b> <b>propagation</b> produces an empty domain or an unsatisfiable constraint, the original problem is unsatisfiable. Therefore, all forms of local consistency {{can be used as}} approximations of satisfiability. More precisely, they can be used as incomplete unsatisfiability algorithms, as they can prove that a problem is unsatisfiable, but are in general unable to prove that a problem is satisfiable. Such approximated algorithms can be used by search algorithms (backtracking, backjumping, local search, etc.) as heuristics for telling whether a partial solution can be extended to satisfy all constraints without further analyzing it.|$|E
40|$|The problem {{considered}} is make {{to order}} situations where products due dates {{and raw materials}} delivery times are constraints that the user must try to satisfy or negotiate. Those constraints, coupled with recipe and resource constraints, can be conveniently handled through <b>constraints</b> <b>propagation</b> techniques both in planning and scheduling. An interactive planning system is discussed where the user gets, after each decision, a feedback in terms of batches processing time windows, equipment units load and estimated resources utilization. APS-like scheduling heuristics exploit these measures to implement internal procedures to select batches in the sequential scheduling procedure...|$|R
40|$|This paper {{describes}} object-centered symbolic {{representation and}} distributed matching strategies of 3 D objects in a schematic form which occur in engineering drawings and maps. The object-centered representation has a hierarchical structure and is constructed from symbolic representations of schematics. With this representation, two independent schematics representing the same object can be matched. We also consider matching strategies using distributed algorithms. The object recognition {{is carried out}} with two matching methods: (1) matching between an object model and observed data at {{the lowest level of}} the hierarchy, and (2) <b>constraints</b> <b>propagation.</b> The first is carried out with symbolic Hopfield-type neural networks and the second is achieved via hierarchical winner-takes-all algorithms<br /...|$|R
40|$|International audienceAbstract— We {{propose a}} {{formalism}} for composition and rformance of musical pieces involving temporal structures and discrete interactive events. We use the Allen relations to constrain these structures and to partially define a temporal order on them. During the score composition stage, {{we use a}} <b>constraints</b> <b>propagation</b> model to maintain the temporal relations between the structures. For the performance stage, we must allow the composer to trigger the interactive events “whenever” he wants {{and we have to}} also maintain the temporal relations in a real-time context. We use a model based on Petri nets for this stage. We also provide a solution to define global constraints in addition of the local temporal constraints inspired by the NTCC formalism...|$|R
50|$|Even if <b>constraint</b> <b>propagation</b> {{does not}} produce an empty domain or an unsatisfiable constraint, it may {{nevertheless}} reduce the domains or strengthen the constraints. If this is the case, the search space {{of the problem is}} reduced, thus reducing the amount of search needed to solve the problem.|$|E
5000|$|The second {{generation}} of engines flourished in the 1990s. They are constraint solvers using <b>constraint</b> <b>propagation</b> and search techniques developed in the Artificial Intelligence domain. They are the dominant technology still in use commercially. An overview {{can be found in}} Knowledge-Based Configuration - From Research to Business Cases.|$|E
50|$|The {{techniques}} used in constraint satisfaction {{depend on the}} kind of constraints being considered. Often used are constraints on a finite domain, to the point that constraint satisfaction problems are typically identified with problems based on constraints on a finite domain. Such problems are usually solved via search, in particular a form of backtracking or local search. <b>Constraint</b> <b>propagation</b> are other methods used on such problems; most of them are incomplete in general, that is, they may solve the problem or prove it unsatisfiable, but not always. <b>Constraint</b> <b>propagation</b> methods are also used in conjunction with search to make a given problem simpler to solve. Other considered kinds of constraints are on real or rational numbers; solving problems on these constraints is done via variable elimination or the simplex algorithm.|$|E
40|$|Scheduling can be formalized as a Constraint Satisfaction Problem (CSP). Within this {{framework}} activities {{belonging to a}} plan are interconnected via temporal constraints that account for slack among them. Temporal representation must include methods for <b>constraints</b> <b>propagation</b> and provide a logic for symbolic and numerical deductions. In this paper we describe a support framework for opportunistic reasoning in constraint directed scheduling. In order to focus the attention of an incremental scheduler on critical problem aspects, some discrete temporal indexes are presented. They are also useful for the prediction {{of the degree of}} resources contention. The predictive method expressed through our indexes {{can be seen as a}} Knowledge Source for an opportunistic scheduler with a blackboard architecture...|$|R
50|$|Ingres {{supports}} {{the following table}} constraints, as well as <b>propagation</b> <b>constraint</b> and ON UPDATE CASCADE on foreign keys.|$|R
40|$|Abstract — In {{this paper}} a {{stabilizing}} control scheme to steer hierarchical formations of unicycle robots is proposed. Hierarchical formations {{are characterized by}} modular leader-follower units suitably interconnected. Robots linear velocity and trajectory curvature are forced to satisfy some given bounds. An original contribution of {{the paper is the}} study of the effect of these bounds on the admissible paths of the robots and the derivation of inter-robot <b>constraints</b> <b>propagation</b> formulae. A peculiar feature of the proposed control strategy is that the position of the follower in the basic unit is not rigidly fixed with respect to the leader but varies in proper circle arcs centered in the leader reference frame. Simulation experiments illustrate the theory and show the effectiveness of the proposed design. I...|$|R
