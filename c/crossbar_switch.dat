313|291|Public
5|$|Processor–processor and processor–memory {{communication}} can {{be implemented}} in hardware in several ways, including via shared (either multiported or multiplexed) memory, a <b>crossbar</b> <b>switch,</b> a shared bus or an interconnect network of a myriad of topologies including star, ring, tree, hypercube, fat hypercube (a hypercube {{with more than one}} processor at a node), or n-dimensional mesh.|$|E
5|$|In April 1958, S. Gill (Ferranti) {{discussed}} {{parallel programming}} {{and the need}} for branching and waiting. Also in 1958, IBM researchers John Cocke and Daniel Slotnick discussed the use of parallelism in numerical calculations for the first time. Burroughs Corporation introduced the D825 in 1962, a four-processor computer that accessed up to 16 memory modules through a <b>crossbar</b> <b>switch.</b> In 1967, Amdahl and Slotnick published a debate about the feasibility of parallel processing at American Federation of Information Processing Societies Conference. It was during this debate that Amdahl's law was coined to define the limit of speed-up due to parallelism.|$|E
25|$|Early exchanges were {{electromechanical}} systems using motors, shaft drives, rotating {{switches and}} relays. Some types of automatic exchanges were the Strowger switch or step-by-step switch, All Relay, X-Y, panel switch and the <b>crossbar</b> <b>switch.</b>|$|E
50|$|For {{instrumentation}} use, James Cunningham, Son and Company made high-speed, very-long-life <b>crossbar</b> <b>switches</b> with physically small {{mechanical parts}} which permitted faster operation than telephone-type <b>crossbar</b> <b>switches.</b> Many of their switches had the mechanical Boolean AND function of telephony <b>crossbar</b> <b>switches,</b> but other models had individual relays (one coil per crosspoint) in matrix arrays, connecting the relay contacts to x and y buses. These latter types were equivalent to separate relays; {{there was no}} logical AND function built in. Cunningham <b>crossbar</b> <b>switches</b> had precious-metal contacts capable of handling millivolt signals.|$|R
50|$|A junctor is {{a circuit}} used in analog {{telephone}} exchanges, including the Number One <b>Crossbar</b> <b>Switching</b> System, Number Five <b>Crossbar</b> <b>Switching</b> System, Panel switch, 1ESS switch and other switches.|$|R
40|$|Buffered <b>crossbar</b> <b>switches</b> are {{a special}} type of <b>crossbar</b> <b>switches.</b> In such a switch, besides normal input queues and output queues, a small buffer is {{associated}} with each crosspoint. Due to the intro-duction of crosspoint buffers, output and input contention is elimi-nated, and the scheduling process for buffered <b>crossbar</b> <b>switches</b> is greatly simplified. Moreover, crosspoint buffers enable the switch {{to work in an}} asynchronous mode and easily schedule and trans-mit variable length packets. Compared with fixed length packet scheduling or cell scheduling, variable length packet scheduling, or packet scheduling for short, has some unique advantages: higher throughput, shorter packet latency and lower hardware cost. In this paper, we present a fast and practical scheduling scheme for buffered <b>crossbar</b> <b>switches</b> called Localized Asynchronous Packet Scheduling (LAPS). With LAPS, an input port or output port make...|$|R
2500|$|Architectural {{experiments}} are continuing {{in a number}} of directions, e.g. the Cyclops64 system uses a [...] "supercomputer on a chip" [...] approach, in a direction away from the use of massive distributed processors. Each 64-bit Cyclops64 chip contains 80 processors, and the entire system uses a globally addressable memory architecture. The processors are connected with non-internally blocking <b>crossbar</b> <b>switch</b> and communicate with each other via global interleaved memory. There is no data cache in the architecture, but half of each SRAM bank {{can be used as a}} scratchpad memory. Although this type of architecture allows unstructured parallelism in a dynamically non-contiguous memory system, it also produces challenges in the efficient mapping of parallel algorithms to a many-core system.|$|E
5000|$|... #Caption: Western Electric 100-point six-wire Type B <b>crossbar</b> <b>switch</b> ...|$|E
5000|$|<b>Crossbar</b> <b>switch</b> Describes the {{switching}} {{element of a}} Clos network.|$|E
40|$|Abstract—Buffered <b>crossbar</b> <b>switches</b> {{are special}} <b>crossbar</b> <b>switches</b> {{with a small}} {{exclusive}} buffer at each crosspoint of the crossbar. They demonstrate unique advantages, such as vari-able length packet handling and distributed scheduling, over traditional unbuffered <b>crossbar</b> <b>switches.</b> The current main approach for buffered <b>crossbar</b> <b>switches</b> to provide perfor-mance guarantees is to emulate push-in-first-out output queued switches. However, such an approach has several drawbacks, and in particular it has difficulty in providing tight constant performance guarantees. To address the issue, we propose in this paper the guaranteed-performance asynchronous packet scheduling (GAPS) algorithm for buffered <b>crossbar</b> <b>switches.</b> GAPS intends to provide tight performance guarantees, and requires no speedup. It directly handles variable length packets without segmentation and reassembly, and makes scheduling decisions in a distributed manner. We show by theoretical analysis that GAPS achieves constant performance guarantees. We also prove that GAPS has a bounded crosspoint buffer size of 3 L, where L is the maximum packet length. Finally, we present simulation data to verify the analytical results and show the effectiveness of GAPS. Keywords-buffered crossbar switches; performance guaran-tees; speedup; I...|$|R
40|$|Traditional <b>crossbar</b> <b>switches</b> use {{centralized}} scheduling algorithms {{with high}} time complexity. In contrast, buffered <b>crossbar</b> <b>switches</b> {{are capable of}} distributed scheduling due to crosspoint buffers, which decouple the dependency between inputs and outputs. However, crosspoint buffers are expensive on-chip memories. To reduce the hardware cost of buffered <b>crossbar</b> <b>switches</b> and make them scalable, we consider partially-buffered <b>crossbar</b> <b>switches,</b> whose crosspoint buffers can be of an arbitrarily small size and store only part of a packet instead of the entire packet. In this paper, we propose the Packet-mode Asynchronous Scheduling Algorithm (PASA) for partially buffered <b>crossbar</b> <b>switches.</b> PASA combines the features of both distributed and centralized scheduling algorithms. It works in an asynchronous mode and can directly handle variable length packets without Segmentation And Reassembly (SAR). We theoretically prove that, with a speedup of two, PASA achieves 100 % throughput for any admissible traffic. We also show that outputs in PASA have a large probability to avoid the more time-consuming centralized scheduling process, and thus make fast scheduling decisions. Finally, we present simulation data to verify the analytical results and evaluate the performance of PASA...|$|R
50|$|The special <b>crossbar</b> <b>switches</b> used in distributing {{satellite}} TV {{signals are}} called multiswitches.|$|R
5000|$|Universal Star Network <b>Crossbar</b> <b>Switch</b> - Number of {{switches}} 8 ...|$|E
5000|$|Well, in the beginning, {{early in}} the {{development}} process, several people were pushing for a <b>crossbar</b> <b>switch,</b> {{and the way the}} bus is designed, you could actually pull out the EIB and put in a <b>crossbar</b> <b>switch</b> if you were willing to devote more silicon space on the chip to wiring. We had to find a balance between connectivity and area, and there just was not enough room to put a full <b>crossbar</b> <b>switch</b> in. So we came up with this ring structure which we think is very interesting. It fits within the area constraints and still has very impressive bandwidth.|$|E
50|$|In electronics, a <b>crossbar</b> <b>switch</b> (cross-point switch, matrix switch) is a {{collection}} of switches arranged in a matrix configuration. A <b>crossbar</b> <b>switch</b> has multiple input and output lines that form a crossed pattern of interconnecting lines between which a connection may be established by closing a switch located at each intersection, the elements of the matrix. Originally, a <b>crossbar</b> <b>switch</b> consisted literally of crossing metal bars that provided the input and output paths. Later implementations achieved the same switching topology in solid state semiconductor chips. The cross-point switch is one of the principal switch architectures, together with a rotary switch, memory switch, and a crossover switch.|$|E
5000|$|... #Caption: Part of a bay of 10x20 3-wire <b>crossbar</b> <b>switches</b> in a LLF ...|$|R
40|$|After the {{original}} work of Hopfield and Tank, {{a lot of}} modified Hopfield neural network models have been proposed for combinatorial optimization problems. Recently, a positively selffeedbacked Hopfield neural network architecture was proposed by Li et al. and successfully applied to <b>crossbar</b> <b>switching</b> problem. In this paper, we analysis {{the dynamics of the}} positively self-feedbacked Hopfield neural network, then show the role of the self-feedback and point out where the good performance comes from. Based on the theoretical analysis, we get better simulation results for <b>crossbar</b> <b>switching</b> problem by selecting suitably positive self-feedback value of the network. Key words: positively self-feedbacked Hopfield neural network, <b>crossbar</b> <b>switching</b> problem, combinatorial optimization problems. 1...|$|R
5000|$|Nonblocking minimal {{spanning}} switch - {{describes how}} to combine <b>crossbar</b> <b>switches</b> into larger switches.|$|R
5000|$|... #Caption: A {{substitute}} for a 16x16 <b>crossbar</b> <b>switch</b> made from 12 4x4 crossbar switches.|$|E
50|$|However, the <b>crossbar</b> <b>switch</b> does so at {{the expense}} of using N2 (N squared) simple SPST switches. For large N (and the {{practical}} requirements of a phone switch are considered large) this growth was too expensive. Further, large crossbar switches had physical problems. Not only did the switch require too much space, but the metal bars containing the switch contacts would become so long that they would sag and become unreliable. Engineers also noticed that at any time, each bar of a <b>crossbar</b> <b>switch</b> was only making a single connection. The other contacts on the two bars were unused. This seemed to imply that most of the switching fabric of a <b>crossbar</b> <b>switch</b> was wasted.|$|E
5000|$|... #Caption: The C.mmp memory unit, {{with three}} racks visible, {{including}} the front {{panel of the}} <b>crossbar</b> <b>switch.</b>|$|E
5000|$|Processors may be {{interconnected}} using buses, <b>crossbar</b> <b>switches</b> or on-chip mesh networks. The bottleneck in the scalability of SMP using buses or <b>crossbar</b> <b>switches</b> is the bandwidth {{and power}} {{consumption of the}} interconnect among the various processors, the memory, and the disk arrays. Mesh architectures avoid these bottlenecks, and provide nearly linear scalability to much higher processor counts at the sacrifice of programmability: ...|$|R
40|$|Buffered <b>crossbar</b> <b>switches</b> are {{a special}} type of com-bined {{input-output}} queued switches with each crosspoint of the crossbar having small on-chip buffers. The introduc-tion of crosspoint buffers greatly simplifies the scheduling process of buffered <b>crossbar</b> <b>switches,</b> and furthermore en-ables buffered <b>crossbar</b> <b>switches</b> with speedup {{of two to}} eas-ily provide port based performance guarantees. However, recent research results have indicated that, in order to pro-vide flow based performance guarantees, buffered <b>crossbar</b> <b>switches</b> have to either increase the speedup of the cross-bar to three or greatly increase {{the total number of}} cross-point buffers, both adding significant hardware complexity. In this paper, we present scheduling algorithms for buffered <b>crossbar</b> <b>switches</b> to achieve flow based performance guar-antees with speedup of two and with only one or two buffers at each crosspoint. When there is no crosspoint blocking in a specific time slot, only the simple and distributed in-put scheduling and output scheduling are necessary. Other-wise, the special urgent matching is introduced to guarantee the on-time delivery of crosspoint blocked cells. With the proposed algorithms, buffered <b>crossbar</b> <b>switches</b> can pro-vide flow based performance guarantees by emulating push-in-first-out output queued switches, and we use the counting method to formally prove the perfect emulation. For the special urgent matching, we present sequential and paral-lel matching algorithms. Both algorithms converge with N iterations in the worst case, and the latter needs less itera-tions in the average case. Finally, we discuss an alternative backup-buffer implementation scheme to the bypass path, and compare our algorithms with existing algorithms in the literature...|$|R
40|$|The {{increasing}} demand for higher data {{rates on the}} Internet requires routers that deliver high performance for high-speed connections. Nowadays high speed routers use the buffered <b>crossbar</b> <b>switches,</b> which have been the interest for research and commercialization. In this paper, a study is made {{on the importance of}} buffered <b>crossbar</b> <b>switches</b> and their scheduling algorithms. A comparative analysis is made between these scheduling algorithms...|$|R
5000|$|... #Caption: Typical {{wire wrap}} {{construction}} of Bell System telephone <b>crossbar</b> <b>switch.</b> Some types of connection were soldered.|$|E
50|$|<b>Crossbar</b> <b>switch</b> - generic {{description}} of a switch connecting multiple inputs to multiple outputs in a matrix manner.|$|E
50|$|The {{obvious way}} to emulate a <b>{{crossbar}}</b> <b>switch</b> {{was to find}} some way to build it from smaller crossbar switches. If a <b>crossbar</b> <b>switch</b> could be emulated by some arrangement of smaller crossbar switches, then these smaller crossbar switches could also, in turn be emulated by even smaller crossbar switches. The switching fabric could become very efficient, and possibly even be created from standardized parts. This is called a Clos network.|$|E
50|$|Technologies like <b>crossbar</b> <b>switches,</b> Omega networks, HyperTransport or front-side bus {{can be used}} {{to dampen}} the bottleneck-effects.|$|R
50|$|The {{majority}} of class-4 switches in the Bell System during the 1950s and 1960s used <b>crossbar</b> <b>switches,</b> {{such as the}} Crossbar Tandem (XBT) variant of the Number One <b>Crossbar</b> <b>Switching</b> System, or 1XB switch. The Number 4 <b>Crossbar</b> ("4XB") tandem <b>switch</b> {{was used in the}} North American toll network from 1943 until the 1990s, when it was replaced by more modern digital switching equipment, such as the Lucent 4ESS switch or the Nortel DMS-200. The last 4XB switch in the United States was installed in 1976.|$|R
40|$|Abstract—Buffered <b>crossbar</b> <b>switches</b> {{are special}} <b>crossbar</b> <b>switches</b> with an {{exclusive}} buffer at each crosspoint. They demon-strate unique advantages over traditional unbuffered <b>crossbar</b> <b>switches,</b> such as asynchronous scheduling and variable length packet handling. However, since crosspoint buffers are expen-sive on-chip memories, it is desired that each crosspoint {{has only a}} small buffer. In this paper, we propose a scheduling algorithm called Fair Asynchronous Segment Scheduling (FASS) for buffered <b>crossbar</b> <b>switches,</b> which reduces the crosspoint buffer size by dividing packets into shorter segments before transmission. FASS also provides tight constant performance guarantees by emulating the ideal Generalized Processor Sharing (GPS) model. Furthermore, FASS requires no speedup for the crossbar, lowering the hardware cost and improving the switch capacity. By theoretical analysis, we prove that FASS is strongly stable and therefore achieves 100 % throughput. We also calculate the size bound for the crosspoint buffers and the reassembly buffers at output ports. Moreover, we show that FASS provides bounded delay guarantees. Finally, we present simulation data to verify the analytical results. I...|$|R
5000|$|... #Caption: Diagram of {{a typical}} SMP system. Three {{processors}} {{are connected to the}} same memory module through a system bus or <b>crossbar</b> <b>switch</b> ...|$|E
50|$|In the 1960s, Northern Electric {{developed}} the SA-1 {{community dial office}} as a small Class 5 <b>crossbar</b> <b>switch</b> for local use in rural areas.|$|E
5000|$|... {{adding a}} global {{interconnect}} {{for all of}} the processing elements, which was a triple-redundant switch which was easier to implement than a full <b>crossbar</b> <b>switch.</b>|$|E
40|$|In {{this work}} we ask the {{fundamental}} question: How many {{bits of information}} {{can be stored in}} a <b>crossbar</b> <b>switching</b> network? The answer is trivial when the switches of the network are in series with diodes (semi-conductive) but it is complicated when the switches are regular contacts. Exact explicit expressions and simple asymptotic bounds of the storage capacity (in bits) are derived for the general <b>crossbar</b> <b>switching</b> network with regular contact switches...|$|R
50|$|The company prospered in {{the early}} 20th century. It {{introduced}} the Relaymatic automatic switching system in 1939 and a <b>crossbar</b> <b>switching</b> system in 1950.|$|R
50|$|In the United States, {{most large}} cities were {{served by the}} Bell System and used the Panel switch, or later the Number One <b>Crossbar</b> <b>Switching</b> System (1XB), or the Number 5 <b>Crossbar</b> <b>Switching</b> Systems rather than {{step-by-step}} equipment. Los Angeles being a small town early in the 20th century and partly being served by an independent telephone company, grew {{to be a major}} exception. Before the advent of electronic switching systems, directors were commonly used in areas of the city served by GTE.|$|R
