10000|10000|Public
5|$|The Council {{meets in}} 10 {{different}} <b>configurations</b> of 28 national ministers (one per state). The precise membership of these <b>configurations</b> {{varies according to}} the topic under consideration; for example, when discussing agricultural policy the Council is formed by the 28 national ministers whose portfolio includes this policy area (with the related European Commissioners contributing but not voting).|$|E
5|$|A {{cellular}} automaton {{consists of an}} array of cells, each one of which has {{a finite number of}} possible states, together with a rule for updating all cells simultaneously based only on the states of neighboring cells. A configuration of a {{cellular automaton}} is an assignment of a state to every cell of the automaton; the update rule of a cellular automaton forms a function from <b>configurations</b> to <b>configurations,</b> with the requirement that the updated value of any cell depends only on some finite neighborhood of the cell, and that the function is invariant under translations of the input array.|$|E
5|$|A {{design team}} {{was formed in}} 1946 under the {{leadership}} of chief designer Ronald Bishop, who had been responsible for the Mosquito fighter-bomber. A number of unorthodox <b>configurations</b> were considered, ranging from canard to tailless designs; all were subsequently rejected. The Ministry of Supply was, however, interested in the most radical of the proposed designs and ordered two experimental tailless DH 108s to serve as proof of concept aircraft for testing swept-wing <b>configurations</b> in both low-speed and high-speed flight. During flight tests, the DH 108 gained a reputation for being accident-prone and unstable, leading de Havilland and BOAC to gravitate to conventional <b>configurations</b> and, necessarily, designs with less technical risk. The DH 108s were later modified to test the DH 106's power controls.|$|E
5000|$|Remote <b>configuration</b> options, {{including}} certificate-based zero-touch remote <b>configuration,</b> USB key <b>configuration</b> (light-touch), and manual <b>configuration.</b>|$|R
50|$|The {{purpose of}} <b>Configuration</b> Management (CM) is to {{establish}} and maintain the integrity of work products using <b>configuration</b> identification, <b>configuration</b> control, <b>configuration</b> status accounting, and <b>configuration</b> audits.|$|R
40|$|Abstract. 1 State-of-the-art product <b>configuration</b> enables {{companies}} to deliver customized products by selecting and assembling predefined <b>configuration</b> elements based on known relationships. This paper introduces an innovative concept, open <b>configuration,</b> {{in order to}} assist companies in configuring products that correspond exactly to what customers want. Superior to product <b>configuration,</b> open <b>configuration</b> involves both predefined <b>configuration</b> elements and new ones in configuring customized products. As a first step, this study explains the concept of open <b>configuration</b> and the basic principles. It also discusses in detail the challenges involved in open <b>configuration,</b> such as conceptual model development, open <b>configuration</b> optimization, and open <b>configuration</b> knowledge representation. ...|$|R
5|$|As some {{circuits}} have hosted Grands Prix {{using different}} <b>configurations,</b> {{the most recent}} configuration used is listed in the table below.|$|E
5|$|Like other groups, {{the members}} of this family show {{patterns}} in their electron <b>configurations,</b> especially the outermost shells, resulting in trends in chemical behavior. However, lawrencium is an exception, since its last electron is transferred to the 7p1/2 subshell due to relativistic effects.|$|E
5|$|On May 4, 2005 the United States Postal Service {{issued the}} American Scientists {{commemorative}} postage stamp series, a set of four 37-cent self-adhesive stamps in several <b>configurations</b> designed by artist Victor Stabin. The scientists depicted were von Neumann, Barbara McClintock, Josiah Willard Gibbs, and Richard Feynman.|$|E
40|$|This paper {{focuses on}} <b>configuration</b> {{as a process}} that iteratively applies {{commonly}} known reasoning techniques and creates an incrementally growing <b>configuration</b> description. This approach emphasizes the synthesis aspect of <b>configuration,</b> which continuously acquires requirements and computes their effects on a <b>configuration</b> in a cyclic way. We provide the definitions of needed ingredients as there are partial <b>configuration,</b> <b>configuration</b> decision, and reasoning for computing entailments of made <b>configuration</b> decisions. These ingredients are the basis for implementations of <b>configuration</b> systems that follow these approach. ...|$|R
40|$|International audienceIn {{order to}} develop mass customization, many {{companies}} use <b>configuration</b> software to customize their products. Although many studies already exist about Product <b>Configuration,</b> Requirements and Process <b>Configuration</b> have not been studied in detail. As all these three aspects must be considered for mass customization, {{the aim of this}} paper is to show how Product <b>Configuration,</b> when considered as a constraint satisfaction problem, can be extended upstream towards Requirements <b>Configuration</b> and downstream towards Process <b>Configuration.</b> Product <b>Configuration</b> basics are first reviewed thanks to a constraint based approach, and an analysis of industrial <b>configuration</b> situations is done in order to clarify mass customization needs in terms of <b>configuration.</b> Then upstream Requirements <b>Configuration</b> and downstream Process <b>Configuration</b> are defined and generic models are proposed. It is shown that the proposed elements allow a global and consistent flow of <b>configuration</b> activities. A detailed example illustrates the different <b>configuration</b> problems and a discussion terminates the paper...|$|R
50|$|A release (itself a {{versioned}} entity) may {{consist of}} several <b>configuration</b> items. The set of changes to each <b>configuration</b> item {{will appear in}} the release notes, and the notes may contain specific headings for each <b>configuration</b> item. A complex hardware <b>configuration</b> item may have many levels of <b>configuration</b> items beneath its top level; each <b>configuration</b> item level must meet the same fundamental elements of the <b>configuration</b> management system.|$|R
5|$|River Raisin Models {{released}} a ready-to-run model in S scale (1:64) {{of both the}} Pioneer Zephyr (in three- and four-car <b>configurations)</b> and the similar Flying Yankee, in 2005.|$|E
5|$|Rule 90 and Rule 102 {{are called}} {{additive}} cellular automata. This means that, if two initial states are combined by computing the exclusive or of each their states, then their subsequent <b>configurations</b> will be combined {{in the same}} way. More generally, one can partition any configuration of Rule 90 into two subsets with disjoint nonzero cells, evolve the two subsets separately, and compute each successive configuration of the original automaton as the exclusive or of the <b>configurations</b> on the same time steps of the two subsets.|$|E
5|$|Shared 50/50 custody {{has some}} unique <b>configurations</b> to ensure {{equitable}} time sharing, {{for example the}} 2-2-5-5 arrangement shown below.|$|E
50|$|The {{successor}} of a <b>configuration</b> {{is another}} <b>configuration,</b> formed {{by applying the}} update rule simultaneously to every cell.The transition function of the automaton is the function that maps each <b>configuration</b> to its successor.If the successor of <b>configuration</b> X is <b>configuration</b> Y, then X is a predecessor of Y.A <b>configuration</b> may have zero, one, or more predecessors, but it always has exactly one successor.A Garden of Eden is defined to be a <b>configuration</b> with zero predecessors.|$|R
50|$|<b>Configuration</b> of xinetd {{resides in}} the default <b>configuration</b> file /etc/xinetd.conf and <b>configuration</b> of the {{services}} it supports reside in <b>configuration</b> files stored in the /etc/xinetd.d directory. The <b>configuration</b> for each service usually includes a switch to control whether xinetd should enable or disable the service.|$|R
50|$|It first {{outlines}} the responsibilities and authorities before describing the <b>configuration</b> management process that includes <b>configuration</b> management planning, <b>configuration</b> identification, change control, <b>configuration</b> status accounting and <b>configuration</b> audit. Since ISO 10007:2003 is a guidance document, {{it is not}} intended to be used for certification/registration purposes.|$|R
5|$|The exact {{order in}} which the French lined up as they exited the bay is also uncertain. Larrabee notes that many {{observers}} wrote up different sequences when the line was finally formed, and that Bougainville recorded several different <b>configurations.</b>|$|E
5|$|The {{fact that}} every {{configuration}} has a predecessor may be summarized {{by saying that}} Rule 90 is surjective. The function that maps each configuration to its successor is, mathematically, a surjective function. Rule 90 is also not injective. In an injective rule, every two different <b>configurations</b> have different successors, but Rule 90 has pairs of <b>configurations</b> with the same successor. Rule 90 {{provides an example of}} a cellular automaton that is surjective but not injective. The Garden of Eden theorem of Moore and Myhill implies that every injective cellular automaton must be surjective, but this example shows that the converse is not true.|$|E
5|$|The film soundtrack {{has since}} been {{released}} by other companies in different <b>configurations</b> (including complete score releases). The highly regarded master tapes were however damaged during a 1990s remastering, so none of the subsequent re-releases {{are considered to be}} as fine-sounding as the original LP release.|$|E
2500|$|<b>Configuration</b> audits {{are broken}} into {{functional}} and physical <b>configuration</b> audits. [...] They occur either at delivery {{or at the}} moment of effecting the change. [...] A functional <b>configuration</b> audit ensures that functional and performance attributes of a <b>configuration</b> item are achieved, while a physical <b>configuration</b> audit ensures that a <b>configuration</b> item is installed in accordance with the requirements of its detailed design documentation.|$|R
2500|$|Whereas the 1st Piola–Kirchhoff stress relates {{forces in}} the current <b>configuration</b> to areas in the {{reference}} <b>configuration,</b> the 2nd Piola–Kirchhoff stress tensor [...] relates {{forces in the}} reference <b>configuration</b> to areas in the reference <b>configuration.</b> The force in the reference <b>configuration</b> is obtained via a mapping that preserves the relative relationship between the force direction and the area normal in the reference <b>configuration.</b>|$|R
50|$|<b>Configuration</b> audits {{are broken}} into {{functional}} and physical <b>configuration</b> audits. They occur either at delivery {{or at the}} moment of effecting the change. A functional <b>configuration</b> audit ensures that functional and performance attributes of a <b>configuration</b> item are achieved, while a physical <b>configuration</b> audit ensures that a <b>configuration</b> item is installed in accordance with the requirements of its detailed design documentation.|$|R
5|$|The {{painting}} {{shows the}} stages of courtship as described by Milton, as men are seduced by women and pass from enjoying the company of other men into married life. Etty worked through various <b>configurations</b> for {{the characters in the}} painting before settling on his final design.|$|E
5|$|The {{prototype}} {{was fitted}} with an experimental single ski, which proved {{more successful than}} the twin-ski design of the second service test aircraft. Testing with several other experimental ski <b>configurations</b> continued with the prototype through 1957, after which it was placed into storage.|$|E
5|$|These lists detail {{all known}} and {{predicted}} baryons in total angular momentum J= and J= <b>configurations</b> with positive parity.|$|E
5000|$|Whereas the 1st Piola-Kirchhoff stress relates {{forces in}} the current <b>configuration</b> to areas in the {{reference}} <b>configuration,</b> the 2nd Piola-Kirchhoff stress tensor [...] relates {{forces in the}} reference <b>configuration</b> to areas in the reference <b>configuration.</b> The force in the reference <b>configuration</b> is obtained via a mapping that preserves the relative relationship between the force direction and the area normal in the reference <b>configuration.</b>|$|R
40|$|Main {{goal of this}} {{bachelor}} work is {{to design}} a universal <b>configuration</b> system for remote network device <b>configuration</b> based on the NETCONF protocol {{and to develop a}} web <b>configuration</b> interface for the FlowMon, monitoring probe. This work uses existing software tools developed by the Liberouter project. Main objective of the implementation part of this work is to develop a web <b>configuration</b> interface, supporting class libraries for <b>configuration</b> management and GUI creation in PHP. Implemented web <b>configuration</b> interface for the FlowMon probe is a fully-functional prototype of a <b>configuration</b> interface based on concepts of the universal <b>configuration</b> system designed in this bachelor work...|$|R
30|$|The <b>configuration</b> {{generator}} {{is intended}} to solve two problems: generating the initial <b>configuration</b> for collectd which is appropriate for the software and services operated by the VM and secondly updating <b>configuration</b> to alter data collection as requirements change. In order to initially generate the necessary <b>configuration</b> for collectd, the config generator pulls down the set list of metrics and rate of collection from the <b>configuration</b> store. The <b>configuration</b> generator then outputs the necessary <b>configuration</b> in the collectd format and begins the collection process. The coordinator instance running on the VM passes any relevant events, such as updates to collectd <b>configuration</b> to the <b>configuration</b> generator. This allows Varanus to alter the rate of collection and change what metrics are collected.|$|R
5|$|With the {{development}} of modern quantum mechanical theories of electron <b>configurations</b> within atoms, {{it became apparent that}} each period (row) in the table corresponded to the filling of a quantum shell of electrons. Larger atoms have more electron sub-shells, so later tables have required progressively longer periods.|$|E
25|$|Mesons are {{classified}} into types {{according to their}} spin <b>configurations.</b> Some specific <b>configurations</b> are given special names based on the mathematical properties of their spin configuration.|$|E
25|$|The Combat Tactical Vehicle (CTV) {{configuration}} {{replaced the}} previous Category A and Category B <b>configurations</b> {{and was a}} 4-seat vehicle with a 3,500-pound payload. The Combat Support Vehicle (CSV) replaced the previous Category C configuration and was a 2-seat vehicle with a 5,100-pound payload. The CTV and CSV variants that appeared in CDD version 3.3 had requirements for <b>configurations.</b> Configuration refers to {{the different types of}} mission packages that would be installed into each of the two variants. CDD version 3.3 required six <b>configurations.</b> CDD version 3.6 was published for entry into the EMD phase in August, this reducing from six to four the total number of to <b>configurations</b> required.|$|E
40|$|The {{integration}} of <b>configuration</b> systems to support supply chain {{integration of}} con gurable products {{is still an}} open research issue. Current configurator approaches are designed for solving local <b>configuration</b> problems {{but there is no}} support for the integration of multiple <b>configuration</b> systems. In order to facilitate distributed <b>configuration</b> of customizable products we employ cooperating <b>configuration</b> agents capable of managing requests and posting con guration subtasks to remote <b>configuration</b> agents. For integrating different knowledge representation formalisms of <b>configuration</b> agents we apply broadly used <b>configuration</b> domain specific modeling concepts to design shareable ontologies which can be interpreted by other agents. These concepts are defined as UML (Unified Modeling Language) stereotypes which can be automatically translated into a <b>configuration</b> agent's knowledge representation...|$|R
30|$|The <b>configuration</b> manager {{generates the}} <b>configuration</b> {{parameters}} for each selected RDecASIP <b>configuration</b> memory presented in Section 4.|$|R
40|$|Product <b>configuration</b> is when an {{artifact}} from a product family is assembled from {{a set of}} predefined components {{that can only be}} combined in certain ways. These ways are defined by <b>configuration</b> rules. The product developers inspect the <b>configuration</b> rules when they develop new <b>configuration</b> rules or modify the <b>configuration</b> rules set. The inspection of <b>configuration</b> rules is thereby an important activity to avoid errors in the <b>configuration</b> rules set. Several formulations of constraint satisfaction problems (CSPs) are proposed that facilitate the inspection of <b>configuration</b> rules in propositional logic (IF-THEN, AND, NOT, OR, etc.). Many of the <b>configuration</b> rules are so called production rules; that is, a <b>configuration</b> rule is an IF-THEN expression that fires when the IF condition is met. Several <b>configuration</b> rules build chains thatfire during the product <b>configuration.</b> It is therefore important not only to inspect single <b>configuration</b> rules but also to analyze the effect of multiple <b>configuration</b> rules. Formulating the tasks as variations of the CSP can support the inspection activity. More specifically, we address the reformulation of <b>configuration</b> rules, testing of feature variant combinations, and counting of item quantities from an item set. The suggested CSPs are tested on industrial vehicle <b>configuration</b> rules for computational performance. The results show that the time for achieving results from the solving of the CSP is within seconds. Our future work will be to implement the various CSPs into a demonstrator that could be tested by product developers...|$|R
