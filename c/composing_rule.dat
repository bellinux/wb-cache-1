4|197|Public
40|$|Although Artificial Neural Network (ANN) usually reaches high {{classification}} accuracy, the obtained results sometimes may be incomprehensible. This fact {{is causing}} {{a serious problem}} in data mining applications. The rules that are derived from ANN are needed to be formed {{to solve this problem}} and various methods have been improved to extract these rules. In our previous works Artificial Immune Systems (AIS) algorithm has been used to extract rules from trained ANN and has been applied to various databases [11, 41 - 43]. In this study, association rules have been composed using Apriori algorithm and transactions, which provide these rules, were eliminated. This provides shrinking database. Then ANN has been trained and used Opt-aiNET for <b>composing</b> <b>rule</b> set. It’s been observed that this method increased classification accuracy despite decreasing number of rules...|$|E
40|$|The main aim of {{this paper}} is to {{investigate}} how the production -rule-based computational paradigm can be implemented through visual data-flow techniques. Since building production rules solving a problem may be a difficult task for an unskilled beginner programmer and a textual-only rule representation may not turn out to be very intuitive, we propose a simple yet effective system for visually <b>composing</b> <b>rule</b> preconditions and actions, through a general purpose data-flow visual language. This system, which is primarily intended as a learning tool, can greatly simplify the programmer's task and speed up the implied reasoning process. Moreover, it allows production-rule-based programs to be easily integrated within more general applications. 1. Introduction Although the debate about the usefulness of visual programming languages compared with textual ones is quite far from being over, it is indisputable that, at least for certain applications, interacting with objects placed in a two-d [...] ...|$|E
40|$|The main aim of {{this paper}} is to {{investigate}} how the production -rule-based computational paradigm can be implemented through visual data-flow techniques. We propose a simple yet effective system for visually <b>composing</b> <b>rule</b> preconditions and actions, through a general purpose data-flow visual language. 1. Introduction Among general purpose visual programming systems, data-flow ones are very widespread, certainly also thanks to their simple and intuitive functioning mechanism. It is very interesting to note that the data-flow model may be viewed as a generalization of the event-driven programming model [1]: each node waits for data (events) to arrive and then fires. Hence, production-rule systems can also be viewed as data-flow systems, in which rule conditions act as demons awaiting the arrival of certain data elements before executing their conclusion. Although production systems are the basis for many expert systems, their functioning mechanism may be especially difficult to under [...] ...|$|E
40|$|When {{transforming}} {{programs for}} complex instrumentation and optimization, {{it is essential}} to understand the effect of the transformations, to best optimize the transformed programs, and to speedup the transformation process. This paper describes a powerful method for <b>composing</b> transformation <b>rules</b> to achieve these goals. We specify the transformations declaratively as instrumentation rules and invariant rules, the latter for transforming complex queries in instrumentation and in programs into efficient incremental computations. Our method automatically <b>composes</b> the transformation <b>rules</b> and optimizes the <b>composed</b> <b>rules</b> before applying the optimized <b>composed</b> <b>rules.</b> The method allows (1) the effect of transformations to be accumulated in <b>composed</b> <b>rules</b> and thus easy to see, (2) the replacements in <b>composed</b> <b>rules</b> to be optimized without the difficulty of achieving the optimization on large transformed programs, and (3) the transformation process to be sped up by applying a <b>composed</b> <b>rule</b> in one pass of program analyses and transformations instead of applying the original rules in multiple passes. We have implemented the method for Python. We successfully used it for instrumentation, in ranking peers in BitTorrent; and for optimization of complex queries, in the instrumentation of BitTorrent, in evaluating connections of network hosts using NetFlow, and in generating efficient implementations of Constrained RBAC...|$|R
40|$|Most {{statistical}} {{machine translation}} systems rely on <b>composed</b> <b>rules</b> (rules that can be formed out of smaller rules in the grammar). Though this practice improves translation by weakening independence assumptions in the translation model, it nevertheless results in huge, redundant grammars, making both training and decoding inefficient. Here, we take the opposite approach, where we only use minimal rules (those that cannot be formed out of other rules), and instead rely on a rule Markov model of the derivation history to capture dependencies between minimal rules. Large-scale experiments on a state-of-the-art tree-to-string translation system show that our approach leads to a slimmer model, a faster decoder, yet the same translation quality (measured using Bleu) as <b>composed</b> <b>rules.</b> ...|$|R
3000|$|As {{a direct}} {{consequence}} of graph binding and unbinding the <b>composed</b> <b>rules</b> create or destroy vertices. The atom map thus is not well-defined any more in such rules. This can be rescued by a formally different construction. We introduce the identity rule ı [...]...|$|R
40|$|The {{extraction}} of abstract structures from speech (or from gestures {{in the case}} of sign languages) has been claimed to be a fundamental mechanism for language acquisition. In the present study we registered the neural responses that are triggered when a violation of an abstract, token-independent rule is detected. We registered ERPs while presenting participants with trisyllabic CVCVCV nonsense words in an oddball paradigm. Standard stimuli followed an ABB rule (where A and B are different syllables). Importantly, to distinguish neural responses triggered by changes in surface information from responses triggered by changes in the underlying abstract structure, we used two types of deviant stimuli. Phoneme deviants differed from standards only in their phonemes. Rule deviants differed from standards in both their phonemes and their <b>composing</b> <b>rule.</b> We observed a significant positivity as early as 300 ms after the presentation of deviant stimuli that violated the abstract rule (Rule deviants). The amplitude of this neural response was correlated with participants' performance in a behavioral rule learning test. Differences in electrophysiological responses observed between learners and non-learners suggest that individual differences in an abstract rule learning task might be related to how listeners select relevant sources of information...|$|E
50|$|He also <b>composed</b> several <b>rules</b> for {{determining}} moveable feasts.|$|R
3000|$|Rules can {{be simple}} or composite. A simple rule has two {{distinct}} logical binary expressions, separated by the symbol “::”—the domain expression and the decide expression. The domain expression determines {{the applicability of}} the rule. The decide expression decides on the acceptability of the event. A <b>composed</b> <b>rule</b> is a composition of other rules using tri-value logic operators, which are extensions of their first order binary counterparts (conjunction, disjunction, negation and logical quantifiers) with a global neutral element, the notapply [...] value, i.e., the conjunction or disjunction of any rule with notapply [...] is equal to the value of the rule, meaning that if the domain expression of one of the <b>composed</b> <b>rules</b> evaluates to false, the value of its decide-expression is irrelevant for the the result of the composition, whatever the composition type (conjunction, disjunction, or quantification).|$|R
5000|$|After {{working on}} Dionysus in 69, Schechner <b>composed</b> three <b>rules</b> {{regarding}} participation: ...|$|R
40|$|The {{first meeting}} of the Fordham Law School faculty took place in September, 1907. The first meeting {{consisted}} of <b>composing</b> <b>rules</b> that included how examinations would be marked, assigned seating and recorded attendance, announcement of scholarship students, that Moot Courts {{were not to be}} part of the regular work of the Law School, but that students who were interested should be allowed and encouraged to organize them, and the decision on a fourth year L. L. B. degree was postponed...|$|R
50|$|The first {{association}} of barristers in Victoria {{was formed in}} 1884, although the first barristers admitted to practise in Victoria were appointed in 1841. A group of barristers <b>composed</b> <b>rules</b> of practice and regulations for interacting with solicitors and clients. On 20 June 1900 an official Bar Council was established, and a Bar Roll was started. By 1902, all barristers practising in Melbourne had signed the Roll. To this day, new barristers sign the Roll once they are admitted to the bar.|$|R
40|$|In this paper, {{we define}} a Mathematical model of program {{structure}}. Mathematical model of program structure defined here provides unified mathematical treatment of program structure, which reveals that a {{program is a}} large and finite set of embedded binary relations between current statement and previous ones. Then, a program is considered as a composed listing and a logical combination of multiple statements according to the certain <b>composing</b> <b>rules.</b> We also define the Scope Information Complexity Number (SICN) and present the cognitive complexity based on functional decomposition of software, including theoretical validation through nine Weyuker's properties...|$|R
25|$|Using this {{expression}} {{for the total}} energy of an atom (or ion) {{as a function of}} the shielding constants and effective quantum numbers, Slater was able to <b>compose</b> <b>rules</b> such that spectral energies calculated agree reasonably well with experimental values for a wide range of atoms. Using the values in the iron example above, the total energy of a neutral iron atom using this method is -2497.2 Ry, while the energy of an iron cation lacking a single 1s electron is -1964.6 Ry. The difference, 532.6 Ry, can be compared to the experimental (circa 1930) K absorption limit of 524.0 Ry.|$|R
40|$|Event-pattern {{rules are}} the {{foundation}} of Complex Event Processing (CEP) applications. Yet, despite the vast potential CEP offers for agile business applications, its practical relevance rises and falls with the manageability within the organizational framework conditions of an enterprise. In this paper we present a novel rule-management framework for the event-based system UC 4 Decision. It caters {{to the needs of}} power users as well as business users: Power users model infrastructural rules based on visual decision graphs and a dedicated expression language. Business users <b>compose</b> <b>rule</b> logic in a simplified web interface from abstracted, configurable building blocks. Categories and Subject Descriptor...|$|R
50|$|Using this {{expression}} {{for the total}} energy of an atom (or ion) {{as a function of}} the shielding constants and effective quantum numbers, Slater was able to <b>compose</b> <b>rules</b> such that spectral energies calculated agree reasonably well with experimental values for a wide range of atoms. Using the values in the iron example above, the total energy of a neutral iron atom using this method is -2497.2 Ry, while the energy of an iron cation lacking a single 1s electron is -1964.6 Ry. The difference, 532.6 Ry, can be compared to the experimental (circa 1930) K absorption limit of 524.0 Ry.|$|R
50|$|INPROL's Experts Councils are <b>composed</b> {{of leading}} <b>rule</b> of law {{scholars}} and practitioners.|$|R
3000|$|The {{awareness}} {{information is}} provided by the new extensions to the SPL logics; the ternary logic used to <b>compose</b> <b>rules</b> and the binary logic used in the decide expression of each rule. The elements of both logics are now tuples with the original elements and an awareness tag 〈 element, tag〉. For the SPL ternary logic, the first element of the tuple is either allow, deny [...] [...] or [...] notapply and for the binary logic it is true or false. The tag corresponds to the awareness information and it is, in both logics (binary and ternary), a binary symbolic expression stored in a tree structure.|$|R
5000|$|He {{has been}} linked with the {{foundation}} of Kilcommon in County Mayo and the early monastic church at Leithglin, County Carlow. He <b>composed</b> a <b>rule</b> for monks, which came to be observed by many religious bodies in Connacht.|$|R
40|$|AbstractNowadays, {{knowledge}} {{is the key}} to success in all software engineering processes. This valuable knowledge, obtained through analysis, design, development, and maintenance processes of the system, should be saved and reused in designing and developing current and similar systems. Using pre-existing {{knowledge is}} a practical approach which reduces design complexity, improves software architecture design and manages software quality. In this paper, we describe an approach to create architecture design knowledge using a hierarchical structure of architectural styles based on quality attributes. Knowledge is most importance asset of our approach that reuses similar domains, correlates architectures and reduces complexity by using and <b>composing</b> <b>rules.</b> Finally, we executed our approach on a standard case study...|$|R
50|$|Gray was {{appointed}} to that post in 1598. He was a pupil of Robert Rollock, the first principal {{of the university of}} Edinburgh, whose virtues and learning he extolled in a curious Latin oration which he delivered in 1611, entitled ‘Oratio de Illustribus Scotiæ Scriptoribus.’ Several of the authors eulogised in it are fictitious. Gray accepted literally ‘the fabulous stories of Fergus the First having written on the subject of law 300 years B.C.; Dornadilla a century after <b>composing</b> <b>rules</b> for sportsmen; Reutha, the 7th king of Scotland, being a great promoter of schools and education; and King Josina, {{a century and a half}} before the Christian era, writing on botany and the practice of medicine.’ Gray died in 1614.|$|R
40|$|This paper {{presents}} a parametric shape grammar {{that explains the}} generation of the structural forms of the Spanish designer Santiago Calatrava. The shape grammar {{is divided into two}} separate grammars a lower level grammar and a higher level grammar. The lower level or first grammar is <b>composed</b> of <b>rules</b> to generate a “fundamental unit” design, which has the characteristic to be a single component with non-repetitive parts that becomes the primitive object of the design. The higher level or second grammar is <b>composed</b> of <b>rules</b> that generate the overall design by recursive application of Euclidean transformations to the fundamental unit. We concentrate our discussion on the higher level or second grammar to demonstrate the process of generating complex designs by application of simple rules...|$|R
50|$|Mo Chutu {{first became}} abbot of Rahan, a monastery which {{lay in the}} {{territory}} of the southern Uí Néill. He <b>composed</b> a <b>rule</b> for his monks, an Irish metrical poem of 580 lines, divided into nine separate sections, a notable literary relic of the early Irish Church.|$|R
30|$|Illustrative Example 4. A network {{administrator}} hastily writes a new firewall rule to block suspected malicious network traffic. He errors in <b>composing</b> the <b>rule,</b> {{but before he}} catches his mistake, he publishes the errant rule to production. The rule disrupts {{the operations of the}} company’s web servers, which inhibits purchases, harming sales.|$|R
40|$|Abstract: Many model {{transformation}} problems require different intermediate transformation steps. For example, platform-specific models (PSM) {{are often}} gener-ated from platform-independent models (PIM) by chains of model transformations. This requires {{the presence of}} several intermediate meta-models between those of the PIM and the PSM. Thus, most of the effort is needed to define a transformation mechanism for each intermediate step. The solution proposed in {{this paper is to}} investigate whether it is possible to generate a single transformation from a chain of transformations, solely involving the initial PIM and final PSM meta-models. The presented work focuses on the composition of transformations at the rule level. We apply the automatic procedure for <b>composing</b> <b>rules</b> {{in the context of the}} evolution of the Enterprise Java Beans (EJB) language, transforming UML models into EJB 2. 0 models and then to EJB 3. 0 models...|$|R
50|$|Kuntsevych faced a {{daunting}} task of bringing the local populace to accept union with Rome. He faced stiff opposition from the monks, who feared liturgical Latinisation of the Byzantine Rite. As archeparch, he restored the churches: he issued a catechism to the clergy, with instructions {{that it should be}} memorized; <b>composed</b> <b>rules</b> for priestly life, and entrusted deacons the task of superintending their observance; assembled synods in various towns in the dioceses, and firmly opposed the Grand Chancellor of the Grand Duchy of Lithuania, Lew Sapieha, who wished to make too many concessions to the Eastern Orthodox. Throughout all his strivings and all his occupations, he continued his religious devotion as a monk, and never abated his desire for mortification of the flesh. Through all this he was successful in winning over {{a large portion of the}} people.|$|R
50|$|In the limiteless {{series of}} numbers u, <b>composed</b> by these <b>rules,</b> there are infinitesimally small (but never zero) values x(s) and {{correspondingly}} infinitely large lengths k(s).|$|R
40|$|Studied on the {{expression}} methods {{of knowledge and}} using standard, according to the knowledge of rotary kiln’s characteristic, such as complexity and connection, it selected the commingling modal of the knowledge representation which <b>composes</b> production <b>rule</b> and object- oriented. It applied in rotary kiln expert system successfully. The method {{can be used in}} other complex knowledge representation system. ...|$|R
40|$|The {{main feature}} of a Takagi-Sugeno (T-S) fuzzy model is {{to express the}} local {{dynamics}} of each fuzzy implication (rule) by a linear system model. The overall fuzzy model {{of the system is}} achieved by fuzzy “blending ” of the linear system models. Parallel or feedback connections of T-S fuzzy systems which preserve the properties of each system are possible [1]. Thus a simple and straightforward approach for the control of non-linear systems has emerged [2]. By representing the non-linear system by a T-S type fuzzy model, linear feedback control techniques can be utilized to design a linear controller for each local linear model. The overall controller is a fuzzy blending of each individual linear controller and therefore nonlinear but very simple to design. The closed loop fuzzy control system derived in this way is, in general, a system <b>composed</b> of <b>rules</b> with affine linear systems in their consequent parts. This design approach for the control of nonlinear systems does not have the local character of a linear control design for the linearized, around an operating point, non-linear system, nor the complication and involvement of feedback linearization controllers. Its appeal is, however, dependent on the stability issues involved. While stability conditions have been exploited for T-S fuzzy systems <b>composed</b> of <b>rules</b> with linear consequent parts, the stability of T-S fuzzy systems <b>composed</b> of <b>rules</b> with affine linear system in their consequent parts needs further investigation. Keywords: Fuzzy control, Non-linear systems, Stabilit...|$|R
30|$|In {{the last}} line of Table 8 we can see the total number of {{warnings}} the warning <b>rules</b> <b>composing</b> the incremental strategy generate on each system: 946, 776, and 2, 131, respectively.|$|R
40|$|We {{introduce}} a rule selection algorithm called ROCCER, which operates by selecting classification rules {{from a larger}} set of rules [...] for instance found by Apriori [...] using ROC analysis. Experimental comparison with rule induction algorithms shows that ROCCER tends to produce considerably smaller rule sets with compatible Area Under the ROC Curve (AUC) values. The individual <b>rules</b> that <b>compose</b> the <b>rule</b> set also have higher support and stronger association indexes...|$|R
40|$|Regulations for {{the built}} {{environment}} are as old as civilization, but we still lack a theory about how to design them. Regulations are artifacts, <b>composed</b> of <b>rules</b> that are self-reflexive, leading to complex combinations. A variety of fields (the law, general systems theory, expert systems, professional standards, and others) are consulted to glean suggestions that pertain to regulation design. A preliminary set of guidelines is offered for designing regulations. ...|$|R
5000|$|Alan Ashton said that, “Bruce Bastian {{did all of}} the {{formatting}} of the Word Processor Program, {{the main}} part of the Program that makes it work so well." [...] That Format was expressed in that 1989 WordPerfect Users Manual as, [...] "If you want to <b>compose</b> the <b>Rules</b> to process all of the words in a language, you must start with the Rules to process the most-used words." ...|$|R
5000|$|Francis' {{preaching to}} {{ordinary}} people was unusual {{since he had}} no license to do so. In 1209 he <b>composed</b> a simple <b>rule</b> for his followers ("friars"), the Regula primitiva or [...] "Primitive Rule", which came from verses in the Bible.|$|R
40|$|AbstractIn {{this study}} we propose a fuzzy {{rule-based}} algorithm to evaluate job-satisfaction in an organization. We collected the effective factors/job facets of job satisfaction through interviews. Through analyzing the interview results we <b>compose</b> fuzzy <b>rules.</b> By using the obtained rules, the value of job satisfaction is computed using the expert system shell ESPLAN. The basic advantage of the used approach {{is being able to}} operate with imperfect information for the evaluation of job satisfaction by using fuzzy logic...|$|R
6000|$|... 192. It follows, {{from these}} general truths, {{that it is}} {{impossible}} to give rules which will enable you to compose. You might much more easily receive rules to enable you to be witty. If it were possible to be witty by rule, wit would cease to be either admirable or amusing: if it were possible to <b>compose</b> melody by <b>rule,</b> Mozart and Cimarosa need not have been born: if it were possible to <b>compose</b> pictures by <b>rule,</b> Titian and Veronese would be ordinary men. The essence of composition lies precisely in the fact of its being unteachable, in its being the operation of an individual mind of range and power exalted above others.|$|R
