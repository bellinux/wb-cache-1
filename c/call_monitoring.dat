27|969|Public
5000|$|Advanced {{applications}} include {{areas such}} as security (<b>call</b> <b>monitoring</b> and data leak prevention), targeted advertising, tiered services, copyright enforcement and network usage statistics. These, and many other content-aware applications, {{are based on the}} ability to discern specific intelligence contained within packet payloads using Deep Packet Inspection (DPI) technologies.|$|E
5000|$|On June 30, 2006, Bloomberg {{reported}} the NSA [...] "asked AT&T Inc. {{to help it}} set up a domestic <b>call</b> <b>monitoring</b> site seven months before the Sept. 11, 2001 attacks," [...] citing court papers filed June 23, 2006 by lawyers in McMurray v. Verizon Communications Inc., 06cv3650, in the Southern District of New York.|$|E
50|$|SuperReceptionist is Knowlarity’s {{flagship}} product. This all-in-one {{call centre}} solution allows businesses {{to set up}} a call handling process for customer care, sales and other departments.. Features include CRM suite integration, call forwarding, missed call marketing, unlimited concurrent calls, custom call queues and routing, IVR, multiple language support, <b>call</b> <b>monitoring,</b> support for training-specific features and live reporting.|$|E
50|$|The laptop {{computer}} and the wireless card must support a mode <b>called</b> <b>monitor</b> or rfmon.|$|R
5000|$|Children {{helping to}} lead classes were also <b>called</b> <b>monitors,</b> and the terms praepostor and monitor are roughly {{equivalent}} to prefect and sub-prefect in many other English schools.|$|R
50|$|The Constitution Unit {{publishes a}} triannual {{newsletter}} <b>called</b> <b>Monitor</b> which is published in January, June and October. It contains analysis of constitutional {{developments in the}} UK and details about the Unit’s research and publications.|$|R
5000|$|In June 2009 news {{broke that}} Nokia Siemens had {{supplied}} telecommunications {{equipment to the}} Iranian telecom company that included the ability to intercept and monitor telecommunications, a facility known as [...] "lawful intercept". The equipment was {{believed to have been}} used in the suppression of the 2009 Iranian election protests, leading to criticism of the company, including by the European Parliament. Nokia-Siemens later divested its <b>call</b> <b>monitoring</b> business, and reduced its activities in Iran.|$|E
40|$|System <b>call</b> <b>monitoring</b> is a {{technique}} for detecting and controlling compromised applications by checking at runtime that each system call conforms to a policy that specifies the program’s normal behavior. Here, {{a new approach to}} system <b>call</b> <b>monitoring</b> based on authenticated system calls is introduced. An authenticated system call is a system call augmented with extra arguments that specify the policy for that call and a cryptographic message authentication code (MAC) that guarantees the integrity of the policy and the system call arguments. This extra information is used by the kernel to verify the system call. The version of the application in which regular system calls have been replaced by authenticated calls is generated automatically by an installer program that reads the application binary, uses static analysis to generate policies, and then rewrites the binary with the authenticated calls. This paper presents the approach, describes a prototype implementation based on Linux and the PLTO binary rewriting system, and gives experimental results suggesting that the approach is effective in protecting against compromised applications at modest cost...|$|E
40|$|Cyberattacks {{targeted}} at virtualization infrastructure underlying cloud computing services {{has become increasingly}} sophisticated. This paper presents a novel malware and rookit detection system which protects the guests against different attacks. It combines system <b>call</b> <b>monitoring</b> and system call hashing on the guest kernel together with Support Vector Machines (SVM) -based external monitoring on the host. We demonstrate the effectiveness of our solution by evaluating it against well-known user-level malware as well as kernel-level rootkit attacks. Keywords—virtualization security, cloud security...|$|E
5000|$|... {{providing}} services to job programs that issue Supervisor <b>Call</b> (SVC) and <b>Monitor</b> <b>call</b> (MC) instructions, including: ...|$|R
50|$|A process module, like {{a program}} module, has only an {{initialization}} section, and runs its start, full function and completion in that section. However, it gets its own thread for execution {{aside from the}} main thread that runs program modules. As such, it can only <b>call</b> <b>monitor</b> and share modules.|$|R
40|$|Abstract [...] This paper reviews a {{suggested}} {{design for}} information system of observational data registration and its analysis, {{which is usually}} <b>called</b> <b>Monitoring</b> System (MS). The data in such systems is often weak or partially structured. Its structure depends on a specific observation and it changes over time. Generally, a data model for monitoring system was developed...|$|R
40|$|Main stream {{operating}} system kernels lack {{a strong and}} re-liable mechanism for identifying the running processes and binding them to the corresponding executable applications. In this paper, we address the identification problem by proposing a novel secure application identification model in which user-level applications are required to present identi-fication proofs at run time to be authenticated to the kernel. In our model, applications are supplied with unique secret keys. The secret key of an application is registered with a trusted kernel at the installation time and is used to uniquely authenticate the application. We present a protocol for the secure authentication of applications. Additionally, we de-velop a system <b>call</b> <b>monitoring</b> architecture that uses our model to verify the identity of applications when making designated system calls. Our system <b>call</b> <b>monitoring</b> can be integrated with existing mandatory access control systems to enforce application-level access rights. We implement and evaluate a prototype of our monitoring architecture in Linux as device drivers with no modification of the kernel. The re-sults from our extensive performance evaluation shows that our prototype incurs low overhead, indicating the feasibility of our approach for cryptographically identifying and au-thenticating applications in the {{operating system}}...|$|E
40|$|Abstract—System <b>call</b> <b>monitoring</b> is a {{technique}} for detecting and controlling compromised applications by checking at runtime that each system call conforms to a policy that specifies the program’s normal behavior. Here, we introduce {{a new approach to}} implementing system <b>call</b> <b>monitoring</b> based on authenticated system calls. An authenticated system call is a system call augmented with extra arguments that specify the policy for that call, and a cryptographic message authentication code that guarantees the integrity of the policy and the system call arguments. This extra information is used by the kernel to verify the system call. The version of the application in which regular system calls have been replaced by authenticated calls is generated automatically by an installer program that reads the application binary, uses static analysis to generate policies, and then rewrites the binary with the authenticated calls. This paper presents the approach, describes a prototype implementation based on Linux and the PLTO binary rewriting system, and gives experimental results suggesting that the approach is effective in protecting against compromised applications at modest cost. Index Terms—Intrusion tolerance, operating systems, security policy, sandboxing, compiler techniques. ...|$|E
40|$|The work {{described}} in this paper investigates the problem of identifying and deterring stealthy malicious processes on a host. We point out the lack of strong application iden- tication in main stream operating systems. We solve the application identication problem by proposing a novel iden- tication model in which user-level applications are required to present identication proofs at run time to be authenti- cated by the kernel using an embedded secret key. The se- cret key of an application is registered with a trusted kernel using a key registrar and is used to uniquely authenticate and authorize the application. We present a protocol for secure authentication of applications. Additionally, we de- velop a system <b>call</b> <b>monitoring</b> architecture that uses our model to verify the identity of applications when making critical system calls. Our system <b>call</b> <b>monitoring</b> can be integrated with existing policy specication frameworks to enforce application-level access rights. We implement and evaluate a prototype of our monitoring architecture in Linux as device drivers with nearly no modication of the ker- nel. The results from our extensive performance evaluation shows that our prototype incurs low overhead, indicating the feasibility of our model...|$|E
50|$|IFM {{has also}} been <b>called</b> Independent <b>Monitoring,</b> Independent Observation, and Third Party Observation.|$|R
50|$|The CCPA {{has since}} May 1994 {{published}} a bimonthly national magazine <b>called</b> The <b>Monitor.</b>|$|R
5000|$|Approximately 60 {{individuals}} on Administrative Home Confinement (sometimes <b>called</b> electronic <b>monitoring</b> or the [...] "ankle bracelet") ...|$|R
40|$|This {{application}} note provides information about developing a <b>call</b> <b>monitoring</b> application using the Dialogic ® SS 7 signaling and media products. Dialogic developed a sample application that provides both {{a starting point}} and a reference for those who choose to develop an SS 7 based application that monitors SS 7 links and records calls on the links. Call recording can be triggered based on information related to the call. Calls may be recorded to multiple files or streamed through the data network for real-time monitoring...|$|E
40|$|Abstract—This paper {{points out}} the need in modern {{operating}} system kernels for a process authentication mechanism, where a process of a user-level application proves its identity to the kernel. Process authentication is different from process identification. Identification {{is a way to}} describe a principal; PIDs or process names are identifiers for processes in an OS environment. However, the information such as process names or executable paths that is conventionally used by OS to identify a process is not reliable. As a result, malware may impersonate other processes, thus violating system assurance. We propose a lightweight secure application authentication framework in which user-level applications are required to present proofs at run time to be authenticated to the kernel. To demonstrate the application of process authentication, we develop a system <b>call</b> <b>monitoring</b> framework for preventing unauthorized use or access of system resources. It verifies the identity of processes before completing the requested system calls. We implement and evaluate a prototype of our monitoring architecture in Linux. The results from our extensive performance evaluation shows that our prototype incurs reasonably low overhead, indicating the feasibility of our approach for cryptographically authenticating applications and their processes in the operating system. Index Terms—Operating system security, process authentication, secret application credential, system <b>call</b> <b>monitoring...</b>|$|E
40|$|Abstract. One of {{the most}} {{dangerous}} cybersecurity threats is control hijacking attacks, which hijack the control of a victim application, and execute arbitrary system calls assuming the identity of the victim program’s effective user. System <b>call</b> <b>monitoring</b> has been touted as an effective defense against control hijacking attacks because it could prevent remote attackers from inflicting damage upon a victim system even if they can successfully compromise certain applications running on the system. However, the Achilles ’ heel of the system <b>call</b> <b>monitoring</b> approach is the construction of accurate system call behavior model that minimizes false positives and negatives. This paper describes the design, implementation, and evaluation of a Program semantics-Aware Intrusion Detection system called Paid, which automatically derives an applicationspecific system call behavior model from the application’s source code, and checks the application’s run-time system call pattern against this model to thwart any control hijacking attacks. The per-application behavior model {{is in the form of}} the sites and ordering of system calls made in the application, as well as its partial control flow. Experiments on a fully working Paid prototype show that Paid can indeed stop attacks that exploit nonstandard security holes, such as format string attacks that modify function pointers, and that the run-time latency and throughput penalty of Paid are under 11. 66 % and 10. 44 %, respectively, for a set of productionmode network server applications including Apache, Sendmail, Ftp daemon, etc. ...|$|E
50|$|In user mode, {{programmed}} operators function {{the same}} as normal mode, accessing the user's virtual locations 100-1778. The 940 also includes a facility to execute System Programmed operators (SYSPOPS), used to <b>call</b> <b>monitor</b> services. When a SYSPOP is encountered in user mode (instruction bits 0 and 2 are '1'b), the computer first enters monitor mode and then accesses the vector of instructions at the monitor's (physical) 100-1778.|$|R
5000|$|... 21:9 {{aspect ratio}} is most {{commonly}} seen on higher end monitors, and are commonly <b>called</b> UltraWide <b>monitors.</b>|$|R
30|$|The {{facts and}} {{statements}} of a context will be activated when some {{change in the}} contextual elements occurs. Therefore, we should create a new design task, <b>called</b> <b>Monitor</b> Context for example, to represent the monitoring of the context. Then, for {{each one of the}} dynamic CE, a new design task should be created, expressing the need to monitor it. These tasks can have the form of Monitor [contextual element].|$|R
40|$|This paper {{presents}} Pandora, {{a network}} monitoring platform that captures packets using purely passive techniques. Pandora addresses current needs for improving Internet middleware and infrastructure by providing both in-depth understanding of network usage and metrics to compare existing protocols. Pandora is flexible {{and easy to}} use and deploy. The elementary monitoring tasks are encapsulated as independent entities we <b>call</b> <b>monitoring</b> components. The actual packet analysis is performed by stacking the appropriate components. Pandora also preserves user privacy by allowing control of the "anonymization" policy. Finally, the evaluation we conducted shows that overheads due to Pandora's flexibility do not significantly affect performance. Pandora is fully functional and has already been used to collect Web traffic traces at INRIA Rocquencourt...|$|E
40|$|The {{introduction}} of Android Mobile phones has {{bought a new}} revolution in the mobile phone market and almost everyone might have experienced misplacing or losing their mobile phones. Hence {{it is necessary to}} develop an application in all smart phones to prevent the mobile phone theft. This paperdescribes a tracking application called AALTm (An Android Application to Locate and Track Mobile phones) which is embedded with a lot of features such as location tracking, SIM card detection, <b>call</b> <b>monitoring,</b> profile changing, sending the images to the predefined email address and deleting the project specific incoming and outgoing messages. These features are quite different from the existing tracker applications which would be helpful in tracing the lost mobile...|$|E
40|$|We {{report a}} case in which {{cerebral}} oximetry was used to optimize brain perfusion in a patient receiving extra-corporeal cardiopulmonary resuscitation (eCPR) after out-of-hospital cardiac arrest (OHCA). A 52 -year-old woman (height of 165   cm and weight of 67   kg) had an OHCA secondary to acute myocardial infarction. Th e ambulance arrived on the scene 10  minutes after the call, and mechanical CPR (Lucas; Physio Control Inc., Brussels, Belgium) was initiated. She was fi nally trans-ferred to our hospital with ongoing CPR 50  minutes after the initial <b>call.</b> <b>Monitoring</b> of frontal oxygenation (Fore-sight; Casmed, Branford, CT, USA; normal values of greater than 65 %) was started, and tissue hemoglobin satura tion (StO 2) values of around 30 % were shown during CPR (Figure 1). A right radial artery catheter wa...|$|E
50|$|By analogy, {{nineteenth century}} railway coaches with {{clerestory}} roofs to accommodate ventilators and lamps above {{the heads of}} standing passengers in the centre while lower to the sides where passengers were seated were <b>called</b> <b>monitors</b> or monitor cars in the U.S.; the raised part of the roof {{was known as a}} turret. In ship design of around 1900, a turret deck was a more austere version of the trunk deck.|$|R
30|$|Developers {{can create}} soft sensors from {{physical}} sensors to aggregate {{the data collected}} from the environment, to transform them or to estimate other data. For that, they write specific LINC rules <b>called</b> <b>monitoring</b> rules. These rules do not involve actuators and cannot be conflicting. These rules rely on the abstraction layer which hides the devices heterogeneity. Developers can also write monitoring rules for other data sources (e.g., agenda) to transform data or estimate required data.|$|R
50|$|The {{previous}} year Crystal Computing had released another machine code {{tool for the}} 16K ZX Spectrum <b>called</b> <b>Monitor</b> and Disassembler {{that could be used}} in conjunction with Zeus. While Zeus has a monitor included, the more extensive Monitor and Disassembler allows for disassembly, the display and editing of the processor registers, as well as code substitution and the ability to move blocks of memory. Alongside Zeus, Monitor and Disassembler was later re-released by Sinclair Research.|$|R
40|$|Abstract—A hybrid signal-and-link-parametric {{approach}} to speech quality measurement for voice-over-Internet protocol (VoIP) communications is described. Connection parameters {{are used to}} determine a base quality representative of the transmission link. Degradation factors, computed from perceptual features extracted from the decoded speech signal, are used to quantify distortions not captured by the connection parameters. The algorithm is tested on speech degraded by acoustic noise, temporal clippings, and noise suppression artifacts, thus simulating degradations present in wireless-VoIP tandem connections. Hybrid measurement is shown to overcome the limitations of pure link parametric and pure signal-based measurement methods, resulting in better measurement accuracy for modern VoIP communications. In addition, the proposed algorithm incurs modest computational overhead relative to pure link parametric measurement and attains up to 88 % reduction in processing time relative to the ITU-T standard P. 563 signal-based algorithm. Index Terms—Live <b>call</b> <b>monitoring,</b> quality impairments, speech distortions, speech quality measurement, voice-over-Internet protocol (VoIP). I...|$|E
40|$|Malware {{writers have}} {{employed}} various obfuscation and polymorphism techniques to thwart static analysis approaches and bypassing antivirus tools. Dynamic analysis techniques, however, have essentially overcome these deceits by observing the actual behaviour {{of the code}} execution. In this regard, various methods, techniques and tools have been proposed. However, because of the diverse concepts and strategies used {{in the implementation of}} these methods and tools, security researchers and malware analysts find it difficult to select the required optimum tool to investigate the behaviour of a malware and to contain the associated risk for their study. Focusing on two dynamic analysis techniques: Function <b>Call</b> <b>monitoring</b> and Information Flow Tracking, this paper presents a comparison framework for dynamic malware analysis tools. The framework will assist the researchers and analysts to recognize the tools implementation strategy, analysis approach, system wide analysis support and its overall handling of binaries, helping them to select a suitable and effective one for their study and analysis. Comment: 12 page...|$|E
40|$|Recent malware {{instances}} execute {{completely in}} the kernel as drivers; they do not contain any user-level malicious processes. This design evades the system <b>call</b> <b>monitoring</b> used by many software security solutions, including malware analyzers and host-based intrusion detectors that track only user-level processes. To trace the behavior of kernel malware instances, we design and implement a hypervisor-based system called Gateway that monitors kernel APIs invoked by drivers. Gateway creates a hardened, non-bypassable monitoring interface by isolating drivers in an address space separate from the kernel. To overcome the performance degradation introduced by switches between these separate address spaces, our design rewrites binary kernel and driver code at runtime and generates new code on demand to optimize the address space transition speed. Our experimental measurements show performance overheads of 10 % or better, with many overheads less than 1 %. Our security evaluation shows that Gateway is able to monitor all kernel APIs invoked by malicious drivers across its non-bypassable interface. 1...|$|E
5000|$|Though coastal {{defense was}} {{generally}} within {{the purview of}} the Army, the Navy became more involved in the late 19th century with coastal defense ships, generally <b>called</b> <b>monitors.</b> These monitors were turreted ironclad warships inspired by as well as coastal ships which closely followed her design, the term [...] "monitor" [...] also encompassed more flexible breastwork monitors which had a modest armored superstructure and were thus more seaworthy. These also featured modern rifled breech-loading guns.|$|R
40|$|Background: Approximately 2 {{million of}} the 4. 5 million calls made in 2016 to the 1177 {{healthcare}} advice line resulted in the telenurse providing self-care advice to the care seeker. In some of these calls, the care seekers were offered the possibility of receiving a <b>monitoring</b> <b>call.</b> In 2016, 275, 000 <b>monitoring</b> <b>calls</b> were registered. A <b>monitoring</b> <b>call</b> is defined as when the telenurse monitors and supervises {{the course of the}} disease by telephone, i. e., the telenurse calls the care seeker back at regular intervals to follow the course of the disease and adapt the advice based on the care needs {{at the time of the}} call. In previous studies, the use of <b>monitoring</b> <b>calls</b> is mentioned as a method for telenurses to assess the need for care. An extended body of knowledge is needed concerning the phenomenon of <b>monitoring</b> <b>calls.</b> The overall aim in this thesis was therefore to increase knowledge of <b>monitoring</b> <b>calls</b> in telephone advice nursing from the perspective of care seekers and telenurses. Methods: This thesis consists of two studies that illustrate the experience of <b>monitoring</b> <b>calls</b> from different perspectives: those of the care seekers and those of the telenurses. The thesis focuses on the context, which is typical for qualitative research. Two different sets of data were collected using interviews. In study I, ten parents (nine mothers and one father) were interviewed. In study II, 19 telenurses were interviewed. The data were analysed inductively in both studies using qualitative content analysis. Findings: In study I, four main categories emerged: convenience, confirmation, support and guidance. In study II, the main category was: aiming at patient-safe self-care. The generic categories were focusing on the parent aiming at increasing their feeling of security, focusing on the child for patient safety, learning for parents and telenurses and relieving care. The parents’ sense of security seemed to involve a core sense of being able to care for a sick child at home; security often means feeling safe in a specific situation. Security was seen as fundamental in both study I and study II. The parents’ experienced that the <b>monitoring</b> <b>call</b> provided an opportunity to share their concerns about their child and the telenurses aimed to give the parents a feeling of security by calling them back. The telenurses described that working with a focus on patient safety was a factor in the <b>monitoring</b> <b>call</b> and that the calls contributed to good communication between themselves and the parents. The parents described a feeling of being taken seriously and that they experienced a sense of trust and security. It also seemed that the telenurses used <b>monitoring</b> <b>calls</b> for their own safety by following up on their previous advice and re-evaluating their assessment. <b>Monitoring</b> <b>calls</b> was perceived as a learning opportunity and an opportunity for feedback for both parents and telenurses. Relieving care was one of the aims of performing monitoring calls; the telenurses believed that parents should first try to perform self-care at home before going to a healthcare service. The parents seemed to perceive the <b>monitoring</b> <b>call</b> as a way to save time and it seemed to be more convenient for them to care for their sick child at home. The telenurses experienced, therefore, that by performing <b>monitoring</b> <b>calls</b> they reduced the need for visits to healthcare services. Conclusions: The results show how people can receive expert self-care advice, support and guidance for care with the help of <b>monitoring</b> <b>calls.</b> <b>Monitoring</b> <b>calls</b> seemed to provide a sense of security for those seeking care and also seemed to increase patient safety. <b>Monitoring</b> <b>calls</b> also provides a learning situation for both parents and telenurses. The use of <b>monitoring</b> <b>calls</b> seems to be a patient-safe form of telephone advice nursing and contributes to sustainable healthcare...|$|R
5000|$|MS Windows has {{a similar}} utility called StraceNT, written by Pankaj Garg, and a similar GUI-based utility <b>called</b> Process <b>Monitor,</b> {{developed}} by Sysinternals.|$|R
