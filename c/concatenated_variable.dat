0|10|Public
2500|$|In algebra, {{multiplication}} involving variables {{is often}} written as a [...] (e.g., xy for x times y or 5x for five times x), also called implied multiplication. The notation {{can also be}} used for quantities that are surrounded by parentheses (e.g., 5(2) or (5)(2) for five times two). This implicit usage of multiplication can cause ambiguity when the <b>concatenated</b> <b>variables</b> happen to match the name of another variable, when a variable name in front of a parenthesis can be confused with a function name, or in the correct determination of the order of operations.|$|R
5000|$|... where x {{is now an}} (n + 1)-dimensional vector {{consisting}} of n independent <b>variables</b> <b>concatenated</b> to a vector of ones. Here θ is simply α concatenated to β.|$|R
50|$|An atomic term is {{an upper}} case Latin letter, I and S excepted, {{followed}} by a numerical superscript called its degree, or by <b>concatenated</b> lower case <b>variables,</b> collectively known as an argument list. The degree of a term conveys the same information {{as the number of}} variables following a predicate letter. An atomic term of degree 0 denotes a Boolean variable or a truth value. The degree of I is invariably 2 and so is not indicated.|$|R
40|$|We {{introduce}} {{streaming data}} string transducers that map input data strings to output data strings {{in a single}} left-to-right pass in linear time. Data strings are (unbounded) sequences of data values, tagged with symbols from a finite set, over a potentially infinite data domain that supports only the operations of equality and ordering. The transducer uses a finite set of states, a finite set of variables ranging over the data domain, and a finite set of variables ranging over data strings. At every step, it can {{make decisions based on}} the next input symbol, updating its state, remembering the input data value in its data variables, and updating data-string <b>variables</b> by <b>concatenating</b> data-string <b>variables</b> and new symbols formed from data variables, while avoiding duplication. We establish that the problems of checking functional equivalence of two streaming transducers, and of checking whether a streaming transducer satisfies pre/pos...|$|R
40|$|In {{this paper}} we present an {{approach}} to controlling transitions in multi-robot tasks which have been modelled as a linear series of steps. A box-pushing task {{is described as a}} sequence of sub-tasks with a separate controller designed for each step using finite state automata theory. Perceptual cues are formed by <b>concatenating</b> binary <b>variables</b> which represent locally sensed stimuli into boolean vectors used to specifiy transitions between sub-task steps. The approach is designed for a redundant set of homogeneous mobile robots equipped with simple sensors and stimulus-response behaviours. A set of perceptual cues used in box-pushing are designed and tested on 10 physical mobile robots. It is argued that perceptual cues and finite state automata offers a new approach to environment-specific task modelling in collective robotics. 1 Introduction Recent interest in accomplishing tasks with multiple mobile robots has led to a number of canonical tasks on which to test theories in multi-robo [...] ...|$|R
40|$|Here we {{introduce}} a rapid, cost-effective method of generating molecular DNA probes in just under 15 minutes {{without the need}} for expensive, time-consuming gel-extraction steps. As an example, we enzymatically <b>concatenated</b> six <b>variable</b> strands (50 bp) with a common strand sequence (51 bp) in a single pool using Fast-Link DNA ligase to produce 101 bp targets (10 min). Unincorporated species were then filtered out by passing the crude reaction through a size-exclusion column (, 5 min). We then compared full-length product yield of crude and purified samples using HPLC analysis; the results of which clearly show our method yields three-quarters that of the crude sample (50 % higher than by gel-extraction). And while we substantially reduced the amount of unligated product with our filtration process, higher purity and yield, with an increase in number of stands per reaction (. 12) could be achieved with further optimization. Moreover, for largescale assays, we envision this method to be fully automated with the use of robotics such as the Biomek FX; here, potentially thousands of samples could be pooled, ligated and purified in either a 96, 384 or 1536 -well platform in just minutes...|$|R
40|$|The {{identification}} of meaningful relationships between {{two or more}} categorical variables is an important, and ongoing, element {{to the analysis of}} contingency tables. It involves detecting categories that are similar and/or different to other categories. Correspondence analysis can be used to detect such relationships by providing a graphical interpretation of the association between the variables, and it is especially useful when it is known that this association is of a symmetric nature. In this paper we explore the Gray-Williams index when used as the measure of association in non-symmetrical correspondence analysis (NSCA). It will be shown that, by <b>concatenating</b> a predictor <b>variables</b> of a three-way contingency table the two measure are equivalent. The will analyse the sum of squares for nominal data partitioning the sum of squares for main effects and interaction in the sense of analysis of variance giving an orthogonal decomposition of the Gray-Williams index...|$|R
40|$|We {{introduce}} {{streaming data}} string transducers that map input data strings to output data strings {{in a single}} left-to-right pass in linear time. Data strings are (unbounded) sequences of data values, tagged with symbols from a finite set, over a potentially infinite data domain that supports only the operations of equality and ordering. The transducer uses a finite set of states, a finite set of variables ranging over the data domain, and a finite set of variables ranging over data strings. At every step, it can {{make decisions based on}} the next input symbol, updating its state, remembering the input data value in its data variables, and updating data-string <b>variables</b> by <b>concatenating</b> data-string <b>variables</b> and new symbols formed from data variables, while avoiding duplication. We establish that the problems of checking functional equivalence of two streaming transducers, and of checking whether a streaming transducer satisfies pre/post verification conditions specified by streaming acceptors over input/output data-strings, are in PSPACE. We identify a class of imperative and a class of functional programs, manipulating lists of data items, which can be effectively translated to streaming data-string transducers. The imperative programs dynamically modify a singly-linked heap by changing next-pointers of heap-nodes and by adding new nodes. The main restriction specifies how the next-pointers can be used for traversal. We also identify an expressively equivalent fragment of functional programs that traverse a list using syntactically restricted recursive calls. Our results lead to algorithms for assertion checking and for checking functional equivalence of two programs, written possibly in different programming styles, for commonly used routines such as insert, delete, and reverse...|$|R

