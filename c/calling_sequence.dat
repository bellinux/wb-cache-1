41|2527|Public
5000|$|The {{procedure}} <b>calling</b> <b>sequence</b> {{works as}} follows: The call is introduced with ...|$|E
5000|$|... {{a way to}} {{interface}} to machine language code, which could be passed parameters using the BASIC09 <b>calling</b> <b>sequence</b> ...|$|E
50|$|Most {{methods for}} numerically solving ODEs require only the {{evaluation}} of derivatives for chosen values of the variables, so systems like MATLAB include implementations of several methods all sharing the same <b>calling</b> <b>sequence.</b> Users can try different methods by simply changing {{the name of the}} function called. The Parker-Sochacki method requires more work to put the equations into the proper form, and cannot use the same <b>calling</b> <b>sequence.</b>|$|E
40|$|AbstractA process {{oriented}} {{intrusion detection}} algorithm based on Probabilistic Automaton with No Final probabilities (NFPA) is introduced, system <b>call</b> <b>sequence</b> of process {{is used as}} the source data. By using information in system <b>call</b> <b>sequence</b> of normal process and system <b>call</b> <b>sequence</b> of anomaly process, the anomaly detection and the misuse detection are efficiently combined. Experiments show better performance of our algorithm compared to the classical algorithm in this field...|$|R
40|$|With the {{evolution}} of new software technologies, the requirements for automated testing {{are becoming more and}} more stringent. With increasing size of software projects, manual testing is becoming less efficient. For automated testing one of the most important question is, what to focus upon while testing? For a large number of functions along with large number of possible <b>call</b> <b>sequences,</b> it is very hard to generate test cases that cover all possible paths of control flow. By finding patterns in the <b>calling</b> <b>sequences</b> we will be able to identify more defects by focusing our testing efforts on those patterns. In this paper, we have described our work on tracing <b>call</b> <b>sequences</b> using Aspect Oriented Programming methodology and discovering those patterns in <b>call</b> <b>sequences</b> using data mining techniques...|$|R
40|$|To {{dynamically}} capture an application’s control flow, {{we propose}} <b>call</b> <b>sequence</b> sets as a light-weight abstraction. Unlike prior approaches based on grammars or trees, <b>call</b> <b>sequence</b> sets {{are easy to}} aggregate and compare, which facilitates incremental construction and comparison of control flow within and across program runs. ...|$|R
50|$|The <b>calling</b> <b>sequence</b> {{can contain}} dialable numbers such as digits - and DTMF tones , {{formatting}} characters , and control characters , which {{correspond to the}} Dial command of the Hayes AT command set.|$|E
5000|$|The <b>calling</b> <b>sequence</b> {{can contain}} dialable numbers such as digits [...] and DTMF tones , {{formatting}} characters , and control characters [...] which {{correspond to the}} Dial command of the Hayes AT command set. The following control characters are defined: ...|$|E
5000|$|Dialing {{rules are}} used to {{transform}} the canonical phone number into a dialable <b>calling</b> <b>sequence</b> for the modem, depending on the user's location. The dialing rules include variable-length dialing for area code, trunk access and international access prefixes, as well as central office access and calling card/credit card numbers.|$|E
40|$|AMPLE locates likely failure-causing classes by {{comparing}} method <b>call</b> <b>sequences</b> of passing and failing runs. A difference in method <b>call</b> <b>sequences,</b> such as multiple deallocation {{of the same}} resource, is likely {{to point to the}} erroneous class. In this paper, we describe the implementation of AMPLE as well as its evaluation. 1...|$|R
30|$|As modeled in Section Semantic {{model of}} attack, an attack {{is a set}} of {{operations}} which the attacker performs to achieve a certain objective, and it is composed of 5 essential elements. ICCG retains almost all program information, and we can extract a number of <b>call</b> <b>sequences</b> from it. By checking each <b>call</b> <b>sequence,</b> we can recognize actions which are attack related, identify the trigger of it, and perform data flow analysis on the <b>call</b> <b>sequence.</b> Hence, we could find a mapping from the attach model to the ICCG, which means that ICCG contains sufficient information to detect an attack inside.|$|R
40|$|In this paper, {{we propose}} a "bag of system calls" {{representation}} for intrusion detection of system <b>call</b> <b>sequences</b> and describe misuse detection results with widely used machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques and show experimental results. The {{results show that the}} machine learning techniques on simple "bag of system calls" representation of system <b>call</b> <b>sequences</b> is effective and often perform better than those approaches that use foreign contiguous subsequences for detecting intrusive behaviors of compromised processes...|$|R
50|$|The <b>calling</b> <b>sequence</b> for OS/360 {{contained}} the return address in Register 14. A branch to Register 14 would thus immediately exit the program. However, {{before and after}} executing this program, the operating system would allocate & deallocate datasets as specified in the DD statements, so {{it is commonly used}} as a quick way to set up or remove datasets.|$|E
5000|$|The {{canonical}} {{format is}} used by the Telephony API (TAPI), a Windows programming interface for dial-up fax, modem, and telephone equipment. Depending on the user's current location, the Windows' Dial-Up Networking (DUN) component applies a set of dialing rules to transform the canonical phone number into a locally dialable <b>calling</b> <b>sequence</b> for the modem device. The dialing rules may include variable-length dialing for area code, trunk access and international access prefixes, central office/service access numbers, and calling cards tone numbers.|$|E
5000|$|The {{structure}} chart aims to show [...] "the module hierarchy or <b>calling</b> <b>sequence</b> relationship of modules. There is a module specification for each module {{shown on the}} {{structure chart}}. The module specifications can be composed of pseudo-code or a program design language. The data dictionary is like that of structured analysis. At this stage in the software development lifecycle, after analysis and design have been performed, {{it is possible to}} automatically generate data type declarations", and procedure or subroutine templates.|$|E
50|$|MTS {{uses the}} {{standard}} S-type and, less often, R-type <b>calling</b> <b>sequences</b> used in OS/360.|$|R
5000|$|Generally, [...] can be <b>called</b> -Fibonacci <b>sequence,</b> and [...] can be <b>called</b> -Lucas <b>sequence.</b>|$|R
40|$|Based on API <b>call</b> <b>sequences,</b> semantic-aware {{and machine}} {{learning}} (ML) based malware classifiers {{can be built}} for malware detection or classification. Previous works concentrate on crafting and extracting various features from malware binaries, disassembled binaries or API calls via static or dynamic analysis and resorting to ML to build classifiers. However, they tend to involve too much feature engineering and fail to provide interpretability. We solve these two problems with the recent advances in deep learning: 1) RNN-based autoencoders (RNN-AEs) can automatically learn low-dimensional representation of a malware from its raw API <b>call</b> <b>sequence.</b> 2) Multiple decoders can be trained under different supervisions to give more information, other than the class or family label of a malware. Inspired by the works of document classification and automatic sentence summarization, each API <b>call</b> <b>sequence</b> {{can be regarded as}} a sentence. In this paper, we make the first attempt to build a multi-task malware learning model based on API <b>call</b> <b>sequences.</b> The model consists of two decoders, one for malware classification and one for file access pattern (FAP) generation given the API <b>call</b> <b>sequence</b> of a malware. We base our model on the general seq 2 seq framework. Experiments show that our model can give competitive classification results as well as insightful FAP information...|$|R
50|$|A {{function}} that self-modified, as IOR does, {{could not be}} used in a Fortran subprogram on any of the parameters to that subprogram (though it could be used to combine local variables) because it is incompatible with the SUBIN subprogram discussed above. IOR's transformation of its four-word <b>calling</b> <b>sequence,</b> shown above, moves the location of the address of variable I. On subsequent calls to the Fortran subprogram, the table of references to parameters would be in error and SUBIN would patch the wrong word, in this case placing the new address of I over the OR operation code.|$|E
40|$|Programming {{information}} for the RESIST program for the dynamic and thermal stress analysis {{of the space shuttle}} surface insulation is presented. The overall flow chart of the program, overlay chart, data set allocation, and subprogram <b>calling</b> <b>sequence</b> are given along with {{a brief description of the}} individual subprograms and typical subprogram output...|$|E
40|$|Extension to {{notion of}} {{conventional}} type: – Type: set of operations ever permitted on an object – Typestate: subset of operations on an object permitted {{in a particular}} context or a particular <b>calling</b> <b>sequence</b> • A programming model: – Detect at compile time using static analysis, nonsensical execution sequences – Such defects not detected by type checking or static scoping rulesMain Contributions (continued) • Novel Object-Oriented support: – Supports modern object-oriented language...|$|E
50|$|When , this <b>sequence</b> is <b>called</b> -Fibonacci <b>sequence,</b> for example, Pell <b>sequence</b> is also <b>called</b> 2-Fibonacci <b>sequence.</b>|$|R
40|$|International audienceMPI- 3 provide {{functions}} for non-blocking collectives. To help programmers introduce non-blocking collectives to existing MPI programs, we improve the PARCOACH tool for checking correctness of MPI <b>call</b> <b>sequences.</b> These enhancements focus on correct <b>call</b> <b>sequences</b> of all flavor of collective calls, {{and on the}} presence of completion calls for all non-blocking communications. The evaluation shows an overhead under 10 % of original compilation time...|$|R
40|$|Abstract—System <b>call</b> <b>sequence</b> based anomaly {{detection}} {{is one of}} the widely studied model of {{anomaly detection}}. There are two ways to model the system <b>call</b> <b>sequences,</b> one as full sequences and the other as lookahead pairs. Recently {{it has been shown that}} lookahead pairs perform better than full sequences. In this paper we propose an impurity tolerant model of anomaly detection using system calls called a...|$|R
40|$|The {{propagation}} {{of the charge}} exchange plasma for an electrostatic ion thruster is crucial in determining the interaction of that plasma with the associated spacecraft. A model that describes this plasma and its propagation is described, together with a computer code based on this model. The structure and <b>calling</b> <b>sequence</b> of the code, named PLASIM, is described. An explanation of the program's input and output is included, together with samples of both. The code is written in ANSI Standard FORTRAN...|$|E
40|$|ERROR is {{a routine}} {{to provide a}} common {{location}} for all routines. Its celling sequence is: SXD SERROR, 4 TSX SERROR+ 1, 4 The above is normally followed immediately by up to 20 registers of BCD remarks terminated by a word of 1 's. This may be left out, however. ERROR prints out the remark, if any, {{the location of the}} TSX that entered error, restores the console except for the AC overflow, and transfers to the user's error routine specified by the <b>calling</b> <b>sequence</b> of SETUP...|$|E
40|$|The {{software}} {{created for}} the Control Display Units (CDUs), used for the Advanced Transport Operating Systems (ATOPS) project, on the Transport Systems Research Vehicle (TSRV) is described. Module descriptions are presented in a standardized format which contains module purpose, <b>calling</b> <b>sequence,</b> a detailed description, and global references. The global reference section includes subroutines, functions, and common variables referenced by a particular module. The CDUs, one for the pilot {{and one for the}} copilot, are used for flight management purposes. Operations performed with the CDU affects the aircraft's guidance, navigation, and display software...|$|E
40|$|Abstract. In this paper, {{we propose}} a “bag of system calls ” {{representation}} for intrusion detection in system <b>call</b> <b>sequences</b> and describe misuse and anomaly detection results with standard machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques for misuse detection and show experimental results on anomaly detection. The results show that standard machine learning and clustering techniques on simple “bag of system calls ” representation of system <b>call</b> <b>sequences</b> is effective and often performs better than those approaches that use foreign contiguous subsequences in detecting intrusive behaviors of compromised processes. ...|$|R
5000|$|In {{a strict}} {{functional}} language the argument to f is expanded beforehand, yielding an infinite <b>call</b> <b>sequence,</b> ...|$|R
40|$|Evolutionary {{algorithms}} {{have successfully}} {{been applied to}} software testing. Not only approaches that search for numeric test data for procedural test objects have been investigated, but also techniques for automatically generating test programs that represent object-oriented unit test cases. Compared to numeric test data, test programs optimized for object-oriented unit testing are more complex. Method <b>call</b> <b>sequences</b> that realize interesting test scenarios must be evolved. An arbitrary method <b>call</b> <b>sequence</b> is not necessarily feasible due to call dependences which exist among the methods that potentially appear in a method <b>call</b> <b>sequence.</b> The approach {{presented in this paper}} relies on a tree-based representation of method <b>call</b> <b>sequences</b> by which sequence feasibility is preserved throughout the entire search process. In contrast to other approaches in this area, neither repair of individuals nor penalty mechanisms are required. Stronglytyped genetic programming is employed to generate method call trees. In order to deal with runtime exceptions, we use an extended distance-based fitness function. We performed experiments with four test objects. The initial results are promising: high code coverages were achieved completely automatically for all of the test objects...|$|R
40|$|A {{program that}} is a job may define {{parameters}} for and call other programs which are routines. SAS R○ routines and subroutines may be implemented as %includes or macros. Routines call other routines and subroutines. When testing or debugging multilevel %includes, {{it is difficult to}} determine which parameter in which routine or subroutine produced an error or warning message in the log. This paper discusses options used for testing, provides a new option, shows subroutine control using session constants, and illustrates two macros to show parameters and <b>calling</b> <b>sequence</b> of routines. Expected audience is intermediate to advanced programmer...|$|E
40|$|Building compilers that {{generate}} correct code is difficult. In this paper {{we present a}} compiler testing technique that closes the gap between actual compiler implementations and correct compilers. Using fonnaf specifications of procedure calling conventions, we have built a target-sensitive test suite generator that builds test crisesfor a specific aspect of compiler code generators the procedure <b>calling</b> <b>sequence</b> generator. By exercising compilers with these target-specific test suites, our automated testing tool has exposed bugs in every compiler tested. These compilers include ones {{that have been in}} heavy use for many years. The detected bugs cause more than 14, 000 test cases to fail. ...|$|E
40|$|MCPL is a {{programming}} language that has been derived from BCPL by the inclusion of features found in ML, C and Prolog. Like BCPL, it is typeless, uses a contiguous runtime stack and has no builtin garbage collector, but it does make extensive use of ML-like pattern matching. The low level aspects of the language resemble those of BCPL and C. MCPL uses its own function <b>calling</b> <b>sequence,</b> however {{it is designed to}} allow MCPL and C functions to call each other. Notable features of MCPL are its pattern matching facilities and the simple way in which data structures are handled. This document gives the definition of the language, its library and how t...|$|E
40|$|Abstract — In this paper, {{we propose}} a “bag of system calls ” {{representation}} for intrusion detection in system <b>call</b> <b>sequences</b> and describe misuse and anomaly detection results with standard machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques for misuse detection and show experimental results on anomaly detection. The results show that standard machine learning and clustering techniques on simple “bag of system calls” representation of system <b>call</b> <b>sequences</b> is effective and often performs better than those approaches that use foreign contiguous subsequences in detecting intrusive behaviors of compromised processes. I...|$|R
40|$|In this paper, {{we propose}} a "bag of system calls 2 ̆ 72 ̆ 7 {{representation}} for intrusion detection in system <b>call</b> <b>sequences</b> and describe misuse and anomaly detection results with standard machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques for misuse detection and show experimental results on anomaly detection. The results show that standard machine learning and clustering techniques on simple "bag of system calls 2 ̆ 72 ̆ 7 representation of system <b>call</b> <b>sequences</b> is effective and often performs better than those approaches that use foreign contiguous subsequences in detecting intrusive behaviors of compromised processes...|$|R
5000|$|Mock - A mock is {{specified}} {{by an individual}} test case to validate test-specific behavior, checking parameter values and <b>call</b> <b>sequencing.</b>|$|R
