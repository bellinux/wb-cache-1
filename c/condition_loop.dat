2|387|Public
40|$|Abstract- To enable data {{aggregation}} among the event sources in {{wireless sensor networks}} and to reduce the communication cost {{there is a need}} to establish a coveraged tree structure inside any given event region to allow data reports to be aggregated at a single processing point prior to transmission to the network. In this paper we propose a novel technique to create one such tree which maximizes the lifetime of the event sources while they are constantly transmitting for {{data aggregation}}. We use the term Centralized Lifetime Maximizing Tree (CLMT) to denote this tree. CLMT features with identification of bottleneck node among the given set of nodes. This node collects the data from every other node via routes with the highest branch energy subject to <b>condition</b> <b>loop</b> is not created. By constructing tree in such a way,protocol is able to reduce the frequency of tree reconstruction, minimiz...|$|E
40|$|To enable data {{aggregation}} among the event sources in {{wireless sensor networks}} and to reduce the communication cost {{there is a need}} to establish a coveraged tree structure inside any given event region to allow data reports to be aggregated at a single processing point prior to transmission to the network. In this paper we propose a novel technique to create one such tree which maximizes the lifetime of the event sources while they are constantly transmitting for {{data aggregation}}. We use the term Centralized Lifetime Maximizing Tree (CLMT) to denote this tree. CLMT features with identification of bottleneck node among the given set of nodes. This node collects the data from every other node via routes with the highest branch energy subject to <b>condition</b> <b>loop</b> is not created. By constructing tree in such a way, protocol is able to reduce the frequency of tree reconstruction, minimize the delay and maximize the functional lifetime of source nodes by minimizing the additional energy involved in tree reconstruction. Comment: 6 page...|$|E
50|$|Compilers usually {{implement}} statements with inlining. <b>Loop</b> <b>conditions</b> and <b>loop</b> bodies need lazy evaluation. This {{property is}} fulfilled when the code to compute <b>loop</b> <b>conditions</b> and <b>loop</b> bodies is inlined. Performance considerations are {{another reason to}} inline statements.|$|R
5000|$|Support {{of logical}} {{structures}} (such as <b>conditions,</b> <b>loops,</b> or iterating over arrays) ...|$|R
5000|$|NeoLoad [...] "scripts" [...] are {{developed}} via a GUI, which provides <b>conditions,</b> <b>loops</b> and other programming structures. JavaScript may be inserted for more advanced uses, such as password encryption.|$|R
50|$|However, {{exploiting}} the computer-like {{capabilities of the}} TI-59 is a different matter. Although the TI-59 is Turing-complete, supporting straight-line programming, <b>conditions,</b> <b>loops,</b> and indirect access to memory registers, and although it supports limited alphanumeric output on the printer only, writing sophisticated routines is essentially a matter of planning machine language and using a coding pad.|$|R
40|$|ECL (Embeddable Common-Lisp) is an interpreter/compiler for the Common-Lisp {{language}} {{as described in}} the X 3 J 13 Ansi specification, featuring CLOS (Common-Lisp Object System), <b>conditions,</b> <b>loops,</b> etc, plus a translator to C, which can produce standalone executables. ECL supports the operating systems Linux, FreeBSD, NetBSD, OpenBSD, Solaris and Windows, running on top of the Intel, Sparc, Alpha, PowerPC and ARM processors...|$|R
40|$|Cancellation {{controllers}} can be realizable for {{induction motor}} drives, but unfortunately, parameter variations, especially rotor resistance, de-tune the control action. However it {{is shown by}} linearized analysis that this drawback can be overcome, except for flux variations, using <b>conditioned</b> feedback <b>loops.</b> Starting from a nonlinear indirect field oriented controller already proposed by the authors for compensating flux magnitude variations an improved control system is presented having a <b>conditioned</b> feedback <b>loop.</b> Computer simulation results show the better performances obtainable with this control syste...|$|R
50|$|Other circuit {{simulators}} {{have since}} added many analyses beyond those in SPICE2 to address changing industry requirements. Parametric sweeps {{were added to}} analyze circuit performance with changing manufacturing tolerances or operating <b>conditions.</b> <b>Loop</b> gain and stability calculations were added for analog circuits. Harmonic balance or time-domain steady state analyses were added for RF and switched-capacitor circuit design. However, a public-domain circuit simulator containing the modern analyses and features needed to become a successor in popularity to SPICE has not yet emerged.|$|R
5000|$|The basic syntax {{remains very}} similar: <b>conditions,</b> <b>loops,</b> procedures, sub-routines are {{declared}} and {{written in the}} same manner (see Visual Basic). Mobility from prior Visual Basic iterations to Visual Basic [...]NET really are ports of existing code: programmers with experience in both worlds are required to effectively target the new platform with older logic. The Visual Basic [...]NET developer will have to learn the use of the basic [...]NET types rather than what they have been used to in Visual Basic.|$|R
5000|$|UNTIL - {{defines the}} <b>loop</b> <b>condition</b> for a REPEAT/UNTIL loop structure, and marks its end ...|$|R
5000|$|The {{feasibility}} {{condition is}} a sufficient <b>condition</b> for <b>loop</b> freedom in EIGRP-routed network. It {{is used to}} select the successors and feasible successors that are guaranteed {{to be on a}} loop-free route to a destination. Its simplified formulation is strikingly simple: ...|$|R
40|$|We {{calculate}} the full spectrum, as observed today, of the cosmological gravitational waves generated within a model based on loop quantum cosmology. It {{is assumed that}} the universe, after {{the transition to the}} classical regime, undergoes a period of inflation driven by a scalar field with a chaotic-type potential. Our analysis shows that, for certain <b>conditions,</b> <b>loop</b> quantum effects leave a clear signature on the spectrum, namely, an over-production of low-frequency gravitational waves. One of the aims of our work is to show that loop quantum cosmology models can be tested and that, more generally, pre-inflationary physical processes, contrary to what is usually assumed, leave their imprint in those spectra and can also be tested. Comment: 7 pages, 8 figures, revtex...|$|R
40|$|We discuss {{differential}} {{dynamics in}} terms of Jacobian loops, i. e., combination of the signed jacobian entries under permutation of the indices. We analyze conditins of their dynamical roles, necessary, and sufficient <b>conditions</b> for <b>loop</b> stability and instability, as well as conditions for exchange of stability. 1...|$|R
50|$|With this {{modification}} the <b>loop</b> <b>condition</b> {{will not}} be optimized away, and the system will detect the change when it occurs.|$|R
3000|$|... with DC voltages. Such a trap {{could allow}} for {{interesting}} new geometrical configurations for quantum simulations on moderately sized systems including frustrated magnetism on triangular lattices or Aharonov-Bohm effects on ion tunneling. The trap also incorporates periodic boundary <b>conditions</b> around <b>loops</b> {{which could be}} employed to examine time crystals.|$|R
40|$|AbstractLet X be an Sk-like {{continuum}} in Euclicean space En. It {{is shown}} {{that if the}} embedding of X satisfies the small <b>loops</b> <b>condition</b> and 1 ⩽k⩽n− 4, then X has arbitrarily small neighborhoods which are homeomorphic to Sk×Bn−k. It follows that if X and Y are Sk-like continua in Sn, 1 ⩽k⩽n− 4, and both satisfy the small <b>loops</b> <b>condition,</b> then X and Y have homeomorphic complements {{if and only if}} they have the same shape...|$|R
5000|$|The redo keyword restarts {{the current}} {{iteration}} {{of the loop}} identified by the label. Neither the continue block nor the <b>loop</b> <b>condition</b> is evaluated.|$|R
5000|$|... a is {{executed}} {{just once}} before the loop. b is the <b>condition</b> of the <b>loop.</b> c is executed {{at the end}} of every loop.|$|R
50|$|A fifth type of {{variable}} role, Rule, can express an algorithm or executable methodto define start, end, or <b>looping</b> <b>conditions</b> in the Trial Design model.|$|R
40|$|Abstract. In [16] Tiwari {{proved that}} {{termination}} of linear programs (loops with linear <b>loop</b> <b>conditions</b> and updates) over the reals is decidable through Jordan forms and eigenvectors computation. In [4] Braverman proved {{that it is}} also decidable over the integers. In this paper, we consider the termination of loops with polynomial <b>loop</b> <b>conditions</b> and linear updates over the reals and integers. First, we prove that the termination of such loops over the integers is undecidable. Second, with an assumption, we provide an algorithm to decide the termination of a class of such programs over the reals. Our method {{is similar to that}} of Tiwari in spirit but uses different techniques. Finally, we conjecture that the termination of linear programs with polynomial <b>loop</b> <b>conditions</b> over the reals is undecidable in general by reducing the problem to another decision problem related to number theory and ergodic theory, which we guess undecidable. ...|$|R
25|$|Often, an {{infinite}} loop is unintentionally {{created by a}} programming error in a condition-controlled loop, wherein the <b>loop</b> <b>condition</b> uses variables that never change within the loop.|$|R
30|$|In this work, {{we report}} {{the effects of}} oil, oil velocity, temperature, and inhibitors on {{asphaltene}} deposition in dynamic <b>conditions</b> by flow <b>loop</b> apparatus using a thermal approach.|$|R
50|$|Note that {{as in the}} {{original}} paper, the thread checks itself before entering the critical section.Since the <b>loop</b> <b>conditions</b> will evaluate as false, this does not cause much delay.|$|R
5000|$|Mhatre, N. & Balakrishnan, R. (2007). Phonotactic walking {{paths of}} field crickets in closed <b>loop</b> <b>conditions</b> and their {{simulation}} using a stochastic model. Journal of Experimental Biology 210, 3661-3676.|$|R
40|$|We give {{a general}} {{construction}} for right conjugacy closed loops, using $GL(2,q) $ for $q$ a prime power. Under certain <b>conditions,</b> the <b>loops</b> constructed are simple, giving the first general construction for finite, simple right conjugacy closed loops. We give a complete {{description of the}} isomorphism classes for the construction, yielding an exact count of non isomorphic loops for each $q$...|$|R
40|$|International audienceWe {{develop an}} {{algorithm}} {{for the three}} dimensional simulation {{of the dynamics of}} soft objects (drops, capsules, vesicles) under creeping flow <b>conditions.</b> <b>Loop</b> elements are used to describe the shape of the soft objects. This surface representation is used both for membrane solver based on finite element method (FEM) and for the fluid solver based on the boundary element method (BEM). This isogeometric analysis of the low Reynolds fluid-structure interaction problem is then coupled to high-order explicit time stepping or second-order implicit time stepping algorithm. For vesicles simulation, a preconditioner is designed for the resolution of the surface velocity incompressibility constraint, which is treated by the use of a local Lagrange multiplier. A mesh quality preserving algorithm is introduced to improve the control mesh quality over long simulation times. We test the proposed algorithm on capsule and vesicle dynamics in various flows, and study its convergence properties, showing a second-order convergence O(N- 2) with mesh number of elements...|$|R
40|$|We have {{investigated}} intrachain contact dynamics in unfolded cytochrome cb_(562) by monitoring heme quenching of excited ruthenium photosensitizers covalently bound to residues along the polypeptide. Intrachain diffusion for chemically denatured proteins proceeds on the microsecond time scale with an upper limit of 0. 1 μs. The rate constants exhibit a power-law {{dependence on the}} number of peptide bonds between the heme and Ru complex. The power-law exponent of − 1. 5 is consistent with theoretical models for freely jointed Gaussian chains, but its magnitude is smaller than that reported for several synthetic polypeptides. Contact formation within a stable loop was examined in a His 63 -heme ligated form of the protein under denaturing <b>conditions.</b> <b>Loop</b> formation accelerated contact kinetics for the Ru 66 labeling site, owing to reduction in the length of the peptide separating redox sites. For other labeling sites within the stable loop, quenching rates were modestly reduced compared to the open chain polymer...|$|R
40|$|Tiwari {{proved that}} {{termination}} of linear programs (loops with linear <b>loop</b> <b>conditions</b> and updates) over the reals is decidable through Jordan forms and eigenvectors computation. Braverman proved {{that it is}} also decidable over the integers. In this paper, we consider the termination of loops with polynomial <b>loop</b> <b>conditions</b> and linear updates over the reals and integers. First, we prove that the termination of such loops over the integers is undecidable. Second, with an assumption, we provide an complete algorithm to decide the termination of a class of such programs over the reals. Our method {{is similar to that}} of Tiwari in spirit but uses different techniques. Finally, we conjecture that the termination of linear programs with polynomial <b>loop</b> <b>conditions</b> over the reals is undecidable in general by %constructing a loop and reducing the problem to another decision problem related to number theory and ergodic theory, which we guess undecidable. Comment: 17 pages, 0 figure...|$|R
40|$|The linear {{stability}} of static coronal-loop models undergoing thermal perturbations was investigated. The effect of <b>conditions</b> at the <b>loop</b> {{base on the}} stability properties of the models was considered in detail. The question of appropriate boundary <b>conditions</b> at the <b>loop</b> base was considered and {{it was concluded that}} the most physical assumptions are that the temperature and density (or pressure) perturbations vanish there. However, if the base is taken to be sufficiently deep in the chromosphere, either several chromospheric scale heights or several coronal loop lengths in depth, then the effect of the boundary <b>conditions</b> on <b>loop</b> stability becomes negligible so that all physically acceptable conditions are equally appropriate. For example, one could as well assume that the velocity vanishes at the base. The growth rates and eigenmodes of static models in which gravity is neglected and in which the coronal heating is a relatively simple function, either constant per-unit mass or per-unit volume were calculated. It was found that all such models are unstable with a growth rate of the order of the coronal cooling time. The physical implications of these results for the solar corona and transition region are discussed...|$|R
40|$|AbstractThis paper gives a <b>condition</b> that <b>loop</b> on a {{hyperbolic}} surface be homotopic to a {{power of}} a simple loop {{in terms of the}} trace of the corresponding isometry of the universal cover of the surface. This yields an algorithm for testing simplicity of loops as well as providing a universal lower bound for the lengths of loops which are not homotopic to powers of simple loops...|$|R
50|$|Computer-aided {{verification}} of computer programs often uses SMT solvers. A common technique is to translate preconditions, postconditions, <b>loop</b> <b>conditions,</b> and assertions into SMT formulas {{in order to}} determine if all properties can hold.|$|R
40|$|Counter {{controlled}} and condition controlled are main categories of iterative statements, with “for”, “while ” and “do while ” loops dominating the field. While {{there are clear}} distinctions between them, {{it is not uncommon}} for a programmer to practically convert a <b>condition</b> controlled <b>loop</b> to do counter controlled task or vice versa. For instance, there is a “while loop ” that will be iterated a number of times or a “for loop” with an additional condition next to the counter checker. This paper proposes a new loop that will be both counter and <b>condition</b> controlled. The <b>loop</b> will include an in-built predefined counter and it will be able to iterate a user defined number of time, prior to checking the user defined condition. A detailed explanation and a C++ implementation of the proposed loop are included in this paper...|$|R
3000|$|... [...]. Feedback speed, {{the speed}} of the actuator, is limited in tapping mode by the {{stability}} <b>condition</b> of the <b>loop</b> control (Equation 3). Thus, the feedback speed is limited by the cantilever time constant τ [...]...|$|R
5000|$|The next keyword jumps {{directly}} {{to the end of}} the current iteration of the loop. This usually causes the next iteration of the loop to be started, but the continue block and <b>loop</b> <b>condition</b> are evaluated first.|$|R
50|$|In most {{computer}} programming languages, a while loop is a control flow statement that allows code {{to be executed}} repeatedly based on a given Boolean <b>condition.</b> The while <b>loop</b> {{can be thought of}} as a repeating if statement.|$|R
