15|561|Public
6000|$|... § V. When the {{materials}} with which this veil is built are very loose, or of shapes {{which do not}} fit well together, it sometimes becomes necessary, or at least adds to security, to introduce courses of more solid material. Thus, bricks alternate with rolled pebbles in the old walls of Verona, and hewn stones with brick in its Lombard churches. A banded structure, almost a stratification of the wall, is thus produced; and the courses of more solid material are sometimes decorated with carving. Even when the wall is not thus banded through its whole height, it frequently becomes expedient to lay a course of stone, or at least of more carefully chosen materials, at regular heights; and such belts or bands we may <b>call</b> <b>String</b> courses. These {{are a kind of}} epochs in the wall's existence; something like periods of rest and reflection in human life, before entering on a new career. Or else, in the building, they correspond to the divisions of its stories within, express its internal structure, and mark off some portion of the ends of its existence already attained.|$|E
50|$|What {{many would}} <b>call</b> <b>string</b> {{instruments}} {{are classified as}} chordophones. Violins, guitars, lyres, and harps are examples. However, the word also embraces instruments that many would hesitate to <b>call</b> <b>string</b> instruments, such as the musical bow and the piano (which, although sometimes called a string instrument, is also called a keyboard instrument and a percussion instrument).|$|E
5000|$|... the [...] key would <b>call</b> <b>string</b> search function, the [...] key repeating of {{the last}} search, the [...] key would display the list of EVE {{commands}} and the [...] key would call the EVE command line.|$|E
5000|$|In 2003, {{participated in}} a staged reading of a play {{involving}} string theory written by Jacquelyn Reingold <b>called</b> <b>String</b> Fever at Rockefeller University.|$|R
25|$|Bamboo {{also called}} bams or sticks; means bar of 100 pence. They are called bamboo in the US are <b>called</b> <b>strings</b> (索子) in China and Japan, in {{accordance}} with their origin.|$|R
5000|$|In formal {{language}} theory and computer programming, string concatenation [...] is {{the operation of}} joining character strings [...] For example, the concatenation of [...] "snow" [...] and [...] "ball" [...] is [...] "snowball". In some but not all formalisations of concatenation theory, also <b>called</b> <b>string</b> theory, string concatenation is a primitive notion.|$|R
40|$|Abstract. Using basic {{homotopy}} constructions, we {{show that}} isomorphism classes of string structures on spin bundles are naturally given by certain de-gree 3 cohomology classes, which we <b>call</b> <b>string</b> classes, on the total space of the bundle. Using a Hodge isomorphism, we then show that the harmonic representative of a string class {{gives rise to a}} canonical 3 -form on the base space, refining the associated differential character. We explicitly calculate this 3 -form for homogeneous metrics on 3 -spheres, and we discuss how the co-homology theory tmf could potentially encode obstructions to positive Ricci curvature metrics. 1...|$|E
40|$|This paper investigates {{computation}} by linear assemblies {{of complex}} DNA tiles, which we <b>call</b> <b>string</b> tiles. By {{keeping track of}} the strands as they weave back and forth through the assembly, we show that surprisingly sophisticated calculations can be performed using linear self-assembly. Examples range from generating an addition table to providing O(1) solutions to CNF-SAT and DHPP. We classify the families of languages that can be generated by various types of DNA molecules, and establish a correspondence to the existing classes ET 0 L_(ml) and ET 0 L_(fin). Thus, linear self-assembly of string tiles can generate the output languages of finite-visit Turing Machines...|$|E
40|$|Using basic {{homotopy}} constructions, we {{show that}} isomorphism classes of string structures on spin bundles are naturally given by certain degree 3 cohomology classes, which we <b>call</b> <b>string</b> classes, on the total space of the bundle. Using a Hodge isomorphism, we then show that the harmonic representative of a string class {{gives rise to a}} canonical 3 -form on the base space, refining the associated differential character. We explicitly calculate this 3 -form for homogeneous metrics on 3 -spheres, and we discuss how the cohomology theory tmf could potentially encode obstructions to positive Ricci curvature metrics. Comment: 32 pages; v. 2 minor typos correcte...|$|E
50|$|The sasando has 28 or 56 strings. The sasando with 28 <b>strings</b> is <b>called</b> sasando engkel and {{sometimes}} has 56 <b>strings,</b> <b>called</b> double <b>strings.</b>|$|R
30|$|Asm Files: 10, 868 {{training}} and 10, 873 test files containing a metadata manifest including data extracted by the Interactive Disassembler Tool. This information includes {{things such as}} function <b>calls,</b> <b>strings,</b> assembly command sequences and more.|$|R
5000|$|... c) If 3 {{players in}} one union are 1st,2nd,3rd players, no tributes {{mentioned}} above will be paid. Everyone in enemy union {{only have to}} pay his/her head-to-head rival a tribute of one card. This is <b>called</b> <b>Stringing</b> three players.|$|R
40|$|The {{one-dimensional}} transverse field Ising {{model is}} solved by continuous unitary transformations in the high-field limit. A high accuracy is reached {{due to the}} closure of the relevant algebra of operators which we <b>call</b> <b>string</b> operators. The closure is related to the possibility to map the model by Jordan-Wigner transformation to non-interacting fermions. But it is proven without referring to this mapping. The effective model derived by the continuous unitary transformations is used to compute the contributions of one, two, and three elementary excitations to the diagonal dynamic structure factors. The three-particle contributions have so far not been addressed analytically, except close to the quantum critical point. Comment: 20 pages, 16 figure...|$|E
40|$|We simplify in {{this paper}} the {{algorithm}} by Chang and Lawler for the approximate string matching problem, by adopting the concept of sampling. We have a more general analysis of expected time with the simplified algorithm for the one-dimensional case under a non-uniform probability distribution, and we show that our method can easily be generalized to the two-dimensional approximate pattern matching problem with sublinear expected time. 1 Introduction Since the inaugural papers on string matching algorithms were published by Knuth, Morris and Pratt[11] and Boyer and Moore [5], the problem diversified into various directions. Let us <b>call</b> <b>string</b> matching one-dimensional pattern matching. One is two-dimensional pattern matching {{and the other is}} approximate pattern matching where up to k differences are allowed for a match. Yet another theme is two-dimensional approximate pattern matching. There are numerous papers in these new research areas. We cite just a few of them to compare [...] ...|$|E
40|$|The {{techniques}} {{which are}} used to implement (non-trivial) interprocedural data flow analyzers can be generally divided into two subsets: the <b>call</b> <b>string</b> and the functional approach as presented in [15]. Both differ in their time and space complexity {{as well as in}} the precision due to properties of the abstract domains and transfer functions. We have developed a data flow analyzer generator PAG which is able to produce interprocedural analyzers for both techniques. We specified two variants of constant propagation working in an ANSI-C compiler; a copy constant propagation that uses distributive transfer function and can be solved precisely, even interprocedurally [12], and a full constant propagator which includes an interpreter for expressions of the language. We present the practical relevant results applying both analyzers to a rather fair set of real-world programs and compare the space/time consumption of the analyzers versus their precision. 1 Introduction The need for interproce [...] ...|$|E
50|$|In {{computer}} science, string searching algorithms, sometimes <b>called</b> <b>string</b> matching algorithms, are {{an important}} class of string algorithms that {{try to find a}} place where one or several <b>strings</b> (also <b>called</b> patterns) are found within a larger string or text.|$|R
50|$|The initial {{version of}} VHDL, {{designed}} to IEEE standard IEEE 1076-1987, included {{a wide range}} of data types, including numerical (integer and real), logical (bit and boolean), character and time, plus arrays of bit called bit_vector and of character <b>called</b> <b>string.</b>|$|R
5000|$|... #Caption: A guitar's bridge {{holds its}} strings fast to the instrument; its saddle (white) raises them above {{the bridge and}} conveys their {{vibrations}} to the bridge. The black fasteners are <b>called</b> <b>string</b> pegs. All are [...] "loose"—held in place only by string tension.|$|R
40|$|In this paper, we give new, tight subexponential lower bounds for {{a number}} of graph {{embedding}} problems. We introduce two related combinatorial problems, which we <b>call</b> <b>String</b> Crafting and Orthogonal Vector crafting, and show that these cannot be solved in time 2 ^o(|s|/|s|), unless the Exponential Time Hypothesis fails. These results are used to obtain simplified hardness results for several graph embedding problems, on more restricted graph classes than previously known: assuming the Exponential Time Hypothesis, there do not exist algorithms that run in 2 ^o(n/ n) time for Subgraph Isomorphism on graphs of pathwidth 1, Induced Subgraph Isomorphism on graphs of pathwidth 1, Graph Minor on graphs of pathwidth 1, Induced Graph Minor on graphs of pathwidth 1, Intervalizing 5 -Colored Graphs on trees, and finding a tree or path decomposition with width at most c with a minimum number of bags, for any fixed c≥ 16. 2 ^Θ(n/ n) appears to be the "correct" running time for many packing and embedding problems on restricted graph classes, and we think String Crafting and Orthogonal Vector Crafting form a useful framework for establishing lower bounds of this form...|$|E
40|$|The {{full call}} strings method {{is the most}} general, simplest, and most precise method of {{performing}} context sensitive interprocedural data flow analysis. It remembers contexts using call strings. For full precision, all call strings up to a prescribed length must be constructed. Two limitations of this method are (a) it cannot be used for frameworks with infinite lattices, and (b) the prescribed length is quadratic {{in the size of}} the lattice resulting in an impractically large number of call strings. These limitations have resulted in a proliferation of ad hoc methods which compromise on generality, precision, or simplicity. We propose a variant of the classical full call strings method which reduces the number of call strings, and hence the analysis time, by orders of magnitude as corroborated by our empirical measurements. It reduces the worst case <b>call</b> <b>string</b> length from quadratic {{in the size of the}} lattice to linear. Further, unlike the classical method, this worst case length need not be reached. Our approach retains the precision, generality, and simplicity of call strings method without imposing any additional constraints. It can accommodate demand-driven approximations and hence can be used for frameworks with infinite lattices...|$|E
40|$|An interprocedural {{analysis}} is precise {{if it is}} flow sensitive and fully context-sensitive even {{in the presence of}} recursion. Many methods of interprocedural analysis sacrifice precision for scalability while some are precise but limited to only a certain class of problems. Soot currently supports interprocedural analysis of Java pro-grams using graph reachability. However, this approach is restricted to IFDS/IDE problems, and is not suitable for general data flow frameworks such as heap reference analysis and points-to analysis which have non-distributive flow functions. We describe a general-purpose interprocedural analysis frame-work for Soot using data flow values for context-sensitivity. This framework is not restricted to problems with distributive flow func-tions, although the lattice must be finite. It combines the key ideas of the tabulation method of the functional approach and the tech-nique of value-based termination of <b>call</b> <b>string</b> construction. The efficiency and precision of interprocedural analyses is heav-ily affected by the precision of the underlying call graph. This is especially important for object-oriented languages like Java where virtual method invocations cause an explosion of spurious call edges if the call graph is constructed naively. We have instantiated our framework with a flow and context-sensitive points-to analysis in Soot, which enables the construction of call graphs that are far more precise than those constructed by Soot’s SPARK engine...|$|E
50|$|Concatenation theory, also <b>called</b> <b>string</b> theory, character-string theory, or {{theoretical}} syntax, studies character strings over finite alphabets of characters, signs, symbols, or marks. String {{theory is}} foundational for formal linguistics, computer science, logic, and metamathematics especially proof theory. A generative grammar {{can be seen}} as a recursive definition in string theory.|$|R
2500|$|In the 1980s, a new {{mathematical}} model of theoretical physics, <b>called</b> <b>string</b> theory, emerged. It showed {{how all the}} particles {{and all of the}} forms of energy in the universe could be constructed by hypothetical one-dimensional [...] "strings", infinitesimal building-blocks that have only the dimension of length, but not height or width.|$|R
5000|$|... "Fuego" [...] is {{the second}} single {{released}} by Bond from their album Shine. Fuego was played in various fashion shows including Miss World and Miss Universe. The song is based on another song <b>called</b> <b>Strings</b> Of My Heart which was performed by Croatian pop singer Vanna in the Eurovision Song Contest 2001.|$|R
40|$|In {{this work}} the {{automatic}} generation of program analyzers from concise specifications is presented. It focuses on provably correct and complex interprocedural analyses for real world sized imperative programs. Thus, {{a powerful and}} flexible specification mechanism is required, enabling both correctness proofs and efficient implementations. The generation process relies on the theory of data flow analysis and on abstract interpretation. The theory of data flow analysis provides methods to efficiently implement analyses. Abstract interpretation provides the relation to the semantics of the programming language. This allows the systematic derivation of efficient provably correct, and terminating analyses. The approach has been implemented in the program analyzer generator PAG. It addresses analyses ranging from “simple ” intraprocedural bit vector frameworks to complex interprocedural alias analyses. A high level specialized functional language is used as specification mechanism enabling elegant and concise specifications even for complex analyses. Additionally, it allows the automatic selection of efficient implementations for the underlying abstract datatypes, such as balanced binary trees, binary decision diagrams, bit vectors, and arrays. For the interprocedural analysis the functional approach, the <b>call</b> <b>string</b> approach, and a novel approach especially targeting on the precise analysis of loops can be chosen. In this work the implementation of PAG {{as well as a}} large number of applications of PAG are presented...|$|E
40|$|Interprocedural {{data flow}} {{analysis}} extends {{the scope of}} analysis across procedure boundaries in search of increased optimization opportunities. Call strings based approach is a general approach for performing flow and context sensitive interprocedural analysis. It maintains a history of calls along with the data flow information {{in the form of}} call strings, which are sequences of unfinished calls. Recursive programs may need infinite call strings for interprocedural data flow analysis. For bit vector frameworks this method is believed to require all call strings of lengths up to 3 K, where K is the maximum number of distinct call sites in any call chain. We combine the nature of information flows in bit-vector data flow analysis with the structure of interprocedurally valid paths to bound the call strings. Instead of bounding the length of call strings, we bound the number of occurrences of any call site in a <b>call</b> <b>string.</b> We show that the call strings in which a call site appears at most three times, are sufficient for convergence on interprocedural maximum fixed point solution. Though this results in the same worst case length of call strings, it does not require constructing all call strings up to length 3 K. Our empirical measurements on recursive programs show that our bound reduces the lengths and the number of call strings, and hence the analysis time, significantly...|$|E
40|$|A {{well-known}} fact in {{the field}} of lossless text compression is that high-order entropy is a weak model when the input contains long repetitions. Motivated by this fact, decades of research have generated myriads of so-called dictionary compressors: algorithms able to reduce the text's size by exploiting its repetitiveness. Lempel-Ziv 77 {{is probably one of the}} most successful and known tools of this kind, followed by straight-line programs, run-length Burrows-Wheeler transform, macro schemes, collage systems, and the compact directed acyclic word graph. In this paper, we show that these techniques are only different solutions to the same, elegant, combinatorial problem: to find a small set of positions capturing all distinct text's substrings. We <b>call</b> <b>string</b> attractor such a set. We first show reductions between dictionary compressors and string attractors. This gives us the approximation ratios of dictionary compressors with respect to the smallest string attractor and allows us to solve several open problems related to the asymptotic relations between the output sizes of different dictionary compressors. We then show that k-attractor problem [...] - that is, deciding whether a text has a size-t set of positions capturing all substrings of length at most k [...] - is NP-complete for k≥ 3. This, in particular, implies the NP-completeness of the full string attractor problem. We provide several approximation techniques for the smallest k-attractor, show that the problem is APX-complete for constant k, and give strong inapproximability results. To conclude, we provide matching lower- and upper- bounds for the random access problem on string attractors. Our data structure matching the lower bound is optimal also for LZ 77, straight-line programs, collage systems, and macro schemes, and therefore essentially closes the random access problem for all these compressors. Comment: added conclusio...|$|E
5000|$|In the 1980s, a new {{mathematical}} model of theoretical physics, <b>called</b> <b>string</b> theory, emerged. It showed {{how all the}} particles {{and all of the}} forms of energy in the universe could be constructed by hypothetical one-dimensional [...] "strings", infinitesimal building-blocks that have only the dimension of length, but not height or width.|$|R
40|$|I review work {{developing}} {{the idea that}} string is a composite of point-like entities <b>called</b> <b>string</b> bits. Old and new insights this picture brings {{into the nature of}} string theory are discussed. This paper summarizes my talk presented to the Strings 96 conference at Santa Barbara, CA, 14 - 20 July 1996. Comment: 14 pages, Latex documen...|$|R
5|$|Quantum {{gravity is}} {{the branch of}} physics that seeks to {{describe}} gravity using the principles of quantum mechanics. Currently, the most popular approach to quantum gravity is string theory, which models elementary particles not as zero-dimensional points but as one-dimensional objects <b>called</b> <b>strings.</b> In the AdS/CFT correspondence, one typically considers theories of quantum gravity derived from string theory or its modern extension, M-theory.|$|R
40|$|Abstract. This paper {{presents}} an abstract semantics that uses information about execution paths to improve precision of data flow analyses of logic programs. The abstract semantics {{is illustrated by}} abstracting execution paths using <b>call</b> <b>strings</b> of fixed length and the last transfer of control. Abstract domains {{that have been developed}} for logic program analyses can be used with the new abstract semantics without modification...|$|R
5000|$|Chordophones, {{which are}} {{arguably the most}} common, and most popular, of all musical instruments, {{primarily}} produce their sounds {{by means of the}} vibration of a string or strings that are stretched between fixed points. This group includes all instruments generally <b>called</b> <b>string</b> instruments in the west, as well as many (but not all) keyboard instruments, such as pianos and harpsichords. List of chordophones by Hornbostel-Sachs number ...|$|R
5|$|In physics, {{string theory}} is a {{theoretical}} framework in which the point-like particles of particle physics are replaced by one-dimensional objects <b>called</b> <b>strings.</b> These strings look like small segments or loops of ordinary string. String theory describes how strings propagate through space and interact with each other. On distance scales larger than the string scale, a string will look just like an ordinary particle, with its mass, charge, and other properties determined by the vibrational state of the string. Splitting and recombination of strings correspond to particle emission and absorption, giving rise to the interactions between particles.|$|R
40|$|We {{review the}} caloron {{correspondence}} between G-bundles on M × S^ 1 and Ω G-bundles on M, where Ω G is {{the space of}} smooth loops in the compact Lie group G. We use the caloron correspondence to define characteristic classes for Ω G-bundles, <b>called</b> <b>string</b> classes, by transgression of characteristic classes of G-bundles. These generalise the string class of Killingback to higher dimensional cohomology. Comment: 21 pages. Author addresses adde...|$|R
5|$|String theory extends {{ordinary}} {{particle physics}} by replacing zero-dimensional point particles by one-dimensional objects <b>called</b> <b>strings.</b> In the late 1980s, {{it was natural}} for theorists to attempt to formulate other extensions in which particles are replaced by two-dimensional supermembranes or by higher-dimensional objects called branes. Such objects had been considered as early as 1962 by Paul Dirac, and they were reconsidered by a small but enthusiastic group of physicists in the 1980s.|$|R
40|$|A {{relevant}} part of {{the quantum}} algebra of observables for the closed bosonic strings moving in 1 + 3 –dimensional Minkowski space {{is presented in the}} form of generating The present communication is part of an ongoing effort to describe the observable features of the Nambu–Goto field theory of relativistic, linearly extended geometric objects, <b>called</b> <b>strings,</b> in purely algebraic terms [6]. Conventionally, the Nambu–Goto theory is treated as any field theory of point-lik...|$|R
