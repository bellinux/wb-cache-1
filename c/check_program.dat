86|1097|Public
25|$|An {{emerging}} {{and growing}} practice of program design is program evaluation. Evaluation {{can be seen}} as a cycle which involves the ongoing systematic assessment of a community-based program by collecting data from it, reviewing the data, changing the program as the data recommends, and then collecting data again. Program designers often choose to incorporate evaluation into design in order to <b>check</b> <b>program</b> processes, determine impact, build a base of support, and/or justify replication/expansion.|$|E
5000|$|Hetq (Newspaper)- New Armenian Spell <b>Check</b> <b>Program</b> 97% Accurate ...|$|E
50|$|Stevens' Spell <b>Check</b> <b>program</b> {{was also}} used in Novell GroupWise.|$|E
40|$|A {{letter report}} {{issued by the}} Government Accountability Office with an {{abstract}} that begins "Since 9 / 11, {{the federal government has}} taken steps to ensure that transportation workers are screened to ensure that they do not pose a security risk. However, the number of DHS background <b>check</b> <b>programs</b> has raised concerns that such workers may be subject to redundant background <b>check</b> <b>programs.</b> The Security and Accountability for Every Port Act of 2006 required GAO to conduct a study of those DHS background <b>check</b> <b>programs</b> similar to the one required of truck drivers to obtain a hazardous material endorsement (HME). For this study, GAO examined DHS background <b>check</b> <b>programs</b> to identify (1) potential redundancies and inconsistencies, if any, connected with these programs, and (2) actions, if any, DHS is taking or planning to coordinate its background <b>check</b> <b>programs.</b> To address these objectives, GAO examined selected background <b>check</b> <b>programs,</b> interviewed DHS officials and private stakeholders, and reviewed relevant documents. ...|$|R
5000|$|... 2009 — Business account {{services}} and the Relationship <b>Checking</b> <b>Program</b> are introduced.|$|R
40|$|At WITS 2005, Warnier et al. {{published}} an algorithm to statically <b>check</b> confidentiality of <b>programs</b> with dynamic labels. Unlike prior approaches, their method allows for temporary breaches of confidentiality. However, {{they share the}} commonly made assumption that programs run entirely in private memory. Thus, interaction with and observation of the <b>checked</b> <b>program</b> is restricted to program start and termination respectively. This paper extends Warnier’s approach in two fundamental aspects: shared memory and synchronisation. Through shared memory other programs may observe and interact with the <b>checked</b> <b>program</b> at memory-access granularity. Synchronisation renders parts of the shared memory inaccessible to those programs which adhere to the locking policy. We provide a mechanically-checked soundness proof and show {{the effectiveness of a}} countermeasure to the AES cache side-channel attack. 1...|$|R
50|$|According to the California Air Resources Board, the California Smog <b>Check</b> <b>program</b> removes about 400 tons of smog-forming {{pollutants}} from California’s air every day.|$|E
5000|$|... #Caption: The American flag stands {{against the}} {{backdrop}} of a smoggy Los Angeles in 1972. The California Smog <b>Check</b> <b>Program</b> is an attempt to reduce smog in California.|$|E
50|$|In September 2009, Connor was re-signed by TNA {{as their}} lead agent. Additionally, D'Lo {{was in charge}} of talent {{development}} and acquisitions heading up the TNA Gut <b>Check</b> <b>program.</b>|$|E
40|$|AbstractApproaches to typing logic {{programs}} often exclude {{various features}} of Standard Prolog. The system “Typical for annotated Prolog” (TaP) is a pragmatic approach to type <b>checking</b> <b>programs</b> written in Prolog without restricting {{the scope of}} the language. TaP <b>checks</b> Prolog <b>programs</b> that are extended with type declarations that support parametric polymorphism and subtyping. The {{purpose of this paper is}} to present an approach that extends Typical by meta-types for handling Prolog meta-programming techniques...|$|R
50|$|Stored {{program control}} exchanges finally solved the problem, by setting a bit mask in the {{scanning}} program {{and running a}} low priority periodic <b>checking</b> <b>program</b> against the wetlist. Depending on software version, a wetlisted line may also be in PLO or lockout state.|$|R
50|$|Other early diction {{and style}} <b>checking</b> <b>programs</b> {{included}} Punctuation & Style, Correct Grammar, and RightWriter. While all the earliest programs {{started out as}} simple diction and style checkers, all eventually added various levels of language processing, and developed some level of true grammar checking capability.|$|R
5000|$|Since {{his release}} from Federal prison in 2007, Lawton has worked with teens and young adults {{in an effort to}} educate them about the realities of crime and prison. The main vehicle through which Lawton has done this is the Reality <b>Check</b> <b>Program,</b> which uses lectures, DVDs, and other {{educational}} materials to reach at-risk youth before they end up in prison. Mr. Lawton’s Reality <b>Check</b> <b>Program</b> consists of four parts: Lawton's early life, what prison is really like, what you will lose, and avoiding and dissolving bad associations. The program is available for groups, organizations, schools and corporations as well as private individual one on one sessions. Additionally, consulting and guidance is available from Lawton and the Reality <b>Check</b> <b>Program.</b> Lawton’s programs have been used by judges, police chiefs, sheriffs, public defenders, state attorneys, the federal government weed and seed program, and families. Other activities provided by the program include an annual golf outing to allow at-risk youth the opportunity to interact with officials. The event also shows the officials kids when they are not in trouble. In 2010, Lawton filmed the pilot for a new reality show based on his work with at-risk youth which he called Lawton's Law. The Reality <b>Check</b> <b>Program</b> also began offering its quarterly [...] "Community Champion" [...] award, with the first recipient being Florida fire-fighter and avid volunteer Aldo Nunez.|$|E
50|$|The California Bureau of Automotive Repair (BAR) is a {{division}} of the California Department of Consumer Affairs that enforces the Automotive Repair Act and associated regulations and administers the California Smog <b>Check</b> <b>Program.</b>|$|E
50|$|The Health <b>Check</b> <b>program</b> was {{discontinued}} in 2014; {{the program}} had been criticized by University of Ottawa professor Yoni Freedhoff for endorsing products with high sugar and sodium contents as purportedly being healthy options.|$|E
40|$|This report {{describes}} {{the design and}} implementation of a complete VLSI design rule <b>checking</b> <b>program.</b> We use formal techniques to develop a methodology for performing design rule checking, and implement this methodology in the Scheme programming language. We specify the requirements for a simplified VLSI design database and implement it, making use of the Hilbert R-tree. We describe the implementationof an efficient algorithm for the decompositionof rectilinear polygons into collections of rectangles. We apply partial evaluation techniques to our final design rule <b>checking</b> <b>program</b> {{in order to determine}} the effect this has on our program's structure and performance. Finally, we describe the implementation of a graphical user interface for the checker and summarise our experiences and insights gained during the course of this project...|$|R
40|$|A new {{watchdog}} processor {{scheme for}} concurrent <b>checking</b> of <b>program</b> control flow is presented. This method {{is intended to}} check {{state of the art}} processor architectures with on-chip caches as building blocks of multiprocessor systems. The signatures are assigned, so that the processor instruction bus needs not be monitored. The run-time and reference signatures are embedded into the <b>checked</b> <b>program,</b> making obsolete the reference database and the time-consuming search and compare engine in the watchdog processor. The scheme is extended to check multitasking and multiprocessor systems...|$|R
40|$|Abstract: We {{evaluate}} {{the use of}} <b>program</b> <b>checking</b> to ensure the correctness of compiler implementations. Our contributions in this paper are threefold: Firstly, we extend the classical notion of black-box <b>program</b> <b>checking</b> to <b>program</b> <b>checking</b> with certificates. Our checking approach with certificates relies on the observation that the correctness of solutions of NP-complete problems can be checked in polynomial time whereas their computation itself {{is believed to be}} much harder. Our second contribution is the application of <b>program</b> <b>checking</b> with certificates to optimizing compiler backends, in particular code generators, thus answering the open question of how <b>program</b> <b>checking</b> for such compiler backends can be achieved. In particular, we state a checking algorithm for code generation based on bottom-up rewrite systems from static single assignment representations. We have implemented this algorithm in a checker for a code generator used in an industrial project. Our last contribution in this paper is an integrated view on all compiler passes, in particular a comparison between frontend and backend phases, with respect to the applicable methods of <b>program</b> <b>checking...</b>|$|R
50|$|One of {{the biggest}} {{customers}} of the National Name <b>Check</b> <b>Program</b> (NNCP) is USCIS (formerly INS) which, since late 2002 requires comprehensive FBI Name Checks for all applicants for permanent residence (green card) and for naturalization.|$|E
50|$|A 2014 Audi R8 V10 Plus Coupé {{was used}} in Audi Health <b>Check</b> <b>program</b> in Canada (between 2013-07-15 and 2013-09-15), where {{customers}} turning in out-of-warranty vehicles riding Audi R8 equipped as an authentic German EMS (Emergency Medical Services) vehicle.|$|E
50|$|An {{emerging}} {{and growing}} practice of program design is program evaluation. Evaluation involves the ongoing systematic assessment of community-based programs. Program designers often choose to incorporate evaluation into design {{in order to}} <b>check</b> <b>program</b> processes, determine impact, build a base of support, and/or justify replication/expansion.|$|E
40|$|These {{proceedings}} {{contain the}} contributions {{presented at the}} 3 rd DIKU-IST Joint Workshop on Foundations of Software held at Roskilde, Denmark, October 5 - 6, 2007. The workshop featured talks and discussions on domain-specific languages, logic and model <b>checking,</b> <b>program</b> complexity and optimization, reversible and bidirectional computing, and demonstrations of software prototypes...|$|R
40|$|Zdancewic and Myers {{introduced}} observational determinism as a scheduler independent {{notion of}} security for concurrent programs. This paper proposes a type system for verifying observational determinism. Our type system verifies observational determinism by itself, and {{does not require the}} type <b>checked</b> <b>program</b> to be confluent. A polynomial time type inference algorithm is also presented. ...|$|R
5000|$|Also causal to the {{accident}} was the failure of Delta Air Lines' management to provide leadership and guidance to its flightcrews through its training and <b>check</b> airmen <b>programs</b> to promote and foster optimum cockpit management procedures, {{and the failure of}} the Federal Aviation Administration to correct known deficiencies in the training and <b>check</b> airmen <b>programs</b> of Delta Air Lines.|$|R
50|$|In 1984, BAR also {{implemented}} a biennial Smog <b>Check</b> <b>Program,</b> {{also known as}} the motor vehicle inspection and maintenance program, pursuant to authority granted by Senate Bill 33 of 1982 (SB 33). SB 33 authorized BAR to implement, maintain, and enforce the Smog <b>Check</b> <b>Program,</b> which licenses Smog Check stations and technicians to reduce air pollution from vehicles through mandatory testing of vehicle emission control components. Smog Check stations must also be registered as ARDs to ensure that consumers receive protection associated with vehicle repairs. In addition, BAR ensures that the equipment used to perform Smog Check inspections and the inspections performed at Smog Check stations by Smog Check Inspectors or Technicians will achieve reductions in vehicle emissions of hydrocarbons, carbon monoxide, and oxides of nitrogen. Recently, BAR's authority to protect consumers subject to the Smog <b>Check</b> <b>Program</b> was enhanced by Assembly Bill 2289 of 2010 (AB 2289). AB 2289 authorizes BAR to certify high performing Smog Check stations and technicians as STAR certified, which allows them to inspect and repair vehicles that are likely to be high polluters. Shortly after implementation, BAR was recognized for outstanding environmental achievements in government for the STAR Program and was named one of the 2013 Best of California Award winners and received The Green IT Award. AB 2289 further increased the citation amounts for program violations by stations and technicians.|$|E
5000|$|AB 42 {{exempted}} vehicles manufactured before 1974 from smog check testing. Also {{required that}} vehicles 30 {{years old or}} older be exempt from the Smog <b>Check</b> <b>program</b> starting in 2004. AB 42 established a brief rolling chassis exemption until it was repealed in 2006 where 1976 and newer vehicles were subjected to emission testing.|$|E
50|$|In Canada, the Canadian Produce Marketing Association (CPMA), the Heart and Stroke Foundation's Health <b>Check</b> <b>Program,</b> and the Canadian Cancer Society have partnered {{together}} to create the Fruits and Veggies — Mix it up! campaign, encouraging Canadian families to eat more healthily. The campaign focuses on easy ways for people to eat healthy wherever and whenever they can.|$|E
40|$|Type qualifiers are a lightweight, {{practical}} {{mechanism for}} specifying and <b>checking</b> <b>program</b> properties. In previous work, {{we have developed}} CQUAL, a tool for adding type qualifiers to C. In this short article, we describe an Eclipse plug-in for CQUAL that allows programmers to visualize the results of CQUAL’s type qualifier inference and thereby quickly understand and resolve potential programming errors...|$|R
40|$|We {{describe}} a sound method for automatically proving Hoare triples for loop-free code in Separation Logic, for certain preconditions and postconditions (symbolic heaps). The method uses {{a form of}} symbolic execution, a decidable proof theory for symbolic heaps, and extraction of frame axioms from incomplete proofs. This is a precursor {{to the use of}} the logic in automatic specification <b>checking,</b> <b>program</b> analysis, and model checking...|$|R
40|$|This paper {{gives an}} {{experience}} report on {{an effort to}} provide an automated program grading service for a computer science course. A team of two students applied testing techniques to analyze assignment specifications, and to develop Unix shell scripts for <b>checking</b> <b>programs</b> and assigning scores. This paper identifies the challenges faced by the course instructor attempting to use the automated grading service for the first time. ...|$|R
50|$|On March 12, 2009, the Bureau of Automotive Repair and the Air Resource Board hired Sierra Research, Inc. {{to analyze}} the data {{collected}} in the BAR’s Roadside Inspection Program {{to evaluate the effectiveness of}} the Smog <b>Check</b> <b>Program</b> from data collected in 2003-2006. Under the Roadside Inspection Program vehicles are randomly inspected at checkpoints set up by the California Highway Patrol (CHP). One objective of the evaluation was to compare the post smog check performance of pre-1996 (1974-1995) vehicles to the post smog check performance determined from a previous evaluation collected in 2000-2002.The report made several recommendations to reduce the number of vehicles failing the Roadside test. One was to develop a method for evaluating station performance. The other was to perform inspections immediately following certifications at smog check stations. Finally, the report recommended continued use of the Roadside test to evaluate the effectiveness of the Smog <b>Check</b> <b>program.</b>|$|E
50|$|The California Smog <b>Check</b> <b>Program</b> {{requires}} {{vehicles that}} were manufactured in 1976 or later {{to participate in}} the biennial (every two years) smog <b>check</b> <b>program</b> in participating counties. The program’s stated aim is to reduce air pollution from vehicles by ensuring that cars with excessive emissions are repaired in accordance with federal and state guidelines. With some exceptions, gas-powered vehicles that are six years old or newer are not required to participate; instead, these vehicles pay a smog abatement fee for the first 6 years in place of being required to pass a smog check. The six-year exception does not apply to nonresident (previously registered out-of-state) vehicles being registered in California for the first time, diesel vehicles 1998 model or newer and weighing 14,000 lbs or less, or specially constructed vehicles 1976 and newer. The program is a joint effort between the California Air Resources Board, the California Bureau of Automotive Repair, and the California Department of Motor Vehicles.|$|E
50|$|Cage {{initially}} made {{an appearance}} for Total Nonstop Action Wrestling (TNA) on August 30, 2012 competing in a tryout dark match against Robbie E in a losing effort. The following year, Cage made another {{appearance on the}} January 10, 2013 edition of Impact Wrestling in another tryout match but through the company's short lived TNA Gut <b>Check</b> <b>program</b> in a losing effort against Jay Bradley.|$|E
40|$|We {{discuss some}} {{questions}} {{connected with the}} construction of a technology of analysing correctness of Programmable Logic Controller programs. We consider an example of modeling and automated verification of PLC-programs written in the Ladder Diagram language (including timed function blocks) of the IEC 61131 - 3 standard. We use the Cadence SMV for symbolic model <b>checking.</b> <b>Program</b> properties are written in the linear-time temporal logic LTL. </p...|$|R
40|$|We {{consider}} P colonies as {{introduced in}} [4] and investigate their computational power when {{working in the}} maximally parallel and in the sequential mode. It turns {{out that there is}} a trade-o ¤ between maximal parallelism and checking programs: Using <b>checking</b> <b>programs</b> (i. e., priorities on the communicaton rules in the programs of the agents), P colonies working in the sequential mode with height at most 5 are computationally complete, whereas when working in the maximally parallel mode, P colonies (again with height 5) already obtain the same computational power without using <b>checking</b> <b>programs.</b> Moreover, when allowing an arbitrary number of programs for each agent, we can prove that P colonies with only one agent (thus these P colonies are working in the sequential mode) are already computationally complete. Finally, P colonies with an arbitrary number of agents working in the sequential mode as well as even P colonies with only one agent using an arbitrary number of non-checking programs characterize the family of languages generated by matrix grammars without appearance checking. ...|$|R
40|$|Abstract. We {{introduce}} <b>program</b> <b>checking</b> with certificates {{by extending}} the traditional notion of black-box <b>program</b> <b>checking.</b> Moreover, we establish <b>program</b> <b>checking</b> with certificates as a safety-scalable and practical method {{to ensure the}} correctness of real-scale applications. We motivate our extension of <b>program</b> <b>checking</b> with concepts of computational complexity theory and show its practical implication on the implementation and verification of checkers. Furthermore, we present an iterative method to construct checkers which is {{able to deal with}} the practically relevant problem of incomplete or missing specifications of software. In our case study, we have considered compilers and their generators, in particular code generators based on rewrite systems...|$|R
