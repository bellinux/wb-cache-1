0|63|Public
50|$|In the {{architectural}} Teuchitlán microcosm, rulers observed a <b>cyclic</b> <b>program</b> of ritual festivals {{and society in}} general, lived under this ritual concept.|$|R
40|$|We {{consider}} the parallel composition of two <b>cyclic</b> <b>programs.</b> The interaction {{of these programs}} consists of a form of synchronisation {{sometimes referred to as}} ‘mutual inclusion’. For a given implementation of this synchronisation by means of semaphore operations, we prove the correctness of the programs and we prove the absence of the danger of deadlock...|$|R
30|$|Esterel {{belongs to}} the family of {{synchronous}} programming languages, which are affected by cyclic signal dependencies. This prohibits a static scheduling, limiting the choice of available compilation techniques for programs with such cycles. This work proposes an algorithm that, given a constructive synchronous Esterel program, performs a semantics-preserving source code level transformation that removes cyclic signal dependencies. The transformation is divided into two parts: detection of cycles and iterative resolution of these cycles. It is based on the replacement of cycle signals by a signal expression involving no other cycle signals, thereby breaking the cycle. This transformation of <b>cyclic</b> Esterel <b>programs</b> enables the use of efficient compilation techniques, which are only available for acyclic programs. Furthermore, experiments indicate that the code transformation can even improve code quality produced by compilers that can already handle <b>cyclic</b> <b>programs.</b>|$|R
40|$|We {{define a}} {{reduction}} system which preserves the stable semantics. This system includes {{two types of}} transformation rules. One type (which we call) preserves the stable se-mantics regardless of the EDB (extensional database). So, {{it can be used}} at compilation time. The other (which we call) does not preserve the stable semantics across changes to the EDB. Thus, it should be used at run time. Nonethe-less can reduce the program size considerably and is quadratic time computable. Sometimes can transform a <b>cyclic</b> <b>program</b> into an acyclic one. At these times, a satisfi-ability solver can be used to obtain the stable models...|$|R
40|$|Society is {{experiencing}} growth and profound changes. Among other aspects, we {{take into account}} the rapid development of new technologies, which requires new approaches and methodological principles for handling, processing and information processing. All students have the power and ability to become smart if learners learn and use techniques of self-regulation. Thanks to the self-regulated learning <b>cyclic</b> <b>program,</b> students evaluate themselves and establish objectives, strate-gies and adjust according to their needs and specific learning context, thus improving their out-comes. This article is a reflection based in a wide bibliographic study attempts to shed light on the importance of self-regulated learning in bilingual contexts...|$|R
40|$|Logic Programs with Annotated Disjunctions (LPADs) {{allow to}} express {{probabilistic}} information in logic programming. The semantics of an LPAD {{is given in}} terms of well founded models of the normal logic programs obtained by selecting one disjunct from each ground LPAD clause. The paper presents SLGAD resolution that computes the (con- ditional) probability of a ground query from an LPAD {{and is based on}} SLG resolution for normal logic programs. The performances of SLGAD are evaluated on classical benchmarks for normal logic programs under the well founded semantics, namely the stalemate game and the ancestor relation. The results show that SLGAD has good scaling properties and is able to deal with <b>cyclic</b> <b>programs...</b>|$|R
40|$|Visual {{specification}} of software is gaining popularity, however its usage is restricted {{by the lack}} of precise semantics of visual languages. In this the-sis a method for representing the semantics of visual languages by means of attribute models is introduced. Attribute models of a wide class of visual scheme languages are defined, higher-order attribute models that allow syn-thesizing recursive, branching or <b>cyclic</b> <b>programs</b> are explained. Dynamic evaluation of attributes is used. Three kinds of deep semantics of schemes are presented as different ways of usage of attribute models of schemes. The implementation of attribute semantics of visual languages is done in the sys-tem CoCoViLa. The features of specification language of attribute models of schemes and visual classes, as well as the realization of attribute evaluation technique are presented. 1...|$|R
5000|$|The field {{reached its}} peak {{production}} in 1950, when [...] of oil were withdrawn from the reservoir. Inevitably, production declined, and field operators employed several enhanced recovery technologies to increase reservoir pressure and keep the wells flowing. Waterflooding was begun in 1953, and air injection in 1971. A <b>cyclic</b> steam <b>program</b> ran from 1966 to 1968 but failed to produce any significant benefit.|$|R
40|$|Nondeterminism in {{scheduling}} is {{the cardinal}} reason for difficulty in proving correctness of concurrent programs. A powerful proof strategy was recently proposed [6] {{to show the}} correctness of such programs. The approach captured data-flow dependencies among the instructions of an interleaved and error-free execution of threads. These data-flow dependencies were represented by an inductive data-flow graph (iDFG), which, in a nutshell, denotes a set of executions of the concurrent program {{that gave rise to}} the discovered data-flow dependencies. The iDFGs were further transformed in to alternative finite automatons (AFAs) in order to utilize efficient automata-theoretic tools to solve the problem. In this paper, we give a novel and efficient algorithm to directly construct AFAs that capture the data-flow dependencies in a concurrent program execution. We implemented the algorithm in a tool called ProofTraPar to prove the correctness of finite state <b>cyclic</b> <b>programs</b> under the sequentially consistent memory model. Our results are encouranging and compare favorably to existing state-of-the-art tools...|$|R
40|$|Abstract. This paper {{addresses}} {{the problem of}} verifying and correcting programs when they are moved from a sequential consistency execution environment to a relaxed memory context. Specifically, it considers the TSO (Total Store Order) relaxation, which corresponds {{to the use of}} store buffers, and its extension x 86 -TSO, which in addition allows synchronization and lock operations. The proposed approach uses a previously developed verification tool that uses finite automata to symbolically represent the possible contents of the store buffers. Its starting point is a program that is correct for the usual sequential consistency memory model, but that might be incorrect under x 86 -TSO. This program is then analyzed for this relaxed memory model and when errors are found (with respect to safety properties), memory fences are inserted in order to avoid these errors. The approach proceeds iteratively and heuristically, inserting memory fences until correctness is obtained, which is guaranteed to happen. An advantage of our technique is that the underlying symbolic verification tool makes a full exploration possible even for <b>cyclic</b> <b>programs,</b> which makes our approach broadly applicable. The method has been tested with an experimental implementation and can effectively handle a series of classical examples. ...|$|R
3000|$|Naiad [12] is a {{distributed}} system for executing <b>cyclic</b> dataflow <b>programs.</b> It supports efficient execution of incremental and iterative computations {{by using a}} new computational model called timely dataflow that differs from MapReduce model. The timely dataflow model allows stateful computations and arbitrarily nested iterations. It distributes computations over many workers, and accelerates iterative computations as they converge. Unlike iiHadoop, Naiad is an in-memory system that relies on memory to store and index data. It is written in C# using the [...].NET Framework which differs from Hadoop Framework.|$|R
40|$|Abstract. This paper {{addresses}} {{the problem of}} verifying and correcting programs when they are moved from a sequential consistency execution environment to a relaxed memory context. Specifically, it considers the PSO (Partial Store Order) memory model, which corresponds {{to the use of}} a store buffer for each shared variable and each process. We also will consider, as an intermediate step, the TSO (Total Store Order) memory model, which corresponds to the use of one store buffer per process. The proposed approach extends a previously developed verification tool that uses finite automata to symbolically represent the possible contents of the store buffers. Its starting point is a program that is correct for the usual Sequential Consistency (SC) memory model, but that might be incorrect under PSO with respect to safety properties. This program is then first analyzed and corrected for the TSO memory model, and then this TSO-safe program is analyzed and corrected under PSO, producing a PSO-safe program. To obtain a TSO-safe program, only store-load fences (TSO only allows store-load relaxations) are introduced into the program. Finaly, to produce a PSO-safe program, only store-store fences (PSO additionally allows store-store relaxations) are introduced. An advantage of our technique is that the underlying symbolic verifi-cation tool makes a full exploration of program behaviors possible even for <b>cyclic</b> <b>programs,</b> which makes our approach broadly applicable. The method has been tested with an experimental implementation and can effectively handle a series of classical examples. ...|$|R
40|$|The HOST Liner <b>Cyclic</b> <b>Program</b> is {{utilizing}} {{two types}} of test apparatus, rectangular box rigs and a full annular rig. To date two quartz lamp cyclic box rigs have been tested and a third is to begin testing in late October 1983. The box rigs are used to evaluate 5 x 8 inch rectangular linear samples. A 21 inch diameter outer liner simulator is also being built up for testing beginning in April 1984. All rigs are atmospheric rigs. The first box rig, a three 6 -kVA lamp installation, was operated under adverse conditions to determine feasibility of using quartz lamps for cyclic testing. This work was done in December 1981 and looked promising. The second box rig, again using three 6 -kVA lamps, was operated to obtain instrumentation durability information and initial data input to a Finite Element Model. This limited test program was conducted in August 1983. Five test plates were run. Instrumentation consisted of strain gages, thermocouples and thermal paint. The strain gages were found to fail at 1200 F as expected though plates were heated to 1700 F. The third box rig, containing four 6 -kVA lamps, is in build up for testing to begin in late October 1983. In addition to 33 percent greater power input, this rig has provision for 400 F backside line cooling air and a viewing port suitable for IR camera viewing. The casing is also water cooled for extended durability...|$|R
5000|$|The Arduino IDE {{supports}} the languages C and C++ using special rules of code structuring. The Arduino IDE supplies a software library from the Wiring project, which provides many common {{input and output}} procedures. User-written code only requires two basic functions, for starting the sketch and the main program loop, that are compiled and linked with a program stub main (...) into an executable <b>cyclic</b> executive <b>program</b> with the GNU toolchain, also included with the IDE distribution. The Arduino IDE employs the program avrdude to convert the executable code into a text file in hexadecimal encoding that is loaded into the Arduino board by a loader program in the board's firmware.|$|R
40|$|The {{problems}} of obtaining accurate strain data, providing reliable temperature control, and affording oxidation protection {{arise in the}} experimental determination of the elevated temperature creep properties of materials. The apparatus described in this paper provides an autographic strain record using commercially available equipment, reliable temperature control for both constant or <b>programmed</b> <b>cyclic</b> temperatures, and oxidation protection by means of specimen encapsulation...|$|R
40|$|This {{article focuses}} on the recent changes {{occurred}} {{in the beginning of}} the 21 st century regarding elementary school: the inclusion of six-year-old children in the segment and, consequently, the extension of basic education in Brazil to nine years. Such adjustments had an impact on school organization. One of them is evident by the adoption of the cyclic educational curriculum. Another change is the investment on continuous education for public school teachers. A research accomplished with literacy teachers in Campinas, in Sao Paulo state, brings to the debate their opinion on the working practices. Through their narratives we are able to understand their work in face of the organization of a <b>cyclic</b> educational <b>program</b> and their proposals regarding writing and reading in the context of literacy studies...|$|R
40|$|The genetic {{programming}} of iterative concurrent programs {{written in the}} CCS process algebra is investigated. Using a generational {{genetic programming}} scheme, experiments succesfully evolved a <b>cyclic</b> concurrent <b>program</b> that performs a even-parity- 2 analysis on a communicating input stream. The fitness evaluation strategy determines how well programs communicate with randomly generated streams of input signals. Fitness is measured by performing a pairwise sequence alignment comparison of two execution sequences [...] the output sequence generated by the program communicating with the test signal stream, and the correct output sequence for that test case. The optimal edit distance between these sequences is efficiently computed using dynamic programming. The main result is that sequence alignment evaluation against randomly generated test cases is a promising evaluation strategy for evolving cycling protocols...|$|R
40|$|The paper {{presents}} {{newly developed}} university software FNPO designed for reliability-based optimization. The program {{works with a}} newly proposed optimization method called Aimed Multilevel Sampling (AMS) in the optimization cycle of reliability-based optimization. For simulation {{at different levels of}} the algorithm AMS and reliability calculations <b>program</b> uses <b>cyclic</b> calls of <b>program</b> FReET - so called double-loop approach. The developed software enables to optimize model of general complexity with consideration of deterministic and/or reliability constraints...|$|R
40|$|A general {{procedure}} for investigating the loading limits, damage behavior {{and reliability of}} laminar piezoceramic transducers is proposed. The characterization of the sensor and actuator performance and a quasistatic and <b>cyclic</b> testing <b>program</b> under mechanical and electrical loading and under various environmental conditions provide a data basis for the identification of damage mechanisms and {{for the assessment of}} long-term integrity. Numerical simulation is used both to predict performance and to contribute {{to a better understanding of}} the experimental results by studying the local loading conditions in a component under various boundary conditions. The method is exemplified on an extended study on foil-based PZT patches for which a temperature dependant lifetime diagram was derived and on miniature piezoelectric bending actuators developed and tested for use in an implantable peristaltic micropump...|$|R
40|$|The {{problem of}} {{partitioning}} grid-based applications for parallel computing can be efficiently and intuitively solved in pure Prolog, using only the single assignment {{property of the}} logic variable, and not the backtracking. We show that these pure Prolog solutions can be transformed in a systematic way into <b>cyclic</b> functional <b>programs.</b> These functional programs can be executed more rapidly than the original Prolog programs. 1 Introduction Many processes in nature are modelled by partial differential equations. Examples of such processes are the weather, the tides, fluid currents in general, stress analysis of large constructions, electronics, acoustics, optics etc. In a recent book on solving partial differential equations on parallel computers case studies are presented concerning wave propagation, petrol engineering, aerodynamics, discrete simulation, elasticity and quantum mechanics [19]. Solving sparse symmetric linear systems that arise from discretization of elliptic partial diff [...] ...|$|R
40|$|Abstract [...] Given {{a digital}} planar curve of N ordered points, the dynamic {{programming}} algorithm isapplied to find M dominant points, among the N points, which construct a globally optimal approximation to the given curve provided that a circular arc is properly designed between {{each pair of}} adjacent dominant points. This curve-fitting method is generalized to approximate closed curves. A fast algorithm for efficient computation is also introduced. The performance is shown by some experimental results. Curve-fitting Circular arc Dynamic <b>programming</b> <b>Cyclic</b> string 1...|$|R
40|$|Abstract: Parallel {{computing}} {{is gradually}} becoming a main-stream tool in geotechnical modeling. As an illustration, {{this paper presents}} numerical simulations of a large-scale pile-supported wharf system. These simulations are conducted on a supercomputer using a parallel nonlinear finite element program ParCYCLIC (recently developed based on the serial <b>program</b> <b>CYCLIC).</b> Ongoing efforts to calibrate CYCLIC are also presented. In this regard, data from large-scale shaking table experiments have been instrumental. On this basis, a user interface is under development, to allow numerical studies by interested researchers worldwide...|$|R
40|$|Cyclic {{debugging}} {{is one of}} {{the most}} important and most commonly used activities in <b>program</b> development. During <b>cyclic</b> debugging, the <b>program</b> is repeatedly reexecuted to track down errors when a failure has been observed. This process necessitates reproducible program executions. Applying classical debugging techniques such using breakpoints or single stepping in real-time systems change the temporal behavior and make reproduction of the observed failure during debugging less likely, if not impossible. Consequently, these techniques are not directly applicable for cyclic debugging of real-time systems...|$|R
40|$|The use of {{welded wire}} {{reinforcement}} (WWR) {{as an alternative}} to traditional mild steel reinforcing bars has many advantages. WWR has a higher yield strength and higher quality control, and results in significantly lower construction labor costs. However, many designers are still reluctant to use WWR {{as an alternative to}} mild steel reinforcing bars, due to unavailability of fatigue design guidance in the American Association of State Highway and Transportation Officials (AASHTO) Bridge Design Specifications. This paper reports on an extensive <b>cyclic</b> testing <b>program</b> on deformed high strength WWR. Based on this testing, a conservative stress range formula similar to the existing one for mild reinforcing bars is presented for possible adoption in the AASHTO LRFD Specifications. The Unified Fatigue Approach, an alternative format to fatigue provisions for all materials, is also discussed. In addition, full monotonic axial tensile stress- strain relationships are presented...|$|R
40|$|A program {{derivation}} {{is said to}} be polytypic if some of its {{parameters are}} data types. The repmin problem is to replace all elements of a tree of numbers by the minimum element, making only a single pass over the original tree. Here we present a polytypic derivation for that problem. The derivation has an unusual feature: when interpreted in the category of relations, the resulting program is the well-known <b>cyclic</b> logic <b>program,</b> and when interpreted in the category of functions, it is the well-known higher-order functional solution. 1 Motivation Suppose I were to show you a derivation of a shortest path algorithm, and my whole presentation was in terms of numbers, addition and minimum. Undoubtedly some of you would get up and point out that by abstracting over the operations and recording their algebraic properties, I could have derived a whole class of algorithms instead of one particular program. Indeed, such abstraction over operations is now commonly accepted as one of the hallmar [...] ...|$|R
40|$|Naiad is a {{distributed}} system for executing data parallel, <b>cyclic</b> dataflow <b>programs.</b> It offers the high throughput of batch processors, the low latency of stream processors, {{and the ability}} to perform iterative and incremental computations. Although existing systems offer some of these features, applications that require all three have relied on multiple platforms, at the expense of efficiency, maintainability, and simplicity. Naiad resolves the complexities of combining these features in one framework. A new computational model, timely dataflow, underlies Naiad and captures opportunities for parallelism across a wide class of algorithms. This model enriches dataflow computation with timestamps that represent logical points in the computation and provide the basis for an efficient, lightweight coordination mechanism. We show that many powerful high-level programming models can be built on Naiad’s low-level primitives, enabling such diverse tasks as streaming data analysis, iterative machine learning, and interactive graph mining. Naiad outperforms specialized systems in their target application domains, and its unique features enable the development of new high-performance applications. ...|$|R
40|$|Bounding {{techniques}} for calculating shakedown loads are {{of great importance}} as design criteria since these {{eliminate the need for}} performing full <b>cyclic</b> loading <b>programs</b> either numerically or experimentally. The classical Melan theorem provides a way to recognize whether or not elastic shakedown occurs under a specified loading. Polizzotto extended Melan's theorem to the case where a combination of steady and cyclic loads are acting on the structure. The {{purpose of this paper is}} to present a finite element method, based on Polizzotto's theorem, to estimate elastic shakedown for a structure subjected to loads resulting from a combination of steady and cyclic mechanical loads. This method, called non-linear superposition, is then applied to investigate the shakedown behaviour of a biaxially loaded square plate with a central hole. Results obtained for the plate with a hole problem are compared with those available in the literature and are verified by means of cyclic elastoplastic finite element analysis...|$|R
40|$|Final stretch {{criterion}} of failure {{is applied to the}} problem of quasi-static extension of a crack embedded in an elastic-plastic or viscoelastic-plastic matrix. The slow growth under subcritical conditions in a rate-sensitive Tresca solid is shown to be a superposition of creep rupture and McClintock's ductile growth. This type of growth occurs at subcritical magnitude of the imposed K-factor and can be accounted for only through a recognition of inelastic properties of solids. In the subcritical range there is no unique value for K sub c independent of geometrical configuration and flaw size. Not only the produced states of stress and strain are dependent on the loading path, but also the material resistance to fracture {{turns out to be a}} function of the history of loading that precedes catastrophic failure. A nonlinear integro-differential equation of motion is derived for a crack progressing through a viscoelastic medium with some limited ability to plastic flow. Examples of numerical integration are given incorporating both monotonic and <b>cyclic</b> loading <b>programs...</b>|$|R
40|$|Abstract. Based on {{the design}} {{parameters}} of disc CAM with the oscillating roller follower and modified trapezoid curve follower motion, by introducing macro <b>program</b> <b>cyclic</b> variable, the mathematical calculation model of macro program about cutter path of disc CAM with the holonomic constraint oscillating roller follower is established. The macro {{program is designed to}} can be adjusted quickly, according to the design parameters and the process parameters. The numerical control program completely parametric design is realized. So it provides programming methods and strategies for numerical control machining macro program design of the oscillating roller follower disc CAM with a complicated movement law...|$|R
40|$|An {{aggressive}} <b>cyclic</b> {{spin test}} <b>program</b> was run {{to verify the}} reliability of superalloy disks with a dual grain structure, fine grain bore and coarse grain rim, utilizing a disk design with web holes bisecting the grain size transition zone. Results of these tests were compared with conventional disks with uniform grain structures. Analysis of the test results indicated the cyclic performance of disks with a dual grain structure could be estimated {{to a level of}} accuracy which does not appear to prohibit the use of this technology in advanced gas turbine engines, although further refinement of lifing methodology is clearly warranted...|$|R
40|$|In Neurospora crassa, the {{interactions}} between products of the frequency (frq), frequency-interacting RNA helicase (frh), white collar- 1 (wc- 1), and white collar- 2 (wc- 2) genes establish a molecular circadian clockwork, called the FRQ-WC-Oscillator (FWO), which {{is required for the}} generation of molecular and overt circadian rhythmicity. In strains carrying nonfunctional frq alleles, circadian rhythms in asexual spore development (conidiation) are abolished in constant conditions, yet conidiation remains rhythmic in temperature cycles. Certain characteristics of these temperature-synchronized rhythms have been attributed to the activity of a FRQ-less oscillator (FLO). The molecular components of this FLO are as yet unknown. To test whether the FLO depends on other circadian clock components, we created a strain that carries deletions in the frq, wc- 1, wc- 2, and vivid (vvd) genes. Conidiation in this ΔFWO strain was still synchronized to <b>cyclic</b> temperature <b>programs,</b> but temperature-induced rhythmicity was distinct from that seen in single frq knockout strains. These results and other evidence presented indicate that components of the FWO are part of the temperature-induced FLO...|$|R
40|$|The {{validity}} of real-time software {{is determined by}} its ability to execute on a computer within the time constraints of the physical system it is modeling. In many applications the time constraints are so critical that the details of process scheduling are elevated to the requirements analysis phase of the software development cycle. It {{is not uncommon to}} find specifications for a real-time <b>cyclic</b> executive <b>program</b> included to assumed in such requirements. It was found that prelininary designs structured around this implementation abscure the data flow of the real world system that is modeled and that it is consequently difficult and costly to maintain, update and reuse the resulting software. A cyclic executive is a software component that schedules and implicitly synchronizes the real-time software through periodic and repetitive subroutine calls. Therefore a design method is sought that allows the deferral of process scheduling to the later stages of design. The appropriate scheduling paradigm must be chosen given the performance constraints, the largest environment and the software's lifecycle. The concept of process inversion is explored with respect to the cyclic executive...|$|R
40|$|For the {{analysis}} and design of pile foundation used for coastal structures the prediction of cyclic response, which {{is influenced by the}} nonlinear behavior, gap (pile soil separation) and degradation (reduction in strength) of soil becomes necessary. To study the effect of the above parameters a nonlinear <b>cyclic</b> load analysis <b>program</b> using finite element method is developed, incorporating the proposed gap and degradation model and adopting an incremental-iterative procedure. The pile is idealized using beam elements and the soil by number of elastoplastic sub-element springs at each node. The effect of gap and degradation on the load-deflection behavior. elasto-plastic sub-element and resistance of the soil at ground-line have been clearly depicted in this paper...|$|R
40|$|In {{this work}} we modify the {{conventional}} row buffer allocation mechanism used in DDR 2 SDRAM banks to improve average memory latency and overall processor performance. Our method assigns row buffers to different banks dynamically and by {{taking into account}} <b>program</b> <b>cyclic</b> behavior and bank row buffer demand. As we show in this work, memory requests go through several phases. In each phase, programs tend to access a single bank most of the time. We exploit this repetitive behavior and improve the concurrency level for memory read and write operations. We do so by assigning idle row buffers to more demanding banks during specific program phases. This improves average memory latency and processor performance by 12. 7 % and 7. 6 % respectively. Categories and Subject Descriptor...|$|R
40|$|In 1994 {{the authors}} of the present paper, with the {{assistance}} of the staff of the Laboratory of Strength Mechanics in Vilnius Gediminas Technical University initiated investigation into defective construction elements. Cyclic fracturing processes were investigated in such construction elements that are subject to geometric uniformity disturbance, i. e. in heavily loaded defective elements. The limit value of the stress intensity factor was determined using the CT specimens. This value defines the threshold for stress intensity below that a crack does not propagate. The accuracy of these results was tested for a compact specimen with a rounded notch. A <b>cyclic</b> loading <b>program</b> was selected and tests were conducted to determine conditions favouring crack appearance in a defective plate. A cast iron plate with natural defects was loaded cyclically and studied until its breakdown. Experimental investigations prove that conditions for crack formation in defective construction elements are only satisfactorily defined by the fracture mechanics criterion Δ K th (stress intensity factor threshold) and the endurance limit of a plane-surface specimen. The stress and strain state in a defective area having an influence on crack appearance was analysed, and the effect of defects and loading conditions on the processes of crack formation and propagation was evaluated. Programmed computations of geometrical parameters qualify the experimental results...|$|R
40|$|On fixed-interval or response-initiated delay {{schedules}} of reinforcement, {{the average}} pause following food presentation {{is proportional to}} the interfood interval. Moreover, when a number of intervals of different durations occur in a <b>programmed</b> <b>cyclic</b> series, postreinforcement pauses track the changes in interval value. What controls the duration of postreinforcement pauses under these conditions? Staddon, Wynne, and Higa (1991), in their linear waiting model, propose control by the preceding interfood interval. Another possibility is that delay to reinforcement, signaled by a key peck and/or stimulus change, determines the subsequent pause. The experiments reported here examined the role of these two possible time markers by studying the performance of pigeons under a chained cyclic fixed-interval procedure. The data support the linear waiting model, but suggest that more than the immediately preceding interfood interval plays a role in temporal control...|$|R
