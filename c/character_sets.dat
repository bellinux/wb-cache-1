935|3809|Public
5|$|A COBOL {{program is}} split into four divisions: the {{identification}} division, the environment division, the data division and the procedure division. The identification division specifies {{the name and}} type of the source element and is where classes and interfaces are specified. The environment division specifies any program features that depend on the system running it, such as files and <b>character</b> <b>sets.</b> The data division is used to declare variables and parameters. The procedure division contains the program's statements. Each division is sub-divided into sections, which {{are made up of}} paragraphs.|$|E
5|$|Ape Escape is a {{platform}} video game, developed by SCE Japan Studio {{and published by}} Sony Computer Entertainment. It was released for the PlayStation in May 1999 in North America, and June 1999 in Japan. The first in the Ape Escape series, the game {{tells the story of}} an ape named Specter who gains enhanced intelligence and a malevolent streak through the use of an experimental helmet. Specter produces an army of apes, which he sends through time in an attempt to rewrite history. Spike, the player <b>character,</b> <b>sets</b> out to capture the apes with the aid of special gadgets.|$|E
5|$|Pokémon Red and Blue allow {{players to}} trade Pokémon between two {{cartridges}} via a Game Link Cable. This method of trading {{must be done}} to fully complete the Pokédex since certain Pokémon will only evolve upon being traded and each of the two games have version-exclusive Pokémon. The Link Cable also makes it possible to battle another player's Pokémon team. When playing Red or Blue on a Game Boy Advance or SP, the standard GBA/SP link cable will not work; players must use the Nintendo Universal Game Link Cable instead. Moreover, the English versions of the games are incompatible with their Japanese counterparts, and such trades will corrupt the save files, as the games use different languages and therefore <b>character</b> <b>sets.</b>|$|E
5000|$|Lotus International <b>Character</b> <b>Set</b> (LICS), a {{very similar}} <b>character</b> <b>set</b> ...|$|R
50|$|The multi-byte <b>character</b> <b>set</b> {{was named}} Bitstream International <b>Character</b> <b>Set</b> (BICS).|$|R
50|$|This <b>character</b> <b>set</b> was {{different}} from the other Brazilian <b>character</b> <b>set,</b> ABICOMP.|$|R
25|$|The entire Esperanto {{alphabet}} {{is part of}} the Latin-3 and Unicode <b>character</b> <b>sets,</b> and {{is included}} in WGL4.|$|E
25|$|In {{computing}} HP Roman is {{a family}} of <b>character</b> <b>sets</b> consisting of HP Roman Extension, HP Roman-8, HP Roman-9 and several variants. Originally introduced by Hewlett-Packard around 1978, revisions and adaptations were published several times up to 1999. The 1985 revisions were later standardized as IBM codepages 1050 and 1051. Supporting many European languages, the <b>character</b> <b>sets</b> were used by various HP workstations, terminals, calculators {{as well as many}} printers, also from third-parties.|$|E
25|$|In the 1997 film Addicted to Love Matthew Broderick's <b>character</b> <b>sets</b> up {{a camera}} obscura in an {{abandoned}} building opposite his ex-girlfriend's apartment.|$|E
5000|$|The basic <b>character</b> <b>set</b> of the C {{programming}} {{language is a}} subset of the ASCII <b>character</b> <b>set</b> that includes nine characters which lie outside the ISO 646 invariant <b>character</b> <b>set.</b> [...] The ANSI C committee invented trigraphs as a way of entering source code using keyboards that support any version of the ISO 646 <b>character</b> <b>set.</b>|$|R
50|$|The Lotus International <b>Character</b> <b>Set</b> (LICS) is a {{proprietary}} single-byte character encoding introduced in 1985 by Lotus Development Corporation. It {{is based on}} the 1983 DEC Multinational <b>Character</b> <b>Set</b> (MCS) for VT220 terminals. As such, LICS is also similar to two other descendants of MCS, the ECMA-94 <b>character</b> <b>set</b> of 1985 and the ISO 8859-1 (Latin-1) <b>character</b> <b>set</b> of 1987.|$|R
50|$|DEC {{supported}} the ANSI standards, especially the ASCII <b>character</b> <b>set,</b> which survives in Unicode and the ISO 8859 <b>character</b> <b>set</b> family. DEC's own Multinational <b>Character</b> <b>Set</b> {{also had a}} large influence on ISO 8859-1 (Latin-1) and, by extension, Unicode.|$|R
25|$|The Samsung Alias 2 {{mobile phone}} {{incorporates}} electronic ink from E Ink into the keypad, {{which allows the}} keypad to change <b>character</b> <b>sets</b> and orientation while in different display modes.|$|E
25|$|Users rarely make {{full use}} of larger <b>character</b> <b>sets</b> in forming passwords. For example, hacking results {{obtained}} from a MySpace phishing scheme in 2006 revealed 34,000 passwords, of which only 8.3% used mixed case, numbers, and symbols.|$|E
25|$|Opera Mini {{can send}} content in bitmap image form if a font {{required}} {{is not available}} on the device, which is useful for indic scripts. Hindi, Bengali {{and a few other}} non-Latin <b>character</b> <b>sets</b> are supported.|$|E
5000|$|A code {{point of}} a coded <b>character</b> <b>set</b> is any legal value in the <b>character</b> <b>set.</b>|$|R
50|$|The Apple II <b>character</b> <b>set</b> is a <b>character</b> <b>set</b> {{developed}} by Apple Inc. for the Apple II.|$|R
5000|$|A coded <b>{{character}}</b> <b>set</b> is a <b>character</b> <b>set</b> {{in which}} each character corresponds to a unique number.|$|R
25|$|СТ РК 1048—2002 was {{confirmed}} in 2002, {{well after the}} introduction of different Windows <b>character</b> <b>sets.</b> Some Internet resources in part used the government information agency QazAqparat before the encoding of this standard. Today the encoding UTF-8 is being accepted.|$|E
25|$|In {{addition}} to the UK version, several variants of the chip existed with slightly different <b>character</b> <b>sets</b> for particular localizations and/or languages. These had part numbers SAA5051 (German), SAA5052 (Swedish), SAA5053 (Italian), SAA5054 (Belgian), SAA5055 (U.S. ASCII), SAA5056 (Hebrew) and SAA5057 (Cyrillic).|$|E
25|$|Han {{unification}} is {{an effort}} by the authors of Unicode and the Universal Character Set to map multiple <b>character</b> <b>sets</b> of the so-called CJK languages into a single set of unified characters. Han characters are a common feature of written Chinese (hanzi), Japanese (kanji), and Korean (hanja).|$|E
50|$|There's no {{specific}} Locking Shift <b>Character</b> <b>Set</b> for the Spanish language. Uses the default Basic <b>Character</b> <b>Set.</b>|$|R
5000|$|Code page 1021 (CH7DEC), a {{computer}} <b>character</b> <b>set,</b> the Swiss variant of DEC's National Replacement <b>Character</b> <b>Set</b> (NRCS) ...|$|R
50|$|There {{were several}} {{variations}} of display code, notably the 63-character <b>character</b> <b>set,</b> and the 64-character <b>character</b> <b>set.</b> There were also 'CDC graphic' and 'ASCII graphic' variants {{of both the}} 63- and 64-character sets. The choice between 63- or 64-character <b>character</b> <b>set,</b> and between CDC or ASCII graphic was site-selectable. Generally, early CDC customers started out with the 63-character <b>character</b> <b>set,</b> and CDC graphic print trains on their line printers. As time-sharing became prevalent, almost all sites used the ASCII variant - so that line printer output would match interactive usage. Later CDC customers {{were also more likely}} to use the 64-character <b>character</b> <b>set.</b>|$|R
25|$|These {{compatibility}} characters (excluding {{the twelve}} unified ideographs in the CJK Compatibility Ideographs block) are included for compatibility with legacy text handling systems and other legacy <b>character</b> <b>sets.</b> They include forms of characters for vertical text layout and rich text characters that Unicode recommends handling through other means.|$|E
25|$|Someone {{proposed}} disunification {{of plain}} Ii and capital letter dotless I and small letter I with dot above {{to make the}} casing more consistent.. This {{was rejected by the}} UTC because it would corrupt mapping from <b>character</b> <b>sets</b> with dotted and dotless I and corrupt data in these languages.|$|E
25|$|From the 1950s, Simplified Chinese {{characters}} were adopted in mainland China {{and later in}} Singapore and Malaysia, while Chinese communities in Hong Kong, Macau, Taiwan and overseas countries continue to use Traditional Chinese characters. Although significant differences exist between the two <b>character</b> <b>sets,</b> they are largely mutually intelligible.|$|E
5000|$|There is an {{analogous}} <b>character</b> <b>set</b> known as GB/T 12345, {{closely related to}} GB2312, but with traditional character forms replacing simplified forms, and some extra 62 supplemental characters. [...] GB-encoded fonts often come in pairs, one with the GB 2312 (simplified) <b>character</b> <b>set</b> {{and the other with}} the GB/T 12345 (traditional) <b>character</b> <b>set.</b>|$|R
50|$|Example: The Latin <b>character</b> <b>set</b> {{is used by}} English {{and most}} European languages, though the Greek <b>character</b> <b>set</b> is used only by the Greek language.|$|R
50|$|The OpenType Std {{version of}} the {{typeface}} adds small caps to the family and updates the <b>character</b> <b>set</b> to support the Adobe Western 2 <b>character</b> <b>set.</b>|$|R
25|$|In {{computer}} programming, the asterisk (as in 5*2) {{is still}} the most common notation. This {{is due to the fact}} that most computers historically were limited to small <b>character</b> <b>sets</b> (such as ASCII and EBCDIC) that lacked a multiplication sign (such as ⋅ or ×), while the asterisk appeared on every keyboard. This usage originated in the FORTRAN programming language.|$|E
25|$|CP/M {{used the}} 7-bit ASCII set. The other 128 {{characters}} {{made possible by}} the 8-bit byte were not standardized. For example, one Kaypro used them for Greek characters, and Osborne machines used the 8th bit set to indicate an underlined character. WordStar used the 8th bit as an end-of-word marker. International CP/M systems most commonly used the ISO 646 norm for localized <b>character</b> <b>sets,</b> replacing certain ASCII characters with localized characters rather than adding them beyond the 7-bit boundary.|$|E
25|$|The use {{of these}} custom <b>character</b> <b>sets</b> was {{generally}} incompatible between manufacturers. Unless a caller was using terminal emulation software written for, and running on, {{the same type of}} system as the BBS, the session would simply fall back to simple ASCII output. For example, a Commodore 64 user calling an Atari BBS would use ASCII rather than the machine's native character set. As time progressed, most terminal programs began using the ANSI standard, but could use their native character set if it was available.|$|E
50|$|The kanji set and {{the graphic}} <b>character</b> <b>set</b> for Latin <b>characters</b> can be used {{together}} as specified in JIS X 0208 (Latin characters + 7-bit code for kanji and the Latin characters + 8-bit code for kanji). The kanji <b>set,</b> graphic <b>character</b> <b>set</b> for Latin <b>characters,</b> and JIS X 0201’s graphic <b>character</b> <b>set</b> for katakana can be used together as specified in JIS X 0208 (the shift-coded character set; i.e. Shift JIS). The kanji <b>set</b> and graphic <b>character</b> <b>set</b> for katakana can be used together in EUC-JP.|$|R
50|$|In computing, luit {{is a tool}} used to {{translate}} the <b>character</b> <b>set</b> of a program so that its output can be displayed correctly on a terminal emulator that uses a different <b>character</b> <b>set.</b> Whereas iconv converts the <b>character</b> <b>set</b> of strings or text files at rest, luit converts the input and output of programs running interactively.|$|R
50|$|Under Adobe's development, the {{font family}} {{supports}} the ISO-Adobe <b>character</b> <b>set</b> for the PostScript version. In OpenType Std version, it supports the Adobe Western 2 <b>character</b> <b>set.</b>|$|R
