20|43|Public
25|$|Timestamp: (32 bits) Used {{to enable}} the {{receiver}} to play back the received samples at appropriate intervals. When several media streams are present, the timestamps are independent in each stream, {{and may not be}} relied upon for media synchronization. The granularity of the timing is application specific. For example, an audio application that samples data once every 125µs (8kHz, a common sample rate in digital telephony) would use that value as its <b>clock</b> <b>resolution.</b> The clock granularity is one of the details that is specified in the RTP profile for an application.|$|E
50|$|There is also {{at least}} one case where the term nanokernel is used to refer not to a small kernel, but one that {{supports}} a nanosecond <b>clock</b> <b>resolution.</b>|$|E
5000|$|Implementers of this {{algorithm}} on platforms {{lacking the}} <b>clock</b> <b>resolution</b> necessary {{to add a}} single token to the bucket every [...] seconds {{may want to consider}} an alternative formulation. Given the ability to update the token bucket every S milliseconds, the number of tokens to add every S milliseconds = [...]|$|E
5000|$|There {{are limits}} to the maximum {{resolution}} of the dual-slope integrating ADC. It {{is not possible to}} increase the resolution of the basic dual-slope ADC to arbitrarily high values by using longer measurement times or faster <b>clocks.</b> <b>Resolution</b> is limited by: ...|$|R
5000|$|The VIDC1 {{can use a}} {{color depth}} of 1, 2, 4 or eight bits per color, from {{monochrome}} to 4 to 16 to 256 colors (the VIDC20 can go up to 16 million colors). Also included {{is a very small}} color lookup table, just 16 12-bit words, (4096 colors, in 4 bit mode). The 12 bits were split in three 4-bit RGB values, with a 4-bit high speed D-A converter {{for each of the three}} primary colors. Its single [...] "sprite" [...] was used for a hardware mouse pointer, which could have three different colors (two bit per pixel, including transparent). The timing generator was fully programmable, and could be clocked with an 8 to 24 MHz <b>clock.</b> <b>Resolutions</b> that could be supported were 1024x1024 in monochrome, 640x512 in 16 colors, or 640x256 in 256 colors.|$|R
50|$|OTI077 - Enhanced {{version of}} the OTI067. Includes support for 1MB and up to 65MHz dot <b>clock.</b> Capable of <b>resolutions</b> up to 1024x768x256 colors in non-interlaced mode, and up to 1280x1024x16 colors interlaced.|$|R
5000|$|The onboard {{sequencer}} {{is capable}} of storing up to 60,000 notes of recorded musical performance and has a <b>clock</b> <b>resolution</b> of 96 parts per quarter note. [...] It's capable of storing up to 100 patterns and 1 song {{at a time in}} memory, but can also load and play music sequences directly from floppy disk using the built-in floppy disk drive.|$|E
5000|$|Timestamp: (32 bits) Used {{to enable}} the {{receiver}} to play back the received samples at appropriate intervals. When several media streams are present, the timestamps are independent in each stream, {{and may not be}} relied upon for media synchronization. The granularity of the timing is application specific. For example, an audio application that samples data once every 125 µs (8 kHz, a common sample rate in digital telephony) would use that value as its <b>clock</b> <b>resolution.</b> The clock granularity is one of the details that is specified in the RTP profile for an application.|$|E
40|$|Abstract—In {{this paper}} we present an {{algorithm}} that measures the round trip times of IEEE 802. 11 MAC packets {{in order to}} trilaterate WLAN nodes. We show that if we use packet sequences (e. g., RTS, CTS, DATA and ACK) instead of packet pairs (e. g., DATA and ACK), the TOA measurements can be implemented more easily and a higher observation rate can be achieved. In addition, the receiver and any listening third node can measure the round trip times. We present the open source software “Goodtry ” that implements this algorithm and overcomes the low <b>clock</b> <b>resolution</b> and other implementation constraints of off-the-shelf IEEE 802. 11 cards. Experimental results show that our software-based trilateration has an accuracy of about four meters. I...|$|E
40|$|When tuning {{operating}} system and network code, profiling programs, analyzing message interarrival times, and accurately measuring device characteristics, a high <b>resolution</b> <b>clock</b> is often indispensable, as one cannot measure service time distributions without one. This note describes a microsecond clock that we {{designed and built}} for Sun 3 and Sun 4 workstations 1. One can measure average service times without a high <b>resolution</b> <b>clock.</b> This paper explains how to measure average times with high precision {{in the absence of}} such a clock. We pose and answer the question: "how many measurements are needed to report timing data to three significant digits?" 1. Introduction- Who Need...|$|R
50|$|Just as a TDC may use {{interpolation}} to get finer {{than one}} <b>clock</b> period <b>resolution,</b> a delay generator may use similar techniques. The Hewlett-Packard 5359A High Resolution Time Synthesizer provides delays of 0 to 160 ms, has an accuracy of 1 ns, and achieves a typical jitter of 100 ps. The design uses a triggered phase-locked oscillator that runs at 200 MHz. Interpolation {{is done with}} a ramp, an 8-bit digital-to-analog converter, and a comparator. The resolution is about 45 ps.|$|R
5000|$|The {{resolution}} of the dual-slope integrating ADC is determined primarily by {{the length of the}} run-down period and by the time measurement resolution (i.e., the frequency of the controller's <b>clock).</b> The required <b>resolution</b> (in number of bits) dictates the minimum length of the run-down period for a full-scale input (...) : ...|$|R
40|$|The MINIX {{operating}} system was extended with real-time services, ranging from A/D drivers to new scheduling algorithms and statistics collection. A testbed was constructed to tests several sensor replication techniques {{in order to}} implement and verify several robust sensing algorithms. As a result, new services enhancing fault tolerance for replicated sensors were also provided within the kernel. The resulting OS offers new features such as real-time task management (for both periodic or aperiodic tasks), <b>clock</b> <b>resolution</b> handling, and sensor replication manipulation. To obtain {{a copy of this}} report please fill in your name and address and return this page to: Infoteca Departamento de Computación - FCEN Pabellón 1 - Planta Baja - Ciudad Universitaria (1428) Buenos Aires - Argentina TEL/FAX: 54 (11) 4783 - 0729 e-mail: infoteca@dc. uba. ar You can also get a copy by anonymous ftp to: zorzal. dc. uba. ar/pub/tr or visiting our web: [URL]...|$|E
40|$|A {{computer}} program is described which effectively eliminates the misgivings of the DOS system clock in PC/AT-class computers. RighTime is a small, sophisticated memory-resident program that automatically corrects both the DOS system clock and the hardware 'CMOS' {{real time clock}} (RTC) in real time. RighTime learns what corrections are required without operator interaction beyond the occasional accurate time set. Both warm (power on) and cool (power off) errors are corrected, usually yielding better than one part per million accuracy in the typical desktop computer with no additional hardware, and RighTime increases the system <b>clock</b> <b>resolution</b> from approximately 0. 0549 second to 0. 01 second. Program tools are also available which allow visualization of RighTime's actions, verification of its performance, display of its history log, and which provide data for graphing of the system clock behavior. The program has found application {{in a wide variety}} of industries, including astronomy, satellite tracking, communications, broadcasting, transportation, public utilities, manufacturing, medicine, and the military...|$|E
40|$|Abstract—This report {{describes}} our ongoing {{work on a}} new end-to-end available-bandwidth measurement tool: FEAT (Fish-Eye Availablebandwidth Tool). FEAT {{features a}} new dynamic pattern of probes called a Fisheye Stream. One fisheye stream covers a range of packet probing rates. A fisheye stream consists of a focus region, where the probing rates are sampled more frequently {{and the number of}} packets used at each rate is larger. This creates a fisheye effect that the focus region enables an easily identified “turning point ” for accurate measurements. When the dynamic available bandwidth is outside the region, the surrounding regions enable the tool to automatically “refocus”. Fisheye streams offer several advantages over current probing schemes that are based on packet pairs, packet trains, or packet chirps. FEAT is also fast, nearly nonintrusive, and <b>clock</b> <b>resolution</b> insensitive. Experiments show that FEAT provides accurate estimations of the available bandwidth with low overhead compared to the existing techniques. Keyword—available bandwidth, measurement, fisheye stream...|$|E
40|$|The {{development}} of an ultrasonic plethysmograph based on the transit time measurement principle is reported, which meets the space-imposed requirements for evaluating cardiovascular deconditioning. It consists of a pulse generator, pulse receiver amplifier, voltage comparator, synchronous pulse generator, elapsed time counter, and transmit and receive piezoelectric crystals resonant at 2 MHz and of 3 mm diameter. The transit time for an ultrasonic pulse to propagate across a limb cross section is computed in a digital fashion using a 32 MHz <b>clock,</b> and <b>resolution</b> is 0. 049 mm with the range being approximately 200 mm. Experimental results regarding dynamic system response were found comparable in both accuracy and sensitivity to those of a Whitney strain gage using a 50 torr venous occlusion...|$|R
40|$|AbstractChronolog(MC) is an {{extension}} of logic programming based on a linear-time temporal logic with multiple granularity of time calledTLC. A Chronolog(MC) program consists of a clock definition, a clock assignment and a program body. Each predicate symbol appearing in the program body is associated with a local clock through the clock definition and assignment. This paper investigates the logical basis of the language, presents a <b>clocked</b> temporal <b>resolution</b> where time-matching is essential, and in particular proposes three algorithms for time-matching. The paper also discusses the declarative semantics of Chronolog(MC) programs in terms of clocked temporal Herbrand models. It is shown that Chronolog(MC) programs also satisfy the minimum model semantics. The language can be used to model a wide range of simulation systems and other relevant tasks where the notion of dynamic change is central...|$|R
40|$|The {{development}} of new efficient algorithms or implemen-tations requires the validation of such codes {{as well as their}} timing. We need to measure accurately the execution time of a program so we can compare one algorithm with an-other. In this paper we present a framework we have de-vised which allows for accurate timings even with low res-olution clocks. We have used this framework for the devel-opment of efficient numerical codes. KEY WORDS Benchmarking templates, low <b>resolution</b> <b>clocks.</b> ...|$|R
40|$|Abstract. Keystroke dynamics—the {{analysis}} of individuals ’ distinctive typing rhythms—has been proposed as a biometric to discriminate legitimate users from impostors (whether insiders or external attackers). Anomaly detectors have reportedly performed well at this discrimination task, {{but there is}} room for improvement. Detector performance might be constrained by the widespread use of comparatively low-resolution clocks (typically 10 – 15 milliseconds). This paper investigates the effect of <b>clock</b> <b>resolution</b> on detector performance. Using a high-resolution clock, we collected keystroke timestamps from 51 subjects typing 400 passwords each. We derived the timestamps that would have been generated by lower-resolution clocks. Using these data, we evaluated three types of detectors from the keystroke-dynamics literature, finding that detector performance is slightly worse at typical clock resolutions than at higher ones (e. g., a 4. 2 % increase in equal-error rate). None of the detectors achieved a practically useful level of performance, but we suggest opportunities for progress through additional, controlled experimentation. Keywords: Anomaly detection; Insider-attack detection; Keystroke dynamics; Digital biometrics...|$|E
40|$|This thesis explores {{issues related}} to the routing of {{messages}} in a k - aryn - cube multiprocessor interconnection network. By using a distributed algorithm that identifies paths for particular inter-processor communication flows, the capacities of the interconnecting links can be shared in a predictable manner, blocking and congestion can be reduced, and hot-spots avoided. The paths that are identified are not necessarily the shortest ones possible. The nodes in the routing fabric are autonomous - i. e. they respond to incoming messages independently and each maintains its own routing table. The thesis describes the bandwidth reservation algorithm in detail and proposes an implementation which is then simulated with a <b>clock</b> <b>resolution</b> of one cycle per unit of data communicated. The livelock and deadlock-freedom of the implementation is justified. Simulation measurements demonstrate that the set-up, communication and close-down performance of each path is as expected, that the algorithm performs correctly under various traffic models, and that the technique compares favourably with a Minimal Adaptive Routing scheme under certain conditions...|$|E
40|$|Wireless {{local area}} {{networks}} {{have been designed}} for wireless communication. Frames are acknowledged (ACKed) after a short and predefined MAC idle time. The MAC idle time varies with i) the physical distance between stations, caused by the delay of wireless signal propagation, and ii) the time to detect the ACK at the local station, which varies with the signal strength of the incoming ACK. We present CAESAR, CArriEr Sense-bAsed Ranging, that combines time of flight and signal-to-noise ratio measurements to calculate the distance between two stations. CAESAR measures the distance by estimating the MAC idle time in a data/ACK communication at a 44 MHz <b>clock</b> <b>resolution</b> and the ACK detection time on a per-frame basis. CAESAR is a software-based solution that is entirely implemented at the transmitter and it requires no protocol modifications and only a limited calibration in links with multi-path propagation. We implement CAESAR on commodity hardware and conduct extensive experiments both in controlled network conditions and dynamic radio environments. Our measurements confirm {{the accuracy of the}} solution and show the capability to track the distance to WLAN smartphones at pedestrian speeds. 1...|$|E
40|$|Clocked {{temporal}} logic programming(CTLP) {{is an extension}} of logic programming based on a clocked {{temporal logic}}(CTL). In CTL, predicates are associated with local clocks. Local clocks can be used to model multiple granularity of time, thus the resulting temporal logic programming language, called Chronolog(MC), has a stronger modeling power. This paper discusses the logical basis of the language and outlines its operational semantics. Also, a parallel execution model for Chronolog(MC) programs is outlined. An application of CTLP to distributed computations is discussed. Keywords Temporal logic, Logic programming, <b>Clocks,</b> Temporal <b>resolution,</b> Parallel execution. 1 Introduction An important activity in computer science is the invention, analysis and application of formal logics which are designed to specify, reason about and represent algorithms, programs and systems. For instance, temporal logic has been widely used as a formalism for program specification and verification [12, 3], r [...] ...|$|R
40|$|Chronolog(MC) is an {{extension}} of logic programming based on a clocked temporal logic (CTL), a linear-time temporal logic with multiple granularity of time. A Chronolog(MC) program consists of a clock definition, a clock assignment and a program body, and each predicate symbol appearing in the program body is associated with a local clock through the clock definition and assignment. This paper investigates the logical basis of the language, presents a <b>clocked</b> temporal <b>resolution</b> where time-matching is essential, and in particular proposes three algorithms for time-matching. The paper also discusses the declarative semantics for Chronolog(MC) programs in terms of clocked temporal Herbrand models. It is shown that Chronolog(MC) programs also satisfy the minimum model semantics. The language can be used to model a wide range of simulation systems and other relevant tasks where the notion of dynamic change is central...|$|R
40|$|We {{present and}} {{implement}} a non-destructive detection scheme for the transition probability readout of an optical lattice clock. The scheme relies on a differential heterodyne measurement of the dispersive properties of lattice-trapped atoms enhanced by a high finesse cavity. By design, this scheme offers a 1 st order rejection of the technical noise sources, an enhanced signal-to-noise ratio, and an homogeneous atom-cavity coupling. We theoretically show that this scheme is optimal {{with respect to the}} photon shot noise limit. We experimentally realize this detection scheme in an operational strontium optical lattice <b>clock.</b> The <b>resolution</b> is on the order of a few atoms with a photon scattering rate low enough to keep the atoms trapped after detection. This scheme opens the door to various different interrogations protocols, which reduce the frequency instability, including atom recycling, zero-dead time clocks with a fast repetition rate, and sub quantum projection noise frequency stability...|$|R
40|$|International audienceTraditional {{measurement}} {{tools are}} {{not suitable for}} fine-grain performance evaluation of 802. 11 wireless networks. To improve this situation, we have developed Interarrival Histograms, a method for measuring transmission delays based on gathering statistics of interarrival intervals at a receiving station. By measuring {{a sufficient number of}} interarrival interval samples with a <b>clock</b> <b>resolution</b> of 1 μs, the precision of estimating the mean transmission delay is well under one microsecond. Unlike other proposals, it does not require expensive custom-made cards, because it uses commercially available equipment. It allows flexible measurements not only of wireless cards, but also of access points, which cannot be done with other proposed methods, unless one can instrument the access point kernel. In this paper, we describe the principles of the proposed method, derive the estimation error of measurements, and experimentally demonstrate its precision by applying it to the 100 Mb/s Ethernet. To illustrate the cases in which the method can help analyzing the complex behavior of 802. 11 networks, we present measurements of several commercially available access points and wireless cards to show some anomalies and differences with the standard...|$|E
40|$|Abstract. Video {{transmission}} with general-purpose PCs poses {{a number}} of requirements that radically {{differ from those of}} high-end dedicated video servers. We analyze the scenario of an Ethernet local area network in which {{a number of}} PCs are transmitting video streams, while other TCP/IP applications are also running concurrently. Our findings show that since the operating system <b>clock</b> <b>resolution</b> cannot cope with the transmission timing requirements the following holds: if the video transmission is performed with exact timing accuracy to maintain a constant rate then CPU load grows to 100 %, thus blocking the PC for other user applications; on the other hand, if transmission is performed in a bursty manner, i. e. with sleep system calls, then CPU load decreases dramatically but the increased burstiness of the video stream has a negative impact on network performance (for example, capture effect in the Ethernet). Furthermore, the impact of video transmission over the rest of TCP/IP applications running on the same network depends heavily on the packet size. We provide an integrated analysis of operating system and network parameters to achieve video broadcasting while preserving timing requirements and minimizing the impact on other applications...|$|E
40|$|This {{paper is}} a first step toward the goal of {{evaluating}} the measurement accuracy of the interdeparture times (IDTs) provided by software traffic generators. To provide evidences of the proposed methodology, in this paper, we focus our attention on the experimental characterization of the internal generation cycle of a well-known, open source generator, namely, distributed internet traffic generator. We tested the traffic generator for different systems, and under the best possible conditions, i. e., with the minimum system load. The resulting performance may be seen as the ideal limit the generators can tend to. In this paper, we present the rationale for the activity, the underlying methodology and a set of tests aimed at highlighting the relevance of the <b>clock</b> <b>resolution</b> in the accuracy of IDT. In addition, we present a statistical model for the IDT of packets. The model allows to capture the effects of the various phenomena that affect this important generation parameter. We have also performed a set of experiments with another traffic generator to show the generalizability of the results. These results show that the contributions proposed in this paper are general and valid for a wide set of software-based traffic generators...|$|E
40|$|Elementary particles, i. e. {{the basic}} {{constituents}} of nature, {{are characterized by}} quantum recurrences in time. The flow of time of every physical system can be therefore decomposed in elementary cycles of time. This allows us to enforce the local nature of relativistic time, yielding interesting unified descriptions of fundamental aspects of modern physics, as shown in recent publications. Every particle {{can be regarded as}} a reference <b>clock</b> with time <b>resolution</b> of the order of the Compton time particle, many orders of magnitude more accurate than the atomic clocks. Here we report basic implications about the resulting notion of time...|$|R
50|$|The counter implementation's {{accuracy}} {{is limited by}} the clock frequency. If time is measured by whole counts, then the resolution is limited to the clock period. For example, a 10 MHz <b>clock</b> has a <b>resolution</b> of 100 ns. To get resolution finer than a clock period, there are time interpolation circuits. These circuits measure the fraction of a clock period: that is, the time between a clock event and the event being measured. The interpolation circuits often require a significant amount of time to perform their function; consequently, the TDC needs a quiet interval before the next measurement.|$|R
40|$|A {{frequency}} counter measures the input frequency $\bar{\nu}$ averaged over a suitable time $\tau$, versus the reference <b>clock.</b> High <b>resolution</b> {{is achieved by}} interpolating the clock signal. Further increased resolution is obtained by averaging multiple frequency measurements highly overlapped. In the presence of additive white noise or white phase noise, the square uncertainty improves from $\smash{\sigma^ 2 _\nu\propto 1 /\tau^ 2 }$ to $\smash{\sigma^ 2 _\nu\propto 1 /\tau^ 3 }$. Surprisingly, when a file of contiguous data is fed into the formula of the two-sample (Allan) variance $\smash{\sigma^ 2 _y(\tau) =\mathbb{E}\{\frac 12 (\bar{y}_{k+ 1 }-\bar{y}_k) ^ 2 \}}$ of the fractional frequency fluctuation $y$, {{the result is the}} \emph{modified} Allan variance mod $\sigma^ 2 _y(\tau) $. But if a sufficient number of contiguous measures are averaged {{in order to get a}} longer $\tau$ and the data are fed into the same formula, the results is the (non-modified) Allan variance. Of course interpretation mistakes are around the corner if the counter internal process is not well understood. Comment: 14 pages, 5 figures, 1 table, 18 reference...|$|R
40|$|The {{ability to}} measure {{location}} using {{time of flight}} in IEEE 802. 11 networks is impeded by the standard <b>clock</b> <b>resolution,</b> imprecise synchronization of the 802. 11 protocol, and the inaccuracy of available clocks. To achieve real-time location with accuracy goals of a few meters, we derive new consensus synchronization techniques for free-running clocks. Using consensus synchronization, we improve existing time of arrival (TOA) techniques and introduce new time difference of arrival (TDOA) techniques. With this common basis, we show how TOA is theoretically superior to TDOA. Using TOA measurements, we can locate wireless nodes that participate in the location system, and using TDOA measurements, we can locate nodes that do not participate. We demonstrate applications using off-the-shelf 802. 11 hardware that can determine location to within 3 m using simple, existing optimization methods. The synchronization techniques extend existing ones providing distributed synchronization for free-running clocks to cases where send times cannot be controlled and adjusted precisely, as in 802. 11 networks. These location and synchronization techniques may be applied to transmitting wireless nodes using any communication protocol where cooperating nodes can produce send and receive timestamps...|$|E
40|$|The {{paper is}} a first step towards the goal of {{evaluating}} the measurement accuracy of the inter–departure times (IDT) provided by software traffic generators. To provide evidences of the proposed methodology, in this paper we focus our attention on the experimental characterization of the internal generation cycle of a well–known, open source generator, namely D–ITG. We tested the traffic generator for different systems, and under the best possible conditions, i. e. with the minimum system load. The resulting performance may be seen as the ideal limit the generators can tend to. In this paper, we present the rationale for the activity, the underlying methodology and a set of tests aimed at highlighting the relevance of the <b>clock</b> <b>resolution</b> in the accuracy of Inter Departure Times (IDT). Moreover, we present a statistical model for the IDT of packets. The model allows to capture the effects of the various phenomena that affect this important generation parameter. We have performed also a set of experiments with another traffic generator to show the generalizability of the results. These results show that the contributions proposed in this paper are general and valid for a wide set of software-based traffic generators...|$|E
40|$|Abstract — This {{paper is}} a first step toward the goal of evaluat-ing the {{measurement}} accuracy of the interdeparture times (IDTs) provided by software traffic generators. To provide evidences of the proposed methodology, in this paper, we focus our attention on the experimental characterization of the internal generation cycle of a well-known, open source generator, namely, distrib-uted internet traffic generator. We tested the traffic generator for different systems, and under the best possible conditions, i. e., with the minimum system load. The resulting performance may be seen as the ideal limit the generators can tend to. In this paper, we present the rationale for the activity, the underlying methodology and a set of tests aimed at highlighting the relevance of the <b>clock</b> <b>resolution</b> in the accuracy of IDT. In addition, we present a statistical model for the IDT of packets. The model allows to capture the effects of the various phenomena that affect this important generation parameter. We have also performed a set of experiments with another traffic generator to show the generalizability of the results. These results show that the contributions proposed in this paper are general and valid for a wide set of software-based traffic generators. Index Terms — Interdeparture time (IDT), traffic generator, uncertainty...|$|E
40|$|Clock {{synchronization}} among remote machines {{is becoming}} important in commercial and instrumentation areas. Many clock adjustment and control protocols are available. The obtained precision, however, is {{disturbed by the}} unpredictable delays over the network. This work proposes {{a new approach to}} estimate time among machines interconnected by computer networks, which minimizes the disturbance introduced by the packets travel time. The methodology employs a high <b>resolution</b> <b>clock</b> and a stochastic filter to reduce the error in time measurement carried introduced by the network. As result, we obtained an increase of time estimation accuracy close to three orders of magnitude, in comparison with traditional estimation methods...|$|R
50|$|The Z80 machine cycles are sequenced by an {{internal}} state machine which builds each M-cycle out of 3, 4, 5 or 6 T-cycles depending on context. This avoids cumbersome asynchronous logic {{and makes the}} control signals behave consistently at {{a wide range of}} clock frequencies. It also means that a higher frequency crystal must be used than without this subdivision of machine cycles (approximately 2-3 times higher). It does not imply tighter requirements on memory access times, since a high <b>resolution</b> <b>clock</b> allows more precise control of memory timings and so memory can be active in parallel with the CPU to a greater extent, allowing more efficient use of available memory bandwidth.|$|R
40|$|Abstract 1 : The ongoing {{revision}} of the POSIX. 13 standard —real-time profiles for portable operating system interfaces— proposes adding new services to the Minimum Real-Time System Profile that are considered useful to the small embedded applications to which this profile is targeted. Concerns have been raised that these services may introduce too much overhead or {{may be difficult to}} implement. In this paper we evaluate the implementation of some of these new services in our MaRTE operating system. The implemented services are the monotonic <b>clock,</b> a high <b>resolution</b> sleep operation with specifiable clock, execution-time clock and timers, the sporadic server scheduling policy, and the timed mutex lock operation. We show that the complexity of these implementations is small, and the overheads introduced by the new services are fully acceptable. 1...|$|R
