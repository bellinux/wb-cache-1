208|134|Public
2500|$|A binary {{symmetric}} channel (BSC) with <b>crossover</b> <b>probability</b> p is {{a binary}} input, binary output channel that flips the input bit with probability p. The BSC has {{a capacity of}} [...] bits per channel use, where [...] is the binary entropy function to the base-2 logarithm: ...|$|E
5000|$|... as {{compared}} to the capacity [...] of the binary symmetric channel with <b>crossover</b> <b>probability</b> p.|$|E
5000|$|Compute {{smoothed}} probabilities {{based on}} other information (i.e. noise variance for AWGN, bit <b>crossover</b> <b>probability</b> for binary symmetric channel) ...|$|E
40|$|This paper derives {{truncated}} union bounds on the {{a priori}} index <b>crossover</b> <b>probabilities</b> p(jji) that result when n-bit data index i is convolutionally encoded, transmitted over a noisy channel, and decoded with the Viterbi algorithm, giving received index j. The bounds are derived with a modified transfer function technique, using n-stage state transition matrices with symbolic labels. The technique is easily automated with commercial symbolic algebra packages. Bounds are obtained for convolutional and trellis-coded modulation (TCM) codes, over binary symmetric and additive white Gaussian noise channels. A joint source channel coding example {{demonstrates that the}} bounds on p(jji) developed in this paper can give a 1 to 3 dB accuracy improvement in end-to-end signal-to-noise ratio (SNR) predictions, when compared to predictions based on bounds on the delivered bit error probability P b. Index Terms [...] - Convolutional coding, index <b>crossover</b> <b>probabilities,</b> joint source channel coding, tr [...] ...|$|R
30|$|In this paper, a new {{adaptive}} distributed video coder {{is proposed}} based on received MVs from the DVC decoder side. In the proposed encoder, the PSI is reconstructed using reference key frames and MVs without motion estimation. The correct number and positions of SI errors can be computed on the encoder side using the PSI because the PSI {{is the same}} as the SI in the decoder. Based on this error information, slice partitions can be determined by maintaining a fixed per-slice error rate and by generating a coded map and transmitting it to the decoder side. The proposed decoder can then set accurate <b>crossover</b> <b>probabilities</b> for the variable nodes according to the received coded map. The proposed method improves the performance of a channel coder by providing accurate <b>crossover</b> <b>probabilities.</b> It also leads to reduce coding delays in the decoder by eliminating iterative feedbacks. However, a back channel is still needed for the proposed method. In the future, the authors will focus on a new framework to remove the back channel.|$|R
30|$|Initialize <b>probability</b> of <b>crossover</b> p_c, <b>probability</b> of {{mutation}} p_m, {{upper limit}} of iteration counter M_ 0, population size N.|$|R
50|$|It {{is assumed}} that 0 ≤ p ≤ 1/2. If p > 1/2, then the {{receiver}} can swap the output (interpret 1 when it sees 0, and vice versa) and obtain an equivalent channel with <b>crossover</b> <b>probability</b> 1 &minus; p ≤ 1/2.|$|E
5000|$|A binary {{symmetric}} channel (BSC) with <b>crossover</b> <b>probability</b> p is {{a binary}} input, binary output channel that flips the input bit with probability p. The BSC has {{a capacity of}} [...] bits per channel use, where [...] is the binary entropy function to the base-2 logarithm: ...|$|E
5000|$|A binary {{symmetric}} channel with <b>crossover</b> <b>probability</b> p {{denoted by}} , is a channel with binary input and binary output and {{probability of error}} p; that is, if X is the transmitted random variable and Y the received variable, then the channel {{is characterized by the}} conditional probabilities ...|$|E
40|$|A {{theoretical}} and experimental analysis {{is made of}} the effects of self-adaptation in a simple evolving system. Specifically, we consider the effects of coding the mutation and <b>crossover</b> <b>probabilities</b> of a genetic algorithm evolving in certain model fitness landscapes. The resultant genotype-phenotype mapping is degenerate, there being no direct selective advantage for one probability versus another. We show that the action of mutation and crossover breaks this degeneracy leading to an induced symmetry breaking among the genotypic synonyms. We demonstrate that this induced symmetry breaking allows the system to self-adapt in a time dependent environment. Comment: LaTeX source, 16 p., please email hwael or stephens for figure...|$|R
40|$|Abstract Pedigrees are {{directed}} acyclic graphs that represent ancestral relationships between individuals in a population. Based on a schematic recombination process, we describe two simple Markov models for sequences evolving on pedigrees—Model R (recombinations without mutations) and Model RM (recombinations with mutations). For these models, we ask an identifiability question: {{is it possible}} to construct a pedigree from the joint probability distribution of extant sequences? We present partial identifiability results for general pedigrees: we show that when the <b>crossover</b> <b>probabilities</b> are sufficiently small, certain spanning subgraph sequences can be counted from the joint distribution of extant sequences. We demonstrate how pedigrees that earlier seemed difficult to distinguish are distinguished by counting their spanning subgraph sequences...|$|R
40|$|Abstract. Study the {{optimization}} of aero-engine PID (Proportional-Integral-Derivative) controller parameters. In {{order to}} improve the tuning accuracy on aero-engine PID control parameters for the optimal solution, this paper presents a genetic algorithm-based PID parameter tuning method. Because the choice of <b>crossover</b> and mutation <b>probabilities</b> in genetic algorithm {{have a significant impact}} on the convergence speed and stability of the control system, genetic algorithm is adopted of which the <b>crossover</b> and mutation <b>probability</b> can automatically change with the fitness. Simulation results show that after variable <b>crossover</b> and mutation <b>probability</b> adaptive genetic algorithm to optimize PID control parameters, the average convergence algebra is significantly reduced and the overall control performance of the system is better. 1...|$|R
5000|$|Let [...] {{designate}} a candidate solution (agent) in the population. [...] {{is called the}} <b>crossover</b> <b>probability.</b> Let [...] be called the differential weight. Both these parameters are chosen by the practitioner along with the population size [...] (see below). The basic DE algorithm can then be described as follows: ...|$|E
50|$|It {{is worth}} tuning {{parameters}} {{such as the}} mutation probability, <b>crossover</b> <b>probability</b> and population size to find reasonable settings for the problem class being worked on. A very small mutation rate may lead to genetic drift (which is non-ergodic in nature). A recombination rate that is too high may lead to premature convergence of the genetic algorithm. A mutation rate that is too high may lead to loss of good solutions, unless elitist selection is employed.|$|E
30|$|Equation (10) {{shows that}} a larger fixed <b>crossover</b> <b>probability</b> is given when the fitness value of the cross parent is small. And the greater the fitness of the two chromosomes, the smaller the <b>crossover</b> <b>probability</b> is. The {{adjustment}} of the mutation probability in Eq. (11) {{is consistent with the}} <b>crossover</b> <b>probability.</b>|$|E
40|$|In this paper, {{we propose}} a {{statistical}} model {{to analyze the}} performance of verification-based algorithm (VA) for packet-based low-density parity-check (LDPC) codes over binary symmetric channel (BSC). In contrast {{to the analysis of}} VA in the literature, we propose to take the false verification into consideration. For a given ensemble of LDPC codes and channel parameters, the proposed analysis model gives an efficient way to find the average performance of packet-based LDPC codes with verification-based decoding. Through numerical results, we find that the proposed method can provide a close estimation of frame error rate (FER) for packet-based LDPC codes with verification based decoding over BSC for all <b>crossover</b> <b>probabilities</b> of practical interests...|$|R
40|$|From the user's {{point of}} view, setting the {{parameters}} of a genetic algorithm (GA) {{is far from a}} trivial task. Moreover, the user is typically not interested in population sizes, <b>crossover</b> <b>probabilities,</b> selection rates, and other GA technicalities. He is just interested in solving a problem, and what he would really like to do, is to hand-in the problem to a blackbox algorithm, and simply press a start button. This paper explores the development of a GA that fulfills this requirement. It has no parameters whatsoever. The development of the algorithm takes into account several aspects of the theory of GAs, including previous research work on population sizing, the schema theorem, building block mixing, and genetic drift...|$|R
40|$|This paper {{introduces}} a software package {{that uses a}} genetic algorithm to find the optimum drilling depth of directional & horizontal wells in 3 -D. A special penalty function, mutation, <b>crossover</b> <b>probabilities,</b> and stopping criterion were used to obtain the global minimum of drilling depth. This minimum was achieved at the minimum values for kickoff-point, inclination angle, build-up angle and drop-off rates. The minimum values of these parameters reduce the dogleg severity, which in turn reduce the operational problems. The optimized design was compared to the conventional design (based on a trial and error method) and the WELLDES program (based on sequential unconstrained minimization technique) for two wells. The optimized design reduce...|$|R
30|$|<b>Crossover</b> <b>probability</b> 1.0.|$|E
30|$|Genetic {{algorithm}} (GA) is {{an intelligent}} optimization algorithm inspired by natural evolution. This algorithm applies the selection, mutation, and crossover {{to obtain the}} new population, which gradually evolves to get the optimal solution. Mutation probability and <b>crossover</b> <b>probability</b> largely determine the accuracy and convergence speed in the optimization process. If {{the value of the}} <b>crossover</b> <b>probability</b> is larger, the production rate of new individuals in the population will be accelerated, and the destruction possibility of individuals with high fitness will be increased. If the <b>crossover</b> <b>probability</b> is smaller, the search time of the algorithm will become longer or even pause. Furthermore, if the mutation probability is larger, the algorithm becomes random search. If the value is smaller, the new population is not easy to generate. Therefore, how to determine mutation probability and <b>crossover</b> <b>probability</b> is very important in the GA. On the other hand, mutation probability and <b>crossover</b> <b>probability</b> often need to be repeatedly verified by manual experience. Therefore, it is hard to select the appropriate value for different optimization problems.|$|E
30|$|For both CDE-GA and CCE-GA, {{the number}} of {{individual}} is 300 and {{the number of}} generation is 300. This is based on our observation from experiments that when we used larger values, the result is not better. In CCE-GA, we set the one-point <b>crossover</b> <b>probability</b> to 17 % and the path <b>crossover</b> <b>probability</b> is also 17 %. The selection of <b>crossover</b> <b>probability</b> value is tuned after many experiments with the range from 10 % to 50 %. The mutation rate is set to a small value (3 %). Experiment is repeated 10 times for each test set.|$|E
30|$|The {{parameter}} {{values of}} VGAPS clustering are kept as follows: population size {{is set to}} 100, number of generations is set to 60 (if the algorithm is executed for more number of generations, no performance improvement is observed). Adaptive mutation and <b>crossover</b> <b>probabilities</b> are used in case of VGAPS. Note that we have set the parameters {{in such a way}} that all the algorithms are executed for equal number of function evaluations. Total function evaluations computed by AMOSA based approaches are equal to the total function evaluations computed by VGAPS and K-means clustering techniques. Here each of the above mentioned algorithms are applied ten times on each data set and Table 2 reports the best results out of these ten different runs.|$|R
40|$|Pedigrees are {{directed}} acyclic graphs that represent ancestral relationships between individuals in a population. Based on a schematic recombination process, we describe two simple Markov models for sequences evolving on pedigrees - Model R (recombinations without mutations) and Model RM (recombinations with mutations). For these models, we ask an identifiability question: {{is it possible}} to construct a pedigree from the joint probability distribution of extant sequences? We present partial identifiability results for general pedigrees: we show that when the <b>crossover</b> <b>probabilities</b> are sufficiently small, certain spanning subgraph sequences can be counted from the joint distribution of extant sequences. We demonstrate how pedigrees that earlier seemed difficult to distinguish are distinguished by counting their spanning subgraph sequences. Comment: 40 pages, 9 figure...|$|R
40|$|Abstract- We {{consider}} {{the transmission of}} one of two messages over a Binary Symmetric Channels with perfect and instantaneous feedback. We study the situation where transmitter and receiver want to communicate reliably and quickly. We propose a simple decoding rule, and show that it minimizes the weighted combination of the probability of error and decoding delay for a certain range of <b>crossover</b> <b>probabilities</b> and combination weights. I. STATEMENT OF THE PROBLEM Suppose a customer wants to communicate to his stock broker either to buy or to sell a particular security. We assume that a penalty is associated to a misunderstanding, {{and at the same}} time the customer, say, in order to maximize his profit, wants to minimize the time it takes to send the message. Th...|$|R
30|$|Perform {{crossover}} on chromosomes {{selected in}} the above step by <b>crossover</b> <b>probability.</b>|$|E
30|$|Crossover is {{performed}} after {{selection of a}} pair of chromosomes to generate offspring. The ratio of pairs of chromosomes which will be selected for mating to the total number of pairs of chromosomes is defined as the <b>crossover</b> <b>probability.</b> The purpose of crossover is to have new chromosomes which will accomplish good qualities of the old chromosomes. In this case, based on the different experiments, the <b>crossover</b> <b>probability</b> is taken as 65  %. The meaning of 65  % <b>crossover</b> <b>probability</b> is that out of 100 pairs of strings, only 65 pairs of randomly chosen strings will have crossover {{and the rest of the}} pairs of strings will remain unchanged.|$|E
3000|$|For the <b>crossover</b> <b>probability</b> {{adjustment}} {{method in}} Eq. (12), [...] p_c 0 represents a <b>crossover</b> <b>probability</b> {{for the average}} fitness of the population, {{and the size of}} [...] p_c 0 can be determined based on the required problem and the algorithm optimization process. If [...] p_c 0 is larger, it means raising the <b>crossover</b> <b>probability</b> of the individual in the population and promoting the change in the individual gene pattern from a wide range. If x is small, the opposite is true. Therefore, in order to improve the optimization performance of the algorithm, we need to adjust the value of [...] p_c 0 to balance the global optimization ability and local optimization ability of the algorithm.|$|E
40|$|Certain binary {{asymmetric}} channels, such as Z-channels {{in which}} one of the two <b>crossover</b> <b>probabilities</b> is zero, demand optimal ones densities different from 50 %. Some broadcast channels, such as broadcast binary symmetric channels (BBSC) where each component channel is a binary symmetric channel, also require a non-uniform input distribution due to the superposition coding scheme, which is known to achieve the boundary of capacity region. This paper presents a systematic technique for designing nonlinear turbo codes that are able to support ones densities different from 50 %. To demonstrate the effectiveness of our design technique, we design and simulate nonlinear turbo codes for the Z-channel and the BBSC. The best nonlinear turbo code is less than 0. 02 bits from capacity...|$|R
40|$|This paper shows a {{theoretical}} property on the Markov chain of genetic algorithms: the stationary distribution {{focuses on the}} uniform population with the optimal solution as mutation and <b>crossover</b> <b>probabilities</b> go to zero and some selective pressure defined in this paper goes to infinity. Moreover, as a result, a sufficient condition for ergodicity is derived when a simulated annealing-like strategy is considered. Additionally, the uniform crossover counterpart of the Vose-Liepins formula is derived using the Markov chain model. Keywords [...] - genetic algorithms, simulated annealing, Markov chain. I. INTRODUCTION Genetic algorithms (GAs) are stochastic search techniques widely applied to combinatorial optimization problems [11], [14], [29], [30], [31], [32], [33]. GAs move from population to population. Each population consists of chromosomes (individuals) which represent candidate solutions to the optimization problem. A new population is formed by transforming individuals of the curre [...] ...|$|R
30|$|To {{determine}} accurate <b>crossover</b> <b>probabilities</b> for LDPCA decoding, several {{methods have}} been proposed to predict SI error probabilities [4 – 6]. In conventional DVC algorithms, the SI {{is available on the}} decoder side, but the original frame is not. Several {{methods have been}} proposed to predict error probabilities using neighboring information such as previous frames or adjacent bitplanes. These methods assume that changed bit rates in previous bitplanes have an influence on error rates in the target bitplane. The error rates of the target bitplane are also assumed to be {{similar to those of the}} same bitplane in the previous frame. Therefore, several conventional algorithms set <b>crossover</b> <b>probabilities</b> equal to the error probabilities of the previous corresponding bitplane or frame using an error model of the difference between the original frame and the SI, such as a Laplacian distribution for DVC [4]. On the other hand, the error probabilities can be estimated on the encoder side. Several existing algorithms have tried to estimate a PSI similar to the SI with minimum computational complexity. For the computational constraint, rough SI generation algorithms are used, for example, temporal linear interpolation or simple block-matching algorithms [7 – 9, 19, 20]. If accurate error rates between the original and SI frames are known on the encoder side, the correct number of parity bits to be sent can be determined. As a result, the iterative feedback can be removed and delays can be drastically reduced for practical DVC. In addition, it is easy to decide whether a block can be coded as an intra-coded or a skipped block, given the number of errors in the target block. However, it is not easy to obtain an accurate SI on the encoder side because this entails a computational load as heavy as that of a DVC decoder. If the estimated error probability is far from the correct one, a channel decoder is likely to converge to an incorrect solution.|$|R
30|$|Where offsprings are new chromosomes. At {{the end of}} GA steps, {{determination}} of <b>crossover</b> <b>probability</b> is described in detailed.|$|E
3000|$|Step 4 : Based on <b>crossover</b> <b>probability</b> and {{objective}} function value, make crossover operation for cloned antibody (individual); [...]...|$|E
3000|$|... ′ {{is higher}} than F̅, the lower <b>crossover</b> <b>probability</b> is adopted to reduce the chance of {{destruction}} of excellent individual. When F [...]...|$|E
40|$|A {{method for}} {{estimating}} {{the performance of}} low-density parity-check (LDPC) codes decoded by hard-decision iterative decoding algorithms on binary symmetric channels (BSC) is proposed. Based on the enumeration of the smallest weight error patterns {{that can not be}} all corrected by the decoder, this method estimates both the frame error rate (FER) and the bit error rate (BER) of a given LDPC code with very good precision for all <b>crossover</b> <b>probabilities</b> of practical interest. Through a number of examples, we show that the proposed method can be effectively applied to both regular and irregular LDPC codes and to a variety of hard-decision iterative decoding algorithms. Compared with the conventional Monte Carlo simulation, the proposed method has a much smaller computational complexity, particularly for lower error rates. Comment: 15 pages, 5 figures, submitted to IEEE Transactions on Communications on Apr. 24, 2006, revised on Oct. 31, 2006 and Jan. 30, 200...|$|R
40|$|A {{theoretical}} and experimental analysis {{is made of}} the effects of self-adaptation in a simple evolving system. Specifically, we consider the effects of coding the mutation and <b>crossover</b> <b>probabilities</b> of a genetic algorithm evolving in certain model fitness landscapes. The resultant genotype-phenotype mapping is degenerate, there being no direct selective advantage for one probability versus another. We show that the action of mutation and crossover breaks this degeneracy leading to an induced symmetry breaking among the genotypic synonyms. We demonstrate that this induced symmetry breaking allows the system to self-adapt in a One of the most striking features of complex systems, especially in the biological realm, is the ability to adapt. Loosely speaking, this means “optimization ” in a time and/or position dependent “environment”. The Darwinian paradigm of natural selection offers an intuitive framework within which one may try to understand such adaptive behaviour...|$|R
40|$|Abstract—Genetic Algorithms (GAs) are direct searching methods {{which require}} little {{information}} from design space. This characteristic beside robustness of these algorithms makes {{them to be}} very popular in recent decades. On the other hand, while this method is employed, {{there is no guarantee}} to achieve optimum results. This obliged designer to run such algorithms more than one time to achieve more reliable results. There are many attempts to modify the algorithms to make them more efficient. In this paper, by application of fractal dimension (particularly, Box Counting Method), the complexity of design space are established for determination of mutation and <b>crossover</b> <b>probabilities</b> (Pm and Pc). This methodology is followed by a numerical example for more clarification. It is concluded that this modification will improve efficiency of GAs and make them to bring about more reliable results especially for design space with higher fractal dimensions...|$|R
