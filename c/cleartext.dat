163|5|Public
5|$|<b>ClearText,</b> {{which enables}} {{visually}} impaired users to browse the web more easily by making text {{easier for them}} to read, was developed in conjunction with the college. In 2009 RNC lecturer Tony Sales developed Vinux, an accessible version of the Linux operating system for the visually impaired.|$|E
25|$|By far {{the most}} common {{approach}} {{is to use a}} HTTP+HTML form-based authentication <b>cleartext</b> protocol, or more rarely Basic access authentication.|$|E
25|$|These weak <b>cleartext</b> {{protocols}} used {{together with}} HTTPS network encryption resolve {{many of the}} threats that digest access authentication is designed to prevent.|$|E
5000|$|If {{the same}} clear text message {{is sent to}} e or more {{recipients}} in an encrypted way, and the receivers share the same exponent e, but different p, q, and therefore n, then {{it is easy to}} decrypt the original clear text message via the Chinese remainder theorem. Johan Håstad noticed that this attack is possible even if the <b>cleartexts</b> are not equal, but the attacker knows a linear relation between them. This attack was later improved by Don Coppersmith.|$|R
40|$|In 2003, Zhao, Varadharajan and Mu {{proposed}} a mental poker protocol whose security {{was shown to}} be flawed in 2004 : any player (or any outsider knowing the deck coding) is able to decrypt encrypted cards without knowing the encryption key. In 2005, the first two authors published a repaired version of this TTP-free mental poker protocol. We show here that this second version is also flawed: the first player can find all <b>cleartexts</b> of the final encrypted shuffled deck of cards. Both protocols are similar to Shamir-Rivest-Adleman’s mental poker, but they replace an exponential commutative cipher with an ElGamal-like commutative cipher. We conclude that changing the underlying commutative cipher is the reason of their weakness...|$|R
40|$|With scalability, fault tolerance, ease of programming, and flexibility, MapReduce {{has gained}} many attractions for {{large-scale}} data processing. However, despite its merits, MapReduce does {{not focus on}} the problem of data privacy, especially when processing sensitive data, such as personal data, on un-trusted infrastructure. In this paper, we investigate a scenario based on the Trusted Cells paradigm : a user stores his personal data in a local secure data store and wants to process this data using MapReduce on a third party infrastructure, on which secure devices are also connected. The main contribution of the paper is to present TrustedMR, a trusted MapReduce system with high security assurance provided by tamper-resistant hardware, to enforce the security aspect of the MapReduce. Thanks to TrustedMR, encrypted data can then be processed by untrusted computing nodes without any modification to the existing MapReduce framework and code. Our evaluation shows that the performance overhead of TrustedMR is limited to few percents, compared to an original MapReduce framework that handles <b>cleartexts...</b>|$|R
25|$|Because the IP {{address of}} the sender and the {{recipient}} are not both in <b>cleartext</b> at any hop along the way, anyone eavesdropping at any point along the communication channel cannot directly identify both ends. Furthermore, to the recipient {{it appears that the}} last Tor node (called the exit node), rather than the sender, is the originator of the communication.|$|E
25|$|A Tor user's SOCKS-aware {{applications}} can be configured {{to direct}} their network traffic through a Tor instance's SOCKS interface. Tor periodically creates virtual circuits through the Tor network through {{which it can}} multiplex and onion-route that traffic to its destination. Once inside a Tor network, the traffic is sent from router to router along the circuit, ultimately reaching an exit node {{at which point the}} <b>cleartext</b> packet is available and is forwarded on to its original destination. Viewed from the destination, the traffic appears to originate at the Tor exit node.|$|E
25|$|Hall {{passed the}} {{telegram}} to the Foreign Office on 5 February, but still warned against releasing it. Meanwhile, the British discussed possible cover stories: {{to explain to}} the Americans how they got the ciphertext of the telegram without admitting to their ability to intercept American diplomatic communications (which they would continue to do for another 25 years); and to explain how they got the <b>cleartext</b> of the telegram without letting the Germans know their codes were broken. Furthermore, the British needed {{to find a way to}} convince the Americans the message was not a forgery.|$|E
2500|$|Downloadable <b>cleartext</b> of English {{translations}} (Scripture.sf.net): ...|$|E
2500|$|The {{password}} is {{not used}} directly in the digest, but rather HA1 = MD5(username:realm:password). This allows some implementations (e.g. JBoss) to store HA1 rather than the <b>cleartext</b> password ...|$|E
2500|$|Breaking a superencrypted cipher like JN-25 was a three-step process: (a) {{determining}} the [...] "indicator" [...] method {{to establish the}} starting point within the additive cipher, (b) stripping away the superencryption to expose the bare code, and then (c) breaking the code itself. When JN-25 was first detected and recognized, such intercepted messages as were interceptable were collected (at assorted intercept stations around the Pacific by the Navy) {{in an attempt to}} accumulate sufficient depth to attempt to strip away the superencryption. Success at doing so was termed by the cryptographers a 'break' into the system. Such a break did not always produce a <b>cleartext</b> version of the intercepted message; only a break in third phase could do so. Only after breaking the underlying code (another difficult process) would the message be available, and even then its meaning—in an intelligence sense—might be less than fully clear.|$|E
50|$|In cryptography, {{plaintext}} or <b>cleartext</b> is unencrypted information, {{as opposed}} to information encrypted for storage or transmission. Plaintext usually means unencrypted information pending input into cryptographic algorithms, usually encryption algorithms. <b>Cleartext</b> usually refers to data that is transmitted or stored unencrypted ('in the clear').|$|E
5000|$|... "PLAIN", {{a simple}} <b>cleartext</b> {{password}} mechanism, defined in RFC 4616 ...|$|E
5000|$|Plaintext or <b>cleartext,</b> most {{commonly}} used in a cryptographic context ...|$|E
50|$|Native Windows {{applications}} ask users for the <b>cleartext</b> password, {{then call}} APIs like LsaLogonUser that convert that password {{to one or}} two hash values (the LM or NT hashes) and then send that to the remote server during NTLM authentication. Analysis of this mechanism has shown that the <b>cleartext</b> password is not required to complete network authentication successfully, only the hashes are needed.|$|E
5000|$|A {{certain amount}} of <b>cleartext</b> inter-operator [...] "chatter" [...] is also provided, and may help with the analysis.|$|E
5000|$|The name [...] "dsniff" [...] refers both to {{the package}} {{as well as an}} {{included}} tool. [...] "dsniff" [...] the tool decodes passwords sent in <b>cleartext</b> across a switched or unswitched Ethernet network. Its man page explains that Song wrote dsniff with [...] "honest intentions - to audit my own network, and to demonstrate the insecurity of <b>cleartext</b> network protocols." [...] He then requests, [...] "Please do not abuse this software." ...|$|E
5000|$|... where [...] is the {{encrypted}} {{version of}} the message. When the message is signed, the <b>cleartext</b> [...] is easily extracted: ...|$|E
50|$|The PIX535 has a PCI-X 66 MHz/64 bit bus for {{expansion}} slots. This {{results in a}} much higher <b>cleartext</b> throughput, as the PCI bus {{is no longer the}} bottleneck (the PCI bus is 33 MHz and 32 bits, resulting in maximum throughput of 1.2 GBit without overhead taken in account). As the lower Cisco ASA models use a PCI bus, the PIX535 was faster for <b>cleartext</b> than its successor ASA, until the introduction of the ASA5580.|$|E
50|$|These weak <b>cleartext</b> {{protocols}} used {{together with}} HTTPS network encryption resolve {{many of the}} threats that digest access authentication is designed to prevent.|$|E
50|$|The {{developers}} {{refer to}} the algorithm as self-healing because it automatically disables an attacker from accessing the <b>cleartext</b> of later messages after having compromised a session key.|$|E
5000|$|... #Caption: A rebuilt British Tunny at the National Museum of Computing, Bletchley Park. It {{emulated}} {{the functions}} of the Lorenz SZ40/42, producing printed <b>cleartext</b> from ciphertext input.|$|E
5000|$|The {{password}} is {{not used}} directly in the digest, but rather HA1 = MD5(username:realm:password). This allows some implementations (e.g. JBoss) to store HA1 rather than the <b>cleartext</b> password ...|$|E
5000|$|The client sends a <b>cleartext</b> {{message of}} the user ID to the AS (Authentication Server) {{requesting}} services {{on behalf of the}} user. (Note: Neither the secret key nor the password is sent to the AS.) ...|$|E
5000|$|For {{the most}} part, iSCSI {{operates}} as a <b>cleartext</b> protocol that provides no cryptographic protection for data in motion during SCSI transactions. As a result, an attacker who can listen in on iSCSI Ethernet traffic can: ...|$|E
5000|$|To make {{encrypting}} and decrypting quicker, {{the entire}} alphabet can be encrypted {{to create a}} one-to-one map between {{the letters of the}} <b>cleartext</b> and the ciphertext. In this example, the one-to-one map would be the following: ...|$|E
5000|$|If the {{transmission}} is encrypted or not, {{and if it}} can be decrypted. If it is possible to intercept either an originally transmitted <b>cleartext</b> or obtain it through cryptanalysis, the language of the communication and a translation (when needed).|$|E
50|$|On {{systems or}} {{services}} using NTLM authentication, users' passwords are never sent in <b>cleartext</b> over the wire. Instead, they are {{provided to the}} requesting system, like a domain controller, as a hash in {{a response to a}} challenge-response authentication scheme.|$|E
5000|$|RTMPT, {{which is}} {{encapsulated}} within HTTP requests to traverse firewalls. RTMPT is frequently found utilizing <b>cleartext</b> requests on TCP ports 80 and 443 to bypass most corporate traffic filtering. The encapsulated session may carry plain RTMP, RTMPS, or RTMPE packets within.|$|E
50|$|Polynomial and {{rational}} functions are encrypted such that their transformation can again be implemented as programs consisting of <b>cleartext</b> instructions that a processor or interpreter understands. The processor would {{not understand the}} program's function. This field of study is gaining popularity as mobile cryptography.|$|E
50|$|The {{pass the}} hash {{technique}} was originally published by Paul Ashton in 1997 {{and consisted of}} a modified Samba SMB client that accepted user password hashes instead of <b>cleartext</b> passwords. Later versions of Samba and other third-party implementations of the SMB and NTLM protocols also included the functionality.|$|E
5000|$|Alice {{receives}} all the encrypted messages, and randomly {{chooses a}} single message to brute force. After Alice discovers both the identifier X {{and the secret}} key Y inside that message, she encrypts her clear text with the secret key Y, and sends that identifier (in <b>cleartext)</b> with her cipher text to Bob.|$|E
50|$|Also, because attackers were {{restricted}} to using third-party clients when carrying out attacks, {{it was not}} possible to use built-in Windows applications, like Net.exe or the Active Directory Users and Computers tool amongst others, because they asked the attacker or user to enter the <b>cleartext</b> password to authenticate, and not the corresponding password hash value.|$|E
5000|$|In April 2007, two Italian {{security}} researchers presented {{research about}} RDS-TMC at the CanSecWest security conference. The presentation, entitled [...] "Unusual Car Navigation Tricks", raised {{the point that}} RDS-TMC is a wireless <b>cleartext</b> protocol and showed {{how to build a}} receiver and transmitter with inexpensive electronics capable of injecting false and potentially dangerous messages.|$|E
5000|$|... iSCSI {{initiators}} and targets {{prove their}} identity {{to each other}} using CHAP, which includes a mechanism to prevent <b>cleartext</b> passwords from appearing on the wire. By itself, CHAP is vulnerable to dictionary attacks, spoofing, and reflection attacks. If followed carefully, the best practices for using CHAP within iSCSI reduce the surface for these attacks and mitigate the risks.|$|E
