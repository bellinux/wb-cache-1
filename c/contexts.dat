10000|10000|Public
5|$|Dinkar {{notes that}} in the poems of Rambhadracharya, the three poetical styles of Pāñcālī (secondary figurative sense with short and sweet-sounding {{compounds}}), Vaidarbhī (with compounds and soft <b>contexts</b> and without many figures of speech) and Lāṭī (with precise <b>contexts</b> and without many figures of speech) are dominant.|$|E
5|$|Technically, the Kleinschmidt orthography {{focused upon}} morphology: the same derivational affix would {{be written in}} the same way in {{different}} <b>contexts,</b> despite its being pronounced differently in different <b>contexts.</b> The 1973 reform replaced this with a phonological system: Here, there was a clear link from written form to pronunciation, and the same suffix is now written differently in different <b>contexts.</b> The differences are due to phonological changes. It is therefore easy to go from the old orthography to the new (cf. the online converter) whereas going the other direction would require a full lexical analysis.|$|E
5|$|An {{important}} aspect {{of all of these}} examples of noise in European keyboard and string music before the 19th century is that they are used as sound effects in programme music. Sounds that would likely cause offense in other musical <b>contexts</b> are made acceptable by their illustrative function. Over time, their evocative effect was weakened as {{at the same time they}} became incorporated more generally into abstract musical <b>contexts.</b>|$|E
40|$|The {{research}} of <b>context</b> theory history allows the author {{to make the}} <b>context</b> classification: <b>context</b> in the text (including intertextual discourse), pragmatical situations or backgrounds (situational <b>context</b> and emotional <b>context</b> in the text, a real situation out of the text), time-social <b>context,</b> personal or individual <b>context,</b> invented <b>context.</b> This classification helps to promote <b>context</b> research in the translation theory...|$|R
40|$|This paper's main {{objective}} is to consolidate the knowledge on <b>context</b> {{in the realm of}} intelligent systems, systems that are aware of their <b>context</b> and can adapt their behavior accordingly. We provide an overview and analysis of 36 <b>context</b> models that are heterogeneous and scattered throughout multiple fields of research. In our analysis, we identify five shared <b>context</b> categories: social <b>context,</b> location, time, physical <b>context,</b> and user <b>context.</b> In addition, we compare the <b>context</b> models with the <b>context</b> elements considered in the discourse on intelligent systems and find that the models do not properly represent the identified set of 3, 741 unique <b>context</b> elements. As a result, we propose a consolidation of the findings from the 36 <b>context</b> models and the 3, 741 unique <b>context</b> elements. The analysis reveals that there is a long tail of <b>context</b> categories that are considered only sporadically in <b>context</b> models. However, particularly these <b>context</b> elements in the long tail may be necessary for improving intelligent systems' <b>context</b> awareness...|$|R
40|$|<b>Context</b> aware E-Learning systems provide {{learning}} content {{according to a}} learner’s <b>context.</b> In order to determine a learner’s <b>context,</b> the parameters that constitute the <b>context</b> and the values of these parameters in the current learner’s situation have to be found. There are several existing <b>context</b> aware E-Learning systems and each of these are taking care {{of some of the}} <b>context</b> parameters - like learning styles, learner preferences etc. But, a standardized static <b>context</b> model that helps to capture a learner’s <b>context</b> in its ntirety is not available. This paper proposes a static <b>context</b> model that helps to capture a learner’s <b>context.</b> The static <b>context</b> model is developed by consolidating the various <b>context</b> parameters used in the existing <b>context</b> aware E-Learning systems and organizing them into an appropriate structure. The structure of the static <b>context</b> model along with the parameters that constitute the <b>context</b> is explained in the pape...|$|R
5|$|Banglapedia was not {{designed}} as a general encyclopedia. Its purpose {{is to provide a}} standard desk reference for Bangladeshis, as well as for people interested in Bangladesh, Bengali-speaking people, and related political, cultural and geographical <b>contexts.</b>|$|E
5|$|By the 9th century CE, {{literature}} {{written in}} Sinhalese script had emerged and the script {{began to be}} used in other <b>contexts.</b> For instance, the Buddhist literature of the Theravada-Buddhists of Sri Lanka, written in Pali, used the Sinhalese alphabet.|$|E
5|$|Fisk, Charles, Returning Cycles: <b>Contexts</b> for the Interpretation of Schubert's Impromptus and Last Sonatas (Norton, 2001).|$|E
40|$|As {{a result}} of the phenomenal {{proliferation}} of modern mobile Internet-enabled devices and the widespread utilization of wireless and cellular data networks, mobile users are increasingly requiring services tailored to their current <b>context.</b> High-level <b>context</b> information is typically obtained from <b>context</b> services that aggregate raw <b>context</b> information sensed by various sensors and mobile devices. Given the massive amount of sensed data, traditional <b>context</b> services are lacking the necessary resources to store and process these data, as well as to disseminate high-level <b>context</b> information to a variety of potential <b>context</b> consumers. In this paper, we propose a novel framework for <b>context</b> information provisioning, which relies on deploying <b>context</b> services on the cloud and using <b>context</b> brokers to mediate between <b>context</b> consumers and <b>context</b> services using a publish/subscribe model. Moreover, we describe a multi-attributes decision algorithm for the selection of potential <b>context</b> services that can fulfill <b>context</b> consumers' requests for <b>context</b> information. The algorithm calculates the score of each <b>context</b> service, per <b>context</b> information type, based on the quality-of-service (QoS) and quality-of-context information (QoC) requirements expressed by the <b>context</b> consumer. One of the benefits of the approach is that <b>context</b> providers can scale up and down, in terms of cloud resources they use, depending on current demand for <b>context</b> information. Besides, the selection algorithm allows ranking <b>context</b> services by matching their QoS and QoC offers against the QoS and QoC requirements of the <b>context</b> consumer. Comment: 8 Page...|$|R
40|$|This paper reviews {{different}} <b>context</b> classification {{systems that}} have been used to define types of <b>context.</b> Although existing classification systems cover various types of <b>context,</b> in the development of <b>context</b> aware applications only a few types of <b>context</b> have been used. This work aims to build a <b>context</b> classification model based on Activity Theory that brings together various research in <b>context</b> awareness. This provides a basis both for dialogue amongst <b>context</b> awareness researchers and for the implementation of a <b>context</b> awareness architecture. 1...|$|R
40|$|In this paper, {{we present}} a <b>context</b> {{framework}} that facilitates the development and deployment of context-aware adaptable Web services. Web services are provided with <b>context</b> information about clients that may be utilized to provide a personalized behavior. <b>Context</b> is extensible with new types of information at any time without any changes to the underlying infrastructure. <b>Context</b> processing is done by Web services, <b>context</b> plugins, or <b>context</b> services. <b>Context</b> plugins and <b>context</b> services pre- and post-process Web service messages based on the available <b>context</b> information. Both are essential for automatic <b>context</b> processing and automatic adaption of Web services to new <b>context</b> types without the necessity to adjust the Web services themselves. We implemented the <b>context</b> framework within the ServiceGlobe system, our open and distributed Web service platform...|$|R
5|$|House mice {{use both}} audible and {{ultrasonic}} {{calls in a}} variety of <b>contexts.</b> Audible vocalizations can often be heard during agonistic or aggressive encounters, whereas ultrasound is used in sexual communication and also by pups when they have fallen out of the nest.|$|E
5|$|In many <b>contexts,</b> a {{positive}} angular coordinate {{means that the}} angle ϕ is measured counterclockwise from the axis.|$|E
5|$|In the 20th and 21st centuries, {{his works}} have been {{repeatedly}} adapted and rediscovered by new movements in scholarship and performance. His plays remain highly popular and are constantly studied, performed and reinterpreted in diverse {{cultural and political}} <b>contexts</b> throughout the world.|$|E
40|$|Abstract—The {{inadequate}} {{quality of}} <b>context</b> forces the <b>context</b> consumers in pervasive environments to reason {{about the quality}} and relevance of <b>context</b> to be confident of its worth to perform their functionality. The additional task of analyzing large volumes of <b>context</b> drastically affects {{the performance of the}} <b>context</b> consumers to adjust to dynamically changing situations. A single value that presents the quality and relevance of <b>context</b> information tailored to the needs of a particular <b>context</b> consumer may release them from spending resources on <b>context</b> quality analysis and let them concentrate on their main task. In this paper we present a novel technique to combine different Quality of <b>Context</b> (QoC) metrics to infer the value of confidence on <b>context.</b> Our technique also considers the requirements of a particular <b>context</b> consumer regarding QoC metrics while confidence inference. Confidence on <b>context</b> is further provided to the <b>context</b> consumers to select high quality <b>context</b> and use the confidence in their functionality. We have successfully evaluated our approach using two <b>context</b> consumer services and user <b>context</b> collected from a smart home pervasive environment. Keywords-context confidence; quality of <b>context</b> metrics; smart homes; I...|$|R
30|$|The <b>Context</b> Provisioning Architecture {{is based}} on the {{producer}} (provider)-consumer model in which <b>context</b> related services take the roles of <b>context</b> providers or <b>context</b> consumers. These basic entities are interconnected by means of <b>context</b> brokers that provide routing, event management, query resolution and lookup services. The following paragraphs describe these three main components of the architecture. A <b>Context</b> Consumer (CxC) is a component (e.g. a <b>context</b> based application) that uses <b>context</b> data. A CxC can retrieve <b>context</b> information by sending a subscription to the <b>Context</b> Broker (CxB) or a direct on-demand query and <b>context</b> information is delivered when and if it is available. The <b>Context</b> Provider (CxP) component provides contextual information. A CxP gathers data from a collection of sensors, network/cloud services or other relevant sources. A CxP may use various aggregation and reasoning mechanisms to infer <b>context</b> from raw sensor, network or other source data. A CxP provides <b>context</b> data only to a specific invocation or subscription and is usually specialized in a particular <b>context</b> domain (e.g. location). A <b>Context</b> Broker (CxB) is the main coordinating component of the architecture. Primarily the CxB has to facilitate <b>context</b> flow among all attached components, which it achieves by allowing CxCs to subscribe to or query <b>context</b> information and CxPs to deliver notifications or responses.|$|R
40|$|Abstract—Ubiquitous {{computing}} is {{the emerging}} new computing paradigm, of which <b>context</b> awareness {{is a key}} feature. In this paradigm connectivity is more than transport resource, but an important <b>context</b> source that can be utilized in many ways. This paper studies connectivity {{from the viewpoint of}} <b>context</b> awareness. Architecture for connectivity <b>context</b> management is proposed. Raw connectivity <b>context</b> including device, network, and end-end <b>context</b> is thoroughly defined. Methods for the derivation of high-level connectivity <b>context</b> are presented. The derivation is through the intelligent interpretation of raw connectivity <b>context</b> with the combination of other contextual information, in which knowledge-based rules are adopted. Connectivity <b>context</b> can also be used in the generation of other <b>context</b> information, in which connectivity <b>context</b> is employed in forms of one input factor. This paper studies three typical cases of connectivity based <b>context</b> derivation: location, application, and user related <b>context.</b> I...|$|R
5|$|In the U.S., the {{prominent}} {{players on the}} instrument since the 1980s have included Eddie Daniels, Don Byron, Marty Ehrlich, and others playing the clarinet in more contemporary <b>contexts.</b>|$|E
5|$|Some other jurisdictions, such as Hong Kong, {{have laws}} mandating or {{permitting}} other systems of measurement {{in parallel with}} the metric system in some or all <b>contexts.</b>|$|E
5|$|The Hylan Tunnel, after former New York City Mayor John Hylan, {{who oversaw}} the project. It has also been {{referred}} to as Hylan's Holes in both derogatory and endearing <b>contexts.</b>|$|E
40|$|<b>Context</b> {{processing}} {{refers to}} the operation of processing different types of <b>context</b> data and/or information using different kinds of operators. These operators are applied according to some conditions or constraints given in <b>context</b> queries. Existing <b>context</b> aware systems process <b>context</b> data in a centralized fashion to answer <b>context</b> queries and generate <b>context</b> information. However, this method can cause scalability issues and give poor system throughput. In this paper, we aim {{to address this issue}} by proposing a distributed <b>context</b> data processing mechanism in which the <b>context</b> data processing computations of different <b>context</b> queries will be distributed to different computing devices. Relying on the developed prototype, a performance evaluation was conducted with centralized <b>context</b> data processing method as benchmark...|$|R
30|$|<b>Context</b> Listeners {{register}} with the Contest Manager and respond to <b>context</b> change. A <b>Context</b> Listener can listen for <b>context</b> events from particular peer (user), or listen for specific type of <b>context</b> events from particular sensors.|$|R
40|$|Abstract. In this paper, {{we review}} {{different}} <b>context</b> classification {{systems that have}} been used to define elements of <b>context.</b> Although existing classification systems cover various types of <b>context,</b> in the development of <b>context</b> aware applications, only a few types of <b>context</b> have been used. In this work, we aim to build a <b>context</b> classification model based on Activity Theory that provides a basis both for dialogue amongst <b>context</b> awareness researchers and for the im-plementation of a <b>context</b> awareness architecture. ...|$|R
5|$|Today, the {{alphabet}} {{is used by}} approximately 16,000,000 people to write the Sinhalese language in very diverse <b>contexts,</b> such as newspapers, TV commercials, government announcements, graffiti, and schoolbooks.|$|E
5|$|Varanasi: Varanasi (Benares) is {{considered}} to be the city specially loved by Shiva, {{and is one of the}} holiest places of pilgrimage in India. It is referred to, in religious <b>contexts,</b> as Kashi.|$|E
5|$|Few {{high-quality}} {{studies have}} been performed which demonstrate that stress causes or worsens acne. While the connection between acne and stress has been debated, some research indicates that increased severity is associated with high stress levels in certain <b>contexts</b> such as hormonal changes seen in premenstrual syndrome.|$|E
40|$|Abstract — A {{context-aware}} architecture can {{be designed}} to collect the mobile user’s <b>context</b> information, derive mobile user’s current <b>context,</b> distribute user <b>context</b> among context-aware applications, and support the applications like context-aware search. The <b>context</b> acquisition is centralized at the <b>context</b> server to ensure the reusability of <b>context</b> information among mobile devices, while <b>context</b> reasoning remains at the application level. Implementation of such a proxy helps <b>context</b> aware applications to derive user <b>context</b> profiles. The integration of user <b>context</b> with search engines like Google and Yahoo proves how context-aware searches can meet user demands for tailored services and products {{in and around the}} user’s environment...|$|R
40|$|Context-aware {{applications}} need quickly {{access to}} current <b>context</b> information, {{in order to}} adapt their behavior before this <b>context</b> changes. To achieve this, the <b>context</b> distribution mechanism has to timely discover <b>context</b> sources that can provide a particular <b>context</b> type, then acquire and distribute <b>context</b> information from these sources to the applications that requested this type of information. This paper reviews the state-of-the-art <b>context</b> distribution mechanisms according to identified requirements, then introduces a resource list-based subscription/notification mechanism for <b>context</b> sharing. This SIP-based mechanism enables subscriptions to a resource list containing URIs of multiple <b>context</b> sources that can provide the same <b>context</b> type and delivery of aggregated notifications containin...|$|R
40|$|The {{world is}} {{increasingly}} equipped with high-capacity, interconnected, mobile and embedded computing devices. Context-awareness provides an attractive approach to personalize applications {{such that they}} better suit the user’s needs in this rich computing environment. Context-aware applications use <b>context</b> information, offered by <b>context</b> sources, to adapt their behavior to the situation at hand. The exchange of <b>context</b> information requires an association between a <b>context</b> consuming context-aware application and suitable <b>context</b> producing <b>context</b> sources. We call these associations ‘context bindings’. Developing context-aware applications is complex due to some intrinsic characteristics of <b>context</b> sources. Firstly, <b>context</b> sources are distributed. Consequently, creating a <b>context</b> binding requires some form of discovery and selection of <b>context</b> sources. Secondly, <b>context</b> sources are arbitrary available during the life-span of the application. This makes a binding hard to maintain. Finally, <b>context</b> sources offer <b>context</b> information with a fluctuating quality. This makes a binding possibly unsuitable for the application. Currently, developers need to spend considerable effort to develop application code to create and maintain required <b>context</b> bindings, which can deal with these complexities. This thesis provides insights in the generic characteristics of contextaware applications and their development process. We propose an abstraction, called the <b>Context</b> Binding Transparency. This transparency has as goal to mask the complexities of creating and maintaining <b>context</b> bindings for the application developer. In this way, we facilitate the development process of context-aware applications. The responsibility for creating and maintaining <b>context</b> bindings is relieved from the application developer and is shifted to a <b>context</b> binding infrastructure. This enables application developers {{to focus on the}} development of primary application logic rather than the logic needed to create and maintain <b>context</b> bindings. The application developer interacts with the <b>context</b> binding infrastructure using <b>context</b> retrieval and publishing services, and a <b>context</b> requirement specification language. This language enables application developers to specify their requirement at a high level of abstraction rather than in programming code. In this thesis, we propose a realization of such a <b>context</b> requirement specification language, coined the <b>Context</b> Binding Description Language (CBDL). This language is developed to be generic for a broad range of context-aware applications. Additionally, we propose a realization of a <b>context</b> binding infrastructure called the Context-Aware Component Infrastructure (CACI). This infrastructure realizes a <b>context</b> binding transparency and is composed of a <b>context</b> binding mechanism and a <b>context</b> discovery interoperability mechanism. The <b>context</b> binding mechanism uses CBDL documents, specified by the application developers, to create and maintain <b>context</b> bindings on behalf of the application. The process of creating a binding consists of discovery of <b>context</b> sources at available <b>context</b> discovery mechanisms, selection of suitable <b>context</b> sources, establishment of a binding of the application to these <b>context</b> sources, and maintenance of this binding. Maintenance of a <b>context</b> binding includes re-binding to other suitable <b>context</b> sources in case of lost or (re-) appearing <b>context</b> sources and fluctuating quality of <b>context.</b> This thesis gives an example of a possible rebinding algorithm. The <b>context</b> discovery interoperability mechanism enables contextaware applications to interoperate transparently with different <b>context</b> discovery mechanisms available in the application environment. The goal of the interoperability mechanism is to hide the heterogeneity and fluctuating availability of <b>context</b> discovery mechanisms for context-aware applications. The <b>context</b> discovery interoperability mechanism is a supporting mechanism for the <b>context</b> binding mechanism. It can also be used independently by context-aware applications that do not leverage from the <b>context</b> binding mechanism. We have created a proof-of-concept prototype of CACI, using the OSGi component framework. The prototype includes implementations of the <b>context</b> binding mechanism and the <b>context</b> discovery interoperability mechanism. Evaluation of the proposed <b>context</b> binding transparency and infrastructure consists of a user survey and a comparison on the development effort and software quality of a Telemedicine case implementation with and without CACI. The survey indicated a general interest of possible users in the features of the <b>context</b> binding transparency. The case implementations indicated a possible improvement in the development process of higher quality context-aware applications when using a <b>context</b> binding infrastructure. This research stresses that the availability of <b>context</b> information and the quality of this information highly influences the development of contextaware applications. By using a middleware infrastructure to support the creation and maintenance of <b>context</b> bindings, the development of higher quality context-aware applications can be simplified...|$|R
5|$|Linear {{combinations}} combine multiplication and summation; {{they are}} sums {{in which each}} term has a multiplier, usually a real or complex number. Linear combinations are especially useful in <b>contexts</b> where straightforward addition would violate some normalization rule, such as mixing of strategies in game theory or superposition of states in quantum mechanics.|$|E
5|$|Nigeria {{is divided}} into thirty-six states and one Federal Capital Territory, which are further sub-divided into 774 Local Government Areas (LGAs). In some <b>contexts,</b> the states are {{aggregated}} into six geopolitical zones: North West, North East, North Central, South East, South South, and South West.|$|E
5|$|Stieger, Voracek, and Formann {{recommend}} that the task involve both letter preference and number preference, that it be administered twice, and that the instructions focus on liking rather than attractiveness. The Number Preference Task {{has been used to}} measure implicit self-esteem in <b>contexts</b> as diverse as parenting and mental habits.|$|E
30|$|Novel key ideas {{allow the}} {{development}} of frameworks for <b>context</b> and user-based <b>context</b> which leads to improvement of user experience immersion. <b>Context</b> immersion {{can be defined as}} user awareness of real <b>context</b> through interactions with the AR content. To get a better understanding of user experience in mobile AR applications, <b>context</b> dimension such as time and location-based tracking, object-based <b>context</b> immersion, and user-based <b>context</b> immersion are considered.|$|R
40|$|Abstract. Context-aware {{services}} are gaining momentum in mobile computing. To enable rapid development of context-aware services, <b>context</b> information {{has to be}} retrieved from the environment, modeled, processed, and distributed to these services. MIDAS is a European research project concerning 3 G and beyond, which aims to define and implement a platform to simplify and speed up the task of developing and deploying mobile applications and services. MIDAS <b>context</b> engine provides mechanisms to retrieve, model, synthesize, and distribute <b>context</b> information in a distributed, mobile environment. This paper presents a way to retrieve and distribute <b>context</b> information using <b>context</b> queries and triggers. A novel approach to perform <b>context</b> synthesis will be presented using operators. Key words: Distributed <b>context</b> engine, <b>context</b> query, <b>context</b> trigger, <b>context</b> synthesis, <b>context</b> retrieval and distribution...|$|R
40|$|Abstract. In {{order to}} support context-dependency in model-based development, three {{components}} need to be realised: <b>Context</b> Detection, <b>Context</b> Switching and <b>Context</b> Handling. <b>Context</b> detection is the process for detecting changes in <b>context,</b> while <b>context</b> switching brings the system in the new state {{that needs to be}} supported. Finally, <b>context</b> handling adapts the interaction possibilities to the current <b>context.</b> In this paper we discuss an approach for <b>context</b> detection and switching for virtual environments that is based on the Event-Condition-Action paradigm. Both <b>context</b> detection and switching are split-up and supported by our graphical notation for the design of multimodal interaction techniques. The main advantage of this approach is that we provide the designer with a flexible <b>context</b> system, supported by scalable diagrams...|$|R
