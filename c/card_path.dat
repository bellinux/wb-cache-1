4|11|Public
5000|$|The 2501 uses a {{photoelectric}} sensor {{to read the}} data punched in the card. Cards are read serially (column by column) and the reader uses a simplified [...] "straight through" [...] <b>card</b> <b>path.</b> [...] "Each column is read twice and the two readings are compared to check reading accuracy." ...|$|E
5000|$|A lower {{performance}} (and presumably cheaper) model, the IBM 537, {{was introduced}} September 4, 1956. It {{had a single}} <b>card</b> <b>path</b> for reading and punching and operated at 155 cards per minute. On January 12, 1959, IBM introduced two faster 650 peripherals, the IBM 543 Card Reader and the IBM 544 Card Punch. Both operated at up to 250 cards per minute.|$|E
50|$|The {{punched card}} acted as an {{insulator}} and an electrical contact was only {{completed in the}} presence of a punched hole. A control panel controlled what function was to be performed by directing the impulse to a series of ‘wire contact relays’ with the impulses de-coded according to the Hollerith code. (Mark Sense could not provide the current needed to ‘pick’ a wire contact relay and so needed vacuum tubes to amplify the current). After the card was read, a ‘Card Gate’ moved into the <b>card</b> <b>path</b> to stop the card for printing on the correct horizontal line.|$|E
5000|$|The IBM 533 Input-Output Unit, {{announced}} on July 2, 1953, was a punched card reader and punch {{that served as}} the primary input-output unit for the IBM 650 computer. It had two independent <b>card</b> <b>paths,</b> one for reading and one for punching. IBM cards were fed face down, 12-edge first. All 80 columns could be read and punched by the computer as numeric data, but alphanumeric reading was severely limited on the basic 650 and require special control panel wiring.|$|R
50|$|Miners {{may play}} a <b>path</b> <b>card</b> in order to {{progress}} in building a tunnel from a special card which represents the mine start {{to one of the}} three special cards that represent possible gold locations (only one of which is effectively gold, but the players do not know which when the game begins as they are placed face down), while Saboteurs try to play <b>path</b> <b>cards</b> which actually hinder such progress (for example by ending paths or making them turn in opposite directions).|$|R
50|$|The {{magnetic}} stripe on a <b>card</b> has three <b>paths.</b> Until 30 September 2009, path 3 of the {{magnetic stripe}} was read for payments in Germany. Since then, the international standard path 2 is being read.|$|R
50|$|The {{magnetic}} head inside the POS Terminal is a fixed component {{and for this}} reason it only can be cleared by cleaning cards that are flexible enough to clean the leading, center and trailing edges of this round reader head. The cleaning of the {{magnetic head}} is very important because it's responsible for the reading of the card and so it decides acceptance or rejection of the inserted card.The cleaning card is not only cleaning the reading area of the magnetic head which is cleared. There is also a cleaning process within the device along the <b>card</b> <b>path.</b> The cleaning in these high dirt build-up areas is especially important and ensures efficient cleaning of the card reader.|$|E
50|$|Azrael Productions also {{assembled}} {{a group of}} dedicated fans to start designing new cards for the game. They started playtesting these cards before Azrael eventually abandoned the project. Azrael gave up rights to the partially tested <b>cards,</b> leaving the <b>path</b> clear for the playtesters to produce fan-made sets of cards.|$|R
50|$|The goal of {{the game}} is to get only the red car out through the exit of the board by moving the other {{vehicles}} out of its way. However, the cars and trucks (set up before play, according to a puzzle <b>card)</b> obstruct the <b>path</b> which makes the puzzle harder.|$|R
5000|$|Windows 8 {{includes}} the [...] "RIO" [...] (Registered IO) extensions for Winsock. [...] These extensions {{are designed to}} reduce the overhead of the user to kernel mode transition for the network data path and the notification path, but use {{the rest of the}} regular Windows TCP and UDP stack (and uses existing network <b>cards).</b> The setup <b>path</b> (for example, the [...] "connect" [...] function) is unchanged from the regular Winsock path.|$|R
50|$|As in the prequel, miners {{may play}} a <b>path</b> <b>card</b> in order to {{progress}} in building a tunnel from a special card which represents the mine start {{to one of the}} three special cards that represent possible gold locations (only one of which is effectively gold, but the players do not know which when the game begins as they are placed face down), while saboteurs try to play <b>path</b> <b>cards</b> which actually hinder such progress (for example by ending paths or making them turn in opposite directions). However, in Saboteur 2 the miners are split into two teams - green and blue - and it is possible for the teams to compete, stopping each other with locked coloured doors. The Boss plays as a miner, but is not prevented by either colour of door from getting to the gold if it is found, and receives less gold for winning. The profiteer always wins, but receives less gold than other winning players. Lastly, the geologist does not care if the gold if found, but is interested in the appearance of crystals within the maze of tunnels.|$|R
30|$|The SV and PV of Energy Efficiency Grade Label were 16.15 and 15.99, respectively. SV and PV of Korea Eco-Label {{without a}} green card were 15.34 and 12.86, respectively. With {{a green card}}, SV and PV of Korea Eco-Label were 14.77 and 13.19, respectively. The results {{revealed}} that in all cases, SV was larger than PV. However, the path loading from SV to LA was smaller than that from PV to LA in all cases. Regarding Energy Efficiency Grade Label, the path loading from SV to LA was 4.68, while that from PV to LA was 9.11. Regarding Korea Eco-Label without a green <b>card,</b> the <b>path</b> loading from SV to LA was 4.45, but that from PV to LA was 7.33. Regarding Korea Eco-Label with a green card, SV to LA was 4.28, but perceived private value to label attitude was 7.52. These results suggest that although consumers {{are aware of the}} public benefits of eco-labeled products, this awareness does not promote a positive attitude. In contrast, PV of eco-label had a more marked effect on LA. In addition, the path loading from PV to PI was 5.92, 4.76, and 4.88 for Energy Efficiency Grade Label, Korea Eco-Label without, and Korea Eco-Label with a green card, respectively. Therefore, the total effect of PV on PI was high. The path from LA to PI was 7.59, 6.48, and 6.49 for Energy Efficiency Grade Label, Korea Eco-Label without, and Korea Eco-Label with a green card, respectively.|$|R
40|$|Path {{constraints}} {{have been}} studied in [4, 10, 11] for semistructured data modeled as a rooted edge-labeled directed graph. They have proven useful in the optimization of path queries. However, in this graph model, the implication problems associated with many natural path constraints are undecidable [10]. A variant of the graph model, called the deterministic data model, was recently proposed in [9]. In this model, data is represented as a graph with deterministic edge relations, i. e, the edges emanating from any node in the graph have distinct labels. The deterministic graph model is more appropriate for representing, for example, ACeDB [25] databases and Web pages. This paper investigates path constraints for the deterministic data model. It demonstrates the application of path constraints to, among other things, query optimization. Four classes of path constraints are considered: the class of word constraints Pw proposed in [4], the constraint language Pc introduced in [10], an extension of Pc, denoted by Pc-, by including wild <b>cards</b> in <b>path</b> expressions, and a generalization of Pc-, denoted by Pc*, by representing paths as regular expressions. The implication problems for these constraint languages are studied {{in the context of}} the deterministic data model. It shows that the implication and finite implication problems for Pw are decidable in cubic-time and are finitely axiomatizable. Moreover, in contrast to the undecidability result of [10], these results also hold for Pc. In addition the implication problems are decidable for Pc-. However, the implication problems for Pc* are undecidable...|$|R
3000|$|During the simulation, it {{is often}} {{necessary}} to find the shortest path between two nodes, or more precisely, {{to find out which}} nodes are within a certain distance of a starting point, using shortest paths. Note that all shortest paths are weighted with the average travel time of the involved edges, so the shortest paths are in a sense fastest paths. This operation is computationally quite time consuming, so to optimize efficiency, it is performed before the simulation itself. Specifically, we calculate the length of the shortest paths between each and every node and save the information which nodes are up to x meters away from the original node, with x binned in 100 m bins. This makes finding valid target nodes (a process explained in [...] "Calculating road usage" [...] section) much faster. To further increase the speed of the simulation, {{it would be possible to}} use a graphics <b>card</b> for shortest <b>path</b> calculations or to store not only the distances, but the complete paths, if enough memory is available.|$|R
50|$|Ian {{arrives in}} Genoa City {{suddenly}} after being informed by a co-worker {{that two people}} were looking for him in Indiana. He surprises Nikki by appearing in her home and she immediately tells him to leave before slapping him twice; he is surprised that Nikki never told him he fathered a child with her. He then introduces himself to Dylan, who isn't pleased {{that he is in}} town. Ian later overhears Summer Newman (Hunter King) talking about being confused about her future, and he gives her a business <b>card</b> for The <b>Path,</b> the present day version of his cult. He later convinces her to begin counseling with him, but Nikki and Summer's father Nicholas Newman (Joshua Morrow) are able to stop him from scamming Summer. Dylan later confronts Ian and asks why he shouldn't kill him, where he claims to have a secret. Ian is arrested and his case is taken by Leslie Michaelson (Angell Conwell), generating controversy. Later, Dylan and Nikki's husband Victor Newman (Eric Braeden) work to get Ian out of town, contacting his ex-wife Willah, who later reveals that Ian is unable to father children. Leslie also breaks the client/attorney confidentiality clause by revealing his secret. This leads Nikki to realize that Ian was never Dylan's father and that her lover at the time, Paul Williams (Doug Davidson), is. Ian defends himself by saying that when Nikki said that he was Dylan's father, he decided to come to town and go along with her assumptions. He also threatens to report Leslie for revealing his secret if she doesn't file a lawsuit against Nikki. The lawsuit ends up happening and goes to court, where Nikki is forced to read a diary she kept while in Ian's cult.|$|R

