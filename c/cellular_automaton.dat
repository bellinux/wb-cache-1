2868|15|Public
5|$|A {{reversible}} <b>cellular</b> <b>automaton</b> is a <b>cellular</b> <b>automaton</b> {{in which}} every configuration has a unique predecessor. That is, it is a regular grid of cells, each containing a state drawn from a finite set of states, with a rule for updating all cells simultaneously based on the states of their neighbors, such that the previous state of any cell before an update can be determined uniquely from the updated states of all the cells. The time-reversed dynamics of a reversible <b>cellular</b> <b>automaton</b> can always be described by another <b>cellular</b> <b>automaton</b> rule, possibly on a much larger neighborhood.|$|E
5|$|Any second-order {{automaton}} may {{be transformed}} into a conventional <b>cellular</b> <b>automaton,</b> in which the transition function depends only on the single previous time step, by combining pairs of states from consecutive time steps of the second-order automaton into single states of a conventional <b>cellular</b> <b>automaton.</b>|$|E
5|$|A <b>cellular</b> <b>automaton</b> {{consists}} of an array of cells, each one of which has {{a finite number of}} possible states, together with a rule for updating all cells simultaneously based only on the states of neighboring cells. A configuration of a <b>cellular</b> <b>automaton</b> is an assignment of a state to every cell of the automaton; the update rule of a <b>cellular</b> <b>automaton</b> forms a function from configurations to configurations, with the requirement that the updated value of any cell depends only on some finite neighborhood of the cell, and that the function is invariant under translations of the input array.|$|E
5|$|<b>Cellular</b> <b>automaton</b> {{models of}} this system divide the square lattice into two {{alternating}} subsets, and perform updates {{on one of the}} two subsets at a time. In each update, every cell that can flip does so. This defines a reversible <b>cellular</b> <b>automaton</b> which can be used to investigate the Ising model.|$|E
5|$|Designing {{reversible}} {{rules for}} block cellular automata, and {{determining whether a}} given rule is reversible, is easy: for a block <b>cellular</b> <b>automaton</b> to be reversible it is necessary and sufficient that the transformation applied to the individual blocks at {{each step of the}} automaton is itself reversible. When a block <b>cellular</b> <b>automaton</b> is reversible, the time-reversed version of its dynamics can also be described as a block <b>cellular</b> <b>automaton</b> with the same block structure, using a time-reversed sequence of partitions of cells into blocks, and with the transition function for each block being the inverse function of the original rule.|$|E
5|$|Several {{general methods}} {{are known for}} {{constructing}} <b>cellular</b> <b>automaton</b> rules that are automatically reversible.|$|E
5|$|The Critters rule is a block <b>cellular</b> <b>{{automaton}}</b> in which, at each step, {{the cells}} of the automaton are partitioned into 2×2 blocks and each block is updated independently of the other blocks. Its transition function flips the state of every cell in a block that does not have exactly two live cells, and in addition rotates by 180° blocks with exactly three live cells. Because this function is invertible, the automaton defined by these rules is a reversible <b>cellular</b> <b>automaton.</b>|$|E
5|$|The time-reversed {{dynamics}} of the automaton can be described by another <b>cellular</b> <b>automaton.</b> Clearly, {{for this to be}} possible, the update rule must be bijective. In the other direction, if the update rule is bijective, then it has an inverse function that is also bijective. This inverse function must be a <b>cellular</b> <b>automaton</b> rule. The proof of this fact uses the Curtis–Hedlund–Lyndon theorem, a topological characterization of cellular automata rules as the translation-invariant functions that are continuous with respect to the Cantor topology on the space of configurations.|$|E
5|$|As Boykett argues, any {{one-dimensional}} reversible <b>cellular</b> <b>automaton</b> {{is equivalent}} to an automaton in rectangular form, in which the cells are offset a half unit at each time step, and in which both the forward and reverse evolution of the automaton have neighborhoods with just two cells, the cells a half unit away in each direction. If a reversible automaton has neighborhoods larger than two cells, it can be simulated by a reversible automaton with smaller neighborhoods and more states per cell, in which each cell of the simulating automaton simulates a contiguous block of cells in the simulated automaton. The two axioms of a semicentral bigroupoid are exactly the conditions required on the forward and reverse transition functions of these two-cell neighborhoods to be the reverses of each other. That is, every semicentral bigroupoid defines a reversible <b>cellular</b> <b>automaton</b> in rectangular form, in which the transition function of the automaton uses the operation to combine the two cells of its neighborhood, and in which the operation similarly defines the reverse dynamics of the automaton. Every one-dimensional reversible <b>cellular</b> <b>automaton</b> {{is equivalent to}} one in this form.|$|E
5|$|Because {{the motion}} of the {{particles}} in these systems is reversible, they are typically implemented with reversible cellular automata. In particular, both the HPP and FHP lattice gas automata can be implemented with a two-state block <b>cellular</b> <b>automaton</b> using the Margolus neighborhood.|$|E
5|$|In a <b>cellular</b> <b>automaton,</b> {{each cell}} in an {{infinite}} grid of cells may {{have one of}} a finite set of states, and all cells update their states simultaneously based only on the configuration of a small set of neighboring cells.|$|E
5|$|Related work on {{this model}} {{concerns}} deposition in which the arrival times of additional particles are random, rather than having particles arrive at all local minima simultaneously. These stochastic growth processes can be modeled as an asynchronous <b>cellular</b> <b>automaton.</b>|$|E
5|$|Several {{methods are}} known for {{defining}} cellular automata rules that are reversible; these include the block <b>cellular</b> <b>automaton</b> method, in which each update partitions the cells into blocks and applies an invertible function separately to each block, and the second-order <b>cellular</b> <b>automaton</b> method, in which the update rule combines states from two previous steps of the automaton. When an automaton is not defined by one of these methods, but is instead given as a rule table, the problem of testing whether it is reversible is solvable for block cellular automata and for one-dimensional cellular automata, but is undecidable for other types of cellular automata.|$|E
5|$|The {{fact that}} every {{configuration}} has a predecessor may be summarized {{by saying that}} Rule 90 is surjective. The function that maps each configuration to its successor is, mathematically, a surjective function. Rule 90 is also not injective. In an injective rule, every two different configurations have different successors, but Rule 90 has pairs of configurations with the same successor. Rule 90 {{provides an example of}} a <b>cellular</b> <b>automaton</b> that is surjective but not injective. The Garden of Eden theorem of Moore and Myhill implies that every injective <b>cellular</b> <b>automaton</b> must be surjective, but this example shows that the converse is not true.|$|E
5|$|The {{majority}} {{problem is}} the problem of constructing a <b>cellular</b> <b>automaton</b> that, when run on any finite set of cells, can compute the value held by a majority of its cells.|$|E
5|$|For a block <b>cellular</b> <b>automaton,</b> testing {{reversibility}} is also easy: the automaton is reversible if {{and only}} if the transition function on the blocks of the automaton is invertible, and in this case the reverse automaton has the same block structure with the inverse transition function.|$|E
5|$|Von Neumann {{created the}} field of {{cellular}} automata {{without the aid of}} computers, constructing the first self-replicating automata with pencil and graph paper. The concept of the Von Neumann universal constructor based on the von Neumann <b>cellular</b> <b>automaton</b> was fleshed out in his posthumous work Theory of Self Reproducing Automata.|$|E
5|$|A <b>cellular</b> <b>automaton</b> {{is defined}} by its cells (often a one- or {{two-dimensional}} array), a finite set of values or states that can go into each cell, a neighborhood associating each cell with a finite set of nearby cells, and an update rule according to which the values of all cells are updated, simultaneously, {{as a function of}} the values of their neighboring cells.|$|E
5|$|A lattice gas {{automaton}} is a <b>cellular</b> <b>automaton</b> {{designed to}} simulate the motion of particles in a fluid or an ideal gas. In such a system, gas particles move on straight lines with constant velocity, until undergoing elastic collision with other particles. Lattice gas automata simplify these models by only allowing a constant number of velocities (typically, only one speed and either four or six directions of motion) and by simplifying the types of collision that are possible.|$|E
5|$|The {{rule for}} the {{automaton}} {{within each of}} these subsets is equivalent (except for a shift by half a cell per time step) to another elementary <b>cellular</b> <b>automaton,</b> Rule 102, in which the new state of each cell is the exclusive or of its old state and its right neighbor. That is, the behavior of Rule 90 {{is essentially the same}} as the behavior of two interleaved copies of Rule 102.|$|E
5|$|A {{configuration}} in Rule 90 can be partitioned {{into two}} subsets of cells {{that do not}} interact with each other. One of these two subsets consists of the cells in even positions at even time steps and the cells in odd positions in odd time steps. The other subset consists of the cells in even positions at odd time steps and the cells in odd positions at even time steps. Each of these two subsets {{can be viewed as}} a <b>cellular</b> <b>automaton</b> with only its half of the cells.|$|E
5|$|Every {{configuration}} of Rule 90 has exactly four predecessors, other configurations {{that form the}} given configuration after a single step. Therefore, in contrast to many other cellular automata such as Conway's Game of Life, Rule 90 has no Garden of Eden, a configuration with no predecessors. It {{provides an example of}} a <b>cellular</b> <b>automaton</b> that is surjective (each configuration has a predecessor) but not injective (it has sets of more than one configuration with the same successor), showing that the converse of the Garden of Eden theorem is not true.|$|E
5|$|From the {{descriptions}} of the rules above, two important properties of its dynamics may immediately be seen. First, in Rule 184, for any finite set of cells with periodic boundary conditions, the number of 1s {{and the number of}} 0s in a pattern remains invariant throughout the pattern's evolution. Rule 184 and its reflection are the only elementary cellular automata to have this property of number conservation. Similarly, if the density of 1s is well-defined for an infinite array of cells, it remains invariant as the automaton carries out its steps. And second, although Rule 184 is not symmetric under left-right reversal, it does have a different symmetry: reversing left and right {{and at the same time}} swapping the roles of the 0 and 1 symbols produces a <b>cellular</b> <b>automaton</b> with the same update rule.|$|E
5|$|Rule 90 is an {{elementary}} <b>cellular</b> <b>automaton.</b> That {{means that it}} consists of a one-dimensional array of cells, each of which holds a single binary value, either 0 or 1. An assignment of values {{to all of the}} cells is called a configuration. The automaton is given an initial configuration, and then progresses through other configurations in a sequence of discrete time steps. At each step, all cells are updated simultaneously. A pre-specified rule determines the new value of each cell as a function of its previous value and of the values in its two neighboring cells. All cells obey the same rule, which may be given either as a formula or as a rule table that specifies the new value for each possible combination of neighboring values.|$|E
5|$|There are no nontrivial {{reversible}} elementary cellular automata. However, a near-miss {{is provided}} by Rule 90 and other elementary cellular automata based on the exclusive or function. In Rule 90, the state of each cell is the exclusive or of the previous states of its two neighbors. This use of the exclusive or makes the transition rule locally invertible, {{in the sense that}} any contiguous subsequence of states can be generated by this rule. Rule 90 is not a reversible <b>cellular</b> <b>automaton</b> rule, because in Rule 90 every assignment of states to the complete array of cells has exactly four possible predecessors, whereas reversible rules are required to have exactly one predecessor per configuration.|$|E
5|$|Any {{one-dimensional}} reversible <b>cellular</b> <b>automaton</b> may {{be placed}} into rectangular form, after which its transition rule may be factored into {{the action of}} an idempotent semicentral bigroupoid (a reversible rule for which regions of cells with a single state value change only at their boundaries) together with a permutation {{on the set of}} states. The first-order invariants for the idempotent lifting of the automaton rule (the modified rule formed by omitting the permutation) necessarily behave like the ones for a rectangular band: they have a basis of invariants that flow either leftwards or rightwards at a constant rate without interaction. The first-order invariants for the overall automaton are then exactly the invariants for the idempotent lifting that give equal weight to every pair of states that belong to the same orbit of the permutation. However, the permutation of states in the rule may cause these invariants to behave differently from in the idempotent lifting, flowing non-uniformly and with interactions.|$|E
5|$|Culik {{begins with}} the {{observation}} that a <b>cellular</b> <b>automaton</b> has an injective transition function {{if and only if}} the transition function is injective on the subsets of configurations that are periodic (repeating the same substring infinitely often in both directions). He defines a nondeterministic finite-state transducer that performs the transition rule of the automaton on periodic strings. This transducer works by remembering the neighborhood of the automaton {{at the start of the}} string and entering an accepting state when that neighborhood concatenated to the end of the input would cause its nondeterministically chosen transitions to be correct. Culik then swaps the input and output of the transducer. The transducer resulting from this swap simulates the inverse dynamics of the given automaton. Finally, Culik applies previously known algorithms to test whether the resulting swapped transducer maps each input to a single output.|$|E
5|$|Many other {{cellular}} automata {{and other}} computational systems {{are capable of}} emulating the behavior of Rule 90. For instance, a configuration in rule 90 may be translated into a configuration into the different elementary <b>cellular</b> <b>automaton</b> Rule 22. The translation replaces each Rule 90 cell by three consecutive Rule 22 cells. These cells are all zero if the Rule 90 cell is itself zero. A nonzero Rule 90 cell is translated into a one followed by two zeros. With this transformation, every six steps of the Rule 22 automaton simulate a single step of the Rule 90 automaton. Similar direct simulations of Rule 90 are also possible for the elementary cellular automata Rule 45 and Rule 126, for certain string rewriting systems and tag systems, and in some two-dimensional cellular automata including Wireworld. Rule 90 can also simulate itself in the same way. If each cell of a Rule 90 configuration {{is replaced by a}} pair of consecutive cells, the first containing the original cell's value and the second containing zero, then this doubled configuration has the same behavior as the original configuration at half the speed.|$|E
5|$|Sutner {{defines a}} {{directed}} graph (a type of de Bruijn graph) {{in which each}} vertex represents a pair of assignments of states for the cells in a contiguous sequence of cells. The length of this sequence is chosen to be one less than the neighborhood size of the automaton. An edge in Sutner's graph represents a pair of sequences of cells that overlap {{in all but one}} cell, so that the union of the sequences is a full neighborhood in the <b>cellular</b> <b>automaton.</b> Each such edge is directed from the overlapping subsequence on the left to the subsequence on the right. Edges are only included in the graph when they represent compatible state assignments on the overlapping parts of their cell sequences, and when the automaton rule (applied to the neighborhood determined by the potential edge) would give the same results for both assignments of states. By performing a linear-time strong connectivity analysis of this graph, it is possible to determine which of its vertices belong to cycles. The transition rule is non-injective if and only if this graph contains a directed cycle in which at least one vertex has two differing state assignments.|$|E
25|$|A <b>cellular</b> <b>automaton</b> is {{reversible}} if, {{for every}} current {{configuration of the}} <b>cellular</b> <b>automaton,</b> there is exactly one past configuration (preimage). If one thinks of a <b>cellular</b> <b>automaton</b> as a function mapping configurations to configurations, reversibility implies that this function is bijective. If a <b>cellular</b> <b>automaton</b> is reversible, its time-reversed behavior can also {{be described as a}} cellular automaton; this fact is a consequence of the Curtis–Hedlund–Lyndon theorem, a topological characterization of cellular automata. For cellular automata in which not every configuration has a preimage, the configurations without preimages are called Garden of Eden patterns.|$|E
25|$|Also in the 1940s, Norbert Wiener and Arturo Rosenblueth {{developed}} {{a model of}} excitable media {{with some of the}} characteristics of a <b>cellular</b> <b>automaton.</b> Their specific motivation was the mathematical description of impulse conduction in cardiac systems. However their model is not a <b>cellular</b> <b>automaton</b> because the medium in which signals propagate is continuous, and wave fronts are curves. A true <b>cellular</b> <b>automaton</b> model of excitable media was {{developed a}}nd studied by J. M. Greenberg and S. P. Hastings in 1978; see Greenberg-Hastings <b>cellular</b> <b>automaton.</b> The original work of Wiener and Rosenblueth contains many insights and continues to be cited in modern research publications on cardiac arrhythmia and excitable systems.|$|E
25|$|An {{elementary}} <b>cellular</b> <b>automaton</b> rule is {{specified by}} 8 bits, and all elementary <b>cellular</b> <b>automaton</b> rules {{can be considered}} {{to sit on the}} vertices of the 8-dimensional unit hypercube. This unit hypercube is the <b>cellular</b> <b>automaton</b> rule space. For next-nearest-neighbor cellular automata, a rule is specified by 25=32 bits, and the <b>cellular</b> <b>automaton</b> rule space is a 32-dimensional unit hypercube. A distance between two rules can be defined by the number of steps required to move from one vertex, which represents the first rule, and another vertex, representing another rule, {{along the edge of the}} hypercube. This rule-to-rule distance is also called the Hamming distance.|$|E
25|$|Reversible {{cellular}} automata {{are often}} used to simulate such physical phenomena as gas and fluid dynamics, since they obey the laws of thermodynamics. Such cellular automata have rules specially constructed to be reversible. Such systems have been studied by Tommaso Toffoli, Norman Margolus and others. Several techniques {{can be used to}} explicitly construct reversible cellular automata with known inverses. Two common ones are the second order <b>cellular</b> <b>automaton</b> and the block <b>cellular</b> <b>automaton,</b> both of which involve modifying the definition of a <b>cellular</b> <b>automaton</b> in some way. Although such automata do not strictly satisfy the definition given above, it can be shown that they can be emulated by conventional cellular automata with sufficiently large neighborhoods and numbers of states, and can therefore be considered a subset of conventional cellular automata. Conversely, {{it has been shown that}} every reversible <b>cellular</b> <b>automaton</b> can be emulated by a block <b>cellular</b> <b>automaton.</b>|$|E
25|$|There {{are many}} {{possible}} generalizations of the <b>cellular</b> <b>automaton</b> concept.|$|E
25|$|Edward Fredkin and Konrad Zuse {{pioneered the}} idea of a computable universe, the former by writing a line in his book on how the world might be like a <b>cellular</b> <b>automaton,</b> and later further {{developed}} by Fredkin using a toy model called Salt. It has been claimed that NKS tries to take these ideas as its own but Wolfram's model of the universe if a rewriting network and not a <b>cellular</b> <b>automaton</b> as Wolfram himself has suggested a <b>cellular</b> <b>automaton</b> cannot account for relativistic features such as no absolute time frame. Jürgen Schmidhuber has also charged that his work on Turing machine-computable physics was stolen without attribution, namely his idea on enumerating possible Turing-computable universes.|$|E
25|$|Periodic {{configurations}} in <b>cellular</b> <b>automaton</b> simulations may {{be found}} by applying cycle detection algorithms to the sequence of automaton states.|$|E
