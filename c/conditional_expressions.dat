111|667|Public
25|$|The Network-Free Stochastic Simulator (NFSim) {{differs from}} those {{described}} above by {{allowing for the}} definition of reaction rates as arbitrary mathematical or <b>conditional</b> <b>expressions</b> and thereby facilitates selective coarse-graining of models. RuleMonkey and NFsim implement distinct but related simulation algorithms. A detailed review and comparison of both tools is given by Yang and Hlavacek.|$|E
500|$|<b>Conditional</b> <b>expressions</b> in Python {{are written}} as x if c else y (different {{in order of}} operands from the [...] {{operator}} common to many other languages).|$|E
500|$|SQL {{provides}} two flavours of <b>conditional</b> <b>expressions.</b> One {{is called}} [...] "simple CASE" [...] and operates like a switch statement. The other {{is called a}} [...] "searched CASE" [...] in the standard, and operates like an if...elseif.|$|E
5000|$|... #Subtitle level 3: McCarthy's {{notion of}} <b>conditional</b> <b>expression</b> ...|$|R
5000|$|The {{short-circuit}} expression [...] (using [...] {{to denote}} the short-circuit variety) {{is equivalent to}} the <b>conditional</b> <b>expression</b> the expression [...] is equivalent to [...]|$|R
30|$|The <b>conditional</b> <b>expression</b> e of S 0 is a tainted attribute.|$|R
2500|$|<b>Conditional</b> <b>expressions</b> and {{conditional}} constructs are {{features of}} a programming language which perform different computations or actions depending on whether a programmer-specified boolean condition evaluates to true or false.|$|E
5000|$|<b>Conditional</b> <b>expressions</b> with [...] For an example, see Case (SQL).|$|E
50|$|The {{following}} table {{describes the}} operators {{that can be}} used to create <b>conditional</b> <b>expressions.</b>|$|E
5000|$|Assignment using a <b>conditional</b> <b>expression</b> in Common Lisp:(setf result (if (> a b) x y)) ...|$|R
5000|$|This <b>conditional</b> <b>expression</b> [...] [...] [...] {{has also}} {{the power of}} the {{minimization}} operator[...] [...].|$|R
5000|$|In Visual Basic {{and some}} other languages, a {{function}} called [...] is provided, {{which can be used}} as a <b>conditional</b> <b>expression.</b> However, it does not behave like a true <b>conditional</b> <b>expression,</b> because both the true and false branches are always evaluated; it is just that the result of one of them is thrown away, while the result of the other is returned by the IIf function.|$|R
5000|$|... {{keywords}} (e.g., if, then, else, and, or, not, implies) {{that are}} used to specify <b>conditional</b> <b>expressions.</b>|$|E
5000|$|<b>Conditional</b> <b>expressions</b> and {{conditional}} constructs are {{features of}} a programming language which perform different computations or actions depending on whether a programmer-specified boolean condition evaluates to true or false.|$|E
50|$|The ?: {{operator}} {{is similar}} to the way <b>conditional</b> <b>expressions</b> (if-then-else constructs) work in functional programming languages, like Scheme, ML, and Haskell, since if-then-else forms an expression instead of a statement in those languages.|$|E
5000|$|It {{is notable}} that ALGOL's <b>conditional</b> <b>expression</b> {{in the form}} [...] has an {{equivalent}} in C but not in Pascal.|$|R
50|$|The HTML shown {{inside the}} syntax block {{in each of}} the {{conditional}} comments denotes any block of HTML content, including script. Both types of conditional comment use a <b>conditional</b> <b>expression</b> to indicate whether the content inside the comment block should be parsed or ignored. The <b>conditional</b> <b>expression</b> is formed from a combination of feature, operator, and/or value, depending on the feature. The following table shows the supported features and describes the values each feature supports.|$|R
40|$|<b>Conditional</b> <b>expression</b> strains {{serve as}} a {{valuable}} tool to study the essentiality and to establish the vulnerability of a target under investigation in a drug discovery program. While essentiality implies an absolute requirement of a target function, vulnerability provides valu-able information {{on the extent to}} which a target function needs to be depleted to achieve bacterial growth inhibition followed by cell death. The critical feature of an ideal <b>conditional</b> <b>expression</b> system is its ability to tightly regulate gene expression to achieve the full spec-trum spanning from a high level of expression in order to support growth and near zero level of expression to mimic conditions of gene knockout. A number of bacterial <b>conditional</b> <b>expression</b> systems have been reported for use in mycobacteria. The utility of an isopro-pylthiogalactoside (IPTG) inducible system in mycobacteria has been reported for protein overexpression and anti-sense gene expression from a replicating multi-copy plasmid. Herein, we report the development of a versatile set of non-replicating IPTG inducible vec-tors for mycobacteria which can be used for generation of <b>conditional</b> <b>expression</b> strains through homologous recombination. The role of a single lac operator versus a double la...|$|R
5000|$|SQL {{provides}} two flavours of <b>conditional</b> <b>expressions.</b> One {{is called}} [...] "simple CASE" [...] and operates like a switch statement. The other {{is called a}} [...] "searched CASE" [...] in the standard, and operates like an if...elseif.|$|E
50|$|In 1958, McCarthy {{served on}} an ACM Ad hoc Committee on Languages that {{became part of}} the {{committee}} that designed ALGOL 60. In August 1959 he proposed the use of recursion and <b>conditional</b> <b>expressions,</b> which became part of ALGOL.|$|E
5000|$|C and C-like {{languages}} has {{a special}} ternary operator (?:) for <b>conditional</b> <b>expressions</b> with a function that may be described by a template like this: This means {{that it can be}} inlined into expressions, unlike if-statements, in C-like languages: ...|$|E
40|$|Abstract — We {{present the}} {{short-circuit}} code transformation technique, intended for embedded compilers. The transformation technique optimizes conditional blocks in high-level programs. Specifically, the transformation {{takes advantage of}} the fact that the Boolean value of the <b>conditional</b> <b>expression,</b> determining the true/false paths, can be statically analyzed to determine cases when one or the other of the true/false paths are guaranteed to execute. In such cases, code is generated to bypass the evaluation of the <b>conditional</b> <b>expression.</b> In instances when the bypass code is faster to evaluate than the <b>conditional</b> <b>expression,</b> a net performance gain is obtained. Our experiments with the Mediabench applications show that the short-circuit transformation yields a an average of 35. 1 % improvement in execution time for SPARC and an average of 36. 3 % improvement in execution time for ARM. We also measured an average of 36. 4 % reduction in power consumption for ARM. I...|$|R
25|$|Tamoxifen {{is used as}} a {{research}} tool to trigger tissue-specific gene <b>expression</b> in many <b>conditional</b> <b>expression</b> constructs in genetically modified animals including a version of the Cre-Lox recombination technique.|$|R
5000|$|If {{the second}} sub-expression {{can be a}} further simple <b>conditional</b> <b>expression,</b> we can give more {{alternatives}} to try before the last fall-through: (x>0) -> 1/x; (x<0) -> -1/x; 0 ...|$|R
5000|$|Python's limited {{support for}} {{anonymous}} functions is the [...] construct.Lambdas {{are limited to}} containing an expression rather than statements, although control flow can still be implemented less elegantly within lambda by using short-circuiting, and more idiomatically with <b>conditional</b> <b>expressions.</b>|$|E
50|$|A notationally {{distinctive}} feature of ISWIM is {{its use of}} “where” clauses. An ISWIM program is a single expression qualified by “where” clauses (auxiliary definitions including equations among variables), <b>conditional</b> <b>expressions</b> and function definitions. Along with CPL, ISWIM {{was one of the}} first programming languages to use “where” clauses.|$|E
50|$|Whitespace in {{a program}} is also not stored {{as part of the}} source code, and each {{programmer}} working on a project can choose an indentation display of the source. More radical visualizations include showing statement lists as nested boxes, editing <b>conditional</b> <b>expressions</b> as logic gates, or re-rendering names in Chinese.|$|E
5000|$|Parentheses: If {{there is}} parenthesized {{expression}} in a statement, it is a <b>conditional</b> <b>expression,</b> and {{the statement is}} processed only if the test has a value of 'true'. Example: ...|$|R
50|$|There {{is also a}} <b>conditional</b> <b>expression,</b> {{which works}} much like the ?:-operator in C-like languages, albeit with a {{slightly}} different syntax. For example, one can write if a > b then 0 else 1 end where a > b is the condition, and 0 and 1 are the expressions that are evaluated in case the condition is true or false, respectively. Note that the <b>conditional</b> <b>expression</b> is different from operators {{not only in the}} number of expressions it contains (three instead of one or two), but also in the way it evaluates those expressions. If the condition is true, then only the then-branch expression matters for the result of the <b>conditional</b> <b>expression,</b> and therefore it is guaranteed to be defined even if the else-branch expression, for instance, is not. For example, if a = 0 then null else 1/a end will produce a defined value (null) if a is zero, even though the else-branch expression is undefined in that case.|$|R
50|$|Unlike C, perl {{allows the}} use of the <b>conditional</b> <b>expression</b> as an Lvalue, e.g.$a > $b ? $x : $y = $result;will assign '$result' to either '$x' or '$y' {{depending}} on the logical expression.|$|R
5000|$|... We {{shall need}} {{a number of}} {{mathematical}} ideas and notations concerning functions in general. Most of the ideas are well known, but the notion of conditional expression {{is believed to be}} new, and the use of <b>conditional</b> <b>expressions</b> permits functions to be defined recursively in a new and convenient way." ...|$|E
50|$|In {{computer}} science, conditional statements, <b>conditional</b> <b>expressions</b> and conditional constructs are {{features of}} a programming language, which perform different computations or actions depending on whether a programmer-specified boolean condition evaluates to true or false. Apart from the case of branch predication, this is always achieved by selectively altering the control flow based on some condition.|$|E
50|$|The Network-Free Stochastic Simulator (NFSim) {{differs from}} those {{described}} above by {{allowing for the}} definition of reaction rates as arbitrary mathematical or <b>conditional</b> <b>expressions</b> and thereby facilitates selective coarse-graining of models. RuleMonkey and NFsim implement distinct but related simulation algorithms. A detailed review and comparison of both tools is given by Yang and Hlavacek.|$|E
50|$|Constant {{propagation}} {{can also}} cause conditional branches to simplify {{to one or more}} unconditional statements, when the <b>conditional</b> <b>expression</b> can be evaluated to true or false at compile time to determine the only possible outcome.|$|R
5000|$|The McCarthy {{formalism}} is {{like the}} general recursive (Kleene) system, in being based on some basic functions, composition, and equality, but with the <b>conditional</b> <b>expression</b> alone replacing both the primitive-recursive scheme and the minimization operator." [...] (Minsky 1967:192-193) ...|$|R
5000|$|A simple <b>conditional</b> <b>expression,</b> {{already present}} in CPL in 1963, has a guard on first sub-expression, and another sub-expression {{to use in}} case the first one cannot be used. Some common ways to write this: (x>0) -> 1/x; 0 x>0 ? 1/x : 0 ...|$|R
