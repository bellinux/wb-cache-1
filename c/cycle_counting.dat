156|461|Public
25|$|Inventory {{management}} {{involves a}} retailer seeking to acquire {{and maintain a}} proper merchandise assortment while ordering, shipping, handling and related costs are kept in check. It also involves systems and processes that identify inventory requirements, set targets, provide replenishment techniques, report actual and projected inventory status and handle all functions related to the tracking and management of material. This would include the monitoring of material moved {{into and out of}} stockroom locations and the reconciling of the inventory balances. It also may include ABC analysis, lot tracking, <b>cycle</b> <b>counting</b> support, etc. Management of the inventories, with the primary objective of determining/controlling stock levels within the physical distribution system, functions to balance the need for product availability against the need for minimizing stock holding and handling costs.|$|E
50|$|<b>Cycle</b> <b>counting,</b> an {{alternative}} to physical inventory, may be less disruptive.|$|E
50|$|Most <b>cycle</b> <b>counting</b> {{applications}} use ABC analysis, segregating items {{into various}} count frequencies.|$|E
5000|$|Updating of elapsed <b>cycle</b> <b>counts</b> on {{platforms}} with <b>cycle</b> <b>count</b> registers ...|$|R
50|$|<b>Cycle</b> <b>count</b> - The best {{practice}} {{is to determine}} why a <b>cycle</b> <b>count</b> that increases or decreases inventory has occurred. Find the root cause and correct the problem from occurring again.|$|R
5000|$|It {{follows that}} the {{combinatorial}} species [...] {{that reflects the}} signs and the <b>cycle</b> <b>count</b> of the set of permutations is given bywhere we have used [...] to mark signs and [...] for the <b>cycle</b> <b>count.</b>|$|R
50|$|In winter, {{there is}} also a 9-day <b>cycle</b> <b>counting</b> start from the winter solstice, which would last for 9 cycles until 81 days later when it is deemed as the end of winter.|$|E
50|$|The {{standard}} {{also includes}} the specification and calculation of standard bridge loads, {{the application of the}} limit state principles, analysis, and fatigue load calculation and the reservoir method for fatigue load <b>cycle</b> <b>counting.</b>|$|E
50|$|Most <b>cycle</b> <b>counting</b> {{frequencies}} {{are determined}} first by Pareto frequency analysis, and then changing the count frequency, or ABC code, as needed per item {{is based on}} per piece value, how critical the part may be, or other factors. This method requires manual arrangement and is not statistically pure since arbitrary adjustments can be made.|$|E
30|$|The {{proposed}} method {{counts the}} number of timeouts in {{a large number of}} transmissions, which is called the <b>cycle</b> <b>count.</b> In addition, SCTP has a backoff mechanism, in which a packet timeout results in retransmission and double RTO. Therefore, the proposed mechanism distinguishes different levels of timeout just like continuous or random timeouts in the <b>cycle</b> <b>count.</b>|$|R
40|$|We {{consider}} {{the distribution of}} <b>cycle</b> <b>counts</b> in a random regular graph, which is {{closely linked to the}} graph’s spectral properties. We broaden the asymptotic regime in which the <b>cycle</b> <b>counts</b> are known to be approximately Poisson, and we give an explicit bound in total variation distance for the approximation. Using this result, we calculate limiting distributions of linear eigenvalue statistics for random regular graphs. Previous results on the distribution of <b>cycle</b> <b>counts</b> by McKay, Wormald, and Wysocka (2004) used the method of switchings, a combinatorial technique for asymp-totic enumeration. Our proof uses Stein’s method of exchangeable pairs and demon-strates an interesting connection between the two techniques...|$|R
50|$|Clock <b>cycle</b> <b>counts</b> for {{examples}} of typical x87 FPU instructions (only register-register versions shown here).|$|R
50|$|<b>Cycle</b> <b>counting</b> {{that begins}} {{from one end}} of the store to the other, based on surface area. Combing over each rack or shelf, that is {{assigned}} per counter. This method requires planning, in which a map of the store is required and counting forms for the recording of stock information that will then need updating to the inventory management system.|$|E
50|$|A {{cycle count}} is an {{inventory}} auditing procedure, which falls under inventory management, {{where a small}} subset of inventory, in a specific location, is counted on a specified day. Cycle counts contrast with traditional physical inventory in that a full physical inventory may stop operation at a facility while all items are counted at one time. Cycle counts are less disruptive to daily operations, provide an ongoing measure of inventory accuracy and procedure execution, and can be tailored to focus on items with higher value, higher movement volume, or that are critical to business processes. <b>Cycle</b> <b>counting</b> should only be performed in facilities {{with a high degree}} of inventory accuracy (greater than 95%). The purpose of <b>cycle</b> <b>counting</b> is to verify the inventory accuracy and even though it is not an adequate procedure to be used to correct inventory errors, it is an adequate way to identify the root causes of inventory errors.|$|E
50|$|<b>Cycle</b> <b>counting</b> by usage {{states that}} items more {{frequently}} accessed should be counted more often, irrespective of value. Every time an employee adds or removes an item, {{there is a}} risk of introducing inventory variance. Logical inventory zones can be set up to distinguish items depending on how frequently they are touched. This method may be biased against counting higher value inventory or require additional counting to satisfy accounting requirements.|$|E
5000|$|Inventory Management : Product maintenance, ABC Analysis, <b>Cycle</b> <b>count,</b> Inventory Transactions, Inter Org Transfers, Sub Inventory Movements ...|$|R
50|$|After {{less than}} a year, path usage (<b>cycle</b> <b>counts</b> only, without pedestrians) was at {{approximately}} 750 per day.|$|R
3000|$|... as a {{function}} of P/E <b>cycle</b> <b>count</b> and retention time[6]. However, the allowable maximum values of μshift and [...]...|$|R
50|$|Cycle counts can {{introduce}} inventory errors if the cycle count process is poorly executed. Multiple locations per item, work in process, and lag in paperwork processing can each contribute to errors. This {{problem can be}} mitigated with correct cycle count procedures that specify not only the part number to be counted but also the location it should be in. <b>Cycle</b> <b>counting</b> is only effective in companies with a well-defined inventory control procedure and {{a high degree of}} inventory accuracy.|$|E
5000|$|To conduct {{efficient}} and accurate cycle counts, many organizations use {{some form of}} software to implement an inventory control system, {{which is part of}} a warehouse management system. These systems may include mobile computers with integrated barcode scanners that allow the operator to automatically identify items, and enter inventory counts via keypad. The software then transmits data to a database on a host system which can generate inventory reports.Based on user defined criteria, the software will select a number of items to count at specific locations for the specified period of time. Ideally, these selections are daily but many companies choose to generate cycle count items weekly.Many companies perform [...] "mini" [...] physical inventories and call it cycle counts. Instead of using random or system generated part numbers at specific locations to count, they selectively choose specific locations and count everything in those locations. As part of their procedures they rotate throughout the plant with the intention of counting every location a minimum of once each year. This is an effective alternative to true <b>cycle</b> <b>counting</b> where a company may not have the sophistication to utilize <b>cycle</b> <b>counting</b> software.|$|E
50|$|The more {{classical}} {{approach of}} fatigue evaluation consists of <b>cycle</b> <b>counting,</b> using the rainflow algorithm and summation {{by means of}} the Palmgren-Miner linear damage hypothesis, that appropriately sums the damages of respective cycles. When the time history is not known, because the load is random (e.g. a car on a rough road or a wind driven turbine), those cycles can not be counted. Multiple time histories can be simulated for a given random process, but such procedure is cumbersome and computationally expensive.|$|E
5000|$|Now the two {{generating}} functions [...] and [...] of {{even and}} odd permutations by <b>cycle</b> <b>count</b> are given by ...|$|R
5000|$|<b>Cycle</b> <b>count</b> improvements. Many unmodified ARM7 {{binaries}} {{were measured}} as taking about 30% fewer cycles to execute on ARM9 cores. Key improvements include: ...|$|R
40|$|Software {{pipelining}} is {{an effective}} technique to reduce <b>cycle</b> <b>count</b> by exploiting instruction level parallelism in loops. It has been implemented in most VLIW DSP compilers. However, software pipelining expands the code size due {{to the introduction of}} prelude and postlude. To address this problem, many VLIW DSP compilers include certain code size reduction features. During compilation, a user is given limited options of exercising these code reduction features. As a result, the tradeoff options between <b>cycle</b> <b>count</b> and code size are also limited. Yet today’s software development often requires an optimum balance between code size and <b>cycle</b> <b>count,</b> which in turn requires a much wider tradeoff space. This paper presents a new heuristic code-size-constraint loop optimization approach to extend the tradeoff space. Preliminary experimental results indicate that the new approach can significantly widen the tradeoff space, thus providing DSP users with more flexibility to meet their various design criteria. 1...|$|R
50|$|AFGROW {{implements}} {{five different}} material models (Forman Equation, Walker Equation, Tabular lookup, Harter-T Method and NASGRO Equation) to determine crack growth per applied cyclic loading. Other AFGROW user options include five load interaction (retardation) models (Closure, FASTRAN, Hsu, Wheeler, and Generalized Willenborg), a strain-life based fatigue crack initiation model, {{and the ability}} to perform a crack growth analysis with the effect of the bonded repair. AFGROW also includes useful tools such as: user-defined stress intensity solutions, user-defined beta modification factors (ability to estimate stress intensity factors for cases, which may not be an exact match for one of the stress intensity solutions in the AFGROW library), a residual stress analysis capability, <b>cycle</b> <b>counting,</b> {{and the ability to}} automatically transfer output data to Microsoft Excel.|$|E
50|$|Inventory {{management}} {{involves a}} retailer seeking to acquire {{and maintain a}} proper merchandise assortment while ordering, shipping, handling and related costs are kept in check. It also involves systems and processes that identify inventory requirements, set targets, provide replenishment techniques, report actual and projected inventory status and handle all functions related to the tracking and management of material. This would include the monitoring of material moved {{into and out of}} stockroom locations and the reconciling of the inventory balances. It also may include ABC analysis, lot tracking, <b>cycle</b> <b>counting</b> support, etc. Management of the inventories, with the primary objective of determining/controlling stock levels within the physical distribution system, functions to balance the need for product availability against the need for minimizing stock holding and handling costs.|$|E
5000|$|By {{the end of}} the 20th century, {{the reality}} of mass {{mechanized}} production became more fully accepted by the Western public. Elves had been portrayed as using assembly lines to produce toys early in the 20th century. That shift was reflected in the modern depiction of Santa's residence—now often humorously portrayed as a fully mechanized production and distribution facility, equipped with the latest manufacturing technology, and overseen by the elves with Santa and Mrs. Claus as executives and/or managers. An excerpt from a 2004 article, from a supply chain managers' trade magazine, aptly illustrates this depiction: Santa's main distribution center is a sight to behold. At , it's one of the world's largest facilities. A real-time warehouse management system (WMS) is of course required to run such a complex. The facility makes extensive use of task interleaving, literally combining dozens of DC activities (putaway, replenishing, order picking, sleigh loading, <b>cycle</b> <b>counting)</b> in a dynamic queue...the DC elves have been on engineered standards and incentives for three years, leading to a 12% gain in productivity...The WMS and transportation system are fully integrated, allowing (the elves) to make optimal decisions that balance transportation and order picking and other DC costs. Unbeknownst to many, Santa actually has to use many sleighs and fake Santa drivers {{to get the job done}} Christmas Eve, and the [...] transportation management system (TMS) optimally builds thousands of consolidated sacks that maximize cube utilization and minimize total air miles.|$|E
50|$|A {{number of}} {{techniques}} {{have been used}} to correct phantom inventory problems, including physical <b>cycle</b> <b>counts,</b> RFID tagging of items and statistical modeling of phantom inventory conditions.|$|R
40|$|This paper {{addresses}} the potential speedup achieved by using decimal floating-point hardware, instead of software routines, on a high-performance superscalar architecture. Software routines were written to per-form decimal addition, subtraction, multiplication, and diuision. <b>Cycle</b> <b>counts</b> were then measured for each instruction using the Simplescalar simulator. Af-ter this, new hardware algorithms were deueloped, ex-isting hardware algorithms were analyzed, and <b>cycle</b> <b>counts</b> were estimated {{for the same}} set of instructions using specialized decimal floating-point hardware. This data was then used to show the potential speedup ob-tained for programs with different instruction mixes and a recently developed benchmark. ...|$|R
40|$|Inventory record {{inaccuracy}} deteriorates {{supply chain}} performance because {{it leads to}} ineffective replenishment decisions. Conducting <b>cycle</b> <b>counts</b> (i. e., periodic inventory auditing) is a common approach to correcting inventory records. It is not clear, however, how inaccuracy at different locations affects supply chain performance and how an effective cycle-count program for a multistage supply chain should be designed. This paper aims {{to answer these questions}} by considering a serial supply chain that has inventory record inaccuracy and operates under local base-stock policies. A random error, representing a stock loss, such as shrinkage or invisible demand, reduces the physical inventory at each location in each period. The errors are cumulative and are not observed until a location performs a <b>cycle</b> <b>count.</b> We provide a simple recursion to evaluate the system cost and propose an effective heuristic for the best base-stock levels. For a two-stage system with identical error distributions, we prove that it is more effective to conduct more frequent <b>cycle</b> <b>counts</b> at the downstream stage. In a numerical study of more general systems, we find that the above conclusion holds unless an upstream stage has a significantly higher error rate. In particular, more <b>cycle</b> <b>counts</b> should be allocated to a downstream stage when (1) the ratio of its lead time to the total system lead time is small, (2) the ratio of its holding cost to the total system holding cost is large, or (3) the number of stages in the supply chain is large. The analysis and insights generated from our study can be used to design guidelines or scorecard systems that help managers design better cycle-count policies. Finally, we discuss implications of our study on RFID investments in a supply chain. (Key words: inventory inaccuracy, <b>cycle</b> <b>counts,</b> multi-echelon systems, RFID) 1...|$|R
5000|$|Transaction for MM module {{start with}} M. [...] IH09 - Display MaterialMM01 - Create MaterialMM02 - Change MaterialMM03 - Display MaterialMM50 - List Extendable MaterialsMMBE - Stock OverviewMMI1 - Create Operating SuppliesMMN1 - Create Non-Stock Material MMS1 - Create ServiceMMU1 - Create Non-Valuated Material ME51N - Create Purchase RequisitionME52N - Change Purchase RequisitionME53N - Display Purchase RequisitionME5A - Purchase Requisitions: List DisplayME5J - Purchase Requisitions for ProjectME5K - Requisitions by Account AssignmentMELB - Purch. Transactions by Tracking No. ME56 - Assign Source to Purch. RequisitionME57 - Assign and Process RequisitionsME58 - Ordering: Assigned RequisitionsME59 - Automatic Generation of POs ME54 - Release Purchase RequisitionME55 - Collective Release of Purchase Reqs.ME5F - Release Reminder: Purch. Requisition MB21 - Create ReservationMB22 - Change ReservationMB23 - Display ReservationMB24 - Reservations by MaterialMB25 - Reservations by Account Assignment MB1C - Other Goods ReceiptsMB90 - Output Processing for Mat. Documents MB21 - Create ReservationMB22 - Change ReservationMB23 - Display ReservationMB24 - Reservations by MaterialMB25 - Reservations by Account Assignment MBRL - Return Delivery per Mat. Document MB1C - Other Goods ReceiptsMB90 - Output Processing for Mat. Documents MB1B - Transfer Posting MIBC - ABC Analysis for <b>Cycle</b> <b>Counting</b> MI01 - Create Physical Inventory DocumentMI02 - Change Physical Inventory DocumentMI03 - Display Physical Inventory DocumentMI31 - Batch Input: Create Phys. Inv. Doc.MI32 - Batch Input: Block MaterialMI33 - Batch Input: Freeze Book Inv.BalanceMICN - Btch Inpt:Ph.Inv.Docs.for Cycle CtngMIK1 - Batch Input: Ph.Inv.Doc.Vendor Cons.MIQ1 - Batch Input: PhInvDoc. Project Stock MI01 - Create Physical Inventory DocumentMI02 - Change Physical Inventory DocumentMI03 - Display Physical Inventory DocumentMI31 - Batch Input: Create Phys. Inv. Doc.MI32 - Batch Input: Block MaterialMI33 - Batch Input: Freeze Book Inv.BalanceMICN - Btch Inpt:Ph.Inv.Docs.for Cycle CtngMIK1 - Batch Input: Ph.Inv.Doc.Vendor Cons.MIQ1 - Batch Input: PhInvDoc. Project Stock MI01 - Create Physical Inventory DocumentMI02 - Change Physical Inventory DocumentMI03 - Display Physical Inventory DocumentMI31 - Batch Input: Create Phys. Inv. Doc.MI32 - Batch Input: Block MaterialMI33 - Batch Input: Freeze Book Inv.BalanceMICN - Btch Inpt:Ph.Inv.Docs.for Cycle CtngMIK1 - Batch Input: Ph.Inv.Doc.Vendor Cons.MIQ1 - Batch Input: PhInvDoc. Project Stock MI21 - Print {{physical}} inventory document MI04 - Enter Inventory Count with DocumentMI05 - Change Inventory CountMI06 - Display Inventory CountMI09 - Enter Inventory Count w/o DocumentMI34 - Batch Input: Enter CountMI35 - Batch Input: Post Zero Stock BalanceMI38 - Batch Input: Count and DifferencesMI39 - Batch Input: Document and CountMI40 - Batch Input: Doc., Count and Diff. MI08 - Create List of Differences with Doc.MI10 - Create List of Differences w/o Doc.MI20 - Print List of Differences MI11 - Physical Inventory Document Recount MI07 - Process List of DifferencesMI37 - Batch Input: Post Differences ...|$|E
50|$|Back flush is {{used for}} {{materials}} which are required for the product and have a fixed relationship with it. Depending on how backflushing is implemented in the accounting software being used and depending on organizational rules, the back flushing may create error records which need to be analyzed by someone in charge for the cost accounting. One possible reason {{for the creation of}} these error records can be that there is no sufficient book inventory available in the designated back flushing location (shop floor). By simply deleting the error record, without working it out, could mean that the costs are not assigned correctly to products and/or even that the expenses in the financial accounting (inventory accounts) are not being recorded. The error record as such, is not a specific consequence of using back flushing. It may exist also when a MES system is being used when no back flushing is needed. The {{reason for this is that}} any error in transmitting and/or interpreting the data being sent by the MES system to the ERP system is consigned and needs to be worked out. When using back flushing, any scrap, material usage variance (using more or less than specified in the BOM) or substitution must be reported separately in order to maintain acceptable inventory accuracy. These are typically implemented as unplanned transactions. The downside of unplanned transactions is that they are prone to error. Unplanned inventory transactions must be eliminated and replaced creatively with planned transactions because even a very low percentage of misreported transactions will take inventory accuracy quickly to an unacceptable level. That is why the usage of backflushing is recommended only if 2 conditions are met: low I/O Variation and low Production Lead Times. Without low part I/O variation through low scrap, non-standard usage, and substitution, system inventory levels become unreliable. The exception transactions just cannot come through quickly or accurately enough to tame the beast. Loss of trust in the system occurs. Without short manufacturing lead times, components get moved into production but don’t get relieved right away from the ERP inventory. This leads to confusion. Evident discrepancies between physical and system inventory counts cause frustration and lack of trust in the system. Without accurate and timely inventory levels, internal production plans and external purchase orders cannot be scheduled effectively, leading to inventory shortages and excess inventory. Inventory shortages cause disruptions to the manufacturing schedule, forcing additional setups, forced substitutions, overtime, premium freight charges, missed shipments and lost capacity. Excess inventory increases obsolescence, and consumes precious cash flow and shelf space. Both excess inventory and shortages can indirectly lead to poor quality. A plant cannot cycle-count its way to accurate inventories. <b>Cycle</b> <b>counting</b> is not timely enough to be of benefit. And cycle counts are more likely to introduce errors than to correct them.|$|E
40|$|Inventory record errors {{within a}} supply chain can lead to {{problems}} that cause low customer satisfaction and high operational costs. This paper presents a simulation model of a two-echelon inventory system consisting of a retailer, a distribution center, and a supplier that includes multiple item types {{and the use of}} <b>cycle</b> <b>counting</b> as the corrective action. An extensive set of cycle-counting configurations were examined while observing the trade-off between fill rates, accuracy, and system costs in order to investigate the best possible configuration of <b>cycle</b> <b>counting</b> for two set of experiments that examine high-demand-low-cost and low-demand-high-cost items. The results indicate that the correct application of <b>cycle</b> <b>counting</b> will increase record accuracy and provide significant amount of savings for the entire supply chain. <b>Cycle</b> <b>counting</b> Supply chain Simulation Inventory inaccuracy...|$|E
50|$|Performance of ARMulator is {{good for}} the {{technology}} employed, it's about 1000 host (PC) instructions per ARM instruction. This means that emulated speeds of 1 MHz were normal for PCs of the mid to late 90s. Accuracy is good too, although it is classed as <b>cycle</b> <b>count</b> accurate rather than cycle accurate, this is because the ARM pipeline isn't fully modeled (although register interlocks are). Resolution is to an instruction, as a consequence when single stepping the register interlocks are ignored and different <b>cycle</b> <b>counts</b> are returned than if the program had simply run, this was unavoidable.|$|R
40|$|This report {{documents}} {{my senior}} project for California Polytechnic State University San Luis Obispo. I {{have chosen to}} do a senior project with Lisi Aerospace. Lisi would like to compare the manufacturer rated <b>cycle</b> <b>count</b> of taps versus an experimental one based on our machines in house. My goal for this project would be to run an experiment on one tapping machine and report on the achievable <b>cycle</b> <b>count</b> for the taps. I plan {{to do this in}} several ways including: Running extra <b>cycle</b> <b>counts</b> above tap manufacturer recommendations Documenting machine failure modes Create a process document to be repeated on other parts My solution approach shall be based on these objectives. A document detailing this experimental process will be created. This will include documentation of part/tap failures, machine failures and any other data that needs to be recorded about the production run. Many different aspects of the batch will be covered such as: material, tap material, tap maker, part produced, and tooling setup used. My deliverables to Lisi include: Documentation of experiment Documentation of machine/part/tap failures Recommendation for extension of tap lif...|$|R
30|$|To {{evaluate}} {{the increase in}} speed provided by our hardware-based sensor device implementation, execution <b>cycle</b> <b>counts</b> are compared with the typical sensor devices found in the literature, namely general purpose processor-based solution[7], sensor processor-based solution[11], and event processor-based solution[13].|$|R
