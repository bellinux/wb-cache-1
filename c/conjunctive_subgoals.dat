2|0|Public
40|$|DADO is a highly-parallel. VLSI-baaed, tree-structured machine {{designed}} to provide significant performance improvements in the execution or large production system programs. In this paper, we describe current research aimed at implementing PROLOG within the parallel framework which DADO provides. The implementation allows parallel satisfaction of both disjunctions and conjunctions which occur in the goal tree generated during the execution or a PROLOG program. Local unification routines in each processor allow parallel satisfaction or disjunctive goals while a parallel relational join operation provides a framework to solve <b>conjunctive</b> <b>subgoals.</b> An overview of the technique currently being implemented {{and their relationship to}} the architecture is presented...|$|E
40|$|And-parallelism {{arises in}} Prolog {{programs}} when <b>conjunctive</b> <b>subgoals</b> in a query or {{the body of}} a clause are executed in parallel. In this paper we present three optimizations, namely, the last parallel call optimization, the shallow parallelism optimization, and the processor determinacy optimization that take advantage of determinacy to improve efficiency of and-parallel execution of Prolog programs. All three optimizations depend on a posteriori knowledge of determinacy rather than on a priori knowledge detected at compile-time. With the help of these optimizations, data-and parallel Prolog programs can be efficiently executed on very general andparallel system (such as &ACE and &-Prolog) with the efficiency of dedicated dataand parallel systems (such as Reform Prolog system). These optimizations have been implemented in the &ACE system, and the results are also presented. 1 Introduction Two main types of (implicit) and-parallelism have been identified and successfully exploited in [...] ...|$|E

