7|44|Public
6000|$|... (3.) The {{knowledge}} and {{wisdom of the}} creatures, do with a <b>check,</b> <b>command</b> thee to be wise, and do teach thee wisdom. The stork in the heaven, the swallow and the crane, by observing the time and season of their coming, do admonish thee to learn the time of grace, and of the mercy of God (Jer 8:7). The ox and the ass, by the knowledge they have of their master's crib, do admonish thee to know the bread and table of God, and both do and shall condemn thy ignorance of the food of heaven (Isa 1:3).|$|E
5000|$|Complex chomski {{constructs}} are possible, {{allowing it}} {{to serve as a}} simple, but highly specialised, programming language. Chomski has only one flow control statement (apart from the test structures , , [...] etc.), namely the <b>check</b> <b>command,</b> which jumps back to the @@ label (no other labels are permitted).|$|E
50|$|The {{software}} {{was released in}} its first version in 1968 as the Statistical Package for the Social Sciences (SPSS) after being developed by Norman H. Nie, Dale H. Bent, and C. Hadlai Hull. Those principals incorporated as SPSS Inc. in 1975. Early versions of SPSS Statistics were designed for batch processing on mainframes, including for example IBM and ICL versions, originally using punched cards for input. A processing run read a command file of SPSS commands and either a raw input file of fixed format data with a single record type, or a 'getfile' of data saved by a previous run. To save precious computer time an 'edit' run {{could be done to}} <b>check</b> <b>command</b> syntax without analysing the data. From version 10 (SPSS-X) in 1983, data files could contain multiple record types.|$|E
40|$|I. Ensemble Development Group: a) Produces {{activity}} planning {{software for}} in spacecraft; b) Built on Eclipse Rich Client Platform (open source development and runtime software); c) Funded by multiple sources including the Mars Technology Program; d) Incorporated {{the use of}} Agile Development. II. Next Generation Uplink Planning System: a) Researches the Activity Planning and Sequencing Subsystem for Mars Science Laboratory (APSS); b) APSS includes Ensemble, Activity Modeling, Constraint <b>Checking,</b> <b>Command</b> Editing and Sequencing tools plus other uplink generation utilities; c) Funded by the Mars Technology Program; d) Integrates all of the tools for APSS...|$|R
50|$|In the United Kingdom, the Data Communication Company, which {{transports}} {{the commands}} from the supplier to the smart meter, performs an additional anomality <b>check</b> on <b>commands</b> issued (and signed) {{by the energy}} supplier.|$|R
25|$|Inadequate <b>command</b> {{training}} and <b>checking</b> during the <b>command</b> upgrade of the commander.|$|R
50|$|Another WordStar {{emulation}} utility is 'WordStar Command Emulator for Microsoft Word', {{also known}} as 'WordStar for Word,' by Mike Petrie. Designed to work in conjunction with CtrlPlus, the Command Emulator adds many more WordStar commands to MS Word than CtrlPlus by itself, and also changes Word 97-XP's menus {{to be more like}} those of WordStar 7.0 for DOS, the last DOS version of WordStar. For example, Ctrl+K? was WordStar's word count command and Ctrl+QL was its spell <b>check</b> <b>command.</b> Hitting these commands in the WordStar Emulator within Word runs Word's equivalent commands. WordStar for Word also adds WordStar's block commands, namely Ctrl+KB to mark the beginning of a block, Ctrl+KK to mark the end, and Ctrl+KV to move it. Alternatively, Ctrl+KC could be used to copy the block. WordStar for Word works on all versions of Word from Word 97 through 2010.|$|E
40|$|Recently, a {{knowledge-based}} {{approach was}} used to develop a system called the Command Constraint Checker (CCC) for TRW. CCC was created to automate the process of verifying spacecraft command sequences. To <b>check</b> <b>command</b> files by hand for timing and sequencing errors is a time-consuming and error-prone task. Conventional software solutions were rejected when {{it was estimated that}} it would require 36 man-months to build an automated tool to check constraints by conventional methods. Using rule-based representation to model the various timing and sequencing constraints of the spacecraft, CCC was developed and tested in only three months. By applying artificial intelligence techniques, CCC designers were able to demonstrate the viability of AI as a tool to transform difficult problems into easily managed tasks. The design considerations used in developing CCC are discussed and the potential impact of this system on future satellite programs is examined...|$|E
40|$|Clomazone (Command®), {{bensulide}} (Prefar®), sulfentrazone, and halosulfuron treatments applied preemergence (PREE) provided {{very good}} control of prostrate pigweed (Amaranthus blitoides), lambsquarters (Chenopodium album), and common purslane (Portulaca oleracea) at better than 90 % at 5 weeks after treatment (WAT). Halosulfuron {{was effective in}} controlling all weeds better than 90 % at 7 WAT Carfentrazone was not effective against most of the weeds present in the test but appeared to be safe on cantaloupe. Postemergence (POST) treatments alone did not provide acceptable control of pigweeds but controlled lambsquarters and common purslane at 2 WAT. Halosulfuron and bentazon (Basagran®) applied POST following PREE treatments controlled most of the weeds better than 90 % through 7 WAT. Cantaloupe yields were highest with good weed control provided by PREE treatments followed by POST herbicide applications. Basagran at 0. 50 lb /A injured cantaloupe after applications but yields were not affected compared to the untreated <b>check.</b> <b>Command,</b> sulfentrazone, and halosulfuron caused cantaloupe injury after PREE applications. Basagran caused substantial crop injury after POST applications...|$|E
5000|$|... #Caption: PFC Muenzer of the 807th Medical <b>Command</b> <b>checks</b> on a Haitian girl ...|$|R
5000|$|Verification of {{the current}} status: <b>Check</b> whether the <b>command</b> is valid in {{executing}} a task.|$|R
5000|$|Unlike {{in other}} debuggers, {{there is no}} Watch window for {{monitoring}} variables; they must be <b>checked</b> via manual <b>commands.</b>|$|R
40|$|Recent {{development}} of softcore processors on Field Programmable Gate Arrays (FPGAs) provide customization of processor {{to the needs}} of target application over traditional pre-fabricated processors. Softcore processors are available in the form of softwares whose architecture and behavior are fully described by pre-designed and pre-tested intellectual properties (IP’s), these can be synthesized on FPGAs. They provide several advantages such as reduced cost, reduction in components, flexibility in choosing specific peripheral etc. Embedded systems are hardware and software components working together to perform a specific function. Now a day, designing an embedded system has become quite difficult due to tight constraints on area, power consumption, cost and size. Therefore, use of softcore processor is an ideal choice for the embedded system design. In this project, a soft processor (Microblaze) based embedded system is developed with RS- 232 serial interface, Ethernet interface, 32 MB SDRAM, 4 MB PROM (platform flash), 16 x 2 LCD interface, 8 digital inputs and 8 digital outputs. The embedded systems is connected to the internet and remotely controlled and monitored. The TCP/IP stack is ported on Microblaze and Embedded Webserver is developed on FPGA board using HTTP communication protocol. Ethernet connectivity is tested between Embedded Web server on Microblaze and Web client on PC. Messages sent from the client side can be displayed over LCD on Webserver. Client can send commands to board for controlling IO’s, for reading from RAM and for writing on RAM. Status <b>check</b> <b>command</b> sent by the client computer to Webserver updates the browser on PC to show status of IO’s. It can also be used as slave processor to provide Ethernet connectivity to any 8 - bit, 16 -bit and 32 - bit processors. TFTP server is also deployed in the Embedded Webserver Card so as to provide file transfer access to/from the client (Computer / Other Processor) with Barrel Shifter enabled in the Microblaze hardware...|$|E
5000|$|On FreeBSD systems this {{description}} and value can be <b>checked</b> by the <b>command</b> sysctl: sysctl -d net.inet.tcp.msl sysctl net.inet.tcp.mslwhich gets the result: net.inet.tcp.msl: Maximum segment lifetime net.inet.tcp.msl: 30000 ...|$|R
6000|$|The stampede was <b>checked</b> by the <b>command,</b> [...] "Halt!" [...] {{spoken in}} a [...] thunderous voice by the Gospodar. Instinctively all stopped. The [...] Gospodar Rupert spoke again: ...|$|R
6000|$|... 88. No {{places of}} {{strength}} remained to him {{south of the}} Alps but Pavia and Montferrat; and to hold these in <b>check,</b> and <b>command</b> the plains of Piedmont, the Lombard League built the fortress city, which, from the Pope who had maintained through all adversity the authority of his throne {{and the cause of}} the Italian people, they named [...] "Alessandria." ...|$|R
60|$|But Dick {{still stood}} irresolute; he was yet young {{to the more}} deplorable necessities of war, {{and the thought of}} old Lady Brackley <b>checked</b> the <b>command</b> upon his tongue. His own men became restive. Some of them cried on him by name; others, of their own accord, began to shoot; and at the first {{discharge}} poor Bennet bit the dust. Then Dick awoke.|$|R
40|$|The {{commanding}} of spacecraft is {{a potentially}} hazardous activity {{for the safety}} of the spacecraft. Present day control systems contain safety features in their commanding subsystem and in addition, strict procedures are also followed by operations staff. However, problems have occurred on a number of missions as a result of erroneous commanding leading in some cases to spacecraft contingencies and even to near loss of the spacecraft. The problems of <b>checking</b> <b>commands</b> in advance are increased by the tendency in modern spacecraft to use blocked/time-tagged commands and the increased usage of on-board computers, for which commands changing on-board software tables can radically change spacecraft or subsystem behavior. This paper reports on an on-going study. The study aims to improve the approach to safety of spacecraft commanding. It will show how ensuring 'safe' commanding can be carried out more efficiently, and with greater reliability, with the help of knowledge based systems and/or fast simulators. The whole concept will be developed based on the Object-Oriented approach...|$|R
40|$|The authors {{propose a}} typing system for tools and objects {{based on the}} {{comparison}} of attributes {{that are associated with}} objects with expressions on these attributes that are associated with tools. This system allows static type <b>checking</b> of <b>command</b> lines having arguments that can be simple objects, structured objects, or families of objects. The concepts are general enough to be used not only in software development environments, but also in other CAD environments. Anglai...|$|R
5000|$|The {{highest level}} {{language}} is User RPL, consisting of sequences of built-in postfix operations, optionally including loops and conditionals. Every User RPL <b>command</b> <b>checks</b> the stack for its particular arguments and returns an error {{if they are}} incorrect or not present.|$|R
50|$|The {{error is}} {{also contributed to}} a {{political}} arguments between Yevapatoria and Moscow over who should control the mission. Moscow won control responsibility, but Yevapatoria {{would be responsible for}} <b>checking</b> all transmitted <b>commands.</b> This further complicated the process of transmitting valid commands to the spacecraft.|$|R
5000|$|Flight Day 1 (Launch):After a 10-minute flight sequence, Antares {{launched}} Cygnus {{into orbit}} {{on the same}} plane as the space station, but significantly below it. Cygnus then deployed its solar arrays after separation from Antares. After a series of <b>checks,</b> ground controllers <b>commanded</b> Cygnus to begin increasing its altitude.|$|R
5000|$|Lint <b>checking</b> If the <b>command</b> line binary is {{installed}} for PHP, gPHPEdit {{can use it}} to do a lint check on the code being edited. If the command line binary finds a problem it will underline the appropriate line with a wavy red line (ala Microsoft Word's spell check).|$|R
40|$|This volume {{contains}} the papers {{presented at the}} Student Session of the 11 th European Agent Systems Summer School (EASSS) held on 2 nd of September 2009 at Educatorio della Providenza, Turin, Italy. The Student Session, organised by students, is designed to encourage student interaction and feedback from the tutors. By providing the students with a conference-like setup, both in the presentation and in the review process, students {{have the opportunity to}} prepare their own submission, go through the selection process and present their work to each other and their interests to their fellow students as well as internationally leading experts in the agent field, both from the theoretical and the practical sector. Table of Contents: Andrew Koster, Jordi Sabater Mir and Marco Schorlemmer, Towards an inductive algorithm for learning trust alignment... 5; Angel Rolando Medellin, Katie Atkinson and Peter McBurney, A Preliminary Proposal for Model <b>Checking</b> <b>Command</b> Dialogues... 12; Declan Mungovan, Enda Howley and Jim Duggan, Norm Convergence in Populations of Dynamically Interacting Agents... 19; Ak 1 ̆ 31 n G, Argumentation on Bayesian Networks for Distributed Decision Making.. 25; Michael Burkhardt, Marco Luetzenberger and Nils Masuch, Towards Toolipse 2 : Tool Support for the JIAC V Agent Framework... 30; Joseph El Gemayel, The Tenacity of Social Actors... 33; Cristian Gratie, The Impact of Routing on Traffic Congestion... 36; Andrei-Horia Mogos and Monica Cristina Voinescu, A Rule-Based Psychologist Agent for Improving the Performances of a Sportsman... 39...|$|R
50|$|The album title {{refers to}} a command of the Unix {{operating}} system, where fsck stands for file system <b>check</b> - a <b>command</b> used by system administrators if there {{is believed to be}} a problem with the file system (the term's tongue-in-cheek use among the hacker subculture is referenced in the Jargon File). Nevertheless, some critics took the title as a misspelling.|$|R
5000|$|The {{original}} Commodore DOS Wedge was a 1-KB program {{written in}} MOS 6502 assembly language. It {{resided in the}} otherwise unused memory block $CC00 - $CFFF (52224 - 53247) and worked by altering BASIC's [...] "CHRGET" [...] subroutine at $0073 (115) so that each character passing by the BASIC interpreter would be <b>checked</b> for wedge <b>commands,</b> and the associated [...] "wedged-in" [...] routines run if needed.|$|R
40|$|The FIBRE-pac (FMOS {{image-based}} reduction package) is an IRAF-based reduction {{tool for}} the fiber multiple-object spectrograph (FMOS) of the Subaru telescope. To reduce FMOS images, a number of special techniques are necessary because each image contains about 200 separate spectra with airglow emission lines variable in spatial and time domains, and with complicated throughput patterns for the airglow masks. In spite of these features, {{almost all of the}} reduction processes except for a few steps are carried out automatically by scripts in text format making it easy to <b>check</b> the <b>commands</b> step by step. Wavelength- and flux-calibrated images together with their noise maps are obtained using this reduction package. Comment: Accepted for publication in PASJ. 9 pages, 14 figure...|$|R
40|$|Making {{certain that}} {{spacecraft}} command sequences do not violate any constraints is often tedious and expensive {{in terms of}} both personnel and software development. To reduce this cost, we have pursued the development of a flexible system for specifying models of spacecraft behavior in response to commands as well as constraints on that behavior. The potential need for modeling complex spacecraft behavior required that the system be designed to be usable both on a conventional workstation and a parallel supercomputer. Finally, it needed to be intuitive enough for the the intended mission operations users to easily design sets of rules and models to automate tedious, resource-consuming constraint <b>checking</b> of <b>commands.</b> We have defined a Specification And Verification Environment (SAVE) for spacecraft flight rules...|$|R
40|$|High {{productivity}} {{required for}} operations teams to meet schedules Risk must be minimized. Scripting used to automate processes. Scripts perform essential operations functions. Automated Sequence Processor (ASP) was a grass-roots task built to automate the command uplink process System engineering task for ASP revitalization organized. ASP {{is a set}} of approximately 200 scripts written in Perl, C Shell, AWK and other scripting languages [...] ASP processes/checks/packages non-interactive commands automatically [...] Non-interactive commands are guaranteed to be safe and have been checked by hardware or software simulators [...] ASP <b>checks</b> that <b>commands</b> are non-interactive [...] ASP processes the commands through a command. simulator and then packages them if there are no errors [...] ASP must be active 24 hours/day, 7 days/week. ...|$|R
40|$|Abstract. In this paper, {{we present}} Famke. It is a {{prototype}} {{implementation of a}} strongly typed operating system written in Clean. Famke enables the creation and management of independent distributed Clean processes on a network of workstations. It uses Clean’s dynamic type system and its dynamic linker to communicate values of any type, e. g. data, closures, and functions (i. e. compiled code), between running applications in a type safe way. Mobile processes can be implemented using Famke’s ability to communicate functions. We have built an interactive shell on top of Famke that enables user interaction. The shell uses a functional-style command language that allows construction of new processes, and it type <b>checks</b> the <b>command</b> line before executing it. Famke’s type safe run-time extensibility makes it a strongly typed operating system that can be tailored to a given situation. ...|$|R
5000|$|The X52 {{was one of}} Saitek's {{flagship}} {{products and}} features both a Joystick and a Throttle. The distinguishing feature of the X52 is the large backlit blue (or green, on an x52 pro) LCD display on the throttle, which displays the mode it is configured, {{the name of the}} button being depressed and a chronograph function. The Multi-Function Display (MFD) screen can be used to <b>check</b> programmed <b>command</b> names and use the clock and stopwatch function for timing the legs of your flight plan.The joystick/throttle combination includes a number of controls, including trim wheels, a thumb operated slider, a mouse control and three eight-way hat switches, and a button under a flip-guard labeled [...] "Safe". The stick includes built in yaw/rudder control, which can be disabled in the case that the user has an alternate rudder control.|$|R
40|$|At the Dutch station Hoorn [...] Kersenboogerd, {{computer}} equipment {{is used for}} the safe and in time movement of trains. The {{computer equipment}} can be divided in two layers. A top layer offering an interface and means to help a human operator in scheduling train movement. And a bottom layer which <b>checks</b> whether <b>commands</b> issued by the top layer can safely be executed by the rail hardware and which acts appropriately on detection of a hazardous situation. The bottom layer is implemented with a programmable piece of equipment namely a Vital Processor Interlocking 1 (VPI). This paper introduces the most important features of the VPI at Hoorn [...] Kersenboogerd. This particular VPI is modelled in ¯CRL. Furthermore, the paper touches upon correctness criteria and tool support for VPIs, and suggests ways for verification of properties of VPIs. Experiments show that it is indeed possible to efficiently verify these correctness criteria. 1991 Mathematics subject classification: 68 Q 40, 68 Q 45. 1990 CR [...] ...|$|R
40|$|One of {{the current}} {{research}} for human-computer interface is natural language interface. It reduces users' amount of study of computer systems and helps users with little knowledge of computer to use computer systems. This paper describes {{the construction of a}} Japanese user interface for UNIX file handling operations. The user interface accepts Japanese sntence and generate a sequence of UNIX commands. This system includes specific knowledge of several domains : knowledge of functions of UNIX commands, methods for command combinations, and functions of Japanese words on a specific domain. Domain specific knowledge is used in two part of the system, the syntax and semantics analizer and the code generator. The syntax and semantics analizer selects an appropriate description for each word from the dictionary based on word restrictions and generates internal representations for the input Japanese sentences. The code generator transforms an internal representation into a UNIX command sequence, and when needed, uses pipe and redirection to modify the commands. During code generation, the system <b>checks</b> the <b>commands</b> execution results based on command dictionary description...|$|R
40|$|Embedded {{software}} {{has been}} developed specifically for controlling an Advanced Video Guidance Sensor (AVGS). A Video Guidance Sensor is an optoelectronic system that provides guidance for automated docking of two vehicles. Such a system includes pulsed laser diodes and a video camera, the output of which is digitized. From the positions of digitized target images and known geometric relationships, the relative position and orientation of the vehicles are computed. The present software consists of two subprograms running in two processors that are parts of the AVGS. The subprogram in the first processor receives commands from an external source, <b>checks</b> the <b>commands</b> for correctness, performs commanded non-image-data-processing control functions, and sends image data processing parts of commands to the second processor. The subprogram in the second processor processes image data as commanded. Upon power-up, the software performs basic tests of functionality, then effects a transition to a standby mode. When a command is received, the software goes into one of several operational modes (e. g. acquisition or tracking). The software then returns, to the external source, the data appropriate to the command...|$|R
5000|$|Justin Martyr, Irenaeus and Tertullian all spoke against polygamy, condemning it. Tertullian {{explicitly}} {{tackled the}} objection that polygamy was {{allowed for the}} patriarchs. He wrote, [...] "each pronouncement and arrangement is (the act) of {{one and the same}} God; who did then indeed, in the beginning, send forth a sowing of the race by an indulgent laxity granted to the reins of connubial alliances, until the world should be replenished, until the material of the new discipline should attain to forwardness: now, however, at the extreme boundaries of the times, has <b>checked</b> (the <b>command)</b> which He had sent out, and recalled the indulgence which He had granted". (De Monogamia chapt. VI.) According to chapter XVI of De Monogamia, Hermogenes thought it was allowed for a man to take several wives. Tertullian also made a direct attack on the polygamous practice of some cults in his work Adversus Hermogenem. This is the same Hermogenes mentioned above. Tertullian writes that he was a sect leader, who mixed Stoic, Gnostic and Christian views to create a new religion.|$|R
40|$|Real-Time Maude {{extends the}} {{rewriting}} logic-based Maude tool to support formal specification, simulation, and further formal analysis of real-time systems. The specification language of Real-Time Maude emphasizes expressiveness {{and ease of}} specification. The high-performance Real-Time Maude tool provides a range of analysis capabilities, including (timed) rewriting for prototyping, (time-bounded) explicit-state breadth-first search for reachability analysis, and time-bounded linear temporal logic model checking. Real-Time Maude has previously been used to model and analyze a set of advanced real-time systems, such as large communication protocols, complex wireless sensor networks, and scheduling algorithms. Each of these studies shows that Real-Time Maude has much to contribute in the modeling and analysis of distributed real-time systems. This master's thesis explores the use of Real-Time Maude to model and analyze time-dependent security protocols. I have modeled and analyzed two well known time-dependent cryptographic protocol: the benchmark Wide-mouthed-frog protocol, and the larger "commercial" Kerberos protocol. To analyze the protocols in a hostile environment, we need to model intruders. I have first defined a very general "Dolev-Yao" intruder, which can perform any number of actions in zero time. This leads to "Zeno" behaviors, and nontermination of our time-bounded analysis commands within reasonable time and space constraints. In this thesis, I have suggested to avoid such Zeno behaviors by restricting the intruders to perform at most n actions per time unit. The advantage of such a restricted intruder model is that the model is more intuitive and {{does not lead to}} "Zeno" behaviors, and that time-bounded search and model <b>checking</b> <b>commands</b> are guaranteed to terminate. Furthermore, since the analysis commands terminate, we can define a strategy that increases the intruder capacity after each "failed" command. In this way, all possible intruder behaviors are still "covered". Although such a strategy should be easy to implement, I have not had the time to do so. Instead, I gradually increased "by hand" the intruder capacity after analysis commands that did not find errors, and was able to discover all known flaws as well some new flaws that, {{to the best of my}} knowledge, have not been described previously. The models of Wide-mouthed frog and Kerberos in Real-Time Maude seems more intuitive, easier to understand, and more natural than other published work. Furthermore, we expressed advanced properties of the systems quite easily using Real-Time Maude' search commands or its model checker commands...|$|R
