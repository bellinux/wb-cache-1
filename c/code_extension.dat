40|516|Public
500|$|However, GameBrink.Com {{felt that}} the gameplay, {{user-friendly}} even to non-Japanese players, consists of too much repetitive button mashing despite featuring characters with different abilities. The <b>Code</b> <b>Extension</b> mode was considered imperfectly implemented, seeming {{as if it were}} [...] "tacked on [...] late in development", being totally optional yet difficult not to use to survive in the later missions. Calling the gameplay [...] "shallow", the site stated that [...] "the soundtrack would probably be a better purchase than the actual game". On its part, Siliconera noted that while the gameplay may seem complex for using every button on the controller, thirty minutes were enough to grasp how to play the game. The site felt the missions were designed with good pacing and replayability value, but added that hardcore role-playing game fans could dislike the lack of exploration, puzzle, and standard role-playing game principles.|$|E
50|$|Until {{the third}} standard, only the {{encoding}} method based on JIS X 0202 <b>code</b> <b>extension</b> was defined. This is something unusual {{as far as}} coded character sets go. In the fourth standard, encoding methods that do not use escape sequences {{for the purpose of}} <b>code</b> <b>extension</b> were defined.|$|E
5000|$|Explanation: In {{this section}} the word [...] "offence" [...] {{includes}} every act committed outside Pakistan which, if committed in Pakistan, would be punishable under this <b>Code.</b> <b>Extension</b> of Code to extraterritorial offences.|$|E
5000|$|Supports all tools {{specified}} in the Scalable Video <b>Coding</b> <b>extension.</b>|$|R
30|$|It is {{necessary}} to mention {{that some of these}} simulators are open source, giving opportunity to researchers to develop bespoke <b>code</b> <b>extensions.</b>|$|R
50|$|Version 3 of HEVC added one 3D profile: 3D Main. The February 2016 {{draft of}} the screen content <b>coding</b> <b>extensions</b> added seven screen content <b>coding</b> <b>extensions</b> profiles, three high {{throughput}} extensions profiles, and four scalable extensions profiles: Screen-Extended Main, Screen-Extended Main 10, Screen-Extended Main 4:4:4, Screen-Extended Main 4:4:4 10, Screen-Extended High Throughput 4:4:4, Screen-Extended High Throughput 4:4:4 10, Screen-Extended High Throughput 4:4:4 14, High Throughput 4:4:4, High Throughput 4:4:4 10, High Throughput 4:4:4 14, Scalable Monochrome, Scalable Monochrome 12, Scalable Monochrome 16, and Scalable Main 4:4:4.|$|R
50|$|It is also possible, {{based on}} the <b>code</b> <b>extension</b> techniques, to use the kanji set. In each G-buffer, the escape {{sequences}} to indicate the kanji set are listed below. Here, “ESC” refers to the control character “ESCAPE”.|$|E
5000|$|... 4-of-8 code extension: As an {{alternative}} to the IBM transceiver code (which is a 4-of-8 code with a Hamming distance of 2), it is also possible to define a 4-of-8 excess-3 <b>code</b> <b>extension</b> achieving a Hamming distance of 4, if only denary digits are to be transferred.|$|E
50|$|In August 2007, the United States Postal Service {{began an}} {{experimental}} program selling the plus zip <b>code</b> <b>extension</b> to businesses. The first company {{to do so}} was Saks Fifth Avenue, which received the zip code of 10022-7463 ("SHOE") for the eighth-floor shoe department in its flagship Fifth Avenue store.|$|E
50|$|On June 9, 2015, HLG was {{proposed}} to the JCT-VC for High Efficiency Video Coding (HEVC) {{and added to}} the June 2015 draft of the screen content <b>coding</b> <b>extensions.</b>|$|R
5000|$|Version 4: (December 22, 2016) Fourth {{approved}} {{version of}} the HEVC/H.265 standard which adds seven screen content <b>coding</b> <b>extensions</b> profiles, three high throughput extensions profiles, and four scalable extensions profiles.|$|R
50|$|Users can add {{features}} and change functionality in Nightingale by installing extensions. Extensions {{are similar to}} the Extensions for the Firefox browser and can be easily ported. Community <b>coded</b> <b>extensions</b> are available on The Nightingale Addons Page.|$|R
5000|$|In 1995, China National Information Technology Standardization Technical Committee {{set down}} the Chinese Internal <b>Code</b> <b>Extension</b> Specification (...) , Version 1.0, known as GBK 1.0, which is a slight {{extension}} of Codepage 936. The newly added 95 characters were not found in GB 13000.1-1993, and were provisionally assigned Unicode PUA code points.|$|E
5000|$|A DEC SIXBIT code {{including}} a few control characters [...] - [...] along with SO/SI, allowing <b>code</b> <b>extension</b> [...] - [...] was specified as ECMA-1 in 1963 (see below). Another, less common, variant is obtained by just stripping the high {{bit of an}} ASCII code in 32 - 95 range (codes 32 - 63 remain at their positions, higher values have 64 subtracted from them). Such variant was sometimes used on DEC's PDP-8 (1965).|$|E
5000|$|However, GameBrink.Com {{felt that}} the gameplay, {{user-friendly}} even to non-Japanese players, consists of too much repetitive button mashing despite featuring characters with different abilities. The <b>Code</b> <b>Extension</b> mode was considered imperfectly implemented, seeming {{as if it were}} [...] "tacked on … late in development", being totally optional yet difficult not to use to survive in the later missions. Calling the gameplay [...] "shallow", the site stated that [...] "the soundtrack would probably be a better purchase than the actual game". On its part, Siliconera noted that while the gameplay may seem complex for using every button on the controller, thirty minutes were enough to grasp how to play the game. The site felt the missions were designed with good pacing and replayability value, but added that hardcore role-playing game fans could dislike the lack of exploration, puzzle, and standard role-playing game principles.|$|E
40|$|In 1966, Wagner used {{computational}} search {{methods to}} construct a  [23, 14, 5] code. This code has been examined with much interest since that time, {{in hopes of}} finding a geometric construction and possible <b>code</b> <b>extensions.</b> In this article, we give a simple geometric construction for Wagner 2 ̆ 7 s <b>code</b> and consider <b>extensions</b> of this construction. <br /...|$|R
40|$|We give a {{simplified}} and self-contained {{treatment of the}} theory of BCH−codes. This allows us to make use of various recursive construction techniques and obtain a large number of linear codes with new parameters. Index Terms BCH <b>codes,</b> <b>extension,</b> lengthening, construction X, construction XX, cyclotomic cosets. ...|$|R
40|$|This memo {{describes}} an RTP Payload format for the ITU-T Recommendation H. 264 video codec and the technically identical ISO/IEC International Standard 14496 - 10 video codec, excluding the Scalable Video <b>Coding</b> (SVC) <b>extension</b> and the Multiview Video <b>Coding</b> <b>extension,</b> {{for which the}} RTP payload formats are defined elsewhere. The RTP payload format allows for packetization {{of one or more}} Network Abstraction Layer Units (NALUs), produced by an H. 264 video encoder, in each RTP payload. The payload format has wide applicability, as it supports applications from simple low bitrate conversational usage, to Internet video streaming with interleaved transmission, to high bitrate video-on-demand...|$|R
50|$|A naive way {{to solve}} this would be to {{maintain}} separate functions for each file format. Such a save function would take a drawing as input, traverse it, and encode into that specific file format. As this is done for each added different format, duplication between the functions accumulates. For example, saving a circle shape in a raster format requires very similar code no matter what specific raster form is used, and is different from other primitive shapes. The case for other primitive shapes like lines and polygons is similar. Thus, the code becomes a large outer loop traversing through the objects, with a large decision tree inside the loop querying the type of the object. Another problem with {{this approach is that}} it is very easy to miss a shape in one or more savers, or a new primitive shape is introduced, but the save routine is implemented only for one file type and not others, leading to <b>code</b> <b>extension</b> and maintenance problems.|$|E
5000|$|ISO/IEC JTC 1/SC 2 was {{established}} in 1987, originally with the title “Character Sets and Information Coding,” with the area of work being, “the standardization of bit and byte coded representation of information for interchange including among others, sets of graphic characters, of control functions, of picture elements and audio information coding of text for processing and interchange; <b>code</b> <b>extension</b> techniques; implementation of these coded representations on interchange media and transmission systems." [...] The standardization activities of the subcommittee were originally {{under the jurisdiction of}} ISO/TC 97. However, when the Joint Technical Committee, ISO/IEC JTC 1, {{was established}} in 1987 as a merger between ISO/TC 97, Information Technology, and IEC/TC 83, the standardization activity was transferred to the new subcommittee, ISO/IEC JTC 1/SC 2. Certain standards that are now {{under the jurisdiction of the}} ISO/IEC JTC 1/SC 2, such as ISO/IEC 646, were published before the creation of ISO/IEC JTC 1, under ISO/TC 97. The original working groups of ISO/IEC JTC 1/SC 2 were: WG 1 “Code Extension Techniques,” WG 2 “Multiple-octet Coded character set,” WG 3 “7-bit and 8-bit Codes,” WG 6 “Control Functions,” and WG 8 “Coded Representation of Picture and Audio Information.” Since then, the subcommittee has established or disbanded working groups in response to changing standardization needs within the field of coded character sets.|$|E
40|$|Software Defined Networks using OpenFlow have {{to provide}} a re- liable way to detect network faults and attacks. This {{technical}} report shows a formal analysis of correctness for an automated <b>code</b> <b>extension</b> technique used to extend OpenFlow networks with a logging mecha- nism that {{is used for the}} detection of faults and attacks. As presented in a companion paper, we applied the <b>code</b> <b>extension</b> techniques for a framework that can extend controller programs transparently, making possible on-line fault management, debugging as well as off-line and forensic analysis...|$|E
40|$|The goal of {{software}} product lines (SPLs) {{is to improve}} productivity, time-to-market, and quality of application development by leveraging the commonalities of systems within an application domain while managing their variations. SPLs package these commonalities and variations into a domain-specific platform (DSP), which may be customized through configuration settings or <b>code</b> <b>extensions.</b> Examples o...|$|R
50|$|MPEG {{has been}} {{research}}ing multi-view, stereoscopic, and 2D plus depth 3D video coding since the mid-1990s; the first {{result of this}} research is the Multiview Video <b>Coding</b> <b>extension</b> for MPEG-4 AVC that is currently undergoing standardization. MVC has been chosen by the Blu-ray disc association for 3D distribution. The format offers backwards compatibility with 2D Blu-ray players.|$|R
40|$|Modern {{computing}} {{and network}} environments demand {{a high degree}} of adaptability from applications. At run time, an application may have to face many changes: in conguration, in protocols used, in terms of the available resources, etc. Many such changes can only be adequately addressed through dynamic evolution of the software architecture of the application. In this paper, we propose a novel approach to dynamically evolve a software architecture based on run-time aspect oriented programming. In our framework, a system designer/administrator can control the architecture of an application by dynamically inserting and removing <b>code</b> <b>extensions.</b> It is even possible to replace a signicant part of the underlying middleware infrastructure without stopping the application. The novelty of this work is that it allows for a much more flexible development strategy as it delegates issues like middleware choice and adherence to an architectural specication to a framework enhanced by dynamic <b>code</b> <b>extensions...</b>|$|R
30|$|The {{performance}} of the source to relay channel {{plays an important role}} in the overall {{performance of}} co-operative relay networks [4, 5]. It is pointed out in [3] that <b>code</b> <b>extension</b> techniques provide better performance than code puncturing in the source to relay channel. In <b>code</b> <b>extension</b> techniques, optimal codewords can be transmitted over the source to relay channel to get the best performance. In code puncturing techniques, only punctured codewords can be transmitted over the source to relay channel, which results in a certain performance loss. Therefore, we design the rate-compatible LDPC codes for relay networks based on the extension technique.|$|E
40|$|ECMA/TC 1 participates very {{actively}} {{in the work}} of JTC 1 /SC 2 (previously ISO/TC 97 /SC 2) on code structure and <b>code</b> <b>extension,</b> and contributed numerous technical papers to SC 2 /WG 1, the group entrusted with the preparation of ISO 2022, the International Standard for <b>code</b> <b>extension</b> techniques. ECMA published its first Standard ECMA- 35 on the same subject in 1971. Three further editions in 1980, 1982 and 1985 reflected the progress achieved internationally, and the text of the 1985 edition was identical with that of the 1986 edition of ISO 2022. The present edition is technically almost identical with the 1985 edition of Standard ECMA- 35 but is completely rearranged and rewritten to make it more convenient to use as a reference document. The present edition of Standard ECMA- 35 is fully identical with the 1994 edition of ISO/IEC 2022...|$|E
40|$|Abstract. The {{implementation}} of a resistive-wall extension to the non-linear MHD-code JOREK via a coupling to the vacuum-field code STARWALL is presented along with first applications and benchmark results. Also, non-linear saturation {{in the presence of}} a resistive wall is demonstrated. After completion of the ongoing verification process, this <b>code</b> <b>extension</b> will allow to perform non-linear simulations of MHD instabilities in the presence of three-dimensional resistive walls with holes for limited and X-point plasmas. 1...|$|E
5000|$|Country of Origin: ISO 3166-1 alpha 2 <b>code,</b> with <b>extensions</b> for defunct {{countries}} ...|$|R
5000|$|As {{a result}} of the Scalable Video <b>Coding</b> <b>extension,</b> the {{standard}} contains five additional scalable profiles: Scalable Baseline, Scalable High, Scalable High Intra, Scalable Constrained Baseline and Scalable Constrained High Profile. These profiles are defined as a combination of the H.264/MPEG-4 AVC profile for the base layer (2nd word in scalable profile name) and tools that achieve the scalable extension: ...|$|R
5000|$|Matsushita Electric (Panasonic) prototyped the [...] "3D Full-HD Plasma Theater System" [...] on CES 2008. The {{system is}} a {{combination}} of a 103-inch PDP TV, a Blu-ray Disc player and shutter glasses. The new system transmits 1080i60 interlaced images for both right and left eyes, and the video is stored on 50-gigabyte Blu-ray using the MPEG-4 AVC/H.264 compression Multiview Video <b>Coding</b> <b>extension.</b>|$|R
40|$|In this paper, we give {{algorithms}} {{and methods}} of construction of self-dual codes over finite fields using orthogonal matrices. Randomization in the orthogonal group, and <b>code</b> <b>extension</b> are the main tools. Some optimal, almost MDS, and MDS self-dual codes over both small and large prime fields are constructed. Comment: presented in part in the 3 rd Sino-Korea International Conference on Coding Theory and Related Topics; submitted to IEEE trans. on Information Theor...|$|E
40|$|Abstract. Developing a {{distributed}} application for mobile resource constrained devices {{is a difficult}} and error-prone task that requires awareness of several system-level details (e. g., fault-tolerance, [...] .). Several mobile middleware solutions addressing these issues have been proposed. However, they rely on either significant changes in application structure, ex-tensions to the programming language syntax and semantics, domain specific languages, cumbersome development tools, {{or a combination of}} the above. The main disadvantages of these approaches are lack of transparency and reduced portability. In this paper we describe our work on enabling transparent integration between applications and middleware without changing application structure, extending the programming language or otherwise reducing portability. We used the OBI-WAN middleware but our solutions are general. To achieve this goal we employ program analysis and transformation techniques for extending application code with hooks for calling middleware services. Application <b>code</b> <b>extension</b> is per-formed automatically at compile-time by a <b>code</b> <b>extension</b> tool integrated with the development environment tool set. We describe the implementation of our. NET and Java prototypes and discuss evaluation results. Key words: distributed mobile applications, fault-tolerance, incremental ob-ject replication, transparent middleware integration, program transformation, aspect-oriented programming, integrated development environment...|$|E
40|$|In this paper, we prove {{existence}} of optimal complementary dual codes (LCD codes) over large finite fields. We also give methods to generate orthogonal matrices over finite fields and then {{apply them to}} construct LCD codes. Construction methods include random sampling in the orthogonal group, <b>code</b> <b>extension,</b> matrix product codes and projection over a self-dual basis. Comment: This paper was presented in part at the International Conference on Coding, Cryptography and Related Topics April 7 - 10, 2017, Shandong, Chin...|$|E
5000|$|GB/T 20542-2006 ("Tibetan <b>Coded</b> Character Set <b>Extension</b> A") and GB/T 22238-2008 ("Tibetan <b>Coded</b> Character Set <b>Extension</b> B") are Chinese {{national}} standards {{that use the}} PUA to encode precomposed Tibetan ligatures.|$|R
5000|$|As {{a result}} of the Multiview Video <b>Coding</b> (MVC) <b>extension,</b> the {{standard}} contains two multiview profiles: ...|$|R
40|$|Existing RAID- 6 <b>code</b> <b>extensions</b> {{assume that}} {{failures}} are independent and instantaneous, overlooking the underlying mechanism of multifailure occurrences. Also, {{the effect of}} reconstruction window is ignored. Additionally, these <b>coding</b> <b>extensions</b> have not been adapted to occurrence patterns of failure in real-world applications. As a result, the third parity drive is set to handle the triple-failure scenario; however, the lower level failure situations have been left unattended. Therefore, a new methodology of extending RAID- 6 codes named RAID- 6 Plus with better compromise has been studied in this paper. RAID- 6 Plus (Deng et al., 2015) employs short combinations which can greatly reuse overlapped elements during reconstruction to remake the third parity drive. A sample <b>extension</b> <b>code</b> called RDP+ is given based on RDP. Moreover, we extended the study to present another extension example called X-code+ which has better update penalty and load balance. The analysis shows that RAID- 6 Plus is a balanced tradeoff of reliability, performance, and practicality. For instance, RDP+ could achieve speedups as high as 33. 4 % {{in comparison to the}} RTP with conventional rebuild, 11. 9 % in comparison to RTP with the optimal rebuild, 47. 7 % in comparison to STAR with conventional rebuild, and 26. 2 % for a single failure rebuild...|$|R
