58|337|Public
2500|$|The [...] {{statement}} discontinues {{the current}} iteration {{of the current}} <b>control</b> <b>statement</b> and begins the next iteration.|$|E
50|$|This style {{puts the}} brace {{associated}} with a <b>control</b> <b>statement</b> on the next line, indented to {{the same level as}} the <b>control</b> <b>statement.</b> Statements within the braces are indented to the next level.|$|E
5000|$|... #Caption: The crowd <b>control</b> <b>statement</b> {{issued by}} the NCAA in 2002 ...|$|E
40|$|Code clone {{detection}} is {{an important}} area of research as reusability is {{a key factor in}} software evolution. Duplicate code degrades the design and structure of software and software qualities like readability, changeability, maintainability. Code clone increases the maintenance cost as incorrect changes in copied code may lead to more errors. In this paper we address structur al code similarity detection and propose new methods to detect structural clones using structure of <b>control</b> <b>statements.</b> By structure we meanorder of <b>control</b> <b>statements</b> used in the source code. We have considered two orders of control structures: (i) Sequence of <b>control</b> <b>statements</b> as it appears (ii) Execution flow of <b>control</b> <b>statements.</b> Keywords: <b>Control</b> statements;Control structure;Execution flow;Similarity value;Structural similarity...|$|R
5000|$|Where only {{a single}} <b>statement</b> is being <b>controlled,</b> <b>statement</b> {{modifiers}} provide a more-concise syntax: ...|$|R
40|$|The Aircraft Noise Prediction Program's High Speed Research {{prediction}} system (ANOPP-HSR) is introduced. This mini-manual is {{an introduction}} which gives {{a brief overview}} of the ANOPP system and the components of the HSR prediction method. ANOPP information resources are given. Twelve of the most common ANOPP-HSR <b>control</b> <b>statements</b> are described. Each <b>control</b> <b>statement's</b> purpose and format are stated and relevant examples are provided. More detailed examples of the use of the <b>control</b> <b>statements</b> are presented in the manual along with ten ANOPP-HSR templates. The purpose of the templates is to provide the user with working ANOPP-HSR programs which can be modified to serve particular prediction requirements. Also included in this manual is a brief discussion of common errors and how to solve these problems. The appendices include the following useful information: a summary of all ANOPP-HSR functional research modules, a data unit directory, a discussion of one of the more complex <b>control</b> <b>statements,</b> and input data unit and table examples...|$|R
50|$|They {{were most}} often used {{within the context of}} an IF <b>control</b> <b>statement.</b>|$|E
50|$|K&R style avoids {{this problem}} by keeping the <b>control</b> <b>statement</b> and the opening brace on the same line.|$|E
50|$|This style {{puts the}} brace {{associated}} with a <b>control</b> <b>statement</b> on the next line, indented. Statements within the braces are indented to {{the same level as}} the braces.|$|E
5000|$|For the IEBCOPY utility, the {{required}} job <b>control</b> <b>statements</b> {{for a copy}} are as follows: ...|$|R
5000|$|IEBUPDTE {{accepts a}} PARM {{parameter}} coded on the EXEC statement, NEW or MOD. NEW {{indicates that the}} utility <b>control</b> <b>statements</b> and the input data are contained in the SYSIN DD statement, so no SYSUT1 DD statement is needed. MOD indicates that the SYSIN DD statement contains only utility <b>control</b> <b>statements,</b> without input data. Therefore, the SYSUT1 DD statement is required to define the input data set.|$|R
5000|$|Control statement; some <b>control</b> <b>statements</b> {{pertain to}} devices, while others specify {{the type of}} {{simulation}} or output format.|$|R
5000|$|To get several branch {{currents}} and or voltages, {{it is possible}} to use a print <b>control</b> <b>statement</b> having the general form [...]PRINT DC VAR1 VAR2……Where VAR1, VAR2……… represent all the variables of interest. The default output is not supplied when the ckt file includes a [...]PRINT DC statement. The [...]PRINT DC statement should also be accompanied by a source <b>control</b> <b>statement</b> governing the value of an independent voltage or current source.Pspice has capability for printing and plotting of output voltages or currents. For dc sweep and transient analysis, the output voltages and currents can be obtained by the following statements:- ...|$|E
5000|$|In Scheme, {{definition}} {{and scope of the}} [...] <b>control</b> <b>statement</b> is explicit (and only arbitrarily named 'return' {{for the sake of the}} example). The following is a direct translation of the Ruby sample.|$|E
50|$|K&R style {{prevents}} {{another common}} error suffered {{when using the}} standard Unix line editor, ed. A statement mistakenly inserted between the <b>control</b> <b>statement</b> and the opening brace of the loop block turns {{the body of the}} loop into a single trip.|$|E
5000|$|IEBUPDTE {{uses the}} same job <b>control</b> <b>statements</b> {{required}} by most IEB-type utilities. The only exceptions are as follow: ...|$|R
40|$|The {{detection}} of parallelism {{is based on}} the dependence analysis of the program. One of the key problems is to partition the program into independent subtasks in the presence of <b>control</b> <b>statements</b> (MIMD). In this paper the nonstructured <b>control</b> <b>statements</b> are converted into structured ones. In this way, a large block of statements is obtained, and the control dependences of the program are easily converted into manageable parallel tasks...|$|R
50|$|Listing <b>control</b> <b>statements</b> provide {{instructions}} for formatting both the listing {{generated by the}} preprocessor and the listing generated by the compiler.|$|R
5000|$|The {{optional}} <b>control</b> <b>statement</b> {{affects the}} output format and written as : When ‘list’ gives {{a summary of}} elements, ‘node’ gives a summary of connection while “no page” suppresses paging. It is usual to include [...]option no page to conserve paper.|$|E
50|$|Deadline is {{a special}} case of batch. A {{deadline}} run looks {{just like any other}} batch run except that a deadline time is specified on the @RUN or @START <b>control</b> <b>statement.</b> The deadline time is used in conjunction with the maximum SUPS (time estimate) on the <b>control</b> <b>statement.</b> A deadline job runs at normal batch priorities unless or until it appears that it could miss its deadline time. Then the more the mismatch between time until the deadline and remaining SUPS, the higher the priority. While deadline can’t totally shut off transactions and has no effect on real time, it can effectively shut off most other processing in the system if necessary to achieve its goal.|$|E
50|$|Before The Zone's foundation, renegade hecklers caused {{controversy}} by shouting controversial cheers {{that resulted}} in the Big Ten issuing a crowd <b>control</b> <b>statement.</b> Members of The Zone currently strive to conduct themselves in a manner to avoid such incidents in the future.|$|E
5000|$|The type of {{simulation}} {{performed by}} PSpice {{depends on the}} source specifications and <b>control</b> <b>statements.</b> PSpice supports the following types of analyses: ...|$|R
40|$|In this paper, {{we propose}} {{a method to}} detect {{duplicate}} codes based on structure and content of <b>control</b> <b>statements</b> present in the source codes. The proposed method efficiently finds all types of clones. Similarity between two programs is identified by comparing metrics of programs. Metric of a program is computed using <b>control</b> <b>statements,</b> operators and operands present in the program. Proposed method is independent of programming languages. This approach is also useful to detect plagiarized programs in academic environment...|$|R
50|$|<b>Control</b> <b>statements,</b> which specify {{options in}} {{assembly}} {{and execution of}} the program, and the choice of output {{of the results of}} the calculations performed.|$|R
5000|$|The [...] {{statement}} discontinues {{the current}} iteration {{of the current}} <b>control</b> <b>statement</b> and begins the next iteration. The following [...] loop in the code below reads characters by calling , skipping the statements {{in the body of}} the loop if the characters are spaces: ...|$|E
5000|$|The [...] {{statement}} discontinues {{the current}} iteration {{of the current}} <b>control</b> <b>statement</b> and begins the next iteration.int ch;while ((ch = Console.Read (...) [...] ) != -1){ if (ch == ' ') continue; // Skips {{the rest of the}} while-loop // Rest of the while-loop ...} ...|$|E
5000|$|The ICFR {{rating is}} {{captured}} for each <b>control</b> <b>statement.</b> Larger companies typically {{have hundreds of}} significant accounts, risk statements, and control statements. These have a [...] "many to many" [...] relationship, meaning risks can apply to multiple accounts and controls can apply to multiple risks.|$|E
50|$|The type of {{simulation}} {{performed by}} PSpice {{depends on the}} source specifications and <b>control</b> <b>statements.</b> The analyses usually executed in PSpice are listed below.|$|R
5000|$|The {{following}} example {{shows the}} <b>control</b> <b>statements</b> that instruct the OS/360 Linkage Editor to link an overlay program, indented to show structure (segment names are arbitrary): ...|$|R
5000|$|OS 2200 {{time-sharing}} {{sessions are}} called demand (from [...] "on demand") runs. They {{use the same}} control language as batch runs with a few additions known as [...] "immediate" [...] <b>control</b> <b>statements.</b> Immediate <b>control</b> <b>statements</b> use the [...] "@@" [...] sentinel which indicates that {{they are to be}} executed immediately even if a program is running. While they can be used to create or assign files, the most important ones allow a demand user to error terminate a running program or even send it a signal.|$|R
5000|$|... (* Example Allman code {{indenting}} {{style in}} Pascal *)procedure dosomething(x, y: Integer);begin while x = y do begin something (...) somethingelse (...) end;end;Consequences of this style {{are that the}} indented code is clearly set apart from the containing statement by lines that are almost all whitespace and the closing brace lines {{up in the same}} column as the opening brace. Some people feel this makes it easy to find matching braces. The blocking style also delineates the block of code from the associated <b>control</b> <b>statement.</b> Commenting out or removing a <b>control</b> <b>statement</b> or block of code, or code refactoring, are all less likely to introduce syntax errors via dangling or missing braces. Also, it is consistent with brace placement for the outer-function block.|$|E
5000|$|Advocates of {{this style}} {{sometimes}} {{refer to it}} as [...] "the one true brace style" [...] (abbreviated as 1TBS or OTBS). The main difference from the K&R style is that the braces are not omitted for a <b>control</b> <b>statement</b> with only a single statement in its scope.|$|E
5000|$|Complex chomski {{constructs}} are possible, {{allowing it}} {{to serve as a}} simple, but highly specialised, programming language. Chomski has only one flow <b>control</b> <b>statement</b> (apart from the test structures , , [...] etc.), namely the check command, which jumps back to the @@ label (no other labels are permitted).|$|E
5000|$|<b>Control</b> <b>statements</b> , , and [...] are similar, {{but have}} {{extended}} functions, e.g., a [...] that takes non-integer cases, [...] and [...] supporting pattern matching and conditionally unwrapping optionals, etc.|$|R
5000|$|Ezhil (எழில்) {{keywords}} {{and statements}} are chosen to closely represent {{in the computer}} programs, the same chain of reasoning and logic followed (SVOA - Subject-Verb-Object order) in Tamil language. The resulting syntax is noticeable feature in that the predicate followed by the expression like in LISP 4, which is a natural way of reasoning by the Tamil language grammar. Conditional Statements are modeled after the IF-ELSEIF-ELSE <b>statement</b> [...] Loop <b>control</b> <b>statements</b> deriving from the WHILE statements are chosen. The function declaration syntax is kept simple. Details include the print statement, and the flow <b>control</b> <b>statements</b> below.|$|R
40|$|This paper {{presents}} our {{technique for}} automatically decompiling Java bytecode into Java source. Our technique reconstructs source-level expressions from bytecode, and reconstructs readable, high-level <b>control</b> <b>statements</b> from primitive gotolike branches. Fewer {{than a dozen}} simple coderewriting rules reconstruct the high-level statements. ...|$|R
