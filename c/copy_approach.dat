11|123|Public
40|$|The {{implementation}} of the real remoteexperiments across the Internet into teaching process, up tillnow not available, enables introduction of Integrated e-Learning, composed of three components: the real remoteexperiments across the Internet, the simulation applets andthe electronic interactive textbooks. We present here theprospective remote laboratory system with data transferusing Intelligent School Experimental System (ISES) ashardware and ISES WEB Control kit as software. Thisapproach enables the simple construction of remoteexperiments without building any hardware and virtuallyno programming, only with paste and <b>copy</b> <b>approach</b> of prebuilttypical blocks as camera view, controls, graphs,displays etc. In conclusion we summarize the achievedexperience with remote experiments...|$|E
40|$|Abstract— The {{implementation}} of the real remote experiments across the Internet into teaching process, up till now not available, enables introduction of Integrated e-Learning, composed of three components: the real remote experiments across the Internet, the simulation applets and the electronic interactive textbooks. We present here the prospective remote laboratory system with data transfer using Intelligent School Experimental System (ISES) as hardware and ISES WEB Control kit as software. This approach enables the simple construction of remote experiments without building any hardware and virtually no programming, only with paste and <b>copy</b> <b>approach</b> of pre-built typical blocks as camera view, controls, graphs, displays etc. In conclusion we summarize the achieved experience with remote experiments...|$|E
40|$|The first Slovak e-laboratory {{with real}} remote {{interactive}} experiments {{with the data}} transfer is presented. The laboratory uses the unified approach as the hardware used is ISES (Internet School Experimental System) and its modules, the software WEB ISES KIT CONTOL, enabling {{the establishment of the}} server-client connection based on www pages and Java applets. The unique quality of the system is its simplicity both in the use (uses only common browser and Java installed and active) and in the compiling (using the paste and <b>copy</b> <b>approach</b> of the pre built building blocks). The laboratory is oriented on the Natural science experiments and at the present stage of development covers the experiments fro...|$|E
40|$|AbstractA <b>copying</b> <b>approach</b> to {{ellipsis}} is presented, {{whereby the}} locus of copying is not a level of derived syntactic structure (LF), but rather the derivation itself. The ban on preposition stranding in sprouting follows without further stipulation, and other, seemingly structure sensitive, empirical generalizations about elliptical constructions, including the preposition stranding generalization, follow naturally as well. Destructive operations which ‘repair’ non-identical antecedents are recast in terms of exact identity of derivations with parameters. In {{the context of a}} compositional semantic interpretation scheme, the derivational <b>copying</b> <b>approach</b> to ellipsis presented here is revealed to be a particular instance of a proform theory, thus showing that the distinctions between, and arguments about, syntactic and semantic theories of ellipsis need to be revisited...|$|R
40|$|The SLG-WAM {{implements}} tabling by freezing the WAM stacks: this implementation techniquehas {{a reasonably}} small execution overhead, {{but is not}} easy to implement on top of anexisting Prolog system. We here propose a new approach to the implementation of tabling:the <b>Copying</b> <b>Approach</b> to Tabling. CAT interferes absolutely not with normal Prolog executionand can be introduced in an existing Prolog syste...|$|R
40|$|The <b>copying</b> <b>approach</b> to tabling (CAT) is an {{alternative}} to SLG-WAM and based on incrementally copying the areas that the SLG-WAM freezes to preserve execution states of suspended computations. The main advantage of CAT over the SLG-WAM is that support for tabling {{does not affect the}} speed of the underlying abstract machine for strictly non-tabled execution. The disadvantage of CA...|$|R
40|$|The {{reliability}} and availability of replicated data can often be increased by generating new replicas when some become inaccessible due to system malfunctions. This technique {{has been used in}} the Regeneration Algorithm, a replica control protocol based on file regeneration. The read and write availabilities of replicated data managed by the Regeneration Algorithm are evaluated and two new regeneration protocols are presented that over-come some of its limitations. The first protocol combines regeneration and the Av ailable <b>Copy</b> <b>approach</b> to improve availability of replicated data. The second combines regen-eration and the Dynamic Voting approach to guarantee data consistency in the presence of networ k par titions while maintaining a high availability. Expressions for the avail-abilities of replicated data managed by both protocols are der ived and found to improve significantly on the availability achieved using extant consistency protocols...|$|E
40|$|Cluster of {{workstations}} {{is one of}} {{the most}} popular architectures in high performance computing, thanks to its cost-to-performance effectiveness. As multi-core technologies are becoming mainstream, more and more clusters are deploying multicore processors as the build unit. In the latest Top 500 supercomputer list published in November 2008, about 85 % of the sites use multi-core processors from Intel and AMD. Message Passing Interface (MPI) {{is one of the}} most popular programming models for cluster computing. With increased deployment of multi-core systems in clusters, it is expected that considerable communication will take place within a node. This suggests that MPI intra-node communication is going to play a key role in the overall application performance. This dissertation presents novel MPI intra-node communication designs, including user level shared memory based approach, kernel assisted direct <b>copy</b> <b>approach,</b> and efficient multi-core aware hybrid approach. The user level shared memory base...|$|E
40|$|Data sharing {{refers to}} a general {{distributed}} architecture for high performance transaction processing. The nodes of a data sharing system are locally coupled via a high-speed interconnect and can directly access all disks and thus the entire database. While concurrency and coherence control protocols for data sharing have been discussed in previous work, the important area of recovery has mostly been ignored. This paper discusses the new problems for crash and media recovery {{that have to be}} addressed in data sharing systems. Recovery is complicated by dependencies on other functions such as buffer management and concurrency control. Furthermore, a global log file is to be constructed where the modifications of committed transactions are reflected in chronological order. New logging and recovery protocols are proposed for loosely coupled data sharing systems that employ the primary <b>copy</b> <b>approach</b> for concurrency/coherence control. A comparison with existing data sharing systems shows that our protocols support high performance during normal processing as well as efficient recovery to provide high availability...|$|E
40|$|This paper {{addresses}} {{the problem of}} garbage collection in persistent object stores that implement multiple levels of security (MLS). The proposed approach is able to preserve referential integrity, while ensuring that security is not violated. We first discuss some general principles that should underlie any approach to garbage collection in secure environments. Then, we present a secure garbage collection algorithm, based on the <b>copying</b> <b>approach...</b>|$|R
50|$|The Kodak verifax, is a photo <b>copying</b> <b>approach</b> {{that uses}} a wet {{colloidal}} diffusion transfer technique patented by Yutzy, H.C. and Yackel, E.C. (1947) The light source is projected to the top crossing the negative being reflected -more or less, according to the color- against the original to be copied exposing the negative. Has a base that contains the recipient with the liquid developer and the exposure Timer.|$|R
40|$|This paper {{presents}} a unification procedure which eliminates the redundant copying of structures {{by using a}} lay incremental <b>copying</b> <b>approach</b> to achieve structure sharing. Copying of structures accounts for {{a considerable amount of}} the total processing time. Several methods have been proposed to minimize the amount of necessaxy copying. Lazy Incremental Copying (LIC) is presented as a new solution to the copying problem. It synthesizes ideas of lazy copying with the notion of chronological dereferencing for achieving a high amount of structure sharing...|$|R
40|$|Closely coupled systems aim {{at a more}} {{efficient}} communication and cooperation between processing nodes compared to loosely coupled systems. This {{can be achieved by}} using globally shared semiconductor memory to speed up the exchange of messages or to store global data structures. For distributed database processing, the database sharing (shared disk) architecture can benefit most from such a close coupling. We present a detailed simulation study of closely coupled database sharing systems. A shared store called Global Extended Memory (GEM) is used for system-wide concurrency and coherency control, and to improve I/O performance. The performance of such an architecture is evaluated and compared with loosely coupled database sharing systems employing the primary <b>copy</b> <b>approach</b> for concurrency and coherency control. In particular, we study the impact of different update strategies (FORCE vs. NOFORCE) and workload allocation schemes (random vs. affinity-based routing). The use of shared disk caches implementing a global database buffer is also considered. Simulation results will be presented for synthetically generated debit-credit workloads and a real-life workload represented by a database trace. 1...|$|E
40|$|Maintaining in a {{consistent}} state multiple {{copies of the}} same data is a complex task, especially when the copies reside on sites that can be separated from each other by network partitions. All existing replication controls that tolerate network partitions use quorums to provide mutual exclusion and prevent inconsistent updates. Unfortunately these protocols require a minimum of n + 2 voting sites to guarantee that the data will remain accessible {{in the presence of}} n site failures. As a result, they provide much lower data availabilities than protocols that exclude communication failures. We present here a replication protocol that extends the available <b>copy</b> <b>approach</b> to environments where communication failures may cause network partitions. Our protocol assumes that replicas monitor the communication paths linking them with their peers and can therefore detect network partitions. As a result, each individual replica can safely establish whether it has remained up to date or is likely to have missed some updates. We evaluate under standard Markovian assumptions the availability of a replicated file consisting of two replicas managed by our robust available copy protocol when the two replicas are separated by one gateway. We find our protocol to perform much better than (1) dynamic-linear voting with three replicas, (2) dynamic-linear voting with two replicas and one witness, (3) voting with ghosts with two replicas, and (4) voting with bystanders with two replicas...|$|E
40|$|The ALICE HLT uses a data {{transport}} framework {{based on}} the publisher-subscriber message principle, which transparently handles the communication between processing components over the network and between processing components on the same node via shared memory with a zero <b>copy</b> <b>approach.</b> We present {{an analysis of the}} performance in terms of maximum achievable data rates and event rates as well as processing capabilities during Run 1 and Run 2. Based on this analysis, we present new optimizations we have developed for ALICE in Run 2. These include support for asynchronous transport via Zero-MQ which enables loops in the reconstruction chain graph and which is used to ship QA histograms to DQM. We have added asynchronous processing capabilities in order to support long-running tasks besides the event-synchronous reconstruction tasks in normal HLT operation. These asynchronous components run in an isolated process such that the HLT as a whole is resilient even to fatal errors in these asynchronous components. In this way, we can ensure that new developments cannot break data taking. On top of that, we have tuned the processing chain to cope with the higher event and data rates expected from the new TPC readout electronics (RCU 2) and we have improved the configuration procedure and the startup time in order to increase the time where ALICE can take physics data. We analyze the maximum achievable data processing rates taking into account processing capabilities of CPUs and GPUs, buffer sizes, network bandwidth, the incoming links from the detectors, and the outgoing links to data acquisition. Comment: 8 pages, 6 figures, contribution to CHEP 2016 conferenc...|$|E
5000|$|Multiple <b>copies</b> who <b>approach</b> Athena on {{the rebel}} basestar, {{asking her to}} lead a {{rebellion}} against the Sixes. Athena expresses disgust with their typical Eight fickleness.|$|R
40|$|This paper {{considers}} a fingerprinting system where 2 nRW distinct Gaussian fingerprints {{are embedded in}} respective copies of an n-dimensional i. i. d. Gaus-sian image. Copies are distributed to customers in digital form, using RQ bits per image dimension. By means of a coding theorem, a rate region for the pair (RQ, RW) is established such that (i) the average quadratic distortion be-tween the original image and each distributed copy does not exceed a specified level; and (ii) the error probability in decoding the embedded fingerprint in the distributed <b>copy</b> <b>approaches</b> zero asymptotically in n...|$|R
50|$|In 1999, Luckett made {{headlines}} {{when he won}} a court battle against the Government of Nova Scotia when he sought to keep his Bedford store open on Sunday. To circumvent Nova Scotia's Sunday shopping laws, Luckett registered sections of his Bedford store as separate businesses. He <b>copied</b> this <b>approach</b> at his Halifax store {{when it opened in}} 2004. In October 2006 the province's Sunday shopping restrictions were over-turned after both Sobeys and Atlantic Superstore <b>copied</b> Luckett's <b>approach</b> to several of their supermarkets, forcing the government to enact restrictions that were successfully contested in court. In 2014, Pete's Frootique became Pete's Fine Foods.|$|R
40|$|Purpose - In this article, message appeals {{along with}} the moderating effect of gender are {{examined}} on frequently used measures of ad effectiveness (i. e. ad likability, attitude to the issue, and behavioral intention) in the emerging domain of pro-environmental social advertising. The paper aims to discuss these issues. 			Design/methodology/approach - This study employed a between-subjects 2 (gender) × 3 (message appeal) factorial design, administered through a commercial online consumer panel firm based in the USA, which included 444 respondents across three markets: Australia, the UK and the USA. 			Findings -Results show that of three frequently used message appeals (rational, negative emotional, and positive emotional), rational ad appeals are not as effective as emotional appeals. The study also shows that females respond more strongly to negative emotional appeals than males, {{while there is no}} significant difference in how males and females responded to positive emotional or rational ad appeals. In addition, the study demonstrates that the measure of ad likability, which is frequently used as a reliable copy-test measure in commercial marketing situations, is not a valid measure of ad effectiveness in the context of social advertising. 			Research limitations/implications - While the study included participants from three countries, Australia, the UK and the USA, the obvious limitation of the experimental design lies in the limited sample size. Further, while the ads' cognitive processing load was kept consistent across the three conditions, it may be possible that linguistic nuances across these markets might affect the ads' processing demands from one market to another. The consistency of the study's manipulation checks, however, might serve to offer support for the <b>copy</b> <b>approach</b> taken here. 			Originality/value - This study reinforces previous studies in both the commercial and social marketing fields that suggest practitioners should be cautious of placing too much emphasis on this measure as an indicator of future ad performance...|$|E
5000|$|The <b>copy</b> {{and paste}} <b>approach</b> {{often leads to}} large methods (a bad code smell).|$|R
50|$|As {{the evening}} {{deadline}} for her <b>copy</b> <b>approaches,</b> Kate realizes that she cannot do Monique's assignment, and avoids being fired by voluntarily quitting {{on the spot}} with a hasty apology. Back at home, she prepares for a blind date with a man named Rob. A montage of everything Kate and Adam went through together—the highs and the lows of their relationship—plays in her mind. The scene then cuts to another gallery opening of Adam's. Kate shows up, having realized that the timing is finally right and that she and Adam were meant to be. Adam and Kate reconcile with a kiss and begin their relationship afresh, each a little wiser for the wear.|$|R
40|$|Abstract — Texture {{synthesis}} through so-called ‘smart copying’ {{requires a}} seamless meshing of texture subparts. Current systems first select subparts {{that seem to}} globally fit well and then optimise the cut between them on a rather local scale. This order of first selecting patches and then caring about the seamless meshing reduces one’s leeway {{in the choice of}} seamless cuts to a small zone of overlap between the patches. Therefore, even in the latest and smartest of smart <b>copying</b> <b>approaches</b> seams still tend to show up in the results. Here we present an approach that first looks for promising cuts, and uses these as the point of departure. It is shown that even a simple criterion for the quality of seams already supports high-quality smart copying and texture tessellation. Index Terms – texture synthesis, smart copying, seamless cuts, texture tessellation. I...|$|R
40|$|We {{describe}} how reachability-based orthogonal persistence can be supported even in uncooperative implementations of languages such as C and C++, {{where there is}} no support for accurate discovery of transient roots. Such ambiguous transient roots preclude the usual <b>copying</b> <b>approach</b> to promotion of objects from transient to persistent by reachability from wellknown persistent roots [Atkinson et al. 1983]. Our approach extends Bartlett's mostly-copying garbage collector [Bartlett 1988; 1989] to manage both transient objects and resident persistent objects, and to perform the reachability closure necessary for stabilization in a mostly-copying fashion. The only requirement, necessary anyway for persistence, is accurate discovery of pointers in heap-allocated objects. Such support can be obtained through direct compiler assistance, extracted from debugging information, or provided explicitly by the programmer. We also consider how the garbage collector can inform the buffer manager of persis [...] ...|$|R
50|$|In time TV-am simply <b>copied</b> the BBCs <b>approach,</b> and Breakfast Time {{became less}} sure-footed, losing {{some of its}} {{friendly}} accessibility as it strained to be more serious in tone.|$|R
5000|$|Neo-psychedelia (or [...] "acid punk") is {{a diverse}} style {{of music that}} {{originated}} in the 1970s as {{an outgrowth of the}} British post-punk scene. Its practitioners drew from the unusual sounds of 1960s psychedelic music, either updating or <b>copying</b> the <b>approaches</b> from that era. Neo-psychedelia may include forays into psychedelic pop, jangly guitar rock, heavily distorted free-form jams, or recording experiments.|$|R
40|$|Abstract. For any LP system, tabling can {{be quite}} handy {{in a variety of}} tasks, {{especially}} if it is efficiently implemented and fully integrated in the language. Implementing tabling in Mercury poses special challenges for several reasons. First, Mercury is both semantically and culturally quite different from Prolog. While decreeing that tabled predicates must not include cuts is acceptable in a Prolog system, it is not acceptable in Mercury, since if-then-elses and existential quantification have sound semantics for stratified programs and are used very frequently both by programmers and by the compiler. The Mercury implementation thus has no option but to handle interactions of tabling with Mercury’s language features safely. Second, the Mercury implementation is vastly different from the WAM, and many of the differences (e. g. the absence of a trail) have significant impact on the implementation of tabling. In this paper, we describe how we adapted the <b>copying</b> <b>approach</b> to tabling to implement tabling in Mercury. ...|$|R
40|$|In {{this paper}} {{we present a}} novel {{execution}} model for parallel implementation of logic programs which is capable of exploiting both independent and-parallelism and or-parallelism in an efficient way. This model extends the stack <b>copying</b> <b>approach,</b> which has been successfully applied in the Muse system to implement or-parallelism, by integrating it with proven techniques used to support independent and-parallelism. We show how all solutions to non-deterministic andparallel goals are found without repetitions. This is done through recomputation as in Prolog (and in various and-parallel systems, like &-Prolog and DDAS), i. e., solutions of and-parallel goals are not shared. We propose a scheme for the efficient management of the address space {{in a way that}} is compatible with the apparently incompatible requirements of both and- and or-parallelism. We also show how the full Prolog language, with all its extra-logical features, can be supported in our and-or parallel system so that its sequent [...] ...|$|R
40|$|The SLG-WAM {{implements}} tabling by freezing the WAM stacks: this implementation {{technique has}} a reasonably small execution overhead, {{but is not}} easy to implement on top of an existing Prolog system. We here propose a new approach to the implementation of tabling: the <b>Copying</b> <b>Approach</b> to Tabling. CAT interferes absolutely not with normal Prolog execution and can be introduced in an existing Prolog system orthogonally. We have implemented CAT starting from XSB (i. e. taking out SLG-WAM and adding CAT) and the results show that in practical programs CAT slightly outperforms the SLG-WAM. We give a detailed account of the additions to be made to a WAM implementation for adopting CAT. We show a case in which CAT performs arbitrarily worse than SLG-WAM, {{but on the other hand}} we present empirical evidence that CAT is competitive and often faster than SLG-WAM. We discuss issues related to memory management and the impact of the scheduling strategy. 1 Introduction Tabling in logic prog [...] ...|$|R
50|$|HCZ has {{had many}} impacts, on its students, community, and federal programs. President Obama created a grant program to <b>copy</b> HCZ's block-by-block <b>approach</b> to ending poverty. Obama {{requested}} $210 {{million for the}} program.|$|R
30|$|Omnivory: {{vulnerability}} {{is reduced}} by diversification of resources and means. It is similar to redundancy, but entails multiple different approaches {{that can be used}} alongside each other, rather than multiple <b>copies</b> of one <b>approach.</b>|$|R
40|$|SummaryThe {{melanoma}} genome possesses numerous recurrent chromosomal rearrangements, and {{embedded within}} this complexity are clues critical to disease pathogenesis {{and response to}} therapy. High-resolution genome-wide DNA <b>copy</b> number <b>approaches,</b> in conjunction with gene-specific mutational analyses, appear poised to define keystone molecular events, provide more accurate classification schemes, {{and set the stage}} for the design of rational therapies that may finally have an impact on survival of this deadly disease...|$|R
40|$|Abstract. Prolog {{systems such}} as XSB have proven that tabling can be quite helpful {{in a variety of}} tasks, {{especially}} if it is efficiently implemented and fully integrated in the language. Implementing tabling in Mercury poses special challenges for several reasons. First, Mercury is both semantically and culturally quite different from Prolog. While decreeing that tabled predicates must not include cuts (or Prolog-style negations) is acceptable in a Prolog system, it is not acceptable in Mercury, since if-then-elses and existential quantification have sound semantics and are used very frequently both by programmers and by the compiler. The Mercury implementation thus has no option but to handle interactions of tabling with Mercury’s language features safely. Second, the Mercury implementation is vastly different from the WAM, and many of the differences (e. g. storing values directly in stack slots without indirection, the absence of a trail) have significant impact on the implementation of tabling. In this paper, we describe how we adapted the <b>copying</b> <b>approach</b> to tabling to implement minimal model tabling in Mercury. ...|$|R
5000|$|During the {{campaign}} Jones used lolly-pink branding rather than Labour's color of red; this tactic was <b>copied</b> from an <b>approach</b> used by Kevin Rudd. Jones' supporters were issued pink T-shirts {{with the words}} [...] "Keep Kate".|$|R
50|$|True has {{maintained}} a neutral position in its engagement with different political parties, working effectively with conservatives and progressive groups alike. This has been important {{to the success of}} the organisation, ensuring high levels of trust with successive administrations over its 40+ year history. The organisation has won numerous awards throughout its history for its innovation and service and has seen its approach gain acceptance as many other organisations <b>copy</b> its <b>approach</b> and philosophy.|$|R
40|$|The SLG-WAM can be {{characterized}} as a sharing approach to implementing tabling: the execution environments of suspended computations are intersperced in the WAM stacks. Stacks are frozen using a set of freeze registers and the WAM trail mechanism is extended so that the suspended computations can be resumed. This technique has a reasonably small execution overhead, but is not easy to implement on top of an existing Prolog system. It is also quite difficult to understand. We propose a new technique for the implementation of tabling: the <b>Copying</b> <b>Approach</b> to Tabling. CAT does not interfere with normal Prolog execution and can be introduced in an existing Prolog system orthogonally. Also, CAT is easier to understand. We have implemented CAT starting from XSB by taking out SLG-WAM and adding CAT. We describe the additions needed for adopting CAT in a WAM implementation. We show a case in which CAT performs arbitrarily worse than SLG-WAM, {{but on the other hand}} we present empirical evidence that CAT is competitive and often faster than SLG-WAM. We also briefly discuss issues related to memory management and the impact of the scheduling. - is this true...|$|R
40|$|The SLG-WAM is an {{abstract}} machine {{that can be}} characterized as a sharing approach to implementing tabling: The execution environments of suspended computations are interspersed in the WAM stacks. Stacks are frozen using a set of freeze registers, and the WAM trail mechanism is extended so that the suspended computations can be resumed. This technique has a reasonably small execution overhead, but {{it is not easy to}} implement on top of an existing Prolog system. It is also quite difficult to understand. We propose a new technique for the implementation of tabling: the <b>copying</b> <b>approach</b> to tabling. CAT does not impose any overhead to the execution of Prolog code and can be introduced into an existing Prolog system orthogonally. Also, CAT is easier to understand. We have implemented CAT in the XSB system by taking out SLG-WAM and adding CAT. We describe the additions needed for adopting CAT in a WAM implementation. We show a case in which CAT performs arbitrarily worse than SLG-WAM, but on the other hand we present empirical evidence that CAT is competitive and often faster than the SLG-WAM. We also briefly discuss issues related to memory management and to the scheduling...|$|R
