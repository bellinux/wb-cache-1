0|12|Public
40|$|This paper {{describes}} a login system utilizing Two Factor Authentication and Zero Knowledge Proof using Schnorr NIZK. The proposed {{system is designed}} to prevent password leak when being sent over insecure network or when used in an untrusted devices. Zero Knowledge Proof is used for maintaining the confidentiality of the password and Two Factor Authentication is used to secure login process on untrusted devices. The proposed system has been tested and initial results indicates that such system is able to secure the login process without leaking the user 2 ̆ 7 <b>s</b> <b>password.</b> Keywords— Authentication, Security, Two Factor Authentication, Password, Zero Knowledge Proo...|$|R
40|$|Java EDR Display Interface (JEDI) is {{software}} for either local display or secure Internet distribution, to authorized clients, of image data acquired from cameras aboard spacecraft engaged in exploration of remote planets. (EDR signifies experimental data record, which, in effect, signifies image data.) Processed at NASA s Multimission Image Processing Laboratory (MIPL), the {{data can be}} from either near-realtime processing streams or stored files. JEDI uses the Java Advanced Imaging application program interface, plus input/output packages that are parts of the Video Image Communication and Retrieval software of the MIPL, to display images. JEDI can be run as either a standalone application program or within a Web browser as a servlet with an applet front end. In either operating mode, JEDI communicates using the HTTP(s) protocol(s). In the Web-browser case, the user must provide a password to gain access. For each user and/or image data type, there is a configuration file, called a "personality file," containing parameters that control {{the layout of the}} displays and the information to be included in them. Once JEDI has accepted the user <b>s</b> <b>password,</b> it processes the requested EDR (provided that user is authorized to receive the specific EDR) to create a display according to the user s personality file...|$|R
40|$|Among system administrators, {{users are}} {{generally}} considered the weakest {{link in the}} security chain. One of the biggest concerns is how users create and remember passwords. To try and ensure the security of their systems, administrators will generally create policies regarding how complex a user 2 ̆ 7 <b>s</b> <b>password</b> must be, and will exhort the user to never write down, share, or reuse that password. On the surface, this seems like good security sense, and from an administrator 2 ̆ 7 s perspective, it is. However, to the user, who may have dozens of unique accounts, stringent policies create a significant cognitive burden. As such, users are generally guilty of creating ad hoc solutions to remember passwords, such as making them as simple as possible, writing them down, or reusing them. Administrators react by changing policies to make passwords even longer and more complex, and a negative circle is created. An alternative is {{to make use of}} Identity Federation (IF) systems. These systems allow end users to authenticate using a single password, thereby reducing the overall cognitive burden. This work will discuss the different technologies currently in use, and examine if these systems can provide adequate security while improving overall usability...|$|R
40|$|In key-recovery methods using smart cards, a {{user can}} recover the disk {{encryption}} key {{in cooperation with}} the system administrator, even if the user has lost the smart card including the disk encryption key. However, the disk encryption key is known to the system administrator in advance in most key-recovery methods. Hence user 2 ̆ 7 s disk data may be read by the system administrator. Furthermore, if the disk encryption key is not known to the system administrator in advance, it is difficult to achieve a key authentication. In this paper, we propose a scheme which enables to recover the disk encryption key when the user 2 ̆ 7 s smart card is lost. In our scheme, the disk encryption key is not preserved anywhere and then the system administrator cannot know the key before key-recovery phase. Only someone who has a user 2 ̆ 7 s smart card and knows the user 2 ̆ 7 <b>s</b> <b>password</b> can decrypt that user 2 ̆ 7 s disk data. Furthermore, we measured the processing time required for user authentication in an experimental environment using a virtual machine monitor. As a result, we found that this processing time is short enough to be practical...|$|R
40|$|User {{authentication}} plays a {{very important}} role in building a secure computing system. In this thesis, we first studied and investigated existing user authentication schemes and some basic concepts of smart cards. We then proposed and implemented an improved user authentication scheme based on the smart card, specifically, Java card. We simulated a web server, and implemented the user authentication scheme with the Java card by programming a Java card applet and a Java program to send commands and receive responses from the card. The proposed user authentication scheme has two phases: the registration phase and the user authentication phase. In the registration phase, the server triggers the Java card to generate a secret value and store it. Then the Java card uses this secret value and hashes the username and password combination, which is stored in the web server 2 ̆ 7 s authentication database. The user 2 ̆ 7 s login request to the web server will start the user authentication phase, where the smart card will compute the hash, using the username and password entered, and return it to the web server for user verification. The implementation of the proposed user authentication scheme proved the correctness and effectiveness of the scheme. Compared with the previous user authentication schemes, our proposed authentication scheme is more secure because it implements a two-factor authentication. Even if the user 2 ̆ 7 <b>s</b> <b>password</b> is compromised, a user would still need the smart card to log into the system...|$|R
40|$|We {{are told}} that {{passwords}} are evil. We are told to change our passwords frequently, and never, never to write them down. We are even told that if you work for most U. <b>S.</b> corporations, frequent <b>password</b> changes are required by law. How {{much of this is}} true, and how much is simply mythology? Remarkably enough, the conventional wisdom can be wrong on all of these points, even the first...|$|R
40|$|Heightened {{interest}} and increased accessibility to computer systems have presented new threats to computer security, {{particularly in the}} areas of unauthorized system access. To counter such threats, computer password systems are used due to ease of implementation and low cost. However, there is nothing to prohibit access to a system if an adversary has discovered a valid password. Passwords are therefore open to compromise without the knowledge of their disclosure. In addition, passwords are static identity verifiers implying the same person is assumed until log-off. ^ There is very limited evidence of studies done with respect to techniques which aid in dynamically discriminating among users to ascertain whether the user at the terminal is actually the verified and authorized user at login time. A new authentication model is developed which is based on the variability in individual human-computer interactions, and implements a technique for formally modeling and analytically evaluating human-computer interactions. It employs dynamic, continuous, unobtrusive verification throughout a user 2 ̆ 7 s login session. The model is used in conjunction with a system 2 ̆ 7 <b>s</b> existing <b>password</b> mechanism and is composed of individual user models, based on users 2 ̆ 7 personal cognitive characteristics and usage patterns. Each user model is developed using probabilistic finite automata theory combined with time measures. This work also addresses informational issues regarding data accumulation, calibration, and model dimensionality. ...|$|R
40|$|Smartphones {{have become}} nearly ubiquitous, en-abling users to access communication, payment, banking, entertainment, social networking, and other {{services}} previously available only on desk-top computers anytime, anywhere. However, this con-venience comes with considerable security and privacy risks. Smartphones contain intimate details of our lives: who we talk to and spend time with, where we go, and, in-creasingly, how we spend our money. With a stolen phone, an attacker can acquire much of the owner’s personal and financial data—not only what the device itself contains but also what is accessible through the Internet. Unfortunately, smartphones are still mostly secured with authen-tication mechanisms that predate mobile devices—namely, personal identification numbers, which orig-inated {{with the development of}} au-tomatic teller machines in the late 1960 <b>s,</b> and <b>passwords,</b> which were in use long before computer systems. However, typing a PIN or password on a small handheld device, espe-cially if you’re walking or engaged in another activity, is more cumber-some than doing so on a stationary, relatively larger ATM keypad or computer keyboard. The first attempt to adapt user authentication to the smartphone’s small form factor came in 2008, when An-droid introduced its optional pattern lock system, which requires users to swipe a finger across a particular se-quence of dots to unlock the device, as Figure 1 shows. De-spite being more error- prone and slower than traditional PIN/password entry, many users prefer pattern lock due to its playfulness and ease of use. 1 On the downside, th...|$|R
40|$|The {{vulnerabilities}} of {{the textual}} password {{have been well}} known. Users tend to pick short passwords or pass-words {{that are easy to}} remember, which makes the pass-words vulnerable for attackers to break. Furthermore, tex-tual password is vulnerable to shoulder-surfing, hidden-camera and spyware attacks. Graphical password schemes have been proposed as a possible alternative to text-based scheme. However, they are mostly vulnerable to shoulder-surfing. In this paper, we propose a Scalable Shoulder-Surfing Resistant Textual-Graphical <b>Password</b> Authentica-tion Scheme (<b>S</b> 3 PAS). S 3 PAS seamlessly integrates both graphical and textual password schemes and provides nearly perfect resistant to shoulder-surfing, hidden-camera and spyware attacks. It can replace or coexist with con-ventional textual password systems without changing ex-isting user password profiles. Moreover, it is immune to brute-force attacks through dynamic and volatile session <b>passwords.</b> <b>S</b> 3 PAS shows significant potential bridging the gap between conventional textual password and graphical password. Further enhancements of S 3 PAS scheme are pro-posed and briefly discussed. Theoretical analysis of the se-curity level using S 3 PAS is also investigated. 1...|$|R
40|$|As more {{services}} {{move on to}} the web and more people use the cloud for storage of important information, it is important that providers of such services can guarantee that information is kept safe. The most common way of protecting that data is to make it impossible to access without being authenticated as the user owning the data. The most common way for a user to authenticate and thereby becoming authorized to access the data, or service, is by making use of a password. The one trying to safeguard that password must make sure that {{it is not easy to}} come by for someone trying to attack the system. The most common way to store a password is by first running that password through a one way function, known as a hash function, that obfuscates it into something that does not at all look related to the password itself. Whenever a user tries to authenticate, they type in their password and it goes through the same function and the results are compared. While this model makes sure that the password is not stored in plain text it contains no way of taking action in case the database of hashed passwords is leaked. Knowing that it is nearly impossible to be fully protected from malevolent users, the ones trying to safe guard information always need to try to make sure that it is difficult to extract information about users' passwords. Since the 70 <b>s</b> the <b>password</b> storage has to a large extent looked the same. What is researched and implemented in this thesis is a different way of handling passwords, where the main focus is on making sure there are countermeasures in case the database leaks. The model described and implemented consist of software that make use of the current best practices, with the addition of encrypting the passwords with a symmetric cipher. This is all done in a distributed way to move towards a paradigm where a service provider does not need to rely on one point of security. The end result of this work is a working proof-of-concept software that runs in a distributed manner to derive users' passwords to an obfuscated form. The system is at least as secure as best current practice for storing users passwords but introduces the notion of countermeasures once information has found its way into an adversary's hands...|$|R
40|$|It was 18 February 2016 and Loo Wee Ling, Practice Associate Professor of Law at Singapore Management University, {{had just}} {{received}} a communication about a case of cheating in the School of Law where she taught. GK, a 32 -year-old Russian national, was mid-way through his final year of the Doctor of Jurisprudence (JD) programme at SMU, when he embarked on {{a course of action}} that resulted in his being convicted of two offences under the Computer Misuse and Cybersecurity Act and sentenced to two months 2 ̆ 7 incarceration in a Singapore prison. Worried about not qualifying for legal practice in Singapore, he had tried to save his grades by hacking into the learning management system of a law module using his law professor 2 ̆ 7 <b>s</b> userid and <b>password</b> which he had obtained by stealth using a USB keylogger plugged into the common computer in the classroom. His fear of doing badly in the final examinations of the Law of Property module led him to delete the online answer scripts of all his course-mates in the hope of being able to retake the examination. This proved to be his undoing as discovery of the deleted scripts led to investigations that traced the hacking back to him. GK committed crimes which led to dire consequences for himself. Loo was interested to have her students analyse, from an ethical perspective, what exactly is wrong with GK 2 ̆ 7 s actions? Students are expected to (i) {{have a better understanding of}} the ethical theories and their limitations; (ii) be able to apply them appropriately to fact scenarios that involve an ethical issue; (iv) use the theories to diagnose what is wrong (or right) about an action that had been taken or proposed; and (v) provide a reasoned conclusion based on a considered weighing of the importance to be given to particular concerns raised by the different theories. 024...|$|R
40|$|The Mission Control Center Voice Over Internet Protocol (MCC VOIP) system (see figure) {{comprises}} {{hardware and}} software that effect simultaneous, nearly real-time transmission {{of as many as}} 14 different audio streams to authorized listeners via the MCC intranet and/or the Internet. The original version of the MCC VOIP system was conceived to enable flight-support personnel located in offices outside a spacecraft mission control center to monitor audio loops within the mission control center. Different versions of the MCC VOIP system could be used for a variety of public and commercial purposes - for example, to enable members of the general public to monitor one or more NASA audio streams through their home computers, to enable air-traffic supervisors to monitor communication between airline pilots and air-traffic controllers in training, and to monitor conferences among brokers in a stock exchange. At the transmitting end, the audio-distribution process begins with feeding the audio signals to analog-to-digital converters. The resulting digital streams are sent through the MCC intranet, using a user datagram protocol (UDP), to a server that converts them to encrypted data packets. The encrypted data packets are then routed to the personal computers of authorized users by use of multicasting techniques. The total data-processing load on the portion of the system upstream of and including the encryption server is the total load imposed by all of the audio streams being encoded, regardless of the number of the listeners or the number of streams being monitored concurrently by the listeners. The personal computer of a user authorized to listen is equipped with special- purpose MCC audio-player software. When the user launches the program, the user is prompted to provide identification and a password. In one of two access- control provisions, the program is hard-coded to validate the user <b>s</b> identity and <b>password</b> against a list maintained on a domain-controller computer at the MCC. In the other access-control provision, the program verifies that the user is authorized to have access to the audio streams. Once both access-control checks are completed, the audio software presents a graphical display that includes audiostream-selection buttons and volume-control sliders. The user can select all or any subset of the available audio streams and can adjust the volume of each stream independently of that of the other streams. The audio-player program spawns a "read" process for the selected stream(s). The spawned process sends, to the router(s), a "multicast-join" request for the selected streams. The router(s) responds to the request by sending the encrypted multicast packets to the spawned process. The spawned process receives the encrypted multicast packets and sends a decryption packet to audio-driver software. As the volume or muting features are changed by the user, interrupts are sent to the spawned process to change the corresponding attributes sent to the audio-driver software. The total latency of this system - that is, the total time from the origination of the audio signals to generation of sound at a listener s computer - lies between four and six seconds...|$|R

