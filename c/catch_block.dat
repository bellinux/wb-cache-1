13|38|Public
2500|$|Exception {{handling}} with Try-Catch-Finally: Unlike other [...]NET languages, {{this allows}} multiple exception types {{for a single}} <b>catch</b> <b>block.</b>|$|E
2500|$|The above do {{expression}} resembles an imperative program, which assigns the Int values {{contained in}} the 'mx' and 'my' monadic values to temporary Int variables 'x' and 'y', and raises an exception if either 'mx' or 'my' have the value Nothing. In such case, the whole do expression has value Nothing. The exception handling is declared by defining the input parameters with type Maybe Int. Rather than having to declare an error case in a try ... <b>catch</b> <b>block,</b> the behavior defined in the bind operator of the Maybe monad (return Nothing) is executed in that case.|$|E
50|$|Initially, the {{statements}} within the try block execute. If an exception is thrown, the script's control flow immediately transfers to {{the statements}} in the <b>catch</b> <b>block,</b> with the exception available as the error argument. Otherwise the <b>catch</b> <b>block</b> is skipped. The <b>catch</b> <b>block</b> can , {{if it does not}} want to handle a specific error.|$|E
25|$|The exception-causing code {{is placed}} inside a try block. The {{exceptions}} are handled in separate <b>catch</b> <b>blocks</b> (the handlers); each try block can have multiple exception handlers, {{as it is}} visible in the example below.|$|R
40|$|We {{present a}} new {{approach}} that uses compilerdirected fault-injection for coverage testing of recovery code in Internet services to evaluate their robustness to operating system and I/O hardware faults. We define a set of program-fault coverage metrics that enable quantification of Java <b>catch</b> <b>blocks</b> exercised during fault-injection experiments. We use compiler analyses to instrument application code in two ways: to direct fault injection to occur at appropriate points during execution, and to measure the resulting coverage. As a proof of concept for these ideas, we have applied our techniques manually to Muffin, a proxy server; we obtained {{a high degree of}} coverage of <b>catch</b> <b>blocks,</b> with, on average, 85 % of the expected faults per catch being experienced as caught exceptions...|$|R
40|$|Most {{mainstream}} programming languages provide constructs {{to throw}} and to handle exceptions. However, several studies argue that exception handling code is usually of poor quality {{and that it}} is commonly neglected by developers. Moreover, it {{is said to be the}} least understood, documented, and tested part of the implementation of a system. Nevertheless, there are very few studies that analyze the actual exception handling bugs that occur in real software systems or that attempt to understand developersâ€™ perceptions of these bugs. In this work we present an exploratory study on exception handling bugs that employs two complementary approaches: a survey of 154 developers and an analysis of 220 exception handling bugs from the repositories of Eclipse and Tomcat. Only 27 % of the respondents claimed that policies and standards for the implementation of error handling are part of the culture of their organizations. Moreover, in 70 % of the organizations there are no specific tests for the exception handling code. Also, 61 % of the respondents stated that no to little importance is given to the documentation of exception handling in the design phase of the projects with which they are involved. In addition, about 40 % of the respondents consider the quality of exception handling code to be either good or very good and only 14 % of the respondents consider it to be bad or very bad. Furthermore, the repository analysis has shown (with statistical significance) that exception handling bugs are ignored by developers less often than other bugs. We have also observed that while overly general <b>catch</b> <b>blocks</b> are a well-known bad smell related to exceptions, bugs stemming from these <b>catch</b> <b>blocks</b> are rare, even though many overly general <b>catch</b> <b>blocks</b> occur in the code. Furthermore, while developers often mention empty <b>catch</b> <b>blocks</b> as causes of bugs they have fixed in the past, we found very few bug reports caused by them. On top of that, empty <b>catch</b> <b>blocks</b> are frequently used as part of bug fixes, including fixes for exception handling bugs. Based on our findings, we propose a classification of exception handling bugs and their causes. The proposed classification can be used to assist in the design and implementation of test suites, to guide code inspections, or as a basis for static analysis tools. Keywords: Exception handling; Bugs; Repository minin...|$|R
50|$|From {{the start}} of his sophomore season he {{received}} recognition {{as one of the best}} and most complete running backs in college football, being able to run inside or outside, <b>catch,</b> <b>block</b> and play special teams. In 1963, he was even named the team's backup quarterback.|$|E
50|$|Springs was {{primarily}} a blocking back for Hall of Famer Tony Dorsett, but he got plenty of opportunities to run and catch in Tom Landry's multiple set offense. In this system he thrived as a versatile player that could run, <b>catch,</b> <b>block,</b> and occasionally even throw the option pass.|$|E
50|$|In Seattle {{he became}} a fan {{favorite}} {{as part of a}} special teams unit that was known for its fake field goal plays, where he had to pass, <b>catch,</b> <b>block</b> and run. In 1979 he recorded a career high 100 points. The next year, he set club and career records for most field goals in a season (20) and in a game (4).|$|E
50|$|A <b>catch</b> or <b>block</b> {{called a}} trigger {{may be used}} to hold a wheel on a declivity.|$|R
50|$|In Java it is {{possible}} to execute code even after return statement, because the finally block of a try-catch structure is always executed. So if the return statement is placed somewhere within try or <b>catch</b> <b>blocks</b> the code within finally (if added) will be executed. It is even possible to alter the return value of a non primitive type (a property of an already returned object) because the exit occurs afterwards as well.|$|R
50|$|Death Closes In: Copperhead <b>catches</b> the <b>block</b> {{and tackle}} as he falls, pulls {{himself to a}} walkway and {{continues}} the chase.|$|R
5000|$|One {{criticism}} is that checked exceptions encourage programmers {{to use an}} empty <b>catch</b> <b>block</b> (catch (Exception e) {}), which silently swallows exceptions, rather than letting the exceptions propagate to a higher-level exception-handling routine. In some cases, however, exception chaining can be applied instead, by re-throwing the exception in a wrapper exception. For example, if an object is changed to access a database instead of a file, an [...] could be caught and re-thrown as an , since the caller may not {{need to know the}} inner workings of the object.|$|E
5000|$|The above do {{expression}} resembles an imperative program, which assigns the Int values {{contained in}} the 'mx' and 'my' monadic values to temporary Int variables 'x' and 'y', and raises an exception if either 'mx' or 'my' have the value Nothing. In such case, the whole do expression has value Nothing. The exception handling is declared by defining the input parameters with type Maybe Int. Rather than having to declare an error case in a try ... <b>catch</b> <b>block,</b> the behavior defined in the bind operator of the Maybe monad (return Nothing) is executed in that case.|$|E
50|$|Cold climates {{may present}} special challenges. Road salt {{contains}} chlorides that could migrate through the porous pavement into groundwater. Snow plow blades could <b>catch</b> <b>block</b> edges and damage surfaces. Sand {{cannot be used}} for snow and ice control on perveous asphalt or concrete because it will plug the pores and reduce permeability. Infiltrating runoff may freeze below the pavement, causing frost heave, though design modifications can reduce this risk. These potential problems do not mean that porous pavement cannot be used in cold climates. Porous pavement designed to reduce frost heave has been used successfully in Norway. Furthermore, experience suggests that rapid drainage below porous surfaces increases the rate of snow melt above.|$|E
50|$|Pass {{interference}} {{will not}} be called if there was incidental contact, or if when players make simultaneous attempts to <b>catch,</b> tip, <b>block,</b> or bat the ball.|$|R
40|$|In software, {{there are}} the errors {{anticipated}} at specification and design time, those encountered at development and test-ing time, and those that happen in production mode yet never anticipated. In this paper, we aim at reasoning {{on the ability of}} software to correctly handle unanticipated excep-tions. We propose an algorithm, called short-circuit testing, which injects exceptions during test suite execution so as to simulate unanticipated errors. This algorithm collects data that is used as input for verifying two formal exception con-tracts that capture two resilience properties. Our evaluation on 9 test suites, with 78 % line coverage in average, analyzes 241 executed <b>catch</b> <b>blocks,</b> shows that 101 of them expose resilience properties and that 84 can be transformed to be more resilient. 1...|$|R
40|$|International audienceContext:In software, {{there are}} the error cases that are {{anticipated}} at specification and design time, those encountered at development and testing time, and those that were never anticipated before happening in production. Is it possible {{to learn from the}} anticipated errors during design to analyze and improve the resilience against the unanticipated ones in production?Objective:In this paper, we aim at analyzing and improving how software handles unanticipated exceptions. The first objective is to set up contracts about exception handling and a way to assess them automatically. The second one is to improve the resilience capabilities of software by transforming the source code. Method:We devise an algorithm, called short-circuit testing, which injects exceptions during test suite execution so as to simulate unanticipated errors. It is a kind of fault-injection techniques dedicated to exception-handling. This algorithm collects data that is used for verifying two formal contracts that capture two resilience properties w. r. t. exceptions: the source-independence and pure-resilience contracts. Then we propose a code modification technique, called ``catch-stretching'' which allows error-recovery code (of the form of <b>catch</b> <b>blocks)</b> to be more resilient. Results:Our evaluation is performed on 9 open-source software applications and consists in analyzing 241 <b>catch</b> <b>blocks</b> executed during test suite execution. Our results show that 101 / 214 of them (47 %) expose resilience properties as defined by our exception contracts and that 84 / 214 of them (39 %) can be transformed to be more resilient. Conclusion:Our work shows {{that it is possible to}} reason on software resilience by injecting exceptions during test suite execution. The collected information allows us to apply one source code transformation that improves the resilience against unanticipated exceptions. This works best if the test suite exercises the exceptional programming language constructs in many different scenarios...|$|R
40|$|Exceptions are {{provided}} by the Java programming language in order to handle errors more gracefully. However, exceptions are rare in most programs, so that most catch blocks are left unused. This paper describes an on-demand <b>catch</b> <b>block</b> translation scheme which translates catch blocks only when they are actually used. By ignoring exception handling while translating normal flow, we can reduce translation overhead and make use of more optimization opportunities. In addition, we directly connect normal flow and catch blocks after an exception is thrown, which results in faster exception handling. This is useful since many exceptions thrown at certain points are usually of the same type and handled by the same catch blocks. From experimental results, we show {{that the existence of}} catch blocks indeed do not interfere with the translation of normal flow when on-demand <b>catch</b> <b>block</b> translation is done. Also, the results show that direct connection along with method inlining results [...] ...|$|E
40|$|Protocol {{processing}} of received packets in BSD Unix is interrupt-driven and may cause scheduling anomalies that are unacceptable in systems that provide {{quality of service}} (QoS) guarantees. We propose an alternative mechanism, Signaled Receiver Processing (SRP), that generates {{a signal to the}} receiving process when a packet arrives. The default action of this signal is to perform protocol processing asynchronously. However, a receiving process may <b>catch,</b> <b>block,</b> or ignore the signal and defer protocol processing until a subsequent receive call. In any case, protocol processing occurs {{in the context of the}} receiving process and is correctly charged. Therefore, SRP allows the system to enforce and honor QoS guarantees. SRP offers several advantages over Lazy Receiver Processing (LRP), a previous solution to BSD's scheduling anomalies: SRP is easily portable to systems that support neither kernel threads nor Resource Containers (e. g., FreeBSD); gives applications control over the scheduling of protocol processing; uses a demultiplexing strategy that is appropriate for both hosts and gateways; and easily enables real-time or proportional-share scheduling...|$|E
40|$|JCilk {{extends the}} Java {{language}} to provide call-return semantics for multithreading, much as Cilk does for C. Java's built-in thread model {{does not support}} the passing of exceptions or return values from one thread back to the "parent" thread that created it. JCilk imports Cilk's fork-join primitives spawn and sync into Java to provide procedure-call semantics for concurrent subcomputations. It also introduces exceptions into that fork-join structure, leading to some some surprising semantic synergies. In particular, JCilk extends Java's exception semantics to allow exceptions to be passed from a spawned method to its parent in a natural way that obviates the need for Cilk's inlet and abort constructs. When executing in parallel, an exception thrown by a JCilk computation signals its "side computations" to abort, which yields a clean semantics in which only a single exception from the enclosing try block is handled. Because JCilk uses Java's normal exception mechanism to propagate an abort throughout the side computations, the programmer can handle clean-up by simply catching a thrown CilkAbort exception. (cont.) JCilk supports these features by introducing the concept of a "catchlet" as a mechanism for handling exceptions in a concurrent context. In my work, I have implented a runtime system for JCilk which uses a tree structure to track the dynamic state of nested try blocks. Using this tree, the runtime system is able to signal aborts to the proper side computations and determine when the <b>catch</b> <b>block</b> is able to run. The result is an efficient implementation of the JCilk specification. by John Danaher. Thesis (M. Eng.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2005. Includes bibliographical references (p. 93 - 97) ...|$|E
5000|$|WCVF-FM is {{a public}} low power FM radio station in Fredonia, New York. Licensed to the State University of New York at Fredonia, the station {{broadcasts}} on 88.9 MHz on the FM dial. [...] "CVF" [...] stands for [...] "Campus and Community Voice of Fredonia," [...] the station's slogan. The station primarily features [...] "alternative" [...] rock, but includes {{an eclectic mix of}} genres at consistent times throughout the week. Listeners can <b>catch</b> <b>blocks</b> of Polka, Spanish, Blues, Jazz, Folk, Reggae, Hip Hop and anything in between. Live programs hosted by student and community jocks can be of any format/genre from talk, music, to radio drama. WCVF also covers local sports and includes live broadcasts/commentary for several Blue Devil teams. Our music director reports to College Music Journal for charting, and devotes time slots for new music sent to the station.|$|R
40|$|Discrete-event {{simulation}} programs make {{heavy use}} of dynamic memory allocation {{in order to}} support simulation's very dynamic space requirements. When programming in C one is likely to use the malloc() routine. However, a parallel simulation which uses the standard Unix System V malloc() implementation may achieve an overly optimistic speedup, possibly superlinear. An alternate implementation provided on some (but not all systems) can avoid the speedup anomaly, but at the price of significantly reduced available free space. This is especially severe on most parallel architectures, which tend not to support virtual memory. It is shown how a simply implemented user-constructed interface to malloc() can both avoid artificially inflated speedups, and make efficient use of the dynamic memory space. The interface simply <b>catches</b> <b>blocks</b> {{on the basis of their}} size. The problem is demonstrated empirically, and the effectiveness of the solution is shown both empirically and analytically...|$|R
40|$|In this paper, {{we aim at}} {{contributing}} {{to the body of}} knowledge on exception-handling. We take neither an analytical approach (``we think exception handling is good because X and Y'') nor an empirical approach (``most developers do Z and T''). Our method is to compare analytical knowledge against empirical one. We first review the literature to find analytical knowledge on exception handling, we then set up a dataset of 32 Java software applications and an experimental protocol to statically characterize and measure the exception handling design. We eventually compare our measures against the claims on exception handling that authors have made over time. Our results show that some analytical principles for exception design do not support the empirical validation: 1) practitioners violate the principle and 2) upon analysis, there are indeed very good use cases going against this principle. This is in particular the case for ``Empty <b>Catch</b> <b>Blocks</b> are Bad'' and ``Do not Catch Generic Exceptions''...|$|R
40|$|Thesis (Master) [...] Ä°zmir Institute of Technology, Computer Engineering, Ä°zmir, 2010 Includes bibliographical {{references}} (leaves: 57 - 60) Text in English Abstract: Turkish and Englishix, 77 leavesThe {{scope of}} this thesis is to enhance a static analysis tool {{in order to find}} security limitations in java applications. This will contribute to the removal of some of the existing limitations related with the lack of java source codes. The generally used tools for a static analysis are FindBugs, Jlint, PMD, ESC/Java 2, Checkstyle. In this study, it is aimed to utilize PMD static analysis tool which already has been developed to find defects Possible bugs (empty try/catch/finally/switch statements), Dead code (unused local variables, parameters and private methods), Suboptimal code (wasteful String/StringBuffer usage), Overcomplicated expressions (unnecessary if statements for loops that could be while loops), Duplicate code (copied/pasted code means copied/pasted bugs). On the other hand, faults possible unexpected exception, length may be less than zero, division by zero, stream not closed on all paths and should be a static inner class cases were not implemented by PMD static analysis tool. PMD performs syntactic checks and dataflow analysis on program source code. In addition to some detection of clearly erroneous code, many of the. bugs. PMD looks for are stylistic conventions whose violation might be suspicious under some circumstances. For example, having a try statement with an empty <b>catch</b> <b>block</b> might indicate that the caught error is incorrectly discarded. Because PMD includes many detectors for bugs that depend on programming style, PMD includes support for selecting which detectors or groups of detectors should be run. While PMD. s main structure was conserved, boundary overflow vulnerability rules have been implemented to PMD...|$|E
40|$|Program {{errors are}} a source of {{information}} leaks. Tracking these leaks is hard because error propagation breaks out of program structure. Programming languages often feature exception constructs to provide some structure to error handling: for example, the try [...] . <b>catch</b> <b>blocks</b> in Java and Caml. Mainstream information-flow security compilers such as Jif and FlowCaml enforce rigid rules for exceptions in order to prevent leaks via public side effects of computation whose reachability depends on exceptions. This paper presents a general and permissive alternative to the rigid solution: the programmer is offered a choice for each type of error/exception whether to handle it or not. The security mechanism ensures that, in the former case, it is never handled and, in the latter case, it is always handled with the mainstream restrictions. This mechanism extends naturally to a language with procedures and output, where we show the soundness of the mechanism with respect to termination-insensitive noninterference...|$|R
5000|$|WCVF-FM is {{a public}} FM radio station located in McEwen Hall, {{broadcasting}} {{from the top of}} Maytum Hall on campus. Licensed to the State University of New York at Fredonia, the station broadcasts on 88.9 MHz on the FM dial. [...] "CVF" [...] stands for [...] "Campus and Community Voice of Fredonia," [...] the station's slogan. The station primarily features [...] "alternative" [...] rock, but includes an eclectic mix of genres at consistent times throughout the week. Listeners can <b>catch</b> <b>blocks</b> of Polka, Spanish, Blues, Jazz, Folk, Reggae, Hip Hop and anything in between. Live programs hosted by student and community jocks can be of any format/genre from talk, music, to radio drama. WCVF also covers local sports and includes live broadcasts/commentary for several Blue Devil teams. WCVF broadcasts National Public Radio (NPR) Monday through Friday: Morning Edition (7- 9 am) and All Things Considered (4-6 pm). These broadcasts are achieved through a partnership with NPR member station WQLN-FM in Erie, Pennsylvania. WCVF-FM has a sister station WDVL which broadcasts via internet streaming and a local cable channel.|$|R
5000|$|... 5 June 2008 - {{to protest}} the import of cheap fish from outside Ireland and the {{resulting}} low prices paid to domestic fishermen for their <b>catch,</b> FIF demonstrators <b>blocked</b> the cargo terminal at Cork Airport.|$|R
50|$|Super Reflexes: Miss Martian has {{drastically}} enhanced reaction speed, {{allowing her}} to dodge bullets, catch flies in mid-air, dodge and maneuver around complex attacks, <b>catch</b> falling objects, <b>block</b> detriments and react instantaneously to what others take more time to react to.|$|R
50|$|Evans {{might be}} best known for being the {{starting}} fullback for the 1998 Minnesota Vikings which scored the most points by a team (556) in a season in NFL history. He played the fullback position, which required him to <b>block,</b> <b>catch</b> {{the ball out of}} the back field, and {{every once in a while}} carry the ball.|$|R
5000|$|Whereas {{vaudeville}} performers originally {{tended to}} use actual cigar boxes, today, the props for cigar box routines are usually built specifically for manipulation. They may be constructed from various materials, including plastic, plywood, or even wall paneling. [...] They are sometimes padded {{on the ends}} and/or the sides with suede, foam rubber, or a felt-like material to provide extra friction on the <b>catch.</b> Foam yoga <b>blocks</b> are also the right size and shape.|$|R
25|$|After killing Saunders, {{the group}} escaped through the D.A.V. College entrance, {{across the road}} from the District Police Headquarters. Chanan Singh, a Head Constable who was chasing them, was fatally injured by Chandrashekhar Azad's {{covering}} fire. They then fled on bicycles to pre-arranged safe houses. The police launched a massive search operation to <b>catch</b> them, <b>blocking</b> all entrances and exits to and from the city; the CID kept a watch on all young men leaving Lahore. The fugitives hid for the next two days. On 19 December 1928, Sukhdev called on Durgawati Devi, sometimes known as Durga Bhabhi, wife of another HSRA member, Bhagwati Charan Vohra, for help, which she agreed to provide. They decided to catch the train departing from Lahore to Bathinda en route to Howrah (Calcutta) early the next morning.|$|R
40|$|Background Current {{front line}} malaria vector control {{methods such as}} indoor {{residual}} spraying (IRS) and long-lasting insecticidal nets (LLINs), rely upon the preference of many primary vectors to feed and/or rest inside human habitations {{where they can be}} targeted with domestically-applied insecticidal products. We studied the human biting behaviour of the malaria vector Anopheles funestus Giles and the potential malaria vector Anopheles quadriannulatus Theobald in Luangwa valley, south-east Zambia. Methods Mosquitoes were collected by human landing <b>catch</b> in <b>blocks</b> of houses with either combined use of deltamethrin-based IRS and LLINs or LLINs alone. Human behaviour data were collected to estimate how much exposure to mosquito bites indoors and outdoors occurred at various times of the night for LLIN users and non-users. Results Anopheles funestus and An. quadriannulatus did not show preference to bite either indoors or outdoors: the proportions [95...|$|R
2500|$|Preventing wild {{pitches and}} {{avoiding}} passed balls. Although the pitcher {{has a responsibility}} to throw with reasonable accuracy, catchers must be mobile enough to <b>catch</b> (or <b>block)</b> errant pitches. By doing so, a catcher prevents baserunners from advancing while the loose ball is retrieved. An errant pitch that eludes the catcher and allows a baserunner to take one or more additional bases is called a wild pitch. (Techniques for blocking wild pitches are described in the previous section.) A pitched ball which would require only ordinary effort to be caught or blocked by the catcherâ€”but is nonetheless misplayed, allowing a base runner to advanceâ€”is called a [...] "passed ball". If any pitch is thrown in the dirt, and is considered to be too hard for the catcher to block, it's considered to be called a [...] "Wild Pitch". If a pitcher throws the pitch and it touches your glove and goes away from you, allowing the base runner to advance, is called a [...] "Passed Ball".|$|R
5000|$|In rugby, kicking {{during the}} flow of the game is done for {{tactical}} reasons (both offensive and defensive) or to score a goal. If the ball is recovered by the kicking team, it can lead to significant improvement in field position. It is also legal in rugby to kick at goal at any point in the game. This is called a drop goal. In American football, a team that kicks the ball during play automatically gives up possession and cannot recover the ball unless an error in catching the ball (aka [...] "muff") is made by the receiving team; because of this, punting is typically done only when teams do not expect to be able to retain possession (i.e. on fourth down). Additionally, rule changes made in the early 20th century mandated that field goals cannot be made in front of the line of scrimmage; this has led to the demise of the drop-kick field goal in American football. <b>Catching</b> and <b>blocking</b> kicked balls are integral rugby skills.|$|R
50|$|On {{both the}} Sniper and the Autococker, a back block {{performs}} {{all three of}} these functions. The bolt is attached to the block, while a cocking rod (which is attached to the hammer and designed to <b>catch</b> on the <b>block)</b> passes through it. When the block moves backward, it pulls the bolt back, allowing a paintball to drop into the breech. The backward movement simultaneously pulls the cocking rod back, causing the hammer to also be pulled back until it re-engages the sear. When the block moves forward, it pushes the bolt (and the paintball) forward, closing the breech. The cocking rod stays pulled back, with the hammer ready to fire.|$|R
