48|10000|Public
25|$|If {{the optical}} cavity is not empty (e.g., a laser cavity which {{contains}} the gain medium), {{the value of}} L used is not the physical mirror separation, but the optical path length between the mirrors. Optical elements such as lenses placed in the cavity alter the stability and mode size. In addition, for most gain media, thermal and other inhomogeneities <b>create</b> <b>a</b> <b>variable</b> lensing effect in the medium, which {{must be considered in}} the design of the laser resonator.|$|E
50|$|Uses a {{diaphragm}} and pressure cavity to <b>create</b> <b>a</b> <b>variable</b> capacitor to detect strain due to applied pressure.|$|E
50|$|The sliding didgeridoo, or didgiphone, uses a {{telescopic}} {{mechanism to}} <b>create</b> <b>a</b> <b>variable</b> pitch instrument, {{and can be}} made from plastic, aluminium or wood.|$|E
5000|$|Line 6: <b>Creates</b> <b>a</b> <b>variable</b> [...] {{that keeps}} track of the index of the last {{selected}} activity.|$|R
5000|$|Using braces {{as above}} <b>creates</b> <b>a</b> <b>variable</b> {{definition}} for variable [...] of class , initialized with an anonymous instance of class ...|$|R
5000|$|... {{writes a}} new value to <b>a</b> <b>{{variable}}</b> (<b>creates</b> <b>a</b> <b>variable</b> if did not exist). If used only with one argument, it returns {{the value of}} the given variable (it must exist in this case).|$|R
50|$|The Gemini was {{designed}} to explore the use of flaps to <b>create</b> <b>a</b> <b>variable</b> geometry sailplane that would be optimized for both low speed thermalling flight and also high speed gliding between thermals.|$|E
50|$|Uses a {{diaphragm}} and pressure cavity to <b>create</b> <b>a</b> <b>variable</b> capacitor to detect strain due to applied pressure, capacitance decreasing as pressure deforms the diaphragm. Common technologies use metal, ceramic, and silicon diaphragms.|$|E
50|$|In {{object-oriented}} programming (OOP), inheritance describes {{a relationship between}} two classes in which one class (the child class) subclasses the parent class. The child inherits methods and attributes of the parent, allowing for shared functionality. For example, one might <b>create</b> <b>a</b> <b>variable</b> class Mammal with features such as eating, reproducing, etc.; then define a child class Cat that inherits those features without having to explicitly program them, while adding new features like chasing mice.|$|E
5000|$|C++11 allows {{this to be}} mitigated in two ways. First, the {{definition}} of <b>a</b> <b>variable</b> with <b>an</b> explicit initialization can use the [...] keyword. This <b>creates</b> <b>a</b> <b>variable</b> of the specific type of the initializer: ...|$|R
5000|$|In Railo, scopes {{always take}} priority. In ACF, <b>creating</b> <b>a</b> <b>{{variable}}</b> named [...] "Url" [...] may block {{access to the}} Url scope. In Railo, the variable can only be accessed as [...] "Variables.Url".|$|R
30|$|Ethnicity: Although {{the number}} of {{minority}} ethnicities is small in this sample, this study still <b>created</b> <b>a</b> <b>variable</b> to control for ethnic influence on higher education in which 1 [*]=[*]Han ethnicity and 0 [*]=[*]minority ethnicity (non-Han ethnicity).|$|R
5000|$|The way {{variables}} are implemented in stack-oriented languages such as PostScript usually involves a separate, specialized stack which holds dictionaries of key-value pairs. To <b>create</b> <b>a</b> <b>variable,</b> a key (the variable name) must be created first, with which a value is then associated. In PostScript, a name data object is prefixed with a , so [...] {{is a name}} data object which can be associated with, for example, the number [...] The [...] command is , so ...|$|E
50|$|If {{the optical}} cavity is not empty (e.g., a laser cavity which {{contains}} the gain medium), {{the value of}} L used is not the physical mirror separation, but the optical path length between the mirrors. Optical elements such as lenses placed in the cavity alter the stability and mode size. In addition, for most gain media, thermal and other inhomogeneities <b>create</b> <b>a</b> <b>variable</b> lensing effect in the medium, which {{must be considered in}} the design of the laser resonator.|$|E
5000|$|As a DCOP, {{there is}} one agent per vertex that is {{assigned}} to decide the associated color. Each agent has a single variable whose associated domain is of cardinality [...] ({{there is one}} domain value for each possible color). For each vertex , <b>create</b> <b>a</b> <b>variable</b> in the DCOP [...] with domain [...] For each pair of adjacent vertices , create a constraint of cost 1 if both of the associated variables are assigned the same color: The objective, then, is to minimize [...]|$|E
5000|$|Variables are not {{strictly}} typed, {{and do not}} need to be declared. Variables can take any data type (including scripts and functions). The following commands are examples of the creation of variables:set variable1 to 1 -- <b>create</b> <b>an</b> integer <b>variable</b> called variable1set variable2 to [...] "Hello" [...] -- <b>create</b> <b>a</b> text <b>variable</b> called variable2copy {17, [...] "doubleday"} to variable3 -- <b>create</b> <b>a</b> list <b>variable</b> called variable3set {variable4, variable5} to variable3 -- copy the list items of variable3 into separate variables variable4 and variable5set variable6 to script myScript -- set <b>a</b> <b>variable</b> to <b>an</b> instance of a script ...|$|R
5000|$|... tomSym {{makes it}} {{possible}} to build models with two or more variable indices in MATLAB. The following example <b>creates</b> <b>a</b> <b>variable</b> 'flow' with four indices. The variable is then used to <b>create</b> <b>a</b> constraint over two of the indices and to sum the multiplication with a two-dimensional matrix.|$|R
50|$|In {{addition}} to retaining minimal recovery values used in backing up, backtracking implementations commonly keep <b>a</b> <b>variable</b> trail, to record value change history. An efficient implementation will avoid <b>creating</b> <b>a</b> <b>variable</b> trail entry between two successive changes {{when there is}} no choice point, as the backtracking will erase all of the changes as a single operation.|$|R
50|$|In many of {{industrial}} operations, {{the delivery of}} a variable and controlled amount of electrical power is necessary. The most common of these operations include electric lighting, electric motor speed control, electric welding, and electric heating. Although it is always possible to control the amount of electrical power delivered to a load by using a variable transformer to <b>create</b> <b>a</b> <b>variable</b> secondary output voltage, these transformers are physically large and expensive and need frequent maintenance (in high power ratings). There are other methods of controlling power to a load, but they are mostly not available for high power applications.|$|E
5000|$|In C++11, {{two methods}} of type {{deduction}} were added. [...] {{was a way}} to <b>create</b> <b>a</b> <b>variable</b> of the appropriate type, based on a given expression. [...] {{was a way to}} compute the type of a given expression. However, the way [...] and [...] deduce types are different. In particular, [...] always deduces a non-reference type, as though by using , while [...] always deduces a reference type. However, [...] can be prodded into deducing a reference or non-reference type, based on the value category of the expression {{and the nature of the}} expression it is deducing: ...|$|E
5000|$|The {{standard}} variable can {{be formed}} as fixed data {{such as a}} Boolean, Integer or Decimal and a variable length variable such as an ASCII string, wide character string or a binary string. The type of the data {{can be used to}} define variable or the type can be explicitly declared, so for example the code - [...] "variable myInteger = 0;" [...] will <b>create</b> <b>a</b> <b>variable</b> called myInteger and assign it the value of zero. An Integer type can also be declared as - [...] "Integer myInteger;" [...] and its default value will be set to zero.|$|E
50|$|Rule 6 <b>creates</b> <b>a</b> unique <b>variable</b> V, as <b>a</b> {{name for}} the function.|$|R
2500|$|Elements can be {{referenced}} without <b>creating</b> <b>a</b> new <b>variable</b> by cascaded indexing, e.g. (3); ...|$|R
50|$|The {{mountains}} of Nishiwaga Town have drawn interest from local hikers and outdoors enthusiasts, {{as well as}} hikers and ecotourists {{from as far away}} as Tokyo. In the southeastern section of Nishiwaga Town the Waga River is restrained by the Yuda Dam, which <b>creates</b> <b>a</b> <b>variable</b> depth man-made lake called Kinshu Lake.|$|R
5000|$|This {{program is}} {{generally}} non-convex, because the constraints (...) are not convex. One possible convex relaxation for this minimization problem uses semidefinite programming {{to replace the}} Kronecker product [...] with a positive-semidefinite matrix : we index each monomial of size at most [...] by a multiset [...] of at most [...] indices, [...] For each such monomial, we <b>create</b> <b>a</b> <b>variable</b> [...] in the program, and we arrange the variables [...] to form the matrix , where we identify the rows and columns of [...] with multi-subsets of [...] We then write the following semidefinite program in the variables : ...|$|E
50|$|The dampers {{are filled}} with magnetorheological fluid, a mixture of easily {{magnetized}} iron particles in a synthetic hydrocarbon oil. In each of the monotube dampers is a piston containing two electromagnetic coils and two small fluid passages through the piston. The electromagnets are able to <b>create</b> <b>a</b> <b>variable</b> magnetic field across the fluid passages. When the magnets are off, the fluid travels through the passages freely. However, when the magnets are turned on, the iron particles in the fluid create a fibrous structure through the passages {{in the same direction}} of the magnetic field. The strength of the bonds between the magnetized iron particles causes the viscosity of the fluid to increase resulting in a stiffer suspension. Altering the strength of the current results in an instantaneous change in force of the piston. If the sensors sense any body roll, they communicate the information to the ECU. The ECU will compensate for this by changing the strength of the current to the appropriate dampers.|$|E
5000|$|Main OpenGL Program:/*--------------------- Main OpenGL Program ---------------------*//* <b>Create</b> <b>a</b> <b>variable</b> to {{hold the}} VBO {{identifier}} */GLuint triangleVBO; /* This is a handle to the shader program */GLuint shaderProgram;/* These pointers will receive the contents of our shader source code files */GLchar *vertexSource, *fragmentSource;/* These are handles used to reference the shaders */GLuint vertexShader, fragmentShader;const unsigned int shaderAttribute = 0;/* Vertices of a triangle (counter-clockwise winding) */float data33 = { { 0.0, 1.0, 0.0 }, { -1.0, -1.0, 0.0 }, { 1.0, -1.0, 0.0 } };/*---------------------- Initialise VBO - (Note: do only once, at start of program) ---------------------*//* Create a new VBO and use the variable [...] "triangleVBO" [...] to store the VBO id */glGenBuffers(1, &triangleVBO);/* Make the new VBO active */glBindBuffer(GL_ARRAY_BUFFER, triangleVBO);/* Upload vertex data to the video device */glBufferData(GL_ARRAY_BUFFER, sizeof(data), data, GL_STATIC_DRAW);/* Specify that our coordinate data is going into attribute index 0(shaderAttribute), and contains three floats per vertex */glVertexAttribPointer(shaderAttribute, 3, GL_FLOAT, GL_FALSE, 0, 0);/* Enable attribute index 0(shaderAttribute) as being used */glEnableVertexAttribArray(shaderAttribute);/* Make the new VBO active. */glBindBuffer(GL_ARRAY_BUFFER, triangleVBO);/*-------------------------------------------------------------------------------------------------------*//*--------------------- Load Vertex and Fragment shaders from files and compile them --------------------*//* Read our shaders into the appropriate buffers */vertexSource = filetobuf("exampleVertexShader.vert");fragmentSource = filetobuf("exampleFragmentShader.frag");/* Assign our handles a [...] "name" [...] to new shader objects */vertexShader = glCreateShader(GL_VERTEX_SHADER);fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);/* Associate the source code buffers with each handle */glShaderSource(vertexShader, 1, (const GLchar**)&vertexSource, 0);glShaderSource(fragmentShader, 1, (const GLchar**)&fragmentSource, 0);/* Free the temporary allocated memory */free(vertexSource);free(fragmentSource);/* Compile our shader objects */glCompileShader(vertexShader);glCompileShader(fragmentShader);/*-------------------------------------------------------------------------------------------------------*//*-------------------- Create shader program, attach shaders to it and then link it ---------------------*//* Assign our program handle a [...] "name" [...] */shaderProgram = glCreateProgram (...)/* Attach our shaders to our program */glAttachShader(shaderProgram, vertexShader);glAttachShader(shaderProgram, fragmentShader);/* Bind attribute index 0 (shaderAttribute) to in_Position*//* [...] "in_Position" [...] will represent [...] "data" [...] array's contents in the vertex shader */glBindAttribLocation(shaderProgram, shaderAttribute, [...] "in_Position");/* Link shader program*/glLinkProgram(shaderProgram);/*-------------------------------------------------------------------------------------------------------*//* Set shader program as being actively used */glUseProgram(shaderProgram);/* Set background colour to BLACK */glClearColor(0.0, 0.0, 0.0, 1.0);/* Clear background with BLACK colour */glClear(GL_COLOR_BUFFER_BIT);/* Actually draw the triangle, giving the number of vertices provided by invoke glDrawArrays while telling that our data is a triangle {{and we want to}} draw 0-3 vertexes */glDrawArrays(GL_TRIANGLES, 0, (sizeof(data) / 3) / sizeof(GLfloat));/*---------------------------------------------------------------*/ ...|$|E
5000|$|... <b>creates</b> <b>a</b> loop <b>variable</b> and {{repeats the}} tag iterating a sequence, e.g. for <b>creating</b> <b>a</b> {{selection}} list or a table ...|$|R
50|$|The Lake Natron basin {{has been}} {{designated}} a Wetlands of International Importance under the Ramsar Convention.However, in the past there have been plans to dam the Ewaso Ng'iro for hydroelectric power generation and for irrigation of the marshlands north of the lake, diverting water from other rivers to increase the flow. The plans would also include <b>creating</b> <b>a</b> <b>variable</b> freshwater lagoon with an area of about 50 km2.|$|R
50|$|Hand lensed {{video is}} {{a process in which}} a digital single lens reflex (DSLR) camera is used to <b>create</b> <b>a</b> pinhole like moving image. Unlike {{traditional}} pinhole photography the aperture is created by placing one’s hands over the CMOS sensor. This <b>creates</b> <b>a</b> <b>variable</b> sized and shaped aperture. This technique was first developed by Charles Lim Yi Yong in 2009. The first video using is One Day I Forgot and Used My Hands premiered at the 2011 Rotterdam International Film Festival.|$|R
30|$|Computer use I <b>create</b> <b>a</b> <b>variable</b> {{that capture}} {{computer}} use. In the EWCS I use the question: “Does your main job involve… working with computer, laptops, etc.? The variable ranges from 1 “{{all of the}} time” to 7 “never” (“almost all of the time”, “around ¾ of the time”, “around ½ of the time”, “around ¼ of the time”, and “almost never” correspond to middle answers).|$|E
40|$|Circuit bodging is back! Maxwell {{is proud}} to present small, simple, but {{ultimately}} lovable little circuits to build for your own, personal pleasure. In this edition we are featuring: The Atari Punk Console. The Atari Punk Console (or APC) is a 555 timer IC based noise maker circuit. The original was designed by Forrest M. Mims III, and published in his book “Engineer’s Mini-Notebook - 555 Circuits” (Siliconcepts, 1984). It uses two 555 timers to <b>create</b> <b>a</b> <b>variable</b> pulse width oscillator with a similar sound to the infamous Atari 2600. Electrical Engineering, Mathematics and Computer Scienc...|$|E
40|$|The {{observation}} of crystal formation in a transparent specimen is described. A {{portion of the}} specimen is melted in a heating zone, then frozen by a cooling zone, which is spaced from the heating zone by a gap, which can be kept under observation. The temperatures of the heating and cooling zones are controlled to <b>create</b> <b>a</b> <b>variable</b> temperature gradient across the gap so that the freezing isotherm of the specimen always remains in a substantially constant position within the gap, {{where it can be}} observed, and where the specimen can be moved longitudinally while the temperature gradient is changed...|$|E
5000|$|Some {{software}} {{supports the}} use of the number sign (...) {{as an alternative to the}} semicolon for indicating comments. Practically speaking, using it to begin a line may effectively change <b>a</b> <b>variable</b> name on that line. For instance, the following line <b>creates</b> <b>a</b> <b>variable</b> named [...] "#var", but not one named [...] "var"; this is sometimes used to <b>create</b> <b>a</b> pseudo-implementation of a comment.#var=aMore generally, use of the number sign is unpredictable, as in these following lines (note the space after the number sign in the second line). For this reason, the number sign character should not be used to begin comments.#section# var=a ...|$|R
40|$|A no-risk {{approach}} for developing an Improved Waste Collection Subsystem (WCS) for the shuttle orbiter is described. The GE Improved WCS Concept {{builds on the}} experience of 14 Shuttle missions with over 400 man-days of service. This concept employs the methods of the existing flight-proven mature design, augmenting them to eliminate foreseen difficulties and to fully comply with the design requirements. The GE Improved WCS Concept includes separate storage for used wipes. Compaction of the wipes provides a solution to the capacity problem, fully satisfying the 210 man-day storage requirement. The added feature of in-flight serviceable storage space for the wipes <b>creates</b> <b>a</b> <b>variable</b> capacity feature which affords redundancy in the event of wipes compaction system failure. Addition of features permitting in-flight servicing of the feces storage tank <b>creates</b> <b>a</b> <b>variable</b> capacity WCS with easier post-flight servicing to support rapid turnaround of the Shuttle orbiter. When these features are combined with a vacuum pump to evacuate wipes and fecal storage tanks through replaceable odor/bacteria filters to the cabin, the GE Improved WCS satisfies the known requirements for Space Station use, including no venting to space...|$|R
30|$|In {{the case}} of Django framework, View is the Python {{callback}} function for a particular URL. It puts the form we <b>created</b> into <b>a</b> <b>variable,</b> checks its validity, saves it and defines the page to redirect.|$|R
