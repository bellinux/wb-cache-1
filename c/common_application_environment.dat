6|8840|Public
2500|$|The new SQLC [...] "gang of four", MS, Tandem, DEC and Sybase, {{brought an}} updated version of SQLC to the next SAG meeting in June 1990. The SAG responded by opening the {{standard}} effort to any competing design, but of the many proposals, only Oracle Corp had a system that presented serious competition. In the end, SQLC won the votes and became the draft standard, but only after large portions of the API were removed – the standards document was trimmed from 120 pages to 50 during this time. It was also during this period that the name Call Level Interface was formally adopted. [...] In 1995 SQL/CLI became part of the international SQL standard, ISO/IEC 9075-3. The SAG itself was taken over by the X/Open group in 1996, and, over time, became part of The Open Group's <b>Common</b> <b>Application</b> <b>Environment.</b>|$|E
50|$|The Portability Guide {{specifies}} a <b>Common</b> <b>Application</b> <b>Environment</b> (CAE) {{intended to}} allow portability of applications across operating systems. The primary aim was compatibility between different vendors' implementations of UNIX, though some vendors also implemented the standards on non-UNIX platforms. The XPG3 and XPG4 standards, released in 1989 and 1992 respectively, define {{all aspects of}} the operating system, programming languages and protocols which compliant systems should have.|$|E
50|$|The {{interface}} {{is part of}} what The Open Group, publishes {{in a part of the}} X/Open Portability Guide, {{termed the}} <b>Common</b> <b>Application</b> <b>Environment,</b> which is intended to be a wide standard for programming open applications, i.e., applications from different programming teams and different vendors that can interoperate efficiently. SQL/CLI provides an international standard implementation-independent CLI to access SQL databases. Client-server tools can easily access databases through dynamic-link libraries (DLL). It supports and encourages a rich set of client-server tools.|$|E
50|$|The last {{version of}} the XPG, the X/Open Portability Guide Issue 4 (also known as the <b>Common</b> <b>Applications</b> <b>Environment</b> Specification Issue 4 (CAE4)), was {{published}} in July 1992 by The Open Group. The Single UNIX Specification {{was based on the}} XPG4 standard.|$|R
40|$|Changes to the {{conceptual}} structure (meta-data) of a database are <b>common</b> in many <b>application</b> <b>environments</b> {{and are in}} general inadequately supported by existing database systems. An approach to supporting such meta-data evolution in a simple, extensible, object database environment is presented. Machine learning techniques are {{the basis for a}} cooperative user/system database design and evolution methodology. An experimental end-user database evolution tool based on this approach has been designed and implemented...|$|R
40|$|Web {{services}} {{became very}} popular theme to talk. They {{are based on}} de-facto standards and solve problems we discussed years. New features extend <b>common</b> Web <b>applications</b> and so {{they seem to be}} “magic potion ” for diseases of regular Web based application. This paper introduces web services technology and makes overview of standards, technologies and architecture that define Web services. 1. PROBLEM DEFINITION Everyday’s life brings everyday’s problems. Even such a simple problem as a periodical exchange rates or weather forecast reports processing by your application can be relatively hard to implement when they are based on <b>common</b> Web <b>application</b> <b>environment.</b> You need to parse whole HTML document content each time you want to obtain some useful data. This seems like quite easy thing to do but it is very depended on the quality of original HTML code and, of course, it is not faultless. You already know than HTML tags are not strictly defined and you have seen very interesting effec...|$|R
5000|$|The new SQLC [...] "gang of four", MS, Tandem, DEC and Sybase, {{brought an}} updated version of SQLC to the next SAG meeting in June 1990. The SAG responded by opening the {{standard}} effort to any competing design, but of the many proposals, only Oracle Corp had a system that presented serious competition. In the end, SQLC won the votes and became the draft standard, but only after large portions of the API were removed - the standards document was trimmed from 120 pages to 50 during this time. It was also during this period that the name Call Level Interface was formally adopted. In 1995 SQL/CLI became part of the international SQL standard, ISO/IEC 9075-3. The SAG itself was taken over by the X/Open group in 1996, and, over time, became part of The Open Group's <b>Common</b> <b>Application</b> <b>Environment.</b>|$|E
40|$|Abstract. Simulation of the <b>common</b> <b>application</b> <b>environment</b> of {{furniture}} were carried out, effects of different processing methods, storage time and airtight time were investigated. The {{results showed that}} the longer storage time or shorter airtight time was, the lower formaldehyde emission was. While the shedding of edge banding and metal connecting parts would increase the formaldehyde emission...|$|E
40|$|Tin (Sn) Whiskers {{have been}} {{identified}} as one of the biggest concerns in the electronic industry as they can grow spontaneously out of Lead (Pb) -free Sn electrodeposited films as a mechanism to relieve the compressive stress in Sn films. Whiskers can cause short circuiting by connecting adjacent electronic components and, therefore, bring a serious reliability issue. In order to develop more effective strategies to mitigate whisker formation, it is necessary to evaluate and understand whisker growth and film microstructure evolution in different application environments. ^ Room temperature aging condition is a <b>common</b> <b>application</b> <b>environment</b> and whisker growth in such a condition was studied first. The effects of thin film crystallographic texture and substrate roughness on Sn whisker formation were determined during Cu 6 Sn 5 intermetallic (IMC) growth in Sn films on Copper (Cu). Other properties of Sn films were controlled in order to isolate the influences of film texture and substrate roughness. This work supports the relationship between whisker formation propensities, elastic strain energy density (ESED) as determined by Sn film crystallographic texture, and morphological changes to the IMC induced by substrate roughness, providing microstructural guidelines for creating films with a reduced propensity to form whiskers. ^ Sn whisker growth in another <b>common</b> <b>application</b> <b>environment,</b> thermal cycling condition, is also investigated. The evolution of surface morphology, including whisker formation, grain boundary cracking, and subsiding grains, was studied in Sn thin films on silicon (Si) or Cu substrates with physical vapor deposition (PVD) Cu/Ti inter-layers during thermal cycling from - 40 °C to 85 °C in air for up to 250 cycles. Multiple areas were tracked, and the areal density of whiskers and the grain morphologies within these areas were monitored with increasing number of thermal cycles by following a newly designed inspection procedure, which is different from the most commonly used Joint Electron Device Engineering Council (JEDEC) standard test procedure. The Sn films on both Si and Cu substrates were observed to show initial increasing and then decreasing whisker densities. The observed microstructure evolution identified whisker pinch-off and whisker shrinkage processes, suggesting that current JEDEC standard test could lead to an underestimation of whisker risk during thermal cycling. A whisker pinch-off model and a whisker shrinkage model were proposed to explain the observed morphological changes and the resulting decrease in whisker density during thermal cycling. Additional insights into the whisker growth behavior were developed by comparing whisker growth on thermally cycled Sn thin films and on room temperature aged films. It is proposed that there is a critical value of thermal stress. When the thermal stress is higher than the critical stress, the whisker formation will be the dominant stress relaxation process and thermal cycling will lead to a higher tendency for whiskers to form as compared to room temperature aging, and versa vice. ^ Based on the experiments and models in this thesis, whisker growth behavior in room temperature aging condition and thermal cycling condition is better understood and can be predicted, providing a guideline for whisker mitigation strategy development. ...|$|E
40|$|The {{influence}} of cutting parameters on the hole quality made {{using a new}} type of carbide drill, RT 100 U, has been analysed experimentally and analytically. The drilling process is a <b>common</b> <b>application</b> in industrial <b>environments</b> {{and it has to be}} established at high accuracy and short time. The {{influence of}} process parameters (cutting speed and feed rate) on dimensional accuracy and surface roughness is analysed. The experiment was made by using external cooling and canned cycles (G 81). On this experimental study was analysed the effect of feed rate onto the chip shape...|$|R
40|$|Computers and {{networks}} are increasingly {{able to support}} distributed collaborative multimedia applications. In fact, the growing interest in distance learning reflects the awareness that these technologies could support the broad, complex interactions {{at the heart of}} instruction. However, designers of such applications face many challenges. For example, how effective is a flexible design that lets a class form its own practices? To what extent should conventions be designed in or promoted through training? Although researchers have begun to explore these issues, longitudinal studies are rare. In this paper, we look at these issues using Virtual Blackboard, an extensible system that provides a wide range of interaction capabilities. In Virtual Blackboard we based development on the concept of the ISO/TEC standard MPEG- 4, which was providing the specifications that would make the development of a sophisticated, fully interactive, <b>common</b> for all <b>applications,</b> <b>environment</b> possible...|$|R
40|$|ABSTRACT MIGRATION OF J 2 EE/JAVA APPLICATIONS TO SAP NETWEAVER JAVA DEVELOPMENT INFRASTRUCTURE (SAP NWDI) by Krunal J. Rana Master of Science in Computer Science California State University, Chico Spring 2009 Maintaining {{different}} IT landscape {{infrastructure and}} maintaining a <b>common</b> <b>application</b> development <b>environment</b> is key to a company???s success. One {{of the ways to}} reduce the cost is to minimize application development time. There are many applications that will reduce cost, application development time, and increase the efficiency of the end product/application. However, various types of servers (SQL, Apache Tomcat, IBM WebSphere, SAP Web Application Server) need to be maintained in order to run Oracle, Java/J 2 EE, SAP-based business applications, and web-based applications. This increases the cost, and it is time consuming to maintain two different servers, which adversely affects the business and negatively affects the value of customer service. xii SAP, with the help of SAP Web Application Server, provides an integrated development environment based on the Eclipse Framework. It supports the development of Java/J 2 EE applications in a SAP environment, and it provides a central integrated development environment that provides a central repository for storing runtime objects, libraries, and source code. SAP Java Development Infrastructure (SAP JDI) provides a central and consistent development environment that supports software development during the entire life cycle of an application, and it is fully compliant with Java EE 5 standards. This project migrates J 2 EE/Java applications to a SAP Java Development Infrastructure. The tool used to migrate and develop the J 2 EE applications is SAP Netweaver Developer Studio (NWDS), which is an open source Integrated Development Environment (IDE) and provides a graphical interface. CSU, Chic...|$|R
40|$|In {{distributed}} database systems, {{information sharing}} across different parties is a <b>common</b> <b>application.</b> Almost all information sharing <b>applications</b> face a <b>common</b> threat from adversaries intending to obtain private {{data from the}} other parties. In this paper, we address privacy protection in distributed information sharing environments. In particular, we model and analyze privacy intrusion attacks. Most existing work adopts a model of honestbut-curious adversaries. We consider much more malicious and aggressive adversaries which may launch multiple correlated attacks, and propose and evaluate countermeasures. Numerical data show that while simple, these countermeasures can effectively defeat malicious attacks in practical <b>application</b> <b>environments.</b> Game theory is utilized to derive optimal strategies for both defending party and adversary. 1...|$|R
40|$|A non-trivial <b>application</b> <b>environment</b> is a {{inherent}} part of most multiagent systems. When a multiagent {{system is}} distributed {{over a number}} of different hosts (i. e. more than one execution environment is used), the <b>application</b> <b>environment</b> has to be distributed also. In this paper we discuss how a distributed <b>application</b> <b>environment</b> can dynamically adapt itself. Our focus is on a distributed <b>application</b> <b>environment</b> in which mobile agents move around and are aware of the distributed nature of the system. Using this knowledge, the agents try to adapt their behavior in order to exploit the characteristics of a distributed environment, giving the environment indications of which layout would make the application more effcient. We present a number of causes that can trigger the <b>application</b> <b>environment</b> to change its distribution layout...|$|R
5000|$|The <b>common</b> <b>application</b> {{service element}} {{sublayer}} provides {{services for the}} application layer and request services from the session layer.It provides support for <b>common</b> <b>application</b> services, such as: ...|$|R
5000|$|Dynamic Workload Broker - for {{automating}} grid <b>application</b> <b>environments</b> ...|$|R
50|$|Jeff co-founded, with Lori Mitchell, the <b>Common</b> Grant <b>Application</b> in 2006 and {{continues}} to serve as its President. The <b>Common</b> Grant <b>Application</b> offers a Web-based service {{that serves as a}} <b>common</b> <b>application</b> to non-profit grantseekers and a grant management system to non-profit grantmakers.|$|R
50|$|The Wireless <b>Application</b> <b>Environment</b> (WAE) space defines application-specific markup languages.|$|R
50|$|VTAM, a {{software}} package to provide log-in, session keeping and routing services within the mainframe. A terminal user would log-in via VTAM {{to a specific}} <b>application</b> or <b>application</b> <b>environment</b> (e.g. CICS, IMS, DB2 or TSO/ISPF). A VTAM device would then route data from that terminal to the appropriate <b>application</b> or <b>application</b> <b>environment</b> until the user logged out and possibly logged into another application. The original versions of IBM hardware could only keep one session per terminal. In the 1980s further software (mainly from third-party vendors) {{made it possible for}} a terminal to have simultaneous sessions with different <b>applications</b> or <b>application</b> <b>environments.</b>|$|R
5000|$|Smart {{client is}} a term {{describing}} a computer <b>application</b> <b>environment</b> which: ...|$|R
50|$|<b>Common</b> <b>applications</b> include picture frames, pipes, and molding.|$|R
5000|$|Life-critical system (a <b>common</b> <b>application</b> for TT architectures) ...|$|R
5000|$|... #Subtitle level 3: ACAP (Advanced <b>Common</b> <b>Application</b> Platform) ...|$|R
50|$|The latest {{implementations}} of situational <b>application</b> <b>environments</b> include Longjump, Force.com and WorkXpress.|$|R
5000|$|<b>Common</b> <b>applications</b> {{that are}} built using Voice Elements include: ...|$|R
5000|$|Some <b>common</b> <b>applications</b> of similitude and {{associated}} dimensionless numbers; ...|$|R
5000|$|... #Subtitle level 2: <b>Common</b> <b>applications</b> for copper heat {{exchangers}} ...|$|R
50|$|DoJa {{profile is}} a Java <b>application</b> <b>environment</b> {{specification}} for DoCoMo's i-mode mobile phone.|$|R
25|$|A <b>common</b> <b>application</b> of {{prediction}} intervals is to regression analysis.|$|R
50|$|Below is a table {{indicating}} the most <b>common</b> <b>application</b> codes.|$|R
50|$|A <b>common</b> <b>application</b> of {{prediction}} intervals is to regression analysis.|$|R
50|$|One <b>common</b> <b>application</b> of {{weighted}} sums {{arises in}} numerical integration.|$|R
5000|$|Code {{examples}} for <b>common</b> <b>applications,</b> {{called the}} eXpressDSP Reference Frameworks ...|$|R
50|$|Project Phobos is a lightweight, scripting-friendly, web <b>application</b> <b>environment</b> {{running on}} the Java platform.|$|R
5000|$|Macintosh <b>Application</b> <b>Environment,</b> a Mac OS {{application}} {{virtual machine}} for third party Unix systems ...|$|R
2500|$|The {{advantage}} of the <b>Common</b> <b>Application</b> {{is that it is}} the same for numerous colleges, and can save time and trouble for a student. It is accepted at 488 colleges out of several thousand, but only a third of the 488 use it exclusively, meaning that two-thirds allow an applicant to submit either the <b>Common</b> <b>Application</b> or the school's specific application form. [...] According to Hernandez, many admissions officers complain that the <b>Common</b> <b>Application</b> stifles creativity and encourages [...] "dull responses", and she recommends that students use the college's particular application when there is a choice.|$|R
