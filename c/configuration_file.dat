884|1083|Public
5|$|The mod was {{developed}} by Long War Studios, a team that came to include four core members, with assistance from 29 contributors, 20 voice actors, and three members of Firaxis Games, the developer of Enemy Unknown and Enemy Within. According {{to one of the}} mod's core developers, Amineri, the mod started as a series of changes to the base game's <b>configuration</b> <b>file,</b> and grew more expansive as the team's capabilities grew. By the end of the mod's development, the team was working directly with the Unreal Development Kit, and had created a Java-based tool to help manage the changes that the mod was making.|$|E
5|$|According to Amineri, {{one of the}} mod's core developers, initial {{versions}} of Long War used changes to the game's <b>configuration</b> <b>file</b> to change content in the game. After other mod makers that {{were not part of}} the Long War project discovered how to make changes to the game by directly working with its Unreal Engine, more significant game alterations became possible, and the forums of NexusMods became a hub where such changes were exchanged. Many of the mod's key features, including the increased number of soldiers and the lengthened campaign, first appeared in version beta 1.9, which was released in mid 2013. Shortly after Enemy Within released, Amineri and XMarksTheSpot completed development of a Java-based tool called upkmodder that allowed the team to more effectively manage and implement the changes made by the mod. In the late stages of the mod's development, the team worked directly with the Unreal Development Kit.|$|E
25|$|The <b>configuration</b> <b>file</b> for a {{user can}} be edited by calling crontab -e {{regardless}} of where the actual implementation stores this file.|$|E
5000|$|<b>Configuration</b> <b>files</b> {{management}} to avoid overwriting existing user <b>configuration</b> <b>files.</b>|$|R
40|$|This {{document}} {{describes in}} some detail {{the contents of the}} kbird imake <b>configuration</b> <b>files.</b> The first part of this document describes the contents of each of the <b>configuration</b> <b>files.</b> The second part discusses various aspects of their use. Atutorial document is also available that describes how towrite Imakefiles that use the kbird <b>configuration</b> <b>files.</b> Imake. tmpl Imake. tmpl is a template file that defines the architecture of the <b>configuration</b> <b>files.</b> It serves to #include the other <b>configuration</b> <b>files</b> in the correct order, aswell as the Imakefile from the current directory, and it adds some default Makefile target entries. Imake. tmpl looks like this: #include #include ...|$|R
5000|$|Boot/ - Programs and <b>configuration</b> <b>files</b> {{used during}} {{operating}} system bootstrap. This {{is where the}} kernel image and bootloader <b>configuration</b> <b>files</b> are located.|$|R
25|$|Most of arm's {{attributes}} are configurable {{through an}} optional armrc <b>configuration</b> <b>file.</b> It runs on any platform supported by curses including Linux, macOS, and other Unix-like variants.|$|E
25|$|Unlike {{the similar}} command su, users must, by default, supply their own {{password}} for authentication, {{rather than the}} password of the target user. After authentication, and if the <b>configuration</b> <b>file,</b> which is typically located at /etc/sudoers, permits the user access, the system invokes the requested command. The <b>configuration</b> <b>file</b> offers detailed access permissions, including enabling commands only from the invoking terminal; requiring a password per user or group; requiring re-entry of a password every time or never requiring a password at all for a particular command line. It can also be configured to permit passing arguments or multiple commands.|$|E
25|$|Unlike {{the command}} su, users supply their {{personal}} password to sudo if necessary. After authentication, {{and if the}} <b>configuration</b> <b>file</b> permits the user access, the system invokes the requested command. By default the user's password can be retained through a grace period (15 minutes per pseudo terminal), allowing the user to execute several successive commands as the requested user without having to provide a password again.|$|E
5000|$|... conffiles {{lists the}} files of the package that {{should be treated as}} <b>configuration</b> <b>files.</b> <b>Configuration</b> <b>files</b> are not {{overwritten}} during an update unless specified.|$|R
40|$|This work {{studies the}} way of saving <b>configuration</b> <b>files</b> in Unix-like {{operating}} systems, so the location and content system and also user <b>configuration</b> <b>files.</b> This work also studies the history of operating system Unix and GNU/Linux and describes aplication, that implements gained experience and makes possible to save <b>configuration</b> <b>files</b> and also restore from backup...|$|R
5000|$|In Mac OS X, {{system-wide}} <b>configuration</b> <b>files</b> {{are typically}} {{stored in the}} /Library/ folder, whereas per-user <b>configuration</b> <b>files</b> are stored in the corresponding ~/Library/ folder in the user's home directory, and <b>configuration</b> <b>files</b> set by the system are in /System/Library/. Within these respective directories, an application typically stores a property list file in the Preferences/ sub-directory.|$|R
25|$|Cron {{is driven}} by a crontab (cron table) file, a <b>configuration</b> <b>file</b> that {{specifies}} shell commands to run periodically on a given schedule. The crontab files are stored where the lists of jobs and other instructions to the cron daemon are kept. Users can have their own individual crontab files and often there is a system-wide crontab file (usually in /etc or a subdirectory of /etc) that only system administrators can edit.|$|E
25|$|In Windows {{releases}} {{starting from}} Windows Vista and Windows Server 2008, NTLDR has been split off {{back to its}} boot manager and system loader parts: the Windows Boot Manager and winload.exe. The boot manager part has been completely rewritten, it no longer uses boot.ini as a <b>configuration</b> <b>file,</b> although the bootcfg utility for modifying boot.ini is still present for the case of multi-boot configurations with Windows versions up to Windows XP and Windows Server 2003.|$|E
25|$|Applications make a {{function}} call to WBTRCALL.DLL, a loader and requester interface. The loader and requester module verify the BTI.INI <b>configuration</b> <b>file</b> is correctly {{set up to}} load the client-based Btrieve engine. In turn, this loads the local interface to the btrieve engine (WBTRLOCL.DLL). If necessary, this local interface loads the Btrieve engine (WBTR32.EXE) into memory and sends the necessary database requests to it. The database engine then calls various Win32 system libraries to perform file operations on the database files.|$|E
50|$|W3Perl has an {{administration}} interface which allows building <b>configuration</b> <b>files</b> from a web interface. One can also manage <b>configuration</b> <b>files,</b> package updates, run scripts, and see stats output.|$|R
30|$|In our framework, we {{employed}} Unix-like text based <b>configuration</b> <b>files</b> {{to configure}} characteristics {{and behavior of}} each node in the simulation. In the <b>configuration</b> <b>files,</b> mechanisms are provided to set {{the role of the}} node as either OBU or RSU, or to define the number of RSU, and their unique IDs. A script is also provided for generating <b>configuration</b> <b>files</b> automatically for large deployments of VANETs.|$|R
50|$|Catalog {{awareness}} {{is accomplished by}} using <b>configuration</b> <b>files</b> for each flavor of DBMS to define the queries to run against the data base catalog meta data. There are also separate <b>configuration</b> <b>files</b> for the administration component.|$|R
25|$|A {{significant}} change from previous versions of IIS {{is that all}} web server configuration information is stored solely in XML configuration files, instead of in the metabase. The server has a global <b>configuration</b> <b>file</b> that provides defaults, and each virtual web's document root (and any subdirectory thereof) may contain a web.config containing settings that augment or override the defaults. Changes to these files take effect immediately. This marks {{a significant departure from}} previous versions whereby web interfaces, or machine administrator access, was required to change simple settings such as default document, active modules, and security/authentication.|$|E
25|$|On {{the day of}} a leap second event, ntpd {{receives}} notification {{from either}} a <b>configuration</b> <b>file,</b> an attached reference clock, or a remote server. Because of the requirement that time must appear to be monotonically increasing, a leap second is inserted with the sequence 23:59:59, 23:59:60, 00:00:00. Although the clock is actually halted during the event, any processes that query the system time cause it to increase by a tiny amount, preserving the order of events. If a negative leap second should ever become necessary, it would be deleted with the sequence 23:59:58, 00:00:00, skipping 23:59:59.|$|E
25|$|At {{the core}} of the XPS print path is XPSDrv, the XPS-based printer driver which {{includes}} the filter pipeline. It contains a set of filters which are print processing modules and an XML-based <b>configuration</b> <b>file</b> to describe how the filters are loaded. Filters receive the spool file data as input, perform document processing, rendering and PDL post-processing, and then output PDL data for the printer to consume. Filters can perform a single function such as watermarking a page or doing color transformations or they can perform several print processing functions on specific document parts individually or collectively and then convert the spool file to the page description language supported by the printer.|$|E
40|$|Abstract—A {{repository}} of router <b>configuration</b> <b>files</b> from production networks {{would provide the}} research community with {{a treasure trove of}} data about network topologies, routing designs, and security policies. However, <b>configuration</b> <b>files</b> have been largely unobtainable precisely because they provide detailed information that could be exploited by competitors and attackers. This paper describes a method for anonymizing router <b>configuration</b> <b>files</b> by removing all information that connects the data to the identity of the underlying network, while still preserving the structure of information that makes the data valuable to networking researchers. Anonymizing <b>configuration</b> <b>files</b> has unusual requirements, including preserving relationships between elements of data, anonymizing regular expressions, and robustly coping with more than 200 versions of the configuration language. Conventiona...|$|R
50|$|No {{additional}} <b>configuration</b> <b>files</b> needed.|$|R
50|$|Some {{frameworks}} need multiple <b>configuration</b> <b>files,</b> {{each with}} many settings. These provide information specific to each project, ranging from URLs to mappings between classes and database tables. A {{large number of}} <b>configuration</b> <b>files</b> with lots of parameters {{is often difficult to}} maintain.|$|R
25|$|A {{controller}} is a server-side {{component of}} Rails that responds to external requests from the web server to the application, by determining which view file to render. The controller {{may also have}} to query one or more models for information and pass these on to the view. For example, in an airline reservation system, a controller implementing a flight-search function would need to query a model representing individual flights to find flights matching the search, and might also need to query models representing airports and airlines to find related secondary data. The controller might then pass some subset of the flight data to the corresponding view, which would contain a mixture of static HTML and logic that use the flight data to create an HTML document containing a table with one row per flight. A controller may provide one or more actions. In Ruby on Rails, an action is typically a basic unit that describes {{how to respond to}} a specific external web-browser request. Also, note that the controller/action will be accessible for external web requests only if a corresponding route is mapped to it. Rails encourages developers to use RESTful routes, which include actions such as create, new, edit, update, destroy, show, and index. These mappings of incoming requests/routes to controller actions can be easily set up in the routes.rb <b>configuration</b> <b>file.</b>|$|E
500|$|Numerous {{configuration}} {{options are}} supported, affecting both core PHP features and extensions. [...] <b>Configuration</b> <b>file</b> php.ini is searched for in different locations, {{depending on the}} way PHP is used. [...] The <b>configuration</b> <b>file</b> is split into various sections, {{while some of the}} configuration options can be also set within the web server configuration.|$|E
2500|$|... torrc <b>configuration</b> <b>file</b> with syntax {{highlighting}} {{and validation}} ...|$|E
5000|$|Supports {{customization}} using [...]xml <b>configuration</b> <b>files</b> and JavaScript ...|$|R
5000|$|... easy {{configuration}} of software modules via <b>configuration</b> <b>files</b> ...|$|R
5000|$|Importing network <b>configuration</b> <b>files</b> to {{generate}} topologies automatically ...|$|R
2500|$|In Mozilla Firefox {{it can be}} {{disabled}} in the <b>configuration</b> <b>file</b> {{under the}} key name [...] "accessibility.blockautorefresh".|$|E
2500|$|... visudo is a {{command-line}} utility {{that allows}} editing the <b>configuration</b> <b>file</b> in a fail-safe manner. It prevents multiple simultaneous edits with locks and performs sanity and syntax checks.|$|E
2500|$|Support {{of shared}} folders and {{drag-and-drop}} file transfer between host and guest. This functionality {{is described as}} HGFS (Host Guest File System), and may be disabled by default for security; it may be enabled by changes to the [...]VMX <b>configuration</b> <b>file</b> ...|$|E
5000|$|Flat-text {{formatted}} <b>configuration</b> <b>files</b> (integrates {{with many}} config editors) ...|$|R
5000|$|Configuration {{language}}, {{a language}} {{used to write}} <b>configuration</b> <b>files</b> ...|$|R
5000|$|... all <b>{{configuration}}</b> <b>files</b> {{needed to}} define the cluster configuration ...|$|R
