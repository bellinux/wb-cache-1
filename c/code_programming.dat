58|5475|Public
2500|$|Although Prolog {{is widely}} used in {{research}} and education, Prolog and other logic programming languages {{have not had a}} significant impact on the computer industry in general. [...] Most applications are small by industrial standards, with few exceeding 100,000 lines of <b>code.</b> <b>Programming</b> in the large is considered to be complicated because not all Prolog compilers support modules, and there are compatibility problems between the module systems of the major Prolog compilers. [...] Portability of Prolog code across implementations has also been a problem, but developments since 2007 have meant: [...] "the portability within the family of Edinburgh/Quintus derived Prolog implementations is good enough to allow for maintaining portable real-world applications." ...|$|E
50|$|Lego Mindstorms' {{programming}} is command box programming, rather than <b>code</b> <b>programming.</b>|$|E
5000|$|... 2009 | Chat <b>Code</b> <b>Programming</b> for Tradewars Rising (PC) - Published by Sylien Games ...|$|E
40|$|Object <b>code</b> is a <b>program</b> of a {{processor}} language {{and can be}} directly executed on a machine. Program verification constructs a formal proof that a program correctly implements its specification. Verifying object code therefore ensures that the program {{which is to be}} executed on a machine is correct. However, the nature of processor languages makes it difficult to specify and reason about object <b>code</b> <b>programs</b> in a formal system of logic. Furthermore, a proof of the correctness of an object <b>code</b> <b>program</b> will often be too large to construct manually because of the size of object <b>code</b> <b>programs.</b> The presence of pointers and computed jumps in object <b>code</b> <b>programs</b> constrains the use of automated tools to simplify object code verification. This thesis develops an abstract language which is expressive enough to describe any sequential object <b>code</b> <b>program.</b> The abstract language supports the definition of program logics in which to specify and verify object <b>code</b> <b>programs.</b> This allows the object c [...] ...|$|R
40|$|Object <b>code</b> is a <b>program</b> of a {{processor}} language {{and can be}} directly executed on a machine. Program verification constructs a formal proof that a program correctly implements its specification. Verifying object code therefore ensures that the program {{which is to be}} executed on a machine is correct. However, the nature of processor languages makes it difficult to specify and reason about object <b>code</b> <b>programs</b> in a formal system of logic. Furthermore, a proof of the correctness of an object <b>code</b> <b>program</b> will often be too large to construct manually because of the size of object <b>code</b> <b>programs.</b> The presence of pointers and computed jumps in object <b>code</b> <b>programs</b> constrains the use of automated tools to simplify object code verification. This thesis develops an abstract language which is expressive enough to describe any sequential object <b>code</b> <b>program.</b> The abstract language supports the definition of program logics in which to specify and verify object <b>code</b> <b>programs.</b> This allows the object <b>code</b> <b>programs</b> of any processor language to be verified in a single system of logic. The abstract language is expressive enough that a single command is enough to describe the behaviour of any processor instruction. An object <b>code</b> <b>program</b> can therefore be translated to the abstract language by replacing each instruction with the equivalent command of the abstract language. This ensures that the use of the abstract language does not increase the difficulty of verifying an object <b>code</b> <b>program.</b> The verification of an object <b>code</b> <b>program</b> can be simplified by constructing an abstraction of the program and showing that the abstraction correctly implements the program specification. Methods for abstracting programs of the abstract language are developed which consider only the text of a program. These methods are based on describing a finite sequence of commands as a single, equivalent, command of the abstract language. This is used to define transformations which abstract a program by replacing groups of program commands with a single command. The abstraction of a program formed in this way can be verified in the same system of logic as the original program. Because the transformations consider only the program text, they are suitable for efficient mechanisation in an automated proof tool. By reducing the number of commands which must be considered, these methods can reduce the manual work needed to verify a program. The use of an abstract language allows object <b>code</b> <b>programs</b> to be specified and verified in a system of logic while the use of abstraction to simplify programs makes verification practical. As examples, object <b>code</b> <b>programs</b> for two different processors are modelled, abstracted and verified in terms of the abstract language. Features of processor languages and of object <b>code</b> <b>programs</b> which affect verification and abstraction are also summarised...|$|R
5000|$|Transana, QDA <b>Coding</b> <b>Program,</b> {{originally}} funded {{development by}} the TalkBank ...|$|R
5000|$|In August 1983, New Order {{released}} their iconic [...] "Blue Monday", {{which was}} composed on prototype-level homebrew [...] "step-time" [...] binary <b>code</b> <b>programming,</b> morphologically a MIDI rendition.|$|E
50|$|Each issue {{contained}} {{articles on}} various topics. Subjects included computer applications, computer {{hardware and software}} technology, concepts in computer science, practical electronics projects, BASIC and machine <b>code</b> <b>programming,</b> other programming languages, operating systems (including MS-DOS and UNIX), and a jargon dictionary.|$|E
50|$|The logic {{designs for}} CIFA-1, started in 1953, was {{presented}} at the International Symposium in Dresden in 1955, and the prototype, which used 1500 vacuum tubes, cylindrical magnet memory and machine <b>code</b> <b>programming,</b> was finished in 1957. Later CIFA computers were CIFA-2 (800 vacuum tubes) in 1959, CIFA-3 (for the Bucharest University's Computer Center) in 1961 and CIFA-4 in 1962.|$|E
50|$|Since 2005 Inkscape {{has participated}} in the Google Summer of <b>Code</b> <b>program.</b>|$|R
5000|$|Data or {{executable}} <b>code</b> (<b>programs)</b> on the system, {{or other}} connected systems ...|$|R
50|$|Libav {{participated in}} the Google Summer of <b>Code</b> <b>program</b> in 2011 and 2012.|$|R
50|$|Until {{recent times}} Amiga lacked of real IDE {{programs}} (apart from the legacy IDE Storm C). All the development {{were made with}} advanced text editors such as Emacs, MicroEmacs, Cygnus Editor and Gold Ed (Gold Editor), which were capable to highlight syntax of various kind of <b>code</b> <b>programming</b> languages. Gold Ed then evolved in a complete IDE environment commercial program called Cubic IDE.|$|E
50|$|Zeus Assembler is an {{assembler}} {{development tool}} for the Z80 originally written by Neil Mottershead for the Nascom 2 and then ported to the ZX Spectrum by Neil Mottershead and Simon Brattel in 1983. It was published by Crystal Computing. The program was designed to make Z80 machine <b>code</b> <b>programming</b> easier, with full symbolic instructions, and an editing style similar to the Spectrum's built-in BASIC.|$|E
50|$|With some effort, it {{is always}} {{possible}} to write compilers even for traditionally interpreted languages. For example, Common lisp can be compiled to Java bytecode (then interpreted by the Java virtual machine), C code (then compiled to native machine code), or directly to native <b>code.</b> <b>Programming</b> languages that support multiple compiling targets give more control to developers to choose either execution speed or cross-platform compatibility.|$|E
5000|$|ADOMD.NET - Extension of ADO.NET[...]NET based and {{suitable}} for managed <b>code</b> <b>programs</b> on CLR platforms.|$|R
5000|$|Code.org, {{to teach}} {{introductory}} programing {{to millions of}} students in their Hour of <b>Code</b> <b>program.</b>|$|R
40|$|Building Energy <b>Codes</b> <b>Program's</b> {{efforts are}} {{designed}} to result in increased stringency in national model energy codes, more rapid and broader adoption by states and localities of updated codes, and increased compliance and enforcement. Report estimates the historical impact of Building Energy <b>Codes</b> <b>Program</b> in terms of energy savings achieved that are based upon various editions of ANSI/ASHRAE/IESNA Standard 90. 1 (ASHRAE Standard 90. 1) ...|$|R
50|$|The {{programming}} style used in {{a particular}} program may be derived from the coding conventions of a company or other computing organization, {{as well as the}} preferences of the author of the <b>code.</b> <b>Programming</b> styles are often designed for a specific programming language (or language family): style considered good in C source code may not be appropriate for BASIC source code, and so on. However, some rules are commonly applied to many languages.|$|E
5000|$|... 437760 to 440319 - any {{of these}} numbers will cause the Apple II+ and Apple //e {{computers}} to crash to a monitor prompt when entered at the Basic prompt, due to a short-cut in the Applesoft <b>code</b> <b>programming</b> of the overflow test when evaluating 16 bit numbers. Entering 440000 at the prompt {{has been used to}} hack games that are protected against entering commands at the prompt after the game is loaded.|$|E
5000|$|C++ {{supports}} [...] statements, {{which may}} lead to spaghetti <b>code</b> <b>programming.</b> With {{the exception of the}} goto statement (which is very rarely seen in real code and highly discouraged), both Java and C++ have basically the same control flow structures, designed to enforce structured control flow, and relies on break and continue statements to provide some -like functions. Some commenters point out that these labelled flow control statements break the single point-of-exit property of structured programming.|$|E
50|$|In April 2009 OpenImageIO was {{accepted}} into the Google Summer of <b>Code</b> <b>program</b> with four student slots.|$|R
5000|$|AMO - For AS 2005 {{and later}} versions[...]NET based and {{suitable}} for managed <b>code</b> <b>programs</b> on CLR platforms.|$|R
50|$|The RVCF is {{a member}} of the Ontario Land Trust Alliance and participates in Imagine Canada's Ethical <b>Code</b> <b>Program.</b>|$|R
50|$|As {{after the}} OO model {{conception}} data and <b>code</b> <b>programming</b> code are mixed in a cohesive body, {{there are some}} difficulties in conceiving where the CODB and CO programming are separate one from the other. Although this enigma is important in conceptual epistemological area, in practical data processing there isn't so importance in this question because of usage of mapping models to large scale used software, like the mappings called ORDBMS and CRDB (component-relational database), in which the separation of data and code are still well defined.|$|E
50|$|Machine <b>code</b> <b>programming</b> used {{an unusual}} form of octal, {{known locally as}} 'bastardized octal'. It {{represented}} 8 bits with three octal digits but the first represented only two bits, whilst the others, the usual three. A more polite colloquial name was 'silly octal', derived from the official name which was syllabic octal. Although the word 'byte' had been coined by the designers of the IBM 7030 Stretch {{for a group of}} eight bits, it was not yet well known, and English Electric used the word 'syllable' for what is now called a byte.|$|E
50|$|As the {{magazine}} was launched four years before the first IBM PC (reviewed in {{the magazine}} in November 1981) the magazine originally covered early self-build microcomputers. It later expanded its coverage {{to all kinds of}} microcomputers from home computers to workstations, as the industry evolved. Regular features in the earlier years of the magazine were Guy Kewney's Newsprint section, Benchtests (in-depth computer reviews), Subset, covering machine <b>code</b> <b>programming,</b> type-in program listings, Bibliofile (book reviews), the Computer Answers help column, Checkouts (brief hardware reviews) TJ's Workshop (for terminal junkies), Screenplay for game reviews and Banks' Statement, the regular column from Martin Banks.|$|E
50|$|Throughout the years, {{development}} has been funded through the Google Summer of <b>Code</b> <b>program,</b> donations and paid developer time.|$|R
5000|$|In the 2011 film Source Code, [...] "Beleaguered Castle" [...] is {{the call}} {{sign for the}} Source <b>Code</b> <b>program.</b>|$|R
50|$|Part {{of these}} {{developments}} were fostered by Google's Summer of <b>Code</b> <b>program,</b> in which the Blender Foundation has participated since 2005.|$|R
5000|$|Although Prolog {{is widely}} used in {{research}} and education, Prolog and other logic programming languages {{have not had a}} significant impact on the computer industry in general. [...] Most applications are small by industrial standards, with few exceeding 100,000 lines of <b>code.</b> <b>Programming</b> in the large is considered to be complicated because not all Prolog compilers support modules, and there are compatibility problems between the module systems of the major Prolog compilers. [...] Portability of Prolog code across implementations has also been a problem, but developments since 2007 have meant: [...] "the portability within the family of Edinburgh/Quintus derived Prolog implementations is good enough to allow for maintaining portable real-world applications." ...|$|E
50|$|While {{the rest}} of the team is away, Murdoch finds that the machine is about to be swamped with interference, and may soon be unusable. He decides to take matters into his own hands and {{transmit}} a message far back into the past to remedy the situation. To get around the 24-hour limit of the machine, he asks Anne, who had learned machine <b>code</b> <b>programming</b> at her university, to write a program that would repeatedly bootstrap itself back in time until it reached the date desired. Anne complies, despite her deep misgivings. They manage to send the message, knowing they will be reset into the new timeline, and that anything could be different.|$|E
40|$|Cooperative Editing Systems in {{real-time}} {{allows a}} virtual team to view and edit a shared document {{at the same}} time. The document shared must be synchronized {{in order to ensure}} consistency for all the participants. This paper describes the Operational Transformation the evolution of its techniques its various applications major issues and achievements. In addition this paper will present working of a platform where two users can edit a <b>code</b> <b>programming</b> file at the same time...|$|E
50|$|From 2005, OSAF {{participated in}} Google's Summer of <b>Code</b> <b>programs</b> by {{allowing}} several interns {{to work on}} OSAF projects during the summer.|$|R
50|$|In March 2007, SilverStripe was {{selected}} for the Google Summer of <b>Code</b> <b>program.</b> This program resulted in the 2.2 release of SilverStripe.|$|R
50|$|Applicants for the Full-time Immersive, Flex, and Summer of <b>Code</b> <b>programs</b> {{must pass}} a fundamental-skills evaluation, {{technical}} interview, and in-person interview prior program acceptance.|$|R
