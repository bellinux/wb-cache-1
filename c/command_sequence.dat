100|222|Public
5|$|The {{design of}} the <b>command</b> <b>sequence</b> to be relayed to the {{spacecraft}} and the calculations for each photograph's exposure time were developed by space scientists Candy Hansen of NASA's Jet Propulsion Laboratory (JPL) and Carolyn Porco of the University of Arizona. After the planned imaging sequence was taken on February 14, 1990, {{the data from the}} camera was stored initially in an on-board tape recorder. Transmission to Earth was also delayed by the Magellan and Galileo missions being given priority over the use of the Deep Space Network. Then, between March and May 1990, Voyager 1 returned 60 frames back to Earth, with the radio signal travelling {{at the speed of light}} for nearly five and a half hours to cover the distance.|$|E
25|$|The rover has an Inertial Measurement Unit (IMU) that {{provides}} 3-axis information on its position, {{which is used}} in rover navigation. The rover's computers are constantly self-monitoring to keep the rover operational, such as by regulating the rover's temperature. Activities such as taking pictures, driving, and operating the instruments are performed in a <b>command</b> <b>sequence</b> that is sent from the flight team to the rover.|$|E
25|$|On July 4, 2015, New Horizons {{experienced}} a software anomaly {{and went into}} safe mode, preventing the spacecraft from performing scientific observations until engineers could resolve the problem. On July 5, NASA announced that the problem {{was determined to be}} a timing flaw in a <b>command</b> <b>sequence</b> used to prepare the spacecraft for its flyby, and the spacecraft would resume scheduled science operations on July 7. The science observations lost because of the anomaly were judged to have no impact on the mission's main objectives and minimal impact on other objectives.|$|E
2500|$|IEB: Instrument Expanded Blocks (instrument <b>command</b> <b>sequences)</b> ...|$|R
5000|$|Save and Manage Macros: For {{working with}} form {{overlays}} and repetitive <b>command</b> <b>sequences</b> ...|$|R
5000|$|Macro programming, {{allowing}} {{the user to}} program <b>command</b> <b>sequences</b> to be sent with one button press ...|$|R
2500|$|Background jobs: Also {{called a}} PSJob, it allows a <b>command</b> <b>sequence</b> (script) or {{pipeline}} to be invoked asynchronously. [...] Jobs can be {{run on the}} local machine or on multiple remote machines. An interactive cmdlet in a PSJob blocks {{the execution of the}} job until user input is provided.|$|E
2500|$|A Microsoft IntelliMouse {{relies on}} an {{extension}} of the PS/2 protocol: the ImPS/2 or IMPS/2 protocol (the abbreviation combines the concepts of [...] "IntelliMouse" [...] and [...] "PS/2"). It initially operates in standard PS/2 format, for backwards compatibility. After the host sends a special <b>command</b> <b>sequence,</b> it switches to an extended format in which a fourth byte carries information about wheel movements. The IntelliMouse Explorer works analogously, with the difference that its 4-byte packets also allow for two additional buttons (for a total of five).|$|E
5000|$|Special command mode window allows {{entering}} any macro <b>command</b> <b>sequence</b> directly, and {{doubles as}} on-line calculator.|$|E
50|$|The ‘TouchScreen’ from DAT/EM is an LCD monitor with an {{integrated}} tactile interface. The TouchScreen allows operators to quickly change <b>command</b> <b>sequences</b> during map compilation.|$|R
40|$|Operating robotic space {{missions}} via time-based <b>command</b> <b>sequences</b> {{has become}} a limiting factor in the exploration, defense, and commercial sectors. <b>Command</b> <b>sequencing</b> was originally designed for comparatively simple and predictable missions, with safe-mode responses for most faults. This approach has been increasingly strained to accommodate today’s more complex missions, which require advanced capabilities like autonomous fault diagnosis and response, vehicle mobility with hazard avoidance, opportunistic science observations, etc. Goal-based operation changes the fundamental basis of operations from imperative <b>command</b> <b>sequences</b> to declarative specifications of operational intent, termed goals. Execution based on explicit intent simplifies operator workload by focusing {{on what to do}} rather than how to do it. The move toward goal-based operations, which has already begun in some space missions, involves changes and opportunities in several places: operational processes and tools, human interface design, planning and scheduling, control architecture, fault protection, and verification and validation. Further, the need for future interoperation among multiple goal-based systems suggests that attention be given to areas for standardization. This overview paper defines the concept of goal-based operations, reviews a history of steps in this direction, and discusses the areas of change and opportunity through comparison with the prevalent operational paradigm of <b>command</b> <b>sequencing.</b> I...|$|R
30|$|Asm Files: 10, 868 {{training}} and 10, 873 test files containing a metadata manifest including data extracted by the Interactive Disassembler Tool. This information includes {{things such as}} function calls, strings, assembly <b>command</b> <b>sequences</b> and more.|$|R
50|$|By {{adjusting}} the precision with 'k', arbitrary number of decimal places can be produced. This <b>command</b> <b>sequence</b> outputs '.66666'.|$|E
5000|$|Any Unix <b>command</b> <b>sequence</b> {{that generates}} text {{can be used}} to send a message in one line. For example: ...|$|E
50|$|The PRIMOS {{text editor}} ED {{was a line}} editor. It could record a <b>command</b> <b>sequence</b> and replay it on {{different}} files.|$|E
40|$|Spacecraft mission {{planning}} functions including event prediction, mission scheduling, command planning, {{and ground}} track display {{have been developed}} for the KOMPSAT- 2 mission operations. Integrated event prediction functions including satellite orbital events, user requested imaging events, and satellite operational events have been implemented. Mission scheduling functions have been realized to detect the mission conflicts considering the user specified constraints and resources. A conflict free mission scheduling result is mapped into the spacecraft <b>command</b> <b>sequences</b> in the <b>command</b> planning functions. The <b>command</b> <b>sequences</b> are directly linked to the spacecraft operations using eXtensible Markup Language (XML) for command transmission. Ground track display shows the satellite ground trace and mission activities on a digitized world map with zoom capability...|$|R
40|$|The Rover Sequencing and Visualization Program (RSVP) {{has been}} updated. RSVP was {{reported}} in Rover Sequencing and Visualization Program (NPO- 30845), NASA Tech Briefs, Vol. 29, No. 4 (April 2005), page 38. To recapitulate: The Rover Sequencing and Visualization Program (RSVP) is the software tool {{to be used in}} the Mars Exploration Rover (MER) mission for planning rover operations and generating <b>command</b> <b>sequences</b> for accomplishing those operations. RSVP combines three-dimensional (3 D) visualization for immersive exploration of the operations area, stereoscopic image display for high-resolution examination of the downlinked imagery, and a sophisticated command-sequence editing tool for analysis and completion of the sequences. RSVP is linked with actual flight code modules for operations rehearsal to provide feedback on the expected behavior of the rover prior to committing to a particular sequence. Playback tools allow for review of both rehearsed rover behavior and downlinked results of actual rover operations. These can be displayed simultaneously for comparison of rehearsed and actual activities for verification. The primary inputs to RSVP are downlink data products from the Operations Storage Server (OSS) and activity plans generated by the science team. The activity plans are high-level goals for the next day s activities. The downlink data products include imagery, terrain models, and telemetered engineering data on rover activities and state. The Rover Sequence Editor (RoSE) component of RSVP performs activity expansion to <b>command</b> <b>sequences,</b> <b>command</b> creation and editing with setting of command parameters, and viewing and management of rover resources. The HyperDrive component of RSVP performs 2 D and 3 D visualization of the rover s environment, graphical and animated review of rover predicted and telemetered state, and creation and editing of <b>command</b> <b>sequences</b> related to mobility and Instrument Deployment Device (robotic arm) operations. Additionally, RoSE and HyperDrive together evaluate <b>command</b> <b>sequences</b> for potential violations of flight and safety rules. The products of RSVP include <b>command</b> <b>sequences</b> for uplink that are stored in the Distributed Object Manager (DOM) and predicted rover state histories stored in the OSS for comparison and validation of downlinked telemetry. The majority of components comprising RSVP utilize the MER command and activity dictionaries to automatically customize the system for MER activities...|$|R
40|$|Automated {{sequence}} generation" (autogen) signifies both {{a process}} and software used to automatically generate <b>sequences</b> of <b>commands</b> to operate various spacecraft. The autogen software comprises the autogen script plus the Activity Plan Generator (APGEN) program. APGEN {{can be used}} for planning missions and <b>command</b> <b>sequences...</b>|$|R
5000|$|In the Pascal {{programming}} language, {{the command}} [...] would execute the <b>command</b> <b>sequence</b> [...] {{as if all}} the fields of record [...] had been declared as variables. So, instead of writing [...] one could write [...]|$|E
5000|$|New Horizons entered {{safe mode}} on July 4, 2015, ten days before its closest {{approach}} to Pluto, after a timing {{problem in a}} <b>command</b> <b>sequence.</b> Some scientific data was lost, but with only minimal impact on mission objectives.|$|E
5000|$|One notable {{feature of}} the VT50 was the {{introduction}} of a separate function keypad with the [...] "Gold Key", which was used for editing programs like WPS-8, KED, and EDT. Pressing the Gold Key and then typing one of the keys on the keyboard sent a <b>command</b> <b>sequence</b> back to the host computer.|$|E
40|$|NASA's Mars Exploration Rovers are two sixwheeled, 175 -kg robotic {{vehicles}} {{which have}} operated on Mars {{for over a}} year as of March 2005. The rovers are controlled by teams who must understand the rover's surroundings and develop <b>command</b> <b>sequences</b> on a daily basis. The tight tactical planning timeline and everchanging environment call for tools that allow quick assessment of potential manipulator targets and traverse goals, since <b>command</b> <b>sequences</b> must be developed {{in a matter of hours}} after receipt of new data from the rovers. Reachability maps give a visual indication of which targets are reachable by each rover's manipulator, while slope and solar energy maps show the rover operator which terrain areas are safe and unsafe from different standpoints...|$|R
40|$|Status: Deployed {{application}} (used {{to operate}} payload onboard shuttle flight STS- 85) This paper describes the DATA-CHASER Automated Planner/Scheduler (DCAPS) system which automated generation and repair of <b>command</b> <b>sequences</b> for the DATA-CHASER shuttle payload. DCAPS uses general Artificial Intelligence (AI) heuristic search techniques, including an iterative repair {{framework in which}} the system iteratively resolves conflicts with the state, resource, and temporal constraints of the payload activities. DCAPS {{was used in the}} operations of the shuttle payload for the STS- 85 shuttle flight in August 1997 and enabled a 80 % reduction in mission operations effort and a 40 % increase in science return. Problem Description Generating <b>command</b> <b>sequences</b> for spacecraft operations can be a laborious process requiring a great deal of specialized knowledge. Typically, spacecraft command sets are large, with each command performing a low-level task. There are often many interactions between the commands relating to the state of the spacecraft. In addition, due to spacecraft power and weight limitations, the resources available on-board spacecraft are often scarce. These factors in combination make manual generation of <b>command</b> <b>sequences</b> a difficult process. Because of the importance and expense of this process, tools to assist in planning and scheduling spacecraft activities are critical to reducing the effort (and hence cost) of mission operations...|$|R
50|$|The {{main source}} of the Agena's {{electrical}} power was silver peroxide-zinc batteries, which from the early 1960s on were supplemented by solar arrays. An S-band beacon enabled the Agena to receive ground <b>command</b> <b>sequences</b> (image motion compensation, altered attitude, etc.), which could be stored for later execution.|$|R
50|$|Many {{facts in}} the novel are based on {{technical}} documents relating to the V-2 rockets. Equations featured in the text are correct. References to the works of Pavlov, Ouspensky, and Jung are based on Pynchon's research. The firing <b>command</b> <b>sequence</b> in German that is recited {{at the end of}} the novel is also correct and is probably copied verbatim from the technical report produced by Operation Backfire.|$|E
50|$|The rover has an Inertial Measurement Unit (IMU) that {{provides}} 3-axis information on its position, {{which is used}} in rover navigation. The rover's computers are constantly self-monitoring to keep the rover operational, such as by regulating the rover's temperature. Activities such as taking pictures, driving, and operating the instruments are performed in a <b>command</b> <b>sequence</b> that is sent from the flight team to the rover.|$|E
5000|$|A classic {{essay on}} {{computer}} programming, Real Programmers Don't Use Pascal, {{suggested that a}} common game for TECO fans was to enter their name as a <b>command</b> <b>sequence,</b> {{and then try to}} work out what would happen. The same essay in describing TECO coined the acronym YAFIYGI, meaning [...] "You Asked For It You Got It" [...] and thus being the antithesis of WYSIWYG ("What You See Is What You Get").|$|E
50|$|Although {{not part}} of the command set, a tilde {{character}} ~ is commonly used in modem <b>command</b> <b>sequences.</b> The ~ causes many applications to pause sending the command stream to the device (usually for half a second), e.g. after a Reset. The ~ is not sent to the modem.|$|R
50|$|Starting {{with the}} Datapoint 3300 in 1969, {{by the late}} 1970s and early 1980s, {{there were dozens of}} {{manufacturers}} of terminals, including Lear-Siegler, ADDS, Data General, DEC, Hazeltine Corporation, Heath/Zenith, Hewlett Packard, IBM, Televideo, and Wyse, many of which had incompatible <b>command</b> <b>sequences</b> (although many used the early ADM-3 as a starting point).|$|R
40|$|Most {{computer}} systems provide an authentication mechanism {{based on a}} user identification number and a password. In such systems, if a cracker can steal a user's password, {{there is no way}} to protect {{computer systems}}. The cracker may lead the computer systems from a normal state to an abnormal state. We propose an algorithm for intrusion detection. Normally, it is observed that users exhibit regularities in their input commands. We considered a method of characterizing users' behavior. This method is based on the frequency of <b>command</b> <b>sequences.</b> The behavior of the cracker might deviate from the peculiar behavior of each user. We tested intrusion detection using users' <b>command</b> <b>sequences.</b> As a result, we sound that each users' behavior is unique and this algorithm is effective. We think it is possible to reinforce the computer security with this new algorith...|$|R
5000|$|It {{has been}} {{observed}} that a TECO <b>command</b> <b>sequence</b> more closely resembles transmission line noise than readable text. One of the more entertaining games to play with TECO is to type your name in as a command line and try to guess what it does. Just about any possible typing error while talking with TECO will probably destroy your program, or even worse - introduce subtle and mysterious bugs in a once working subroutine.|$|E
50|$|At {{the end of}} the <b>command</b> <b>sequence,</b> {{the target}} returns a status code byte, such as 00h for success, 02h for an error (called a Check Condition), or 08h for busy. When the target returns a Check Condition in {{response}} to a command, the initiator usually then issues a SCSI Request Sense command in order to obtain a key code qualifier (KCQ) from the target. The Check Condition and Request Sense sequence involves a special SCSI protocol called a Contingent Allegiance Condition.|$|E
5000|$|A Microsoft IntelliMouse {{relies on}} an {{extension}} of the PS/2 protocol: the ImPS/2 or IMPS/2 protocol (the abbreviation combines the concepts of [...] "IntelliMouse" [...] and [...] "PS/2"). It initially operates in standard PS/2 format, for backwards compatibility. After the host sends a special <b>command</b> <b>sequence,</b> it switches to an extended format in which a fourth byte carries information about wheel movements. The IntelliMouse Explorer works analogously, with the difference that its 4-byte packets also allow for two additional buttons (for a total of five).|$|E
40|$|This paper {{describes}} {{the design and}} expert system that provides novice users implementation of an Nith help in using the Vax/VMS operating system. The most interesting feature of our advisor is that it follows the user’s interactions with the system and volunteers its help when it believes that the user would benefit from advice. The user need not ask for help or raise an error condition. The adivsor recognizes correct yet inefficient <b>command</b> <b>sequences</b> and helps the beginner become more proficient by indicating how these tasks may be done more efficiently. What are the the inefficient <b>command</b> <b>sequences</b> that {{we are trying to}} recognize? There are several dimensions to inefficiency in operating system interactions: Operating systems provide many features (such as wild cards in file names, lists of verb targets, etc) which are meant to minimize the user’s work (e. g., typing) ...|$|R
40|$|The ATHLETE (All-Terrain Hex-Limbed Extra-Terrestrial Explorer) vehicle {{consists}} of six identical, six {{degree of freedom}} limbs. FootFall is a ground tool for ATHLETE intended to provide an operator with integrated situational awareness, terrain reconstruction, stability and safety analysis, motion planning, and decision support capabilities to enable the efficient generation of flight software <b>command</b> <b>sequences</b> for walking. FootFall has been under development at NASA Ames for the last year, and having accomplished the initial integration, it {{is being used to}} generate <b>command</b> <b>sequences</b> for single footfalls. In this paper, the architecture of FootFall in its current state will be presented, results from the recent Human Robotic Systems Project?s Integrated Field Test (Moses Lake, Washington, June, 2008) will be discussed, and future plans for extending the capabilities of FootFall to enable ATHLETE to walk across a boulder field in real time will be described...|$|R
50|$|Canada : Two Canadian {{companies}} {{played a}} role in the mission. SED Systems located on the University of Saskatchewan campus in Saskatoon built three ground stations that were used to communicate with the Rosetta spacecraft. ADGA-RHEA Group of Ottawa provided MOIS (Manufacturing and Operating Information Systems) software which supported the procedures and <b>command</b> <b>sequences</b> operations software.|$|R
