2|707|Public
50|$|CAL (<b>Conversational</b> <b>Algebraic</b> <b>Language)</b> was a {{programming}} language and system designed and developed by Butler Lampson at Berkeley in 1967.|$|E
5000|$|Additional {{software}} was {{available from the}} XDS Users' Group Library, such as a string processing system, [...] "SYSPOPs" [...] (system programmed operators, which allow access to system services), CAL (<b>Conversational</b> <b>Algebraic</b> <b>Language,</b> a dialect of JOSS), QED (a text editor), TAP (Time-sharing Assembly Program, an assembler), and DDT, a debugging tool.|$|E
5000|$|ALGOL 58 - {{originally}} {{proposed to}} be called IAL, for International <b>Algebraic</b> <b>Language.</b>|$|R
40|$|AbstractIn this paper, {{the use of}} <b>algebraic</b> <b>languages</b> {{theory in}} solving an open problem in {{combinatorics}} is shown. By constructing a bijection between convex polyominoes and words of an <b>algebraic</b> <b>language,</b> and by solving the corresponding algebraic system, we prove {{that the number of}} convex polyominoes with perimeter 2 n + 8 is (2 n + 11) 4 n − 4 (2 n + 1) (2 nn) ...|$|R
40|$|In {{this chapter}} we {{consider}} students’ use of <b>algebraic</b> <b>language</b> in mathematical modeling and proving. We will show how a specific model derived from Habermas’ construct of rational behavior {{allows us to}} describe and interpret several kinds of students’ difficulties and mistakes in a comprehensive way, provides the teacher with useful indications for the students’ approach to <b>algebraic</b> <b>language</b> and suggests further research development...|$|R
5000|$|Alan J. Perlis, Klaus Samelson, Preliminary Report: International <b>Algebraic</b> <b>Language,</b> Communications of the ACM 1(12): 8-22 (1958) ...|$|R
50|$|FOCAL is an {{interpreted}} {{programming language}} resembling JOSS. The name is {{an acronym for}} Formulating On-Line Calculations in <b>Algebraic</b> <b>Language.</b>|$|R
40|$|A NEW <b>ALGEBRAIC</b> <b>LANGUAGE</b> ERPAL AND TRANSLATION OF A SUBSET OF SDL- 92 INTO ERPAL Husnu YENIGUN M. S. in Electrical and Electronics Engineering Supervisor: Assoc. Prof. Semih B ILGEN January, 1995, 158 pages. A new <b>algebraic</b> {{specification}} <b>language</b> named ERPAL (Extended Recursive Process <b>Algebraic</b> <b>Language)</b> {{based on}} the algebraic operators of Finitely Recursive Process Algebra concept ([1, 2, 3]) has been {{defined in terms of}} its syntax and operational semantics. The necessary translation primitives that convert SDL constructs into ERPAL constructs are explicitly defined and explained. The newly defined language ERPAL is more expressive in its synchronization features compared to other well [...] known languages such as CSP ([4]) or LOTOS([5, 6]). ERPAL is currently used as an intermediate conceptual data (process) structure in the design of an SDL 92 [...] to [...] C++ compiler that implements an SDL animator. Keywords: Discrete Event Systems, Formal Description Techniques, <b>Algebraic</b> <b>Languages,</b> SDL [...] . ...|$|R
40|$|This {{paper is}} {{a survey of}} <b>algebraic</b> {{modeling}} <b>languages,</b> which are playing an increasingly prominent role {{in the application of}} mathematical programming. An <b>algebraic</b> <b>language</b> is a computer readable language in which the objective function and the constraints of an optimization model are described algebraically. The emphasis in this paper is on descriptions of prominent language features, and comparisons with other representations of mathematical programs. The language features are evaluated {{on the basis of their}} contribution to the human ability to understand, maintain and verify model descriptions. Several recent research contributions are mentioned indicating that there is ample room for both improvements of <b>algebraic</b> <b>languages</b> and new types of languages...|$|R
40|$|This work {{is part of}} a wider {{project of}} didactical {{innovation}} aimed at fostering students’ conscious use of <b>algebraic</b> <b>language</b> through teaching experiments on proof in elementary number theory (ENT). In this paper we will analyze the role played by the teacher as a guide to the enactment of fundamental skills for the construction of reasoning by means of <b>algebraic</b> <b>language,</b> pointing out the specific characteristics of the teacher’s effective action in serving as a role model to his/her students...|$|R
40|$|A {{new concept}} is {{proposed}} for linking <b>algebraic</b> modeling <b>languages</b> with structure-exploiting solvers. SPI (Structure-Passing Interface) {{is a program}} that retrieves structure from an anonymous mathematical program built by an <b>algebraic</b> modeling <b>language.</b> SPI passes the special structure of the problem to an SES (Structure-Exploiting Solver). An integration of SPI and SES leads to SET (Structure-Exploiting Tool) {{and can be used}} with any <b>algebraic</b> modeling <b>language.</b> This approach relies on the idea that most exploitable block structures can be easily detected from the algebraic formulation of models. It should enable <b>algebraic</b> modeling <b>languages</b> to access the large body of algorithmic techniques which require problem structure. <b>algebraic</b> modeling <b>language,</b> large scale optimization, structure-exploiting solver...|$|R
40|$|A {{new concept}} is {{proposed}} for linking <b>algebraic</b> modeling <b>language</b> {{and the structure}} exploiting solver. SPI (Structure Passing Interface) is a program that enables retrieving structure from the anonymous mathematical program built by the <b>algebraic</b> modeling <b>language.</b> SPI passes the special structure of the problem to a SES (Structure Exploiting Solver). An integration of SPI and SES leads to SET (Structure Exploiting Tool) {{and can be used}} with any <b>algebraic</b> modeling <b>language.</b> Key words. <b>Algebraic</b> modeling <b>language,</b> large scale optimization, structure exploiting solver. 1 Introduction Practitioners who use mathematical programming are confronted with a dilemma. On the one hand, their problems are usually so large and so complex that they cannot be modeled without the aid of an <b>algebraic</b> modeling <b>language.</b> On the other hand, large models often necessitate the use of a specialized structure exploiting solver. Unfortunately, <b>algebraic</b> modeling <b>languages</b> only access general purpose This r [...] ...|$|R
50|$|LOTOS is an <b>algebraic</b> <b>language</b> that {{consists}} of two parts: a part for the description of data and operations, based on abstract data types, and a part for the description of concurrent processes, based on process calculus.|$|R
40|$|A {{new concept}} is {{proposed}} for linking <b>algebraic</b> modeling <b>language</b> {{and the structure}} exploiting solver. SPI (Structure Passing Interface) is a program that enables retrieving structure from the anonymous mathematical program built by the <b>algebraic</b> modeling <b>language.</b> SPI passes the special structure of the problem to a SES (Structure Exploiting Solver). An integration of SPI and SES leads to SET (Structure Exploiting Tool) {{and can be used}} with any <b>algebraic</b> modeling <b>language...</b>|$|R
40|$|A prototypal {{code for}} {{internal}} flows modeled by Navier Stokes Equations for three dimensional geometries {{is presented in}} a high level <b>algebraic</b> <b>language</b> (Matlab(R)) with details on its solving kernel based on a a quasi-segregation technique of the pressure equation. Some preliminary results are presented and discussed...|$|R
50|$|In essence a holon is a metaphoric {{computation}} container like a spreadsheet, but allowing procedural looping like {{an ordinary}} <b>algebraic</b> <b>language.</b> Yet its purpose is to frame algebraic formulas that represent higher mathematics (e.g. differential equations are algebraic formulas, in which some of their variables are rates).|$|R
50|$|Meta II {{programs}} are compiled into an interpreted byte code language. VALGOL and SMALGOL compilers illustrating its capabilities {{were written in}} the META II language, VALGOL is a simple <b>algebraic</b> <b>language</b> designed {{for the purpose of}} illustrating META II. SMALGOL was a fairly large subset of ALGOL 60.|$|R
50|$|He {{managed a}} system {{programming}} group in 1959 which developed an ALGOL-like compiler for Burroughs. The early programming language {{was known as}} BALGOL and was implemented for the Burroughs 220 machine. The language and compiler were an early implementation of the International <b>Algebraic</b> <b>Language</b> (IAL) also known as ALGOL 58.|$|R
50|$|AIMMS, an <b>algebraic</b> {{modeling}} <b>language</b> {{with support}} for constraint programming.|$|R
50|$|In 1847 Bertić {{wrote a book}} named Samouka - pokus pervi {{in which}} he offered a {{rudimentary}} <b>algebraic</b> <b>language</b> of “thoughts and concepts” (including variables, constants, equality sign) to which the law of substitution is added, which was the beginning stage of Boolean logic. Bertić made his research independent from George Boole.|$|R
40|$|We {{present a}} {{research}} study which main {{objective is to}} inquire into secondary school students´ ability to translate and relate algebraic statements which are presented in the symbolic and verbal representation systems. Data collection was performed with 26 14 - 15 years old students to whom we proposed {{the creation of an}} algebraic domino, designed for this research, and its subsequent use in a tournament. Here we present an analysis of the errors made in such translations. Among the obtained results, we note that the students found easier to translate statements from the symbolic to the verbal representation and that most errors in translating from verbal to symbolic expressions where derived from the particular characteristics of <b>algebraic</b> <b>language.</b> Other types of errors are also identified. KEYWORDS: <b>Algebraic</b> <b>language,</b> domino, errors, translation between representation systems, verbal representation...|$|R
40|$|In {{this paper}} we present an <b>Algebraic</b> <b>Language</b> which {{allows us to}} {{describe}} probabilistic and non-deterministic processes {{as well as to}} evaluate index performances: PPNAL (Performance Probabilistic and Non- deterministic <b>Algebraic</b> <b>Language).</b> We also analyse the Alternating Bit Protocol by using this language, showing the average time to send a message, taking into account that channels may fail with some known probability. 1 Syntax of the Language Let Δ = fa; b; c; ::g be a set of action types. Let p; q; r be probabilities and let greek letters be time parameters of actions. Terms of PPNAL are defined by: P ::= 0 j a:P j ha; i:P j P Φ P j P + P j P Φ r P j P jj AP j recX : P where r 2 (0; 1), 2...|$|R
40|$|It {{is common}} {{belief that there}} is a {{substantial}} difference between model-oriented (eg. Z and VDM) and <b>algebraic</b> specification <b>languages</b> (eg. LSL and ACT-ONE) wrt. their applicability to the specification of software systems. While model-oriented specification languages are assumed to be suited better for the description of state based systems (abstract machines), <b>algebraic</b> specification <b>languages</b> are assumed to be better for abstract datatype specifications. In this paper we shall demonstrate how an <b>algebraic</b> specification <b>language</b> (the Larch Shared Language) can be used to write specifications of abstract machines in the style of Z and how support tools for <b>algebraic</b> specification <b>languages,</b> eg. type checker and theorem provers, can be used to reason about abstract machines. (orig.) Available from TIB Hannover: RR 1912 (96 - 2 - 003) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|R
40|$|Milano, ItalyWe {{present a}} model for data {{organized}} as graphs. Regular expressions over the types of the node and edge labelsare used to qualify connected subgraphs. An <b>algebraic</b> <b>language</b> based on these regular expressions and supportinga restricted form of recursion is introduced. A natural application of this model and its query language is hypertextquerying...|$|R
40|$|In {{this paper}} sets of {{labelled}} partial orders are employed as fundamental mathematical entities for modelling nondeterministic and concurrent processes thereby obtaining so-called noninterleaving semantics. Based on closures of sets of labelled partial orders, a simple recursive <b>algebraic</b> <b>language</b> with refinement is given denotational models fully abstract w. r. t. corresponding behaviourally motivated equivalences. ...|$|R
40|$|We {{present a}} model for data {{organized}} as graphs. Regular expressions over the types of the node and edge labels are used to qualify connected subgraphs. An <b>algebraic</b> <b>language</b> based on these regular expressions and supporting a restricted form of recursion is introduced. A natural application of this model and its query language is hypertext querying. ...|$|R
40|$|We {{present an}} <b>algebraic</b> <b>language</b> for the {{description}} of probabilistic and non-deterministic processes, which allows us to evaluate performance indexes {{as well as to}} check some temporal requirements: ROSA (Reasoning On Stochastic Algebras). As application, we analyse the Alternating Bit Protocol obtaining the average time to send a message, considering that channels may fail with a known probability...|$|R
40|$|Introduction: The {{specification}} formalism {{employed in}} model checking is usually some flavour of temporal or process <b>algebraic</b> <b>language</b> that expresses {{properties of the}} behavioural aspects of a system. Knowledge [5] is a modality that is orthogonal to the behavioural dimension, capturing properties of information flow. Logics of knowledge {{have been shown to}} be a useful framework for th...|$|R
40|$|In {{this note}} we discuss trees {{similar to the}} Calkin-Wilf tree, a binary tree that enumerates all {{positive}} rational numbers in a simple way. The original construction of Calkin and Wilf is reformulated in a more <b>algebraic</b> <b>language,</b> and an elementary application of methods from analytic number theory gives restrictions on possible analogues. Comment: 15 pages, 1 figur...|$|R
50|$|The International <b>Algebraic</b> <b>Language</b> (IAL) was {{extremely}} influential and generally considered the ancestor {{of most of}} the modern programming languages (the so-called Algol-like languages). Additionally, ALGOL object code was a simple, compact, and stack-based instruction set architecture commonly used in teaching compiler construction and other high order languages (of which Algol is generally considered the first).|$|R
40|$|<b>Algebraic</b> <b>languages</b> are at {{the heart}} of many {{successful}} optimization modeling systems, yet they have been used with only limited success for combinatorial (or discrete) optimization. We show in this paper, through a series of examples, how an <b>algebraic</b> modeling <b>language</b> might be extended to help with a greater variety of combinatorial optimization problems. We consider specifically those problems that are readily expressed as the choice of a subset from a certain set of objects, rather than as the assignment of numerical values to variables. Since there is no practicable universal algorithm for problems of this kind, we explore a hybrid approach that employs a general-purpose subset enumeration scheme together with problem-specific directives to guide an e#cient search. Published as: J. J. Bisschop and Robert Fourer, New Constructs for the Description of Combinatorial Optimization Problems in <b>Algebraic</b> Modeling <b>Languages.</b> Computational Optimization and Applications 6 (1996) 83 [...] 116. [...] ...|$|R
40|$|We {{consider}} operations between languages, {{based on}} splitting the underlying alphabet into two disjoint sets, {{one of them}} having some priority. Such operations are generalizations of the classical catenation or shuffle operation, with which rational, linear and <b>algebraic</b> <b>languages</b> can be defined similar to the classical case. The basic properties of the corresponding language families are investigated too. TUCS Research Grou...|$|R
5000|$|International <b>Algebraic</b> <b>Language</b> (IAL, ALGOL 58) and ALGOL (1958 and 1960) thus {{introduced}} [...] for assignment, {{leaving the}} standard [...] available for equality, a convention followed by CPL, ALGOL W, ALGOL 68, Basic Combined Programming Language (BCPL), Simula, SET Language (SETL), Pascal, Smalltalk, Modula-2, Ada, Standard ML, OCaml, Eiffel, Object Pascal (Delphi), Oberon, Dylan, VHSIC Hardware Description Language (VHDL), {{and several other}} languages.|$|R
40|$|In {{this work}} we develop an <b>algebraic</b> <b>language</b> that {{represents}} a formal calculus for deep learning and is, {{at the same time}} a model which enables implementations and investigations of programs. To this purpose, we develop an abstract computational model of automat- ically di�erentiable programs. In the model, programs are elements of op. cit. programming spaces. Programs are viewed as maps from a �nite-dimensional vector space to itself op. cit. virtual memory space. Virtual memory space is an algebra of programs, an algebraic data structure (one can calculate with). The elements of the virtual memory space give the expansion of a program into an in�nite tensor series. We de�ne a di�erential operator on programming spaces and, using its powers, implement the general shift operator and the operator of program composition. The <b>algebraic</b> <b>language</b> constructed in this way is a complete model of deep learning. It enables us to express programs in suc...|$|R
40|$|In any {{recursive}} <b>algebraic</b> <b>language,</b> I find {{an interval}} of the lattice of equational theories, every element {{of which has}} finitely many covers. With every finite set of equations of this language, an equational theory of this interval is associated, which is decidable with decidable covers that can be algorithmically found. If the language is finite, both this theory and its covers are finitely based. Also, for every finite language and for every natural number n, I construct a finitely based decidable theory together with its exactly n covers which are decidable and finitely based. The construction is algorithmic. 1. Introduction and preliminaries. Let L be an <b>algebraic</b> <b>language,</b> i. e. a first-order language with equality, {{with at least one}} operation symbol and no relation symbol. An L-equation is a universal sentence of the form (∀v) (ϕ = ψ), where ϕ and ψ are L-terms. An (equational) theory is a set of L-equations closed under its logical consequences which are equations...|$|R
50|$|ALGO is an <b>algebraic</b> {{programming}} <b>language</b> {{developed between}} 1959 and 1961 for the Bendix G-15 computer.|$|R
