10000|10000|Public
5|$|Using linear probing, {{dictionary}} operations <b>can</b> <b>be</b> <b>implemented</b> {{in constant}} expected time. In other words, insert, remove and search operations <b>can</b> <b>be</b> <b>implemented</b> in O(1), {{as long as}} the load factor of the hash table is a constant strictly less than one.|$|E
5|$|Because {{the motion}} of the {{particles}} in these systems is reversible, they are typically implemented with reversible cellular automata. In particular, both the HPP and FHP lattice gas automata <b>can</b> <b>be</b> <b>implemented</b> with a two-state block cellular automaton using the Margolus neighborhood.|$|E
5|$|If a cell has state 0, its {{new state}} {{is taken from}} the cell to its left. Otherwise, its new state is taken from the cell to its right. That is, each cell <b>can</b> <b>be</b> <b>implemented</b> by a multiplexer, and is closely related in its {{operation}} to a Fredkin gate.|$|E
40|$|Abstract — The {{selective}} {{median filter}} {{is a mixed}} filter which removes spike noise (or an impulse noise) from a noisy image while preserving sharp edges. For this purpose we can use a double derivative filter or Laplace filter which acts as a noise detector. If it is found noisy then we apply a general median filter. The median filter technique, the eight direct neighbours and centre point of a sliding 3 -by- 3 array are examined. A selective median filter which consumes less power <b>can</b> <b>be</b> designed and different logics for majority bit evaluation <b>can</b> <b>be</b> applied and simulate in VHDL. Different majority bit calculation method <b>can</b> <b>be</b> <b>implement</b> and the result sorting circuit <b>can</b> <b>be</b> analyze for power analysis and <b>can</b> <b>be</b> <b>implement</b> in FPGA like hardware...|$|R
5|$|The {{hybrid ring}} {{discussed}} above <b>can</b> also <b>be</b> <b>implemented</b> in waveguide.|$|R
50|$|The branch-line coupler {{described}} above <b>can</b> also <b>be</b> <b>implemented</b> in waveguide.|$|R
5|$|Processor–processor and processor–memory {{communication}} <b>can</b> <b>be</b> <b>implemented</b> in hardware {{in several}} ways, including via shared (either multiported or multiplexed) memory, a crossbar switch, a shared bus or an interconnect network of {{a myriad of}} topologies including star, ring, tree, hypercube, fat hypercube (a hypercube {{with more than one}} processor at a node), or n-dimensional mesh.|$|E
5|$|Distributed element {{filters are}} used {{in many of the}} same {{applications}} as lumped element filters, such as selectivity of radio channel, bandlimiting of noise and multiplexing of many signals into one channel. Distributed element filters may be constructed to have any of the bandforms possible with lumped elements (low-pass, band-pass, etc.) with the exception of high-pass, which is usually only approximated. All filter classes used in lumped element designs (Butterworth, Chebyshev, etc.) <b>can</b> <b>be</b> <b>implemented</b> using a distributed element approach.|$|E
5|$|For {{clarity of}} presentation, the {{diagrams}} {{in this article}} are drawn with the components implemented in stripline format. This does not imply an industry preference, although planar transmission line formats (that is, formats where conductors consist of flat strips) are popular because they <b>can</b> <b>be</b> <b>implemented</b> using established printed circuit board manufacturing techniques. The structures shown can also be implemented using microstrip or buried stripline techniques (with suitable adjustments to dimensions) and can be adapted to coaxial cables, twin leads and waveguides, although some structures are more suitable for some implementations than others. The open wire implementations, for instance, of a number of structures are shown in the second column of figure 3 and open wire equivalents can be found for most other stripline structures. Planar transmission lines are also used in integrated circuit designs.|$|E
5000|$|A source tab <b>can</b> then <b>be</b> <b>implemented</b> by {{extending}} the classes: ...|$|R
50|$|The {{hybrid ring}} {{discussed}} above <b>can</b> also <b>be</b> <b>implemented</b> in waveguide.|$|R
500|$|The branch-line coupler {{described}} above <b>can</b> also <b>be</b> <b>implemented</b> in waveguide.Ishii, pp.223–226 ...|$|R
25|$|Iterative {{algorithms}} <b>can</b> <b>be</b> <b>implemented</b> {{by means}} of recursive predicates.|$|E
25|$|Dynamic data {{structures}} such as stacks and queues <b>can</b> <b>be</b> <b>implemented</b> using a linked list.|$|E
25|$|Additive {{synthesis}} <b>can</b> <b>be</b> <b>implemented</b> using {{a bank of}} sinusoidal oscillators, one {{for each}} partial.|$|E
2500|$|... <b>can</b> also <b>be</b> <b>implemented</b> in {{functional}} form, as in SQL's decode statement.|$|R
30|$|The {{proposed}} CF procedure <b>can</b> also <b>be</b> <b>implemented</b> {{with any}} other compatible clustering algorithm.|$|R
50|$|The Maildir {{standard}} <b>can</b> only <b>be</b> <b>implemented</b> on {{systems that}} accept colons in filenames.|$|R
25|$|It <b>can</b> <b>be</b> <b>implemented</b> in a {{computer}} language using just a few lines of code.|$|E
25|$|The {{methods of}} IOleObject that pertain to {{notifications}} <b>can</b> <b>be</b> <b>implemented</b> {{by calling the}} methods of this interface.|$|E
25|$|The {{combination}} of DNS caching and recursive functions {{in a name}} server is not mandatory; the functions <b>can</b> <b>be</b> <b>implemented</b> independently in servers for special purposes.|$|E
50|$|Shared {{resource}} access <b>can</b> also <b>be</b> <b>implemented</b> with Web-based Distributed Authoring and Versioning (WebDAV).|$|R
5000|$|Append <b>can</b> also <b>be</b> <b>implemented</b> using fold-right:(define append (lambda (a b) (fold-right cons b a))) ...|$|R
50|$|The {{rollback}} feature <b>is</b> usually <b>implemented</b> with {{a transaction}} log, but <b>can</b> also <b>be</b> <b>implemented</b> via multiversion concurrency control.|$|R
25|$|Most critically, {{researchers}} {{are seeking to}} determine what is responsible for the drastic decline of the subspecies, so more focused conservation actions <b>can</b> <b>be</b> <b>implemented.</b>|$|E
25|$|Coroutines <b>can</b> <b>be</b> <b>implemented</b> as {{a library}} if the {{programming}} language provides either continuations or generators - so {{the distinction between}} coroutines and generators in practice is a technical detail.|$|E
25|$|In a {{software}} implementation of an LFSR, the Galois form is more efficient, as the XOR operations <b>can</b> <b>be</b> <b>implemented</b> a word at a time: only the output bit must be examined individually.|$|E
40|$|AutoCAD system {{complement}} {{is created}} {{to make more}} easy working with AutoCAD graphic system. Functions are created using AutoLisp and VisualLISP programming languages. System complement <b>can</b> <b>be</b> <b>implement</b> to whatever release of AutoCAD. Developed complement is flexible for adding new function, maintenance is simple. Functions are divided into some parts by format...|$|R
50|$|A {{version of}} Yes I <b>Can</b> has <b>been</b> <b>implemented</b> since 2007 in Uruguay and enjoyed {{widespread}} success.|$|R
50|$|Data {{parallelism}} features <b>can</b> also <b>be</b> <b>implemented</b> by libraries using dedicated data structures, such as parallel arrays.|$|R
25|$|Karnaugh {{maps are}} used to simplify {{real-world}} logic requirements so that they <b>can</b> <b>be</b> <b>implemented</b> using a minimum number of physical logic gates. A sum-of-products expression can always be implemented using AND gates feeding into an OR gate, and a product-of-sums expression leads to OR gates feeding an AND gate. Karnaugh maps {{can also be used}} to simplify logic expressions in software design. Boolean conditions, as used for example in conditional statements, can get very complicated, which makes the code difficult to read and to maintain. Once minimised, canonical sum-of-products and product-of-sums expressions <b>can</b> <b>be</b> <b>implemented</b> directly using AND and OR logic operators.|$|E
25|$|Array rotation: {{move the}} items in an array {{to the left or}} right by some number of spaces, with values on the edges {{wrapping}} around to the other side. Rotations <b>can</b> <b>be</b> <b>implemented</b> as three reversals.|$|E
25|$|It has {{recently}} been shown that Cramer's rule <b>can</b> <b>be</b> <b>implemented</b> in O(n3) time, which is comparable to more common methods of solving systems of linear equations, such as LU, QR, or singular value decomposition.|$|E
50|$|Robust {{observers}} <b>can</b> also <b>be</b> <b>implemented</b> {{using the}} relaxed intersections to be robust {{with respect to}} outliers.|$|R
5000|$|Yes I <b>Can</b> has <b>been</b> <b>implemented</b> in {{a number}} of {{linguistic}} and cultural contexts including the following: ...|$|R
2500|$|Change management, a field {{studying}} how changes <b>can</b> <b>be</b> efficiently <b>implemented</b> in modern communities ...|$|R
