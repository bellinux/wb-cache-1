76|124|Public
50|$|In <b>code</b> <b>conversion,</b> {{alphabetical}} order is not significant.|$|E
5000|$|Student Major Information ¡V Nationality <b>Code</b> <b>Conversion</b> Table ...|$|E
5000|$|In telecommunication, {{the term}} <b>code</b> <b>conversion</b> has the {{following}} meanings: ...|$|E
5000|$|Converters - {{allowing}} custom <b>code</b> <b>conversions</b> between {{database and}} object types.|$|R
5000|$|The {{following}} table shows Windows-1252. Each {{character is}} shown with its Unicode equivalent and its decimal <b>code.</b> <b>Conversions</b> to Unicode {{are based on}} the Unicode.org mapping of Windows-1252 with [...] "best fit".|$|R
5000|$|Grooscript {{converts}} Groovy code to JavaScript code. Although Grooscript {{has some}} limitations compared to Apache Groovy, it can use domain classes {{in both the}} server and the client. Plugin support for Grails version 3.0 is provided, as well as online <b>code</b> <b>conversions.</b>|$|R
5000|$|Lín Jìnyì ( [...] / [...] ), editor. 1984. [...] Kanji denpō kōdō henkan hyō {{character}} telegraph <b>code</b> <b>conversion</b> table (In Japanese). Tokyo: KDD Engineering & Consulting.|$|E
5000|$|Where {{the host}} {{language}} and {{data manipulation language}} have different type systems, <b>code</b> <b>conversion</b> operates outside of the OO type system, and hence has a higher chance of having undetected errors.|$|E
50|$|Nigeria allows {{freedom of}} {{religion}}. Islam and Christianity {{are the two}} major religions. In 12 states of Nigeria which have a sharia-based penal <b>code,</b> <b>conversion</b> from Islam to another religion is illegal and often a capital offense.|$|E
40|$|Newnes Radio and Electronics Engineer's Pocket Book, Fifteenth Edition {{provides}} reference of {{the information}} relevant in radio and electronics engineering. The book presents tables, illustrations, and diagrams of various data used in radio and electronics engineering. The coverage of the text includes abbreviations and symbols, electrical equations, and <b>code</b> <b>conversions.</b> The text will be useful to engineers, technicians, and other professionals who require a reference about the different aspects of radio and electronics...|$|R
40|$|This paper {{describes}} {{an experiment in}} learning computer graphics algorithms through parallelizing three C code examples: Ray Tracing, Voxel Visualization, and Image Warping on PlayStation 3 (PS 3). An implementation of geometry subdivision of data for PS 3, which is a physically distributed memory machine, provides, for example, display of a 120 × 120 × 120 voxel slab at 30 frames per second. We notice that all the <b>code</b> <b>conversions</b> were done by novices without Cell programming experience in a quite short time...|$|R
40|$|International audienceOur aim in {{this paper}} is to analyse the evolvability of diverse <b>coding</b> <b>conversion</b> {{operators}} in an instance of the states based evolutionary algorithm (SEA). Since the representation of solutions or the selection of the best encoding during the optimization process has been proved to be very important for the efficiency of evolutionary algorithms (EAs), we will discuss a strategy of coupling more than one representation and different procedures of <b>conversion</b> from one <b>coding</b> to another during the search. Elsewhere, some EAs try to use multiple representations (SM-GA, SEA, etc.) in intention to benefit from the characteristics of each of them. In spite of those results, this paper shows that the change of the representation is also a crucial approach to take into consideration while attempting to increase the performances of such EAs. As a demonstrative example, we use a two states SEA (2 -SEA) which has two identical search spaces but different <b>coding</b> <b>conversion</b> operators. The results show that the way of changing from one coding to another and not only the choice of the best representation nor the representation itself is very advantageous and {{must be taken into account}} in order to well-desing and improve EAs execution...|$|R
50|$|The BETI was {{designed}} as a low cost serial terminal operating at speeds of up to 4800 baud (1200 baud without handshaking). The BETI also provides optional automatic <b>code</b> <b>conversion</b> to and from the baudot 5 level code used for RTTY and TELEX applications.|$|E
50|$|YUCCA is a Sequential to Parallel {{automatic}} <b>code</b> <b>conversion</b> tool {{developed by}} KPIT Technologies Ltd. Pune. It takes input as C source code {{which may have}} multiple source and header files. It gives output as transformed multi-threaded parallel code using pthreads functions and OpenMP constructs. The YUCCA tool does task and loop level parallelization.|$|E
5000|$|In telecommunications, an {{interface}} standard {{is a standard}} that describes one or more functional characteristics (such as <b>code</b> <b>conversion,</b> line assignments, or protocol compliance) or physical characteristics (such as electrical, mechanical, or optical characteristics) necessary to allow the exchange of information between two or more (usually different) systems or pieces of equipment. Communications protocols are an example.|$|E
40|$|Abstract {{copyright}} UK Data Service {{and data}} collection copyright owner. The aim of this survey was to collect detailed information on women and men's working time behaviour and preferences in 1989. Information on labour market circumstances, household characteristics and spouse's labour market behaviour were collected for a sample of employed men and women aged 20 - 55 years. Main Topics : Working time behaviour, remuneration and preferences. Standard Measures Occupational data coded to SOC, RG, IEST, Hope-Goldthorpe using Ken Prady's <b>coding</b> <b>conversion</b> matrix. General health question scale adopted from GHS...|$|R
50|$|In most languages, {{the word}} {{coercion}} {{is used to}} denote an implicit conversion, either during compilation or during run time. For example, in an expression mixing integer and floating point numbers (like 5 + 0.1), the compiler will automatically convert integer representation into floating point representation so fractions are not lost. Explicit type conversions are either indicated by writing additional code (e.g. adding type identifiers or calling built-in routines) or by <b>coding</b> <b>conversion</b> routines for the compiler to use when it otherwise would halt with a type mismatch.|$|R
5000|$|... {{implicit}} narrowing conversions - requiring all conversions to narrower types (e.g. from Long to Integer, Object to String, Control to TextBox) be {{explicit in}} <b>code</b> using <b>conversion</b> operators (e.g. CInt, DirectCast, CType).|$|R
50|$|As {{platforms}} and operating systems proliferated {{in the early}} 1980s, the company {{found it difficult to}} port the assembly language-based dBase to target systems. This led to a re-write of the platform in the C programming language, using automated <b>code</b> <b>conversion</b> tools. The resulting code worked, but was essentially undocumented and inhuman in syntax, a problem that would prove to be serious in the future.|$|E
50|$|Data rake-offs are {{provided}} for potentiometer, synchro, and digital information in allthree coordinates. The azimuth and elevation digital data {{is derived from}} optical-typeanalog-to-digital encoders. Two geared coders with ambiguity resolution are used foreach parameter. The data for each angle is a Gray code 17-bit word in serial form.The overlapping ambiguity bits are removed, and the data is transformed from cyclicGray code to straight binary before recording for transmission to the computer. Therange servo presents a 20-bit straight binary word in serial form after ambiguityresolution and <b>code</b> <b>conversion.</b> The same type optical encoders are used.|$|E
5000|$|The two {{products}} have {{significant differences in}} API. OS/2 was announced when Windows 2.0 was near completion, and the Windows API already defined. However, IBM requested that this API be significantly changed for OS/2. Therefore, issues surrounding application compatibility appeared immediately. OS/2 designers hoped for source <b>code</b> <b>conversion</b> tools, allowing complete migration of Windows application source code to OS/2 at some point. However, OS/2 1.x did not gain enough momentum to allow vendors to avoid developing for both OS/2 and Windows in parallel. IBM's involvement was much more successful in redefining Windows' visual appearance after the 1.0 release, giving it what is today perceived as the [...] "Windows 3.0 look".|$|E
5000|$|OSI layer 6, the Presentation Layer (source <b>coding,</b> {{including}} analog-to-digital <b>conversion</b> and signal compression).|$|R
5000|$|Article 3 of the Moroccan {{constitution}} [...] "guarantees to all {{the free}} exercise of beliefs", but the Moroccan criminal <b>code</b> prohibits <b>conversions</b> to other religions than Islam. Conversions of Muslims to Christianity (either proselytization or apostasy) were often in colonial period because laws against such conversions didn't exist yet.|$|R
50|$|While the {{law allows}} non-Muslims to {{practice}} their religion, it prohibits citizens from converting from Islam. The 2002 amended Constitution upholds religious freedom; however, the pre-existing Penal <b>Code</b> prohibits <b>conversion</b> from Islam {{and has yet to}} be modified to reflect this standard. Although enforceable, this law is rarely applied.|$|R
50|$|One of the most-cited {{reasons for}} the split was the {{divergence}} of the APIs between Presentation Manager and Windows, which was probably driven by IBM. Initially, Presentation Manager was based on Windows GUI code, and often had developments performed in advance, like the support for proportional fonts (which appeared in Windows only in 1990). One of the divergences regarded the position of coordinate (0,0), which was at the top-left in Windows, but at bottom-left (as in Cartesian coordinates) in Presentation Manager. In practice it became impossible to recompile a GUI program to run on the other system; an automated source <b>code</b> <b>conversion</b> tool was promised at some point. Both companies were hoping {{that at some point}} users would migrate to OS/2.|$|E
50|$|The Whitebox GAT {{project has}} adopted a novel {{approach}} for linking the software's development and user communities, known as software transparency, or open-access software (considered an extension of open-source software). The philosophy of transparency in software states that the user 1) {{has the right to}} view the underlying workings of a tool or operation, and 2) should be able to access this information in a way that reduces, or ideally eliminates, any barriers to viewing and interpreting it. This concept was developed {{as a response to the}} fact that the code base of many open-source projects can be so massive and its organization so complex that individual users often find the task of interpreting the underlying code too daunting when they are interested in a small portion of the overall code base, e.g. if the user would like to know how a particular tool or algorithm operates. Furthermore, when the software's source code is written in an unfamiliar programming language, the task of interpreting the code is made even more difficult. For some open-source projects, these characteristics can create a divide between the development and user communities, often restricting future development to a few individuals that have been involved in the project during the earliest periods of development. The View Code button that is present on all Whitebox GAT tools is the embodiment of this software-transparency philosophy by pointing the user to the specific region of the source-code that is relevant to a particular tool, also allowing for <b>code</b> <b>conversion</b> to other programming languages. The Whitebox GAT logo is also representative of the open and transparent characteristic of the software, being a transparent glass cube, open on one face.|$|E
40|$|This thesis {{discusses}} generalized Pseudo-Random Multi-Valued Sequence (PRMVS) encoding {{and corresponding}} PRMVS-to-natural <b>code</b> <b>conversion</b> algorithms. A hardware architecture implementing in real-time this generalized <b>code</b> <b>conversion</b> algorithm is implemented as a programmable Pseudo-Random DECoder (PRDEC) coprocessor. This coprocessor {{is intended to}} work in microprocessor-based embedded systems where {{it is seen as}} an 8 -bit memory mapped device by the system microprocessor. The coprocessor architecture is implemented and simulated using VHDL...|$|E
40|$|Achieving fault {{tolerance}} via parity checking is attractive due to low overhead in storage and interconnect. However, nonpreservation of parity during arithmetic operations makes {{it necessary to}} strip the parity bit before, and to restore it after, such operations. This either leaves the arithmetic part unprotected or else requires complex <b>code</b> <b>conversions.</b> We show that some redundant representations, which are often used for high performance anyway, support a way of designing low-overhead, fault-tolerant arithmetic hardware circuits. An added benefit is localized fault effects due to carry-free arithmetic. Our proposed {{fault tolerance}} strategy consists {{of a way of}} converting parity-encoded input values to even-parity redundant representations, performing arithmetic with redundant operands {{in such a way that}} parity is preserved, and, finally, converting any redundant result to standard parity-encoded output. 1...|$|R
30|$|In {{addition}} to the standardization of source <b>code,</b> template <b>conversion</b> is exploited. This converts the original source code into a new form, having a uniform pattern for the permitted equivalent constructs between the clone pairs of the same type. An equivalent constructs contain invariant and variant parts as defined below.|$|R
40|$|Data Communications Pocket Book, Second Edition {{presents}} information {{relevant to}} data communication. The book provides tabulated reference materials {{with a brief}} description and diagrams. The coverage of the text includes abbreviations, terminal control <b>codes,</b> and <b>conversion</b> tables. The text will be of great use to individuals involved in the interconnection of computer systems...|$|R
40|$|Abstract – In this {{technological}} {{world development}} {{in the field of}} nanometer technology leads to minimize the power consumption of logic circuits. Reversible logic design {{has been one of the}} promising technologies gaining greater interest due to less dissipation of heat and low power consumption. In digital systems <b>code</b> <b>conversion</b> is a widely used process for reasons such as enhancing security of data, reducing the complexity of arithmetic operations and thereby reducing the hardware required, dropping the level of switching activity leading to more speed of operation and power saving etc. This paper proposes novel Reversible logic design for <b>code</b> <b>conversion</b> such as Binary to Gray code, Gray to Binary code, BCD to Excess 3 code, Excess 3 to BCD code...|$|E
30|$|The NAS also {{contains}} information on postal codes {{at time of}} registration and at time of the survey. Using the Statistics Canada Postal <b>Code</b> <b>Conversion</b> File Plus (PCCF+) and Labour Force Survey, individuals can be matched with their local unemployment rates (using economic region as the reference).|$|E
40|$|The {{paper has}} expatiated the mutual {{conversion}} between {{national and international}} standards (ISO/IEC 10646), and realized UNICODE operation based on MATLAB. It has made <b>code</b> <b>conversion</b> between national and international standards, {{in order to provide}} an effective method for further Tibetan small-character code processing based on MATLAB...|$|E
5000|$|The code/speed {{conversion}} between [...] "3-row" [...] Baudot and [...] "4-row" [...] ASCII TWX {{service was}} accomplished using a special Bell [...] "10A/B board" [...] via a live operator. A TWX customer would place {{a call to}} the 10A/B board operator for Baudot - ASCII calls, ASCII - Baudot calls and also TWX Conference calls. The <b>code</b> / speed <b>conversion</b> was done by a Western Electric unit that provided this capability. There were multiple <b>code</b> / speed <b>conversion</b> units at each operator position.|$|R
40|$|International audienceDue to {{the fact}} that mobile devices are in {{widespread}} use, many applications including Location Based Services (LBS) had been involved to deliver relevant information to customers anywhere at any time and thus based on theirprofile and geographical position. However, with the increasing number of heterogeneous databases, many problems may ariserelated to 1) the interoperability of geographical databases, 2) the integration of geospatial data / metadata of the same location service, provided differently by many operators and 3) the uncertain positioning results due to GPS/Radio coveragetechnologies, geo <b>coding</b> <b>conversion</b> functions and mobile devices’ Limitations. In this paper, the ‘uncertainty’ issues on geographic,place names and semantic details for homologous objects towards a complete map conflation were solved by our MPLoM framework (Location Integration) and our Visual Domain Ontology application (Cartographic Integration) with anextension of Web Ontology Language named CartOWL...|$|R
5000|$|There {{are some}} key words {{related to this}} norm: Securities, Messages, Dictionaries, Databases, Data layout, Data organization, Data processing, banking documents, finance, {{electronic}} data interchange, Electronic messaging, Syntax, Character sets, Control characters, Information separators, Sets of data, Data blocks, Codes, Numerical designations, Tags (data processing), Data, Data elements, <b>Coding</b> (data <b>conversion),</b> Access, EDIFACT, Data transmission ...|$|R
