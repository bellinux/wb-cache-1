270|156|Public
25|$|The satellites' atomic clocks {{experience}} {{noise and}} <b>clock</b> <b>drift</b> errors. The navigation message contains corrections for these errors and {{estimates of the}} accuracy of the atomic clock. However, they are based on observations and may not indicate the clock's current state.|$|E
2500|$|<b>Clock</b> <b>drift,</b> {{phenomenon}} where a clock gains or loses time {{compared to}} another clock ...|$|E
2500|$|The WAAS was jointly {{developed}} by the United States Department of Transportation (DOT) and the Federal Aviation Administration (FAA) {{as part of the}} [...] (DOT-VNTSC-RSPA-95-1/DOD-4650.5), beginning in 1994, to provide performance comparable to category 1 instrument landing system (ILS) for all aircraft possessing the appropriately certified equipment. Without WAAS, ionospheric disturbances, <b>clock</b> <b>drift,</b> and satellite orbit errors create too much error and uncertainty in the GPS signal to meet the requirements for a precision approach (see GPS sources of error). A precision approach includes altitude information and provides course guidance, distance from the runway, and elevation information at all points along the approach, usually down to lower altitudes and weather minimums than non-precision approaches.|$|E
40|$|Secondary {{frequency}} control, i. e., {{the task}} of restoring the network frequency to its nominal value following a disturbance, is an important control objective in microgrids. In the present paper, we compare distributed secondary control strategies {{with regard to their}} behaviour under the explicit consideration of <b>clock</b> <b>drifts.</b> In particular we show that, if not considered in the tuning procedure, the presence of <b>clock</b> <b>drifts</b> may impair an accurate frequency restoration and power sharing. As a consequence, we derive tuning criteria such that zero steady state frequency deviation and power sharing is achieved even in the presence of <b>clock</b> <b>drifts.</b> Furthermore, the effects of <b>clock</b> <b>drifts</b> of the individual inverters on the different control strategies are discussed analytically and in a numerical case study...|$|R
40|$|International audienceThe {{response}} time distributions of the frames sent on a Controller Area Network (CAN) bus are of prime interest to dimension and validate automotive electronic architectures. However, the existing {{work on the}} timing behaviour of the CAN network {{does not take into}} account that all the data exchanges between the Electronic Control Units (ECUs) are driven by different and independent clocks which are subject to <b>clock</b> <b>drifts.</b> This paper proposes a model for <b>clock</b> <b>drifts</b> and describes their impact on the CAN frame {{response time}} distributions. By implementing the <b>clock</b> <b>drifts</b> in a CAN simulation tool, we show experimentally that the response time distributions converge, for drift values chosen randomly within the same range on all ECUs, whatever the initial phasings between the sending nodes. Furthermore, we show that, as a result of the <b>clock</b> <b>drifts,</b> the situations leading to the worst case response times are transient...|$|R
40|$|Abstract: The {{response}} time distributions of the frames sent on a Controller Area Network (CAN) bus are of prime interest to dimension and validate automotive electronic architectures. However, the existing {{work on the}} timing behaviour of the CAN network {{does not take into}} account that all the data exchanges between the Electronic Control Units (ECUs) are driven by different and independent clocks which are subject to <b>clock</b> <b>drifts.</b> This paper proposes a model for <b>clock</b> <b>drifts</b> and describes their impact on the CAN frame {{response time}} distributions. By implementing the <b>clock</b> <b>drifts</b> in a CAN simulation tool, we show experimentally that the response time distributions converge, for drift values chosen randomly within the same range on all ECUs, whatever the initial phasings between the sending nodes. Furthermore, we show that, as a result of the <b>clock</b> <b>drifts,</b> the situations leading to the worst case response times are transient. A. Context of the study. I...|$|R
50|$|<b>Clock</b> <b>drift</b> - <b>Clock</b> <b>drift</b> {{measurements}} of crystal oscillators {{can be used}} to build random number generators.|$|E
50|$|More {{advanced}} clocks and old mechanical clocks {{often have}} some kind of speed trimmer where one can adjust the speed of the clock and thus correct for <b>clock</b> <b>drift.</b> For instance, in pendulum clocks the <b>clock</b> <b>drift</b> can be manipulated by slightly changing the length of the pendulum.|$|E
5000|$|<b>Clock</b> <b>drift,</b> {{phenomenon}} where a clock gains or loses time {{compared to}} another clock ...|$|E
40|$|Many network-based {{applications}} commonly open some known port(s) {{to communicate}} with their users, thus making themselves vulnerable to Denial of Service (DoS) attacks. With the purpose of solving this problem, a ``pseudo-random port-hopping'' approach was suggested by Badishi et al. and extended by Fu et al. to work for multi-peer applications {{in the presence of}} <b>clock</b> <b>drifts.</b> The suggested solution gives a synchronization algorithm which enables the clients and servers to communicate via communication ports changing periodically. Complementing the analytical study of the earlier work, here we study experimentally the effect of the combined parameter variations. We study the overhead and the efficiency of the algorithm in the presence of constant and various <b>clock</b> <b>drifts,</b> as well as the communication effectiveness under various attack conditions. We conclude that the algorithm's behavior follows the earlier analysis, even under situations of stress, e. g. large and even varying <b>clock</b> <b>drifts...</b>|$|R
3000|$|..., use the short-lasting {{synchronization}} method. Note {{that because}} of <b>clock</b> <b>drifts,</b> and each node u may need to re-synchronize multiple times during the duration of any period [...]...|$|R
40|$|In this paper, {{we present}} some unique {{challenges}} of designing a robust and practical acoustic echo canceller (AEC) for personal computers (PC) and propose effective algorithms that meet these challenges. Specifically, {{the quality and}} robustness of our AEC is enhanced by selectively applying a glitch recovery process based on a novel feature that measures {{the quality of the}} alignment between the microphone and loudspeaker signals. In addition, a multi-step <b>clock</b> <b>drifting</b> compensation method is applied {{to improve the quality of}} AEC in case of <b>clock</b> <b>drifting.</b> The effectiveness of the algorithms is demonstrated by a real-time AEC component running in a variety of operating environments. Index Terms — acoustic echo cancellation/canceller...|$|R
5000|$|<b>Clock</b> <b>drift</b> {{refers to}} several related {{phenomena}} where a clock does not run {{at exactly the}} same rate as a reference clock. That is, after some time the clock [...] "drifts apart" [...] or gradually desynchronizes from the other clock. This phenomenon is used, for instance, in computers to build random number generators. On the negative side, <b>clock</b> <b>drift</b> can be exploited by timing attacks.|$|E
50|$|<b>Clock</b> <b>drift</b> {{also affects}} some tokens (especially {{infrequently}} used ones), requiring time-consuming server-side re-sync with the provider.|$|E
50|$|Because of {{limitations}} in MIDI and synthesizers, devices driven by MIDI beatclock are often subject to <b>clock</b> <b>drift.</b>|$|E
30|$|This {{high level}} of {{accuracy}} can only be maintained at a expensive energy cost, since the node <b>clocks</b> can <b>drift</b> up to 80 μ s per second. For instance, in 60 seconds the <b>clocks</b> may <b>drift</b> up to 4810 μ s.|$|R
30|$|We use a two-step {{procedure}} {{to reduce the}} occurrence of state inconsistency in state-based schedules. First, we use a method of clock synchronization to adjust the <b>clock</b> <b>drifts.</b> Thereafter, we use a method to adjust the sampling frequency drifts of the stations.|$|R
40|$|Abstract: Early in {{the design}} cycle, the two main {{approaches}} for verifying timing constraints and dimensioning automotive embedded networks are worst-case schedulability analysis and simulation. The first aim of the paper is to demonstrate that both provide complementary results and that, most often, none of them alone is sufficient. In this paper, we present a simulation approach accounting for the <b>clock</b> <b>drifts</b> that occur on the network nodes at runtime and evaluate {{the extent to which}} the results obtained with this approach are relevant for the designers in order to validate the performances of a CANbased communication system. One of the practical outcome of this study is to show that initial phasings between nodes, as well as the values of the <b>clock</b> <b>drifts,</b> do not significantly impact the frame response time distributions that can be observed on the long run. ...|$|R
50|$|Here's {{an example}} of a {{particularly}} bad case - error during synchronization, a lost cycle due to <b>clock</b> <b>drift</b> and error in transmission.|$|E
50|$|Another {{variable}} physical {{phenomenon that}} {{is easy to}} measure is clock drift.There {{are several ways to}} measure and use <b>clock</b> <b>drift</b> as a source of randomness.|$|E
50|$|Computer {{programs}} {{often need}} high quality random numbers, especially for cryptography. There are several similar ways <b>clock</b> <b>drift</b> {{can be used}} to build random number generators (RNGs).|$|E
40|$|IEEE In inverter-based microgrids, {{individual}} inverters operate {{usually with}} its own digital processor. The clocks used to generate the time signals of these processors differ from each other due to <b>clock</b> <b>drifts.</b> This paper analyzes the impact that the drifts of the processors clocks produce on the operation of inverter-based islanded microgrids. Several communication-free secondary control schemes are considered, which avoid well-known problems caused by digital communication networks. Active power sharing and frequency regulation are the metrics {{used to evaluate the}} performance of the secondary control schemes. The study reveals advantages, drawbacks, and practical limitations of the control schemes caused by the <b>clock</b> <b>drifts.</b> Therefore, it facilitates the selection of the most suitable control scheme for the practical deployment of microgrids. The theoretical results are validated by experimental tests in a laboratory microgrid equipped with three inverters and three digital signal processors driven by autonomous internal clocks. Preprin...|$|R
30|$|Once traces are {{generated}} on both systems, the fully incremental convex hull algorithm is applied, which derives a synchronization function applied {{on all of}} the guest’s timestamps. This approach is resistant to <b>clock</b> <b>drifts</b> as the convex hull algorithm considers this issue and compensates for it in the generated formula. Additionally, it does not require TSC_OFFSET TSC_OFFSET tracking or any other architecture-specific configuration.|$|R
40|$|Abstract — A {{class of}} CSMA {{protocols}} {{used in a}} broad range of wireless applications uses synchronized contention where nodes periodically contend at intervals of fixed duration. While several models exist for asynchronous CSMA contention used in protocols like IEEE 802. 11 MAC, no model exists for synchronized CSMA contention that also incorporates realistic factors like <b>clock</b> <b>drifts.</b> In this paper, we introduce a model that quantifies the interplay of <b>clock</b> <b>drifts</b> with contention window size, control packet size, and carrier sense regulated by usage of guard time. Using an FPGA-based MAC protocol implementation and controlled experiments on a wireless testbed we evaluate the model predictions on the isolated and combined impact of these key performance factors to per-flow throughput and fairness properties in both single-hop and multi-hop networks. Our model and experimental evaluation reveal conditions on protocol parameters under which the throughput of certain flows can exponentially decrease; while at the same time, it enables solutions that can offset such problems in a predictable manner. I...|$|R
5000|$|Receiver {{clock was}} slower than sender clock, so {{receiver}} missed one cycle (marked X). This {{will not happen}} again before the next synchronization due to limits on maximum allowable <b>clock</b> <b>drift.</b>|$|E
50|$|In digital transmission, {{bit slip}} {{is the loss}} or gain of a bit or bits, caused by <b>clock</b> <b>drift</b> - {{variations}} in the respective clock rates of the transmitting and receiving devices.|$|E
50|$|Timing {{failure is}} a failure of a process, or part of a process, in a {{synchronous}} distributed system or real-time system to meet limits set on execution time, message delivery, <b>clock</b> <b>drift</b> rate, or clock skew.|$|E
40|$|International audienceIEEE 802. 15. 4 {{standard}} specifies a beacon-enabled mode {{which provides}} a synchronization environment using bea- con transmissions. However, this mode is designed for single hop networks and its use in multi-hop networks is not straight- forward. The main challenges of using beacon-enabled mode in multi-hop networks are how to efficiently schedule beacon transmissions to avoid direct and indirect beacon collisions {{and how to make}} a schedule tolerant to the <b>clock</b> <b>drifts</b> due to the low cost components. In this paper, we present TBoPS, a novel technique for scheduling beacons in the cluster tree topology. TBoPS uses a dedicated period called beacon only period (BOP) to schedule beacons at the beginning of IEEE 802. 15. 4 super- frame. The advantages of TBoPS is that every beacon-enabled node selects a beacon schedule distributively during association. We analysed the robustness of TBoPS to <b>clock</b> <b>drifts.</b> We also show through simulations that all nodes in the network are synchronized and follow the same superframe structure...|$|R
40|$|We {{present a}} detailled timed automata {{model of the}} clock {{synchronization}} algorithm that is currently being used in a wireless sensor network (WSN) that has been developed by the Dutch company Chess. Using the UPPAAL model checker, we establish that in certain cases a static, fully synchro-nized network may eventually become unsynchronized if the current algorithm is used, even in a setting with infinitesimal <b>clock</b> <b>drifts.</b> ...|$|R
30|$|In a WSN, each node {{has its own}} {{notion of}} time based on its {{internal}} clock. Individual clocks may tick at slightly different rates, thus resulting in independent <b>clock’s</b> <b>drift</b> and a global (network) lack of synchronization. The consequence may be a drift of seconds per day, accumulating significant errors over time. Obviously, this may produce serious inconveniences to applications that depend on a strict synchronized global notion of time.|$|R
50|$|The satellites' atomic clocks {{experience}} {{noise and}} <b>clock</b> <b>drift</b> errors. The navigation message contains corrections for these errors and {{estimates of the}} accuracy of the atomic clock. However, they are based on observations and may not indicate the clock's current state.|$|E
50|$|FlexRay system {{consists}} of a bus and processors (Electronic control unit, or ECUs).Each ECU has an independent clock. The <b>clock</b> <b>drift</b> must be not more than 0.15% from the reference clock,so {{the difference between the}} slowest and the fastest clock in the system is no greater than 0.3%.|$|E
50|$|Integrating {{external}} {{information into}} the calculation process can materially improve accuracy. Such augmentation systems are generally named or described {{based on how}} the information arrives. Some systems transmit additional error information (such as <b>clock</b> <b>drift,</b> ephemera, or ionospheric delay), others characterize prior errors, while a third group provides additional navigational or vehicle information.|$|E
40|$|We {{propose a}} formal {{definition}} for the timed asynchronous distributed system model. We present extensive measurements of actual message and process scheduling delays and hardware <b>clock</b> <b>drifts.</b> These measurements confirm that this model adequately describes current distributed {{systems such as}} a network of workstations. We also give an explanation of why practically needed services, such as consensus or leader election, which are not implementable in the time-free model, are implementable in the timed asynchronous system model...|$|R
40|$|We {{show how}} a {{symbolic}} model checker for linear hybrid automata {{can be used}} to analyze a biphase mark protocol. This protocol was first veried formally by Moore [Moo 94] using a model of asynchrony. In this paper we demonstrate that algorithmic methods can automatically verify the correctness of the protocol for wider <b>clock</b> <b>drifts.</b> Unlike Moore [Moo 94], our model allows for clock jitter. We believe that linear hybrid automata enable a natural way of modeling the protocol...|$|R
40|$|Most {{computers}} have several high-resolution timing sources, from the programmable interrupt timer to the cycle counter. Yet, {{even at a}} precision of one cycle in ten millions, <b>clocks</b> may <b>drift</b> significantly in a single second at a clock frequency of several GHz. When tracing the low-level system events in computer clusters, such as packet sending or reception, each computer system records its own events using an internal clock. In order to properly understand the global system behavior and performance, {{as reported by the}} events recorded on each computer, it is important to estimate precisely the <b>clock</b> differences and <b>drift</b> between the different computers in the system. This article studies the clock precision and stability of several computer systems, with different architectures. It also studies the typical network delay characteristics, since time synchronization algorithms rely on the exchange of network packets and are dependent on the symmetry of the delays. A very precise clock, based on the atomic time provided by the GPS satellite network, was used as a reference to measure <b>clock</b> <b>drifts</b> and network delays. The results obtained are of immediate use to all applications which depend on computer clocks or network time synchronization accuracy...|$|R
