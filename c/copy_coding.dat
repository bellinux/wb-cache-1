6|379|Public
40|$|Human {{haptoglobin}} (Hp) is a plasma glycoprotein {{composed of}} alpha and beta polypeptide chains that are covalently associated by disulfide bonds. It had {{been suggested that}} alpha and beta polypeptides could be synthesized via a common precursor polypeptide. We report the molecular cloning of DNA complementary to human Hp mRNA. One of the clones, pULB 1148, carries a full length <b>copy</b> <b>coding</b> for both alpha 2 and beta polypeptides. In vitro translation of human liver mRNA hybridizing with this cDNA gives a protein mol. wt. of 49000 daltons. The sequence of the alpha 2 beta cDNA shows {{the presence of a}} single Arg residue between Gln 142 of the alpha 2 chain and Ileu 1 of the beta chain. With a few minor exceptions, the DNA sequence fits the previously published amino acid sequences. The differences are the presence of an Asp residue at position 52 of alpha 2 instead of Asn, the existence in beta of only one Lys residue between Gly 65 and the following Gln, the presence of Ser and Cys at positions 218 - 219 instead of Cys-Ser, and of Asp residues at positions 205 and 235 instead of Asn...|$|E
40|$|El pdf es la versión post-print. In {{this chapter}} we will analyze the results {{available}} on the characterization of the Brucella transcriptome. After a summary of earlier work on transcription, two technical approaches will be mainly described, on one side the use microarrays, specially that derived from the Brucella ORFeome that allows hybridization with mRNA derived cDNA to determine the relative abundance of transcripts from each B. melitensis ORF. On the other, RNAseq, consisting in the massive sequencing of cDNA libraries derived from mRNA obtained from B. abortus grown in culture medium. Sequencing with the Illumina Genome-Analyzer II platform, produced 3 millions of 35 nt long reads that annealed with single <b>copy</b> <b>coding</b> regions of the genome. This allowed a good coverage for every CDS and produced a new dataset on the transcription of Brucella. We obtained a good correlation for the set of highly expressed genes from the microarrays and confirmed the observations obtained on the asymmetry between chromosome transcription. Preliminary conclusions on intracellular transcription have been drawn from RT-PCR on selected candidate genes and from microarray datasets obtained from virulence related conditions. The RNAseq derived data allowed more versatile data mining giving some new details on transcription from pseudogenes or intergenic regions. Peer Reviewe...|$|E
40|$|Future {{lithography}} systems must produce microchips {{with smaller}} feature sizes, while maintaining throughputs {{comparable to those}} of today’s optical lithography systems. This places stringent constraints on the effective data throughput of any maskless lithography system. In recent years, we have developed a datapath architecture for directwrite lithography systems, and have shown that compression {{plays a key role in}} reducing throughput requirements of such systems. Our approach integrates a low complexity hardware-based decoder with the writers, in order to decompress a compressed data layer in real time on the fly. In doing so, we have developed a spectrum of lossless compression algorithms for integrated circuit layout data to provide a tradeoff between compression efficiency and hardware complexity, the latest of which is Block Golomb Context <b>Copy</b> <b>Coding</b> (Block GC 3). In this paper, we present a modified version of Block GC 3 called Block RGC 3, specifically tailored to the REBL direct-write E-beam lithography system. Two characteristic features of the REBL system are a rotary stage and E-beam corrections prior to writing the data. The former results in arbitrarily-rotated layout imagery to be compressed, and as such, presents significant challenges to the lossless compression algorithms, including Block GC 3. We characterize the performance of Block RGC 3 in terms of compression efficiency and encoding complexity on a number of rotated layouts at various angles, and show that it outperforms existing lossless compression algorithms...|$|E
5000|$|The {{district}} court {{focused on the}} size of the <b>copied</b> <b>code,</b> arguing that it was not significant. Vault argued that the court should instead focus on the qualitative aspect of the <b>copied</b> <b>code</b> because the 30 characters were important to the correct operation of PROLOK. The circuit court rejected the argument that the copying was qualitatively significant on the basis that PROLOK and RAMKEY [...] "serve opposing functions." ...|$|R
50|$|At a {{reseller}} show in August 2003, SCO {{revealed a}} sample of alleged <b>copied</b> <b>code.</b> This was later shown to be originally released under a BSD License.|$|R
5000|$|In his {{unpublished}} book Samizdat, Kenneth Brown {{claims that}} Torvalds illegally <b>copied</b> <b>code</b> from MINIX. In May 2004, these claims were refuted by Tanenbaum, {{the author of}} MINIX: ...|$|R
40|$|Future {{lithography}} systems must produce chips {{with smaller}} feature sizes, while maintaining throughput comparable to today’s optical lithography systems. This places stringent data handling requirements {{on the design}} of any direct-write maskless system. To achieve the throughput of one wafer layer per minute with a direct-write maskless lithography system, using 22 nm pixels for 45 nm technology, a data rate of 12 Tb/s is required. In our past research, we have developed a datapath architecture for direct-write lithography systems, and have shown that lossless compression {{plays a key role in}} reducing throughput requirements of such systems. Our approach integrates a low complexity hardwarebased decoder with the writers, in order to decode a compressed data layer in real time on the fly. In doing so, we have developed a spectrum of lossless compression algorithms for integrated circuit rasterized layout data to provide a tradeoff between compression efficiency and hardware complexity, the most promising of which is Block Golomb Context <b>Copy</b> <b>Coding</b> (Block GC 3). In this paper, we present the synthesis results of the Block GC 3 decoder for both FPGA and ASIC implementations. For one Block GC 3 decoder, 3233 slice flip-flops and 3086 4 -input LUTs are utilized in a Xilinx Virtex II Pro 70 FPGA, which corresponds to 4 % of its resources, along with 1. 7 KB of internal memory. The system runs at 100 MHz clock rate, with the overall output rate of 495 Mb/s for a single decoder. The corresponding ASIC implementation results in a 0. 07 mm 2 design with the maximum output rate of 2. 47 Gb/s. In addition to th...|$|E
40|$|Histone {{genes in}} D. hydei are {{organized}} in tandemly repeated clusters., accomodating in total 120 - 140 repeat units. We cloned {{one of the}} repeat units and analysed the nucleotide sequence. The repeat unit has a size of 5. 1 x 10 (3) base-pairs and contains one copy {{of each of the}} genes coding for the core histones and one <b>copy</b> <b>coding</b> for the histone H 1. In the promoter regions of the genes we identified the presumptive cap sites and TATA boxes. Two additional sequence elements are shared by all five Drosophila hydei histone genes in the cluster. The sequence CCCTCT/G 1 is found in the region upstream of the presumptive CAP sites. The sequence element AGTGAA occurs downstream of the presumptive cap sites and is, in contrast to the promoter element, also seen in the histone genes of Drosophila melanogaster. Cell-cycle dependent regulation of transcription of the Drosophila histone genes may be different from that in other eukaryotes since sequence elements involved in the regulation of cell-cycle dependent transcription are absent. Also other regulatory elements for transcription differ from those of other genes. The highly conserved H 1 -specific promoter sequence AAACACA and the H 2 B specific promoter sequence ATTTGCAT, which are involved in the cell-cycle dependent transcription of those histone genes in eukaryotes, are missing in the Drosophila genes. However at the 3 ' end of the genes the palindrome and the purine-rich region, both conserved sequence elements in histone genes of eukaryotes, are present. The spacer regions show a simple sequence organization. The silent site substitution rate between the coding regions of the D. hydei and D. melanogaster histone genes is at least 1. 5 times higher for Drosophila than for sea urchin histone genes...|$|E
40|$|Six {{closely linked}} PRP (proline-rich protein) genes code for salivary PRPs that show {{frequent}} length and null polymorphisms. We report assignment of Ps proteins to the PRB 1 gene, the derived primary structures of Ps 1 and Ps 2 proteins, and the molecular basis for some null alleles among PRB 1 -coded PRPs (Ps, PmF, PmS, and Pe). The derived primary structures of Ps 1 and Ps 2 proteins {{were determined by}} sequencing exon 3 of the different-length PRB 1 M (medium) and PRB 1 L (large) copies from subject C. J. with the Ps 1 - 2 phenotype. The PRB 1 L <b>copy</b> (<b>coding</b> for Ps 2) contained three additional tandem repeats within the Ps coding region, and the different-length Ps 1 and Ps 2 proteins can be explained on this basis. The molecular basis for the Ps 0 and the Pe- phenotypes was determined in another individual (M. V. O., a PRB 2 / 1 fusion-gene heterozygote) with a single PRB 1 L copy. A premature stop mutation (CGA [Arg] [...] >TGA [stop]) occurred at residue 61 in the Ps-coding region. The identical mutation {{was found in the}} PRB 1 L and PRB 1 / 2 S (small) copies of a second individual (E. A.) with reduced Pe protein and the Ps 0 phenotype. This individual is a PRB 1 / 2 fusion-gene heterozygote (Azen et al. 1992) with probably three mutated PRB 1 copies (PRB 1 L-PRB 1 L-PRB 1 / 2 S). DNA sequences of the postulated crossover region of the PRB 1 / 2 S fusion-gene copy supported the postulated crossover. The PmF- and PmS- phenotypes in the three subjects were due to both the stop mutation and the lack of suitable proteolytic cleavage sites in the PRB 1 -coded precursor proteins...|$|E
40|$|DiffTree infers a parsimonious {{evolutionary}} tree from related computer programs. It {{can help}} programmers {{understand how to}} best remove <b>copied</b> <b>code.</b> It adapts techniques from computational biology that automatically infer evolutionary trees or phylogenies from gene sequences or other biological data. 2...|$|R
50|$|United States v Sergey Aleynikov, 2011. Aleynikov was a {{programmer}} at Goldman Sachs accused of <b>copying</b> <b>code,</b> like high-frequency trading code, allegedly {{in violation of}} 1030(a)(2)(c) and 1030(c)(2)(B)i-iii and 2. This charge was later dropped, and he was instead charged with theft of trade secrets and transporting stolen property.|$|R
50|$|Blueprint is a plugin for Adobe Flash Builder that {{automatically}} augments queries with code context, presents a code-centric view of search results, embeds the search experience into the editor, and retains {{a link between}} <b>copied</b> <b>code</b> and its source. It {{is designed to help}} programmers with web searches and allow them to easily remember forgotten details and clarify existing knowledge.|$|R
40|$|<b>Copying</b> <b>code</b> {{within a}} {{software}} system and adapting it to suit local {{needs is a}} common practice. Very similar sections of code are named clones. Cloning can be easier than sharing a common part of code from a library and {{does not affect the}} functionality of a system at all [1] but contributes to make further developments difficult and expensive...|$|R
5000|$|Hybrid apps embed {{a mobile}} web site inside a native app, {{possibly}} using a hybrid framework like Apache Cordova and Ionic or Appcelerator Titanium. This allows development using web technologies (and possibly directly <b>copying</b> <b>code</b> from an existing mobile web site) while also retaining certain advantages of native apps (e.g. {{direct access to}} device hardware, offline operation, app store visibility).|$|R
50|$|SCO {{also claimed}} line-for-line literal <b>copying</b> of <b>code</b> from UNIX code files to Linux kernel files and {{obfuscated}} <b>copying</b> of <b>code,</b> but originally refused to publicly identify which code was in violation. SCO {{submitted to the}} court evidence of their claims under seal but {{much of it was}} excluded from the case after it was challenged by IBM as not meeting the specificity requirements to be included.|$|R
30|$|<b>Copying</b> <b>code</b> {{fragments}} and then reusing {{them through the}} paste option with or without minor modification or adaptation is called “Code Cloning” and the pasted code fragment is called a “clone”. Most of the software systems comprise a substantial quantity of code clones; typically 10 – 15 % of the source code in large software systems are part of single or more code clones (Kapser and Godfrey [2006]).|$|R
50|$|Software {{can contain}} trade secrets, which provide a {{competitive}} advantage to a business. To determine trade secret theft, the same tools and processes {{can be used to}} detect copyright infringement. If <b>code</b> was <b>copied</b> without authority, and that code has the characteristics of a trade secret—it is not generally known, the business keeps it secret, and its secrecy maintains its value to the business—then the <b>copied</b> <b>code</b> constitutes trade secret theft.|$|R
5000|$|Televideo 910 to 950 (these models <b>copied</b> ADM3 <b>codes</b> {{and added}} several of their own, {{eventually}} being copied by Qume and others) ...|$|R
50|$|On December 14, 2009, the {{official}} Plurk blog posted an accusation that MSN China plagiarized about 80% of Plurk's original code, {{as well as}} elements of their CSS and unique user interface features. Microsoft stated in a press release that it looked into the accusations. The next day, Microsoft confirmed that MSN Juku (which, it stated, had been developed by a Chinese contractor) did contain <b>copied</b> <b>code,</b> and stated that the service would be indefinitely suspended.|$|R
40|$|To {{address the}} problem of {{computer}} programming students copying and colluding on assignments, since 2003 a system has been developed and utilised at the University of Technology, Sydney that embeds copy detection information within the logs of a submission system used by the students to submit assignments. This creates a detailed audit trail that allows for the determination of who has created and who has <b>copied</b> <b>code.</b> Beyond that, the information can be mined to see how student networks form to exchange information...|$|R
50|$|When code with a {{software}} vulnerability is copied, the vulnerability {{may continue to}} exist in the <b>copied</b> <b>code</b> if the developer is not aware of such <b>copies.</b> Refactoring duplicate <b>code</b> can improve many software metrics, such as lines of code, cyclomatic complexity, and coupling. This may lead to shorter compilation times, lower cognitive load, less human error, and fewer forgotten or overlooked pieces of code. However, not all code duplication can be refactored. Clones may be the most effective solution if the programming language provides inadequate or overly complex abstractions, particularly if supported with user interface techniques such as simultaneous editing. Furthermore, the risks of breaking code when refactoring may outweigh any maintenance benefits. Duplicated code {{does not seem to be}} significantly more error-prone than unduplicated code.|$|R
40|$|Abstract To {{address the}} problem of {{computer}} programming students copying and colluding on assignments, since 2003 a system has been developed and utilised at the University of Technology, Sydney that embeds copy detection information within the logs of a submission system used by the students to submit assignments. This creates a detailed audit trail that allows for the determination of who has created and who has <b>copied</b> <b>code.</b> Beyond that, the information can be mined to see how student networks form to exchange information...|$|R
50|$|Inexperienced programmers who <b>copy</b> <b>code</b> {{often do}} not fully {{understand}} the pre-written code they are taking. As such, the problem arises more from their inexperience and lack of courage in programming than from the act of copying and pasting, per se. The code often comes from disparate sources such as friends' or co-workers' code, Internet forums, code provided by the student's professors/TAs, or computer science textbooks. The result risks being a disjointed clash of styles, and may have superfluous code that tackles problems for which new solutions are no longer required.|$|R
50|$|On August 12, 2010, Oracle, which {{acquired}} Sun Microsystems in April 2009 {{and therefore}} owns {{the rights to}} Java, sued Google over claimed infringement of copyrights and patents. Oracle alleged that Google, in developing Android, knowingly, directly and repeatedly infringed Oracle's Java-related intellectual property. In May 2012, the jury in this case found that Google did not infringe on Oracle's patents, and the trial judge ruled that {{the structure of the}} Java APIs used by Google was not copyrightable. The parties agreed to zero dollars in statutory damages for 9 lines of <b>copied</b> <b>code.</b>|$|R
5000|$|Here {{a single}} {{requirement}} has added similar code to several functions simultaneously. As such {{any change in}} requirements here (namely adding line numbers to the log) would now require a considerable effort. It {{is important to note}} that shotgun surgery is not synonymous with cut and paste coding, as highlighted by this trivial example. The practice of <b>copying</b> <b>code</b> can be viewed as a [...] "means to an end", where shotgun surgery is merely an [...] "end" [...] (i.e. there are many ways to reach the same conclusion).|$|R
5000|$|Sealed {{envelope}} {{containing the}} Last Will and Testament of Thurston Last (including a <b>copy</b> protection <b>code</b> required {{to begin the}} game, although not all versions were sealed or included a protection code) ...|$|R
5000|$|... (3) The Minister must lay a <b>copy</b> of the <b>code</b> before Parliament[...]|$|R
50|$|Because the Apple Worm {{performs}} dynamic self-relocation {{within the}} one main memory of one computer, {{it does not}} constitute a computer virus, an apt if somewhat inaccurate description. Though the analogous behavior of <b>copying</b> <b>code</b> between memories is exactly the act performed by a computer virus, the virus has other characters not present in the worm. Such programs do not necessarily cause collateral damage to the computing systems upon which their instructions execute; there is no reliance upon a vector to ensure subsequent execution. This extends to the computer virus; it need not be destructive in order to effect its communication between computational environments.|$|R
50|$|The Prussian Semaphore System was a telegraphic {{communications}} system used between Berlin and the Rhine Province from 1832 to 1849. It could transmit administrative and military messages by optical signal over {{a distance of}} nearly 550 km. The telegraph line comprised 62 stations each furnished with a signal mast with six cable-operated arms. The stations were equipped with telescopes that operators used to <b>copy</b> <b>coded</b> messages and forward them to the next station. Three dispatch departments (telegraphische Expeditionen) located in Berlin, Cologne and Koblenz handled the coding and decoding of official telegrams. Although electric telegraphy made the system obsolete for military use, simplified semaphores were still used for railway signals.|$|R
5000|$|The US based firm CyberSitter {{announced}} in January 2010 {{that it was}} suing the Chinese government, and other US companies, for stealing its anti pornography software, with the accusation {{that it had been}} incorporated into China's Green Dam program, used by the state to censor children's internet access. CyberSitter accused Green Dam creators as having copied around 3000 lines of code. They were described as having done 'a sloppy job of copying,' with some lines of the <b>copied</b> <b>code</b> continuing to direct people to the CyberSitter website. The attorney acting for CyberSitter maintained [...] "I don't think I have ever seen such clear-cut stealing".|$|R
50|$|In 2015, New York-based {{competitor}} Bounce Exchange filed {{a lawsuit}} against Yieldify, accusing the company of <b>copying</b> its <b>code</b> and infringing on its patents. Yieldify denied the allegations, but did change its code after Bounce's initial complaint.|$|R
5000|$|Zeidman, Robert, “Detecting <b>copied</b> {{computer}} source <b>code</b> {{by examining}} computer object code,” U.S. Patent 8,255,885.|$|R
50|$|Embedded Java minimal {{requirements}} starts at only 30KB of (internal) flash {{and less than}} 2KB of (internal) RAM. In order to save Bill Of Material, most Embedded Java engines execute code in place, which avoids <b>copying</b> the <b>code</b> in RAM.|$|R
40|$|Code clone {{detection}} is {{an important}} area of research as reusability is {{a key factor in}} software evolution. Duplicate code degrades the design and structure of software and software qualities like readability, changeability, maintainability. Code clone increases the maintenance cost as incorrect changes in <b>copied</b> <b>code</b> may lead to more errors. In this paper we address structur al code similarity detection and propose new methods to detect structural clones using structure of control statements. By structure we meanorder of control statements used in the source code. We have considered two orders of control structures: (i) Sequence of control statements as it appears (ii) Execution flow of control statements. Keywords: Control statements;Control structure;Execution flow;Similarity value;Structural similarity...|$|R
50|$|The main aim of Code Hero is {{to teach}} players how to write {{programming}} languages in an engaging way. Players use a gun which can <b>copy</b> <b>code</b> {{and place it in}} other areas of the level in order to create a full program in a language such as JavaScript and UnityScript whilst moving around a 3D world from a first-person perspective. Players start in a world called Gamebridge Unityversity's API from which they can choose a series of levels which teach basics of the programming languages; after this they move to the Humantheon, from which the player moves on to the rest of the game world, led by a robotic Ada Lovelace.|$|R
40|$|<b>Copying</b> <b>code</b> {{fragments}} and then reuse by pasting {{with or without}} minor modifications or adaptations are common activities in software development. This type of reuse approach of existing code is called code cloning and the pasted code fragment without is called a clone of the original. One of the major shortcomings of such duplicated fragments {{is that if a}} bug is detected in a code fragment; all the other fragments similar to it should be investigated to check the possible existence of the same bug in the similar fragments. In this paper, we compare different clone detection techniques and tools. First part of this paper explains the classification of clone detection techniques and the later work done in this area and proposed method...|$|R
