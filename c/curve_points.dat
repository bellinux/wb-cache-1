138|2355|Public
500|$|Masashi Ōji, {{writing for}} 4Gamer.net after the {{official}} release of Imagine, praised multiple {{aspects of the}} game, including its story, combat, demon mechanics, flexible character growth system and general sense of belonging within the Megami Tensei series. One recurring point raised by Ōji was that many features promised {{had yet to be}} added at that time, which faulted the experience slightly. Rob Fahey of Eurogamer greatly enjoyed the experience, echoing many of the praises given by other journalists, while finding the graphics a little dated, and said that some technical improvements would be positively met. Nick Tylwalk of Gamezebo praised the combat for being much more engaging than other free-to-play games of its type, enjoyed the character customization, and variety of demons, and [...] "excellent" [...] story. His main complaints were a steep learning <b>curve,</b> <b>points</b> where the narrative got lost, and dated-looking graphics and interface. He finished his review by giving the game a score of 3.5 out of 5 stars.|$|E
5000|$|Convert the Catmull-Rom <b>curve</b> <b>points</b> into x and y arrays {{and plot}} ...|$|E
50|$|For the {{computation}} of <b>curve</b> <b>points</b> and the visualizition of {{an implicit}} space curve see intersection.|$|E
5000|$|... {{determination}} of a <b>curve</b> <b>point</b> starting from a known <b>curve</b> <b>point.</b>|$|R
5000|$|For Bob to {{authenticate}} Alice's signature, {{he must have}} a copy of her public-key <b>curve</b> <b>point</b> [...] Bob can verify [...] is a valid <b>curve</b> <b>point</b> as follows: ...|$|R
5000|$|Alice {{creates a}} key pair, {{consisting}} of a private key integer , randomly selected in the interval and a public key <b>curve</b> <b>point</b> [...] We use [...] to denote elliptic <b>curve</b> <b>point</b> multiplication by a scalar.|$|R
50|$|The {{following}} is a simplified description of EdDSA, ignoring details of encoding integers and <b>curve</b> <b>points</b> as bit strings; the full details are in the papers and RFC.|$|E
5000|$|... of target-collision-resistant hash {{function}} [...] with -bit outputs, where [...] so that elements of [...] and <b>curve</b> <b>points</b> in [...] {{can be represented}} by strings of [...] bits.|$|E
50|$|An {{inversion}} applied twice is {{the identity}} transformation, so the inverse of an inverse curve {{with respect to}} the same circle is the original <b>curve.</b> <b>Points</b> on the circle of inversion are fixed by the inversion, so its inverse is itself.|$|E
40|$|Two new {{theoretical}} {{approaches for}} the hardware realization of high speed elliptic <b>curve</b> <b>point</b> multiplication over a prime field (GF(p)) are presented. These hardware implementations use multiple units of elliptic <b>curve</b> <b>point</b> doublers, point adders and multiplexers. The modular hardware approach used here provides high speed and scalability...|$|R
5000|$|<b>Curves,</b> <b>Points,</b> Lines Nos.1,2,3 - for solo {{violin and}} {{electronics}} (2014) ...|$|R
40|$|Compact {{representation}} of an elliptic <b>curve</b> <b>point</b> draft-jivsov-ecc-compact- 00 This document defines a format for efficient storage {{representation of}} an elliptic <b>curve</b> <b>point</b> over prime fields, {{suitable for use}} with any IETF format or protocol. Status of this Memo This Internet-Draft is submitted in full conformance with the provisions of BCP 78 and BCP 79...|$|R
50|$|A {{security}} proof {{was later}} published for Dual_EC_DRBG by Daniel R.L. Brown and Kristian Gjøsteen, {{showing that the}} generated elliptic <b>curve</b> <b>points</b> would be indistinguishable from uniformly random elliptic <b>curve</b> <b>points,</b> and that if fewer bits were output in the final output truncation, and if the two elliptic <b>curve</b> <b>points</b> P and Q were independent, and if three problems were shown to be hard (only {{one of which is}} generally accepted as being hard), then Dual_EC_DRBG is secure. The proof relied on the assumption that three problems were hard: the decisional Diffie-Hellman assumption (which is generally accepted to be hard), and two newer problems which are not generally accepted to be hard: the truncated point problem, and the x-logarithm problem. Dual_EC_DRBG was quite slow compared to many alternative CSPRNGs (which don't have security reductions), but Daniel R.L. Brown argues that the security reduction makes the slow Dual_EC_DRBG a valid alternative (assuming implementors disable the obvious backdoor). Note that Daniel R.L. Brown works for Certicom, the main owner of elliptic curve cryptography patents, so there may be a conflict of interest in promoting an EC CSPRNG.|$|E
50|$|Example: Given the {{implicit}} curveIn order {{to demonstrate the}} algorithm the raster was widely spaced. The picture shows the single <b>curve</b> <b>points</b> determined by the raster algorithm. In order to accelerate the algorithm not every raster point was used as starting point.|$|E
50|$|Testing of {{electric}} motors is generally done to determine characteristic <b>curve</b> <b>points</b> or entire characteristic curves. There is also additional testing {{that is done}} to characterize the electromagnetic behavior of the test object: e.g., generative measurements, measurements of cogging torque, discharge measurements.|$|E
40|$|Abstract—We {{present a}} new {{hardware}} realization of fast elliptic <b>curve</b> Multi-Scalar <b>Point</b> Multiplication (MSPM) using {{the sum of}} products expansion of the scalars. In Elliptic <b>curve</b> <b>point</b> Multiplication latency depends {{on the number of}} one’s (Hamming Weight) in the binary representation of the scalar multiplier. By reducing the effective number of one’s in the multiplier, the multiplication speed is automatically increased. Therefore we describe a new method of effectively reducing the Hamming weight of the scalar multipliers thereby reduces the number of Point Adders when multi scalar multiplication is needed. The increase in speed achieved outweighs the hardware cost and complexity. Index Terms—Sum of products expansion, Hamming Weight, multi-scalar point multiplication, triple-scalar <b>point</b> multiplication, elliptic <b>curve</b> <b>point</b> multiplication, elliptic <b>curve</b> <b>point</b> addition. I...|$|R
5000|$|Calculate the <b>curve</b> <b>point</b> [...] If [...] {{then the}} {{signature}} is invalid.|$|R
5000|$|A <b>curve</b> <b>point</b> [...] {{is called}} regular,if the cross {{product of the}} {{gradients}} [...] and [...] is not [...] at this point:otherwise singular. Vector [...] is a tangent vector of the <b>curve</b> at <b>point</b> [...]Examples: ...|$|R
50|$|This is now {{deemed to}} be {{plausible}} {{based on the fact}} that the output of the next iterations of the PRNG can provably be determined if the relation between two internal elliptic <b>curve</b> <b>points</b> is known. Both NIST and RSA are now officially recommending against the use of this PRNG.|$|E
5000|$|The {{two extra}} points are {{computed}} by [...] and [...] [...] adds all the elliptic <b>curve</b> <b>points</b> {{and the two}} extra points together. Finally, the result is passed through an output transformation function f to get the hash result [...] To read more about this algorithm, see [...] "ECOH: the Elliptic Curve Only Hash".|$|E
5000|$|A free-form {{geometry}} statement can be {{specified in}} a line starting with the string [...] Define points in parameter space of a curve or surface. [...] only is required for <b>curve</b> <b>points,</b> [...] and [...] for surface points and control points of non-rational trimming curves, and , [...] and [...] (weight) for control points of rational trimming curves.|$|E
40|$|Elliptic curve {{cryptography}} (ECC) is {{an alternative}} to traditional techniques for public key cryptography. It offers smaller key size without sacrificing security level. In a typical elliptic curve cryptosystem, elliptic <b>curve</b> <b>point</b> multiplication is the most computationally expensive component. So {{it would be more}} attractive to implement this unit using hardware than using software. In this paper, we propose an efficient FPGA implementation of the elliptic <b>curve</b> <b>point</b> multiplication in GF(2 283). We have designed and synthesized the elliptic <b>curve</b> <b>point</b> multiplication with Xilinx’s FPGA. Experimental results demonstrate that the FPGA implementation can speedup the point multiplication by 31. 6 times compared to a software based implementation. ...|$|R
40|$|In {{this paper}} we compare the {{computational}} complexity of two parallel scalar multiplication {{methods used to}} speed up scalar multiplications for Elliptic Curve Cryptography applications. Pre-computations are advantageous only when the elliptic <b>curve</b> <b>point</b> is fixed. However, during secure communication sessions using either public keys or digital signatures, the elliptic <b>curve</b> <b>point</b> depends on the public key of the communicating entities and is therefore session dependent. Hence, a second method that replaces pre-computations with some post-computations, allows the pre-computation overhead to be distributed amongst parallel processors. Thus scalar multiplication can be computed more efficiently using the post-computation method in the more typical case where the elliptic <b>curve</b> <b>point</b> is variable...|$|R
5000|$|For {{computing}} {{on these}} <b>curves</b> <b>points</b> are usually represented in new Jacobian coordinates (Jn): ...|$|R
5000|$|The graph of a {{function}} is usually described by an equation [...] and is called an explicit representation. The third essential {{description of a}} curve is the parametric one: , where the x- and y-coordinates of <b>curve</b> <b>points</b> are represented by two functions [...] dependent on a common parameter The change of representations is unusually simple only when the explicit representation [...] is given: [...] (implicit), [...] (parametric).|$|E
5000|$|Description of the attack: This is a Wagner’s Generalized Birthday Attack. It {{requires}} 2143 {{time for}} ECOH-224 and ECOH-256, 2206 time for ECOH-384, and 2287 time for ECOH-512. The attack sets the checksum block to a fixed value {{and uses a}} collision search on the elliptic <b>curve</b> <b>points.</b> For this attack we have a message M {{and try to find}} a M that hashes to the same message. We first split the message length into six blocks. So [...] Let K be a natural number. We choose K different numbers for [...] and define [...] by [...] We compute the K corresponding elliptic <b>curve</b> <b>points</b> [...] and store them in a list. We then choose K different random values for , define , we compute , and store them in a second list. Note that the target Q is known. [...] only depends on the length of the message which we have fixed. [...] depends on the length and the XOR of all message blocks, but we choose the message blocks such that this is always zero. Thus, [...] is fixed for all our tries.|$|E
50|$|The {{stated purpose}} of {{including}} the Dual_EC_DRBG in NIST SP 800-90A {{is that its}} security is based on computational hardness assumptions from number theory. A mathematical security reduction proof can then prove {{that as long as}} the number theoretical problems are hard, the random number generator itself is secure. However, the makers of Dual_EC_DRBG did not publish a security reduction for Dual_EC_DRBG, and it was shown soon after the NIST draft was published that Dual_EC_DRBG was indeed not secure, because it output too many bits per round. The output of too many bits (along with carefully chosen elliptic <b>curve</b> <b>points</b> P and Q) is what makes the NSA backdoor possible, because it enables the attacker to revert the truncation by brute force guessing. The output of too many bits was not corrected in the final published standard, leaving Dual_EC_DRBG both insecure and backdoored.|$|E
5000|$|For fourth-order curves one can {{construct}} intermediate points Q0, Q1, Q2 & Q3 {{that describe}} linear Bézier <b>curves,</b> <b>points</b> R0, R1 & R2 that describe quadratic Bézier <b>curves,</b> and <b>points</b> S0 & S1 that describe cubic Bézier curves: ...|$|R
25|$|T is {{the unit}} vector tangent to the <b>curve,</b> <b>pointing</b> in the {{direction}} of motion.|$|R
5000|$|Big Burnt Lake [...] - [...] A bay located {{north of}} Dead Man's <b>Curve</b> <b>point.</b>|$|R
50|$|The {{first stage}} of {{digitization}} of a typeface is to prepare the artwork by marking up. This involves putting tick marks around any curves at approximately 30 degree intervals along with extra tangent points where a curve blends onto a straight line. Some form of accurate graphics tablet is then used to input three types of points: <b>curve</b> <b>points,</b> corner points and tangent points. Any irregularities (e.g. lumps and flat spots) are then edited out by adjusting {{the position of the}} points on the computer. The human eye is extremely sensitive to spotting irregularities on smooth outlines and typical adjustments are of the order of tenths of millimetres on a character one hundred millimetres high. As the computer screen displays a rasterized image at relatively low resolution, high quality print outs (traditionally bromides) or cuts in film (Ulano) are used to proof the digitized shapes.|$|E
5000|$|Masashi Ōji, {{writing for}} 4Gamer.net after the {{official}} release of Imagine, praised multiple {{aspects of the}} game, including its story, combat, demon mechanics, flexible character growth system and general sense of belonging within the Megami Tensei series. One recurring point raised by Ōji was that many features promised {{had yet to be}} added at that time, which faulted the experience slightly. Rob Fahey of Eurogamer greatly enjoyed the experience, echoing many of the praises given by other journalists, while finding the graphics a little dated, and said that some technical improvements would be positively met. Nick Tylwalk of Gamezebo praised the combat for being much more engaging than other free-to-play games of its type, enjoyed the character customization, and variety of demons, and [...] "excellent" [...] story. His main complaints were a steep learning <b>curve,</b> <b>points</b> where the narrative got lost, and dated-looking graphics and interface. He finished his review by giving the game a score of 3.5 out of 5 stars.|$|E
50|$|During a key {{exchange}} entities A and B {{will each}} transmit information 2 (mod p2) coefficients defining an elliptic curve and 2 elliptic <b>curve</b> <b>points.</b> Each elliptic curve coefficient requires log2p2 bits. Each elliptic curve point {{can be transmitted}} in log2p2+1 bits, hence the transmission is 8log2p + 2 bits. This is 6144 bits for a 768-bit modulus p (128-bit security). However, this can be reduced by over half to 2640 bits (330 bytes) using key-compression techniques, the latest of which appears in recent work by authors Costello, Jao, Longa, Naehrig, Renes and Urbanik. With these compression techniques, SIDH has a similar bandwidth requirement to traditional 3072-bit RSA signatures or Diffie-Hellman key exchanges. This small space requirement makes SIDH applicable to context that have a strict space requirement, such as Bitcoin or Tor. Tor's data cells must be less than 517 bytes in length, so they can hold 330-byte SIDH keys. By contrast, NTRUEncrypt must exchange approximately 600 bytes to achieve a 128-bit security and cannot be used within Tor without increasing the cell size.|$|E
5000|$|T is {{the unit}} vector tangent to the <b>curve,</b> <b>pointing</b> in the {{direction}} of motion.|$|R
2500|$|For fourth-order curves one can {{construct}} intermediate points Q0, [...] Q1, Q2 & Q3 {{that describe}} linear Bézier <b>curves,</b> <b>points</b> R0, R1 & R2 that describe quadratic Bézier <b>curves,</b> and <b>points</b> S0 & S1 that describe cubic Bézier curves: ...|$|R
5000|$|... {{determination}} {{of a first}} <b>curve</b> <b>point</b> to a given starting point {{in the vicinity of}} the curve, ...|$|R
