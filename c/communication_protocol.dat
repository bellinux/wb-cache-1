3932|5513|Public
5|$|The program employs its own <b>communication</b> <b>protocol</b> layered {{on top of}} a schema to {{communicate}} to other nodes. This <b>communication</b> <b>protocol</b> interfaces with the BEEP infrastructure, a network application protocol framework. Computers discovered by the Xgrid system, that is computers with Mac OS X's Xgrid service enabled, are automatically added to the list of available computers to use for processing tasks.|$|E
5|$|ICS {{compatible}} interfaces particularly {{suitable for}} bughouse include Thief and BabasChess. They {{have the ability}} to display both boards {{at the same time and}} store played or observed games, they also have partner communication buttons and a lag indicator. Special Chess Engine <b>Communication</b> <b>Protocol</b> compatible engines have been written that support bughouse, examples are Sunsetter, Sjeng and TJchess. Although much faster than humans, they lack in positional understanding and especially in coordination and communication, an essential skill in this team game.|$|E
25|$|Z-Wave – <b>Communication</b> <b>protocol</b> {{providing}} short-range, low-latency {{data transfer}} at rates and power consumption lower than Wi-Fi. Used primarily for home automation.|$|E
50|$|Canonical Protocol is {{a design}} pattern, applied within the service-orientation design paradigm, which {{attempts}} to make services, within a service inventory, interoperable with each other by standardizing the <b>communication</b> <b>protocols</b> used by the services. This {{eliminates the need for}} bridging <b>communication</b> <b>protocols</b> when services use different <b>communication</b> <b>protocols.</b>|$|R
5000|$|Communication: the data-logger {{manages the}} <b>communication</b> <b>protocols</b> {{with the remote}} server. The {{different}} <b>communication</b> <b>protocols</b> are usually GSM, GPRS, RTC, WiFi, uSD, and RS232.|$|R
40|$|The aim of {{this thesis}} is compare the network <b>communication</b> <b>protocols</b> and their {{implementations}} on different platforms. In the work are described the used <b>communication</b> <b>protocols</b> and the possibilities of their implementation in different programming languages. There are described procedures for implementation of network communication on the demonstration application and testing of these implementations. Based {{on the results of}} testing, are the <b>communication</b> <b>protocols</b> and their implementations compared...|$|R
25|$|Underwater voice <b>communication</b> <b>protocol</b> is like radio <b>communication</b> <b>protocol.</b> The parties {{take turns}} to speak, use clear, short sentences, and {{indicate}} {{when they have}} finished, and whether a response is expected. Like radio, this is done {{to ensure that the}} message has a fair chance of being understood, and the speaker is not interrupted. When more than one recipient is possible, the caller will also identify the desired recipient by a call up message, and will also usually identify him/herself.|$|E
25|$|JSON {{grew out}} of a need for stateful, {{real-time}} server-to-browser <b>communication</b> <b>protocol</b> without using browser plugins such as Flash or Java applets, the dominant methods used in the early 2000s.|$|E
25|$|The Amiga Skyline BBS {{software}} {{was the first}} in 1987 featuring a script markup language <b>communication</b> <b>protocol</b> called Skypix which was capable of giving the user a complete graphical interface, featuring rich graphic content, changeable fonts, mouse-controlled actions, animations and sound.|$|E
40|$|We {{discuss the}} {{robustness}} of two-way quantum <b>communication</b> <b>protocols</b> against Trojan horse attack and introduce a novel attack, delay-photon Trojan horse attack. Moreover, {{we present a}} practical way for two-way quantum <b>communication</b> <b>protocols</b> to prevent the eavesdropper from stealing the information transmitted with Trojan horse attacks. It means that two-way quantum <b>communication</b> <b>protocols</b> is also secure in a practical application. Comment: 3 pages, no figure. Comments and helps are welcome to fgdeng@bnu. edu. c...|$|R
40|$|Multicast group {{communication}} {{is a useful}} augmentation to CORBA both for fault-tolerant and highly available appli-cations and for groupware and cooperative work applica-tions. However, different multicast group <b>communication</b> <b>protocols</b> are appropriate in different environments, e. g., local area vs. wide area networks, and Internet vs. ATM. In this paper we present a multicast {{group communication}} en-gine and bridge for CORBA that allows different multicast group <b>communication</b> <b>protocols</b> to cooperate. The group communication engine places Lamport timestamps on mes-sages, and multicasts messages to object groups using one or more group <b>communication</b> <b>protocols.</b> The group <b>communication</b> <b>protocols</b> reliably deliver the timestamped messages in timestamp order to the group communication engine, which integrates these streams of messages into a single stream for delivery in timestamp order. ...|$|R
40|$|Abstract—Group {{communication}} {{is a useful}} mechanism guaranteeing consistency among replicated objects. The existing approaches do not allow transparent plug-in of group <b>communication</b> <b>protocols</b> into CORBA. They either require modification of CORBA or OS, or provide no room for incorporating group <b>communication</b> transport <b>protocols</b> into CORBA. We thus propose a generic group communication framework that allows transparent plug-in of various group <b>communication</b> <b>protocols</b> with no modification of existing CORBA. We extend the Open Communications Interface (OCI) to support interoperability, reusability of existing group communication, and independency on ORB and OS. We also define the Group <b>Communication</b> Inter-ORB <b>Protocol</b> (GCIOP) as a group communication instantiation of the General Inter-ORB Protocol (GIOP) that encapsulates underlying group <b>communication</b> <b>protocols.</b> The proposed scheme can be exploited for fault-tolerant CORBA (FT CORBA) ...|$|R
25|$|The <b>communication</b> <b>protocol</b> between server {{and client}} {{operates}} network-transparently: {{the client and}} server may run on the same machine or on different ones, possibly with different architectures and operating systems. A client and server can even communicate securely over the Internet by tunneling the connection over an encrypted network session.|$|E
25|$|SQL Server Analysis Services adds OLAP {{and data}} mining {{capabilities}} for SQL Server databases. The OLAP engine supports MOLAP, ROLAP and HOLAP storage modes for data. Analysis Services supports the XML for Analysis standard as the underlying <b>communication</b> <b>protocol.</b> The cube {{data can be}} accessed using MDX and LINQ queries.|$|E
25|$|Sometimes SPI {{is called}} a {{four-wire}} serial bus, contrasting with three-, two-, and one-wire serial buses. The SPI may be accurately described as a synchronous serial interface, but it {{is different from the}} Synchronous Serial Interface (SSI) protocol, which is also a four-wire synchronous serial <b>communication</b> <b>protocol.</b> SSI Protocol employs differential signaling and provides only a single simplex communication channel.|$|E
40|$|International audienceThis paper {{demonstrates}} {{some issues}} in agent interaction on the Web, {{which is the}} center point of supporting the needs of fully-realized learning GRID in the future. Of particular importance is the conversation support., with its core element, <b>communication</b> <b>protocols.</b> We propose to construct <b>communication</b> <b>protocols</b> through learning of performatives of ACL messages based on the FIPA-ACL messages. The work involves two steps: 1) converting real conversations into a markup agent communication language and then 2) inducing <b>communication</b> <b>protocols</b> based on these set of converted conversations...|$|R
40|$|Communication {{is a very}} {{important}} concept in multi-agent systems. There are several approaches to how this communication can take shape. In this paper the two most important approaches are reviewed and compared, <b>communication</b> using <b>communication</b> <b>protocols</b> and <b>communication</b> using an evolving language. Both techniques have their advantages and disadvantages. In industrial applications <b>communication</b> <b>protocols</b> will be the best practice, but in systems where homogeneous agents can work together language evolution is a good option. Keywords Multi-agent communication, agent communication languages, language evolution, <b>communication</b> <b>protocols</b> 1...|$|R
50|$|<b>Communication</b> <b>protocols</b> {{supported}} were ASYNC, Bisync and SDLC.|$|R
25|$|The Internet {{maintains}} {{two principal}} namespaces, the domain name hierarchy and the Internet Protocol (IP) address spaces. The Domain Name System maintains the domain name hierarchy and provides translation services {{between it and}} the address spaces. Internet name servers and a <b>communication</b> <b>protocol</b> implement the Domain Name System. A DNS name server is a server that stores the DNS records for a domain; a DNS name server responds with answers to queries against its database.|$|E
25|$|Serial Attached SCSI (SAS). The SAS {{is a new}} {{generation}} serial <b>communication</b> <b>protocol</b> for devices designed to allow for much higher speed data transfers and is compatible with SATA. SAS uses a mechanically identical data and power connector to standard 3.5-inch SATA1/SATA2 HDDs, and many server-oriented SAS RAID controllers are also capable of addressing SATA HDDs. SAS uses serial communication instead of the parallel method found in traditional SCSI devices but still uses SCSI commands.|$|E
25|$|Some Asian, European, and North American {{diagnostic}} ports {{are sometimes}} incorrectly {{referred to as}} ALDL. A small number of vehicles manufactured before 1996 from other manufacturers used the GM Delphi Electronics engine and powertrain controllers; however, these used a modified ALDL <b>communication</b> <b>protocol.</b> Most did not {{and there was not}} a homogeneous name for these other proprietary diagnostic protocols and interface ports. Ford EEC, Toyota DLC, Chrysler, Nissan, Volkswagen, and others used their own onboard Diagnostics protocols and connectors, and are also not OBD I compliant outside California.|$|E
40|$|We live in {{a modern}} world surrouded by many forms of {{information}} technology. Majority of communication among people is realized through the internet and usage of social networks is everyday matter which leads to reduction of personal communincation and to higher usage of dating sites. However these sites are often a place where potentinal deliquents occure. This thesis deals with reconstruction of captured communication from social networks Lidé. cz and Xchat. Man-in-the-middle attack was used to capture data needed for analysis of <b>communication</b> <b>protocols.</b> Bachelor thesis focuses on identification of communication methods of social networks mentioned above and on analysis of their <b>communication</b> <b>protocols.</b> From these <b>communication</b> <b>protocols</b> are chosen events interesting for forensic analysis. Result of this thesis is an extension which provides support of the <b>communication</b> <b>protocols</b> for application Netfox Detective...|$|R
40|$|Pervasive {{computing}} {{is characterized}} by heterogeneous devices that usually have scarce resources requiring optimized usage. These devices may use different <b>communication</b> <b>protocols</b> which can be switched at runtime. As different <b>communication</b> <b>protocols</b> have different quality of service (QoS) properties, this motivates optimized selfadaption of protocols for devices, e. g., considering power consumption and other QoS requirements, e. g. round trip time (RTT) for service invocations, throughput, and reliability. In this paper, we present an extensible approach for selfadaptation of <b>communication</b> <b>protocols</b> for pervasive web services, where protocols are designed as reusable connectors and our middleware infrastructure can hide the complexity of using different <b>communication</b> <b>protocols</b> to upper layers. We also propose to use Genetic Algorithms (GAs) to find optimized configurations at runtime to achieve selfadaption of web service transport protocols (TCP, UDP and Bluetooth), taking into consideration QoS requirements. Our tests show that protocol switching involves little performance overhead and runs efficiently. Our evaluations also show that the proposed approach for achieving selfadaptation for <b>communication</b> <b>protocols</b> is effective where optimized configurations of protocols can be obtained with acceptable performance and quality by GAs. ...|$|R
5000|$|Developing <b>communication</b> <b>protocols</b> (SFTP or {{based on}} web services) ...|$|R
25|$|Onion routing is {{implemented}} by encryption {{in the application}} layer of a <b>communication</b> <b>protocol</b> stack, nested like the layers of an onion. Tor encrypts the data, including the next node destination IP address, multiple times and sends it through a virtual circuit comprising successive, randomly selected Tor relays. Each relay decrypts a layer of encryption to reveal only the next relay in the circuit in order to pass the remaining encrypted data on to it. The final relay decrypts the innermost layer of encryption and sends the original data to its destination without revealing, or even knowing, the source IP address. Because the routing of the communication is partly concealed at every hop in the Tor circuit, this method eliminates any single {{point at which the}} communicating peers can be determined through network surveillance that relies upon knowing its source and destination.|$|E
500|$|According to a USB-IF chairman, [...] "at least 10 to 15 {{percent of}} the stated peak 60MB/s (480Mbit/s) of Hi-Speed USB goes to overhead—the <b>communication</b> <b>protocol</b> between the card and the peripheral. Overhead is a {{component}} of all connectivity standards". Tables illustrating the transfer limits are shown in Chapter 5 of the USB spec.|$|E
2500|$|Here {{is a basic}} {{introduction}} to the OBD <b>communication</b> <b>protocol</b> according to ISO 15031: ...|$|E
40|$|The CORBA {{has many}} {{attractive}} {{features such as}} reusability, portability, and interoperability which are key issues in the integration of heterogeneous and distributed computing system. However, it provides little support for fault tolerance and high availability that can be supported by means of object replication. The existing approaches do not support transparent plug-in of group <b>communication</b> <b>protocols</b> into CORBA with which CORBA application programmers are able to directly exploit group <b>communication</b> <b>protocols.</b> They either require modification of CORBA or OS, or provide no room for incorporating group <b>communication</b> transport <b>protocols</b> into CORBA. In this {{paper we propose a}} generic group communication framework that allows transparent plug-in of various group <b>communication</b> <b>protocols</b> with no modification of existing CORBA. For this, we extend the Open Communication Interface (OCI) to support interoperability, reusability of existing group communication, and independency on ORB and OS. The proposed approach can also be applied to various group <b>communication</b> <b>protocols.</b> Keywords: Group <b>Communication,</b> CORBA, Open Communication Interface, Multicasting...|$|R
40|$|We {{present a}} system for the {{simulation}} and validation of <b>communication</b> <b>protocols.</b> Our tool borrows ideas from Spin [Holzmann, 1997], but in addition enables the modeling of timing and probability constraints because {{it is based on}} discrete event simulation. We describe a logic for specifying properties of <b>communication</b> <b>protocols,</b> and a model-checking algorithm for calculating the probability of such a property being satisfied by the protocol. Using a queueing system as an example, we show that the same model can be used to obtain performance measures by simulation and for model-checking. Keywords: discrete event simulation, state exploration, protocol verification, protocol specification. 1 Introduction The analysis of <b>communication</b> <b>protocols</b> encompasses the tasks of performance evaluation and validation (analysis for correctness). Due to the distributed nature of <b>communication</b> <b>protocols</b> and their resulting complexity, the use of automated tools for these tasks is highly desirable [...] . ...|$|R
40|$|Multicastgroup {{communication}} {{is a useful}} augmentation to CORBA both for fault-tolerant and highly available applications and for groupware and cooperative work applications. However, different multicast group <b>communication</b> <b>protocols</b> are appropriate in different environments, e. g., local area vs. wide area networks, and Internet vs. ATM. In this paper we present a multicast group communication engine and bridge for CORBA that allows different multicast group <b>communication</b> <b>protocols</b> to cooperate. The group communication engine places Lamport timestamps on messages, and multicasts messages to object groups using one or more group <b>communication</b> <b>protocols.</b> The group <b>communication</b> <b>protocols</b> reliably deliver the timestamped messages in timestamp order to the group communication engine, which integrates these streams of messages into a single stream for delivery in timestamp order. 1 Introduction Fault tolerance and high availability can be provided for the Common Object Request Broker Archi [...] ...|$|R
2500|$|Windows Update v4, {{released}} {{in conjunction with}} Windows XP in 2001, changed this by having the ActiveX control submit {{a list of the}} hardware components to Microsoft's servers, which then returns a list of only those device drivers available for that machine. [...] It also narrowed down the list of available updates for the operating system and related components by sending details of what operating system version, service pack, and locale are installed. [...] German technology web site tecchannel.de published an analysis of the Windows Update <b>communication</b> <b>protocol</b> in February 2003, which received wide attention on technology web sites. [...] The report, which was the first to contain extensive details of how the Windows Update <b>communication</b> <b>protocol</b> worked, also discovered that the make and model of the computer, the amount of free disk space, and the Windows product key, were sent.|$|E
2500|$|While {{disruptive}} innovation will typically [...] "attack a traditional business {{model with a}} lower-cost solution and overtake incumbent firms quickly," [...] foundational innovation is slower, and typically {{has the potential to}} create new foundations for global technology systems over the longer term. Foundational innovation tends to transform business operating models as entirely new business models emerge over many years, with gradual and steady adoption of the innovation leading to waves of technological and institutional change that gain momentum more slowly. [...] The advent of the packet-switched <b>communication</b> <b>protocol</b> TCP/IP—originally introduced in 1972 to support a single use case for United States Department of Defense electronic communication (email), and which gained widespread adoption only in the mid-1990s {{with the advent of the}} World Wide Web—is a foundational technology.|$|E
2500|$|Synthesizers became {{easier to}} {{integrate}} and synchronize with other electronic instruments and controllers {{with the introduction}} of Musical Instrument Digital Interface (MIDI) in 1983. First proposed in 1981 by engineer Dave Smith of Sequential Circuits, the MIDI standard was developed by a consortium now known as the MIDI Manufacturers Association. MIDI is an opto-isolated serial interface and <b>communication</b> <b>protocol.</b> It provides for the transmission from one device or instrument to another of real-time performance data. [...] This data includes note events, commands for the selection of instrument presets (i.e. sounds, or programs or patches, previously stored in the instrument's memory), the control of performance-related parameters such as volume, effects levels and the like, as well as synchronization, transport control and other types of data. [...] MIDI interfaces are now almost ubiquitous on music equipment and are commonly available on personal computers (PCs).|$|E
40|$|In [33], Kleijn {{presented}} {{a survey of}} the use of team automata for the specification and analysis of phenomena from the field of computer supported cooperative work, in particular notions related to groupware systems. In this paper we present {{a survey of the}} use of team automata for the specification and analysis of some issues from the field of security. In particular, we show how team automata can adequately be used to model and verify various access control policies, multicast/broadcast <b>communication</b> <b>protocols,</b> and general (cryptographic) <b>communication</b> <b>protocols.</b> Key words: team automata, access control, security, cryptographic <b>communication</b> <b>protocols...</b>|$|R
50|$|The {{protocols}} {{described here}} are from different cellular data <b>communication</b> <b>protocols.</b>|$|R
5000|$|IEC 61334-4-42:1996 Data <b>communication</b> <b>{{protocols}}</b> - Application protocols - Application layer ...|$|R
