1|2|Public
40|$|We present {{practical}} new algorithms for FIFO or priority-ordered spin {{locks on}} sharedmemory multiprocessors with an atomic swap instruction. Different versions of these queuing spin locks {{are designed for}} machines with coherent-cache and NUMA memory models. We include extensions to provide nested lock acquisition, <b>conditional</b> <b>locking,</b> timeout of lock requests, and preemption of waiters. These locks apply to both realtime and non-real-time parallel systems and we include {{a comparison of the}} traits of several lock schemes aimed at those environments. Our main technical contributions are our techniques and algorithms that provide tight control over lock grant order, use only the atomic swap instruction, use at most one (local only) spin for lock acquisition and no spinning for lock release, and need only O(L + P) space on either a coherentcache or NUMA machine. This research {{was supported in part by}} the National Science Foundation under grant number CCR 9200858 and by a Nationa [...] ...|$|E
40|$|In this paper, {{we discuss}} a new {{approach}} to multi-version concurrency control, called Dynamic Versioning, that avoids the data contention due to conflicts between Reads and Writes. A data item is allowed to have several committed versions and at most one uncommitted version. A conflict between a Read and a Write is resolved by imposing an order between the requesting transactions, and allowing the Read to access one of the committed versions. The space overhead is reduced to the minimum possible by making the versions dynamic; a version exists only as long as it may be accessed by an active transaction. <b>Conditional</b> <b>lock</b> compatibilities are used for providing serializable access to the multiple versions. The results from simulation studies indicate that the dynamic versioning method, with little space overhead (about 1 % the size of the database), significantly reduces blocking (by 60 % to 90 %) compared to single-version two-phase locking. Lower blocking rates increase transaction throughput and reduce variance in transaction response times by better utilization of resources. This approach also reduces starvation of short transactions and subsumes previous methods proposed for supporting long-running queries. The dynamic versioning method can be easily incorporated into existing DBMS systems. The modifications required for the lock manager and the storage manager modules to implement dynamic versioning are discussed...|$|R
40|$|The clock {{distribution}} and generation circuitry forms {{a critical component}} of current synchronous digital systems. A digital system’s clocks must have not only low jitter, low skew, but also well-controlled duty cycle in order to facilitate versatile clocking techniques. In high-speed CMOS clock buffer design, the duty cycle of a clock is liable to be changed when the clock passes through a multistage buffer because the circuit is not pure digital [8]. In this paper, we propose a pulse width control loop referred as MPWCL (modified pulse width control loop) that adopts the same architecture as the conventional PWCL, but with a new pulse generator and new charge pump circuit as a constituent of the duty cycle detector. Thanks to using new building blocks the proposed pulse width control loop can control the duty cycle in a wide range, and what is more important it becomes operative in saturation region too, what provides <b>conditional</b> for fast <b>locking</b> time. For 1. 2 µm double-metal double-poly CMOS process with Vdd = 5 V and operating frequency of 133 MHz, results of SPICE simulation show that the duty cycle can be well controlled in the range from 20 % up to 80 % if the loop parameters are properly chosen...|$|R

