283|1289|Public
25|$|On simple, usually {{temporary}} layouts, {{power is}} supplied by a power pack consisting of a transformer and rectifier (DC), a rheostat for regulating power to the track (and thus train speed), and reversing to control model direction. On permanent layouts, multiple power supplies are traditionally used, with the trackage divided into electrically isolated sections called blocks; toggle or rotary switches (sometimes relays) are used to select which power supply controls the train in a particular block. With the advent of digital command <b>control,</b> <b>block</b> divisions are largely eliminated, as the computerized controllers can control any train anywhere on the track at any time.|$|E
25|$|A {{particular}} robustness {{issue is}} the requirement for a control system to perform properly {{in the presence of}} input and state constraints. In the physical world every signal is limited. It could happen that a controller will send control signals that cannot be followed by the physical system, for example, trying to rotate a valve at excessive speed. This can produce undesired behavior of the closed-loop system, or even damage or break actuators or other subsystems. Specific control techniques are available to solve the problem: model predictive control (see later), and anti-wind up systems. The latter consists of an additional <b>control</b> <b>block</b> that ensures that the control signal never exceeds a given threshold.|$|E
25|$|File {{size was}} {{specified}} {{as the number}} of 128-byte records (directly corresponding to disk sectors on 8-inch drives) occupied by a file on the disk. There was no generally supported way of specifying byte-exact file sizes. The current size of a file was maintained in the file's file <b>control</b> <b>block</b> (FCB) by the operating system. Since many application programs (such as text editors) prefer to deal with files as sequences of characters rather than as sequences of records, by convention text files were terminated with a control-Z character (ASCII SUB, hexadecimal 1A). Determining the end of a text file therefore involved examining the last record of the file to locate the terminating control-Z. This also meant that inserting a control-Z character into the middle of a file usually had the effect of truncating the text contents of the file.|$|E
30|$|IEC 61850 - 9 - 2 and 8 - 1 {{standards}} {{already have}} <b>control</b> <b>blocks</b> for SVs, i.e. streaming information, and GOOSE messages, i.e. event driven information, which {{are known as}} “SVCB” and “GoCB” <b>control</b> <b>blocks</b> respectively. These <b>control</b> <b>blocks</b> are used to start and {{stop the flow of}} messages. <b>Control</b> <b>blocks</b> for R-SV and R-GOOSE are defined by addition of new functional constraints to the existing <b>control</b> <b>blocks.</b> So in order to accommodate the IP protocol in SVCB and GoCB <b>control</b> <b>blocks,</b> new attributes such as “SecurityEnable” and “UDPCOMADDR” are introduced. The “UDPCOMADDR” attribute contains the priority, VID, and other attributes related to IP such as IP address, IP type of service etc. The new <b>control</b> <b>blocks</b> for R-SV and R-GOOSE, with additional enhancements, are termed as R-MSVCB and R-GoCB respectively.|$|R
5000|$|... returns all {{elements}} of list for which the <b>controlled</b> <b>block</b> or expression evaluates to true. [...] evaluates the <b>controlled</b> <b>block</b> or expression for each element of list and returns {{a list of the}} resulting values. These constructs enable a simple functional programming style.|$|R
5000|$|... #Subtitle level 2: Create <b>control</b> <b>blocks</b> for {{individual}} files ...|$|R
50|$|The Task <b>Control</b> <b>Block</b> (TCB) is an {{instance}} of a Process <b>control</b> <b>block</b> in an IBM System/360 architecture and successors operating system environment.|$|E
50|$|The Thread <b>Control</b> <b>Block</b> acts as {{a library}} of {{information}} about the threads in a system. Specific information is stored in the thread <b>control</b> <b>block</b> highlighting important information about each process.|$|E
50|$|A TCB is a {{general-purpose}} {{instance of}} a Process <b>control</b> <b>block</b> in OS/360 and successor systems. An SRB {{is a highly}} optimized instance of a Process <b>control</b> <b>block</b> in MVS/370 and successor systems.|$|E
5000|$|... #Subtitle level 3: Entering {{and leaving}} a {{manually}} <b>controlled</b> <b>block</b> ...|$|R
30|$|This paper only {{focuses on}} the primary control loop, and the {{associated}} <b>control</b> <b>blocks</b> are thus described as follows.|$|R
5000|$|Sampled Data Transfer — Schemes {{are also}} defined to handle {{transfer}} of sampled values using Sampled Value <b>Control</b> <b>blocks</b> (SVCB) ...|$|R
50|$|An SRB is a highly-optimized {{instance}} of a Process <b>control</b> <b>block</b> in these MVS/370 and successor systems. A TCB is a general-purpose {{instance of}} a Process <b>control</b> <b>block</b> in these OS/360 and successor systems.|$|E
50|$|Once {{the control}} program's {{dispatcher}} selects a TCB to be dispatched, the context is determined {{and the general}} purpose registers are obtained from the appropriate <b>control</b> <b>block,</b> then the PSW is loaded from the appropriate <b>control</b> <b>block</b> thereby dispatching the unit of work.|$|E
50|$|A <b>control</b> <b>block</b> {{called the}} JFCB (Job File <b>Control</b> <b>Block)</b> {{initially}} holds the information {{extracted from the}} DD statement for the dataset. The results of the merge are stored in the JFCB which may also be written into the DSCB during the CLOSE process, thereby making the dataset definition permanent.|$|E
40|$|This paper {{takes as}} its {{foundation}} four central facts. First, <b>control</b> <b>blocks</b> in corporations with public shareholders are pervasive. Only {{a handful of}} countries have capital markets that are dominated by companies whose control is in the public float (the evidence is summarized in Gilson, 2006). Second, <b>control</b> <b>blocks</b> do not exist, as the Law and Finance literature (La Porta et al., 1998) would have it, only in consequence of weak corporate governance law...|$|R
5000|$|FakeOS, a {{simulator}} {{that allows}} object modules containing OS/360 SVCs, <b>control</b> <b>blocks,</b> and references to OS/360 access methods to execute under MTS.|$|R
50|$|The VTOC {{consists}} of a sequence of 140-byte records known as Data Set <b>Control</b> <b>Blocks,</b> or DSCBs. There are ten types of DSCB.|$|R
50|$|The Program {{status word}} may {{be stored in}} one <b>control</b> <b>block</b> (possibly a PRB, a Program Request Block), while the general purpose {{registers}} may be stored in the immediately preceding <b>control</b> <b>block</b> (an SVRB, Supervisor Call Request Block, an IRB, Interruption Request Block, or the TCB itself), depending upon the particular context.|$|E
5000|$|... #Caption: Basic <b>control</b> <b>block</b> diagram {{used in the}} {{designing}} of controllers for a system.|$|E
5000|$|Unit <b>Control</b> <b>Block,</b> for a {{description}} how WLM controls dynamic Parallel Access Volumes (PAVs) ...|$|E
40|$|We propose <b>Control</b> <b>Blocks,</b> {{a system}} of graspable {{interface}} tools designed to bring the benefits of tangible interaction to the complex tasks required of the tabletop computer groupware environment. <b>Control</b> <b>blocks</b> are physical artefacts, directly associated with virtual content, similar to the Bricks of [2]. They are however augmented with large mechanical controls to provide the manipulation of additional functionality without compromising the tool’s physical nature. © 2007 University of Newcastle upon Tyne. Printed and published by the University of Newcastle upon Tyne...|$|R
5000|$|It has block-oriented control structures, {{similar to}} those in the C, JavaScript, and Java {{programming}} languages. Conditions are surrounded by parentheses, and <b>controlled</b> <b>blocks</b> are surrounded by braces: ...|$|R
40|$|Abstract: This study {{analyzes}} {{the determinants of}} changes in corporate ownership and firm failure, taking into account different types of sellers and buyers of <b>control</b> <b>blocks.</b> For a large panel of German companies we find that firms {{are more likely to}} fail or to be sold when performance is poor, financial pressure is high, and firm size is small. Pyramids and cross-ownership deter control changes. Ownership concentration has a nonlinear impact on the likelihood of control transfer. In contrast to corporate shareholders, private shareholders tend to sell <b>control</b> <b>blocks</b> of firms under financial pressure...|$|R
5000|$|Pointer to the Process <b>control</b> <b>block</b> (PCB) of {{the process}} that the thread lives on ...|$|E
50|$|In IBM {{mainframe}} {{operating systems}} from the OS/360 and successors line, a Unit <b>Control</b> <b>Block</b> (UCB) is a memory structure, or a <b>control</b> <b>block,</b> that describes any single input/output peripheral device (unit), or an exposure (alias), {{to the operating}} system. Certain data within the UCB also instructs the Input/Output Supervisor (IOS) to use certain closed subroutines in addition to normal IOS processing for additional physical device control.|$|E
5000|$|Variable {{record length}} with fixed-length control - records vary in length, but are {{preceded by a}} fixed-length <b>control</b> <b>block.</b>|$|E
5000|$|Setting Groups — The setting group <b>control</b> <b>Blocks</b> (SGCB) {{are defined}} {{to handle the}} setting groups so that user can switch to any active group {{according}} to the requirement.|$|R
25|$|Riek {{was made}} {{commander}} in chief of the South Sudan Defense Force (SSDF), which included most of the ex-rebels who had signed the Khartoum agreement. His forces <b>controlled</b> <b>Block</b> 5A.|$|R
5000|$|Berkman, Henk, Rebel A. Cole and Lawrence J. Fu. 2014. Improving {{corporate}} governance where the State is the <b>controlling</b> <b>block</b> holder: Evidence from China. European Journal of Finance 20, 752-777.|$|R
5000|$|The {{equivalent}} <b>control</b> <b>block</b> for IBM DOS/360, DOS/VSE and z/VSE {{operating systems}} is a [...] "DTF" [...] (Define the file)http://publib.boulder.ibm.com/infocenter/zvm/v5r4/index.jsp?topic=/com.ibm.zvm.v54.dmsa6/hcsd3b00155.htm ...|$|E
50|$|The PCR {{contains}} a substructure called Processor <b>Control</b> <b>Block</b> (KPRCB), which contains {{information such as}} CPU step and a pointer to the thread object of the current thread.|$|E
50|$|File systems {{keep track}} of the times that files are created, modified, and/or {{accessed}} by storing timestamps in the file <b>control</b> <b>block</b> (or inode) of each file and directory.|$|E
40|$|AbstractWe {{consider}} {{the problem of}} mapping a set of control components to an executable implementation. The standard approach to this problem involves mapping <b>control</b> <b>blocks</b> to periodic tasks, and then generating a schedule. This schedule is platform-dependent, and its execution requires real-time operating system support. We propose an alternative approach which involves generating a dispatch sequence of <b>control</b> <b>blocks</b> in a platform-independent manner. Our solution relies on assigning relative complexity and relative importance measures to control components, and is an adaptation of the classical scheduling algorithms such as earliest–deadline–first. We show the benefits of our approach using simulation experiments on two case studies...|$|R
40|$|This study {{investigates the}} {{determinants}} of changes in corporate ownership and firm failure, taking into account different types of sellers and buyers of <b>control</b> <b>blocks.</b> For a large panel of German corporations we find that firms {{are more likely to}} fail or to be sold when performance is poor, financial pressure is high, and firm size is small. Cross ownership deters control changes, and ownership concentration has a non-linear impact on the likelihood of control transfer. In contrast to corporate shareholders, private shareholders tend to sell <b>control</b> <b>blocks</b> when financial pressure increases. [...] Corporate governance,ownership structure,bankruptcy,takeover...|$|R
40|$|We {{consider}} {{the problem of}} mapping a set of control components to an executable implementation. The standard approach to this problem involves mapping <b>control</b> <b>blocks</b> to periodic tasks, and then generating a schedule. This schedule is platform-dependent, and its execution requires realtime operating system support. We propose an alternative approach which involves generating a dispatch sequence of <b>control</b> <b>blocks</b> in a platform-independent manner. Our solution relies on assigning relative complexity and relative importance measures to control components, and is an adaptation of classical scheduling algorithms such as earliest-deadline-first. We show the benefits of our approach using simulation experiments on two case studies...|$|R
