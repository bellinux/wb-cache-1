749|1730|Public
2500|$|Oracle Designer - a <b>CASE</b> <b>tool</b> which {{integrates}} with Oracle Developer Suite ...|$|E
5000|$|... #Subtitle level 2: Integration with Oracle Designer <b>CASE</b> <b>Tool</b> ...|$|E
50|$|The ArgoUML <b>CASE</b> <b>tool</b> is able {{to export}} UML {{diagrams}} in PGML.|$|E
40|$|For {{developing}} of computer-based {{information systems}} (IS) there nowadays exist {{different kind of}} tools. This study deals with tools for earlier phases (analysis, design), so called upper-CASE. <b>CASE</b> <b>tools</b> usually contain support for one or more ISD-methods. Working with <b>CASE</b> <b>tools</b> means that the ISD-work is both method- and computer-based. This paper {{is concerned about the}} motives for investments in <b>CASE</b> <b>tools.</b> Why do organizations invest in <b>CASE</b> <b>tools?</b> What objectives are the organizations aiming at? This study is also interested in if the stated objectives are reached. Are the motives for using <b>CASE</b> <b>tools</b> fulfilled? 1. Introduction For developing of computer-based information systems (IS) there nowadays exist different kind of tools. The last five years there has been an intensive development of <b>CASE</b> <b>tools</b> (Computer Aided Systems/Software Engineering). The aim of these tools is to assist the system developers. There are tools supporting different phases in information systems [...] ...|$|R
40|$|This paper {{details the}} {{selection}} criteria which {{were used to}} choose <b>CASE</b> <b>tools</b> for use in Undergraduate and Postgraduate studies at Deakin University. While the objectives {{for the use of}} <b>CASE</b> <b>tools</b> in a tertiary education environment are different from the business world, the same process of evaluation should be applicable and the results of general interest. The study, which took place in 1990 and 1991, considered 20 different <b>CASE</b> <b>tools.</b> A taxonomy of <b>CASE</b> <b>tools</b> was identified according to the level of support the tool provided during the life cycle of software development. The tools investigated covered the broad range of functionality identified by the study. The goals for a suitable CASE environment for our courses and the evaluation criteria were established. An overview of the products investigated is provided as well as a matrix showing the products against the characteristics of <b>CASE</b> <b>tools.</b> Selection Criteria for <b>CASE</b> <b>Tools</b> Page 2 Introduction This research was requested [...] ...|$|R
40|$|Many {{claims have}} been made about the {{benefits}} of CASE and many problems have been reported about software maintenance. This paper discusses two aspects from a survey recently conducted in Singapore on Software Engineering Practices. These two aspects include: how organisations in Singapore use <b>CASE</b> <b>tools</b> and how organisations in Singapore practise software maintenance. The survey indicated that the level of usage of <b>CASE</b> <b>tools</b> in Singapore is fairly low. Organizations in Singapore are generally well aware of the benefits and problems in CASE. The major barriers to the use of <b>CASE</b> <b>tools</b> were the high cost of implementing <b>CASE</b> <b>tools</b> and the long learning curve to use <b>CASE</b> <b>tools</b> effectively. On the practice of software maintenance, the survey found that the greatest problem with it was staff turnover. 2 1...|$|R
5000|$|Oracle Designer - a <b>CASE</b> <b>tool</b> which {{integrates}} with Oracle Developer Suite ...|$|E
50|$|Another definition: MetaCASE {{tools are}} {{software}} tools {{that support the}} design and generation of CASE tools.In general, metaCASE tools should provide generic <b>CASE</b> <b>tool</b> components that can be customised and instantiated into particular CASE tools.The intent of metaCASE tools is to capture the specification of the required <b>CASE</b> <b>tool</b> and then generate the tool from the specification.|$|E
5000|$|MonoUML is a <b>CASE</b> <b>tool</b> {{based on}} the Mono framework. Designed for {{allowing}} Unix/Linux developers to design computer systems faster using a friendly GUI application. Not only a diagramming tool but rather a complete <b>CASE</b> <b>tool</b> {{based on the}} OMG standards and fully compatible with proprietary tools. MonoUML supports reverse engineering of executables (.exe) or [...]NET assemblies.|$|E
40|$|Selecting {{the most}} {{appropriate}} DoDAF (Department of Defense Architecture Framework) <b>CASE</b> <b>tools</b> for C 4 I (Command, Control, Communications, Computers and Intelligence) applications is a challenging task. Several Multi-Criteria Decision Making (MCDM) techniques are being explored to tackle the problem. Among them, we found that two MCDM techniques namely AHP and PROMETHEE are suitable for the selection process of <b>CASE</b> <b>tools.</b> In order to evaluate and select the desired <b>CASE</b> <b>tools</b> using those MCDM techniques, some criteria are required. This paper proposes a selection model for DoDAF-based <b>CASE</b> <b>tools,</b> which incorporates these criteria from multiple decision makers {{in the context of}} C 4 I applications. We evaluated the selection model using AHP and PROMETHEE. From the test results, we found that AHP is more preferable than PROMETHEE for evaluating and selecting DoDAF <b>CASE</b> <b>tools...</b>|$|R
50|$|Another common way to {{distinguish}} <b>CASE</b> <b>tools</b> is {{the distinction between}} Upper CASE and Lower <b>CASE.</b> Upper <b>CASE</b> <b>Tools</b> support business and analysis modeling. They support traditional diagrammatic languages such as ER diagrams, Data flow diagram, Structure charts, Decision Trees, Decision tables, etc. Lower <b>CASE</b> <b>Tools</b> support development activities, such as physical design, debugging, construction, testing, component integration, maintenance, and reverse engineering. All other activities span the entire life-cycle and apply equally to upper and lower CASE.|$|R
40|$|The NASA Engineering and Safety Center (NESC) was {{requested}} {{to perform an}} independent assessment of the mitigation of the Constellation Program (CxP) Risk 4421 {{through the use of}} computer-aided software engineering (<b>CASE)</b> <b>tools.</b> With the cancellation of the CxP, the assessment goals were modified to capture lessons learned and best practices in the use of <b>CASE</b> <b>tools.</b> The assessment goal was to prepare the next program for the use of these <b>CASE</b> <b>tools.</b> The outcome of the assessment is contained in this document...|$|R
50|$|Objecteering is a UML and MDA <b>CASE</b> <b>tool</b> {{edited by}} Objecteering Software, a {{subsidiary}} of Softeam.|$|E
5000|$|Encapsulator: {{tool for}} {{encapsulate}} any <b>CASE</b> <b>tool</b> into a Tool Slot if it supports standard I/O.|$|E
50|$|MetaCASE tools allow {{definition}} {{and construction of}} CASE tools that support arbitrary methodologies. A <b>CASE</b> <b>tool</b> customizer first specifies the desired methodology and customizes the corresponding <b>CASE</b> <b>tool.</b> Then software developers use that <b>CASE</b> <b>tool</b> to develop software systems. An advantage {{of this approach is}} that the same tool is used with different methodologies, which in turn, reduces the learning curve and consequently the cost. Any desired methodology can be automated or modified by the developing organization which provides a dynamic capability in today's dynamic and competitive world. From another perspective this technology {{can be used as a}} practical teaching tool considering the shortened length of development and learning times that suits academic course periods.|$|E
40|$|Abstract. We {{present the}} results of a {{research}} work targeted to understanding the domains and consequences of <b>CASE</b> <b>tools</b> usage in Nokia. We aim to evaluate the importance of the various <b>CASE</b> <b>tools</b> features, as rated by our developers, and how well such features are implemented in currently available <b>CASE</b> <b>tools.</b> A structured questionnaire was sent to our most experienced developers and CASE users. From this survey, it emerged that <b>CASE</b> <b>tools</b> support is reputed most useful for the following functions: graphical drawing, automatic documentation generation and storage of diagrams. The results hint to a mismatch between the features required by the developers and those offered by CASE products. Further research is needed before more definite conclusions can be drawn...|$|R
40|$|There are {{numerous}} studies which show that <b>CASE</b> <b>Tools</b> greatly facilitate software development. As {{a result of}} these advantages, an increasing amount of software development is done with <b>CASE</b> <b>Tools.</b> As more software engineers become proficient with these tools, their experience and feedback lead to further development with the tools themselves. What has not been widely studied, however, is the reliability and efficiency of the actual code produced by the <b>CASE</b> <b>Tools.</b> This investigation considered these matters. Three segments of code generated by MATRIXx, one of many commercially available <b>CASE</b> <b>Tools,</b> were chosen for analysis: ETOFLIGHT, a portion of the Earth to Orbit Flight software, and ECLSS and PFMC, modules for Environmental Control and Life Support System and Pump Fan Motor Control, respectively...|$|R
40|$|This {{technical}} report identifies {{issues involved in}} the acquisition of Computer Aided Software Engineering (<b>CASE)</b> <b>tools.</b> Among the issues identified and discussed are cost, performance, process support, maintenance, data management, tool integration, and standardization. The report concludes with recommendations intended for individuals or groups responsible for acquiring <b>CASE</b> <b>tools...</b>|$|R
5000|$|W-Language - A French {{programming}} language {{used in the}} WinDev <b>CASE</b> <b>Tool.</b> A Chinese version is also available.|$|E
5000|$|A domain-specific {{language}} {{environment may}} {{be thought of}} as a metamodeling tool, i.e., a modeling tool used to define a modeling tool or <b>CASE</b> <b>tool.</b> The resulting tool may either work within the domain-specific language environment, or less commonly be produced as a separate stand-alone program. In the more common case, the domain-specific language environment supports an additional layer of abstraction when compared to a traditional <b>CASE</b> <b>tool.</b>|$|E
5000|$|... objectiF is a Unified Modeling Language <b>CASE</b> <b>tool</b> for model-driven engineering. It is {{developed}} by microTOOL GmbH based in Berlin (Germany).|$|E
40|$|In {{this paper}} issues of {{creating}} <b>case</b> <b>tools,</b> implementing capability maturity models, for software process improvement are analyzed. A range of aspects {{of using the}} maturity models were analyzed to this end; these aspects were taken into consideration when designing the <b>case</b> <b>tools</b> structure. The group of existing <b>case</b> <b>tools</b> is reviewed, their benefits and limitations are displayed. The inner structures for organizing the model and data under selection are analyzed. Solutions and issues regarding creation of capability maturity models development environments are discussed. Recommendations {{for the development of}} analogous tools are presented...|$|R
40|$|This paper {{discusses}} {{an intelligent}} and Internet-based Telecommunication System Specification Model (TSSM) using Computer Aided Systems Engineering <b>tools</b> (<b>CASE</b> <b>tools).</b> TSSM implements <b>CASE</b> <b>tools</b> to mechanize its lifecycle development maintenance and integration process. This model is developed {{to improve the}} system analysts (SA) efforts in their design and development of major software and hardware initiatives. This model also improves the SA effectiveness by guiding them through the system's Lifecycle Development Process (LDP). The <b>CASE</b> <b>tools</b> are used to support, integrate, and monitor all LDP functions of the system...|$|R
40|$|The goal of any MetaCASE {{system is}} the rapid, cheap {{development}} of <b>CASE</b> <b>tools,</b> typically to support customised development methods. Anything which impinges on this simplicity nullifies the advantage of using such technology in the first place. Following a review of related work, this paper describes some problems with using MetaMOOSE, an established object-oriented framework for <b>CASE</b> <b>tools</b> and presents a solution {{in the form of}} a graphical tool (MetaBuilder) which allows metamodels, and hence <b>CASE</b> <b>tools,</b> to be constructed rapidly from object-oriented components. The tool forms a front end to the MetaMOOSE system...|$|R
50|$|MERODE-models can {{be created}} with the opensource <b>case</b> <b>tool</b> JMermaid. The tool also allows {{checking}} the models for consistency and readiness for transformation.|$|E
5000|$|Oracle Designer is a <b>CASE</b> <b>tool</b> that is sold by Oracle. It {{is able to}} {{generate}} various software modules including Oracle Forms and Oracle Report ...|$|E
50|$|Uniface Version 4 (1988):Uniface 4 {{improved}} the text editor (now form editor), improved printing and display support, introduced support for MS-DOS, {{and added a}} <b>CASE</b> <b>tool</b> interface.|$|E
40|$|Automated {{traceability}} utilizes {{information retrieval}} methods to dynamically generate traceability links on an as-needed basis. Although a significant {{body of research}} has demonstrated the feasibility of automated traceability a rather ad-hoc approach that often involves significant human effort has previously been used to import the traceable data from 3 rd party <b>case</b> <b>tools</b> into the trace tool. This paper describes an architectural framework and corresponding prototype tool for providing “in-place ” traceability in which data residing in distributed 3 rd party <b>case</b> <b>tools</b> is automatically parsed to extract information needed to service trace queries. The framework provides extensibility for adding new types of traceable artifacts and 3 rd party <b>case</b> <b>tools.</b> An open source model is proposed in which organizations {{contribute to the development}} of specialized adapters for different <b>case</b> <b>tools</b> and artifact types...|$|R
5000|$|... #Subtitle level 3: Differences between metaCASE and <b>CASE</b> <b>tools</b> ...|$|R
50|$|Another {{criticism}} {{was the focus}} on design documents, {{to the exclusion of}} Computer-Aided Software Engineering (<b>CASE)</b> <b>tools</b> being used in the industry. Vendors would often use the <b>CASE</b> <b>tools</b> to design the software, then write several standards-required documents to describe the CASE-formatted data. This created problems matching design documents to the actual product.|$|R
5000|$|Oracle Designer is Oracle's <b>CASE</b> <b>tool</b> for {{designing}} an information system and generating it. After generating the information system one {{is able to}} edit the generated code with Oracle Developer Suite ...|$|E
50|$|In 1990, Technicolor Rome {{following}} {{the vision of}} IT Director: Vincenzo Compagnoni, used Synon (at that time, a pioneer technology), to develop its entire information system (6,000 RPG programs) computerising the whole Film Laboratory supply chain and demonstrating the consistency of <b>CASE</b> <b>TOOL</b> technologies.|$|E
5000|$|The middle level {{contains}} {{a model of}} the method, i.e. a metamodel. A metamodel includes the concepts, rules and diagramming notations of a given method. For example, a metamodel may specify concepts like a class and an inheritance, how they are related, and how they are represented. However, instead of being embedded in code in the tool, as in a fixed <b>CASE</b> <b>tool,</b> the method is stored as data in the repository. The use of metamodels has recently become more popular. Many method books now include metamodels of their method, and several important innovations, such as XMI, are metamodel-based. Unlike a <b>CASE</b> <b>tool,</b> a metaCASE tool allows the user to modify the metamodel. Hence, metaCASE is based on the flexibility of the method specifications.|$|E
50|$|Reich Technologies sells {{off-the-shelf}} and tailored {{versions of}} their <b>CASE</b> <b>tools.</b>|$|R
40|$|The current {{generation}} of <b>CASE</b> <b>tools</b> mainly provides rigid and unflexible support for editing, storage, verification and transformation of specifications. Information engineers have to adapt their way of working to <b>CASE</b> <b>tools</b> instead of vice versa. To enable a more flexible, method independent, support of information engineers, {{the concept of a}} CASE shell has emerged. Crucial for CASE shells is the specification of interpretable method knowledge. A technique capable of specifying method knowledge is referred to as a meta-modelling technique. In this paper it is stressed that a meta-modelling technique should also be able to represent graphic conventions in methods. An existing meta-modelling technique is extended with constructs for the representation of graphic knowledge. 1 Introduction <b>CASE</b> <b>tools</b> are currently considered as the prime initiators of attempts to formalize and standardize information systems development methods in a more detailed way. It is believed that <b>CASE</b> <b>tools</b> are [...] ...|$|R
40|$|In an {{on-going}} set {{of commercial}} off-the-shelf (COTS) tool integration experiments {{being conducted by}} the CASE Environments Project, we have integrated a set of <b>CASE</b> <b>tools</b> {{using a combination of}} data integration mechanisms (PCTE Object Management System (QMS) and UNIX file system) and control integration mechanisms (Broadcast Message Server (BMS) of HP SoftBench). One of the key issues addressed in our work {{is the extent to which}} the integration of <b>CASE</b> <b>tools</b> can be independent of particular integration framework technology products. This report describes a task to examine interoperability aspects of the control integration component of the integration framework. The major conclusion from our work is that it is possible to integrate <b>CASE</b> <b>tools</b> using a message-passing approach that is independent of the integration framework product used. This report describes the activities an organization must undertake to integrate <b>CASE</b> <b>tools</b> in order to ensure this interoperation of message-passing integration products. The report also includes a set of lessons learned concerning the experiments we carried out...|$|R
