0|214|Public
50|$|In <b>code</b> <b>conversion,</b> {{alphabetical}} order is not significant.|$|R
5000|$|Student Major Information ¡V Nationality <b>Code</b> <b>Conversion</b> Table ...|$|R
5000|$|In telecommunication, {{the term}} <b>code</b> <b>conversion</b> has the {{following}} meanings: ...|$|R
5000|$|Converters - {{allowing}} custom <b>code</b> <b>conversions</b> between {{database and}} object types.|$|R
40|$|This thesis {{discusses}} generalized Pseudo-Random Multi-Valued Sequence (PRMVS) encoding {{and corresponding}} PRMVS-to-natural <b>code</b> <b>conversion</b> algorithms. A hardware architecture implementing in real-time this generalized <b>code</b> <b>conversion</b> algorithm is implemented as a programmable Pseudo-Random DECoder (PRDEC) coprocessor. This coprocessor {{is intended to}} work in microprocessor-based embedded systems where {{it is seen as}} an 8 -bit memory mapped device by the system microprocessor. The coprocessor architecture is implemented and simulated using VHDL...|$|R
5000|$|Lín Jìnyì ( [...] / [...] ), editor. 1984. [...] Kanji denpō kōdō henkan hyō {{character}} telegraph <b>code</b> <b>conversion</b> table (In Japanese). Tokyo: KDD Engineering & Consulting.|$|R
5000|$|Where {{the host}} {{language}} and {{data manipulation language}} have different type systems, <b>code</b> <b>conversion</b> operates outside of the OO type system, and hence has a higher chance of having undetected errors.|$|R
5000|$|The {{following}} table shows Windows-1252. Each {{character is}} shown with its Unicode equivalent and its decimal <b>code.</b> <b>Conversions</b> to Unicode {{are based on}} the Unicode.org mapping of Windows-1252 with [...] "best fit".|$|R
50|$|Nigeria allows {{freedom of}} {{religion}}. Islam and Christianity {{are the two}} major religions. In 12 states of Nigeria which have a sharia-based penal <b>code,</b> <b>conversion</b> from Islam to another religion is illegal and often a capital offense.|$|R
5000|$|Grooscript {{converts}} Groovy code to JavaScript code. Although Grooscript {{has some}} limitations compared to Apache Groovy, it can use domain classes {{in both the}} server and the client. Plugin support for Grails version 3.0 is provided, as well as online <b>code</b> <b>conversions.</b>|$|R
50|$|The BETI was {{designed}} as a low cost serial terminal operating at speeds of up to 4800 baud (1200 baud without handshaking). The BETI also provides optional automatic <b>code</b> <b>conversion</b> to and from the baudot 5 level code used for RTTY and TELEX applications.|$|R
40|$|Abstract – In this {{technological}} {{world development}} {{in the field of}} nanometer technology leads to minimize the power consumption of logic circuits. Reversible logic design {{has been one of the}} promising technologies gaining greater interest due to less dissipation of heat and low power consumption. In digital systems <b>code</b> <b>conversion</b> is a widely used process for reasons such as enhancing security of data, reducing the complexity of arithmetic operations and thereby reducing the hardware required, dropping the level of switching activity leading to more speed of operation and power saving etc. This paper proposes novel Reversible logic design for <b>code</b> <b>conversion</b> such as Binary to Gray code, Gray to Binary code, BCD to Excess 3 code, Excess 3 to BCD code...|$|R
30|$|The NAS also {{contains}} information on postal codes {{at time of}} registration and at time of the survey. Using the Statistics Canada Postal <b>Code</b> <b>Conversion</b> File Plus (PCCF+) and Labour Force Survey, individuals can be matched with their local unemployment rates (using economic region as the reference).|$|R
40|$|The {{paper has}} expatiated the mutual {{conversion}} between {{national and international}} standards (ISO/IEC 10646), and realized UNICODE operation based on MATLAB. It has made <b>code</b> <b>conversion</b> between national and international standards, {{in order to provide}} an effective method for further Tibetan small-character code processing based on MATLAB...|$|R
40|$|We study {{a number}} of natural {{language}} decipherment problems using unsupervised learning. These include letter substitution ciphers, character <b>code</b> <b>conversion,</b> phonetic decipherment, and word-based ciphers with relevance to machine translation. Straightforward unsupervised learning techniques most often fail on the first try, so we describe techniques for understanding errors and significantly increasing performance. ...|$|R
50|$|YUCCA is a Sequential to Parallel {{automatic}} <b>code</b> <b>conversion</b> tool {{developed by}} KPIT Technologies Ltd. Pune. It takes input as C source code {{which may have}} multiple source and header files. It gives output as transformed multi-threaded parallel code using pthreads functions and OpenMP constructs. The YUCCA tool does task and loop level parallelization.|$|R
40|$|Added "WorkingDirectory" {{configuration}} option. This {{allows users}} to work around a RunProcess bug in some Mathematica versions on Windows where RunProcess would fail in a directory with non-ASCII characters in its name. Exposed MaTeX`Developer`Texify, to allow users to customize the expression to TeX <b>code</b> <b>conversion.</b> See Neat Examples in the MaTeX symbol documentation page. Documentation improvements...|$|R
40|$|Here, the 7400 line of {{transistor}} to transistor logic (TTL) devices {{is emphasized}} almost exclusively where hardware is concerned. However, {{it should be}} pointed out that the logic theory contained herein applies to all hardware. Binary numbers, simplification of logic circuits, <b>code</b> <b>conversion</b> circuits, basic flip-flop theory, details about series 54 / 7400, and asynchronous circuits are discussed...|$|R
5000|$|In telecommunications, an {{interface}} standard {{is a standard}} that describes one or more functional characteristics (such as <b>code</b> <b>conversion,</b> line assignments, or protocol compliance) or physical characteristics (such as electrical, mechanical, or optical characteristics) necessary to allow the exchange of information between two or more (usually different) systems or pieces of equipment. Communications protocols are an example.|$|R
40|$|Abstract- This project {{deals with}} a cyclic {{convolution}} of high speed parallel architecture based on Fermat number transform (FNT). Cyclic convolution architectures are implemented for operands in diminished- 1 representation. The <b>code</b> <b>conversion</b> (CC) method is mandatory to convert normal binary numbers into their diminished- 1 representation. In this paper we discuss about the FNT (Fermat Number Transform) and IFNT (Inverse Fermat Number Transform) operations which are performed by CCWA (<b>Code</b> <b>Conversion</b> without Addition) & BOWA (Butterfly Operation without Addition). The convolution which is the point wise multiplication is implemented by modulo 2 n+ 1 partial product multipliers (MPPM) and these output partial products are the inputs to the IFNT and modulo 2 n+ 1 carry propagation additions are avoided in the FNT and the IFNT except in their final stages The reduction of modulo 2 n+ 1 carry propagation addition reduces the execution delay of the parallel architecture. The proposed one has better throughput performance and involves less hardware complexity than the existing cyclic convolution architecture...|$|R
40|$|Forty years ago, the PC- 1, {{parametron}} computer 1, {{was born}} at Professor Hidetosi Takahasi's Laboratory. The logical elements of the PC- 1 were parametrons, which supported majority logic. The memory system operated in a two frequency read/write scheme. The word selection mechanism applied error correcting code to decrease the number of elements. Most of the hardware technologies were created by Eiichi Goto. We studied the EDSAC computer precisely, however we developed our own architecture and programming system based upon our own philosophy. The machine instruction set was chosen to ease programming. The normal teletype on the market was employed, leaving the burden of <b>code</b> <b>conversion</b> tasks to software, which seemed to us to have had almost infinite abilities. However, the real memory capacity was indeed very small, which forced us to invent a clever way to implement things. In this paper, after introducing {{the functions of the}} initial input routine R 0, examples of (i) <b>code</b> <b>conversion</b> t [...] ...|$|R
40|$|In AgentSphere, in {{addition}} to weak migration, strong migration is also adopted as the move manner of the agent. Although the weak migration which saves the information in a heap area and moves to another JVM by using a serialization function is realizable in Java, the function which saves the information in a stack area and program counter is not supported. Therefore, {{it is necessary to}} implement the function to save these two important information by a certain means. In the conventional AgentSphere, although strong migration of a single thread agent was implemented using the method of source <b>code</b> <b>conversion,</b> it was not implemented that the multithreaded agents move all together by a strong migration manner. Moreover, reducing the source <b>code</b> <b>conversion</b> overhead as much as possible was required. So, in this paper, {{in order to reduce the}} conversion overhead and to implement the strong migration of multithreaded agents, a new strong migration manner which used Javaflow is proposed...|$|R
50|$|As {{platforms}} and operating systems proliferated {{in the early}} 1980s, the company {{found it difficult to}} port the assembly language-based dBase to target systems. This led to a re-write of the platform in the C programming language, using automated <b>code</b> <b>conversion</b> tools. The resulting code worked, but was essentially undocumented and inhuman in syntax, a problem that would prove to be serious in the future.|$|R
40|$|Newnes Radio and Electronics Engineer's Pocket Book, Fifteenth Edition {{provides}} reference of {{the information}} relevant in radio and electronics engineering. The book presents tables, illustrations, and diagrams of various data used in radio and electronics engineering. The coverage of the text includes abbreviations and symbols, electrical equations, and <b>code</b> <b>conversions.</b> The text will be useful to engineers, technicians, and other professionals who require a reference about the different aspects of radio and electronics...|$|R
40|$|This paper {{describes}} {{an experiment in}} learning computer graphics algorithms through parallelizing three C code examples: Ray Tracing, Voxel Visualization, and Image Warping on PlayStation 3 (PS 3). An implementation of geometry subdivision of data for PS 3, which is a physically distributed memory machine, provides, for example, display of a 120 × 120 × 120 voxel slab at 30 frames per second. We notice that all the <b>code</b> <b>conversions</b> were done by novices without Cell programming experience in a quite short time...|$|R
40|$|<b>Code</b> <b>conversion</b> {{tools in}} Reverse Engineering {{perpetuate}} the legacy code problem; the new code {{does not contain}} any new understanding of what is occurring in the system. In attempting to aid system comprehension, current research focuses on extracting a model or representation of the system from the code. From this model, reverse engineers try to form {{a picture of the}} original design. Our approach hopes to aid the reverse engineer, in moving from model to design by presenting a concise and useful graphical representation of the model...|$|R
40|$|International audienceOur aim in {{this paper}} is to analyse the evolvability of diverse <b>coding</b> <b>conversion</b> {{operators}} in an instance of the states based evolutionary algorithm (SEA). Since the representation of solutions or the selection of the best encoding during the optimization process has been proved to be very important for the efficiency of evolutionary algorithms (EAs), we will discuss a strategy of coupling more than one representation and different procedures of <b>conversion</b> from one <b>coding</b> to another during the search. Elsewhere, some EAs try to use multiple representations (SM-GA, SEA, etc.) in intention to benefit from the characteristics of each of them. In spite of those results, this paper shows that the change of the representation is also a crucial approach to take into consideration while attempting to increase the performances of such EAs. As a demonstrative example, we use a two states SEA (2 -SEA) which has two identical search spaces but different <b>coding</b> <b>conversion</b> operators. The results show that the way of changing from one coding to another and not only the choice of the best representation nor the representation itself is very advantageous and {{must be taken into account}} in order to well-desing and improve EAs execution...|$|R
50|$|Data rake-offs are {{provided}} for potentiometer, synchro, and digital information in allthree coordinates. The azimuth and elevation digital data {{is derived from}} optical-typeanalog-to-digital encoders. Two geared coders with ambiguity resolution are used foreach parameter. The data for each angle is a Gray code 17-bit word in serial form.The overlapping ambiguity bits are removed, and the data is transformed from cyclicGray code to straight binary before recording for transmission to the computer. Therange servo presents a 20-bit straight binary word in serial form after ambiguityresolution and <b>code</b> <b>conversion.</b> The same type optical encoders are used.|$|R
40|$|Abstract {{copyright}} UK Data Service {{and data}} collection copyright owner. The aim of this survey was to collect detailed information on women and men's working time behaviour and preferences in 1989. Information on labour market circumstances, household characteristics and spouse's labour market behaviour were collected for a sample of employed men and women aged 20 - 55 years. Main Topics : Working time behaviour, remuneration and preferences. Standard Measures Occupational data coded to SOC, RG, IEST, Hope-Goldthorpe using Ken Prady's <b>coding</b> <b>conversion</b> matrix. General health question scale adopted from GHS...|$|R
40|$|An {{experimental}} {{investigation of}} metrological characteristics of designed Universal Sensors and Transducers Interface (USTI-MOB) integrated circuit working in duty-cycle and duty-off factor measuring modes {{is described in}} the article. The USTI-MOB {{is based on the}} novel patented methods for duty-cycle – to – digital conversion. Experiments have confirmed the high metrological performance at low power consumption (0. 35 mA current consumption at Vcc = 1. 8 V). So, the relative error of duty-cycle – to – <b>code</b> <b>conversion</b> is changed from ± 0. 08 to ± 1. 00...|$|R
40|$|The Code Converter/Clock Regenerator (CCCR) {{provides}} a low-cost alternative to high-performance Pulse Code Modulation (PCM) bit synchronizers in environments {{with a large}} Signal-to-Noise Ratio (SNR). In many applications, the CCCR {{can be used in}} place of PCM bit synchronizers at about one fifth the cost. The CCCR operates at rates from 10 bps to 2. 5 Mbps and performs PCM <b>code</b> <b>conversion</b> and clock regeneration. The CCCR has been integrated into a stand-alone system configurable from one to six channels and has also been designed for use in VMEbus compatible systems...|$|R
50|$|In most languages, {{the word}} {{coercion}} {{is used to}} denote an implicit conversion, either during compilation or during run time. For example, in an expression mixing integer and floating point numbers (like 5 + 0.1), the compiler will automatically convert integer representation into floating point representation so fractions are not lost. Explicit type conversions are either indicated by writing additional code (e.g. adding type identifiers or calling built-in routines) or by <b>coding</b> <b>conversion</b> routines for the compiler to use when it otherwise would halt with a type mismatch.|$|R
5000|$|... {{implicit}} narrowing conversions - requiring all conversions to narrower types (e.g. from Long to Integer, Object to String, Control to TextBox) be {{explicit in}} <b>code</b> using <b>conversion</b> operators (e.g. CInt, DirectCast, CType).|$|R
40|$|International audienceWith the {{extensive}} application of network devices and the rapid development of embedded technology, network management of embedded devices becomes increasingly complicated. SNMP management {{is the most}} widely used network management system(NMS). Most of the network components used in enterprise network have built-in network agents that can respond to an SNMP network management system. By analyzing the SNMP (Simple Network Management Protocol) and base on NET-SNMP development kit, discuss the construction of MIB modules and <b>code</b> <b>conversion</b> and complete embedded SNMP Agent extension. Through network management tools to verify the SNMP agent on the network management functions of the embedded device...|$|R
30|$|This {{paper offers}} a more {{comprehensive}} look at apprenticeship completion behaviour using the best available data for the task: the 2007 National Apprenticeship Survey (NAS). These data allow us to address the correlates of completion behaviour of Canadians who were registered in apprenticeships {{at some point in}} the 2002 - 2004 period. Using the postal codes in the NAS as well as the Postal <b>Code</b> <b>Conversion</b> File Plus (PCCF+) utility enables the linkage of individuals’ records to the regional unemployment rate in the Labour Force Survey (LFS) and thus expand the analysis to address the importance of the unemployment rate to the persistence choice of individuals.|$|R
5000|$|The two {{products}} have {{significant differences in}} API. OS/2 was announced when Windows 2.0 was near completion, and the Windows API already defined. However, IBM requested that this API be significantly changed for OS/2. Therefore, issues surrounding application compatibility appeared immediately. OS/2 designers hoped for source <b>code</b> <b>conversion</b> tools, allowing complete migration of Windows application source code to OS/2 at some point. However, OS/2 1.x did not gain enough momentum to allow vendors to avoid developing for both OS/2 and Windows in parallel. IBM's involvement was much more successful in redefining Windows' visual appearance after the 1.0 release, giving it what is today perceived as the [...] "Windows 3.0 look".|$|R
