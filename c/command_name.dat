43|571|Public
2500|$|Apache Subversion (often {{abbreviated}} SVN, {{after its}} <b>command</b> <b>name</b> svn) is a software versioning and revision control system distributed as open source under the Apache License. Software developers use Subversion to maintain current and historical versions of files such as source code, web pages, and documentation. [...] Its {{goal is to}} be a mostly compatible successor to the widely used Concurrent Versions System (CVS).|$|E
50|$|When a <b>command</b> <b>name</b> is {{specified}} by the user or an exec call is made from a program, the system searches through , examining each directory {{from left to right}} in the list, looking for a filename that matches the <b>command</b> <b>name.</b> Once found, the program is executed as a child process of the command shell or program that issued the command.|$|E
50|$|The {{use of a}} {{filename}} extension in a <b>command</b> <b>name</b> appears occasionally, usually as {{a side effect of}} the command having been implemented as a script, e.g., for the Bourne shell or for Python, and the interpreter name being suffixed to the <b>command</b> <b>name,</b> a practice common on systems that rely on associations between {{filename extension}} and interpreter, but sharply deprecated in UNIX-derived systems like Linux and Apple's macOS, where the interpreter is normally specified as a header in the script ("shebang").|$|E
50|$|The {{functionality}} of the which {{command is}} similar to some implementations of the type command. POSIX specifies a <b>command</b> <b>named</b> <b>command</b> that also covers this functionality.|$|R
50|$|The command returns a non-zero exit status if <b>command</b> <b>names</b> {{cannot be}} found.|$|R
5000|$|Where applicable, type will {{display the}} <b>command</b> <b>name's</b> path. Possible <b>command</b> types are: ...|$|R
50|$|When {{a command}} {{is defined in}} {{multiple}} CDB sizes, {{the length of the}} CDB is given in parentheses after the <b>command</b> <b>name,</b> e.g., READ(6) and READ(10).|$|E
5000|$|First, TUTOR is a {{fixed format}} language. Each line {{begins with a}} <b>command</b> <b>name,</b> with the {{arguments}} to that command (the tag) following, after a tab.|$|E
5000|$|MAIL FROM - This {{variation}} {{comes directly}} from the SMTP MAIL FROM <b>command</b> <b>name.</b> Used in RFC 5321, RFC 3464, RFC 3834, RFC 4408, RFC 4409, RFC 4952.|$|E
5000|$|On some systems, {{modified}} versions {{or similar}} netcat utilities {{go by the}} <b>command</b> <b>name(s)</b> , , , , , , [...]|$|R
50|$|There exist many {{open source}} {{alternatives}} with different <b>command</b> <b>names</b> and options like dos2unix/unix2dos, d2u/u2d, fromdos/todos, endlines, flip.|$|R
5000|$|Indonesian Army has a Military Area <b>Command</b> <b>named</b> after [...] "Cenderawasih", as {{its local}} {{name for the}} bird.|$|R
5000|$|Norton Integrator, a menu {{system to}} tie the {{utilities}} together. Previously the utilities were accessed by typing the <b>command</b> <b>name</b> (usually a cryptic 2 character name such as FF) at the DOS prompt.|$|E
5000|$|<b>Command</b> <b>name</b> {{completion}} is {{the completion}} of the name of a command. In most shells, a command can be a program in the command path (usually [...] ), a builtin command, a function or alias.|$|E
50|$|To use {{a command}} the user types the <b>command</b> <b>name</b> while holding down the command key (the caps-lock key). Most command names are filled in automatically, so the user needs to type only until {{the full name}} appears.|$|E
5000|$|In Unix, type is {{a command}} that {{describes}} how its arguments would be interpreted if used as <b>command</b> <b>names.</b>|$|R
50|$|The <b>command</b> <b>names</b> are an {{interface}} metaphor {{based on}} the physical procedure used in manuscript editing to create a page layout.|$|R
5000|$|In 2010 The United States Army Human Resources <b>Command</b> <b>named</b> {{their new}} Center of Excellence at Fort Knox, Kentucky after Maude.|$|R
50|$|In 1989, NNPTC buried a {{time capsule}} on their grounds. On 22 September 2014, it was dug up to reveal its contents: an old NNPTC command ball cap, a <b>command</b> <b>name</b> tape, {{multiple}} newspapers from that day, and other unidentified items.|$|E
5000|$|If more {{detailed}} help is necessary than {{provided by a}} program's built-in internal help, many systems support a dedicated external [...] "" [...] command (or similar), which accepts a <b>command</b> <b>name</b> as calling parameter and will invoke an external help system.|$|E
50|$|One example {{would be}} to create a version of ls, the command to list files, giving it a shorter <b>command</b> <b>name</b> of l, which would be {{normally}} saved in a user's bin directory as /home/username/bin/l, and a default set of command options pre-supplied.|$|E
50|$|Unix <b>command</b> <b>names,</b> {{arguments}} and options are case-sensitive (except {{in a few}} examples, mainly where popular commands from other operating systems have been ported to Unix).|$|R
5000|$|The {{following}} commands {{are supported}} by CONFER. Many <b>command</b> <b>names</b> and modifiers may be abbreviated using initial sub-strings of the name. At the DO NEXT? prompt: ...|$|R
50|$|The HÃ¦rens Jegerkommando {{together}} with the Forsvarets Spesialkommando are under a <b>command</b> <b>named</b> FSK. The FSK itself is under direct command of the General Inspector of the Army.|$|R
5000|$|To {{minimize}} memorization and modes, {{the least}} frequently used commands in Gypsy {{appeared in a}} clickable menu. Each menu item could have parameters as in dialog boxes today. For example, the Scan (find) command took one parameter, which the user entered modelessly before clicking the <b>command</b> <b>name,</b> [...] "Scan".|$|E
5000|$|TSS {{provides}} users a command-line interface. [...] Users {{interact with the}} command system. The command format consists of [...] The <b>command</b> <b>name</b> is one to eight characters without imbedded blanks. The operands are optional depending on the command, and must {{be separated from the}} <b>command</b> <b>name</b> by at least one blank. Multiple operands should be separated by TAB characters or commas. Command lines can be continued by typing a hyphen ("-") {{at the end of the}} line to be continued and typing the continuation at the beginning of the next line. Multiple commands can be written on a line by separating them with semicolons (";"). Comments are allowed in command lines, separated from the command with a semicolon and included in single quotes ("'"). Operands can be either positional or keyword, with the format [...] "keyword=value".|$|E
50|$|Apache Subversion (often {{abbreviated}} SVN, {{after its}} <b>command</b> <b>name</b> svn) is a software versioning and revision control system distributed as open source under the Apache License. Software developers use Subversion to maintain current and historical versions of files such as source code, web pages, and documentation. Its {{goal is to}} be a mostly compatible successor to the widely used Concurrent Versions System (CVS).|$|E
40|$|Memorizing {{the user}} {{commands}} {{has been a}} problem since long. In this study we try to propose solutions to overcome two problems - the problem of selecting appropriate <b>commands</b> <b>names</b> during application development and the problem of memorizing these <b>command</b> <b>names.</b> The proposed solution includes a framework in which the applications can plug into, to get their application commands and corresponding tags in to the new command execution application. We also propose a mechanism where user can generate her own set of tags for a command and share those with peers...|$|R
25|$|Commands in the Control Language (CL) are promptable {{using the}} {{keyboard}} F4 function key, and most provide cursor-sensitive {{help to make}} specifying command parameters simpler. All <b>command</b> <b>names</b> and parameter keywords are based upon uniform standardized and mostly 3-letter abbreviations for verbs and subjects, making for easy rendering and interpretation by the application developer, as opposed to other operating systems with often cryptic or inconsistent <b>command</b> <b>names</b> for related functions or command parameter switches. For instance, the parameter keyword to apply a text description to any object to be created or changed is spelled the same way for all such commands.|$|R
5000|$|The code {{below is}} in the remote scripts format. If placed into an alias file, the <b>command</b> <b>names</b> should not be preceded by the word [...] "". Test Comments include the common [...] and [...]|$|R
50|$|The {{format of}} options varies widely between {{operating}} systems. In {{most cases the}} syntax is by convention rather than an operating system requirement; the entire command line is simply a string passed to a program, which can process {{it in any way}} the programmer wants, so long as the interpreter can tell where the <b>command</b> <b>name</b> ends and its arguments and options begin.|$|E
5000|$|In {{some other}} systems {{abbreviations}} are automatic, such as permitting {{enough of the}} first characters of a <b>command</b> <b>name</b> to uniquely identify it (such as [...] as an abbreviation for [...] ) while others may have some specific abbreviations pre-programmed (e.g. MD for MKDIR in COMMAND.COM) or user-defined via batch scripts and aliases (e.g. [...] in tcsh). See also: Tab completion.|$|E
50|$|On {{systems with}} {{interpreter}} directives, including virtually all versions of Unix, <b>command</b> <b>name</b> extensions have no special significance, and are by standard practice not used, since the primary method to set interpreters for scripts {{is to start}} them with a single line specifying the interpreter to use (which {{could be viewed as}} a degenerate resource fork). In these environments, including the extension in a <b>command</b> <b>name</b> unnecessarily exposes an implementation detail which puts all references to the commands from other programs at future risk if the implementation changes. For example, it would be perfectly normal for a shell scripts to be reimplemented in Python or Ruby, and later in C or C++, all of which would change the name of the command were extensions used. Without extensions, a program always has the same extension-less name, with only the interpreter directive and/or magic number changing, and references to the program from other programs remain valid.|$|E
5000|$|The Pleiku Campaign {{took place}} from 23 October to 26 November 1965. II Corps <b>Command</b> <b>named</b> it Pleime Campaign, with a {{slightly}} different starting date of 20 October instead of 23 consisted of three operations: ...|$|R
5000|$|More commonly, {{the desired}} <b>command</b> <b>names</b> are linked (using hard or {{symbolic}} links) to the BusyBox executable; BusyBox reads the zero element of argv {{to find the}} name by which it is called, and runs the appropriate command, for example just ...|$|R
5000|$|Most {{graphical}} {{user interfaces}} develop the metaphor of an [...] "electronic desktop", where data files are represented {{as if they were}} paper documents on a desk, and application programs similarly have graphical representations instead of being invoked by <b>command</b> <b>names.</b>|$|R
