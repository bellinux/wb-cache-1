0|2137|Public
5000|$|A {{field is}} {{a string of}} bits that encodes a number, <b>character</b> or other <b>data</b> <b>entity.</b> Instances of a Field {{subclass}} are encapsulated by the operations that can be performed by its class; for example, arithmetic operations on integer fields.|$|R
5000|$|A logical ER model {{does not}} require a {{conceptual}} ER model, especially if the scope of the logical ER model includes only the development of a distinct information system. The logical ER model contains more detail than the conceptual ER model. In addition to master <b>data</b> <b>entities,</b> operational and transactional <b>data</b> <b>entities</b> are now defined. The details of each <b>data</b> <b>entity</b> are developed and the relationships between these <b>data</b> <b>entities</b> are established. The logical ER model is however developed independently of the specific database management system into which it can be implemented.|$|R
50|$|<b>Data</b> <b>entity</b> {{types are}} logical data {{structures}} that contains information meaningful to the user. In MarkII method {{there is only}} one type of <b>data</b> <b>entity</b> types - Objects. Objects must be correctly identified so they can be counted.|$|R
30|$|<b>Data</b> <b>entities</b> {{associated}} with Trade items.|$|R
30|$|Maintaining <b>data</b> <b>entities</b> {{associated}} with a trade item.|$|R
50|$|Entity Services—centralize simple {{business}} rules for single <b>data</b> <b>entities.</b>|$|R
30|$|<b>Data</b> <b>entities</b> {{which are}} {{associated}} with Trade of the item.|$|R
5000|$|Supported Attributes: The {{value of}} an r-card's resource-udi claim is an Entity UDI (URI) that [...] "points to" [...] a <b>data</b> <b>entity</b> (representing a person, organization, or other object). The set of {{attributes}} of this <b>data</b> <b>entity</b> is distinct from (though usually a superset of) the [...] "supported claims" [...] mentioned above.|$|R
50|$|ADVISE will {{possess the}} ability to store one {{quadrillion}} <b>data</b> <b>entities.</b>|$|R
30|$|The Components (Generally Relations) {{that are}} hosting and {{managing}} those <b>data</b> <b>entities.</b>|$|R
30|$|Reading and {{updating}} of remotely hosted <b>data</b> <b>entities</b> {{associated with}} a trade item.|$|R
5000|$|... to create, delete {{and modify}} {{application}} <b>data</b> (<b>entity</b> instance, attribute values, aggregates and their members) ...|$|R
50|$|The data view {{starts with}} the data classes which can be {{decomposed}} into data subjects which can be further decomposed into <b>data</b> <b>entities.</b> The basic <b>data</b> model type which is most commonly used is called merda (master entity relationship diagrams assessment, see entity-relationship model). The Class, subject and entity forms a hierarchical view of data. Enterprises may have millions of instances of <b>data</b> <b>entities.</b>|$|R
5000|$|Session Services—centralize complex {{business}} rules affecting multiple <b>data</b> <b>entities,</b> such as task-specific behavior, transactions, and referential integrity.|$|R
5000|$|... #Subtitle level 3: Count the Input Data Element Types, the <b>Data</b> <b>entity</b> Types Referenced, and the Output Data Element Types ...|$|R
50|$|Data version {{transparency}} {{implies that}} data should be communicated in version transparent ways between components. This requires that these {{data can be}} changed (e.g., the mere addition of a field that is not currently used), without {{having an impact on}} the components and their interfaces. The theorem expresses the need for the encapsulation of <b>data</b> <b>entities,</b> in order to wrap the various versions of the <b>data</b> <b>entity</b> and to obtain data version transparency.|$|R
3000|$|... [DE] {{represents}} a read operation of NST; meaning that NST reads a <b>data</b> <b>entity,</b> DE, from a NoSQL database. OP [...]...|$|R
40|$|International audienceA {{distributed}} system like grid {{can be viewed}} as hypothetical infinite storage system for storing large <b>data</b> <b>entities.</b> Frequently these large <b>data</b> <b>entities</b> can not be stored in one unique location. In this paper we propose a temporal storage space managed as a collaborative cache system where clients have a perception of this space as an unlimited temporal storage capacity. They use the temporal storage space to share and to reuse large <b>data</b> <b>entities</b> in a distributed way. Temporal storage space is composed of a set of autonomous caches that work cooperatively with individual caches are generic cache services deployed inside organizations and a specialized service to coordinate global operations that facilitate the cooperation between caches. Implementation issues of a prototype in Globus Toolkit 4 are discussed...|$|R
50|$|The term CDATA, meaning <b>character</b> <b>data,</b> is {{used for}} distinct, but related, {{purposes}} in the markup languages SGML and XML. The term indicates that a certain portion of the document is general <b>character</b> <b>data,</b> rather than non-character <b>data</b> or <b>character</b> <b>data</b> with a more specific, limited structure.|$|R
5000|$|Structured {{analysis}} {{breaks down}} a software {{system from the}} system context level to system functions and <b>data</b> <b>entities</b> as described by Tom DeMarco.|$|R
3000|$|... [DE] {{represents}} a write operation of NST; meaning that NST writes (updates) a <b>data</b> <b>entity,</b> DE, to a NoSQL database. Such operations (OP [...]...|$|R
40|$|This paper {{presents}} FPE (Formatpreserving Encryption) for <b>character</b> <b>data</b> in both fixed-width and variable-width encoding. Previous researches only studied FPE for fixed-width <b>character</b> <b>data.</b> In this paper, FPE for <b>character</b> <b>data</b> is categorized into NPE (Number-preserving Encryption) and LPE (Length-preserving Encryption). The schemes {{related to}} NPE and LPE are proposed to encrypt fixed-width and variable-width <b>character</b> <b>data,</b> respectively. Furthermore, the paper provides a general solution for both data types. The security {{and efficiency of}} these schemes are analyzed and verified.    ...|$|R
50|$|In 2002/3, in its Enterprise Edition, TOGAF 8 shifted {{focus from}} the {{technology}} architecture layer {{to the higher}} business, data and application layers. It introduced structured analysis, after Information Engineering, which features, for example, mappings of organization units to business functions and <b>data</b> <b>entities</b> to business functions. Today, business functions are often called business capabilities. And many enterprise architects regard their business function/capability hierarchy/map as the fundamental Enterprise Architecture artifact. They relate <b>data</b> <b>entities,</b> use cases, applications and technologies to the functions/capabilities.|$|R
40|$|Similarity {{indexing}} using Spatial Access Methods (SAMs) like e. g., R-trees, {{assumes that}} each <b>data</b> <b>entity</b> (or query) {{is represented by}} exactly one multidimensional point. However, for several applications, including indexing and retrieval of multimedia data like onedimensional signals and images, it is required that each <b>data</b> <b>entity</b> is represented by multiple points in a multidimensional space. This work extends the existing framework of indexing using SAMs to handle such <b>data</b> <b>entities</b> and has many desirable properties: For example, it provides index support for the two most common types of similarity queries, namely range and nearest neighbor (NN) queries, it returns exactly the same answers with the sequential scan method (only much faster) and, it works with any SAM and any data type. The effectiveness of the proposed approach is demonstrated using images with multiple regions. ...|$|R
40|$|Although hashing {{techniques}} have been popular {{for the large}} scale similarity search problem, most of the existing methods for designing optimal hash functions focus on homogeneous similarity assessment, i. e., the <b>data</b> <b>entities</b> to be indexed are of the same type. Realizing that heterogeneous entities and relationships are also ubiquitous {{in the real world}} ap-plications, there is an emerging need to retrieve and search similar or relevant <b>data</b> <b>entities</b> from multiple heterogeneous domains, e. g., recommending relevant posts and images to a certain Facebook user. In this paper, we address the problem of “comparing apples to oranges ” under the large s-cale setting. Specifically, we propose a novel Relation-aware Heterogeneous Hashing (RaHH), which provides a general framework for generating hash codes of <b>data</b> <b>entities</b> sit-ting in multiple heterogeneous domains. Unlike some ex-isting hashing methods that map heterogeneous data in a common Hamming space, the RaHH approach constructs a Hamming space for each type of <b>data</b> <b>entities,</b> and learns op-timal mappings between them simultaneously. This makes the learned hash codes flexibly cope with the characteristics of different data domains. Moreover, the RaHH framework encodes both homogeneous and heterogeneous relationships between the <b>data</b> <b>entities</b> to design hash functions with im-proved accuracy. To validate the proposed RaHH method, we conduct extensive evaluations on two large datasets; one is crawled from a popular social media sites, Tencent Wei-bo, and the other is an open dataset of Flickr(NUS-WIDE). The experimental results clearly demonstrate that the RaH-H outperforms several state-of-the-art hashing methods with significant performance gains...|$|R
50|$|Data {{architecture}} {{should be}} defined in the planning phase of {{the design of a}} new data processing and storage system. The major types and sources of data necessary to support an enterprise should be identified {{in a manner that is}} complete, consistent, and understandable. The primary requirement at this stage is to define all of the relevant <b>data</b> <b>entities,</b> not to specify computer hardware items. A <b>data</b> <b>entity</b> is any real or abstracted thing about which an organization or individual wishes to store data.|$|R
5000|$|<b>Data</b> <b>entities</b> are {{the items}} that {{comprise}} the information processed in action <b>entities.</b> The <b>data</b> is arranged into structures known as sorts. Sorts are sets of mathematical objects, include operations that can be performed on those objects, and are defined according to algebraic criteria. These structures allow access to each individual <b>entity.</b> Examples of <b>data</b> <b>entities</b> can include concrete elements like maps, lists, sets, strings, characters, numbers, and truth values, more abstract elements used solely {{for the purpose of}} some computational operation, namely data access, like agents, cells corresponding to memory locations, and tokens, or elements like contracts and messages that are a composite of data components. An abstraction is a <b>data</b> <b>entity</b> that encapsulates an action entity, in which case enacting the abstraction results in the action being performed. This is the technique by which action semantics represents the declaring and invoking of subprograms.|$|R
50|$|The basic graphic {{notation}} {{elements of}} DSDs are boxes which represent entities.The arrow symbol represents relationships. Data structure diagrams are most useful for documenting complex <b>data</b> <b>entities.</b>|$|R
40|$|Overview {{of tasks}} {{discussed}} in presentation: Examining and ammending BADC <b>Data</b> <b>Entities</b> {{to bring in}} line with the requirements of the NERC Science Information Strategy Information (SIS) project. Reviewing BADC <b>Data</b> <b>Entities</b> in more depth and modifying associated data (i. e. Deployments, Data Production Tools, Observation Stations, and Activities.) Writing and recording a webguide to explain MOLES 2 elements. A comparison of the similarities between MOLES 2 and MOLES 3 is included in these presentation slides. Presentation took place on the 27 th of September 2012, at RAL Space, Oxfordshire...|$|R
40|$|Abstract. When {{building}} process-intensive web applications, developers typically spend considerable {{effort on}} the exchange of specific <b>data</b> <b>entities</b> between specific web pages and operations under specific conditions, as called for by business requirements. Since the WWW infrastructure provides only very coarse data exchange mechanisms, we introduce a notation {{for the design of}} fine-grained conditional data flows between user interface components. These specifications can be interpreted by a data flow controller that automatically provides the <b>data</b> <b>entities</b> to the specified receivers at run-time, relieving developers of the need to implement user interface data flows manually. ...|$|R
50|$|Languages {{that have}} a {{dedicated}} <b>character</b> <b>data</b> type generally include character literals; these include C, C++, Java, and Visual Basic, but not Python or PHP. Languages without <b>character</b> <b>data</b> types will typically use strings of length 1 to serve the same purpose a <b>character</b> <b>data</b> type would fulfil. This simplifies the implementation and basic usage of a language but also introduces new scope for programming errors.|$|R
50|$|Not {{addressed}} by the current specification is {{what to do with}} encoded <b>character</b> <b>data.</b> For example, in computers, <b>character</b> <b>data</b> manifests in encoded form, at some level, and thus could be treated as either binary or <b>character</b> <b>data</b> when being mapped to URI characters. Presumably, {{it is up to the}} URI scheme specifications to account for this possibility and require one or the other, but in practice, few, if any, actually do.|$|R
40|$|trees and {{associated}} <b>character</b> <b>data</b> matrices. |$|R
50|$|A Provisioning Service Object (PSO), {{sometimes}} simply {{called an}} object, represents a <b>data</b> <b>entity</b> or an information object on a target. For example, a provider would represent {{as an object}} each account that the provider manages.|$|R
40|$|Abstract. There {{are a lot}} of very {{important}} data in database, which need to be protected from attacking. Cryptographic support is an important mechanism of securing them. People, however, must tradeoff performance to ensure the security because the operation of encryption and decryption greatly degrades query performance. To solve such a problem, an approach is proposed that can implement SQL query on the encrypted <b>character</b> <b>data.</b> When the <b>character</b> <b>data</b> are stored in the form of cipher, we not only store the encrypted <b>character</b> <b>data,</b> but also turn the <b>character</b> <b>data</b> into the characteristic values via a characteristic function, and store them in an additional field. When querying the encrypted <b>character</b> <b>data,</b> we apply the principle of two-phase query. Firstly, we implement a coarse query over the encrypted data in order to filter the records not related to the querying conditions. Secondly, we decrypt the rest records and implement a refined query over them again. Results of a set of experiments validate the functionality and usability of our approach. Key words: database security, characteristic values, coarse query, refined query 1. Introduction. Traditionall...|$|R
50|$|In {{addition}} to basic identity attribute values like strings and numbers, the <b>data</b> <b>entity</b> {{referred to by}} an r-card can have complex attribute values consisting of aggregates of basic attribute types as well as UDI links to other entities.|$|R
