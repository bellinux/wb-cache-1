5|701|Public
2500|$|In {{operation}} MASK (19341937), an MI5 counterspy infiltrated the party, and {{was for a}} time Pollitt's {{assistant and}} a clandestine radio operator. [...] This allowed John Tiltman and his colleagues to crack the code and decrypt, for a few years, messages between Moscow {{and some of its}} foreign parties, such as the CPGB. [...] They revealed the Comintern's close supervision of the Communist Party and Pollitt. Among other things, Pollitt was instructed to refute news leaks about a Stalinist purge. [...] Some messages were addressed to code names, while others were signed by Pollitt himself. In his transmissions to Moscow, Pollitt regularly pleaded for more funding from the Soviet Union. One 1936 <b>coded</b> <b>instruction</b> advised Pollitt to publicise the plight of Ernst Thälmann, a German communist leader who had been arrested by the Nazis and who later died at Sachsenhausen concentration camp. Pollitt replied that he was 'having difficulties' getting English statesmen to make public declarations supporting Thälmann but that they promised they would speak privately with German officials in London. In one of the more amusing dispatches, Pollitt (1936) informed his Soviet contact about a recent visit to France to make campaign appearances for candidates from the French Communist Party. [...] "At great inconvenience went to Paris to speak in the election campaign". Pollitt went on to complain that he was [...] "kept sitting two days and comrades refused to allow me to speak. Such treatment as I received in Paris is a scandal".|$|E
5000|$|The [...] saw {{a return}} to form for Ferrari, with both Alonso and Massa quickest {{over the course of}} the race meeting. On the anniversary of his accident, Felipe Massa led most of the race before a message from the Ferrari pit {{appeared}} to be a <b>coded</b> <b>instruction</b> telling Massa to move over and let Alonso through, granting Alonso seven extra World Championship points for his ultimate win. Ferrari were fined US$100,000 for the use of team orders to deliberately alter the outcome of a race and faced further sanctions at a meeting of the FIA World Motor Sport Council in September where they face charges of bringing the sport into disrepute, though the hearing would ultimately acquit Ferrari on the grounds of a lack of evidence.|$|E
50|$|The Mark I and Mark II {{were not}} a stored-program {{computer}} - it read an instruction of the program {{one at a time}} from a tape and executed it (like the Mark I). This separation of data and instructions is known as the Harvard architecture. The Mark II had a peculiar programming method that was devised to ensure that the contents of a register were available when needed. The tape containing the program could encode only eight instructions, so what a particular instruction code meant depended on when it was executed. Each second was divided up into several periods, and a <b>coded</b> <b>instruction</b> could mean different things in different periods. An addition could be started in any of eight periods in the second, a multiplication could be started in any of four periods of the second, and a transfer of data could be started in any of twelve periods of the second. Although this system worked, it made the programming complicated, and it reduced the efficiency of the machine somewhat.|$|E
50|$|The drum memory held 1K of 40-bit words. The {{computer}} was programmed using binary machine <b>code</b> <b>instructions.</b> When programming the 1201, the machine <b>code</b> <b>instructions</b> were not sequential but were spaced {{to allow for}} the drum's rotation. This ensured the next instruction was passing under the drum's read heads just as the current instruction had been executed.|$|R
50|$|In the {{original}} Atlas Autocode for the Atlas computer, Atlas machine <b>code</b> <b>instructions</b> could be interpolated between the Atlas Autocode statements.|$|R
50|$|Prior to OPCS-4.7, and {{the move}} of {{maintenance}} responsibility to NHS Digital, the standards book {{was known as}} the Clinical <b>Coding</b> <b>Instruction</b> Manual.|$|R
50|$|Initially MikroSim was {{developed}} to be a processor simulation software to be widely available in educational areas. Since MikroSim operability starts {{on the basis of}} microcode development, defined as a sequence of micro instructions (microcoding) for a virtual control unit, the software’s intention is on first approach a microcode simulator with various levels of abstractions including the ability of CPU simulators and instruction set emulators. In the current software revision it is feasible for a microcode controlled virtual application to operate on own <b>coded</b> <b>instruction</b> sets. With MikroSim typical and well-known concepts in the area of computer engineering like computer architecture and instruction set architecture are non-specifically treated, which have been established {{since the early days of}} the information era and being still valid. In this fashion the simulation software gains a timeless, free didactical benefit without being restricted on special developments of the past and in the future. The detailed documentation and the bilingual application’s graphical user interface (GUI) in German and English, as well as the software’s upward compatibility given to some extent by Microsoft’s operating system Windows, are reasons for being a well-established, valuable e-learning tool in the field of computer engineering since 1992 for educational use.|$|E
5000|$|In {{operation}} MASK (1934 - 1937), an MI5 counterspy infiltrated the party, and {{was for a}} time Pollitt's {{assistant and}} a clandestine radio operator. This allowed John Tiltman and his colleagues to crack the code and decrypt, for a few years, messages between Moscow {{and some of its}} foreign parties, such as the CPGB. They revealed the Comintern's close supervision of the Communist Party and Pollitt. Among other things, Pollitt was instructed to refute news leaks about a Stalinist purge. Some messages were addressed to code names, while others were signed by Pollitt himself. In his transmissions to Moscow, Pollitt regularly pleaded for more funding from the Soviet Union. One 1936 <b>coded</b> <b>instruction</b> advised Pollitt to publicise the plight of Ernst Thälmann, a German communist leader who had been arrested by the Nazis and who later died at Sachsenhausen concentration camp. Pollitt replied that he was 'having difficulties' getting English statesmen to make public declarations supporting Thälmann but that they promised they would speak privately with German officials in London. In one of the more amusing dispatches, Pollitt (1936) informed his Soviet contact about a recent visit to France to make campaign appearances for candidates from the French Communist Party. [...] "At great inconvenience went to Paris to speak in the election campaign". Pollitt went on to complain that he was [...] "kept sitting two days and comrades refused to allow me to speak. Such treatment as I received in Paris is a scandal".|$|E
5000|$|... A form {{found in}} {{unstructured}} languages, mimicking a typical machine <b>code</b> <b>instruction,</b> would jump to (GOTO) a label or line number when the condition was met.|$|R
50|$|For IA-64 architecture, EPC (Enter Privileged <b>Code)</b> <b>instruction</b> is used. The {{first eight}} system call {{arguments}} are passed in registers, {{and the rest}} are passed on the stack.|$|R
50|$|The {{assembler}} accepts instruction mnemonics, data declarations and directives and constructs {{an object}} file containing information readily understandable by the CPU {{of the target}} processor, in particular <b>code</b> <b>instructions</b> <b>coded</b> in binary.|$|R
25|$|How {{much time}} is left? can be {{answered}} with <b>coded</b> <b>instructions</b> for the next move. For example, the response 5 minutes and 13 seconds could be a hint {{to play at the}} co-ordinates 5-13.|$|R
40|$|This work {{describes}} {{a method that}} makes the Java instruction as small as possible. The proposed method, called "nibble coding", compresses two instructions into one byte. The experiment is carried out to compare Java byte <b>code</b> <b>instruction</b> and a modified code with the nibble coding. The result shows the proposed scheme achieves a much smaller instruction bandwidth than the ordinary byte-code counterpart. Key-Words: <b>code</b> compression, <b>instruction</b> bandwidth, Java byte cod...|$|R
5000|$|The {{next logical}} phase is the {{disassembly}} of machine <b>code</b> <b>instructions</b> into a machine independent intermediate representation (IR). For example, the Pentium machine instruction mov eax, ebx+0x04might be translated to the IR eax := mebx+4; ...|$|R
5000|$|To {{monitor and}} execute the machine <b>code</b> <b>instructions</b> (but {{treated as an}} input stream) on the same {{hardware}} for test and debugging purposes, e.g. with memory protection (which protects against accidental or deliberate Buffer overflow).|$|R
2500|$|... "To assist virtualization, VT and Pacifica {{insert a}} new {{privilege}} level beneath Ring 0. Both add nine new machine <b>code</b> <b>instructions</b> that only work at [...] "Ring -1," [...] {{intended to be}} used by the hypervisor. [...] " ...|$|R
50|$|Run {{time is the}} {{execution}} phase, when the central processing unit executes the program's machine <b>code</b> <b>instructions.</b> Programs may run indefinitely. If execution terminates it will either be normal, expected behavior or an abnormality such as a crash.|$|R
5000|$|In either case, the {{modifications}} may {{be performed}} {{directly to the}} machine <b>code</b> <b>instructions</b> themselves, by overlaying new instructions over the existing ones (for example: altering a compare and branch to an unconditional branch or alternatively a 'NOP').|$|R
5000|$|The exact {{interpretation}} {{depends upon}} the use - while [...] "instructions" [...] is traditionally taken to mean machine <b>code</b> <b>instructions</b> for a physical CPU, in some contexts a file containing bytecode or scripting language instructions may also be considered executable.|$|R
5000|$|TXT records {{specify the}} machine <b>code</b> <b>instructions</b> and {{data to be}} placed at a {{specific}} address location in the module. Note that wherever a [...] "length" [...] must be specified for this record, the length value must include any continuations to this record.|$|R
5000|$|The {{algorithm}} typically {{corresponds to}} three machine <b>code</b> <b>instructions.</b> Since XOR is a commutative operation, X XOR Y {{can be replaced}} with Y XOR X {{in any of the}} lines. When coded in assembly language, this commutativity is often exercised in the second line: ...|$|R
5000|$|Radio {{transmitters}} operating remotely in unlicensed radio bands {{using two}} way real time communication to transmit <b>coded</b> <b>instructions</b> {{from the central}} to the circuit breakers in selected coordinates of the micro grids substations to maintain multiple power flow lines with automated control and digital metering.|$|R
40|$|The Euromanifesto <b>Coding</b> <b>Instructions</b> {{are used}} as {{handbook}} for the coding of all manifestos within The Euromanifestos Project in the 15 EU countries. It {{is based on the}} second edition of ""Manifesto Coding Instructions"" by Andrea Volkens of the WZB (Volkens 2002). In accordance with the intention of The Euromanifestos Project to strive for full comparability with the Comparative Manifesto Project, most coding rules have been adapted from the original handbook. The authors acknowledge critical comments by Hermann Schmitt, Tanja Binder and the expert coders on earlier drafts of the <b>coding</b> <b>instructions</b> and the underlying coding scheme as well as the coding sheets (see appendices to this paper). Since the coding has not been finished yet, there might be a revised edition of these instructions {{at the end of the}} project...|$|R
50|$|Intel SGX {{is a set}} of CPU <b>code</b> <b>instructions</b> from Intel {{that allows}} user-level code to {{allocate}} private regions of memory, called enclaves, that are protected from processes running at higher privilege levels. Intel designed SGX to be useful for implementing secure remote computation, secure browsing, and digital rights management (DRM).|$|R
50|$|Nurses {{were given}} strict dress <b>code</b> <b>instructions</b> before the opening, {{including}} no eye make-up {{and wearing a}} distinct shade of lipstick. Matron Erella Macauley was made the first director of nursing after opening the first nursing school in Blacktown in 1964. In its first year, nurses helped deliver 500 babies.|$|R
50|$|The status {{register}} is a hardware register that contains {{information about the}} state of the processor. Individual bits are implicitly or explicitly read and/or written by the machine <b>code</b> <b>instructions</b> executing on the processor. The {{status register}} lets an instruction take action contingent on the outcome of a previous instruction.|$|R
5000|$|A {{much more}} {{readable}} rendition of machine language, called assembly language, uses mnemonic codes {{to refer to}} machine <b>code</b> <b>instructions,</b> rather than using the instructions' numeric values directly. For example, on the Zilog Z80 processor, the machine code , which causes the CPU to decrement the [...] processor register, would be represented in assembly language as [...]|$|R
5000|$|True {{machine code}} is {{a stream of}} raw, usually binary, data. A {{programmer}} coding in [...] "machine code" [...] normally <b>codes</b> <b>instructions</b> and data in a more readable form such as decimal, octal, or hexadecimal which is translated to internal format by a program called a loader or toggled into the computer's memory from a front panel.|$|R
50|$|Enforce In-order Execution of I/O, or EIEIO, is {{a machine}} <b>code</b> <b>instruction</b> {{used on the}} PowerPC {{computer}} processor which prevents one memory or I/O operation from starting until the previous memory or I/O operation completed. This instruction is needed as I/O controllers on the system bus require that accesses follow a particular order, while the CPU reorders accesses to optimize memory bandwidth usage.|$|R
30|$|The {{independent}} variable selected was the test cases execution time, measured in milliseconds. Since the optimization perspective is the code execution time, running the test suite faster is the optimization criterion guiding the search. The treatment applied is {{the transformation of}} <b>code</b> <b>instructions</b> {{with the purpose of}} reducing (remove or transform) instructions, where it is expected that with fewer instructions the execution time is also smaller.|$|R
40|$|The {{software}} {{industry is a}} knowledge-intensive industry whose output is information, the <b>coded</b> <b>instructions</b> that guide the operations of a computer or a network of computers. Both the inputs {{and much of the}} output of this industry consist of intangibles, the prices of which contain considerable Schumpeterian rents. The rewards to innovators in the {{software industry}} of the 1980 s and 1990 s hav...|$|R
50|$|In some systems, {{notably the}} Java Virtual Machine, {{execution}} over {{a range of}} bytecode instructions can be provably reversed. This allows an adaptive optimizer to make risky assumptions about the code. In the above example, the optimizer may assume all transactions are checks and all account numbers are valid. When these assumptions prove incorrect, the adaptive optimizer can 'unwind' to a valid state and then interpret the byte <b>code</b> <b>instructions</b> correctly.|$|R
5000|$|The {{overhead}} in [...] "tight" [...] loops often {{consists of}} instructions to increment a pointer or index {{to the next}} element in an array (pointer arithmetic), as well as [...] "end of loop" [...] tests. If an optimizing compiler or assembler is able to pre-calculate offsets to each individually referenced array variable, these can be built into the machine <b>code</b> <b>instructions</b> directly, therefore requiring no additional arithmetic operations at run time.|$|R
5000|$|Smart Contracts are {{self-executing}} contractual states, {{stored on}} the blockchain. In brief an Automated Transaction is a [...] "Turing complete" [...] set of byte <b>code</b> <b>instructions</b> {{which will be}} executed by a byte code interpreter built into its host. An AT supporting host platform automatically supports various applications ranging from games of chance to automated crowdfunding and ensuring that [...] "long term savings" [...] are not lost forever.|$|R
40|$|First and 2 nd graders (N = 28 ?) {{receiving}} Title I services received 1 of 3 {{kinds of}} classroom reading programs: direct instruction in letter-sound correspondences practiced in decodable text (direct code); less direct instruction in systematic sound-spelling patterns embedded in connected text (embedded code); and implicit {{instruction in the}} alphabetic code while reading connected text (implicit code). Children receiving direct <b>code</b> <b>instruction</b> improved in word reading {{at a faster rate}} and had higher word-recognition skills than those receiving implicit <b>code</b> <b>instruction.</b> Effects of instructional group on word recognition were moderated by initial levels of phonological processing and were most apparent in children with poorer initial phonological processing skills. Group differences in reading comprehension paralleled those for word recognition but were less robust. Groups did not differ in spelling achievement or in vocabulary growth. Results show advantages for reading instructional programs that emphasize explicit instruction in the alphabetic principle for at-risk children. Learning to speak one's native language is a natural process in that explicit teaching is not required. Reading, in contrast, has been called an "unnatural act " (Gough & Hillinger...|$|R
5000|$|..... {{a symbol}} {{that should have}} been fed into a computer, along with a mass of other <b>coded</b> {{mathematical}} <b>instructions.</b>|$|R
