10|5522|Public
50|$|AOP is {{the desire}} to make {{statements}} of the form:In program P, whenever condition C arises, perform action A over a conventionally <b>coded</b> <b>program</b> P.|$|E
50|$|Two {{versions}} of the software were available for either Apple Macintosh, or Microsoft Windows. The audio portion had music and announcements from Club Kidsoft. The software portion of the CD-ROM was devoted to kid contributed content such as paintings and written stories.Software could be purchased by calling the company and paying {{with a credit card}} number. The service representative would then provide a unique serial number which could be typed into the launcher program. Once verified this would allow the full version of the purchased game to be installed. This action is provided through a specially <b>coded</b> <b>program</b> generated by the installer, which behaved like a disc image mounting utility - correct unlock codes allowed the utility to decrypt and mount the contents from the disc images as part of the CD-ROM's internal structure. It was a Control Panel program on Macintosh computers and a terminate-and-stay-resident driver on Windows computers.|$|E
40|$|Researchers {{have been}} trying to develop {{algorithms}} and code it using various programming languages to apply the recent methods to the problems in the engineering fields. Thus, it is very usual to check the accuracy of the coded algorithms with commercial ones. In this work, previously coded and tested algorithm based on Genetic Algorithms (GA) to solve the optimization problems in structural engineering is used to compare the solution obtained by MATLAB Genetic Tool. Various types of 2 D truss structures such as a roof or a tower are chosen as structural optimization problems. A program for structural analysis based on matrix displacement notation is also coded in MATLAB to calculate the response of the structures. The <b>coded</b> <b>program</b> consists of several distributed m files. The files are responsible of reading data, forming stiffness matrices, calculating element forces and deflection of nodes, and visualizing the deformed and undeformed structure. The <b>coded</b> <b>program</b> is also verified by commercial software called ANSYS. It was worth to say that coded Genetic Algorithms work very well...|$|E
40|$|Object <b>code</b> is a <b>program</b> of a {{processor}} language {{and can be}} directly executed on a machine. Program verification constructs a formal proof that a program correctly implements its specification. Verifying object code therefore ensures that the program {{which is to be}} executed on a machine is correct. However, the nature of processor languages makes it difficult to specify and reason about object <b>code</b> <b>programs</b> in a formal system of logic. Furthermore, a proof of the correctness of an object <b>code</b> <b>program</b> will often be too large to construct manually because of the size of object <b>code</b> <b>programs.</b> The presence of pointers and computed jumps in object <b>code</b> <b>programs</b> constrains the use of automated tools to simplify object code verification. This thesis develops an abstract language which is expressive enough to describe any sequential object <b>code</b> <b>program.</b> The abstract language supports the definition of program logics in which to specify and verify object <b>code</b> <b>programs.</b> This allows the object c [...] ...|$|R
40|$|Object <b>code</b> is a <b>program</b> of a {{processor}} language {{and can be}} directly executed on a machine. Program verification constructs a formal proof that a program correctly implements its specification. Verifying object code therefore ensures that the program {{which is to be}} executed on a machine is correct. However, the nature of processor languages makes it difficult to specify and reason about object <b>code</b> <b>programs</b> in a formal system of logic. Furthermore, a proof of the correctness of an object <b>code</b> <b>program</b> will often be too large to construct manually because of the size of object <b>code</b> <b>programs.</b> The presence of pointers and computed jumps in object <b>code</b> <b>programs</b> constrains the use of automated tools to simplify object code verification. This thesis develops an abstract language which is expressive enough to describe any sequential object <b>code</b> <b>program.</b> The abstract language supports the definition of program logics in which to specify and verify object <b>code</b> <b>programs.</b> This allows the object <b>code</b> <b>programs</b> of any processor language to be verified in a single system of logic. The abstract language is expressive enough that a single command is enough to describe the behaviour of any processor instruction. An object <b>code</b> <b>program</b> can therefore be translated to the abstract language by replacing each instruction with the equivalent command of the abstract language. This ensures that the use of the abstract language does not increase the difficulty of verifying an object <b>code</b> <b>program.</b> The verification of an object <b>code</b> <b>program</b> can be simplified by constructing an abstraction of the program and showing that the abstraction correctly implements the program specification. Methods for abstracting programs of the abstract language are developed which consider only the text of a program. These methods are based on describing a finite sequence of commands as a single, equivalent, command of the abstract language. This is used to define transformations which abstract a program by replacing groups of program commands with a single command. The abstraction of a program formed in this way can be verified in the same system of logic as the original program. Because the transformations consider only the program text, they are suitable for efficient mechanisation in an automated proof tool. By reducing the number of commands which must be considered, these methods can reduce the manual work needed to verify a program. The use of an abstract language allows object <b>code</b> <b>programs</b> to be specified and verified in a system of logic while the use of abstraction to simplify programs makes verification practical. As examples, object <b>code</b> <b>programs</b> for two different processors are modelled, abstracted and verified in terms of the abstract language. Features of processor languages and of object <b>code</b> <b>programs</b> which affect verification and abstraction are also summarised...|$|R
5000|$|Transana, QDA <b>Coding</b> <b>Program,</b> {{originally}} funded {{development by}} the TalkBank ...|$|R
40|$|Shows that, {{using the}} {{dynamical}} variable pointer, one can implement a natural link between BASIC variables and binary data, giving powerful features to BASIC's interpreter in data acquisition systems. A machine <b>coded</b> <b>program</b> written for data logging can {{get access to}} BASIC variables and directly transfers data to them without suffering the interpreter's slow speed. BASIC programs just use them as any other variables. A manifold user's call, giving control to different machine coded programs without having to change the user's address as usual. (0 refs) ...|$|E
40|$|Abstract: This paper {{presents}} an experimental and simulation study on {{application of a}} rotating desiccant dehumidification system under a tropical climate. The system was used to dehumidify the ventilation air before supplying to a space where a radiant cooling system was installed to provide thermal comfort. In the study, a computer program of the desiccant system was coded and {{used to evaluate the}} system performances. The experimental results show good agreement with the results from <b>coded</b> <b>program.</b> Using the program, the simulation results demonstrate that the desiccant system can reduce and handle the load of the ventilation air. The results also show that in order to remove the whole latent load, the minimum regeneration temperature is 80 Â°C...|$|E
40|$|A FORTRAN <b>coded</b> <b>program</b> {{has been}} {{developed}} for generating plotted output graphs on 8 - 1 / 2 by 11 -inch paper. The {{program is designed to}} be used by engineers, scientists, and non-programming personnel on any IBM 1130 system that includes a 1627 plotter. The program has been written to provide a fast and efficient method of displaying plotted data without having to generate any additions. Various output options are available to the program user for displaying data in four different types of formatted plots. These options include discrete linear, continuous, and histogram graphical outputs. The manual contains information about the use and operation of this program. A mathematical description of the least squares goodness of fit test is presented. A program listing is also included...|$|E
50|$|Lego Mindstorms' {{programming}} is command box <b>programming,</b> rather than <b>code</b> <b>programming.</b>|$|R
50|$|Since 2005 Inkscape {{has participated}} in the Google Summer of <b>Code</b> <b>program.</b>|$|R
5000|$|Data or {{executable}} <b>code</b> (<b>programs)</b> on the system, {{or other}} connected systems ...|$|R
40|$|For {{a global}} model of oceanic {{circulation}} the adjoint {{model has been}} constructed. The applied construction method {{is based on the}} differentiation of algorithms in the backward mode. Starting from the <b>coded</b> <b>program</b> of the model, the adjoint model is stepwise constructed by means of simple rules. In twin-experiments on the basis of simulated ocean surface measurements the amplitudes of the wind thrust pattern have been reconstructed. By introducing a smoothness condition the 2 #DELTA#t amplitude signals have been suppressed. Analysis of the fault covariance matrix of the results proved that the inverse problem is by far better determined after supressing the 2 #DELTA#t signal. In additional experiments, surface data sets derived from experimental measurements have been assimilated by variation of the wind thrust. It is demonstrated that dynamic interpolation between different kinds of data is made possible by means of the circulation model. (WEN) SIGLEAvailable from TIB Hannover: RR 9 (44) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDEGerman...|$|E
40|$|Abstract: Maintaining desired flight {{conditions}} in flight envelope {{for a long}} period is one of the primary control problems in aircraft flight control. Aircraft dynamics are in general nonlinear, time varying and uncertain. A control system (classical control systems) designed for a flight condition, may not provide the desired stability and performance characteristics in case of deviation from the equilibrium point. There are numerous studies regarding flight control in the literature. Most of the applications about the design of fuzzy flight control are in simulation level. Fuzzy logic controllers (FLCs) from their inception have demonstrated a vast range of applicability to processes where the plant transfer function is not defined but the control action can be described in terms of linguistic variables. Fuzzy controllers are also being used to improve the performance of a system where the plant transfer function is known. Most of the applications about the design of fuzzy flight control are in simulation level. In this study, the results of fuzzy PD and classical PD controller for the yaw damper system is compared and evaluated for a very large four engined passenger jet aircraft in a MATLAB <b>coded</b> <b>program.</b> ...|$|E
40|$|Power flow {{analysis}} {{is crucial for}} power system analysis and design. For these reasons, it is commonly necessary to have different inputs for the program to have different generated results for further analyses. As a basic program, power flow program may be employed by the other programs for evaluating the power system for the given input parameters. The program is therefore required to be interactive or has open connectivity with the other program or may be modified and included as a sub routine in the upper level program. It is unfortunate since the available package programs normally do not provide the aforementioned features. Due to this circumstance, power flow program is normally again constructed using the same programming language, which the main program may utilize. Beside additional effort that may be time consuming, the coded power flow program may {{still need to be}} verified to generate accurate results. This paper presents the program for power {{flow analysis}} using Newton Raphson method. The program is constructed using Matlab and the generated results are then confirmed with those generated by two standard package program (ETAP and HARMFLOW). The verification is necessary to assure that the generated results are accurate. Since the results of the coded programs may be used for further calculations, the precision of the results will significantly contribute the accuracy of the results of analysis and design. The <b>coded</b> <b>program</b> has been implemented in the IEEE 18 -bus standard system and has successfully generated results with acceptable accuracy...|$|E
50|$|Libav {{participated in}} the Google Summer of <b>Code</b> <b>program</b> in 2011 and 2012.|$|R
5000|$|... 2009 | Chat <b>Code</b> <b>Programming</b> for Tradewars Rising (PC) - Published by Sylien Games ...|$|R
5000|$|ADOMD.NET - Extension of ADO.NET[...]NET based and {{suitable}} for managed <b>code</b> <b>programs</b> on CLR platforms.|$|R
40|$|Developmental biology {{seeks to}} {{understand}} how organisms are constructed. Development {{is a set of}} very complex processes involving a <b>coded</b> <b>program</b> as the organismsâ genome. This genome describes how to build the organism, but not how the organism will look like. The zygote (the initial single cell), will eventually develop into a trillion cell organism. This extraordinary phenomenon has been an inspiration to the world of Computer Science and Artificial Life and has {{led to the creation of}} Artificial Embryogeny (AE). Artificial Embryogeny is a sub-discipline of evolutionary computation (EC) in which a phenotype undergoes a developmental phase. The number of AE systems currently being developed investigate mainly how principal biological processes and mechanisms can be exploited in the artificial world. One approach that utilize the phase of biological development in artificial systems is called Artificial Development (AD) where the genotype (genetic representation) contain a similar set of instructions - as in the biological organisms case - called generative program or developmental encoding. Therefore, the process of development comprise to actually execute those instructions and deal with the highly parallel interactions between them and the structure they create. On the other hand, nature uses the same fundamental machinery and almost the same genetic information to create vastly different creatures. A study reveals that about 99 % of mouse genomes have direct counterparts in humans with cats having 90 % of their homologous genes identical to humans. How is it possible for nature to use a vast majority of the same genetic representation in the DNA but still be able to develop such distant species? It was found that a common regulator gene can control the formation of many of the internal organs in both nematodes and vertebrates. Therefore, the very same gene can initiate the process of formation and define its outcome, for example, an intestine or a muscle cell. This thesis investigates how to design an Artificial Embryogeny by using the same genetic information to develop a class of computational architectures or different computational architectures. The result of this investigation has given rise to the Common Developmental Genomes (CDG). The computational architectures targeted, have a common characteristic of being sparsely-connected networks, with each node acting as a simple computational unit. Such computational architectures are cellular automata and boolean networks, artificial neural networks and cellular neural networks. The approach followed includes the following steps: a. investigate which architectures are suitable for development with such a model, b. describe a common developmental approach that can handle the targeted architectures, c. define how genetic information can be exploited by the developmental process, so as to develop these architectures and d. identify a suitable genome representation to ensure that different structures can be developed and achieved. The target architectures chosen throughout this thesis were cellular automata and random boolean networks. The reason for choosing those particular architectures is that they have similar structural and functional properties; in addition, random boolean networks are considered a generalization of cellular automata. Core work and design principles are given in Paper I. Though this paper it was able to show how genetic information can be represented and how targeted architectures can be integrated in the genotype. It is also shown how target architectures can be evolved and different structures achieved. Paper II studies the ability of CDG to evolve a simple financial market model in problems of varying complexity. CDG was shown to evolve better for some architecture sizes. In addition, CDGs evolvability were studied in case of limited resources (Paper III) with very promising results in certain cases. Paper IV focuses on how genetic operators affect evolution of CDG and studies their developmental dynamics under more complex and random environments. Paper V studies the ability of CDG to adapt when the target goal changes over evolutionary time. CDG were able to find very good solutions with rather simplified structure than anticipated. Paper VI focuses on how CDG exploit the underlying architectures during development and build final structure (network morphology). It was shown that during evolution, CDG exploit a larger number of nodes/cells and manage to maintain only a few neutral and static cells/nodes of the final structure...|$|E
5000|$|Code.org, {{to teach}} {{introductory}} programing {{to millions of}} students in their Hour of <b>Code</b> <b>program.</b>|$|R
40|$|Building Energy <b>Codes</b> <b>Program's</b> {{efforts are}} {{designed}} to result in increased stringency in national model energy codes, more rapid and broader adoption by states and localities of updated codes, and increased compliance and enforcement. Report estimates the historical impact of Building Energy <b>Codes</b> <b>Program</b> in terms of energy savings achieved that are based upon various editions of ANSI/ASHRAE/IESNA Standard 90. 1 (ASHRAE Standard 90. 1) ...|$|R
50|$|In April 2009 OpenImageIO was {{accepted}} into the Google Summer of <b>Code</b> <b>program</b> with four student slots.|$|R
5000|$|AMO - For AS 2005 {{and later}} versions[...]NET based and {{suitable}} for managed <b>code</b> <b>programs</b> on CLR platforms.|$|R
50|$|The RVCF is {{a member}} of the Ontario Land Trust Alliance and participates in Imagine Canada's Ethical <b>Code</b> <b>Program.</b>|$|R
50|$|Throughout the years, {{development}} has been funded through the Google Summer of <b>Code</b> <b>program,</b> donations and paid developer time.|$|R
5000|$|In the 2011 film Source Code, [...] "Beleaguered Castle" [...] is {{the call}} {{sign for the}} Source <b>Code</b> <b>program.</b>|$|R
50|$|Part {{of these}} {{developments}} were fostered by Google's Summer of <b>Code</b> <b>program,</b> in which the Blender Foundation has participated since 2005.|$|R
50|$|From 2005, OSAF {{participated in}} Google's Summer of <b>Code</b> <b>programs</b> by {{allowing}} several interns {{to work on}} OSAF projects during the summer.|$|R
50|$|In March 2007, SilverStripe was {{selected}} for the Google Summer of <b>Code</b> <b>program.</b> This program resulted in the 2.2 release of SilverStripe.|$|R
50|$|Applicants for the Full-time Immersive, Flex, and Summer of <b>Code</b> <b>programs</b> {{must pass}} a fundamental-skills evaluation, {{technical}} interview, and in-person interview prior program acceptance.|$|R
5000|$|To {{properly}} {{cooperate with}} non-ARC <b>code,</b> <b>programs</b> must use no method or declared property (unless explicitly choosing a different getter) {{that starts with}} [...]|$|R
40|$|This essay {{examines}} common coding practices and, on {{the basis}} that <b>program</b> <b>code</b> should be designed to avoid errors, argues for example that punctuation symbols should not be used in <b>program</b> <b>code</b> as though they were in literary text. Carrying the argument further, it is asserted that the computing profession should not talk about programming languages or about writing <b>programs,</b> but about <b>coding</b> schemes and <b>coding</b> <b>programs...</b>|$|R
30|$|NVivo is a {{qualitative}} and mixed methods <b>coding</b> <b>program</b> {{that enables the}} detailed analysis of data to reveal relationships and themes. Please visit [URL] for more information.|$|R
5000|$|In August 1983, New Order {{released}} their iconic [...] "Blue Monday", {{which was}} composed on prototype-level homebrew [...] "step-time" [...] binary <b>code</b> <b>programming,</b> morphologically a MIDI rendition.|$|R
50|$|A {{new project}} started in June 2014 is Made with <b>Code,</b> uses <b>coding</b> <b>programs</b> to allow girls to become {{interested}} {{in the idea of}} coding and develop more female programmers over time.|$|R
40|$|The {{purpose of}} the current study is to {{investigate}} the effectiveness of the Road to the <b>Code</b> phonological awareness <b>program</b> on the development of at-risk, kindergarten studentsâ phonological awareness and early reading skills. Six kindergarten students were identified as experiencing difficulty in the area of phonological awareness and were divided into three groups. This study included three phases: a baseline phase, during which no instruction in the Road to the <b>Code</b> <b>program</b> was provided; an intervention phase, during which the Road to the <b>Code</b> <b>program</b> was implemented; and a maintenance phase. Student reading progress was monitored using standardized measures from the Dynamic Indicators of Basic Literacy Skills (DIBELS) and experimenter-developed measures. Program effectiveness was evaluated through a multiple baseline across participants design. Results indicated that participation in the Road to the <b>Code</b> <b>program</b> resulted in an increase in the studentsâ phonological awareness skills and that these gains maintained following the completion of the program. Additionally, students demonstrated the ability to generalize learned skills to progress monitoring measures containing novel content. Limitations of the study, implications for practice, and future research directions will also be discussed. ...|$|R
