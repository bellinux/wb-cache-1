0|679|Public
5000|$|... "|AdditionalHeader" [...] - {{an array}} of {{required}} <b>stream</b> <b>decoding</b> informational pairs ...|$|R
5000|$|Realtime dual-video <b>stream</b> <b>decoding</b> for HD DVD/Blu-ray Picture-in-Picture (primary video @ 1080p, {{secondary}} video @ 480p) ...|$|R
40|$|This paper {{proposes a}} method for hierar-chical phrase-based <b>stream</b> <b>decoding.</b> A <b>stream</b> decoder is {{able to take a}} contin-uous stream of tokens as input, and seg-ments this stream into word {{sequences}} that are translated and output as a stream of tar-get word sequences. Phrase-based <b>stream</b> <b>decoding</b> techniques {{have been shown to be}} effective as a means of simultaneous in-terpretation. In this paper we transfer the essence of this idea into the framework of hierarchical machine translation. The hi-erarchical decoding framework organizes the decoding process into a chart; this structure is naturally suited to the process of <b>stream</b> <b>decoding,</b> leading to an efficient <b>stream</b> <b>decoding</b> algorithm that searches a restricted subspace containing only rel-evant hypotheses. Furthermore, the de-coder allows more explicit access to the word re-ordering process that is of crit-ical importance in decoding while inter-preting. The decoder was evaluated on TED talk data for English-Spanish and English-Chinese. Our results show that like the phrase-based stream decoder, the hierarchical is capable of approaching the performance of the underlying hierarchi-cal phrase-based machine translation de-coder, at useful levels of latency. In ad-dition the hierarchical approach appeared to be robust to the difficulties presented by the more challenging English-Chinese task. ...|$|R
3000|$|The Exhibitor {{component}} is coded as an interactive application, called the LibrasTV application. It will run on DTV receivers. The LibrasTV application extracts {{the data from}} the encoded LIBRAS <b>stream,</b> <b>decodes,</b> synchronizes and displays the LIBRAS window with the of the LIBRAS dictionary; [...]...|$|R
40|$|A channel {{encoding}} {{apparatus and}} method {{are provided in}} which part of the parity bits are set to erroneous bits, and full parity bits are created by correcting the erroneous bits using a channel <b>decoding</b> <b>apparatus</b> of a receiver in a communication system. In the channel encoding apparatus, in order to generate a <b>coded</b> bit <b>stream</b> by adding a parity bit stream to a message bit stream, a partial parity generator generates a partial parity bit stream {{as a part of}} the parity bit stream using the message bit stream, an erasure generator generates a bit stream having an erroneous value as the remaining part of the parity bit stream, and a decoder calculates the value of the parity bit stream by correcting the bit stream having the erroneous value using a parity-check matrix that determines the parity bit stream, the message bit stream, and the partial parity bit stream. Samsung Electronics Co., Ltd. Georgia Tech Research Corporatio...|$|R
50|$|The UVD saw {{a refresh}} {{with the release}} of the Radeon HD 4000 series products. The UVD 2 {{features}} full bitstream decoding of H.264/MPEG-4 AVC, VC-1, as well as iDCT level acceleration of MPEG2 video streams. Performance improvements allow dual video <b>stream</b> <b>decoding</b> and Picture-in-Picture mode. This makes UVD2 full BD-Live compliant.|$|R
40|$|This paper {{presents}} COBRA – {{a visible}} light communication (VLC) system for off-the-shelf smartphones. COBRA encodes information into specially designed 2 D color barcodes and streams them between screen and camera of s-martphones. Due to the directionality and short range of visible light, COBRA can preserve user privacy {{and security in}} many near field communication scenarios such as opportunistic data exchange between smartphones. We develop a new 2 D color barcode for COBRA that is optimized for streaming between small-size screen and low-speed camera of smartphones. COBRA adapts the size and layout of <b>code</b> blocks in <b>streamed</b> barcodes todeal with the significant image blur in mobile environments, and adopts new image processing techniques to achieve real-time barcode <b>stream</b> <b>decoding.</b> Our approach is evaluated through extensive experiments on Android smartphones...|$|R
40|$|The {{embedding}} distortion and {{the robustness}} to quality scalable image coding are two complementary watermarking requirements. This work proposes a novel concept of scalable image watermarking {{to generate a}} distortion-constrained robustness scalable watermarked image <b>code</b> <b>stream</b> which consists of hierarchically nested joint distortion-robustness coding atoms. The <b>code</b> <b>stream</b> is generated using a new wavelet domain binary tree guided rules-based blind watermarking algorithm. The <b>code</b> <b>stream</b> can be truncated at any distortion-robustness atom level to generate the watermarked image with the desired distortion-robustness requirements. A universal blind extractor is capable of extracting watermark data from the watermarked images. The simulation results verify the feasibility of the proposed concept, its applications and its improved robustness to quality scalable content adaptation (JPEG 2000) ...|$|R
40|$|As {{the result}} of the work done as a project for the Image Processing and Communications course in the winter of 1997, this report {{describes}} the implementation of a Java H. 263 video decoder. The Decoder allows H. 263 <b>coded</b> video <b>streams</b> to be <b>decoded</b> and displayed in a window on any Java enabled machine. It shows that it's possible to create a conferencing environment just using Java Enabled Browsers...|$|R
5000|$|... libsigrokdecode is {{a shared}} library written in C, which {{provides}} (<b>streaming)</b> protocol <b>decoding</b> functionality.|$|R
5000|$|Mill-Turn add-on—Includes full machine {{simulation}} and {{the ability}} to synchronize multiple <b>code</b> <b>streams</b> including pinch/balance turning. Requires Mill 3D or Mill Lathe, and a [...]machine file.|$|R
40|$|Methods {{and systems}} for {{streaming}} {{data in a}} network. Whether the network is experiencing high packet loss may be determined by a rate control module. If high packet loss is experienced, data is encoded into multiple streams by a coder using temporal domain partitioning. If high packet loss is not experienced, then data may is encoded by using frequency domain partitioning. Unequal error protection is applied {{to each of the}} streams so more important bit planes {{in a bit of a}} stream are provided with more error protection than less important bit planes. The streams are transmitted along, respectively, independent paths to a decoder. The <b>streams</b> are <b>decoded,</b> and errors in the <b>decoded</b> <b>streams</b> are corrected by using information from one or more of the other <b>decoded</b> <b>streams.</b> The <b>decoded</b> corrected <b>streams</b> are reconstructed into the data. Georgia Tech Research Corp...|$|R
40|$|Faults {{due to the}} {{incorrect}} functioning of the computation system, or the transmission errors of the internal data, could corrupt the output <b>code</b> <b>stream</b> of the Huffman encoder. In this paper, a fault detection method is proposed for the Huffman encoding system, which is implemented in the JPEG image compression standard [1]. The detection method {{based on the information}} input and the <b>code</b> <b>stream</b> output is described. The practical test results show the improvement of the reconstructed image quality. Index Terms: Huffman coding, zigzag sequence, runlength coding. I...|$|R
40|$|This is {{the first}} stable release for libfreenect 2, with support for: 	multiple Kinect v 2 devices on one machine! 	Windows, MacOSX, Linux (see README) 	retrieving depth and color camera <b>streams</b> 	depth <b>stream</b> <b>decoding</b> using OpenGL, OpenCL or CPU {{fallback}} 	registration of color depth images using factory calibration The listed authors are the maintainers of the main repository, for a full list of all contributors, please see the CONTRIB file in the archive...|$|R
5000|$|The {{technical}} {{strengths of}} FLAC {{compared to other}} lossless formats lie {{in its ability to}} be <b>streamed</b> and <b>decoded</b> quickly, independent of compression level.|$|R
5000|$|Similar to JPEG-1, JPEG 2000 defines both a {{file format}} and a <b>code</b> <b>stream.</b> Whereas JPEG 2000 entirely {{describes}} the image samples, JPEG-1 includes additional meta-information {{such as the}} resolution of the image or the color space that has been used to encode the image. JPEG 2000 images should — if stored as files — be boxed in the JPEG 2000 file format, where they get the [...]jp2 extension. The part-2 extension to JPEG 2000, i.e., ISO/IEC 15444-2, also enriches this file format by including mechanisms for animation or composition of several <b>code</b> <b>streams</b> into one single image. Images in this extended file-format use the [...]jpx extension.|$|R
40|$|Energy {{consumption}} {{is a key}} issue in modern microprocessor system design in general, and {{in the design of}} mobile computing devices more in particular. This paper introduces a novel approach to energy-efficient media <b>stream</b> <b>decoding</b> that is based on the notion of media stream similarity. The key idea is that platform-independent scenarios of similar decode complexity can be identified within and across media <b>streams.</b> A client <b>decoding</b> a media <b>stream</b> annotated with scenario information can then adjust its processor clock frequency and voltage level based on these scenarios for reduced energy consumption. Our evaluation done using the AVC decoder and 12 reference streams shows an average energy reduction of 46 % while missing less than 0. 2 % of the frame deadlines on average...|$|R
40|$|Abstract – This paper {{presents}} some experiments regarding applications {{development on}} high performance media processors included in Philips Nexperia Family. The PNX 1302 dedicated DVB-T kit used has some limitations. Our work has succeeded {{to overcome these}} limitations and to make possible a general-purpose use of this kit. For exemplification two typical applications, important both for multimedia and DVB, are analyzed: MPEG 2 video <b>stream</b> <b>decoding</b> and MP 3 audio decoding. These original implementations are compared (in speed, memory requirements and costs) with Philips Nexperia Library...|$|R
50|$|JPEG 2000 <b>code</b> <b>streams</b> are {{regions of}} {{interest}} that offer several mechanisms to support spatial random access or region of interest access at varying degrees of granularity. It is possible to store {{different parts of the}} same picture using different quality.|$|R
30|$|In {{the last}} years, the JPEG {{committee}} {{has worked on}} a systematic review and consolidation of all of its file formats, functionalities and <b>code</b> <b>stream</b> syntax. The goal was and is to define an overall framework — called JPEG Systems — for future and legacy standards to ensure interoperability and functionality exchange between all JPEG family standards. As a first result, the principles for the system layer structure of JPEG standards are now defined in part 1 of JPEG Systems — ‘packaging of information using <b>code</b> <b>streams</b> and file formats’ (ISO/IEC TR 19566 - 1 : 2016) and part 2 — ‘transport mechanisms and packaging’ (ISO/IEC TR 19566 - 2 : 2016).|$|R
40|$|Some chaos-based image {{encryption}} schemes using plain-images independent secret <b>code</b> <b>streams</b> have weak encryption {{security and}} {{are vulnerable to}} chosen plaintext and chosen cipher-text attacks. This paper proposed a two-level secret key image encryption scheme, where the first-level secret key is the private symmetric secret key, and the second-level secret key is derived from both the first-level secret key and the plain image by iterating piecewise linear map and Logistic map. Even though the first-level key is identical, the different plain images will produce different second-level secret keys and different secret <b>code</b> <b>streams.</b> The {{results show that the}} proposed has high encryption speed, and also can effectively resist the existing cryptanalytic attacks...|$|R
40|$|This paper {{presents}} some experiments regarding applications {{development on}} high performance media processors included in Philips Nexperia Family. The PNX 1302 dedicated DVB-T kit used has some limitations. Our work has succeeded {{to overcome these}} limitations and to make possible a general-purpose use of this kit. For exemplification two typical applications, important both for multimedia and DVB, are analyzed: MPEG 2 video <b>stream</b> <b>decoding</b> and MP 3 audio decoding. These original implementations are compared (in speed, memory requirements and costs) with Philips Nexperia Library. Comment: 3 pages, 1 figur...|$|R
50|$|However {{even given}} {{infinitely}} fast dependency checking logic on an otherwise conventional superscalar CPU, if the instruction stream itself has many dependencies, this would also limit the possible speedup. Thus {{the degree of}} intrinsic parallelism in the <b>code</b> <b>stream</b> forms a second limitation.|$|R
40|$|AbstractForward Error Correction (FEC) codes {{may be used}} {{to protect}} a video <b>code</b> <b>stream</b> against packet erasures or errors when passing through an {{error-prone}} network. To have maximum possible fidelity at the decoder side, an Unequal Loss Protection (ULP) approach should be used to packetize the scalable video <b>code</b> <b>stream,</b> so that the different parts of the scalable video stream are protected according to their importance. Unequal loss-protected packetization leads to segmentation of the scalable <b>code</b> <b>stream,</b> such that the source can be reconstructed with the maximum possible fidelity at the decoder side. In Ardestani et al. (2009)  [1] we have found an analytical relation between the optimal sizes of any two consecutive segments. This idea yields an efficient (as efficient as the local search algorithm in Stankovic et al. (2002)  [2]) low-complexity progressive solution for the segmentation problem. In this paper, we use a progressive approach for ULP packetization of a scalable video stream generated from a T+ 2 D encoder. In addition, an optimal rate allocation is used for optimal rate budget division between successive Groups Of Pictures (GOPs) of the video sequence. The experimental results demonstrate that the optimal rate budget allocation outperforms the conventional strategy of equal rate budget distribution up to 0. 65  dB...|$|R
5000|$|... 11.22 (2002): An {{incremental}} {{release of}} the Itanium version of HP-UX, it was designated 11i v1.6. This version achieved 64-way scalability, m:n threads, added more dynamic kernel tunable parameters, and supported HP's Logical Volume Manager on Itanium. It was built from the 11i v1 source <b>code</b> <b>stream.</b>|$|R
5000|$|<b>Coding,</b> {{interactive}} <b>streaming,</b> and {{visualization of}} 3D environments ...|$|R
40|$|Abstract: Those image {{encryption}} systems whose cipher <b>code</b> <b>streams</b> {{used for}} encryption are generated from only the secret keys {{but not the}} plain images, usually cannot fight the chosen/known plaintext attacks. Recently, Liu et al. proposed a color image encryption algorithm based on DNA encoding and decoding and chaotic map [L Liu, Q Zhang, X Wei. Computers and Electrical Engineering, 38 (5) : 1240 - 1248, 2012]. In this algorithm, the cipher <b>code</b> <b>stream</b> used for encryption is unrelated to the plain image, and the combinations of DNA encoding and decoding have many equivalent ones. This paper used the chosen plaintext attack and known plaintext attack methods to crack Liu et al. ’s method successfully, what shows that Liu et al. ’s encryption scheme {{cannot be applied to}} the actual communications...|$|R
40|$|Abstract. In this paper, {{pseudo-random}} sequences {{are designed}} as encrypting secret keys by the hyper-chaotic system model. Based on the H. 264 coding standard, selecting encryption {{is designed to}} encrypt intra-prediction modes, MVD symbols and CAVLC residual coding datum. Experiments show that the encryption algorithm has higher security without changing the structure of <b>code</b> <b>streams...</b>|$|R
50|$|When {{used as a}} {{software}} protection device, dongles mostly appear as two-interface security tokens with transient data flow that does not interfere with other dongle functions and a pull communication that reads security data from the dongle. Without the dongle, the software may run only in a restricted mode, or not at all. When used as a device attached to a computer or TV or gaming console, dongles can enable functions {{that would not be}} present without it. For example, a dongle attached to a TV may receive an encoded video <b>stream,</b> <b>decode</b> it in the dongle, and then present this audio and video information to the TV.|$|R
50|$|In practice, {{a series}} of boolean transformations are applied to the stream of input bits, {{compressing}} BCD encoded digits from 12 bits per three digits to 10 bits per three digits. Reversed transformations are used to <b>decode</b> the resulting <b>coded</b> <b>stream</b> to BCD. Equivalent results can also be achieved {{by the use of}} a look-up table.|$|R
40|$|We {{adapt the}} {{standardized}} Poverty Line Estimation Analytical Software (PLEASe) computer <b>code</b> <b>stream</b> based on Arndt and Simler's (2010) utility-consistent approach to analyse poverty in Ethiopia in 2000, 2005, and 2011. Several data-related issues create challenges to estimating the {{spatial and temporal}} distribution of poverty {{in a manner that}} meets both consistency and specificity objectives. This paper documents how we adapt the <b>code</b> <b>stream</b> to address changes in data collection periods and strata for the respective surveys over time. Changes in the duration and time of year for data collection can be especially problematic for consistency in the presence of annual inflation of over 30 per cent. In addition, the Ethiopia case provides an example of how to address convergence problems encountered when running the PLEASe code. Careful consolidation of spatial domains and limiting the number of iterations in the estimation of poverty lines are potential solutions...|$|R
50|$|Despite {{being about}} 2-inch-square in size, the {{platform}} can <b>stream</b> and <b>decode</b> 1080p content, use desktop class interfaces such as KDE or GNOME under Linux, while requiring less than 3 watt {{and less than}} 1 watt in standby.|$|R
40|$|This {{report shows}} how {{a string of}} linear code may be {{converted}} into a data flow graph (DFG), then to an event flow graph (EFG), and finally into a temporal specification (TS). 1 Introduction This document is the second in a series on ECS compilation techniques. The first document [1] described how program constructs could be implemented in the ECS methodology. These constructs included For, While, and Repeat loops, and If (with Else), and Case statements, but did not delve into the linear code contained within any of these constructs. Linear code is defined here as being code which contains only assignment statements, and does not include {{any of the above}} mentioned constructs. Latching of signals is not performed on the inputs or the outputs, this being assumedly done as necessary by the construct enclosing the section of linear code to be executed. For example purposes, the <b>code</b> <b>streams</b> are assumed to be written in Pascal, though any such language will suffice. These <b>code</b> <b>streams</b> ar [...] ...|$|R
3000|$|... respectively. Finally, the {{receiver}} performs MRC combination over the separate data <b>stream</b> and then <b>decodes</b> them.|$|R
40|$|MPEG {{decoding}} chips have {{to support}} multiple features such as video <b>stream</b> <b>decoding,</b> transport <b>stream</b> parsing, multi-standard support, scan line conversion for on-screen displq, and audiohideo synchronization. Some of these features are computation-intensive, while others are size-intensive. In this papel; an embedded processor specialized for the MPEG decoding is proposed {{to cope with the}} complicated requirements. The proposed processor can execute up to four operations at a time to handle intensive computation, and can change instruction issue rate according to the required performance in order to save code size that is very important in MPEG applications. In addition, the processor can switch tasks rapidly to keep the number of buffers existing between tasks minimal. I...|$|R
40|$|Data hiding is an {{important}} branch of information security. Imperceptibility and Hiding Capacity are very important aspects for efficient secret communication. It is necessary to increase hiding capacity for JPEG 2000 baseline system because available redundancy is very limited. In this paper Redundancy Evaluation method is used for increasing hiding capacity. This method determines embedding depth adaptively for increasing hiding capacity. Large quantity of data is embedded into bitplanes, but {{at the cost of}} slightly change in Peak Signal to Noise Ratio (PSNR). This method easily implemented in JPEG 2000 compression encoder and produced stego <b>stream</b> <b>decoded</b> normally at decoder. Simulation result shows that this method is secure and increases hiding capacity...|$|R
