30|17|Public
2500|$|The Evolutionary Design of <b>Collective</b> <b>Computation</b> in Cellular Automata, James P. Crutchfeld, Melanie Mitchell, Rajarshi Das (In J. P. Crutch¯eld and P. K. Schuster (editors), Evolutionary Dynamics|Exploring the Interplay of Selection, Neutrality, Accident, and Function. New York: Oxford University Press, 2002.) ...|$|E
5000|$|Luis von Ahn first {{proposed}} {{the idea of}} [...] "human algorithm games", or games with a purpose (GWAPs), in order to harness human time and energy for addressing problems that computers cannot yet tackle on their own. He believes that human intellect is an important resource and contribution to the enhancement of computer processing and human computer interaction. He argues that games constitute a general mechanism for using brainpower to solve open computational problems. In this technique, human brains are compared to processors in a distributed system, each performing a small task of a massive computation. However, humans require an incentive {{to become part of}} a <b>collective</b> <b>computation.</b> Online games are used as a means to encourage participation in the process.|$|E
40|$|Artificial intelligence, machine learning, biologically {{inspired}} computing, cognitive science, {{and complex}} systems. Computer modeling of analogy-making. Theory and applications of evolutionary computation. <b>Collective</b> <b>computation</b> in spatially extended {{systems such as}} cellular automata, and applications to biological modeling. History of science and technology...|$|E
40|$|This {{document}} {{reports on}} the models developed so far for basic functions in dynamic net-works. The basic functions of interest in BISON, as previously defined in deliverable D 01, are: routing, search, topology management, <b>collective</b> <b>computations</b> and monitoring. For each of these basic functions one or more models have been developed, where each model {{has been designed to}} match the characteristics of either overlay networks or mobile ad hoc networks. Models are described by discussing their core characteristics and pointing out analogies with biological systems and relationships with related work. In particular, the presented models have been designed utilizing notions from ant colonies (for routing and monitoring in mobile ad hoc networks), immune system (for search in P 2 P networks) and epidemics (for topology management, <b>collective</b> <b>computations</b> and monitoring in overlay networks). For some models some preliminary results were already available and have been shortly discussed. However, more precise and in-depth results will be reported on deliverables D 06 and D 07 due by mont...|$|R
40|$|The Distributed Virtual Communication Machine (DVCM) is an {{extensible}} communication architecture for tightly-coupled {{clusters of}} workstations (COWs) connected by high-speed networks. The DVCM {{is designed for}} off-theshelf network interface cards equipped with communication coprocessors. Its main component is an "active backplane" implemented in firmware running on the coprocessors. This "backplane" can be extended with modules that implement application-specific functionality and have access {{to some of the}} application's state. Consequently, non-trivial <b>collective</b> <b>computations</b> can be implemented as DVCM extensions. We present a DVCM extension module that provides application-specific network flow control by coordinating the resource-competing components of a parallel application running on an ATM LAN. Our experiments show that this extension module helps eliminate message loss and achieve high link bandwidth utilization when there is significant link contention. 1. Introduction The high [...] ...|$|R
40|$|International audienceBuilding {{individual}} {{behaviors to}} solve collective problems {{is a major}} stake whose applications are found in several domains. DecPOMDP has been proposed as formalism for describing multi-agent problems. However, solving a Dec POMDP {{turned out to be}} a NEXP problem. In this study, we introduced the original concept of social action to get round the inherent complexity of DecPOMDP and we proposed three decentralized reinforcement learning algorithms which approximate the optimal policy in DecPOMDP. This article analyses the results obtained and argues that this new approach seems promising for automatic top-down <b>collective</b> behavior <b>computation...</b>|$|R
40|$|AbstractThis paper {{discusses}} the critical temperature (control parameter) of an annealed neural network, a typical <b>collective</b> <b>computation</b> for combinatorial optimization problems. It is {{shown that the}} theoretical critical temperatures determined by our estimation agree with those derived by computational experiments in graph partitioning problems and in the travelling salesman problem...|$|E
40|$|<b>Collective</b> <b>computation</b> is {{typically}} polynomial {{in the number}} of computational elements, such as transistors or neurons, whether one considers the storage capacity of a memory device or the number of floating-point operations per second of a CPU. However, we show here that the capacity of a computational network to resolve real-valued signals of arbitrary dimensions can be exponential in N, even if the individual elements are noisy and unreliable. Nested, modular codes that achieve such high resolutions mirror the properties of grid cells in vertebrates, which underlie spatial navigation. ...|$|E
40|$|The {{collective}} {{behavior of}} interconnected spiking nerve cells is investigated. It is {{shown that a}} variety of model systems exhibit the same short-time behavior and rapidly converge to (approximately) periodic firing patterns with locally synchronized action potentials. The dynamics of one model can be described by a downhill motion on an abstract energy landscape. Since an energy landscape makes it possible to understand and program computation done by an attractor network, the results will extend our understanding of <b>collective</b> <b>computation</b> from models based on a firing-rate description to biologically more realistic systems with integrate-and-fire neurons...|$|E
40|$|Decentralized {{control for}} multirobot systems is {{difficult}} to design by hand because the behavioral rules for individual robots cannot, in general, be derived from a desired collective behavior. System designers have therefore resorted to evo-lutionary computation {{as a means to}} heuristically synthesize self-organized behaviors for robot <b>collectives.</b> Evolutionary <b>computation</b> is typically applied by putting the rules gov-erning the individual robots under evolutionary control and by assigning fitness scores based on collective performance. Scaling evolutionary approaches to complex tasks has, how-ever, proven challenging due to issues related to bootstrap-ping and premature convergence. In this paper, we show how hierarchical task decomposition and the combination of evolved and preprogrammed control can overcome these is-sues. We apply our approach to a complex multirobot task that requires a high degree of coordination and collective de-cision making, and we synthesize controllers capable of solv-ing the task...|$|R
40|$|Kensho is a {{middleware}} {{system for}} sensor networks {{that provides a}} communication and computation transparent view of the sensor network. Kensho {{is based on the}} specification of functional groups that support both data sharing and <b>computation.</b> <b>Collective</b> operations can migrate automatically throughout a group to take advantage of new resources without the user’s input. This allows new nodes {{to be added to the}} network without having to reprogram the network or the new node. We believe that these abstractions provided by the Kensho middleware supports the creation of highly scalable, robust distributed programs. ...|$|R
40|$|Abstract—Non-blocking {{collective}} {{communication is}} a key technique for enabling overlap of <b>collective</b> communication and <b>computation</b> to achieve higher scalability on large scale parallel computers. There can be many types of implementation meth-ods for non-blocking collective communications. To sufficiently obtain effect of overlap, appropriate method should be chosen. Therefore, {{it is important to}} study characteristics of each method. In this paper, we explain a characteristic of each method of im-plementation and and evaluate the characteristic by performing the experiment using a simple test program. In addition to that, this paper proposes an implementation with lower overhead, and evaluates the performance. Keywords—non-blocking collective communication, overlapping communication and computation, large scale parallel computin...|$|R
40|$|Cellular automata (CA) {{have been}} widely used as {{idealized}} models of spatially-extended dynamical systems and as models of massively parallel distributed computation devices. Despite their wide range of applications and the fact that CA are capable of universal computation (under particular constraints), the full potential of these models is unrealized to-date. This is for two reasons: (1) the absence of a programming paradigm to control these models to solve a given problem and (2) the lack of understanding of how these models compute a given task. This work addresses the notion of computation in two-dimensional cellular automata. Solutions using a decentralized parallel model of computation require information processing on a global level. CA have been used to solve the so-called density (or majority) classification task that requires a system-wide coordination of cells. To better understand and challenge the ability of CA to solve problems, I define, solve, and analyze novel tasks that require solutions with global information processing mechanisms. The ability of CA to perform parallel, <b>collective</b> <b>computation</b> is attributed to the complex pattern-forming system behavior. I further develop the computational mechanics framework to study the mechanism of <b>collective</b> <b>computation</b> in two-dimensional cellular automata. I define several approaches to automatically identify the spatiotemporal structures with information content. Finally, I demonstrate why an accurate model of information processing in two-dimensional cellular automata cannot be constructed from the space-time behavior of these structures...|$|E
40|$|A new {{processing}} architecture for semiconductor nanowire grid fabrics is presented. The system {{consists of}} a large number of functionally identical units called cells. Cells are locally interconnected with nearest neighbors, with a limited number of global signals routed from supporting CMOS circuitry. One possible implementation of a digital cellular neural network (CNN) using this architecture is shown. The digital cellular design may be up to 27 times denser than an equivalent 18 nm CMOS implementation. The system, based on a <b>collective</b> <b>computation</b> model, may also significantly alleviate manufacturing, since 100 % fault-free components may not be necessary...|$|E
40|$|The {{notion of}} {{conceptual}} structure in cellular automata (CA) rules that perform the density classification task (DCT) {{was introduced by}} Marques-Pita et al. (2006). Here we investigate the role of process-symmetry in CAs that solve the DCT, in particular the idea of conceptual similarity, which defines a novel search space for CA rules. We report on two new highest-performing process symmetric rules for the DCT. We further discuss how our results are relevant to understand, control, and design the <b>collective</b> <b>computation</b> performed by other networks of automata, such as those used to model, for example, living systems...|$|E
40|$|In this thesis, I present {{electronic}} circuit systems that mimic collective analog com- putation found in biology. By combining {{the advantages of}} analog and digital computation, these systems can lead to highly complex, rapid, and energy-efficient systems such as an analog supercomputer {{that is capable of}} simulating a great number of bio- chemical reactions in cells. To this end, I first implement a neuron-inspired collective analog adder in a standard 0. 5 [mu]m CMOS process. It serves as a prototype system that visualizes fundamental design ideas and techniques for building a <b>collective</b> analog <b>computation</b> system. Next, I build a cell-inspired analog circuit system which efficiently models bacterial genetic circuits in a cell, which can provide a powerful modeling and simulation tool for the design and analysis of circuits in synthetic and systems biology. by Sung Sik Woo. Thesis (S. M.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2012. This electronic version was submitted by the student author. The certified thesis is available in the Institute Archives and Special Collections. Cataloged from student-submitted PDF version of thesis. Includes bibliographical references (p. 101 - 102) ...|$|R
40|$|Using a {{particle}} model of Physarum displaying emer- gent morphological adaptation behaviour we demonstrate how a minimal approach to <b>collective</b> material <b>computation</b> {{may be used}} to transform and summarise properties of spatially represented datasets. We find that the virtual material relaxes more strongly to high-frequency changes in data which can be used for the smoothing (or filtering) of data by ap- proximating moving average and low-pass filters in 1 D datasets. The relaxation and minimisation properties of the model enable the spatial computation of B-spline curves (approximating splines) in 2 D datasets. Both clamped and unclamped spline curves, of open and closed shapes, can be represented and the degree of spline curvature corresponds to the relaxation time of the material. The material computation of spline curves also includes novel quasi-mechanical properties including unwind- ing of the shape between control points and a preferential adhesion to longer, straighter paths. Interpolating splines could not directly be ap- proximated due to the formation and evolution of Steiner points at nar- row vertices, but were approximated after rectilinear pre-processing of the source data. This pre-processing was further simplified by transform- ing the original data to contain the material inside the polyline. These exemplar results expand the repertoire of spatially represented uncon- ventional computing devices by demonstrating a simple, collective and distributed approach to data and curve smoothing...|$|R
40|$|The {{trend towards}} {{producing}} workstations, which have multiprocessors (SMPs), increases research endeavors to build cheaper but powerful parallel programming platforms through connecting such workstations. Besides building such platforms, providing mechanisms, layers of abstraction, or libraries to enable programmers {{to gain the}} power of SMP clusters is another challenging field of research. Viewing an SMP architecture as an array of processors would be insufficient, since such a model ignores essential possible gains over performance. In this work we have stressed on reusable patterns or libraries for <b>collective</b> communication and <b>computations</b> {{that can be used}} commonly in parallel applications within a parallel programming environment utilized for SMP clusters. We introduce node-level replicated objects, since replicated objects provide a versatile abstraction {{that can be used to}} implement static load-balancing, local services such as memory management, distributed data structures, and [...] ...|$|R
40|$|The {{convolution}} backprojection (CBP) and Fourier inversion method (FIM) {{are popular}} tomographic image reconstruction techniques. However, {{the time required}} to reconstruct an image has been the major drawback associated with these techniques. We have designed a bus-based extended hypercube (BEH) that combines the positive features of both the bus based systems and the hypercube. We have executed the CBP and FIM algorithms on a hypercube, extended hypercube and on BEH. The reasons for high speedup of the BEH for image reconstruction tasks could be attributed to fast collective communication and <b>collective</b> <b>computation</b> algorithms of the BE...|$|E
40|$|We {{experimentally}} {{examine the}} consequences of the hypothesis that the brain operates reliably, even though individual components may intermittently fail, by computing with dynamical attractors. Specifically, such a mechanism exploits dynamic collective behavior of a system with attractive fixed points in its phase space. In contrast to the usual methods of reliable computation involving a large number of redundant elements, this technique of self-repair only requires <b>collective</b> <b>computation</b> with a few units, and it is amenable to quantitative investigation. Experiments on parallel computing arrays show that this mechanism leads naturally to rapid self-repair, adaptation to the environment, recognition and discrimination of fuzzy inputs, and conditional learning, properties that are commonly associated with biological computation...|$|E
40|$|Abstract. The {{notion of}} {{conceptual}} structure in CA rules that perform the density classification task (DCT) {{was introduced by}} [1]. Here we investigate the role of process-symmetry in CAs that solve the DCT, in particular the idea of conceptual similarity, which defines a novel search space for CA rules. We report on two new process-symmetric onedimensional rules for the DCT which have the highest “balanced ” performance observed to date on this task, {{as well as the}} highest-performing CA known to perform the DCT in two dimensions. Finally, we investigate the more general problem of assessing how different learning strategies (based on evolution and coevolution, with and without spatial distribution), previously compared by [2], are suited to exploit conceptual structure in learning CAs to perform <b>collective</b> <b>computation.</b> ...|$|E
40|$|This paper {{addresses}} {{the situation where}} a group wishes to cooperatively develop a common multicriteria evaluation model to sort actions (projects, candidates) into classes. It {{is based on an}} aggregation/disaggregation approach for the ELECTRE TRI method, implemented on the Decision Support System IRIS. We provide a methodology in which the group discusses how to sort some exemplary actions (possibly fictitious ones), instead of discussing what values the model parameters should take. This paper shows how IRIS may be used to help the group to iteratively reach an agreement on how to sort one or a few actions at a time, preserving the consistency of these sorting examples both at the individual level and at the <b>collective</b> level. The <b>computation</b> of information that may guide the discussion among the group members is also suggested. We provide an illustrative example and discuss some paths for future research motivated by this work. [URL]...|$|R
40|$|Part 1 : Full PapersInternational audienceOpen Source Software (OSS) {{development}} has {{much in common}} with concepts such as crowdsourcing, citizen science, <b>collective</b> intelligence, human-based <b>computation,</b> and what we call “Citizen Engineering (CE) ”. We report on several pilot projects that apply these shared principles of OSS development to engineering activities beyond software engineering. CE models harness human computing power from open communities, which commonly consist of a cohort of geographically and/or institutionally scattered citizens - professionals or amateurs - to collaboratively solve real-world problems. In most cases, the problems targeted are challenging to computers, but manageable or trivial to human intelligence. In these systems, while humans play fundamental roles, whether they are project architects or problem solvers, the implementation of CE is greatly facilitated by the advance of information technology, particularly the Internet, considered as “creative mode of user interactivity, not merely a medium between messages and people” [10]. In this paper, we characterize existing citizen engineering practices into 6 major categories, followed by a discussion of 4 ongoing projects, aiming to provide new perspectives and insights for achieving successful CE project designs...|$|R
40|$|In this paper, we {{evaluate}} {{the impact on}} performance of various implementation techniques for collective I/O operations, and do so across four important parallel architectires. We show that a naive implementation of collective I/O does not result in significant performance gains {{for any of the}} architectures, but that an optimized implementation does provide excellent performance across all of the platforms under study. Furthermore, we demonstrate that there exists a single implementation strategy that provides the best performance for all four computational platforms. Next, we evaluate implementation techniques for thread-based collective I/O operations. We show that that the most obvious implementation technique, which is to spawn a thread to execute the whole collective I/O operation in the background, frequently provides the worst performance, often performing much worse than just executing the collective I/O routine entirely in the foreground. To improve performance, we explore an alternate approach where part of the collective I/O operation is performed in the background, and part is performed in the foreground. We demonstrate that this implementation technique can provide significant performance gains, offering up to a 50 % improvement over implementations that do not attempt to overlap <b>collective</b> I/O and <b>computation...</b>|$|R
30|$|An {{attractive}} {{route to}} address this issue is to consider distributed-sensing/distributed-processing schemes, which avoid centralized decision-making by distributing processing tasks throughout the network [23]. However, the design of practical distributed-sensing/distributed-processing schemes is a challenging task, as <b>collective</b> <b>computation</b> phenomena usually exhibit highly non-trivial features [24, 25]. In effect, even though the distributed-sensing literature is vast (for classic references c.f. [26 – 28], and more modern surveys see [3, 4, 29, 30]), the construction of optimal distributed schemes is in general NP-hard [31]. Moreover, although in many scenarios the optimal schemes can be characterized as a set of thresholds for likelihood functions, the determination of these thresholds is usually an intractable problem [26]. For example, homogeneous thresholds can be suboptimal even for networks with similar sensors arranged in star topology [32], being only asymptotically optimal in the network size [33]. Moreover, symmetric strategies are not suitable for more complicated network topologies, requiring heuristic methods.|$|E
40|$|Data- and task-parallelism are two {{important}} parallel programming models. Object-oriented paradigm in parallelism {{provides a good}} way of abstracting out various aspects of computations and computing resources. Using an object-oriented language like C++, one can compose data and control representations into a single active object. We propose a thread model of parallelism that addresses both data and task parallelism. Computation and communication can be overlapped by suspending a thread of computation which is waiting for an event and running an eligible thread of computation in its place. Threads naturally subsume taskparallelism. Threads are encapsulated into thread objects may be grouped into rope objects [22, 20], that span the parallel machine domain, for <b>collective</b> <b>computation</b> and communication. Thus data-parallelism can be supported. Since rope objects are parallel objects, they can be customized, interestingly, in a serial or a parallel manner. Spatial transparency of objects is [...] ...|$|E
30|$|The main {{characteristics}} of ANNs dealing with {{quantitative and qualitative}} indices include large-scale parallel distributed processing, continuously nonlinear dynamics, <b>collective</b> <b>computation,</b> high fault-tolerance, self-organization, self-learning and real-time treatment (Rumelhart and McClelland 1986). It {{is worth noting that}} a neural network system is a processing device, implemented as an algorithm or in hardware, whose design is inspired by the design and the function of mammalian brains; they react to training data input in such a way to alter their initial state, and they learn using unconventional algorithms. Neural networks integrated with GIS may be an effective approach when dealing with landslide hazard assessments where meaningful outcomes are difficult to achieve by means of standard mathematical models. Because artificial neural network models are adaptive and capable of generalization, they can handle imperfect or incomplete data and can capture nonlinear and complex interactions among the several variables of a system (Ermini et al. 2005; Melchiorre et al. 2008; Lee and Pradhan 2010; Conforti et al., 2014; Pham et al., 2017).|$|E
40|$|Abstract—The {{well-known}} {{gap between}} relative CPU speeds and storage bandwidth {{results in the}} need for new strategies for managing I/O demands. In large-scale MPI applications, collec-tive I/O has long been an effective way to achieve higher I/O rates, but it poses two constraints. First, although overlapping <b>collective</b> I/O and <b>computation</b> represents the next logical step toward a faster time to solution, MPI’s existing collective I/O API provides only limited support for doing so. Second, collective routines (both for I/O and communication) impose a synchronization cost in addition to a communication cost. The upcoming MPI 3. 1 standard will provide a new set of nonblocking collective I/O operations to satisfy the need of applications. We present here initial work on the implementation of MPI nonblocking collective I/O operations in the MPICH MPI library. Our implementation begins with the extended two-phase algorithm used in ROMIO’s collective I/O implementation. We then utilize a state machine and the extended generalized request interface to maintain the progress of nonblocking collective I/O operations. The evaluation results indicate that our implementation performs as well as blocking collective I/O in terms of I/O bandwidth and is capable of overlapping I/O and other operations. We believe that our implementation can help users try nonblocking collective I/O operations in their applications. I...|$|R
40|$|The {{development}} of a quantum computer presents {{one of the greatest}} challenges in science and engineering to date. The promise of more efficient computing based on entangled quantum states and the superposition principle has led to a worldwide explosion of interest in the fields of quantum information and computation. Among the number of hurdles which must first be cleared before we witness a physical realization are problems associated with environment-induced decoherence and noise more generally. However, the discovery of quantum error correction and the establishment of the accuracy threshold theorem provide us with the hope of someday harnessing the potential power a functioning fault-tolerant quantum information processor has to offer. This dissertation contributes to this effort by investigating a particular class of quantum error correcting codes, namely noiseless subsystem encodings. The passive approach to error correction taken by these encodings provides an efficient means of protection from symmetrically coupled system-environment interactions. Here I will present methods for determining the subsystem-preserving evolutions for noiseless subsystem encodings supported by arbitrary-dimensional physical quantum systems. Implications for universal, <b>collective</b> decoherence-free quantum <b>computation</b> using the derived operations are discussed. Moreover, I will present a proposal for an optical device which is capable of preparing a variety of these noiseless subsystem encodings through a postselection strategy...|$|R
40|$|Abstract] The {{interest}} in Java within the High Performance Computing (HPC) {{community has been}} rising during the last years thanks to its noticeable performance improvements and its productivity features. In a context where the trend {{to increase the number}} of cores per processor is leading to the generalization of many-core processors and accelerators, multithreading as an inherent feature of the language makes Java extremely interesting to exploit the performance provided by multi- and manycore architectures. This PhD Thesis presents a thorough analysis of the current state of the art regarding multi- and many-core programming in Java and provides the design, implementation and evaluation of several solutions to enable Java for the many-core era. To achieve this, a shared memory message-passing solution has been implemented to provide shared memory programming with the scalability of distributed memory paradigms, also with the benefits of a portable programming model that allows the developed codes to be run on distributed memory systems. Moreover, representative <b>collective</b> operations, involving <b>computation</b> and communication among different processes or threads, have been optimized, also introducing in Java new features for scalability from the MPI 3. 0 specification, namely nonblocking collectives. Regarding the exploitation of many-core architectures, the lack of direct Java support forces to resort to wrappers or higher-level solutions to translate Java code into CUDA or OpenCL. The most relevant among these solutions have been evaluated and thoroughly analyzed in terms of performance and productivity. Guidelines for taking advantage of shared memory environments have been derived during the analysis and development of the proposed solutions, and the main conclusion is that the use of Java for shared memory programming on multi- and many-core systems is not only productive but also can provide high performance competitive results. However, in order to effectively take advantage of the underlying multi- and many-core architectures, the key is the availability of optimized middleware that abstracts multithreading details from the user, like the one proposed in this Thesis, and the optimization of common operations like collective communications...|$|R
40|$|In recent study, an {{increasing}} {{amount of time}} has been spent researching complex systems {{due to the traditional}} Von Neumann architecture lacking sufficient efficiency. A specific complex system which has been growing in popularity is a system of swarm robots. Introducing evolutionary principles in such systems makes an attempt at <b>collective</b> <b>computation,</b> from simple elements, to resolve complex problems. To further add functionality to such systems, self-organizing techniques, such as self-assembly, have been introduced. Because of the lack of research literature within this paradigm, there are few comparisons of the different implementations of self-assembly mechanisms. This thesis outlines some mechanisms of self-assembly and explores the positive and negative implications these may have on evolutionary self-assembling robots. The results of the experiments conducted in this thesis show that self-assembly mechanisms such as the connection hardware and introducing local communication can influence the system's ability to self-assemble, and the behaviour of the self-assembled group...|$|E
40|$|The leader {{election}} {{problem is}} a crucial problem {{in the theory of}} distributed algorithms, multi-agent systems as well as in sociobiology. In this paper we investigate one-dimensional binary state cellular automata with an intention to track self-organizational mechanisms that finally enable a global leader to be elected. Since our model is anonymous and uniform we also have to deal with a problem of symmetry that in great majority of cases is broken by inhomogeneity of arbitrary initial configurations. Our approach to the problem is based on the evolution of cellular automata by genetic algorithms and the methodology of computational mechanics. The presented new solution of the leader election reaches remarkably high performance of 94 [*]−[*] 99 %. The analysis shows a sophisticated <b>collective</b> <b>computation</b> demonstrated by so called particles and their interactions. Due to the simplicity of our model, presented approach is general and universal enough to be applicable even at the level of primitive biological or artificial societies...|$|E
40|$|A {{hierarchical}} group model that decouples computation from hardware can characterize and {{aid in the}} construction of sensor network software with minimal overhead. Future sensor network applications will move beyond static, homogeneous deployments to include dynamic, heterogeneous elements. These sensor networks will also gain new users, including casual users who will expect intuitive interfaces to interact with sensor networks. To address these challenges, a new computational model and a system implementing the model are presented. This model ensures that computations can be readily reassigned as sensor nodes are introduced or removed. The model includes methods for communication to accommodate these dynamic elements. This dissertation presents a detailed description and design of a computational model that resolves these challenges using a {{hierarchical group}} mechanism. In this model, computation is tasked to logical groups and split into collective and local components that communicate hierarchically. Local computation is primarily used for data production and publishes data to the <b>collective</b> <b>computation.</b> Similarly, <b>collective</b> <b>computation</b> is primarily used for data aggregation and pushes results back to the local computation. Finally, the model includes data-processing functions interposed between local and collective functions that are responsible for data conversion. This dissertation also presents implementations and applications of the model. Implementations include Kensho, a C-based implementation of the hierarchical group model, {{that can be used for}} a variety of user applications. Another implementation, Tables, presents a spreadsheet-inspired view of the sensor network that takes advantage of hierarchical groups for both computation and communication. Users are able to specify both local and collective functions that execute on the sensor network via the spreadsheet interface. Applications of the model are also explored. One application, FUSN, provides a set of methods for constructing filesystem-based interfaces for sensor networks. This demonstrates the general applicability of the model as applied to sensor network programming and management interfaces. Finally, the model is applied to a novel privacy algorithm to demonstrate that the model isn't strictly limited to programming interfaces. Los Alamos National Laboratory National Nuclear Security AgencyDoctor of PhilosophyDoctoralUniversity of New Mexico. Dept. of Computer ScienceMaccabe, ArthurForrest, StephanieBridges, PatrickShu, Wei Wenni...|$|E
40|$|In {{the last}} few years, {{anatomical}} and physiological studies have provided {{new insights into the}} organization of the parieto-frontal network underlying visually guided arm-reaching movements in at least three domains. (1) Network architecture. It has been shown that the different classes of neurons encoding information relevant to reaching are not confined within individual cortical areas, but are common to different areas, which are generally linked by reciprocal association connections. (2) Representation of information. There is evidence suggesting that reach-related populations of neurons do not encode relevant parameters within pure sensory or motor "reference frames", but rather combine them within hybrid dimensions. (3) Visuomotor transformation. It has been proposed that the computation of mo tor commands for reaching occurs as a simultaneous recruitment of discrete populations of neurons sharing similar properties in different cortical areas, rather than as a serial process from vision to movement, engaging different areas at different times. The goal of this paper was to link experimental (neurophysiological and neuroanatomical) and computational aspects within an integrated framework to illustrate how different neuronal populations in the parieto-frontal network operate a <b>collective</b> and distributed <b>computation</b> for reaching. In this framework, all dynamic (tuning, combinatorial, computational) properties of units are determined by their location relative to three main functional axes of the network, the visual-to-somatic, position-direction, and sensory-motor axis. The visual-to-somatic axis is defined by gradients of activity symmetrical to the central sulcus and distributed over both frontal and parietal cortices. At least four sets of reach-related signals (retinal, gaze, arm position/movement direction, muscle output) are represented along this axis. This architecture defines informational domains where neurons combine different inputs. The position-direction axis is identified by the regular distribution of information over large populations of neurons processing both positional and directional signals (concerning the arm, gaze, visual stimuli, etc.) Therefore, the activity of gaze- and arm-related neurons can represent virtual three-dimensional (3 D) pathways for gaze shifts or hand movement. Virtual 3 D pathways are thus defined by a combination of directional and positional information. The sensory-motor axis is defined by neurons displaying different temporal relationships with the different reach-related signals, such as target presentation, preparation for intended arm movement, onset of movements, etc. These properties reflect the computation performed by local networks, which are formed by two types of processing units: matching and condition units. Matching units relate different neural representations of virtual 3 D pathways for gaze or hand, and can predict motor commands and their sensory consequences. Depending on the units involved, different matching operations can be learned in the network, resulting in the acquisition of different visuo-motor transformations, such as those underlying reaching to foveated targets, reaching to extrafoveal targets, and visual tracking of hand movement trajectory. Condition units link these matching operations to reinforcement contingencies and therefore can shape the collective neural recruitment along the three axes of the network. This will result in a progressive match of retinal, gaze, arm, and muscle signals suitable for moving the hand toward the target...|$|R
40|$|We analyze a {{distributed}} {{information network}} {{in which each}} node {{has access to the}} information contained in a limited set of nodes (its neighborhood) at a given time. A <b>collective</b> <b>computation</b> is carried out in which each node calculates a value that implies all information contained in the network (in our case, the average value of a variable that can take different values in each network node). The neighborhoods can change dynamically by exchanging neighbors with other nodes. The results of this collective calculation show rapid convergence and good scalability with the network size. These results are compared with those of a fixed network arranged as a square lattice, in which the number of rounds to achieve a given accuracy is very high when the size of the network increases. The results for the evolving networks are interpreted in light of the properties of complex networks and are directly relevant to the diameter and characteristic path length of the networks, which seem to express "small world" properties. Comment: 11 pages, 4 figure...|$|E
40|$|Mobile {{devices such}} as {{smartphones}} and tablets are ubiquitous today, {{and many of them}} possess significant computation power, powerful sensors such as high-resolution cameras and GPS sensors, and a wealth of sensor data such as photos, videos, and location information. Collections of mobile devices in close geographical proximity present both opportunities and challenges for mobile applications: the enormous collection of mobile devices presents an extremely rich source of user-generated content as well as <b>collective</b> <b>computation</b> power, but these devices are mutually distrusting, and security and privacy concerns, amongst many other obstacles, prevent users from cooperating with other distrusting entities to exploit both the available computation power and data. In this paper, we articulate and describe some of the security and privacy challenges which currently prevent us from leveraging the collective data and computational power available in collections of mobile devices belonging to mutually distrusting users. By addressing these security and privacy challenges, we envision that a new class of applications can be developed which leverage the collective mobile devices available in close geographical proximity: mutually distrusting users would be willing to participate in such public computations with sufficient security and privacy safeguards, enabling novel applications. Acknowledgements: We would like to acknowledge Utsav Drolia and Rolando Martins for the insightful discussions regarding the ideas in this paper...|$|E
