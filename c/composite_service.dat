506|836|Public
5|$|Enjebi, Aomon, and Runit Islands {{were cleared}} of {{vegetation}} and graded level {{to make it}} easier to install the required instrumentation, and a causeway was built between Aomon and Bijire so the instrument cables could be run from the test tower on Aomon to the control station on Bijire. The detonations were ordered so that later test areas would suffer minimal fallout from the earlier shots. The Army component, Task Group 7.2, was responsible for construction work. It consisted of the 1220th Provisional Engineer Battalion, with the 1217th and 1218th <b>Composite</b> <b>Service</b> Platoons, the 18th Engineer Construction Company and 1219th Signal Service Platoon; Companies D and E of the 2nd Engineer Special Brigade's 532nd Engineer Boat and Shore Regiment; the 461st Transportation Amphibious Truck Company; 854th Transportation Port Company; 401st CIC Detachment; and the Naval Shore Base Detachment.|$|E
60|$|Jackson died a week later, {{and they}} buried {{him in the}} old family lot in the {{farthest}} corner of the orchard. His mother and Cynthia put on mourning for him, and they stood together by his open grave, Mrs. Durgin leaning upon her son's arm and the girl upon her father's. The women wept quietly, but Jeff's eyes were dry, though his face was discharged of all its prepotent impudence. Westover, standing across the grave from him, noticed the marks on his forehead that he said were from his scrapping, and wondered what really made them. He recognized the spot where they were standing as that where the boy had obeyed the law of his nature and revenged the stress put upon him for righteousness. Over the stone of the nearest grave Jeff had shown a face of triumphant derision when he pelted Westover with apples. The painter's mind fell into a chaos of conjecture and misgiving, so that he scarcely took {{in the words of}} the <b>composite</b> <b>service</b> which the minister from the Union Chapel at the Huddle read over the dead.|$|E
50|$|A <b>composite</b> <b>service</b> {{implementation}} is {{the semantic}} {{definition of a}} service module based on SOP techniques and concepts. If you look inside of a black-boxed interface definition of a <b>composite</b> <b>service,</b> you may see other service interfaces connected {{to each other and}} connected to SOP programming constructs. A <b>Composite</b> <b>service</b> has a recursive definition meaning that any service inside ("inner service") may be another atomic or <b>composite</b> <b>service.</b> An inner service may be a recursive reference to the same containing <b>composite</b> <b>service.</b>|$|E
5000|$|Identify, build, {{and test}} loosely coupled <b>composite</b> <b>{{services}},</b> where each <b>composite</b> <b>services</b> {{is made up}} of atomic services only.|$|R
40|$|In {{order to}} manage {{financial}} risks online charging of <b>composite</b> <b>services</b> {{is becoming increasingly}} important for service providers to support service delivery in inter-domain environments. The 3 rd Generation Partnership Project (3 GPP) has developed a framework for off-line and online charging of IMS-based services. At service level, delivery of <b>composite</b> <b>services</b> often involves many service providers, where each service provider {{is responsible for the}} delivery of one or more service components (e. g. access service, IMS communication service, content service, etc.). Current Online Charging System (OCS) specified by 3 GPPP does not support an online charging function for <b>composite</b> <b>services.</b> This paper discusses a number of implications of online charging of <b>composite</b> <b>services,</b> in particular inter-domain <b>composite</b> <b>services.</b> It addresses important shortcomings of the current 3 GPP online charging architecture and suggests a way to overcome these shortcomings. The contribution of this paper is twofold. Firstly, it proposes an information model to support charging of inter-domain <b>composite</b> <b>services.</b> The proposed information model is based on the NGOSS and SID concepts of the TeleManagement Forum. Secondly, it proposes additional functionalities required for existing OCS in IMS to handle online charging of inter-domain <b>composite</b> <b>services.</b> © Springer-Verlag Berlin Heidelberg 2009...|$|R
40|$|In Serviced-Oriented Computing (SOC) environments, {{the trust}} {{level of a}} service or a service {{provider}} is a critical issue for a service client to consider, particularly when the client {{is looking for a}} service from a large set of services or service providers. However, a service may invoke other services offered by different providers forming <b>composite</b> <b>services.</b> The complex invocation relations significantly increase the complexity of trust evaluation in <b>composite</b> <b>services.</b> In this paper, we propose a novel algorithm for trust evaluation in <b>composite</b> <b>services</b> that takes all atomic invocations into account, which is essential for <b>composite</b> <b>services</b> selection and discovery. 4 page(s...|$|R
50|$|A <b>composite</b> <b>service</b> can be {{declared}} as a transaction boundary. The runtime environment for SOP automatically creates and manages a hierarchical context for <b>composite</b> <b>service</b> objects {{which are used}} as a transaction boundary. This context automatically commits or rollbacks upon the successful execution of the <b>composite</b> <b>service.</b>|$|E
5000|$|Army <b>Composite</b> <b>Service</b> Group Area (later, Chinen Service Area), Nanjō, Okinawa ...|$|E
50|$|The Language Grid {{consists}} of four service layers: P2P Grid Layer, Atomic Service Layer, <b>Composite</b> <b>Service</b> Layer and Application System Layer.|$|E
40|$|With the {{development}} of web services technology, web services have changed from single to <b>composite</b> <b>services.</b> Privacy protection in <b>composite</b> <b>services</b> is becoming an important issue. P 3 P (platform for privacy preferences) is a privacy policy language which was designed for single web services. It enables service providers to express how they will deal with the privacy information of service consumers. In order {{to solve the problem}} that P 3 P cannot be applied to <b>composite</b> <b>services</b> directly, we propose a method to obtain P 3 P privacy policies for <b>composite</b> <b>services.</b> In this method, we present the definitions of Purpose, Recipient, and Retention elements as well as Optional and Required attributes for P 3 P policies of <b>composite</b> <b>services.</b> We also provide an instantiation to illustrate the feasibility of the method...|$|R
40|$|In this paper, {{we present}} a service {{composition}} tool which enables specification of <b>composite</b> <b>services</b> for users with limited programming skills. We view <b>composite</b> <b>services</b> as a loose form of teamwork of service provider agents coordinated by a personal user agent. Such view enables us to use an existing hierarchical model of teamwork {{as the basis for}} service composition. An extension to the current model of teamwork is also proposed to achieve flexible and robust execution of <b>composite</b> <b>services</b> in an open environment...|$|R
40|$|Abstract: COSMA proposes anovel SLA {{management}} approach for <b>composite</b> <b>services.</b> It supports acomposite service provider in managing SLAs with providers of atomic services, in managing SLAs with requesters of <b>composite</b> <b>services,</b> and aligning both SLA management activities with each other. Onthis basis, acomposite service provider can control and optimize its composite SLA management activities {{during the entire}} SLA lifecycle. This includes, in particular, planning and negotiating SLAs, monitoring and evaluating SLAs. In this paper, acase study on managing SLAs in <b>composite</b> <b>services</b> with the COSMA approach is presented in detail. ...|$|R
5000|$|A <b>composite</b> <b>service</b> can be {{declared}} to loop. The loop can {{be bound by}} a fixed number of iterations with an optional built-in delay between iterations and it can dynamically terminate using a [...] "service exit with success" [...] or [...] "service exit with failure" [...] construct inside of the looping <b>composite</b> <b>service.</b> Furthermore, any service interface can automatically run in a loop or [...] "foreach" [...] mode, if it is supplied with two or more input components upon automatic preparation. This behavior is supported at design-time when a data list structure from one service is connected to a service that takes a single data structure (i.e. non-plural) as its input. If a runtime property of the <b>composite</b> <b>service</b> interface is declared to support [...] "foreach" [...] in parallel, then the runtime automation environment can automatically multi-thread the loop and run it in parallel. This {{is an example of}} how SOP programming constructs provide built-in advanced functionality.|$|E
5000|$|Data mapping, translation, and {{transformation}} constructs enable automatic transfer of data across inner services. An inner-service {{is prepared to}} run, when it is activated {{and all of its}} input dependencies are resolved. All the prepared inner-services within a <b>composite</b> <b>service</b> run in a parallel burst called a [...] "hypercycle". This is one of the means by which automatic parallel-processing is supported in SOP. The definition of a <b>composite</b> <b>service</b> contains an implicit directed graph of inner service dependencies. The runtime environment for SOP can create an execution graph based on this directed graph by automatically instantiating and running inner services in parallel whenever possible.|$|E
50|$|SOP {{supports}} the basic programming constructs for sequencing, selection and iteration {{as well as}} built-in, advance behavior. Furthermore, SOP supports semantic constructs for automatic data mapping, translation, manipulation and flow across inner services of a <b>composite</b> <b>service.</b>|$|E
40|$|Abstract. BPEL-based {{composition}} of Web services {{has become one}} important part of business processes, {{but because of the}} dynamic and complexity of network, it easily raises various exceptions during the execution. In order to address various exceptions may exist in execution of <b>composite</b> Web <b>services</b> process effectively; this paper proposes an effective exception handling model of <b>composite</b> Web <b>services</b> in combination of the autonomic management theories and techniques in the field of autonomic computing. This model incorporates the autonomic management element of autonomic computing to monitor the execution of <b>composite</b> <b>services</b> and to compensate or restore the business process of the <b>composite</b> <b>services</b> according to the specified policy when an exception occurs. The model enhances the exception handling autonomy while reducing the complexity of exception handling of <b>composite</b> <b>services...</b>|$|R
40|$|The {{dependability}} of <b>composite</b> <b>services</b> {{is largely}} affected by their constituent Web <b>services.</b> <b>Composite</b> <b>services</b> {{have to operate}} in an open and dynamically changing environment in order to leverage the best performing services available at the moment. Hence, there {{is the need for}} an efficient mechanism to provide reliable service rankings. In this paper we present a novel, generic, and customizable reputation infrastructure to automatically and transparently monitor the execution of <b>composite</b> <b>services,</b> taking both functional and non-functional properties into account. The experienced Web service Quality-of-Service is communicated to a configurable reputation mechanism that publishes service rankings. Our reputation infrastructure supports notifications upon changes in service reputation, enabling self-tuning and self-healing properties in the execution of <b>composite</b> <b>services.</b> We implemented our architecture using standard technologies, such as BPEL and JavaEE. Performance measurements show that our infrastructure causes only moderate overhead...|$|R
40|$|This paper {{presents}} {{our approach}} for service provisioning in pervasive computing environments. The presented approach {{is based on}} the usage of context-aware features and transactions during the discovery and the deployment of <b>composite</b> <b>services.</b> Context ensures that the best service offers are selected to participate in a service composition. Transactions help in improving the reliability and efficiency of the <b>composite</b> <b>services...</b>|$|R
50|$|On 20 January 1947, the 1103d was {{activated}} {{again at}} Russelheim, Germany. On 5 March 1947, the 1103d was redesignated as Headquarters and Headquarters Detachment, 555th <b>Composite</b> <b>Service</b> Group. Two years later, on 7 March 1949, it was redesignated and reorganized as Headquarters and Headquarters Company, 555th Engineer Combat Group.|$|E
50|$|The 224th <b>Composite</b> <b>Service</b> Company (Maintenance) {{was called}} into federal service 21 November 1990, {{deployed}} to SWA 12 January 1991 and provided support to {{units in the}} 16th Corps Support Group sector. It completed over 3,500 maintenance requests while in theater and was released from federal service 26 May 1991.|$|E
50|$|Special {{composite}} services, called compensation services, can {{be associated}} with any service within SOP. When a <b>composite</b> <b>service</b> that is declared as a transaction boundary fails without an exception handling routing, the SOP runtime environment automatically dispatches the compensation services associated with all the inner services which have already executed successfully.|$|E
30|$|In [7, 8] a {{framework}} was developed that converts service composition tasks into planning problems expressed in PDDL. The framework will then convert the devised plan into an OWL-S composite process description. The framework translates atomic OWL-S processes to planning operators. Goals are achieved through assembling these generated planning operators. When no exact <b>composite</b> <b>services</b> can be found, semantic information is utilized to obtain <b>composite</b> <b>services</b> that best approximate the goal.|$|R
40|$|Based on {{business}} processes, <b>composite</b> Web <b>services</b> combine the offerings {{of two or}} more Web services to achieve the desired business goals. Several candidate standards have been proposed, providing a foundation for <b>composite</b> Web <b>service</b> specifications. However, at a higher level, there is no framework that supports <b>composite</b> Web <b>service</b> construction and automation. We propose a framework that facilitates the visual design, validation and automation of <b>composite</b> Web <b>services.</b> The framework is based mainly on Web service composition graph (WSCG), the underlying formalism for <b>composite</b> Web <b>services.</b> Using graph grammar and graph transformation defined on WSCG, the static topological structure of a <b>composite</b> Web <b>service</b> can be described in an intuitive way and the automation of the constructed <b>composite</b> Web <b>services</b> is also facilitated with a sound formal semantic basis. We also outline the design and implementation of a prototype for the proposed frameworkDepartment of ComputingRefereed conference pape...|$|R
40|$|Flexible and {{adaptive}} quality-of-service (QoS) is desirable for distributed real-time applications, such as e-commerce, or multimedia applications. The {{objective of this}} research is to dynamically instantiate <b>composite</b> <b>services</b> by effectively utilising the collective capabilities of the resources to deliver distributed applications. Related to this objective are the problems of: (1) predicting system and network resources utilisation as well as the user's changing requirements on the provided services, and (2) finding optimal execution plans for a service that meet end-to-end quality requirements and adapting the available resources in accordance to the changing situation. This paper presents a framework for adaptive QoS and resource management in provisioning <b>composite</b> <b>services.</b> We also develop distributed algorithms for finding the multi-constrained optimal execution plan to enable delivery of QoS-assured <b>composite</b> <b>services...</b>|$|R
50|$|Building SOA {{requires}} the loose coupling of {{services as a}} starting point. They are termed as atomic services. The {{first step is to}} determine the atomic services. Then build these atomic services for reuse. A large number of such atomic services could be created, upon which composite services will be built. <b>Composite</b> <b>service</b> are services that are built only upon atomic services.|$|E
50|$|The 1103d Engineer Combat Group was inactivated 8 May 1946 and {{reactivated}} 20 January 1947 at Rüsselsheim, Germany. On 5 March 1947, it was redesignated as Headquarters and Headquarters Detachment, 555th <b>Composite</b> <b>Service</b> Group. On 7 March 1949, it {{was further}} redesignated as Headquarters and Headquarters Detachment, 555th Engineer Combat Group and allotted to the Regular Army on 16 February 1951.|$|E
50|$|Since all {{artifacts}} of SOP are well-encapsulated services and all SOP mechanisms, such as shared memory, {{can be provided}} as distributable services, large-scale virtualization can be automated by the SOP runtime environment. Also, the hierarchical service stack of a <b>composite</b> <b>service</b> with the multiple execution graphs associated to its inner services, at each level, provides tremendous opportunities for automated multi-threading to the SOP runtime environment.|$|E
40|$|Abstract. Currently {{exception}} handling for web service orchestrations is {{performed on the}} client side. We have defined <b>composite</b> web <b>services</b> [11] that are not single orchestrations but complete web services that contain all possible orchestrations of their sub-services. Our <b>composite</b> web <b>services</b> can therefore define and perform {{exception handling}} just once for all such orchestrations, on the server side. In this paper we explain and discuss our approach to server-side exception handling by <b>composite</b> <b>services.</b> ...|$|R
30|$|The review investigates how {{existing}} {{approaches for}} fault-tolerant <b>composite</b> <b>services</b> address design diversity issues and also specific {{issues related to}} SOA.|$|R
40|$|The {{integration}} of large systems remains problematic {{in spite of}} advances in <b>composite</b> <b>services</b> approaches. Current <b>composite</b> <b>services</b> approaches can effectively address only the {{integration of}} mechanistic processes. Processes with human interaction, abundant in large systems, are integrated in an ad hoc manner. As a result, a process gap occurs between user needs and implemented systems. The lack of support for human interaction with processes in large systems {{is referred to as}} the composite process-personalization (CPP) challenge. An architecture framework is presented that can systematically address the lack of CPP in current <b>composite</b> <b>services</b> approach. The framework is validated with two case studies, one in the biomedical informatics domain. Citation: R. S. Sadasivam, Architecture Framework for Process-Personalized Composite Services: Service-oriented Architecture, Web Services, Business-Process Engineering, and Human Interaction Management. VDM Verlag, 2008. ISBN 3639087240, 9783639087246...|$|R
5000|$|A service {{inside of}} the {{definition}} of a <b>composite</b> <b>service</b> (an [...] "inner service") is implicitly sequenced through the semantic connectivity of built-in success or failure ports of other inner services with its built-in activation port. When an inner service runs successfully, all the inner services connected to its success port will run next. If an inner service fails, all the services connected to its failure port will run next.|$|E
50|$|SOP {{provides}} {{a mechanism for}} associating {{a special kind of}} <b>composite</b> <b>service,</b> trigger service, to any other service. When that service is consumed, the SOP platform automatically creates and consumes an instance of the associated trigger service with an in-memory copy of the inputs of the triggering service. This consumption is non-intrusive to the execution of the triggering service. A service trigger can be declared to run upon activation, failure or success completion of the triggering service.|$|E
50|$|Based on {{declared}} key input {{values of}} a service instance, the outputs of a non time-sensitive inner service can be cached by the SOP runtime environment when running {{in the context of}} a particular <b>composite</b> <b>service.</b> When a service is cached for particular key input values, the SOP runtime environment fetches the cached outputs corresponding to the keyed inputs from its service cache instead of consuming the service. Availability of this built-in mechanism to the SOP application developer can significantly reduce the load on back-end systems.|$|E
5000|$|If {{third part}} offers atomic <b>services,</b> then <b>composite</b> <b>services</b> may be built by mixing service-oriented {{architecture}} libraries {{as well as}} third party atomic services.|$|R
40|$|Abstract. In {{order to}} answer the complex service {{requirements}} of the user, <b>composite</b> web <b>services</b> have to be constructed correctly and effectively. Various approaches and formalism {{have been used for}} web service composition and integration. The semantic modeling of <b>composite</b> <b>services</b> is necessary for automatic discovery, integration and execution. For this purpose, ontology languages and ontologies have been defined. OWL-S is a OWL-based ontology of <b>services,</b> in which <b>composite</b> processes can be modeled. For reasoning and verification on the <b>composite</b> <b>services,</b> logic-based formalisms have an important role. Concurrent Constraint Transaction Logic is a formalism that provides means for modeling, verification and scheduling of <b>composite</b> web <b>services.</b> In this work, we describe how OWL-S and CCTR can be used together for modeling a complex service and constraints, and make reasoning and verification on this model under the given set of constraints. ...|$|R
40|$|Data service {{provides}} unified {{data model}} for cross-domain data integration, and generates data view through data services composition. A challenging problem is once a primitive data service is updated, how to propagate the update bottom-up {{to the top}} level via several intermediate <b>composite</b> data <b>services,</b> and to ensure the update efficiency of the data view. In this paper, the data operations and their properties are analyzed to facilitate transformation of <b>composite</b> data <b>services,</b> and generate some equivalent <b>composite</b> data <b>services</b> from a user defined <b>composite</b> data <b>service.</b> In addition, the time cost model for the incremental update of a <b>composite</b> data <b>service</b> is built. The model measures the time cost of updating a <b>composite</b> data <b>service</b> within a time unit {{in terms of the}} update frequency and data volume of the primitive data services. Based on the model, a data view update optimization algorithm is proposed to minimize the time cost. Experiments show that our approach can effectively improve the update efficiency of the data view. Data service provides unified data model for cross-domain data integration, and generates data view through data services composition. A challenging problem is once a primitive data service is updated, how to propagate the update bottom-up to the top level via several intermediate <b>composite</b> data <b>services,</b> and to ensure the update efficiency of the data view. In this paper, the data operations and their properties are analyzed to facilitate transformation of <b>composite</b> data <b>services,</b> and generate some equivalent <b>composite</b> data <b>services</b> from a user defined <b>composite</b> data <b>service.</b> In addition, the time cost model for the incremental update of a <b>composite</b> data <b>service</b> is built. The model measures the time cost of updating a <b>composite</b> data <b>service</b> within a time unit in terms of the update frequency and data volume of the primitive data services. Based on the model, a data view update optimization algorithm is proposed to minimize the time cost. Experiments show that our approach can effectively improve the update efficiency of the data view...|$|R
