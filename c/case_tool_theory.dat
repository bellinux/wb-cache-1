0|5087|Public
40|$|In {{this paper}} {{it is argued}} that for CASE environments to be {{considered}} as truly intelligent, they should know about the language of their users and of the domains they are used for. By basing the modeling techniques supported by the <b>CASE</b> <b>tool</b> on linguistic <b>theories</b> and by incorporating Natural Language parsing and generating <b>tools,</b> the <b>CASE</b> environment is able to handle the users' language in an accurate way. More specifically, the CASE environment deals with the meaning of words, instead of the meaningless strings themselves. These meanings, which are retrieved from an online lexicon, are linked to the words used in both the requirements documents {{as well as in the}} conceptual models in order to achieve a certain degree of consistency between the two of them. The base structure of these models is automatically derived by analyzing the textual requirements documents that describe the domain under consideration. This Natural Language analysis consists of parsing the texts and retrieving [...] ...|$|R
40|$|The {{development}} of a <b>CASE</b> <b>tool</b> that supports Jackson’s methods – Problem Frames, JSD and JSP- is urged and justified. Jackson’s methods are sound, and fundamental ideas about design provide unity to his thought; in short, his contributions deserve {{to be part of}} the software engineering curriculum. A <b>CASE</b> <b>tool</b> would help to achieve this end. Moreover, teachers need a <b>CASE</b> <b>tool</b> to teach software engineering effectively – a Jackson methods <b>CASE</b> <b>tool</b> would help demonstrate the benefits of sound design convincingly to students. Finally, a Jackson Methods <b>CASE</b> <b>tool</b> would further research. 1...|$|R
40|$|We {{analyzed}} our {{own experiences}} with designing and using <b>CASE</b> <b>tools</b> in industrial software projects. We also investigated common tool adoption practices. We examined CASE technology {{from the perspective}} of technical and non-technical issues involved in soft-ware development. Our main conclusion is that cur-rent <b>CASE</b> <b>tools</b> are far too oriented on software modeling and construction methods, while other fac-tors that matter to programmers receive little atten-tion. We imagine the creative, problem-solving aspects of software development and perception of a software project from a process, rather than method, perspec-tive. We observed that method-centered <b>CASE</b> <b>tools</b> are not attractive enough to the users. To better meld into the software development practice, <b>CASE</b> <b>tools</b> should adopt a programmer’s mental model of software projects. In particular, <b>CASE</b> <b>tools</b> should support soft aspects of software development as well as rigorous modeling, provide a natural process-oriented develop-ment framework rather than a method-oriented one, and play {{a more active role in}} software development than current <b>CASE</b> <b>tools.</b> Separation of development methods from other aspects that contribute to success-ful software projects does not benefit CASE users, whether programmers or project managers. In this arti-cle, we analyze problems that impede wide adoption of <b>CASE</b> <b>tools</b> and propose remedies to some of the prob-lems. We direct this article to managers involved in <b>CASE</b> <b>tool</b> adoption, <b>CASE</b> <b>tool</b> users, and <b>CASE</b> <b>tool</b> developers. Although we focus on <b>CASE</b> <b>tools</b> that sup-port software development according to some methods (such as structured analysis/design or an object-ori-ented method), we believe our observations apply to other types of software tools, too...|$|R
40|$|For {{developing}} of computer-based {{information systems}} (IS) there nowadays exist {{different kind of}} tools. This study deals with tools for earlier phases (analysis, design), so called upper-CASE. <b>CASE</b> <b>tools</b> usually contain support for one or more ISD-methods. Working with <b>CASE</b> <b>tools</b> means that the ISD-work is both method- and computer-based. This paper {{is concerned about the}} motives for investments in <b>CASE</b> <b>tools.</b> Why do organizations invest in <b>CASE</b> <b>tools?</b> What objectives are the organizations aiming at? This study is also interested in if the stated objectives are reached. Are the motives for using <b>CASE</b> <b>tools</b> fulfilled? 1. Introduction For developing of computer-based information systems (IS) there nowadays exist different kind of tools. The last five years there has been an intensive development of <b>CASE</b> <b>tools</b> (Computer Aided Systems/Software Engineering). The aim of these tools is to assist the system developers. There are tools supporting different phases in information systems [...] ...|$|R
40|$|This {{bachelor}} thesis {{concentrates on}} relationship between <b>CASE</b> <b>tools</b> and integrated development environments. In {{the center of}} concern are <b>CASE</b> <b>tools</b> which support UML notation and automatic generation of source code from UML diagrams to Java object oriented programming language. This bachelor thesis {{is divided into two}} parts. First part concentrates on basic introduction to <b>theory</b> of <b>CASE</b> <b>tools.</b> There we also discuss the utilization of <b>CASE</b> <b>tools</b> in various parts of project, which dealt with creation of information system. In first part is also proposed simplification of projects life cycle to meet creation of simple programs. Theoretical part of thesis continues with brief explanation of object oriented approach and brief description of Java object oriented programming language. The fist part of thesis is ended by brief introduction to UML and there is also description of most important diagrams, which are basis used to generate program code. Second part of this bachelor thesis is concentrated on comparison of several UML <b>CASE</b> <b>tools,</b> which are free for non - commercial use. The comparison is realized through simple exemplary program, which is worked up in each <b>CASE</b> <b>tool.</b> The solution contains basic UML diagrams created in each <b>CASE</b> <b>tool</b> and also generating of source code from these diagrams. In this thesis is also presentation of each <b>CASE</b> <b>tool's</b> reverse engineering and round [...] trip engineering support In the epilogue of this bachelor thesis is summary of contribution of using <b>CASE</b> <b>tools</b> to help realize simple programs...|$|R
40|$|This paper {{details the}} {{selection}} criteria which {{were used to}} choose <b>CASE</b> <b>tools</b> for use in Undergraduate and Postgraduate studies at Deakin University. While the objectives {{for the use of}} <b>CASE</b> <b>tools</b> in a tertiary education environment are different from the business world, the same process of evaluation should be applicable and the results of general interest. The study, which took place in 1990 and 1991, considered 20 different <b>CASE</b> <b>tools.</b> A taxonomy of <b>CASE</b> <b>tools</b> was identified according to the level of support the tool provided during the life cycle of software development. The tools investigated covered the broad range of functionality identified by the study. The goals for a suitable CASE environment for our courses and the evaluation criteria were established. An overview of the products investigated is provided as well as a matrix showing the products against the characteristics of <b>CASE</b> <b>tools.</b> Selection Criteria for <b>CASE</b> <b>Tools</b> Page 2 Introduction This research was requested [...] ...|$|R
40|$|The {{necessity}} of <b>CASE</b> <b>tools</b> for system development is beyond dispute. The {{current generation of}} <b>CASE</b> <b>tools,</b> however, is too inflexible to provide adequate modelling support. One of the proposed solutions to this problem {{is the development of}} so-called CASE-shells. A CASE shell is a method independent <b>CASE</b> <b>tool,</b> which may be instantiated with a specific method to become a <b>CASE</b> <b>tool</b> supporting that method. As such, a CASE shell provides complete flexibility. This paper does not address the benefits of CASE shells, as they are completely clear, but focuses on the feasibility of this concept from a theoretical as well as a practical point of view. 1 Introduction <b>CASE</b> <b>tools</b> are currently considered to be an indispensable part of the systems engineer 's toolkit. Justification of <b>CASE</b> <b>tools</b> is no longer subject of debate. and [Flo 86]). Naturally, the range of the required facilities should be thoroughly understood before using automated tools, see also [BS 87]. In this reference an environme [...] ...|$|R
40|$|Many {{claims have}} been made about the {{benefits}} of CASE and many problems have been reported about software maintenance. This paper discusses two aspects from a survey recently conducted in Singapore on Software Engineering Practices. These two aspects include: how organisations in Singapore use <b>CASE</b> <b>tools</b> and how organisations in Singapore practise software maintenance. The survey indicated that the level of usage of <b>CASE</b> <b>tools</b> in Singapore is fairly low. Organizations in Singapore are generally well aware of the benefits and problems in CASE. The major barriers to the use of <b>CASE</b> <b>tools</b> were the high cost of implementing <b>CASE</b> <b>tools</b> and the long learning curve to use <b>CASE</b> <b>tools</b> effectively. On the practice of software maintenance, the survey found that the greatest problem with it was staff turnover. 2 1...|$|R
40|$|Selecting {{the most}} {{appropriate}} DoDAF (Department of Defense Architecture Framework) <b>CASE</b> <b>tools</b> for C 4 I (Command, Control, Communications, Computers and Intelligence) applications is a challenging task. Several Multi-Criteria Decision Making (MCDM) techniques are being explored to tackle the problem. Among them, we found that two MCDM techniques namely AHP and PROMETHEE are suitable for the selection process of <b>CASE</b> <b>tools.</b> In order to evaluate and select the desired <b>CASE</b> <b>tools</b> using those MCDM techniques, some criteria are required. This paper proposes a selection model for DoDAF-based <b>CASE</b> <b>tools,</b> which incorporates these criteria from multiple decision makers {{in the context of}} C 4 I applications. We evaluated the selection model using AHP and PROMETHEE. From the test results, we found that AHP is more preferable than PROMETHEE for evaluating and selecting DoDAF <b>CASE</b> <b>tools...</b>|$|R
40|$|The use of Computer Aided Software Engineering (<b>CASE)</b> <b>tools</b> for {{teaching}} object-oriented systems analysis and design (OOSAD) has many potential benefits, {{but there are}} also several problems associated with the usage of these tools. A large portion of these problems relate to the usability and learnability of these tools. Learnability {{is one of the most}} important attributes of usability and refers to the capability of the system to enable the user to learn its application. The main research question that this study aims to address is “How can the learnability of OO <b>CASE</b> <b>tools</b> for computing education in South Africa be evaluated?”. In order to answer this question several frameworks for evaluating <b>CASE</b> <b>tool</b> usability and learnability were investigated. One of these frameworks, as proposed by Senapathi, was selected as being the most appropriate for evaluating <b>CASE</b> <b>tool</b> learnability for computing education. This framework maintains that the learnability of a <b>CASE</b> <b>tool</b> is dependent on context of use factors such as the tool used, as well as user characteristics such as gender. The primary aim of this research was thus to validate Senapathi's framework for <b>CASE</b> <b>tool</b> learnability in a South African context. A secondary aim of the research was to extend the implementation of the framework in order to enable the comparison of two <b>CASE</b> <b>tools</b> and to support the inclusion of other user characteristics. An experiment was performed at the Nelson Mandela Metropolitan University (NMMU) in 2006. The participants recruited for this experiment were second year computing students at NMMU. During this experiment, the learnability of two OO <b>CASE</b> <b>tools,</b> namely IBM's Rational Software Modeller and Microsoft's Visio, was evaluated and compared. The quantitative and qualitative results supported Senapathi's results and showed that her framework could be used to evaluate <b>CASE</b> <b>tool</b> learnability and could be adapted to evaluate two <b>CASE</b> <b>tools.</b> The results also showed that the majority of the participants rated the learnability of Microsoft Visio higher for both tasks and that the main reasons participants preferred Visio was due to its simplicity, familiarity and recoverabilit...|$|R
40|$|While <b>CASE</b> <b>tools</b> {{for formal}} {{methods have been}} {{relatively}} successful in industry, the up-take of the theorem proving technology has been quite slow. This suggests that more focus should be put on specification notations and pragmatic features of existing <b>CASE</b> <b>tools</b> in building proof support tools. This paper presents a prototype integrated CASE/TP tool which combines {{the benefits of a}} general-purpose theorem prover called Isabelle with those of a commercial <b>CASE</b> <b>tool</b> for the VDM-SL formal specification language [...] -the IFAD VDM-SL Toolbox. The integrated tool supports pragmatic test and rigorous proof at the same time. Moreover, the tool supports proofs in the notation of the <b>CASE</b> <b>tool</b> by handling "difficult" constructs such as patterns and cases expressions in an untraditional way using reversible transformations. 1 Introduction <b>CASE</b> <b>tools</b> for formal software development support the validation of specifications through static checks and animation. Proofs can add rigor to the software [...] ...|$|R
40|$|Software Engineering {{is a new}} {{discipline}} {{aimed at}} {{the improvement of the}} production of large, quality software systems. Interest in <b>CASE</b> <b>tools</b> has grown because of the important role they play in supporting the software development process. Studies show these complex and sophisticated tools {{have a positive impact on}} quality and productivity but they have been slow to be adopted by industry; this is partially explained by the difficulty of learning to use the <b>tool.</b> The constructivist <b>theory</b> of knowledge and learning views knowledge not as pre-existing, but constructed. Individuals are different and these differences affect how a user performs when using a software package. This first phase of our research examines the learning styles of our students and addresses issues confronting them when using a complex software package; namely Rational Rose, our chosen <b>CASE</b> <b>tool...</b>|$|R
50|$|Another common way to {{distinguish}} <b>CASE</b> <b>tools</b> is {{the distinction between}} Upper CASE and Lower <b>CASE.</b> Upper <b>CASE</b> <b>Tools</b> support business and analysis modeling. They support traditional diagrammatic languages such as ER diagrams, Data flow diagram, Structure charts, Decision Trees, Decision tables, etc. Lower <b>CASE</b> <b>Tools</b> support development activities, such as physical design, debugging, construction, testing, component integration, maintenance, and reverse engineering. All other activities span the entire life-cycle and apply equally to upper and lower CASE.|$|R
40|$|Assistance is provided, in {{software}} development process, to Analysts in drawing UML diagrams and others {{by means of}} <b>CASE</b> <b>tools.</b> However, {{the task of the}} Stakeholder discourse understanding, a previous process in diagram drawing, is not supported by traditional <b>CASE</b> <b>tools.</b> In order to complete this task, Natural Language Processing has proposed a new kind of <b>CASE</b> <b>tools,</b> including both natural language interpretation and UML diagrams generation. We introduce, in this paper, UNCâ€“Diagrammer, a novel <b>CASE</b> <b>tool</b> for graphically representing the Stakeholder discourse by means of Preconceptual Schemas. We also show that UNC-Diagrammer is capable of automatically transforming Pre-conceptual Schemas into three UML 2. 0 diagrams. We finally demonstrate the use of UNCâ€“Diagrammer through an example...|$|R
40|$|Abstract—Model-based <b>CASE</b> <b>tools</b> provide {{mechanisms}} {{to capture and}} store heterogeneous artifacts produced during the software development process. These tools incorporate a meta-model describing artifact types and traceability links. Although model-based <b>CASE</b> <b>tools</b> provide required means to create and link different artifact types, still the process of linking artifacts is primarily manual resulting in missing or broken traceability links. This paper proposes a novel approach to create and utilize a project-specific ontology derived from the textual and structural information available in the development artifacts to assist the traceability link creation process. We discuss the benefits and challenges of incorporating the proposed approach in a model-based <b>CASE</b> <b>tool.</b> Keywords-artifacts, <b>CASE</b> <b>tool,</b> information retrieval, ontol-ogy, traceability lin...|$|R
50|$|MetaCASE tools allow {{definition}} {{and construction of}} <b>CASE</b> <b>tools</b> that support arbitrary methodologies. A <b>CASE</b> <b>tool</b> customizer first specifies the desired methodology and customizes the corresponding <b>CASE</b> <b>tool.</b> Then software developers use that <b>CASE</b> <b>tool</b> to develop software systems. An advantage {{of this approach is}} that the same tool is used with different methodologies, which in turn, reduces the learning curve and consequently the cost. Any desired methodology can be automated or modified by the developing organization which provides a dynamic capability in today's dynamic and competitive world. From another perspective this technology {{can be used as a}} practical teaching tool considering the shortened length of development and learning times that suits academic course periods.|$|R
40|$|The current {{generation}} of <b>CASE</b> <b>tools</b> is too inflexible to provide adequate modelling support. One of the proposed solutions to this problem {{is the development of}} so-called CASE shells. A CASE shell is a method independent <b>CASE</b> <b>tool,</b> which may be instantiated with a specific method to become a <b>CASE</b> <b>tool</b> supporting that method. As such, a CASE shell provides complete flexibility. This paper does not address the benefits of CASE shells, as they are completely clear, but focuses on the feasibility of this concept from a theoretical as well as a practical point of view. Keywords: Computer-aided software engineering (CASE), meta-modelling, early phases, CASE shell 1 Introduction Nowadays, the use of <b>CASE</b> <b>tools</b> as an indispensable part of the systems engineer's toolkit is common practice. It is believed that <b>CASE</b> <b>tools</b> are becoming the most important contributors to the continuing development in information systems development methods, see [Avison and Fitzgerald, 1988] and [Bubenko, 1988 [...] ...|$|R
40|$|The NASA Engineering and Safety Center (NESC) was {{requested}} {{to perform an}} independent assessment of the mitigation of the Constellation Program (CxP) Risk 4421 {{through the use of}} computer-aided software engineering (<b>CASE)</b> <b>tools.</b> With the cancellation of the CxP, the assessment goals were modified to capture lessons learned and best practices in the use of <b>CASE</b> <b>tools.</b> The assessment goal was to prepare the next program for the use of these <b>CASE</b> <b>tools.</b> The outcome of the assessment is contained in this document...|$|R
40|$|Abstract. We {{present the}} results of a {{research}} work targeted to understanding the domains and consequences of <b>CASE</b> <b>tools</b> usage in Nokia. We aim to evaluate the importance of the various <b>CASE</b> <b>tools</b> features, as rated by our developers, and how well such features are implemented in currently available <b>CASE</b> <b>tools.</b> A structured questionnaire was sent to our most experienced developers and CASE users. From this survey, it emerged that <b>CASE</b> <b>tools</b> support is reputed most useful for the following functions: graphical drawing, automatic documentation generation and storage of diagrams. The results hint to a mismatch between the features required by the developers and those offered by CASE products. Further research is needed before more definite conclusions can be drawn...|$|R
40|$|There are {{numerous}} studies which show that <b>CASE</b> <b>Tools</b> greatly facilitate software development. As {{a result of}} these advantages, an increasing amount of software development is done with <b>CASE</b> <b>Tools.</b> As more software engineers become proficient with these tools, their experience and feedback lead to further development with the tools themselves. What has not been widely studied, however, is the reliability and efficiency of the actual code produced by the <b>CASE</b> <b>Tools.</b> This investigation considered these matters. Three segments of code generated by MATRIXx, one of many commercially available <b>CASE</b> <b>Tools,</b> were chosen for analysis: ETOFLIGHT, a portion of the Earth to Orbit Flight software, and ECLSS and PFMC, modules for Environmental Control and Life Support System and Pump Fan Motor Control, respectively...|$|R
40|$|The {{goal of this}} master’s {{thesis is}} to develop a {{methodology}} for <b>CASE</b> <b>tool</b> selection. This work consists of two parts. The first part is about software engineering, methodologies for IS development and its categorization, <b>CASE</b> <b>tools</b> and meta-modeling. The rest of the part is about methodological framework and current situation on the <b>CASE</b> <b>tools</b> market. The second part contains the methodology for selection of <b>CASE</b> <b>tool.</b> It is an open methodology and it offers a set of recommendations and procedures that are derived from best practices gathered from available resources and other similar methodologies. The main idea of this work is to devise a methodology for the <b>CASE</b> <b>tools</b> selection. The selection process is divided into several different segments that are analyzed in detail. The methodology distinguishes between both situations when the company either owns an existing CASE technology or it does not use CASE technology yet. The methodology suggests intensive internal communication during the selection and emphasizes the involvement of future users in the process. It is important to increase chance for smooth implementation and successful acceptance of the CASE in the company. The importance of considering differences in structure, character and the scope of projects, requirements for project management and maturity level of processes during the <b>CASE</b> <b>tool</b> selection process is highlighted...|$|R
40|$|This {{technical}} report identifies {{issues involved in}} the acquisition of Computer Aided Software Engineering (<b>CASE)</b> <b>tools.</b> Among the issues identified and discussed are cost, performance, process support, maintenance, data management, tool integration, and standardization. The report concludes with recommendations intended for individuals or groups responsible for acquiring <b>CASE</b> <b>tools...</b>|$|R
40|$|A {{specification}} of an information system using a particular computer-aided software engineering (CASE) method describes a particular system aspect. The specification {{can be represented}} as a population of a database schema in a repository supporting the <b>CASE</b> <b>tool.</b> Integrating several system aspects requires that their semantic correspondences also be determined. The technique presented uses a database schema language with deductive capability to capture the semantic correspondences. It promises to support multiple <b>CASE</b> <b>tools</b> covering several aspects. Semantic correspondence provides insight into why integrating <b>CASE</b> <b>tools</b> for large-scale enterprise modelling methods is proving difficult...|$|R
40|$|In {{this paper}} issues of {{creating}} <b>case</b> <b>tools,</b> implementing capability maturity models, for software process improvement are analyzed. A range of aspects {{of using the}} maturity models were analyzed to this end; these aspects were taken into consideration when designing the <b>case</b> <b>tools</b> structure. The group of existing <b>case</b> <b>tools</b> is reviewed, their benefits and limitations are displayed. The inner structures for organizing the model and data under selection are analyzed. Solutions and issues regarding creation of capability maturity models development environments are discussed. Recommendations {{for the development of}} analogous tools are presented...|$|R
40|$|This paper {{discusses}} {{an intelligent}} and Internet-based Telecommunication System Specification Model (TSSM) using Computer Aided Systems Engineering <b>tools</b> (<b>CASE</b> <b>tools).</b> TSSM implements <b>CASE</b> <b>tools</b> to mechanize its lifecycle development maintenance and integration process. This model is developed {{to improve the}} system analysts (SA) efforts in their design and development of major software and hardware initiatives. This model also improves the SA effectiveness by guiding them through the system's Lifecycle Development Process (LDP). The <b>CASE</b> <b>tools</b> are used to support, integrate, and monitor all LDP functions of the system...|$|R
40|$|The goal of any MetaCASE {{system is}} the rapid, cheap {{development}} of <b>CASE</b> <b>tools,</b> typically to support customised development methods. Anything which impinges on this simplicity nullifies the advantage of using such technology in the first place. Following a review of related work, this paper describes some problems with using MetaMOOSE, an established object-oriented framework for <b>CASE</b> <b>tools</b> and presents a solution {{in the form of}} a graphical tool (MetaBuilder) which allows metamodels, and hence <b>CASE</b> <b>tools,</b> to be constructed rapidly from object-oriented components. The tool forms a front end to the MetaMOOSE system...|$|R
40|$|Research into {{software}} modelling/notations and <b>CASE</b> <b>tools</b> {{was carried}} out on the Genesys Solutions software-company; a company committed to the XP management development methodology. Information pertaining to the student's background, experiences and career plans was collected to see what effect this had on choice of development tools/methodologies. Of particular interest was the overall impression the Genesys students had regarding <b>CASE</b> <b>tools.</b> Initial findings presented indicate that proponents of "agile" methodologies still find many aspects of traditional software engineering useful. This is apparent from the ratings given to certain modelling notations and certain <b>CASE</b> <b>tool</b> features...|$|R
40|$|Automated {{traceability}} utilizes {{information retrieval}} methods to dynamically generate traceability links on an as-needed basis. Although a significant {{body of research}} has demonstrated the feasibility of automated traceability a rather ad-hoc approach that often involves significant human effort has previously been used to import the traceable data from 3 rd party <b>case</b> <b>tools</b> into the trace tool. This paper describes an architectural framework and corresponding prototype tool for providing “in-place ” traceability in which data residing in distributed 3 rd party <b>case</b> <b>tools</b> is automatically parsed to extract information needed to service trace queries. The framework provides extensibility for adding new types of traceable artifacts and 3 rd party <b>case</b> <b>tools.</b> An open source model is proposed in which organizations {{contribute to the development}} of specialized adapters for different <b>case</b> <b>tools</b> and artifact types...|$|R
40|$|Abstract⎯During {{the last}} couple of decades, CASE (Computer Aided Software Engineering) tools have played a {{critical}} role in improvement of software productivity and quality by assisting tasks in software development processes. Many initiatives in the field were pursued in the 1980 ’s and 1990 ’s to provide more effective CASE technologies and development environments. Even though the CASE field is no longer active research area, most software development teams use a huge range of <b>CASE</b> <b>tools</b> that are typically assembled over some period with the hope of productivity and quality improvements throughout the software development process. The variety and proliferation of tools in the current CASE market makes it difficult to understand what kinds of tasks are supported and how much effort can be reduced by using <b>CASE</b> <b>tools.</b> In this paper, we provide a classification of <b>CASE</b> <b>tools</b> by activity coverage in a software development lifecycle. We also report a experimental result of Bayesian analysis on <b>CASE</b> <b>tool</b> effects with a extended set of tool rating scales from COCOMO (COnstructive COst MOdel) II with which <b>CASE</b> <b>tools</b> are effectively evaluated...|$|R
5000|$|... #Subtitle level 2: Integration with Oracle Designer <b>CASE</b> <b>Tool</b> ...|$|R
5000|$|... #Subtitle level 3: Differences between metaCASE and <b>CASE</b> <b>tools</b> ...|$|R
50|$|Law and corpus {{linguistics}} (LCL) {{is a new}} academic sub-discipline {{that uses}} large databases of examples of language usage equipped with tools designed by linguists called corpora to better get at the meaning of words and phrases in legal texts (statutes, constitutions, contracts, etc.). Thus, LCL is the application of corpus linguistic <b>tools,</b> <b>theories,</b> and methodologies to issues of legal interpretation {{in much the same}} way law and economics is the application of economic <b>tools,</b> <b>theories,</b> and methodologies to various legal issues.|$|R
50|$|Another {{criticism}} {{was the focus}} on design documents, {{to the exclusion of}} Computer-Aided Software Engineering (<b>CASE)</b> <b>tools</b> being used in the industry. Vendors would often use the <b>CASE</b> <b>tools</b> to design the software, then write several standards-required documents to describe the CASE-formatted data. This created problems matching design documents to the actual product.|$|R
40|$|Computer-Aided Software Engineering (<b>CASE)</b> <b>tools</b> {{encourage}} {{users to}} codify the specification {{for the design}} of a system early in the development process. They often use graphical formalisms, simulation, and prototyping to help express ideas concisely and unambiguously. Some tools provide little more than syntax checking of the specification but others can test the model for reachability of conditions, nondeterminism, or deadlock. Formal methods include powerful tools like automatic model checking to exhaustively check a model against certain requirements. Integrating formal techniques into the system development process is an effective method of providing more thorough analysis of specifications than conventional approaches employed by Computer-Aided Software Engineering (<b>CASE)</b> <b>tools.</b> In order to create this link, the formalism used by the <b>CASE</b> <b>tool</b> must have a precise formal semantics that can be understood by the verification <b>tool.</b> The <b>CASE</b> <b>tool</b> STATEMATE makes use of an [...] ...|$|R
40|$|Reverse Engineering is {{becoming}} increasingly important in the software development world today as many organizations are battling to understand and maintain old legacy systems. Today’s software engineers have inherited these legacy systems which they may know little about yet have to maintain, extend and improve. Currently there is no framework or strategy that an organisation can use to determine which UML <b>CASE</b> <b>tool</b> to use. This paper sets down such a framework, to allow organisations to base their tool choice on this reliable framework. We present the REM 4 j tool, an automated tool, for benchmarking UML <b>CASE</b> <b>tools,</b> we then use REM 4 j to carry out one such evaluation with eleven UML <b>CASE</b> <b>tools.</b> This framework allows us to reach a conclusion as to {{which is the most}} accurate and reliable UML <b>CASE</b> <b>tool.</b> 1...|$|R
40|$|Since first {{published}} in 1998, the Enterprise JavaBeans technology has become a popular choice {{for the development of}} middleware systems. Even though its popularity, the technology is considered quite complex and rather difficult to master. The main contribution to its complexity is the part of the EJB that deals with persistence. The most common and most popular way of implementing EJB persistence is called Container Managed Persistence (CMP). Today, developers consider the utilization of <b>CASE</b> <b>tools</b> for the EJB development process obvious. Despite this, available <b>CASE</b> <b>tools</b> have very limited support for the complete CMP development process. In this thesis we have isolated steps within the CMP development process that could benefit from <b>CASE</b> <b>tool</b> support. We have then identified possible solutions and remedies to address these steps. These solutions where then implemented in a full fledged <b>CASE</b> <b>tool,</b> called CMP Developer...|$|R
