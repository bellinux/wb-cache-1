161|1432|Public
25|$|Fields, or <b>class</b> <b>variables,</b> can be {{declared}} inside the class body to store data.|$|E
25|$|The system ACA0 is a {{conservative}} extension of first-order arithmetic (or first-order Peano axioms), defined as the basic axioms, plus the first order induction axiom scheme (for all formulas φ involving no <b>class</b> <b>variables</b> at all, bound or otherwise), {{in the language of}} first order arithmetic (which does not permit <b>class</b> <b>variables</b> at all). In particular it has the same proof-theoretic ordinal ε0 as first-order arithmetic, owing to the limited induction schema.|$|E
2500|$|If a cmdlet {{receives}} either pipeline input or command-line parameter input, {{there must}} be a corresponding property in the class, with a mutator implementation. PowerShell invokes the mutator with the parameter value or pipeline input, which is saved by the mutator implementation in <b>class</b> <b>variables.</b> These values are then referred to by the methods which implement the functionality. Properties that map to command-line parameters are marked by ParameterAttribute and are set before the call to BeginProcessing (...) [...] Those which map to pipeline input are also flanked by ParameterAttribute, but with the ValueFromPipeline attribute parameter set.|$|E
5000|$|In this C++ example, the <b>class</b> <b>variable</b> [...] is {{incremented}} on each {{call to the}} constructor, so that [...] always {{holds the}} number of Requests that have been constructed, and each new Request object is given a [...] in sequential order. Since [...] is a <b>class</b> <b>variable,</b> {{there is only one}} object in contrast, each Request object contains its own distinct [...] field.|$|R
5000|$|This {{means that}} under the above {{independence}} assumptions, the conditional distribution over the <b>class</b> <b>variable</b> [...] is: ...|$|R
5000|$|The [...] class itself doesn't do {{anything}} here, The <b>class</b> <b>variable</b> [...] is a Dictionary/Map used to store [...] instances by [...]|$|R
2500|$|A {{formula is}} called Σ01 (or {{sometimes}} Σ1), respectively Π01 (or sometimes Π1) when it {{of the form}} ∃m•(φ), respectively ∀m•(φ) where φ is a bounded arithmetical formula and m is an individual variable (that is free in φ). [...] More generally, a formula is called Σ0n, respectively Π0n when it is obtained by adding existential, respectively universal, individual quantifiers to a Π0n1, respectively Σ0n1 formula (and Σ00 and Π00 are all equivalent to Δ00). [...] By construction, all these formulas are arithmetical (no <b>class</b> <b>variables</b> are ever bound) and, in fact, by putting the formula in Skolem prenex form one can see that every arithmetical formula is equivalent to a Σ0n or Π0n formula for all large enough n.|$|E
5000|$|Metaclass - {{initializing}} <b>class</b> <b>variables,</b> instance creation messages ...|$|E
5000|$|Works {{with any}} parameterizable feature (<b>class</b> <b>variables,</b> cluster detection, etc..) ...|$|E
3000|$|... [*]∈[*]{+ 1,[*]−[*] 1 } {{denote the}} <b>class</b> <b>variable</b> (MC or non-MC) {{which we can}} obtain by the doctor’s manual annotation. Let MU [...]...|$|R
5000|$|In {{object-oriented}} programming with <b>classes,</b> an instance <b>variable</b> is a variable defined {{in a class}} (i.e. a member variable [...] ), for which each instantiated object of the class has a separate copy, or instance. An instance variable {{is similar to a}} <b>class</b> <b>variable.</b>|$|R
30|$|These {{equations}} {{allow us}} to estimate the likelihood ratio as defined by (1). Note that this model extends PLSA by introducing the <b>class</b> <b>variable</b> [22].|$|R
50|$|Initialization: invokes Java {{code that}} initializes <b>class</b> <b>variables</b> to their proper {{starting}} values.|$|E
5000|$|Preparation: allocates {{memory for}} <b>class</b> <b>variables</b> and {{initializing}} the memory to default values ...|$|E
50|$|Fields, or <b>class</b> <b>variables,</b> can be {{declared}} inside the class body to store data.|$|E
30|$|There {{are three}} <b>classes</b> of <b>variables</b> {{on which the}} {{theoretical}} perspective {{of this paper is}} based. The first <b>class</b> of <b>variables</b> is related to complementary factors such as geography, low human capital, and poor infrastructure. The second <b>class</b> involves <b>variables</b> related to profit appropriation represented by government properties including corruption, taxes, crime, judicial system, political stability, uncertain economic policies, regulations, and market properties such as information failure and coordination failure. 1 The third <b>class</b> of <b>variables</b> covers variables such as those related to access to external finance.|$|R
40|$|Abstract. Bayes-N is an {{algorithm}} for Bayesian network {{learning from}} data based on local measures of information gain, applied to problems {{in which there}} is a given dependent or <b>class</b> <b>variable</b> and a set of independent or explanatory variables from which we want to predict the <b>class</b> <b>variable</b> on new cases. Given this setting, Bayes-N induces an ancestral ordering of all the variables generating a directed acyclic graph in which the <b>class</b> <b>variable</b> is a sink variable, with a subset of the explanatory variables as its parents. It is shown that classification using this variables as predictors performs better than the naive bayes classifier, and at least as good as other algorithms that learn Bayesian networks such as K 2, PC and Bayes- 9. It is also shown that the MDL measure of the networks generated by Bayes-N is comparable to those obtained by these other algorithms...|$|R
40|$|SAlthough the <b>class</b> <b>variable</b> {{is usually}} nominal, there exist {{supervised}} classification problems {{in which there}} is an order in the classes. Two mathematical programming formulations that take the ordinal character of the <b>class</b> <b>variable</b> into account {{in the design of the}} classifier are presented. As solving these models to optimality is computationally difficult for large instances, fast heuristics are developed. The obtained classifiers are evaluated on both simulated and real world datasets. A credit risk application is worked out in detail and illustrates how our approach can be used successfully in practice. status: publishe...|$|R
5000|$|Fields, or <b>class</b> <b>variables,</b> can be {{declared}} inside the class body to store data.class Foo{ double foo;} ...|$|E
5000|$|<b>Class</b> <b>variables</b> - {{belong to}} the class as a whole; {{there is only one}} copy of each one ...|$|E
5000|$|Local or <b>class</b> <b>variables</b> must be {{preceded by}} [...] (indicates an {{immutable}} variable) or [...] (indicates a mutable variable).|$|E
50|$|In {{object-oriented}} programming with <b>classes,</b> a <b>class</b> <b>variable</b> is a variable defined {{in a class}} of which a single copy exists, regardless of how many instances of the class exist.|$|R
3000|$|... [...]. Equation (1) is a {{weighted}} mixture of word distributions called aspect model [14]. The aspect {{model is a}} latent variable model for co-occurrence data that associates an unobserved <b>class</b> <b>variable</b> [...]...|$|R
30|$|When {{modeling}} the annual seasonality, the Gregorian calendar is usually {{used in the}} load forecasting models. It dissects the days of a year into 12 months based on the Moon’s orbit around the earth. Many literature directly used month as a <b>class</b> <b>variable</b> in the load forecasting model [7, 9, 10, 12]. Some other literature reported the usage of season as a <b>class</b> <b>variable</b> in the load forecasting model, where the season is usually pre-defined by grouping the 12 months of a year into summer and winter periods, four seasons, or four seasons plus some transition seasons [15, 16].|$|R
50|$|The system ACA0 is a {{conservative}} extension of first-order arithmetic (or first-order Peano axioms), defined as the basic axioms, plus the first order induction axiom scheme (for all formulas φ involving no <b>class</b> <b>variables</b> at all, bound or otherwise), {{in the language of}} first order arithmetic (which does not permit <b>class</b> <b>variables</b> at all). In particular it has the same proof-theoretic ordinal ε0 as first-order arithmetic, owing to the limited induction schema.|$|E
5000|$|Methods and <b>Class</b> <b>Variables</b> {{are grouped}} into classes (by PHP), {{which are in}} turn grouped into {{packages}} in a Class DocBlock ...|$|E
5000|$|Class methods - {{belong to}} the class {{as a whole and}} have access only to <b>class</b> <b>variables</b> and inputs from the {{procedure}} call ...|$|E
5000|$|... struct Request { static int count; int number; Request (...) { number = count; // modifies the {{instance}} variable [...] "this->number" [...] ++count; // modifies the <b>class</b> <b>variable</b> [...] "Request::count" [...] }};int Request::count = 0; ...|$|R
50|$|Within each latent <b>class,</b> the {{observed}} <b>variables</b> are statistically independent. This {{is an important}} aspect. Usually {{the observed}} variables are statistically dependent. By introducing the latent variable, independence is restored {{in the sense that}} within <b>classes</b> <b>variables</b> are independent (local independence). We then say that the association between the observed variables is explained by the classes of the latent variable (McCutcheon, 1987).|$|R
5000|$|... struct Request { static int count1; // {{variable}} {{name is not}} of importance int number; Request (...) { number = count1; // modifies the instance variable [...] "this->number" [...] ++count1; // modifies the <b>class</b> <b>variable</b> [...] "Request::count1" [...] }};int Request::count1 = 0; ...|$|R
5000|$|Instance methods - {{belong to}} {{individual}} objects, and {{have access to}} instance variables for the specific object they are called on, inputs, and <b>class</b> <b>variables</b> ...|$|E
5000|$|... ===Static member {{variables}}=== In C++, member variables declared as [...] inside class definitions are <b>class</b> <b>variables</b> (shared {{between all}} class instances, {{as opposed to}} instance variables).|$|E
50|$|In some languages, <b>class</b> <b>variables</b> {{and class}} methods are either statically resolved, not via dynamic dispatch, or their memory statically {{allocated}} at compile time (once {{for the entire}} class, as static variables), not dynamically allocated at run time (at every instantiation of an object). In other cases, however, either or both of these are dynamic. For example, if classes can be dynamically defined (at run time), <b>class</b> <b>variables</b> of these classes are allocated dynamically when the class is defined, and in some languages class methods are also dispatched dynamically.|$|E
50|$|A <b>class</b> <b>variable</b> {{is not an}} {{instance}} variable. It is a special type of class attribute (or class property, field, or data member). The same dichotomy between instance and class members applies to methods ("member functions") as well; a class may have both instance methods and class methods.|$|R
40|$|Self-Monitoring {{scores were}} {{significantly}} {{influenced by the}} social context that respondents considered while completing it. Normal distributions were generated within testing conditions. Bimodal distributions were generally found across testing conditions and within a no context specified condition, suggesting item ambiguity might be leading to the scale’s <b>class</b> <b>variable</b> interpretation...|$|R
30|$|In this study, we are {{interested}} in supervised learning technique that finds the best described computer model from a dataset with the correct <b>class</b> <b>variable.</b> Support vector machine {{is one of the most}} well-known machine-learning techniques. The technique was proposed by Vladimir Vapnik for classification and regression [11, 16, 24].|$|R
