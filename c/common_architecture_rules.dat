0|1643|Public
5000|$|ISO 19125-1:2004 Geographic {{information}} -- Simple feature access -- Part 1: <b>Common</b> <b>architecture</b> ...|$|R
50|$|Rule-based Modeling Core: Procedural {{modeling}} {{based on}} CGA (computer generated <b>architecture)</b> <b>rules</b> allows to control mass, geometry assets, proportions, or texturing of buildings or streets on a citywide scale.|$|R
5000|$|OpenGIS Implementation Specification for Geographic {{information}} - Simple feature access - Part 1: <b>Common</b> <b>architecture</b> (05-126, 06-103r3, 06-103r4), current version 1.2.1 ...|$|R
40|$|Software {{product line}} are often {{developed}} through reengineering existing products and legacy applications. In such cases {{it is not}} uncommon for the behavioural and quality characteristics of individual product architectures to be inconsistent with those of the <b>common</b> <b>architecture.</b> Successful development of product lines dictate that those inconsistencies be resolved. The resolution process involves bringing the product architecture into structural, semantic and quality attribute-related congruence with the <b>common</b> <b>architecture.</b> Additional steps must be taken to ensure their continued conformance in order to facilitate subsequent maintenance and evolution activities. In this paper, we describe a simple design-time technique that aims to ensure that quality attribute responses of individual product architectures are in conformance with those of the <b>common</b> <b>architecture.</b> The technique is based on the concept of variation points. 1...|$|R
5000|$|The NeuralBuilder centers {{the design}} {{specifications}} {{on the specific}} neural network architecture the user wishes to build. Some of the most <b>common</b> <b>architectures</b> include: ...|$|R
5000|$|These tribes, though {{physically}} and administratively separated, shared <b>common</b> <b>architecture,</b> such as hut structures consisting of circular rooms with tall roofs inside wooden palisades.|$|R
50|$|The {{wheel and}} spoke is best {{used in an}} {{environment}} where several projects have <b>common</b> <b>architecture</b> or feature-set that can be abstracted by an API.|$|R
50|$|The Haskell Cabal is the <b>Common</b> <b>Architecture</b> for Building Applications and Libraries; it {{aids in the}} {{packaging}} and distribution of software packages. It is contained in the Haskell Platform.|$|R
5000|$|Joan Bresnan {{was honored}} in August 2005 with a festschrift {{entitled}} <b>Architectures,</b> <b>Rules,</b> and Preferences: A Festschrift for Joan Bresnan, published by CSLI Publications in December 2007 (...) [...] In 2016, she {{was selected as}} ACL (Association for Computational Linguistics) Lifetime Achievement Award winner.|$|R
40|$|This {{research}} {{investigates the}} procedure {{for the design of}} an integrated e-Business system architecture from the viewpoint to support the fulfillment of the business strategic goals and to minimize the total system life-cycle cost. A model for describing the relationship between the e-Business information architecture and the corporate objectives was developed first. This model was then used for the resolution of design problems of the integrated e-Business information system architecture. These problems include defining corporate e-Business strategic objectives, developing the business process model and identifying core processes, establishing the e-Business <b>common</b> <b>architecture,</b> mapping core processes to e-Business <b>common</b> <b>architecture</b> components, mapping the e-Business <b>common</b> <b>architecture</b> to the specific commercial e-Business system. Finally, a model for the design of an integrated e-Business architecture is proposed, which includes: (1) the e-Business knowledge library; and (2) the design procedure of the integrated architecture. A case study of a domestic electronic company is presented to illustrate the construction of the integrated e-Business architecture...|$|R
50|$|The {{architecture}} of the Adelphi Hotel and DCM Architects have contributed a philosophy of playfulness to Australian architecture, giving a sense of absurdness, exaggerating <b>common</b> <b>architecture</b> principles to an extreme degree.|$|R
50|$|Unlike System/360 {{which offered}} {{a series of}} {{processors}} with a <b>common</b> <b>architecture,</b> the 8000 was designed with a single main processor to which external components could be added to increase performance.|$|R
50|$|This <b>common</b> <b>architecture</b> is also {{effective}} for {{the distribution of}} other atomic commitment protocols besides 2PC, since all such protocols use the same voting mechanism and outcome propagation to protocol participants.|$|R
40|$|<b>Common</b> <b>architecture</b> of {{cytokine}} receptors and G-protein coupled receptors (GPCRs) may underlie pathological receptor heteromer {{formation and}} signaling. Here, we clarify how chemokines and cytokines {{can participate in}} pathogenic processes of Parkinson's disease, especially in dopaminergic neurons of substantia nigra. Possible <b>common</b> <b>architecture</b> of GPCRs and cytokine receptors suggests that they may act as molecular switches similar to the prototypical innate immune receptors: Toll-like receptors. Thus, pathological signaling (as well as trafficking and internalization) of receptors may be initiated by their incorrect dimerization depending on direct or indirect (via adaptor proteins) receptorâ€“receptor interactions, leading to neuroinflammatory responses...|$|R
5000|$|Dalrymple, Mary, Ronald M. Kaplan, and Tracy Holloway King. 2008. The Absence of Traces: Evidence from Weak Crossover. In <b>Architectures,</b> <b>Rules,</b> and Preferences: Variations on Themes by Joan W. Bresnan, ed. Annie Zaenen, Jane Simpson, Tracy Holloway King, Jane Grimshaw, Joan Maling, and Chris Manning, pp. 85-102. CSLI Publications, Stanford.|$|R
50|$|These {{machines}} had a <b>common</b> <b>architecture</b> {{and word}} size. They all used transistorized electronics and integrated circuits. Early machines used core memory (the 1110 used plated wire memory) until that {{was replaced with}} semiconductor memory in 1975.|$|R
50|$|Platform Management Components Intercommunication (PMCI) a {{suite of}} {{specifications}} defining a <b>common</b> <b>architecture</b> for intercommunication among management subsystem components. This suite includes MCTP, PLDM and NC-SI specifications. The Platform Management standard was adopted as a national standard by ANSI in 2013.|$|R
5000|$|Apache OFBiz is a {{framework}} that provides a common data model and a rich set of business process.All applications are built around a <b>common</b> <b>architecture</b> using <b>common</b> data, logic and process components.Beyond the framework itself, Apache OFBiz offers functionality including: ...|$|R
50|$|Many <b>common</b> <b>architectures</b> {{can address}} more than 8 bits of data at a time. For example, the Intel 386SX {{processor}} can handle 16-bit (two-byte) data, since data is transferred over a 16-bit bus. However, data in memory {{may be of}} various lengths.|$|R
50|$|The {{earliest}} motel chains, proprietary brands {{for multiple}} properties built with <b>common</b> <b>architecture,</b> {{were born in}} the 1930s. The first of these were ownership chains, in which {{a small group of people}} owned and operated all of the motels under one common brand.|$|R
5000|$|OpenSL ES (Open Sound Library for Embedded Systems) {{is another}} Khronos Group API that also {{provides}} an audio library {{for the same}} target market as OpenMAX AL. OpenSL ES and OpenMAX AL share the same <b>common</b> <b>architecture</b> and have a few common features: ...|$|R
5000|$|... #Caption: A part of Alexander graham bell school {{featuring}} a y-shape in the <b>architecture,</b> <b>common</b> in Chicago <b>architecture</b> ...|$|R
25|$|Using {{a special}} system call instruction. This {{technique}} requires special hardware support, which <b>common</b> <b>architectures</b> (notably, x86) may lack. System call instructions {{have been added}} to recent models of x86 processors, however, and some operating systems for PCs make use of them when available.|$|R
40|$|Parallel {{computer}} architectures utilize {{a set of}} computational elements (CE) to achieve performance that is not attainable on a single processor, or CE, computer. A <b>common</b> <b>architecture</b> is the cluster of otherwise independent computers communicating through a shared network. To make use of parallel computin...|$|R
5000|$|Using {{a special}} system call instruction. This {{technique}} requires special hardware support, which <b>common</b> <b>architectures</b> (notably, x86) may lack. System call instructions {{have been added}} to recent models of x86 processors, however, and some operating systems for PCs make use of them when available.|$|R
30|$|The {{main issue}} in {{creating}} a <b>common</b> <b>Architecture</b> for ITS based Freight and Logistics operations would be {{the adoption of a}} common reference framework (including concepts and notions, common messages, data formats, and processes) that would comprehensively cover all elements and stages of an intermodal transport chain.|$|R
40|$|Densification of {{the campus}} of the National University of Colombia for present and future {{occupancy}} under one scheme. Use the threshold as architectural tool which can contribute towards the overcoming of dichotomies such as public/private, built/un-built and eventually construct one realm, the <b>common.</b> <b>Architecture</b> and The Built EnvironmentArchitectur...|$|R
50|$|Deployment {{architectures}} vary significantly, but broadly, the tiers are bookended {{by starting}} at development (DEV) and ending at production (PROD). A <b>common</b> 4-tier <b>architecture</b> is development, testing, staging, production (DEV, TEST, STAGING, PROD), with software being deployed to each in order. Other common environments include Quality Assurance (QA), for acceptance testing; sandbox or experimental (EXP), for experiments {{that are not}} intended to proceed to production; and Disaster Recovery, to provide an immediate fallback in case of problems with production. Another <b>common</b> <b>architecture</b> is development, testing, acceptance and production (DTAP), consisting of dev/test/qa/prod.|$|R
40|$|We {{consider}} {{the problem of}} load balancing to minimize the cost of dynamic computations, including the cost of migrations. We analyze {{the costs associated with}} diffusion based algorithms for several <b>common</b> <b>architectures.</b> We introduce the Ripple load balancing paradigm, which has several advantages over diffusion methods, including flexibility and faster convergence. ...|$|R
5000|$|Battle Command <b>Common</b> Operational <b>Architecture</b> - JTF through Company HQs ...|$|R
40|$|The unrelenting pace {{of change}} that confronts {{contemporary}} software developers compels them to make their applications more configurable, flexible, and adaptable. A possible way to meet such requirements is to use an Adaptive Object-Model (AOM). This poster describes <b>common</b> <b>architectures</b> for adaptive object-models and summarizes the results from our ECOOP 2000 workshop [9]...|$|R
50|$|Factor VII {{shares a}} <b>common</b> domain <b>architecture</b> with factors IX and X.|$|R
40|$|International audienceIn the Software Radio context, {{this paper}} capitalizes on the Common Operator {{technique}} {{to propose a}} reconfigurable architecture for the FFT and Viterbi algorithms. In the present work, the FFT and Viterbi structural similarities are investigated to build a <b>common</b> <b>architecture</b> around the two algorithms. FPGA implementation and experimental results are discussed in this paper...|$|R
50|$|The {{size of a}} word can {{sometimes}} differ from the expected due to backward compatibility with earlier computers. If multiple compatible variations or a family of processors share a <b>common</b> <b>architecture</b> and instruction set but differ in their word sizes, their documentation and software may become notationally complex to accommodate the difference (see Size families below).|$|R
50|$|Test and Training Enabling Architecture (TENA) is an {{architecture}} {{designed to bring}} interoperability to United States Department of Defense test and training systems. TENA is designed to promote integrated testing and simulation-based acquisition {{through the use of}} a large-scale, distributed, real-time synthetic environment, which integrates testing,training, simulation, and high-performance computing technologies, distributed across many facilities, using a <b>common</b> <b>architecture.</b>|$|R
5000|$|The fibers in multipennate {{muscles are}} {{arranged}} at multiple angles {{in relation to}} the axis of force generation, and are the most general and most <b>common</b> <b>architecture.</b> [...] Several fiber orientations fall into this category; bipennate, convergent, and multipennate. While the determination of PCSA becomes more difficult in these muscle architectures, the same tradeoffs as listed above apply.|$|R
