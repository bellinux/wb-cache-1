99|88|Public
5000|$|The Continuous Quality Assessment Toolkit (ConQAT) is a <b>configurable</b> <b>software</b> quality {{analysis}} engine. ConQAT {{is based on}} a pipes and filters architecture that enables flexible complex analysis configurations using a graphical configuration language. This architecture differs from other analysis tools that usually have a fixed data model and hard-wired analysis logics.|$|E
50|$|The Oracle Retail Predictive Application Server (commonly {{referred}} to as RPAS) is a <b>configurable</b> <b>software</b> platform for developing forecasting and planning applications, following a Client/Server OLAP model. The RPAS platform provides capabilities such as a multidimensional database structure (it follows the MOLAP model), batch and online processing, a configurable slice-and-dice user interface, a sophisticated configurable calculation engine, user security and utility functions such as importing and exporting.|$|E
40|$|This paper {{presents}} Kumbang Configurator, {{a prototype}} system for deriving product individuals from <b>configurable</b> <b>software</b> product families. <b>Configurable</b> <b>software</b> product families resemble configurable products {{in that they}} have a pre-defined structure and can be customised according to customer requirements in a routine manner. The conceptual basis underlying the configurator is Kumbang, a language for modelling <b>configurable</b> <b>software</b> product families from the feature and architectural points of view. Features represent the family from a requirements or functional point of view, and architecture from a technical or structural one. The configurator has been implemented in the Java programming language, and validated with two examples, one of which is based on an industrial case. ...|$|E
50|$|It’s product {{portfolio}} consists of <b>configurable</b> out-of-the-box <b>software</b> products, {{as well as}} solutions that help organisations manage processes such as; Sourcing, PLM, Logistics, Supplier Relationship Management, E-commerce, Wholesale, Corporate Social Responsibility and Sustainability as well as Insurance Claims Fulfilment and supply chain management.|$|R
50|$|The {{interface}} supports byte-wide (BTYE), 16-bit half-word (HWORD), and 32-bit (WORD) transfers, {{all with}} <b>software</b> <b>configurable</b> control timing.|$|R
40|$|Abstract <b>Configurable</b> {{business}} <b>software</b> {{solutions are}} increasingly being implemented based on service oriented architectures (SOA). Hereunto model driven approaches for the definition and implementation of such software systems are indispensable. In addition reference models with pre-defined business processes can accelerate decisively the implementation of standard software solutions. In this paper we present a new integrated service oriented approach of a multi-layer model. XML nets, a kind of high-level Petri nets based on XML standards and Web Service nets that are additionally based on web service standards provide the creation of reference models for <b>configurable</b> business <b>software</b> solutions {{and can be used}} for the implementation. The reference models are structured in layers of different kind of granularity. Within these layers complex processes can be orchestrated using business process components. The business flows within the capsulated processes are defined with Web Service nets considering the respective standards of web services. With this hierarchical model, business processes of a <b>configurable</b> business <b>software</b> solution can be described from the rough process flow up to detailed functions and detailed instructions based on a formal model. Due to the use of web service standards, the process models might be assigned to implemented WS-BPEL processes of the business software or WS-BPEL processes might be generated using new or updated process models. ...|$|R
40|$|During {{the past}} decade, {{software}} product families {{have emerged as}} an important form of software reuse. It is characteristic of software product families that a fixed set of assets is repeatedly used to produce {{a large number of}} variants. Such a set of assets typically includes software components and a product family architecture into which the components are integrated. Deploying an individual product in a software product family may require significant implementation effort, such as developing new components, adding glue code between the existing components, or modifying the architecture. However, for <b>configurable</b> <b>software</b> product families the deployment task requires very little or no implementation effort. Although little or no implementation effort is required, deploying from a <b>configurable</b> <b>software</b> product family may still not be trivial, but error-prone and time-consuming. Modelling methods that provide tool support for both the deployment process and for modelling the <b>configurable</b> <b>software</b> product families {{can be seen as a}} solution to alleviate this condition. In this thesis, steps towards such modelling methods for <b>configurable</b> <b>software</b> product families are made. As a first step, two conceptualisations for modelling <b>configurable</b> <b>software</b> product families from two different points of view are defined: Forfamel for modelling the features, i. e., user-visible characteristics, of software product families; and Koalish for modelling their architectures. Second, languages building o...|$|E
40|$|Abstract. Product {{configuration}} is {{a specific}} area of research and business for mechanical (and electrical) products. However, <b>configurable</b> <b>software</b> products have not attracted as much interest. This paper outlines the concept of <b>configurable</b> <b>software</b> product families covering millions of variants from which product individuals are configured to meet particular customer needs. Solutions to managing such software products are sought from experiences with mechanical products and expressed here {{in the form of}} a research agenda. ...|$|E
40|$|Although {{meant to}} be {{relatively}} stable, the architecture of a software system does, at times, change. This simple yet important observation immediately {{raises the question of}} how changes to an architecture should be captured. Current architecture description languages are not well-suited for this purpose, but existing techniques from the discipline of configuration management can be adapted to provide a solution. In particular, we propose a novel representation, called <b>configurable</b> <b>software</b> architecture, that extends the traditional notion of software architecture with the concepts of variants, options, and evolution. We discuss the details of the representation, present an environment that allows the specification of <b>configurable</b> <b>software</b> architectures, and highlight a few of the opportunities that we believe arise once architectural configurability can be precisely captured...|$|E
30|$|Cloud computing—is {{not only}} the {{allocation}} of tasks on the network nodes of computing resources. This model {{is used for the}} ubiquitous network access to a common pool of <b>configurable</b> resources (<b>software,</b> server, information, platform, etc.) at any time [24]. The user uses the technology of “thin” client as a means of access to applications, platforms and data, and the entire infrastructure of the information system is located at the provider of cloud services.|$|R
30|$|A {{channelizer}} is used {{to separate}} users or channels in communication systems. A polyphase channelizer {{is a type of}} channelizer that uses polyphase filtering to filter, downsample, and downconvert simultaneously. With graphics processing unit (GPU) technology, we propose a novel GPU-based polyphase channelizer architecture that delivers high throughput. This architecture has advantages of providing reduced complexity and optimized parallel processing of many channels, while being <b>configurable</b> via <b>software.</b> This makes our approach and implementation particularly attractive for using GPUs as DSP accelerators for communication systems.|$|R
50|$|IceChat {{supports}} a customizable color set, and a flexible engine {{which allows the}} user to define different colors for GUI elements and IRC messages and actions. That, in addition to customizable graphical emoticons provide highly <b>configurable</b> interface. The <b>software</b> is installed with several themes and {{supports a}}dditional user themes.|$|R
40|$|A {{possible}} {{solution for the}} growing demand for graphical user interfaces for simulation codes is shown. The situation at the German Aerospace Center is described {{and a set of}} resulting requirements for a flexible, <b>configurable</b> <b>software</b> system is collected. The main idea of separating the description of parameters and the editor is briefly summarized. Finally the current development status is presented, including some screenshots...|$|E
40|$|Development and {{management}} of software product families is an emerging and important area of software engineering, whereas product configuration of traditional, i. e., mechanical and electronic, product families has a slightly longer history as a specific area of research and business. This paper describes work in progress on the management of <b>configurable</b> <b>software</b> product families. Solutions to modelling and managing such software products are sought from experiences with traditional products...|$|E
40|$|Software product {{families}} are an emerging trend {{that tries to}} cope with increasing variability and challenges of reuse. Software products are derived from the family in a prescribed way utilising common family assets. The derived product often includes some amount of integrating glue code or even product-specific tailoring. In the domain of traditional, mechanical products, configurable products have been developed. Individual products are configured according to a predefined model, with no need for adaptive or innovative design. When comparing these two approaches, remarkable similarities are found. In a <b>configurable</b> <b>software</b> product family, software products are configured based on a prede-fined configuration model. Building the product usually requires no product-specific programming. The purpose of this thesis {{was to develop a}} tool for deriving product individuals from <b>configurable</b> <b>software</b> {{product families}}. This tool, called Kumbang Configurator, utilises existing modelling language Kumbang, which combines both feature-based and architecture-based modelling methods. Kumbang Configurator prevents configu-ration errors by checking whether the configuration is consistent and complete. This configuration reasoning employs inference engine smodels. The implementation was validated with two example cases...|$|E
40|$|A low-cost, <b>software</b> <b>configurable,</b> direct se-quence spread {{spectrum}} transceiver {{based on a}} digital radio architecture is described and its implementation approach is addressed. Con-figuration capabilities of the graphical inter-face software that controls the transceiver, {{as well as several}} experimental results, namely, spectrum plots and error performance curves, are presented. Practical applications for this system are also foreseen. ...|$|R
50|$|Although the MCA bus had {{a slight}} {{performance}} advantage over EISA (bus speed of 10 MHz, compared to 8.33 MHz), EISA contained {{almost all of the}} technological benefits that MCA boasted, including bus mastering, burst mode, <b>software</b> <b>configurable</b> resources, and 32-bit data/address buses. These brought EISA nearly to par with MCA from a performance standpoint, and EISA easily defeated MCA in industry support.|$|R
40|$|ITC/USA 2005 Conference Proceedings / The Forty-First Annual International Telemetering Conference and Technical Exhibition / October 24 - 27, 2005 / Riviera Hotel & Convention Center, Las Vegas, NevadaThis paper {{describes}} the Flexible Telemetry Transceiver (FNT) -a modular, scalable, standards-based, <b>software</b> <b>configurable,</b> microwave wireless telemetry network transceiver. The FNT enables flexible, high-rate, long-range, duplex, network services across multipoint to multipoint wireless channel...|$|R
40|$|The paper {{addresses}} several unresolved classical {{questions about}} enterprise reference architectures. These questions {{are discussed in}} light of current developments in ITC, such as interoperability, component-based software, and <b>configurable</b> <b>software.</b> The discussion leads to four new areas of research, viz. : 1) how can extemal services be modelled? 2) how can man-machine systems be modelled? 3) what is the appropriate level of being generic? and 4) how can distribution of data applications and hardware be mode lied...|$|E
40|$|<b>Configurable</b> <b>software</b> systems allow {{users to}} form {{configurations}} by selecting and deselecting features. The process of configuration creation may directly affect {{performance of the}} system in a non-linear way because of possible complex feature interactions. Understanding the correlation between feature selection and performance is important for stakeholders to acquire a desirable program variant. In this work we try to infer this correlation between system configuration and performance, using small samples of already measured configurations, without additional effort to detect feature interactions. We carry out {{a case study of}} several regression methods for solving this problem: regression trees, bagging of regression trees, random forests and support vector machines. All regression methods have their parameters tuned in automatic fashion by using Sobol sampling. To evaluate the prediction accuracy of the regression methods, the case study is performed using six real-world <b>configurable</b> <b>software</b> systems from different application domains and written in different programming languages. We show that bagging outperforms all other regression methods in most of the cases for all configurable systems, sampling sizes and parameter settings. We analyse the sensitivity of different regression methods and show that the most stable ones are regression trees and bagging...|$|E
40|$|Test suite {{generation}} and prioritization {{are two main}} research fields to improve testing efficiency. Combinatorial testing has been proven as an effective method to generate test suite for highly <b>configurable</b> <b>software</b> systems, while test suites are often prioritized by interaction coverage to detect faults as early as possible. However, for some cases, there exists reasonable cost of reconfiguring parameter settings when switching test cases in different orders. Surprisingly, only few studies paid attention to it. In this paper, by proposing greedy algorithms and graph-based algorithms, we aim to prioritize a given test suite to minimize its total switching cost. We also compare two different prioritization strategies {{by a series of}} experiments, and discuss the advantages of our prioritization strategy and the selection of prioritization techniques. The results show that prioritization by switching cost can improve testing efficiency and our prioritization strategy can produce a small test suite with a reasonably low switching cost. This prioritization can be used widely and help locate fault causing interactions. The results also suggest that when testing highly <b>configurable</b> <b>software</b> systems and no knowledge of fault detection can be used, prioritization by switching cost is a good choice to detect faults earlier...|$|E
50|$|Infrared Control Freak 360 (IRCF360) is a 360 degree {{proximity}} sensor and a motion sensing devices, developed by ROBOTmaker. The sensor is in BETA developers release as a low cost (<b>software</b> <b>configurable)</b> sensor for use within research, technical and hobby {{projects such as}} Maker Faire type projects, Microbotics, Kinetic art / art, crafts, engineering, UAV, Science, Technology and alternative music type of projects.|$|R
50|$|Microcontrollers usually contain {{from several}} {{to dozens of}} general purpose input/output pins (GPIO). GPIO pins are <b>software</b> <b>configurable</b> to either an input or an output state. When GPIO pins are {{configured}} to an input state, they are often used to read sensors or external signals. Configured to the output state, GPIO pins can drive external devices such as LEDs or motors, often indirectly, through external power electronics.|$|R
40|$|Abstract — Developers {{of highly}} <b>configurable</b> performanceintensive <b>software</b> systems often use {{in-house}} performance-oriented “regression testing ” {{to ensure that}} their modifications do not adversely affect their software’s performance across its large configuration space. Unfortunately, time and resource constraints can limit in-house testing to {{a relatively small number of}} possible configurations, followed by unreliable extrapolation from these results to the entire configuration space. As a result, many performance bottlenecks escape detection until systems are fielded. In our earlier work, we improved the situation outlined above by developing an initial quality assurance process called “main effects screening”. This process (1) executes formally designed experiments to identify an appropriate subset of configurations on which to base the performance-oriented regression testing...|$|R
40|$|Modern {{software}} often exposes configuration {{options that}} enable users to customize its behavior. During software evolution, devel-opers may change how the configuration options behave. When upgrading {{to a new}} software version, users may need to re-configure the software by changing the values of certain configuration options. This paper addresses the following question during {{the evolution of a}} <b>configurable</b> <b>software</b> system: which configuration options should a user change to maintain the software’s desired behavior? This paper presents a technique (and its tool implementation, called ConfSuggester) to troubleshoot configuration errors caused by soft-ware evolution. ConfSuggester uses dynamic profiling, execution trace comparison, and static analysis to link the undesired behav-ior to its root cause — a configuration option whose value can be changed to produce desired behavior from the new software version. We evaluated ConfSuggester on 8 configuration errors from 6 <b>configurable</b> <b>software</b> systems written in Java. For 6 errors, the root-cause configuration option was ConfSuggester’s first suggestion. For 1 error, the root cause was ConfSuggester’s third suggestion. The root cause of the remaining error was ConfSuggester’s sixth suggestion. Overall, ConfSuggester produced significantly better results than two existing techniques. ConfSuggester runs in just a few minutes, making it an attractive alternative to manual debugging...|$|E
40|$|Despite {{the huge}} spread and {{economical}} importance of <b>configurable</b> <b>software</b> systems, there is unsatisfactory support in utilizing the full potential {{of these systems}} with respect to finding performance-optimal configurations. Prior work on predicting the performance of software configurations suffered from either (a) requiring far too many sample configurations or (b) large variances in their predictions. Both these problems can be avoided using the WHAT spectral learner. WHAT's innovation {{is the use of}} the spectrum (eigenvalues) of the distance matrix between the configurations of a <b>configurable</b> <b>software</b> system, to perform dimensionality reduction. Within that reduced configuration space, many closely associated configurations can be studied by executing only a few sample configurations. For the subject systems studied here, a few dozen samples yield accurate and stable predictors - less than 10 % prediction error, {{with a standard deviation of}} less than 2 %. When compared to the state of the art, WHAT (a) requires 2 to 10 times fewer samples to achieve similar prediction accuracies, and (b) its predictions are more stable (i. e., have lower standard deviation). Furthermore, we demonstrate that predictive models generated by WHAT can be used by optimizers to discover system configurations that closely approach the optimal performance. Comment: 26 pages, 6 figure...|$|E
40|$|System {{testing of}} <b>configurable</b> <b>software</b> is an {{expensive}} and resource constrained process. Insufficient testing often leads to escaped faults in the field where failures impact customers and are costly to repair. Prior work has shown {{that it is possible}} to efficiently sample configurations for testing using combinatorial interaction testing, and to prioritize these configurations to increase the rate of early fault detection. The underlying assumption to date has been that there is no added complexity to configuring a system level environment over a user configurable one; i. e. the time required to setup and test each individual configuration is nominal. In this paper we examine prioritization of system <b>configurable</b> <b>software</b> driven not only by fault detection but also by the cost of configuration and setup time that moving between different configurations incurs. We present a case study on two releases of an enterprise software system using failures reported in the field. We examine the most effective prioritization technique and conclude that (1) using failure history of configurations can improve the early fault detection rate, but that (2) we must consider fault detection rate over time, not by the number of configurations tested. It is better to test related configurations which incur minimal setup time than to test fewer, more diverse configurations. 1...|$|E
50|$|An {{electronic}} meeting {{system is a}} suite of <b>configurable</b> collaborative <b>software</b> tools {{that can be used}} to create predictable, repeatable patterns of collaboration among people working toward a goal. With an {{electronic meeting}} system, each user typically has his or her own computer, and each user can contribute to the same shared object (session) at the same time. Thus, nobody needs to wait for a turn to speak and people don't forget what they want to say while they are waiting for the floor. When a group or a group's host deem it appropriate, people can contribute anonymously to most electronic meeting systems tools: this allows the group to focus on the content of ideas, rather than their sources.|$|R
50|$|Industrial Internet Consortium members Hewlett-Packard and Real-Time Innovation {{have joined}} {{together}} on the Edge Intelligence Testbed. The primary objective of the Edge Intelligence Testbed is to significantly accelerate the development of edge architectures and algorithms by removing the barriers that many developers face: access {{to a wide variety}} of advanced compute hardware and <b>software</b> <b>configurable</b> to directly resemble state-of-the-art edge systems at very low cost to the tester/developer.|$|R
5000|$|TechExcel ServiceWise is a <b>configurable</b> and {{scalable}} <b>software</b> suite {{for help}} desk management and IT service management. It {{is a product}} of TechExcel, founded in 1995 and headquartered in Lafayette, California. It is currently used by around 1,500 customers including Fujitsu, First American Corporation, Premier Incorporated, and [...] Sanmina Corporation. It was originally released in 1997 for the Microsoft Windows operating system. The current stable release (March 2014) version is 9.3.|$|R
40|$|Abstract. This {{position}} paper presents {{a tool for}} configuring product individuals from <b>configurable</b> <b>software</b> product lines. The product derivation is done by making selections based on a configuration model {{in a way that}} best satisfies customer requirements at hand. The tool produces a description of the product individual as an output. The implementation is based on both component-based and feature-based modelling techniques. The tool employs techniques from traditional product configuration to ensure the validity of the product individual against the model. The implementation of the tool is still in progress. ...|$|E
40|$|Unsupervised {{training}} {{has recently been}} successfully used to enhance the performance of neural networks. To understand the advantage provided by the structure of unsupervised pre trained models, a network theory based analysis of word representation similarities was performed, revealing the structure discovered by unsupervised models trained on a large english language corpus. A Part of Speech Tagger and two versions of Semantic Role Labelers were defined and tested to explore architectural configurations and training strategies. In order to thoroughly test various Neural Network Natural Language Models, a highly <b>configurable</b> <b>software</b> implementation was developed...|$|E
40|$|Many {{approaches}} for testing <b>configurable</b> <b>software</b> systems {{start from the}} same assumption: {{it is impossible to}} test all configurations. This motivated the definition of variability-aware abstractions and sampling techniques to cope with large configuration spaces. Yet, there is no theoretical barrier that prevents the exhaustive testing of all configurations by simply enumerating them, if the effort required to do so remains acceptable. Not only this: we believe there is lots to be learned by systematically and exhaustively testing a configurable system. In this article, we report on the first ever endeavor to test all possible configurations of an industry-strength, open source <b>configurable</b> <b>software</b> system, JHipster, a popular code generator for web applications. We built a testing scaffold for the 26, 000 + configurations of JHipster using a cluster of 80 machines during 4 nights for a total of 4, 376 hours (182 days) CPU time. We find that 35. 70 % configurations fail and we identify the feature interactions that cause the errors. We show that sampling testing strategies (like dissimilarity and 2 -wise) (1) are more effective to find faults than the 12 default configurations used in the JHipster continuous integration; (2) can be too costly and exceed the available testing budget. We cross this quantitative analysis with the qualitative assessment of JHipster's lead developers. Comment: Submitted to Empirical Software Engineerin...|$|E
40|$|In this paper, a <b>configurable</b> many-core hardware/ <b>software</b> {{architecture}} is proposed to efficiently execute the widely known and commonly used K-means clustering algorithm. A prototype {{was designed and}} implemented on a Xilinx Zynq- 7000 All Programmable SoC. A single core configured with the slowest configuration achieves a 10 X speed-up compared to the software only solution. The system is fully scalable and capable of achieving much higher speed-ups by increasing its parallelism...|$|R
50|$|Sciforma, {{previously}} named PSNext, is {{an enterprise}} Project and Portfolio Management (PPM) software developed by Sciforma Corporation. Sciforma Corporation is an American software {{company based in}} San Jose, California. It is a Java web based cross-platform solution. It provides integration of portfolio, project, resource and document management and is completely <b>configurable.</b> The current <b>software</b> version is Sciforma 7.0. This version adds Single sign-on and an HTML5 interface enabling access from mobile devices or thin clients.|$|R
40|$|A {{versatile}} full-field {{range imaging}} system {{has previously been}} constructed. This system is <b>configurable</b> in <b>software</b> to produce either high precision or fast acquisition range images. Indicatively a 10 second exposure {{has been shown to}} produce a range image of sub-millimeter precision, whilst video frame rate (30 fps) acquisition provides for centimetre precision. Currently the acquisition time of the system is to a large degree constrained by the off-line processing of the frames by an external computer. This paper presents an alternative to the off-line PC image processing utilising an Altera Stratix II FPGA. Processing rates up to 30 frames per second have been achieved with the added advantage that many of the previous systempsilas existing digital electronics can also be accommodated, providing for an even more compact and flexible system...|$|R
