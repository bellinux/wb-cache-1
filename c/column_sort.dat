3|122|Public
40|$|We {{show how}} <b>column</b> <b>sort</b> [LEIG 85] and rotate sort [MARB 88] can be {{implemented}} on the different reconfigurable mesh with buses (RMB) architectures that have been proposed in the literature. On all of these proposed RMB architectures, {{we are able to}} sort n numbers on an n × n configuration in O(1) time. For the PARBUS RMB architecture [WANG 90 ab], our <b>column</b> <b>sort</b> and rotate sort implementations are simpler than the O(1) sorting algorithms developed in [JANG 92] and [LIN 92]. Furthermore, our sorting algorithms use fewer bus broadcasts. For the RMESH RMB architecture [MILL 88 abc], our algorithms are the first to sort n numbers on an n × n configuration in O(1) time. We also observe that rotate sort {{can be implemented}} on N × N ×... × N k + 1 dimensional RMB architectures so as to sort N k elements in O(1) time...|$|E
40|$|This is {{the change}} log for version 0. 3 - 5. For further details, see the CRAN page and the NEWS file. recent changes: testEstimates: now prints the two-tailed p-value (# 2), {{improved}} output with constrained variance components testEstimates, testModels: revised label for p-values new functions: c. mitml. list, rbind. mitml. list, cbind. mitml. list: combine lists of multiply imputed data sets by data set, row, or <b>column</b> <b>sort.</b> mitml. list: sort lists of multiply imputed data sets by one or several variables subset. mitml. list: generate subsets for lists of multiply imputed data sets amelia 2 mitml. list: convert imputations generated by amelia (Amelia) new features: testEstimates, testModels, testConstraints: added support for GEEs (geepack) bug fixes: mitmlComplete: fixes error with categorical variables when {{there is only a}} single missing value (# 1...|$|E
40|$|In this paper, {{we present}} a {{parallel}} SIMD algorithm for sorting of N numbers of log N bits each on a mesh connected array without comparators. While most previous AT 2 -optimal sorting algorithms on the mesh explicitly or implicitly assume O# 1 # time comparison of two operands of O#log N# bits, our algorithm does not require O# 1 # time comparison. Rather we assume O#log N# time comparison, which makes our algorithm realizable with current VLSI technology. To retain the AT 2 optimality with increased (by a factor of O#log N#) comparison time, we develop a new mapping technique which combines radix sort, shear sort, block merge and <b>column</b> <b>sort</b> in a creative way. The time complexity of sorting of N numbers on a (two-dimensional) mesh of size N 1 = 2 #N 1 = 2 without comparotors is O#N 1 = 2 #. 1 Introduction The problem of sorting numbers on a two-dimensional array has been extensively studied and the lower bound is achieved for the mesh connected parallel computer[3, 4, 6, 8] an [...] ...|$|E
5000|$|Allows for default <b>column</b> <b>sorting</b> and {{the ability}} to set column widths ...|$|R
500|$|Location: at city or provincial {{level and}} country name, with coordinates; <b>column</b> <b>sorts</b> by state ...|$|R
50|$|Sort field: Specifies {{whether the}} product {{supports}} sorting (indexing) by a specific field (<b>column).</b> <b>Sorting</b> helps identifying blank/empty values or excessive (out-of-band) values.|$|R
5|$|By default {{this list}} sorts alphabetically. Indian and Nepalese {{convention}} {{is for the}} family name first and the given name second; this is reflected in this list. The rank <b>column</b> <b>sorts</b> by the rank of the recipient {{at the time of}} the action. This <b>column</b> <b>sorts</b> by the comparative rank of the recipient within the British Armed Forces command structure. Within the British Armed Forces the Navy is the Senior Service, followed by the Army and then the Royal Air Force (RAF).|$|R
3000|$|... ‘Column sorting. The A {{elements}} in a <b>column</b> are <b>sorted.</b> The smallest value {{is located in the}} top of the <b>column.</b> This <b>sorting</b> is repeated for all columns.|$|R
50|$|Multiple <b>column</b> <b>sorting</b> was {{commonly}} done {{by first}} sorting the least significant column, then proceeding, column by column, {{to the most}} significant column. This is called a least significant digit radix sort.|$|R
5000|$|Binary {{order of}} the SQL CHAR columns is same as binary {{order of the}} SQL NCHAR columns if the data {{consists}} of same supplementary characters. Consequently, these <b>columns</b> <b>sort</b> the same for identical strings.|$|R
500|$|UNESCO data: the site's {{reference}} number; {{the year}} the site was inscribed on the World Heritage List; the criteria it was listed under: criteria i through vi are cultural, while vii through x are natural; (the <b>column</b> <b>sorts</b> by year added to the list) ...|$|R
5000|$|... {{is not a}} Unix command, Unix has the {{analogous}} [...] command instead. The Linux operating system, however, has a [...] {{command that}} [...] "is equivalent to that is, by default files are listed in <b>columns,</b> <b>sorted</b> vertically, and special characters are represented by backslash escape sequences".|$|R
500|$|UNESCO data: the site's {{reference}} number; {{the year}} the site was inscribed on the World Heritage List; the criteria it was listed under: criteria (i) through (vi) are cultural, while (vii) through (x) are natural; sites meeting both criteria are categorized as [...] "mixed sites", the <b>column</b> <b>sorts</b> by year.|$|R
3000|$|... [...]. The j th row of {{the matrix}} {{contains}} all the child nodes of the j th parent of all groups. The illustration in the case G= 3 is shown in Figure  4. The matrix operates through two processes called as row <b>sorting</b> and <b>column</b> <b>sorting,</b> one after the other, as follows: [...]...|$|R
500|$|Location: [...] "town-name prefecture-name"; The <b>column</b> entries <b>sort</b> as [...] "prefecture-name town-name".|$|R
5|$|Material and technique: wood/bronze/..., lacquered/colored/...; The <b>column</b> entries <b>sort</b> by {{the main}} {{material}} (stone/clay/wood/lacquer/bronze).|$|R
500|$|Excavation site: [...] "site-name town-name prefecture-name"; <b>column</b> entries <b>sort</b> as [...] "prefecture-name town-name site-name" ...|$|R
500|$|Present location: [...] "temple/museum/shrine-name town-name prefecture-name"; The <b>column</b> entries <b>sort</b> as [...] "prefecture-name town-name".|$|R
500|$|Present location: [...] "building-name temple/museum/shrine-name town-name prefecture-name"; The <b>column</b> entries <b>sort</b> as [...] "prefecture-name town-name".|$|R
5000|$|The <b>columns</b> are <b>sorted</b> alphabetically, {{based on}} the keyword, and the table changes to this: ...|$|R
500|$|Location: [...] "town-name prefecture-name, geocoordinates of the structure"; the <b>column</b> entries <b>sort</b> as [...] "prefecture-name town-name".|$|R
500|$|Present location: [...] "building-name temple/museum/shrine-name town-name prefecture-name"; The <b>column</b> entries <b>sort</b> as [...] "prefecture-name town-name temple/museum/shrine-name building-name".|$|R
50|$|Click on {{the sort}} symbol {{at the top}} of the <b>columns</b> to <b>sort</b> on a {{particular}} field.|$|R
500|$|Location: [...] "town-name prefecture-name" [...] and geo-coordinates of the structure; The <b>column</b> entries <b>sort</b> as [...] "prefecture-name town-name".|$|R
50|$|Standard column {{families}} are <b>column</b> containers <b>sorted</b> by their names can be referenced and sorted by their row key.|$|R
5000|$|There {{is no way}} to <b>sort</b> <b>columns,</b> nor {{to query}} an {{arbitrary}} query in distributed data stores. <b>Columns</b> are <b>sorted</b> when they are added to the column family. The way of sorting is defined by an attribute. For instance, this is done by the [...] attribute in Apache Cassandra that can have the following values: ...|$|R
5|$|Height: {{height in}} cm; The <b>column</b> entries <b>sort</b> by the largest height if an entry {{is a group}} of statues.|$|R
5|$|Allsvenskan titles – Allsvenskan title winning seasons {{while each}} man was {{chairman}} of Malmö FF. This <b>column</b> is <b>sorted</b> by number of titles won.|$|R
500|$|Date: {{period and}} {{year of the}} item; <b>column</b> entries <b>sort</b> by year or start year of a period if only a period is known ...|$|R
5000|$|There {{is no way}} to <b>sort</b> super <b>columns</b> {{after they}} have been inserted, nor to query an {{arbitrary}} query in distributed data stores. Super <b>columns</b> are <b>sorted</b> when they are added to the column family, and it is also possible to use a different sorting attribute for the contained columns of a super column. Similar to the standard <b>column</b> family, <b>sorting</b> is defined by an attribute. This attribute is called the [...] in Apache Cassandra and have the following values: ...|$|R
5|$|Date: {{period and}} year; The <b>column</b> entries <b>sort</b> by year. If only a period is known, they sort by the start year of that period.|$|R
5000|$|With {{properties}} 1, 2, and 4, we {{can thus}} define the following matrix,If we sort the sets [...] and [...] in decreasing order, then the matrix [...] has sorted rows and sorted columns,The medcouple is then the median of this matrix with sorted rows and <b>sorted</b> <b>columns.</b> The {{fact that the}} rows and <b>columns</b> are <b>sorted</b> allows {{the implementation of a}} fast algorithm for computing the medcouple.|$|R
500|$|Construction: {{architecture}} and general remarks including {{the number of}} stories (outside) and floors (inside); the <b>column</b> entries <b>sort</b> {{by the type of}} structure (donjon, yagura, watariyagura) ...|$|R
50|$|Click on <b>column</b> {{headings}} to <b>sort</b> by teams.|$|R
5000|$|Defunct {{satellites}} {{are highlighted}} in gold.Default <b>sort</b> <b>column</b> ...|$|R
5|$|Date: {{period and}} {{year of the}} construction; The <b>column</b> entries <b>sort</b> by year. If only a period is known, they sort by the start year of that period.|$|R
