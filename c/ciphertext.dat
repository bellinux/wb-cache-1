3034|733|Public
5|$|The {{symmetric}} key is randomly generated {{and will not}} assist other victims. At no point is the attacker's private key exposed to victims and the victim need only send a very small <b>ciphertext</b> (the encrypted symmetric-cipher key) to the attacker.|$|E
5|$|There is no {{encryption}} algorithm {{present in the}} Agrippa binary; consequently, the visual encryption effect that displays when the poem has finished is a ruse. The visual effect {{is the result of}} running the decrypted <b>ciphertext</b> (in memory) through the re-purposed bit-scrambling decryption algorithm, and then abandoning the text in memory. Only the fake genetic code is written back to disk.|$|E
5|$|In {{order to}} prevent a second running of the program it corrupts itself when run. The program simply overwrites itself with a 6000 byte long DNA-like code at a certain position. Archival {{documents}} suggest that the original plan was to use a series of ASCII 1's to corrupt the binary, {{but at some point}} in development a change was made to use fake genetic code, in keeping with the visual motifs in the book. The genetic code has a codon entropy of 5.97 bits/codon, much higher than any natural DNA sequence known. However, the <b>ciphertext</b> was not overwritten.|$|E
30|$|Content Confidentiality: The content {{confidentiality}} provided by an approach reflects how the protected attribute values are represented at the SP. We differentiate between order-preserving <b>ciphertexts,</b> distinguishable <b>ciphertexts,</b> and indistinguishable <b>ciphertexts.</b> Order-preserving <b>ciphertexts</b> leak {{information on the}} ordering of the corresponding plaintext values to the SP. If distinguishable <b>ciphertexts</b> are used, the SP is able to differentiate between <b>ciphertexts</b> that encrypt value A from those that encrypt value B. In particular, deterministic encryption schemes produce distinguishable <b>ciphertexts</b> because encrypting equal plaintext values results in equal <b>ciphertexts.</b> If indistinguishable <b>ciphertexts</b> are outsourced, the SP {{is not able to}} differentiate <b>ciphertexts</b> that encrypt value A from those that encrypt value B. In particular, this implies that encrypting a plaintext value twice results in different <b>ciphertexts.</b> Furthermore, based on indistinguishable <b>ciphertexts,</b> attackers can not discover which values are contained in the outsourced data and which are not.|$|R
40|$|Abstract. A proxy re-encryption {{system allows}} the proxy to {{transform}} <b>ciphertexts</b> encrypted under Alice’s public {{key into the}} different <b>ciphertexts</b> that can be decrypted by Bob’s secret key. In this paper, we propose new proxy re-encryption systems; one for the transformation from <b>ciphertexts</b> encrypted under a traditional certificate-based public key into the <b>ciphertexts</b> that can be decrypted by an secret key for Identity-Based Encryption, {{and the other one}} for the transformation from <b>ciphertexts</b> encrypted in IBE manner into the different <b>ciphertexts</b> that can be decrypted by the other secret key for the IBE...|$|R
2500|$|For larger {{values of}} [...] more <b>ciphertexts</b> are needed, particularly, [...] <b>ciphertexts</b> are sufficient.|$|R
5|$|Another {{brute force}} {{approach}} is to match up the frequency distribution of the letters. By graphing the frequencies of letters in the <b>ciphertext,</b> and by knowing the expected distribution of those letters in the original language of the plaintext, a human can easily spot {{the value of the}} shift by looking at the displacement of particular features of the graph. This is known as frequency analysis. For example, in the English language the plaintext frequencies of the letters E, T, (usually most frequent), and Q, Z (typically least frequent) are particularly distinctive. Computers can also do this by measuring how well the actual frequency distribution matches up with the expected distribution; for example, the chi-squared statistic can be used.|$|E
25|$|For this example, {{uppercase}} {{letters are}} used to denote <b>ciphertext,</b> lowercase letters {{are used to}} denote plaintext (or guesses at such), and X~t is used to express a guess that <b>ciphertext</b> letter X represents the plaintext letter t.|$|E
25|$|Decryption is {{performed}} {{by going to}} the row in the table corresponding to the key, finding the position of the <b>ciphertext</b> letter in this row, and then using the column's label as the plaintext. For example, in row L (from LEMON), the <b>ciphertext</b> L appears in column A, which is the first plaintext letter. Next we go to row E (from LEMON), locate the <b>ciphertext</b> X which is found in column T, thus T is the second plaintext letter.|$|E
30|$|If the {{attacker}} has background {{knowledge of the}} data schema (BKS), order-preserving <b>ciphertexts</b> may no longer provide protection. CPI approaches that outsource distinguishable <b>ciphertexts</b> {{can be used to}} protect against an attacker with BKS knowledge because distinguishable <b>ciphertexts</b> do not contain any order information, which means that the value range of an attribute cannot be used to map distinguishable <b>ciphertexts</b> onto plaintext values.|$|R
30|$|In this scheme, the {{homomorphic}} addition {{operation of}} <b>ciphertexts</b> C 1 and C 2 {{is defined as}} vector addition. However, because the child <b>ciphertexts</b> have been randomly shuffled, the child <b>ciphertexts</b> c 1 dj and c 2 dj at corresponding locations of C 1 and C 2 are not necessarily encrypted from the same key pair ki and si, so the child <b>ciphertexts</b> at corresponding locations cannot be directly added.|$|R
3000|$|... 1 {{to obtain}} two <b>ciphertexts</b> first. Then, {{one of the}} two <b>ciphertexts</b> is further {{encrypted}} with another parameter r [...]...|$|R
25|$|The basic use of {{frequency}} analysis is to first count {{the frequency of}} <b>ciphertext</b> letters and then associate guessed plaintext letters with them. More Xs in the <b>ciphertext</b> than anything else suggests that X corresponds to e in the plaintext, {{but this is not}} certain; t and a are also very common in English, so X might be either of them also. It is unlikely to be a plaintext z or q which are less common. Thus the cryptanalyst may need to try several combinations of mappings between <b>ciphertext</b> and plaintext letters.|$|E
25|$|A bombe run {{involved}} a cryptanalyst first obtaining a crib — {{a section of}} plaintext that was thought to correspond to the <b>ciphertext.</b> Finding cribs {{was not at all}} straightforward; it required considerable familiarity with German military jargon and the communication habits of the operators. However, the codebreakers were aided {{by the fact that the}} Enigma would never encrypt a letter to itself. This helped in testing a possible crib against the <b>ciphertext,</b> as it could rule out a number of cribs and positions, where the same letter occurred in the same position in both the plaintext and the <b>ciphertext.</b> This was termed a crash at Bletchley Park.|$|E
25|$|In {{a simple}} {{substitution}} cipher, each {{letter of the}} plaintext is replaced with another, and any particular letter in the plaintext will always be transformed into the same letter in the <b>ciphertext.</b> For instance, if all occurrences of the letter e turn into the letter X, a <b>ciphertext</b> message containing numerous instances of the letter X would suggest to a cryptanalyst that X represents e.|$|E
50|$|Chosen-plaintext (chosen-ciphertext): the {{attacker}} can obtain the <b>ciphertexts</b> (plaintexts) corresponding to an arbitrary set of plaintexts (<b>ciphertexts)</b> {{of his own}} choosing.|$|R
50|$|Adaptive chosen-plaintext attack (CPA2), {{where the}} {{cryptanalyst}} can request the <b>ciphertexts</b> of additional plaintexts {{after seeing the}} <b>ciphertexts</b> for some plaintexts.|$|R
30|$|If the {{attacker}} has background {{knowledge of the}} data (BKD), they can reveal plaintext values based on distinguishable <b>ciphertexts</b> as we show in the following example. To protect against attackers that can only observe outsourced <b>ciphertexts</b> and that have BKD knowledge, an approach can only be considered secure if the outsourced <b>ciphertexts</b> are indistinguishable {{with regard to their}} content. If the <b>ciphertexts</b> are indistinguishable, {{the attacker}} has no way of correlating the BKD knowledge with the outsourced data.|$|R
25|$|There is {{an easily}} seen {{repetition}} in the <b>ciphertext,</b> and the Kasiski test will be effective.|$|E
25|$|Blowfish's key {{schedule}} starts by initializing the P-array and S-boxes with values {{derived from}} the hexadecimal digits of pi, which contain no obvious pattern (see nothing up my sleeve number). The secret key is then, byte by byte, cycling the key if necessary, XORed with all the P-entries in order. A 64-bit all-zero block is then encrypted with the algorithm as it stands. The resultant <b>ciphertext</b> replaces P1 and P2. The same <b>ciphertext</b> is then encrypted again with the new subkeys, and the new <b>ciphertext</b> replaces P3 and P4. This continues, replacing the entire P-array and all the S-box entries. In all, the Blowfish encryption algorithm will run 521 times to generate all the subkeys - about 4KB of data is processed.|$|E
25|$|Once {{the length}} of the key is known, the <b>ciphertext</b> can be rewritten into that many columns, with each column {{corresponding}} to a single letter of the key. Each column consists of plaintext that has been encrypted by a single Caesar cipher; the Caesar key (shift) is just the letter of the Vigenère key that was used for that column. Using methods similar to those used to break the Caesar cipher, the letters in the <b>ciphertext</b> can be discovered.|$|E
30|$|For the {{communication}} {{complexity of the}} authentication protocol, the user sends 2 n homomorphic <b>ciphertexts,</b> one conventional signature and one nonce value. The verifier sends one conventional signature, n homomorphic <b>ciphertexts,</b> and one nonce to the user. In total, 3 n homomorphic <b>ciphertexts,</b> two conventional signatures, and two nonce values are exchanged.|$|R
40|$|Dynamic Searchable Symmetric Encryption (DSSE) {{allows a}} client {{not only to}} search over <b>ciphertexts</b> as the {{traditional}} search- able symmetric encryption does, but also to update these <b>ciphertexts</b> according to requirements, e. g., adding or deleting some <b>ciphertexts.</b> It has been recognized as a fundamental and promising method to build secure cloud storage...|$|R
5000|$|Get [...] {{intermediate}} {{states and}} [...] <b>ciphertexts,</b> then compute the keys that maps between them. This requires [...] key-recoveries, since each intermediate state {{needs to be}} linked to all <b>ciphertexts.</b>|$|R
25|$|The {{idea behind}} the Vigenère cipher, like all {{polyalphabetic}} ciphers, is to disguise plaintext letter frequencies, which interferes with a straightforward application of frequency analysis. For instance, if P is the most frequent letter in a <b>ciphertext</b> whose plaintext is in English, one might suspect that P corresponds to E, because E is {{the most frequently used}} letter in English. However, using the Vigenère cipher, E can be enciphered as different <b>ciphertext</b> letters at different points in the message, thus defeating simple frequency analysis.|$|E
25|$|A Colossus {{reconstruction}} was {{switched on}} in 1996; it was upgraded to Mk2 configuration in 2004; it found {{the key for}} a wartime German <b>ciphertext</b> in 2007.|$|E
25|$|In some ciphers, such {{properties}} of the natural language plaintext are preserved in the <b>ciphertext,</b> and these patterns {{have the potential to}} be exploited in a ciphertext-only attack.|$|E
3000|$|... are {{complementary}} encryption functions; and {{the comparison}} between two <b>ciphertexts</b> c 1 and c 2 is done by C(cL 1,cR 2). This way, C may be applied without the complete knowledge of the <b>ciphertexts.</b>|$|R
40|$|Existing semantically secure public-key {{searchable}} encryption schemes take {{search time}} linear {{with the total}} number of the <b>ciphertexts.</b> This makes retrieval from large-scale databases prohibitive. To alleviate this problem, this paper proposes searchable public-key <b>ciphertexts</b> with hidden structures (SPCHS) for keyword search as fast as possible without sacrificing semantic security of the encrypted keywords. In SPCHS, all keyword-searchable <b>ciphertexts</b> are structured by hidden relations, and with the search trapdoor corresponding to a keyword, the minimum information of the relations is disclosed to a search algorithm as the guidance to find all matching <b>ciphertexts</b> efficiently. We construct an SPCHS scheme from scratch in which the <b>ciphertexts</b> have a hidden star-like structure. We prove our scheme to be semantically secure in the random oracle (RO) model. The search complexity of our scheme is dependent on the actual number of the <b>ciphertexts</b> containing the queried keyword, rather than the number of all <b>ciphertexts.</b> Finally, we present a generic SPCHS construction from anonymous identity-based encryption and collision-free full-identity malleable identity-based key encapsulation mechanism (IBKEM) with anonymity. We illustrate two collision-free full-identity malleable IBKEM instances, which are semantically secure and anonymous, respectively, in the RO and standard models. The latter instance enables us to construct an SPCHS scheme with semantic security in the standard model...|$|R
30|$|To {{generate}} CBF-based recommendations, {{the protocol}} {{is divided into}} three main steps. Firstly, the target user encrypts his personal rating vector and sends the <b>ciphertexts</b> to server. Secondly, the server performs homomorphic operations and encryption to generate the <b>ciphertexts</b> of numerator and denominator of Eq. (2) (CBF-based method), respectively. Finally, the user receives these <b>ciphertexts</b> from server and decrypts them to determine recommendation scores. The detailed steps are described below.|$|R
25|$|These test vectors are not official, but {{convenient}} for anyone testing their own RC4 program. The keys and plaintext are ASCII, the keystream and <b>ciphertext</b> are in hexadecimal.|$|E
25|$|The <b>ciphertext</b> on the {{left-hand}} {{side of the}} sculpture (as seen from the courtyard) of the main sculpture contains 869 characters in total : 865 letters and 4 question marks.|$|E
25|$|In cryptanalysis, {{frequency}} analysis {{is the study}} of the frequency of letters or groups of letters in a <b>ciphertext.</b> The method is used as an aid to breaking classical ciphers.|$|E
50|$|Chosen-ciphertext attacks, {{like other}} attacks, may be {{adaptive}} or non-adaptive. In an adaptive chosen-ciphertext attack, the attacker {{can use the}} results from prior decryptions to inform their choices of which <b>ciphertexts</b> to have decrypted. In a non-adaptive attack, the attacker chooses the <b>ciphertexts</b> to have decrypted without seeing any of the resulting plaintexts. After seeing the plaintexts, the attacker can no longer obtain the decryption of additional <b>ciphertexts.</b>|$|R
40|$|How {{to build}} an {{efficient}} identity-based broadcast system with short <b>ciphertexts</b> is a main challenge at present. The existing constructions with constant size <b>ciphertexts</b> in the standard model {{are based on the}} non-standard cryptography assumption. In addition, these constructions cannot solve the trade-off betwe e n the private keys and <b>ciphertexts.</b> Hence t hese methods lead to schemes that are somewhat inefficient in the real world. To overcome these shortcomings, two schemes are introduced at first. The initial construction has constant size <b>ciphertexts</b> and O(| S |) -size private keys(where S denotes the set of receivers). Then the second scheme achieves constant size <b>ciphertexts</b> and constant size private keys which solve the trade-off between the private keys and <b>ciphertexts.</b> Furthermore, their security rest s on the hardness of the decision Diffie-Hellman Exponent problem instead of other strong assumptions. However, both schemes only achieve a weak security-selective-identity security. Finally, two helpful constructions are proposed. They are constructed in the standard model and achieve full security which is stronger than selective-identity security. </span...|$|R
30|$|Homomorphic {{encryption}} induces {{a comparatively}} high computational overhead for the SP to aggregate <b>ciphertexts</b> {{and for the}} mediator to encrypt/decrypt the <b>ciphertexts.</b> We refer to partially homomorphic encryption here; the overhead for fully homomorphic encryption is much higher.|$|R
