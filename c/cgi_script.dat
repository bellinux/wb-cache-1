45|6|Public
5000|$|When a {{web server}} executes a <b>CGI</b> <b>script</b> it {{provides}} input to the console/shell program using environment variables or [...] "standard input". Standard input is like typing data into a console/shell program; {{in the case}} of a <b>CGI</b> <b>script,</b> the web server does the typing. The <b>CGI</b> <b>script</b> writes data out to [...] "standard output" [...] and that output is sent to the client (the web browser) as a HTML page.|$|E
5000|$|Metadata driven user {{interfaces}} (a Model-View-Controller implementation, usable in both HTML::Mason and <b>cgi</b> <b>script</b> contexts) ...|$|E
5000|$|When an HTTP {{request is}} made, a new process is created {{each time the}} <b>CGI</b> <b>script</b> is called. The {{overhead}} associated with process creation can dominate the workload especially when the script does relatively fast operations. Thus, process creation will take more time for <b>CGI</b> <b>script</b> execution. In contrast, for servlets, each request is handled by a separate Java thread within the web server process, thereby avoiding the overhead associated with forking processes within the HTTP daemon.|$|E
40|$|Although {{reference}} transactions declined {{over the}} years, {{we saw a}} rise inhits on our library homepage and its resources. This session will examine how HKUST Library improved self-service on its website; how we use programs, <b>cgi</b> <b>scripts,</b> style sheets, etc. to make our databases, subject guides and quality internet sites more accessible and easily discovered; how we select internet sites, maintain the links and compile subject guides to help users find what they need...|$|R
40|$|We {{present an}} intrusion-detection tool aimed at {{protecting}} web servers, and justify {{why such a}} tool is needed. We describe several interesting features, {{such as the ability}} to run in real time and to keep track of suspicious hosts. The design is flexible and the signatures used to detect malicious behavior are not limited to simple pattern matching of dangerous <b>cgi</b> <b>scripts.</b> The tool includes mechanisms {{to reduce the number of}} false alarms. We conclude with a discussion of the information gained from deploying the tool at various sites. ...|$|R
40|$|This paper {{describes}} two Web-based {{surveys that}} incorporated experimental designs, and discusses {{some of the}} problems encountered. One problem related to the use of "cookies " and <b>cgi</b> <b>scripts,</b> which were needed to track respondents and assign them to treatment groups. These scripts could not be processed by older versions of browsers, causing a considerable reduction in sample size. There was also drop-off throughout the questionnaire, for reasons that are unclear. Secondly, although incentives were used, these failed to generate either a high, or a speedy, response. These findings highlight the importance of identifying appropriate incentives and developing effective Web-survey management procedures...|$|R
50|$|Roundup {{supports}} several web backends. It can be run standalone, as {{a background}} daemon process, as a <b>CGI</b> <b>script</b> or as WSGI application.|$|E
5000|$|If {{the form}} is {{processed}} on the server by a <b>CGI</b> <b>script,</b> the script may typically receive the query string as an environment variable named [...]|$|E
50|$|The {{original}} fusker {{technology was}} created by Carthag Tuek, who made the Perl <b>CGI</b> <b>script</b> as a work-alike of the UNIX/Linux cURL tool, specifically its URL-globbing functionality.|$|E
40|$|We {{present an}} intrusion-detection tool focused on web server attacks, and {{describe}} {{why such a}} tool is needed. Several interesting features will be presented, {{such as the ability}} to run in real time and to keep track of suspicious hosts, which simplifies the learning of new attacks. The design is flexible and the signatures used to detect malicious behavior are not limited to simple pattern matching of dangerous <b>cgi</b> <b>scripts,</b> but also considers a history of different types of attacks on a host basis to allow detection {{of a wide variety of}} malicious behavior. The tool includes mechanisms for reducing the rate of false alarms. We conclude with a discussion of the information gained from deploying the tool at various sites. 1...|$|R
40|$|The CASTLE toolkit is {{an on-line}} {{authoring}} tool that allows course tutors and managers to quickly create interactive quizzes {{for use on}} the web without any prior knowledge of HTML, <b>cgi,</b> or similar <b>scripting</b> languages [...] There are {{tips on how to}} write tests, and examples of good practices for test and question design. Educational levels: Undergraduate lower division, Undergraduate upper division, Graduate or professional...|$|R
40|$|As {{web pages}} become more user {{friendly}} and interactive {{we see that}} objects such as pictures, media files, <b>cgi</b> <b>scripts</b> and databases are more frequently used. This development causes increased stress on the servers due to intensified cpu usage and a growing need for bandwidth to serve the content. At the same time users expect low latency and high availability. This dilemma can be solved by implementing load balancing between servers serving content to the clients. Load balancing can provide high availability through redundant server solutions, and reduce latency by dividing load. This paper describes a comparative study of different load balancing algorithms used to distribute packets among a set of equal web servers serving HTTP content. For packet redirection, a Nortel Application Switch 2208 will be used, and the servers will be hosted on 6 IBM bladeservers. We will compare three different algorithms: Round Robin, Least Connected and Response Time. We will look at properties such as response time, traffic intensity and type. How will these algorithms perform when these variables change with time. If we can find correlations between traffic intensity and efficiency of the algorithms, {{we might be able}} to deduce a theoretical suggestion on how to create an adaptive load balancing scheme that uses current traffic intensity to select the appropriate algorithm. We will also see how classical queueing algorithms can be used to calculate expected response times, and whether these numbers conform to the experimental results. Our results indicate that there are measurable differences between load balancing algorithms. We also found the performance of our servers to outperform the queueing models in most of the scenarios. Acknowledgements First and foremost I would like to thank my supervisor, professor Mark Burgess, for his invaluable help and guidance during this semester. He has given me inspiration, motivation and input beyond what I expected. I would also like t...|$|R
5000|$|An {{early use}} of CGI scripts was to process forms. In the {{beginning}} of HTML, HTML forms typically had an [...] "action" [...] attribute and a button designated as the [...] "submit" [...] button. When the submit button is pushed the URI specified in the [...] "action" [...] attribute {{would be sent to}} the server with the data from the form sent as a query string. If the [...] "action" [...] specifies a <b>CGI</b> <b>script</b> then the <b>CGI</b> <b>script</b> would be executed and it then produces a HTML page.|$|E
50|$|Formmail and {{its many}} variants, {{is a free}} open source web server <b>CGI</b> <b>script</b> that captures and {{processes}} form contents and then typically e-mails them {{to one or more}} recipients.|$|E
5000|$|Simultaneous CGI {{requests}} will {{load the}} <b>CGI</b> <b>script</b> to be copied into memory once per request. With servlets, {{there is only}} one copy that persists across requests and is shared between threads.|$|E
5000|$|From the environment, {{it can be}} {{seen that}} the Web browser is Firefox running on a Windows 7 PC, the Web server is Apache running on a system that emulates Unix, and the <b>CGI</b> <b>script</b> is named [...]|$|E
50|$|GIFBuilder was {{released}} in 1996 and that year won the Ziff Davis Shareware Award in the Graphics and Multimedia category.http://nyctergatis.com/gifbuilder/index.html. GIFBuilder was developed from clip2gif, an earlier program by the same author, which was an Apple Event-based <b>CGI</b> <b>script</b> for generating GIF images on WebStar and other Macintosh web servers of the era.|$|E
5000|$|Greymatter {{is written}} in Perl, {{designed}} as a <b>CGI</b> <b>script</b> placed in the cgi-bin directory of a website. The blog can be displayed on the website's homepage or in a subdirectory. The archives are in a user customized folder on the server, typically called [...] "archives". The main, archive, and entry pages are written in HTML.|$|E
50|$|Started by Nick Hengeveld in 1993 at Calvin College, Bible Gateway was {{initially}} planned as a static HTML {{presentation of the}} Bible. In 1995, the site moved to the new Gospel Communications Network (a part of Gospel Communications International). The Bible Gateway website was originally written as a <b>CGI</b> <b>script</b> in Perl. Later versions were written in C++, PHP and Ruby.|$|E
5000|$|Besides relays and proxies, spammers {{have used}} other {{insecure}} services to send spam. One example is FormMail.pl, a <b>CGI</b> <b>script</b> to allow Web-site users to send e-mail feedback from an HTML form. Several {{versions of this}} program, and others like it, allowed the user to redirect e-mail to arbitrary addresses. Spam sent through open FormMail scripts is frequently marked by the program's characteristic opening line: [...] "Below {{is the result of}} your feedback form." ...|$|E
5000|$|The delete {{operation}} is implemented by invoking a <b>CGI</b> <b>script</b> running over the servers. To each server the hash result of [...] (namely, the MD5 hash result for the concatenation of the server domain name with the publisher's password) is sent {{along with the}} corresponding [...] string and compared with the one already stored in the password file under the directory {{if there is a}} match, the file file is removed from that directory.|$|E
50|$|In computing, Common Gateway Interface (CGI) {{offers a}} {{standard}} protocol for web servers to execute programs that execute like Console applications (also called Command-line interface programs) {{running on a}} server that generates web pages dynamically.Such programs are known as CGI scripts or simply as CGIs. The specifics of how the script is executed by the server {{are determined by the}} server. In the common case, a <b>CGI</b> <b>script</b> executes at the time a request is made and generates HTML.|$|E
50|$|Matt's Script Archive is a {{collection}} of CGI scripts written in the Perl programming language. Started in 1995 by Matt Wright (at the time a high school student in Fort Collins, Colorado), the archive contains about a dozen free scripts, designed to be easily added to a site and configured. One of the scripts, FormMail, is claimed to be the most popular <b>CGI</b> <b>script</b> on the World Wide Web, with over 2 million downloads since 1997.|$|E
50|$|Gstat {{has evolved}} {{over the past few}} years from a simple <b>CGI</b> <b>script</b> that {{displayed}} the summary of a grid infrastructure to a production quality service providing rich features such as information content testing and infrastructure monitoring. An evolutionary approach to its development has enabled GStat to add functionally in response to real use cases and to become a key operational tool. GStat 2.0 is a major redesign of the original version which will ensure that it will meet the future demands of an evolving infrastructure and easily integrate with other operational tools.|$|E
50|$|Linux servers {{may also}} be used by malware without any attack against the system itself, where e.g. web content and scripts are insufficiently {{restricted}} or checked and used by malware to attack visitors. Some attacks use complicated malware to attack Linux servers, but when most get full root access then hackers are able to attack by modifying anything like replacing binaries or injecting modules. This may allow the redirection of users to different content on the web. Typically, a <b>CGI</b> <b>script</b> meant for leaving comments, could, by mistake, allow inclusion of code exploiting vulnerabilities in the web browser.|$|E
5000|$|For example, if {{a request}} for /DragonFlyBSD/HAMMER.5 were to come along, it would first be {{redirected}} internally to /d/HAMMER.5 with the first rewrite directive below (only affecting the internal state, without any HTTP replies issued to the client just yet), {{and then with the}} second rewrite directive, an HTTP response with a 302 Found status code would be issued to the client to actually redirect to the external <b>cgi</b> <b>script</b> of web-man: location /DragonFly { rewrite ^/DragonFly(BSD)?( [...] ,/.*)?$ /d$2 last; } location /d { set $db [...] "http://leaf.dragonflybsd.org/cgi/web-man?command="; set $ds [...] "&section="; rewrite ^/./(^/+)\.(1-9)$ $db$1$ds$2 redirect; } ...|$|E
5000|$|The {{author has}} said [...] "I {{know for a}} long time that {{vulnerabilities}} in other web servers [...] thing that bothers me: the runtime of a CGI. A CGI process other web servers can run forever. A single <b>CGI</b> <b>script</b> can DoS a webserver. A system administrator is needed to kill the script. And what about a client hacker that keeps on guessing passwords for HTTP authentication? These kind of issues inspired me to create Hiawatha, with settings for maximum request sending time, maximum CGI run time, client banning, etc. Features that, in my opinion, every daemon should have." ...|$|E
50|$|By {{reading a}} shared library file such as libc, an {{attacker}} with local access can discover the load address of libc {{in every other}} application on the system. Since most programs link to libc, the libc library file always has to be readable; any attacker with local access may gather information about the address space of higher privileged processes. Local access may commonly be gained by shell accounts or Web server accounts that allow the use of CGI scripts, which may read and output any file on the system. Directory traversal vulnerabilities {{can be used by}} attackers without accounts if <b>CGI</b> <b>script</b> vulnerabilities are available.|$|E
50|$|The {{design of}} Blosxom is minimalist. It is {{distributed}} {{as a single}} Perl script, and all configuration is done by editing this script. All of the weblog entries are stored as plain text files consisting of a headline, optional headers or meta-information (if using certain plugins), and a blank line followed by the post body. New display styles can be added by creating template files called flavours. Blosxom can operate as a <b>CGI</b> <b>script</b> or produce static HTML files. By default, Blosxom supports showing recent posts, doing content categorization, content retrieval by date (and permalinking based on that), and RSS feeds. It can be extended with dozens of available plugins.|$|E
5000|$|A Web server that {{supports}} CGI can be configured to interpret a URL that {{it serves as}} a reference to a <b>CGI</b> <b>script.</b> A common convention is to have a [...] directory {{at the base of the}} directory tree and treat all executable files within this directory (and no other, for security) as CGI scripts. Another popular convention is to use filename extensions; for instance, if CGI scripts are consistently given the extension , the web server can be configured to interpret all such files as CGI scripts. While convenient, and required by many prepackaged scripts, it opens the server to attack if a remote user can upload executable code with the proper extension.|$|E
50|$|Unless {{otherwise}} specified, any WSH scripting engine can be {{used with}} the various Windows server software packages to provide CGI scripting. The current versions of the default WSH engines and all or most of the third party engines have socket abilities as well; as a <b>CGI</b> <b>script</b> or otherwise, PerlScript is the choice of many programmers for this purpose and the VBScript and various Rexx-based engines are also rated as sufficiently powerful in connectivity and text-processing abilities to also be useful. This also goes for file access and processing—the earliest WSH engines for VBScript and JScript do not since the base language did not, whilst PerlScript, ooRexxScript, and the others have this from the beginning.|$|E
5000|$|WebTeach, {{a web-based}} {{asynchronous}} communication system using chronological threads in the [...] "Confer style" [...] originally {{developed in the}} mid 70s by Robert Parnes, was first used in 1995 in the Professional Development Centre at UNSW. It was written in Apple's Hypercard as a <b>CGI</b> <b>script</b> running behind WebStar by Dr. Chris Hughes and Dr. Lindsay Hewson at UNSW. The 1996 versions supported a Notice Board, a Seminar Room and a Coffee Shop for each class group, and added email notifications, a Quiz function, {{and a range of}} pre-programmed communication modes that emulated small group teaching strategies including brainstorming, questioning, case studies and commitment exercises. The modes were characterised by changes in layout, font colours, and the options available to teachers and students. The software was refined in subsequent years, with additional modes, including a formal debate mode, being added. In 2002 it was completely rewritten in Cold Fusion and refined to include many more features, including private groups, voting modes and fully functional web-based administration pages. WebTeach supports an approach to teaching and learning on the web that is more akin to an asynchronous virtual classroom than it is to an instructionally designed and packaged educational experience. Communication forms the basis of the teaching (as opposed to content provision) and the teacher in a group can switch teaching strategies (modes) easily, in order to respond to student contributions.|$|E
40|$|The use of JavaScript {{scripting}} language for adding interaction to portable teaching materials {{of a high}} typographical quality in PDF file format is described. An extended version of the program T E X called pdfT E X is extremely useful for such purposes. It is shown that applications similar to those done by <b>CGI</b> <b>script</b> on the web {{can be done in}} PDF, exploiting the embedded JavaScript engine implementation in PDF viewers...|$|E
40|$|This paper {{discusses}} {{the shortcomings of}} unparameterizable image maps and presents {{a solution to the}} problem through the use of PATH_INFO and textual substitution in the mapping configuration file. After some discussion on why this scheme was chosen instead of the alternatives, two example of actual use are given: passing parameters to the mapping file (1) as a path and (2) as arguments to a <b>CGI</b> <b>script.</b> Both techniques offer convenience and ease of design to the website administrator and we explore these advantages. ...|$|E
40|$|As WWW spreads, an {{application}} software using network {{has come to}} be requested. It has a function to graph numerical data dynamically according to the user input. This paper explains how to achieve it by using the plot library for web which creates both Postscript and GIF format files. This application is composed of three parts : (1) form for data input; (2) <b>CGI</b> <b>script</b> which handles data input; (3) program which makes graph. In this study, an example of graphing the aftershock probability is shown in detail. ＜論説...|$|E
40|$|Abstract — Remote {{monitoring}} {{of a medical}} device in critical conditions is an emerging trend where cost reduction, portability and mobility are the main focuses. Integrating web servers to these medical devices will aid in monitoring them over the Internet and also in creating effective user interfaces {{in the form of}} web pages. This paper explores the topic of an efficient and low-weight embedded Web server for Web-based medical monitoring management. In this paper, the controller that is used is an Arm cortex M 3 (LM 3 S 9 B 92), which support all the networking protocol. <b>CGI</b> <b>script</b> will act as a bridge between the controller and the browser, helps for accessing the devices that are connected to the controller from the browser...|$|E
