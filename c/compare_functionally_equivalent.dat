1|1943|Public
40|$|Levels of {{linguistic}} {{structure and the}} rate of change Until recently, most studies of language change have nec€ssadly tteated one area of language at a time: phonology, grammar, or the leicon. r At present, however, we know relatively little about relationships between changes in different areas of language structue. We do know, for example, that c€rtain types of vocabulary are more resistent to replacement han others, that cer-tain morphological configurations are more susceptible to analogic leveling than othen, and that certain combinations of syntactic rules are morc stable than othe$, but we have as yet had little opportunity to <b>comPare</b> <b>functionally</b> <b>equivalent</b> changes {{in different parts of the}} grammar. Just such an opportuniiy exists among the Northem Iroquoian languages' Two sets of mechanisms intenct pervasively tfuoughout all levels of struc-ture in all of these languages. One set reflects primarily the speaker's evalua' tion of the hearer's knowledge. Speakers exploit these mechanisms primarily to arange infomation in such a way as to be most easily and readily under-stood. The other set, sometimes termed evidential, reflects the speaker's evaluation of his/her own knowledge, i. e., the reliabitty of the information communicated. Both types of distinctions, the assesment of hearers ' and speaken ' knowledge, are marked by syntactic, morphological, predicate, and particle devices in all of the Northem Iroquoian languages. As can be seen from t}re diagram below, the nature of the genetic rela' tionships arnong the Northem Iroquoian languages Permits the reconstruc-tion of five different stages in the development of the family: Proto-Northem&apos...|$|E
5000|$|Wood {{products}} {{that have been}} installed and are used in an appropriate way {{tend to have a}} favourable environmental profile <b>compared</b> to <b>functionally</b> <b>equivalent</b> products out of other materials.|$|R
40|$|Reconfigurable {{system is}} a {{promising}} alternative to deliver both flexibility and performance at the same time. New reconfigurable technologies and technology-dependent tools have been developed, but a system-level design methodology to support system analysis and fast design space exploration is missing. In this paper, we present a SystemC-based system-level design approach. The main focuses are the resource estimation to support system analysis and reconfiguration modeling for fast performance simulation. The approach was applied in a real design case of a WCDMA detector on a commercially available reconfigurable platform. The run-time reconfiguration was used and the design showed 40 % area saving when <b>compared</b> to a <b>functionally</b> <b>equivalent</b> fixed system and 30 times better in processing time when <b>compared</b> to a <b>functionally</b> <b>equivalent</b> pure software design...|$|R
30|$|Reconfigurable {{system is}} a {{promising}} alternative to deliver both flexibility and performance at the same time. New reconfigurable technologies and technology-dependent tools have been developed, but a complete overview of the whole design flow for run-time reconfigurable systems is missing. In this work, we present a design flow instantiation for such systems using a real-life application. The design flow is roughly divided into two parts: system level and implementation. At system level, our supports for hardware resource estimation and performance evaluation are applied. At implementation level, technology-dependent tools are used to realize the run-time reconfiguration. The design case {{is part of a}} WCDMA decoder on a commercially available reconfigurable platform. The results show that using run-time reconfiguration can save over 40 % area when <b>compared</b> to a <b>functionally</b> <b>equivalent</b> fixed system and achieve 30 times speedup in processing time when <b>compared</b> to a <b>functionally</b> <b>equivalent</b> pure software design.|$|R
40|$|This paper {{deals with}} {{evaluating}} {{the capabilities of}} the massively parallel Connection Machine CM 2 in predicting unsteady flows in turbomachines. The implementation on the CM 2 of an implicit, time-accurate, zonal algorithm for the Navier-Stokes equations in two dimensions is described. Programming issues and modifications made to the original sequential algorithm to improve performance on the CM 2 are briefly discussed. Performance is <b>compared</b> to a <b>functionally</b> <b>equivalent</b> code for the Cray YMP...|$|R
40|$|Reconfigurable {{system is}} a {{promising}} alternative to deliver both flexibility and performance at the same time. New reconfigurable technologies and technology-dependent tools have been developed, but a complete overview of the whole design flow for run-time reconfigurable systems is missing. In this work, we present a design flow instantiation for such systems using a real-life application. The design flow is roughly divided into two parts: system level and implementation. At system level, our supports for hardware resource estimation and performance evaluation are applied. At implementation level, technology-dependent tools are used to realize the run-time reconfiguration. The design case {{is part of a}} WCDMA decoder on a commercially available reconfigurable platform. The results show that using run-time reconfiguration can save over 40 % area when <b>compared</b> to a <b>functionally</b> <b>equivalent</b> fixed system and achieve 30 times speedup in processing time when <b>compared</b> to a <b>functionally</b> <b>equivalent</b> pure software design. Copyright © 2008 Yang Qu et al. This is an open access article distributed under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. 1...|$|R
50|$|By 2006, Arteris {{developed}} the first commercially available NoC IP product, called NoC Solution, followed in 2009 {{by a more}} advanced product, FlexNoC. The products used “packetization and a distributed network of small interconnect elements to address congestion, timing, power and performance issues.” Arteris marketed FlexNoC as an improvement on traditional SoCs interconnect fabrics, citing its reduction in gate count by 30 percent, reduction of wires by 50 percent, and a more compact chip floor as <b>compared</b> to a <b>functionally</b> <b>equivalent</b> hybrid bus or crossbar.|$|R
40|$|This report studies {{processes}} which convert biomass-derived feedstocks (e. g. fermentable sugar) into organic bulk chemicals (e. g. lactic acid, acetic acid, butanol and ethanol) {{by means}} of white biotechnology (e. g. fermentation or enzymatic conversion), either with or without genetically modified organisms. Apart from white biotechnology, also conventional chemistry is involved in all processes. All white biotechnology products are <b>compared</b> to <b>functionally</b> <b>equivalent</b> petrochemical products. The key research questions addressed in this report are which products could be made with white biotechnology, whether these products can contribute to savings of energy use and greenhouse gas (GHG) emissions, under which conditions the products become economically viable, which risks may originate from a shift towards white biotechnology chemicals {{including the use of}} genetically modified organisms (GMO) in fermentation and what the public perception is...|$|R
40|$|We {{present a}} {{software}} tool for power dissipation analysis and optimization on the algorithmic abstraction level from C/C++ and VHDL descriptions. An analysis is most efficient {{on such a}} high level since the influence of design decisions on the power demand increases with increasing abstraction [1]. The ORINOCO tool enables to <b>compare</b> different but <b>functionally</b> <b>equivalent</b> algorithms and bindings to RT-level architectures with respect to power consumption. The results of the optimized binding {{can be used to}} guide synthesis. In the experimental evaluation we compare the predicted optimization trend with synthesized implementations and prove the accuracy of our methodology and tool. 1...|$|R
40|$|Abstract. This paper {{describes}} {{the design and}} implementation of as-sociation aspects, which are a linguistic mechanism for the AspectJ lan-guage that concisely associates aspect instances to object groups by ex-tending the per-object aspects in AspectJ. This mechanism allows an aspect instance to be associated {{to a group of}} objects, and by providing a new pointcut primitive to specify aspect instances as execution context of advice. With association aspects, we can straightforwardly implement crosscutting concerns that have stateful behavior related to a particular group of objects. The new pointcut primitive can more flexibly specify aspect instances when compared against previous implicit mechanisms. We implemented a compiler for association aspects by modifying the AspectJ compiler, which reduces the size of data structures for keeping associations. Our benchmark tests confirm that the overheads of associ-ation aspects are reasonably small when <b>compared</b> against <b>functionally</b> <b>equivalent</b> aspects in pure AspectJ that manually manage associations. The expressiveness of association aspects is demonstrated through de-velopment of an integrated development environment with and without association aspects. ...|$|R
40|$|The {{accurate}} {{numerical simulation}} of unsteady, three-dimensional viscous flow in turbomachines is computationally very intensive, requiring prohibitively {{large amounts of}} computer time on current vector supercomputers. In recent years, computer systems based on massively parallel architectures have been developed that offer the promise of meeting the computational power requirements of such large-scale simulations. However, a rethinking of existing algorithms and methodology is {{required in order to}} fully harness the computational power of such architectures. In this paper the capabilities of the Connection Machine (CM- 2) in predicting unsteady flows in turbomachines are evaluated. The implementation on the CM- 2 of an implicit, time-accurate, zonal algorithm for the Navier-Stokes equations in two dimensions is described. Programming issues and modifications made to the original algorithm (developed for vector, pipelined supercomputers) in order to improve performance on the CM- 2 are outlined. Algorithm performance is evaluated and <b>compared</b> with a <b>functionally</b> <b>equivalent</b> code for the CRAY-YMP...|$|R
40|$|Somewhat Homomorphic Encryption (SHE) schemes {{allow to}} carry out {{operations}} on data in the cipher domain. In a cloud computing scenario, personal information can be processed secretly, inferring {{a high level of}} confidentiality. For many years, practical parameters of SHE schemes were overestimated, leading to only consider the FFT algorithm to accelerate SHE in hardware. Nevertheless, recent work demonstrates that parameters can be lowered without compromising the security [1]. Following this trend, this work investigates the benefits of using Karatsuba algorithm instead of FFT for the Fan-Vercauteren (FV) Homomorphic Encryption scheme. The proposed accelerator relies on an hardware/software co-design approach, and is designed to perform fast arithmetic operations on degree 2560 polynomials with 135 bits coefficients, allowing to compute small algorithms homomorphically. <b>Compared</b> to a <b>functionally</b> <b>equivalent</b> design using FFT, our accelerator performs an homomorphic multiplication in 11. 9 ms instead of 15. 46 ms, and halves the size of logic utilization and registers on the FPGA...|$|R
40|$|Abstract Modern {{collections}} of algorithms for DSP and multimedia often rely on linear algebra operators to perform massive numerical transformations on vectorized data. Embedded developers often experience the worst condition of having no FPU {{at all in}} their low-power systems, as many device producers consider FP-math as an expensive option in terms of gates and power consumption. Main aim of this work is to propose a lightweight structure, designed {{to be used in}} an ARM-based environment but easily retargetable to different architectures, capable to perform efficiently vectorized FP operations as described in BLAS Level 1 specification. Peculiar feature is the capability of such a coprocessor to work in a fully pipelined mode. Both single and double precision calculations can be performed. Many different CPU offloading techniques have been implemented, in order to enable reactive power management policies during idle/waiting time slices. An implementation in VHDL is presented as result, showing synthesis and placement results in different technologies. FPGA+ARM 9 prototype is presented and benchmarked. Results have been <b>compared</b> to <b>functionally</b> <b>equivalent</b> solutions running in different environments and using different sets of processing primitives (up to x 86 's SSE 2 / 3 / 4). Finally, a complex application for Hidden Markov Model (HMM) training and evaluation is used as test case to evaluate real-world performance of the proposed approach...|$|R
40|$|FPGAs (field {{programmable}} gate arrays) {{are attractive}} alternatives compared to ASICs (application-specific integrated circuits) for significantly lowering amortized manufacturing costs and dramatically improving design productivity. The architecture of an FPGA is very regular. It {{is relatively easy}} to design a highly optimized tile, with consideration of various manufacturing related issues, and then to replicate it many times across the chip. The configurability of FPGAs also enables yield improvement and defect tolerance. However, FPGAs are still facing serious challenges in terms of delay, power consumption, and logic density compared to ASICs. FPGA is estimated to be over twenty times less efficient in logic density, over three times worse in delay, and over ten times higher in power consumption <b>compared</b> to a <b>functionally</b> <b>equivalent</b> ASIC. One promising way to improve FPGA performance is to incorporate three-dimensional (3 D) integration, which increases the number of active layers and optimizes the interconnect network vertically. Another solution is to apply novel nanoelectronic materials (nanomaterials) and devices. This dissertation introduces three novel reconfigurable architectures, named 3 D nFPGA, FPCNA (field programmable carbon nanotube array), and NEM FPG...|$|R
50|$|Two faults are <b>functionally</b> <b>equivalent</b> if {{they produce}} {{identical}} faulty functions {{or we can}} say, two faults are <b>functionally</b> <b>equivalent</b> {{if we can not}} distinguish them at primary outputs (PO) with any input test vector.|$|R
50|$|BPSK is <b>functionally</b> <b>equivalent</b> to 2-QAM modulation.|$|R
5000|$|A <b>functionally</b> <b>equivalent</b> {{representation}} in multilevel can be: ...|$|R
40|$|A 6 -kilobase-pair (kbp) {{region of}} the genome of the {{extremely}} thermophilic arachaebacterium Methanothermus fervidus which encodes the alpha, beta, and gamma subunit polypeptides of component C of methyl coenzyme M reductase was cloned and sequenced. Genes encoding the beta (mcrB) and gamma (mcrG) subunits were separated by two open reading frames (designated mcrC and mcrD) which encode unknown gene products. The M. fervidus genes were preceded by ribosome-binding sites, separated by short A + T-rich intergenic regions, contained unexpectedly few NNC codons, and exhibited inflexible codon usage at some locations. Sites of transcription initiation and termination flanking the mcrBDCGA cluster of genes in M. fervidus were identified. The sequences of the genes, the encoded polypeptides, and transcription regulatory signals in M. fervidus were <b>compared</b> with the <b>functionally</b> <b>equivalent</b> sequences from two mesophilic methanogens (Methanococcus vannielii and Methanosarcina barkeri) and from a moderate thermophile (Methanobacterium thermoautotrophicum Marburg). The amino acid sequences of the polypeptides encoded by the mcrBCGA genes in the two thermophiles were approximately 80 % identical, whereas all other pairs of these gene products contained between 50 and 60 % identical amino acid residues. The mcrD gene products have diverged more than the products of the other mcr genes. Identification of highly conserved regions within mcrA and mcrB suggested oligonucleotide sequences which might be developed as hybridization probes which could be used for identifying and quantifying all methanogens...|$|R
5000|$|Class I, Order 1 (K=1): [...] <b>Functionally</b> <b>equivalent</b> to the Hann window.|$|R
5000|$|Both {{of those}} final {{equations}} are <b>functionally</b> <b>equivalent</b> to the original, verbose equation: ...|$|R
5000|$|... 1806VM3U: <b>functionally</b> <b>equivalent</b> to the nMOS K1801VM3; {{clock speed}} 8 MHz; 64-pin CQFP ...|$|R
5000|$|... 1806VM5U: <b>functionally</b> <b>equivalent</b> to the nMOS K1801VM3; {{clock speed}} 16 MHz; 64-pin CQFP ...|$|R
5000|$|N1836VM4: <b>functionally</b> <b>equivalent</b> to the nMOS K1801VM4; {{clock speed}} 16 MHz; 64-pin CQFP ...|$|R
40|$|Abstract—This paper {{presents}} an algorithm {{for the detection}} of <b>functionally</b> <b>equivalent</b> code clones in C code. The <b>functionally</b> <b>equivalent</b> code clones is the forth type of clones, which means that two or more code fragments that do the same calculation but with different syntax. Thus, we can detect the <b>functionally</b> <b>equivalent</b> clones by observing the input-output behavior. We propose the definition of input-output behavior by including not only the values of input-output, but also the number and types of input sets and output sets. We call this as the IOT (input, output and types) -Behavior of C code fragment. Our algorithm has been tested in open source code...|$|R
50|$|AEd (Developer Edition). <b>Functionally</b> <b>equivalent</b> to AEs, but {{intended}} {{only for}} non-production development use.|$|R
5000|$|A [...] {{constraint}} is <b>functionally</b> <b>equivalent</b> to {{the following}} check constraint with an [...] predicate: ...|$|R
50|$|AARP {{resolves}} AppleTalk addresses to link layer, usually MAC, addresses. It is <b>functionally</b> <b>equivalent</b> to ARP.|$|R
5000|$|... 1806VM2: <b>functionally</b> <b>equivalent</b> to the nMOS K1801VM2; {{clock speed}} 5 MHz; 42-pin ceramic planar package; 134636 {{transistors}} ...|$|R
5000|$|... an {{automobile}} carries a less-functional [...] "donut" [...] tire as replacement {{instead of a}} <b>functionally</b> <b>equivalent</b> tire.|$|R
2500|$|... the dharma-kāya which penetrates all beings (sarva-sattveṣu dharma-kāya-parispharaṇa), {{which is}} <b>functionally</b> <b>equivalent</b> to brahman in an Upanishadic sense ...|$|R
50|$|These grips are <b>functionally</b> <b>equivalent</b> and {{selected}} {{as a matter}} of personal preference, with hybrid forms being commonplace.|$|R
5000|$|... the dharma-kāya which penetrates all beings (sarva-sattveṣu dharma-kāya-parispharaṇa), {{which is}} <b>functionally</b> <b>equivalent</b> to brahman in an Upanishadic sense ...|$|R
40|$|Conventional {{mechanical}} design {{focuses on a}} single com-pletely specified nominal shape that is later toleranced to al-low for variations in form. The corresponding design pro-cesses usually involve arbitrary decisions affecting the geom-etry and do not support systematic generation of alternative shapes satisfying identical or altered functionalities. This places a serious handicap on the design cycle of a product, since most new designs are obtained by modifying existing products to comply with new functional specifications. Since the functionality of a part does not usually define all of its geometry, a more coherent approach would be to de-sign classes of equivalent mechanical parts that satisfy a given functionality. We show here that, by replacing the completely specified geometry of the traditional approaches with par-tial geometry and functional specification, we can generate classes of mechanical parts that are equivalent, {{in the sense that}} all members of the class satisfy the same functional spec-ifications. Ability to define, compute, and represent classes of func-tionally equivalent parts will allow one to generate, <b>compare</b> and modify <b>functionally</b> <b>equivalent</b> designs, perhaps having dissimilar geometries. We identify three such equivalence classes for artifacts with parts moving in contact, which pre-sume, at the very least, contact between parts, spatial contain-ment during their relative motion, and external loads applied on the moving parts. We show that these classes of function-ally equivalent parts are computable and may be represented unambiguously by maximal elements of each class...|$|R
5000|$|The U11 snRNA (small nuclear ribonucleic acid) is an {{important}} non-coding RNA in the minor spliceosome protein complex, which activates the [...] alternative splicing mechanism. The minor spliceosome is associated with similar protein components as the major spliceosome. It uses U11 snRNA to recognize the 5' splice site (<b>functionally</b> <b>equivalent</b> to U1 snRNA) while U12 snRNA binds to the branchpoint to recognize the 3' splice site (<b>functionally</b> <b>equivalent</b> to U2 snRNA).|$|R
50|$|Global {{deduction}} — {{the attacker}} discovers a <b>functionally</b> <b>equivalent</b> algorithm for encryption and decryption, but without learning the key.|$|R
50|$|The ISC {{license is}} <b>functionally</b> <b>equivalent,</b> and {{endorsed}} by the OpenBSD project as a license template for new contributions.|$|R
