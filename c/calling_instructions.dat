3|550|Public
60|$|It {{was ahead}} and reverse, ahead and reverse, {{with only the}} briefest of pauses in which to shift the gears. Wemple backed up the hard {{formation}} on the inside bank till the car seemed standing on end, rushed ahead till the earth of the outer edge broke under the front tires and splashed in the water. Davies, now off, and again on the running board when needed, accompanied the car in its jerky and erratic progress, tossing robes and coats under the tires, <b>calling</b> <b>instructions</b> to Drexel similarly occupied on the other side, and warning Miss Drexel out of the way.|$|E
5000|$|Prepaid {{conference call}} {{services}} allow businesses and individuals to purchase conferencing services online, and conduct conference calls on a [...] basis. Typically, {{a conference call}} PIN and its associated <b>calling</b> <b>instructions</b> are displayed immediately online after being purchased and/or sent via email. Generally, prepaid conference call services are used with a landline telephone, mobile phone, or computer, {{and there is no}} need to buy additional expensive telecommunications hardware or add/switch long distance service. Some services allow one to start or join a conference call from virtually any country worldwide—with appropriate telephone access.|$|E
50|$|The branch {{instructions}} include conditional and unconditional relativebranches. A branch {{using the}} address in a register is provided; arelative branch which adds a scaled register operand to the programcounter is provided to support jump tables. Branches {{to up to}} instructions distance are encoded in a single word.The procedure <b>calling</b> <b>instructions</b> include relative calls, calls via theconstant pool, indexed calls via a dedicated register and calls via aregister. Most calls within a single program module can be encoded in asingle instruction; inter-module calling requires at most two instructions.It {{is up to the}} callee to save the link-register if it is not a leaf-function, a single instruction extends the stack and saves the link register.|$|E
50|$|Ordinarily, when a {{function}} is invoked, control {{is transferred to}} its definition by a branch or <b>call</b> <b>instruction.</b> With inlining, control drops through directly to the code for the function, without a branch or <b>call</b> <b>instruction.</b>|$|R
25|$|Using {{a special}} system <b>call</b> <b>instruction.</b> This {{technique}} requires special hardware support, which common architectures (notably, x86) may lack. System <b>call</b> <b>instructions</b> {{have been added}} to recent models of x86 processors, however, and some operating systems for PCs make use of them when available.|$|R
50|$|Some smaller {{instruction}} classes {{include the}} shift/rotate instructions and the procedure <b>call</b> <b>instructions.</b> Particularly notable are the stack instructions PUSH and POP, {{and the corresponding}} stack <b>call</b> <b>instructions</b> PUSHJ and POPJ. The byte instructions use a special format of indirect word to extract and store arbitrary-sized bit fields, possibly advancing a pointer to the next unit.|$|R
5000|$|Instruction {{dispatch}} to an <b>instruction</b> queue (also <b>called</b> <b>instruction</b> buffer or reservation stations).|$|R
40|$|Syntax Trees, recursively {{processing}} procedures "on demand" as it encounters <b>call</b> <b>instructions.</b> When {{the results}} of a procedure analysis are known, they are stored along withthe procedure calling context. When a <b>call</b> <b>instruction</b> is processed, a check is made to see if previously computed results cannot be reused directly, without incurring any extra analyses. The user provided context filtering function performs this check...|$|R
50|$|In the IBM System/360 {{mainframe}} family, a Supervisor <b>Call</b> <b>instruction</b> implements {{a system}} call for legacy facilities; the Program <b>Call</b> (PC) <b>instruction</b> {{is used for}} newer facilities. In particular, PC is used when the caller might be in SRB mode.|$|R
50|$|The prologue will {{commonly}} {{save the}} return address {{left in a}} register by the <b>call</b> <b>instruction</b> by pushing the value onto the call stack. Similarly, the current stack pointer and/or frame pointer values may be pushed. Alternatively, some instruction set architectures automatically provide comparable functionality {{as part of the}} action of the <b>call</b> <b>instruction</b> itself, and in such an environment the prologue need not do this.|$|R
50|$|Dynamic-link {{libraries}} (DLLs) in Microsoft Windows use variant E8 of the <b>CALL</b> <b>instruction</b> (<b>Call</b> near, relative, displacement {{relative to}} next instruction). These instructions {{do not need}} to be fixed up when a DLL is loaded.|$|R
5000|$|Special {{jump and}} <b>call</b> <b>instructions</b> ( [...] and [...] ) make access {{within the same}} 2 KiB of program memory {{slightly}} smaller.|$|R
5000|$|In {{telephone}} systems, a {{switching system}} in which telephone operators receive <b>call</b> <b>instructions</b> orally from users and complete them by automatic equipment.|$|R
50|$|Books with {{technical}} {{information on how}} to do something or how to use some equipment are <b>called</b> <b>instruction</b> manuals. Other popular how-to books include cookbooks and home improvement books.|$|R
50|$|In {{a similar}} manner, {{subroutine}} <b>call</b> <b>instructions</b> can be indirect, with {{the address of}} the subroutine to be called specified in memory. Function Pointers are typically implemented with indirect subroutine calls.|$|R
50|$|A huge {{difference}} from Java's bytecode is that CIL comes with ldind, stind, ldloca, and many <b>call</b> <b>instructions</b> which are enough for data/function pointers manipulation needed to compile C/C++ code into CIL.|$|R
50|$|Many RISC machines, {{as well as}} the CISC IBM System/360 and successors, have {{subroutine}} <b>call</b> <b>instructions</b> {{that place}} the return address in an address register—the register-indirect addressing mode is used to return from that subroutine call.|$|R
50|$|An {{exception}} is encountered when the execution unit encounters a branch instruction i.e. either a jump or a <b>call</b> <b>instruction.</b> In this case, the entire queue must be dumped and the contents pointed {{to by the}} instruction pointer must be fetched from memory.|$|R
40|$|IBM Time Sharing System (TSS) makes a {{distinction}} between user and system programmers. This publication is intended for persons responsible for maintaining. modifying, or extending the system and discusses: • Operating environment • Program structure • Coding practices and conventions • Privileged supervisor <b>call</b> <b>instruction...</b>|$|R
50|$|The {{program counter}} (PC), {{commonly}} <b>called</b> the <b>instruction</b> pointer (IP) in Intel x86 and Itanium microprocessors, and sometimes <b>called</b> the <b>instruction</b> address register (IAR), the instruction counter, or {{just part of}} the instruction sequencer,is a processor register that indicates where a computer is in its program sequence.|$|R
50|$|Trampolines: Many CPUs have smaller {{subroutine}} <b>call</b> <b>instructions</b> {{to access}} low memory. A compiler can save space by using these small {{calls in the}} main body of code. Jump instructions in low memory can access the routines at any address. This multiplies space savings from code factoring.|$|R
30|$|The {{output of}} path {{information}} of testing program execution is achieved through the function <b>call</b> <b>instruction</b> (invoke) in the Dalvik virtual machine. With {{the execution of}} the invoke command, the class and method name will be printed out. It contains the procedure call and prints out the information.|$|R
50|$|Another approach, {{taken by}} kBouncer, modifies the {{operating}} system to verify that return instructions actually divert control flow back to a location immediately following a <b>call</b> <b>instruction.</b> This prevents gadget chaining, but carries a heavy performance penalty, and is not effective against jump-oriented programming attacks which alter jumps and other control-flow-modifying instructions instead of returns.|$|R
40|$|An {{asynchronous}} superscalar {{architecture is}} presented {{based on a}} novel architectural feature <b>called</b> <b>instruction</b> compounding. This enables efficient dynamic scheduling and forwarding of data based on local information, while maintaining the advantages of asynchrony in terms of exploiting actual delays. Results are presented in which statically and dynamically compounded architectures are compared against an equivalent synchronous superscalar architecture. 1...|$|R
50|$|The 8259 may be {{configured}} to {{work with}} an 8080/8085 or an 8086/8088. On the 8086/8088, the interrupt controller will provide an interrupt number on the data bus when an interrupt occurs. The interrupt cycle of the 8080/8085 will issue three bytes on the data bus (corresponding to a <b>CALL</b> <b>instruction</b> in the 8080/8085 instruction set).|$|R
50|$|Software Testing: Using the {{intrinsic}} interfaces of TIE operations from C/C++, the TIEs are first {{integrated with the}} C code that tests the required application functionality. After such integration, testing of the software running on the Xtensa core is performed by using the software simulator on PC (The Xtensa simulator on PC is <b>called</b> <b>Instruction</b> Set Simulator - ISS).|$|R
40|$|Gaining {{the code}} re-use {{advantages}} of {{object oriented programming}} requires dynamic function binding, which allows a new subclass to override a function of a superclass. Dynamic binding is obtained in C++ {{through the use of}} virtual functions. Unfortunately, virtual functions have two negative impacts on performance. First, they are traditionally compiled into indirect <b>call</b> <b>instructions,</b> which take longer to execute than direct <b>call</b> <b>instructions.</b> Second, it is difficult for the compiler to perform optimization since summary information from called procedures is hard or even impossible to obtain. The net effect is that C++ programmers avoid the use of virtual functions. We present a new optimization that (1) removes the indirect function calls used for virtual functions, (2) enables other compiler optimizations such as inlining and constant propagation, and (3) requires no extensive dataflow analysis or profile information and thus is easily implemented in an existing compiler. We includ [...] ...|$|R
5000|$|... "Nididhyasana is so <b>called</b> when, <b>instruction</b> {{about the}} {{uniqueness}} of the Atman is justified ...|$|R
50|$|Additionally, some chip-specific {{differences}} affect code generation. Code pointers (including return addresses on the stack) are two bytes long on chips {{with up to}} 128 KB of flash memory, {{but three}} bytes long on larger chips; not all chips have hardware multipliers; chips with over 8 KB of flash have branch and <b>call</b> <b>instructions</b> with longer ranges; and so forth.|$|R
5000|$|There was no {{division}} instruction (but various division subroutines were supplied) {{and no way}} {{to directly}} load a number into the accumulator (a [...] "sTore and zero accumulator" [...] instruction followed by an [...] "Add" [...] instruction were necessary for this). There was no unconditional jump instruction, nor was there a procedure <b>call</b> <b>instruction</b> - it {{had not yet been}} invented.|$|R
40|$|This paper {{discusses}} library instruction. Assessments {{are recommended}} {{to determine the}} effectiveness of student learning. This paper also discusses a project by the UNT Libraries' in which they developed software to assess library <b>instruction,</b> <b>called</b> Library <b>Instruction</b> Software for Assessment (LISA) and the outcome of that study...|$|R
5000|$|... {{providing}} services to job programs that issue Supervisor Call (SVC) and Monitor <b>call</b> (MC) <b>instructions,</b> including: ...|$|R
50|$|The CPU {{design was}} quite complex - using three way {{interleaving}} of <b>instruction</b> execution (later <b>called</b> <b>instruction</b> pipeline) to improve throughput. Each instruction {{would go through}} an indexing phase, an actual instruction execution phase and an output phase. While an instruction {{was going through the}} indexing phase, the previous instruction was in its execution phase and the instruction before it was in its output phase.|$|R
5000|$|The ROM {{address space}} is 512 words (12 bits each), {{which may be}} {{extended}} to 2048 words by banking. [...] and [...] instructions specify the low 9 bits of the new code location; additional high-order bits are taken from the status register. Note that a <b>CALL</b> <b>instruction</b> only includes 8 bits of address, and may only specify addresses {{in the first half}} of each 512-word page.|$|R
50|$|In 1818, {{the clergy}} and the {{authorities}} of Tenerife requested again {{the creation of}} the Diocese to the Holy See (this time with the support of King Ferdinand VII of Spain) in a document <b>called</b> <b>Instruction</b> of the Chamber of Castile, having a favorable response of Pope. In this role it played an important role the priest Cristóbal Bencomo y Rodríguez, confessor of King Ferdinand VII and Titular Archbishop of Heraclea.|$|R
50|$|In {{computer}} science, {{the term}} threaded code {{refers to a}} programming technique where the code has a form that essentially consists entirely of calls to subroutines. It is often, but not only, found in compiler implementations that generate code in that form and/or are implemented in that form themselves. The code may be processed by an interpreter, or may simply be a sequence of machine code <b>call</b> <b>instructions.</b>|$|R
