17|4|Public
500|$|The ROM hacking entailed assembly-level {{changes to}} the game code. Young equated the process to {{teaching}} someone another language by slowly altering their DNA bit by bit, through trial and error. Some of the technical changes included proportional fonts, graphics hacks, and custom software. The game was coded {{in such a way}} that there was not enough system memory available to display the requisite onscreen text. Since Japanese characters all occupy the same amount of space (monospaced), the team had to custom-code the new English characters to fit properly. Tomato said that [...] "no text display routine wound up untouched", such that the fixes for variable width fonts were useless until the team manually made room for the characters. Graphics hacks included the new intro screen and images imported from the English EarthBound, so as to preserve continuity of features. For example, an octopus statue pun from Mother 2 was converted to a pencil statue in the EarthBound English localization and was changed accordingly in the Mother 3 localization. The team also built custom software to aid in the translation, such as a <b>cross-assembler</b> and tools for handling the script and patching. Members of the hacking team included Tomato, Jeffman, byuu, and sblur, among others.|$|E
50|$|This <b>cross-assembler</b> ran on a 7090 or 7094 {{system and}} was used while System/360 was in development.|$|E
5000|$|Dignus LLC Systems/ASM is an HLASM-compatible {{assembler}} {{that can}} run natively on IBM systems or as a <b>cross-assembler.</b>|$|E
5000|$|General Instrument {{provided}} <b>cross-assemblers</b> and simulators/debuggers {{compatible with}} 16-bit or larger minicomputers. [...] GI {{also provided a}} standalone CP1600 based microcomputer system in the GIC1600.|$|R
5000|$|Also in 1997 Intellivision Productions {{announced}} they would sell development tools allowing customers to program their own Intellivision games. They were to provide documentation, PC compatible <b>cross-assemblers,</b> and the Magus II PC Intellivision cartridge interface. Unfortunately, {{the project was}} cancelled but they did provide copies of [...] "Your Friend the EXEC", the programmers guide to the Intellivision Executive control software. [...] By 2000 Intellivision hobbyists ultimately created their own development tools, including Intellivision memory cartridges.|$|R
50|$|The first {{high-level}} language {{available for the}} 1802 was Forth, provided by Forth, Inc. in 1976. Other available programming languages, both interpreters and compilers, are CHIP-8 (and variants), 8th (a version of Forth created by Lee Hart), Tom Pittman's Tiny BASIC, C, various Assemblers and <b>cross-assemblers,</b> and others. Other specialty languages were used by federal agencies such as NASA and its installations, including Johnson Space Center, AMES, Goddard, Langley, Marshall, and Jet Propulsion Laboratory (JPL), which included the HAL/S cross-compiler, STOIC, a Forth-like language, and others.|$|R
50|$|Software for {{the project}} was {{developed}} with an in-house APL-generated 1802 <b>cross-assembler</b> running on IBM 360/370 mainframe computers.|$|E
5000|$|Developed in 1982 at MIT as a <b>cross-assembler,</b> it {{was picked}} up by Interactive Systems Corporation in 1983 when they {{developed}} PC/IX under IBM contract. The syntax was later used as base for ACK assembler, to be used in MINIX 1.x toolchain.|$|E
50|$|The toolkit {{has largely}} been {{expanded}} by Ullrich von Bassewitz and other contributors. The actual cc65 compiler, {{a complete set of}} binary tools (assembler, linker, etc.) and runtime library are under a license identical to zlib's. The ca65 <b>cross-assembler</b> {{is one of the most}} powerful 6502 cross-assemblers available under an open-source license.|$|E
5000|$|This {{is a list}} of assemblers: {{computer}} programs that translate assembly language source code into binary programs. Some assemblers are components of a compiler system for a high level language and may have limited or no usable functionality outside of the compiler system. Some assemblers are hosted on the target processor and operating system, while other assemblers (<b>cross-assemblers)</b> may run under an unrelated operating system or processor. For example, assemblers for embedded systems are not usually hosted on the target system since it would not have the storage and terminal I/O to permit entry of a program from a keyboard. An assembler may have a single target processor or may have options to support multiple processor types. Very simple assemblers may lack features, such as macros, present in more powerful versions.|$|R
5000|$|The System Control Unit (SCU) was a [...] "microprogrammable data processor" [...] {{which can}} {{interface}} to a Sigma CPU, and [...] "to peripheral and analog devices, {{and to many}} kinds of line protocol." [...] The SCU executes horizontal microinstructions with a 32-bit word length. A <b>cross-assembler</b> running on a Sigma system {{can be used to}} create microprograms for the SCU.|$|E
5000|$|Development for Spectrum and CPC games {{took place}} on a commercially {{available}} <b>cross-assembler</b> development environment (PDS) hosted on an IBM PC clone which was electronically connected to a Spectrum. This allowed the game to be authored on the stable PC environment (complete with disk backup), then [...] "blasted" [...] directly into the Spectrum memory to allow for immediate testing. Developing in this manner allowed for significantly higher development speeds than could be achieved by native development on the Spectrum.|$|E
5000|$|The ROM hacking entailed assembly-level {{changes to}} the game code. Young equated the process to {{teaching}} someone another language by slowly altering their DNA bit by bit, through trial and error. Some of the technical changes included proportional fonts, graphics hacks, and custom software. The game was coded {{in such a way}} that there was not enough system memory available to display the requisite onscreen text. Since Japanese characters all occupy the same amount of space (monospaced), the team had to custom-code the new English characters to fit properly. Tomato said that [...] "no text display routine wound up untouched", such that the fixes for variable width fonts were useless until the team manually made room for the characters. Graphics hacks included the new intro screen and images imported from the English EarthBound, so as to preserve continuity of features. For example, an octopus statue pun from Mother 2 was converted to a pencil statue in the EarthBound English localization and was changed accordingly in the Mother 3 localization. The team also built custom software to aid in the translation, such as a <b>cross-assembler</b> and tools for handling the script and patching. Members of the hacking team included Tomato, Jeffman, byuu, and sblur, among others.|$|E
5000|$|The {{ubiquity of}} the 1971 Esquire article precipitated Draper's {{eventual}} arrest on toll fraud charges in 1972; {{he was sentenced}} to five years' probation. However, it also elicited the attention of University of California, Berkeley engineering student and future Apple co-founder Steve Wozniak, who located Draper while working as an engineer at KKUP, a public radio station in Cupertino, California. After arranging to meet Wozniak in his dorm room (whereupon the latter noted Draper's disheveled appearance and body odor), he began to teach his phone phreaking skills to Wozniak and one of his friends, Steve Jobs; a phone phreaking business formed by Wozniak and Jobs presaged the eventual emergence of Apple. Draper {{was a member of the}} Homebrew Computer Club. By 1977, he provided services to Apple as an independent contractor, where he created the [...] "Charlie Board," [...] a telephone interface board for the Apple II personal computer [...] "that could immediately identify phone signals and lines -- such as ones that made free calls -- something modems were not able to do for a decade... the technology would later be used for tone-activated calling menus, voicemail and other purposes." [...] The board was never marketed due to a litany of factors, including the prohibitive cost of a corequisite AT&T-approved connection interface device, industrial suppression by the aforementioned corporation, Draper's previous arrest and conviction for wire fraud, and Jobs' personal animus against Draper. Draper also wrote the BASIC <b>cross-assembler</b> used by Wozniak in the development of Apple I and Apple II.|$|E
40|$|The {{purpose of}} this study was to write a <b>cross-assembler</b> for the Motorola M 6800 {{microcomputer}} to run on the Data General Nova minicomputer and dual disk hardware. The Nova minicomputer assembly language was selected for the <b>cross-assembler</b> program. Specifications for the <b>cross-assembler</b> were formulated as a hybrid of those of an assembler written by the microcomputer manufacturer, those of the Nova assembler, and some which were dictated by the hardware utilized. A skeletal program was written in which the processing modules were represented as subroutine calls. Subsequently, the processing modules were written and incorporated into the main program. The thesis discusses the M 6800 programming language, the <b>cross-assembler</b> specifications, and the resulting implementation. The <b>cross-assembler</b> produced from this research was tested on numerous source programs and performed as specified. Samples of <b>cross-assembler</b> output listings are included in the thesis. Ball State UniversityMuncie, IN 47306 Thesis (M. S.) [...] Ball State University, 1977...|$|E
40|$|This paper {{describes}} {{the development of}} a <b>cross-assembler,</b> denoted XTIC 25, which runs on Motorola's EXORMacs system. First a suitable data format called TIC 25 is derived from the TMS 320 C 25 digital signal microprocessor. This data format is then used in conjunction with software written using a combination of subsets of Pascal and MC 68000 assembler routines, based on a two-pass algorithm. The <b>cross-assembler</b> is validated using several test programs and is capable of developing software, using the TMS 320 C 25 assembler, within a microcomputer environment. In this way, the use of a host microcomputer for developing digital signal processing software is demonstrated...|$|E
40|$|The paper {{describes}} {{the development of}} a <b>cross-assembler</b> known as MCASM which enables programming of the PIC 16 F 872 in a language similar in style to that of the Intel ASM 51. The work was instigated by the needs of students in the national university of science and technology for a cheap and versatile means of assembly for this processor. Customised features of the software are described...|$|E
40|$|Reports {{the present}} status of CAB from {{the points of}} view of {{hardware}} and software. CAB is a microprogrammable system, using fast TTL bit- slice technology, designed to improve the capabilities of a standard CAMAC data acquisition chain. It can be implemented as crate controller, branch driver, or computer to CAMAC (or GPIB to CAMAC) interface. It is well adapted {{to a wide range}} of complex applications, such as software triggering, event filtering, data compaction and formatting, equipment calibration and monitoring. The basic software includes a <b>cross-assembler,</b> an emulating program and an interactive debugger. Improvements are now under development. Today, more than 15 units are used in different laboratories. (0 refs) ...|$|E
40|$|This {{document}} {{describes the}} <b>cross-assembler</b> win 2 c 64, {{which is an}} assembler that runs on any Microsoft Windows platform and generates code that can be executed on the Commodore 64. The assembler is invoked as follows win 2 c 64 [options] file. s where file. s denotes the source file and [options] denotes an optional list of the following options. Option Meaning-h show short help summary-e envelop all segments into one-o show opcode table-r output raw bytes encoding only-s enable silent assembly-u enable undocumented opcodes-x show symbol table When no errors are encountered in the source file, this command generates, by default, the target file file. t 64 in C 64 S tape image format [Pet]. All assembler messages are sent to stderr. If no source file is indicated, the assembler reads from stdin and writes to stdout to enable the use of win 2 c 64 in pipes and redirections. 2 Lexical and Syntactic Conventions Valid assembler input consists of literal constants represented as decimal numbers (e. g. 15), hexadecimal numbers (e. g. $ 0 f), or binary numbers (e. g...|$|E
40|$|A {{pilot plant}} scale, {{atmospheric}} pressure, sieve plate distillation column was constructed and fully instrumented. Novel speed controllable pumps {{were used to}} control liquid flows. A microcomputer was constructed to provide local and hierarchical control of the column. The microcomputer included an operator console, a 16 channel data acquisition unit, a 4 channel control output unit, and a hardware arithmetic processor. A software development system was assembled by linking the microcomputer to a minicomputer. Software written for the development system included a <b>cross-assembler,</b> a transfer program, and a microcomputer control program. A binary steady state distillation column model was developed, solved on a digital computer, and verified against experimental data using a binary mixture of methanol and water. Two control schemes were investigated using only the microcomputer resources. A multi-loop system using digital PI controllers was found to give excellent control within {{the accuracy of the}} instrumentation. An adaptive feedforward controller was proposed and verified using a steady state model, and experiments. The results were good, but because of the relatively simple dynamics of the experimental column, the feedforward controller was no better than the feedback controllers. A microcomputer control system {{has been shown to be}} an effective replacement for conventional analog control on a distillation column. The computing power of the microcomputer has enabled a sophisticated control scheme to be implemented at low cost...|$|E
40|$|Graduation date: 1978 An {{advanced}} laboratory interfacing capability {{was developed}} for the Real-Time Digital Computer Laboratory in the Chemical Engineering Department. A stationary interfacing unit located beside the computer mainframe and two small remote units were designed, developed and thoroughly tested. These interfacing units permit experiments {{with a wide variety}} of analog and digital signals to be connected to the computer quickly and simply using standard patch cords and readily available cables and connectors. A complete software package was developed which corresponds to the industry standard routines to support all interface equipment in the laboratory. All routines are developed in assembly language in a form which can be executed by standard FORTRAN subroutine calls. A hierarchical computer structure was conceived and implemented using microcomputers communicating (9600 baud) with the NOVA minicomputer which can communicate (2400 baud) with the Oregon State University CYBER computer, all communications at high data rates. Cost-effective programming of microcomputers using a <b>cross-assembler</b> on the NOVA minicomputer was implemented. Microcomputer assembly language programs developed using the editing and disk storage capability of the NOVA are easily assembled and quickly downloaded (9600 baud) to the microcomputer by a cable interconnection. The microcomputer developments utilize the state-of-the-art technology and communication concepts and add tremendous potential flexibility for instructional and research users in the department. The current status and documentation of the Real-Time Digital Computer Laboratory establishes this facility as one of the most outstanding in the country...|$|E

