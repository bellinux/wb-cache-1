55|500|Public
25|$|Using {{a special}} system <b>call</b> <b>instruction.</b> This {{technique}} requires special hardware support, which common architectures (notably, x86) may lack. System call instructions {{have been added}} to recent models of x86 processors, however, and some operating systems for PCs make use of them when available.|$|E
2500|$|The {{hardware}} severely {{restricts the}} ways in which control can be passed from one ring to another, and also enforces restrictions on the types of memory access that can be performed across rings. Using x86 as an example, there is a special gate structure which is referenced by the <b>call</b> <b>instruction</b> that transfers control in a secure way towards predefined entry points in lower-level (more trusted) rings; this functions as a supervisor call in many operating systems that use the ring architecture. The hardware restrictions are designed to limit opportunities for accidental or malicious breaches of security. [...] In addition, the most privileged ring may be given special capabilities, (such as real memory addressing that bypasses the virtual memory hardware).|$|E
6000|$|... "You think me {{foolish to}} <b>call</b> <b>instruction</b> a torment, {{but if you}} had been as much used as myself to hear poor little {{children}} first learning their letters and then learning to spell, if you had ever seen how stupid they can be for a whole morning together, and how tired my poor mother {{is at the end of}} it, as I am in the habit of seeing almost every day of my life at home, you would allow that 'to torment' and 'to instruct' might sometimes be used as synonymous words." ...|$|E
50|$|Some smaller {{instruction}} classes {{include the}} shift/rotate instructions and the procedure <b>call</b> <b>instructions.</b> Particularly notable are the stack instructions PUSH and POP, {{and the corresponding}} stack <b>call</b> <b>instructions</b> PUSHJ and POPJ. The byte instructions use a special format of indirect word to extract and store arbitrary-sized bit fields, possibly advancing a pointer to the next unit.|$|R
5000|$|Instruction {{dispatch}} to an <b>instruction</b> queue (also <b>called</b> <b>instruction</b> buffer or reservation stations).|$|R
5000|$|Special {{jump and}} <b>call</b> <b>instructions</b> ( [...] and [...] ) make access {{within the same}} 2 KiB of program memory {{slightly}} smaller.|$|R
60|$|And now I {{come to a}} {{circumstance}} in my life I would rather pass over quickly. Had I steered the straight course of my impulse I need never have deceived that dear gentleman whom I loved and honoured above any in this world, and with whom I had always lived and dealt openly. After my grandfather was pronounced to be mending, I went back to Mr. Allen {{until such time as}} {{we should be able to}} go to the country. Philip no longer shared my studies, his hours having been changed from morning to afternoon. I thought nothing of this, being content with the rector's explanation that my uncle had a task for Philip in the morning, now that Mr. Carvel was better. And I was well content to be rid of Philip's company. But as the days passed I began to mark an absence still stranger. I had my Horace and my Ovid still: but the two hours from eleven to one, which he was wont to give up to history and what he was pleased to <b>call</b> <b>instruction</b> in loyalty, were filled with other matter. Not a word now of politics from Mr. Allen. Not even a comment from him concerning the spirited doings of our Assembly, with which the town was ringing. That body had met but a while before, primed to act on the circular drawn up by Mr. Adams of Massachusetts. The Governor's message had not been so prompt as to forestall them, and I am occupied scarce the time in the writing of this that it took our brave members to adopt the petition to his Majesty and to pass resolutions of support to our sister colony of the North. This being done, and a most tart reply penned to his Excellency, they ended that sitting and passed in procession to the Governor's mansion to deliver it, Mr. Speaker Lloyd at their head, and a vast concourse of cheering people at their heels. Shutters were barred on the Tory houses we passed. And though Mr. Allen spied me in the crowd, he never mentioned the circumstance. More than once I essayed to draw from him an opinion of Mr. Adams's petition, which was deemed a work of great moderation and merit, and got nothing but evasion from my tutor. That he had become suddenly an American in principle I could not believe. At length I made bold to ask him why our discussions were now omitted. He looked up from the new play he was reading on the study lounge, with a glance of dark meaning I could not fathom.|$|E
50|$|Ordinarily, when a {{function}} is invoked, control {{is transferred to}} its definition by a branch or <b>call</b> <b>instruction.</b> With inlining, control drops through directly to the code for the function, without a branch or <b>call</b> <b>instruction.</b>|$|E
50|$|The prologue will {{commonly}} {{save the}} return address {{left in a}} register by the <b>call</b> <b>instruction</b> by pushing the value onto the call stack. Similarly, the current stack pointer and/or frame pointer values may be pushed. Alternatively, some instruction set architectures automatically provide comparable functionality {{as part of the}} action of the <b>call</b> <b>instruction</b> itself, and in such an environment the prologue need not do this.|$|E
5000|$|In {{telephone}} systems, a {{switching system}} in which telephone operators receive <b>call</b> <b>instructions</b> orally from users and complete them by automatic equipment.|$|R
50|$|Books with {{technical}} {{information on how}} to do something or how to use some equipment are <b>called</b> <b>instruction</b> manuals. Other popular how-to books include cookbooks and home improvement books.|$|R
50|$|In {{a similar}} manner, {{subroutine}} <b>call</b> <b>instructions</b> can be indirect, with {{the address of}} the subroutine to be called specified in memory. Function Pointers are typically implemented with indirect subroutine calls.|$|R
50|$|Dynamic-link {{libraries}} (DLLs) in Microsoft Windows use variant E8 of the <b>CALL</b> <b>instruction</b> (Call near, relative, displacement {{relative to}} next instruction). These instructions {{do not need}} to be fixed up when a DLL is loaded.|$|E
50|$|In the IBM System/360 {{mainframe}} family, a Supervisor <b>Call</b> <b>instruction</b> implements {{a system}} call for legacy facilities; the Program Call (PC) instruction {{is used for}} newer facilities. In particular, PC is used when the caller might be in SRB mode.|$|E
50|$|An {{exception}} is encountered when the execution unit encounters a branch instruction i.e. either a jump or a <b>call</b> <b>instruction.</b> In this case, the entire queue must be dumped and the contents pointed {{to by the}} instruction pointer must be fetched from memory.|$|E
50|$|A huge {{difference}} from Java's bytecode is that CIL comes with ldind, stind, ldloca, and many <b>call</b> <b>instructions</b> which are enough for data/function pointers manipulation needed to compile C/C++ code into CIL.|$|R
50|$|Many RISC machines, {{as well as}} the CISC IBM System/360 and successors, have {{subroutine}} <b>call</b> <b>instructions</b> {{that place}} the return address in an address registerâ€”the register-indirect addressing mode is used to return from that subroutine call.|$|R
50|$|The {{program counter}} (PC), {{commonly}} <b>called</b> the <b>instruction</b> pointer (IP) in Intel x86 and Itanium microprocessors, and sometimes <b>called</b> the <b>instruction</b> address register (IAR), the instruction counter, or {{just part of}} the instruction sequencer,is a processor register that indicates where a computer is in its program sequence.|$|R
5000|$|Using {{a special}} system <b>call</b> <b>instruction.</b> This {{technique}} requires special hardware support, which common architectures (notably, x86) may lack. System call instructions {{have been added}} to recent models of x86 processors, however, and some operating systems for PCs make use of them when available.|$|E
50|$|Another approach, {{taken by}} kBouncer, modifies the {{operating}} system to verify that return instructions actually divert control flow back to a location immediately following a <b>call</b> <b>instruction.</b> This prevents gadget chaining, but carries a heavy performance penalty, and is not effective against jump-oriented programming attacks which alter jumps and other control-flow-modifying instructions instead of returns.|$|E
50|$|The 8259 may be {{configured}} to {{work with}} an 8080/8085 or an 8086/8088. On the 8086/8088, the interrupt controller will provide an interrupt number on the data bus when an interrupt occurs. The interrupt cycle of the 8080/8085 will issue three bytes on the data bus (corresponding to a <b>CALL</b> <b>instruction</b> in the 8080/8085 instruction set).|$|E
50|$|Trampolines: Many CPUs have smaller {{subroutine}} <b>call</b> <b>instructions</b> {{to access}} low memory. A compiler can save space by using these small {{calls in the}} main body of code. Jump instructions in low memory can access the routines at any address. This multiplies space savings from code factoring.|$|R
40|$|An {{asynchronous}} superscalar {{architecture is}} presented {{based on a}} novel architectural feature <b>called</b> <b>instruction</b> compounding. This enables efficient dynamic scheduling and forwarding of data based on local information, while maintaining the advantages of asynchrony in terms of exploiting actual delays. Results are presented in which statically and dynamically compounded architectures are compared against an equivalent synchronous superscalar architecture. 1...|$|R
50|$|Software Testing: Using the {{intrinsic}} interfaces of TIE operations from C/C++, the TIEs are first {{integrated with the}} C code that tests the required application functionality. After such integration, testing of the software running on the Xtensa core is performed by using the software simulator on PC (The Xtensa simulator on PC is <b>called</b> <b>Instruction</b> Set Simulator - ISS).|$|R
5000|$|There was no {{division}} instruction (but various division subroutines were supplied) {{and no way}} {{to directly}} load a number into the accumulator (a [...] "sTore and zero accumulator" [...] instruction followed by an [...] "Add" [...] instruction were necessary for this). There was no unconditional jump instruction, nor was there a procedure <b>call</b> <b>instruction</b> - it {{had not yet been}} invented.|$|E
5000|$|The ROM {{address space}} is 512 words (12 bits each), {{which may be}} {{extended}} to 2048 words by banking. [...] and [...] instructions specify the low 9 bits of the new code location; additional high-order bits are taken from the status register. Note that a <b>CALL</b> <b>instruction</b> only includes 8 bits of address, and may only specify addresses {{in the first half}} of each 512-word page.|$|E
5000|$|The {{canonical}} implementation [...] is {{a register}} load of a constant {{followed by a}} <b>call</b> <b>instruction.</b> The [...] "uninitialized" [...] state is better called [...] "unlinked". The register is loaded with the message selector (typically the address of some object) and the call is to the run-time routine that will look-up the message {{in the class of}} the current receiver, using the first-level method lookup cache above. The run-time routine then rewrites the instructions, changing the load instruction to load the register with the type of the current receiver, and the <b>call</b> <b>instruction</b> to call the preamble of the target method, now [...] "linking" [...] the call site to the target method. Execution then continues immediately following the preamble. A subsequent execution will call the preamble directly. The preamble then derives the type of the current receiver and compares it with that in the register; if they agree the receiver is of the same type and the method continues to execute. If not, the preamble again calls the run-time and various strategies are possible, one being to relink the call-site for the new receiver type.|$|E
40|$|Gaining {{the code}} re-use {{advantages}} of {{object oriented programming}} requires dynamic function binding, which allows a new subclass to override a function of a superclass. Dynamic binding is obtained in C++ {{through the use of}} virtual functions. Unfortunately, virtual functions have two negative impacts on performance. First, they are traditionally compiled into indirect <b>call</b> <b>instructions,</b> which take longer to execute than direct <b>call</b> <b>instructions.</b> Second, it is difficult for the compiler to perform optimization since summary information from called procedures is hard or even impossible to obtain. The net effect is that C++ programmers avoid the use of virtual functions. We present a new optimization that (1) removes the indirect function calls used for virtual functions, (2) enables other compiler optimizations such as inlining and constant propagation, and (3) requires no extensive dataflow analysis or profile information and thus is easily implemented in an existing compiler. We includ [...] ...|$|R
5000|$|... "Nididhyasana is so <b>called</b> when, <b>instruction</b> {{about the}} {{uniqueness}} of the Atman is justified ...|$|R
50|$|Additionally, some chip-specific {{differences}} affect code generation. Code pointers (including return addresses on the stack) are two bytes long on chips {{with up to}} 128 KB of flash memory, {{but three}} bytes long on larger chips; not all chips have hardware multipliers; chips with over 8 KB of flash have branch and <b>call</b> <b>instructions</b> with longer ranges; and so forth.|$|R
5000|$|The null {{statement}} is useless by itself, {{but it can}} have a syntactic use in a wider context, e.g., {{within the context of}} a loop: while (getchar (...) != '\n') {}alternatively, while (getchar (...) != '\n')or more tersely: while (getchar (...) != '\n');(note that the last form may be confusing, and as such generates a warning with some compilers or compiler options, as semicolon usually indicates an end of function <b>call</b> <b>instruction</b> when placed after a round parenthesis on the end of line).|$|E
50|$|A Supervisor <b>Call</b> <b>instruction</b> (SVC) is a {{hardware}} {{instruction in the}} System/360 family of IBM mainframe computers up to contemporary zSeries (as well as non-IBM mainframe computers such as the Amdahl 470/V5, 470/V6, 470/V7, 470/V8, 580, 5880, 5990M, and 5990A, and others; Univac 90/60, 90/70 and 90/80, and possibly others; and the Fujitsu M180 (UP), and M200 (MP), and others) used to cause an interrupt to request a service from the operating system. The system routine providing the service is called an SVC routine. SVC is a specific implementation of a system call.|$|E
5000|$|Usually {{the call}} stack {{manipulation}} needed {{at the site}} of a call to a subroutine is minimal (which is good since there can be many call sites for each subroutine to be called). The values for the actual arguments are evaluated at the call site, since they are specific to the particular call, and either pushed onto the stack or placed into registers, as determined by the used calling convention. The actual <b>call</b> <b>instruction,</b> such as [...] "branch and link", is then typically executed to transfer control to the code of the target subroutine.|$|E
40|$|This paper {{discusses}} library instruction. Assessments {{are recommended}} {{to determine the}} effectiveness of student learning. This paper also discusses a project by the UNT Libraries' in which they developed software to assess library <b>instruction,</b> <b>called</b> Library <b>Instruction</b> Software for Assessment (LISA) and the outcome of that study...|$|R
5000|$|... {{providing}} services to job programs that issue Supervisor Call (SVC) and Monitor <b>call</b> (MC) <b>instructions,</b> including: ...|$|R
50|$|The CPU {{design was}} quite complex - using three way {{interleaving}} of <b>instruction</b> execution (later <b>called</b> <b>instruction</b> pipeline) to improve throughput. Each instruction {{would go through}} an indexing phase, an actual instruction execution phase and an output phase. While an instruction {{was going through the}} indexing phase, the previous instruction was in its execution phase and the instruction before it was in its output phase.|$|R
