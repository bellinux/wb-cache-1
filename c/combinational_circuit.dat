287|884|Public
50|$|With {{the use of}} {{minimization}} (sometimes called logic optimization), {{a simplified}} logical function or circuit may be arrived upon, and the logic <b>combinational</b> <b>circuit</b> becomes smaller, and easier to analyse, use, or build.|$|E
50|$|An FSM can {{be defined}} as a quintuplet that {{consists}} of a set of primary inputs, a set of primary outputs, a set of states, a next-state function and an output function. The next-state function maps the present-state and the primary inputs to a next-state; the output function maps the primary inputs and present-state onto the primary outputs. Any deterministic sequential function can be represented by the use of this model. A FSM can be separated into two parts viz., <b>combinational</b> <b>circuit</b> and memory.|$|E
5000|$|The half {{subtractor}} is a <b>combinational</b> <b>circuit</b> {{which is}} used to perform subtraction of two bits. It has two inputs, the minuend [...] and subtrahend [...] and two outputs the difference [...] and borrow out [...] The borrow out signal is set when the subtractor needs to borrow from the next digit in a multi-digit subtraction. That is, [...] when [...] Since [...] and [...] are bits, [...] if and only if [...] and [...] An important point worth mentioning is that the half subtractor diagram aside implements [...] and not [...] since [...] on the diagram is given by ...|$|E
40|$|Abstract — One of the {{challenges}} of low power methodologies for digital systems is saving power consumption in these systems without compromising performance. In this {{paper we propose a}} new method for estimating dynamic power consumption in <b>combinational</b> <b>circuits.</b> The method enables us to optimize the power consumption of typical <b>combinational</b> <b>circuits.</b> Index Terms — Power estimation, power optimization, low-power design, <b>combinational</b> <b>circuits...</b>|$|R
40|$|Problem statement: <b>Combinational</b> <b>circuits</b> {{are used}} in {{computers}} for generating binary control decisions and for providing digital components for data processing. Approach: The use of <b>combinational</b> <b>circuits</b> and logic gates to control other circuits was discussed. Different systems that use logic gates, multiplexers, decoders and encoders to control different circuits were presented. This study presented a design and implementation of some <b>combinational</b> <b>circuits</b> such as a decoder, an encoder, a multiplexer, a bus system and read/write memory operations. Results: When we connected some types of <b>combinational</b> <b>circuits</b> to the inputs/outputs of digital <b>circuit,</b> these <b>combinational</b> <b>circuits</b> can help us to manage and flow a different types of control signals through a large digital <b>circuit.</b> Conclusion: Many <b>combinational</b> <b>circuits</b> had a good function {{which can be used}} for controlling different parts of any digital system and they produce a suitable way to transfer a control signals between different digital components of any large digital system...|$|R
40|$|The {{accepted}} {{wisdom is}} that <b>combinational</b> <b>circuits</b> must have acyclic (i. e., loop-free or feed-forward) topologies. And yet simple examples suggest that this need not be so. In previous work, we advocated the design of cyclic <b>combinational</b> <b>circuits</b> (i. e., circuits with loops or feedback paths). We proposed a methodology for analyzing and synthesizing such circuits, {{with an emphasis on}} the optimization of area...|$|R
50|$|The {{technique}} uses a {{directed graph}} where the vertices represent asynchronous combinational blocks and the directed edges represent {{a series of}} registers or latches (the number of registers or latches can be zero). Each vertex has a value corresponding to the delay through the <b>combinational</b> <b>circuit</b> it represents. After doing this, one can attempt to optimize the circuit by pushing registers from output to input and vice versa - much like bubble pushing. Two operations can be used - deleting a register from each input of a vertex while adding a register to all outputs, and conversely adding a register to each input of vertex and deleting a register from all outputs. In all cases, if the rules are followed, the circuit {{will have the same}} functional behavior as it did before retiming.|$|E
5000|$|The full {{subtractor}} is a <b>combinational</b> <b>circuit</b> {{which is}} used to perform subtraction of three input bits: the minuend , subtrahend , and borrow in [...] The full subtractor generates two output bits: the difference [...] and borrow out [...] [...] is set when the previous digit borrowed from [...] Thus, [...] is also subtracted from [...] as well as the subtrahend [...] Or in symbols: [...] Like the half subtractor, the full subtractor generates a borrow out when it needs to borrow from the next digit. Since we are subtracting [...] by [...] and , a borrow out needs to be generated when [...] When a borrow out is generated, 2 is added in the current digit. (This is similar to the subtraction algorithm in decimal. Instead of adding 2, we add 10 when we borrow.) Therefore, [...]The truth table for the full subtractor is: ...|$|E
40|$|Motivated by {{the problem}} of {{reengineering}} legacy digital circuits for which design information is missing or incomplete, this paper presents a new technique for representing the relationships among the internal components of a <b>combinational</b> <b>circuit.</b> This technique proves {{to be a powerful}} tool for redesign, capable of representing internal Boolean relationships in a fully or partially specified multiple-output <b>combinational</b> <b>circuit</b> with a single data structure...|$|E
50|$|All {{digital systems}} are {{composed}} of two elementary functions: memory elements for storing information, and <b>combinational</b> <b>circuits</b> that transform that information. State machines, like counters, are a combination of memory elements and <b>combinational</b> logic <b>circuits.</b> Since memory elements are standard logic circuits they are selected out of a limited set of alternative circuits; so designing digital functions comes down to designing the <b>combinational</b> gate <b>circuits</b> and interconnecting them.|$|R
50|$|Wire spring relays {{could be}} {{interconnected}} {{to create the}} typical <b>combinational</b> <b>circuits</b> that were later used in silicon design.|$|R
5000|$|Gate {{level or}} <b>combinational</b> <b>circuits</b> which contain no storage (latches and/or flip flops) but only gates like NAND, OR, XOR, etc.|$|R
40|$|This paper {{discusses}} {{a systematic}} methodology for calculating the aliasing probability when an arbitrary finite-state machine {{is used to}} compact the response of a <b>combinational</b> <b>circuit</b> to a sequence of randomly generated test input vectors. The proposed approach is general {{and is based on}} simultaneously tracking the states of two (fictitious) compactors, one driven by the response of the fault-free <b>combinational</b> <b>circuit</b> and the other one driven by the response of the faulty <b>combinational</b> <b>circuit.</b> By deriving the overall Markov chain that describes the combined behavior of these two compactors, we are able to calculate the exact aliasing probability based on its stationary distribution and to demonstrate regimes over which nonlinear compactors may be preferable over linear compactors...|$|E
40|$|It is {{well known}} that {{learning}} (i. e., indirect implications) based techniques perform very well in many instances of <b>combinational</b> <b>circuit</b> verification when the two circuits being verified have many corresponding internal equivalent points. We present some results on <b>combinational</b> <b>circuit</b> design verification using a powerful, and highly general learning technique called functional learning. Functional learning is based on OBDDs and hence can efficiently learn novel implications based on functional manipulation...|$|E
40|$|We {{show that}} leakage current in VLSI {{circuits}} {{is not only}} a function of the current state (input combination) of a <b>combinational</b> <b>circuit</b> but also is dependent on the state history (previous input combinations.) As an example application of the transition-dependent leakage model, we extend a known technique for calculating and applying the minimum leakage input vector to a <b>combinational</b> <b>circuit</b> in the standby mode to one which calculates and applies a pair of input vectors to initialize the circuit to the minimum leakage configuration...|$|E
40|$|Hierarchical {{descriptions}} of <b>combinational</b> <b>circuits</b> often contain apparent loops [1, 3]. Since {{it may be}} difficult to distinguish apparent loops from actual loops, it is useful to construct models of <b>combinational</b> <b>circuits</b> that can handle cyclic dependencies. We show that Boolean relations are inadequate for this purpose, and define a ternary model that solves the problem. We use the model to characterize exact solutions to a broad class of substitution and rectification problems. The theory cleanly handles network transformations that might introduce cyclic dependencies. 1 Introduction The first and most important step in the development of analysis or synthesis methods for any kind of system is the construction of a precisely-defined model. A model should accurately reflect reality (possibly under constraints on the domain of applicability), while providing a "mathematically clean" theory. In this paper we develop a model for the behavior of <b>combinational</b> <b>circuits.</b> <b>Combinational</b> cir [...] ...|$|R
25|$|In February 2010, Digital <b>Combinational</b> <b>Circuits</b> like adder, {{subtractor}} etc. {{are designed}} {{with the help of}} Symmetric Functions organized from different quantum gates.|$|R
40|$|Exact global fault {{collapsing}} can {{be easily}} applied locally at the logic gates, however, it is often ignored for large circuits due to its high demand of execution time and/or memory. In this paper, we present AGFC, an approximate global fault collapsing tool for <b>combinational</b> <b>circuits.</b> Experimental results show that (i) AGFC reduces the number of faults drastically with feasible resources and (ii) AGFC produces significantly better results than existing approaches. KEY WORDS Global fault collapsing, fault simulation, physical fault testing, <b>combinational</b> <b>circuits...</b>|$|R
40|$|The {{question}} of increasing {{performance of a}} device with no memory, which develops a sequence of discrete signals, is considered. A problem is set to divide a given multilevel <b>combinational</b> <b>circuit</b> into a given number of cascades with registers providing pipeline-wise development of incoming signals. To solve this problem we use a model based on representation of <b>combinational</b> <b>circuit</b> as a directed graph. In the process of solving this problem, the frequency of incoming signals is established. This frequency must {{be as high as}} possible...|$|E
40|$|This paper {{deals with}} on-line error {{detection}} in digital circuits implemented in FPGAs. Error detection codes {{have been used}} to ensure the self-checking property. The adopted fault model is discussed. A fault in a given <b>combinational</b> <b>circuit</b> must be detected and signalized {{at the time of its}} appearance and before further distribution of errors. Hence safe operation of the designed system is guaranteed. The check bits generator and the checker were added to the original <b>combinational</b> <b>circuit</b> to detect an error during normal circuit operation. This concurrent error detection ensures the Totally Self-Checking property. <b>Combinational</b> <b>circuit</b> benchmarks have been used in this work in order to compute the quality of the proposed codes. The description of the benchmarks is based on equations and tables. All of our experimental results are obtained by XILINX FPGA implementation EDA tools. A possible TSC structure consisting of several TSC blocks is presented. ...|$|E
40|$|In {{this paper}} we propose a {{procedure}} for determining 0 – or 1 – cover of an arbitrary line in a <b>combinational</b> <b>circuit.</b> When determining a cover we do not need Boolean expression for the line; only the circuit structure is used. Within the proposed procedure we use the tools of the cube theory, in particular, some operations defined on cubes. The procedure can be applied for determining 0 – and 1 – covers of output lines in programmable logic devices. Basically, this procedure is a method for the analysis of a <b>combinational</b> <b>circuit...</b>|$|E
40|$|This paper {{presents}} a new algorithm, Essential Fault Reduction (EFR), for generating compact test sets for <b>combinational</b> <b>circuits</b> under the single stuck-at fault model, {{and a new}} heuristic for estimating the minimum single stuck-at fault test set size. These algorithms together with the dynamic compaction algorithm are incorporated into an advanced ATPG system for <b>combinational</b> <b>circuits,</b> called MinTest. MinTest found better lower bounds and generated smaller test sets than the previously published results for the ISCAS 85 and full scan versions of the ISCAS 89 benchmark circuits. Keywords test set compaction, minimum test set size estimation, test generation, <b>combinational</b> <b>circuits,</b> stuck-at fault model. 2 Footnotes I. Hamzaoglu was with Center for Reliable & High-Performance Computing, University of Illinois, Urbana, IL 61801. He is now with Motorola Labs, 1301 E. Algonquin Road, Schaumburg, IL 60196. J. H. Patel is with Center for Reliable & High-Performance Computing, Univers [...] ...|$|R
40|$|The combinational logic-level {{equivalence}} {{problem is}} to determine whether two given <b>combinational</b> <b>circuits</b> implement the same Boolean function. This problem arises {{in a number of}} CAD applications, for example when checking the correctness of incremental design changes (performed either manually or by a design automation tool). This paper introduces a data structure called Boolean Expression Diagrams (BEDs) and two algorithms for transforming a BED into a Reduced Ordered Binary Decision Diagram (OBDD). BEDs are capable of representing any Boolean circuit in linear space and can exploit structural similarities between the two circuits that are compared. These properties make BEDs suitable for verifying the equivalence of <b>combinational</b> <b>circuits.</b> BEDs can be seen as an intermediate representation between circuits (which are compact) and OBDDs (which are canonical). Based on a large number of <b>combinational</b> <b>circuits,</b> we demonstrate that BEDs either outperform or achieve results comparable to [...] ...|$|R
50|$|Similarly, we {{distinguish}} between sequential and <b>combinational</b> <b>circuits,</b> whose {{behavior can be}} described in terms of finite-state machine state tables/diagrams or by Boolean functions and relations respectively.|$|R
40|$|Prolog is {{employed}} in the re-implementation of a <b>combinational</b> <b>circuit</b> fault simulator. The input to the simulator is a <b>combinational</b> <b>circuit</b> written in a custom circuit description language. The parser of the simulator outputs an intermediate representation which is suitable for compilation, fault injection, and fault collapsing. The compilation phase amounts to program synthesis, which creates a Prolog program specifying the input-output relationship of the input circuit. The top level of the simulator is a meta-program, which guides the above activities, generation of input test vectors, simulation of the synthesized circuit program, and memory management. The resultant simulator, which was written in 31 pages of Prolog, executes at the same order of magnitude of speed as a similar version written in C. In addition, the Prolog simulator helps to reveal a bug in the C version of the simulator. 1 Introduction There are two motivations for the project. First, a <b>combinational</b> <b>circuit</b> f [...] ...|$|E
40|$|A {{method to}} design and test {{asynchronous}} sequential circuits (ASCs) based on the micropipeline design style is presented in this paper. According to the proposed scan test approach the combinational block is tested separately by scanning the test vectors in and shifting the responses {{out of the state}} registers. This provides for the detection of all single stuck-at and delay faults in the ASC under test. The complexity of the test procedure of such a testable ASC is reduced to that of the <b>combinational</b> <b>circuit.</b> Tests for the <b>combinational</b> <b>circuit</b> and state holding elements can be derived using standard test generation techniques...|$|E
40|$|Logic Programming {{languages}} and <b>combinational</b> <b>circuit</b> synthesis tools {{share a common}} "combinatorial search over logic formulae" background. This paper attempts to reconnect the two fields with {{a fresh look at}} Prolog encodings for the combinatorial objects involved in circuit synthesis. While benefiting from Prolog's fast unification algorithm and built-in backtracking mechanism, efficiency of our search algorithm is ensured by using parallel bitstring operations together with logic variable equality propagation, as a mapping mechanism from primary inputs to the leaves of candidate Leaf-DAGs implementing a <b>combinational</b> <b>circuit</b> specification. After an exhaustive expressiveness comparison of various minimal libraries, a surprising first-runner, Strict Boolean Inequality "<" together with constant function " 1 " also turns out to have small transistor-count implementations, competitive to NAND-only or NOR-only libraries. As a practical outcome, a more realistic circuit synthesizer is implemented that combines rewriting-based simplification of (<, 1) circuits with exhaustive Leaf-DAG circuit search. Keywords: logic programming and circuit design, combinatorial object generation, exact <b>combinational</b> <b>circuit</b> synthesis, universal boolean logic libraries, symbolic rewriting, minimal transistor-count circuit synthesi...|$|E
50|$|Formal {{verification}} can {{be helpful}} in proving the correctness of systems such as: cryptographic protocols, <b>combinational</b> <b>circuits,</b> digital circuits with internal memory, and software expressed as source code.|$|R
40|$|This paper {{describes}} a tunable transient filter (TTF) design for soft error rate reduction in <b>combinational</b> logic <b>circuits.</b> TTFs can be inserted into <b>combinational</b> <b>circuits</b> to suppress propagated single-event transients (SETs) {{before they can}} be captured in latches or flip-flops. TTFs are tuned by adjusting the maximum width of the propagated SET that can be suppressed. A TTF requires 6 – 14 transistors, making it an attractive cost-effective option to reduce the soft error rate in <b>combinational</b> <b>circuits.</b> A global optimization approach based on geometric programming that integrates TTF insertion with dual-VDD and gate sizing is described. Simulation results for the 65 nm process technology indicate that a 17 – 48 × reduction in the soft error rate can be achieved with this approach...|$|R
40|$|With the {{increase}} of complexity of circuits, guaranteeing the correctness of design becomes extremely important. A new equivalence checking method is {{presented in this paper}} for the verifications of combinational circuits; the method uses the chaotic pattern simulation to find a lot of equivalent nodes, which results in that the scale of the composite circuit is reduced. The equivalence checking of two <b>combinational</b> <b>circuits</b> is carried out by constructing a BDD which is corresponding to a circuit being made up of the composite circuit and interface circuit. If the BDD is a constant 0, then the two <b>combinational</b> <b>circuits</b> are functional equivalence, the two rest circuits are not equivalent. The experimental results for a lot of circuits show that the more accurate equivalent nodes can be obtained by using chaotic pattern simulation in this paper than the random pattern simulation, and the equivalence checking method presented in this paper is able to verify the <b>combinational</b> <b>circuits</b> in shorter time...|$|R
40|$|This paper {{presents}} a novel method {{to identify and}} insert redundant logic into a <b>combinational</b> <b>circuit</b> to improve its fault tolerance without having to replicate the entire circuit {{as is the case}} with conventional redundancy techniques. In this context, it is discussed how to estimate the fault masking capability of a <b>combinational</b> <b>circuit</b> using the truth-cum-fault enumeration table, and then it is shown how to identify the logic that can introduced to add redundancy into the original circuit without affecting its native functionality and with the aim of improving its fault tolerance though this would involve some trade-off in the design metrics. However, care should be taken while introducing redundant logic since redundant logic insertion may give rise to new internal nodes and faults on those may impact the fault tolerance of the resulting circuit. The <b>combinational</b> <b>circuit</b> that is considered and its redundant counterparts are all implemented in semi-custom design style using a 32 / 28 nm CMOS digital cell library and their respective design metrics and fault tolerances are compared...|$|E
40|$|Testing of <b>combinational</b> <b>circuit</b> {{is crucial}} {{important}} to ensure {{high level of}} functionality. As density of digital circuit increases rapidly day by day these increases cost and time to test a particular <b>combinational</b> <b>circuit</b> for testing such circuit we need high quality test vector pattern with minimum number of input combination. In this work, we are designing Automatic test pattern generator (ATPG) D_Algorithm which will generate a minimum number of input pattern to detect fault like stuck-at- 0 fault, stuck-at- 1 fault, short circuit fault. D_Algorithm has been design by writing practical extraction and report language script to generate VHDL coding which is simulated on Xilinx 9. 1...|$|E
40|$|This paper {{discusses}} {{a systematic}} methodology for calculating the exact aliasing probability associated with schemes that use an arbitrary finite-state machine to compact {{the response of}} a <b>combinational</b> <b>circuit</b> to a sequence of independently selected, random test input vectors. The proposed approach identifies the strong influence of fault activation probabilities on the probability of aliasing and uses an asymmetric error model to simultaneously track the states of two (fictitious) compactors, one driven by {{the response of the}} fault-free <b>combinational</b> <b>circuit</b> and one driven by the response of the faulty <b>combinational</b> <b>circuit.</b> By deriving the overall Markov chain that describes the combined behavior of these two compactors, we are able to calculate the exact aliasing probability for any test sequence length. In particular, for long enough sequences the probability of aliasing is shown to only depend on the stationary distribution of the Markov chain. The insights provided by our analysis are used to evaluate the testing performance of simple examples of nonlinear compactors and to demonstrate regimes where they exhibit lower aliasing probability than linear compactors with the same number of states. Finally, by establishing connections with previous work that evaluated aliasing probability in linear compactors, our analysis clarifies the role played by the entropy of the stationary distribution of the compactor states...|$|E
40|$|An {{algorithmic}} {{paradigm for}} I DDQ measurement based analysis that target all two node bridging faults (BFs) in CMOS circuits is presented. In {{contrast to the}} pessimistic criteria used in our prior work, here we use the criteria for identifying I DDQ tests proposed in the literature by other researchers. Algorithms for simulation, diagnosis and I DDQ subset selection of BFs in <b>combinational</b> <b>circuits</b> {{as well as a}} simulation algorithm and a subset selection algorithm for sequential circuits are presented. In addition to showing the efficiency of the proposed algorithms our preliminary experimental results suggest that: (i) for <b>combinational</b> <b>circuits,</b> our heuristic for I DDQ subset selection is considerably better than a "QUIETEST-like heuristic" for the same problem; (ii) for <b>combinational</b> <b>circuits,</b> I DDQ test sets derived from randomly generated test sets are often considerably better than I DDQ test sets derived from stuck-at test sets; and (iii) for sequential circuits, I DDQ test s [...] ...|$|R
40|$|NUMBER OF PAGES: xiv+ 344 A set {{of tools}} is described, {{allowing}} one to compute random testability measurement for <b>combinational</b> <b>circuits,</b> based on a black box worst case hypothesis. These tools provide enough information to allow circuit modification, {{in order to meet}} a prescribed testability value. The efficiency of these tools is due to the use of a statistical method combined with formal proof mechanisms. The random testability of the complete ISCAS benchmark of <b>combinational</b> <b>circuits</b> is computed. For the least testable circuits, a few modifications, guided by the testability measurements, are shown to be sufficient to make them randomly testable...|$|R
40|$|Optimizing by {{partitioning}} is {{a central}} problem in VLSI design automation, addressing circuit’s manufacturability. Circuit partitioning has multiple applications in VLSI design. One {{of the most common}} is that of dividing <b>combinational</b> <b>circuits</b> (usually large ones) that will not fit on a single package among a number of packages. Partitioning is of practical importance for k-LUT based FPGA circuit implementation. In this work is presented multilevel a multi-resource partitioning algorithm for partitioning large <b>combinational</b> <b>circuits</b> in order to efficiently use existing and commercially available FPGAs packagestwo-way partitioning, multi-way partitioning, recursive partitioning, flat partitioning, critical path, cutting cones, bottom-up clusters, top-down min-cut...|$|R
