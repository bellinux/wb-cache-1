22|53|Public
5000|$|A fat binary (or multiarchitecture binary) is a <b>computer</b> <b>executable</b> {{program which}} has been {{expanded}} (or [...] "fattened") with code native to multiple instruction sets which can consequently be run on multiple processor types. This results in a file larger than a normal one-architecture binary file, thus the name.|$|E
50|$|A self-extracting archive (SFX/SEA) is a <b>computer</b> <b>executable</b> {{program which}} {{contains}} compressed data in an archive file combined with machine-executable program instructions to extract this {{information on a}} compatible operating system and without the necessity for a suitable extractor to be already installed on the target computer. The executable {{part of the file}} is known as the stub and the non-executable part the archive.|$|E
40|$|The present {{invention}} {{relates to}} {{a method for}} handling a service request within a local area network. First a service request is received from a user device. The service request comprising information regarding one or more requirements needed to perform the service. Then a download location is localized {{by means of a}} localization service within a public network to obtain <b>computer</b> <b>executable</b> information {{on the basis of the}} information in the service request. The <b>computer</b> <b>executable</b> information is then retrieved for performing the service from the download location and installed on a networked device within the local area network. Finally, a message is sent to the user device regarding the availability of the service within the local area network...|$|E
50|$|Software {{development}} requires {{use of a}} cross compiler, {{which runs}} on a <b>computer</b> but produces <b>executable</b> code for the target device. Debugging requires use of an in-circuit emulator, JTAG or SWD. Software developers often {{have access to the}} complete kernel (OS) source code.|$|R
40|$|Methodologies {{employed}} in defining and implementing a software support {{system for the}} HAL/S computer language for real-time operations on the Shuttle are detailed. Attention is also given to the management and validation techniques used during software development and software maintenance. Utilities developed to support the real-time operating conditions are described. With the support system being produced on Cyber <b>computers</b> and <b>executable</b> code then processed through Cyber or PDP machines, the support system has a production level status and {{can serve as a}} model for other software development projects...|$|R
50|$|Games {{created in}} Stencyl can be {{exported}} {{to the web}} via Adobe Flash Player, and to personal <b>computers</b> as <b>executable</b> games, as well as onto various mobile devices as iOS and Android applications. Physics and collisions are managed by Box2D, which can be selectively or completely disabled to decrease any potential performance impact for games that don't require full physics simulation. Starting in version 3.0, projects in Stencyl use the Haxe programming language and OpenFL game framework to allow a flexible, write once, run anywhere style of game creation.|$|R
40|$|The MSAP {{project at}} JPL has been testing {{spacecraft}} avionics and flight software since 2005, in part using <b>computer</b> <b>executable</b> scripts. The scripts are document files {{of a common}} word processor and comply with the format of a traditional, formal test procedure common at JPL. These procedures use keywords to issue commands and evaluate responses, mimicking a human test operator. In effect, script lines are inserted into a normal procedure. Even though the executable structure of the procedures is limited to linear sequences of fairly simple operations, we have found significant value in certain test regimes given the repeatability, ease of execution, and readily understandable intent of these procedures...|$|E
40|$|Extensibility {{mechanisms}} {{constitute a}} form of knowledge capture that is essential for software re-use. The Data Intensive Cyber Environments (DICE) group has collaborated with twenty-five science and engineering domains on {{the application of the}} iRODS policy-based data management system. Based on these collaborations, three types of extensibility mechanisms are sufficient to capture the domain knowledge needed for interaction with domain resources: computer actionable rules that control management policies; <b>computer</b> <b>executable</b> micro-services that encapsulate operations or interaction protocols; and middleware servers that apply standard operations at remote locations. These mechanisms enable the creation of generic data management software that is capable of implementing collections, data grids for sharing data, digital libraries for publishing data, processing pipelines, and archives. Comment: 4 page...|$|E
40|$|This paper aims to {{describe}} rule checking method, classification and its demonstration. As applications of BIM extends, {{there have been}} some challenging projects on automated building compliance checking. The current rule-making method is developercentered and thus is difficult to define rules without propound programming knowledge. This paper introduces high level rule making methods with law sentence-centered approach. The proposed methods have intuitive naming convention and are directly mapped with the predicate of the law sentences. Therefore, it is easy to infer function of the methods. According to the type of object and property in instance level, three hierarchies of method classification were set: 1) level 1 divides types of instance, 2) level 2 classifies the type of property, and 3) level 3 specifies the content of checking. From the level 3, representative rule checking method is defined. The representative method is subdivided into extended methods according to the specific object and property to check. The rule checking methods are combined together to form an intermediate pseudocode. The pseudo-code is later to be parsed into <b>computer</b> <b>executable</b> form. This paper mainly focuses on 1) introducing law sentence -centered rule checking method, 2) object and property-based classification of rule checking method, 3) method extensibility and 4) demonstration of rule checking methods with actual requirement sentences from the Korea Building Permit. The high level rule checking method is developed as a part of KBimLogic. KBimLogic is a software that translates the Korea Building Permit requirement into <b>computer</b> <b>executable</b> format. KBimLogic is now under development with government funding. This research was supported by a grant (14 AUDP-C 067809 - 02) from Architecture & Urban Development Research Program funded by Ministry of Land, Infrastructure and Transport of Korean government...|$|E
40|$|Systems, {{methods and}} {{apparatus}} are provided through {{which in some}} embodiments an informal specification is translated without human intervention into a formal specification. In some embodiments the formal specification is a process-based specification. In some embodiments, the formal specification is translated into a high-level computer programming language which is further compiled into a set of <b>executable</b> <b>computer</b> instructions...|$|R
50|$|A {{computer}} {{punched card}} reader or just computer card reader {{is a computer}} input device used to read <b>executable</b> <b>computer</b> programs and data from punched cards under computer control. A computer card punch is a computer output device that punches holes in cards under computer control. Sometimes computer card readers were combined with computer card punches and, later, other devices to form multifunction machines.|$|R
5000|$|In computing, an {{optimizing}} compiler is a compiler {{that tries}} to minimize or maximize some attributes of an <b>executable</b> <b>computer</b> program. The most common requirement is to minimize the time taken to execute a program; a less common one is to minimize the amount of memory occupied. The growth of portable computers has created a market for minimizing the power consumed by a program.|$|R
40|$|International audienceA new {{approach}} to modelling human systems as reusable components of manufacturing workplaces is described. Graphical and <b>computer</b> <b>executable</b> models of people competences and characters are created which are qualitatively and quantitatively matched to equivalent models of process networks, decomposed into roles and dependencies between roles. To enable model creation and reuse, coherent sets of role, competence and dynamic producer unit (DPU) modelling concepts have been defined and instrumented using Enterprise Modelling (EM), Simulation Modeling (SM) and Causal Loop Modelling (CLM) techniques. This paper reports on an application of the modelling approach, and related models of 'process oriented roles' and 'candidate human systems', so as to systemise matching of role requirements to resource systems attributes and to inform aspects of strategic and tactical decision making in an SME making composite bearings...|$|E
40|$|Abstract This paper {{evaluates the}} Pugh Controlled Convergence method and its {{relationship}} to recent developments in design theory. <b>Computer</b> <b>executable</b> models are proposed simulating a team of people involved in iterated cycles of evaluation, ideation, and investigation. The models suggest that: (1) convergence of the set of design concepts is facilitated by the selection of a strong datum concept; (2) iterated use of an evaluation matrix can facilitate convergence of expert opinion, especially if used to plan investigations conducted between matrix runs; and (3) ideation stimulated by the Pugh matrices can provide large benefits both by improving the set of alternatives and by facilitating convergence. As a basis of comparison, alternatives to Pugh’s methods were assessed such as using a single summary criterion or using a Borda count. These models suggest that Pugh’s method, under a substantia...|$|E
40|$|In this paper, we {{describe}} our work towards {{a method for}} a formal analysis of law. The Dutch Immigration and Naturalization Service (IND) {{is responsible for the}} implementation and execution of complex and ever changing regulations. Given the amount of cases to handle, the use of IT systems is a necessity. From 2007 the IND, being aware of their dependence on trustworthy methods to assure the correct implementation of law into their operations and services, have been working on developing an approach that enables them to 'translate' the legal rules expressed in natural language to specifications in <b>computer</b> <b>executable</b> form. In this paper, we will explain this approach and illustrate it with some concrete examples. The work {{is part of a larger}} innovation programme initiative that we collaboratively conduct within a virtual collaboration, called the 'Blue Chamber'...|$|E
40|$|The NEMURO {{workshop}} {{made several}} significant achievements: 1. Assembled an international team of marine biologists and physical oceanographers who collectively achieved {{a consensus on}} the structure and function of a PICES CCCC prototype lower trophic level ecosystem model for the North Pacific Ocean, and named it “NEMURO”; 2. Developed <b>executable</b> <b>computer</b> simulation models and preliminary outputs. Models developed included: a) NEMURO/FORTRAN Box Model b) NEMURO/ 1 -D Yamanaka Mode...|$|R
50|$|Digital photo slideshows can be {{custom-made}} {{for clients}} from their photos, music, wedding invitations, birth announcements, or virtually any other scannable documents. Some producers call the resulting DVDs the new photomontage. Slideshows {{can be created}} not only on DVD, but also in HD video formats and as <b>executable</b> <b>computer</b> files. Photo slideshow software has {{made it easy to}} create electronic digital slideshows, eliminating the need for expensive color reversal film and requiring only a digital camera and computer.|$|R
25|$|Computational modeling, {{such as the}} DRC {{model of}} reading and word {{recognition}} proposed by Max Coltheart and colleagues, is another methodology and refers {{to the practice of}} setting up cognitive models in the form of <b>executable</b> <b>computer</b> programs. Such programs are useful because they require theorists to be explicit in their hypotheses and because they can be used to generate accurate predictions for theoretical models that are so complex that they render discursive analysis unreliable. Another example of computational modeling is McClelland and Elman's TRACE model of speech perception.|$|R
40|$|International audienceResource {{systems in}} {{manufacturing}} businesses {{need to be}} managed innovatively particularly when a range of products and services needs to be realized with minimum investment in resource systems. In this research, the primary form of active resource system, namely people, will be modelled {{with a view to}} facilitating efficient production. Humans play the key role in organising manufacturing businesses and contribute greatly towards competitive production performance. Enterprise Modelling is use to create static models that capture key organisational relationships in a manufacturing business and transformed into equivalent structures within Simulation Models that enable dynamic analysis. This provides both graphical and <b>computer</b> <b>executable</b> models of people and facilitates quantitative analysis and comparison of different human system configurations that suit various manufacturing workplaces. The paper illustrates the application of the modelling approach and observes advantages gained through using coherent sets of enterprise and simulation models...|$|E
40|$|In this paper, {{the authors}} present some work {{recently}} done within the Dutch Immigration and Naturalization Service (IND). Being {{responsible for the}} implementation and execution of complex and ever changing regulations, for which the use of IT systems is a necessity, this organization has become aware of their dependence on trustworthy methods to assure the correct implementation of law into their operations and services. While many attempts to automate law, even {{in the domain of}} migration law, have been made before, hardly any {{attention has been paid to}} the ‘translation process’ from legal rules expressed in natural language to specifications in <b>computer</b> <b>executable</b> form. In this paper, we will explain the method we have developed and illustrate its application with some concrete examples. The work is part of a larger innovation programme initiative that we collaboratively conduct within a virtual collaboration, called the ‘Blue Chamber’...|$|E
40|$|The {{invention}} {{relates to}} {{a method for}} monitoring user activity on a mobile device, comprising an input and an output unit, comprising the following steps preferably in the following order: detecting and / or logging user activity on said input unit, identifying a foreground running application, hashing of a user-interface-element management list of the foreground running application, and creating a screenshot comprising items displayed on said input unit. The invention also relates to a method for analyzing user activity at a server, comprising the following step: obtaining {{at least one of}} an information about detected and / or logged user activity, an information about a foreground running application, a hashed user-interface-element management list and a screenshot from a mobile device. Further, a computer program product is provided, comprising one or more computer readable media having <b>computer</b> <b>executable</b> instructions for performing the steps of {{at least one of the}} aforementioned methods...|$|E
40|$|Abstract: IT {{industry}} {{in the past few}} decades has been defined by a passion for faster, smaller, and powerful software applications. The current emphasis is on raw processing power from smaller components with greater capacity to store, process and move data. This paper is a critical analysis of the autonomic computing paradigm that aims to eliminate the need of human intervention on <b>executable</b> <b>computer</b> systems. The paper reviews the IBM autonomic computing initiative, analyzing its applications and examines the challenges and issues autonomic computing faces while achieving its objective...|$|R
40|$|Summary: quantiNemo is an individual-based, genetically {{explicit}} stochastic simulation program. It {{was developed}} to investigate the effects of selection, mutation, recombination and drift on quantitative traits with varying architectures in structured populations connected by migration and located in a heterogeneous habitat. quantiNemo is highly flexible at various levels: population, selection, trait(s) architecture, genetic map for QTL and/or markers, environment, demography, mating system, etc. quantiNemo is coded in C++ using an object-oriented approach and runs on any <b>computer</b> platform. Availability: <b>Executables</b> for several platforms, user's manual, and source code are freely available under the GNU General Public License at [URL] Contact: samuel. neuenschwander@unil. c...|$|R
50|$|One of the {{earliest}} text entry interfaces was the punched card input. A punched card input is a computer input device used to read <b>executable</b> <b>computer</b> programs, source code, and data from punched cards. Most early computers used punched cards as their main input device. Along with a card punch, punched card readers were an earlier method of entering data and running programs before {{the current generation of}} input devices existed. A card punch is an output device that punches holes in cards under computer control. Sometimes card readers were combined with card punches and, later, other devices to form multifunction machines.|$|R
40|$|This paper {{evaluates the}} Pugh Controlled Convergence method and its {{relationship}} to recent developments in design theory. <b>Computer</b> <b>executable</b> models are proposed simulating a team of people involved in iterated cycles of evaluation, ideation, and investigation. The models suggest that: (1) convergence of the set of design concepts is facilitated by the selection of a strong datum concept; (2) iterated use of an evaluation matrix can facilitate convergence of expert opinion, especially if used to plan investigations conducted between matrix runs; and (3) ideation stimulated by the Pugh matrices can provide large benefits both by improving the set of alternatives and by facilitating convergence. As a basis of comparison, alternatives to Pugh’s methods were assessed such as using a single summary criterion or using a Borda count. These models suggest that Pugh’s method, under a substantial range of assumptions, results in better design outcomes than those from these alternative procedures. Infrastructures, Systems and ServicesTechnology, Policy and Managemen...|$|E
40|$|As the key visual display- and processing- {{element of}} {{information}} super highway nodes, computer graphics is advancing into dynamic and higher dimensional visual worlds. So is visual algorithms to program visual worlds as {{the contents of}} information super highways. This research presents a drastic approach in designing visual algorithms to construct visual worlds. The address is on the most critical phase of conceptual design that has been conducted ad hoc in designers ’ mind. Conceptual visual algorithms make mental design processes and design results explicitly represented in a <b>computer</b> <b>executable</b> form after interactive machine translation. Hence, they are explicitly validatable against the design requirements. Taking a popular case of human performance design including dramas, music performance and sporting, recreational skiing algorithm design in particular {{as an example of}} visual world design, we show a requirement-driven approach to conceptual visual human algorithm design produces a truly effective skiing method to meet wide varieties of recreational requirements. 1...|$|E
40|$|Among various {{applications}} of Building Information Modeling, the expected outcomes of using automated building permit {{system is to}} increase efficiency of entire permit process, and to improve building design quality. As {{a part of the}} automated building permit process, this paper aims to define and classify high-level rule checking methods needed to translate Korea Building permit requirements into <b>computer</b> <b>executable</b> format. Unlike developer-centered method employed in the current rule checking tools, the proposed rule checking method is devised based on various law sentences. Therefore, it is high-level method that directly matches to the content of law sentences and delivers the meaning of the content intuitively. The current study can be summarized as follows; 1) defining classification for the high-level rule checking method, 2) classifying the rule checking methods developed from the selective building permit requirements, and 3) demonstrating the translation of actual requirements. The translation results in intermediate code that later be parsed into open format such as XML or script language. ? ??? ????? ???? ??????? ?????(14 AUDP-C 067809 - 02)) ? ?? ???????...|$|E
50|$|The Curry-Howard {{correspondence}} {{implies that}} types {{can be constructed}} that express arbitrarily complex mathematical properties. If the user can supply a constructive proof that a type is inhabited (i.e., that a value of that type exists) then a compiler can check the proof and convert it into <b>executable</b> <b>computer</b> code that computes the value by carrying out the construction. The proof checking feature makes dependently typed languages closely related to proof assistants. The code-generation aspect provides a powerful approach to formal program verification and proof-carrying code, since the code is derived directly from a mechanically verified mathematical proof.|$|R
30|$|Relating to this principle, the {{blockchain}} technology has extended its use cases by integrating fully programmable functions, using graph-like structures {{instead of a}} single chain, or providing possibilities for access control (permissioned blockchains). This leads {{to the definition of}} DLT as a data register that establishes a verifiable consensus on the correctness of transactions and data in a decentralized peer-to-peer network, based on the calculation of hash values. This way, the DLT developed from being solely a technology for digital currencies, but can be used to store any kind of information, including <b>executable</b> <b>computer</b> code as smart contracts that are executed once certain defined conditions apply.|$|R
40|$|In {{compiler}} theory, optimization is {{the process}} of fine-tuning the output of a compiler to curtail or capitalize on some aspects of an <b>executable</b> <b>computer</b> program. Optimization is commonly implemented using a chain of optimizing transformations, algorithms which inputs a program and transform it to produce an equivalent output program that yields better performance. In this study, we propose a novel technique which involves the concept of dominators to optimize the code. This technique is employed to a graph, depicting the program flow (CFG) from which, the information is extracted and the loop invariants are relocated to the dominating program block there by reducing the redundant computation...|$|R
40|$|Environmental impact {{assessments}} [EIA] involve identifying, measuring, {{and assessing}} impacts. This complex process deals with {{considerable amount of}} information and requires processing and analysis of quantitative data, qualitative information as well as expert human judgements. Often, available information is incomplete, subjective, and inconsistent. This challenge of collecting, processing, analyzing, and reporting EIA information can be met by computer systems. A Cloud-based Environmental Impact Assessment [EIA] system is proposed in this paper to overcome the many challenges faced by practitioners. Fiji’s EIA process {{is used as a}} case study. The steps involved in the process are automated as a sequence of <b>computer</b> <b>executable</b> programs with Expert System. Based on the information provided about projects, the EIA system is expected to compute environmental impacts and produce Environment Impact Statements. With the system, a user enters information about the environmental settings in which the development project is expected to take place as well as the proposed development project activities. Based on the input, an expert system with an inference engine uses rules to check the knowledge base and report on possible impacts and mitigation actions. The knowledge base is connected to databases on domain experts, GIS and simulation models...|$|E
40|$|While {{the cost}} of {{computing}} hardware has decreased steadily, {{the cost of}} software design, development and, maintenance has increased. One approach {{to reduce the cost}} of software development is rapid prototyping. Further, it has been proposed to combine the design strategy of rapid prototyping with a computer aided software prototyping system. Such a system would allow the software designer to employ a software base of reusable program modules. It would assist in prototyping and would automate {{a large part of the}} development effort. An important component of the automation would be a language translator facility. This translator would allow the designer to develop a software prototype in a high level specification language which would be simple and convenient to use and would translate the specification statements into an executable software language. This thesis demonstrates the feasibility of using a language translator by developing a prototype translator for a computer aided software prototyping system. The translator is written in Attribute Grammar (AG) language and translates software specifications stated in the Prototype System Description Language (PSDL) into <b>computer</b> <b>executable</b> code in the Ada language[URL] Navy (U. S. N.) author...|$|E
40|$|A Doctoral Thesis. Submitted in partial {{fulfilment}} of {{the requirements}} for the award of Doctor of Philosophy of Loughborough University. Business goals of manufacturing systems are typically {{in a state of}} constant change and greater rates of change are predicted in the future. Whereas contemporary approaches to the design and construction of these systems often results in inflexible enterprises that cannot readily be tuned to changing business goals. This study has specified and prototyped the use of a new model-driven approach to the design and (re) configuration of"change capable" manufacturing cells. Manufacturing cells represent a typical domain of manufacturing systems in which the existence of inflexible links between tasks and resources can result in sub-optimal performance and an inability to cope with change. The approach is based on a) the use of a semi-generic model of manufacturing cells, that structures and targets the use of CIMOSA modelling constructs (as implemented by the SEWOSA tool) towards producing a requirements specification and conceptual design {{in the form of a}} graphical and <b>computer</b> <b>executable</b> model of a particular manufacturing cell, and b) the complementary use of new <b>computer</b> <b>executable</b> modelling constructs and tools, that structure and support the detailed design and runtime operation of a particular cell in the form of an explicit, model-based configuration of cell resources and software components that realise the control processes required in a particular cell. Part of the semi-generic model comprises descriptions of common tasks found in a given domain of manufacturing cells. That part of the model has been captured and formalised by using CIMOSA modelling constructs. A new development of this modelling structure allows pre- modelled tasks to be selected, detailed and organised and suitable resources and reusable control system components (or building blocks) assigned to groups of tasks. Thereby this new approached to designing and building manufacturing cells can facilitate rapid and effective design and reconfiguration of manufacturing cell control systems. General information requirements found during the modelling and real world application of target cells, have also been formally defined and are met by using a suitable modelling structure and specially developed tools. Furthermore, the research has shown how modelled sets of software component building blocks can be specified and implemented as modular, reusable elements of manufacturing cell control systems. New modelling structures have been conceived and fonnalised and examples of their use evaluated under laboratory conditions. The research has also deployed and developed pre-existing enterprise modelling concepts and integration tools, including CIMOSA, STEP, EXPRESS, CIMBIOSYS infrastructure services and component-based software design concepts. This has enable the creation of a prototype tool-set that demonstrates how the concepts can be beneficially applied. The main contributions made by this research are that: a) It proposes and develops an approach to the design of manufacturing cell systems that successfully bridges a previous gap between top-down modelling concepts, methods and tools (that typically support formal modelling of system requirements, tasks and resources) and bottom-up detailed design and build techniques that lead to the operation, control and monitoring of real cells, b) It provides a modelling and implementation structure that 'integrates' the use of a classical enterprise modelling approach (namely CIMOSA), design primarily to support the designers of manufacturing systems, to the emerging component-based design and build concepts, that are becoming popular with software and system vendors...|$|E
5000|$|Computer {{programming}} (often shortened to programming) is {{a process}} that leads from an original formulation of a computing problem to <b>executable</b> <b>computer</b> programs. Programming involves activities such as analysis, developing understanding, generating algorithms, verification of requirements of algorithms including their correctness and resources consumption, and implementation (commonly referred to as coding) of algorithms in a target programming language. Source code is written in one or more programming languages. The purpose of programming is to find a sequence of instructions that will automate performing a specific task or solving a given problem. The process of programming thus often requires expertise in many different subjects, including knowledge of the application domain, specialized algorithms, and formal logic.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedA computer program to design geosynchronous spacecraft has been developed. The program {{consists of four}} separate but interrelated <b>executable</b> <b>computer</b> programs. The programs are compiled to run on an dos based personal computer. the source computer code is written in DoD mandated Ada programming language. The thesis presents the design techniques and design equations used in the program. Detailed analysis is performed in the following areas for both dual-spin and three axis stabilized spacecraft configuration: Mass propellant budget and mass summary; Battery cell and solar cell requirements for a payload power requirement; Passive thermal control requirements. Thesis includes a users manual Appendix A, and the source code for the computer programs in Appendix B. [URL] Commander, United States Nav...|$|R
40|$|The total {{internal}} partition {{function of}} methane is revisited to provide reliable values at high temperature. A multi-resolution approach {{is used to}} perform a direct summation over all the rovibrational energy levels up to the dissociation limit. A <b>computer</b> code is <b>executable</b> on line at the URL : [URL] to allow the calculation of the partition sum of methane at temperatures up to 3000 K. It also provides detailed information on the density of states in the relevant spectral ranges. The recommended values include uncertainty estimates. It is shown that at the upper limit of 3000 K, the systematic error (underestimation) of previous calculations (HITRAN 2004) reaches - 50 % equivalent to a temperature error {{of the order of}} + 200 K...|$|R
