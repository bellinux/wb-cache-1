255|612|Public
5|$|In XML, a {{namespace}} is {{an abstract}} domain {{to which a}} collection of element and attribute names can be assigned. The namespace name is a <b>character</b> <b>string</b> which must adhere to the generic URI syntax. However, the name is generally {{not considered to be}} a URI, because the URI specification bases the decision not only on lexical components, but also on their intended use. A namespace name does not necessarily imply any of the semantics of URI schemes; for example, a namespace name beginning with http: may have no connotation {{to the use of the}} HTTP.|$|E
25|$|The 68000 {{assembler}} code {{below is}} for a subroutine named , which copies a source null-terminated ASCIZ <b>character</b> <b>string</b> to another destination string, converting all alphabetic characters to lower case.|$|E
25|$|In 1985, RFC 959 officially {{defined a}} {{pathname}} {{to be the}} <b>character</b> <b>string</b> that must be entered into a file system by a user {{in order to identify}} a file.|$|E
5000|$|Converting single-byte or wide <b>character</b> <b>strings</b> to {{and from}} multi-byte <b>character</b> <b>strings</b> ...|$|R
40|$|In this paper, {{we propose}} an {{experimental}} extmction method of <b>character</b> <b>strings</b> from house map images, using tlie block information. Our method {{consists of two}} steps: {{the first is to}} recognize the block information, and the second is to extract <b>character</b> <b>strings</b> with respect to the recognized block infonation. In comparison with urban maps, which have often been investigated for extraction subject of <b>character</b> <b>strings,</b> house maps are characterized as (1) utilitation of many different kinds of character sets; and (2) illustration with different directions of <b>character</b> <b>strings</b> or <b>characters.</b> Our method is applicable to these features. This paper does not only describe our method, but also evallintes the effectiveness through experiments. ...|$|R
40|$|This {{technique}} uses lexical {{matching within}} domainspecific free-text {{to locate and}} remove terms contained in the Metathesaurus or SPECIALIST Lexicon. The remaining <b>character</b> <b>strings</b> of text were presented to domain experts along with the original sections of text for manual review. Internet search engines were used to verify questionable <b>character</b> <b>strings.</b> The key element of this technique was the SPECIALIST Lexicon which {{was used to remove}} common words and known variations of medical terms from the text. The removal of these terms reduced the number of non-numeric <b>character</b> <b>strings</b> remaining in the text from 12, 075 to 574. Ninety-three percent of 230 randomly selected remaining <b>character</b> <b>strings</b> resulted in the identification of undocumented vocabulary terms...|$|R
25|$|When {{a number}} is {{represented}} in some format (such as a <b>character</b> <b>string)</b> {{which is not a}} native floating-point representation supported in a computer implementation, then it will require a conversion before it can be used in that implementation. If the number can be represented exactly in the floating-point format then the conversion is exact. If there is not an exact representation then the conversion requires a choice of which floating-point number to use to represent the original value. The representation chosen will have a different value from the original, and the value thus adjusted is called the rounded value.|$|E
25|$|A DOI {{is a type}} of Handle System handle, {{which takes}} the form of a <b>character</b> <b>string</b> divided into two parts, a prefix and a suffix, {{separated}} by a slash. The prefix identifies the registrant of the identifier, and the suffix is chosen by the registrant and identifies the specific object associated with that DOI. Most legal Unicode characters are allowed in these strings, which are interpreted in a case-insensitive manner. The prefix usually takes the form 10.NNNN, where NNNN is a series of at least 4 numbers greater than or equal to 1000, whose limit depends only on the total number of registrants. The prefix may be further subdivided with periods, like 10.NNNN.N.|$|E
500|$|Strings {{delimited by}} single or double quote marks. Unlike in Unix shells, Perl and Perl-influenced languages, single quote marks and double quote marks {{function}} identically. Both kinds of string use the backslash (\) as an escape <b>character.</b> <b>String</b> interpolation became available in Python 3.6 as [...] "formatted string literals".|$|E
5000|$|... [...] both fixed-length and varying <b>character</b> <b>strings</b> were defined.|$|R
5000|$|The string {{attributes}} [...] (for zero-terminated <b>character</b> <b>strings),</b> , , and [...]|$|R
5000|$|... {{different}} collations of <b>characters</b> and <b>character</b> <b>strings</b> {{for different}} languages ...|$|R
2500|$|B's value has {{now been}} {{inadvertently}} replaced by a number formed from part of the <b>character</b> <b>string.</b> In this example [...] "e" [...] followed by a zero byte would become 25856.|$|E
2500|$|In Standard Scheme, {{procedures}} that convert from one datatype to another contain the <b>character</b> <b>string</b> [...] "->" [...] in their name, predicates {{end with a}} [...] "?", and {{procedures that}} change the value of already-allocated data end with a [...] "!". [...] These conventions are often followed by Scheme programmers.|$|E
2500|$|The Kolmogorov {{complexity}} can {{be defined}} for any mathematical object, but for simplicity {{the scope of this}} article is restricted to strings. We must first specify a description language for strings. [...] Such a description language can be based on any computer programming language, such as Lisp, Pascal, or Java virtual machine bytecode. [...] If P is a program which outputs a string x, then P is a description of x. The length of the description is just the length of P as a <b>character</b> <b>string,</b> multiplied by the number of bits in a character (e.g. 7 for ASCII).|$|E
5000|$|Bitstring, octetstring, and {{restricted}} <b>character</b> <b>strings</b> must use the primitive encoding ...|$|R
500|$|Concatenation, the act {{of joining}} <b>character</b> <b>strings</b> together, is a noncommutative operation. For example, ...|$|R
50|$|Students {{learn the}} Java {{programming}} language. Topics include: arrays, functions, <b>character</b> <b>strings,</b> inheritance, and polymorphism.|$|R
5000|$|Converting between single-byte {{and wide}} <b>character</b> <b>string</b> {{encodings}} ...|$|E
50|$|SQR {{has four}} scalar data types. The first three are numeric ({{variables}} begin with “#”), <b>character</b> <b>string</b> (variables begin with “$”), and date (variables begin with “$”, same as with <b>character</b> <b>string</b> variables.). Date variables must be declared, to {{be distinguished from}} <b>character</b> <b>string</b> variables. There is the option to declare numeric variables to specify them more precisely (integer, floating point, etc.). The last data type is a database column (variables begin with “&”). The values of database columns are set only by a SQL “select” statement; no other command can change their values.|$|E
5000|$|CHR$(n) {{converts}} an ASCII {{numeric code}} into a corresponding <b>character</b> (<b>string)</b> ...|$|E
50|$|C++11 allows raw strings, unicode strings (UTF-8, UTF-16, and UTF-32), {{and wide}} <b>character</b> <b>strings,</b> {{determined}} by prefixes.|$|R
5000|$|Data {{storage is}} a database, {{which is a}} {{collection}} of tables with typed columns. SQL Server supports different data types, including primary types such as Integer, Float, Decimal, Char (including <b>character</b> <b>strings),</b> Varchar (variable length <b>character</b> <b>strings),</b> binary (for unstructured blobs of data), Text (for textual data) among others. The rounding of floats to integers uses either Symmetric Arithmetic Rounding or Symmetric Round Down (fix) depending on arguments: [...] gives 3.|$|R
5000|$|The C {{programming}} language has {{a set of}} functions implementing operations on <b>strings</b> (<b>character</b> <b>strings</b> and byte strings) in its standard library. Various operations, such as copying, concatenation, tokenization and searching are supported. For <b>character</b> <b>strings,</b> the standard library uses the convention that strings are null-terminated: a <b>string</b> of [...] <b>characters</b> is represented as an array of [...] elements, the last {{of which is a}} [...] "NUL" [...] character.|$|R
5000|$|This two <b>character</b> <b>string</b> is most {{commonly}} associated with the Cayman Island's official internet domain name extension [...]ky ...|$|E
5000|$|To capture its {{output in}} a <b>character</b> <b>string,</b> *standard-output* can be bound to a string stream and called: ...|$|E
5000|$|... {{creates a}} <b>character</b> <b>string</b> which {{displays}} as The {{length of the}} segment is 4.5. This <b>character</b> <b>string</b> can be included into the figure but also set as the alias of an object (for example s1) or {{the name of an}} expression. Of course when one of the extremities of the segment is moved with the mouse, the text is edited in real time. This is called a dynamic text.|$|E
25|$|Data {{storage is}} a database, {{which is a}} {{collection}} of tables with typed columns. SQL Server supports different data types, including primary types such as Integer, Float, Decimal, Char (including <b>character</b> <b>strings),</b> Varchar (variable length <b>character</b> <b>strings),</b> binary (for unstructured blobs of data), Text (for textual data) among others. The rounding of floats to integers uses either Symmetric Arithmetic Rounding or Symmetric Round Down (fix) depending on arguments: SELECT Round(2.5, 0) gives 3.|$|R
25|$|String: a {{sequence}} of zero or more Unicode <b>characters.</b> <b>Strings</b> are delimited with double-quotation marks and support a backslash escaping syntax.|$|R
5000|$|Emails {{including}} prohibited <b>character</b> <b>strings</b> in the sender, subject, recipient etc. fields (some files {{contain the}} list of the prohibited strings) ...|$|R
50|$|A IA5String is a {{restricted}} <b>character</b> <b>string</b> {{type in the}} ASN.1 notation.It is used to represent ISO 646 (IA5) characters.|$|E
50|$|A <b>character</b> <b>string</b> {{would seem}} not to be atomic, as the RDBMS {{typically}} provides operators to decompose it into substrings.|$|E
5000|$|... "The Library of Babel", a {{short story}} which also deals with {{collecting}} all the possible permutations of a <b>character</b> <b>string.</b>|$|E
5000|$|String: a {{sequence}} of zero or more Unicode <b>characters.</b> <b>Strings</b> are delimited with double-quotation marks and support a backslash escaping syntax.|$|R
5000|$|... {{provides}} composite {{data types}} such as <b>character</b> <b>strings,</b> homogeneous-type arrays, lists, hash tables, and simple (non-hierarchical) record structures of mixed data types.|$|R
40|$|The {{purpose of}} this study is to analyze the {{statistical}} property of Japanese characters for computer processing. Sentences in high school textbooks and newspapers have been investigated in this study. This paper contains the following points: the number of different words written in each character, position of characters in a word, relation between word boundaries and <b>character</b> <b>strings,</b> relation between parts of speech and patterns of <b>character</b> <b>strings,</b> relation between parts of speech and each character. The results of these investigations can be applied to the processing of written Japanese for practical purpose. The following Japanese <b>character</b> <b>strings,</b> (A) to (D), are the same sentenCes written by using KANJI to different degrees. (D) is quoted from a high school textbook (world history). While (A), (B) and (C) are transliterated from (D) by computer. 1, 2 (A) (Example of Japanese sentence...|$|R
