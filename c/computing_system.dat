2992|10000|Public
5|$|Watson {{was created}} as a {{question}} answering (QA) <b>computing</b> <b>system</b> that IBM built to apply advanced natural language processing, information retrieval, knowledge representation, automated reasoning, and machine learning technologies {{to the field of}} open domain question answering.|$|E
5|$|In 2011 two iPad 2 tablets {{were taken}} to the International Space Station after being approved. Other Apple {{products}} that {{were taken to}} ISS include the iPod and also two iPhone 4 phones. The other personal <b>computing</b> <b>system</b> aboard ISS were various versions of the ThinkPad laptop (IBM, later Lenovo brand).|$|E
5|$|In recent years, the Watson {{capabilities}} {{have been}} extended {{and the way}} in which Watson works has been changed to take advantage of new deployment models (Watson on IBM Cloud) and evolved machine learning capabilities and optimised hardware available to developers and researchers. It is no longer purely a question answering (QA) <b>computing</b> <b>system</b> designed from Q pairs but can now 'see', 'hear', 'read', 'talk', 'taste', 'understand', 'reason', 'interpret', 'learn' and 'recommend'.|$|E
40|$|Abstract. Logging is {{a central}} service in <b>computing</b> <b>systems.</b> It lays the {{foundation}} for accountability and audit services in <b>computing</b> <b>systems,</b> {{as well as for}} other accessory services. While providing logging services in traditional <b>computing</b> <b>systems</b> is a relatively smooth process, it turns to an intricate task in pervasive <b>computing</b> <b>systems.</b> In this context, we present two contributions addressing this problem. First, we develop an approach to securely log information in marginally trusted collectors. Second, we investigate {{the question of how to}} securely delegate our logging protocol to a relay equipped with trusted-computing modules. ...|$|R
40|$|Recently, Peer-to-Peer <b>computing</b> <b>systems</b> {{have been}} gaining much {{attention}} {{due to the}} growing requirement for data processing. We focus on the optimization problem related to computations and data transmission in overlay-based P 2 P <b>computing</b> <b>systems</b> with the system cost objective. An effective heuristic algorithm is proposed and compared against optimal results. Key words P 2 P, <b>computing</b> <b>systems,</b> overlay, optimization...|$|R
50|$|The need of {{constant}} user interaction in interactive <b>computing</b> <b>systems</b> makes it different {{in many ways}} from batch processing systems. Thus different aspects of <b>computing</b> <b>systems</b> are significantly different for interactive <b>computing</b> <b>systems</b> {{and they have been}} focused on different research. The design of a different programming model has been discussed. Another article describes the importance of security and reliability in interactive computing.|$|R
5|$|On September 16, 2007, due {{in large}} part to the {{participation}} of PlayStation 3 consoles, the Folding@home project officially attained a sustained performance level higher than one native petaFLOPS, becoming the first <b>computing</b> <b>system</b> of any kind to do so. Top500's fastest supercomputer at the time was BlueGene/L, at 0.280 petaFLOPS. The following year, on May 7, 2008, the project attained a sustained performance level higher than two native petaFLOPS, followed by the three and four native petaFLOPS milestones on August 20 and September 28, 2008 respectively. On February 18, 2009, Folding@home achieved five native petaFLOPS, and was the first computing project to meet these five levels. In comparison, November 2008's fastest supercomputer was IBM's Roadrunner at 1.105 petaFLOPS. On November 10, 2011, Folding@home's performance exceeded six native petaFLOPS with the equivalent of nearly eight x86 petaFLOPS. In mid-May 2013, Folding@home attained over seven native petaFLOPS, with the equivalent of 14.87 x86 petaFLOPS. It then reached eight native petaFLOPS on June 21, followed by nine on September 9 of that year, with 17.9 x86 petaFLOPS. On May 11, 2016 Folding@home announced that it was moving towards reaching the 100 x86 petaFLOPS mark.|$|E
25|$|Telepointer, a {{wearable}} computer {{based on a}} pendant that contains a webcam and laser-based infinite depth-of-focus projector, and related technologies in the SixthSense gesture-based wearable <b>computing</b> <b>system.</b>|$|E
25|$|In {{the early}} 2000s, Japan decided to update its tank force to better prepare for 21st Century warfare. One {{of the most}} {{important}} requirements for the new tank is the capability of having a C4I (Command, Control, Communication and <b>Computing)</b> <b>system.</b>|$|E
50|$|High Productivity <b>Computing</b> <b>Systems</b> (HPCS) is a DARPA {{project for}} {{developing}} {{a new generation of}} economically viable high productivity <b>computing</b> <b>systems</b> for national security and industry in the 2002-10 timeframe.|$|R
5000|$|The <b>Computing</b> <b>Systems</b> Technology Office {{combined}} {{functions of}} the old Information Sciences and Tactical Technology office. The office [...] "will work scalable parallel and distributed heterogeneous <b>computing</b> <b>systems</b> technologies," [...] DoD said.|$|R
40|$|Cluster <b>computing</b> <b>systems</b> {{are widely}} used in {{parallel}} and distributed computing research. Besides performance, energy cost and security should also be carefully concerned in large scale cluster <b>computing</b> <b>systems</b> to reduce budget and to avoid information leak. In this dissertation, I proposed a Time Aware Dynamic Voltage Scaling scheduling algorithm to conserve energy cost of processors in parallel <b>computing</b> <b>systems</b> and a design of an energyefficient I/O System with write buffer disks to conserve energy cost of large scale storage systems. To explain when the energy consumption could be reduced in cluster <b>computing</b> <b>systems,</b> I analyzed the CPU and I/O system performance in a security-aware storage system. Security is another issue {{which has not been}} well explored in cluster <b>computing</b> <b>systems.</b> I implemented a transparent encryption/decryption layer in a popular Message Passing Interface implementation: MPICH 2. Then I quantitatively evaluate the system performance on two cluster <b>computing</b> <b>systems.</b> ii Acknowledgments It is a great pleasure to thank those who made this dissertation possible. First and foremost, I am heartily thankful to my advisor, Dr. Xiao Qin, whose encouragement...|$|R
25|$|Cisco {{partners}} {{can offer}} cloud-based services based on Cisco's virtualized Unified <b>Computing</b> <b>System</b> (UCS). A {{part of the}} Cisco Unified Services Delivery Solution that includes hosted versions of Cisco Unified Communications Manager (UCM), Cisco Unified Contact Center, Cisco Unified Mobility, Cisco Unified Presence, Cisco Unity Connection (unified messaging) and Cisco Webex Meeting Center.|$|E
25|$|The Internet {{of things}} (IoT) is {{the network of}} {{physical}} devices, vehicles, home appliances, and other items embedded with electronics, software, sensors, actuators, and network connectivity which enable these objects to connect and exchange data. Each thing is uniquely identifiable through its embedded <b>computing</b> <b>system</b> but is able to inter-operate within the existing Internet infrastructure. Experts estimate that the IoT will consist of about 30 billion objects by 2020.|$|E
25|$|USC {{is home to}} the world’s most {{powerful}} quantum computer, which is presently housed in a super-cooled, magnetically shielded facility at the USC Information Sciences Institute. The only other commercially available quantum <b>computing</b> <b>system</b> is operated jointly by NASA and Google. USC {{was also one of the}} earliest nodes on ARPANET and is the birthplace of the Domain Name System. Other technologies invented at USC include DNA computing, dynamic programming, image compression, VoIP, and antivirus software.|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedWith {{the advent of}} distributed <b>computing</b> <b>systems,</b> the problem of deadlock, which has been essentially solved for centralized <b>computing</b> <b>systems,</b> has reappeared. Existing centralized deadlock detection techniques are either too expensive or they do not work correctly in distributed <b>computing</b> <b>systems.</b> Although several algorithms have been developed specifically for distributed systems, {{the majority of them}} have also been shown to be inefficient or incorrect. Additionally, although fault-tolerance is usually listed as an advantage of distributed <b>computing</b> <b>systems,</b> little has been done to analyze the fault tolerance of these algorithms. This thesis analyzes four published deadlock detection algorithms for distributed <b>computing</b> <b>systems</b> with respect ot their performance in the presence of certain faults. A new deadlock detection algorithm is then proposed whose efficiency and fault tolerance are adjustable. [URL] Commander, United States Nav...|$|R
40|$|Abstract—Autonomic <b>computing</b> <b>systems</b> are a {{promising}} technology for bending the cost curve associated with information and communi-cation technology (ICT) service management and for aiding {{the growth and}} evolution of complex <b>computing</b> <b>systems.</b> Indeed, this has motivated {{a significant amount of}} research. However, a central plank to achieving fully-fledged autonomic <b>computing</b> <b>systems</b> is missing i. e., the ability to certify these systems. The certification process will provide a basis; for assessing the quality of autonomic systems with similar functionalities, for assessing the current capability of the system and its suitability to the problem, {{to assess the impact of}} a certified component on a system and to resolve legal liability, if the autonomic <b>computing</b> <b>systems</b> were to fail. In this second part of a two-part paper, several steps to rate or certify autonomic <b>computing</b> <b>systems</b> within the context of the targeted application domain are proposed. In the first instance, the autonomi...|$|R
40|$|Novel <b>computing</b> <b>systems</b> are {{increasingly}} being composed {{of large numbers of}} heterogeneous components, each with potentially different goals or local perspectives, and connected in networks which change over time. Management of such systems quickly becomes infeasible for humans. As such, future <b>computing</b> <b>systems</b> should be able to achieve advanced levels of autonomous behaviour. In this context, the system's ability to be self-aware and be able to self-express becomes important. This paper surveys definitions and current understanding of self-awareness and self-expression in biology and cognitive science. Subsequently, previous efforts to apply these concepts to <b>computing</b> <b>systems</b> are described. This has enabled the development of novel working definitions for self-awareness and self-expression within the context of <b>computing</b> <b>systems...</b>|$|R
25|$|In 2009, {{a simple}} {{electronic}} circuit consisting of an LC network and a memristor {{was used to}} model experiments on adaptive behavior of unicellular organisms. It was shown that subjected to a train of periodic pulses, the circuit learns and anticipates the next pulse similar to the behavior of slime molds Physarum polycephalum where the viscosity of channels in the cytoplasm responds to periodic environment changes. Applications of such circuits may include, e.g., pattern recognition. The DARPA SyNAPSE project funded HP Labs, {{in collaboration with the}} Boston University Neuromorphics Lab, has been developing neuromorphic architectures which may be based on memristive systems. In 2010, Versace and Chandler described the MoNETA (Modular Neural Exploring Traveling Agent) model. MoNETA is the first large-scale neural network model to implement whole-brain circuits to power a virtual and robotic agent using memristive hardware. Application of the memristor crossbar structure in the construction of an analog soft <b>computing</b> <b>system</b> was demonstrated by Merrikh-Bayat and Shouraki. In 2011 they showed how memristor crossbars can be combined with fuzzy logic to create an analog memristive neuro-fuzzy <b>computing</b> <b>system</b> with fuzzy input and output terminals. Learning is based on the creation of fuzzy relations inspired from Hebbian learning rule.|$|E
25|$|The {{university}} can {{be considered}} {{the birthplace of the}} computer, with mathematician Charles Babbage having designed the world's first <b>computing</b> <b>system</b> as early as the mid-1800s. Alan Turing went on to devise what is essentially the basis for modern computing and Maurice Wilkes later created the first programmable computer. The webcam was also invented at Cambridge University, as a means for scientists to avoid interrupting their research and going {{all the way down to}} the laboratory dining room only to be disappointed by an empty coffee pot.|$|E
2500|$|As the {{computer}} industry moves {{in the direction of}} cloud computing, BMC is working with firms like Cisco and VMware to build a so-called Unified <b>Computing</b> <b>System</b> described as a [...] "private cloud in a box"; the Economist Magazine elaborated: [...] "instead of having to wire up servers, storage devices and networking gear, companies can build and reconfigure virtual computer systems with a few mouse clicks," [...] reported the Economist in March 2009. Business analyst Richard Sherman said the alliance [...] "raises BMC's profile in the server automation industry" [...] and would raise future revenues. According to the article, BMC's earlier acquisition of BladeLogic in 2008 was key to the formation of the alliance with Cisco. In June 2009, BMC received a [...] "CIO 100 award" [...] for [...] "innovative use of an internal cloud computing environment to achieve maximum return on server and storage investments." ...|$|E
40|$|Due to {{the rapid}} {{development}} of VLSI technology, com-puting systems can be made much more distributed and to match the structures of the problems for various applica-tions. Because the characteristics of distributed <b>computing</b> <b>systems</b> are significantly {{different from those of}} central-ized <b>computing</b> <b>systems,</b> different a,pproaches are needed to effectively address t,he design issues related to the char-acteristics of software for distributed <b>computing</b> <b>systems.</b> In this pa. per, the methods currently used to develop the software for distributed <b>computing</b> <b>systems</b> are classified into three categories: dataflow-oriented, communication-oriented, and object-oriented. Their applicabilities are conpa. red, and the future trends of software design ap-proaches are discussed. Object-oriented software design methodoiogy is identified as a more promising approac...|$|R
40|$|Fault {{tolerance}} is {{an important}} issue in mobile, agent-based <b>computing</b> <b>systems.</b> However, most research in this area has focused on security and mobility issues. The DaAgent (Dependable Agent) system [8] is similar to several other agentbased <b>computing</b> <b>systems</b> including Agent-Tcl [6], Messengers [5], and Ajant...|$|R
40|$|This {{research}} studies firefighting frontline {{practice and the}} effects on this practiceposed {{by the introduction of}} <b>computing</b> <b>systems.</b> As the central result, a pattern languagedescribes the practice as an overall configuration. The languageallows for discussing changes and potential impactswhen designing <b>computing</b> <b>systems</b> for frontline firefighters...|$|R
2500|$|Cuauhtémoc Cárdenas Solórzano {{registered}} as an opposing candidate from a left-wing coalition called Frente Democrático Nacional. He rapidly became a popular figure, {{and became the}} first opposing candidate to fill the Zócalo with sympathizers and to seriously threaten the PRI, which had won all presidential elections since its inception in 1929. The Ministry of the Interior (Secretaría de Gobernación), through its Federal Electoral Commission, was the institution in charge of the electoral process, and installed a modern <b>computing</b> <b>system</b> to count the votes. On July 6, 1988, the day of the elections, the system [...] "crashed", and when it was finally restored, Carlos Salinas was declared the official winner. Even though the elections are extremely controversial, and some maintain that Salinas won legally, the expression se cayó el sistema (the system crashed, lit. [...] "the system fell down") became a colloquial euphemism for electoral fraud. As one observer put it, [...] "For the ordinary citizen, it was not the computer network but the Mexican political system that had crashed." ...|$|E
2500|$|The {{small size}} of the {{negative}} glow region of a neon lamp, and the flexible electronic properties that were exploited in electronic circuits, led {{to the adoption of}} this technology for the earliest plasma panel displays. The first monochrome dot matrix plasma panel displays were developed in 1964 at the University of Illinois for the PLATO educational <b>computing</b> <b>system.</b> They had the characteristic color of the neon lamp; their inventors, Donald L. Bitzer, H. Gene Slottow, and Robert H. Wilson, had achieved a working computer display that remembered its own state, and did not require constant refreshing from the central computer system. The relationship between these early monochrome displays and contemporary, color plasma displays and televisions was described by Larry F. Weber in 2006, [...] "All plasma TVs on the market today have the same features that were demonstrated in the first plasma display which was a device with only a single cell. These features include alternating sustain voltage, dielectric layer, wall charge, and a neon-based gas mixture." [...] As in colored neon lamps, plasma displays use a gas mixture that emits ultraviolet light. Each pixel has a phosphor that emits one of the display's base colors.|$|E
50|$|Some {{hardware}} can {{be attached}} to a <b>computing</b> <b>system</b> in a daisy chain configuration by connecting each component to another similar component, rather than directly to the <b>computing</b> <b>system</b> that uses the component. Only the last component in the chain directly connects to the <b>computing</b> <b>system.</b> For example, chaining multiple components that each have a UART port to each other. The components must also behave cooperatively. e.g., only one seizes the communications bus at a time.|$|E
40|$|Abstract—Novel <b>computing</b> <b>systems</b> are {{increasingly}} being composed {{of large numbers of}} heterogeneous components, each with potentially different goals or local perspectives, and connected in networks which change over time. Management of such systems quickly becomes infeasible for humans. As such, future <b>computing</b> <b>systems</b> should be able to achieve advanced levels of autonomous behaviour. In this context, the system’s ability to be self-aware and be able to self-express becomes important. This paper surveys definitions and current understanding of self-awareness and self-expression in biology and cognitive science. Subsequently, previous efforts to apply these concepts to <b>computing</b> <b>systems</b> are described. This has enabled the development of novel working definitions for selfawareness and self-expression within the context of <b>computing</b> <b>systems.</b> Keywords-self-awareness; self-expression; autonomous systems. I...|$|R
40|$|The energy {{consumption}} issue in distributed <b>computing</b> <b>systems</b> raises various monetary, environmental and system performance concerns.  Electricity {{consumption in the}} US doubled from 2000 to 2005.   From a financial and environmental standpoint, reducing the consumption of electricity is important, yet these reforms must not lead to performance degradation of the <b>computing</b> <b>systems.</b>   These contradicting constraints create a suite of complex problems {{that need to be}} resolved in order to lead to 'greener' distributed <b>computing</b> <b>systems.</b>   This book brings together a group of outst...|$|R
5000|$|... #Article: International Conference on Distributed <b>Computing</b> <b>Systems</b> ...|$|R
5000|$|... 1984. Cambridge {{distributed}} <b>computing</b> <b>system.</b> With Roger Needham ...|$|E
5000|$|IBM 1130 <b>Computing</b> <b>System</b> with Synchronous Communications Adapter (SCA) ...|$|E
5000|$|Microsoft Corporation's Windows Azure is a cloud <b>computing</b> <b>system.</b>|$|E
40|$|The {{integration}} of methodologies and techniques from parallel processing or High Performance Computing (HPC) {{with those of}} Reconfigurable <b>Computing</b> (RC) <b>systems</b> offers great potential for increased performance and flexibility {{for a wide range}} of computing problems. High Performance Computing architectures and Reconfigurable <b>Computing</b> <b>systems</b> have independently demonstrated performance advantages for applications such as digital signal processing, circuit simulation, and pattern recognition. By exploiting the near “hardware specific ” speed of Reconfigurable <b>Computing</b> <b>systems</b> in a Beowolf cluster there is potential for significant performance advantages over other software-only or uniprocessor solutions. In this paper we present our initial results for an analytical modeling framework for High Performance Reconfigurable <b>Computing</b> <b>systems...</b>|$|R
50|$|Checkpointing is a {{technique}} to add fault tolerance into <b>computing</b> <b>systems.</b> It basically consists of saving {{a snapshot of the}} application's state, so that it can restart from that point in case of failure. This is particularly important for long running applications that are executed in failure-prone <b>computing</b> <b>systems.</b>|$|R
40|$|In cyber-physical <b>systems</b> (CPSs), {{embedded}} <b>computing</b> <b>systems</b> {{and communication}} capability {{are used to}} streamline and fortify the operation of a physical system. Intelligent critical infrastructure systems {{are among the most}} important CPSs and also prime examples of pervasive <b>computing</b> <b>systems,</b> as they exploit computing to provide "anytime, anywhere"...|$|R
