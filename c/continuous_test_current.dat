0|6244|Public
5000|$|The goal of <b>Continuous</b> <b>Testing</b> is {{to apply}} [...] "extreme automation" [...] to a stable, production-like test environments. Automation is {{essential}} for <b>Continuous</b> <b>Testing.</b> But automated testing {{is not the same}} as <b>Continuous</b> <b>Testing.</b>|$|R
5000|$|A {{necessary}} pre-condition {{for continuous}} integration and <b>continuous</b> <b>testing</b> ...|$|R
2500|$|Test — <b>continuous</b> <b>testing</b> {{tools that}} provide {{feedback}} on business risks ...|$|R
50|$|<b>Continuous</b> <b>testing</b> is {{the process}} of {{executing}} automated tests as part of the software delivery pipeline to obtain immediate feedback on the business risks associated with a software release candidate. For <b>Continuous</b> <b>Testing,</b> the scope of testing extends from validating bottom-up requirements or user stories to assessing the system requirements associated with overarching business goals.|$|R
50|$|<b>Continuous</b> <b>testing</b> {{includes}} the validation of both functional requirements and non-functional requirements.|$|R
50|$|The school {{follows the}} CBSE system and has <b>continuous</b> <b>tests</b> and assignments.|$|R
50|$|The school {{follows the}} Central Board of Secondary Education system and has <b>continuous</b> <b>tests</b> and assignments.|$|R
5000|$|<b>Continuous</b> <b>testing</b> is {{the process}} of {{executing}} automated tests as part of the software delivery pipeline to obtain immediate feedback on the business risks associated with a software release candidate. [...] <b>Continuous</b> <b>testing</b> includes the validation of both functional requirements and non-functional requirements; the scope of testing extends from validating bottom-up requirements or user stories to assessing the system requirements associated with overarching business goals.|$|R
5000|$|With {{automated}} testing, a {{test failure}} may indicate {{anything from a}} critical issue to a violation of a trivial naming standard. With <b>continuous</b> <b>testing,</b> a test failure always indicates a critical business risk.|$|R
40|$|Search-based testing can {{be applied}} to {{automatically}} gener- ate unit tests that achieve high levels of code coverage on object-oriented classes. However, test generation takes time, in particular if projects consist of many classes, like {{in the case of the}} Guava library. To allow search-based test generation to scale up and to integrate it better into software development, <b>continuous</b> <b>test</b> generation applies test generation incrementally during continuous integration. In this paper, we report on the application of <b>continuous</b> <b>test</b> generation with EvoSuite at the SS- BSE' 15 challenge on the Guava library. Our results show that <b>continuous</b> <b>test</b> generation reduces the time spent on automated test generation by 96 %, while increasing code coverage by 13. 9 % on average...|$|R
50|$|In 2016, both Forrester Research and Gartner made <b>Continuous</b> <b>Testing</b> {{a primary}} {{consideration}} in their annual evaluations of test automation tools.|$|R
40|$|Participation in milk-recording {{programs}} that pro-vide data for national genetic evaluations of dairy cat-tle in the United States is voluntary, but the effective-ness {{of the evaluation}} system increases with the num-ber of herds that contribute data. To investigate patterns of herd participation in Dairy Herd Improve-ment (DHI) <b>testing,</b> periods of <b>continuous</b> <b>testing</b> were computed based on the year that a herd initiated or terminated testing and by geographical region. Con-tinuous testing was defined as at least one test per 6 -mo period. Some herds discontinued testing and then re-enrolled. Across all years (1960 through 2002), 65 % of herds had one period of <b>continuous</b> <b>testing</b> (no test-ing lapse). The percentage of herds with testing lapses decreased {{as the number of}} lapses increased and as the initial test year became more recent; overall, only 1. 5 % of herds had more than 6 <b>continuous</b> <b>testing</b> periods. For herds that terminated DHI testing from 1960 through 2002, 64 % were on <b>continuous</b> <b>test</b> for 6 mo between test periods repre-sent a loss of data that could have enhanced the study and evaluation of genetic characteristics of US dairy cattle...|$|R
50|$|For <b>Continuous</b> <b>Testing,</b> {{the scope}} of testing extends from validating {{bottom-up}} requirements or user stories to assessing the system requirements associated with overarching business goals.|$|R
5000|$|With <b>continuous</b> <b>testing,</b> a {{test failure}} is {{addressed}} via a clear workflow for prioritizing defects vs. business risks and addressing {{the most critical}} ones first.|$|R
5000|$|Time Specific Bug Pattern - Expose the bug {{by writing}} a <b>continuous</b> <b>test</b> that runs {{continuously}} and fails when an expected error occurs. This {{is useful for}} transient bugs.|$|R
40|$|Abstract. Agent-based {{distributed}} systems are increasingly used in various application domains, where autonomy, proactivity and cooperation are required. Correspondingly, {{the demands on}} the quality of the delivered agents are growing. However, testing remains a challenging activity and systematic and automated approaches are still missing. We propose a novel framework for the <b>continuous</b> <b>testing</b> of multi-agent systems. In this framework, test cases are continuously generated and executed. Two techniques for the automated, <b>continuous</b> generation of <b>test</b> cases are investigated in this paper: (1) random; (2) evolutionary mutation. Preliminary experimental results, obtained on a case study, are encouraging and indicate that <b>continuous</b> <b>testing</b> can exercise a multiagent system more effectively than under the usual time constraints of manual testing. ...|$|R
50|$|<b>Continuous</b> <b>testing</b> is {{the process}} of {{executing}} automated tests as part of the software delivery pipeline to obtain immediate feedback on the business risks associated with a software release candidate.|$|R
50|$|Mannheim-Friedrichsfeld station {{belongs to}} the fare zone of the Verkehrsverbund Rhein-Neckar (Rhine-Neckar Transport Association, VRN). The first <b>continuous</b> <b>test</b> run from Frankfurt to Heidelberg took place on 27 July 1846.|$|R
5000|$|API Testing is {{recognised}} {{as being}} more suitable for <b>test</b> automation and <b>continuous</b> <b>testing</b> (especially the automation used with Agile software development and DevOps) than GUI testing. Reasons cited include: ...|$|R
40|$|The Bureau of Mines {{investigated}} {{techniques for}} dewatering slurries from talc-processing operations to improve water reclamation and pro-duce dewatered solids suitable for disposal. Various flocculating reagents were evaluated, and a nonionic polyacrylamide {{was found to}} be most effective in a specialized flocculation dewatering technique. The flocculation dewatering method was applied in laboratory batch <b>tests</b> and in <b>continuous</b> <b>tests</b> using a static screen, a belt-roller device, and a clarifier-thickener laboratory unit. In <b>continuous</b> <b>tests</b> using the unit, wastes of 3. 5 pct solids were dewatered to 56. 9 pct solids using 0. 03 Ib of flocculant per ton of dry solids treated...|$|R
40|$|The tensile {{properties}} of spun yarn are accepted {{as one of}} the most important parameters for assessment of yarn quality. The {{tensile properties}} decide the performance of post spinning operations; warping, weaving and knitting; hence its accurate technical evaluation carries much importance in industrial applications. An important aspect of dynamic tensile testing of spun yarns is the possibility of predicting the performance of yarn in subsequent processes. <b>Continuous</b> tensile <b>testing</b> of spun yarn involves transporting the yarn under constant tension at constant output speed. Thus, in <b>continuous</b> <b>testing</b> every inch or millimeter of yarn is tested to generate true elongation of yarn at specific dynamic tension & speed condition, and the tensile characteristics are continuously assessed. Dynamic tensile properties measured by <b>continuous</b> <b>testing</b> simulate actual manufacturing conditions more closely than the static tensile testing...|$|R
50|$|Parasoft's various {{technologies}} {{are used for}} demonstrating industry or regulatory compliance and adopting Agile software development, DevOps, <b>Continuous</b> delivery, <b>Continuous</b> <b>testing,</b> and Test automation.Parasoft joined the Eclipse Consortium board of stewards in 2002.|$|R
50|$|ICRT members co-operate in a {{programme}} of <b>continuous</b> <b>testing</b> on a {{wide range}} of popular consumer products such as digital cameras, mobile phones, television sets, cars, washing machines, dishwashers, vacuum cleaners and light bulbs.|$|R
40|$|<b>Continuous</b> <b>testing</b> uses excess cycles on a developer’s {{workstation}} to continuously run regression {{tests in}} the background, providing rapid feedback about test failures as source code is edited. It is intended to reduce the time and energy required to keep code well-tested, and to prevent regression errors from persisting uncaught {{for long periods of}} time. This paper reports on the design and implementation of a <b>continuous</b> <b>testing</b> feature for Java development in the Eclipse development environment. Our challenge was to generate and display a new kind of feedback (asynchronous notification of test failures) in a way that effectively reuses Eclipse’s extensible architecture and fits the expectations of Eclipse users without interfering with their current work habits. We present the design principles we pursued in solving this challenge: present and future reuse, consistent experience, minimal distraction, and testability. These principles, and how our plug-in and Eclipse succeeded and failed in accomplishing them, should be of interest to other Eclipse extenders looking to implement new kinds of developer feedback. The <b>continuous</b> <b>testing</b> plug-in is publicly available a...|$|R
3000|$|The {{influence}} of some group skills on evaluating {{the relevance of}} some characteristic such as <b>continuous</b> <b>testing,</b> reflection and introspection, people oriented and practices such as test driven development, refactoring and collective code ownership; [...]...|$|R
5000|$|With <b>continuous</b> <b>testing,</b> {{each time}} a risk is identified, there is a process for exposing all similar defects that might already have been introduced, as well as {{preventing}} this same problem from recurring in the future.|$|R
40|$|<b>Continuous</b> <b>testing</b> is a {{new feature}} for {{software}} development environments that uses excess cycles on a developer's workstation to continuously run regression tests in the background, providing rapid feedback about test failures as source code is edited. It is intended to reduce the time and energy required to keep code well-tested, and to prevent regression errors from persisting uncaught {{for long periods of}} time. The longer that regression errors are allowed to linger during development, the more time is wasted debugging and fixing them once they are discovered. By monitoring and measuring software projects, we estimate that the wasted time, consisting of this preventable extra fixing cost added to the time spent running tests and waiting for them to complete, accounts for 10 - 15 % of total development time. We present a model of developer behavior that uses data from past projects to infer developer beliefs and predict behavior in new environments -in particular, when changing testing methodologies or tools to reduce wasted time. This model predicts that <b>continuous</b> <b>testing</b> would reduce wasted time by 92 - 98 %, a substantial improvement over other approaches we evaluated, such as automatic test prioritization and changing manual test frequencies. A controlled human experiment indicates that student developers using <b>continuous</b> <b>testing</b> were {{three times more likely to}} complete a task before the deadline than those without, with no significant effect on time worked. (cont.) Most participants found <b>continuous</b> <b>testing</b> to be useful and believed that it helped them write better code faster. 90 % would recommend the tool to others. We show the first empirical evidence of a benefit from continuous compilation, a popular related feature. <b>Continuous</b> <b>testing</b> has been integrated into Emacs and Eclipse. We detail the functional and technical design of the Eclipse plug-in, which is publicly beta-released. by David Saff. Thesis (S. M.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2004. Includes bibliographical references (p. 147 - 152) ...|$|R
50|$|During development, the {{programmer}} {{uses the}} interpreter in REPL mode to execute and test each little piece {{as it is}} developed. Most Forth programmers therefore advocate a loose top-down design, and bottom-up development with <b>continuous</b> <b>testing</b> and integration.|$|R
50|$|Tricentis' {{main product}} is Tricentis Tosca, a <b>continuous</b> <b>testing</b> tool that {{combines}} multiple aspects of software testing (test case design, test automation, test data design and generation, and analytics) to test GUIs and APIs {{from a business}} perspective.|$|R
40|$|Reducing wasted {{development}} time via <b>continuous</b> <b>testing</b> Testing is often performed frequently during development to ensure software reliability by catching regression errors quickly. However, stopping frequently to test also wastes time by holding up development progress. User studies on real development projects indicate {{that these two}} sources of wasted time account for 10 – 15 % of {{development time}}. These measurements use a novel technique for computing the wasted extra development time incurred by a delay in discovering a regression error. We present a model of developer behavior that infers developer beliefs from developer behavior, and that predicts developer behavior in new environments — in particular, when changing testing methodologies or tools to reduce wasted time. Changing test ordering or reporting reduces wasted time by 4 – 41 % in our case study. Changing {{the frequency with which}} tests are run can reduce wasted time by 31 – 82 % (but developers cannot know the ideal frequency except after the fact). We introduce and evaluate a new technique, <b>continuous</b> <b>testing,</b> that uses spare CPU resources to continuously run tests in the background, providing rapid feedback about test failures as as source code is edited. <b>Continuous</b> <b>testing</b> reduced wasted time by 92 – 98 %, a substantial improvement over the other approaches. We have integrated <b>continuous</b> <b>testing</b> into two development environments, and are beginning user studies to evaluate its efficacy. We believe {{it has the potential to}} reduce the cost and improve the efficacy of testing and, as a result, to improve the reliability of delivered systems. 1...|$|R
50|$|For {{electronic}} components, burn-in {{is frequently}} conducted at elevated temperature and perhaps elevated voltage. This process {{may also be}} called heat soaking. The components may be under <b>continuous</b> <b>test</b> or simply tested {{at the end of}} the burn-in period.|$|R
5000|$|... '''''' is a {{command-line}} driven {{automated testing}} tool for Python, {{based on the}} use of [...] It can be used for both manually-invoked testing from the desktop, or <b>continuous</b> <b>testing</b> within <b>continuous</b> integration frameworks such as Jenkins or Travis CI.|$|R
5000|$|WAP 4: Upgraded from WAP-1 {{for higher}} loads by Chittaranjan Locomotive Works in 1994. One {{of the most}} {{successful}} locomotives in India. Very powerful class. [...] maximum, [...] <b>continuous.</b> <b>Tested</b> for maximum speed 180 km/h. Maximum permissible speed 150 km/h ...|$|R
40|$|Abstract-A {{continuous}}-parameter Markov {{model for}} intermit-tent faults in digital systems is presented. This continuous model is more realistic than discrete-parameter models previously presented by other authors. The results obtained using the proposed {{model can be}} reduced to those obtained from the previous models, by using appropriate approximations. Two testing strategies are considered, <b>continuous</b> <b>testing</b> for combinational networks and repetitive testing for both combina-tional and sequential networks while only the latter strategy was considered in earlier studies. Next, optimal detection experiments for both testing strategies are developed and the optimization problem is shown to be equivalent to a nonlinear programming problem. Index Terms-Continuous-parameter Markov model, <b>continuous</b> <b>testing,</b> intermittent faults, fault detection, optimal testing experi-ments, repetitive testing. I...|$|R
5000|$|Continuous test-driven {{development}} (CTDD) [...] is {{a software}} development practice that extends test-driven development {{by means of}} automatic test execution in the background (sometimes called <b>continuous</b> <b>testing).</b> In CTDD the developer writes a test first but is not forced to execute the tests manually. The tests are run automatically by a <b>continuous</b> <b>testing</b> tool (see external links for examples) running in the background. This technique can potentially reduce the time waste resulting from manual test execution by {{eliminating the need for}} the developer to start the test after each phase of the normal TDD practice: after writing the (initially failing) test, after producing the minimal amount of code for the test to pass and after refactoring the code.|$|R
5000|$|Earth {{continuity}} resistance (aka Earth Bond) {{tests with}} a measurement range of 0 - 1.99 Ω at high <b>test</b> <b>currents</b> (usually 8 A, 10 A or 25 A) and lower <b>test</b> <b>currents</b> (in the range 20 mA to 200 mA), enabling a complete range of appliances including personal computers to be tested; ...|$|R
