8|587|Public
5000|$|... #Caption: Dave and Alex of Slub {{performing}} live in London. The left screen shows one performer's CLI, {{the right}} shows the other performer's [...] "Scheme bricks" [...] <b>coding</b> <b>interface,</b> {{and the top}} shows a custom-made game environment through which audience members influence the music generation.|$|E
40|$|Abstract—Motivated by the {{recently}} developed hybrid coding scheme for joint source–channel coding, this paper proposes a new coding scheme for noisy relay networks. The proposed coding scheme operates {{in a similar}} manner to the noisy network coding scheme, except that each relay node uses the hybrid <b>coding</b> <b>interface</b> to transmit a symbol-by-symbol function of the received sequence and its quantized version. This coding scheme unifies both amplify–forward and noisy network coding and can strictly outperform both. The potential of the hybrid <b>coding</b> <b>interface</b> for relaying is demonstrated through the diamond relay network and two-way relay channel examples. I...|$|E
40|$|This paper {{describes}} the setup of voice communication {{in a space}} mission context, points out special requirements and operational approaches, and defines the transmission, <b>coding,</b> <b>interface,</b> and quality parameters needed for space mission support. It provides system designers with {{a subset of the}} larger industry set of standards from which to choose, depending on the application and purpose of the voice system...|$|E
50|$|Building {{instructions}} (plugs {{and wires}} only) {{are available at}} the Hitmen 4 player adapter website. <b>Code</b> <b>interface</b> is demonstrated in the SNES-Pad-Tooldisk #1.|$|R
40|$|As Java {{is being}} {{considered}} an appropriate environment for high performance computing, the interest arises in combining it with existing code written in other languages. Portable Java to native <b>code</b> <b>interfaces</b> may be developed using the Java Native Interface (JNI). However, as a low-level API {{it is rather}} inconvenient to be used directly thus the higher level tools and techniques are desired. We present Janet – the highly expressive Java language extension enabling convenient creation of powerful and efficient Java to native <b>code</b> <b>interfaces.</b> ...|$|R
5000|$|Keep {{only what}} is needed: The {{software}} configuration management activities {{must make sure}} this is enforced. Unused resources (old or failed versions of files, source <b>code,</b> <b>interfaces,</b> etc.) must be archived somewhere else to keep newer builds lean.|$|R
40|$|Studies on {{the digital}} {{communication}} {{system for the}} direct communication links from ground to space shuttle and the links involving the Tracking and Data Relay Satellite (TDRS). Three main tasks were performed:(1) Channel encoding/decoding parameter optimization for forward and reverse TDRS links,(2) integration of command encoding/decoding and channel encoding/decoding; and (3) modulation <b>coding</b> <b>interface</b> study. The general communication environment is presented to provide the necessary background for the tasks and to provide {{an understanding of the}} implications {{of the results of the}} studies...|$|E
40|$|Recent {{exhibition}} {{attempts to}} recuperate and revise Conceptual Art — ‘Open Systems’ (2005), ‘Invisible: Art About the Unseen’ (2012) — {{have brought to}} the fore wider discursive concerns regarding coding, interfaces and artistic intentionality. Taking its lead from Rosalind Krauss’ seminal work on the post-medium condition, this paper argues that the continued privileging of interface/display-user inherent within artistic discourse belies a more nuanced reading of the critical relationship between artist and code. Furthermore, this paper explores new practices in Computer Art and its related theorisation by Tanaka-Ishii and Dominic Lopes, {{with a view to}} re-conceptualising the relationship between artistic intentionality, <b>coding,</b> <b>interface</b> and user input. Based on this re-conceptualisation we identify the ‘post-display condition of contemporary computer art’, a condition that neither privileges user-display communication, nor the space between code and user, but rather envelopes meaning production between all elements of an artwork. Restricted Access: Metadata Onl...|$|E
40|$|Each {{paper in}} this special issue deals with a {{particular}} aspect of supply chain management. Nevertheless, they all point to a common need for meaningful and timely information exchange across the supply chain. The Internet and the existing Web technologies have made the exchange of information essentially free and instantaneous. On the other hand, determining the meaning of that information, which we call integration, is still very costly. Millions of dollars and hundreds of man-years have been spent developing and <b>coding</b> <b>interface</b> specifications and software applications to achieve this integration. While this approach {{has been successful in}} the past, it is not a viable approach for the future in which the Semantic Web is becoming an important business strategy. In this paper, we discuss a new approach, called self-integration in which software applications are imbedded in an environment that allows them to integrate automatically. We first provide some background information on integration and then focus on our research on semantic querying, semantic mapping, and semantic inferencing. Key Words: equivalence metric, inference, mappings, ontology, self-integration...|$|E
50|$|Not {{only can}} native <b>code</b> <b>interface</b> with Java, {{it can also}} draw on a Java , which is {{possible}} with the Java AWT Native Interface. The process is almost the same, {{with just a few}} changes. The Java AWT Native Interface is only available since J2SE 1.3.|$|R
40|$|Abstract. Realizability {{theory can}} produce <b>code</b> <b>interfaces</b> {{for the data}} {{structure}} corresponding to a mathematical theory. Our tool, called RZ, serves as a bridge between constructive mathematics and programming by translating specifications in constructive logic into annotated <b>interface</b> <b>code</b> in Objective Caml. The system supports a rich input language allowing descriptions of complex mathematical structures. RZ does not extract code from proofs, but allows any implementation method, from handwritten code to code extracted from proofs by other tools. ...|$|R
5000|$|Technical - Documentation of <b>code,</b> algorithms, <b>interfaces,</b> and APIs.|$|R
40|$|Games for {{teaching}} coding {{have been an}} educational holy grail {{since at least the}} early 1980 s. Yet for decades, with games more popular than ever and with the need to teach kids coding having been well-recognized, no blockbuster coding games have arisen (see Chapter 2). Over the years, the research community has made various games {{for teaching}} computer science: a survey made by shows that most do not teach coding, and of the ones that do teach coding, most are research prototypes (not production-ready) and difficult to even install. In analysing the list, we found that some were no longer available, of none were blockbusters (see Chapter 2). With decades of unimpressive performance behind us, it is time to take a critical look at the field and ask some key questions: What is a coding game? Why are there no blockbuster coding games? What design guidelines can make it easier to create coding games? How can we categorize past and future work on coding games into a productive taxonomy? What (if anything) makes coding games difficult to produce? What (if anything) makes them difficult to play? What can/should a ``good'' coding game seek to accomplish? And how can/should we evaluate that?This thesis begins by articulating a design space consisting of 3 types of coding games. The chapters of this thesis examine those three types in the context of systems we built:* Direct embedding [...] ``coding in a game". Chapter 3 looks at CodeSpells, a game in which the player plays the part of a wizard and writes magic spells with code. The <b>coding</b> <b>interface</b> is embedded in the 3 D game. CodeSpells is significant because it introduces a novel set of metaphors (magic, wizards, spells, etc.) that correlate neatly with ideas within the pedagogical domain of coding. As an individual system, it is novel because it is the first fantasy-themed coding game (that we know of); as a more general contribution, it is novel because it validates that fantasy-themed coding games can provide an alternative to the more traditional sci-fi themed coding games. * A programming language that is a game [...] ``coding as a game". Chapter 4 looks at The Orb Game where a visual programming language is defined as a set of game mechanics, making the process of coding into the process of (seemingly) playing a game. The <b>coding</b> <b>interface</b> is presented as a game. The Orb Game is significant because it is the first system that has been proven to allow players to write code without realizing that they are doing so [...] essentially ``tricking'' them into thinking they are just playing a game. It is more generally significant because it introduces a novel technique called Programming by Gaming, which can be used to design other Turing-complete programming environments that appear to be games. * A modding environment integrated with a game [...] ``coding for a game". Chapter 5 looks at a modding environment integrated with the blockbuster game of Minecraft. The <b>coding</b> <b>interface</b> allows the user to code for the game. It is significant because it allows players to learn to code {{in the context of a}} blockbuster game, resulting in higher recruitment numbers than state of the art coding systems like Scratch. More generally, it proves that loosely-coupled, seamful games may be viable alternatives to the more orthodox style of seamlessly integrated games. This thesis explores this design space and evaluates the three sub-genres above by looking at real systems we built and evaluated. We also discuss our systems in relation to ``adjacent'' systems in the same design space. This analysis, in turn, yields design guidelines that we flesh out in Chapter 6, our concluding chapter...|$|E
40|$|Objective: To {{evaluate}} {{the utility of}} SNOMED RT © {{in support of a}} natural language interface for encoding of clinical assessments. Method: Using a random sample of clinical terms from the UNMC Lexicon©, I mapped the terminology into canonical data entries using SNOMED RT. Working from the source term language, I evaluated lexical mapping to the SNOMED term set, and the function of the SNOMED RT semantic network in support of a language-based clinical <b>coding</b> <b>interface.</b> Results: Ambiguity in the source terms was low at 0. 3 %. Lexical (language-based) mapping could account for only 48. 8 % of meaning from the source terms. The RT semantic network accounted for 39. 5 % of meaning, and supplementing the lexical map this led to 80. 2 % capture of source content. Error rates in the segment of RT which I reviewed were low at 0. 6 %. 97. 6 % of source content could be accurately captured in SNOMED RT. Conclusion: SNOMED RT supported an accurate and reliable representation of clinical assessment data in this sample. The semantic network of RT substantially enhanced the encoding of concepts relative to lexical mapping. However these data suggest that natural language encoding with SNOMED RT in an enterprise environment is unlikely at this time...|$|E
50|$|From the sender's viewpoint, SNS acts as {{a single}} message bus that can message {{to a variety of}} devices and platforms, from the Kindle Fire to Baidu. A single <b>code</b> <b>interface</b> can address all of these equally, or message formats can be {{tailored}} to the particular needs of each platform.|$|R
40|$|September 1994 The use of {{trademarks}} or {{names of}} manufacturers in this report is for accurate reporting and {{does not constitute an}} o cial endorsement, either expressed or implied, of such products or manufacturers by the National Aeronautics and Space Administration. Acknowledgment The assistance of Robert A. Mitcheltree in establishing the LAURA <b>code</b> <b>interface</b> is gratefully acknowledged...|$|R
40|$|This paper {{introduces}} a dynamics simulator designed {{to aid the}} development of control algorithms for biologically inspired robots. We describe the simulator and a two-tier framework for control <b>code</b> <b>interfacing</b> that allows control code to be written in a standard object-oriented language (C++), but encapsulates such code to produce modular, reusable, distributed controllers with parameterizable inputoutput transmission properties such as delay, sampling rate, and noise...|$|R
40|$|The Smoothed Particle Hydrodynamics methodologies may be {{a useful}} {{numerical}} tool for the simulation of particle beam interaction with liquid targets and obstacles. ARMANDO code {{is a state of}} the art SPH <b>code</b> <b>interfaced</b> with FLUKA and capable to solve these problems. This report presents the basic theoretical elements behind the method, describes the most important aspects of the implementation and shows some simple examples...|$|R
40|$|This paper {{describes}} Janet package — highly expressive Java {{language extension}} that enables convenient creation of powerful native methods and efficient Java-to-native <b>code</b> <b>interfaces.</b> Java native interface (JNI) is a low-level API that is rather inconvenient if used directly. Therefore Janet, as the higher-level tool, combines flexibility of JNI with Java’s ease-of-use. Performance results of Janet-generated interface to thelip library are shown. Java code, which useslip, is compared wit...|$|R
40|$|We discuss live coding {{audio-visual}} worlds {{for large-scale}} virtual reality environments. We describe Alive, an instru-ment allowing multiple users to develop sonic and visual behaviors of agents {{in a virtual}} world, through a browser-based collaborative <b>code</b> <b>interface,</b> accessible while being immersed through spatialized audio and stereoscopic dis-play. The interface adds terse syntax for query-based pre-cise or stochastic selections and declarative agent manipula-tions, lazily-evaluated expressions for synthesis and behav-ior, event handling, and flexible scheduling...|$|R
50|$|Final Cut Pro X shares some of {{both its}} <b>code</b> and <b>interface</b> design {{philosophy}} with Apple’s consumer video editing software, iMovie.|$|R
40|$|Realizability {{theory is}} not just a {{fundamental}} tool in logic and computability. It also has direct application to the design and implementation of programs, since it can produce <b>code</b> <b>interfaces</b> for the data structure corresponding to a mathematical theory. Our tool, called RZ, serves as a bridge between the worlds of constructive mathematics and programming. By using the realizability interpretation of constructive mathematics, RZ translates specifications in constructive logic into annotated <b>interface</b> <b>code</b> in Objective Caml. The system supports a rich input language allowing descriptions of complex mathematical structures. RZ does not extract code from proofs, but allows any implementation method, from handwritten code to code extracted from proofs by other tools. ...|$|R
40|$|Java {{provides}} {{security and}} robustness {{by building a}} high- level security model atop the foundation of memory protection. Unfortunately, any native code linked into a Java program – including the million lines used to implement the standard library – is able to bypass both the memory protection and the higher-level policies. We present a hardware-assisted implementation of the Java native <b>code</b> <b>interface,</b> which extends the guarantees required for Java’s security model to native code. Our design supports safe direct access to buffers owned by the JVM, including hardware-enforced read-only access where appropriate. We also present Java language syntax to declaratively describe isolated compartments for native code. We show {{that it is possible}} to preserve the memory safety and isolation requirements of the Java security model in C code, allowing native code to run in the same process as Java code with the same impact on security as running equivalent Java code. Our approach has a negligible impact on performance, compared with the existing unsafe native <b>code</b> <b>interface.</b> We demonstrate a prototype implementation running on the CHERI microprocessor synthesized in FPGA. Defense Advanced Research Projects Agency Google, Inc. Isaac Newton Trust Thales E-Securit...|$|R
5000|$|Of the {{construction}} artifacts against the design specification: Do the source <b>code,</b> user <b>interfaces</b> and database physical model correctly implement the design specification? ...|$|R
40|$|JAVA'S {{interface}} construct {{is widely}} {{perceived as a}} weak surrogate for multiple inheritance. Consequently, {{it should come as}} no surprise that despite their potential for writing highly alecoupled <b>code,</b> <b>interfaces</b> are used rather sparingly. We have devised a conceptual framework for the utilization of interfaces in JAVA programs, and suggest tool support lessening the coding effort induced by the introduction and maintenance of additional interfaces, as well as a metrics suit measuring how and to which extent interfaces are actually used...|$|R
40|$|This paper {{describes}} how GEMLCA has been ported to the LCG/g-Lite based EGEE infrastructure. Besides simply porting GEMLCA to another middleware {{it had to}} be made capable to interact with the EGEE broker solution. A legacy code can not only be selected from the repository, but using its legacy <b>code</b> <b>interface</b> description it is also defined which resources are capable to execute the given code. Based on this information the broker can find the most suitable resource at workflow execution...|$|R
5000|$|This {{color scheme}} {{originates}} in the (withdrawn) national standard DIN 47100. The scheme shown {{here is the}} correct color <b>code</b> for <b>interfacing</b> with the RJ connector standards.|$|R
5000|$|... {{for most}} operations, the WBEM server determines {{from the model}} {{that it needs to}} {{communicate}} with the actual hardware or software. So-called [...] "providers" [...] handle the interaction: small pieces of <b>code</b> <b>interface</b> between the WBEM server (using a standardised interface known as CMPI) and the real hardware or software. Because the interface is well-defined and the number of types of call is small, it is normally easy to write providers. In particular, the writer of the provider knows nothing of the GUI, BUI, or CLI used by the operator.|$|R
40|$|In this paper, {{we present}} new {{techniques}} which further improve the static compiled instruction set architecture (ISA) simulation by the aggressive {{utilization of the}} host machine resources. Such utilization is achieved by defining a low level <b>code</b> generation <b>interface</b> specialized for ISA simulation, rather than the traditional approaches which use C as a <b>code</b> generation <b>interface.</b> We are able to perform the simulation at a speed up to 10 2 millions of simulated instructions per second (MIPS). This result is only 1 : 1 Γ 2 : 5 times slower than the native execution on the host machine, the fastest {{to the best of}} our knowledge. Furthermore, the <b>code</b> generation <b>interface</b> is organized to implement a RISC like virtual machine, which makes our tool easily retargetable to many host platforms. 1 Introduction An instruction set simulator is a tool that runs on a host machine, typically a workstation, to mimic the behavior of, or simulate a program running on a target machine, which either [...] ...|$|R
40|$|ABSTRACT. The {{purpose of}} this paper is to provide an {{evaluation}} of the three open-source LP optimization codes, GLPK, COIN-LP (CLP) and LPSOLVE in solving electricity spot market optimization problems. The paper describes a technique for automatically generating over 100 locational marginal pricing (LMP) electricity spot market optimization problems, each being solved using the three optimization codes. Performance measures were then constructed using measurements of the CPU time spent in solving each optimization problem and the CPU time spent in each optimization <b>code’s</b> <b>interface.</b> These measurements were used as the basis for performance characteristics for comparing the relative merits of each optimization code...|$|R
40|$|The recent {{developments}} in Web technologies, including full‐stack reactive application frameworks, peer‐to‐peer communication and client‐side audiovisual APIs have introduced the possibility of creative collaboration {{in a number of}} contexts. Such technologies have the potential to transform the way Internet users interact with code. This paper introduces a theoretical and technical methodology for developing collaborative <b>coding</b> <b>interfaces</b> as web applications, tackling the issues of interactive rendering, user‐platform interaction and collaboration. A number of existing interactive programming environments are reviewed, followed by a technical description and evaluation of C odeCircle, a collaborative coding web platform developed at Goldsmiths, University of London...|$|R
50|$|The {{programming}} <b>code</b> {{required to}} <b>interface</b> EEPROM to the DataFlash chip is simpler.|$|R
5000|$|Here {{are some}} {{examples}} of CAL <b>code</b> that declares <b>interfaces</b> to Java entities: ...|$|R
40|$|Abstract. We present CurryBrowser, {{a generic}} {{analysis}} {{environment for the}} declarative multi-paradigm language Curry. CurryBrowser supports browsing through the program code of an application written in Curry, i. e., the main module and all directly or indirectly imported modules. Each module can be shown in different formats (e. g., source <b>code,</b> <b>interface,</b> intermediate <b>code)</b> and, inside each module, various properties of functions defined in this module can be analyzed. In order to support the integration of various program analyses, CurryBrowser has a generic interface to connect local and global analyses implemented in Curry. CurryBrowser is completely implemented in Curry using libraries for GUI programming and meta-programming. ...|$|R
40|$|AbstractAn {{aerodynamic}} design {{method and}} corresponding codes are developed for three dimensional multi-lifting surfaces at transonic flow. It {{is based on}} the “iterative residual correction” concept that is successfully used for transonic wing design and subsonic multi-lifting surface design. The up wind scheme is introduced into governing equations of multi-lifting surface design method and automatically acted when supersonic flow appears on the surface. A series of <b>interface</b> <b>codes</b> are programmed, including a target- pressure modification tool. Using the improved inverse aerodynamic design code, T A U <b>code</b> and <b>interface</b> <b>codes,</b> the transonic multi-lifting aerodynamic design software system is founded. Two cases of canardwing configuration have been performed to validate the method and codes. The results show that the convergence of analysis/design iteration is very good at higher speed transonic flow...|$|R
5000|$|Standard Java Map {{access is}} used. An {{enhanced}} java.util.concurrent.ConcurrentNavigable interface is implemented, allowing direct substitution into any existing application or test <b>code.</b> This <b>interface</b> provides specialized concurrency methods {{as well as}} ordering features improving the original SortedSet.|$|R
