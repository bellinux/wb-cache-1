47|766|Public
25|$|ICE33: Validates {{that the}} Registry table {{is not used}} for data better suited for another table (<b>Class,</b> <b>Extension,</b> Verb, and so on).|$|E
2500|$|On August 21, 1923, SH 20 {{in the new}} {{highway system}} was routed over the {{previously}} proposed Highway 20A from Fredericksburg to Austin and then over the proposed Highway 20 to Hempstead as a second class highway. The old route to Leander was cancelled, and northwest of there became part of SH 43 when it was extended southwest. By 1926, SH 20 was given a third <b>class</b> <b>extension</b> to Kerrville. In 1924, the state highway department assumed responsibility to maintain all state highways which were previously maintained by the counties. The following year, state lawmakers vest the department with the authority to acquire right of way, survey, plan, and build highways. By 1928, SH 20 was given an auxiliary route SH 20A from Fredericksburg to a point on the highway between Kerrville and Junction. All of the highway from Fredericksburg to Hempstead was classified as a [...] "secondary federal highway". The portion between Fredericksburg and Kerrville along with the new auxiliary route were classified as [...] "state highways" [...] eligible for state aid only.|$|E
5000|$|Consequently, {{the ideal}} {{embedding}} {{is given by}} ,and the <b>class</b> <b>extension</b> by [...]|$|E
40|$|Abstract. <b>Class</b> <b>extensions</b> {{provide a}} {{fine-grained}} mechanism to define incremental modifications to class-based systems when standard subclassing mechanisms are inappropriate. To control {{the impact of}} <b>class</b> <b>extensions,</b> the concept of classboxes has emerged that defines a new module system to restrict the visibility of <b>class</b> <b>extensions</b> to selected clients. However, the existing implementations of the classbox concept rely either on a “classbox-aware ” virtual machine, an expensive runtime introspection of the method call stack to build {{the structure of a}} classbox, or both. In this paper we present an approach for the. NET framework that allows the structure of a classbox to be constructed at compile-time by means of code instrumentation to rewire the inheritance graph of refined classes. The metadata transformations are language-neutral and more importantly preserve both the semantics of the classbox concept and the integrity of the underlying assemblies. As a result, metadata transformation provides a feasible approach to incorporate the classbox concept into programming environments that use a virtual execution system...|$|R
40|$|Type {{classes are}} perhaps the most {{exciting}} feature of Haskell’s type system. Although type classes were only proposed as a solution for overloading identifiers, they have become an active research topic where experimental type <b>class</b> <b>extensions</b> are still being proposed. On top of that, the underlying principles are also used to encode various other extensions, such as extensible records, implicit parameters, and subtyping. However, implementing type classes and type <b>class</b> <b>extensions</b> is not a trivial task. It is not only a matter of type checking to resolve overloading, but also evidence for overloaded identifiers has to be inserted. A uniform approach to easily formulate type <b>class</b> <b>extensions</b> side by side is missing. In addition, error messages concerning type classes are difficult to understand or sometimes not present at all. We propose a constraint-based framework for the resolution of overloading. Assumptions and proof obligations are explicitly encoded into the constraint language of this framework. Furthermore, type <b>class</b> <b>extensions</b> can be easily formulated using Constraint Handling Rules (CHRs). The confluence requirement is circumvented by using only propagation CHRs, and by specifying design decisions in the form of heuristics. Using the resulting framework, we show how various context reduction strategies can be specified side by side. Furthermore, we explain how scoped instances and overlapping instances are naturally supported. We also show how functional dependencies can be supported using the existing translation into CHRs...|$|R
5000|$|Partial {{classes have}} existed in Smalltalk {{under the name}} of <b>Class</b> <b>Extensions</b> for {{considerable}} time. With the arrival of the [...]NET framework 2, Microsoft introduced partial classes, supported in both C# 2.0 and Visual Basic 2005. WinRT also supports partial classes.|$|R
5000|$|... #Caption: Figure 1: Commutative diagram {{connecting}} the <b>class</b> <b>extension</b> with the Artin transfer.|$|E
5000|$|ICE33: Validates {{that the}} Registry table {{is not used}} for data better suited for another table (<b>Class,</b> <b>Extension,</b> Verb, and so on).|$|E
5000|$|Create a new <b>class</b> <b>extension</b> by associating {{the name}} {{generated}} on step 3 with {{the set of}} all substances on the class selected on step 2 ...|$|E
50|$|These three {{properties}} {{show that}} the <b>class</b> of radical <b>extensions</b> is a distinguished <b>class</b> of field <b>extensions.</b>|$|R
5000|$|The <b>class</b> of {{algebraic}} <b>extensions</b> forms {{a distinguished}} <b>class</b> of field <b>extensions,</b> that is, {{the following three}} properties hold: ...|$|R
2500|$|There is a {{bijective}} {{correspondence between}} equivalence <b>classes</b> of <b>extensions</b> ...|$|R
50|$|The IEC 61131-3 {{programming}} language {{is the most}} widely used language for programming PLC & DCS systems. It is not a truly object oriented language, implementing only 1 tenet of OOP (inheritance/subtyping) and not encapsulation or polymorphism. This limits its amenability to automated unit testing and encapsulating of behaviours for <b>class</b> <b>extension.</b>|$|E
50|$|The UCB {{evolved to}} be an anchor to hold {{information}} and states about the device. The UCB currently has five areas used for an external interface: Device <b>Class</b> <b>Extension,</b> UCB Common Extension, UCB Prefix Stub, UCB Common Segment and the UCB Device Dependent Segment. Other areas are internal use only. This information can be read and used to determine information about the device.|$|E
5000|$|Luca Cardelli {{has claimed}} that OOP code is [...] "intrinsically less efficient" [...] than {{procedural}} code, that OOP can {{take longer to}} compile, and that OOP languages have [...] "extremely poor modularity properties with respect to <b>class</b> <b>extension</b> and modification", and tend to be extremely complex. The latter point is reiterated by Joe Armstrong, the principal inventor of Erlang, who is quoted as saying: ...|$|E
40|$|International audienceWe propose method shells, {{which is}} a module system for {{avoiding}} conflicts on customization by language mechanisms such as aspects in AspectJ and open classes in Ruby. These mechanisms allow programmers to customize a library without rewriting original source code but by only describing differences in a separate file. We call these mechanisms destructive <b>class</b> <b>extensions.</b> A problem with destructive <b>class</b> <b>extensions</b> is conflicts on customization. Different customizations may differently modify the same class. To address this problem, we propose a new module system named method shells. With this system, programmers can avoid conflicts since the module system automatically switches a set of customizations {{that has to be}} applied together according to the contexts declared by programmers. We present the idea of this module system and then its formal semantics. We also present an extension of Java that supports method shells...|$|R
40|$|Abstract. <b>Class</b> <b>extensions</b> {{allow for}} a modular {{addition}} of new behavior to an existing class hierarchy. However, the reliance on position-dependent parameters in mainstream programming languages has often {{a negative impact on}} the way new behavior can be specified. This observation has led us to explore the concept of forms, which are first-class extensible records that, in combination with a small set of purely asymmetric operators, provide a core language for an extensible, flexible, and robust software development approach. In this paper, we present a refine-ment of our recent work on a substitution-free lambda calculus with forms. More precisely, we develop the λF@-calculus in which names are replaced with shared forms and parameter passing is modeled using explicit contexts and show, how this calculus can be used to model open classes, a key mechanism for <b>class</b> <b>extensions...</b>|$|R
50|$|The {{school is}} divided into four departments. The Pre-School is co-ed, taking boys and girls from ages three to four. The Junior School is also co-ed for pupils from Years 1-3 (ages five to seven). In the Preparatory School, a {{separate}} Girls' School and Boys' School provide largely single sex <b>classes.</b> <b>Extension</b> <b>classes</b> in Mathematics are the only co-ed classes at this level. The Boys' and Girls' School combine for chapel services, orchestra, assemblies, some sports events, operettas, social functions and share common playgrounds.|$|R
5000|$|Since the kernels of the Artin maps [...] and [...] are [...] and [...] respectively, the {{previous}} formula implies that [...] It follows {{that there is}} the <b>class</b> <b>extension</b> homomorphism [...] and that [...] and the induced Artin transfer [...] are connected by the commutative diagram in Figure 1 via the isomorphisms induced by the Artin maps, that is, we have equality of two composita.|$|E
50|$|A <b>class</b> <b>extension</b> has {{the same}} syntax as a {{category}} declaration with no category name, and the methods and properties declared in it are added directly to the main class. It is mostly used {{as an alternative to}} a category to add methods to a class without advertising them in the public headers, with the advantage that for class extensions the compiler checks that all the privately declared methods are actually implemented.|$|E
5000|$|If {{there exists}} a non-principal ideal [...] (i.e. [...] ) whose {{extension}} ideal in [...] is principal (i.e. for some [...] and [...] ), then we speak about principalization or capitulation in [...] In this case, the ideal [...] and its class [...] are said to principalize or capitulate in [...] This phenomenon is described most conveniently by the principalization kernel or capitulation kernel, that is the kernel [...] of the <b>class</b> <b>extension</b> homomorphism.|$|E
50|$|<b>Extension</b> <b>classes</b> {{are offered}} {{individually}} both evenings and weekends. <b>Extension</b> <b>classes</b> cover screenwriting, film production, video production, film history, film business and distribution, editing, lighting, and audio editing, among others.|$|R
50|$|<b>CLASS</b> VII <b>Extensions</b> - porches, covered ways, conservatories, (less than 30 {{square metres}} floor area).|$|R
5000|$|... #Caption: Screenshot of Gedit with Python, LaTeX and <b>Class</b> Browser <b>extensions,</b> {{displaying}} Inkscape's lorem ipsum extension.|$|R
50|$|C# {{allows a}} class {{definition}} to be split across several source files using a feature called partial classes. Each part must be {{marked with the}} keyword partial. All the parts must {{be presented to the}} compiler as part of a single compilation. Parts can reference members from other parts. Parts can implement interfaces and one part can define a base class. The feature is useful in code generation scenarios (such as user interface (UI) design), where a code generator can supply one part and the developer another part to be compiled together. The developer can thus edit their part without the risk of a code generator overwriting that code at some later time. Unlike the <b>class</b> <b>extension</b> mechanism, a partial class allows circular dependencies among its parts as they are guaranteed to be resolved at compile time. Java has no corresponding concept.|$|E
5000|$|In 1924, {{the state}} highway {{department}} assumed responsibility to maintain all state highways which were previously {{maintained by the}} counties. The following year, state lawmakers vest the department with the authority to acquire right of way, survey, plan, and build highways. By 1926, SH 20 in the new highway system was routed over the previously proposed Highway 20A from Fredericksburg to Austin and then over the proposed Highway 20 to Hempstead as a second class highway, and the route was given a third <b>class</b> <b>extension</b> to Kerrville. By 1928, SH 20 was given an auxiliary route SH 20A from Fredericksburg to a point on the highway between Kerrville and Junction. All of the highway from Fredericksburg to Hempstead was classified as a [...] "secondary federal highway". The portion between Fredericksburg and Kerrville along with the new auxiliary route were classified as [...] "state highways" [...] eligible for state aid only.|$|E
5000|$|The {{commutative}} diagram in {{the previous}} section, which connects the number theoretic <b>class</b> <b>extension</b> homomorphism [...] with the group theoretic Artin transfer , enabled Furtw&auml;ngler to prove the principal ideal theorem by specializing to the situation that [...] is the (first) Hilbert class field of , that is the maximal abelian unramified extension of , and [...] is the second Hilbert class field of , that is the maximal metabelian unramified extension of [...] (and maximal abelian unramified extension of [...] ). Then , , , , [...] and [...] is the commutator subgroup of [...] More precisely, Furtw&auml;ngler showed that generally the Artin transfer [...] from a finite metabelian group [...] to its derived subgroup [...] is a trivial homomorphism. In fact {{this is true even}} if [...] isn't metabelian because we can reduce to the metabelian case by replacing [...] with [...] It also holds for infinite groups provided [...] is finitely generated and [...] It follows that every ideal of [...] extends to a principal ideal of [...]|$|E
40|$|AbstractThe Galois {{group of}} a Galois {{extension}} of local fields with an inseparable residue <b>class</b> field <b>extension</b> has two intertwined filtrations with ramification groups. This note contains some elementary {{results on the}} structure of these filtrations, that are similar to those given by J. -P. Serre in "Corps Locaux," Chap. IV, Sect. 2 (Hermann, Paris, 1962), for the case that the residue <b>class</b> field <b>extension</b> is separable...|$|R
40|$|We {{study how}} a {{discrete}} valuation v {{on a field}} K can be extended to a valuation of a finite separable extension L of K. The ramification theory of extensions of discrete valuations to a finite separable extension is very well established whenever the residue <b>class</b> field <b>extension</b> is separable. This is the so called classical ramification theory. We investigate the classical ramification theory and also the ramification theory of extensions of discrete valuations with an inseparable residue <b>class</b> field <b>extension.</b> We show that some results from classical ramification theory, such as Hilbert's different formula can be modified to be true for extensions of valuations with inseparable residue <b>class</b> field <b>extensions,</b> whereas many other classical results fail to hold...|$|R
25|$|GCC 4.6 {{supports}} {{many new}} Objective-C features, such as declared and synthesized properties, dot syntax, fast enumeration, optional protocol methods, method/protocol/class attributes, <b>class</b> <b>extensions</b> {{and a new}} GNU Objective-C runtime API. It also supports the Go programming language and includes the libquadmath library, which provides quadruple-precision mathematical functions on targets supporting the __float128 datatype. The library is used to provide the REAL(16) type in GNU Fortran on such targets.|$|R
50|$|In the {{mathematical}} field of group theory,an Artin transfer {{is a certain}} homomorphismfrom an arbitrary finite or infinite group to the commutator quotient group of a subgroup of finite index.Originally, such mappings arose as group theoretic counterparts of <b>class</b> <b>extension</b> homomorphismsof abelian extensions of algebraic number fieldsby applying Artin's reciprocity maps to ideal class groupsand analyzing the resulting homomorphisms between quotients of Galois groups.However, independently of number theoretic applications,a partial order on the kernels and targets of Artin transfers has recently {{turned out to be}} compatible withparent-descendant relations between finite p-groups (with a prime number p), which can be visualized in descendant trees.Therefore, Artin transfers provide a valuable tool for the classification of finite p-groupsand for searching and identifying particular groups in descendant trees by looking for patterns defined by the kernels and targets of Artin transfers.These strategies of pattern recognition are useful in purely group theoretic context,as well as for applications in algebraic number theory concerning Galois groups of higher p-class fields and Hilbert p-class field towers.|$|E
40|$|We {{introduce}} {{the concept of}} object functional dependency for object oriented models, and we study consistency, satisfaction and functional implication {{in the context of}} a <b>class</b> <b>extension.</b> We then use functional implication to define the formal semantics of a <b>class</b> <b>extension</b> by a least fixpoint construction. The concepts introduced here are motivated by similar and well known concepts of the relational model. However, their definition {{in the context of a}} <b>class</b> <b>extension</b> requires a "dual" approach to the one used in object oriented models. Namely, instead of considering each object of a <b>class</b> <b>extension</b> associated to a tuple of values over the class attributes, we consider each class attribute associated to a tuple of values over the objects of the <b>class</b> <b>extension.</b> One important aspect of our work is the clear separation between the concepts of consistency and satisfaction, something that the traditional tuples-asfunctions approach of the relational model has not been able to achieve. Ano [...] ...|$|E
40|$|Heterogeneity poses a {{challenge}} to linkage mapping. Here, we apply a latent <b>class</b> <b>extension</b> of Haseman-Elston regression to expression phenotypes with significant evidence of linkage to trans regulators in 14 large pedigrees. We test for linkage, accounting for heterogeneity, and classify individual families as "linked" and "unlinked" {{on the basis of}} their contribution to the overall evidence of linkage...|$|E
40|$|AbstractLet E be an {{elliptic}} curve over Q and let K be a quadratic imaginary field that satisfies the Heegner hypothesis. We study the arithmetic of E over ring <b>class</b> <b>extensions</b> of K, with particular {{focus on the}} case when E has analytic rank at least 2 over Q. We also point out {{an issue in the}} literature regarding generalizing the Gross–Zagier formula, and offer a conjecturally correct formula...|$|R
5000|$|GCC 4.6 {{supports}} {{many new}} Objective-C features, such as declared and synthesized properties, dot syntax, fast enumeration, optional protocol methods, method/protocol/class attributes, <b>class</b> <b>extensions</b> {{and a new}} GNU Objective-C runtime API. It also supports the Go programming language and includes the [...] library, which provides quadruple-precision mathematical functions on targets supporting the [...] datatype. The library is used to provide the [...] type in GNU Fortran on such targets.|$|R
5000|$|By Artin's {{reciprocity}} law, the Artin transfer {{describes the}} principalization of ideal <b>classes</b> in <b>extensions</b> of algebraic number fields.|$|R
