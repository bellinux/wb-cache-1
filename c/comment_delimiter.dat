3|8|Public
5000|$|The generic syntax of {{documentation}} comments {{is to start}} a comment with an extra asterisk after the leading <b>comment</b> <b>delimiter</b> '/*': ...|$|E
50|$|Line {{comments}} either {{start with}} a <b>comment</b> <b>delimiter</b> and continue {{until the end of}} the line, or in some cases, start at a specific column (character line offset) in the source code, and continue {{until the end of the}} line.|$|E
5000|$|Indenting {{lines in}} Fortran 66/77 is significant. The actual {{statement}} is in columns 7 through 72 of a line. Any non-space character in column 6 indicates that this {{line is a}} continuation of the previous line. A [...] in column 1 indicates that this entire line is a comment. Columns 1 though 5 may contain a number which serves as a label. Columns 73 though 80 are ignored and may be used for comments; in the days of punched cards, these columns often contained a sequence number so that the deck of cards could be sorted into the correct order if someone accidentally dropped the cards. Fortran 90 removed the need for the indentation rule and added inline comments, using the [...] character as the <b>comment</b> <b>delimiter.</b>|$|E
5000|$|For {{compatibility}} with some pre-1995 browsers, {{the contents of}} [...] and [...] elements are still sometimes surrounded by <b>comment</b> <b>delimiters.</b>|$|R
25|$|Normally, {{comments}} {{cannot be}} nested in ALGOL 68. This restriction can be circumvented by using different <b>comment</b> <b>delimiters</b> (e.g. use hash only for temporary code deletions).|$|R
5000|$|Some {{programming}} languages employ both {{block and}} line comments with different <b>comment</b> <b>delimiters.</b> For example, C++ has block comments delimited by [...] and [...] that can span multiple lines and line comments delimited by [...] Other languages support only {{one type of}} comment. For example, Ada comments are line comments: they start with [...] and continue {{to the end of}} the line.|$|R
5000|$|C has {{a formal}} grammar {{specified}} by the C standard. Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters [...] and , or (since C99) following [...] {{until the end of}} the line. Comments delimited by [...] and [...] do not nest, and these sequences of characters are not interpreted as <b>comment</b> <b>delimiters</b> if they appear inside string or character literals.|$|R
50|$|Block {{comments}} are generally those that use a delimiter {{to indicate the}} beginning of a <b>comment,</b> and another <b>delimiter</b> to indicate the end of a comment. In this context, whitespace and newline characters are not counted as delimiters.|$|R
5000|$|All lines {{except for}} in-stream input (see below) {{have to begin}} with a slash [...] "", and all lines which the {{operating}} system processes have to begin with two slashes [...] - always starting in the first column. However, there are two exceptions: the delimiter statement and the <b>comment</b> statement. A <b>delimiter</b> statements begins with a slash and an asterisk (...) , and a comment statement in OS JCL begins with a pair of slashes and asterisk (...) or an asterisk in DOS JCL.|$|R
40|$|This {{document}} is {{a section of}} formal elementary number theory leading up to a complete proof of the fundamental theorem of arithmetic. On the way to this result {{a large number of}} simple facts about integer division, prime numbers, greatest common divisors, and the product function, ‚àè_i= 1 ^ma(i), are developed. The entire section is written in the formal logic of PL/CV 2, and the proof was checked by the PL/CV 2 Proof Checker on an IBM 370 / 168. Readers familiar with the syntax of a high level programming language, like PL/I, and accustomed to highly symbolic mathematical proofs should be able to read this document as a specimen of extremely formal and rigorous mathematics. The following remarks about PL/CV 2 notation will simplify reading. 1. The *PROCESS line indicates the beginning of PL/I executable text, the *THEOREM line indicates the beginning of purely declarative text. 2. All proof text is written between PL/I <b>comment</b> <b>delimiters</b> of the form /*/ [...] . */ or /# [...] . #/ depending on context. 3. For the built-in PL/I functions ABS, MOD, SIGN, MAX, MIN, EXP, DIVISION (/) only the properties of the functions are listed, in Section 0 called BUILT-IN FUNCTIONS. No proofs of these properties are supplied (because the operations are provided by the system). Thus proved propositions appear starting in Section 1 (at line 0036). 4. In the listing the negation sign is written ^, thus B ^= 0 reads "B not equal to zero". The PL/I symbol for "or" is the vertical bar, thus line 0037 TRI : B less than 0 |B= 0 |B greater than 0 is labeled by TRI (for trichotomy) and means B is {{less than or equal to}} 0 or greater than 0. The justification [...] . BY ARITH [...] . indicates that the conclusion follows from simple arithmetic reasoning, provided by the system, from the list of hypotheses. 5. Every PL/CV 2 procedure, such as LOG at line 0049, begins with an ASSUME statement, telling what is assumed about the input, and with an ATTAIN statement telling what will be proved about it. Also every procedure is proved to terminate. In the case of recursive procedures, the termination proof begins with the line ARBITRARY (integer variable) WHERE (conditon) (see line 0053). It is proved that this integer variable decreases on any recursive call...|$|R

