47|81|Public
25|$|Direct3D 10.1 is an {{incremental}} update of Direct3D 10.0 which shipped with, and required, Windows Vista Service Pack 1. This release mainly sets {{a few more}} image quality standards for graphics vendors, while giving developers more control over image quality. It also adds support for <b>cube</b> <b>map</b> arrays, separate blend modes per-MRT, coverage mask export from a pixel shader, ability to run pixel shader per sample, access to multi-sampled depth buffers and requires that the video card supports Shader Model 4.1 or higher and 32-bit floating-point operations. Direct3D 10.1 still fully supports Direct3D 10 hardware, {{but in order to}} utilize all of the new features, updated hardware is required.|$|E
5000|$|You {{can also}} convert other {{environmental}} projections into a <b>cube</b> <b>map</b> (e.g. from equirectangular projection to <b>cube</b> <b>map)</b> ...|$|E
50|$|If a new {{object or}} new {{lighting}} is introduced into scene or if some object that {{is reflected in}} it is moving or changing in some manner, then the reflection changes and the <b>cube</b> <b>map</b> must be re-rendered. When the <b>cube</b> <b>map</b> is affixed to an object that moves through the scene then the <b>cube</b> <b>map</b> must also be re-rendered from that new position.|$|E
40|$|Growth of animation’s 3 D {{caused by}} {{progressing}} in computer graph especially technic in environment mapping. This way is very useful in creating an animation becoming real. This technic generally is implementation using application OpenGl. In Environment Mapping has divided into 3 parts which are Paraboloid Mapping, Sphere <b>Mapping,</b> and <b>Cube</b> <b>Mapping.</b> From all this technic {{which is very}} interested the progress by scientist is <b>Cube</b> <b>Mapping.</b> Because of that, this paper will present the differences between <b>Cube</b> <b>Mapping</b> and Dynamic <b>Cube.</b> In this paper {{will focus on the}} explanation about the beginning of <b>Cube</b> <b>Mapping</b> including the development which is done by <b>Cube</b> <b>Mapping</b> up to have characteristic and it is dynamic which is well known as Dynamic <b>Cube</b> <b>Mapping.</b> Beside that, there will be explanation about superiority <b>Cube</b> <b>Mapping</b> and Dynamic <b>Cube</b> <b>Mapping,</b> differences between <b>Cube</b> <b>Mapping</b> and Dynamic <b>Cube</b> <b>Mapping,</b> and the development of <b>Cube</b> <b>Mapping</b> becoming Dynamic <b>Cube</b> <b>Mapping</b> which is generally using application from OpenGl and conclusion from <b>Cube</b> <b>Mapping</b> and Dynamic <b>Cube</b> <b>Mapping.</b> With this paper, hope for we know about ways of environment <b>mapping</b> especially Dynamic <b>Cube</b> <b>Mapping</b> and then we can implement this ways into all of objects to create the high art’s creation...|$|R
40|$|Existing {{environment}} mapping techniques include spherical <b>mapping</b> and <b>cube</b> <b>mapping.</b> These {{techniques have}} inherent flaws that cause sampling issues and aliasing. Continuous <b>cube</b> <b>mapping</b> is offered {{as an alternative}} environment mapping approach that effectively folds the cube onto the sphere, providing a better parameterization of <b>cube</b> <b>mapping.</b> We provide a hardware implementation. 1...|$|R
50|$|<b>Cube</b> <b>mapping</b> {{and other}} {{polyhedron}} mappings address the severe distortion of sphere <b>maps.</b> If <b>cube</b> <b>maps</b> {{are made and}} filtered correctly, they have no visible seams, {{and can be used}} independent of the viewpoint of the often-virtual camera acquiring the <b>map.</b> <b>Cube</b> and other polyhedron maps have since superseded sphere maps in most computer graphics applications, with the exception of acquiring image-based lighting. Image-based Lighting can be done with parallax-corrected <b>cube</b> <b>maps.</b>|$|R
5000|$|... #Caption: This {{illustration}} {{shows how}} a <b>cube</b> <b>map</b> is indexed and addressed.|$|E
5000|$|Advanced texture targets such as texture buffers, multisample 2D array and <b>cube</b> <b>map</b> arrays.|$|E
50|$|Basic {{environment}} mapping uses {{a static}} <b>cube</b> <b>map</b> - although the object {{can be moved}} and distorted, the reflected environment stays consistent. However, a <b>cube</b> <b>map</b> texture can be consistently updated to represent a dynamically changing environment (for example, trees swaying in the wind). A simple yet costly way to generate dynamic reflections, involves building the cube maps at runtime for every frame. Although this is far less efficient than static mapping because of additional rendering steps, it can still be performed at interactive rates.|$|E
5000|$|<b>Cube</b> <b>mapping</b> {{was first}} {{proposed}} in 1986 by Ned Greene in his paper “Environment Mapping and Other Applications of World Projections”, {{ten years after}} environment mapping was first put forward by Jim Blinn and Martin Newell. However, hardware limitations {{on the ability to}} access six texture images simultaneously made it infeasible to implement <b>cube</b> <b>mapping</b> without further technological developments. This problem was remedied in 1999 with the release of the Nvidia GeForce 256. Nvidia touted <b>cube</b> <b>mapping</b> in hardware as “a breakthrough image quality feature of GeForce 256 that ... will allow developers to create accurate, real-time reflections. Accelerated in hardware, <b>cube</b> environment <b>mapping</b> will free up the creativity of developers to use reflections and specular lighting effects to create interesting, immersive environments.” Today, <b>cube</b> <b>mapping</b> is still used in a variety of graphical applications as a favored method of environment mapping.|$|R
40|$|This paper {{contains}} {{an analysis of}} <b>Cube</b> <b>Mapping</b> OpenGL which has been studied by previous researchers. <b>Cube</b> <b>Mapping</b> is an environment mapping method {{in addition to the}} sphere mapping and is currently widely used due to the efficiency and simplicity to be implemented. <b>Cube</b> <b>Mapping</b> has its own advantages compared to its predecessor, Sphere mapping, that is the ability to provide visual data in the form of 6 different images as if attached to the 6 sides of a cube square. This will not cause distortion effect on the texture image as often happens in the Sphere Mapping if the modeler was careless. In addition, image texture on <b>Cube</b> <b>Mapping</b> can be more detailed and realistic in a virtual environment...|$|R
50|$|<b>Cube</b> <b>mapping</b> is {{preferred}} over other methods of environment mapping {{because of its}} relative simplicity. Also, <b>cube</b> <b>mapping</b> produces results {{that are similar to}} those obtained by ray tracing, but is much more computationally efficient - the moderate reduction in quality is compensated for by large gains in efficiency.|$|R
50|$|Cube maps can {{be useful}} for {{modelling}} outdoor illumination accurately. Simply modelling sunlight as a single infinite light oversimplifies outdoor illumination and results in unrealistic lighting. Although plenty of light does come from the sun, the scattering of rays in the atmosphere causes the whole sky {{to act as a}} light source (often referred to as skylight illumination). However, by using a <b>cube</b> <b>map</b> the diffuse contribution from skylight illumination can be captured. Unlike environment maps where the reflection vector is used, this method accesses the <b>cube</b> <b>map</b> based on the surface normal vector to provide a fast approximation of the diffuse illumination from the skylight. The one downside to this method is that computing cube maps to properly represent a skylight is very complex; one recent process is computing the spherical harmonic basis that best represents the low frequency diffuse illumination from the <b>cube</b> <b>map.</b> However, a considerable amount of research has been done to effectively model skylight illumination.|$|E
50|$|Multiple texture images may be {{combined}} in texture atlases or array textures to reduce state changes for modern hardware. (They may be considered a modern evolution of tile map graphics). Modern hardware often supports <b>cube</b> <b>map</b> textures with multiple faces for environment mapping.|$|E
5000|$|Mark VandeWettering took M. C. Escher's famous self-portrait Hand with Reflecting Sphere and {{reversed}} the mapping to obtain these <b>cube</b> <b>map</b> images: left, right, up, down, back, front. Here is a three.js demo using these images (best viewed in wide browser window, and {{may need to}} refresh page to view demo):https://web.archive.org/web/20140519021736/http://threejs.org/examples/webgl_materials_cubemap_escher.html ...|$|E
5000|$|A large set of free <b>cube</b> <b>maps</b> for experimentation:http://www.humus.name/index.php?page=Textures ...|$|R
50|$|In the {{majority}} of cases, <b>cube</b> <b>mapping</b> is preferred over the older method of sphere mapping because it eliminates {{many of the problems}} that are inherent in sphere mapping such as image distortion, viewpoint dependency, and computational inefficiency. Also, <b>cube</b> <b>mapping</b> provides a much larger capacity to support real-time rendering of reflections relative to sphere mapping because the combination of inefficiency and viewpoint dependency severely limits the ability of sphere mapping to be applied when there is a consistently changing viewpoint.|$|R
50|$|Mapping Maestro - {{rendering}} algorithms for embedded graphics systems {{based on}} the texture mapping (specifically bump <b>mapping,</b> <b>cube</b> <b>mapping,</b> multitexturing etc.) and procedural texturing reduce contents size and memory bandwidth requirements an by that improves overall application performance.|$|R
50|$|In {{computer}} graphics, cube mapping is {{a method}} of environment mapping that uses the six faces of a cube as the map shape. The environment is projected onto the sides of a cube and stored as six square textures, or unfolded into six regions of a single texture. The <b>cube</b> <b>map</b> is generated by first rendering the scene six times from a viewpoint, with the views defined by a 90 degree view frustum representing each cube face.|$|E
50|$|The {{vertices}} of a cube can {{be grouped}} {{into two groups}} of four, each forming a regular tetrahedron; more generally this {{is referred to as}} a demicube. These two together form a regular compound, the stella octangula. The intersection of the two forms a regular octahedron. The symmetries of a regular tetrahedron correspond to those of a cube which map each tetrahedron to itself; the other symmetries of the <b>cube</b> <b>map</b> the two to each other.|$|E
50|$|Typical uses of a {{geometry}} shader include point sprite generation, geometry tessellation, shadow volume extrusion, {{and single}} pass rendering to a <b>cube</b> <b>map.</b> A typical real-world {{example of the}} benefits of geometry shaders would be automatic mesh complexity modification. A series of line strips representing control points for a curve are passed to the geometry shader and depending on the complexity required the shader can automatically generate extra lines each of which provides a better approximation of a curve.|$|E
5000|$|... greatly {{enhanced}} texturing functionality including guaranteed {{support for}} floating point textures, 3D textures, depth textures, vertex textures, NPOT textures, R/RG textures, immutable textures, 2D array textures, swizzles, LOD and mip level clamps, seamless <b>cube</b> <b>maps</b> and sampler objects, ...|$|R
5000|$|... #Caption: The {{lower left}} image shows a {{scene with a}} {{viewpoint}} marked with a black dot. The upper image shows the net of the <b>cube</b> <b>mapping</b> as seen from that viewpoint, and the lower right image shows the cube superimposed on the original scene.|$|R
40|$|This paper {{focuses on}} methods of {{rendering}} shadows cast by point light sources. The {{goal is to}} summarize {{advantages and disadvantages of}} methods based on shadow mapping. We compare the traditional approach that exploits <b>cube</b> <b>maps</b> with the Dual–Paraboloid mapping. All of the methods are implemented on the latest hardware and they exploit capabilities of current GPUs. We also implemented optimization techniques which decrease the computational time. We examine the time the methods spent in particular rendering passes and we evaluate their overall performance. Finally, we conclude the comparison with some recommendations for typical applications in which the methods of interest can be exploited. We also suggest some direction of future investigation. Keywords: shadow mapping, rendering, GPU, performance, <b>cube</b> <b>maps,</b> Dual–Paraboloid mappin...|$|R
5000|$|Spherical {{harmonic}} (SH) {{lighting is}} a family of real-time rendering techniques that can produce highly realistic shading and shadowing with comparatively little overhead. All SH lighting techniques involve replacing parts of standard lighting equations with spherical functions that have been projected into frequency space using the spherical harmonics as a basis. To take a simple example, a <b>cube</b> <b>map</b> used for environment mapping might be reduced to just nine SH coefficients if preserving high-frequency detail is not a concern.|$|E
50|$|Conversely, cube mapping {{requires}} {{only a single}} render pass, and due to its simple nature, is very easy for developers to comprehend and generate. Also, cube mapping uses the entire resolution of the texture image, compared to sphere and paraboloid mappings, which also allows it to use lower resolution images {{to achieve the same}} quality. Although handling the seams of the <b>cube</b> <b>map</b> is a problem, algorithms have been developed to handle seam behavior and result in a seamless reflection.|$|E
50|$|Generally, cube mapping {{uses the}} same skybox that is used in outdoor renderings. Cube-mapped {{reflection}} is done by determining the vector that the object is being viewed at. This camera ray is reflected about the surface normal of where the camera vector intersects the object. This results in the reflected ray which is then passed to the <b>cube</b> <b>map</b> to get the texel which provides the radiance value used in the lighting calculation. This creates {{the effect that the}} object is reflective.|$|E
50|$|Unfortunately, this {{technique}} does not scale well when multiple reflective objects are present. A unique dynamic environment map is usually required for each reflective object. Also, further complications are added if reflective objects can reflect each other - dynamic <b>cube</b> <b>maps</b> can be recursively generated approximating the effects normally generated using raytracing.|$|R
40|$|This work {{discusses}} shadowing methods, analyses {{them and}} describes implementation in DirectX 11 API. Theoretical part describes historical evolution of shadow usage in 3 D applications and also analyzes shadowing algorithms. This work compares 2 variants of shadow mapping algorithm for omnidirectional lights, based on <b>cube</b> <b>mapping</b> and paraboloid projection, on demo application using quality, performance and implementation aspects...|$|R
40|$|International audienceThis paper {{proposes a}} new quasi-involutive {{lightweight}} design called CUBE cipher family. The design has been carefully {{chosen to be}} easily masked. The basic building block is a cube of size n × n × n on which are applied SPN transformations followed by a <b>cube</b> <b>mapping.</b> We analyze the proposals from a security {{point of view and}} provide a full hardware implementation analysis...|$|R
50|$|Another {{application}} {{which found}} widespread use in video games is projective texture mapping. It relies on cube maps to project images of an environment onto the surrounding scene; for example, a point light source {{is tied to}} a <b>cube</b> <b>map</b> which is a panoramic image shot from inside a lantern cage or a window frame through which the light is filtering. This enables a game developer to achieve realistic lighting without having to complicate the scene geometry or resort to expensive real-time shadow volume computations.|$|E
50|$|Direct3D 10.1 is an {{incremental}} update of Direct3D 10.0 which shipped with, and required, Windows Vista Service Pack 1. This release mainly sets {{a few more}} image quality standards for graphics vendors, while giving developers more control over image quality. It also adds support for <b>cube</b> <b>map</b> arrays, separate blend modes per-MRT, coverage mask export from a pixel shader, ability to run pixel shader per sample, access to multi-sampled depth buffers and requires that the video card supports Shader Model 4.1 or higher and 32-bit floating-point operations. Direct3D 10.1 still fully supports Direct3D 10 hardware, {{but in order to}} utilize all of the new features, updated hardware is required.|$|E
50|$|Cube maps {{provide a}} fairly {{straightforward}} and efficient solution to rendering stable specular highlights. Multiple specular highlights can be encoded into a <b>cube</b> <b>map</b> texture, which {{can then be}} accessed by interpolating across the surface's reflection vector to supply coordinates. Relative to computing lighting at individual vertices, this method provides cleaner results that more accurately represent curvature. Another advantage to this method is that it scales well, as additional specular highlights can be encoded into the texture at no increase {{in the cost of}} rendering. However, this approach is limited in that the light sources must be either distant or infinite lights, although fortunately this is usually the case in CAD programs.|$|E
50|$|Twinity uses {{next-generation}} texturing {{technologies to}} deliver a graphically up-to-date visual experience that {{can be compared to}} the latest game releases in the industry. This includes such engine features as normal, specular and <b>cube</b> <b>maps.</b> Screen space ambient occlusion and glow shader effects finish the final look in the post-rendering. Twinity uses 3D mapping data by Tele Atlas, which makes the virtual buildings resemble their look in the real world.|$|R
50|$|Skyboxes and skydomes are {{methods used}} to easily create a {{background}} to make a game level look bigger than it really is. If the level is enclosed in a cube, the sky, distant mountains, distant buildings, and other unreachable objects are rendered onto the cube's faces using a technique called <b>cube</b> <b>mapping,</b> thus creating the illusion of distant three-dimensional surroundings. A skydome employs the same concept but uses a sphere or hemisphere instead of a cube.|$|R
50|$|A skybox is {{a method}} of {{creating}} backgrounds to make a computer and video games level look bigger than it really is. When a skybox is used, the level is enclosed in a cuboid. The sky, distant mountains, distant buildings, and other unreachable objects are projected onto the cube's faces (using a technique called <b>cube</b> <b>mapping),</b> thus creating the illusion of distant three-dimensional surroundings. A skydome employs the same concept but uses either a sphere or a hemisphere instead of a cube.|$|R
