82|2486|Public
2500|$|Starting {{with the}} 2012–13 rugby season, the IRB issued trial law amendments, {{one of which}} {{affected}} the <b>call</b> <b>sequence.</b> The referee continued to start with [...] "crouch" [...] and [...] "touch," [...] but then issued the command [...] "set," [...] which replaced [...] "engage" [...] as the indication that the packs may push forward. [...] "Pause" [...] was removed in order {{to speed up the}} scrum and to minimize resets due to collapsed scrums.|$|E
5000|$|In {{a strict}} {{functional}} language the argument to f is expanded beforehand, yielding an infinite <b>call</b> <b>sequence,</b> ...|$|E
50|$|The TPC was {{responsible}} for <b>call</b> <b>sequence</b> and state control. It received signalling inputs collected from peripheral processors (see MXU, RLU, RSU, and TCU below) and sent control information back to the peripheral processors.|$|E
40|$|With the {{evolution}} of new software technologies, the requirements for automated testing {{are becoming more and}} more stringent. With increasing size of software projects, manual testing is becoming less efficient. For automated testing one of the most important question is, what to focus upon while testing? For a large number of functions along with large number of possible <b>call</b> <b>sequences,</b> it is very hard to generate test cases that cover all possible paths of control flow. By finding patterns in the <b>calling</b> <b>sequences</b> we will be able to identify more defects by focusing our testing efforts on those patterns. In this paper, we have described our work on tracing <b>call</b> <b>sequences</b> using Aspect Oriented Programming methodology and discovering those patterns in <b>call</b> <b>sequences</b> using data mining techniques...|$|R
40|$|AMPLE locates likely failure-causing classes by {{comparing}} method <b>call</b> <b>sequences</b> of passing and failing runs. A difference in method <b>call</b> <b>sequences,</b> such as multiple deallocation {{of the same}} resource, is likely {{to point to the}} erroneous class. In this paper, we describe the implementation of AMPLE as well as its evaluation. 1...|$|R
5000|$|The {{procedure}} <b>calling</b> <b>sequence</b> {{works as}} follows: The call is introduced with ...|$|R
50|$|Echolocation is {{done with}} FM singles between 60 and 24 kHz, with a 5-8 {{millisecond}} duration. The <b>call</b> <b>sequence</b> occurs every 115 milliseconds on average, with approximately 8-10 signals per second. Signal range is between 5 and 21 meters.|$|E
50|$|The <b>call</b> <b>sequence</b> can be {{implemented}} by a sequence of ordinary instructions (an approach still used in reduced instruction set computing (RISC) and very long instruction word (VLIW) architectures), but many traditional machines designed since the late 1960s have included special instructions for that purpose.|$|E
50|$|Like other gibbons, {{hoolock gibbon}} pairs produce a loud, {{elaborate}} song, usually sung as a duet {{from the forest}} canopy, in which younger individuals of the family group may join in. The song includes an introductory sequence, an organising sequence, and a great <b>call</b> <b>sequence,</b> with the male also contributing to the latter (unlike in some other gibbon species).|$|E
40|$|In this paper, {{we propose}} a "bag of system calls" {{representation}} for intrusion detection of system <b>call</b> <b>sequences</b> and describe misuse detection results with widely used machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques and show experimental results. The {{results show that the}} machine learning techniques on simple "bag of system calls" representation of system <b>call</b> <b>sequences</b> is effective and often perform better than those approaches that use foreign contiguous subsequences for detecting intrusive behaviors of compromised processes...|$|R
50|$|MTS {{uses the}} {{standard}} S-type and, less often, R-type <b>calling</b> <b>sequences</b> used in OS/360.|$|R
5000|$|Generally, [...] can be <b>called</b> -Fibonacci <b>sequence,</b> and [...] can be <b>called</b> -Lucas <b>sequence.</b>|$|R
5000|$|Starting {{with the}} 2012-13 rugby season, the IRB issued trial law amendments, {{one of which}} {{affected}} the <b>call</b> <b>sequence.</b> The referee continued to start with [...] "crouch" [...] and [...] "touch," [...] but then issued the command [...] "set," [...] which replaced [...] "engage" [...] as the indication that the packs may push forward. [...] "Pause" [...] was removed in order {{to speed up the}} scrum and to minimize resets due to collapsed scrums.|$|E
50|$|The Little Pied Bat hunts and {{perceives}} {{its surrounding}} by emitting short pulses of high frequency sounds and interpreting the returning echoes. This technique {{is a unique}} adaptation called echolocation in 1944. A <b>call</b> <b>sequence</b> consists of a train of pulses, with the gaps between each pulse controlled by the bat. The call can vary due to behaviour, age, sex or hunting strategy. Different bat species will emit different calls, and this {{is thought to be}} a reflection of their morphology and habitat use.The Little Pied bat uses pulses with an sR shape pulse, refer to image on the left 'Echolocation Shapes of bats'.|$|E
5000|$|Expressions can use {{a variety}} of {{built-in}} operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next [...] "sequence point"; sequence points include the end of each expression statement, and the entry to and return from each function <b>call.</b> <b>Sequence</b> points also occur during evaluation of expressions containing certain operators ( [...] , , [...] and the comma operator). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages.|$|E
50|$|When , this <b>sequence</b> is <b>called</b> -Fibonacci <b>sequence,</b> for example, Pell <b>sequence</b> is also <b>called</b> 2-Fibonacci <b>sequence.</b>|$|R
40|$|International audienceMPI- 3 provide {{functions}} for non-blocking collectives. To help programmers introduce non-blocking collectives to existing MPI programs, we improve the PARCOACH tool for checking correctness of MPI <b>call</b> <b>sequences.</b> These enhancements focus on correct <b>call</b> <b>sequences</b> of all flavor of collective calls, {{and on the}} presence of completion calls for all non-blocking communications. The evaluation shows an overhead under 10 % of original compilation time...|$|R
40|$|Abstract. In this paper, {{we propose}} a “bag of system calls ” {{representation}} for intrusion detection in system <b>call</b> <b>sequences</b> and describe misuse and anomaly detection results with standard machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques for misuse detection and show experimental results on anomaly detection. The results show that standard machine learning and clustering techniques on simple “bag of system calls ” representation of system <b>call</b> <b>sequences</b> is effective and often performs better than those approaches that use foreign contiguous subsequences in detecting intrusive behaviors of compromised processes. ...|$|R
5000|$|Starting {{with the}} 2012/2013 rugby season the International Rugby Board has issued trial law amendments, {{one of which}} affects the <b>call</b> <b>sequence.</b> The referee will {{continue}} to start with [...] "crouch" [...] and [...] "touch," [...] but will now issue the command [...] "set," [...] which replaces [...] "engage" [...] as the indication that the packs may push forward. [...] "Pause" [...] has been removed in order {{to speed up the}} scrum and to minimize resets due to collapsed scrums. The command to [...] "touch" [...] was not used before 2007. Instead, the referee called [...] "crouch and hold", at which time each pack crouched and held that position before the referee gave the command to [...] "engage". Starting in 2013/2014 [...] "touch" [...] has been replaced with [...] "bind".|$|E
5000|$|Tail calls can be {{implemented}} without adding a new stack frame to the call stack. Most of {{the frame of the}} current procedure is no longer needed, and can be replaced by the frame of the tail call, modified as appropriate (similar to overlay for processes, but for function calls). The program can then jump to the called subroutine. Producing such code instead of a standard <b>call</b> <b>sequence</b> is called tail call elimination. Tail call elimination allows procedure calls in tail position to {{be implemented}} as efficiently as goto statements, thus allowing efficient structured programming. In the words of Guy L. Steele, [...] "in general, procedure calls may be usefully thought of as GOTO statements which also pass parameters, and can be uniformly coded as code JUMP instructions." ...|$|E
5000|$|In {{contrast}} to CQD, which was sent as three separate letters with spaces between each letter, the SOS distress call {{has always been}} transmitted as a continuous sequence of dits and dahs, and not as individual letters. There was no problem as long as operators were aware that [...] "SOS" [...] was technically just a convenient way for remembering the proper sequence of the distress signal's total of nine dits and dahs. In later years, the number of special Morse symbols increased. In order to designate the proper sequence of dits and dahs for a long special symbol, the standard practice is to list alphabetic characters that contain the same dits and dahs in the same order, with a bar atop the character sequence to indicate that {{there should not be}} any internal spaces in the transmission. Thus, under the modern notation, the distress signal becomes SOS. (In International Morse Code, VTB, IJS, VGI, and SMB, among others, would also correctly translate into the [...] distress <b>call</b> <b>sequence,</b> but traditionally only SOS is used.) ...|$|E
5000|$|... {{a way to}} {{interface}} to machine language code, which could be passed parameters using the BASIC09 <b>calling</b> <b>sequence</b> ...|$|R
50|$|Most {{methods for}} numerically solving ODEs require only the {{evaluation}} of derivatives for chosen values of the variables, so systems like MATLAB include implementations of several methods all sharing the same <b>calling</b> <b>sequence.</b> Users can try different methods by simply changing {{the name of the}} function called. The Parker-Sochacki method requires more work to put the equations into the proper form, and cannot use the same <b>calling</b> <b>sequence.</b>|$|R
40|$|Abstract — In this paper, {{we propose}} a “bag of system calls ” {{representation}} for intrusion detection in system <b>call</b> <b>sequences</b> and describe misuse and anomaly detection results with standard machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques for misuse detection and show experimental results on anomaly detection. The results show that standard machine learning and clustering techniques on simple “bag of system calls” representation of system <b>call</b> <b>sequences</b> is effective and often performs better than those approaches that use foreign contiguous subsequences in detecting intrusive behaviors of compromised processes. I...|$|R
40|$|AbstractA process {{oriented}} {{intrusion detection}} algorithm based on Probabilistic Automaton with No Final probabilities (NFPA) is introduced, system <b>call</b> <b>sequence</b> of process {{is used as}} the source data. By using information in system <b>call</b> <b>sequence</b> of normal process and system <b>call</b> <b>sequence</b> of anomaly process, the anomaly detection and the misuse detection are efficiently combined. Experiments show better performance of our algorithm compared to the classical algorithm in this field...|$|E
40|$|To {{dynamically}} capture an application’s control flow, {{we propose}} <b>call</b> <b>sequence</b> sets as a light-weight abstraction. Unlike prior approaches based on grammars or trees, <b>call</b> <b>sequence</b> sets {{are easy to}} aggregate and compare, which facilitates incremental construction and comparison of control flow within and across program runs. ...|$|E
40|$|FIGURE 7. (A) Complete {{waveform}} of {{the recorded}} <b>call</b> <b>sequence</b> for Platymantis sulcatus, BPBM 22189, from 9. 0 km NNW Marmar, East New Britain Province, Papua New Guinea; recorded 23 Feb 2005 at 2145 h, air temperature 21. 2 ºC, (B), waveform {{of the last}} recorded call group of BPBM 22189, (C) complete waveform of the recorded <b>call</b> <b>sequence</b> of BPBM 22192 from 11. 3 km NNW Marmar, East New Britain Province, Papua New Guinea; recorded 0 2 March 2005 at 1835 h, air temperature 22. 6 ºC...|$|E
40|$|In this paper, {{we propose}} a "bag of system calls 2 ̆ 72 ̆ 7 {{representation}} for intrusion detection in system <b>call</b> <b>sequences</b> and describe misuse and anomaly detection results with standard machine learning techniques on University of New Mexico (UNM) and MIT Lincoln Lab (MIT LL) system <b>call</b> <b>sequences</b> with the proposed representation. With the feature representation as input, we compare {{the performance of}} several machine learning techniques for misuse detection and show experimental results on anomaly detection. The results show that standard machine learning and clustering techniques on simple "bag of system calls 2 ̆ 72 ̆ 7 representation of system <b>call</b> <b>sequences</b> is effective and often performs better than those approaches that use foreign contiguous subsequences in detecting intrusive behaviors of compromised processes...|$|R
5000|$|Mock - A mock is {{specified}} {{by an individual}} test case to validate test-specific behavior, checking parameter values and <b>call</b> <b>sequencing.</b>|$|R
40|$|AMPLE locates likely failure-causing classes by {{comparing}} method <b>call</b> <b>sequences</b> of passing and failing runs. A difference in method <b>call</b> <b>sequences,</b> such as multiple deallocation {{of the same}} resource, is likely {{to point to the}} erroneous class. Such sequences can be collected from arbitrary Java programs at low cost; comparing object-specific sequences predicts defects better than simply comparing coverage. AM-PLE comes as a plug-in for the Java IDE Eclipse that is automatically invoked as soon as a JUnit test fails...|$|R
40|$|Abstract. Formal {{method is}} a means to verify the {{reliability}} and safety of concurrent systems. Formal verification of model which automatically extracted from concurrent system built from high level language is a hot research topic {{in the field of}} model checking technology. With the focus on potential run time problems (deadlocks, memory leaks, the boundary data loss and other run-time errors) result from abnormal socket function <b>call</b> <b>sequence,</b> we analyze the sequence structure of the socket program and construct the Promela model of socket functions through the description of message data structures and channels, as well as define mapping rules of socket function to Promela. The socket function <b>call</b> <b>sequence</b> extraction algorithm and target Promela model generation algorithm are proposed by using linear temporal logic (LTL) to describe the property the socket function <b>call</b> <b>sequence.</b> A socket communication program analysis system has been constructed. The experiment result shows that the system can detect the potential run time problems of socket program effectively...|$|E
30|$|As modeled in Section Semantic {{model of}} attack, an attack {{is a set}} of {{operations}} which the attacker performs to achieve a certain objective, and it is composed of 5 essential elements. ICCG retains almost all program information, and we can extract a number of call sequences from it. By checking each <b>call</b> <b>sequence,</b> we can recognize actions which are attack related, identify the trigger of it, and perform data flow analysis on the <b>call</b> <b>sequence.</b> Hence, we could find a mapping from the attach model to the ICCG, which means that ICCG contains sufficient information to detect an attack inside.|$|E
40|$|State Machine Language (AsmL). Our {{environment}} supports semi-automatic parameter generation, <b>call</b> <b>sequence</b> {{generation and}} conformance testing. We outline {{the usage of}} the environment by an example, discuss its underlying technologies, and report on some applications conducted in the Microsoft environment. ...|$|E
50|$|The {{following}} code snippets {{create an}} instance foo of class Foo, and invoke its method hello. For each programming language, normal and reflection-based <b>call</b> <b>sequences</b> are shown.|$|R
50|$|Clips can {{be edited}} {{together}} in timelines <b>called</b> <b>sequences.</b> Sequences can be nested inside other sequences, {{so that a}} filter or transition {{can be applied to}} the grouped clips.|$|R
40|$|Modern {{programming}} frameworks {{come with}} large libraries, with diverse {{applications such as}} for matching regular expressions, parsing XML files and sending email. Programmers often use search engines such as Google and Bing to learn about existing APIs. In this paper, we describe SWIM, a tool which suggests code snippets given API-related natural language queries such as "generate md 5 hash code". We translate user queries into the APIs of interest using clickthrough data from the Bing search engine. Then, based on patterns learned from open-source code repositories, we synthesize idiomatic code describing {{the use of these}} APIs. We introduce structured <b>call</b> <b>sequences</b> to capture API-usage patterns. Structured <b>call</b> <b>sequences</b> are a generalized form of method <b>call</b> <b>sequences,</b> with if-branches and while-loops to represent conditional and repeated API usage patterns, and are simple to extract and amenable to synthesis. We evaluated SWIM with 30 common C# API-related queries received by Bing. For 70...|$|R
