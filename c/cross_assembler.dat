18|11|Public
25|$|A <b>cross</b> <b>{{assembler}}</b> (see also cross compiler) is an assembler that is run on {{a computer}} or operating system (the host system) of a different type from the system on which the resulting code is to run (the target system). Cross-assembling facilitates the development of programs for systems {{that do not have}} the resources to support software development, such as an embedded system. In such a case, the resulting object code must be transferred to the target system, either via read-only memory (ROM, EPROM, etc.) or a data link using an exact bit-by-bit copy of the object code or a text-based representation of that code, such as Motorola S-record or Intel HEX.|$|E
5000|$|Dr. Dobb's {{published}} One-Der a 32-bit TTA in Verilog with {{a matching}} <b>cross</b> <b>assembler</b> and Forth compiler.|$|E
50|$|ASxxxx <b>Cross</b> <b>Assembler</b> (part of the Small Device C Compiler project): GPL: several target {{instruction}} sets including Intel 8051, Zilog Z80, Freescale 68HC08, PIC microcontroller.|$|E
50|$|The {{programmer}} usually edits and compiles the embedded system's code on {{the host}} system, as well. The host system will have special compilers that produce executable code for the embedded system, termed cross compilers or <b>cross</b> <b>assemblers.</b>|$|R
5000|$|Software {{development}} on the Commodore 64 never really stopped. There are many tools available today, including IDEs such as CBM prg Studio, Relaunch64, and WUDSN IDE, which is a plug-in for the open source Eclipse IDE. Along with small C compilers such as cc65, there are many <b>assemblers</b> and <b>cross</b> <b>assemblers</b> to be used on modern day PCs: ...|$|R
40|$|Microprocessor support hardware, software, and <b>cross</b> <b>assemblers</b> {{relating}} to the Motorola 6800 and 6809 process systems were developed. Pinter controller and intelligent CRT development are discussed. The user's manual, design specifications for the MC 6809 version of the intelligent printer controller card, and a 132 -character by 64 -line intelligent CRT display system using a Motorola 6809 MPU, and a one-line assembler and disassembler are provided...|$|R
50|$|STRETCH Assembly Program (STRAP) was the {{assembler}} for the IBM 7030 Stretch computer. The {{first version}} (STRAP-1) was a subset <b>cross</b> <b>assembler</b> that {{ran on the}} IBM 704, IBM 709, and IBM 7090 computers. The final version (STRAP-2) ran natively.|$|E
5000|$|C64List by Jeff Hoag {{is both a}} <b>cross</b> <b>assembler</b> and {{cross-platform}} BASIC editor/tokenizer {{that allows}} developers to write mixed BASIC/assembly programs in a text file on a PC and compile it into a single [...]prg file that can be executed on an actual C64 or emulator.|$|E
50|$|Software {{developed}} by Psion {{as part of}} the Organiser I project and application software after its launch was written in 6301 assembler language, in POPL, and in other custom-designed languages. Assembler language development at Psion itself was carried out using cross-development tools, including a <b>cross</b> <b>assembler</b> and linker, all of which ran on a DEC VAX.|$|E
50|$|The {{company was}} founded {{to expand the}} {{microcomputer}} products from Digicom, a company formed by Richard in 1978. Paul joined in 1979. The Digicom software programs ran on the CP/M operating system using the Intel 8080, 8085 and later the 8086, Zilog Z80 and the Z8000. The company’s early products included Pascal/M, and ACT - a set of <b>cross</b> <b>assemblers</b> including one for the Atari (6502) and the Commodore Pet.|$|R
40|$|This course {{introduces}} {{students to}} small microprocessor-based systems, {{with an emphasis}} on embedded system hardware and software design. Topics will include microprocessor architecture and structure, with an overview of 8 - 16 - and 32 -bit systems, assembly language programming and the use of high-level languages. Basic input/output including parallel communications with and without handshaking and serial protocols. Hardware and software timing. Using interrupts and exceptions. Overview of single-chip microprocessors and controllers {{with an emphasis on}} the Freescale HCS 12. The internal structure and design of peripheral devices. Memory system design and analysis. The use and structure of development tools such as (<b>cross)</b> <b>assemblers</b> or compilers, monitor programs, simulators, emulators, etc...|$|R
5000|$|In {{these early}} days of the company, and before the {{introduction}} of the IBM PC and MS-DOS, Sorcim used Godbout S100 bus CP/M machines for development; these machines were fast and the people at Godbout were competent hardware developers. Bill Godbout {{was one of the first}} commercial accounts for Sorcim, supporting the company’s <b>cross</b> <b>assemblers</b> and Pascal/M. In fact at one time Godbout helped relieve a short-term cash flow problem by doing a one-time buy of development tool products. [...] "Bill was one of those people who always provided you an honest opinion (sometimes to the dismay of Sorcim managers) and great Friday lunch meetings." ...|$|R
50|$|The N8VEM {{boards are}} {{designed}} with the free KiCad Electronic design automation (EDA) toolset. Printed circuit board routing provided by FreeRouting.net. Software is developed in Z80/8085 assembly language using the MS-DOS Telemark <b>Cross</b> <b>Assembler</b> program (TASM), {{as well as the}} open source Small Device C Compiler. A major design goal is to use freely available tools to the maximum extent possible. The printed circuit board design is supplemented using component libraries available at KiCad Libraries, specifically the Zilog Z80 CPU and Intel 8255 PPI chips.|$|E
50|$|Synertek sold ROMs {{which could}} be {{installed}} to add the BASIC programming language or a Resident Assembler/Editor (RAE). Synertek contracted with a company called Eastern House Software to port their Macro Assembler/Editor (MAE) into an 8 kB ROM. The author of MAE, RAE, and another version sold by Skyles Electric Works was Carl Moser. MAE was sold in various forms {{not only for the}} SYM-1 but also for other 6502-based computers including Commodore, Atari, KIM, and Apple. Other forms of MAE included a <b>cross</b> <b>assembler</b> for 6800 and 8085—and an offering of these cross assemblers was planned for RAE.|$|E
5000|$|A <b>cross</b> <b>{{assembler}}</b> (see also cross compiler) is an assembler that is run on {{a computer}} or operating system (the host system) of a different type from the system on which the resulting code is to run (the target system). Cross-assembling facilitates the development of programs for systems {{that do not have}} the resources to support software development, such as an embedded system. In such a case, the resulting object code must be transferred to the target system, either via read-only memory (ROM, EPROM, etc.) or a data link using an exact bit-by-bit copy of the object code or a text-based representation of that code, such as Motorola S-record or Intel HEX.|$|E
40|$|A more {{efficient}} and cost effective method for developing microcomputer software is to utilize a host computer with high-speed peripheral support. Application programs such as <b>cross</b> <b>assemblers,</b> loaders, and simulators are implemented in the host computer {{for each of the}} microcomputers for which software development is a requirement. The host computer is configured to operate in a time share mode for multiusers. The remote terminals, printers, and down loading capabilities provided are based on user requirements. With this configuration a user, either local or remote, can use the host computer for microcomputer software development. Once the software is developed (through the code and modular debug stage) it can be downloaded to the development system or emulator in a test area where hardware/software integration functions can proceed. The microcomputer software program sources reside in the host computer and can be edited, assembled, loaded, and then downloaded as required until the software development project has been completed...|$|R
40|$|The paper {{describes}} a laboratory design facility for digital microprocessor implementation of Linear-Quadratic-Gaussian feedback compensators. Outputs from user interactive programs for solving infinite time horizon LQ regulator and Kalman filter problems are conditioned for implementation on a laboratory microcomputer system. The software {{consists of two}} parts: (1) an off-line high-level program for solving the LQ Ricatti equations and generating associated feedback and filter gains, and (2) a <b>cross</b> compiler/macro <b>assembler</b> which generates object code for the target microprocessor system. Application to the control of a two dimensional inverted pendulum and expanding the design/prototyping system to other target machine architectures are discussed...|$|R
40|$|Abstract. <b>Cross</b> toolkits (<b>assembler,</b> linker, debugger, simulator, profiler) {{are widely}} used for software-hardware codesign; an early {{creation}} of cross toolkits is an important success factor for industrial embedded systems. At the hardware design stage systems are subject to significant design alterations including changes in the instruction set of target CPUs. This is a challenging issue for early cross toolkit development. In this paper, we present a new Architecture Description Language (ADL) called ISE language and an approach to early cross toolkit development to cope with hardware design changes. The paper introduces the MetaDSP framework that supports ISE-based construction of cross toolkits and gives brief overview of the MetaDSP applications to industrial projects that proves the industrial strength of the presented approach and tools. ...|$|R
5000|$|The {{computer}} {{was to be}} delivered in December 1972, and Gernelle, Lacombe, Benchetrit and Beckmann had {{to work in a}} cellar in Châtenay-Malabry for 18 hours a day in order to deliver the computer in time. The software, the ROM-based MIC 01 monitor and the ASMIC 01 assembler, was written on an Intertechnique Multi-8 minicomputer using a <b>cross</b> <b>assembler.</b> The {{computer was}} based on an Intel 8008 microprocessor clocked at 500 kHz. It had a backplane bus, called the Pluribus with 74-pin connector. 14 boards could be plugged in a Pluribus. With two Pluribus, the Micral N could support up to 24 boards. The computer used MOS memory instead of core memory. The Micral N could support parallel and serial input/output. It had 8 levels of interrupt and a stack. The computer was programmed with punched tape, and used a teleprinter or modem for I/O. The front panel console was optional, offering customers the option of designing their own console to match a particular application. [...] It was delivered to the INRA in January 1973, and commercialized in February 1973 for FF 8,500 (about $1,750) making it a cost-effective replacement for minicomputers which augured the era of the PC.|$|E
40|$|International Telemetering Conference Proceedings / September 28 - 30, 1982 / Sheraton Harbor Island Hotel and Convention Center, San Diego, CaliforniaTelemetered data {{generated}} by missile systems {{has become increasingly}} complex with the inclusion of asynchronous data streams, variable word lengths, and discrete encoding. The display of this data for analysis purposes requires sophisticated equipment, usually designed with a programmable architecture. This paper describes software support that was developed for a stored program PCM decommutator. The software includes a <b>cross</b> <b>assembler</b> and supports downline loading of the decommutator from a host computer...|$|E
40|$|The goal of {{this project}} was to produce a useable {{software}} development system for the Digital Group M 6800 microcomputer. The design was to have implemented the command language of the Digital Group Z- 80 operating system and and have the capability of assembling source programs written using the Motorola M 6800 assembly language mnemonics. The program developed to fulfill these requirements was assembled using the Motorola M 6800 <b>cross</b> <b>assembler</b> and occupies approximately 7 K bytes of memory. The functions provided include an editor package for the entry and modification of source programs, an assembler which meets the design goal and a debugger package to facilitate the checkout and execution of the programs which will be developed using this system...|$|E
40|$|A {{laboratory}} design {{facility for}} digital microprocessor implementation of linear-quadratic-Gaussian feedback compensators is described. Outputs from user interactive programs for solving infinite time horizon LQ regulator and Kalman filter problems were conditioned for implementation on the laboratory microcomputer system. The software {{consisted of two}} parts: an offline high-level program for solving the LQ Ricatti equations and generating associated feedback and filter gains and a <b>cross</b> compiler/macro <b>assembler</b> which generates object code for the target microprocessor system. A PDP 11 / 70 with a UNIX operating system was used for all high level program and data management, and the target microprocessor system is an Intel MDS (8080 -based processor). Application to the control of a two dimensional inverted pendulum is presented and issues in expanding the design/prototyping system to other target machine architectures are discussed...|$|R
40|$|Abstract — In this paper, we {{consider}} the problem of adjusting <b>cross</b> development toolkits (<b>assembler,</b> linker, simulator, profiler, debugger, and IDE) to support processor extensions {{in the form of}} accelerators (synchronous coprocessors). Considered approach is based on describing accelerator models in a special specification language and using such descriptions to dynamically reconfigure cross toolkit to support assembling, cycle accurate simulation and debugging of applications containing new instructions implemented by the accelerators. We describe a generalized mathematical model of the supported class of accelerators and interfaces with the main processor. The specification language for defining concrete accelerators is given and our technology for dynamic cross-tools reconfiguration is overviewed. Index Terms — Cross development tools, embedded system design, hardware specification languages, programming environments. I...|$|R
40|$|A set of {{software}} tools for the Motorola M 68000 microprocessor {{was developed to}} run under the UNIX* operating system. A C language cross compiler was created by modifying the UNIX ‘C’ compiler for the PDP- 11. A macro <b>cross</b> <b>assembler</b> was designed and implemented to produce relocatable object modules for the M 68000 in the a. out format of PDP- 11 UNIX object modules. The UNIX loader for the PDP- 11 was changed to allow relocation of 32 -bit quantities {{as required by the}} M 68000. A small set of utility routines was also written to assist in the implementation effort. The language processors and utilities provide the means by which high level ‘C’ programs can produce executable images for the M 68000. All of the programs are currently running on a PDP- 11 / 70 UNIX system...|$|E
40|$|Hardware, software, and {{performance}} {{features of the}} Digital Instrumentation and Navigation System (DIANS) designed for NASA research to collect flight data as a strap-down system are detailed. The support software for the system has a cross compiler, a linkage editor, and <b>cross</b> <b>assembler,</b> extended communication capabilities, postflight processing applications, and compilers for PASCAL, FORTRAN, CBASIC and MT. The DIANS microcomputer has a 1 Mbyte RAM module, a fast floating point processor board, a 68000 monoboard computer with 64 RAM, a 128 Kbyte bubble memory card, and a navigation radio. The system also carries a battery for full system operation for over an hour. The support software is also stored on a host mainframe computer, which has a CP/M operating system. Pitch, roll, and heading data are gathered from the on-board system, and communication is possible between the airborne and ground-based computer...|$|E
40|$|The thesis {{describes}} a Universal meta <b>cross</b> <b>assembler</b> and an emulator for the Intel 8086 microprocessor. The utility {{is designed to}} be used as an instructional tool to teach assembly language programming to students. One implementation is available to allow students to run Intel 8086 programs on the university's vax mainframe, so that students can test their programs at their convenience. This setup also results in low operating costs with no additional equipment requirements. Several options are provided in the emulator to debug the 8086 assembly language programs composed by students. The assembler, besides generating Intel 8086 machine code, has the capability to generate machine code for a number of microprocessors or microcontrollers. The machine code file generated by the assembler is the input to the emulator. Both the assembler and the emulator are completely portable and can be recompiled to run on any system with a standard C compiler...|$|E
40|$|Abstract — A {{software}} tool for micro controller applications with assembly language programming for interfacing concepts having a multipurpose routine library is developed. This library {{is intended to}} solve different mathematical equations like linear equations, first polynomial, second polynomial etc encountered in data acquisition and analysis. Routines are also developed for proper formatted display on LCD. Some of the unique features of this method are highlighted. A multipurpose mathematical routine library {{which can be used}} as a easy tool in designing and implementation of microcontroller based instrumentation systems. The analog voltage on a selected channel read from instrumentation is converted to digital form with ADC stored in internal memory [...] The subroutine programs for performing the mathematical operations like addition, subtraction, multiplication, division etc in 16 bit format are tested with Integrated Development Environment (IDE) simulator. This subroutine programs are then further used to solve the equations with asm 51 <b>cross</b> <b>assembler.</b> The program can debug, erased and reprogrammed immediately and online tested. After assembly completion, error free program is downloaded with FLASH MAGIC in a microcontroller chi...|$|E
40|$|We have‘implemented'a {{software}} package for our IBM 360 / 370 system at SLAC, which we {{use in the}} development of stand alone LSI- 11 software systems. Included in this package are: * XASMll- a <b>cross</b> <b>assembler</b> which handles a substantial subset of MACRO- 11 * PL- 11 - a cross compiler for a structured programming language designed around the PDP- 11 instruction set * FORTRAN- FORTRAN code is compiled under RT: 11, and the object modules are transmitted to the IBM 360 / 370 for translation and integration * XLCVT- a conversion program which takes as input standard DEC DOS/RT- 11 object modules or LIBR files, or object modules produced by PL- 11 and XASMll; it converts them to a form suitable for input to XLINKll * XLINKll- a cross linker which takes in relocatable object modules and outputs a DEC DOS/RT- 11 absolute loader format module, or a format suitable for an IBM 360 / 370 PDP- 11 simulator * REFORM/EPROM- conversion programs which take as input a DEC DOS absolute loader format module generated by XLINKll and convert it to a format suitable for downloading into an LSI- 11 or for burning into EPROM's * XREF- a cross reference program which takes as input a PDS of XLINKll type object modules, and outputs cross reference tables and information on each of the modules * WYLBUR execute files- several files of commands which may be executed from the terminal to create jobs in response to simple prompts * KERNEL- a set of MACRO- 11 and PL- 11 routines which have been burnt into 2708 EPROM's and include a terminal emulator, a down line loader, and several utility routines for the LSI- 11 All of this was accomplished by using the facilities already available on our IBM 3601370 system. Most of this package has been in regular use since Spring 1976, although new features are still being added. The manpower cost of researching, organizing, developing, and integrating the tools has paid off well in terms of programmer productivity, source code readability, accessibility, and integrity...|$|E
40|$|Thesis (Masters Diploma (Electrical Engineering)) [...] Cape Technikon, Cape Town, 1987 This thesis {{describes}} {{the development of}} a computerized Load Recorder. The load recorder is used by the Cape Town City Council to assist in the tariff investigation of electricity consumers. This investigation assists the consumers in selecting the best cost effective electricity tariff. It also motivates the consumers to maintain a constant load which in turn assists the Council in supplying the required electricity. The load recorder replaces a manual and time consuming method used in conducting the tariff investigation. The development of the load recorder involved the design of hardware and software. It was designed in a compact enclosure to hook up to the electricity meters of the consumer for a period of 7 days. The software was designed in the 6805 assembly language to log data and record the electricity load every 15 or 30 minutes for this period. At the end of this period the data is downloaded into the HP 85 personal computer. A basic program was designed for the HP 85 to analyse and compute the downloaded data. A graphical representation and analysis is printed by the HP 85 computer. The given graph of the results represents the electricity used for this period. The tariff rates are analysed and calculated to determine the best cost effective tariff. A CMOS micro computer intergrated circuit was chosen due to the determined specification of the load recorder. In order to make the development of the load recorder possible an aid (tool) had to be designed and built for the chosen microprocessor. This development aid, the emulator, is included as part of this thesis. The Motorola exorciser only supported a <b>cross</b> <b>assembler</b> for the chosen microprocessor family. The emulator was designed and built to enable testing and debugging on the Exorciser. The development on the emulator involved a detailed analysis of the Exorciser development system. The emulator was designed using hardware and software. The hardware emulator board was designed as a standard Motorola size card which plugs into the Exorciser. The software was designed for the 6809 exorciser and for the 6805 emulator. The emulator was soak tested and debugged during the development of the load recorder. The emulator opened further avenues for future microcomputer design projects especially where a confined area and compactness is an important factor. The design and development of the emulator and the load recorder was conducted in the Computer Section of the City Electrical Engineer's Department of Cape Town...|$|E

