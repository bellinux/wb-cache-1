106|2|Public
5|$|Although <b>CODASYL</b> was {{independent}} of the ANSI committee, the <b>CODASYL</b> Journal of Development was used by ANSI to identify features that were popular enough to warrant implementing.|$|E
5|$|The <b>CODASYL</b> Executive Committee later {{created the}} COBOL Maintenance Committee to answer {{questions}} from users and vendors and to improve and expand the specifications.|$|E
5|$|The {{steering}} committee met on June 4 {{and agreed to}} name the entire activity as the Committee on Data Systems Languages, or <b>CODASYL,</b> and to form an executive committee.|$|E
50|$|The {{remainder}} of this section is concerned with <b>CODASYL's</b> database activities.|$|R
50|$|<b>CODASYL's</b> {{members were}} {{individuals}} from {{industry and government}} involved in data processing activity. Its larger goal was to promote more effective data systems analysis, design, and implementation. The organization published specifications for various languages over the years, handing these over to official standards bodies (ISO, ANSI, or their predecessors) for formal standardization.|$|R
5|$|Independently of the ANSI committee, the <b>CODASYL</b> Programming Language Committee {{was working}} on {{improving}} the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, debugging and file merging facilities as well as improved string-handling and library inclusion features.|$|E
5|$|During 1960, {{the list}} of {{manufacturers}} planning to build COBOL compilers grew. By September, five more manufacturers had joined <b>CODASYL</b> (Bendix, Control Data Corporation, General Electric (GE), National Cash Register and Philco), and all represented manufacturers had announced COBOL compilers. GE and IBM planned to integrate COBOL into their own languages, GECOM and COMTRAN, respectively. In contrast, International Computers and Tabulators planned to replace their language, CODEL, with COBOL.|$|E
500|$|There {{were many}} other new features, {{many of which}} had been in the <b>CODASYL</b> COBOL Journal of Development since 1978 and had missed the {{opportunity}} to be included in COBOL-85. These other features included: ...|$|E
500|$|COBOL was {{designed}} in 1959 by <b>CODASYL</b> and was partly {{based on previous}} programming language design work by Grace Hopper, {{commonly referred to as}} [...] "the (grand)mother of COBOL". It was created as part of a US Department of Defense effort to create a portable programming language for data processing. Intended as a stopgap, the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption. It was standardized in 1968 and has since been revised four times. Expansions include support for structured and object-oriented programming. The current standard is ISO/IEC 1989:2014.|$|E
500|$|Later, COBOL {{suffered}} from a shortage of material covering it; it took until 1963 for introductory books to appear (with Richard D. Irwin publishing a college textbook on COBOL in 1966). [...] By 1985, there were twice as many books on Fortran and {{four times as many}} on BASIC as on COBOL in the Library of Congress. [...] University professors taught more modern, state-of-the-art languages and techniques instead of COBOL which was said to have a [...] "trade school" [...] nature. Donald Nelson, chair of the <b>CODASYL</b> COBOL committee, said in 1984 that [...] "academics ... hate COBOL" [...] and that computer science graduates [...] "had 'hate COBOL' drilled into them". A 2013 poll by Micro Focus found that 20% of university academics thought COBOL was outdated or dead and that 55% believed their students thought COBOL was outdated or dead. The same poll also found that only 25% of academics had COBOL programming on their curriculum even though 60% thought they should teach it.|$|E
2500|$|In 1954, Eckertâ€“Mauchly chose Hopper to {{lead their}} {{department}} for automatic programming, and {{she led the}} release {{of some of the}} first compiled languages like FLOW-MATIC. In 1959, she participated in the <b>CODASYL</b> consortium, which consulted Hopper to guide them in creating a machine-independent programming language. This led to the COBOL language, which was inspired by her idea of a language being based on English words. In 1966, she retired from the Naval Reserve, but in 1967, the Navy recalled her to active duty. [...] She retired from the Navy in 1986 and found work as a consultant for the Digital Equipment Corporation, sharing her computing experiences.|$|E
2500|$|In {{the spring}} of 1959, {{computer}} experts from industry and government were brought together in a two-day conference known as the Conference on Data Systems Languages (<b>CODASYL).</b> Hopper served as a technical consultant to the committee, and many of her former employees served on the short-term committee that defined the new language COBOL (an acronym for COmmon Business-Oriented Language). The new language extended Hopper's FLOW-MATIC language with some ideas from the IBM equivalent, COMTRAN. [...] Hopper's belief that programs should be written in a language that was close to English (rather than in machine code or in languages close to machine code, such as assembly languages) was captured in the new business language, and COBOL went on {{to be the most}} ubiquitous business language to date. Among the members of the committee that worked on COBOL was Mount Holyoke College alumni Jean E. Sammet.|$|E
5000|$|Some of the <b>CODASYL</b> {{committees}} {{continue their}} work today, but <b>CODASYL</b> itself no longer exists. The records of <b>CODASYL</b> were {{donated to the}} Charles Babbage Institute. [...] CBI also hold the archival records for American National Standards Institute X3H2 records.|$|E
50|$|Later systems added B-trees {{to provide}} {{alternate}} access paths. Many <b>CODASYL</b> databases also added a very straightforward query language. However, {{in the final}} tally, <b>CODASYL</b> was very complex and required significant training and effort to produce useful applications.|$|E
50|$|Independently of the ANSI committee, the <b>CODASYL</b> Programming Language Committee {{was working}} on {{improving}} the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, debugging and file merging facilities as well as improved string-handling and library inclusion features.Although <b>CODASYL</b> was independent of the ANSI committee, the <b>CODASYL</b> Journal of Development was used by ANSI to identify features that were popular enough to warrant implementing.The Programming Language Committee also liaised with ECMA and the Japanese COBOL Standard committee.|$|E
5000|$|... #Caption: Basic {{structure}} of navigational <b>CODASYL</b> database model ...|$|E
5000|$|... #Caption: The [...] "set", {{the basic}} {{structure}} of the <b>CODASYL</b> database model. A set consists of one owner record and n member records (these are labeled as [...] "parent" [...] and [...] "child" [...] in the diagram, but the <b>CODASYL</b> terminology is [...] "owner" [...] and [...] "member"). In the above example, we were looking at a basic set which embodies a 1:N (Owner:Member) relationship.|$|E
50|$|Interest in <b>CODASYL</b> {{gradually}} faded due {{to growing}} interest in relational databases {{beginning in the early}} 1980s.|$|E
5000|$|... {{the network}} data {{structures}} technique, popularly called the <b>CODASYL</b> approach, of Dr Charles Bachman (Honeywell Information Systems); ...|$|E
5000|$|... 1977. [...] "Why Restrict the Modeling Capability of <b>Codasyl</b> Data Structure Sets?" [...] In: National Computer Conference vol. 46, 1977.|$|E
5000|$|... 1978. [...] "Commentary on the <b>CODASYL</b> Systems Committee's Interim Report on Distributed Database Technology." [...] National Computer Conference vol. 47, 1978.|$|E
5000|$|D. A. Hawley, J. S. Knowles, E. E. Tozer. [...] "Database Consistency and the <b>CODASYL</b> DBTG Proposals." [...] Comput. J. 18(3): 206-212 (1975) ...|$|E
50|$|SIBAS {{database}} {{based on}} the <b>Codasyl</b> database specifications was ported by the Central Institute for Industrial Research in 1975 SIBAS is owned by SRS.|$|E
5000|$|... "A Partial Implementation of the <b>CODASYL</b> DBTG Report as an Extension to Fortran," [...] (with J.F. Nunamaker and A.B. Whinston), Management Datamatics, October, 1975.|$|E
50|$|Graph {{structures}} {{could be}} represented in network model databases from the late 1960s. <b>CODASYL,</b> which had defined COBOL in 1959, defined the Network Database Language in 1969.|$|E
50|$|The {{steering}} committee met on June 4 {{and agreed to}} name the entire activity as the Committee on Data Systems Languages, or <b>CODASYL,</b> and to form an executive committee.|$|E
50|$|Integrated Data Store (IDS) was {{an early}} network {{database}} largely used by industry, known for its high performance. IDS {{became the basis for}} the <b>CODASYL</b> Data Base Task Group standards.|$|E
50|$|The COBOL {{language}} {{evolved from}} proposals {{developed by the}} Short Range Task Force. Smith remained active in the COBOL community through the Conference on Data System Languages (<b>CODASYL)</b> until his retirement.|$|E
50|$|The {{two main}} early navigational data models were the {{hierarchical}} model, epitomized by IBM's IMS system, and the <b>CODASYL</b> model (network model), implemented {{in a number}} of products such as IDMS.|$|E
5000|$|GCOS 3 (and later GCOS 7 and GCOS 8) {{featured}} a good <b>Codasyl</b> [...] "relational" [...] database called Integrated Data Store (IDS) {{that was the}} model for the more successful IDMS.|$|E
5000|$|The <b>CODASYL</b> {{approach}} {{relied on}} the [...] "manual" [...] navigation of a linked data set which was formed into a large network. Applications could find records by one of three methods: ...|$|E
5000|$|There {{were many}} other new features, {{many of which}} had been in the <b>CODASYL</b> COBOL Journal of Development since 1978 and had missed the {{opportunity}} to be included in COBOL-85. These other features included: ...|$|E
50|$|Records have {{identity}}, {{the identity}} being {{represented by a}} value known as a database key. In IDMS, as in most other <b>Codasyl</b> implementations, the database key {{is directly related to}} the physical address of the record on disk. Database keys are also used as pointers to implement sets in the form of linked lists and trees. This close correspondence between the logical model and the physical implementation (which is not a strictly necessary part of the <b>Codasyl</b> model, but was a characteristic of all successful implementations) is responsible for the efficiency of database retrieval, but also makes operations such as database loading and restructuring rather expensive.|$|E
50|$|The most {{distinctive}} structuring concept in the <b>Codasyl</b> {{model is the}} set. Not {{to be confused with}} a mathematical set, a <b>Codasyl</b> set represents a one-to-many relationship between records: one owner, many members. The fact that a record can be a member in many different sets is the key factor that distinguishes the network model from the earlier hierarchical model. As with records, each set belongs to a named set type (different set types model different logical relationships). Sets are in fact ordered, and the sequence of records in a set can be used to convey information. A record can participate as an owner and member of any number of sets.|$|E
50|$|The {{network model}} expands upon the {{hierarchical}} structure, allowing many-to-many relationships in a tree-like structure that allows multiple parents. It was most popular before {{being replaced by}} the relational model, and {{is defined by the}} <b>CODASYL</b> specification.|$|E
5000|$|In the 1970s Tozer became {{involved}} in the <b>CODASYL</b> development of database languages, and wrote his first articles on databases and systems analysis and design He specialized in [...] "effective application of Information Technology to business and administrative problems." ...|$|E
