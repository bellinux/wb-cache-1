2|7955|Public
50|$|Addventures, {{by their}} nature of {{discrete}} segments of writing connected {{to each other}} by paths, generally follow a <b>conceptual</b> <b>tree</b> <b>structure.</b> Each individual written section is a node, usually with one parent node and zero or more child nodes. Extending the addventure with new writing then becomes a task of choosing the node that one wants and adding a new child to it, with the new material comprising {{the content of the}} child. An addventure generally begins with a single room or chapter (the root node of the tree), and is extended by writers from that point.|$|E
40|$|The wavelet {{decomposition}} is {{a proven}} tool for constructing concise synopses of large data sets {{that can be}} used to obtain fast approximate answers. Existing research studies focus on selecting an optimal set of wavelet coefficients to store so as to minimize some error metric, without however seeking to reduce the size of the wavelet coefficients themselves. In many real data sets the existence of large spikes in the data values results in many large coefficient values lying on paths of a <b>conceptual</b> <b>tree</b> <b>structure</b> known as the error tree. To exploit this fact, we introduce in this paper a novel compression scheme for wavelet synopses, termed hierarchically compressed wavelet synopses, that fully exploits hierarchical relationships among coefficients in order to reduce their storage. Our proposed compression scheme allows for a larger number of coefficients to be stored for a given space constraint thus resulting in increased accuracy of the produced synopsis. We propose optimal, approximate and greedy algorithms for constructing hierarchically compressed wavelet synopses that minimize the sum squared error while not exceeding a given space budget. Extensive experimental results on both synthetic and real-world data sets validate our novel compression scheme and demonstrate the effectiveness of our algorithms against existing synopsis construction algorithms. © 2008 Springer-Verlag...|$|E
40|$|This paper proposes an {{approach}} to improving the correctness of tone of the synthesized speech which is generated by an HMM-based Thai speech synthesis system. In the tree-based context clustering process, tone groups and tone types are used to design four different <b>structures</b> of decision <b>tree</b> including a single binary <b>tree</b> <b>structure,</b> a simple tone-separated <b>tree</b> <b>structure,</b> a constancy-based-tone-separated <b>tree</b> <b>structure,</b> and a trend-based-tone-separated <b>tree</b> <b>structure.</b> A subjective evaluation of tone correctness is conducted by using tone perception of eight Thai listeners. The simple tone-separated <b>tree</b> <b>structure</b> gives {{the highest level of}} tone correctness, while the single binary <b>tree</b> <b>structure</b> gives the lowest level of tone correctness. Moreover, the additional contextual tone information which is applied to all structures of the decision tree achieves a significant improvement of tone correctness. Finally, the evaluation of syllable duration distortion among the four structures shows that the constancy-based-toneseparated and the trend-based-tone-separated <b>tree</b> <b>structures</b> can alleviate the distortions that appear when using the simple tone-separated <b>tree</b> <b>structure.</b> 1...|$|R
40|$|Obviously, a <b>tree</b> <b>structure</b> {{filter bank}} can be {{realized}} via a non-uniform filter bank, and perfect reconstruction is achieved {{if and only if}} each branch of the <b>tree</b> <b>structure</b> can provide perfect reconstruction. In this paper, the converse of this problem is studied. We show that a perfect reconstruction non-uniform filter bank with decimation ratio { 2, 4, 4 } {{can be realized}} via a <b>tree</b> <b>structure</b> and each branch of the <b>tree</b> <b>structure</b> achieves perfect reconstruction...|$|R
5000|$|Computer science uses <b>tree</b> <b>structures</b> {{extensively}} (see <b>Tree</b> (data <b>structure)</b> and telecommunications.) ...|$|R
40|$|Problem statement: In HMM-based Thai speech synthesis, {{the tone}} {{degradation}} {{due to the}} imbalance of training data of all tones. Some distortion of syllable duration is obviously noticeable when the system is trained {{with a small amount}} of data. These problems cause the decrement in naturalness and intelligibility of the synthesized speech. Approach: This study proposes an approach to improve the correctness of tone of the synthesized speech which is generated by an HMM-based Thai speech synthesis system. In the tree-based context clustering process, tone groups and tone types are used to design four different <b>structures</b> of decision <b>tree</b> including a single binary <b>tree</b> <b>structure,</b> a simple tone-separated <b>tree</b> <b>structure,</b> a constancy-based-tone-separated <b>tree</b> <b>structure</b> and a trend-based-tone-separated <b>tree</b> <b>structure.</b> Results: A subjective evaluation of tone correctness is conducted by using tone perception of eight Thai listeners. The simple tone-separated <b>tree</b> <b>structure</b> gives the highest level of tone correctness, while the single binary <b>tree</b> <b>structure</b> gives the lowest level of tone correctness. The additional contextual tone information which is applied to all structures of the decision tree achieves a significant improvement of tone correctness. Finally, the evaluation of syllable duration distortion among the four structures shows that the constancy-based-tone-separated and the trend-based-tone-separated <b>tree</b> <b>structures</b> can alleviate the distortions that appear when using the simple tone-separated <b>tree</b> <b>structure.</b> Conclusion: The appropriate <b>structure</b> of <b>tree</b> in context clustering process with the additional contextual tone information can improve the correctness of tones, while the constancy-based-tone-separated and the trend-based-tone-separated <b>tree</b> <b>structures</b> can alleviate the syllable duration distortions...|$|R
50|$|A <b>tree</b> <b>structure</b> is <b>conceptual,</b> {{and appears}} in several forms. For a {{discussion}} of <b>tree</b> <b>structures</b> in specific fields, see <b>Tree</b> (data <b>structure)</b> for computer science: insofar {{as it relates to}} graph theory, see tree (graph theory), or also tree (set theory). Other related pages are listed below.|$|R
40|$|In this paper, we {{introduce}} a new paradigm - multiset-based tree model. We show that trees can be represented {{in the form of}} wellfounded multisets. We also show that the conventional approach for this representation is not injective from a set of trees to the class of multisets representing such trees. We establish a one-to-one correspondence between trees and suitable permutations of a wellfounded multiset, which we call <b>tree</b> <b>structures.</b> We give formal definitions of a <b>tree</b> <b>structure</b> and a subtree <b>structure</b> of a <b>tree</b> <b>structure.</b> Finally, we represent membrane structures in the form of <b>tree</b> <b>structures</b> - a form in which membrane structures can suitably be represented at programming level...|$|R
30|$|For any web {{document}} set, {{one or more}} “entry points” might be available. That is, the documents {{can be considered as}} one or more <b>tree</b> <b>structures</b> conceptually. Documents (nodes) will be connected by hyperlinks (edges) in <b>tree</b> <b>structures.</b>|$|R
40|$|Several {{approaches}} {{have been suggested}} by researchers for identifying the best feasible <b>tree</b> <b>structure</b> for Nested Logit (NL) model. This paper demonstrates an experience of applying those approaches while identifying the best feasible <b>tree</b> <b>structure</b> for NL model with reference to {{a case study of}} feeder service to bus stop in rural India. Heteroscedastic Extreme Value (HEV) model, fully degenerated <b>tree</b> <b>structure</b> NL (DGNL) model and several nested logit models based on natural partition principle were developed and analyzed for identifying the most optimal NL model. The results presented in the paper are case specific but the experiences documented could be useful for selecting the optimal <b>tree</b> <b>structure</b> for NL model in other cases...|$|R
40|$|We {{consider}} the <b>tree</b> <b>structured</b> group Lasso where the structure over the features {{can be represented}} as a tree with leaf nodes as features and internal nodes as clusters of the features. The structured regularization with a pre-defined <b>tree</b> <b>structure</b> {{is based on a}} group-Lasso penalty, where one group is defined for each node in the tree. Such a regularization can help uncover the structured sparsity, which is desirable for applications with some meaningful <b>tree</b> <b>structures</b> on the features. However, the <b>tree</b> <b>structured</b> group Lasso is challenging to solve due to the complex regularization. In this paper, we develop an efficient algorithm for the <b>tree</b> <b>structured</b> group Lasso. One of the key steps in the proposed algorithm is to solve the Moreau-Yosida regularization associated with the grouped <b>tree</b> <b>structure.</b> The main technical contributions of this paper include (1) we show that the associated Moreau-Yosida regularization admits an analytical solution, and (2) we develop an efficient algorithm for determining the effective interval for the regularization parameter. Our experimental results on the AR and JAFFE face data sets demonstrate the efficiency and effectiveness of the proposed algorithm. ...|$|R
50|$|Another {{method is}} to list tributaries from mouth to source, {{in the form of}} a <b>tree</b> <b>structure,</b> stored as a <b>tree</b> data <b>structure.</b>|$|R
40|$|Nearest {{neighbor}} {{search is}} a basic primitive method used for machine learning and information retrieval. We look at exact nearest neighbor search algorithms using <b>tree</b> <b>structures.</b> The most basic <b>tree</b> <b>structure</b> used for fast nearest neighbor search is k-d trees. This thesis will look at k-d tree’s shortcomings and explore various ways to improve its performance. First, we look at PCA trees, which give good performance but is time-expensive. We then study randomized trees, which are very efficient data structures and are flexible in space complexity. Then we introduce a new randomized <b>tree</b> <b>structure,</b> two-vantage-point <b>tree,</b> which outperforms all other <b>tree</b> <b>structures</b> including PCA <b>trees,</b> r-k-d trees, and RP trees. At last, we look at spillover on trees, {{which can be used}} to improve the performance of any <b>tree</b> <b>structures.</b> We then compare randomized trees with spillover and show that spill trees only work well with very small spill factor. If more space is allowed, two-vantage-point trees are preferred over spill trees...|$|R
40|$|A {{filter bank}} with set of decimators { 2, 4, 4 } could achieve perfect {{reconstruction}} {{if it could}} be represented via a <b>tree</b> <b>structure.</b> Each branch of the <b>tree</b> <b>structure</b> should achieve perfect reconstruction. The advantage of representing an octave decomposition filter bank with set of decimators { 2, 4, 4 } via a <b>tree</b> <b>structure</b> was to reduce the computation complexity and provide a fast implementation for an octave decomposition filter bank. Department of Electronic and Information Engineerin...|$|R
5000|$|Every finite <b>tree</b> <b>structure</b> has {{a member}} {{that has no}} superior. This member is called the [...] "root" [...] or root node. The root is the {{starting}} node. But the converse is not true: infinite <b>tree</b> <b>structures</b> {{may or may not}} have a root node.|$|R
40|$|We show an {{application}} of a <b>tree</b> <b>structure</b> for approximate inference in graphical models using the expectation propagation algorithm. These approximations are typically used over graphs with short-range cycles. We demonstrate that these approximations also help in sparse graphs with long-range loops, as the ones used in coding theory to approach channel capacity. For asymptotically large sparse graph, the expectation propagation algorithm together with the <b>tree</b> <b>structure</b> yields a completely disconnected approximation to the graphical model but, for for finite-length practical sparse graphs, the <b>tree</b> <b>structure</b> approximation to the code graph provides accurate estimates for the marginal of each variable. Furthermore, we propose a new method for constructing the <b>tree</b> <b>structure</b> on the fly that might be more amenable for sparse graphs with general factors. ...|$|R
40|$|Abstract. The FRAMES {{project is}} {{developing}} a system for video database search, content-based retrieval, and virtual video program synthesis. For dynamic synthesis applications, a video program is specified {{at a high level}} using a virtual video prescription. The prescription is a document specifying the video structure, including specifications for generating associative chains of video components. Association specifications are sent to an association engine during video synthesis. User selection of a virtual video prescription together with the default behavior of the prescription interpreter and the association engine define a <b>tree</b> <b>structured</b> search of specifications, queries, and video data components. This <b>tree</b> <b>structure</b> supports generic user interaction functions that either modify the traversal path across this <b>tree</b> <b>structure,</b> or modify the actual <b>tree</b> <b>structure</b> dynamically during video synthesis...|$|R
40|$|AbstractLet T be a rooted <b>tree</b> <b>structure</b> with n nodes a 1,…,an. A {{function}} f: {a 1,…,an} into { 1 < ⋯ < k} {{is called}} monotone if whenever ai is {{a son of}} aj, then f(ai) ≥ f(aj). The average number of monotone bijections is determined for several classes of <b>tree</b> <b>structures.</b> If k is fixed, for {{the average number of}} monotone functions asymptotic equivalents of the form c · ϱ−nn− 32 (n → ∞) are obtained for several classes of <b>tree</b> <b>structures...</b>|$|R
40|$|Central to any XML query {{language}} is a path language such as XPath which operates on the <b>tree</b> <b>structure</b> of the XML document. We demonstrate in this paper that the <b>tree</b> <b>structure</b> can be e#ectively compressed and manipulated using techniques derived from symbolic model checking. Specifically, we show first that succinct representations of document <b>tree</b> <b>structures</b> based on sharing subtrees are highly e#ective. Second, we show that compressed structures can be queried directly and e#ciently {{through a process of}} manipulating selections of nodes and partial decompression...|$|R
40|$|In an XML {{document}} {{a considerable}} fraction consists of markup, that is, begin and end-element tags describing the document’s <b>tree</b> <b>structure.</b> XML compression {{tools such as}} XMill separate the <b>tree</b> <b>structure</b> from the data content and compress each separately. The main focus in these compression tools is how to group similar data content together prior to performing standard data compression such as gzip, bzip 2, or ppm. In contrast, {{the focus of this}} paper is on compressing the <b>tree</b> <b>structure</b> part of an XML document. We use a known algorithm to derive a grammar representation of the <b>tree</b> <b>structure</b> which factors out the repetition of tree patterns. We then investigate several succinct binary encodings of these grammars. Our experiments show that we can be consistently smaller than the <b>tree</b> <b>structure</b> compression carried out by XMill, using the same backend compressors as XMill on our encodings. However, the most surprising result is that our own Huffman-like encoding of the grammars (without any backend compressor whatsoever) consistently outperforms XMill with gzip backend. This is of particular interest because our Huffmannlike encoding can be queried without prior decompression. To {{the best of our knowledge}} this offers the smallest queriable XML <b>tree</b> <b>structure</b> representation currently available. ...|$|R
40|$|The {{representation}} {{of objects in}} images as <b>tree</b> <b>structures</b> is {{of great interest to}} vision, as they can represent articulated objects such as people as well as other structured objects like arteries in human bodies, roads, circuit board patterns, etc. <b>Tree</b> <b>structures</b> are often related to the symmetry axis {{representation of}} shapes, which captures their local symmetries. Algorithms have been introduced to detect (i) open contours in images in quadratic time (ii) closed contours in images in cubic time, and (iii) <b>tree</b> <b>structures</b> from contours in quadratic time. The algorithms are based on dynamic programming and Single Source Shortest Path algorithms. However, in this paper, we show that the problem of finding <b>tree</b> <b>structures</b> in images in a principled manner is a much harder problem. We argue that the optimization problem of finding <b>tree</b> <b>structures</b> in images is essentially equivalent to a variant of the Steiner Tree problem, which is NP-hard. Nevertheless, an approximate polynomial-time algorithm for this problem exists: we apply a fast implementation of the Goemans-Williamson approximate algorithm to the problem of finding a tree representation after an image is transformed by a local symmetry mapping. Examples of extracting <b>tree</b> <b>structures</b> from images illustrate the idea and applicability of the approximate method. 1...|$|R
30|$|Besides, <b>tree</b> <b>structure</b> {{is a tool}} {{incorporated}} in the framework for structuring the problem by developing a hierarchical set of criteria, sub-criteria and alternatives. The <b>tree</b> <b>structure</b> is also used for the representation of model data (criterion, sub-criteria scores for the determined alternatives, and weight coefficients).|$|R
40|$|XML queries {{typically}} specify {{patterns of}} selection predicates on multiple elements that have some specified <b>tree</b> <b>structured</b> relationships. The primitive <b>tree</b> <b>structured</b> relationships are parent-child and ancestor-descendant, and finding all occurrences {{of these relationships}} in an XML database is a core operation for XML query processing...|$|R
40|$|Metadata only entryElectrical treeing is of {{interest}} to the electrical generation, transmission and distribution industries as {{it is one of the}} causes of insulation failure in electrical machines, switchgear and transformer bushings. In this paper a deterministic electrical tree growth model is described. The model is based on electrostatics and local electron avalanches to model partial discharge activity within the growing <b>tree</b> <b>structure.</b> Damage to the resin surrounding the <b>tree</b> <b>structure</b> is dependent on the local electrostatic energy dissipation by partial discharges within the <b>tree</b> <b>structure</b> and weighted by the magnitudes of the local electric fields in the resin surrounding the <b>tree</b> <b>structure.</b> The model is successful in simulating the formation of branched structures without the need of a random variable, a requirement of previous stochastic models. Instability in the spatial development of partial discharges within the <b>tree</b> <b>structure</b> takes the role of the stochastic element as used in previous models to produce branched <b>tree</b> <b>structures.</b> The simulated electrical trees conform to the experimentally observed behaviour; tree length versus time and electrical tree growth rate as a function of applied voltage for non-conducting electrical trees. The phase synchronous partial discharge activity and the spatial distribution of emitted light from the <b>tree</b> <b>structure</b> are also in agreement with experimental data for non-conducting trees as grown in a flexible epoxy resin and in polyethylene. The fact that similar tree growth behaviour is found using pure amorphous (epoxy resin) and semicrystalline (polyethylene) materials demonstrate that neither annealed or quenched noise, representing material inhomogeneity, is required for the formation of irregular branched <b>structures</b> (electrical <b>trees).</b> Instead, as shown in this paper, branched growth can occur due to the instability of individual discharges within the <b>tree</b> <b>structure...</b>|$|R
5000|$|... #Caption: <b>Tree</b> <b>structure</b> {{of terms}} (n⋅(n+1))/2 and n⋅((n+1)/2) ...|$|R
40|$|We {{propose a}} scheme for {{compressing}} <b>tree</b> <b>structured</b> data {{which uses a}} hardcoded pushdown hedge automata. Our algorithm is a lossless adaptive algorithm where the hardcoded model isused in conjunction with an arithmetic compressor to produce a compressed version of the <b>tree.</b> The <b>structure</b> of the model mirrors the syntactic specification of the <b>tree</b> <b>structure.</b> Aquantitative analysis of the advantages that accrue from such a model is provided...|$|R
50|$|For {{any given}} subband {{analysis}} filter bank, we can split it into further subbands {{as shown in}} figure 8. By repeating this operation we can actually build a <b>tree</b> <b>structured</b> analysis bank. Example of a 1D <b>tree</b> <b>structured</b> filter bank is the one that results in an octave stacking of the passbands. In the 2D case, <b>tree</b> <b>structures</b> based on simple two-channel modules can offer sophisticated band-splitting schemes, especially if we combine the various configurations shown above.The directional filter bank which will be discussed below is one such example.|$|R
40|$|This paper {{explores the}} problem of {{tracking}} information flow in dynamic <b>tree</b> <b>structures.</b> Motivated by {{the problem of}} manipulating the Document Object Model (DOM) trees by browser-run client-side scripts, we address the dynamic nature of interactions via <b>tree</b> <b>structures.</b> We present a runtime enforcement mechanism that monitors this interaction and prevents a range of attacks, some of them missed by previous approaches, that exploit the <b>tree</b> <b>structure</b> in order to transfer sensitive information. We formalize our approach for a simple language with DOM-like tree operations and show that the monitor prevents scripts from disclosing secrets...|$|R
40|$|In {{this paper}} a novel <b>tree</b> <b>structure</b> for high speed, low power multioperand adders is presented. It shows {{a higher degree}} of {{regularity}} and modularity than other existing <b>tree</b> <b>structures.</b> The interconnect is also simpler, shorter and more uniform. These features will reduce the design effort significantly and makes it highly suitable for imple-mentation of digital signal processing algorithms on sili-con, using full custom cells and a layout generator. The novel <b>tree</b> <b>structure</b> is also compared with the Carry-Save Adder array [1], “Overturned stairs ” tree [2], and the Wal-lace tree [3]. 1...|$|R
40|$|We recast {{the idea}} of {{decision}} trees as they emerge in Information theory and Complexity theory into a set theoretical language; the result we call <b>tree</b> <b>structures</b> over a given set. We identify all main structural elements of <b>tree</b> <b>structures,</b> {{the most important of}} which is the tree function, defined as a sum over certain quantities at every nod in the tree. We show in detail that the minimization of the tree function on, possibly constrained, sets of <b>tree</b> <b>structures</b> over a given set renders the functional form of entropy, or of Wiener-Shannon information, depending on the context. We suggest three natural axioms defining <b>tree</b> <b>structures,</b> which are valid also when the underlying set is infinite; in this case the resulting trees are fractal-like objects. These axioms turn out {{to be related to the}} neighbourhood axioms describing neighbourhoods on a topological space. In fact we will show that the paths in a <b>tree</b> <b>structure,</b> which are totally ordered subsets of a tree, can be regarded as a countable neighbourhoo...|$|R
40|$|Abstract. More {{and more}} data ({{documents}}) are wrapped in XML format. Mining these documents involves mining the corresponding XML structures. However, the semi-structured (<b>tree</b> <b>structured)</b> XML makes it somewhat difficult for traditional data mining algorithms to work properly. Recently, several new algorithms were proposed to mine XML documents. These algorithms mainly focus on mining frequent <b>tree</b> <b>structures</b> from XML documents. However, {{none of them}} was designed for mining infrequent structures which are also important in many applications, such as query processing and identification of exceptional cases. In this paper, we consider the problem of identifying infrequent <b>tree</b> <b>structures</b> from XML documents. Intuitively, if a <b>tree</b> <b>structure</b> is infrequent, all <b>tree</b> <b>structures</b> that contain this subtree is also infrequent. So, we propose to consider the minimal infrequent structure (MIS), which is an infrequent structure while all proper subtrees of it are frequent. We also derive a level-wise mining algorithm that makes use of the SG-tree (signature tree) and some effective pruning techniques to efficiently discover all MIS. We validate the efficiency and feasibility of our methods through experiments on both synthetic and real data. ...|$|R
30|$|Use of {{exponential}} {{mechanism to}} select a <b>tree</b> <b>structure.</b>|$|R
5000|$|Flatter <b>tree</b> <b>structure</b> (decreased <b>tree</b> depth) {{compared}} to kd-trees ...|$|R
25|$|GP evolves {{computer}} programs, traditionally {{represented in}} memory as <b>tree</b> <b>structures.</b> <b>Trees</b> {{can be easily}} evaluated in a recursive manner. Every tree node has an operator function and every terminal node has an operand, making mathematical expressions easy to evolve and evaluate. Thus traditionally GP favors the use of programming languages that naturally embody <b>tree</b> <b>structures</b> (for example, Lisp; other functional programming languages are also suitable).|$|R
5000|$|... #Caption: <b>Tree</b> <b>structure</b> of [...] "Colourless green ideas sleep furiously" ...|$|R
5000|$|... #Caption: <b>Tree</b> <b>structure</b> {{of black}} example term , with blue redex ...|$|R
