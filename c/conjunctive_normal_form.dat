578|10000|Public
5|$|It {{describes}} how to translate Boolean formulas in <b>conjunctive</b> <b>normal</b> <b>form</b> (CNF) into equivalent instances {{of the maximum}} clique problem.|$|E
5|$|Because of this {{equivalence}} {{between these}} {{different types of}} operation, a 2-satisfiability instance may also be written in implicative normal form, in which we replace each or operation in the <b>conjunctive</b> <b>normal</b> <b>form</b> by both of the two implications {{to which it is}} equivalent.|$|E
5|$|In the maximum-2-satisfiability problem (MAX-2-SAT), {{the input}} is a formula in <b>conjunctive</b> <b>normal</b> <b>form</b> with two literals per clause, {{and the task}} is to {{determine}} the maximum number of clauses that can be simultaneously satisfied by an assignment. MAX-2-SAT is NP-hard and it is a particular case of a maximum satisfiability problem.|$|E
40|$|In {{this paper}} we {{investigate}} the Boolean functions with maximum essential arity gap. Additionally we propose a simpler proof {{of an important}} theorem proved by M. Couceiro and E. Lehtonen in [3]. They use Zhegalkin’s polynomials as <b>normal</b> <b>forms</b> for Boolean functions and describe the functions with essential arity gap equals 2. We use to instead Full <b>Conjunctive</b> <b>Normal</b> <b>Forms</b> of these polynomials which allows us to simplify the proofs and to obtain several combinatorial results concerning the Boolean functions with a given arity gap. The Full <b>Conjunctive</b> <b>Normal</b> <b>Forms</b> are also sum of conjunctions, in which all variables occur...|$|R
50|$|The n-variable parity {{function}} and its negation {{are the only}} Boolean functions for which all disjunctive <b>normal</b> <b>forms</b> have the maximal number of 2 n &minus; 1 monomials of length n and all <b>conjunctive</b> <b>normal</b> <b>forms</b> have the maximal number of 2 n &minus; 1 clauses of length n.|$|R
40|$|Key words Disjunctive and <b>conjunctive</b> <b>normal</b> <b>forms,</b> BL-logic, fuzzy {{relation}} In this work, {{we investigate}} {{a relationship between}} extensionality and continuity of fuzzy relations {{in the frame of}} BL-algebras. We found conditions when extensionality implies continuity and vice versa. Problem is formulated and solved algebraically. ...|$|R
5|$|Resolution, {{a method}} for {{combining}} pairs of constraints to make additional valid constraints, also leads to a polynomial time solution. The 2-satisfiability problems provide one of two major subclasses of the <b>conjunctive</b> <b>normal</b> <b>form</b> formulas that can be solved in polynomial time; the other of the two subclasses is Horn-satisfiability.|$|E
5|$|Instances of the 2-satisfiability problem are {{typically}} expressed as Boolean formulas {{of a special}} type, called <b>conjunctive</b> <b>normal</b> <b>form</b> (2-CNF) or Krom formulas. Alternatively, they may be expressed as a special type of directed graph, the implication graph, which expresses the variables of an instance and their negations as vertices in a graph, and constraints on pairs of variables as directed edges. Both {{of these kinds of}} inputs may be solved in linear time, either by a method based on backtracking or by using the strongly connected components of the implication graph.|$|E
25|$|A {{strengthening}} of this result was proved by Reisch by reducing quantified Boolean formula in <b>conjunctive</b> <b>normal</b> <b>form</b> to Hex played on arbitrary planar graphs. In computational complexity theory, {{it is widely}} conjectured that PSPACE-complete problems cannot be solved with efficient (polynomial time) algorithms. This result limits {{the efficiency of the}} best possible algorithms when considering arbitrary positions on boards of unbounded size, but it doesn't rule out the possibility of a simple winning strategy for the initial position (on boards of unbounded size), or a simple winning strategy for all positions on a board of a particular size.|$|E
40|$|In this paper, {{we present}} the {{representation}} theorem for fuzzy logic relations, introduce the disjunctive and <b>conjunctive</b> <b>normal</b> <b>forms</b> and formulate {{what is meant}} byanapproximation of continuous functions by appropriate FL-relations via defuzzi cation. The best approximation property for the certain choice of defuzzi cation has been established...|$|R
40|$|We {{investigate}} the Boolean functions with essential arity gap 2. We use Full <b>Conjunctive</b> <b>Normal</b> <b>Forms</b> instead of Zhegalkin's polynomials, which {{allow us to}} simplify the proofs and to obtain several combinatorial results, concerning the Boolean functions with a given arity gap. Comment: 12 pages, J. of Computing, Serdika, IMI, BAS, Sofi...|$|R
40|$|In this paper, {{we study}} logics of {{dependence}} on the propositional level. We prove that several interesting propositional logics of dependence, including propositional dependence logic, propositional intuitionistic dependence logic as well as propositional inquisitive logic, are expressively complete and have disjunctive or <b>conjunctive</b> <b>normal</b> <b>forms.</b> We provide deduction systems and prove the completeness theorems for these logics...|$|R
500|$|Formulas in {{this form}} are known as 2-CNF formulas. The [...] "2" [...] in this name stands {{for the number of}} literals per clause, and [...] "CNF" [...] stands for <b>conjunctive</b> <b>normal</b> <b>form,</b> a type of Boolean {{expression}} {{in the form of a}} conjunction of disjunctions. They are also called Krom formulas, after the work of UC Davis mathematician Melven R. Krom, whose 1967 paper was one of the earliest works on the 2-satisfiability problem.|$|E
500|$|A 2-satisfiability {{problem may}} be {{described}} using a Boolean expression with a special restricted form. It is a conjunction (a Boolean and operation) of clauses, where each clause is a disjunction (a Boolean or operation) of two variables or negated variables. The variables or their negations appearing in this formula are known as literals. For example, the following formula is in <b>conjunctive</b> <b>normal</b> <b>form,</b> with seven variables, eleven clauses, and 22 literals: ...|$|E
500|$|His 1978 paper [...] "Renaming {{a set of}} clauses as a Horn set" [...] {{addressed}} the Boolean satisfiability problem, of determining whether a logic formula in <b>conjunctive</b> <b>normal</b> <b>form</b> can be made true by a suitable assignment of its variables. In general, these problems are hard, {{but there are two}} major subclasses of satisfiability for which polynomial time solutions are known: 2-satisfiability (where each clause of the formula has two literals) and Horn-satisfiability (where each clause has at most one positive literal). Lewis expanded the second of these subclasses, by showing that the problem can still be solved in polynomial time ...|$|E
40|$|This is the report-version of a mini-series of two {{articles}} on the foundations of satisfiability of <b>conjunctive</b> <b>normal</b> <b>forms</b> with non-boolean variables, to appear in Fundamenta Informaticae, 2011. These two parts are here bundled in one report, each part yielding a chapter. Generalised <b>conjunctive</b> <b>normal</b> <b>forms</b> are considered, allowing literals of the form "variable not-equal value". The first part sets the foundations for the theory of autarkies, with emphasise on matching autarkies. Main results concern various polynomial time results in dependency on the deficiency. The second part considers translations to boolean clause-sets and irredundancy as well as minimal unsatisfiability. Main results concern classification of minimally unsatisfiable clause-sets and the relations to the hermitian rank of graphs. Both parts contain also discussions of many open problems. Comment: 91 pages, to appear in Fundamenta Informaticae, 2011, as Constraint satisfaction problems in clausal form I: Autarkies and deficiency, Constraint satisfaction problems in clausal form II: Minimal unsatisfiability and conflict structur...|$|R
40|$|The paper {{continues}} a {{study of}} extensional formulas and their representation by <b>normal</b> <b>forms.</b> The notion of extensional formula is extended to the case when extensionality is considered {{with respect to a}} binary reflexive relation. It has been proved that extensional formulas can be represented by <b>normal</b> <b>forms</b> of infinite type and “approximated ” by <b>normal</b> <b>forms</b> of finite type. All proofs are given formally in fuzzy predicate BL-logic. Key words Disjunctive and <b>conjunctive</b> <b>normal</b> <b>forms,</b> BL-logic, fuzzy logic, extensionality, approximation...|$|R
40|$|The {{augmenting path}} {{technique}} of matching theory is extended by adding some colour. As an application a SAT decision procedure for <b>conjunctive</b> <b>normal</b> <b>forms</b> is obtained, yielding polynomial time SAT decision {{in case the}} difference c(F 0) Γ n(F 0) between the number c(F 0) of clauses and the number n(F 0) of variables for all subset F 0 ` F of the given clause-set F is "small. "...|$|R
500|$|Next to 2-satisfiability, {{the other}} major {{subclass}} of satisfiability problems that can be solved in polynomial time is Horn-satisfiability. In this class of satisfiability problems, the input is again a formula in <b>conjunctive</b> <b>normal</b> <b>form.</b> It can have arbitrarily many literals per clause but at most one positive literal. [...] found a generalization of this class, renamable Horn satisfiability, that can still be solved in polynomial time {{by means of an}} auxiliary 2-satisfiability instance. A formula is renamable Horn when it is possible to put it into Horn form by replacing some variables by their negations. To do so, Lewis sets up a 2-satisfiability instance with one variable for each variable of the renamable Horn instance, where the 2-satisfiability variables indicate whether or not to negate the corresponding renamable Horn variables.|$|E
2500|$|An {{instance}} of the 2-satisfiability problem, that is, a Boolean expression in <b>conjunctive</b> <b>normal</b> <b>form</b> with two variables or negations of variables per clause, may be transformed into an implication graph by replacing each clause [...] by the two implications ...|$|E
2500|$|A 2-satisfiability {{instance}} {{consists of}} a collection of Boolean variables and a collection of clauses, constraints on certain pairs of variables requiring those two variables to avoid certain combinations of values. [...] Usually such problems are expressed in <b>conjunctive</b> <b>normal</b> <b>form,</b> in which each clause is expressed as a disjunction and the whole set of constraints is expressed as a conjunction of clauses, such as ...|$|E
40|$|In this paper, {{we examine}} and compare De Morgan-, Kleene-, and Booleandisjunctive and <b>conjunctive</b> <b>normal</b> <b>forms</b> and {{consider}} {{their role in}} fuzzy settings. In particular, we describe <b>normal</b> <b>forms</b> and truth tables for classical fuzzy propositional logic and interval-valued fuzzy propositional logic that are completely analogous to those for Boolean propositional logic. Thus, determining logical equivalence of two expressions in fuzzy propositional logic is a …nite problem, and similarly for the interval-valued case. Turksen’s work on interval-valued fuzzy sets is reviewed {{in light of these}} results...|$|R
40|$|Abstract — In this paper, {{we examine}} and compare De Morgan-, Kleene-, and Boolean-disjunctive and <b>conjunctive</b> <b>normal</b> <b>forms</b> and {{consider}} {{their role in}} fuzzy settings. In particular, we show that there are <b>normal</b> <b>forms</b> and truth tables for classical fuzzy propositional logic and intervalvalued fuzzy propositional logic that are completely analogous to those for Boolean propositional logic. Thus, determining logical equivalence of two expressions in classical fuzzy propositional logic is a nite problem, and similarly for the intervalvalued case. Turksen's work on interval-valued fuzzy sets is examined {{in light of these}} results. I...|$|R
40|$|Abstract — Recently, {{there is}} a renewed {{interest}} in Automatic Test Pattern Generation (ATPG) based on Boolean Satisfiability (SAT). This results from the availability of very powerful SAT solvers that have been developed in the last few years. Studies have shown that SAT-based ATPG tools can clearly outperform classical approaches for hard-to-test faults. While the ATPG problem has to be solved on a circuit, SAT solvers work on <b>Conjunctive</b> <b>Normal</b> <b>Forms</b> (CNFs). In this paper the problem to efficiently generate a SAT instance from a circuit is studied. Experimental results on large industrial circuits show the efficiency of the approach. I...|$|R
2500|$|Karp showed {{each of his}} {{problems}} to be NP-complete by reducing another problem (already shown to be NP-complete) to that problem. [...] For example, he showed the problem 3SAT (the Boolean satisfiability problem for expressions in <b>conjunctive</b> <b>normal</b> <b>form</b> with exactly three variables or negations of variables per clause) to be NP-complete by showing how to reduce (in polynomial time) any instance of SAT to an equivalent instance of 3SAT. [...] (First you modify the proof of the Cook–Levin theorem, so that the resulting formula is in <b>conjunctive</b> <b>normal</b> <b>form,</b> then you introduce new variables to split clauses with more than 3 atoms. [...] For example, the clause (A ∨ B ∨ C ∨ D) can {{be replaced by the}} conjunction of clauses (A ∨ B ∨ Z) ∧ (¬Z ∨ C ∨ D), where Z is a new variable which will not be used anywhere else in the expression. [...] Clauses with fewer than 3 atoms can be padded; for example, A can be replaced by (A ∨ A ∨ A), and [...] (A ∨ B) can be replaced by (A ∨ B ∨ B) [...] ).|$|E
2500|$|The {{exponential}} time hypothesis (ETH) is that 3SAT, the satisfiability problem of Boolean formulas in <b>conjunctive</b> <b>normal</b> <b>form</b> with at most three literals per clause and with n variables, cannot be solved in time 2o(n). More precisely, the {{hypothesis is that}} there is some absolute constant [...] such that 3SAT cannot be decided in time 2cn by any deterministic Turing machine. With m denoting the number of clauses, ETH is equivalent to the hypothesis that kSAT cannot be solved in time 2o(m) for any integer [...] The {{exponential time}} hypothesis implies P ≠ NP.|$|E
2500|$|A {{solution}} {{to such an}} instance is an assignment of truth values to the variables that satisfies all the clauses, or equivalently that causes the <b>conjunctive</b> <b>normal</b> <b>form</b> expression for the instance to become true when the variable values are substituted into it. [...] The family of all solutions has a natural structure as a median algebra, where the median of three solutions is formed by choosing each truth value to be the majority function of the values in the three solutions; it is straightforward to verify that this median solution cannot violate any of the clauses. [...] Thus, these solutions form a median graph, in which the neighbor of each solution is formed by negating a set of variables that are all constrained to be equal or unequal to each other.|$|E
40|$|Inductive Logic Programming {{considers}} {{almost exclusively}} universally quantified theories. To add expressiveness {{we should consider}} general prenex <b>conjunctive</b> <b>normal</b> <b>forms</b> (PCNF) with existential variables. ILP mostly uses learning with refinement operators. To extend refinement operators to PCNF, we should first extend substitutions to PCNF. If one substitutes an existential variable in a formula, one often obtains a specialization rather than a generalization. In this article we define substitutions to specialise a given PCNF and a weakly complete downward refinement operator. Based on this operator, we have implemented a simple learning system PCL on some type of PCNF. status: publishe...|$|R
40|$|Mathematical {{definitions}} of polyhedrons and perceptron networks are discussed. The formalization of polyhedrons {{is done in}} a rather traditional way. For networks, previously proposed systems are developed. Perceptron networks in disjunctive <b>normal</b> <b>form</b> (DNF) and <b>conjunctive</b> <b>normal</b> <b>forms</b> (CNF) are introduced. The main theme is that single output perceptron neural networks and characteristic functions of polyhedrons {{are one and the}} same class of functions. A rigorous formulation and proof that three layers suffice is obtained. The various constructions and results are among several steps required for algorithms that replace incremental and statistical learning with more efficient, direct and exact geometric methods for calculation of perceptron architecture and weights. Comment: 17 pages, 0 figure...|$|R
40|$|We {{consider}} {{the question of}} the existence of variables with few occurrences in boolean <b>conjunctive</b> <b>normal</b> <b>forms</b> (clause-sets). Let mvd(F) for a clause-set F denote the minimal variable-degree, the minimum of the number of occurrences of variables. Our main result is an upper bound mvd(F) nM(surp(F)) must have a non-trivial autarky (so clauses can be removed satisfiability-equivalently by an assignment satisfying some clauses and not touching the other clauses). It is open whether such an autarky can be found in polynomial time. As a future application we discuss the classification of minimally unsatisfiable clause-sets depending on the deficiency. Comment: 14 pages. Revision contains more explanations, and more information regarding the sharpness of the boun...|$|R
50|$|The first {{example is}} also in <b>conjunctive</b> <b>normal</b> <b>form</b> and the last two are in both <b>conjunctive</b> <b>normal</b> <b>form</b> and {{disjunctive}} normal form, but the second example is in neither.|$|E
5000|$|Using {{the laws}} of Boolean algebra, every propositional logic formula can be {{transformed}} into an equivalent <b>conjunctive</b> <b>normal</b> <b>form,</b> which may, however, be exponentially longer. For example, transforming the formula(x1∧y1) ∨ (x2∧y2) ∨ ... ∨ (xn∧yn)into <b>conjunctive</b> <b>normal</b> <b>form</b> yields ...|$|E
5000|$|Query {{expansion}}. A 2012 {{study by}} Zhao and Callan using expert created manual <b>Conjunctive</b> <b>normal</b> <b>form</b> queries {{has shown that}} searchonym expansion in the Boolean <b>conjunctive</b> <b>normal</b> <b>form</b> is much {{more effective than the}} traditional bag of word expansion e.g. Rocchio expansion.|$|E
5000|$|SAT is trivial if the {{formulas}} {{are restricted}} to those in disjunctive <b>normal</b> <b>form,</b> that is, they are disjunction of conjunctions of literals. Such a formula is indeed satisfiable {{if and only if}} at least one of its conjunctions is satisfiable, and a conjunction is satisfiable if and only if it does not contain both x and NOT x for some variable x. This can be checked in linear time. Furthermore, if they {{are restricted to}} being in full disjunctive <b>normal</b> <b>form,</b> in which every variable appears exactly once in every conjunction, they can be checked in constant time (each conjunction represents one satisfying assignment). But it can take exponential time and space to convert a general SAT problem to disjunctive normal form; for an example exchange [...] "∧" [...] and [...] "∨" [...] in the above exponential blow-up example for <b>conjunctive</b> <b>normal</b> <b>forms.</b>|$|R
40|$|An all-solution Boolean satisfiability (SAT) solver aims to {{find all}} the {{satisfying}} assignments. In this paper, we introduce ASIG, an all-solution solver for satisfiability problems. ASIG operates on <b>conjunctive</b> <b>normal</b> <b>forms</b> (CNFs) instead of circuits or hybrid representations as most other all-solution solvers did. ASIG prevents the same solution from being found again by creating a blocking clause from a solution and adding it into the clause database. To ensure efficiency, ASIG embeds an incremental mechanism into zchaff [1] to avoid starting search from scratch in searching for a new solution. ASIG also implements some other blocking clause management strategies such as earlier termination and blocking clause merging to further improve efficiency. All our work is tested and analyzed {{on a set of}} CNF benchmarks...|$|R
40|$|Due to {{the rapidly}} growing size of {{integrated}} circuits, {{there is a need}} for new algorithms for Automatic Test Pattern Generation (ATPG). While classical algorithms reach their limit, there have been recent advances in algorithms to solve Boolean Satisfiability (SAT). Because Boolean SAT solvers are working on <b>Conjunctive</b> <b>Normal</b> <b>Forms</b> (CNF), the problem has to be transformed. During transformation, relevant information about the problem might get lost and therefore is not available in the solving process. In the following we briefly motivate the problem and provide the latest developments in the field. The technique was implemented and experimental results are presented. The approach was combined with the ATPG framework of NXP Semiconductors. Significant improvements in overall performance and robustness are demonstrated...|$|R
