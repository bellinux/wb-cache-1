13|425|Public
50|$|The {{fact that}} there exist {{increasing}} sequences without least upper bounds may seem strange to those accustomed to thinking about the semantics of sequential programs. It may help {{to point out that}} the increasing sequences produced by sequential programs all have least upper bounds. Indeed, the partial computations that can be produced by sequential <b>computation</b> <b>form</b> an ω-complete subdomain of the domain of Actor computations Diagrams. An informal proof follows.|$|E
40|$|Handbook [...] Teacher's {{manual for}} administering, scoring and {{interpreting}} : grades 13 - 14 [...] Science form 1 A [...] Science form 2 A [...] Science form 3 A [...] Science form 4 A [...] Mathematics basic concepts form 1 A [...] Mathematics basic concepts form 2 A [...] Mathematics basic concepts form 3 A [...] Mathematics basic concepts form 4 A [...] Mechanics of writing 2 A [...] Mechanics of writing 3 A [...] Mechanics of writing 4 A [...] Mathematics <b>computation</b> <b>form</b> 2 A [...] Mathematics <b>computation</b> <b>form</b> 3 A [...] Mathematics <b>computation</b> <b>form</b> 4 A [...] English expression form 1 A [...] English expression form 2 A [...] English expression form 3 A [...] English expression form 4 A [...] Social studies form 1 A [...] Social studies form 2 A [...] Social studies form 3 A [...] Social studies form 4 A - Reading form 1 A [...] Reading form 2 A [...] Reading form 3 A [...] Reading form 4...|$|E
40|$|DNA {{computing}} {{is a new}} <b>computation</b> <b>form</b> {{based on}} DNA biochemical reactions, which is mainly composed of sticker and splicing computation models. In this work, a microfluidic chip-based approach was established for splicing model-based DNA computing. A finite automaton with two input symbols (a, b) and three states (S 0, S 1, and S 2) was applied in the pattern recognition for isosceles triangles. The DNA computation processes of automaton were realized through DNA digestion, ligation, DNA separation, and detection on the microfluidic chip. The established approach is efficient, controllable, and easy to integrate, which paves {{the way for the}} building of complete biomolecular computers in the future...|$|E
5000|$|In his 1981 dissertation, Clinger {{showed how}} {{sequential}} <b>computations</b> <b>form</b> a subdomain of concurrent computations: ...|$|R
5000|$|... #Subtitle level 3: Sequential <b>computations</b> <b>form</b> an ω-complete {{subdomain}} of {{the domain}} of Actor computations ...|$|R
40|$|Numerical <b>computations</b> <b>form</b> an {{essential}} part of almost any real-world program. Traditional approaches are restricted domains isomorphic to N, more recent works study termination of integer computations. Termination of computations involving real numbers is cumbersome and counter-intuitive due to rounding errors and implementation conventions. We present a novel technique that allows us to prove termination of such computations. Our approach extends the previous work on termination of integer computations...|$|R
40|$|The {{design of}} control, {{estimation}} or diagnosis algorithms most often assumes that all available process variables represent the system {{state at the}} same instant of time. However, this is never true in current network systems, because of the unknown deterministic or stochastic transmission delays introduced by the communication network. During the diagnosing stage, this will often generate false alarms. Under nominal operation, the different transmission delays associated with the variables that appear in the <b>computation</b> <b>form</b> produce discrepancies of the residuals from zero. A technique aiming at the minimisation of the resulting false alarms rate, that is based on the explicit modelling of communication delays and on their best-case estimation is propose...|$|E
40|$|Abstract:- We {{present in}} this article a new {{approach}} for multilayer perceptrons ’ training. It {{is based on the}} utilization of parallelism and in the exploration of the inherent competition of this <b>computation</b> <b>form.</b> Multiple copies of the network are trained at the same time, and competitive strategies are used to speed up the convergence of the backpropagation algorithm. Each copy is initialized with a different matrix of synaptic gains, thus allowing a larger exploration of the parameters space and a larger possibility to avoid the local minimums on the error surface. The parallel tasks cooperate with each other to get benefit from the best results. The presented results are sharply superior compared to those obtained with the parallel algorithms published in the literature. Key-words:- Backpropagation, Parallel, competitive strategies...|$|E
40|$|Modern {{software-based}} robot {{control systems}} are built upon control schemes relying on {{descriptions of the}} robot's dynamical motion. This work develops a general purpose methodology to support the robot control design engineer in the whole modeling process. This comprises robot model specification, automatical generation or manual coding of executable multibody dynamics algorithms and integration of these operational robot models in an evolving robot control software architecture. A new object-oriented paradigm for the precise description of the mechanical robot components and the desired computations, a new extension of the mathematical framework of spatial operators for derivtion of dynamics algorithms and a dataflow-driven model of <b>computation</b> <b>form</b> {{the basis of a}} new object-oriented class hierarchy to consolidate all required model computations. Examples of real-world industrial and scientific control applications, e. g., path planning, calibration, and trajectory optimization, motivate the range of possible applications...|$|E
40|$|AbstractParallel {{algorithms}} {{for evaluating}} arithmetic expressions generally assume the <b>computation</b> tree <b>form</b> {{to be at}} hand. The <b>computation</b> tree <b>form</b> can be generated within the same resource bounds as the parenthesis matching problem can be solved. We provide a new cost optimal parallel algorithm for the latter problem, which runs in time O(log n) using O(n/log n) processors on an erew pram. We also prove that the algorithm is the fastest possible independently {{of the number of}} processors available...|$|R
40|$|Static analysis, proceedingsNumerical <b>computations</b> <b>form</b> an {{essential}} part of almost any real-world program. Traditional approaches to termination of logic programs are restricted to domains isomorphic to N, more recent works study termination of integer computations. Termination of computations involving real numbers is cumbersome and counter-intuitive due to rounding errors and implementation conventions. We present a novel technique that allows us to prove termination of such computations. Our approach extends the previous work on termination of integer computations. status: publishe...|$|R
50|$|Trace monoids are {{commonly}} used to model concurrent <b>computation,</b> <b>forming</b> the foundation for process calculi. They are the object of study in trace theory. The utility of trace monoids {{comes from the fact}} that they are isomorphic to the monoid of dependency graphs; thus allowing algebraic techniques to be applied to graphs, and vice versa. They are also isomorphic to history monoids, which model the history of computation of individual processes in the context of all scheduled processes on one or more computers.|$|R
40|$|Abstract. Higher-order model {{composition}} can {{be employed}} as a mechanism for scalable model construction. By creating a description that manipulates model fragments as first-class objects, designers ’ work of model creation and maintenance can be greatly simplified. In this paper, we present our approach to higher-order model composition based on model transformation. We define basic transformation rules to operate on the graph structures of actor models. The composition of basic transformation rules with heterogeneous models of <b>computation</b> <b>form</b> complex transformation systems, which we use to construct large models. We argue that our approach is more visual than the traditional approaches using textual model descriptions. It also {{has the advantage of}} allowing to dynamically modify models and to execute them on the fly. Our arguments are supported by a concrete example of constructing a distributed model of arbitrary size. ...|$|E
40|$|Efforts {{to develop}} a {{mathematics}} curriculum that {{meets the needs of}} a modern society are reflected in reform recommendations across the developed world. A common requirement is for students to understand the calculation procedures they are taught and to develop ‘number sense’. This paper will analyse students ’ strategies for calculating in the USA, England and the Netherlands and consider the way these relate to curriculum priorities. Traditional approaches have emphasised a place value approach to calculations, often modelled on base ten materials, with students taught a standard vertical algorithm. Recent developments emphasise a more thinking approach based on ‘number sense’. In the US Standards ‘understanding number and operations, developing number sense, and gaining fluency in arithmetic <b>computation</b> <b>form</b> the core of mathematics’ in the elementary grades ’ (NCTM, 2003 : 1). The National Numeracy Strategy in England (DfEE, 1998) proposes more emphasis on mental strategies with delayed introduction of standard algorithms. Students are expected ‘to understand ’ the four operations and relationships among them and to ‘use mental methods if th...|$|E
40|$|Data {{stored in}} {{individual}} autonomous databases often {{needs to be}} combined and interrelated. For example, in the Inland Water (IW) environment monitoring domain, the spatial and temporal variation of measurements of different water quality indicators stored in different databases are of interest. Data from multiple data sources is more complex to combine {{when there is a}} lack of metadata in a <b>computation</b> <b>form</b> and when the syntax and semantics of the stored data models are heterogeneous. The main types of information retrieval (IR) requirements are query transparency and data harmonisation for data interoperability and support for multiple user views. A combined Semantic Web based and Agent based distributed system framework has been developed to support the above IR requirements. It has been implemented using the Jena ontology and JADE agent toolkits. The semantic part supports the interoperability of autonomous data sources by merging their intensional data, using a Global-As-View or GAV approach, into a global semantic model, represented in DAML+OIL and in OWL. This is used to mediate between different local databas...|$|E
40|$|Abstract. Numerical <b>computations</b> <b>form</b> an {{essential}} part of almost any real-world program. Traditional approaches to termination of logic programs are restricted to domains isomorphic to (N,>), more recent works study termination of integer computations where the lack of well-foundness of the integers has to be taken into account. Termination of computations involving floating point numbers can be counter-intuitive due to rounding errors and implementation conventions. We present a novel technique that allows us to prove termination of such computations. Our approach extends the previous work on termination of integer computations...|$|R
5000|$|... #Subtitle level 2: Human-based <b>computation</b> as a <b>form</b> {{of social}} {{organization}} ...|$|R
40|$|The {{accuracy}} of the DLR structured and unstructured computational fluid dynamic (CFD) codes in predicting aircraft forces and moments on a wing-body configuration at transonic speeds is investigated. The <b>computations</b> <b>form</b> {{the contribution of the}} DLR and Airbus Deutschland to the AIAA CFD Drag Prediction Workshop in June 2001. Using a combination of a high quality grid, low levels of artificial dissipation and an advanced turbulence model, the structured code (FLOWer) was able to both qualitatively and quantitativele predict the experimentally measured drag, lift and pitching moments. In its current implementation the unstructured code (TAU) was found to be less accurate in predicting forces and moments, although qualitatively the results were good...|$|R
40|$|This {{article was}} {{published}} in the International Journal of Production Research [© Taylor & Francis] and the definitive version is available at: [URL] related to knowledge sharing in design and manufacture, for supporting automated decision-making procedures, are associated with the inability to communicate the full meaning of concepts and their intent within and across system boundaries. To remedy these issues, {{it is important that the}} explicit structuring of semantics, i. e., meaning in <b>computation</b> <b>form,</b> is first performed and that these semantics become sharable across systems. This paper proposes an expressive (heavyweight) Common Logic-based ontological foundation as a basis for capturing the meaning of generic feature-oriented design and manufacture concepts. This ontological foundation serves as a semantic ground over which design and manufacture knowledge models can be configured in an integrity-driven way. The implications involved in the specification of the ontological foundation are discussed alongside the types of mechanisms that allow knowledge models to be configured. A test case scenario is then analysed in order to further support and verify the researched approach...|$|E
40|$|Abstract—The event stream {{model of}} {{computation}} {{has a wide}} range of applications, e. g., computer system monitoring, physical environment sensing/surveillance, and stock trade monitoring. Sliding windows are widely used to facilitate effective event stream processing. However, it is greatly challenged when the event sources are distributed and asynchronous. One important technique to cope with the asynchrony is to utilize that the meaningful snapshots of an asynchronous <b>computation</b> <b>form</b> a distributive lattice. It thus becomes the central challenge whether this lattice structure still preserves and how to maintain it at runtime, when we restrict our attention to events within sliding windows. To address this challenge, we first prove that the snapshots of the asynchronous event streams within the sliding windows form a convex distributive lattice (denoted by Lat-Win). This enables us to easily integrate existing predicate specification and detection techniques, to express and monitor properties of our concern over asynchronous event streams. Then we propose an algorithm to maintain Lat-Win at runtime. The proposed scheme is evaluated in a context-aware smart office scenario, where activities of the user can be recognized by monitoring multiple streams of sensed events. The Lat-Win algorithm is implemented on the open-source context-aware middleware we developed. The evaluation results first show the advantage of adopting sliding windows over asynchronous event streams. Then they show the performance of detecting specified predicates within Lat-Win, with dynamic changes in the computing environment. Index Terms—Sliding window, lattice of snapshots, predicate detection, asynchronous event streams Ç...|$|E
40|$|The event stream {{model of}} {{computation}} {{has a wide}} range of applications, e. g., computer system monitoring, physical environment sensing/surveillance, and stock trade monitoring. Sliding windows are widely used to facilitate effective event stream processing. However, it is greatly challenged when the event sources are distributed and asynchronous. One important technique to cope with the asynchrony is to utilize that the meaningful snapshots of an asynchronous <b>computation</b> <b>form</b> a distributive lattice. It thus becomes the central challenge whether this lattice structure still preserves and how to maintain it at runtime, when we restrict our attention to events within sliding windows. To address this challenge, we first prove that the snapshots of the asynchronous event streams within the sliding windows form a convex distributive lattice (denoted by Lat-Win). This enables us to easily integrate existing predicate specification and detection techniques, to express and monitor properties of our concern over asynchronous event streams. Then we propose an algorithm to maintain Lat-Win at runtime. The proposed scheme is evaluated in a context-aware smart office scenario, where activities of the user can be recognized by monitoring multiple streams of sensed events. The Lat-Win algorithm is implemented on the open-source context-aware middleware we developed. The evaluation results first show the advantage of adopting sliding windows over asynchronous event streams. Then they show the performance of detecting specified predicates within Lat-Win, with dynamic changes in the computing environment. Department of Computin...|$|E
5000|$|Ultimately, in Problem 11.7-1 Minsky {{observes that}} many bases of <b>computation</b> can be <b>formed</b> {{from a tiny}} collection: ...|$|R
40|$|Abstract. We report {{efficient}} implementation {{techniques for}} FFT-based dense multivariate polynomial arithmetic over finite fields, targeting multi-cores. We have extended a preliminary study dedicated to polynomial multiplication and obtained {{a complete set}} of efficient parallel routines in Cilk++ for polynomial arithmetic such as normal <b>form</b> <b>computation.</b> Since bivariate multiplication applied to balanced data is a good kernel for these routines, we provide an in-depth study on the performance and the cut-off criteria of our different implementations for this operation. We also show that, not only optimized parallel multiplication can improve the performance of higher-level algorithms such as normal <b>form</b> <b>computation</b> but also this composition is necessary for parallel normal <b>form</b> <b>computation</b> to reach peak performance on a variety of problems that we have tested...|$|R
40|$|AbstractWe {{study the}} problem of small denominators {{in the field of}} complex p-adic numbers Cp. We prove that, in fact, we can always obtain the {{estimate}} from below Dn(x) ≥ CAn, C(x), A(x) > 0, for the denominator Dn(x) which is used in the construction of a congugate map for a dynamical system f having the derivative x = f′(a) in the fixed point a. Moreover, we find (via a long chain of technical <b>computations)</b> <b>forms</b> of coefficients C(x) and A(x). These are complicated functions of x which depend on the relative position of x and psth roots of unity. Our result can be used to find radius of convergence for conjugate maps for Cp-analytic dynamical systems at neutral fixed points (or cycles) ...|$|R
40|$|We prove {{a strong}} variational formula for Lipschitz–Killing curvaturesof subanalytic sets. As corollaries, we reprove the Chern–Gauss–Bonnettheorem and higher Schläfli formulas. The {{proof of the}} variationalformula uses normal cycles of subanalytic sets and a new method allowinga {{reduction}} from the difficult singular geometry to <b>computations</b> withdifferential <b>forms...</b>|$|R
40|$|The {{purpose of}} this {{research}} was to assess students understanding of number sense and mental <b>computation</b> among <b>Form</b> One, Form Two, Form Three and Form Four students. A total of 1756 students, ages ranging from / 2 to 17 years, from thirteen schools in Selangor participated in this study. A majority (74. 9...|$|R
40|$|Numerical <b>computations</b> <b>form</b> an {{essential}} part of almost any real-world program. Clearly, in order for a termination analyser to be of practical use it should contain a mechanism for inferring termination of such computations. However, this topic attracted less attention of the research community. In this work we concentrate on automatic termination inference for logic programs depending on numerical computations. Dershowitz et al. [8] showed that termination of general numerical computations, for instance on floating point numbers, may be counter-intuitive, i. e., the observed behaviour does not necessarily coincide with the theoretically expected one. Thus, we restrict ourselves to integer computations only. While discussing termination of integer computations the following question should be asked: what conditions on the queries should be assumed, such that the queries will terminate. We refer to this question as the termination inference [...] ...|$|R
40|$|Linear <b>computations</b> <b>form</b> an {{important}} type of computation that {{is widely used}} in video and image processing, DSP, control, communications, and many other applications. With the ongoing rapid proliferation of portable computation and communication, power minimization has been gaining importance as a crucial design metric. However, while approaches for optimal optimization of throughput and joint optimization of latency and throughput in linear computations are available, until now no approach has been proposed which efficiently optimizes power. We introduce two approaches for power minimization in linear computations using transformations. First we show how unfolding combined with the procedure for maximally fast implementation of linear computations reduces power in single processor and multiprocessor implementations by factors 2. 7 and 15. 6 respectively, the former with no hardware penalty. For the custom ASIC implementation even higher improvements are achievable using the second tran [...] ...|$|R
40|$|The {{standard}} {{interpretation of}} the concept of “type ” in programming languages views a type as a predicate over the language’s set of values. Values are passed among named variables. In addition to type, declarations of variables often specify additional characteristics that belong to the variable itself, but are not transferred by assignment. In this paper we informally explore advantages to be gained by considering an intermediate characterization in which the history of the <b>computation</b> <b>forms</b> part of the declarable characteristics of variables – assignable like the value but not characteristic of the value. This non-standard interpretation of types provides the basis for neatly solving a number of awkward issues present by current object-oriented languages and their definitions. Among these are reconciliation of a generic-function model with the dynamic assurance of target-directed models, integration of structural and nominal typing, and dynamic function augmentation...|$|R
40|$|The high {{throughput}} computation {{requirements of}} real-time {{digital signal processing}} (dsp) systems usually dictate hardware intensive solutions. Often attendant to hardware approaches are problems of high development costs, slow turnaround, susceptibility to errors, and difficulty in testing and debugging, all of which tend to inhibit the rapid implementation of such systems. Research is underway into the synthesis of application specific hardware to aid the system designer by automatically generating hardware that is "correct by construction". The creation of configurable, pre-fabricated hardware that has been designed for high speed <b>computations</b> <b>forms</b> part of this research and is the main topic of this thesis. This work contains a survey of some typical real-time dsp algorithms drawn from video and speech processing and summarizes the particular computation challenges posed by this class of algorithms. Currently available hardware choices and their trade-offs and limitations are discu [...] ...|$|R
40|$|Stencil <b>computations</b> <b>form</b> the performance-critical core of many applications. Tiling and parallelization are two {{important}} optimizations {{to speed up}} stencil computations. Many tiling and parallelization strategies are applicable to a given stencil computation. The best strategy depends {{not only on the}} combination of the two techniques, but also on many parameters: tile and loop sizes in each dimension; computation-communication balance of the code; processor architecture; message startup costs; etc. The best choices can only be determined through design-space exploration, which is extremely tedious and error prone to do via exhaustive experimentation. We characterize the space of multi-level tilings and parallelizations for 2 D/ 3 D Gauss-Siedel stencil computation. A systematic exploration of a part of this space enabled us to derive a design which is up to a factor of two faster than the standard implementation. 1...|$|R
40|$|Linear <b>computations</b> <b>form</b> an {{important}} type of computation that {{is widely used}} in DSP and communications. We introduce two approaches for power minimization in linear computations using transformations. First we show how unfolding combined with the procedure for maximally fast implementation of linear computations reduces power in single processor and multiprocessor implementations by factors 2. 2 and 8 respectively. To accomplish this we exploit a newly identified property of unfolding whereby as a linear system is unfolded, the number of operations per sample at first decreases to reach a minimum and then begins to rise. For the custom ASIC implementation even higher improvements are achievable using the second transformational approach, which builds upon the unfolding based strategy of the first approach. We developed a method that combines the multiple constant multiplication (MCM) technique with the generalized Horner's scheme and unfolding {{in such a way}} that power is minimized...|$|R
40|$|Recently, {{an elegant}} and {{powerful}} architecture called the reconfigurable mesh {{has been proposed}} in the literature. In essence, a reconfigurable mesh consists of a mesh-connected architecture enhanced {{by the addition of}} a dynamic bus system whose configuration changes in response to computational and communication needs. In this paper we show that the reconfigurable mesh architecture can be exploited to yield very simple constant time algorithms to solve a number of important computational problems involving trees. Specifically, we address the problem of generating the <b>computation</b> tree <b>form</b> of an arithmetic expression, the problem of reconstructing a binary tree from its preorder and inorder traversals, and the problem of reconstructing an ordered forest from its preorder and postorder traversals. We show that with an input of size n, all these problems find constant-time solutions on a reconfigurable mesh of size n Θ n. Keywords: Arithmetic expressions, <b>computation</b> tree <b>forms,</b> b [...] ...|$|R
40|$|A graph {{coloring}} algorithm that immediatly colors the vertices {{taken from}} a list without looking ahead or changing colors already assigned is called an ione-line coloring algorithmj. We study in this paper on-line oriented coloring algorithms. Firstly, we investigate the First-Fit algorithm {{and we try to}} characterize the iFF -optimalj graphs that is the graphs for which there exists a linear ordering of the vertices such that the number of colors used by the First-Fit coloring algorithm is exactly the oriented chromatic number. In a second part, we consider on-line algorithms that construct H-colorings where H is an oriented given color-graph. We prove that the on-line oriented chromatic number of the family of bounded graphs is bounded. 1 Introduction There are several important reasons for studying on-line computation. The most commonly cited reason is that it corresponds naturally to the real world : past events cannot be reversed. Another reason is that on-line <b>computation</b> <b>forms</b> a [...] ...|$|R
40|$|Anyone who {{has studied}} {{parallel}} programming with Kahn's networks of processes and also systems theory or control theory has noticed a strong similarity between the two. For one thing, both use similar diagrams, often with feedback, to express <b>computations</b> <b>formed</b> as compositions of incremental transforms. What is a mathematical basis for reconciling the two? Picard's theorem is a classical result {{in the theory of}} differential equations and integral equations. Kahn's theorem has similar renown in the theory of parallel programming, networks of processes, and stream processing. In this paper we clarify how these results are related, and show that Kahn's theorem and Picard's theorem are both special cases of a more general result. That we can do this may be surprising, since the foundations of the two theorems are quite different: metric function spaces and the fixed point theorem for contraction mappings in Picard's case, and complete partially ordered sets and the fixed point theorem for [...] ...|$|R
40|$|Schlipf (Schlipf 1995) {{proved that}} the Stable Logic Programming solves all NP {{decision}} problems. We extend Schlipf’s result to all search problems in the class NP. Moreover, we {{do this in a}} uniform way as defined in (Marek & Truszczyfiski 1999). Specifically, we show that there is a single DATALOG ~ program Pr ~ so that for every Turing machine T, every polynomial with nonnegative coedicients p, every positive integer n and an input cr of size at most n over a fixed alphabet E there is a polynomial-time encoding of the machine M and the input as an extensional database edbM,p,, so that there is a one-to-one correspondence between the stable models of edbM,p,, U P ~ and accepting computations of the machine M that reach the final state in at most p(n) steps. The decoding of <b>computations</b> <b>form</b> stable models is done in polynomial (in fact linear), time as well...|$|R
