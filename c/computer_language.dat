907|2552|Public
5|$|The opening credits of {{the film}} were {{produced}} by the CG director, Seichi Tanaka. Tanaka converted code in a <b>computer</b> <b>language</b> displayed in romanized Japanese letters to numbers before inserting them into the computer to generate the credits. The origin of this code is the names {{of the film}}'s staff as written in a <b>computer</b> <b>language.</b>|$|E
5|$|Academic {{computer}} scientists were generally uninterested in business applications when COBOL was created {{and were not}} involved in its design; it was (effectively) designed from the ground up as a <b>computer</b> <b>language</b> for business, with an emphasis on inputs and outputs, whose only data types were numbers and strings of text.|$|E
5|$|In 1981, the Japanese Ministry of International Trade and Industry {{set aside}} $850 {{million for the}} Fifth {{generation}} computer project. Their objectives were to write programs and build machines that could carry on conversations, translate languages, interpret pictures, and reason like human beings. Much {{to the chagrin of}} scruffies, they chose Prolog as the primary <b>computer</b> <b>language</b> for the project.|$|E
50|$|John Wainwright is a {{computer}} scientist, born in Australia, who has pioneered the development of pure object-based <b>computer</b> <b>languages.</b> He is the principal architect of two <b>computer</b> <b>languages,</b> ScriptX (1992-1996) and MaxScript (1996).|$|R
40|$|This essay weighs {{the notion}} that Web-based tag {{libraries}} represent the fifth generation of <b>computer</b> <b>languages.</b> A brief survey {{of the history of}} <b>computer</b> <b>languages</b> is provided as is an indication of why it is useful to conventionally categorize <b>computer</b> <b>languages</b> into “generations”. The essay argues that the current conventional ascription of generations is incorrect and that it should be replaced with one based on what the author terms “the principle of abstraction”. ...|$|R
5000|$|Dictionary for <b>Computer</b> <b>Languages,</b> Academic Press, London 1966 ...|$|R
5|$|The <b>Computer</b> <b>Language</b> Benchmarks Game {{compares the}} {{performance}} of implementations of typical programming problems in several programming languages. The submitted Perl implementations typically perform toward {{the high end of}} the memory-usage spectrum and give varied speed results. Perl's performance in the benchmarks game is typical for interpreted languages.|$|E
25|$|It can be {{implemented}} in a <b>computer</b> <b>language</b> using just a few lines of code.|$|E
25|$|Other times these programmers {{apply the}} rule of least power—they {{deliberately}} use a <b>computer</b> <b>language</b> that is not quite fully Turing-complete, often a language that guarantees that all subroutines are guaranteed to finish, such as Coq.|$|E
5000|$|Most {{general-purpose}} <b>computer</b> <b>languages</b> actually incorporate several specialized languages.|$|R
5000|$|... #Subtitle level 2: Realizations of the {{function}} in common <b>computer</b> <b>languages</b> ...|$|R
5000|$|Specialized <b>computer</b> <b>languages</b> {{that are}} often used to {{describe}} communication protocols.|$|R
25|$|In June 1977, Marc Blank, Bruce K. Daniels, Tim Anderson, and Dave Lebling {{began writing}} the {{mainframe}} version of Zork (also known as Dungeon), at the MIT Laboratory for Computer Science. The game was programmed in a <b>computer</b> <b>language</b> called MDL, {{a variant of}} LISP.|$|E
25|$|The <b>computer</b> <b>language</b> Ada, {{created on}} behalf of the United States Department of Defense, was named after Lovelace. The {{reference}} manual for the language was approved on 10 December 1980 and the Department of Defense Military Standard for the language, MIL-STD-1815, was given the number of the year of her birth.|$|E
25|$|Carl Sassenrath (born 1957 in California) is an {{architect}} of operating systems and computer languages. He brought multitasking to personal computers in 1985 {{with the creation}} of the Amiga Computer operating system kernel, and he is the designer of the REBOL <b>computer</b> <b>language,</b> REBOL/IOS collaboration environment, the Safeworlds AltME private messaging system, and other products. Carl is currently a Principal Engineer at Roku, Inc.|$|E
50|$|Consists of {{projects}} that test computer programs, algorithms, <b>computer</b> <b>languages,</b> and hardware.|$|R
50|$|Some <b>computer</b> <b>languages</b> provide {{built-in}} or library {{support for}} merging sorted collections.|$|R
5000|$|The {{realization}} of the function differs from one <b>computer</b> <b>languages</b> to another: ...|$|R
25|$|Haskell has an open, {{published}} specification, {{and multiple}} implementations exist. Its main implementation, the Glasgow Haskell Compiler (GHC), {{is both an}} interpreter and native-code compiler that runs on most platforms. GHC is noted for its rich type system incorporating recent innovations such as generalized algebraic data types and type families. The <b>Computer</b> <b>Language</b> Benchmarks Game also highlights its high-performance implementation of concurrency and parallelism.|$|E
25|$|A {{compiler}} is {{a computer}} program that translates one <b>computer</b> <b>language</b> into another. To improve the execution time of the resulting code, one of the techniques of compiler optimization is register allocation, where {{the most frequently used}} values of the compiled program are kept in the fast processor registers. Ideally, values are assigned to registers so that they can all reside in the registers when they are used.|$|E
25|$|Typical {{examples}} of large assembly language programs {{from this time}} are IBM PC DOS operating systems, the Turbo Pascal compiler and early applications such as the spreadsheet program Lotus 1-2-3. According to some industry insiders, the assembly language was the best <b>computer</b> <b>language</b> to use {{to get the best}} performance out of the Sega Saturn, a console that was notoriously challenging to develop and program games for. The 1993 arcade game NBA Jam is another example.|$|E
5000|$|Most modern <b>computer</b> <b>languages</b> {{do not use}} stropping, {{with two}} notable exceptions: ...|$|R
5|$|Although most <b>computer</b> <b>languages</b> are not {{designed}} with commands or libraries for matrices, {{as early as}} the 1970s, some engineering desktop computers such as the HP 9830 had ROM cartridges to add BASIC commands for matrices. Some <b>computer</b> <b>languages</b> such as APL were designed to manipulate matrices, and various mathematical programs can be used to aid computing with matrices.|$|R
40|$|Abstract—The {{occurrence}} of identifiers and references in <b>computer</b> <b>languages</b> {{is a common}} issue. The same applies for domain specific languages, whose popularity is increasing {{and there is a}} need for aid in their design process. This paper analyses the problem of identifiers and references in <b>computer</b> <b>languages.</b> Current methods use an imperative approach for supporting references in languages; therefore a language designer is required to manually write reference resolving. The method proposed in this paper perceives references and identifiers as language patterns, which can be specified in a declarative manner with much less knowledge about the problem of resolving references in <b>computer</b> <b>languages.</b> I...|$|R
25|$|The University of Calgary {{was ranked}} #1 in both Canada and North America by the QS World Universities Ranking (Top 50 under 50) and the Times Higher Education Rankings (Top 150 under 50) in 2016. Its {{enrollment}} is approximately 25,000 undergraduate and 5,000 graduate students with over 170,000+ alumni in 152 countries, including James Gosling, OC {{who invented the}} Java <b>computer</b> <b>language,</b> former Prime Minister of Canada, Stephen Harper, former Canadian astronaut Robert Thirsk, and Lululemon Athletica founder, Chip Wilson.|$|E
25|$|In 1980 Sassenrath {{graduated}} from the University of California, Davis with a B.S. in EECS (electrical engineering and computer science). During his studies he became interested in operating systems, parallel processing, programming languages, and neurophysiology. He was a teaching assistant for graduate <b>computer</b> <b>language</b> courses and a research assistant in neuroscience and behavioral biology. His uncle, Dr. Julius Sassenrath, headed the educational psychology department at UC Davis, and his aunt, Dr. Ethel Sassenrath, {{was one of the}} original researchers of THC at the California National Primate Research Center.|$|E
25|$|The {{languages}} of this class have great practical importance {{in computer science}} {{as they can be}} parsed much more efficiently than nondeterministic context-free languages. The complexity of the program and execution time of a deterministic pushdown automaton is vastly less than that of a nondeterministic one. In the naive implementation, the latter must make copies of the stack every time a nondeterministic step occurs. The best known algorithm to test membership in any context-free language is Valiant's algorithm, taking O(n2.378) time, where n is the length of the string. On the other hand, deterministic context-free languages can be accepted in O(n) time by an LR(k) parser. This is very important for <b>computer</b> <b>language</b> translation because many computer languages belong to this class of languages.|$|E
50|$|Query <b>languages</b> are <b>computer</b> <b>languages</b> {{used to make}} queries in {{databases}} and information systems.|$|R
5000|$|In {{the context}} of the World Wide Web, {{commonly}} encountered server-side <b>computer</b> <b>languages</b> include: ...|$|R
50|$|The ATE {{computer}} uses modern <b>computer</b> <b>languages</b> (like C, C++, Java, Python, LabVIEW or Smalltalk) {{with additional}} statements {{to control the}} ATE equipment through standard and proprietary application programming interfaces (API). Also some dedicated <b>computer</b> <b>languages</b> exists, like Abbreviated Test Language for All Systems (ATLAS). Automatic test equipment can also be automated using a test execution engine such as National Instruments' TestStand.|$|R
25|$|As a {{response}} to these problems, software has been developed that enables the full business process (as developed in the process design activity) to be defined in a <b>computer</b> <b>language</b> which can be directly executed by the computer. The process models can be run through execution engines that automate the processes directly from the model (e.g. calculating a repayment plan for a loan) or, when a step is too complex to automate, Business Process Modeling Notation (BPMN) provides front-end capability for human input. Compared to either of the previous approaches, directly executing a process definition can be more straightforward and therefore easier to improve. However, automating a process definition requires flexible and comprehensive infrastructure, which typically rules out implementing these systems in a legacy IT environment.|$|E
500|$|Mega Man was {{scored by}} Manami Matsumae (credited as [...] "Chanchacorin Manami"), who {{composed}} the music, created the sound effects, and programmed {{the data in}} three months, using a sound driver programmed by Yoshihiro Sakaguchi (credited as [...] "Yuukichan's Papa"). The musical notes were translated one by one into the <b>computer</b> <b>language.</b> Matsumae was challenged by the creative limits of three notes available at any one time, {{and when she was}} unable to write songs, she created the sound effects.|$|E
2500|$|... "APL {{demonstration}} 1975", YouTube, 2013, uploaded by Imperial College London; 1975 live {{demonstration of}} the <b>computer</b> <b>language</b> APL (A Programming Language) by Professor Bob Spence, Imperial College London.|$|E
50|$|Different typefaces, {{character}} encodings and <b>computer</b> <b>languages</b> use various encodings and glyphs for quotation marks.|$|R
5000|$|Baron, Naomi S., <b>Computer</b> <b>languages</b> : a {{guide for}} the perplexed, Garden City, N.Y.: Anchor Press/Doubleday, 1986.|$|R
40|$|In {{the digital}} economy era, {{business}} information systems {{students need to be}} knowledgeable of multiple <b>computer</b> programming <b>languages</b> {{in order to meet the}} requirements of computer literacy. This paper outlines the pedagogy of an innovated course of multiple <b>computer</b> <b>languages</b> for business students in the major of information systems. It discusses the rationale of why the proposed pedagogy is different from and better than traditional ones, and describes the approach to teaching this course. Based on our experiences in the past three years, it is concluded that a single course of multiple <b>computer</b> <b>languages</b> is useful and feasible...|$|R
