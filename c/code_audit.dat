17|118|Public
5|$|In a {{statement}} on its website, ReactOS cited differing legal definitions of what constitutes clean-room reverse engineering as a cause for the conflict. Some countries, including the United States, require that a reimplementation based on disassembled code must be written by someone other than the person having disassembled and examined the original code, whereas other countries allow both tasks to be performed by the same individual. Consequently, ReactOS clarified that its Intellectual Property Policy Statement requirements on clean room reverse engineering conform to US law. An internal source <b>code</b> <b>audit</b> was conducted to ensure that only clean room reverse engineering was used, and all developers were made to sign an agreement committing them {{to comply with the}} project's policies on reverse engineering. Contributors to its development were not affected by these events, and all access to the software development tools was restored shortly afterward. In September 2007, with the audit nearing completion, the audit status was removed from the ReactOS homepage. Though the audit was completed, specific details were not made public as it was only an internal effort to ensure compliance with the project's own policies.|$|E
5000|$|Making {{the source}} code comprehensible - the source code should be {{readable}} and understandable {{so it is}} approved in a <b>code</b> <b>audit.</b>|$|E
50|$|VeraCrypt is a fork of TrueCrypt. Security {{improvements}} {{have been}} implemented and {{issues raised by the}} TrueCrypt <b>code</b> <b>audit</b> just before the TrueCrypt developers retired have been addressed.|$|E
50|$|Software audits {{should not}} be {{confused}} with <b>code</b> <b>audits,</b> which are carried out on the source code of a software project.|$|R
5000|$|Protecode offers <b>code</b> <b>auditing</b> {{services}} to detect all open source and third party and associated licensing obligations before a product release or {{mergers and acquisitions}} [...]|$|R
2500|$|The default install {{is quite}} minimal, which the project states {{is to ensure}} novice users [...] "do not need to become {{security}} experts overnight", which fits with open-source and <b>code</b> <b>auditing</b> practices argued to be important elements of a security system.|$|R
50|$|On November 4, 2014, Adium scored 6 out of 7 {{points on}} the Electronic Frontier Foundation's secure {{messaging}} scorecard. It lost a point because {{there has not been}} a recent independent <b>code</b> <b>audit.</b>|$|E
5000|$|In November 2014, [...] "ChatSecure + Orbot" [...] {{received}} a top {{score on the}} Electronic Frontier Foundation's secure messaging scorecard, along with Cryptocat, TextSecure, [...] "Signal / RedPhone", Silent Phone, and Silent Text. [...] "Jitsi + Ostel" [...] scored 6 out of 7 points on the Electronic Frontier Foundation's secure messaging scorecard. They lost a point because {{there has not been}} a recent independent <b>code</b> <b>audit.</b>|$|E
50|$|A {{software}} <b>code</b> <b>audit</b> is {{a comprehensive}} analysis of source code in a programming project {{with the intent of}} discovering bugs, security breaches or violations of programming conventions. It {{is an integral part of}} the defensive programming paradigm, which attempts to reduce errors before the software is released. C and C++ source code is the most common code to be audited since many higher-level languages, such as Python, have fewer potentially vulnerable functions (e.g., functions that do not check bounds).|$|E
50|$|Coreboot {{is written}} {{primarily}} in C, {{with a small}} amount of assembly code. Choosing C as the primary programming language enables easier <b>code</b> <b>audits,</b> which results in improved security. The source code is released under the GNU GPL version 2 license.|$|R
5000|$|The default install {{is quite}} minimal, which the project states {{is to ensure}} novice users [...] "do not need to become {{security}} experts overnight", which fits with open-source and <b>code</b> <b>auditing</b> practices argued to be important elements of a security system.|$|R
40|$|Objective: Assess {{the effects}} of audit and {{feedback}} through a seminar on the obstetric summary and coding system {{with respect to the}} International Classification of Diseases, Tenth Revision (ICD- 10) and to determine factors associated with the error of summary and <b>coding</b> <b>audit.</b> Material and Method: The medical records of 1, 629 and 1, 337 women with obstetric conditions admitted to one provincial and nine district hospitals in Pattalung Province, Southern Thailand, were evaluated before and after a seminar, respectively. Result: The error of <b>coding</b> <b>audit</b> among cases with normal conditions and those with abnormal conditions after the seminar was reduced significantly from 40. 7 to 13. 0 % and from 81. 8 % to 61. 2 %, respectively (p < 0. 001). A seminar was a significant factor to reduce the errors of summary and coding. In contrast, the incorrect diagnosis summary, abnormal obstetric conditions and the district hospital were significantly asso-ciated with the increase of the coding errors. Conclusion: The audit and feedback was moderately effective on summary and <b>coding</b> <b>audit</b> but the clinical significance of error reduction in abnormal obstetric conditions was marginal, thus intensive intervention, evaluation, and monitoring are necessary...|$|R
50|$|On November 4, 2014, Mxit scored 0 out of 7 {{points on}} the Electronic Frontier Foundation's secure {{messaging}} scorecard. It lost points because communications are not encrypted in transit, communications are not encrypted with a key the provider doesn't have access to, users can't verify contacts' identities, past messages are not secure if the encryption keys are stolen, the code is not open to independent review, the security design is not properly documented, and {{there has not been}} a recent independent <b>code</b> <b>audit.</b>|$|E
50|$|Since the {{software}} which runs on baseband processors is usually proprietary, {{it is impossible}} to perform an independent <b>code</b> <b>audit.</b> By reverse engineering some of the baseband chips, researchers have found security vulnerabilities {{that could be used to}} access and modify data on the phone remotely. In March 2014, makers of the free Android derivative Replicant announced they have found a backdoor in the baseband software of Samsung Galaxy phones that allows remote access to the user data stored on the phone.|$|E
5000|$|On November 4, 2014, BlackBerry Messenger scored 1 out of 7 {{points on}} the Electronic Frontier Foundation's [...] "Secure Messaging Scorecard". It lost points because {{communications}} are not encrypted with a key the provider doesn't have access to (i.e. communications are not end-to-end encrypted), users can't verify contacts' identities, past messages are not secure if the encryption keys are stolen (i.e. the app does not provide forward secrecy), the code is not open to independent review (i.e. the code is not open source), the security design is not properly documented, and {{there has not been}} a recent independent <b>code</b> <b>audit.</b>|$|E
40|$|An {{integrated}} set of FORTRAN {{tools that}} are commercially available is described. The basic purpose of various tools is summarized and their economic impact highlighted. The areas addressed by these tools include: <b>code</b> <b>auditing,</b> error detection, program portability, program instrumentation, documentation, clerical aids, and quality assurance...|$|R
50|$|The auditor is obliged by the Church's {{doctrine}} {{to maintain}} a strict code of conduct, called the Auditor's <b>Code.</b> <b>Auditing</b> {{is said to be}} successful only when the auditor conducts himself in accordance with the Code. A violation of the Auditor's Code is considered a high crime under Scientology policy.|$|R
50|$|According to its website, Core Security's {{research}} department, Core Labs, conducts {{research in}} system vulnerabilities, cyber attack planning and simulation, source <b>code</b> <b>auditing</b> and cryptography. Core Labs publishes security advisories, technical papers, project information and shared software tools for public use, with its researchers participating in IT security research conferences including the Black Hat Briefings.|$|R
50|$|In a {{statement}} on its website, ReactOS cited differing legal definitions of what constitutes clean-room reverse engineering as a cause for the conflict. Some countries, including the United States, require that a reimplementation based on disassembled code must be written by someone other than the person having disassembled and examined the original code, whereas other countries allow both tasks to be performed by the same individual. Consequently, ReactOS clarified that its Intellectual Property Policy Statement requirements on clean room reverse engineering conform to US law. An internal source <b>code</b> <b>audit</b> was conducted to ensure that only clean room reverse engineering was used, and all developers were made to sign an agreement committing them {{to comply with the}} project's policies on reverse engineering. Contributors to its development were not affected by these events, and all access to the software development tools was restored shortly afterward. In September 2007, with the audit nearing completion, the audit status was removed from the ReactOS homepage. Though the audit was completed, specific details were not made public as it was only an internal effort to ensure compliance with the project's own policies.|$|E
40|$|Fuzzy logic {{membership}} sets used {{to classify}} generated code blocks. The proposed fuzzy sets aim to automate reasoning {{based on the}} analysis findings, similarly to a <b>code</b> <b>audit</b> process: (i) Severity: Values quantifying {{the impact of a}} logical error, with respect to how it affects the AUT’s execution flow and (ii) Vulnerability: quantifying the likelihood of a logical error and how dangerous it is. (iii) Criticality: The final, calculated risk value assigned for each variable...|$|E
40|$|Zero-sized heap {{allocations}} vulnerability analysis In this article, {{we discuss}} {{a source of}} security vulnerabilities related to zero-sized heap allocations. We present a feasibility study to show {{the use of a}} theorem prover based extended static checker to help <b>code</b> <b>audit</b> to find these vulnerabilities. We employed this tool to uncover around 10 local and remote untrusted code execution vulnerabilities in three core OS components. We highlight the benefits, the challenges faced and outstanding problems to enable wider use. Additional manual code review of remotely exposed software suggests that zero and near-zero allocations are particularly difficult to handle for developers. ...|$|E
40|$|Abstract. Both proofs {{and trust}} {{relations}} {{play a role}} in security decisions, in particular in determining whether to execute a piece of code. We have developed a language, called BCIC, for policies that combine proofs and trusted assertions about code. In this paper, using BCIC, we suggest an approach to <b>code</b> <b>auditing</b> that bases auditing decisions on logical policies and tools. ...|$|R
40|$|The {{candidate}} {{confirms that}} the work submitted is his own and the appropriate credit has been given where reference has been mad {{to the work of}} others. I understand that failure to attribute material which is obtained from another source may be considered as plagiarism. (Signature of student) [...] Summary This project is to develop a tool for source <b>code</b> <b>auditing</b> for security. The tool detects the potential SQL injection within Java servlets. The project also provides analysis of the existing tools for source <b>code</b> <b>auditing</b> for security. The project development includes research as well as software development. The research considers the existing tools showing their analysis techniques (static/dynamic), strengths and weaknesses. It also, discusses some examples and experiments of the existing tools. The software development is to build a prototype of an auditing tool for Java servlet source code for potential SQL injection. The development approach used in this development is constructed to fulfil this software development’s needs. The development uses Java regula...|$|R
40|$|As virtual {{machines}} {{become increasingly}} commonplace {{as a method}} of separating hostile or hazardous code from commodity systems, the potential security exposure from implementation flaws has increased dramatically. This paper investigates the state of popular virtual machine implementations for x 86 systems, employing a combination of source <b>code</b> <b>auditing</b> and blackbox random testing to assess the security exposure to the hosts of hostile virtualized environments...|$|R
40|$|Nowadays {{corporate}} governance {{plays an important}} role in decisions making processes, which represents a relatively new approach for both Romanian scientific studies and practice. As a consequence we consider the increased attention given to {{corporate governance}} to be crucial, especially addressing the role of the audit function and the importance of the corporate governance <b>code.</b> <b>Audit</b> function is of particular practical importance in corporate governance, therefore we decided meticulously to consider it, and especially to develop a conceptual framework for its role in support of an effective corporate governance. We consider that there are two levels and seven key elements utilized in order to achieve an effective corporate governance. In conclusion, audit function as a whole, with an active role in improving corporate governance, should perform correlated in terms of its components: internal audit, external audit and audit committees...|$|E
40|$|Analysis and {{identification}} of potential channels for illicit information flow {{is not required}} for Class Bi trusted systems such as the Sun Microsystems Trusted Solaris 1. 1 trusted computing base. When used in a multilevel context such channels would present a risk to data security. The problem addressed by this thesis is the identification of covert channels in Trusted Solaris and the determination if their exploitation can be detected using mechanisms provided to the security administrator. The approach taken {{to address this problem}} was to identify covert storage channels in the form of observable effects and exceptions of sharing internal databases by subjects at differing access classes. Software was developed to exploit the identified covert channels using a method requiring detailed specifications prior to the creation of <b>code.</b> <b>Audit</b> trails were obtained to evaluate the efficacy of audit in detecting active covert channel exploitation. NANAU. S. Army (USA) autho...|$|E
40|$|This article {{considers}} {{the issue of}} opacity as a problem for socially consequential mechanisms of classification and ranking, such as spam filters, credit card fraud detection, search engines, news trends, market segmentation and advertising, insurance or loan qualification, and credit scoring. These mechanisms of classification all frequently rely on computational algorithms, {{and in many cases}} on machine learning algorithms to do this work. In this article, I draw a distinction between three forms of opacity: (1) opacity as intentional corporate or state secrecy, (2) opacity as technical illiteracy, and (3) an opacity that arises from the characteristics of machine learning algorithms and the scale required to apply them usefully. The analysis in this article gets inside the algorithms themselves. I cite existing literatures in computer science, known industry practices (as they are publicly presented), and do some testing and manipulation of code as a form of lightweight <b>code</b> <b>audit.</b> I argue that recognizing the distinct forms of opacity that may be coming into play in a given application is a key to determining which of a variety of technical and non-technical solutions could help to prevent harm...|$|E
50|$|Despite being {{perfectly}} capable of running newer versions of Android (e.g. 4.x), Motorola failed to provide later versions and didn't meet announced release dates on earlier versions (e.g. 2.3). The use of a locked boot loader, which prevents initial boot kernel upgrades and source <b>code</b> <b>auditing,</b> has also led to strong criticism of Motorola for failing to make this available (particularly as upgrade support continued to drop).|$|R
50|$|Together is {{implemented}} {{as a set}} of Eclipse plugins. Together Developer provides Unified Modeling Language (UML) 1.4 modeling, multilanguage support, physical data modeling, design patterns, source code design pattern recognition, code template design and reuse, documentation generation, and <b>code</b> <b>audits</b> and metrics. Together adds language-neutral UML 2.0 diagramming, business process modeling, and logical data model, and logical to physical data model transformation and custom pattern support.|$|R
50|$|VeraCrypt is a {{fork of the}} {{discontinued}} TrueCrypt project. It {{was initially}} released on June 22, 2013 and has produced its latest release (version 1.21) on July 9, 2017. Many security improvements have been implemented and issues raised by TrueCrypt <b>code</b> <b>audits</b> have been fixed (see below). VeraCrypt features optimized implementations of cryptographic hash functions and ciphers which boost performance on modern CPUs (see Performance).|$|R
5000|$|For instance, the MariaDB Corporation {{created for}} {{business}} compatible [...] "delayed open-sourcing" [...] the source-available Business source license (BSL) which automatically relicenses {{after three years}} to the FOSS GPL. This approach garantuees for licensees that they have source code access (e.g. for <b>code</b> <b>audits),</b> are not locked into a closed platform, or suffer from planned obsolescence, while for the software developer a time-limited exclusive commercialization is possible.|$|R
40|$|A {{prospective}} study {{in a single}} orthopaedic unit for one calendar year was carried out to {{examine the effect of}} continuing audit on arthroscopic practice. A standard proforma was introduced to record information and results were analysed using a system of <b>audit</b> <b>codes.</b> Two <b>audit</b> periods were examined, the first 3 months and the subsequent 9 months. Results after audit of the first period were compared with the second period; diagnostic accuracy and clarity had improved as had the accuracy of <b>audit</b> <b>coding.</b> The subset of patients with a preoperative diagnosis of a meniscal tear was analysed and the diagnostic accuracy for this group improved over the year. We found that the Audit Circle had been closed in the areas of diagnostic clarity, diagnostic accuracy of meniscal tears and the accuracy of <b>audit</b> <b>coding...</b>|$|R
5000|$|<b>Code</b> review: <b>auditing</b> source <b>code,</b> {{in order}} to {{discover}} issues, such as dead code, code causing poor performances or violations of programming conventions.|$|R
40|$|The {{introduction}} of software formal inspections (Fagan Inspections) at JPL for finding and fixing defects {{early in the}} software development life cycle are reviewed. It is estimated that, by the year 2000, some software efforts will rise {{to as much as}} 80 percent of the total. Software problems are especially important at NASA as critical flight software must be error-free. It is shown that formal inspections are particularly effective at finding and removing defects having to do with clarity, correctness, consistency, and completeness. A very significant discovery was that <b>code</b> <b>audits</b> were not as effective at finding defects as code inspections...|$|R
5000|$|The OTF funds {{third party}} audits {{for all of}} the code related {{projects}} that it supports. It has also offered to fund audits of [...] "non-OTF supported projects that are in use by individuals and organizations under threat of censorship/surveillance". Notable projects whose audits the OTF has sponsored include Cryptocat, Commotion Wireless, TextSecure, GlobaLeaks, MediaWiki, OpenPGP.js, Nitrokey, and Ricochet. The OTF also matched donations that were made toward the auditing of TrueCrypt. In December 2014, the OTF reported that it had funded more than 30 technology <b>code</b> <b>audits</b> over the past three years, identifying 185 privacy and security vulnerabilities in both OTF and non-OTF-funded projects.|$|R
5000|$|Radically Open Security was co-founded by Melanie Rieback and CEO of Radically Open Security. It is a {{non-profit}} organization that helps make the cyber world more secure. They only do [...] "non-fishy" [...] jobs and provide step-by-step procedures in order for companies {{to do the same}} work without the company interfering. Furthermore, they provide the tools and source code on their website to help others perform that same tasks that they do even if [...] "it costs them repeat business". Radically Open Security provides services regarding <b>code</b> <b>audits,</b> cryptographic analysis, forensics, malware reversing, and more. Radically Open Security is also part of ACE Venture Lab ...|$|R
