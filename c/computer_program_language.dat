8|10000|Public
40|$|This report {{focuses on}} the design of {{controllers}} for platoons of automatically-controlled automobiles using COSPAN computer language. In order to ensure that it is safe to initiate a maneuver, the platoon layer controller enters into a negotiation with its neighbors and is implemented as a protocol. After a successful protocol termination, the actions of the vehicles involved become coordinated and the maneuver can be initiated. COSPAN (<b>Computer</b> <b>program</b> <b>language),</b> Automobiles [...] Automatic control, System design...|$|E
40|$|DIVERS {{translator}} is {{computer program}} to convert descriptions of digital flight-control systems (DFCS) into <b>computer</b> <b>program.</b> <b>Language</b> developed to represent design charts of DFCS. Translator converts DIVERS source code into easily transportable language, while minimizing probability that results {{are affected by}} interpretation of programmer. Final translated program used as standard of comparison to verify operation of actual flight-control systems. Applicable to simulation of other control systems; for example, electrical circuits and logic processes. Written in C...|$|E
40|$|COSPAN (<b>Computer</b> <b>program</b> <b>language),</b> Automobiles [...] Automatic control, System design This report {{focuses on}} the design of {{controllers}} for platoons of automatically-controlled automobiles using COSPAN computer language. In order to ensure that it is safe to initiate a maneuver, the platoon layer controller enters into a negotiation with its neighbors and is implemented as a protocol. After a successful protocol termination, the actions of the vehicles involved become coordinated and the maneuver can be initiated. eScholarship provides open access, scholarly publishing services to the University of California and delivers a dynami...|$|E
50|$|Krypton (styled KRYPTON) is a {{frame-based}} <b>computer</b> <b>programming</b> <b>language.</b>|$|R
50|$|A third-generation <b>programming</b> <b>language</b> (3GL) is {{a generational}} way to {{categorize}} high-level <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
5000|$|Semantic gap in <b>computer</b> <b>programming</b> <b>{{language}}s</b> {{and natural}} language processing ...|$|R
40|$|This {{document}} is a reference manual for SHIFT, a description language for dynamic networks of hybrid systems. This model offers the proper {{level of abstraction}} for describing complex applications such as highway and air traffic control systems, robotic shopfloors, and other systems whose operation cannot be captured by conventional models. SHIFT is planned {{for use as a}} mechanism for defining the Automated Highway System Tool Interchange Format (AHSTIF). An automated highway system is a hybrid system with specific characteristics and restrictions. SHIFT supports the definition and enforcement of AHSTIF-specific semantics. SHIFT (<b>Computer</b> <b>program</b> <b>language),</b> Automobiles [...] Automatic control, Express highways [...] Automation...|$|E
40|$|This report {{presents}} SHIFT, a {{programming language}} for describing dynamic networks of hybrid automata. The SHIFT model offers the proper level of abstraction for describing complex applications such as automated highway systems, etc. The report first describes a simplified version of the SHIFT model. The models of a type, a component and the world are discussed, including the formal semantics of the model. This {{is followed by a}} description of the main features of the SHIFT language, including states, inputs, outputs, differential equations and algebraic definitions, discrete states and state transitions. Two examples are provided illustrating these features. In the final section, the run-time environment for simulating SHIFT programs is described, and in particular, the algorithm for determining synchronized transitions. SHIFT (<b>Computer</b> <b>program</b> <b>language),</b> Automobiles [...] Automatic control, Express highways [...] Automation...|$|E
40|$|The {{scheduling}} zero-wait (ZW) and no {{intermediate storage}} transfer (NIS) policy of multi-product batch processes {{in order to}} produce a number of low volume high value-added chemical products because of its economic impact. It involves various parameters such as makespan (completion time) which is {{recognized as one of the}} important design parameter as it helps to decide for the best scheduling design and normally used as the main parameter for selecting the optimal production sequence which involves various parameters such as batch process recipes, sequence of production and transfer policy for product intermediates. In this paper, we present a development, solution and computational performance evaluation of optimal scheduling for multiproduct batch process with two commonly used transfer policies namely zero wait (ZW) and no intermediate storage (NIS) by using <b>computer</b> <b>program</b> <b>language</b> software (Java) which simplify and improve the determination of Makespan and select the optimum sequence due to the minimum Makespan...|$|E
50|$|Locks-and-keys is a {{solution}} to dangling pointers in <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
5000|$|QUIKTRAN is a Fortran-like, {{interactive}} <b>computer</b> <b>programming</b> <b>language</b> with debugging facilities.|$|R
5000|$|Dangling else, {{a similar}} {{ambiguous}} parsing issue with some <b>computer</b> <b>programming</b> <b>languages</b> ...|$|R
40|$|PURPOSES:A {{viscoelastic}} axisymmetric {{finite element}} analysis code has been developed for stress analysis of asphalt pavement structures. METHODS: Generalized Maxwell Model (GMM) and 4 -node isoparametric element were employed for finite element formulation. The code was developed using C++ <b>computer</b> <b>program</b> <b>language</b> and named as KICTPAVE. For the verification of the developed code, a structural model of a pavement system was constructed. The structural model was composed of three layers: asphalt layer, crushed stone layer, and soil subgrade. Two types of analysis were considered for the verification: (1) elastic static analysis, (2) viscoelastic time-dependent analysis. For the elastic static analysis, linear elastic material model was assigned to all the layers, and a static load {{was applied to the}} structural model. For the viscoelastic time-dependent analysis, GMM and linear elastic material model were assigned to the asphalt layer and all the other layers respectively, and a cyclic loading condition was applied to the structural model. RESULTS: The stresses and deformations from KICTPAVE were compared with those from ABAQUS. The analysis results obtained from the two codes showed good agreement in time-dependent response of the element under the loading area as well as the surface deformation of asphalt layer, and horizontal and vertical stresses along the axisymmetric axis...|$|E
40|$|In this Master thesis project solving inverse PDE by {{the finite}} element method. An optimal control {{problems}} subjected to PDE constraint with boundary conditions is given. Construct the variational form then construct Lagrangian, which defined over whole space. Lagrangian function is function of three variables which is defined on whole space, evaluate their partial derivatives, these set of equations are the stationary point equations. Solve these stationary point equations individual, combine and into one equation by finite element method. The error, convergence rate, objective function value, error of objective function is also computed. To calculate finite element solution used FEniCS with Python. Construct the programs in Python and run in FEniCS. Following things {{are discussed in}} the following chapters: Chapter 1. Discussion of optimal contol problem with PDEâ€™s constraints. Chapter 2. Discussion of the variational formulation and Lagrangian function. Chapter 3. In this chapter discussion how to solve equations for stationary point by finite element method. To solve equations for stationary point used Python <b>computer</b> <b>program</b> <b>language</b> with FEniCS. FEniCS can be programmed in Python. FEniCS solves partial differential equations, this project used FEniCS to finite element equations by finite element method. In this project a quadratic objective function subjected to linear elliptical partial differential equation with Neumann boundary condition is known, construct the variational form, Lagrangian function which is defined over whole space, taken partial derivatives of this Lagrangian function which gives set of equations are called stationary point equations, write stationary point equations as finite element solution then these equations are called finite element equations. The stationary point equations are used to find the exact solution whereas finite element equations are used to calculate finite element solution. Finally solve these finite element equations as one equation by finite element method, use programming tool FEniCS with Python. The error analysis, convergence rate, objective function value and error of objective function are also computed. The matrix form of stationary point equations are also calculated and show that it is indefinite of saddle point form...|$|E
25|$|The outer {{product is}} also a related {{function}} in some <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
5000|$|... #Caption: Grace Hopper, {{inventor}} of the first compiler for a <b>computer</b> <b>programming</b> <b>language</b> ...|$|R
5000|$|In some <b>computer</b> <b>programming</b> <b>languages,</b> {{the size}} in bits of certain data types ...|$|R
5000|$|Rasmus Lerdorf, {{creator of}} the <b>computer</b> <b>programming</b> <b>language</b> PHP, was born in Qeqertarsuaq.|$|R
5000|$|... (1967) SNOBOL3 Primer: An Introduction to the <b>Computer</b> <b>Programming</b> <b>Language.</b> Cambridge, MA: MIT Press.|$|R
50|$|This {{comparison}} of <b>programming</b> <b>languages</b> (syntax) compares {{the features of}} language syntax (format) for over 50 various <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
50|$|Cornell University <b>Programming</b> <b>Language</b> (also called CUPL) is a {{procedural}} <b>computer</b> <b>programming</b> <b>language</b> developed at Cornell University {{in the late}} 1960s.|$|R
5000|$|PLANC (pronounced as [...] "plank") is a {{high level}} <b>computer</b> <b>programming</b> <b>language.</b> The acronym stands for <b>Programming</b> <b>LAnguage</b> for Nd <b>Computers.</b>|$|R
50|$|Non-English-based <b>programming</b> <b>languages</b> are <b>computer</b> <b>programming</b> <b>languages</b> that, unlike better-known <b>programming</b> <b>languages,</b> {{do not use}} {{keywords}} taken from, or inspired by, the English vocabulary.|$|R
50|$|This {{comparison}} of <b>programming</b> <b>languages</b> (array) compares {{the features of}} array data structures or matrix processing for over 48 various <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
50|$|This {{comparison}} of <b>programming</b> <b>languages</b> (strings) compares {{the features of}} string data structures or text-string processing for over 52 various <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
50|$|A {{separate}} {{question is}} the extent to which quadruple-precision types are directly incorporated into <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
50|$|Filetab is a {{decision}} table-based <b>computer</b> <b>programming</b> <b>language</b> widely used in business in the 1960s and 1970s.|$|R
50|$|In <b>computer</b> <b>programming</b> <b>languages,</b> the {{definitions}} of operator and operand are almost {{the same as in}} mathematics.|$|R
5000|$|The {{order of}} {{operations}} used throughout mathematics, science, technology and many <b>computer</b> <b>programming</b> <b>languages</b> is expressed here: ...|$|R
5000|$|The {{following}} {{represents a}} small sample of the over 600 <b>computer</b> <b>programming</b> <b>languages</b> found on Rosetta Code: ...|$|R
50|$|Most {{educational}} programming on the IBM 1500 {{system was}} done in the specialized <b>computer</b> <b>programming</b> <b>language</b> called Coursewriter.|$|R
50|$|This Comparison of <b>programming</b> <b>languages</b> (associative arrays) {{compares the}} {{features}} of associative array data structures or array-lookup processing for over 39 various <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
50|$|Orc is a concurrent, nondeterministic <b>computer</b> <b>programming</b> <b>language</b> {{created by}} Jayadev Misra at the University of Texas at Austin.|$|R
50|$|The {{standardized}} <b>computer</b> <b>programming</b> <b>language</b> {{associated with}} UYK and AYK series computers is called CMS-2 developed by Rand Corporation.|$|R
50|$|Burke-Fisher error repair is a {{technique}} used in compilers of <b>computer</b> <b>programming</b> <b>languages</b> to enhance error feedback to the programmer.|$|R
50|$|Principles of Compiler Design, by Alfred Aho and Jeffrey Ullman, is {{a classic}} {{textbook}} on compilers for <b>computer</b> <b>programming</b> <b>languages.</b>|$|R
