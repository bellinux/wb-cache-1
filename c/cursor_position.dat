127|105|Public
25|$|Usually cordless, {{they often}} have a switch to {{deactivate}} the movement circuitry between use, allowing the user freedom of movement without affecting the <b>cursor</b> <b>position.</b> A patent for an inertial mouse claims that such mice consume less power than optically based mice, and offer increased sensitivity, reduced weight and increased ease-of-use. In combination with a wireless keyboard an inertial mouse can offer alternative ergonomic arrangements which do not require a flat work surface, potentially alleviating some types of repetitive motion injuries related to workstation posture.|$|E
2500|$|... or [...] to zoom {{into the}} screen at the mouse <b>cursor</b> <b>position</b> using the Magnifier Utility.|$|E
2500|$|... split (horizontal and vertical) and tabbed windows, Unicode {{and other}} multi-language support, syntax highlighting, trans-session command, search and <b>cursor</b> <b>position</b> histories, {{multiple}} level and branching undo/redo history which can persist across editing sessions, and visual mode.|$|E
5000|$|... : Capitalizes every {{character}} from the <b>cursor's</b> <b>position</b> {{to the end}} of the current word.|$|R
50|$|B32 allowed {{programs}} {{to run with}} full <b>cursor</b> <b>positioning</b> and attribute support on non-Data General terminals, even programs which had Data General control sequences hard-coded into them.|$|R
50|$|Editing in {{this view}} is an {{intermediate}} step between true WYSIWYG and editing in the regular text view in terms of complexity for the author. The XML elements are made more human-readable and intuitive, but the nesting and semantics of the XML document are still clear. The cursor can be placed between any elements, and when the <b>cursor's</b> <b>position</b> is ambiguous, a tool-tip window will appear showing a local view of the XML tree and the <b>cursor's</b> <b>position</b> in it. A bar {{along the top of}} the view shows the list of elements from the document root to the element under the cursor.|$|R
5000|$|... — This {{saves the}} <b>cursor</b> <b>position.</b> Using the {{sequence}} [...] will restore {{it to the}} position. Say the current <b>cursor</b> <b>position</b> is 7(y) and 10(x). The sequence [...] will save those two numbers. Now you can move to a different <b>cursor</b> <b>position,</b> such as 20(y) and 3(x), using the sequence [...] or [...] Now {{if you use the}} sequence CSI u the <b>cursor</b> <b>position</b> will return to 7(y) and 10(x). Some terminals require the DEC sequences [...] / [...] instead which is more widely supported.|$|E
5000|$|... or [...] to zoom {{into the}} screen at the mouse <b>cursor</b> <b>position</b> using the Magnifier Utility.|$|E
5000|$|LINE (x1,y1)-(x2,y2) - Draws a line (first {{point is}} optional, current <b>cursor</b> <b>position</b> is used: LINE -(x2,y2)) ...|$|E
50|$|HP-150's {{touch screen}} sensor grid is quite coarse. Its {{resolution}} is only two characters wide. Used mainly for rough <b>cursor</b> <b>positioning</b> and function key control, {{it could not}} be used to draw pictures.|$|R
50|$|It did not, however, support direct <b>cursor</b> <b>positioning.</b> It {{also had}} 25 rows of 72 columns of upper-case characters, {{rather than the}} 80 x 24 that would become more common in {{subsequent}} years.|$|R
5000|$|Message Templates. Email {{templates}} contents are dynamically changed {{through the}} use of macros, and additionally, can be used to automatically execute other user defined functions such as <b>cursor</b> <b>positioning,</b> addressing changes, identity changes, active account changes and other.|$|R
5000|$|... settings.xml {{includes}} settings {{such as the}} zoom factor or the <b>cursor</b> <b>position.</b> These are {{properties that}} are not content or layout.|$|E
50|$|The Atari {{screen editor}} {{implements}} the text cursor by simply inverting the character at the <b>cursor</b> <b>position</b> (by XOR with $80). It does not flash.|$|E
50|$|The target {{position}} for a scrollable cursor can be specified relatively (from the current <b>cursor</b> <b>position)</b> or absolutely (from {{the beginning of the}} result set).|$|E
5000|$|As {{computer}} technology developed, the American National Standards Institute X3 committee invented a standard method of terminal control using escape sequences called [...] "ANSI X3.64-1979". This protocol allowed for text and <b>cursor</b> <b>positioning</b> {{as well as}} defining foreground and background color attributes for the text.|$|R
40|$|We {{present the}} {{findings}} from two experiments designed to explore the effect of absolute vs. relative direct pen interaction on both small and large scale displays where the input and display spaces are co-incident. An absolute mapping – {{where there is a}} one-to-one correspondence between the pen and <b>cursor</b> <b>positions</b> – was found to be superior to a relative mapping – where the pen and <b>cursor</b> <b>positions</b> can be offset with a variable mapping – for all distances on the small screen of a Tablet PC; however, on a large wall-sized display, the relative mapping outperformed the absolute mapping in situations requiring cursor movement over large distances. Our findings can inform the design of pen interfaces, in particular for large scale displays...|$|R
30|$|Finger {{tracking}} The {{position of}} all five fingers is tracked, but only four {{are used to}} directly move the cursor. To initiate cursor movement control, users first place {{one hand on the}} touch surface. The center of the four fingers (excluding the thumb) is used as the <b>cursor’s</b> relative <b>position,</b> as is the case when using a traditional mouse. The thumb is ignored in the calculation of the <b>cursor’s</b> <b>position,</b> allowing user more freedom of movement without triggering unwanted actions; however, the thumb is essential in the finger identification process.|$|R
5000|$|<b>Cursor</b> <b>position</b> is {{important}} - if the PW sample window is incorrect, it will produce artifact. The cursor {{should be placed}} {{at the level of}} the open leaflets in diastole.|$|E
50|$|Terminals usually {{support a}} set of escape {{sequences}} for controlling color, <b>cursor</b> <b>position,</b> etc. Examples include the family of terminal control sequence standards known as ECMA-48, ANSI X3.64 or ISO/IEC 6429.|$|E
50|$|The model {{assumes that}} a perceptual signal within the {{participant}} represents {{the magnitude of}} the input quantity qi. (This has been demonstrated to be a rate of firing in a neuron, at least at the lowest levels.) In the tracking task, the input quantity is the vertical distance between the target position T and the <b>cursor</b> <b>position</b> C, and the random variation of the target position acts as the disturbance d of that input quantity. This suggests that the perceptual signal p quantitatively represents the <b>cursor</b> <b>position</b> C minus the target position T, as expressed in the equation p=C - T.|$|E
50|$|Mouse {{tracking}} (also {{known as}} cursor tracking) {{is the use}} of software to collect users' mouse <b>cursor</b> <b>positions</b> on the computer. This goal is to automatically gather richer information about what people are doing, typically to improve the design of an interface. Often this is done on the Web and can supplement eye tracking in some situations.|$|R
40|$|Observational studies {{indicate}} that most people use one hand to interact with their mobile devices. Interaction on the back-of-devices (BoD) has been proposed to enhance one-handed input for various tasks, including selection and gesturing. However, we do not possess a good understand-ing of some fundamental issues related to one-handed BoD input. In this paper, we attempt to fill this gap by conduct-ing three studies. The first study explores suitable selection techniques; the second study investigates the performance and suitability of the two main modes of cursor movement: Relative and Absolute; and the last study examines solu-tions {{to the problem of}} reaching {{the lower part of the}} de-vice. Our results indicate that for BoD interaction, relative input is more efficient and accurate for <b>cursor</b> <b>positioning</b> and target selection than absolute input. Based on these findings provide guidelines for designing BoD interactions for mobile devices. Author Keywords Back-of-device input, touch input, selection mechanism, relative and absolute <b>cursor</b> <b>positioning...</b>|$|R
50|$|Business Basic was an integer-only {{language}} {{inspired by}} COBOL, and contained powerful string-handling functions {{and the ability}} to manipulate indexed files very quickly. It also provided full control over the display screen, with <b>cursor</b> <b>positioning,</b> attribute setting, and region-blanking commands. Business Basic could interface to Data General's INFOS II database, and make calls directly to the operating system. A lock server gave multiple concurrent users efficient access to database records.|$|R
50|$|Some {{software}} internally interprets ANSI escape sequences in text being {{printed and}} translates them to calls {{to manipulate the}} color and <b>cursor</b> <b>position</b> in the command output window, {{to make it easier}} to port software using ANSI to Windows.|$|E
50|$|The HTML Pair Matcher {{allows users}} to locate the {{matching}} open/close tag for the tag at the current <b>cursor</b> <b>position.</b> Unlike other HTML pair matchers, Emmet searches from the cursor's current position rather than scanning the document from the beginning.|$|E
50|$|A command {{with bits}} 13 or 14 on directs the {{receiver}} to display two basic characters at the current <b>cursor</b> <b>position</b> for the current mode (closed caption or text). Each character is a code point (identifies the character to display), as follows.|$|E
50|$|All the {{functions}} of CP/M MBASIC were available in the IBM PC disk-based BASICA or GWBASIC which made migration of programs from CP/M systems to PC-compatibles possible. The tokens used to represent keywords were different, so CP/M programs had to be saved in ASCII source form. Typically screen formatting escape sequences put into the CP/M version would be replaced with the <b>cursor</b> <b>positioning</b> commands found in the PC versions of BASIC, otherwise little rewriting would be needed.|$|R
50|$|In {{addition}} to giving access to hardware facilities, BIOS provides added facilities that are {{implemented in the}} BIOS software. For example, the BIOS maintains separate <b>cursor</b> <b>positions</b> for up to eight text display pages and provides for TTY-like output with automatic line wrap and interpretation of basic control characters such as carriage return and line feed, whereas the CGA-compatible text display hardware has only one global cursor and cannot automatically advance the cursor or interpret control characters.|$|R
3000|$|... be the {{probability}} of the user making an error while trying to guide the <b>cursor</b> to <b>position</b> k. It is reasonable to imagine that P [...]...|$|R
50|$|In 2012, spider.io {{pointed out}} a {{vulnerability}} in Internet Explorer because of which the mouse <b>cursor</b> <b>position</b> of the PC of a victim could be tracked by an attacker and it claimed that this vulnerability had been exploited at a large scale.|$|E
50|$|Scriptable snippets {{are often}} {{associated}} {{with one or more}} currently active files. Consequently, variables may also include environment variables and arguments that specify the filename, <b>cursor</b> <b>position,</b> and parent directory among other stats relating to the files in a current editing session.|$|E
50|$|Static snippets consist {{primarily}} of fixed text that the user {{can choose to}} insert into the current document. The user {{is not able to}} specify anything else, except perhaps the <b>cursor</b> <b>position</b> relative to the newly inserted text. Static snippets are similar to simple macros.|$|E
50|$|A {{main feature}} of the {{interface}} is Leaping, a means of moving on-screen via incremental text-search. The system provides two commands, Leap-forward and Leap-backward, invoked through dedicated keys, that move the cursor to the next and prior position that contains the search string. Leaping is performed as a quasimode operation: press the Leap key and, while holding it, type the text {{that you want to}} search; finally release the Leap key. This process is intended to habituate the user and turn <b>cursor</b> <b>positioning</b> into a reflex.|$|R
5000|$|In Alpha mode, the 4010 {{displays}} 35 {{lines of}} 74 characters. The terminal was [...] "dumb" [...] by {{standards of the}} day, lacking various smart terminal features like addressable <b>cursor</b> <b>positioning.</b> The terminal also lacks any significant buffering, and many operations could lead to data loss. Notably, the carriage return took about 100 to 200 µs, and a screen clear operation much longer than that. It {{was up to the}} host computer to delay further data to avoid it being lost during these periods.|$|R
50|$|Multiple {{selections}} and cursors {{are typically}} created {{by using a}} keyboard shortcut to select repeated instances of the same text or text fragments surrounded by the same delimiters, by using a search feature to select all instances of a search term, by selecting the same column in multiple lines, or by selecting text or <b>cursor</b> <b>positions</b> with a mouse. The Lapis experimental web browser and text editor is also able to infer selections based on concept learning from positive and negative examples given by the user during {{a process known as}} selection guessing.|$|R
