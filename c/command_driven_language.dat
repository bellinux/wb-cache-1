0|414|Public
50|$|An EIS must be {{efficient}} to retrieve relevant data for decision makers, so the user interface is very important. Several types of interfaces can {{be available to}} the EIS structure, such as scheduled reports, questions/answers, menu <b>driven,</b> <b>command</b> <b>language,</b> natural language, and input/output.|$|R
40|$|Which are {{the human}} needs that are {{affected}} by the use of computers? How will computers affect the humans using them? What kinds of communications between humans will the computers cause? How can computer systems be designed to better satisfy human needs? What design principles should be used for such systems? What kinds of human-machine interaction will better satisfy human needs? This paper discusses these problems and presents various methods. Computer <b>driven,</b> <b>command</b> <b>driven</b> and natural <b>language</b> interaction is discussed. Search Key: Computer, Data processing, Human, Psychology, Sociology, Linguistics, Language, Communication, Interaction, Conversation, Politics, Data Base, EMISARI, people. Swedish Abstract: Vilka mnskliga behov pverkas av datorerna? Hur kommer datorerna att pverka de mnniskor som anvnder dem? Vilka slag av kommunikationer mellan mnniskor kommer datorerna att medfra? Hur kan man konstruera datorsystem, 5 att de bttre tillfredsstller mnskliga behov? Denna rappor [...] ...|$|R
5000|$|Content-based {{instruction}} incorporates authentic {{materials and}} tasks to <b>drive</b> <b>language</b> instruction.|$|R
50|$|SCaVis {{is mainly}} a <b>command</b> <b>driven</b> package that uses {{scripting}} languages, such as Jython (Python implemented in Java), Groovy,JRuby. Java coding is also possible.|$|R
40|$|XPI is a table driven {{parameter}} interface which greatly simplifies both <b>command</b> <b>driven</b> {{programs such}} as BROWSE and XIMAGE as well as stand alone single-task programs. It moves all of the syntax and semantic parsing of commands and parameters out of the users code into common code and externally defined tables. This allows the programmer to concentrate on writing the code unique to the application rather than reinventing the user interface and for external graphical interfaces to interface with no changes to the <b>command</b> <b>driven</b> program. XPI also includes a compatibility library which allows programs written using the IRAF host interface (Mandel and Roll) to use XPI {{in place of the}} IRAF host interface...|$|R
50|$|As {{a system}} {{developed}} in the mid-1970s, CONFER is a text oriented, <b>command</b> <b>driven</b> system with extensive prompts and online help. It {{does not have a}} graphical user interface (but see InfoX below) or allow the display of photographs or other graphics.|$|R
50|$|It {{performs}} nonlinear DC and transient analysis, Fourier analysis, and AC analysis linearized at {{an operating}} point. It is fully interactive and <b>command</b> <b>driven.</b> It {{can also be}} run in batch mode or as a server. The output is produced as it simulates.|$|R
40|$|We {{report on}} a natural {{language}} agent, originally developed as a <b>command</b> <b>driven</b> interface, that was enhanced with time-dependence, contradiction tolerance, meta-linguistic abilities, and an overall meta-cognitive awareness. We show how these new capacities together can make an AI system’s natural language processing more robust and human-like. 1...|$|R
50|$|Command nodes: These nodes issue <b>commands</b> that <b>drive</b> the system.|$|R
5000|$|Input {{is entirely}} <b>command</b> <b>driven,</b> {{allowing}} unattended batch operation; a built-in Macro programming language allows {{the construction of}} a simple new [...] "command" [...] that can execute other commands in a complex manner. Users store their own previously written macros in a macro libraries (a single disk file), and there is an extensive [...] "permanent" [...] macro library available for all users.|$|R
50|$|LineRate virtual {{load balancers}} support X-Forwarded-For via <b>command</b> line <b>drive</b> configurations, or via node.js scripts.|$|R
40|$|The {{simulated}} {{memory system}} {{described in this}} manual consists of a bus interface unit (BIU), one or more transaction driven memory controllers, and one or more <b>command</b> <b>driven</b> memory systems. This documentation has been prepare to familiarize the user to the terminology used {{in the design of}} the memory system, and provide a brief explanation of the basic assumptions of the simulated memory system as well as the simulation framework...|$|R
50|$|Embarcadero Delphi is an {{integrated}} development environment (IDE) for desktop, mobile, web, and console applications. It's also an event <b>driven</b> <b>language.</b> Delphi's compilers use their own Object Pascal dialect of Pascal and generate native code for several platforms: Windows (x86 and x64), OS X (32-bit only), iOS (32 and 64-bit), Android and Linux (64-bit Intel).|$|R
40|$|In this {{contribution}} {{we describe}} {{some of the}} basic new features of MathWork's System Identification toolbox, version 4. 0, which was released in May 1995. The main addition is a graphical user interface (GUI), which allows the user to perform identification, data and model analysis, as well as model validation by less click and mouseless operations. The ideas behind the GUI are explained and its relative merits compared to <b>command</b> <b>driven</b> operations are discussed...|$|R
40|$|In many situations, {{embedded}} menus {{represent an}} attractive {{alternative to the}} more traditional explicit menus, particularly in touchtext, spelling checkers, language-based program editors, and graphics-based systems. When compared to <b>command</b> <b>driven</b> systems, computer menu systems are appealing because they reduce memorization of commands, reduce training, and structure the user’s decision making. Menus can be categorized as either embedded or explicit (Koved, 1984), the difference being {{the context in which}} the menu items are presented...|$|R
40|$|Event <b>driven</b> <b>languages</b> for novice programmers Declaration I {{certify that}} this thesis {{contains}} no material {{that has been}} submitted for the award of any other degree or diploma in any institute, college or university, and that it contains no material previously published or written by another person, except where due reference {{is made in the}} rest of the thesis...|$|R
40|$|This paper {{reports on}} the {{findings}} of a study into land markets in central and eastern Europe carried out under the Action for Co-operation in the field of Economics (ACE) programme of the European Union (EU) which was carried out during 1997 and completed {{in the first part of}} 1998. It examines progress in six countries en route from a <b>command</b> <b>driven</b> economy to a market based economy that is compatible with the requirements of membership of th...|$|R
5000|$|Salmons himself {{argues that}} ... {{systematic}} changes in community structure are what <b>drive</b> <b>language</b> shift, incorporating Milroy's neywork structures as well. The {{heart of the}} view is the quintessential element of modernization, namely a shift from local community-internal organization to regional (state or national or international, in modern settings), extra-community organizations. Shift correlates with this move from pre-dominantly 'horizontal' community structures to more 'vertical' ones.|$|R
40|$|A {{final report}} is given on {{research}} into language concepts for the Mission Control Center (MCC). The Specification <b>Driven</b> <b>Language</b> research is described. The {{state of the}} image processing field and how image processing techniques could be applied toward automating the generation of the language known as COmputation Development Environment (CODE or Comp Builder) are discussed. Also described {{is the development of}} a flight certified compiler for Comps...|$|R
50|$|Much {{development}} {{work was done}} on S/360 or S/370 using {{a variation of the}} HLASM program geared to the MSP/7 macro language. To provide more flexibility in programming the System/7, a group in the IBM San Jose Research Laboratory in San Jose, California developed the LABS/7 operating environment, which with its <b>language</b> Event <b>Driven</b> <b>Language</b> (EDL), was ported to the Series/1 environment as the very successful Event Driven Executive (EDX).|$|R
50|$|With {{its lead}} driver forced to miss {{much of the}} season, Prost {{struggled}} with novices Jarno Trulli and Shinji Nakano until Panis's return at the Luxembourg Grand Prix. There were glimpses, a <b>commanding</b> <b>drive</b> by Trulli in Austria where he led {{for much of the}} race before his engine expired, and a run by Trulli again to fourth at Germany showed potential, and a dogged points finish for Panis on his return in Luxembourg meant that Prost wasted no time in signing the pair up for a further season.|$|R
40|$|We {{present and}} motivate the {{definition}} {{and use of}} the language and environment d SL, an imperative and event <b>driven</b> <b>language</b> designed to program distributed industrial control systems. d SL provides transparent code distribution using simple mechanisms. Its use allows the industrial control system's designer to concentrate on the sequences of control required; the d SL compiler-distributer taking into account the distribution aspects. We show the advantages of our approach compared to others proposed using e. g. shared memory or synchronous languages like Esterel, Lustre or Signal...|$|R
50|$|Pegasus Mail (PMail) is {{suitable}} for single or multiple users on stand-alone computers and for internal and Internet mail on local area networks. Pegasus Mail has minimal system requirements compared with competing products, for instance the installed program (excluding mailboxes) for version 4.52 requires only around 13.5 MB of hard drive space. Since Pegasus Mail does not make changes to the Windows registry or the system directory, it {{is suitable}} as a portable application for USB <b>drives.</b> <b>Language</b> packs are available for languages other than English.|$|R
40|$|Abstract: Data <b>driven</b> <b>language</b> {{learning}} promotes learner {{autonomy and}} discovery learning by providing learners with authentic foreign language data for self-directed or guided exploration. However, the {{effective use of}} corpora data requires {{a certain level of}} linguistic knowledge. We propose an information retrieval augmentation to concordance for adapting to self-directed context of independent learners. The approach involves an expression element model and a retrieving mechanism so as to reduce linguistic threshold and enhance learner empowerment. Simulation results with English proficiency tests and students’ writing samples support the effectiveness of the approach...|$|R
50|$|These builds {{have four}} major {{components:}} Crucible, a framework with extension to AppKit and tools {{common to all}} Alchemy applications; elements, a framework supporting the plugin architecture; quicksilver, a <b>command</b> window <b>driven</b> launcher; and catalyst, which triggers a preference pane.|$|R
5000|$|An {{optional}} built-in event <b>driven</b> processing <b>language</b> called FPL {{that enables}} data integration, navigation, validation and data processing via simple and English-like command verbs, obviating {{the need for}} low-level software programming.|$|R
40|$|A multi-agent {{computational}} model is proposed to simulate language evolution in an acquisition framework. This framework involves many major forms of cultural transmission, and the simulation {{results of the}} model systematically examine the role of cultural transmission In language emergence and maintenance. In addition, this study discusses the effects of conventionalization during horizontal transmission on diffusing linguistic innovations, maintaining high levels of linguistic understandability, and triggering inevitable changes in the communal languages across generations. All these reflect that conventionalization could be a self-organizing property of the human communication system that <b>drives</b> <b>language</b> evolution. © 2007 IEEE. link_to_subscribed_fulltex...|$|R
50|$|Dap is a <b>command</b> line <b>driven</b> program. Using its {{internal}} commands, one can perform tests on means and percentiles, correlation, ANOVA, categorical analysis, linear and {{logistic regression analysis}} and non parametric statistics.It {{can also be used}} to create scatterplots, line graphs and histograms of data.|$|R
5000|$|ICL (IRT Command Language) {{performs}} IRT calibrations, {{including the}} 1, 2, and 3 parameter logistic models {{as well as}} the partial credit model and generalized partial credit model. It can also generate response data. As the name implies, it is completely <b>command</b> code <b>driven,</b> with no graphical user interface.|$|R
40|$|In {{order to}} simplify and {{optimize}} {{the operation of}} our home made torque magnetometer we created a new software system. The architecture is based on parallel, independently running instrument handlers communicating with a main control program. All programs are designed as <b>command</b> <b>driven</b> state machines which greatly simplifies their maintenance and expansion. Moreover, as the main program may receive commands {{not only from the}} user interface, but also from other parallel running programs, an easy way of automation is achieved. A program working through a text file containing a sequence of commands and sending them to the main program suffices to automatically have the system conduct a complex set of measurements. In this paper we describe the system's architecture and its implementation in LabVIEW. Comment: 6 pages, 7 figures, submitted to Rev. Sci. Inst...|$|R
40|$|The {{user guide}} for XSPEC, a <b>command</b> <b>driven,</b> interactive, X-ray {{spectral}} fitting program is presented. It {{is designed to}} be completely detector independent so it can be used for any X-ray spectral instrument. An overview of the program commands and a walk through of an XSPEC session is presented. Individual commands and descriptions of the spectral models are given. For the more experienced user details of some of the programs associated with XSPEC, the command parser, and the addition of models to XSPEC are included. The PLT plotting package used by XSPEC is described together with the maximum likelihood option for users possessing X-ray spectra with small numbers of counts per bin. Details on the various files used by XSPEC and on the general file structure are also given...|$|R
40|$|The NPLOT (NASTRAN Plot) is an {{interactive}} computer graphics program for plotting undeformed and deformed NASTRAN finite element models. Developed at NASA's Goddard Space Flight Center, the program provides flexible element selection and grid point, ASET and SPC degree of freedom labelling. It is {{easy to use and}} provides a combination menu and <b>command</b> <b>driven</b> user interface. NPLOT also provides very fast hidden line and haloed line algorithms. The hidden line algorithm in NPLOT proved to be both very accurate and several times faster than other existing hidden line algorithms. A fast spatial bucket sort and horizon edge computation are used to achieve this high level of performance. The hidden line and the haloed line algorithms are the primary features that make NPLOT different from other plotting programs...|$|R
5000|$|To {{record a}} {{label on the}} disc, the {{application}} has to send the pixel information with a SCSI <b>command</b> to the <b>drive.</b>|$|R
5000|$|These {{devices are}} blacklisted in the Linux kernel's [...] to force sending non-queued TRIM <b>commands</b> to these <b>drives</b> instead of queued TRIM commands: ...|$|R
50|$|The {{program is}} written in C and is made for Linux (exploiting video4linux interface). Motion is a command line-based tool whose output can be either jpeg, netpbm files or mpeg video sequences. It is {{strictly}} <b>command</b> line <b>driven</b> and can run as a daemon with a rather small footprint and low CPU usage.|$|R
40|$|Differential {{geometric}} {{system and}} control theory {{is used to}} develop a new dynamic system feedback technique for robot task space commands. The nonlinear robot arm system is feedback-linearized and simultaneously is output-decoupled by an appropriate nonlinear feedback and nonlinear coordinate transformation. On the joint space level, the scheme only <b>commands</b> <b>drive</b> forces or torques or their equivalent quantities addressed to the joint drives. An important property of the technique is that the planned and commanded task space trajectory together with its time derivatives directly drive the robot arm through a linear system model. A method for task space motion planning matching the requirements of the new scheme is briefly presented. The implications of the new technique for second and third order model robot arms with and without force feedback measuremnts and for two or more dynamically cooperating robot arms are discussed...|$|R
