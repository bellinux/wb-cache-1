21|10000|Public
2500|$|... 2001. The RCS Handbook: Tools for Real-Time <b>Control</b> <b>Systems</b> <b>Software</b> Development. Wiley.|$|E
50|$|In {{the early}} 2000s, the {{increased}} availability of reliable 3-way merge tools reduced {{the time that}} software development groups had to spend concerning themselves with the technical limitations of their infrastructure. Even smaller software groups {{are more inclined to}} approach concurrent modification in their revision <b>control</b> <b>systems.</b> <b>Software</b> developers use a variety of tools and techniques to facilitate 3-way merges, including visual tools for viewing changes side by side.|$|E
50|$|Hard {{infrastructure}} encompasses networks {{necessary for}} the functioning of a modern industrial nation. This article delineates both the fixed assets, and the <b>control</b> <b>systems,</b> <b>software</b> required to operate, manage and monitor the systems, {{as well as any}} accessory buildings, plants, or vehicles that are {{an essential part of the}} system. Also included are fleets of vehicles operating according to schedules such as public transit buses and garbage collection, as well as basic energy or communications facilities that are not usually part of a physical network, such as oil refineries, radio, and television broadcasting facilities.|$|E
50|$|Inventory <b>control</b> <b>system</b> <b>software</b> can {{speed the}} {{physical}} inventory process.|$|R
40|$|This {{paper is}} {{predominantly}} a nontechnical discussion of some significant {{aspects of the}} initial flight qualification and operational maintenance of the flight <b>control</b> <b>system</b> <b>software</b> for the X- 29 A technology demonstrator. Flight qualification and maintenance of complex, embedded flight <b>control</b> <b>system</b> <b>software</b> poses unique problems. The X- 29 A technology demonstrator aircraft has a digital flight <b>control</b> <b>system</b> which incorporates functions generally considered too complex for analog <b>systems.</b> Organizational responsibilities, <b>software</b> assurance issues, tools, and facilities are discussed...|$|R
5000|$|... 2016 Acquired 1Energy Systems, a Seattle-based {{company that}} specializes in ESS <b>control</b> <b>system</b> <b>software,</b> to form Doosan GridTech ...|$|R
40|$|Modern {{control systems}} require {{sophisticated}} software {{in order to}} meet their ever more demanding requirements. These requirements stem from the need to deal with increased uncertainty, cope with more dynamic environments, and provide greater flexibility. This, in turn, means that <b>control</b> <b>systems</b> <b>software</b> is highly complex in that it invariably has a large number of parts that have many interaction...|$|E
40|$|Abstract: Peculiar {{features}} of development of hybrid adaptive systems using neuro-fuzzy network structures are discussed. Quality {{and amount of}} information about an object is insufficient. Classical, adaptive, robust, fuzzy, neural methods of regulator designing have been compared. Problem of parameter adjustment of neuro-fuzzy networks has been considered within application of genetic algorithms. Information (software) support has been developed {{with the aim of}} investigation into intelligent <b>control</b> <b>systems.</b> <b>Software</b> significantly simplifies development and investigation of proprietary architectures of neuro-fuzzy networks, genetic algorithms. The results of training of neuro-fuzzy networks are presented in order to solve problems of classification, emulation of non-linear functions...|$|E
40|$|The {{certification}} {{process of}} safety critical products for European {{and other international}} standards typically demand environmental stress, endurance and electro magnetic compatibility testing. Theoretical, or `static testing' also a requirement. Failure Mode Effects Analysis (FMEA) is a tool used for static testing. FMEA is a bottom-up technique that aims to assess the effects of all component failure modes in a system. Its use is traditionally limited to hardware systems. With the growing complexity of modern electronics traditional FMEA is suffering from state explosion and re-use of analysis problems. Also with the now ubiquitous use of microcontrollers in smart instruments and <b>control</b> <b>systems,</b> <b>software</b> is increasingly being seen as a `missing factor' for FMEA...|$|E
40|$|The Unified Modeling Language (UML) {{was used}} to design the Environmental Systems Test Stand (ESTS) <b>control</b> <b>system</b> <b>software.</b> The UML was chosen {{for its ability to}} {{facilitate}} a clear dialog between software designer and customer, from which requirements are discovered and documented in a manner which transposes directly to program objects. Applying the UML to <b>control</b> <b>system</b> <b>software</b> design has resulted in a baseline set of documents from which change and effort of that change can be accurately measured. As the Environmental Systems Test Stand evolves, accurate estimates of the time and effort required to change the <b>control</b> <b>system</b> <b>software</b> will be made. Accurate quantification of the cost of software change can be before implementation, improving schedule and budget accuracy...|$|R
30|$|Researchers {{should focus}} on the aging {{management}} of the structures, components, and systems of the nuclear power plant digital <b>control</b> <b>system.</b> Aging management of the digital <b>control</b> <b>system</b> <b>software</b> is a weakness. This paper analyzes the aging mechanism and process of the safety digital <b>control</b> <b>system</b> <b>software.</b> Then, software aging information is collected throughout the design to maintenance phases. This paper describes the key aging points in different life phases. Finally, to improve the reliability of digital <b>control</b> <b>systems,</b> the aging management schema is proposed, which includes the aging process and management measures. Future research {{should focus on}} rejuvenation strategies for aging safety digital <b>control</b> <b>systems</b> of nuclear power plants.|$|R
5000|$|... {{terminal}} guidance and landing capability, including a vehicle <b>control</b> <b>system</b> and a <b>control</b> <b>system</b> <b>software</b> algorithm {{to be able}} to land a rocket with the thrust-to-weight ratio of the vehicle greater than one, with closed-loop thrust vector and throttle control ...|$|R
40|$|A key {{component}} in protecting a nation’s critical infrastructure and key resources is {{the security of}} control systems. The term industrial control system refers to supervisory control and data acquisition, process control, distributed control, and any other systems that control, monitor, and manage the nation’s critical infrastructure. Critical Infrastructure and Key Resources (CIKR) consists of electric power generators, transmission systems, transportation systems, dam and water systems, communication systems, chemical and petroleum systems, and other critical systems that cannot tolerate sudden interruptions in service. Simply stated, a control system gathers information and then performs a function based on its established parameters and the information it receives. The patch management of industrial <b>control</b> <b>systems</b> <b>software</b> used in CIKR is inconsistent at best and nonexistent at worst. Patches are important to resolve security vulnerabilities and functional issues. This report recommends patch management practices for consideration and deployment by industrial control systems owners...|$|E
40|$|We {{present a}} method that makes use of the theorem prover PVS to specify, develop and verify {{real-time}} software components for embedded <b>control</b> <b>systems</b> <b>software</b> with periodic tasks. The method {{is based on an}} intuitive discrete time &quot;Clocks &quot; theory by Dutertre and Stavridou that models periodic timed trajectories representing dataflows. We illustrate the method by considering a Held For operator on dataflows that is used to specify real-time requirements. Recursive functions using the PVS TABLE construct are used to model both the system requirements and the design. A software component is designed to implement the Held For operator and then verified in PVS. This pre-verified component is then used to guide design of more complex components and decompose their design verification into simple inductive proofs. Finally, we demonstrate how the rewriting and propositional simplification capabilities of PVS can be used to refine a component based implementation to improve the performance while still guaranteeing correctness. An industrial control subsystem design problem is used to illustrate the process. ...|$|E
40|$|Recent advancements in Artificial Intelligence (AI), robotics, <b>control</b> <b>systems,</b> <b>software</b> {{and related}} {{technologies}} have revived {{the debate on}} the influence that technology has on labor markets. So far, the focus of the literature has been on advanced economies. This document aims to analyze the following variables: domestic spending in science and technology, GDP per capita, nominal minimum wage, domestic spending in education and their impact on unemployment rate in seven Latin American countries from 1996 to 2011. Panel data was used to measure the relation of these variables with unemployment rates in the region. The results allowed us to conclude that investment in Science and Technology in the region has not reached levels that potentially reduce employment; on the contrary, innovation is regarded as a source of labor productivity gains. The broader implications of technology and automation are yet to be seen, however, both firms and the public sector in the region must prepare for massive technological unemployement, as predicted by recent models...|$|E
40|$|KEKB <b>control</b> <b>system</b> {{is being}} build upon the EPICS(Experimental Physics and Industrial <b>Control</b> <b>System)</b> <b>software</b> toolkit. Although, it {{provides}} a rich set of tools to construct <b>control</b> <b>systems,</b> there is a room for further improvement. We have developed some tools to enhance usability of EPICS in KEKB <b>control</b> <b>system.</b> Outline of these tools will be reported. ...|$|R
50|$|The highest {{potential}} risk for brake system failure {{has proven to}} be the Brake <b>Control</b> <b>System</b> <b>software.</b> Recurring failures have occurred in over 200 cases documented in NTSB documents. Because each manufacturer guards the confidentiality of their <b>system</b> design and <b>software,</b> there is no independent validation of the systems.|$|R
40|$|Absw 6 In USA, trailic {{simulation}} {{was originally}} developed {{to evaluate the}} traffic signal <b>control</b> <b>system</b> in the 1970 s by the Federal Highway Administration (FHWA). This paper fin 1 introduces the traflic signal <b>control</b> <b>system</b> <b>software</b> development process developed at Traffic Research Laboratory, in which trailic simulation is integrated to develop, debug, test and evaluate traflic signal <b>control</b> <b>system</b> <b>software.</b> The topics related to traflic simulation software and the interface between traffic simulation and traffic signal control devices are discussed. Next, those key roles are demonstrated in five prototype developments under FHWA's Adaptive <b>Control</b> <b>System</b> programs. Finally, the htum activities in this area, including FHWA's Next Generation of Simulation program, the ACS-Lilt program, the National Transportation Communications for ITS Protocol compliant interface in CORSIXI. and the possibilities of creating a benchmark test nework and CORSIM application server are discussed...|$|R
40|$|Abstract—Industrial control {{hardware}} may be reused {{for several}} purposes. The same industrial PC type may control the drives of a portal system, {{act as a}} programmable logic controller, or control any other device. Moreover the same piece of hardware may control different device types {{at the same time}} in concurrency. In this paper, we discuss four successive software engineering approaches to exploit the possibilities provided by the control hardware: an object-oriented architecture, an architectural pattern, a control framework, and an architectural model for componentbased frameworks. Each of these approaches provides means of different levels to structure a system and to reuse concepts, patterns, or real code. All presented approaches are used to build control systems controlling different types of robot arms and other devices. Additionally, in the component-based system a new component has been introduced to enable a network connection of the control system. Index Terms—Factory automation, industrial <b>control</b> <b>systems,</b> <b>software</b> reuse concepts. I...|$|E
40|$|An {{embedded}} based DC {{motor speed}} control system using cygnal microcontroller (C 8051 F 020) {{has been designed}} and developed. It is based on frequency domain technique. The principle is opto-coupler senses {{the speed of the}} motor in the form of TTL pulses, which is given to F/V (frequency to voltage) converter. The output of the F/V converter voltage is fed to an inbuilt 12 -bit ADC of cygnal microcontroller. The converted digital value applied in Liner equitation for converting back to frequency and speed is displayed on two lines LCD in RPM. Microcontroller is applied for PID control action to correct error in the form of voltage to the motor through built-in 12 -bit D/A converter, PWM circuit, and actuator. The present study discusses the design, development, fabrication, and analysis of cygnal microcontroller based PID logic controller for DC motor speed <b>control</b> <b>systems.</b> <b>Software</b> is developed in ‘C’ language using Si-Lab IDE C-cross compiler. The paper deals with the hardware and software details. ...|$|E
40|$|Abstract—Deploying {{real-time}} <b>control</b> <b>systems</b> <b>software</b> on multiprocessors requires distributing tasks {{on multiple}} processing nodes and coordinating their executions using a protocol. One such protocol is the discrete-event (DE) model of computation. In this paper, we investigate distributed discrete-event (DE) with null-message protocol (NMP) on a multicore system for real-time control software. We illustrate analytically and experimentally {{that even with}} the null-message deadlock avoidance scheme in the protocol, the system can deadlock due to inter-core message dependencies. We identify two central reasons for such deadlocks: 1) {{the lack of an}} upper-bound on packet transmission rates and processing capability, and 2) an unknown upper-bound on the communication network delay. To address these, we propose using architectural features such as timing control and real-time network-on-chips to prevent such message-dependent deadlocks. We employ these architectural techniques in conjunction with a distributed DE strategy called PTIDES for an illustrative car wash station example and later follow it with a more realistic tunnelling ball device application...|$|E
40|$|A {{nonlinear}} six {{degree of}} freedom entry simulation {{study was conducted to}} identify space shuttle guidance and <b>control</b> <b>system</b> <b>software</b> modifications which reduce the <b>control</b> <b>system</b> sensitivity to the guidance system sampling frequency. Several modifications which eliminated the <b>control</b> <b>system</b> sensitivity and associated control limit cycling were examined. The result of the modifications was a reduction in required reaction <b>control</b> <b>system</b> fuel...|$|R
30|$|Residual aging {{risks are}} {{uncontrollable}} by aging management strategies and {{may lead to}} safety incidents. To improve the stability and reliability of the safety digital <b>control</b> <b>system,</b> <b>software</b> attributes become more complex. Although stability and reliability goals promote software development, these factors increase software aging factors.|$|R
25|$|The Galileo Attitude and Articulation <b>Control</b> <b>System</b> (AACSE) was <b>controlled</b> by two Itek Advanced Technology Airborne Computers (ATAC), built using radiation-hardened 2901s. The AACSE {{could be}} reprogrammed in flight by sending {{the new program}} through the Command and Data Subsystem. Galileo {{attitude}} <b>control</b> <b>system</b> <b>software</b> {{was written in the}} HAL/S programming language, also used in the Space Shuttle program.|$|R
40|$|Software {{permeates}} {{every aspect}} of our modern lives. In many applications, such in the software for airplane flight controls, or nuclear power <b>control</b> <b>systems</b> <b>software</b> failures can have catastrophic consequences. As we place so much trust in software, how can we know if it is trustworthy? Through software assurance, we can attempt to quantify just that. Building complex, high assurance software is no simple task. The difficult information landscape of a software engineering project can make verification and validation, the process by which the assurance of a software is assessed, very difficult. In order to manage the inevitable information overload of complex software projects, we need software traceability, ”the ability to describe and follow the life of a requirement, in both forwards and backwards direction. ” The Center of Excellence for Software Traceability (CoEST) has created a compelling research agenda with the goal of ubiquitous traceability by 2035. As part of this goal, they have developed TraceLab, a visual experimental work-bench built to support design, implementation, and execution of traceabilit...|$|E
40|$|The {{increased}} connectivity to Internet {{and mobile}} device technology {{has a major}} impact on <b>control</b> <b>systems</b> <b>software</b> design and system architecture. To take advantage of new market opportunities and emerging technologies, these systems/products must evolve very rapidly. Control systems are becoming very complex software applications, and the software engineers responsible for designing and maintaining these control systems must be trained innovatively. This paper discusses the complexity of new generation of control systems and the need for greater compliance to safety, quality of service, and security of systems and data. All these issues impact the education and training of software developers and control engineers. Software developers are required to ensure that software is stable and reliable to avoid hazard conditions. Besides mastering control methods, the control engineers must {{be able to deal with}} the challenges created by emerging technologies, and the capabilities of the users of these complex control systems. These challenges demand adoption of new emerging technologies and new competencies and skills. These competencies allow open possibilities for applying a wider range of control principles and design methods as well as productivity control and risk management involving decision making under uncertainty with increased levels of decision support...|$|E
40|$|There is {{a growing}} {{interest}} in adopting object technologies {{for the development of}} real-time control systems. Several commercial tools, currently available, provide object-oriented modeling and design support for real-time control systems. While these products provide many useful facilities, such as visualization tools and automatic code generation, they are all weak in addressing the central characteristic of real-time control systems design, i. e., providing support for a designer to reason about timeliness properties. We believe an approach that integrates the advancements in both object modeling and design methods and real-time scheduling theory is the key to successful use of object technology for real-time software. Surprisingly several past approaches to integrate the two either restrict the object models, or do not allow sophisticated schedulability analysis techniques. This study shows how schedulability analysis can be integrated with UML for Real-Time (UML-RT) to deal with timing properties in real time control systems. More specifically, we develop the schedulability and feasibility analysis modeling for the external messages that may suffer release jitter due to being dispatched by a tick driven scheduler in real-time control system and we also develop the scheduliablity modeling for sporadic activities, where messages arrive sporadically then execute periodically for some bounded time. This method can be used to cope with timing constraints in realistic and complex real-time control systems. Using this method, a designer can quickly evaluate the impact of various implementation decisions on schedulability. In conjunction with automatic code generation, we believe that this will greatly streamline the design and development of real-time <b>control</b> <b>systems</b> <b>software...</b>|$|E
50|$|Based on the RCS Reference Model Architecture the NIST has {{developed}} a Real-time <b>Control</b> <b>System</b> <b>Software</b> Library. This is an archive of free C++, Java and Ada code, scripts, tools, makefiles, and documentation developed to aid programmers of software {{to be used in}} real-time <b>control</b> <b>systems,</b> especially those using the Reference Model Architecture for Intelligent Systems Design.|$|R
50|$|The Galileo Attitude and Articulation <b>Control</b> <b>System</b> (AACSE) was <b>controlled</b> by two Itek Advanced Technology Airborne Computers (ATAC), built using radiation-hardened 2901s. The AACSE {{could be}} reprogrammed in flight by sending {{the new program}} through the Command and Data Subsystem. Galileo {{attitude}} <b>control</b> <b>system</b> <b>software</b> {{was written in the}} HAL/S programming language, also used in the Space Shuttle program.|$|R
40|$|The Space Telescope Pointing <b>Control</b> <b>System</b> <b>software</b> {{is in the}} {{advanced}} development stage, having been tested on both the airbearing and the static simulator. The overall structure of the software is discussed, along with timing and sizing evaluations. The interaction between the controls analysts and software designer is described...|$|R
40|$|The {{goal of the}} {{electrical}} engineering capstone project, Dynamic Positioning 2 (DP 2), is to prototype a controlled dynamic positioning system that has a single-failure safe capability. The primary objective is for the platform to maintain a desired heading and position within ten degrees and three hundred millimeters, respectively, using data obtained from three {{light detection and ranging}} (LIDAR) sensors. The secondary objective is for the control system to compensate for the failure of a single sensor or motor. The platform for the DP 2 project is a salvage drum that encases the electronic equipment and an inner tube for buoyancy. The internal construction consists of three tiers containing batteries at the lowest level, an onboard computer at the second level, and control hardware at the top level. The platform is tested in an indoor tank with an area of sixteen meters squared. The vessel’s position is calculated from the LIDAR data (bearing and range) to eight stationary poles that mark the outside of the tank using an overdetermined least squares matrix solution. The heading is calculated using the bearings and ranges to specific pairs of poles. An ad-hoc wireless network is used to communicate with the onboard computer while it is operating. All programming was completed in the NET Framework and MATLAB®. Students complete the project milestones through the application of material from past courses in computer <b>control</b> <b>systems,</b> <b>software</b> engineering, and electronic navigation at the U. S. Coast Guard Academy. The DP 2 project is sponsored by the Marine Safety Center (MSC) ...|$|E
40|$|This master thesis {{has been}} carried out at Scania R&D at the {{department}} for Powertrain Control System Development during the winter of 2010 / 2011. In the thesis the writer examine and evaluate the existing method for collecting information from the tests carried out during the development of the Powertrain <b>Control</b> <b>Systems</b> <b>software.</b> It also contains suggestions for how a new method that enhance the validation elements could look like. The master thesis uses Vicentes theories of the ecological approach and theories of how knowledge sharing of tacit and technical information works within an organization and between the organization and its customers. First a workplace analysis at Scania R&D is carried out to see how Powertrain Control Systems work and how they test their software. Second a control task analysis, where the aims decided on after the interviews, is compared to the existing method. Since a clear discrepancy between the aim and the existing method was found a strategic analysis was preformed to find the requirements for the new method. Changes that are proposed highlights the importance of building up a closer connection between Powertrain Control Systems and the customers and drivers that are performing the tests. Drivers of the test vehicles focus a huge knowledge of the  tested product and this report therefore focus on how to transfer that knowledge tothe developers at Powertrain Control Systems. This can be done in the forum of questionnaires, telephone interviews, computer systems and eye to eye meetings. The strategic analysis results in several suggestions of what could be done to make this happen in the future...|$|E
40|$|CO-ST-IN is {{a program}} {{developed}} for NASA to help facilitate the study of Control Structure Interaction, the dynamic coupling between control systems and flexible structures. Current space structures are larger and more flexible than previous designs. At the same time, increased demands are being placed {{on the performance of}} control systems. For many space structures it is essential to analyze the interaction of control systems with structural flexibility. CO-ST-IN was designed to complement and enhance rather than to replace the structural dynamics and control system analysis tools already available at NASA. The functions performed by CO-ST-IN can be roughly divided into three areas: 1) data transfer between structural dynamics and <b>control</b> <b>systems</b> <b>software</b> (MSC/NASTRAN, I-DEAS, EASY 5 and MATRIXx are currently supported to varying degrees); 2) modal selection at both the component and system level as a means of model reduction; and 3) simulation of the coupled system (given simple controllers). CO-ST-IN reduces the size of the structural model by selecting system modes on the basis of input/output coupling (three algorithms along with a number of other options are offered). This allows the analyst to use far fewer modes in the coupled analysis, since the program will select those which are most closely coupled to the structural inputs and outputs. Another special capability is the calculation of structural outputs such as element forces and stresses using either the mode acceleration or mode displacement approach directly within the coupled simulation. This eliminates the need to return to MSC/NASTRAN for recovery of this data, accelerating the turnaround time of analyses. The transfer of input forces for transient analysis in MSC/NASTRAN is also supported. CO-ST-IN was implemented on a DEC VAX with the VMS operating system. This FORTRAN 77 program has a memory requirement of 9. 4 MB. CO-ST-IN was developed in 1989...|$|E
40|$|A {{discussion}} is presented of some significant {{aspects of the}} initial flight qualification and operational maintenance of the flight <b>control</b> <b>system</b> softward for the X- 29 A technology demonstrator. Flight qualification and maintenance of complex, embedded flight <b>control</b> <b>system</b> <b>software</b> poses unique problems. The X- 29 A technology demonstrator aircraft has a digital flight <b>control</b> <b>system</b> which incorporates functions generally considered too complex for analog <b>systems.</b> Organizational responsibilities, <b>software</b> assurance issues, tools, and facilities are discussed...|$|R
50|$|The Altéa suite {{presently}} {{consists of}} four main modules: Altéa Reservation, providing booking, pricing and ticketing management through a single interface; Altéa Inventory, providing schedule and seat capacity management on a flight-by-flight basis; Altéa Departure Control, a departure <b>control</b> <b>system</b> <b>software</b> package; and Altéa e-commerce, a software suite for airline e-commerce sales and support.|$|R
40|$|Abstract: The magneto-rheological (MR) {{vibration}} reduction control {{technology is}} studied and a {{design and implementation}} of an automobile MR vibration reduction <b>control</b> <b>system</b> based on ARM 9 is given in this paper. This paper introduces the system design process of embedded controller, current driver and other hardware, <b>system</b> <b>software</b> structure. Design of real time <b>control</b> <b>system</b> can realize the multi-channel vibration signal acquisition, control algorithm, CAN communications and other functions. The simulation and experiment show that, the <b>control</b> <b>system</b> <b>software</b> and hardware design can meet the functional requirements and have the advantages of fast response, high control precision and working stability...|$|R
