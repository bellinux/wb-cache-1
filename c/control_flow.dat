4585|10000|Public
5|$|In 1983, the DPMA withdrew its {{opposition}} to the standard, citing the responsiveness of the committee to public concerns. In the same year, a National Bureau of Standards study concluded that the proposed standard would present few problems. A year later, a COBOL-80 compiler was released to DEC VAX users, who noted that conversion of COBOL-74 programs posed few problems. The new EVALUATE statement and inline PERFORM were particularly well received and improved productivity, thanks to simplified <b>control</b> <b>flow</b> and debugging.|$|E
25|$|At {{the level}} of machine {{language}} or assembly language, <b>control</b> <b>flow</b> instructions usually work by altering the program counter. For some central processing units (CPUs), the only <b>control</b> <b>flow</b> instructions available are conditional or unconditional branch instructions, also termed jumps.|$|E
25|$|In {{computer}} science, <b>control</b> <b>flow</b> (or flow of control) is {{the order}} in which individual statements, instructions or function calls of an imperative program are executed or evaluated. The emphasis on explicit <b>control</b> <b>flow</b> distinguishes an imperative programming language from a declarative programming language.|$|E
50|$|The <b>Flow</b> <b>Control</b> {{specification}} defines packet formats and protocols {{for simple}} XON/XOFF <b>flow</b> <b>control</b> operations. <b>Flow</b> <b>control</b> packets can be originated by switches and endpoints. Reception of a XOFF <b>flow</b> <b>control</b> packet halts transmission of a flow or flows until an XON <b>flow</b> <b>control</b> packet is received or a timeout occurs. <b>Flow</b> <b>Control</b> packets {{can also be}} used as a generic mechanism for managing system resources.|$|R
50|$|An {{action may}} receive inputs {{in the form}} of <b>control</b> <b>flows</b> and object flows (the latter via input pins) and passes the results of its {{processing}} or transformations to one or more outgoing <b>control</b> <b>flows</b> or object flows (the latter via output pins) and onto downstream nodes.|$|R
5000|$|GPM GmbH - Electro-Hydraulic <b>Controlled</b> <b>Flow</b> (ECF) Water Pump ...|$|R
25|$|Within an {{imperative}} programming language, a <b>control</b> <b>flow</b> {{statement is}} a statement the execution of which results in a choice being made as to which {{of two or more}} paths to follow. For non-strict functional languages, functions and language constructs exist to achieve the same result, but they are usually not termed <b>control</b> <b>flow</b> statements.|$|E
25|$|Flow charts, {{drawings}} {{in which the}} nodes represent the steps of an algorithm and the edges represent <b>control</b> <b>flow</b> between steps.|$|E
25|$|From the {{processing}} point of view, hardware interrupts {{are similar to}} resumable exceptions, though they are typically unrelated to the user program's <b>control</b> <b>flow.</b>|$|E
50|$|BWR Type 5: Introduced in 1969 (Moscow OH) Improved ECCS valve <b>flow</b> <b>control.</b> Recirculation <b>flow</b> <b>control</b> valves.|$|R
40|$|A {{description}} is given of some model experiments undertaken {{to resolve problems}} occurring {{in the design of}} special control valves for use in the Hydraulic Machinery Laboratory of the Mechanical Engineering Research Laboratory. Four types are dealt with: (1) a valve to <b>control</b> <b>flows</b> varying from 1 to 30 cu. ft. per sec. in a flow-meter calibrating system; (2) a valve to <b>control</b> <b>flows</b> of up to 30 cu. ft. per sec. in an open pump testing rig with a maximum input of 350 h. p.; (3) a valve to <b>control</b> <b>flows</b> varying from 1 to 20 cu. ft. per sec. in a closed pump research rig with a maximum power input of 350 h. p.; and (4) a hydraulically-balanced in-line valve to <b>control</b> <b>flows</b> varying from 1 to 15 cu. ft. per sec. in a service supply...|$|R
50|$|FLITs is {{an acronym}} for <b>FLow</b> <b>control</b> unITs (or <b>FLow</b> <b>control</b> digITs).|$|R
25|$|Debugging tactics {{can involve}} {{interactive}} debugging, <b>control</b> <b>flow</b> analysis, unit testing, integration testing, log file analysis, monitoring at the application or system level, memory dumps, and profiling.|$|E
25|$|The Engine {{incorporated}} an arithmetic logic unit, <b>control</b> <b>flow</b> in {{the form}} of conditional branching and loops, and integrated memory, making it the first design for a general-purpose computer that could be described in modern terms as Turing-complete.|$|E
25|$|Go was {{initially}} released with exception handling explicitly omitted, with the developers {{arguing that it}} obfuscated <b>control</b> <b>flow.</b> Later, the exception-like / mechanism {{was added to the}} language, which the Go authors advise using only for unrecoverable errors that should halt the entire process.|$|E
40|$|In this paper, {{we aim to}} ascribe {{a meaning}} to SysML {{activity}} diagrams. To this end, we propose a dedicated algebraic-like language, namely activity calculus, and an operational semantics that provides a rigorous and intuitive operational understanding of the behavior captured by the diagram. The semantics covers advanced <b>control</b> <b>flows</b> such as unstructured loops and concurrent <b>control</b> <b>flows.</b> Furthermore, our approach allows non well-formed <b>control</b> <b>flows,</b> with mixed and nested forks and joins. The probabilistic behaviors as specified in SysML are also considered. This formalization allows us to build a sound framework for the verification and validation of systems design expressed in SysML activity diagrams. 1...|$|R
5000|$|A {{pressure}} force due <b>controlled</b> <b>flow</b> areas and supply pressure, often called line pressure ...|$|R
40|$|The present volume {{discusses}} the development history and basic concepts of laminar <b>flow</b> <b>control,</b> laminar <b>flow</b> flight experiments, subsonic laminar-flow airfoils, and a design philosophy for long-range laminar flow-control commercial transports with advanced supercritical airfoils. Also discussed are {{the relationship of}} wave-interaction theory to laminar <b>flow</b> <b>control,</b> supersonic laminar <b>flow</b> <b>control,</b> and the NASA-Langley 8 -ft Transonic Pressure Tunnel...|$|R
25|$|Interrupts and {{signals are}} {{low-level}} mechanisms that {{can alter the}} flow of control in a way similar to a subroutine, but usually occur {{as a response to}} some external stimulus or event (that can occur asynchronously), rather than execution of an in-line <b>control</b> <b>flow</b> statement.|$|E
25|$|Workflows {{comprise}} 'activities'. Developers {{can write}} their own domain-specific activities and then use them in workflows. Windows Workflow Foundation also provides a set of general-purpose 'activities' that cover several <b>control</b> <b>flow</b> constructs. It also includes a visual workflow designer. The workflow designer can be used within Visual Studio 2005, including integration with the Visual Studio project system and debugger.|$|E
25|$|Many {{programming}} languages, {{especially those}} favoring more dynamic styles of programming, offer constructs for non-local <b>control</b> <b>flow.</b> These cause {{the flow of}} execution {{to jump out of}} a given context and resume at some predeclared point. Conditions, exceptions and continuations are three common sorts of non-local control constructs; more exotic ones also exist, such as generators, coroutines and the async keyword.|$|E
50|$|Counterbalance valves {{are in fact}} {{a special}} type of pilot {{controlled}} check valve. Whereas the check valve is open or closed, the counterbalance valve acts {{a bit like a}} pilot <b>controlled</b> <b>flow</b> <b>control.</b>|$|R
30|$|Learners could {{understand}} nested structures in <b>control</b> <b>flows</b> and code descriptions through packing sequences of operations hierarchically.|$|R
50|$|Wormhole <b>flow</b> <b>control,</b> {{also called}} {{wormhole}} switching or wormhole routing, {{is a system}} of simple <b>flow</b> <b>control</b> in computer networking based on known fixed links. It is a subset of <b>flow</b> <b>control</b> methods called Flit-Buffer <b>Flow</b> <b>Control.</b>|$|R
25|$|For any fixed {{constant}} k, the graphs of treewidth at most k {{are called}} the partial k-trees. Other families of graphs with bounded treewidth include the cactus graphs, pseudoforests, series-parallel graphs, outerplanar graphs, Halin graphs, and Apollonian networks. The <b>control</b> <b>flow</b> graphs arising in the compilation of structured programs also have bounded treewidth, which allows certain tasks such as register allocation to be performed efficiently on them.|$|E
25|$|The SADT {{supplies}} {{a specific}} functional view of any enterprise by describing the functions and their relationships in a company. These functions fulfill {{the objectives of}} a company, such as sales, order planning, product design, part manufacturing, and human resource management. The SADT can depict simple functional relationships and can reflect data and <b>control</b> <b>flow</b> relationships between different functions. The IDEF0 formalism is based on SADT, developed by Douglas T. Ross in 1985.|$|E
25|$|Often, {{the same}} {{algorithm}} {{can be expressed}} in Lisp in either an imperative or a functional style. As noted above, Scheme tends to favor the functional style, using tail recursion and continuations to express <b>control</b> <b>flow.</b> However, imperative style is still quite possible. The style preferred by many Common Lisp programmers may seem more familiar to programmers used to structured languages such as C, while that preferred by Schemers more closely resembles pure-functional languages such as Haskell.|$|E
30|$|While a {{connected}} UE {{may have}} several (MAC-es) flows multiplexed in one MAC-e flow, only one AG {{is assigned to}} the UE. This makes the congestion control challenging when some flows belonging to the same UE experience TN congestion while others not(e.g., when (MAC-es) flows have different TNL QoS: an admission <b>controlled</b> <b>flow</b> and a nonadmission <b>controlled</b> <b>flow).</b> In this case, as a simplification, the whole MAC-e flow can be treated as congested.|$|R
5000|$|... #Caption: The sluice which <b>controls</b> <b>flow</b> {{from the}} River Wissey into the cut-off channel, with a pumping {{station in the}} {{background}} ...|$|R
40|$|Abstract. Exception {{handling}} is {{an important}} language feature for building more robust software programs. It is primarily concerned with capturing abnormal events, {{with the help of}} catch handlers for supporting recovery actions. In this paper, we advocate for a specification logic that can uniformly handle exceptions, program errors and other kinds of <b>control</b> <b>flows.</b> Our logic treats exceptions as possible outcomes that could be later remedied, while errors are conditions that should be avoided by user programs. This distinction is supported through a uniform mechanism that captures static <b>control</b> <b>flows</b> (such as normal execution) and dynamic <b>control</b> <b>flows</b> (such as exceptions) within a single formalism. Following Stroustrup’s definition [15, 9], our verification technique could ensure exception safety in terms of four guarantees of increasing quality, namely no-leak guarantee, basic guarantee, strong guarantee and no-throw guarantee. ...|$|R
25|$|With the {{development}} of microfabrication and nanotechnology, the study of microfluidics and nanofluidics is drawing more attention. Research on microfluidic found its advantages in DNA analysis, lab-on-a-chip, and micro-TAS. Devices in a microfluidic system include channels, valves, mixers, and pumps. Integration of these microfluidic devices enables sorting, transporting, and mixing of substances within fluids. However, the failure of moving parts in these systems is usually the critical issue and the main drawback. Mechanisms to <b>control</b> <b>flow</b> without using mechanical parts are always desired for reliability and lifetime.|$|E
25|$|Some {{assemblers}} {{have incorporated}} structured programming elements to encode execution flow. The earliest {{example of this}} approach was in the Concept-14 macro set, originally proposed by Dr. Harlan Mills (March 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which extended the S/360 macro assembler with IF/ELSE/ENDIF and similar <b>control</b> <b>flow</b> blocks. This {{was a way to}} reduce or eliminate the use of GOTO operations in assembly code, one of the main factors causing spaghetti code in assembly language. This approach was widely accepted in the early '80s (the latter days of large-scale assembly language use).|$|E
25|$|Mass flow meters: The {{equations}} {{required for}} calculating rates of oxygen consumption or carbon dioxide production {{assume that the}} flow rates {{into and out of}} the chambers are known exactly. We use mass flow meters which have the advantage of yielding flow rates independent of temperature and air pressure. Therefore, these flow rates can be considered to be corrected to standard conditions (Standard Temperature Pressure). We only measure and <b>control</b> <b>flow</b> at one location—downstream from the chamber. Therefore, we must assume that the inflow and outflow rates are identical. However, during construction of the respirometry system, flow rate must be measured at all steps, across all connections, to verify integrity of flow.|$|E
3000|$|Step 9 : The <b>control</b> <b>flows</b> (gateways) are {{considered}} to orchestrate the structure of agents’ plan with AND, OR, XOR structure [...]...|$|R
50|$|The {{language}} {{can easily be}} extended with <b>control</b> <b>flows,</b> arithmetical expressions, and Input/Output instructions. Then a small, usable programming language would be developed.|$|R
5000|$|The {{closed-loop}} <b>flow</b> <b>control</b> {{mechanism is}} characterized by the ability of the network to report pending network congestion back to the transmitter. This information is then used by the transmitter in various ways to adapt its activity to existing network conditions. Closed-loop <b>flow</b> <b>control</b> is used by ABR (see traffic contract and congestion <b>control).</b> [...] Transmit <b>flow</b> <b>control</b> described above is a form of closed-loop <b>flow</b> <b>control.</b>|$|R
