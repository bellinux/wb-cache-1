0|1488|Public
50|$|Unfortunately, each <b>collection</b> <b>type</b> {{is saved}} under a {{different}} file, creating a new <b>collection</b> <b>type</b> is very difficult and the items list can't display both the image and text at the same time.|$|R
40|$|As {{the most}} widely used data model, the {{relational}} data model has undergone extensions since it was first introduced. The motivation is mainly to increase the ability in capturing complex real world problems. The new era of Internet databases, which includes document meta-data repository and multi media databases have raised a need for more complex semantics of data modeling. Thus, the existing relational database design needs to be extended to capture more complex data structure. One of the data structures is represented by <b>collection</b> <b>types</b> in the attributes of an entity or relationship. With <b>collection</b> <b>type,</b> an attribute can be an atomic type, but also a non-atomic or complex type. The existence of <b>collection</b> <b>type</b> then has changed the whole design methods in relational databases. However, the relational model design has not captured the <b>collection</b> <b>types.</b> Thus, this paper proposes the new database design for the purpose...|$|R
5000|$|Ceux d'Auvergne, Horizons de France <b>collection</b> <b>types</b> et coutumes, 1928, Abin Michel, 1939.|$|R
40|$|A pointfree {{calculus}} of socalled <b>collection</b> <b>types</b> {{is presented}} {{similar to the}} monadic calculus of Tannen Buneman and Wong We observe that our calculus is parametrised by a monad thus making the calculus polytypic A novel contribution of the paper is to discuss situations in which a single application involves more than one <b>collection</b> <b>type</b> In particular we outline the contribution to database research that may be obtained by exploiting current developments in polytypic programming Introduction and overview <b>Collection</b> <b>types</b> such as trees lists and bags have been studied extensively in computing science In particular in the research area of formal program development the observation attributed by LMeertens 	 to HBoom that these types form a hierarchy has prove...|$|R
5000|$|Inverting the {{previous}} example, {{we can also}} use type families to define a class for <b>collection</b> <b>types,</b> where the type function maps each <b>collection</b> <b>type</b> to its corresponding element type:class Collects c where type Elem c empty :: c insert :: Elem c -> c -> c toList :: c -> cinstance Collects e where type Elem e = e empty = [...] insert = (:) toList = idinstance Ord e => Collects (Set.Set e) where type Elem (Set.Set e) = e empty = Set.empty insert = Set.insert toList = Set.toListIn this example, {{the use of a}} type synonym family instead of a data family is essential, since multiple <b>collection</b> <b>types</b> may have the same element type.|$|R
25|$|Some {{familiar}} <b>collection</b> <b>types,</b> including lists, sets, and multisets, are monads. The {{definition for}} lists is given here.|$|R
5000|$|Python 2.7 and 3.0 unify all <b>collection</b> <b>types</b> by {{introducing}} dict and set comprehensions, similar to list comprehensions: ...|$|R
50|$|Both {{languages}} feature {{an extensive}} set of <b>collection</b> <b>types</b> that includes various ordered and unordered types of lists, maps/dictionaries, sets, etc.|$|R
50|$|The only <b>collection</b> <b>type</b> {{offered by}} J is the {{arbitrarily}} dimensioned array. Most algorithms {{can be expressed}} very concisely using operations on these arrays.|$|R
5000|$|... {{transforms}} the subquery into a collection expression {{that can be}} used in another query, or in assignment to a column of appropriate <b>collection</b> <b>type.</b>|$|R
5000|$|One foreach macro {{cannot be}} defined {{that works with}} {{different}} <b>collection</b> <b>types</b> (e.g., array and linked list) or that is extensible to user types.|$|R
40|$|We {{present a}} new algebra for <b>collection</b> <b>types</b> based on monoids and monoid homomorphisms. The types {{supported}} in our algebra {{can be any}} nested composition of <b>collection</b> <b>types,</b> which include lists, sets, multisets, vectors, and matrices. We define a new calculus equivalent to this algebra, called monoid comprehensions, that captures operations involving diverse <b>collection</b> <b>types</b> in declarative form. This language is ideal for expressing data and nested parallelism and can be effectively translated into many parallel architectures. We present a normalization algorithm that reduces any expression in our algebra to a canonical form which, when evaluated, generates very few intermediate data structures. These canonical forms are amenable to {{a higher degree of}} parallelism. The normalization algorithm generalizes some well-known algebraic optimization techniques and heuristics used in relational query optimization. Finally, we extend this algebra by incorporating object-oriented features, such [...] ...|$|R
50|$|Recordings may {{be searched}} by {{keywords}} or browsed by <b>collection</b> <b>types,</b> dates, languages, performer names and subjects. Several collections can be browsed using a map interface.|$|R
40|$|In recent years, {{a number}} of {{proposals}} {{have been made to}} extend conventional conceptual data modeling techniques with concepts for modeling complex object structures. Among the most prominent proposed concepts is the concept of <b>collection</b> <b>type.</b> A <b>collection</b> <b>type</b> is an object type of which the instances are sets of instances of an other object type. A drawback of the introduction of such a new concept is that the formal definition of the technique involved becomes considerably more complex. In this paper a new kind of constraint, the extensional uniqueness constraint, is introduced, providing an alternative treatment of complex object types. The formal definition of this constraint type is presented, the advantages of its introduction are discussed, and its consequences for, among others, identification schemes are elaborated. Keywords: Conceptual Data Modeling, ER, NIAM, OO, Uniqueness constraint, Extensional uniqueness constraint, Identification, <b>Collection</b> <b>type.</b> Classification: AMS [...] ...|$|R
5000|$|... + The Wisconsin State Historical Society {{adding the}} Keck visual archive with photos. See their Visual Materials <b>Collection,</b> <b>type</b> Keck into search box next to Go button. http://www.wisconsinhistory.org/Content.aspx?dsNav=N:1135 ...|$|R
40|$|Fuzzy set {{approaches}} are particularly suitable for issues of modeling uncertainty in spatial data. Previous {{work of the}} authors describes a framework to support uncertainty by using an object-oriented approach to modeling spatial data. The original research focused on how to incorporate spatial data into a fuzzy object model. This paper expands upon that by discussing the implications of incorporating all <b>collection</b> <b>types</b> described in the ODMG object database standard in this framework. In addition, {{we will look at}} how future <b>collection</b> <b>types</b> may be incorporated into the framework...|$|R
5000|$|While {{lists and}} {{generators}} had comprehensions/expressions, in Python versions older than 2.7 the other Python built-in <b>collection</b> <b>types</b> (dicts and sets) {{had to be}} kludged in using lists or generators: ...|$|R
50|$|Java {{collections}} {{framework is}} extended by the Apache Commons Collections library, which adds <b>collection</b> <b>types</b> {{such as a}} bag and bidirectional map, as well as utilities for creating unions and intersections.|$|R
5000|$|Shielded A strict {{and mostly}} obstruction-free STM for [...]NET, written in C#. Features include: {{conditional}} transactions, commutable (low conflict) operations, transactional <b>collection</b> <b>types,</b> and automatic generation of transactional proxy-subclasses for POCO objects.|$|R
40|$|Partial 16 S rDNA from Vibrio <b>collection</b> <b>type</b> strains {{and recent}} {{isolates}} of Vibrio-related strains were sequenced and compared with previously published sequences. A 24 -base DNA oligonucleotide (VaV 3) {{was designed and}} used as a specific probe for detection and identification of Vibrio anguillarum. Its specificity was tested against <b>collection</b> <b>type</b> strains and environmental isolates and no cross-reaction was found. The probe detected 8 of the 10 V. anguillarum serovars. It was applied to screen different Vibrio-related strains isolated from marine hatcheries and fish farms. The detection limit in DNA-DNA slot blot hybridization was 150 pg...|$|R
50|$|Information {{concerning}} an item (from one of {{the default}} <b>collection</b> <b>types)</b> can be automatically retrieved from various Internet websites. Only {{a few pieces of}} information, such as movie title or ISBN, are required to perform the search.|$|R
50|$|<b>Collection</b> <b>types</b> model {{groups of}} values. Sets are finite unordered {{collections}} in which duplication between values is suppressed. Sequences are finite ordered collections (lists) in which duplication may occur and mappings represent finite correspondences between {{two sets of}} values.|$|R
40|$|Only a few {{graphical}} {{user interface}} (GUI) toolkits for Standard ML are available to thepublic {{and they are in}} general old and {{do not seem to be}} actively maintained. Theinability to create modern GUIs can be seen as one of the greater drawbacks ofapplication development in Standard ML (SML). The Giraffe library provides a Poly/MLand MLton interface for GObject based C libraries that have GObject introspectionrepository information available, using language bindings. Development of the Giraffelibrary is far gone, but currently there is no support for GLib <b>collection</b> <b>types.</b> Thisthesis presents a simple implementation of support for the GSList <b>collection</b> <b>type</b> forthe Giraffe library, as well as performance results of a number of different approachesto the conversion between GSLists and SML lists...|$|R
40|$|Abstract. One of the <b>{{collection}}</b> joins <b>types</b> in Object Oriented Database (OODB) is collection equi-join. The {{main feature}} of collection joins {{is that they}} involve <b>collection</b> <b>types.</b> In this paper we present our experience in implementing collection equi-join algorithms by using Message Passing Interface (MPI). In particular, it layouts the fundamental techniques {{that are used in}} the implementation and that may be applicable to other collection joins. Two collection equi-joins discussed here are Double Sort-merge and Sort Hash Join. The implementation was done on a clustered environment and employed a data parallelism concept. ...|$|R
40|$|We {{present a}} new algebra for complex {{database}} objects based on monoids and monoid homomorphisms. The object types supported in our algebra {{can be any}} nested composition of <b>collection</b> <b>types,</b> which include lists, sets, multisets, vectors, and matrices. We define a new calculus equivalent to this algebra, called monoid comprehensions, that captures operations involving diverse <b>collection</b> <b>types</b> in declarative form. We present a normalization algorithm that reduces any expression in our algebra to a canonical form which, when evaluated, generates very few intermediate data structures. This algorithm generalizes some well-known algebraic optimization techniques and heuristics used in relational query optimization. In addition, we demonstrate the modeling power of this language by capturing physical storage structures and algorithms, such as merge join, hash join, and partitioned hash join. Finally, we extend this algebra by incorporating object-oriented features, such as object identity, an [...] ...|$|R
40|$|Abstract. Collections play an {{important}} part in everyday life. There-fore, conceptual data models should support <b>collection</b> <b>types</b> to make data modeling as natural as possible for its users. Based on the funda-mental properties of endorsing order and multiplicity of its elements we introduce the <b>collection</b> <b>types</b> of rankings, lists, sets and bags into the framework of Entity-Relationship modeling. This provides users with easy-to-use constructors that naturally model different kinds of collec-tions. Moreover, we propose a transformation of extended ER schemata into relational database schemata. The transformation is intuitive and invertable introducing surrogate attributes that preserve the semantics of the collection. Furthermore, it is a proper extension to previous trans-formations, and results in a relational database schema that is in Inclu-sion Dependency Normal Form. In addition, we introduce a uniqueness constraint that identifies collections uniquely and guarantees referential integrity at the same time. ...|$|R
40|$|<b>Collection</b> <b>types</b> such as sets, {{bags and}} arrays {{have been used}} as data {{structures}} in both traditional and object oriented programming. Although sets were used as record components in early database work, this practice was largely discontinued with the widespread adoption of relational databases. Object-relational and object databases once again allow database designers to embed collections as database fields. Should collections be specified directly on the conceptual schema, as mapping annotations to the conceptual schema, or only on the logical database schema? This paper discusses {{the pros and cons of}} different approaches to modeling collections. Overall it favors the annotation approach, whereby <b>collection</b> <b>types</b> are specified as adornments to the pure conceptual schema to guide the mapping process from conceptual to lower levels. The ideas are illustrated using notations from both object-oriented (Unified Modeling Language) and fact-oriented (Object-Role Modeling) approaches...|$|R
5000|$|Classes: sets, <b>collections,</b> concepts, <b>types</b> of objects, or {{kinds of}} things.|$|R
40|$|Recent {{proposals}} for adding parameterised types to Java {{have left a}} number of important practical issues undiscussed. In this paper we present the language Genja which is a new generic extension of Java oriented towards practical support for generic <b>collection</b> <b>types.</b> We discuss design alternatives related to extending the power of unconstrained genericity, solving the weaknesses of constrained genericity in other proposals and defining the compatibility of named and anonymous instantiations. By enhancing support for reusability and providing a higher level style of programming via a library of standard generic <b>collection</b> <b>types</b> Genja aims to extend Java's contribution to efficient software production. 1 Introduction It is well recognised that the addition of parameterised types to Java [Gosling 96] could significantly enhance its support for software reuse. Current Java programming practice (as seen for example in the library classes 'Vector' and 'HashTable') is {{to make use of the}} [...] ...|$|R
40|$|Generic type {{definitions}} can aid software reuse {{and hence}} reduce development costs. Reusability should ideally neither compromise program clarity nor incur run-time costs {{in comparison to}} one-off programming. In this paper we formulate requirements for a practically acceptable mechanism for genericity in Java. We show that two recent proposals fail {{to meet the requirements}} for a test case involving <b>collection</b> <b>types</b> in a data processing application. We suggest an alternative Java extension which is more flexible, clearer and more efficient. 2 1 Introduction Genericity, or parametric polymorphism, is an important aspect of software reuse. In particular, a good library of generic <b>collection</b> <b>types</b> and implementations can {{play a significant role in}} reducing software production costs. Generic collection classes are often simulated in Java[GJS 96] by using the class 'Object' as the element <b>type</b> of a <b>collection</b> (as in the standard class 'Vector') and casting to the intended type on retrie [...] ...|$|R
40|$|Despite the {{possibility}} of providing standard collection frameworks, object-oriented languages do not generally encourage a 'very high level' style of programming in which collection components are regarded as first class citizens and in which different implementations for a collection can be exchanged without affecting the correctness of a program and with minimal change to the source code. This results both from weaknesses {{in the structure of}} the frameworks and from the poor degree of integration of collections into the languages. In this paper we present a new approach to the integration of collections in object-oriented languages in which <b>collection</b> <b>types</b> are part of the language but collection implementations are not. We also show how the integration of <b>collection</b> <b>types</b> allows automatic conversions which, among other advantages, provide a new solution to the problem of statically type-safe compatibility for collections. 1. Introduction The management of collections of data const [...] ...|$|R
40|$|We {{study the}} {{pragmatics}} of integrating <b>collection</b> <b>types,</b> that model a broad class of nonnumerical applications, into the Bulk Synchronous Parallel (BSP) model which abstracts {{a diversity of}} parallel architectures using just four numerical parameters. We outline how the <b>collection</b> <b>types</b> have been built on-top of the direct BSP programming environment provided by BSPlib, give results on a SGI PowerChallenge and IBM SP 2, and discuss how these types can help implement object databases. 1 Introduction Parallel computers have been successfully deployed in many scientific and numerical application areas, but their use in commercial applications, which are often non-numerical in nature, has been scarce. One of the impediments in the long-term commercial uptake of parallel computing has been the proliferation of differing machine architectures and corresponding programming models. However, due to several technological and economic reasons, the various classes of parallel computers such as shar [...] ...|$|R
40|$|Abstract. We {{investigate}} how achievements of programming languages research {{can be used}} for designing and extending fact oriented modeling languages. Our core contribution is that we show how extending fact oriented modeling languages with the single concept of algebraic data types leads to a natural and straightforward modeling of complex information structures like unnamed <b>collection</b> <b>types</b> and higher order types. ...|$|R
40|$|FIGURE 2. Tatuidris tatusia type series, showing pilosity pattern A. A – D) Full face view, lateral view, dorsal view, and {{label of}} T. tatusia Holotype; E – G) Full face view, lateral view, dorsal view, and label of T. tatusia Paratype (MCZ <b>collection</b> <b>Type</b> locality: El Salvador [Brown and Kempf 1968]). Images A – D {{courtesy}} of antweb. org...|$|R
50|$|In {{computer}} science, a set is {{an abstract}} data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite set. Unlike most other <b>collection</b> <b>types,</b> rather than retrieving a specific element from a set, one typically tests a value for membership in a set.|$|R
40|$|This {{chapter is}} the first in our {{coverage}} of collections. Collections are used to organize and process a number of objects or values of the same type. In almost any real-life program, collections of objects or values play important roles. Collections fit nicely in our agenda of object-oriented programming. A collection holds a number of objects (of the same type), but a concrete collection is also itself an object. The commonalities of a number of collections objects are described by a <b>type</b> (a <b>collection</b> <b>type).</b> In the following chapters we will encounter a number of different interfaces and classes, which represent <b>collection</b> <b>types.</b> Not surprisingly, generic types as discussed in Chapter 42, play an important role when we wish to deal with collections that are constrained to contain only objects of a particular element type. In the rest of this short introductory chapter we will briefly outline the historic development of collectio...|$|R
