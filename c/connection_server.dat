9|443|Public
40|$|The {{distributed}} system enables multiple, simultaneous connections between clients and Inquery servers. The different {{components of the}} system communicate using a local area network. Each component may reside on a different host and operates independently of the others. In this section, we describe the functionality and interaction between the clients, the <b>connection</b> <b>server,</b> and the Inquery servers. The clients are lightweight processes that provide a user interface to the retrieval system. Clients interact with the distributed IR system by connecting to the <b>connection</b> <b>server.</b> The clients initiate all work in the system, but they perform very little computation. The clients can issue {{the entire range of}} IR commands but, in this paper, we focus on inquery, document retrieval commands and query evaluation measurements. A client sends query commands to the <b>connection</b> <b>server...</b>|$|E
40|$|TCP/IP架構的網路的技術,已經到了成熟的地步. 但是由於使用的人越來越 多,所以頻寬與位址都顯得不足,網內網路(intranet) 的應用觀念於是興 起. 本篇論文提出了一種透過一個有合法位址的連接伺服器(connection server),代替網內網路主機對其他網際網路主機連線,以網內網路主機對 網際網路主機的主動連接需求方式,經由連接伺服器,使網內網路上的電 腦,可以對網際網路的電腦連線. The {{technology}} of TCP/IP network has been becoming mature. The arising of intranet applications {{come up for}} more users, which causes the shortage of bandwidth and ip address. This paper gives a solution by offering an <b>connection</b> <b>server</b> which makes possible for hosts of intranet connect to the Internet actively...|$|E
40|$|Abstract. The {{interoperability}} {{among different}} science grid systems is indispensable to worldwide {{use of a}} large-scale experimental facility {{as well as a}} large-scale supercomputer. One of the simplest ways to achieve the interoperability is to convert message among different science grid systems without modifying themselves. Under such consideration, the interoperability between UNICORE and ITBL (IT-Based Laboratory) has been achieved without modifying these grid systems by adopting a <b>connection</b> <b>server</b> which works as a mediator. Until international standardization is established, the method of message conversion among different science grid systems is promising as a way to establish the interoperability. ...|$|E
40|$|Energy {{consumption}} in hosting Internet services {{is becoming a}} pressing issue as these services scale up. Dynamic server provisioning techniques are effective in turning off unnecessary servers to save energy. Such techniques, mostly studied for request-response services, face challenges {{in the context of}} <b>connection</b> <b>servers</b> that host a large number of long-lived TCP connections. In this paper, we characterize unique properties, performance, and power models of <b>connection</b> <b>servers,</b> based on a real data trace collected from the deployed Windows Live Messenger. Using the models, we design server provisioning and load dispatching algorithms and study subtle interactions between them. We show that our algorithms can save a significant amount of energy without sacrificing user experiences. ...|$|R
5|$|WhatsApp - {{processes}} 2 million concurrent TCP <b>connections</b> per <b>server.</b>|$|R
5000|$|Randomly loses <b>connection</b> to <b>server</b> forcing you {{to restart}} the work you were doing from scratch ...|$|R
40|$|This paper {{presents}} {{the outcomes of}} four years of investigations into the interaction between multimedia telecommunications services and broadband networks. Our system architecture provides name server and <b>connection</b> <b>server</b> capability to cope with roaming users, manage calls of varying media on heterogenous networks, and provide a terminal abstraction based on media sources and sinks that is independent of terminal and network capabilities. We then discuss the results of experiments on networks of national scale. 1 The work reported here was carried out at OTC Research and Development between 1989 and 1992 and at the University of Wollongong between 1993 and 1994 with sponsorship from ATERB grant number N 031 / 179. 2 The experiments demonstrate how the high-level primitives in the architecture allow the rapid creation of multipoint, multi-media applications. Objective performance measurements and subjective useability results are presented for the applications. The results were derived [...] ...|$|E
30|$|The {{data will}} be {{duplicated}} but will be more secure as a backup after {{the addition of the}} VM remote server. However, if the remote server is removed, the scenarios cannot run because the data reside on it, resulting in loss of the data. By contrast, the addition of the VM cloudlet results in better performance due to cloudlet collaboration. The removal of VM cloudlets decreases performance due to the decreased collaboration between the cloudlets. The addition or the removal of the VM client has no effect on the system as the VM client allows a client to execute an operating system locally on their device, whereas the operation system is managed centrally. The client requests a word through the VM client, and then the <b>connection</b> <b>server</b> authenticates the client before connecting the client with the virtual network. Thus, the addition of the VM client does not affect the system as it needs the words to operate. However, if the VM client is removed, the client {{would not be able to}} request the words.|$|E
40|$|This {{research}} addresses {{improvements to}} network resource utilization through a specific means of measurement-based control of traffic admission in broadband integrated services digital networks. A method and system for Connection Admission Control (CAC) in a communications network, {{such as an}} ATM formatted B-ISDN network, is defined, analyzed, and tested. Using end-to-end virtual path (VP) structures and class-of-service separation, various network connections, or virtual channels (VC), are administered using a weighted round robin <b>connection</b> <b>server.</b> Network users aware of this network structure and {{the means by which}} queue lengths are determined may easily calculate a Sustainable Cell Rate (SCR) for the traffic they wish to introduce into the network path for transmission to a given destination. The user declared SCR, in addition to other user declared traffic parameters, determines the queue lengths allocated in the network switches, such that a required level of Quality of Service (QoS) is maintained. A measurement of certain types of transmitted cells in a VP, such as idle, unassigned, or low-priority cells, is made at the source of the VP. This measurement of cells that may be considered to be “empty”, i. e., available for use by highpriorit...|$|E
50|$|DNET {{provided}} named network services, {{and supported}} a multicast protocol for finding them. Clients {{would ask for}} a named service, and the first respondent (of potentially many) would get the <b>connection.</b> <b>Servers</b> could either be resident, in which case they registered their service name(s) with the protocol stack when they were started, or transient, in which case a fresh server was forked/execed for each client connection.|$|R
5000|$|Bombus {{completely}} implements XMPP Core specifications {{and a lot}} of XMPP extensions, {{as major}} desktop XMPP clients. It also provides Stream Compression extension - the most essential feature for GPRS users - it can reduce network traffic costs up to 10 times comparing with plain XMPP <b>connection.</b> Secured <b>server</b> <b>connection</b> is also available, if cellphone support it.|$|R
50|$|The $SOURCE and $SINK {{commands}} {{may be used}} to reassign the FDnames {{assigned to}} *SOURCE* and *SINK*. The $MOUNT command assigns pseudo device names (e.g. *T22*, *NET*) to devices such as magnetic and paper tapes and network <b>connections</b> (including <b>server</b> <b>connections).</b> The $CREATE command can be used to create pseudo device names for use with BITNET import and export, for spooled print jobs, and for dummy devices.|$|R
40|$|With the {{remarkable}} development of wireless Internet, there are rapidly growing mobile telecommunication services for its terminal. In particular, wireless e-commerce market offering information service {{as well as}} on-line or off-line sales and has been growing at a rapid pace, requiring wireless payment system for the success for it. The existing methods for the payment system are divided into hardware one and software one. However, the shortcoming of the former one is that user is required to attach smart card to mobile terminal and it cannot prevent the misuse of the third party. On the other hand, software one is to link real-time approval and payment system through mobile telecommunication wireless network. In this paper, {{we would like to}} suggest MobileC-based wireless payment system to execute on GVM (General Virtual Machine) based application program download solution. The wireless payment system is composed of initialization process and transaction process. Initialization process is to download program of payment system, formal authentication certificate and personal credit information to mobile device, to save them into non-volatile memory, while another one is executed every time of transaction through mutual exchange between <b>connection</b> <b>server</b> and mobile device. Mobile device is input through users’ interface and encrypts input data, to transfer to server...|$|E
40|$|The goal of {{this work}} is to {{contribute}} to the field of interoperability of Workflow models. To achieve this interoperability, we have built a generic architecture that addresses three levels of abstraction: the common meta-model that the Workflow models must share, the common model that they enact collectively, and the common data model whose management is shared. So, the approach we have adopted is based on a strategy of uniformity to solve the problems related to the semantic, syntactic and execution platform heterogeneity. The common meta-model gathers the common concepts that are shared between all these Workflow models and it defines their semantics. These concepts (activity, event, etc.) are extracted from different formalisms used in the field of business process (or Workflow). This latter allows us to instantiate a canonical model that describes only common parts (activities, artifacts). As for the common data model, it is instantiated by the common model. For the control interoperability, we have adopted an approach that deals with a more flexible connection mechanism based on events through a <b>connection</b> <b>server.</b> This approach can be implemented above any interoperability platform (CORBA, EJB, etc.). Also, the shared canonical model that we have proposed is generic, simple and re-usable...|$|E
40|$|Leung Cheung-chi. Thesis (M. Phil.) [...] Chinese University of Hong Kong, 2001. Includes bibliographical {{references}} (leaves 76 - 78). Abstracts in English and Chinese. Chapter 1 [...] - INTRODUCTION [...] - p. 1 Chapter 1. 1 [...] - Background [...] - p. 1 Chapter 1. 2 [...] - Objective [...] - p. 2 Chapter 1. 3 [...] - Overview of the Thesis [...] - p. 3 Chapter 2 [...] - APPLICATION OF VOIP IN CALL CENTER [...] - p. 6 Chapter 2. 1 [...] - An Intelligent IP-based Call Center Model [...] - p. 6 Chapter 2. 1. 1 [...] - Major Components [...] - p. 7 Chapter a) [...] - VoIP Gateways [...] - p. 7 Chapter b) [...] - Automatic Call Distributor (ACD) [...] - p. 8 Chapter c) [...] - Operators [...] - p. 8 Chapter d) [...] - Monitoring Tool [...] - p. 9 Chapter 2. 1. 2 [...] - Major Functions [...] - p. 9 Chapter 2. 2 [...] - Experimental Study of an IP-to-IP Call Center - VoIP Application in Education [...] - p. 10 Chapter 2. 2. 1 [...] - Architecture [...] - p. 11 Chapter 2. 2. 2 [...] - Voice <b>Connection</b> <b>Server</b> [...] - p. 12 Chapter 2. 2. 3 [...] - Call Establishment [...] - p. 14 Chapter 2. 2. 4 [...] - A Preliminary Implementation [...] - p. 14 Chapter 3 [...] - THE ACD AND ITS SOFTWARE STRUCTURE [...] - p. 17 Chapter 3. 1 [...] - Three-Layer Software Structure [...] - p. 17 Chapter 3. 1. 1 [...] - Network Infrastructure Layer [...] - p. 18 Chapter 3. 1. 2 [...] - Call Management Layer [...] - p. 18 Chapter 3. 1. 3 [...] - Application Layer [...] - p. 19 Chapter 3. 1. 4 [...] - Interoperation Between Layers [...] - p. 19 Chapter 3. 2 [...] - Advantages of Adopting this Software Structure [...] - p. 20 Chapter 3. 3 [...] - Functional Overview of the ACD [...] - p. 21 Chapter 3. 3. 1 [...] - Call Establishment [...] - p. 21 Chapter 3. 3. 2 [...] - Call Waiting [...] - p. 23 Chapter 3. 3. 3 [...] - Call Forwarding [...] - p. 25 Chapter 3. 3. 4 [...] - Routing Mechanism in the ACD [...] - p. 26 Chapter a) [...] - "Queues, Operator Groups and Operators" [...] - p. 26 Chapter b) [...] - Priority Based Call Routing [...] - p. 28 Chapter c) [...] - Routing of New Incoming Calls [...] - p. 29 Chapter d) [...] - Assigning Calls in Waiting Queues to Operators [...] - p. 32 Chapter 4 [...] - IMPLEMENTATION OF THE ACD [...] - p. 34 Chapter 4. 1 [...] - Requirements {{in implementing}} the ACD [...] - p. 34 Chapter 4. 1. 1 [...] - Asynchronous Method Call [...] - p. 34 Chapter 4. 1. 2 [...] - Transaction Planning [...] - p. 36 Chapter 4. 1. 3 [...] - Failure Handling [...] - p. 37 Chapter 4. 2 [...] - Available Technologies [...] - p. 38 Chapter 4. 2. 1 [...] - Enterprise JavaBean (EJB) [...] - p. 38 Chapter a) [...] - Entity Bean [...] - p. 40 Chapter b) [...] - Session Bean [...] - p. 40 Chapter c) [...] - Usage of Session Beans and Entity Beans [...] - p. 41 Chapter 4. 2. 2 [...] - COM+ [...] - p. 42 Chapter 4. 2. 3 [...] - EJB vs COM+ [...] - p. 43 Chapter 4. 3 [...] - Implementation [...] - p. 47 Chapter 4. 3. 1 [...] - Mapping the EJB model to the Implementation of the ACD [...] - p. 47 Chapter 4. 3. 2 [...] - Design of Entity Beans [...] - p. 49 Chapter 4. 3. 3 [...] - Design of Session Beans [...] - p. 51 Chapter 4. 3. 4 [...] - Asynchronous Method Call [...] - p. 53 Chapter 4. 3. 5 [...] - Transaction Planning [...] - p. 55 Chapter 4. 3. 6 [...] - Failure Handling [...] - p. 57 Chapter a) [...] - Failure Handling for VoIP gateways [...] - p. 58 Chapter b) [...] - Failure Handling in the ACD [...] - p. 60 Chapter 5 [...] - AN EXPERIMENT [...] - p. 64 Chapter 5. 1 [...] - Experiment on the Call Center Prototype [...] - p. 64 Chapter 5. 1. 1 [...] - Setup of the Experiment [...] - p. 64 Chapter 5. 1. 2 [...] - Experimental Results [...] - p. 66 Chapter a) [...] - Startup Time for Different Components [...] - p. 66 Chapter b) [...] - Possessing Time for Different Requests [...] - p. 67 Chapter 5. 2 [...] - Observations [...] - p. 69 Chapter 5. 2. 1 [...] - Observations on Experimental Results [...] - p. 69 Chapter 5. 2. 2 [...] - Advantages and Disadvantages of Using EJB [...] - p. 70 Chapter 6 [...] - CONCLUSIONS [...] - p. 72 BIBLIOGRAPHY [...] - p. 7...|$|E
5000|$|Encrypted TLSv1.2 <b>connection</b> to IMAP <b>server</b> using PHP5.6 SSL/TLS {{libraries}} ...|$|R
50|$|Path: <b>Connection</b> {{from the}} <b>server</b> through the HBA to a {{specific}} LUN.|$|R
5000|$|... network API for Multiplayer games, best used in <b>connection</b> with ShiVa <b>Server</b> ...|$|R
50|$|Accounts {{allow for}} {{exclusive}} <b>connections.</b> A <b>server</b> node may establish accounts and then distribute the credentials information. Accounts create an artificial web of trust without exposing the public encryption key and without attaching {{the key to}} an IP address.|$|R
5000|$|The client opens a <b>connection</b> to the <b>server</b> {{and sends}} the program name (via HTTP Post).|$|R
50|$|Frequently a {{user can}} reduce the impact of network {{problems}} by using multiple <b>connections.</b> Some <b>servers</b> allow as many as 60 simultaneous connections, but this varies widely. Likewise, newsreaders are commonly limited to using as few as two or four connections.|$|R
5000|$|A server process first {{creates a}} named <b>server</b> <b>connection</b> port object, {{and waits for}} clients to connect.|$|R
5000|$|Load average monitoring: Tinyproxy can be {{configured}} {{to refuse}} <b>connections</b> after the <b>server</b> load reaches a certain point.|$|R
50|$|The main {{application}} of FCoE is in data center storage area networks (SANs). FCoE has particular application in data centers {{due to the}} cabling reduction it makes possible, {{as well as in}} server virtualization applications, which often require many physical I/O <b>connections</b> per <b>server.</b>|$|R
50|$|Common {{applications}} {{of very high}} number of <b>connections</b> include pub/sub <b>servers,</b> chat, file servers, web servers, and software-defined networking.|$|R
5000|$|The client {{opens the}} <b>connection</b> with the <b>server</b> and sends the initial packet specifying the byte order it is using.|$|R
30|$|To {{create a}} <b>server</b> <b>{{connection}}.</b> In this case, {{this is the}} connection requested in step 3 executed by the above-mentioned GSCA application.|$|R
5000|$|In POP <b>{{connection}}s,</b> the <b>server</b> {{will usually}} close a client connection {{after a certain}} period of inactivity (the timeout period). This ensures that connections do not persist forever, if the client crashes or the network goes down. Open connections consume resources, and may prevent other clients from accessing the same mailbox.|$|R
30|$|The device {{establishes}} Internet {{network connectivity}} via the USB port. Internet <b>connection</b> to remote <b>servers</b> {{must be secured}} using 128 -bit SSL or better.|$|R
5000|$|The HTML 5 WebSocket API working draft {{specifies}} {{a method}} for creating a persistent <b>connection</b> with a <b>server</b> and receiving messages via an [...] callback.|$|R
5000|$|... /* event loop */ while (!done && (e = xcb_wait_for_event(c))) { switch (e->response_type & ~0x80) { case XCB_EXPOSE: /* draw or redraw {{the window}} */ xcb_poly_fill_rectangle(c, w, g, 1, &r); xcb_flush(c); break; case XCB_KEY_PRESS: /* exit on key press */ done = 1; break; } free(e); } /* close <b>connection</b> to <b>server</b> */ xcb_disconnect(c); ...|$|R
5000|$|This issue can be {{resolved}} by securing the communication between the user's computer and the server by employing Transport Layer Security (HTTPS protocol) to encrypt the <b>connection.</b> A <b>server</b> can specify the [...] flag while setting a cookie, which will cause the browser to send the cookie only over an encrypted channel, such as an SSL connection.|$|R
5000|$|Normally when {{a client}} {{attempts}} {{to start a}} TCP <b>connection</b> to a <b>server,</b> the client and server exchange a series of messages which normally runs like this: ...|$|R
30|$|The {{transport}} protocol plays {{a crucial role}} in migration of a VM instance. The most commonly used transport layer protocol is TCP. TCP uses five tuples, the source IP address, the destination IP address, the source port, the destination port and the protocol type to identify a <b>connection</b> between a <b>server</b> and a client. If any of the five tuples changes during the lifetime of the TCP connection, the established connection will be closed abruptly. In order to continue the <b>connection</b> with the <b>server,</b> the client needs to initiate a new connection with TCP.|$|R
50|$|BorderManager was {{designed}} to run {{on top of the}} NetWare kernel and takes advantage of the fast file services that the NetWare kernel delivers. Aside from the more easily copied firewall and VPN access point services, Novell designed the proxy services to retrieve web data with a <b>server</b> to <b>server</b> <b>connection</b> rather than a client to <b>server</b> <b>connection</b> as all of the prior proxy servers on the market had done. This retrieval method along with NetWare's fast file IO and other proprietary code made BorderManager's proxy engine one of the fastest in existence.|$|R
50|$|TCP Multiplexing is {{loosely based}} on {{established}} connection pooling techniques utilized by application server platforms to optimize the execution of database queries from within applications. An ADC establishes a number of <b>connections</b> to the <b>servers</b> in its pool and keeps the connections open. When a request is received by the ADC from the client, the request is evaluated and then directed to a server over an existing connection. This {{has the effect of}} reducing the overhead imposed by establishing and tearing down the TCP <b>connection</b> with the <b>server,</b> improving the responsiveness of the application.|$|R
