296|711|Public
5000|$|The {{associated}} design <b>configuration</b> <b>problem</b> {{consists of}} the following three constituent tasks: ...|$|E
50|$|By sitting GLS on top {{of genetic}} algorithm, Tung-leng Lau {{introduced}} the Guided Genetic Programming (GGA) algorithm. It was successfully applied to the general assignment problem (in scheduling), processors <b>configuration</b> <b>problem</b> (in electronic design) {{and a set of}} radio-link frequency assignment problems (an abstracted military application).|$|E
5000|$|A [...] "Hello, World!" [...] {{program is}} often used as a sanity test for a {{development}} environment. If the program fails to compile or execute, the supporting environment likely has a <b>configuration</b> <b>problem.</b> If it works, any problem being diagnosed likely lies in the actual application in question.|$|E
40|$|Abstract. An {{inherent}} {{and often}} very underestimated difficulty in solving <b>configuration</b> <b>problems</b> is {{the existence of}} many structural isomorphisms. This issue of considerable importance attracted little research interest despite its applicability to almost all <b>configuration</b> <b>problems.</b> We define two search procedures allowing the removal of large portions of the search space that provably solely contain non canonical solutions. The tests performed on each node are time polynomial. Experimental results are reported on a simple generic configuration example. ...|$|R
40|$|In this paper, {{we propose}} {{a method for}} {{approximating}} cost functions arising in connection with <b>configuration</b> <b>problems</b> within the formal framework of resource-based configuration. Knowledge about cost functions is important since these functions {{can be used for}} guiding the heuristical search for (approximations of) optimal solutions to <b>configuration</b> <b>problems.</b> Not only is the approximation method motivated by theoretical considerations, but also validated by means of empirical results. Moreover, approximating functions can be computed very efficiently. 1 Introduction Loosely spoken, configuration is defined as the process of composing a system from a set of predefined objects. Such a system has to fulfill a number of constraints, which appear in the form of technical restrictions and further demands imposed by the user of the system. The result of this process is called configuration, too. Several formalization schemes have been proposed for modelling <b>configuration</b> <b>problems.</b> The investi [...] ...|$|R
40|$|Abstract- This paper applies Bayesian Optimization Algorithm with Tabu Search (Tabu-BOA) to {{electric}} equipments <b>configuration</b> <b>problems</b> {{in a power}} plant. Tabu-BOA is {{a hybrid}} evolutionary computation algorithm with competent GAs and meta-heuristics. The <b>configuration</b> <b>problems</b> we consider have complex combinatorial properties with multiple objectives, therefore, they are hard to solve via conventional techniques. First, we investigate {{the performance of the}} proposed algorithm using simple test functions, Next, using the method, we solve the following practical problems: both (1) minimize the cost of implementation and operation, and (2) maximize the marginal supply capacity in operation. ...|$|R
50|$|Case based: in case based configurators, the {{knowledge}} necessary for reasoning is stored mainly in cases that record {{a set of}} configurations sold to earlier customers. With the case based approach, one tries to solve the current <b>configuration</b> <b>problem</b> by finding a similar, previously solved problem and adapting it to the new requirements. The basic processing cycle in a case based configurators is: input customer requirements, retrieve a configuration and adapt {{the case to the}} new situation.|$|E
5000|$|In August 2007, {{the code}} used to {{generate}} Facebook's home and search page as visitors browse the site was accidentally made public. A <b>configuration</b> <b>problem</b> on a Facebook server caused the PHP code to be displayed instead of the web page the code should have created, raising concerns about how secure private data on the site was. A visitor to the site copied, published and later removed the code from his web forum, claiming he had been served and threatened with legal notice by Facebook. Facebook's response was quoted by the site that broke the story: ...|$|E
50|$|Regarding {{a single}} warehouse, besides {{the issue of}} {{designing}} and building the warehouse, configuration means solving a number of interrelated technical-economic problems: dimensioning rack cells, choosing a palletizing method (manual or through robots), rack dimensioning and design, number of racks, number and typology of retrieval systems (e.g. stacker cranes). Some important constraints have to be satisfied: fork and load beams resistance to bending and proper placement of sprinklers. Although picking {{is more of a}} tactical planning decision than a <b>configuration</b> <b>problem,</b> it is important to take it into account when deciding the racks layout inside the warehouse and buying tools such as handlers and motorized carts since once those decisions are taken they will work as constraints when managing the warehouse, same reasoning for sorting when designing the conveyor system or installing automatic dispensers.|$|E
40|$|In this paper, {{we propose}} {{a method for}} {{approximating}} cost functions arising in connection with <b>configuration</b> <b>problems</b> within the formal framework of resource-based configuration. Knowledge about cost functions is important since these functions {{can be used for}} guiding the heuristical search for (approximations of) optimal solutions to <b>configuration</b> <b>problems.</b> Not only is the approximation method motivated by theoretical considerations, but also validated by means of empirical results. Moreover, approximating functions can be computed very efficiently. (orig.) SIGLEAvailable from TIB Hannover: RR 6673 (60) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDEGerman...|$|R
40|$|In recent years, <b>configuration</b> <b>problems</b> {{have drawn}} {{tremendous}} attention {{because of their}} increasing prevalence and their big impact on system availability. We believe {{that many of these}} problems are attributable to today's configuration interfaces that have not evolved to accommodate the enormous shift of the system administrator group. Plain text files, as the de facto configuration interfaces, assume administrators' understanding of the system under configuration. They ask administrators to directly edit the corresponding entries with little guidance or assistance. However, this assumption no longer holds for todays administrator group which has expanded greatly to include non- and semi-professional administrators. In this paper, we provide an HCI view of today's <b>configuration</b> <b>problems,</b> and articulate system configuration as a new HCI problem. Moreover, we present the top obstacles to correctly and efficiently configuring software systems, and most importantly their implications on the design and implementation of new-generation configuration interfaces. Comment: 9 pages of exploratory research on understanding system <b>configuration</b> <b>problems</b> using Human-Computer Interaction principle...|$|R
50|$|The 1969 {{season was}} plagued with engine <b>configuration</b> <b>problems</b> {{for the new}} car, {{resulting}} in 3 DNFs for the team. The highlight of the season was a second-place finish for Titus at Sainte Jovite, Quebec.|$|R
40|$|Motivated {{by recent}} {{research}} results on terminological and constraint-based knowledge representation and reasoning {{we developed a}} formal specification language for technical <b>configuration</b> <b>problem</b> and a prototypical system which executes on terminological and constraint-based problem specifications thus solving the defined <b>configuration</b> <b>problem.</b> In this paper the main features of the language and the system are introduced. The specification and solution of configuration problems based on the language and the system is presented...|$|E
40|$|Trees with labeled edges have {{widespread}} applicability, {{for example}} for the representation of dependency syntax trees. Given a fixed number of nodes and constraints on how edges may be drawn between them, the task of finding solution trees {{is known as a}} <b>configuration</b> <b>problem.</b> In this paper, we formalize the <b>configuration</b> <b>problem</b> of labeled trees and argue that it can be regarded as a constraint satisfaction problem which can be solved directly and efficiently by constraint propagation. In particular, we derive and prove correct a formulation of dependency parsing as a constraint satisfaction problem...|$|E
40|$|<b>Configuration</b> <b>problem</b> {{in storage}} system {{is one of}} the well {{recognized}} issues in today’s enterprise environment. Traditional approaches usually reply on deep knowledge of the underlying system. However, such solution usually cannot scale up when the system become large and complex. Recent research work has started using machine learning techniques to improve the overall performance of the diagnosis process. In this project, we try to identify the proper procedure to transform a <b>configuration</b> <b>problem</b> into a machine learning problem, which lays down the foundation of our future work in the area of configuration and change management. 1...|$|E
30|$|We {{say that}} a machine M' polynomially reduces (resp. is polynomially equivalent) to a machine M if the <b>configuration</b> {{equivalence}} <b>problem</b> of M' polynomially reduces (resp. is polynomiall equivalent) to the <b>configuration</b> equivalence <b>problem</b> for M.|$|R
40|$|This paper {{presents}} SPIKE, {{an automated}} algorithm to generate best practices by analyzing Storage Area Network (SAN) configuration errors. Best practices are {{a useful tool}} in problem diagnosis as most <b>configuration</b> <b>problems</b> are caused by the violation of best practices in the storage network domain. However, the manual generation of best practices is tedious, error-prone and costly {{in terms of time}} and manpower. SPIKE uses a combination of information-retrieval principles, entity ranking and decision-tree classification to statistically infer the best practices for the prevention of SAN <b>configuration</b> <b>problems.</b> Preliminary results from an initial implementation of SPIKE indicate speed and accuracy improvements over manually generating best practices. ...|$|R
40|$|Software <b>configuration</b> <b>problems</b> are a {{major source}} of {{failures}} in computer systems. In this paper, we present a new framework for categorizing <b>configuration</b> <b>problems.</b> We apply this categorization to Windows Registry-related problems obtained from various internal as well as external sources. Although infrequent, Registry-related problems are difficult to diagnose and repair. Consequently they frustrate the users. We classify problems based on their manifestation and the scope of impact to gain useful insights into how problems affect users and why PCs are fragile. We then describe techniques to identify and eliminate such Registry failures. We propose health predicate monitoring for detecting known problems, fault injection for improving application robustness, and access protection mechanisms for preventing fragility problems. 1...|$|R
40|$|Mapping problem-space {{features}} into solution-space features is {{a fundamental}} <b>configuration</b> <b>problem</b> in software product line engineering. A <b>configuration</b> <b>problem</b> is defined as generating the most optimal combination of software features given a requirements specification and given a set of configuration rules. Current approaches however provide little support for expressing complex configuration rules between problem and solution space that support incomplete requirements specifications. In this paper, we propose an approach to model complex configuration rules based on a generalization {{of the concept of}} problem-solution feature interactions. These are interactions between solution-space features that only arise in specific problem contexts. The use of an existing tool to support our approach is also discussed: we use the DLV answer set solver to express a particular <b>configuration</b> <b>problem</b> as a logic program whose answer set corresponds to the optimal combinations of solution-space features. We motivate and illustrate our approach with a case study in the field of managing dynamic adaptations in distributed software, where the goal is to generate an optimal protocol for accommodating a given adaptation. status: publishe...|$|E
40|$|The model <b>configuration</b> <b>problem</b> (MCP) is a {{combinatorial}} optimization problem with application in the telecommunications manufacturing industry. The product is a switching cabinet, {{defined by a}} number of positions (slots) in which specific circuit packs are installed according to the customer requirements (configurations). Variety of customer requirements leads to a relatively large number of distinct configurations. In order to streamline the manufacturing process, a large number of switching cabinets with identical configurations (model cabinets) are produced in advance. A customer order is then filled by selecting a model cabinet whose configuration is relatively close to the customer configuration and performing any necessary circuit pack exchanges to make its configuration identical to the customer requirement. The manufacturing costs are proportional to the number of these circuit pack exchanges, and the q-model <b>configuration</b> <b>problem</b> is to design q different model configurations so as to minimize the total number of exchanges for a given collection of customer orders. We propose three heuristic algorithms for solving the q-model <b>configuration</b> <b>problem</b> and carry out a computational experiment to evaluate their effectiveness. ...|$|E
30|$|The model {{combines}} both long-term facilities configuration {{and short-term}} operation strategies optimization with maximizing profit of BSS under different stochastic scenarios of BSS operation environments. Though, coordinated operation and facilities configuration optimization model for EV charging stations are already published on some studies such as [19] and [20], {{there are few}} published works specifically on swapping stations. Previous component capacity planning works for swapping station only consider and deal with battery <b>configuration</b> <b>problem.</b> The jointed <b>configuration</b> <b>problem</b> for both batteries and chargers are investigated recently, such as models in [13] and [21]. This paper further conducts on configuration problems for batteries, chargers and swapping robots together.|$|E
40|$|Reconfiguration is an {{important}} activity for companies selling configurable products or services which have a long life time. However, identification {{of a set of}} required changes in a legacy configuration is a hard problem, since even small changes in the requirements might imply significant modifications. In this paper we show a solution based on answer set programming, which is a logic-based knowledge representation formalism well suited for a compact description of (re) <b>configuration</b> <b>problems.</b> Its applicability is demonstrated on simple abstractions of several real-world scenarios. The evaluation of our solution on a set of benchmark instances derived from commercial (re) <b>configuration</b> <b>problems</b> shows its practical applicability. Comment: In Proceedings LoCoCo 2011, arXiv: 1108. 609...|$|R
40|$|We {{introduce}} the new abstract notion of multi-dimensional lexicalized graph <b>configuration</b> <b>problems,</b> generalising over many important tasks {{in computational linguistics}} such as semantic assembly, surface realization and syntactic analysis, and integrating them. We present Extensible Dependency Grammar (XDG) as one instance of this notion...|$|R
50|$|Many {{operators}} across Australia {{have now}} purchased the OC 500 LE in various <b>configurations.</b> <b>Problems</b> related to quality control and unreliable electronics {{have not been}} uncommon. A lot of these complaints have come from drivers due to some units being under-powered, uncomfortable or rough.|$|R
40|$|Manufacturers {{of complex}} {{technical}} systems {{are faced with}} the problem to configure their products according to the customers ’ demands. Due to the complexity of the products and the partly sophisticated technical background, the process of configuration can {{turn out to be a}} difficult problem. When solving a <b>configuration</b> <b>problem,</b> at least a technical problem has to be solved: The configuration program must produce a correctly configured system from its inputs specified by a user. However, we found that realizing an adequate formulation of configuration knowledge and <b>configuration</b> <b>problem</b> instances is just as important as solving the <b>configuration</b> <b>problem</b> from its technical standpoint. As a consequence, when developing a configuration system, as much domain specific knowledge as possible has to be considered, i. e. “compiled ” into the system. This paper deals with knowledge based concepts that support configuration and the routine design process respectively, where a central idea is the following: Generate configuration constraints from the visual information specified by a user who describes the problem. In order to illustrate our ideas, the configuration system AKON and art deco 1 will be presented. 1 The system art deco has been developed within a cooperative project togethe...|$|E
40|$|In {{this paper}} {{we present a}} {{generalization}} {{of the problem of}} interactive configuration. The usual interactive <b>configuration</b> <b>problem</b> is the problem of, given some variables on small finite domains and an increasing set of assignment of values to a subset of the variables, to compute for each of the unassigned variables which values in its domain that participate in some solution for some assignment of values to the other unassigned variables. In this paper we consider how to extend this scheme to handle infinite regular domains using string variables and constraints that involves regular-expression checks on the string variables. We first show how to do this by using one single DFA. Since this approach is vastly space consuming, we construct a data structure that simulates the large DFA and is much more space efficient. As an example a <b>configuration</b> <b>problem</b> on n string variables with only one solution in which each string variable is assigned a value of length k the former structure will use Ω(k n) space whereas the latter only need O(kn). We also show how this framework can be combined with the recent BDD techniques to allow both boolean, integer and string variables in the <b>configuration</b> <b>problem...</b>|$|E
40|$|Users {{can often}} {{naturally}} express their preferences {{in terms of}} ideal or non-ideal solutions. We show how to reason about logical combinations of distance constraints on ideals and non-ideals using a novel global constraint. We evaluate our approach on both randomly generated and real-world <b>configuration</b> <b>problem</b> instances. ...|$|E
50|$|The ICSI Netalyzr is {{an on-line}} tool {{that can be}} used for {{checking}} networks for the presence of bufferbloat, together with checking for many other common <b>configuration</b> <b>problems.</b> The CeroWrt project also provides an easy procedure for determining whether a connection has excess buffering that will slow it down.|$|R
30|$|In {{this article}} {{although}} we cannot avoid mentioning CR applications from spectrum management perspective, {{we focus on}} the decision making and learning mechanisms designed to deal with broader frameworks, i.e., <b>configuration</b> adaptation <b>problems.</b> Thus, spectrum management problems are, from the equipment point of view, but a subset of <b>configuration</b> adaptation <b>problems.</b>|$|R
40|$|Abstract. We {{present a}} consistency-based service {{composition}} approach, where composition problems are modelled in a generic manner using a generative constraint-based formalism. We {{show that in}} our framework concise formal specification of service <b>configuration</b> <b>problems</b> is possible. Preliminary results indicate that our approach is scalable and competitive with other state-of-the-art composition systems. ...|$|R
40|$|International audienceWireless Sensor Network <b>Configuration</b> <b>Problem</b> {{seeks to}} {{dimension}} a WSN while {{taking into account}} both the traffic pattern, data aggregation and the transmission range assignment. Regarding {{the objectives of the}} problem, we first intend to minimize the overall energy consumption of the network and next to guarantee node energy consumption fairness between the sensors. Previously, we discussed this problem for the linear network. Herein, we consider a twodimensional network where sensors are uniformly placed in the target area. The network is divided into cells and the Network <b>configuration</b> <b>problem</b> has to determine the number of cells and their respective sizes such that the above objectives are met. A framework, based on the dynamic programming algorithm, is proposed to solve this problem. This framework provides optimal solution, is scalable and has a low computational complexity...|$|E
40|$|Quick {{responses}} {{are required for}} interactive configuration. For this an ideal interactive configurator needs to provide the functionalities required for interactive configuration with at most linear time complexity. In this paper, we present such a data structure called Join Matched CSP (JMCSP). When a JMCSP is used to represent a <b>configuration</b> <b>problem,</b> the functionalities required for interactive configuration can be obtained with linear time complexity. Unlike the tree-of-BDDs [Subbarayan, 2005], the JMCSPs while taking advantage of treedecomposition also provide linear configuration functions. Although obtaining a JMCSP is exponential in the tree-width of the input <b>configuration</b> <b>problem,</b> due to tree-like hierarchical nature of configuration problems, this is typically feasible. We present the JMCSP compilation process along with the linear interactive configuration functions on it. The linear functionalities provided by the JMCSPs include computation of all minimum explanations. ...|$|E
40|$|Abstract. In {{the present}} work {{the issue of}} decomposing and distributing a <b>configuration</b> <b>problem</b> is {{approached}} in a framework where the domain knowledge is represented in a structured way by using a KL-One like language, where wholepart relations {{play a major role}} in defining the structure of the configurable objects. The representation formalism provides also a constraint language for expressing complex relations among components and subcomponents. The paper presents a notion of boundness among constraints which specifies when two components can be independently configured. Boundness is the basis for partitioning constraints and such a partitioning induces a decomposition of the <b>configuration</b> <b>problem</b> into independent subproblems that are distributed to a pool of configurators to be solved in parallel. Preliminary experimental results in the domain of PC configuration showing the effectiveness of the decomposition technique in a sequential approach to configuration are also presented. ...|$|E
40|$|We {{investigate}} different solution {{techniques for}} solving a basic part of <b>configuration</b> <b>problems,</b> namely linear arithmetic constraints over integer variables. Approaches include integer programming, constraint programming over finite domains and hybrid techniques. We also discuss important {{extensions of the}} basic problem and how these can be accommodated in the different solution approaches. ...|$|R
50|$|Validation. The {{extensive}} validation {{features in}} the Pan language maximize the probability offinding <b>configuration</b> <b>problems</b> at compile time, minimizing costly clean-ups of deployed misconfiguration.Pan enables system administrators to define atomic or compound types with associatedvalidation functions; when {{a part of the}} configuration schema is bound to a type, the declaredconstraints are automatically enforced.|$|R
40|$|To {{facilitate}} interactive design, {{the solutions}} to <b>configuration</b> <b>problems</b> can be compiled into a decision diagram. We develop three heuristics for reducing the time and space required to do this. These heuristics {{are based on the}} distinctive clustered and hierarchical structure of the constraint graphs of <b>configuration</b> <b>problems.</b> The first heuristic attempts to limit the growth {{in the size of the}} decision diagram by providing an order in which constraints are added to the decision diagram. The second heuristic provides an initial order for the variables within the decision diagram. Finally, the third heuristic groups variables together so that they can be reordered by a dynamic variable reordering procedure used during the construction of the decision diagram. These heuristics provide one to two orders magnitude improvement in the time to compile a wide range of configuration. ...|$|R
