22|34|Public
500|$|With classmates Elwyn Berlekamp, Michael Lieberman, Charles Niessen and Wagner, Kotok {{began to}} develop McCarthy's IBM 704 <b>chess-playing</b> <b>program</b> in 1959. Kotok {{described}} their work in MIT Artificial Intelligence Project Memo 41 and in his bachelor's thesis. By the time [...] "the chess group" [...] graduated in 1962, their program played chess [...] "comparable to an amateur with about 100 games experience" [...] on an IBM 7090.|$|E
2500|$|Although the 1/3/3/5/9 {{system of}} point totals {{is the most}} {{commonly}} given, many other systems of valuing pieces have been proposed. [...] Several systems give the bishop slightly more value than the knight. [...] A bishop is usually slightly more powerful than a knight, but not always; {{it depends on the}} position [...] A <b>chess-playing</b> <b>program</b> was given the value of 3 for the knight and 3.4 for the bishop [...]|$|E
50|$|A {{showcase}} for Cilk's capabilities was the Cilkchess parallel <b>chess-playing</b> <b>program,</b> which won several computer chess prizes in the 1990s, including the 1996 Open Dutch Computer Chess Championship.|$|E
5000|$|Chess game viewers allow {{players to}} view a {{pre-recorded}} game on a computer. Most <b>chess-playing</b> <b>programs</b> {{can also be used}} for this purpose, but some special-purpose software exists.|$|R
5000|$|To {{avoid using}} the null-move {{heuristic}} in zugzwang positions, most <b>chess-playing</b> <b>programs</b> {{that use the}} null-move heuristic put restrictions on its use. Such restrictions often include not using the null-move heuristic if ...|$|R
40|$|In the ICGA's 22 nd World Computer Chess Championship in Leiden, six contestants {{together}} {{gave the}} latest {{demonstration of the}} state of the art in <b>chess-playing</b> <b>programs.</b> This article highlights the advances and subtleties exemplified by their play. The new World Champion was KOMODO with JONNY, edged out in the play-off, second and SHREDDER third. GRIDGINKGO, HIARCS and RAPTOR took the remaining places...|$|R
5000|$|Gillogly wrote a <b>chess-playing</b> <b>program</b> in the Fortran {{programming}} language in 1970, and in 1977 he ported the code for [...] "Colossal Cave" [...] from Fortran to C.|$|E
50|$|Martin Bryant (born 1958) is a British {{computer}} programmer {{known as the}} author of White Knight and Colossus Chess, a 1980s commercial <b>chess-playing</b> <b>program,</b> and Colossus Draughts, gold medal winner at the 2nd Computer Olympiad in 1990.|$|E
5000|$|With classmates Elwyn Berlekamp, Michael Lieberman, Charles Niessen and Wagner, Kotok {{began to}} develop McCarthy's IBM 704 <b>chess-playing</b> <b>program</b> in 1959. Kotok {{described}} their work in MIT Artificial Intelligence Project Memo 41 and in his bachelor's thesis. By the time [...] "the chess group" [...] graduated in 1962, their program played chess [...] "comparable to an amateur with about 100 games experience" [...] on an IBM 7090.|$|E
5000|$|... 1K ZX Chess is a 1982 <b>chess-playing</b> {{computer}} <b>program</b> (while missing three rules) for the unexpanded Sinclair ZX81.|$|R
40|$|Most <b>chess-playing</b> <b>programs</b> {{are based}} on well known {{algorithms}} and determinisitc eval-uation functions. Due {{to the complexity of}} this game, it seems however that using complex systems such as neural networks or genetic algorithms may help improve (or at least compete with) the performance of said programs. This seminar aims to present several projects and papers making use of these “alterna-tive”methods to design chess programs, details about their implementations and their actua...|$|R
50|$|Colossus Chess is {{a series}} of <b>chess-playing</b> {{computer}} <b>programs</b> developed by Martin Bryant, commercially available for various home computers in the 1980s.|$|R
5000|$|Although the 1/3/3/5/9 {{system of}} point totals {{is the most}} {{commonly}} given, many other systems of valuing pieces have been proposed. Several systems give the bishop slightly more value than the knight. A bishop is usually slightly more powerful than a knight, but not always; {{it depends on the}} position [...] A <b>chess-playing</b> <b>program</b> was given the value of 3 for the knight and 3.4 for the bishop [...]|$|E
5000|$|Of course, faster {{hardware}} and additional processors can improve <b>chess-playing</b> <b>program</b> abilities, and some systems (such as Deep Blue) use specialized chess hardware instead of only software. Another way to examine more chess positions is {{to distribute the}} analysis of positions to many computers. The ChessBrain project [...] was a chess program that distributed the search tree computation through the Internet. In 2004 the ChessBrain played chess using 2,070 computers.|$|E
5000|$|Bryant used White Knight as a {{basis for}} {{development}} of Colossus Chess (1983), a <b>chess-playing</b> <b>program</b> that was published for a large number of home computer platforms in the 1980s, and was later ported to Atari ST, Amiga and IBM PC as Colossus Chess X. Colossus Chess sold well and was well-received, being described by the Zzap!64 magazine in 1985 as [...] "THE best chess implementation yet to hit the 64, and indeed possibly any home micro".|$|E
50|$|Cyber Chess is a <b>chess-playing</b> {{computer}} <b>program</b> {{developed by}} William Tunstall-Pedoe. It {{was written for}} the Acorn Archimedes and published commercially by The Fourth Dimension.|$|R
50|$|Defeasibility as an anytime algorithm: Here, it {{is assumed}} that calculating {{arguments}} takes time, and at any given time, based on a subset of the potentially constructible arguments, a conclusion is defeasibly justified. Isaac Levi has protested against this kind of defeasibility, but it is well-suited to the heuristic projects of, for example, Herbert A. Simon. On this view, the best move so far in a <b>chess-playing</b> <b>program's</b> analysis at a particular depth is a defeasibly justified conclusion. This interpretation works with either the prior or the next semantical view.|$|R
25|$|ChessGenius is {{the name}} of a <b>chess-playing</b> {{computer}} <b>program</b> written by Richard Lang who has in the past written programs that have won the World Computer Chess Championship on 10 occasions.|$|R
50|$|Since the TI-89's {{release in}} 1998, {{thousands}} {{of programs for}} math, science, or entertainment have been developed. Many available games are generic clones of Tetris, Minesweeper, and other classic games, but some programs are more advanced: for example, a ZX Spectrum emulator, a <b>chess-playing</b> <b>program,</b> a symbolic circuit simulator, and a clone of Link's Awakening. One {{of the most popular}} and well-known games is Phoenix. Many calculator games and other useful programs can be found on TI-program sharing sites. Ticalc.org is a major one that offers thousands of calculator programs.|$|E
50|$|In November 1951, Dr. Dietrich Prinz {{wrote one}} of the oldest {{computer}} games, a <b>chess-playing</b> <b>program</b> for the Manchester Ferranti Mark 1 computer. The limitation of the Mark 1 computer did not allow for a whole game of chess to be programmed. Prinz could only program mate-in-two chess problems. The program examined every possible move for White and Black (thousands of possible moves) until a solution was found, which took 15-20 minutes on average. The program’s restrictions were: no castling, no double pawn move, no en passant capture, no pawn promotion, and no distinction between checkmate and stalemate.|$|E
50|$|Wattenberg {{frequently}} {{works with}} Marek Walczak, {{with whom he}} formed a collaboration known as MW2MW. A key theme of their work {{is the relationship between}} language and space. For example, Apartment took inspiration from the concept of a memory palace, turning free-form text entered by a viewer into an architectural floorplan. The piece has appeared in many versions, including online (2000), an installation at the Whitney Museum of American Art (2001) and in many other venues. Other works explore the possibilities of interaction: the Thinking Machine series (2004-2008), for example, is based on a <b>chess-playing</b> <b>program</b> that attempts to best the viewer while displaying its own thinking process.|$|E
5000|$|Many other {{optimizations}} {{can be used}} to make <b>chess-playing</b> <b>programs</b> stronger. For example, transposition {{tables are}} used to record positions that have been previously evaluated, to save recalculation of them. Refutation tables record key moves that [...] "refute" [...] what appears to be a good move; these are typically tried first in variant positions (since a move that refutes one position is likely to refute another). Opening books aid computer programs by giving common openings that are considered good play (and good ways to counter poor openings). Many chess engines use pondering to increase their strength.|$|R
40|$|Computer game {{players are}} {{typically}} designed {{to play a}} single game: today’s best <b>chess-playing</b> <b>programs</b> cannot play checkers, or even tic-tac-toe. General Game Playing {{is the problem of}} designing an agent capable of playing many different previously unseen games. The first AAAI General Game Playing Competition was held at AAAI 2005 in order to promote research in this area. In this article, we survey some of the issues involved in creating a general game playing system and introduce our entry to that event. The main feature of our approach is a novel method for automatically constructing effective search heuristics based on the formal game description. Our agent is fully implemented and tested in a range of different games...|$|R
40|$|The {{integrity}} of online games has important economic consequences {{for both the}} gaming industry and players of all levels, from professionals to amateurs. Where {{there is a high}} likelihood of cheating, there is a loss of trust and players will be reluctant to participate — particularly if this is likely to cost them money. Chess is a game that has been established online for around 25 years and is played over the Internet commercially. In that environment, where players are not physically present “over the board” (OTB), chess {{is one of the most}} easily exploitable games by those who wish to cheat, because of the widespread availability of very strong <b>chess-playing</b> <b>programs.</b> Allegations of cheating even in OTB games have increased significantly in recent years, and even led to recent changes in the laws of the game that potentially impinge upon players’ privacy. In this work, we examine some of the difficulties inherent in identifying the covert use of <b>chess-playing</b> <b>programs</b> purely from an analysis of the moves of a game. Our approach is to deeply examine a large collection of games where there is confidence that cheating has not taken place, and analyse those that could be easily misclassified. We conclude that there is a serious risk of finding numerous “false positives” and that, in general, it is unsafe to use just the moves of a single game as prima facie evidence of cheating. We also demonstrate that it is impossible to compute definitive values of the figures currently employed to measure similarity to a chess-engine for a particular game, as values inevitably vary at different depths and, even under identical conditions, when multi-threading evaluation is used...|$|R
5000|$|A second {{advantage}} is the responsiveness of the algorithm. Because early iterations use small values for , they execute extremely quickly. This allows the algorithm to supply early indications of the result almost immediately, followed by refinements as [...] increases. When {{used in an}} interactive setting, such as in a <b>chess-playing</b> <b>program,</b> this facility allows the program to play at any time with the current best move found in the search it has completed so far. This can be phrased as each depth of the search corecursively producing a better approximation of the solution, though the work done at each step is recursive. This is not possible with a traditional depth-first search, which does not produce intermediate results.|$|E
5000|$|Game {{trees are}} {{important}} in artificial intelligence because one way to pick the best move in a game is to search the game tree using the minimax algorithm or its variants. The game tree for tic-tac-toe is easily searchable, but the complete game trees for larger games like chess are much too large to search. Instead, a <b>chess-playing</b> <b>program</b> searches a partial game tree: typically as many plies from the current position as it can search in the time available. Except for the case of [...] "pathological" [...] game trees (which seem to be quite rare in practice), increasing the search depth (i.e., the number of plies searched) generally improves the chance of picking the best move.|$|E
40|$|This project {{describes}} {{the design and}} implementation of an object-oriented <b>chess-playing</b> <b>program,</b> based on current software engineering practice, recent advances, including the MTD(f) search algorithm, and time-honored techniques perfected by artificial intelligence pioneers since the late 1960 's, like the transposition table, the history heuristic and an evaluation function slanted towards material advantage. Where appropriate, a comparative survey of alternative algorithms not implemented in this project is also included...|$|E
5000|$|Kasparov Chessmate is a <b>chess-playing</b> {{computer}} <b>program</b> by The Learning Company {{for which}} Garry Kasparov is co-credited as game designer. Kasparov also makes an appearance {{as the last}} computer profile which has to be defeated {{in order to win}} the [...] "Kasparov Chess Club" [...] tournament.|$|R
40|$|Perfect {{knowledge}} about a domain renders search unnecessary and, likewise, exhaustive search obviates heuristic knowledge. In practise, a tradeoff is found {{somewhere in the}} middle, since neither extreme is feasible for interesting domains. During the last two decades, the focus for increasing the performance of two-player game-playing programs has been on enhanced search, usually by faster hardware and/or more efficient algorithms. This paper revisits {{the issue of the}} relative advantages of improved search and knowledge. It introduces a revised search-knowledge tradeoff graph that is supported by experimental evidence for three different games (chess, Othello and checkers) using a new metric: the "noisy oracle". Previously published results in chess seem to contradict our model, postulating a linear increase in program strength with increasing search depth. We show that these results are misleading, and are due to properties of chess and <b>chess-playing</b> <b>programs,</b> not [...] ...|$|R
50|$|He {{published}} work on Champernowne constant in 1933, whilst still an undergraduate at Cambridge. In 1948, {{working with his}} old college friend Alan Turing, he helped develop {{one of the first}} <b>chess-playing</b> computer <b>programs.</b> The book for which he is most renowned, synthesising a life's work, Economic Inequality and Income Distribution (Cambridge University Press), was published in 1998.|$|R
40|$|Abstract. We {{describe}} a novel parallel randomized search algorithm for twoplayer games. The algorithm is a randomized version of Korf and Chickering’s best-first search. Randomization both fixes a {{defect in the}} original algorithm and introduces significant parallelism. An experimental evaluation demonstrates that the algorithm is efficient (in {{terms of the number}} of search-tree vertices that it visits) and highly parallel. On incremental random game trees the algorithm outperforms Alpha-Beta, and speeds up by a factor of 18 (using 35 processors). In comparison, Jamboree [Kuszmaul ’ 95], speeds up by only a factor of 6. We have also evaluated the algorithm in a <b>Chess-playing</b> <b>program</b> using the boardevaluation code from Crafty, an existing Alpha-Beta-based program. On a single processor our program is slower than Crafty; with multiple processors it outperforms it. ...|$|E
40|$|We {{describe}} a novel parallel randomized search algorithm for two-player games. The algorithm is a randomized version of Korf and Chickering's best-first search. Randomization both fixes a {{defect in the}} original algorithm and introduces significant parallelism. An experimental evaluation demonstrates that the algorithm is e#cient (in terms of the numb er of search-tree vertices that it visits) and highly parallel. On incremental random game trees the algorithm outperforms Alpha-Beta, and speeds upb y a up to a factor of 18 (using 35 processors). In comparison, Jamb oree [Kuszmaul ' 95], speeds upb y only a factor of 6. The algorithm outperforms Alpha-Beta {{in the game of}} Othello. We have also evaluated the algorithm in a <b>Chess-playing</b> <b>program</b> using theb oard-evaluation code from an existingAlpha-Beta-bfi 56 program (Crafty). On a single processor our program is slower than Crafty; with multiple processors it outperforms it...|$|E
40|$|This article {{details the}} use of an FPGA (Field Programmable Gate Array) to {{increase}} the playing strength of the <b>chess-playing</b> <b>program</b> MBCHESS. The FPGA is a user-reconfigurable logic device well suited to the development of complex digital circuits. In this application, the FPGA is used to perform hardware move generation with implicit move ordering, a time-consuming operation when performed in software. A simpler inter-square connection protocol reduces the number of wires between chess squares, when compared to the DEEP BLUE design. The design also has the capability of generating checking moves separately, as well as indicating discovered checks: an important feature for good move ordering. Integration to the software’s transposition table and killer heuristic is demonstrated as well. The device is mounted on a card and inserted in the host computer where it is used as a coprocessor...|$|E
40|$|In {{this paper}} we {{describe}} the theorem prover METEOR which is a high-performance Model Elimination prover running in sequential, parallel and distributed computing environments. METEOR has a very high inference rate, but {{as is the case}} with better <b>chess-playing</b> <b>programs</b> speed alone is not sufficient when exploring large search spaces; intelligent search is necessary. We describe modifications to traditional iterative deepening search mechanisms whose implementation in METEOR result in performance improvements of several orders of magnitude and that have permitted the discovery of proofs unobtainable by top-down Model Elimination provers. 1 Introduction Model Elimination (ME) [Lov 68, Lov 69, Lov 78] is the basis for the underlying inference mechanism of several high-performance theorem provers. The design of these provers is adapted from the architecture of the WAM (Warren Abstract Machine) [War 83] [...] - the de facto standard for efficient Prolog implementations. Such provers includ [...] ...|$|R
40|$|We {{have built}} a {{distributed}} chess program running over a network of workstations. The program consists of several independent "advising" processes each using different chess knowledge to evaluate the position; each evaluator offers its advice to a coordinating process, which uses a selection policy to choose the move. We have built the advisors redistributing the knowledge included in a strong sequential program. We have made experiments with several different knowledge distributions and move selection policies. Some programs we built are sensibly stronger than the sequential program from which we started using seven workstations only. 1. Introduction Modern networked systems make available more and more computing power at cheaper prices, and this encourages the development of CPU-bound distributed AI programs which exploit the new hardware. <b>Chess-playing</b> <b>programs</b> are certainly CPU-bound, {{but they are also}} difficult to parallelize. In fact, to build a strong parallel chess program is [...] ...|$|R
40|$|We {{present a}} new {{parallel}} game-tree search algorithm. Our approach classifies a processor's available work as either mandatory (necessary for the solution) or speculative (may {{be necessary for}} the solution). Due {{to the nature of}} parallel game tree search, {{it is not possible to}} keep all processors busy with mandatory work. Our algorithm ER allows potential speculative work to be dynamically ordered, thereby reducing starvation without incurring an equivalent increase in speculative loss. Measurements of ER's performance on both random trees and trees from an actual game show that at least 16 processors can be applied profitably to a single search. These results contrast with previously published studies, which report a rapid drop-off of efficiency as the number of processors increases. 1. Introduction Game playing programs require a great deal of computation and would thus appear to be an ideal candidate for parallel implementation. In fact, current champion <b>chess-playing</b> <b>programs</b> gene [...] ...|$|R
