887|3126|Public
25|$|Convex {{programming}} {{studies the}} case when the objective function is convex (minimization) or concave (maximization) and the <b>constraint</b> <b>set</b> is convex. This {{can be viewed as}} a particular case of nonlinear programming or as generalization of linear or convex quadratic programming.|$|E
25|$|Linear {{programming}} (LP), {{a type of}} convex programming, {{studies the}} {{case in which the}} objective function f is linear and the constraints are specified using only linear equalities and inequalities. Such a <b>constraint</b> <b>set</b> is called a polyhedron or a polytope if it is bounded.|$|E
2500|$|Projecting {{onto the}} {{mathematical}} <b>constraint</b> <b>set</b> is not simple. [...] Unlike the data constraint, {{there is not}} an easy way to tell which point in the mathematical <b>constraint</b> <b>set</b> is closest. [...] A general expression for the distance between the current point and any point in the mathematical <b>constraint</b> <b>set</b> is created, and then that expression is minimized by taking the gradient of that distance with respect the current field guess. [...] This process is discussed in more detail in [...]|$|E
50|$|Since {{there are}} 9 rows, 9 columns, 9 boxes and 9 numbers, there are 9×9=81 row-column <b>{{constraint}}</b> <b>sets,</b> 9×9=81 row-number <b>constraint</b> <b>sets,</b> 9×9=81 column-number <b>constraint</b> <b>sets,</b> and 9×9=81 box-number constraint sets: 81+81+81+81=324 <b>constraint</b> <b>sets</b> in all.|$|R
30|$|<b>Constraint</b> <b>sets</b> (16)–(19) {{ensure that}} {{machines}} {{assigned to a}} cell are placed with regard to coordinates of cell sides (vertically and horizontally). <b>Constraint</b> <b>sets</b> (20)–(24) ensure that machines do not overlap in the horizontal and vertical direction simultaneously. Finally, <b>Constraint</b> <b>sets</b> (25)–(29) are the logical binary and non-negativity necessities on the binary and positive continuous decision variables.|$|R
40|$|Abstract—In this paper, we have {{modified}} a constrained clustering algorithm {{to perform}} exploratory analysis on gene expression data using prior knowledge {{presented in the}} form of constraints. We have also studied the effectiveness of various <b>constraints</b> <b>sets.</b> To address the problem of automatically generating constraints from biological text literature, we considered two methods (cluster-based and similarity-based). We concluded that incomplete information {{in the form of}} <b>constraints</b> <b>set</b> should be generated carefully, in order to outperform the standard clustering algorithm, which works on the data source without any constraints. For sufficiently large <b>constraints</b> <b>sets,</b> the constrained clustering algorithm outperformed the MSC algorithm. The novelty of research presented here is the study of effectiveness of <b>constraints</b> <b>sets</b> and robustness of the constrained clustering algorithm using multiple sources of biological data, and incorporating biomedical text literature into constrained clustering algorithm in form of <b>constraints</b> <b>sets.</b> I...|$|R
2500|$|Projecting {{onto the}} data <b>constraint</b> <b>set</b> is simple. [...] To {{be in that}} set, the {{magnitude}} squared of the signal field has to match the intensity measured by the trace. [...] The signal field [...] is Fourier-transformed to [...] The closest point in the data <b>constraint</b> <b>set</b> is found by replacing the magnitude of [...] by {{the magnitude of the}} data, leaving the phase of [...] intact.|$|E
2500|$|One {{can also}} apply a {{widespread}} stochastic gradient descent method with iterative projection {{to solve this}} problem. The idea of this method is to update the dictionary using the first order stochastic gradient and project it on the <b>constraint</b> <b>set</b> [...] The step that occurs at i-th iteration is described by this expression: ...|$|E
2500|$|These {{two sets}} {{intersect}} at exactly one point. [...] There {{is only one}} possible signal field that both has the correct intensity to match the data trace and fits the mathematical form dictated by the nonlinear interaction. [...] To find that point, which will give the pulse {{we are trying to}} measure, generalized projections is used. [...] The generalized projections algorithm operates in this electric field space. [...] At each step, we find the closest point to the current guess point that will satisfy the constraint for the other set. [...] That is, the current guess is “projected” onto the other set. [...] This closest point becomes the new current guess, and the closest point on the first set is found. [...] By alternating between projecting onto the mathematical <b>constraint</b> <b>set</b> and projecting onto the data <b>constraint</b> <b>set,</b> we eventually end up at the solution.|$|E
40|$|Clustering with {{constraints}} is {{an active}} area of machine learning and data mining research. Previous empirical work has convincingly shown that adding constraints to clustering improves {{the performance of a}} variety of algorithms. However, in most of these experiments, results are averaged over different randomly chosen <b>constraint</b> <b>sets</b> from a given set of labels, thereby masking interesting properties of individual sets. We demonstrate that <b>constraint</b> <b>sets</b> vary significantly in how useful they are for constrained clustering; some <b>constraint</b> <b>sets</b> can actually decrease algorithm performance. We create two quantitative measures, informativeness and coherence, {{that can be used to}} identify useful <b>constraint</b> <b>sets.</b> We show that these measures can also help explain differences in performance for four particular constrained clustering algorithms...|$|R
40|$|We propose <b>constraint</b> <b>sets</b> as an {{efficient}} data structure for topology-changing deformable tetrahedral meshes. Using <b>constraint</b> <b>sets,</b> data structure updates {{in case of}} topology changes are simple and efficient. The consistency of the geometric representation is maintained and elasto-mechanical properties of the object are preserved. In combination with a Finite Element model for elasto-plastic objects and a geometric <b>constraint</b> approach, <b>constraint</b> <b>sets</b> are applied to simulate the merging and breaking of conforming and non-conforming tetrahedral meshes. Experiments illustrate {{the efficiency of the}} data structure in interactive applications and its versatility...|$|R
40|$|Abstract—Traditionally, {{given two}} timing <b>constraint</b> <b>sets,</b> their {{relationship}} {{is defined by}} their timed trace inclusions. This approach only gives a boolean answer to if one <b>set</b> of <b>constraints</b> is contained within the other. In this paper, we first introduce a quantitative measure to describe the closeness or the similarity between two timing <b>constraint</b> <b>sets.</b> We intend to study the satisfaction bounds of similar timing <b>constraint</b> <b>sets</b> by similar timed systems. Such bounds will help improve the predictability of real-time systems in real-world applications and provide guidance for self-tuning systems. I...|$|R
2500|$|In some {{important}} economic applications, the relevant {{change in the}} <b>constraint</b> <b>set</b> cannot be easily understood as an increase {{with respect to the}} strong set order and so Theorem 3 cannot be easily applied. For example, consider a consumer who maximizes a utility function [...] subject to a budget constraint. At price [...] in [...] and wealth , his budget set is [...] and his demand set at [...] is (by definition) [...] A basic property of consumer demand is normality, which means (in the case where demand is unique) that the demand of each good is increasing in wealth. [...] Theorem 3 cannot be straightforwardly applied to obtain conditions for normality, because [...] if [...] (when [...] is derived from the Euclidean order). [...] In this case, the following result holds.|$|E
5000|$|Note {{that the}} set of {{possibilities}} RxCy#z can be arranged as a 9×9×9 cube in a 3-dimensional space with coordinates x, y, and z.Then each row Rx, column Cy, or number #z is a 9×9×1 [...] "slice" [...] of possibilities; each box Bw is a 9x3×3 [...] "tube" [...] of possibilities; each row-column <b>constraint</b> <b>set</b> RxCy, row-number <b>constraint</b> <b>set</b> Rx#z, or column-number <b>constraint</b> <b>set</b> Cy#z is a 9x1×1 [...] "strip" [...] of possibilities; each box-number <b>constraint</b> <b>set</b> Bw#z is a 3x3×1 [...] "square" [...] of possibilities; and each possibility RxCy#z is a 1x1×1 [...] "cubie" [...] consisting of a single possibility.Moreover, each <b>constraint</b> <b>set</b> or possibility is {{the intersection of the}} component sets.For example, R1C2#3 = R1 ∩ C2 ∩ #3, where ∩ denotes set intersection.|$|E
50|$|Projecting {{onto the}} {{mathematical}} <b>constraint</b> <b>set</b> is not simple. Unlike the data constraint, {{there is not}} an easy way to tell which point in the mathematical <b>constraint</b> <b>set</b> is closest. A general expression for the distance between the current point and any point in the mathematical <b>constraint</b> <b>set</b> is created, and then that expression is minimized by taking the gradient of that distance with respect the current field guess. This process is discussed in more detail in this paper.|$|E
40|$|This paper {{presents}} a new algorithm in the RAST family of algorithms. RAST algorithms perform geometric matching by exploring intersections between query regions and <b>constraint</b> <b>sets</b> {{in the space}} of possible model transformations. RAST algorithms are closely related to hierarchical Hough transformations but have more desirable geometric and combinatorial properties for object recognition applications. Previous applications of the RAST algorithm were limited by the need to represent <b>constraint</b> <b>sets</b> explicitly in transformation space. This paper introduces methods of manipulating the <b>constraint</b> <b>sets</b> arising from image and model point correspondences implicitly, allowing RAST methods to be applied in situations where no simple representation of <b>constraint</b> <b>sets</b> is algebraically possible. The method is demonstrated for exact bounded error matching {{in the space of}} 2 D translations and rotations. 1. INTRODUCTION This paper describes an efficient algorithm for 2 D geometric matching under trans [...] ...|$|R
3000|$|Equality of <b>constraint</b> <b>sets</b> is {{considered}} modulo type variable renaming. That is, <b>constraint</b> <b>sets</b> P,Q are also equal if {{there exists a}} renaming substitution S {{that can be applied}} to P to make S P and Q equal. S is a renaming substitution if for all α∈ dom(S) we have that S(α [...])=β, for some type variable β∈ dom(S).|$|R
40|$|Integral functionals {{based on}} convex normal integrands are {{minimized}} over convex <b>constraint</b> <b>sets.</b> Generalized minimizers exist under a boundedness condition. Sequences of the minimization problems are studied when the <b>constraint</b> <b>sets</b> are nested. The corresponding sequences of generalized minimizers {{are related to}} the minimization over limit convex sets. Martingale theorems and moment problems are discussed. © 2016 IEEE...|$|R
5000|$|Column-Number: A column-number <b>constraint</b> <b>set</b> {{contains}} {{all the possibilities}} for a particular column and number. For example, the <b>constraint</b> <b>set</b> for column 1 and number 1, which can be labeled C1#1, contains the 9 possibilities for column 1 and number 1 but different rows: ...|$|E
5000|$|Box-Number: A box-number <b>constraint</b> <b>set</b> {{contains}} {{all the possibilities}} for a particular box and number. For example, the <b>constraint</b> <b>set</b> for box 1 (in the upper lefthand corner) and number 1, which can be labeled B1#1, contains the 9 possibilities for the cells in box 1 and number 1: ...|$|E
5000|$|Row-Column: A row-column <b>constraint</b> <b>set</b> {{contains}} {{all the possibilities}} for the intersection of a particular row and column, i.e., for a cell. For example, the <b>constraint</b> <b>set</b> for row 1 and column 1, which can be labeled R1C1, contains the 9 possibilities for row 1 and column 1 but different numbers: ...|$|E
40|$|Abstract. An unsatisfiable <b>set</b> of <b>constraints</b> {{is minimal}} if all its (strict) subsets are satisfiable. The task of type error {{diagnosis}} requires finding all minimal unsatisfiable subsets {{of a given}} <b>set</b> of <b>constraints</b> (representing an error), in order to generate the best explanation of the error. Similarly circuit error diagnosis requires finding all minimal unsatisfiable subsets {{in order to make}} minimal diagnoses. In this paper we present a new approach for efficiently determining all minimal unsatisfiable sets for any kind of constraints. Our approach makes use of the duality that exists between minimal unsatisfiable <b>constraint</b> <b>sets</b> and maximal satisfiable <b>constraint</b> <b>sets.</b> We show how to incrementally compute both these sets, using the fact that the complements of the maximal satisfiable <b>constraint</b> <b>sets</b> are the hitting sets of the minimal unsatisfiable <b>constraint</b> <b>sets.</b> We experimentally compare our technique to the best known method on a number of large type problems and show that considerable improvements in running time are obtained...|$|R
30|$|Linearization of {{function}} Max in Eqs. (8) and (10) in <b>constraint</b> <b>sets</b> is exactly {{similar to that}} of Eq. (1.2).|$|R
40|$|Abstract. Due {{to these}} reasons that present {{frequent}} neighboring class set mining algorithms are unsuitable for extracting any length frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set,</b> this paper proposes an algorithm of synchronous mining frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set,</b> which {{is suitable for}} mining any length frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set</b> in large spatial database. The algorithm creates mining database through digitization method, and then gains candidate frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set</b> via synchronous search strategy, namely, it uses computing (k- 1) -subset of k-non frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set</b> to generate candidate frequent neighboring class set, meanwhile, it also uses connecting (l+ 1) -superset of l-frequent neighboring class sets to generate candidate frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set,</b> it only need scan database once to extract frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set.</b> The result of experiment indicates that the algorithm is faster and more efficient than present algorithms when mining any length frequent neighboring class <b>set</b> with <b>constraint</b> class <b>set...</b>|$|R
5000|$|Also {{consider}} the following <b>constraint</b> <b>set,</b> in descending order of domination (M: markedness, F: faithfulness): ...|$|E
5000|$|Projecting {{onto the}} data <b>constraint</b> <b>set</b> is simple. To {{be in that}} set, the {{magnitude}} squared of the signal field has to match the intensity measured by the trace. The signal field [...] is Fourier-transformed to [...] The closest point in the data <b>constraint</b> <b>set</b> is found by replacing the magnitude of [...] by {{the magnitude of the}} data, leaving the phase of [...] intact.|$|E
50|$|High 10 Intra Profile (110 with <b>constraint</b> <b>set</b> 3): The High 10 Profile {{constrained}} to all-Intra use.|$|E
30|$|In our {{previous}} work, we {{have proposed a}} scheme based on the theory of POCS to improve the video quality from multiple video copies [31]. However, having projected iteratively the reconstructed video onto the quantization <b>constraint</b> <b>sets</b> in the transform domain and the smooth <b>constraint</b> <b>sets</b> in the spatial domain, the method incurs intensively computational complexity. Here, we consider a different approach and propose a fast method to reconstruct the enhanced video in the transform domain. By exploiting {{the information from the}} quantization <b>constraint</b> <b>sets</b> and transform coefficient statistics only in the transform domain, the proposed method can provide an enhanced video with better quality than any of the available copies while incurring much lower computational complexity compared with the previous method.|$|R
3000|$|... <b>constraints</b> <b>set</b> minimum {{allowable}} water table elevations in the aquifer at all k locations. The t ≤ T [...]...|$|R
50|$|When this vanishes, a point {{common to}} both <b>constraint</b> <b>sets</b> {{has been found}} and the {{algorithm}} can be terminated.|$|R
50|$|High 444 Intra Profile (244 with <b>constraint</b> <b>set</b> 3): The High 4:4:4 Profile {{constrained}} to all-Intra use.|$|E
5000|$|... where K is our <b>constraint</b> <b>set.</b> Differential {{equations}} of {{this form}} are notable for having a discontinuous vector field.|$|E
50|$|There {{are several}} {{possibilities}} for {{the nature of the}} <b>constraint</b> <b>set,</b> also known as the feasible set or feasible region.|$|E
5000|$|In the {{standard}} 9×9 Sudoku variant, {{there are four}} kinds of <b>constraints</b> <b>sets</b> corresponding to the four kinds of constraints: ...|$|R
3000|$|Before {{we start}} looking at the {{individual}} algorithms, it is worthwhile looking at the geometric interpretation of the <b>constraints</b> <b>sets</b> [...]...|$|R
30|$|Informally speaking, context {{reduction}} {{is a process}} that reduces a constraint π into Q if there is a matching instance for π in Θ, that is, there exists (∀ α. Pπ ^')∈Θ such that Sπ ^'= π, for some S, and S P reduces to Q. If there is no matching instance for π or no reduction of S P is possible, then π reduces to itself. Note that <b>constraint</b> <b>sets</b> can be reduced into larger <b>constraint</b> <b>sets.</b>|$|R
