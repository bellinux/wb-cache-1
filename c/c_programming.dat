1641|3327|Public
5|$|FPGAs can be {{programmed}} with hardware description languages such as VHDL or Verilog. However, programming in these languages can be tedious. Several vendors have created C to HDL languages {{that attempt to}} emulate the syntax and semantics of the <b>C</b> <b>programming</b> language, with which most programmers are familiar. The best known C to HDL languages are Mitrion-C, Impulse C, DIME-C, and Handel-C. Specific subsets of SystemC based on C++ {{can also be used}} for this purpose.|$|E
5|$|Marble Madness is an arcade {{video game}} {{designed}} by Mark Cerny {{and published by}} Atari Games in 1984. The player uses a trackball to guide an onscreen marble through six obstacle-filled courses within a time limit. Marble Madness was Atari's first game to use the Atari System 1 hardware and to be programmed in the <b>C</b> <b>programming</b> language. It {{was also one of}} the first games to use true stereo sound; previous games used either monaural sound or simulated stereo.|$|E
5|$|SAS version 4 {{had limited}} features, but made SAS more accessible. Version 5 {{introduced}} a complete macro language, array subscripts, and a full-screen interactive user interface called Display Manager. In 1985, SAS was rewritten in the <b>C</b> <b>programming</b> language. This {{allowed for the}} SAS' Multivendor Architecture that allows the software to run on UNIX, MS-DOS, and Windows. It was previously written in PL/I, Fortran, and assembly language.|$|E
30|$|The {{numerical}} {{analysis of the}} Markov chain model in this paper is conducted by using <b>C</b> <b>programs.</b> The simulations, which are used to verified the {{numerical analysis}} in this paper, are conducted by discrete event driven simulation with <b>C</b> <b>programs.</b>|$|R
50|$|Frama-C {{stands for}} Framework for Modular Analysis of <b>C</b> <b>programs.</b> Frama-C {{is a set}} of {{interoperable}} <b>program</b> analyzers for <b>C</b> <b>programs.</b> Frama-C has been developed by Commissariat à l'Énergie Atomique et aux Énergies Alternatives (CEA-List) and Inria. Frama-C, as a static analyzer, inspects programs without executing them.|$|R
40|$|Improving the {{performance}} of <b>C</b> <b>programs</b> has been a topic of great interest for many years. Both hardware technology and compiler optimization research has been applied {{in an effort to}} make <b>C</b> <b>programs</b> execute faster. In many application domains, the C++ language is replacing <b>C</b> as the <b>programming</b> language of choice. In this paper, we measure the empirical behavior of a group of significant <b>C</b> and C++ <b>programs</b> and attempt to identify and quantify behavioral differences between them. Our goal is to determine whether optimization technology that has been successful for <b>C</b> <b>programs</b> will also be successful in C++ programs. We furthermore identify behavioral characteristics of C++ programs that suggest optimizations that should be applied in those programs. Our results show that C++ programs exhibit behavior that is significantly different than <b>C</b> <b>programs.</b> These results should be of interest to compiler writers and architecture designers who are designing systems to execute object-oriented progr [...] ...|$|R
5|$|According to {{an article}} on The Conversation written by Robert Merkel, Heartbleed {{revealed}} a massive failure of risk analysis. Merkel thinks OpenSSL gives more importance to performance than to security, which no longer makes sense in his opinion. But Merkel considers that OpenSSL should not be blamed as much as OpenSSL users, who chose to use OpenSSL, without funding better auditing and testing. Merkel explains that two aspects determine the risk that more similar bugs will cause vulnerabilities. One, the library's source code influences the risk of writing bugs with such an impact. Secondly, OpenSSL's processes affect the chances of catching bugs quickly. On the first aspect, Merkel mentions {{the use of the}} <b>C</b> <b>programming</b> language as one risk factor which favored Heartbleed's appearance, echoing Wheeler's analysis.|$|E
5|$|Several {{features}} and accessories were {{developed for the}} WonderSwan. The WonderWitch is an official software development kit aimed at amateur programmers that was released by Qute Corporation. It sold {{at a cost of}} ¥11,800 and allows for games to be developed in the <b>C</b> <b>programming</b> language. An adapter was created to connect headphones to the handheld, as the WonderSwan lacks a headphone port. A remote-controlled robot known as the WonderBorg can be operated through the unit. In addition, the handheld can be connected to a PocketStation, a memory card peripheral for the PlayStation console, through a device known as the WonderWave. The WonderSwan and its later models were also capable of connecting to the internet via a mobile phone network.|$|E
5|$|Adventure {{was named}} after Colossal Cave Adventure. Robinett began {{designing}} the graphics-based game, loosely based on the text game, on a Hewlett-Packard 1611A microprocessor computer around May to June 1978. Robinett was aware early on that memory use {{was going to be}} critical: Atari 2600 cartridges had room for only 4096 bytes (4 KB) on the cartridge ROM, and 128 bytes for program variables in the 2600's RAM; in contrast, Colossal Cave Adventure took hundreds of kilobytes of memory. The final game used nearly all of the available memory (including 5% of the cartridge storage for Robinett's Easter egg), with 15 unused bytes from the ROM capacity. Robinett credits Ken Thompson, his professor at University of California Berkeley, with teaching him the skills needed to use the limited memory efficiently. Thompson had required his students to learn the <b>C</b> <b>programming</b> language; Robinett carried techniques from that language into his programming of Adventure.|$|E
50|$|The ANSI/ISO C Specification Language (ACSL) is a {{specification}} language for <b>C</b> <b>programs,</b> using Hoare style pre- and postconditions and invariants, {{that follows the}} design by contract paradigm. Specifications are written as C annotation comments to the <b>C</b> <b>program,</b> which hence can be compiled with any C compiler.|$|R
5000|$|Frama-C a tool which {{implements}} slicing algorithms on <b>C</b> <b>programs.</b>|$|R
40|$|This report {{provides}} various examples for {{the formal}} specification, implementation, and deductive verification of <b>C</b> <b>programs</b> using the ANSI/ISO-C Specification Language (ACSL) and the WP plug-in of Frama-C (Framework for Modular Analysis of <b>C</b> <b>programs).</b> The report at hand has been revised and {{refers to the}} Sodium release from March 2015 of Frama-C...|$|R
5|$|In 1978, Lawrence {{purchased}} the Commodore PET 2001 {{and no longer}} needed the university's computer. He rewrote DND as Telengard within eight kilobytes of memory. Due {{to a lack of}} space, he designed the dungeon to be procedurally generated based on the player-character's position so the maps would not have to be stored in memory. Lack of memory was Lawrence's primary design obstacle. Nevertheless, the final version almost completely used 32 kilobytes of memory. It was easily ported to the Apple II+ and TRS-80 platforms due to their similar usage of the 8K BASIC programming language. The later Atari 800 port required a more complicated handling of string variables. The three ports were finished before Avalon Hill saw the game at a gaming convention and licensed it in 1982 as one of its first computer games. The IBM PC port required a rewrite into the <b>C</b> <b>programming</b> language; the source code for this version was later lost. The Heath/Zenith CP/M version requires MBASIC. The game's most popular port was for the Commodore 64.|$|E
5|$|The {{development}} toolkit for the Motorola CPU {{included a}} compiler for the <b>C</b> <b>programming</b> language, {{which the two}} programmers were familiar with. After Atari had conducted performance evaluations, it approved usage of the language. Cerny and Flanagan's decision to program Marble Madness in the C language had positive and negative consequences. Atari games had previously been programmed in assembly language. The C language was easier to program, but was less efficient, so the game operates at the slower speed of 30Hz instead of the normal 60Hz frequency of arcade games at the time. Cerny decided to use a trackball system (marketed by Atari as Trak-Ball) to give the game a unique control system, and he chose a motorized trackball for faster spinning and braking when the in-game ball traveled downhill and uphill, respectively. As it was building the prototypes, Atari's design department informed Cerny that the motorized trackball's design had an inherent flaw—one of the four supports had poor contact with the ball—and {{the use of a}} regular trackball was more feasible. Additionally, Cerny had anticipated the use of powerful custom chips that would allow RAM-based sprites to be animated by the CPU, but the available hardware was a less-advanced system using ROM-based, static sprites.|$|E
25|$|In the <b>C</b> <b>programming</b> language, 'x' {{preceded by}} zero (0x or 0X) {{is used to}} denote {{hexadecimal}} literal values.|$|E
40|$|This paper {{introduces}} a methodology to perform formal verification of floating-point <b>C</b> <b>programs.</b> It extends an existing {{tool for the}} verification of <b>C</b> <b>programs,</b> Caduceus, with new annotations specific to floating-point arithmetic. The Caduceus first-order logic model for <b>C</b> <b>programs</b> is extended accordingly. Then verification conditions expressing the correctness of the programs are obtained in the usual way and can be discharged interactively with the Coq proof assistant, using an existing Coq formalization of floatingpoint arithmetic. This methodology is already implemented and has been successfully applied to several short floatingpoint programs, which are presented in this paper. ...|$|R
50|$|LeakFix: A {{tool that}} {{automatically}} fixes memory leaks in <b>C</b> <b>programs.</b>|$|R
5000|$|The {{following}} <b>C</b> <b>program</b> {{illustrates the}} use of two function pointers: ...|$|R
25|$|Another {{form was}} popularized by the <b>C</b> <b>programming</b> language. It {{requires}} 3 parts: the initialization, the condition, and the afterthought {{and all these}} three parts are optional.|$|E
25|$|The main design {{objectives}} for the C shell were {{that it should}} look more like the <b>C</b> <b>programming</b> language and {{that it should be}} better for interactive use.|$|E
25|$|The <b>C</b> <b>programming</b> {{language}} (and many {{related languages}} like C++, Java, C#, and Scala) uses apostrophes to delimit a character literal. In these languages a {{character is a}} different object than a 1-letter string.|$|E
40|$|OpenRefactory/C is a {{refactoring}} tool and, more generally, {{an infrastructure}} that resolves {{the challenges of}} building <b>C</b> <b>program</b> transformations. In this paper, we describe its archi-tecture, extensibility features, and the transformations im-plemented. We also discuss features that will make Open-Refactory/C attractive to researchers interested in collabo-rating to build new <b>C</b> <b>program</b> analyses and transformations...|$|R
50|$|The Seed7 project {{includes}} both an interpreter and a compiler. The interpreter starts programs very quickly, supporting fast program development. The compiler uses the parser and reflection interfaces from the run-time library {{to generate a}} <b>C</b> <b>program,</b> which is subsequently compiled to machine code. Compiled Seed7 programs can have comparable performance to <b>C</b> <b>programs.</b>|$|R
5000|$|A multithreaded <b>C</b> <b>program</b> that {{communicates}} with Sendmail and the filtering processes ...|$|R
25|$|Both Unix and the <b>C</b> <b>programming</b> {{language}} {{were developed}} by AT and distributed to government and academic institutions, which led to both being ported to {{a wider variety of}} machine families than any other operating system.|$|E
25|$|Developers {{can use the}} QuickTime {{software}} development kit (SDK) to develop multimedia applications for Mac or Windows with the <b>C</b> <b>programming</b> language or with the Java programming language (see QuickTime for Java), or, under Windows, using COM/ActiveX from a language supporting this.|$|E
25|$|Unix popularized a syntax {{for regular}} {{expressions}} that found widespread use. The Unix programming interface {{became the basis}} for a widely implemented operating system interface standard (POSIX, see above). The <b>C</b> <b>programming</b> language soon spread beyond Unix, and is now ubiquitous in systems and applications programming.|$|E
5000|$|... crt0, {{a set of}} {{execution}} startup routines linked into a <b>C</b> <b>program</b> ...|$|R
40|$|Recently, the {{necessity}} for parallel programming has been increased with the rapid spread of multicore/multiprocessor systems. However, {{it is difficult for}} a programmer to create a highly-effective and high-performance parallel program. So, we are developing the automatic translator from <b>C</b> <b>programs</b> to parallel programs using MPI(Message Passing Interface). In our conventional automatic parallelism analysis of <b>C</b> <b>program</b> with pointer variables, it was able to analyze the data dependencies of only the pointer variables declared explicitly in the code. In this research, we have first applied the Shape analysis to <b>C</b> <b>programs</b> with pointer variables for getting to know the form of the recursive data structures which will be allocated and constructed dynamically at the time of execution. Then, using the result of the analysis, we can analyze the data dependencies of recursive data structures, such as linked list or binary tree structures, and detect more parallelism from <b>C</b> <b>program...</b>|$|R
40|$|With the exuberant {{developing}} {{of mobile}} communication tech and education resources, the mobile, non-formal, fragmented, personal learning concepts started {{to threaten the}} traditional college education. This article explored the function that the Micro lecture applying in the personal study {{of students in the}} <b>C</b> <b>program</b> course education based on mobile learning circumstance; discussed the role Micro lecture can play in <b>c</b> <b>program</b> course education. And, according to the cognitive ability of students, the constitute elements and the general structure of the Micro lecture supporting platform are divided by program design, which eventually offer the applying model of <b>c</b> <b>program</b> teaching based on Micro lecture in the perspective of mobile learning...|$|R
25|$|Originally {{named the}} GNU C Compiler, when it only handled the <b>C</b> <b>programming</b> language, GCC 1.0 was {{released}} in 1987. It was extended to compile C++ in December of that year. Front ends were later developed for Objective-C, Objective-C++, Fortran, Java, Ada, and Go among others.|$|E
25|$|Tux Paint was {{initially}} {{created for the}} Linux operating system, as there was no suitable drawing program for young children available for Linux at that time. It is written in the <b>C</b> <b>programming</b> language and uses various free and open source helper libraries, including the Simple DirectMedia Layer (SDL), and has since been made available for Microsoft Windows, Apple Mac OS X, BeOS and other platforms.|$|E
25|$|STDC {{is located}} at two places. One in Technopark Thiruvananthapuram {{and the other in}} near to Shenoy's Junction, MG Road, Ernakulam(Kochi). Kochi Centre is majorly concentrating on IT courses like, Dot NET Technologies using MVC, Java, Advanced Java, Java and Android Programming, PHP, <b>C</b> <b>{{programming}},</b> C++ programming etc. The details of the complete set of courses can be gained by contacting the centre at the phone number 0484 2372422 or 2369972.|$|E
5000|$|CPAchecker, an {{open-source}} software model checker for <b>C</b> <b>programs,</b> {{based on}} the CPA framework ...|$|R
5000|$|Including {{the cast}} may allow a <b>C</b> <b>program</b> or {{function}} to compile as C++.|$|R
40|$|We {{present the}} sound CCured type system for <b>C</b> <b>programs</b> that classifies {{pointers}} {{according to their}} usage and instructs a source-to-source translator to extend the program with run-time checks in order to guarantee memory safety. CCured {{can be used on}} existing <b>C</b> <b>programs</b> thanks to a simple pointer-kind inferencer which on many programs discovers that over 80 % of the pointers are type-safe...|$|R
