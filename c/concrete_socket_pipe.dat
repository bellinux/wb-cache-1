0|41|Public
50|$|The signal/slot system fits {{well with}} the way {{graphical}} user interfaces are designed. Similarly, the signal/slot system {{can be used for}} other non-GUI usages, for example asynchronous I/O (including <b>sockets,</b> <b>pipes,</b> serial devices, etc.) event notification or to associate timeout events with appropriate object instances and methods or functions. It is easy to use and no registration/deregistration/invocation code need to be written, because Qt's metaobject compiler (MOC) automatically generates the needed infrastructure.|$|R
40|$|International audienceThis paper {{presents}} a communication {{system designed to}} allow efficient process migration in a cluster. The proposed system is generic enough to allow the migration {{of any kind of}} stream: <b>socket,</b> <b>pipe,</b> char devices. Communicating processes using IP or Unix sockets are transparently migrated with our mechanisms and they can still efficiently communicate after migration. The designed communication system is implemented as part of Kerrighed, a single system image operating system for a cluster based on Linux. Preliminary performance results are presented...|$|R
50|$|Unlike named <b>pipes,</b> <b>sockets</b> {{are fully}} duplex-capable.|$|R
5000|$|IPC with socket sharing, using Unix domain <b>sockets</b> or named <b>pipes</b> (Windows) ...|$|R
5000|$|Interface with servers via TCP/IP, named <b>pipes</b> (<b>sockets)</b> or a {{tunneling}} protocol (SSH) ...|$|R
5000|$|Simplify {{use with}} data {{compression}} and with non seeking storage (<b>pipes,</b> <b>sockets,</b> tape).|$|R
5000|$|On 22 May 2010, Air India Express Flight 812, a Boeing 737-800 VT-AXV, {{flying on}} the Dubai-Mangalore route, {{overshot}} the 8033 ft runway number 06/24, killing 158 people, including 6 crew; only 8 survived. The aircraft crashed when it overshot the runway and veered into a steep gorge {{at the end}} of the runway. The starboard wing impacted the <b>concrete</b> <b>socket</b> of the instrument landing system (ILS) localiser antenna, rendering it unusable. This resulted in delayed or cancelled flights for two weeks during the monsoon rains, which reduced visibility. It took the airport a little under a month to repair and calibrate the ILS and bring it back online.|$|R
40|$|Grid Workflows are {{emerging}} as practical programming models for solving large e-scientific {{problems on the}} Grid. However, it is typically assumed that the workflow components either read or write data to conventional files, which are copied from one execution stage to another, or they are tightly coupled using IPC libraries such as MPI or distributed streaming. More flexible communication {{can be achieved by}} overloading conventional READ and WRITE operations with advanced IO mechanisms such as <b>sockets,</b> streams and <b>pipes,</b> as is done in the GriddLeS environment. Such flexibility allows the pipelining of temporally dependent components, or in contrast, delaying of tightly coupled computations based on the current resource availability and network connectivity. However, it is also harder to schedule the workflow, because the communication mode may not be decided until run time. In this paper, we propose a new scheduling model that leverages such communication flexibility and allows us to generate dynamic runtime schedules. The scheduler in this case, not only allocates components to distributed Grid resources, but also specifies the inter-component communication mechanism (<b>socket,</b> <b>pipe</b> etc.) The current model is implemented as a dynamic workflow scheduling tool called GridRod, which harnesses Nimrod/G's [1] Grid services and GriddLeS [2] web services...|$|R
40|$|As {{the size}} of {{clusters}} increases, failures are becoming increasingly frequent. Applications must become fault tolerant {{if they are to}} run for extended periods of time. We present DMTCP (Distributed MultiThreaded CheckPointing), the first user-level distributed checkpointing package not dependent on a specific message passing library. This contrasts with existing approaches either specific to libraries such as MPI or requiring kernel modification. DMTCP provides fault tolerance through checkpointing. DMTCP transparently checkpoints general cluster computations consisting of many nodes, processes, and threads. DMTCP automatically accounts for TCP/IP sockets, UNIX domain <b>sockets,</b> <b>pipes,</b> ptys (pseudo-terminals), signal handlers, ordinary file descriptors, shared file descriptors, and other operating system artifacts. We demonstrate checkpointing and restart of applications communicating through MPICH 2, OpenMPI, and sockets directly. These applications were written with a variety of languages including Fortran, C, C++, and Python. Results show that checkpoint time remains nearly constant as the number of nodes increases. ...|$|R
40|$|Based on the {{description}} of the mechanical coupling at the interface between the bolts and the grout medium, an analytical model has been developed for fully grouted single bore multiple anchors. The shear stress of the interface attenuates exponentially with increasing distance when the deformation is compatible and the bolts are flexible. A series tests on rock bolts and bolts embedded in tension <b>socketed</b> <b>pipe</b> pile foundation have been taken to describe decoupling mechanism, interface shear strength distribution and fixed length requirement. Meanwhile, it is revealed that the pile end block effect plays a significant role in enhancing the reinforcement effect so that the shear strength takes a multi-section composite distribution with the change of soil characteristics, embedded length of pile and grout medium. It is also shown from the tests that the bond length with 6 m in moderate weathered rock provides enough uplift resistance so as to serve theoretic and practical basis for construction. Copyright ASCE 2006...|$|R
500|$|The then-Civil Aviation Minister, Praful Patel {{said that}} the {{aircraft}} was following an Instrument landing system (ILS) approach for landing on the newer, longer, runway, which was commissioned in 2006. The pilot reported to ATC that it was 'established' on an ILS approach about [...] from touchdown; landing clearance was then given at [...] from touchdown. The aeroplane concluded its ILS approach on runway 24, touching down [...] {{from the start of}} the runway, leaving [...] in which to stop. It overran the runway and ploughed through a [...] sand arrestor bed which did not stop it. As the aircraft passed the arrestor bed, its starboard wing collided with the <b>concrete</b> <b>socket</b> of the ILS localiser antenna; it finally plunged over the edge of the table-top about [...] beyond the end of the runway and down the steep hillside coming to a stop [...] metres past the top of the slope.|$|R
5000|$|The {{other major}} {{technique}} is socket fusion. It is distinguished from butt-welding by using custom-shaped and -sized heating plates {{rather than a}} basic flat surface. These heads allow for more surface contact, reducing {{the time needed to}} heat and fuse the <b>pipe.</b> <b>Socket</b> fusion joins <b>pipe</b> and fittings together, rather than simply joining pipe to pipe. It requires less pressure than butt-welding and is more commonly used on smaller sizes of pipe (4" [...] or less). Socket welding has additional advantages of requiring less machinery and is more portable than the heavier equipment required for butt fusion.|$|R
50|$|The then-Civil Aviation Minister, Praful Patel {{said that}} the {{aircraft}} was following an Instrument landing system (ILS) approach for landing on the newer, longer, runway, which was commissioned in 2006. The pilot reported to ATC that it was 'established' on an ILS approach about 4.3 mi from touchdown; landing clearance was then given at 2000 ft from touchdown. The aeroplane concluded its ILS approach on runway 24, touching down 5200 ft {{from the start of}} the runway, leaving 2800 ft in which to stop. It overran the runway and ploughed through a 90 m sand arrestor bed which did not stop it. As the aircraft passed the arrestor bed, its starboard wing collided with the <b>concrete</b> <b>socket</b> of the ILS localiser antenna; it finally plunged over the edge of the table-top about 790 ft beyond the end of the runway and down the steep hillside coming to a stop 660 to 980 ft metres past the top of the slope.|$|R
500|$|The {{ground on}} which the wheel is built was {{previously}} used as an open cast fire clay mine, a coal mine, and a tar works, resulting in contamination of the canal with tar and mercury. [...] of loosely packed backfill from the mining operations containing large sandstone boulders was not considered adequately solid foundation for {{the size of the}} structure, so deep foundations with thirty [...] <b>concrete</b> piles <b>socketed</b> onto the bedrock were used.|$|R
40|$|The {{description}} {{refers to}} a hose securing device {{which is used to}} secure a hose on a hollow cylindrical body such as a <b>pipe</b> <b>socket</b> or similar, and a process for its automatic assembly. The hose securing device consists of two parts, and in assembled state, exerts a force caused by prestressing on the hose. The invention is characterized by the hose securing device consisting of two identically shaped parts which are joined by two locking mechanisms each comprising a catch device and a catch spring. The assembly process which can also be performed manually is specially suited for automated assembly using an industrial robot, whereby the assembly of the hose onto the <b>pipe</b> <b>socket</b> is completely isolated from the following assembly of the hose securing element...|$|R
50|$|The {{ground on}} which the wheel is built was {{previously}} used as an open cast fire clay mine, a coal mine, and a tar works, resulting in contamination of the canal with tar and mercury. 20 m of loosely packed backfill from the mining operations containing large sandstone boulders was not considered adequately solid foundation for {{the size of the}} structure, so deep foundations with thirty 22 m <b>concrete</b> piles <b>socketed</b> onto the bedrock were used.|$|R
40|$|We have {{developed}} a tool {{that can be used}} to automatically discover communication channels of processes for which the source code is not available. Currently, our tool reports the operations executed on file, <b>socket</b> and <b>pipe</b> communication primitives. The tool helps users in protecting their machines by limiting the execution of library functions executed by a process and hence, is a valuable tool for analyzing an untrusted application such as a virus or a worm. Our tool uses binary rewriting technology to control the execution results of library functions. ...|$|R
50|$|Most {{operating}} systems offer primitives such as <b>pipes,</b> <b>sockets</b> or shared memory {{to pass data}} among programs, but often the simplest way (especially for programs that follow the Unix philosophy) is to write data into a temporary file and inform the receiving program of {{the location of the}} temporary file.|$|R
50|$|IEDs {{were also}} {{widely used in}} the 10-years long civil war of the Maoists in Nepal, ranging from those bought from illicit groups in India and China, to self-made devices. Typically used devices were {{pressure}} cooker bombs, <b>socket</b> bombs, <b>pipe</b> bombs, bucket bombs, etc. The devices were used more for the act of terrorizing the urban population rather than for fatal causes, {{placed in front of}} governmental offices, street corners or road sides. Mainly, the home-made IEDs were responsible for destruction of majority of structures targeted by the Maoists and assisted greatly in spreading terror among the public.|$|R
40|$|DMTCP (Distributed MultiThreaded CheckPointing) is a {{transparent}} user-level checkpointing package for distributed applications. Checkpointing and restart is demonstrated {{for a wide}} range of over 20 well known applications, including MATLAB, Python, TightVNC, MPICH 2, OpenMPI, and runCMS. RunCMS runs as a 680 MB image in memory that includes 540 dynamic libraries, and is used for the CMS experiment of the Large Hadron Collider at CERN. DMTCP transparently checkpoints general cluster computations consisting of many nodes, processes, and threads; as well as typical desktop applications. On 128 distributed cores (32 nodes), checkpoint and restart times are typically 2 seconds, with negligible run-time overhead. Typical checkpoint times are reduced to 0. 2 seconds when using forked checkpointing. Experimental results show that checkpoint time remains nearly constant as the number of nodes increases on a medium-size cluster. DMTCP automatically accounts for fork, exec, ssh, mutexes/semaphores, TCP/IP sockets, UNIX domain <b>sockets,</b> <b>pipes,</b> ptys (pseudo-terminals), terminal modes, ownership of controlling terminals, signal handlers, open file descriptors, shared open file descriptors, I/O (including the readline library), shared memory (via mmap), parent-child process relationships, pid virtualization, and other operating system artifacts. By emphasizing an unprivileged, user-space approach, compatibility is maintained across Linux kernels from 2. 6. 9 through the current 2. 6. 28. Since DMTCP is unprivileged and does not require special kernel modules or kernel patches, DMTCP can be incorporated and distributed as a checkpoint-restart module within some larger package. ...|$|R
50|$|When {{the media}} header is modified, {{either at the}} end of imagecreation or as part of later {{modifications}} to an existingimage, only some specific fields are to be updated. Thesefields exist entirely within the media header patch area.Only the media header patch area should be re-written. Thisallows more options when dealing with image container fileformats or transports with limited seeking or overwritecapability (compressed formats, <b>pipes,</b> <b>sockets).</b>|$|R
5000|$|In Unix-like systems, file {{descriptors}} {{can refer}} to any Unix file type named in a file system. As well as regular files, this includes directories, block and character devices (also called [...] "special files"), Unix domain <b>sockets,</b> and named <b>pipes.</b> File descriptors can also refer to other objects that do not normally exist in the file system, such as anonymous <b>pipes</b> and network <b>sockets.</b>|$|R
5000|$|Utilizing {{overlapped}} I/O requires passing an OVERLAPPED {{structure to}} API functions that normally block, including ReadFile (...) , WriteFile (...) , and Winsock's WSASend (...) and WSARecv (...) [...] The requested operation is initiated by a function call which returns immediately, and is {{completed by the}} OS in the background. The caller may optionally specify a Win32 event handle to be raised when the operation completes. Alternatively, a program may receive notification of an event via an I/O completion port, which is the preferred method of receiving notification when used in symmetric multiprocessing environments or when handling I/O on {{a large number of}} files or sockets. Overlapped I/O is particularly useful for <b>sockets</b> and <b>pipes.</b> It is not well supported in Windows 9x.|$|R
5000|$|ObjectiveFS {{implements}} a log {{structured file}} system {{on top of}} object stores (such as Amazon S3, Google Cloud Storage and other object store devices). [...] It is a POSIX compliant file system and supports features such as dynamic file system size, soft and hard links, unix attributes, extended attributes, Unix timestamps, users and permissions, no limit on file size, atomic renames, atomic file creation, directory renames, read and write anywhere in a file, named <b>pipes,</b> <b>sockets,</b> etc.|$|R
50|$|The {{earliest}} spigot and <b>socket</b> {{cast iron}} <b>pipes</b> were jointed by filling the socket {{with a mixture}} of water, sand, iron filings and sal-ammoniac (ammonium chloride.) A gasket ring was pushed into the socket round the spigot to contain the mixture which was pounded into the socket with a caulking tool and then pointed off. This took several weeks to set and produced a completely rigid joint. Such pipe systems are often to be seen in nineteenth century churches in the heating system.|$|R
50|$|To service an {{incoming}} request, the web server sends environment {{information and the}} page request itself to a FastCGI process over either a Unix domain <b>socket,</b> a named <b>pipe</b> or a TCP connection. Responses are returned from the process to the web server over the same connection, and the web server subsequently delivers that response to the end-user. The connection may be closed {{at the end of}} a response, but both the web server and the FastCGI service processes persist.|$|R
40|$|A {{specification}} {{utilized for}} the nondestructive evaluation of <b>socket</b> type <b>pipe</b> joints at Langley Research Center (LaRC) is discussed. The scope of hardware shall include, {{but is not}} limited to, all common pipe fittings: tees, elbows, couplings, caps, and so forth, socket type flanges, unions, and valves. In addition, the exterior weld of slip on flanges shall be inspected using this specification. At {{the discretion of the}} design engineer, standard practice engineer, Fracture Mechanics Engineering Section, Pressure Systems Committee, or other authority, four nondestructive evaluation techniques may be utilized exclusively, or in combination, to inspect socket type welds. These techniques are visual, radiographic, magnetic particle, and dye penetrant. Under special circumstances, other techniques (such as eddy current or ultrasonics) may be required and their application shall be guided by the appropriate sections of the American Society of Mechanical Engineers (ASME) Boiler and Pressure Vessel Code (B&PVC) ...|$|R
40|$|Abstract. Dynamic taint {{analysis}} (DTA) {{has been}} heavily used by security researchers for various tasks, including detecting unknown exploits, analyzing malware, preventing information leaks, and many more. Recently, {{it has been}} also utilized to track data across processes and hosts {{to shed light on}} the interaction of distributed components, but also for security purposes. This paper presents Taint-Exchange, a generic crossprocess and cross-host taint tracking framework. Our goal is to provide researchers with a valuable tool for rapidly developing prototypes that utilize cross-host taint tracking. Taint-Exchange builds on the libdft open source data flow tracking framework for processes, so unlike previous work it does not require extensive maintenance and setup. It intercepts I/O related system calls to transparently multiplex fine-grained taint information into existing communication channels, like <b>sockets</b> and <b>pipes.</b> We evaluate Taint-Exchange using the popular lmbench suite, and show that it incurs only moderate overhead. ...|$|R
40|$|The {{main goal}} of Project JXTA {{is to provide}} a {{peer-to-peer}} application framework based on a standard set of generic peer-to-peer protocols, independent of any particular platform or language. In spite of its recent popularity, the performance characteristics of the communication layers of JXTA are not well understood, though there is a general sentiment of inadequate performance. This paper examines the performance of the three JXTA communication layers: the JXTA <b>sockets,</b> JXTA <b>pipe</b> service and JXTA endpoint service. Round-trip time benchmarks are performed to evaluate the bandwidth and latency of each of the communication layers over both a Fast-Ethernet and a Myrinet network using the Java implementation of the JXTA protocols. The results show that, although the JXTA communications exhibit high latency, the Java binding of JXTA is able to reach the throughput of Java sockets. Very interesting results were obtained for benchmarks performed on high-performance Myrinet networks, where two out of the three JXTA communication layers were still able to achieve throughputs in excess of 1 Gb/s...|$|R
40|$|AbstractVibration fatigue {{of small}} branch pipes usually induces weld toe cracks. Some cracks will cause advertently {{shutdown}} of the Nuclear Power Plants (NPPs). Moreover, {{to judge the}} vibration fatigue failure is the bottle neck in structure health monitoring of the small branch pipes in NPPs. In order to solve this problem, a <b>socket</b> weld <b>pipe</b> was simplified as the cantilever beam model, and the stress intensity factor (SIF) was calculated by the ABAQUS software and ZENCRACK software in this paper. The effects of crack depth, circumferential crack size and working load on SIF were discussed. The analysis {{results show that the}} SIF for outer surface circumferential crack distributes as an upside down “U” alphabet. And the maximum value of SIF is at the deepest point of the crack and is a linear increasing function of external load P. Basing on the plane strain fracture criterion, critical crack sizes bearing different external loads were calculated. With the increasing of loads, the critical crack size decreases. These critical values can be applied as the benchmark for evaluating the vibration fatigue failure in the structure health monitoring of small branch pipes in NPPs...|$|R
40|$|Abstract—Virtualization {{environment}} provides VMs {{which are}} isolated from each other. This isolation helps co-resident VMs use original transport protocols like UDP and TCP for information exchange. Using original protocols {{does not take}} advantage of being on the same host of VMs because of unnecessarily overheads. Running VMs are processes on physical host so that inter-VM communication should be inter-process communication to assure the profit of their exchange speed. It is very important to conduct new researches to find out the best solution to improving performance of inter-VM communication. Nowadays, there are many up-to-date mechanisms to solve this problem. However, most of related papers do not provide a general view for developers in term of choosing suitable mechanisms for a specific application with a specific group of data sizes nor any applications with any data sizes when they implement inter-VM communication. This article is focusing on analyzing and comparing main mechanisms of three approaches, which are being considered most now: Shared Memory, Unix Domain <b>Socket</b> and <b>Pipes.</b> The three inter-process communication tools: Unix Domain Socket (UDS), Shared Memory and Pipes are also implemented by authors for analysis and comparison purpose. The results of the experiments provide useful advices for developers when they want to choose a suitable inter-VM communication mechanism for applications depending on different data sizes...|$|R
50|$|DMTCP (Distributed MultiThreaded Checkpointing) is a {{tool for}} transparently {{checkpointing}} the state of an arbitrary group of programs spread across many machines and connected by sockets. It does not modify the user's program or the operating system. Among the applications supported by DMTCP are Open MPI, Python, Perl, and many programming languages and shell scripting languages. With the use of TightVNC, it can also checkpoint and restart X Window applications, {{as long as they}} do not use extensions (e.g. no OpenGL or video). Among the Linux features supported by DMTCP are open file descriptors, <b>pipes,</b> <b>sockets,</b> signal handlers, process id and thread id virtualization (ensure old pids and tids continue to work upon restart), ptys, fifos, process group ids, session ids, terminal attributes, and mmap/mprotect (including mmap-based shared memory). DMTCP supports the OFED API for InfiniBand on an experimental basis.|$|R
40|$|Abstract. In {{this paper}} {{we set out}} to {{theoretically}} explore and experi-mentally compare dierent client-server design alternatives implemented in Java. We introduce a new concurrent data structure, called concur-rent hash table, for solving the synchronization problem in the classical producer/consumer model. The structure allows multiple reads and a sin-gle write to proceed concurrently. We look at the following TCP server designs: concurrent server{new thread per client; pre-threaded servers: locking around accept; socket passing through a shared buer; socket passing through a concurrent queue; socket passing through a concur-rent hash table; <b>socket</b> passing through <b>pipes.</b> The servers have been tested on a network of 35 workstations. The experimental results have shown that the server using pipes to pass tasks to the workers outper-forms every other one. For all servers, better performance is achieved by using a number of worker threads in the range of one hundred rather than fteen as commonly recommended. ...|$|R
40|$|Many {{applications}} involve several processes {{which have}} {{to communicate with}} each other. These communications are local if all the processes are on the same machine. And they are remote for distributed applications. Of course, in the second case, {{the most important part of}} the communications are between different systems. But, these processes need also local communications. And such local interprocess communications become important if the applications use an activity responsible of remote communications. The first purpose of this paper is to compare the local interprocess communication mechanisms in a UNIX environment. So, we measure the time for sending one message and receiving an acknowledgment with each standard mechanism (<b>pipes,</b> <b>sockets,</b> System V IPC). Our second goal is to compare the measures when we replace processes by threads. The measures have been done on different workstations running SunOS or OSF/ 1, and pthreads always offer better results whatever the conditions are. KU [...] ...|$|R
40|$|The {{description}} {{relates to}} a process and a device or a tool for the fully automatic assembly of hose locking devices, in particular worm drive hose clips which are attached by a screw connection to lock a hose to a solid or hollow body such as a <b>pipe</b> <b>socket</b> or similar. The invention {{is characterized by the}} fact that an open, unscrewed hose locking device is bent at its point of fixture about the hose in a bending and shaping operation, the tip of the hose locking device is introduced into its lock, and the screw thread in the lock is tightened to secure the hose locking device. The assembly process or the corresponding tool are particularly suitable for a fully automated assembly of hose locking devices by means of an industrial robot, whereby hose assembly on the connecting sockets is fully separated from the following assembly of the hose locking device...|$|R
40|$|A Linux cluster with Gigabit Ethernet {{interconnect}} is a {{local and}} accessible resource for solving scientific problems, including finite-element simulations. As generalpurpose protocol stacks are not designed for parallel computing, the delivered throughput and latency may be significantly below that suggested by the hardware specification of the interconnect. The paper evaluates communication software across the protocol stack from high-level communication harnesses, such as MPI, Charm++ and MOSIX, through intermediate communication primitives, such as <b>sockets,</b> streams, and <b>pipes,</b> to underlying protocols such as TCP and TIPC, as well as low-level Userlevel Network Interfaces such as GAMMA. The evaluation is {{not only in terms}} of short message latency and throughput but in terms of the efficiency of the solution, that is the throughput per computation overhead. There are a number of findings, such as the relative efficiency of TIPC with Open MPI; confirmation of the advantage of GAMMA with MPI; the weaker performance of the single system image software under test; and the enhancement from adding application-level load-balancing to the system-level load-balancing available in some communication harnesses. ...|$|R
