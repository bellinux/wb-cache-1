8|93|Public
5000|$|... #Caption: Commodore Plus/4. Note {{the four}} arrow-shaped keys forming the <b>cursor</b> <b>key</b> [...] "diamond" [...] to the right.|$|E
5000|$|When using StICQ with a T9 dictionary, {{you should}} press any <b>cursor</b> <b>key</b> {{to get rid}} of [...] "Previous" [...] command for right button after sending a message, or, otherwise, program will crash.|$|E
5000|$|The four cursor keys (up, down, left, and right) in the <b>cursor</b> <b>key</b> zone (as {{specified}} in ISO/IEC 9995-1) {{have to be}} arranged in a “cross layout” or an “inverted T layout” (see figure). The recommended placement is such that the “cursor down” key is placed on row A (i. e., in the same row as the space bar).|$|E
5000|$|... #Caption: Text-based menu (German) with {{selection}} by <b>cursor</b> <b>keys</b> or mouse ...|$|R
40|$|A {{number of}} past studies have {{compared}} performance of cursor control devices. Conclusions regarding the "best" device {{for a particular}} application are difficult to draw because the tasks used in previous comparisons have differed from one another and have not included all of the factors affecting performance with the devices. The present study used a target acquisition task whose components were derived from analyzing the cursor control device movements of users while performing actual tasks. The components of the task were target size, target distance, direction, and mode (i. e., point-and-click vs. drag). Three cursor control devices, <b>cursor</b> <b>keys,</b> mouse, and trackball, were each used by 12 subjects to perform the task. Results indicate the mouse and trackball perform similarly in most cases. The <b>cursor</b> <b>keys</b> always performed more poorly than the other devices. Hence, the mouse and trackball are preferable to the <b>cursor</b> <b>keys</b> based on objective measure of user performance. In conditions where <b>cursor</b> <b>keys</b> are necessary, careful attention should be paid to aspects of the interface listed above in order to attain {{the highest level of}} performance possible...|$|R
5000|$|Different {{keyboard}} layout: among others, the PC-D had a Help key {{and keys}} {{to control a}} connected printer but only five <b>cursor</b> <b>keys</b> (←↓↑→ and Home) ...|$|R
5000|$|The {{game was}} not as well {{received}} as the first Felix game with complaints including the odd choice of keys, such as using the down <b>cursor</b> <b>key</b> to move right (although this layout was also used in the first game), {{and the difficulty of}} actually keeping the fruit from the monsters, who move quickly around the maze. Dave E of the Electron User Group praised the sprites, as used in the first game, but claimed the game [...] "lacks any 'oomph'".|$|E
5000|$|Friendly aliens {{will help}} Magneto in combat, {{dramatically}} improving his odds {{of winning the}} game. Although friendlies are not particularly strong attacking, enemies attacking Magneto have an equal chance of attacking any friendlies nearby, {{reducing the number of}} hits Magneto will take. Combat is very simple; the player clicks on a target and holds the mouse (or <b>cursor</b> <b>key)</b> while a [...] "battle counter" [...] appears and displays random numbers, the idea being to release the mouse when the number is high in order to do more damage. Magneto's health is displayed as a small bar {{at the bottom of the}} screen, and will regain strength with time.|$|E
50|$|Gameplay of ZZT is very simple. The {{player is}} {{controlled}} by the four cursor keys, and the shift key and a <b>cursor</b> <b>key</b> pressed will shoot a bullet (if the player has ammo). Items that can be picked up include: ammo (each magazine holds five rounds), gems (used for currency in most games), torches (used by pressing the T key in darkened rooms, lighting a small area around the player, that moves as the player does), and energizers that give the player temporary invincibility. Enemies include lions (randomly moving monsters, that may follow the player), tigers (randomly moving monsters that fire bullets), ruffians (monsters that chase the player, then rest, then repeat), bears, slimes, centipedes, and spinning guns.|$|E
5000|$|The [...] "Draw Mode" [...] used {{automatically}} {{the appropriate}} character from the currently selected set to draw lines and corners by simply using the <b>cursor</b> <b>keys</b> (up/down/left/right) ...|$|R
50|$|The COMX-35 had a {{keyboard}} with an integrated joystick {{in place of}} <b>cursor</b> <b>keys.</b> It was relatively inexpensive and came with a large collection of software. COMX-35 was manufactured in Hong Kong by COMX World Operations Ltd.|$|R
50|$|Gameplay {{required}} the player {{to visit a}} series of sites in and around London, by moving a person using <b>cursor</b> <b>keys</b> or a joystick, and occasionally making choices such as whether to hide, run or stand still.|$|R
5000|$|At {{the bottom}} below {{there is the}} actual mystery of the [...] "secret screen", the text says: [...] "Eat the pie until a [...] "fire" [...] glows, then go up until it stops, touch a star and you'll see the Secret Menu!!!". The bold words here are {{highlighted}} in the game in a different color and are the keys {{to get into the}} Secret Menu. Therefore the player must first enter the instruction page (by pressing joystick down in the main menu) and type in the keys related by the highlighted words: First pressing the π-key until the word [...] "fire" [...] in the last line changes its color, then pressing the ↑-key (not the <b>cursor</b> <b>key)</b> until the color gets black again. Then the player presses * and he or she will get to the [...] "secret menu" [...] with the following options: Record own demo, disable sprite kill, manual select for random levels and author information.|$|E
40|$|Abstract: Typing Japanese into {{computers}} {{consists of}} typing Roman alphabet, displaying the kana character, converting kana to kanji, and selecting the intended kanji character {{from a list}} of homophonic candidates. This paper presents a study of four candidate display styles, three commonly used in commercial products (“vertical,” “horizontal, ” and “compact-horizontal”) and one novel (“matrix”), together with various manual selection methods (mouse, numeric key, spacebar, <b>cursor</b> <b>key,</b> numeric keypad and unrestricted input method). The results show that (1) when typing a single kanji character, about 70 % of total operation time is spent on choice selection; and (2) the “compact-horizontal ” and “matrix ” display styles are superior to the other display styles...|$|E
50|$|The basic {{movement}} keys (h, left; j, down; u, up; and k, right) are {{the same}} as the <b>cursor</b> control <b>keys</b> in the vi editor. Other game actions also use single keystrokes—q to quaff a potion, w to wield a weapon, e to eat some food, etc. In the DOS version, the <b>cursor</b> <b>keys</b> specify movement, and the fast-move keys (H, J, K, and L) are supplanted by use of the scroll lock key.|$|R
50|$|The players {{take turns}} {{to hit a}} white cue ball against the reds or colours {{following}} the rules of snooker. The strength of the shot and the spin can be selected using the space bar and <b>cursor</b> <b>keys</b> respectively.|$|R
5000|$|The {{interface}} two {{came with}} two joystick ports that (unlike the Kempston which used the IN31 command) were mapped to actual key presses. Player 1 was mapped to - and player 2 was mapped to -. This initially seemed {{at odds with}} Sinclair's own keyboard layout, given that the keyboard itself had the <b>cursor</b> <b>keys</b> mapped to - with [...] typically being used by games as a fire button. Joystick interfaces that mapped to the <b>cursor</b> <b>keys</b> were available, but like the popular Kempston interface they were limited to supporting a single joystick only. It was the twin joystick feature of the ZX Interface 2 {{that turned out to}} be its major selling point.|$|R
50|$|The rounded {{rectangular}} keys were redesigned {{to become}} circular (F1-F6, <b>cursor</b> <b>keys),</b> or elliptical (2nd-5th rows from top), or rounded elliptical triangle (numeric keypad keys {{at the bottom}} 4 rows). Case gets rounder at the edges and concave along the longitudal middle.|$|R
5000|$|Scrolling Lock [...] - [...] Scroll Lock. In some applications, such as spreadsheets, {{the lock}} mode {{is used to}} change the {{behavior}} of the <b>cursor</b> <b>keys</b> to scroll the document instead of the cursor. Usually located {{to the right of the}} function keys.|$|R
50|$|Hoosier City and its sequels {{are based}} in a post-nuclear war, where the player is tasked with ridding a city of mutants. Movement is {{controlled}} using the <b>cursor</b> <b>keys,</b> and the player is able to obtain additional weapons and items, as well as upgrades.|$|R
50|$|The game {{takes the}} form of a series of {{graphical}} screens depicting grass, sky and trees with occasional text clues. The only interaction is pressing the <b>cursor</b> <b>keys</b> to follow a hare which moves across the screen and disappears off one of the sides.|$|R
5000|$|An [...] "IBM PC compatible" [...] {{may have}} a {{keyboard}} that does not recognize every key combination a true IBM PC does, such as shifted <b>cursor</b> <b>keys.</b> In addition, the [...] "compatible" [...] vendors sometimes used proprietary keyboard interfaces, preventing the keyboard from being replaced.|$|R
5000|$|The game {{takes place}} on a {{top-down}} 2-D map, which is colorized in recent versions. The characters, including Magneto, appear in side view. By modern standards the map is quite small, wrapping around after about three window-sizes, the windows remaining limited to the original 512 × 384 resolution of the early Macs. Magneto could move only in the four cardinal directions, either by pressing buttons on the [...] "control panel" [...] {{on the right side}} of the screen, or by using the <b>cursor</b> <b>keys</b> in modern versions (early Macs did not include <b>cursor</b> <b>keys).</b> There are several other buttons used to identify objects and translate the alien speech, pick up or drop objects, and to use the various equipment found while playing.|$|R
5000|$|The {{original}} computer terminals and microcomputers {{for which}} WordStar was developed, many running the CP/M operating system, {{did not have}} function <b>keys</b> or <b>cursor</b> control <b>keys</b> (arrow keys, Page Up/Page Down). WordStar used sequences of alphabetic keys combined with the [...] "Control" [...] key, which on keyboards of the time was conveniently next to the letter A in the position now usually occupied by the Caps Lock key. For touch typists, in addition, reaching the function and <b>cursor</b> <b>keys</b> generally requires them to take their fingers off the [...] "home keys" [...] with consequent loss of typing rhythm.|$|R
50|$|Pie menus {{work well}} with {{keyboard}} acceleration, particularly four and eight item menus, on the <b>cursor</b> <b>keys</b> and the number pad. A goal of pie menus {{is to provide a}} smooth, reliable gestural style of interaction for novices and experts. A slice can lead to another pie menu; selecting this may center the pointer in the new menu.|$|R
40|$|Computer {{keyboards}} {{are used}} to input hundreds of di#erent languages using many di#erent alphabets. Despite this diversity, the physical layout of keyboards is fairly uniform, with keyboards generally containing approximately 80 keys spread across six rows (excluding <b>cursor</b> <b>keys</b> and numberpad). In English speaking countries, the QWERTY layout is the de-facto standard binding between the physical location of keys and the corresponding letters of the alphabet...|$|R
5000|$|This layout {{dates back}} to Sinclair ZX80, Sinclair ZX81 and Sinclair Spectrum software: the {{original}} Sinclair machines had <b>cursor</b> <b>keys</b> on the top row, keys 5, 6, 7 and 8. Due to the unusual programming technique adapted by Sinclair, these keys were accessed either by using the [...] key {{in conjunction with a}} numeric key or by the numeric key alone depending on program in use.|$|R
5000|$|The {{keyboard}} layout was new at the time, adding {{a set of}} <b>cursor</b> and miscellaneous <b>keys</b> between the main keyboard and the numeric keypad. The <b>cursor</b> <b>keys</b> were arranged in what has now become the standard [...] "Inverted T" [...] arrangement seen on essentially all contemporary full-sized computer keyboards. Ergonomic considerations caused the keyboard to be designed with a very low profile; it was very thin, especially {{when compared to the}} keyboard used on the VT100. The keyboard connected using a 4 position modular connector over which flowed 12 volt power and 4800 bit/s asynchronous serial data.|$|R
50|$|When first {{switched}} on, the Model 100 {{displays a}} menu of applications and files and the date and time. The ROM firmware-based system boots instantly, and the program that was running when the unit was powered off is ready to use immediately on power-up. <b>Cursor</b> <b>keys</b> are used to navigate the menu and select one of the internal or added application programs, or any data file to be worked upon.|$|R
40|$|Balloon Selection is a 3 D {{interaction}} technique that is {{modeled after the}} real world metaphor of manipulating a helium balloon attached to a string. Balloon Selection allows for precise 3 D selection in the volume above a tabletop surface by using multiple fingers on a multi-touch–sensitive surface. The 3 DOF selection tasks is decomposed in part into a 2 DOF positioning task performed by one finger on the tabletop in an absolute 2 D Cartesian coordinate system and a 1 DOF positioning task performed by another finger on the tabletop in a relative 2 D polar coordinate system. We have evaluated Balloon Selection in a formal user study that compared it to two well-known {{interaction technique}}s for selecting a static 3 D target: a 3 DOF tracked wand and keyboard <b>cursor</b> <b>keys.</b> We found that Balloon Selection was significantly faster than using <b>cursor</b> <b>keys</b> and had a significantly lower error rate than the wand. The lower error rate appeared to result from the user’s hands being supported by the tabletop surface, resulting in significantly reduced hand tremor and arm fatigue...|$|R
5000|$|Unlike the C64 which {{emulated}} the 6551 chip in software, the Plus/4 had {{a built-in}} MOS Technology 6551 UART chip that could perform up to 19200 bit/s. This allowed the Plus/4 to use high-speed modems without additional hardware or software tricks (the C64 required specially written software {{to operate at}} 2400 bit/s), but most people could only afford 300- or 1200-bit/s modems in 1984 and Commodore never released a 2400-bit/s modem so this feature went largely unnoticed. The Plus/4's serial port is the standard Commodore user port used since the PET, featuring TTL voltage which is incompatible with RS-232. This requires a voltage converter to use modems or other serial devices from non-Commodore vendors. The Plus/4 keyboard had a separately placed directional [...] "diamond" [...] of four <b>cursor</b> <b>keys,</b> presumably more intuitive to use than the VIC's and C64's two shifted <b>cursor</b> <b>keys.</b> A reset button was added {{on the right side}} of the system, a feature lacking on the C64. The Plus/4 also revived the built-in machine language monitor from the PET days, a feature missing on the VIC-20 and C64.|$|R
50|$|The {{original}} 520ST case {{design was}} created by Ira Velinsky Atari's chief Industrial Designer. The ST is basically wedge-shaped, featuring bold angular lines {{and a series of}} grilles cut into the rear for airflow. The keyboard has soft tactile feedback and rhomboid-shaped function keys across the top. The 520ST is an all-in-one unit, similar to earlier home computers like the Commodore 64, but with a larger keyboard with <b>cursor</b> <b>keys</b> and a numeric keypad.|$|R
50|$|The usual {{implementation}} {{today is}} to combine history with command-line editing. The <b>cursor</b> <b>keys</b> are used to navigate up and down through the history list and left or right to anyplace on the line, where the user can simply type a desired change. But some implementations are menu-based: The user presses a certain function key which displays a menu of recent commands, which the user can select one by typing a number.|$|R
5000|$|Compared to the CPC464, the CPC664's {{main unit}} has been {{significantly}} redesigned, {{not only to}} accommodate the floppy disk drive but also with a redesigned keyboard area. Touted [...] "ergonomic" [...] by Amstrad's promotional material, the keyboard is noticeably tilted to the front with MSX-style <b>cursor</b> <b>keys</b> above the numeric keypad. Compared to the CPC464's multicoloured keyboard, the CPC664's keys are kept in a much quieter grey and pale blue colour scheme.|$|R
40|$|We will {{demonstrate}} a CAD program {{designed for the}} lay out and analysis of microstrip circuits. The program runs on the IBM PC or AT. Circuit elements are selected from a parts list and drawn on the screen using the <b>cursor</b> <b>keys.</b> The analysis may then be performed, directly from the screen drawing. Puff {{has been used by}} microwave students in classes at the California Institute of Technology and the University of California at Los Angeles...|$|R
50|$|A {{computer}} using {{a command}} line interface may present a list of relevant commands with assigned short-cuts (digits, numbers or characters) on the screen. Entering the appropriate short-cut selects a menu item. A more sophisticated solution offers navigation using the <b>cursor</b> <b>keys</b> or the mouse (even in two dimensions; then the menu items appear or disappear similarly to the menus common in GUIs). The current selection is highlighted and can be activated by pressing the enter key.|$|R
