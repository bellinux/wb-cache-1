1399|1|Public
25|$|A (normalised) {{cleavage}} {{such that}} the composition of two transport morphisms is always a transport morphism is called a splitting, and a fibred category with a splitting is called a split (fibred) category. In terms of inverse image functors the condition of being a splitting means that the composition of inverse image functors corresponding to <b>composable</b> morphisms f,g in E equals the inverse image functor corresponding to f ∘ g. In other words, the compatibility isomorphisms cf,g of the previous section are all identities for a split category. Thus split E-categories correspond exactly to true functors from E to the category of categories.|$|E
2500|$|What Böhm and Jacopini's article showed {{was that}} all {{programs}} could be goto-free. Other research showed that control structures with one entry and one exit were much easier to understand than any other form, mainly because they could be used anywhere as a statement without disrupting the control flow. In other words, they were <b>composable.</b> (Later developments, such as non-strict programming languages – and more recently, <b>composable</b> software transactions – have continued this strategy, making components of programs even more freely <b>composable.)</b> ...|$|E
2500|$|The {{resulting}} functional [...] is in. The assignment [...] {{produces a}} linear map between {{the space of}} continuous linear maps from V to W and the space of linear maps from [...] to [...] [...] When T and U are <b>composable</b> continuous linear maps, then ...|$|E
2500|$|Monads allow a {{programming}} style where {{programs are}} written by putting together highly <b>composable</b> parts, combining in flexible ways the possible actions {{that can work}} on {{a particular type of}} data. As such, monads have been described as [...] "programmable semicolons"; a semicolon is the operator used to chain together individual statements in many imperative programming languages, thus the expression implies that extra code will be executed between the actions in the pipeline. Monads have also been explained with a physical metaphor as assembly lines, where a conveyor belt transports data between functional units that transform it one step at a time.|$|E
60|$|Who shall {{tell all}} the {{thoughts}} and feelings of Pierre in that desolate and shivering room, when at last the idea obtruded, that the wiser and the profounder he should grow, the more and the more he lessened the chances for bread; that could he now hurl his deep book out of the window, and fall to on some shallow nothing of a novel, <b>composable</b> in a month at the longest, then could he reasonably hope for both appreciation and cash. But the devouring profundities, now opened up in him, consume all his vigor; would he, he could not now be entertainingly and profitably shallow in some pellucid and merry romance. Now he sees, that with every accession of the personal divine to him, some great land-slide of the general surrounding divineness slips from him, and falls crashing away. Said I not that the gods, as well as mankind, had unhanded themselves from this Pierre? So now in him you behold the baby toddler I spoke of; forced now to stand and toddle alone.|$|E
6000|$|Employers seldom fail, {{and never}} for long, {{to get all}} the workmen they need. The field into which women have put their sickles was already overcrowded with reapers. Whatever {{employment}} women have obtained has been got by displacing men--who would otherwise be supporting women. Where is the general advantage? We may shout [...] "high tariff," [...] "combination of capital," [...] "demonetization of silver," [...] and what not, but if searching for the cause of augmented poverty and crime, [...] "industrial discontent" [...] and the tramp evil, instead of dogmatically expounding it, we should take some account of this enormous, sudden addition to the number of workers seeking work. If any one thinks that within the brief period of a generation the visible supply of labor can be enormously augmented without profoundly affecting the stability of things and disastrously touching the interests of wage-workers let no rude voice dispel his dream of such maleficent agencies as his slumbrous understanding may joy to affirm. And let our Widows of Ashur unlung themselves in advocacy of quack remedies for evils of which themselves are cause; it remains true that when the contention of two lions for one bone is exacerbated by the accession of a lioness the squabble is not <b>composable</b> by stirring up some bears in the cage adjacent.|$|E
5000|$|MEF's {{container}} {{interacts with}} Catalogs {{to have access}} to <b>composable</b> parts. The container itself resolves a part's dependencies and exposes Exports to the outside world. <b>Composable</b> part instances may be added directly to the container.|$|E
5000|$|What Böhm and Jacopini's article showed {{was that}} all {{programs}} could be goto-free. Other research showed that control structures with one entry and one exit were much easier to understand than any other form, mainly because they could be used anywhere as a statement without disrupting the control flow. In other words, they were <b>composable.</b> (Later developments, such as non-strict programming languages - and more recently, <b>composable</b> software transactions - have continued this strategy, making components of programs even more freely <b>composable.)</b> ...|$|E
5000|$|Composability is {{a system}} design {{principle}} that deals with the inter-relationships of components. A highly <b>composable</b> system provides components that can be selected and assembled in various combinations to satisfy specific user requirements. In information systems, the essential features that make a component <b>composable</b> are that it be: ...|$|E
5000|$|Each {{service is}} elastic, resilient, <b>composable,</b> minimal, and complete.|$|E
5000|$|... #Subtitle level 3: Impossibility of universally <b>composable</b> {{commitment}} schemes ...|$|E
5000|$|In general, N(C)k {{consists}} of the k-tuples of <b>composable</b> morphisms ...|$|E
5000|$|<b>Composable</b> Futures with Akka 2.0, Featuring Java, Scala and Akka Code Examples ...|$|E
5000|$|The {{interchange}} law holds; i.e. {{it is true}} {{that for}} <b>composable</b> 2-cells ...|$|E
5000|$|... <b>composable</b> input {{elements}} (html form elements) (library Graphics.Input), image elements (library Graphics.Element) and container elements ...|$|E
50|$|A universally <b>composable</b> {{authenticated}} channel {{can be built}} using digital signatures and {{a public}} key infrastructure.|$|E
50|$|The {{compound}} {{application of}} service reusability, service abstraction and service loose coupling principles help developing <b>composable</b> services.|$|E
5000|$|Build on Web {{services}} standards (approved and proposed) as much {{as possible}} in a <b>composable</b> and modular manner.|$|E
5000|$|... a rich runtime system, {{providing}} {{features that}} language implementors can use, like (<b>composable,</b> delimited) continuations, resource management, etc., ...|$|E
5000|$|MEF's {{first-class}} {{citizen is}} the ComposablePart class. A <b>composable</b> part offers up {{one or more}} Exports, and may also depend on one or more externally provided services or Imports. A <b>composable</b> part also manages an instance, which can be an object instance of a given type (it is in the default MEF implementation). MEF, however, is extensible and additional ComposablePart implementations can be provided {{as long as they}} adhere to the Import/Export contracts.|$|E
50|$|Universally <b>composable</b> {{confidential}} {{channels are}} known to exist under computational hardness assumptions based on hybrid encryption and a public key infrastructure.|$|E
50|$|It {{is widely}} {{believed}} that <b>composable</b> systems are more trustworthy than non-composable systems because {{it is easier to}} evaluate their individual parts.|$|E
5000|$|In {{programming}} languages, a delimited continuation, <b>composable</b> continuation {{or partial}} continuation, is a [...] "slice" [...] of a continuation frame {{that has been}} reified into a function. Unlike regular continuations, delimited continuations return a value, and thus may be reused and composed. Control delimiters, the basis of delimited continuations, were introduced by Matthias Felleisen in 1988 though early allusions to <b>composable</b> and delimited continuations {{can be found in}} Carolyn Talcott's Stanford 1984 dissertation, Felleisen and Friedman's PARL 1987 paper, and Felleisen's 1987 dissertation.|$|E
5000|$|The default MEF <b>composable</b> part {{implementation}} uses attribute-based metadata {{to declare}} exports and imports. This allows MEF {{to determine which}} parts, imports, and exports are available through discovery.|$|E
50|$|Note {{that the}} Racket core {{implements}} powerful continuation features, providing general (re-entrant) continuations that are <b>composable,</b> and also delimited continuations. Using this, the generator library is implemented in Racket.|$|E
5000|$|... stateless: {{it treats}} each request as an {{independent}} transaction, unrelated to any previous request. Stateless is just one technique; managed state and transactional systems can also be <b>composable,</b> but with greater difficulty.|$|E
5000|$|WebSphere Application Server Version 8.5 was {{announced}} April 24, 2012. [...] A component of V8.5 is the Liberty Profile runtime model, {{which is a}} <b>composable</b> web container server runtime with dynamic update capabilities.|$|E
50|$|GHC {{complies}} with the language standards, both Haskell 98 and Haskell 2010.It also supports many optional extensions to the Haskell standard: for example, the software transactional memory (STM) library, which allows for <b>Composable</b> Memory Transactions.|$|E
50|$|Lha (Ԕ ԕ; italics: Ԕ ԕ) is {{a letter}} of the Cyrillic script. It looks like a cross-digraph of the Cyrillic letters El (Л л) and Kha (Х х), {{but it is not}} a <b>composable</b> ligature.|$|E
50|$|Rha (Ԗ ԗ; italics: Ԗ ԗ) is {{a letter}} of the Cyrillic script. It looks like a cross-digraph of the Cyrillic letters Er (Р р) and Kha (Х х), {{but it is not}} a <b>composable</b> ligature.|$|E
5000|$|Composability: locks {{are only}} <b>composable</b> (e.g., {{managing}} multiple concurrent locks {{in order to}} atomically delete item X from table A and insert X into table B) with relatively elaborate (overhead) software support and perfect adherence by applications programming to rigorous conventions.|$|E
50|$|Eventually {{system designs}} {{may see the}} advent of <b>composable</b> {{architectures}} where published semantic-based interfaces are joined together to enable new and meaningful capabilities. These could predominately be described by means of design-time declarative specifications, that could ultimately be rendered and executed at run-time.|$|E
50|$|The {{framework}} is <b>composable,</b> meaning shallow neural nets such as restricted Boltzmann machines, convolutional nets, autoencoders, and recurrent nets {{can be added}} to one another to create deep nets of varying types. It also has extensive visualization tools, and a computation graph.|$|E
5000|$|The {{idea is that}} 2-simplices [...] are {{supposed}} to represent commutative triangles (at least up to homotopy). A map [...] represents a <b>composable</b> pair. Thus, in a quasi-category, one cannot define a composition law on morphisms, since one can choose many ways to compose maps.|$|E
5000|$|The {{resulting}} functional T′(φ) is in V′. The assignment T → T′ {{produces a}} linear map between {{the space of}} continuous linear maps from V to W and the space of linear maps from W′ to V′. When T and U are <b>composable</b> continuous linear maps, then ...|$|E
50|$|The service composability {{principle}} provides {{design considerations}} that help towards designing <b>composable</b> services {{with a view}} to encourage service reuse as much as possible. The guidelines provided by this principle prepare the service so that it is ready to participate in service compositions without requiring any further design changes.|$|E
