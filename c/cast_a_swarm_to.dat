0|10000|Public
50|$|Ayperobos: Small, hateful devils {{that work}} {{together}} as <b>a</b> <b>swarm</b> <b>to</b> bring down larger foes.|$|R
6000|$|... "No, my dear child, we {{must not}} go in <b>a</b> <b>swarm</b> <b>to</b> the parsonage. And that old Glasgow suit of yours would never do. Besides, your father will come home. We must let Fred go alone. He can tell Mary that you are here, and she will come back to-morrow." ...|$|R
6000|$|... "You think a tree is wanting for <b>a</b> <b>swarm</b> <b>to</b> settle in! But I know differently; and so I have {{stretched}} {{out a few}} hundred miles farther west than common, to taste your honey. And, now, I have bated your curiosity, stranger, you will just move aside, while I tell the remainder of my story to this young woman." ...|$|R
5000|$|Peer {{exchange}} {{cannot be}} used on its own to introduce a new peer <b>to</b> <b>a</b> <b>swarm.</b> <b>To</b> make initial contact with <b>a</b> <b>swarm,</b> each peer must either connect to a tracker using a [...] ".torrent" [...] file, or else use a router computer called a bootstrap node to find a distributed hash table (DHT) which describes <b>a</b> <b>swarm's</b> list of peers. For most BitTorrent users, DHT and PEX will start to work automatically after the user launches a BitTorrent client and opens a [...]torrent file. A notable exception is [...] "private torrents" [...] which are not freely available; these will commonly disable DHT.|$|R
60|$|The {{second thing}} we have to note is historical: that the Mother-Society, even in this its effulgent period, cannot content all Patriots. Already it must throw off, so to speak, two {{dissatisfied}} swarms; <b>a</b> <b>swarm</b> <b>to</b> the right, <b>a</b> <b>swarm</b> <b>to</b> the left. One party, which thinks the Jacobins lukewarm, constitutes itself into Club of the Cordeliers; a hotter Club: it is Danton's element: with whom goes Desmoulins. The other party, again, which thinks the Jacobins scalding-hot, flies off to the right, and becomes 'Club of 1789, Friends of the Monarchic Constitution.' They are afterwards named 'Feuillans Club;' their place of meeting being the Feuillans Convent. Lafayette is, or becomes, their chief-man; supported by the respectable Patriot everywhere, by the mass of Property and Intelligence,--with the most flourishing prospects. They, in these June days of 1790, do, in the Palais Royal, dine solemnly with open windows; to the cheers of the people; with toasts, with inspiriting songs,--with one song at least, among the feeblest ever sung. (Hist. Parl. vi. 334.) They shall, in due time be hooted forth, over the borders, into Cimmerian Night.|$|R
25|$|Has greater defensiveness when in <b>a</b> resting <b>swarm,</b> {{compared}} <b>to</b> other {{honey bee}} types.|$|R
40|$|Abstract In {{this article}} we present a self-organized method for allocating the {{individuals}} of <b>a</b> robot <b>swarm</b> <b>to</b> tasks that are sequentially interdependent. Tasks that are sequentially interdependent are common in natural and artificial systems. The proposed method does nei-ther rely on global knowledge nor centralized components. Moreover, {{it does not require}} the robots to communicate. The method is based on the delay experienced by the robots working on one subtask when waiting for input from another subtask. We explore the capabilities of the method in different simulated environments. Additionally, we evaluate the method in a proof-of-concept experiment using real robots. We show that the method allows <b>a</b> <b>swarm</b> <b>to</b> reach <b>a</b> near-optimal allocation in the studied environments, can easily be transferred to a real robot setting, and is adaptive to changes in the properties of the tasks such as their duration. Finally, we show that the ideal setting of the parameters of the method does not depend on the properties of the environment...|$|R
40|$|Collective {{identity}} helps swarms remain coherent in {{the presence}} of others. Building identity into artificial systems enables groups of agents to work in the same area as one another, without interference from other agents. By linking the firefly algorithm to the control logic of the agents, we present a method to form and maintain identity in swarms. By measuring swarm polarization, and swarm overlap, we show that the inclusion of an identity allows <b>a</b> <b>swarm</b> <b>to</b> remain coherent {{for an extended period of}} time, without interference from other swarms...|$|R
50|$|Some 80-90 {{bird species}} have been {{recorded}} from the island, especially seabirds and waders. There is a large breeding colony of short-tailed shearwaters, locally known as ‘muttonbirds’, with an estimated 100,000 burrows (of which probably fewer than half are occupied during the September-April breeding season). The shearwater colony is a tourist attraction in spring and summer, with a viewing platform constructed to facilitate watching the birds as they return in <b>a</b> <b>swarm</b> <b>to</b> their burrows at dusk. Other animals resident on the island include swamp wallabies, short-beaked echidnas, blue-tongued lizards and tiger snakes.|$|R
40|$|<b>Swarm</b> {{robotics}} is <b>an</b> {{innovative approach}} to the control and coordination {{of a large number}} of multi-agent systems that use naturally inspired <b>swarm</b> intelligent methods <b>to</b> perform a task through emergent behaviors. <b>A</b> <b>swarm</b> based approach can de-crease the complexity and the cost of designing a cooperative multi-robot system. This paper proposes a general engineering approach <b>to</b> develop <b>a</b> robotic <b>swarm</b> that focuses on how to syn-thesize an emergent behavior and the associated inputs to this end. We validate our methodology by engineering <b>a</b> <b>swarm</b> <b>to</b> simultaneously rendezvous on a stationary light source. Further-more, we also considered the case when the light source is slowly moving. The design is simulated in NetLogo, an agent-based modeling software, and implemented on the MASnet robot plat-form. This work demonstrates the basic knowledge and tools required <b>to</b> engineer <b>a</b> robotic <b>swarm...</b>|$|R
40|$|AbstractWork {{solutions}} are proposed for problems of leader definition and role distribution in homogeneous groups of robots. It is shown that transition from <b>a</b> <b>swarm</b> <b>to</b> <b>a</b> collective of robots with hierarchical organization is possible using exclusively local interaction. The local revoting algorithm {{is central to}} the procedure for choice of leader while redistribution of roles can be achieved by a wave method. The basis for this approach is the static swarm model, which is characterized by the absence of a set control center and represents the network fixed at some time interval as a set of locally interacting agents...|$|R
40|$|Consider <b>a</b> <b>swarm</b> of {{particles}} controlled by global inputs. This paper presents algorithms for shaping such swarms in 2 D using boundary walls. The range of configurations created by conforming <b>a</b> <b>swarm</b> <b>to</b> <b>a</b> boundary wall is limited. We describe {{the set of}} stable configurations of <b>a</b> <b>swarm</b> in two canonical workspaces, a circle and a square. To increase the diversity of configurations, we add boundary interaction to our model. We provide algorithms using friction with walls to place two robots at arbitrary locations in a rectangular workspace. Next, we extend this algorithm to place $n$ agents at desired locations. We conclude with efficient techniques to control the covariance of <b>a</b> <b>swarm</b> not possible without wall-friction. Simulations and hardware implementations with 100 robots validate these results. These methods may have particular relevance for current micro- and nano-robots controlled by global inputs. Comment: 8 pages, 14 figures, plus Appendix with 4 pages and 2 figure...|$|R
40|$|The same {{mechanisms}} {{that are so}} efficient at finding optima may result in <b>a</b> conventional Particle <b>Swarm</b> Optimisation (PSO) algorithm becoming trapped in a local optimum and unable to escape from this to search for further, hopefully better, optima. This problem becomes more significant as the dimensionality of the problem space increases. A new algorithm that uses Waves of Swarm Particles (WoSP) is introduced that allows <b>a</b> <b>swarm</b> <b>to</b> escape from <b>an</b> optimum and forces it to go on exploring. Results are given for a deceptive problem in both 30 and 100 dimensions. The WoSP algorithm performs well on these problems, encouraging the application of WoSP to other multi-optima high dimensionality problems...|$|R
40|$|Part 3 : Short PapersInternational audienceSwarm {{intelligence}} {{can provide}} robust, adaptable, scalable solutions to difficult problems. The distributed nature of swarm activity {{is the basis}} of these desirable qualities, but it also prevents swarm-based techniques from having direct access to global knowledge that could facilitate the task at hand. Our experiments indicate that <b>a</b> <b>swarm</b> system can use <b>an</b> auxiliary <b>swarm,</b> called <b>a</b> communication <b>swarm,</b> <b>to</b> create and distribute an approximation of useful global knowledge, without sacrificing robustness, adaptability, and scalability. We describe <b>a</b> communication <b>swarm</b> and validate its effectiveness on a simple problem...|$|R
40|$|Abstract: The {{coordination}} of <b>an</b> autonomous robotic <b>swarm</b> requires <b>a</b> control algorithm that is simple, scalable, robust and flexible. Biological systems show {{many kinds of}} behaviours, which enable organisms to act efficiently in a dynamic environment. By mimicking the trophallactic behaviour of honeybees (mouth-to-mouth feeding), we developed a communication scheme and a navigation algorithm for mobile robots. This allows <b>a</b> <b>swarm</b> of robots <b>to</b> perform collective decision-making based on individual robot navigation. In this article we present a novel feature of this algorithm: It allows <b>a</b> robotic <b>swarm</b> <b>to</b> react to the shape and to the orientation of areas of unsuitable terrain. We demonstrate that <b>a</b> robotic <b>swarm</b> using this new algorithm is able to make near-optimal route choices, i. e. whether to cross or to avoid an area with unsuitable terrain. Key-Words: swarm robotics, self-organization, honeybees, trophallaxis, swarm intelligence, optimal route choice. 1...|$|R
50|$|The centre {{currently}} leads <b>Swarm,</b> <b>a</b> project <b>to</b> {{investigate the}} properties of the earth's magnetic field.|$|R
30|$|As a {{extension}} of their main work, they proposed a query based method and employed <b>a</b> Particle <b>Swarm</b> optimizer <b>to</b> attack classification model {{in a black}} box model.|$|R
50|$|A {{synthetically}} produced Nasonov pheromone {{can be used}} {{to attract}} <b>a</b> honey bee <b>swarm</b> <b>to</b> <b>an</b> unoccupied hive or a swarm-catching box. Synthetically produced Nasonov consists of citral and geraniol in a 2:1 ratio.|$|R
40|$|This paper {{presents}} the novel {{use of the}} Neural-endocrine architecture for swarm robotic systems. We make use {{of a number of}} behaviours to give rise <b>to</b> emergent <b>swarm</b> behaviour <b>to</b> allow <b>a</b> <b>swarm</b> of robots <b>to</b> collaborate in the task of foraging. Results show that the architecture is amenable to such a task, with the <b>swarm</b> being able <b>to</b> successfully complete the required task...|$|R
40|$|Social {{interaction}} increases significantly {{the performance}} {{of a wide range of}} cooperative systems. However, evidence that natural swarms limit the number of social connections suggests potentially detrimental consequences of excessive social activity. Using a canonical model of collective motion, we find that the responsiveness of <b>a</b> <b>swarm</b> <b>to</b> local perturbations is reduced when the social interaction exceeds a certain threshold. We uncover a similar effect for two distinct collective decision-making models of distributed consensus operating over a range of static networks. While increasing the amount of interaction always increases the capacity of these systems to adapt to slow changes, an excess of social behavior can hinder the swiftness of their response to fast perturbations. These results have far-reaching implications for the design of artificial swarms or interaction networks...|$|R
40|$|Abstract. In {{this paper}} we {{address the problem of}} {{optimizing}} p 2 p systems for enterprise bandwidth cost savings. Consider a scenario where an enterprise uses p 2 p <b>swarming</b> <b>to</b> deliver content to its clients. A content may be a file or a package (bundle) of files. For popular and large content, our work finds that enterprise servers can exclusively rely on the cooperation among the peers in the form of <b>a</b> <b>swarm</b> <b>to</b> disseminate the files. We introduce the idea of self sustaining swarms, i. e., swarms where the presence of the server is not necessary for the content to be efficiently transmitted. We characterize, under different scenarios, the concept of self sustainability. We then focus on swarms that are not always self sustaining, and propose a scheme for the server to decide how much bandwidth <b>to</b> allocate <b>to</b> <b>a</b> <b>swarm</b> as <b>a</b> function of the arrival and departure rate of the peers. To show the applicability of our controller, we deploy BitTorrent clients in PlanetLab and in a local cluster. Our emulations confirm that the controller leads to significant improvements in terms of cost savings without degrading the download time for the clients. Finally, we analyze th...|$|R
40|$|Abstract. Many {{real world}} {{optimization}} problems are dynamic in which global optimum and local optima change over time. Particle swarm optimization has performed well {{to find and}} track optima in dynamic environments. In this paper, we propose <b>a</b> new particle <b>swarm</b> optimization algorithm for dynamic environments. The proposed algorithm utilizes <b>a</b> parent <b>swarm</b> <b>to</b> explore the search space and some child <b>swarms</b> <b>to</b> exploit promising areas found by the parent <b>swarm.</b> <b>To</b> improve the search performance, when the search areas of two child swarms overlap, the worse child swarms will be removed. Moreover, in order to quickly track {{the changes in the}} environment, all particles in <b>a</b> child <b>swarm</b> perform <b>a</b> random local search around the best position found by the child <b>swarm</b> after <b>a</b> change in the environment is detected. Experimental results on different dynamic environments modelled by moving peaks benchmark show that the proposed algorithm outperforms other PSO algorithms, including FMSO, <b>a</b> similar particle <b>swarm</b> algorithm for dynamic environments, for all tested environments...|$|R
50|$|Like other myxobacterial species, S. aurantiaca survives {{periods of}} {{starvation}} by undergoing a developmental process whereby the individuals of <b>a</b> <b>swarm</b> aggregate <b>to</b> form fruiting bodies (not {{to be confused}} with those in fungi). Within the fruiting bodies, a certain fraction of the cells differentiate into myxospores, which are dormant cells resistant to drying and temperatures up to 90 °C. Differentiation into fruiting bodies appears to be mediated by contact-mediated signaling.|$|R
40|$|This paper {{presents}} {{the design and}} hardware architecture of the small and inexpensive AUV MONSUN II for use in <b>a</b> <b>swarm.</b> Due <b>to</b> {{the high number of}} robots in <b>a</b> <b>swarm,</b> this approach can profit from the parallelization of tasks and its fault-tolerance based on redundancy. This allows the design of small and inexpensive AUVs for applications such as environmental monitoring. First experiments of a simple following behaviour were performed to show the suitability of the system design. Keywords-autonomous underwater vehicle, swarm Area: Mobile robots / underwater robotics...|$|R
40|$|Abstract Robot swarms provide {{interesting}} and potentially very useful examples of self-organizing systems. This chapter {{focuses on a}} specific approach, dubbed “active self-assembly”, for constructing arbitrary shapes with swarms of identical and identically programmed robots. Important, open issues are identified {{in the specific context}} of active self-assembly, but they are of more general applicability. Much of the discussion is centered on the fundamental problems of how <b>to</b> control <b>a</b> <b>swarm</b> <b>to</b> ensure that the structures it builds are self-repairing, and of how to assess the performance of self-assembling swarms. Individual robots at small spatial scales are unlikely to be very useful, because of the limited capabilities that their size implies. Swarms will be needed for most applications. Programming and coordination of such swarms are interesting intellectual problems because they raise issues of self-organization, emergence, global versus...|$|R
40|$|In {{this paper}} {{we present a}} new {{multilevel}} information sharing strategy within <b>a</b> <b>swarm</b> <b>to</b> handle single objective, constrained and unconstrained optimization problems. <b>A</b> <b>swarm</b> is <b>a</b> collection of individuals having a common goal to reach the best value (minimum or maximum) of a function. Among the individuals in <b>a</b> <b>swarm,</b> there are some better performers (leaders) those that set the direction of search {{for the rest of}} the individuals. An individual that is not in the better performer list (BPL) improves its performance by deriving information from its closest neighbor in BPL. In an unconstrained problem, the objective values are the performance measures used to generate the BPL while a multilevel Pareto ranking scheme is implemented to generate the BPL for constrained problems. The information sharing strategy also ensures that all the individuals in the swarm are unique as in <b>a</b> real <b>swarm,</b> where at <b>a</b> given time instant two individuals cannot share the same location. The uniqueness among the individuals result in a set of near optimal individuals at the final stage that is useful for sensitivity analysis. The benefits of the information sharing strategy 1 within <b>a</b> <b>swarm</b> are illustrated by solving two unconstrained problems with multiple equal and unequal optimum, a constrained optimization problem dealing with a test function and a well studied welded beam design problem. Keywords: Pareto, Constrained Optimization, and Swarm Strategy. 1...|$|R
6000|$|... "Now see here, Bass," [...] {{said the}} senator, [...] "I don't forget what {{happened}} in '70. I don't object <b>to</b> wading through <b>a</b> <b>swarm</b> of bees <b>to</b> get a little honey for a friend, but I think I'm entitled to know why he wants it." ...|$|R
40|$|Swarm robotic systems {{comprise}} many individual robots, {{and exhibit}} {{a degree of}} innate fault tolerance due to this built-in redundancy. They are robust {{in the sense that}} the complete failure of individual robots will have little detrimental effect on <b>a</b> <b>swarm's</b> overall collective behaviour. However, it has recently been shown that partially failed individuals may be harmful, and cause problems that cannot be solved by simply adding more robots <b>to</b> the <b>swarm.</b> Instead, <b>an</b> active approach to dealing with failed individuals is required for <b>a</b> <b>swarm</b> <b>to</b> continue operation in the face of partial failures. This thesis presents a novel method of exogenous fault detection that allows robots to detect the presence of faults in each other, via the comparison of expected and observed behaviour. Each robot predicts the expected behaviour of its neighbours by simulating them online in an internal replica of the real world. This expected behaviour is then compared against observations of their true behaviour, and any significant discrepancy is detected as a fault. This work represents the first step towards a distributed fault detection, diagnosis, and recovery process that would afford robot <b>swarms</b> <b>a</b> high degree of fault tolerance, and facilitate long-term autonomy...|$|R
40|$|Abstract—Swarm {{algorithms}} rely on randomness {{to produce}} solutions for complex problems. The random {{selection of actions}} and chance interactions of agents force <b>a</b> <b>swarm</b> <b>to</b> attempt many behavioral possibilities [...] reinforcing the productive ones and dampening the dead ends. Randomness however, is a dual-edged sword: {{it is necessary to}} insure a wide range of agent behavior, but also a source of inefficiency and wasted resources. Using behavioral feedback, we reinforce effective use of randomness [...] using it to select from a restricted list of useful actions. By observing an agent's behavior over the three domains of time, space, or category, we establish a context for the application of randomness. The set of possible agent actions can be reduced to only those that are potentially beneficial. With this constraint, our results show we can dramatically improve performance and induce faster emergence from swarm algorithms using behavioral feedback. I...|$|R
40|$|This paper {{describes}} {{the use of}} networked control algorithms in designing <b>a</b> robotic <b>swarm.</b> The main goal of <b>a</b> robotic <b>swarm</b> is <b>to</b> divide one task into multiple simpler tasks. Have we designed <b>a</b> <b>swarm</b> this way, the main challenge would be the problem of delay in communication between individual robots. This paper also goes through the Swarm Intelligence concept and proposes the Network Formation Control algorithms to control a group of robots...|$|R
40|$|Autonomous swarm {{algorithms}} {{have been}} studied extensively {{in the past several}} years. However, there is little research on the effect of injecting human influence into a robot swarm-whether it be <b>to</b> update the <b>swarm's</b> current goals or reshape swarm behavior. While there has been growing research in the field of human-swarm interaction (HSI), no previous studies have investigated how humans interact with swarms under communication latency. We investigate the effects of latency both with and without a predictive display in <b>a</b> basic <b>swarm</b> foraging task <b>to</b> see if such a display can help mitigate the effects of delayed feedback of the swarm state. Furthermore, we introduce a new concept called neglect benevolence to represent how a human operator may need to give time for <b>swarm</b> algorithms <b>to</b> stabilize before issuing new commands, and we investigate it with respect to task performance. Our study shows that latency did affect a user's ability <b>to</b> control <b>a</b> <b>swarm</b> <b>to</b> find targets in the foraging task, and that the predictive display helped to remove these effects. We also found evidence for neglect benevolence, and that operators exploited neglect benevolence in different ways, leading to two different, but equally successful strategies in the target-searching task...|$|R
40|$|This work {{presents}} a preliminary investigation {{on the use}} of <b>a</b> Particle <b>Swarm</b> Optimization (PSO) algorithm variant for Pattern Matching in image analysis. Providing each particle with its own target and having them organized with the classical Von Neumann topology is shown to be a feasible way <b>to</b> obtain <b>a</b> <b>swarm</b> able <b>to</b> locate <b>a</b> pattern on a digital image. Some preliminary tests on synthetic images show the effectiveness of the modified swarm algorithm, highlighting its insensitivity to basic transforms like mirroring, scaling and perspective deformations of the pattern...|$|R
3000|$|In this NBMF-PSO algorithm, {{we first}} {{initiate}} <b>a</b> <b>swarm</b> <b>to</b> produce the decision variable (X-particles) for PU and generate a population (Y-particles) for the followers, while the corresponding velocities are random numbers distributed among a pre-defined range. We then bring the X-particles to the lower-level {{problem of the}} NBMF model and use the Nash-PSO algorithm to generate the Nash equilibrium point from the followers by solving (14). After obtaining the best responses of the Y-particles from the followers, the leader's objective values for each decision variable of the X-particles can be calculated. To utilize the PSO strategy again, we obtain the leader's optimal strategy and find the solution changes for several consecutive generations which are smaller than a predefined value; hence, the Stackelberg-Nash equilibrium for the whole NBMF problem can be obtained. The detailed NBMF-PSO algorithm consists of two parts, Algorithm 2 and Algorithm 3, which generate the best response from SUs and the optimal strategies for PU, respectively, as specified as follows: [...]...|$|R
40|$|Abstract—Swarms within {{peer-to-peer}} {{networks are}} hindered by content containing incorrect metadata. After publishing, any incorrect metadata requires either a complete republish/swarm recreation or for each peer to manually make corrections (causing them <b>to</b> leave the <b>swarm,</b> decreasing performance). We present an approach which enables <b>a</b> <b>swarm</b> <b>to</b> both collaboratively upgrade embedded data to reflect changes in metadata, and identify additional candidates which contain metadata errors but <b>a</b> correct payload. <b>Swarm</b> degradation due <b>to</b> peer drop-off resulting from edits is eliminated, and additional peers {{can be identified}} in a fully automated fashion, increasing swarm lifetime and performance. Stemming from this metadata abstraction, automatic pu-rification can be realised in situations where multiple incom-plete/incorrect versions are available within one or more un-connected swarms. Variations associated with a content set are processed associatively using a knowledge discovery rule set to extrapolate a canonical tag set, which can also be reinforced using data from external corpora. After any update, these changes can again be automatically disseminated in <b>a</b> peer-to-peer <b>swarm.</b> The system presented enables context-aware P 2 P data transfers which abstract metadata optimally, while also maximising swarm size and enabling cataloguing of content. A proof-of-concept implementation is presented, {{and its impact on}} swarm purification/optimisation is evaluated. I...|$|R
40|$|Efficient {{swarming}} behaviours within peer-to-peer {{networks are}} hindered by imprecise or incorrect metadata content. Once published, metadata corrections {{can only be}} effected by a complete republish/swarm recreation or for each peer to manually make corrections (causing them <b>to</b> leave the <b>swarm,</b> decreasing performance). This work presents an approach which enables <b>a</b> <b>swarm</b> <b>to</b> collaboratively upgrade embedded data to reflect changes in metadata, and to identify additional candidates which contain differing metadata but <b>a</b> correct payload. <b>Swarm</b> degradation due <b>to</b> peer drop-off resulting from edits is eliminated, and additional peers can be identified in a fully automated fashion, increasing swarm lifetime and performance. Arising from this metadata abstraction, automatic purification can be realised in situations where multiple incomplete/incorrect versions are available within one or more unconnected swarms. Variations associated with a content set are processed associatively using a knowledge discovery rule set to extrapolate a canonical tag set, which can also be reinforced using data from external corpora. After any update, these changes can again be automatically disseminated in <b>a</b> peer-to-peer <b>swarm.</b> The system presented enables context-aware P 2 P data transfers which abstract metadata optimally, while also maximising swarm size and enabling cataloguing of content. A proof-of-concept implementation is presented, {{and its impact on}} swarm purification/ optimisation is evaluate...|$|R
50|$|You {{can view}} your {{collection}} of Nanovor through here. Each Nanovor {{is divided into}} 3 family types: Magnamods(Red) who have high armor always, Velocitrons(Yellow) who have lots of Hacks and Mods and Hexites(Blue) which have attacks that ignore armor. Each Nanovor also gets <b>a</b> <b>swarm</b> value <b>to</b> rate how powerful it is (when making <b>a</b> <b>swarm</b> you can only have up to 1000 points worth of value). If you have a Nanoscope, you can also increase how powerful a Nanovor is by playing minigames to earn Jolts which add to any values except swarm values. You can even see the badges the Nanovor has.|$|R
