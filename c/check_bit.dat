34|201|Public
500|$|It {{concerns}} the quadratic residue code of order n, extended {{by adding a}} single parity <b>check</b> <b>bit.</b> This [...] "remarkable theorem" [...] shows that this code is highly symmetric, having the projective linear group PSL2(n) as a subgroup of its symmetries.|$|E
5000|$|One bi bit: 5, three {{ring counter}} coded quinary bits and one parity <b>check</b> <b>bit</b> ...|$|E
5000|$|One bi bit: 5, three binary coded quinary bits: 4 2 1 and one parity <b>check</b> <b>bit</b> ...|$|E
3000|$|Fixed CRC check: {{request a}} fixed amount of CRC <b>check</b> <b>bits</b> to <b>check</b> the result (analysis in Section 3.1) [...]...|$|R
50|$|No parity or <b>check</b> <b>bits</b> are included. Error {{detection}} can {{be achieved}} by comparing consecutive frames to see if they encode consecutive timestamps.|$|R
40|$|With {{the advent}} of {{efficient}} quantum algorithms and technological advances, design of quantum circuits has gained importance. In this paper, Quantum circuit using standard quantum gates is constructed for the transmission of quantum encrypted <b>check</b> <b>bits.</b> The proposed scheme {{is analogous to the}} first QKD (quantum key distribution) protocol, (BB 84) where the <b>check</b> <b>bits</b> are used to detect the level of noise and evesdropping on the channel. The gates used in this work are easily realizable and the encoding and decoding of classical information bits is extended for multiple bits using dense coding scheme...|$|R
50|$|Single Character - The single {{character}} output provides four-bit characters {{suitable for}} typewriter, tape punch or other similar output equipment. A parity <b>check</b> <b>bit</b> and two timing bits are issued automatically with each character.|$|E
50|$|In telecommunications, a {{transverse}} {{redundancy check}} (TRC) or vertical redundancy check is a redundancy check for synchronized parallel bits applied once per bit time, across the bit streams. This requires additional parallel channels for the <b>check</b> <b>bit</b> or bits.|$|E
50|$|A parity bit, or <b>check</b> <b>bit,</b> {{is a bit}} {{added to}} a string of binary code {{to ensure that the}} total number of 1-bits in the string is even or odd. Parity bits are used as the {{simplest}} form of error detecting code.|$|E
5000|$|A {{systematic}} {{group code}} [...] is a code over [...] of order [...] defined by [...] homomorphisms which determine the parity <b>check</b> <b>bits.</b> The remaining [...] bits are the information bits themselves.|$|R
50|$|In the Hagelbarger code, {{inserted}} parity <b>check</b> <b>bits</b> {{are spread}} out in time so that an error burst {{is not likely to}} affect more than one of the groups in which parity is checked.|$|R
3000|$|Variable CRC check: {{request a}} {{variable}} amount of CRC <b>check</b> <b>bits</b> to <b>check</b> the result; {{the strength of}} the CRC check is matched with the reliability of the decoded result (analysis is in the Appendix) [...]...|$|R
5000|$|This {{just means}} that when we query for bit 0 we check the parity, and go to (1,0) if [...] is odd (which is an {{accepting}} state), else we reject. If we check a bit , we divide [...] by 2 and <b>check</b> <b>bit</b> [...]|$|E
5000|$|In coding theory, a zigzag code {{is a type}} {{of linear}} error-correcting code {{introduced}} by [...] They are defined by partitioning the input data into segments of fixed size, and adding sequence of check bits to the data, where each <b>check</b> <b>bit</b> is the exclusive or of the bits in a single segment and of the previous <b>check</b> <b>bit</b> in the sequence. The code rate is high: [...] where [...] is the number of bits per segment. Its worst-case ability to correct transmission errors is very limited: in the worst case it can only detect a single bit error and cannot correct any errors. However, it works better in the soft-decision model of decoding: its regular structure allows the task of finding a maximum-likelihood decoding or a posteriori probability decoding to be performed in constant time per input bit.|$|E
5000|$|A [...] "parity track" [...] {{was present}} on the first {{magnetic}} tape data storage in 1951. Parity in this form, applied across multiple parallel signals, {{is known as a}} transverse redundancy check. This can be combined with parity computed over multiple bits sent on a single signal, a longitudinal redundancy check. In a parallel bus, there is one longitudinal redundancy <b>check</b> <b>bit</b> per parallel signal.|$|E
40|$|The paper {{proposes a}} scheme by which an Orthogonal Latin Square code (OLS) can be {{modified}} to correct burst-errors of specific length. The method discussed in this paper models it as a graph coloring problem where {{the goal is to}} resolve conflicts in the existing OLS code in order for it to correct burst-errors. Conflicts are resolved by reordering and/or reorganizing existing parity relations by inclusion of extra <b>check</b> <b>bits.</b> The graph coloring approach tries to minimize the number of additional <b>check</b> <b>bits</b> required. The final OLS code after reordering and/or reorganizing would be capable of correcting burst-errors of specific length in addition to its original error correction capabilities...|$|R
3000|$|... [...]. The coded {{block is}} 7200 -bit long, with 3600 {{information}} bits. The IR-DFEC and HIR-DFEC transmissions use additionally {{a group of}} 3600 <b>check</b> <b>bits</b> computed and transmitted by the RN (or RNs), the global coding rate being [...]...|$|R
30|$|In general, the parity <b>check</b> <b>bits</b> of root-LDPC {{codes are}} not in full diversity. Boutros in [16] {{proposed}} a controlled doping via high order root-LDPC codes, which are able to guarantee full diversity for the parity <b>check</b> <b>bits.</b> Such a design becomes really important when iterative detection and decoding (IDD) is used in spread spectrum [17, 18] and MIMO systems [19 – 21]. In IDD systems, the detector and the decoder exchange their extrinsic information in an iterative way. Therefore, if the parity bits {{are not in}} full diversity, the overall IDD system performance {{will lead to a}} degradation in terms of bit error rate (BER) instead of improvements as stated in [17].|$|R
5000|$|Memory was {{accessed}} two decimal digits at {{the same}} time (even-odd digit pair for numeric data or one alphameric character for text data). Each decimal digit was 6 bits, composed of an odd parity <b>Check</b> <b>bit,</b> a Flag bit, and four BCD bits for the value of the digit in the following format: C F 8 4 2 1The Flag bit had several uses: ...|$|E
5000|$|The Gleason-Prange theorem {{is named}} after Gleason's work with AFCRL {{researcher}} Eugene Prange; it was originally published in a 1964 AFCRL research report by H. F. Mattson, Jr. and E. F. Assmus, Jr.It concerns the quadratic residue code of order n, extended by adding a single parity <b>check</b> <b>bit.</b> This [...] "remarkable theorem" [...] shows that this code is highly symmetric, having the projective linear group PSL2(n) as a subgroup of its symmetries.|$|E
5000|$|The {{memory of}} the IBM 1620 is {{organized}} into 6-bit addressable digits, the usual 8, 4, 2, 1 plus F, used as a flag bit and C, an odd parity <b>check</b> <b>bit.</b> BCD alphamerics are encoded using digit pairs, with the [...] "zone" [...] in the even-addressed digit and the [...] "digit" [...] in the odd-addressed digit, the [...] "zone" [...] being related to the 12, 11, and 0 [...] "zone punches" [...] as in the 1400 series. Input/Output translation hardware converted between the internal digit pairs and the external standard 6-bit BCD codes.|$|E
50|$|Another general {{class of}} codes are the {{automatic}} repeat-request (ARQ) codes. In these codes the sender adds redundancy to each message for error checking, usually by adding <b>check</b> <b>bits.</b> If the <b>check</b> <b>bits</b> are {{not consistent with}} the rest of the message when it arrives, the receiver will ask the sender to retransmit the message. All but the simplest wide area network protocols use ARQ. Common protocols include SDLC (IBM), TCP (Internet), X.25 (International) and many others. There is an extensive field of research on this topic because of the problem of matching a rejected packet against a new packet. Is it a new one or is it a retransmission? Typically numbering schemes are used, as in TCP.|$|R
50|$|Transfer is {{organized}} into micropackets. These contain {{a total of}} 128 bits of data and 32 bits of control. The control information encapsulates an 8 bit sideband (used by higher layers for framing), sequence numbers (for go-back-n link-layer retransmissions) and <b>check</b> <b>bits</b> (CRC-16).|$|R
3000|$|... in (32) {{means that}} are {{distinct}} permutation sub-matrices. The sub-matrices of Eq. (32) are all N/ 9 ×N/ 9 in dimension. In addition, the left-hand side of (32) {{are connected to}} the information symbols while the right-hand side {{are connected to the}} parity <b>check</b> <b>bits.</b>|$|R
50|$|Parity adds {{a single}} bit that {{indicates}} whether {{the number of}} ones (bit-positions with values of one) in the preceding data was even or odd. If an odd number of bits is changed in transmission, the message will change parity and the error can be detected at this point; however, the bit that changed may have been the parity bit itself. The most common convention is that a parity value of one indicates that there is an odd number of ones in the data, and a parity value of zero indicates that there is an even number of ones. If the number of bits changed is even, the <b>check</b> <b>bit</b> will be valid and the error will not be detected.|$|E
5000|$|A {{check digit}} {{is a form}} of {{redundancy}} check used for error detection, the decimal equivalent of a binary <b>check</b> <b>bit.</b> It consists of a single digit computed from the other digits in the number. The method for the ten digit code is an extension of that for SBNs, the two systems are compatible, and SBN prefixed with [...] "0" [...] will give the same check-digit as without - the digit is base eleven, and can be 0-9 or X. The system for thirteen digit codes is not compatible and will, in general, give a different check digit from the corresponding 10 digit ISBN, and does not provide the same protection against transposition. This is because the thirteen digit code was required to be compatible with the EAN format, and hence could not contain an [...] "X".|$|E
5000|$|The IBM 1400 {{series are}} character-addressable machines, each {{location}} being six bits labeled B, A, 8, 4, 2 and 1, plus an odd parity <b>check</b> <b>bit</b> (C) and a word mark bit (M). For encoding digits 1 through 9, B and A are zero and the digit value represented by standard 4-bit BCD in bits 8 through 1. For most other characters bits B and A are derived simply from the [...] "12", [...] "11", and [...] "0" [...] "zone punches" [...] in the punched card character code, and bits 8 through 1 from the 1 through 9 punches. A [...] "12 zone" [...] punch set both B and A, an [...] "11 zone" [...] set B, and a [...] "0 zone" [...] (a 0 punch combined with any others) set A. Thus the letter A, which is (12,1) in the punched card format, is encoded (B,A,1). The currency symbol $, (11,8,3) in the punched card, was encoded in memory as (B,8,2,1). This allowed the circuitry to convert between the punched card format {{and the internal}} storage format to be very simple {{with only a few}} special cases. One important special case is digit 0, represented by a lone 0 punch in the card, and (8,2) in core memory.|$|E
30|$|Boutros in [16] {{proposed}} a controlled doping via high order root-LDPC codes. Such root-LDPC codes {{are able to}} guarantee full diversity for the parity <b>check</b> <b>bits.</b> First of all, we have made some modifications in the original doped root-LDPC code parity-check matrix described in [16].|$|R
40|$|Spare columns {{are often}} {{included}} in memories {{for the purpose}} of allowing for repair in the presence of defective cells or bit lines. In many cases, the repair process will not use all spare columns. This paper proposes an extremely low cost method to exploit these unused spare columns to improve the reliability of the memory by enhancing its existing error correcting code (ECC). Memories are generally protected with single-errorcorrecting, double-error-detecting (SEC-DED) codes using the minimum number of <b>check</b> <b>bits.</b> In the proposed method, unused spare columns are exploited to store additional <b>check</b> <b>bits</b> which can be used to reduce the miscorrection probability for triple errors in SEC-DED codes or non-adjacent double errors in single adjacent error correcting codes (SEC-DAEC) codes...|$|R
5000|$|Since [...] is {{of degree}} less than , the leftmost [...] symbols of [...] {{agree with the}} {{corresponding}} symbols of [...] In other words, the first [...] symbols of the code word {{are the same as}} the original data word. The remaining [...] symbols are called checksum digits or <b>check</b> <b>bits.</b>|$|R
30|$|Bit errors: {{during the}} process of data transmission, it is {{inevitable}} that some bits will be modified, leading to a mismatch between the value stored in the <b>check</b> <b>bit</b> and the actual checksum. Once the mismatch is detected by the receiving router, this packet will be considered as an erroneous one and hence discarded.|$|E
40|$|AbstractA (105, 10, 47) binary quasi-cyclic code is {{presented}} which improves the known lower bound on the maximum possible minimum distance. The generator matrix is characterized {{in terms of}} m × m circulant matrices, where m = 5. This code is extended with an even parity <b>check</b> <b>bit</b> to a (106, 10, 48) code which also improves the known bound. The weight distributions of these codes are presented...|$|E
40|$|AbstractIn this paper, we {{investigate}} erasure-resilient codes (ERC) coming from Steiner 2 -designs with block size k which can correct up to any k erasures. In view of applications {{it is desirable}} that such a code can also correct as many erasures of higher order as possible. Our main {{result is that the}} ERC constructed from an affine space with block size q— a special Steiner 2 -design—cannot only correct up to any q erasures but even up to any 2 q− 1 erasures except for a small set of so-called bad erasures if q is a power of some odd prime number. This gives a new family of ERC which is asymptotically optimal in view of the <b>check</b> <b>bit</b> overhead...|$|E
40|$|Graduation date: 2005 In some {{practical}} systems, {{most of the}} errors are of 1 → 0 type and 0 → 1 errors occur very rarely. In this thesis, first, {{the capacity of the}} asymmetric channel is derived. The capacity of the binary symmetric channel (BSC) and the Z-channel can be derived from this expression as special cases. Second, the error detecting capability of Bose-Lin codes beyond the maximum designed error detection capability are described. Third, a new class of a systematic t-unidirectional error detecting codes over Z [subscript m], m≥ 2 is designed. These codes can detect 2 errors using r= 2 <b>check</b> <b>bits</b> and up to m[superscript (r- 2) ] + r- 2 errors using r> 2 <b>check</b> <b>bits.</b> Some upper bound on the maximum number of detectable errors when using r <b>check</b> <b>bits</b> are given. Finally, some analysis on the data throughput when using the following protocols over the m-ary Z-Channel, m≥ 2 are derived: (1) ARQ protocols using t-Asymmetric Error Detecting (t-AED) codes. (2) ARQ protocols using All Asymmetric Error Detecting (AAED) codes. (3) Type-I Hybrid ARQ protocols using t-Asymmetric Error Correcting and All Asymmetric Error Detecting (t-EC/AAED) codes. (4) ARQ Protocols with diversity combining using t-Asymmetric Error Correcting and All Asymmetric Error Detecting (t-EC/AAED) codes. Finally, some open research problems are described...|$|R
30|$|The private {{template}} scheme, {{based on}} iris, was proposed by Davida et al. [77, 78] {{in which the}} biometric template itself (or a hash value of it) serves as a secret key. The storage of helper data which are error correction <b>check</b> <b>bits</b> are required to correct faulty bits of given iris-codes.|$|R
40|$|Modified NRZ (non-return-to-zero) code immunizes {{record and}} {{playback}} systems against dc drift and bit slippage. In order to maximize bit packing density improved code called J-NRZ gives 100 percent NRZ efficiently and solves DC drift problem by adding <b>check</b> <b>bits</b> in specified format when long string is encountered. Remainder of data stream is encoded in NRZ format...|$|R
