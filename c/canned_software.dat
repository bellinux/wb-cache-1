10|6409|Public
50|$|Idaho - Includes in its {{tax code}} {{a sales tax}} on “canned” software, no matter the method of delivery. Other digital {{products}} are then defined as <b>canned</b> <b>software.</b>|$|E
50|$|According to Regulation 1502, {{the sale}} of noncustom (<b>canned)</b> <b>software</b> to {{customers}} who download the software from a server is generally not subject to sales tax. However, if the customer is provided {{a copy of the}} software on a physical storage medium such as a CD-ROM or a DVD, the entire transaction is generally taxable.|$|E
30|$|At present, most {{researchers}} who construct these scores rely on <b>canned</b> <b>software</b> routines such as PRSice for convenience {{and do not}} directly discuss the statistical and behavioral restrictions embedded.|$|E
40|$|The paper {{gives an}} {{overview}} {{of the state of the}} art of software cost estimation (SCE). The main questions to be answered in the paper are: (1) What are the reasons for overruns of budgets and planned durations? (2) What are the prerequisites for estimating? (3) How <b>can</b> <b>software</b> development effort be estimated? (4) What <b>can</b> <b>software</b> project management expect from SCE models, how accurate are estimations which are made using these kind of models, and what are the pros and cons of cost estimation models...|$|R
40|$|Computer {{hardware}} and associated software {{have been used}} for many years to process accounting information, to analyze test data and to perform engineering analysis. Now computers and software also control everything from automobiles to washing machines and the number and type of applications are growing at an exponential rate. The size of individual program has shown similar growth. Furthermore, software and hardware are used to monitor and/or control potentially dangerous products and safety-critical systems. These uses include everything from airplanes and braking systems to medical devices and nuclear plants. The question is: how can this {{hardware and}} software be made more reliable? Also, how <b>can</b> <b>software</b> quality be improved? What methodology needs to be provided on large and small software products to improve the design and how <b>can</b> <b>software</b> be verified...|$|R
50|$|There {{are also}} some {{programs}} that <b>can</b> hide <b>software</b> from blacklists, such as Anti-blaxx.|$|R
40|$|The {{concept of}} the {{relative}} density seems like a fruitful nonparametric approach to studying distributional differences between groups (Handcock and Morris 1999), yet {{it appears that the}} technique has gone more or less unnoticed in applied social science research. A scarcity of <b>canned</b> <b>software</b> might be {{one of the reasons the}} method is underutilized. Therefore, I present a new Stata command called reldist to plot the relative density, decompose distributional differences into location and shape effects, and compute relative distribution summary measures. The command is illustrated by an application comparing earnings by sex. ...|$|E
30|$|The declining cost of {{genotyping}} {{and technological}} advances include {{the availability of}} <b>canned</b> <b>software</b> packages to do the analyses also likely played {{a large role in}} their growth. See McCarthy et al. (2008) among others for early examples of work in this area. Other work involves using what is termed genomic-relatedness-matrix restricted maximum likelihood (GREML) that for a sample of unrelated individual pairs estimates what portion of the total fraction of variance in a trait is attributable to the average effects of SNPs. That is, does genetic similarity predicts phenotypic similarity? We return to how genetic similarity is measured in the section on gene by environment interactions.|$|E
40|$|Abstract- Matrix Theory {{has long}} been applied to many {{branches}} of engineering. However, numerical difficulties have limited access to students, especially at the elementary level. This limitation has partially been removed {{with the development of}} <b>canned</b> <b>software</b> and modern scientific calculators which operate matrices. However, the approach with matrices ignores this and still follows traditional ways. This work presents an alternative view of matrix applications to electric circuit analysis, linking matrices and equations with circuit solutions, with heavy emphasis on appropriate setting of equations and interpretation of results. As a result, a more effective use is made to obtain applications in areas that usually require more work or symbolic analysis, such as when dealing with symbolic sources, equivalent port representations, two ports, etc...|$|E
40|$|<b>Can</b> <b>software</b> piracy be {{profitable}} for a software editor? We tackle {{this issue in}} a simple model where software is an experience good and where the potential users can choose to adopt or pirate software or to delay their adoption. In that context, we show that a moderate piracy can {{be profitable}} for a software editor to foster users' adoption. ...|$|R
50|$|Commercial software, or seldom payware, is {{computer}} software that is produced for sale or that serves commercial purposes. Commercial <b>software</b> <b>can</b> be proprietary <b>software</b> or {{free and open}} source software.|$|R
5000|$|Variable capture <b>can</b> {{introduce}} <b>software</b> defects. This {{happens in}} one of the following two ways: ...|$|R
40|$|Software {{contributes}} to improvements in organizational efficiency, supports managerial decision making, and aids in gaining or maintaining competitive advantage. The resulting demand for software has attracted development organizations to the lucrative commercial and retail market. Software may be mass marketed <b>canned</b> <b>software</b> sold at retail under a shrink-wrap, {{included as a}} part of turnkey systems which require either minimal or no in-house modifications, or spe-cially developed for systems designed to fulfill user’s particu-lar needs. Tailored systems may be developed by an internal systems development team or may be outsourced, but the trend toward outsourcing is rising (Lacity and Hirschheim, 1993). Developing software for use outside of the development organization may open the floodgates to potential legal liabil-ity. If software is not deemed to function properly, do the user...|$|E
40|$|Classical {{filter design}} {{techniques}} return only one design from an infinite collection of alternative designs, {{or fail to}} design filters when solutions exist. These classical techniques hide a wealth of alternative filter designs that are more robust when implemented in digital hardware and embedded software. In this paper, we present (1) case studies of optimal digital IIR filters that cannot be designed with classical techniques, and (2) the formal, mathematical framework that underlies their solutions. We have automated the advanced filter design techniques in software. 1 Introduction In designing digital IIR filters, one generally relies on <b>canned</b> <b>software</b> routines or mechanical tableoriented procedures. The primary reason for these "black box" approaches is that the approximation theory that underlies filter design includes complex mathematics. Unfortunately, conventional approaches return only one design, thereby hiding a wealth of alternative filter designs that are more robust [...] ...|$|E
40|$|Real estate {{data are}} often {{characterized}} by irregularities, e. g., missing data, censoring or truncation, measurement error, etc. Practitioners often discard missing or censored data cases and ignore measurement error concerns. We argue {{here that we}} can remedy these irregularity problems through simulation based model fitting using the Gibbs sampler. The method is described {{in the context of}} these issues, and illustrated with a sample of residential property sales from Baton Rouge, Louisiana. Focusing primarily on the missing data problem, we show dramatic improvement in inference by retaining the partially observed data cases rather than deleting them. We also detail how the other problems can be handled using the Gibbs sampler. While <b>canned</b> <b>software</b> to implement a Gibbs sampler does not exist, for the problems at hand, development is straightforward with substantial reward anticipated for the effort.. John R. Knight is Assistant Professor at the Eberhardt School of Business, Unive [...] ...|$|E
5000|$|First {{responders}} <b>can</b> use <b>software</b> {{to quickly}} evaluate which response options may best suit the situation ...|$|R
40|$|Translational {{research}} {{requires the}} transfer of knowledge beyond traditional journal publications to a broader audience. Can advanced Cyberinfrastructure support and speed up such knowledge transfer? <b>Can</b> research <b>software</b> be reused for research by others? <b>Can</b> research <b>software</b> be used in classrooms? Who are the stakeholders {{and what are the}} incentive systems in such an infrastructure? Can we understand user and learner behavior and help support personalized learning...|$|R
50|$|As IOP {{relies on}} the message passing {{architecture}} of JAUS, IOP-compliant <b>software</b> <b>can</b> be connected to other robotics middlewares through translating software bridges. Studies have shown, that IOP-compliant <b>software</b> <b>can</b> coexist with ROS-based robotics software.|$|R
30|$|Third, economists need to {{shed light}} on the {{behavioral}} restrictions implicitly imposed by empirical methods used to both elucidate genetic associations and construct polygenic scores. Consider how Todd and Wolpin (2003) influenced researchers in the economics of education by highlighting the behavioral restrictions on an underlying model of human capital development that were implicitly made by researchers when estimating equations that proxied for these education production functions. Analogously, the socioeconomic outcomes being investigated in both candidate gene and GWAS studies are likely determined. As discussed in the section considering genes as instruments, should risk alleles enter these estimating equations as a count assuming a linear effect or as a series of indicator variables? The consequences of using imputed versus actual SNPs also require further evaluation. Further, it is worth stressing that much of the existing analysis in the scientific literature uses <b>canned</b> <b>software</b> that itself imposes additional assumptions on the underlying process generating the outcomes.|$|E
50|$|A corpus manager <b>can</b> be <b>software</b> {{installed}} {{on a personal}} computer {{or it might be}} provided as a web service.|$|R
50|$|Third-party {{developers}} <b>can</b> write <b>software</b> {{using the}} available BlackBerry API classes, although applications that {{make use of}} certain functionality must be digitally signed.|$|R
5000|$|Usage {{tracking}} provides essential business {{insight into}} end-user entitlements, {{as well as}} the consumption of products and features. Advanced data collection and reporting tools help optimize investment in the product roadmap and drive future business strategies. Only by analyzing end-user behaviors <b>can</b> <b>software</b> companies and device vendors make sound pricing, packaging, and marketing decisions that will improve their business processes and enhance the customer experience. Furthermore, making usage data accessible to users helps them stay in compliance with their license agreements ...|$|R
50|$|Developers {{can choose}} {{which of the}} {{alternatives}} to implement, based on factors such as whether they <b>can</b> run <b>software</b> at the identity URL or not.|$|R
40|$|This thesis {{focuses on}} the {{emerging}} field of software art. It is concerned with questions that arise in relation to efforts to think the field of software, and software programming particularly, in aesthetic terms. Centrally, how <b>can</b> <b>software</b> as a technical field of production, {{as a form of}} engineering and as a space of abstract, instrumentally-oriented, system elaboration, possibly correspond to art? What are the dilemmas that the notion of software art confronts? How can its space of opportunity be conceived? These questions are pursued not only at a general theoretical level but in terms of aspects of my own software art practice. The thesis begins by considering the ambivalent character of software, examining how it mediates between dimensions of machine process and human agency and how this potential has been conceived in cultural theoretical terms. It then outlines the specific formal features of software programming and reviews competing perspectives of software practice. This description of the software medium establishes a foundation for a specific consideration of the field of software art. I trace the historical emergence of the genre, examine how it has been theoretically conceived and consider a range of exemplary works. I then specify three key dilemmas that confront software art: the dilemma of position (how <b>can</b> <b>software</b> art conceive its relation to the larger economic and discursive space of the software industry?); the dilemma of visibility (how <b>can</b> <b>software</b> art conceive its efforts to make code visible when software itself determinedly, structurally, hides?); and the dilemma of recursion (how is software to avoid an exclusive and disabling emphasis on self-reflection?). In the remaining portion of the thesis, these dilemmas are considered within the specific context of examining issues and aesthetic strategies within my own work. My overall argument is that software art represents a permeable discursive space that discovers an aesthetic potential less by resisting the spectre of conventional software than by risking an intimate relation to this alien terrain. Rather than a calm appropriation of software by art, it represents an unsettling of art by means of software...|$|R
5000|$|Compliance & customization: <b>Can</b> the <b>software</b> be {{configured}} {{to evaluate}} expenses against company expense policies? Can approval processes be adjusted based on project, department or spend? ...|$|R
5000|$|Vector first offered CANalyzer on {{the market}} in 1992 - the world’s first <b>CAN</b> <b>software</b> tool. CANalyzer has been {{continually}} updated since then, and today it is considered the world’s leading analysis tool for CAN buses. Besides its primary field of application, which is in-vehicle electronic networking in the automotive industry, CANalyzer is also used in many other industries such as rail transportation, heavy-duty vehicles, special-purpose vehicles, avionics, medical technology and many more.New technologies based on IP architectures in the automotive industry [...] are supported by CANalyzer.|$|R
25|$|The various {{file types}} the <b>software</b> <b>can</b> read/write.|$|R
50|$|Most {{statistical}} <b>software</b> <b>can</b> do binary logistic regression.|$|R
50|$|The various {{file types}} the <b>software</b> <b>can</b> read/write.|$|R
40|$|This {{document}} {{describes how}} the <b>software</b> <b>can</b> access and process ACE solar wind data and how the <b>software</b> <b>can</b> make, display, and evaluate prediction. Therefore, the document will enable to maintain the web page of Real-Time Prediction of Geomagnetic Storm running at the Solar-Terrestrial Physics Division, Danish Meteorological Institute...|$|R
40|$|With {{increased}} consolidation and a {{few large}} vendors dominating the market, how <b>can</b> <b>software</b> vendors distinguish themselves {{in order to maintain}} profitability and gain market share? Increasingly customers are becoming more proactive in selecting a vendor and a product, drawing upon various publications, market surveys, mailing lists, and, of course, other users. In particular, though, a company's Web site is the obvious place to begin information gathering. In sum, it may seem that the days of the uninformed customer prepared to be "sold to" are potentially all but gone...|$|R
40|$|Institutions and funders {{are pushing}} forward open access with ever new {{guidelines}} and policies. Since institutional repositories are important maintainers of green open access, they should support easy and fast workflows for researchers and libraries to release publications. Based on the requirements specification of researchers, libraries and publishers, possible supporting software extensions are discussed. How does a typical workflow look like? What {{has to be}} considered by the researchers and by the editors in the library before releasing a green open access publication? Where and how <b>can</b> <b>software</b> support and improve existing workflows...|$|R
40|$|In {{the context}} of Open Science, almost every ?traditional? {{research}} activity and output has been affected and transformed by means of web based technology. New forms of research output have emerged, among them software as an important means and method for data driven science. But how <b>can</b> <b>software</b> be treated as scholarly work, and {{how can it be}} integrated into a digital research infrastructure? The paper depicts software development related to Open Science and points out some future directions for software to become part of a sustainable research infrastructure...|$|R
5000|$|Proprietary {{software}} is not synonymous with commercial software, {{although the two}} terms are sometimes used synonymously in articles about free <b>software.</b> Proprietary <b>software</b> <b>can</b> be distributed at no cost or for a fee, and free <b>software</b> <b>can</b> be distributed at no cost or for a fee. [...] The difference is that whether or not proprietary <b>software</b> <b>can</b> be distributed, and what the fee would be, is at the proprietor's discretion. With free software, anyone who has a copy can decide whether, and how much, to charge for a copy or related services.|$|R
50|$|Computers <b>can,</b> with {{appropriate}} <b>software</b> and modem, emulate a V.18 TTY. Some voice modems, coupled {{with appropriate}} <b>software,</b> <b>can</b> now {{be converted to}} TTY modems by using a software-based decoder for TTY tones. Same {{can be done with}} such software using a computer's sound card, when coupled to the telephone line.|$|R
25|$|E.g.: New {{hardware}} must installed {{before the}} <b>software</b> <b>can</b> be.|$|R
