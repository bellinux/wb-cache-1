3587|136|Public
25|$|For a {{recommender}} system, {{sentiment analysis}} {{has been proven}} to be a valuable technique. A recommender system aims to predict the preference to an item of a target user. Mainstream recommender systems work on explicit data set. For example, <b>collaborative</b> <b>filtering</b> works on the rating matrix, and content-based filtering works on the meta-data of the items.|$|E
25|$|Last.fm {{features}} a personal recommendations page {{that is only}} visible to the user concerned and lists suggested new music and events, all tailored to the user's own preferences. Recommendations are calculated using a <b>collaborative</b> <b>filtering</b> algorithm so users can browse and hear previews of a list of artists not listed on their own profile but which appear on those of others with similar musical tastes.|$|E
25|$|The Genius feature, {{introduced}} in iTunes 8, automatically generates a playlist of {{songs from the}} user's library which {{are similar to the}} selected song. Genius playlists are created by the ratings system and <b>collaborative</b> <b>filtering.</b> An iTunes Store account is required because information about the user's library must first be sent anonymously to Apple's database. Algorithms determine which songs to play based on other users' libraries, and Genius becomes more intelligent given a larger data set. The resulting Genius playlist can contain 25, 50, 75, or 100 songs and can be refreshed for new results or saved. Once Genius becomes active in iTunes, it can be used on current generations of the iPod Classic, iPod Nano, iPod Touch or the iPhone. iTunes 9 added Genius Mixes, where the Genius software finds similar music and automatically puts them into mixes.|$|E
40|$|Abstract — In this paper, {{we study}} <b>collaborative</b> <b>filters</b> that adapt future {{recommendations}} based on feedback from users. We consider discrete time and at {{each time a}} random user seeks a recommendation. The <b>collaborative</b> <b>filter</b> uses all past data available to make a recommenda-tion, the user then provides binary feedback indicating whether he liked the item (rating 1) or not (rating 0), and this feedback {{is used by the}} <b>collaborative</b> <b>filter</b> for future decisions. In this setting, ideally the goal is to maximize the long run time average of the ratings, but practical considerations lead us to a moving horizon approximation. Our main result identifies a <b>collaborative</b> <b>filter</b> that optimizes a moving horizon cost in the limit as the noise in the ratings vanishes. I...|$|R
40|$|Abstract. With the {{development}} of network literature website, the number of network literature increase dramatically. Readers will hardly know which literature to select from the great mass of network literature that steadily accumulates. Some network literature website use <b>collaborative</b> <b>filter</b> method to recommend potential interested literature to user. However, the <b>collaborative</b> <b>filter</b> algorithm has many defects, such as cold start and sparsity. To solve these problems, we propose a new method which based on literature tag. This method is helpful to overcome <b>collaborative</b> <b>filter</b> algorithm’s shortcoming...|$|R
50|$|Seeks aims to {{give the}} control of the ranking of results to the users, as search {{algorithms}} are often less accurate than humans. It relies on a distributed <b>collaborative</b> <b>filter</b> to let users personalize and share their preferred results on a search. Also, because of the openness of the source code, users can verify and modify the <b>collaborative</b> <b>filter</b> to fit its needs.|$|R
2500|$|... {{realized}} the commercial potential of <b>collaborative</b> <b>filtering,</b> and ...|$|E
2500|$|... <b>collaborative</b> <b>filtering,</b> {{which became}} {{known in the}} {{community}} by the ...|$|E
2500|$|... {{about his}} vision for an {{information}} economy, they began working on a <b>collaborative</b> <b>filtering</b> ...|$|E
40|$|Many {{tasks in}} music {{information}} retrieval, such as recommendation, and playlist generation for online radio, fall naturally into the query-by-example setting, wherein a user queries {{the system by}} providing a song, and the system responds {{with a list of}} relevant or similar song recommendations. Such applications ultimately depend on the notion of similarity between items to produce high-quality results. Current state-of-the-art systems employ <b>collaborative</b> <b>filter</b> methods to represent musical items, effectively comparing items in terms of their constituent users. While <b>collaborative</b> <b>filter</b> techniques perform well when historical data is available for each item, their reliance on historical data impedes performance on novel or unpopular items. To combat this problem, practitioners rely on content-based similarity, which naturally extends to novel items, but is typically out-performed by <b>collaborative</b> <b>filter</b> methods. In this article, we propose a method for optimizing contentbased similarity by learning from a sample of <b>collaborative</b> <b>filter</b> data. The optimized content-based similarity metric can then be applied to answer queries on novel and unpopular items, while still maintaining high recommendation accuracy. The proposed system yields accurate and efficient representations of audio content, and experimental results show significant improvements in accuracy over competing content-based recommendation techniques...|$|R
50|$|Patrick Tufts is a {{computer}} scientist and inventor. He created Alexa Internet's <b>collaborative</b> <b>filter</b> for creating related web site recommendations and later, one of Amazon.com's most successful product recommendation systems.|$|R
40|$|This paper {{presents}} the classification {{process in a}} recommender system used for textual documents taken especially from web. The system uses in the classification process a combination of content filters, event <b>filters</b> and <b>collaborative</b> <b>filters</b> and it uses implicit and explicit feedback for evaluating documents...|$|R
2500|$|The current Last.fm website was {{developed}} from two separate sources: Last.fm and Audioscrobbler, which were merged in 2005. Audioscrobbler {{began as a}} computer science project of Richard Jones when he attended the University of Southampton School of Electronics and Computer Science in the United Kingdom. [...] Jones developed the first plugins, and then opened an API to the community, after which many music players on different operating system platforms were supported. Audioscrobbler was limited to keeping track of which songs its users played on a registered computer, which allowed for charting and <b>collaborative</b> <b>filtering.</b>|$|E
2500|$|... "Neighborhoods" [...] is {{a travel}} guide that {{provides}} in-depth information for selected neighborhoods in 23 major cities through photos, essays, maps, tags from locals, and assessments of various criteria {{that would be}} of interest to guests such as public transportation, dining, peace & quiet, nightlife, tourist attractions, and shopping, thereby helping travelers choose the ideal neighborhood to stay in via <b>collaborative</b> <b>filtering.</b> The Airbnb product team hand-mapped hundreds of neighborhoods within these 23 cities and had local editors curate content for each neighborhood. Airbnb also added 70 street photographers who generated 40,000 photographs for the project.|$|E
2500|$|... {{system for}} Usenet news. [...] The system {{collected}} ratings from Usenet readers and used those ratings {{to predict how}} much other readers would like an article before they read it. [...] This recommendation engine {{was one of the}} first automated <b>collaborative</b> <b>filtering</b> systems in which algorithms were used to automatically form predictions based on historical patterns of ratings. [...] The overall system was called the [...] "GroupLens" [...] recommender, and the servers that collected the ratings and performed the computation were called the [...] "Better Bit Bureau". [...] This name was later dropped after a request from the Better Business Bureau. [...] "GroupLens" [...] is now used as a name both for this recommender system, and for the research lab at the University of Minnesota.|$|E
50|$|Not all {{recommender}} {{systems are}} equal, however, {{when it comes}} to expanding the long tail. Some recommenders (i.e. certain <b>collaborative</b> <b>filters)</b> can exhibit a bias toward popular products, creating positive feedback, and actually reduce the long tail. A Wharton study details this phenomenon along with several ideas that may promote the long tail and greater diversity.|$|R
40|$|Netflix, {{an online}} video rental company, {{recently}} announced a contest to spur interest in building better recommendation systems. Users of Netflix {{are able to}} rank movies on an integer scale from 1 to 5. A rating of 1 indicates that the user “hated it”, while 5 indicates they “loved it”. The objective of a recommendation system, or <b>collaborative</b> <b>filter,</b> is t...|$|R
40|$|This paper {{presents}} a recommender system for web documents (given as bookmarks). The system uses for classification {{a combination of}} content, event and <b>collaborative</b> <b>filters</b> and for recommendation a modified Pearson-r algorithm. The algorithm for recommendation is using not only the correlation between users but also the similarity between classes. Some experimental results that support this approach are also presented...|$|R
50|$|Item-based <b>collaborative</b> <b>filtering</b> is {{just one}} form of <b>collaborative</b> <b>filtering.</b> Other {{alternatives}} include user-based <b>collaborative</b> <b>filtering</b> where relationships between users are of interest, instead. However, item-based <b>collaborative</b> <b>filtering</b> is especially scalable {{with respect to the}} number of users.|$|E
50|$|In general, item-based <b>collaborative</b> <b>filtering</b> {{is known}} to be more robust than user-based <b>collaborative</b> <b>filtering.</b> However, item-based <b>collaborative</b> <b>filtering</b> are still not {{completely}} immune to bandwagon and segment attacks.|$|E
50|$|Robust <b>collaborative</b> <b>filtering,</b> or attack-resistant <b>collaborative</b> <b>filtering,</b> {{refers to}} {{algorithms}} or techniques that {{aim to make}} <b>collaborative</b> <b>filtering</b> more robust against efforts of manipulation, while hopefully maintaining recommendation quality. In general, these efforts of manipulation usually refer to shilling attacks, also called profile injection attacks. <b>Collaborative</b> <b>filtering</b> predicts a user's rating to items by finding similar users and looking at their ratings, {{and because it is}} possible to create nearly indefinite copies of user profiles in an online system, <b>collaborative</b> <b>filtering</b> becomes vulnerable when multiple copies of fake profiles are introduced to the system. There are several different approaches suggested to improve robustness of both model-based and memory-based <b>collaborative</b> <b>filtering.</b> However, robust <b>collaborative</b> <b>filtering</b> techniques are still an active research field, and major applications of them are yet to come.|$|E
40|$|This paper {{outlines}} {{the development of}} an information system using <b>collaborative</b> <b>filters.</b> There are a number of resources related to metrology on the World Wide Web such as books, journals, articles or information published by experts in industry and academia. It is a challenge for the user is to find best resources in a given context that fits his or her interests. Currently, the user...|$|R
3000|$|... where 3 D S_i^hard is the {{constructed}} 3 D array contains similar {{patches and}} T_match^hard is the maximum distance between two similar patches. The maximum grouped patches size {{are restricted to}} N_ 2 ^hard. The next stage is to apply the <b>collaborative</b> <b>filter</b> by (1) performing a 2 D linear transform then a 1 D linear transform, (2) shrinkage, and (3) inverting the 1 D transform and the 2 D linear transform.|$|R
40|$|The {{state of}} the art sees {{content-based}} <b>filters</b> tending towards <b>collaborative</b> <b>filters,</b> whereby email is filtered at the MTA with users feeding information back about false positives and negatives. While this improves the ability of the filter to track concept drift in spam over time, such approaches make assumptions implicit in centralised spam filtering, such as that all users consider the same email to be spam. In this paper, we detail and analyse these assumptions and describe how they affect spam filtering. We present an architecture for personalised, <b>collaborative</b> spam <b>filtering</b> and describe the design and implementation of proof-of-concept, peer-to-peer, signature-based system based on the architecture. The evaluation is based on real-world users employing the system as their spam-filtering tool. Preliminary analysis of the results indicates that the implementation is accurate and efficient...|$|R
5000|$|Earlier <b>collaborative</b> <b>filtering</b> systems {{based on}} rating {{similarity}} between users (known as user-user <b>collaborative</b> <b>filtering)</b> had several problems: ...|$|E
50|$|<b>Collaborative</b> <b>filtering</b> (CF) is a {{technique}} used by recommender systems. <b>Collaborative</b> <b>filtering</b> has two senses, a narrow one and a more general one.|$|E
50|$|<b>Collaborative</b> <b>filtering</b> {{methods are}} {{classified}} as memory-based and model based <b>collaborative</b> <b>filtering.</b> A well-known example of memory-based approaches is user-based algorithm and that of model-based approaches is Kernel-Mapping Recommender.|$|E
40|$|Spatial {{processes}} are typically used to analyse and predict geographic data. This paper adapts such models to predicting a user’s interests (i. e., implicit item ratings) within a recommender {{system in the}} museum domain. We present the theoretical framework for a model based on Gaussian spatial processes, and discuss efficient algorithms for parameter estimation. Our model was evaluated with a real-world dataset collected by tracking visitors in a museum, attaining a higher predictive accuracy than state-of-the-art <b>collaborative</b> <b>filters.</b> ...|$|R
40|$|Intelligent {{recommendation}} {{systems can}} be based on 2 basic principles: <b>collaborative</b> <b>filters</b> and individual-based agents. In this work we examine the learning function that results from these 2 general types of learning-smart agents. There has been significant work on the predictive properties of each type, but no work has examined the patterns in their learning from feedback over repeated trials. Using simulations, we create clusters of “consumers ” with heterogeneous utility functions and errorful reservation utility thresholds. The consumers go shopping {{with one of the}} designated smart agents, receive recommendations from the agents, and purchase products they like and reject ones they do not. Based on the purchase–no purchase behavior of the consumers, agents learn about the consumers and potentially improve the quality of their recommendations. We characterize learning curves by modified exponential functions with an intercept for percentage of recommendations accepted at Trial 0, an asymptotic rate of recommendation acceptance, and a rate at which learning moves from intercept to asymptote. We compare the learning of a baseline random recommendation agent, an individual-based logistic-regression agent, and two types of <b>collaborative</b> <b>filters</b> that rely on K-mean clustering (popular in most commercial applications) and nearest-neighbor algorithms. Compared to th...|$|R
40|$|In this work, {{we present}} an {{approach}} for mining user preferences and recommendation based on reviews. There have been various studies worked on recommendation problem. However, {{most of the}} studies beyond one aspect user generated- content such as user ratings, user feedback and so on to state user preferences. There is a prob- lem in one aspect mining is lacking for stating user preferences. As a demonstration, in <b>collaborative</b> <b>filter</b> recommendation, we try to figure out the preference trend of crowded users, then use that trend to predict current user preference. Therefore, there is a gap between real user preferences and the trend of the crowded people. Additionally, user preferences can be addressed from mining user reviews since user often comment about various aspects of products. To solve this problem, we mainly focus on mining product aspects and user aspects inside user reviews to directly state user preferences. We also take into account Social Network Analysis for cold-start item problem. With cold-start user problem, <b>collaborative</b> <b>filter</b> algorithm is employed in our work. The framework is general enough to be applied to different recommendation domains. Theoretically, our method would achieve a significant enhancement. Comment: The 2 nd Workshop on Future Researches of Computer Science and Engineering, Kyungpook National University, pp. 21 - 24, 201...|$|R
50|$|Item-item <b>collaborative</b> <b>filtering,</b> or item-based, or item-to-item, {{is a form}} of <b>collaborative</b> <b>filtering</b> for {{recommender}} systems {{based on}} the similarity between items calculated using people's ratings of those items.|$|E
5000|$|One of {{the most}} famous {{examples}} of <b>collaborative</b> <b>filtering</b> is item-to-item <b>collaborative</b> <b>filtering</b> (people who buy x also buy y), an algorithm popularized by Amazon.com's recommender system. Other examples include: ...|$|E
50|$|Item-item <b>collaborative</b> <b>filtering</b> {{had less}} error than user-user <b>collaborative</b> <b>filtering.</b> In addition, its less-dynamic model was {{computed}} less often {{and stored in}} a smaller matrix, so item-item system performance was better than user-user systems.|$|E
30|$|The rating {{prediction}} module {{addresses the}} prediction of ratings regarding hotels not yet rated by the active user. This was implemented using a user-based <b>collaborative</b> recommendation <b>filter.</b>|$|R
30|$|The online rating {{prediction}} module processes {{the stream}} of ratings to predict unknown hotel ratings and, thus, provide online recommendations. We implemented a user-based <b>collaborative</b> <b>filter</b> employing the k-NN algorithm, using the Pearson correlation to determine neighbours. Additionally, we computed the trustworthiness between the current user and each neighbour analysing both {{the number of items}} actually recommended to the user based on the neighbour and the number of times that user was chosen as a neighbour of the current user. The final predictions were obtained using the k-NN algorithm together with the trustworthiness among users.|$|R
40|$|In {{this article}} we provide a {{formulation}} of empirical bayes described by Atchade (2011) to tune the hyperparameters of priors used in bayesian set up of <b>collaborative</b> <b>filter.</b> We implement the same in MovieLens small dataset. We see {{that it can be}} used to get a good initial choice for the parameters. It can also be used to guess an initial choice for hyper-parameters in grid search procedure even for the datasets where MCMC oscillates around the true value or takes long time to converge. Comment: 14 pages, 3 figures, 4 subfigure...|$|R
