1178|686|Public
2500|$|... is a Fire <b>Code</b> <b>generator.</b> We can {{calculate}} the block-length {{of the code}} by evaluating the least common multiple of [...] and [...] In other words, [...] Thus, the Fire Code above is a cyclic code capable of correcting any burst of length [...] or less.|$|E
2500|$|The {{implementation}} of exception handling in programming languages typically involves {{a fair amount}} of support from both a <b>code</b> <b>generator</b> and the runtime system accompanying a compiler. (It was the addition of exception handling to C++ that ended the useful lifetime of the original C++ compiler, Cfront.) [...] Two schemes are most common. The first, dynamic registration, generates code that continually updates structures about the program state in terms of exception handling. [...] Typically, this adds a new element to the stack frame layout that knows what handlers are available for the function or method associated with that frame; if an exception is thrown, a pointer in the layout directs the runtime to the appropriate handler code. This approach is compact in terms of space, but adds execution overhead on frame entry and exit. It was commonly used in many Ada implementations, for example, where complex generation and runtime support was already needed for many other language features. Dynamic registration, being fairly straightforward to define, is amenable to proof of correctness.|$|E
50|$|The {{original}} version of Open64 that {{was released in}} 2002 was missing its very advanced software pipelining <b>code</b> <b>generator,</b> and had only a rudimentary <b>code</b> <b>generator</b> for Itanium. The entire original MIPSPro compiler, with this <b>code</b> <b>generator,</b> is available under a commercial license as the Blackbird compiler from Reservoir Labs. The Showdown Paper documents the <b>code</b> <b>generator</b> that {{was not included in}} Open64. The very advanced compiler from Tilera, for its 64-core TILE64 chip, is based on Blackbird.|$|E
5000|$|<b>Code</b> <b>Generators</b> - {{automate}} {{the creation}} of repeatable blocks of code. WebORB supports <b>code</b> <b>generators</b> for ActionScript, Cairngorm, PureMVC, Mate, Swiz, JavaScript, AJAX, Silverlight and custom <b>code</b> <b>generators.</b>|$|R
50|$|For example, the {{original}} DASL <b>code</b> <b>generators</b> produced traditional HTML screens. Later, DASL <b>code</b> <b>generators</b> were written to use frameworks such as Apache Struts, and {{technologies such as}} JavaScript in the browser, to produce a more interactive experience. Today, new DASL generators being written that produce Rich Internet applications. Existing DASL applications can thus be converted to rich internet applications by recompiling them with the latest <b>code</b> <b>generators.</b>|$|R
50|$|Rational {{provided}} <b>code</b> <b>generators</b> and the cross-debuggers for then-popular {{instruction set}} architectures {{such as the}} VAX, Motorola 68000, and x86; much of this was accomplished through a partnership with Tartan Labs, founded by Bill Wulf to commercialize his work on optimizing <b>code</b> <b>generators</b> semi-automatically produced from architecture descriptions (PQCC).|$|R
5000|$|Execute the adapted source {{using the}} {{interpreter}} with the <b>code</b> <b>generator</b> source as input. This will generate the machine code for the <b>code</b> <b>generator.</b>|$|E
5000|$|... Â· Execute the {{adjusted}} source utilizing the translator with the <b>code</b> <b>generator</b> source as data. This will produce the machine code for the <b>code</b> <b>generator.</b>|$|E
50|$|Most modern compilers have a lexer and parser {{that produce}} an {{intermediate}} {{representation of the}} program. The intermediate representation is a simple sequence of operations {{which can be used}} by an optimizer and a <b>code</b> <b>generator</b> which produces instructions in the machine language of the target processor. Because the <b>code</b> <b>generator</b> uses an intermediate representation, the same <b>code</b> <b>generator</b> can be used for many different high level languages.|$|E
5000|$|The {{language}} and development environment are a practical {{realization of the}} model-driven architecture (MDA) approach. The programmer uses DASL to produce the platform-independent model or PIM, and the language <b>code</b> <b>generators</b> automatically produce and deploy the platform-specific model or PSM. New PSMs may be introduced by writing new <b>code</b> <b>generators.</b>|$|R
5000|$|Application <b>code</b> <b>generators</b> for {{persistent}} layer, programming interface, web services: ...|$|R
50|$|Optimizing <b>code</b> <b>generators</b> and cross-debuggers {{provided}} {{support for}} several popular application architectures.|$|R
5000|$|Active Agenda {{utilizes}} {{a custom}} <b>code</b> <b>generator</b> called [...] "spec2app". The [...] "spec2app" [...] processor converts specifications written in XML into integrated Active Agenda modules utilizing PHP and MySQL. The <b>code</b> <b>generator</b> enables rapid development of extensions {{to the core}} application and simplifies customization, support, and maintenance.|$|E
5000|$|TEC-IT Generic QR <b>code</b> <b>generator</b> also {{supporting}} the EPC guidelines ...|$|E
5000|$|VAPS QCG: A DO-178 qualifiable <b>code</b> <b>generator</b> for VAPS {{applications}} ...|$|E
40|$|<b>Code</b> <b>generators</b> are {{increasingly}} {{used in an}} industrial context to translate graphical models into executable code. Since the code is often deployed in safety-related environments, {{the quality of the}} <b>code</b> <b>generators</b> is of paramount importance. In this paper, we will present and discuss state-of-the-art techniques for safeguarding automatic code generation applied in model-based development. Categories and Subject Descriptor...|$|R
50|$|Jetpag {{incorporates}} several modules: {{the front}} end, the analyzers and the <b>code</b> <b>generators.</b>|$|R
40|$|The {{software}} and hardware quality of safety-critical embedded systems in avionics and the automotive sector is currently ensured by means of extensive assurance procedures (e. g. certification). The way embedded software is developed has changed, such that executable models are used from the early development stages up to implementation in order to design and verify the software behaviour desired (model-based development). New approaches allow the automatic generation of compact controller code directly from the software model via so-called <b>code</b> <b>generators.</b> For an application area, as {{can be found in}} the automotive industry for example, it would be desirable to integrate <b>code</b> <b>generators</b> into the model-based development process seamlessly. However, most <b>code</b> <b>generators</b> are not yet certified and therefore the code generated cannot provide the level of confidence needed for safety-related software. This paper proposes a testing approach for code generation tools and contributes to answering the question of how tools such as <b>code</b> <b>generators</b> can be integrated into the model-based development process by means of tool certification...|$|R
50|$|A <b>code</b> <b>generator</b> generates machine {{language}} {{instructions for the}} target processor.|$|E
5000|$|... #Caption: <b>Code</b> <b>generator</b> from German WW II IFF-Radio FuG 25a Erstling ...|$|E
5000|$|... proto2 {{provides}} a <b>code</b> <b>generator</b> for C++, Java, C#, and Python.|$|E
40|$|The overall {{productivity}} {{derived from}} a system depends on matching system specifications to user needs. This case illustrates the selection of microcomputer based software for Program <b>Code</b> <b>Generators</b> (PG). A recommendation report ranks the PG in descending order of their correlations to user needs. Implications for users, consultants and vendors are discussed and illustrated. <b>code</b> <b>generators</b> software matching program developers' needs diagnostic audit trails programming languages...|$|R
30|$|Implementation of the {{proposed}} solution as an IoT management platform, design tools, and <b>code</b> <b>generators</b> (responding to RQ 4).|$|R
50|$|There are no {{performance}} overheads as the MAL {{layer is}} conceptual {{and can be}} optimized out using <b>code</b> <b>generators.</b>|$|R
50|$|Finally, C <b>code</b> <b>generator</b> uses LAP code to {{translate}} instructions in C.|$|E
5000|$|SensioGeneratorBundle is an {{open source}} <b>code</b> <b>generator</b> for Symfony based PHP applications.|$|E
5000|$|... 1999: TargetLink, {{the first}} {{production}} <b>code</b> <b>generator</b> for ECUs based on MATLAB/Simulink ...|$|E
30|$|These {{last two}} {{experiments}} only concerned the <b>code</b> <b>generators</b> case study. BETA 2.0 was however used with some {{operations of the}} Lua API model to informally corroborate some expected results. Also, some runs of BETA with preamble calculation and test data concretization were successfully executed for some operations of the <b>code</b> <b>generators</b> case study. These individual results cannot be generalized but are indicators of the support provided by BETA to the test engineer.|$|R
5000|$|ConEuc was {{implemented}} {{by a small}} (50k bytes), fast, portable compiler that was self-compiling and had replaceable <b>code</b> <b>generators.</b> High quality <b>code</b> <b>generators</b> for several computers, including the PDP-11, VAX-11, Motorola 68000 and Motorola 6809 were developed that produced code comparable to the best C compilers. Concurrent Euclid programs that used concurrency could be run on a bare machine (supported by a small assembly language kernel), or in simulated mode as an ordinary process running under an operating system.|$|R
50|$|The {{earliest}} known use of {{this term}} is by R.G.G. Cattell in his PhD thesis on automatic derivation of <b>code</b> <b>generators</b> for compilers.|$|R
5000|$|... video editing time <b>code</b> <b>generator</b> for EECO, Inc. (Electronic Engineering Company of California) ...|$|E
5000|$|... #Caption: US&S {{electro-mechanical}} pulse <b>code</b> <b>generator</b> unit generating 180ppm for a {{cab signal}} system ...|$|E
5000|$|Relational DataScript (RDS tool): <b>Code</b> <b>generator</b> for {{database}} access classes in Java and C++ ...|$|E
5000|$|The Maple {{computer}} algebra system offers <b>code</b> <b>generators</b> optimizers with Fortran, MATLAB, C and Java. Wolfram Language (Mathematica), and MuPAD have comparable interfaces.|$|R
5000|$|Several precompilers or <b>code</b> <b>generators</b> exist, {{to produce}} source code in Plex-C from higher level {{languages}} or graphical models. These can generate Plex-C from: ...|$|R
50|$|Research and {{development}} on the DASL language continued at RD3 Software between 2006 and 2010. The RD3 language enhancements and <b>code</b> <b>generators</b> for DASL have made the language extensible and have broadened {{the scope of the}} language from dynamic HTTP-style web applications to rich internet applications. In addition to producing HTML front ends, DASL <b>code</b> <b>generators</b> were created to produce Adobe Flex (Flash) front ends. With modest resources, HTML5 could easily be generated, as well as iPhone- and Android-specific implementations.|$|R
