8|151|Public
5000|$|... {{will first}} remove baz/, then bar/ and finally foo/ thus {{removing}} the entire directory tree {{specified in the}} <b>command</b> <b>argument.</b>|$|E
5000|$|The [...] {{function}} {{is used to}} perform various operations on a file descriptor, depending on the <b>command</b> <b>argument</b> passed to it. There are commands to get and set attributes associated with a file descriptor, including [...] and [...]|$|E
50|$|<b>Command</b> <b>argument</b> {{completion}} is {{the completion}} of a specific command's arguments. There are two types of arguments, named and positional: Named arguments, often called options, are identified by their name or letter preceding a value, whereas positional arguments consist only of the value. Some shells allow completion of argument names, but few support completing values.|$|E
50|$|Command Arguments- The tool accepts user’s {{settings}} via <b>command</b> <b>arguments.</b> UCC is a command-line {{application and}} it is compiled under the application console mode.|$|R
50|$|Each EPL2 line {{starts with}} one or more letters (indicating the command), and may be {{followed}} by one or more comma-separated <b>arguments.</b> <b>Commands</b> and <b>arguments</b> are case-sensitive.|$|R
5000|$|In many {{programming}} languages, the [...] {{function is}} where a program starts its execution. It {{is responsible for the}} high-level organization of the program's functionality, and typically has access to the <b>command</b> <b>arguments</b> given to the program when it was executed.|$|R
40|$|We {{introduce}} a resource adaptive agent mechanism which supports the user in interactive theorem proving. The mechanism uses a two layered architecture of agent societies to suggest appropriate commands together with possible <b>command</b> <b>argument</b> instantiations. Experiments {{with this approach}} show that its effectiveness can be further improved by introducing a resource concept. In this paper we provide an abstract view on the overall mechanism, motivate the necessity of an appropriate resource concept and discuss its realization within the agent architecture. Comment: 13 page...|$|E
40|$|Abstract. We {{introduce}} a resource adaptive agent mechanism which supports the user of an interactive theorem proving system. The mechanism, {{an extension of}} [5], uses a two layered architecture of agent societies to suggest applicable commands together with appropriate <b>command</b> <b>argument</b> instantiations. Experiments with this approach show that its e ectiveness can be further improved by introducing a resource concept. In this paper we provide an abstract view on the overall mechanism, motivate the necessity of an appropriate resource concept and discuss its realization within the agent architecture. ...|$|E
40|$|Intended AudienceThis {{reference}} manual is for intermediate and advanced users who update the RIPE Database. If you {{are new to}} the database, you might find the "RIPE Database User Manual: Getting Started " [5] {{to be a more}} helpful place to start. Conventions Used in This DocumentWe use for a placeholder or to indicate syntax. We use [option] to indicate an optional text or <b>command</b> <b>argument.</b> In object templates, we use square brackets " [] " to indicate an attribute type. "RIPE Database " is used with different meanings depending on the context. It may mean the interface software, the logical database or the information in the database. Where there may be doubt, this manual will make clear what is being discussed...|$|E
5000|$|In particular, the {{function}} [...] allow parsing the <b>command</b> line <b>arguments,</b> reading {{resources that are}} then added to a local resource database. This way, the resources can be read from the server and used as defaults that are overridden by <b>command</b> line <b>arguments.</b>|$|R
25|$|GCC's {{external}} interface follows Unix conventions. Users invoke a language-specific driver program (gcc for C, g++ for C++, etc.), which interprets <b>command</b> <b>arguments,</b> {{calls the}} actual compiler, runs the assembler on the output, and then optionally runs the linker {{to produce a}} complete executable binary.|$|R
5000|$|This example program prints its <b>command</b> line <b>arguments.</b> The [...] {{function}} is the entry {{point of a}} D program, and [...] is an array of strings representing the <b>command</b> line <b>arguments.</b> A [...] in D is an array of characters, represented by [...] in D1, or [...] in D2.|$|R
30|$|Additionally, {{having the}} data {{separated}} from the assets and behaviours also makes it easier and faster to extend the model. For example, if a different network is to be modelled, only the asset classes {{will need to be}} informed by different data. A new data reader might be implemented if the data format is different; the rest of the code describing the asset and behaviour properties will remain the same. This new data provider will then be called with its associated file at simulation setup, the rest of the <b>command</b> <b>argument</b> remaining the same. This simplifies handling complex options as these are only set in the command line and {{do not need to be}} defined in a central class within the code.|$|E
40|$|We {{introduce}} a resource adaptive agent mechanism which supports the user of an interactive theorem proving system. The mechanism, {{an extension of}} [5], uses a two layered architecture of agent societies to suggest applicable commands together with appropriate <b>command</b> <b>argument</b> instantiations. Experiments with this approach show that its effectiveness can be further improved by introducing a resource concept. In this paper we provide an abstract view on the overall mechanism, motivate the necessity of an appropriate resource concept and discuss its realization within the agent architecture. 1 Introduction Interactive theorem provers {{have been developed to}} overcome the shortcomings of purely automatic systems and are typically applied in demanding domains where fully automated techniques usually fail. Interaction is needed, for example, to speculate lemmata or to guide and control the reasoning, for instance, by providing the crucial steps in a complicated proof attempt. Typic [...] ...|$|E
5000|$|... #Caption: An MS DOS command line, {{illustrating}} parsing into <b>command</b> and <b>arguments</b> ...|$|R
5000|$|When {{supplied}} with a user-defined <b>command</b> line <b>argument,</b> would print a second program in language Y.|$|R
50|$|It is {{also the}} name of a Unix program for parsing <b>command</b> line <b>arguments</b> in shell scripts.|$|R
5000|$|Enhanced {{integration}} with the host operating system: access to <b>command</b> line <b>arguments,</b> environment variables, and processor error messages ...|$|R
50|$|The Unix shell command {{program called}} getopt {{can be used}} for parsing <b>command</b> line <b>arguments</b> in shell scripts.|$|R
5000|$|<b>Command</b> line <b>arguments</b> are {{not given}} to they must be fetched using another IO action, such as [...]|$|R
50|$|Completable {{elements}} {{may include}} <b>commands,</b> <b>arguments,</b> file names and other entities, {{depending on the}} specific interpreter and its configuration. Command-line completion generally only works in interactive mode. That is, it cannot be invoked to complete partially typed commands in scripts or batch files, even if the completion is unambiguous. The name tab completion {{comes from the fact}} that command-line completion is often invoked by pressing the tab key.|$|R
5000|$|... ngrep has various options or <b>command</b> line <b>arguments.</b> The ngrep man page in UNIX-like {{operating}} systems show {{a list of}} available options.|$|R
30|$|The {{conditional}} {{checks for}} arguments and, when present, replaces the input channel with {{one for the}} named files. The call to Files returns a channel streaming file data for <b>command</b> <b>arguments</b> (by calling FindGet for each argument); the call to SetIn replaces the named input channel with a new one. When arguments are given, the standard input channel gets replaced and streams files for the arguments, without having to write separate functions or adaptors to cover both cases.|$|R
5000|$|... "A multiquine {{is a set}} of r {{different}} programs (in r {{different languages}} — without this condition we could take them all equal to a single quine), each of which is able to print any of the r programs (including itself) according to the <b>command</b> line <b>argument</b> it is passed. (Note that cheating is not allowed: the <b>command</b> line <b>arguments</b> must not be too long — passing the full text of a program is considered cheating)." ...|$|R
5000|$|Given {{the second}} program in {{language}} Y, and supplied with a user-defined <b>command</b> line <b>argument,</b> would produce the original program in language X.|$|R
50|$|Unix <b>command</b> names, <b>arguments</b> {{and options}} are case-sensitive (except {{in a few}} examples, mainly where popular {{commands}} from other operating systems have been ported to Unix).|$|R
5000|$|... '''''' is a {{built-in}} Unix shell command for parsing command-line arguments. It {{is designed to}} process <b>command</b> line <b>arguments</b> that follow the POSIX Utility Syntax Guidelines.|$|R
5000|$|Upon its completion, [...] prints {{a report}} to [...] Running [...] gives a list of <b>command</b> line <b>arguments,</b> for {{enabling}} or disabling additional features such as: ...|$|R
5000|$|The demo can {{be started}} with a single {{character}} <b>command</b> line <b>argument</b> [...] "2" [...] through [...] "5" [...] to start {{from any of the}} later four parts.|$|R
40|$|This {{paper is}} an {{introduction}} to programming on the UNIX† system. The emphasis is on how to write programs that interface to the operating system, either directly or through the standard I/O library. The topics discussed include • handling <b>command</b> <b>arguments</b> • rudimentary I/O; the standard input and output • the standard I/O library; file system access • low-level I/O: open, read, write, close, seek • processes: exec, fork, pipes • signals — interrupts, etc. There is also an appendix which describes the standard I/O library in detail...|$|R
50|$|The Air Force's, {{specifically}} the Strategic Air <b>Command's,</b> <b>argument</b> {{that it could}} provide relatively inexpensive (from a postwar budgetary perspective) national security via deterrence of a potential adversary, e.g., the Soviet Union, solely with nuclear weapons delivered by heavy bomber aircraft such as the B-36 Peacemaker was particularly persuasive. The notion of any conflict involving the United States below the nuclear threshold had not yet entered strategic thinking or the lexicon, while the Army and the Air Force basically saw threats to their postwar budget share from the Marine Corps and Navy, respectively.|$|R
50|$|When {{the command}} is used without specifying the new user id as a <b>command</b> line <b>argument,</b> it {{defaults}} {{to using the}} superuser account (user id 0) of the system.|$|R
50|$|A biquine {{could then}} {{be seen as a}} set of two programs, both of which are able to print either of the two, {{depending}} on the <b>command</b> line <b>argument</b> supplied.|$|R
50|$|Emacs {{provides}} a {{command line interface}} {{in the form of}} its minibuffer. <b>Commands</b> and <b>arguments</b> can be entered using Emacs standard text editing support, and output is displayed in another buffer.|$|R
50|$|All {{configuration}} of surf is performed by editing its configuration header file or its source code, and then (re)compiling it. Some settings {{can be changed}} without recompiling, via <b>command</b> line <b>arguments</b> or hotkeys.|$|R
5000|$|The PSP is {{most often}} used to get the <b>command</b> line <b>{{arguments}}</b> of a DOS program; for example, the command [...] "FOO.EXE /A /F" [...] executes FOO.EXE with the arguments '/A' and '/F'.|$|R
