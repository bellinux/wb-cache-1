10000|10000|Public
5|$|In {{order to}} {{constrain}} a column to reject Nulls, the NOT NULL <b>constraint</b> can be applied, {{as shown in}} the example below. The NOT NULL <b>constraint</b> is semantically equivalent to a check <b>constraint</b> with an IS NOT NULL predicate.|$|E
5|$|Many {{algorithmic}} {{methods for}} finding graph homomorphisms, like backtracking, <b>constraint</b> propagation and local search, {{apply to all}} CSPs.|$|E
5|$|The same {{statements}} {{hold more}} generally for <b>constraint</b> satisfaction problems (or for relational structures, in other words). The only assumption needed is that constraints can involve only a bounded {{number of variables}} (all relations are of some bounded arity, 2 {{in the case of}} graphs). The relevant parameter is then the treewidth of the primal <b>constraint</b> graph.|$|E
50|$|Primary <b>constraints,</b> {{secondary}} <b>constraints,</b> tertiary <b>constraints,</b> quaternary <b>constraints.</b>|$|R
30|$|Electric {{power system}} <b>constraints.</b> They {{can be derived}} from the <b>constraints</b> in typical {{electric}} power system optimization models, including voltage <b>constraints,</b> current <b>constraints,</b> electric power balance <b>constraints,</b> maximum installed capacity <b>constraints</b> and active power <b>constraints</b> of DGs [31, 32].|$|R
30|$|The <b>constraints</b> can be {{classified}} into deployment <b>constraints,</b> flow conservation <b>constraints,</b> and interference <b>constraints.</b>|$|R
5|$|For {{directed}} graphs, {{the situation}} is more complicated and in fact equivalent to the much more general question of characterizing the complexity of <b>constraint</b> satisfaction problems.|$|E
5|$|For graphs G and H, the {{question}} of whether G has a homomorphism to H corresponds to a CSP instance with only one kind of <b>constraint,</b> as follows. The variables are the vertices of G and the domain for each variable is the vertex set of H. An evaluation is a function that assigns to each variable an element of the domain, so a function f from V(G) to V(H). Each edge or arc (u,v) of G then corresponds to the <b>constraint</b> ((u,v), E(H)). This is a <b>constraint</b> expressing that the evaluation should map the arc (u,v) to a pair (f(u),f(v)) that is in the relation E(H), that is, to an arc of H. A solution to the CSP is an evaluation that respects all constraints, so it is exactly a homomorphism from G to H.|$|E
5|$|Homomorphisms generalize various {{notions of}} graph colorings {{and allow the}} {{expression}} of an important class of <b>constraint</b> satisfaction problems, such as certain scheduling or frequency assignment problems.|$|E
30|$|Cooling {{and heating}} system <b>constraints.</b> They mainly {{refer to the}} heating/cooling load balance <b>constraints</b> and the {{operational}} <b>constraints</b> of heating/cooling units [32, 33]. The latter generally comprises the generation, transmission and storage <b>constraints</b> of the cooling and heating system, e.g., the heat <b>constraints</b> of the gas boiler, the output <b>constraints</b> of the bromide refrigerator, heating/cooling storage <b>constraints,</b> and the capacity <b>constraints</b> of heating/cooling transmission lines.|$|R
30|$|Organismic <b>constraints</b> evolve {{structurally}} and functionally {{through the}} interaction with environmental <b>constraints</b> and vice versa. Slow-changing environmental <b>constraints</b> shape slow-changing evolutionary organismic <b>constraints</b> or traits (e.g., human structure and functions); relatively faster changing environmental <b>constraints</b> (e.g., fans’ support) shape faster changing organismic <b>constraints</b> or states (e.g., mood); and even faster changing environmental <b>constraints</b> (e.g., ball trajectory) shape the even faster organismic <b>constraints</b> (e.g., perceptions). In turn, relatively slow-changing organismic <b>constraints,</b> such as habits, affect slow-changing environmental <b>constraints</b> (e.g., microclimate or relief paths), and faster changing organismic <b>constraints</b> (e.g., attention focus) produce faster changing environmental <b>constraints</b> (e.g., ball direction). These are usually two-way interactions, {{which can be}} related indirectly (e.g., through actions). Furthermore, <b>constraints</b> acting at different timescales also interact among them through circular causality (see the “Multilevel and nested organization of constraints” and “Correlation of nested <b>constraints</b> through circular causality” sections).|$|R
5000|$|General <b>constraints</b> such as MIN/MAX, ABS, AND/OR, and {{indicator}} <b>constraints</b> help {{avoid having}} to turn commonly occurring <b>constraints</b> in linear <b>constraints</b> ...|$|R
5|$|If {{dropping}} {{the requirement for}} {{the uniqueness of the}} solution, 41-clue minimal pseudo-puzzles are known to exist, but they can be completed to more than one solution grid. Removal of any clue increases the number of the completions and from this perspective none of the 41 clues is redundant. With slightly more than half the grid filled with givens (41 of 81 cells), the uniqueness of the solution <b>constraint</b> still dominates over the minimality <b>constraint.</b>|$|E
5|$|In general, the {{question}} of finding a homomorphism from one relational structure to another is a <b>constraint</b> satisfaction problem (CSP).|$|E
5|$|In {{order to}} produce a Horn instance, no two {{variables}} that appear in the same clause of the renamable Horn instance should appear positively in that clause; this <b>constraint</b> {{on a pair of}} variables is a 2-satisfiability <b>constraint.</b> By finding a satisfying assignment to the resulting 2-satisfiability instance, Lewis shows how to turn any renamable Horn instance into a Horn instance in polynomial time. By breaking up long clauses into multiple smaller clauses, and applying a linear-time 2-satisfiability algorithm, it is possible to reduce this to linear time.|$|E
40|$|<b>Constraints</b> play an {{important}} role in the efficient query evaluation in deductive databases. In this paper, constraint-based query evaluation in deductive databases is investigated, with the emphasis on linear recursions with function symbols. <b>Constraints</b> are classified into three classes: (i) rule <b>constraints,</b> (ii) integrity <b>constraints,</b> and (iii) query <b>constraints.</b> Techniques are developed for the maximal use of different kinds of <b>constraints</b> in rule compilation and query evaluation. Our study on the roles of different classes of <b>constraints</b> in set-oriented evaluation of linear recursions shows that (i) rule <b>constraints</b> should be integrated with their corresponding deduction rules in the compilation of recursions; (ii) integrity <b>constraints,</b> including finiteness <b>constraints</b> and monotonicity <b>constraints,</b> should be used in the analysis of finite evaluability and termination for specific queries; and (iii) query <b>constraints,</b> which are often useful in search space reduction and terminati [...] ...|$|R
30|$|It is {{necessary}} {{not only to}} keep steady-state <b>constraints,</b> but also to maintain transient <b>constraints</b> during the load restoration process. Ref. [62] proposes a comprehensive model for calculating the maximum restorable load amount within the <b>constraints.</b> It considers transient frequency <b>constraints,</b> transient voltage-dip <b>constraints,</b> steady-state voltage <b>constraints,</b> and CLPU characteristics using a modified bisection algorithm.|$|R
40|$|Abstract. In {{this paper}} we extend the state-of-art of the <b>constraints</b> {{that can be}} pushed in a {{frequent}} pattern computation. We introduce {{a new class of}} tough <b>constraints,</b> namely Loose Anti-monotone <b>constraints,</b> and we deeply characterize them by showing that they are a superclass of convertible anti-monotone <b>constraints</b> (e. g. <b>constraints</b> on average or median) and that they model tougher <b>constraints</b> (e. g. <b>constraints</b> on variance or standard deviation). Then we show how these <b>constraints</b> can be exploited in a level-wise Apriori-like computation by means of a new data-reduction technique: the resulting algorithm outperforms previous proposals for convertible <b>constraints,</b> and it is to treat much tougher <b>constraints</b> with the same effectiveness of easier ones. ...|$|R
5|$|Theorem (Feder, Vardi 1998): For every <b>constraint</b> {{language}} Γ, {{the problem}} CSP(Γ) is equivalent under polynomial-time reductions to some H-coloring problem, for some directed graph H.|$|E
25|$|Details of the {{implementation}} the quantum Hamiltonian <b>constraint</b> and solutions are treated in a different article Hamiltonian <b>constraint</b> of LQG. However, {{in this article we}} introduce an approximation scheme for the formal solution of the Hamiltonian <b>constraint</b> operator given in the section below on spinfoams. Here we just mention issues that arises with the Hamiltonian <b>constraint.</b>|$|E
25|$|In LMP markets, where {{constraints}} {{exist on}} a transmission network, {{there is a}} need for more expensive generation to be dispatched on the downstream side of the <b>constraint.</b> Prices on either side of the <b>constraint</b> separate giving rise to congestion pricing and <b>constraint</b> rentals.|$|E
5000|$|Referential {{integrity}} <b>constraints</b> including {{foreign key}} <b>constraints,</b> column <b>constraints,</b> and row checks ...|$|R
30|$|Note that <b>constraints</b> (3.1) are the {{capacity}} <b>constraints,</b> <b>constraints</b> (3.2) state {{the number of}} parts of order o in workflow W_n finished during time period t and <b>constraints</b> (3.3)–(3.5) are the flow balance equations. <b>Constraints</b> (3.6) state the buffer level of intermediate parts.|$|R
40|$|Over-constrained {{problems}} can be solved {{with the help of}} soft <b>constraints.</b> Weighted <b>constraints</b> are a typical representation of soft <b>constraints</b> used to minimize weights of unsatisfied <b>constraints.</b> A natural extension of the CLP(FD) approach is presented which allows handling of weighted soft <b>constraints...</b>|$|R
25|$|Concurrent <b>constraint</b> logic {{programming}} combines concurrent {{logic programming}} and <b>constraint</b> logic programming, using constraints to control concurrency. A clause can contain a guard, {{which is a}} set of constraints that may block the applicability of the clause. When the guards of several clauses are satisfied, concurrent <b>constraint</b> logic programming makes a committed choice to the use of only one.|$|E
25|$|A <b>constraint</b> {{condition}} {{implies a}} restriction in the kinematical {{degrees of freedom}} {{of one or more}} bodies. The classical <b>constraint</b> is usually an algebraic equation that defines the relative translation or rotation between two bodies. There are furthermore possibilities to constrain the relative velocity between two bodies or a body and the ground. This is for example the case of a rolling disc, where the point of the disc that contacts the ground has always zero relative velocity with respect to the ground. In the case that the velocity <b>constraint</b> condition cannot be integrated in time in order to form a position <b>constraint,</b> it is called non-holonomic. This is the case for the general rolling <b>constraint.</b>|$|E
25|$|Just as {{imposing}} {{the classical}} simplicity <b>constraint</b> recovers general relativity from BF theory, one expects an appropriate quantum simplicity <b>constraint</b> will recover quantum gravity from quantum BF theory.|$|E
40|$|Recently, {{optimal control}} {{problems}} subject to probabilistic <b>constraints</b> have {{attracted much attention}} in many research field. Although probabilistic <b>constraints</b> are generally intractable in optimization problems, several methods haven been proposed to deal with probabilistic <b>constraints.</b> In most methods, probabilistic <b>constraints</b> are transformed to deterministic <b>constraints</b> that are tractable in optimization problems. This paper examines a method for transforming probabilistic <b>constraints</b> into deterministic <b>constraints</b> for a class of probabilistic constrained optimal control problems...|$|R
30|$|There {{are various}} types of <b>constraints</b> that {{can be added to}} the wind-thermal {{generation}} coordination problem. Detailed description on system <b>constraints,</b> emission <b>constraints,</b> crew and other <b>constraints</b> are given in [20]. In this paper, bidding, market and thermal <b>constraints</b> are embedded in the problem formulation.|$|R
30|$|Remark Problem (4) is more {{complicated}} than usual mathematical programs with second-order cone complementarity <b>constraints</b> (SOCMPCC). In usual SOCMPCC, there exist only second-order cone complementarity <b>constraints</b> and equality <b>constraints</b> in some cases. However, in problem (4) there are also inequality <b>constraints</b> and linear complementarity <b>constraints.</b>|$|R
25|$|In {{doing so}} the master <b>constraint</b> {{programme}} has been satisfactorily {{tested in a}} number of model systems with non-trivial <b>constraint</b> algebras, free and interacting field theories. The master <b>constraint</b> for LQG was established as a genuine positive self-adjoint operator and the physical Hilbert space of LQG was shown to be non-empty, an obvious consistency test LQG must pass to be a viable theory of quantum General relativity.|$|E
25|$|The {{constraints}} {{in their}} primitive form are rather singular, {{this was the}} reason for integrating them over test functions to obtain smeared constraints. However, {{it would appear that the}} equation for the master <b>constraint,</b> given above, is even more singular involving the product of two primitive constraints (although integrated over space). Squaring the <b>constraint</b> is dangerous as it could lead to worsened ultraviolent behaviour of the corresponding operator and hence the master <b>constraint</b> programme must be approached with due care.|$|E
25|$|Solution of {{the spatial}} diffeomorphism <b>constraint.</b>|$|E
5000|$|... {{this feature}} {{is not fully}} {{supported}} yet in particular, table <b>constraints</b> are not currently inheritable. All check <b>constraints</b> and not-null <b>constraints</b> on a parent table are automatically inherited by its children. Other types of <b>constraints</b> (unique, primary key, and foreign key <b>constraints)</b> are not inherited.|$|R
40|$|Abstract Equality <b>constraints</b> (unification <b>constraints)</b> have {{widespread}} use in program analysis, {{most notably in}} static polymorphic type systems. Conditional equality <b>constraints</b> extend equality <b>constraints</b> with a weak form of subtyping to allow for more accurate analyses. We give a complete complexity characterization of the various entailment problems for conditional equality <b>constraints</b> and for {{a natural extension of}} conditional equality <b>constraints...</b>|$|R
40|$|Business rules {{should be}} {{validated}} by business domain experts, and hence specified {{in a language}} easily understood by business people. This is the fourteenth {{in a series of}} articles on expressing business rules formally in a high-level, textual language. The first article [2] discussed criteria for a business rules language, and verbalization of simple uniqueness and mandatory <b>constraints</b> on binary associations. Article two [3] examined hyphen-binding, and verbalization of internal uniqueness <b>constraints</b> that span a whole association, or that apply to n-ary associations. Article three [4] covered verbalization of basic external uniqueness <b>constraints.</b> Article four [5] considered relational-style verbalization of external uniqueness <b>constraints</b> involving nesting or long join paths, as well as attribute-style verbalization of uniqueness <b>constraints</b> and simple mandatory <b>constraints.</b> Article five [6] discussed verbalization of mandatory <b>constraints</b> on roles of n-ary associations, and disjunctive mandatory <b>constraints</b> (also known as inclusiveor <b>constraints)</b> over sets of roles. Article six [7] considered verbalization of value <b>constraints.</b> Article seven [8] examined verbalization of subset <b>constraints.</b> Article eight [9] discussed verbalization of equality <b>constraints.</b> Article nine [10] covered verbalization of exclusion <b>constraints.</b> Article ten [11] dealt with verbalization of internal frequency <b>constraints</b> on single roles. Article eleven [12] considered verbalization of multi-role, and external, frequency <b>constraints.</b> Article twelve [13] discussed verbalization of rin...|$|R
