6|136|Public
40|$|The {{full scope}} of this program was to have {{included}} development tests, design and production of custom test equipment and acceptance and qualification testing of prototype and protoflight <b>coupling</b> <b>hardware.</b> This program was performed by Ball Aerospace Systems Division, Boulder, Colorado until its premature termination in May 1991. Development tests were performed on cryogenic face seals and flow control devices at superfluid helium (He II) conditions. Special equipment was developed to allow quantified leak detection at large leak rates up to 8. 4 x 10 (exp - 4) SCCS. Two major fixtures were developed and characterized: The Cryogenic Test Fixture (CTF) and the Thermal Mismatch Fixture (Glovebox). The CTF allows the <b>coupling</b> <b>hardware</b> {{to be filled with}} liquid nitrogen (LN 2), liquid helium (LHe) or sub-cooled liquid helium when hardware flow control valves are either open or closed. Heat leak measurements, internal and external helium leakage measurements, cryogenic proof pressure tests and external load applications are performed in this fixture. Special reusable MLI closures were developed to provide repeatable installations in the CTF. The Thermal Mismatch Fixture allows all design configurations of <b>coupling</b> <b>hardware</b> to be engaged and disengaged while measuring applied forces and torques. Any two hardware components may be individually thermally preconditioned within the range of 117 deg K to 350 deg K prior to engage/disengage cycling. This verifies dimensional compatibility and operation when thermally mismatched. A clean, dry GN 2 atmosphere is maintained in the fixture at all times. The first shipset of hardware was received, inspected and cycled at room temperature just prior to program termination...|$|E
40|$|Two main aspects in hardware/software {{co-design}} are hardware/software partitioning and co-synthesis. Most co-design approaches {{work only}} {{on one of}} these problems. In this paper, an approach <b>coupling</b> <b>hardware</b> /software partitioning and co-synthesis will be presented, working fully-automatic. The techniques have been integrated in the co-design tool Cool 1 supporting the complete design flow from system specification to board-level implementation for multi-processor and multi-ASIC target architectures for data-flow dominated applications. 1 Introduction Most approaches in co-design work either on techniques for partitioning or co-synthesis using manual partitioning. Hardware/software partitioning has been explored intensively, using different algorithms to solve this complex optimization problem, e. g. dynamic programming, evolutionary strategies, mixed integer linear programming or several heuristic approaches. Techniques for interface and communication synthesis have been explored f [...] ...|$|E
40|$|Abstract — This paper {{presents}} a modified astrocyte model {{that allows a}} convenient digital implementation. This model is aimed at reproducing relevant biological astrocyte behav-iors, which provide appropriate feedback control in regulating neuronal activities in the central nervous system. Accordingly, we investigate the feasibility of a digital implementation for a single astrocyte and a biological neuronal network model constructed by connecting two limit-cycle Hopf oscillators to an implementation of the proposed astrocyte model using oscillator– astrocyte interactions with weak <b>coupling.</b> <b>Hardware</b> synthesis, physical implementation on field-programmable gate array, and theoretical analysis confirm that the proposed astrocyte model, with considerably low hardware overhead, can mimic biological astrocyte model behaviors, resulting in desynchronization of the two coupled limit-cycle oscillators. Index Terms — Coupled limit-cycle oscillators, desynchroniza-tion, digital modified astrocyte model, field-programmable gate array (FPGA). I...|$|E
40|$|This paper {{presents}} {{the implementation of}} a tightly <b>coupled</b> <b>hardware</b> architectural enhancement to the Altera FPGA-based Nios II embedded processor. The goal is to accelerate Advanced Encryption Standard (AES) operations in 128, 192 and 256 -bits, for application in a high-performance embedded system implementing symmetric key cryptography. The concept is to augment the embedded processor with a new custom instruction for encryption and decryption operations. In order to show the effectiveness of tightly <b>coupled</b> <b>hardware</b> implementation over coprocessor based approach, we have also realized the design in coprocessor approach using the same AES core. Experimental results show that for the encryption or decryption operations, real implementation with custom instructions and tightly <b>coupled</b> <b>hardware</b> is about 35...|$|R
5000|$|Hardware/software design. Hardware that is {{designed}} to make the software problem easier. Self-reconfiguring systems have more tightly <b>coupled</b> <b>hardware</b> and software than any other existing system.|$|R
50|$|AMI <b>couples</b> {{off-the-shelf}} <b>hardware</b> {{with the}} StorTrends iTX storage management firmware platform. StorTrends offers synchronous, asynchronous and snap-assisted replication, thin provisioning, high-availability grouping and advanced caching.|$|R
40|$|This slide {{presentation}} {{reviews the}} development of smart payloads instruments systems with high data rates. On-board computation has become a bottleneck for advanced science instrument and engineering capabilities. In order to improve the computation capability on board, smart payloads have been proposed. A smart payload is a Localized instrument, that can offload the flight processor of extensive computing cycles, simplify the interfaces, and minimize the dependency of the instrument on the flight system. This has been proposed for the Mars mission, Mars Atmospheric Trace Molecule Spectroscopy (MATMOS). The design of this system is discussed; {{the features of the}} Virtex- 4, are discussed, and the technical approach is reviewed. The proposed Hybrid Field Programmable Gate Array (FPGA) technology has been shown to deliver breakthrough performance by tightly <b>coupling</b> <b>hardware</b> and software. Smart Payload designs for instruments such as MATMOS can meet science data return requirements with more competitive use of available on-board resources and can provide algorithm acceleration in hardware leading to implementation of better (more advanced) algorithms in on-board systems for improved science data retur...|$|E
40|$|Abstract: It {{is easy to}} make {{a device}} that will respond vigorously to the action of sea waves. Indeed, it is quite hard to make one that will not. However, the {{conversion}} of the slow, random, reversing energy flows with very high extreme values into phase-locked synchronous electricity with power quality acceptable to a utility network is very much harder. This paper describes a range of different control strategies of varying degrees of sophistication and then describes possible conversion equip-ment for high-pressure oil and water and low-pressure air. Like many renewable energy sources, waves would benefit from some form of energy storage, particularly {{if they are to be}} used in weak island networks. Flywheels, gas accumulators, submerged oil/vacuum accumulators, thermal stores and reversible fuel cells are discussed, with emphasis on the <b>coupling</b> <b>hardware.</b> This leads on to a description of a new type of hydraulic machine with digital control which has been specially designed for high efficiency and flexible control of multiple erratic sources. An explanation of the rather low performance of air turbines in the random air flows caused by sea waves suggests the need for a variable-pitch version of the Wells turbine and the design of a reciprocating-flow wind-tunnel with recirculating energy recovery in which it could be tested...|$|E
40|$|Most of the {{high-end}} computing clusters found today feature multi-way SMP nodes interconnected by an ultra-low latency and high bandwidth network. InfiniBand {{is emerging as}} a high-speed network for such systems. InfiniBand provides a scalable and efficient hardware multicast primitive to efficiently implement many MPI collective operations. However, employing hardware multicast as the communication method may not perform well in all cases. This is true especially when more than one process is running per node. In this context, shared memory channel becomes the desired communication medium within the node as it delivers latencies which are of {{an order of magnitude}} lower than the inter-node message latencies. Thus, to deliver optimal collective performance, <b>coupling</b> <b>hardware</b> multicast with shared memory channel becomes necessary. In this paper we propose mechanisms to address this issue. On a 16 -node 2 -way SMP cluster, the Leader-based scheme proposed in this paper improves the performance of the MPI Bcast operation by a factor of as much as 2. 3 and 1. 8 when compared to the point-to-point and original solution employing only hardware multicast. We have also evaluated our designs on NUMA based system and obtained a performance improvement of 1. 7 using our designs on 2 -node 4 -way system. We also propose a Dynamic Attach Policy as an enhancement to this scheme to mitigate the impact of process skew on the performance of the collective operation...|$|E
40|$|In {{this survey}} paper, we compare native double {{precision}} solvers with emulated- and mixed- precision solvers of linear systems of equations as they typically arise in finite element discretisations. The emulation utilises two single float numbers to achieve higher precision, while the mixed precision iterative refinement computes residuals and updates the solution vector in double precision but solves the residual systems in single precision. Both techniques {{have been known}} since the 1960 s, but {{little attention has been}} devoted to their performance aspects. Motivated by changing paradigms in processor technology and the emergence of highly parallel devices with outstanding single float performance, we adapt the emulation and mixed precision techniques to <b>coupled</b> <b>hardware</b> configurations, where the parallel devices serve as scientific co-processors. The performance advantages are examined with respect to speedups over a native double precision implementation (time aspect) and reduced area requirements for a chip (space aspect). The paper begins with an overview of the theoretical background, algorithmic approaches and suitable hardware architectures. We then employ several conjugate gradient and multigrid solvers and study their behaviour for different parameter settings of the iterative refinement technique. Concrete speedup factors are evaluated on the <b>coupled</b> <b>hardware</b> configuration of a general-purpose CPU an...|$|R
40|$|This paper {{presents}} a novel hardware-based approach for identifying, pro ling, and monitoring hot spots {{in order to}} support runtime optimization of generalpurpose programs. The proposed approach consists of a set of tightly <b>coupled</b> <b>hardware</b> tables and control logic modules that are placed in the retirement stage of a processor pipeline removed from the critical path. The features of the proposed design include rapid detection of program hot spots after changes in execution behavior, runtime-tunable selection criteria for hot spot detection, and negligible overhead during application execution. Experiments using several SPEC 95 benchmarks, as well as several large WindowsNT applications, demonstrate the promise of the proposed design. ...|$|R
40|$|International audienceModern {{embedded}} MPSoC designs increasingly <b>couple</b> <b>hardware</b> accelerators to processing cores {{to trade}} between {{energy efficiency and}} platform specialization. To assist effective design of such systems there is the need on one hand for clear methodologies to streamline accelerator definition and instantiation, on the other for architectural templates and runtime techniques that minimize processors-to-accelerator communication costs. In this paper we present an architecture featuring tightly-coupled processors and accelerators, with zerocopy communication. Efficient programming is supported by an extended OpenMP programming model, where custom directives allow to specialize code regions for execution on parallel cores, accelerators, or a mix of the two. Our integrated approach enables fast yet accurate exploration of accelerator-based HW and SW architectures...|$|R
40|$|International audienceReal-time {{computing}} {{systems are}} increasingly used in aerospace and avionic industries. In {{the face of}} power wall and real-time requirements, hardware designers are directed towards reconfigurable computing with the usage of heterogeneous CPU/FPGA systems. However, {{there is a lack}} of real-time environments able to deal with the execution of applications on such heterogeneous systems dedicated to avionic Test and Simulation (T&S). This research investigates the problem of soft real-time environments for CPU/FPGA systems and proposes first a high-performance hardware architecture used to implement intimately <b>coupled</b> <b>hardware</b> and software avionic models. Second, this paper presents the description of an efficient real-time software environment for the model's execution, the multi-core CPU monitoring and the runtime task re-allocation to avoid the timing constraint violation. Experimental results underpin the industrial relevance of the presented approach for avionic T&S systems with real-time support...|$|R
25|$|The infant boy {{was adopted}} by Pearl and Nathan Berkowitz of the Bronx. The Jewish-American <b>couple</b> were <b>hardware</b> store {{retailers}} of modest means, and childless in middle age. They reversed {{the order of the}} boy's first and middle names and gave him their own surname, raising young David Richard Berkowitz as their only child.|$|R
50|$|It is {{one more}} of the {{municipalities}} proper for coffee plantation. The second main activity is commerce, starting with groceries followed by several supplies for construction and farming. Cattle raising, beans and corn crops are mostly for local consumption. It has electricity and mobile communication services. It also has a <b>couple</b> of <b>hardware</b> stores.|$|R
50|$|The infant boy {{was adopted}} by Pearl and Nathan Berkowitz of the Bronx. The Jewish-American <b>couple</b> were <b>hardware</b> store {{retailers}} of modest means, and childless in middle age. They reversed {{the order of the}} boy's first and middle names and gave him their own surname, raising young David Richard Berkowitz as their only child.|$|R
50|$|NEPO {{is a free}} {{open source}} meta {{programming}} language {{that can be used}} by students, scholars, teachers, and other interested persons within the Open Roberta Lab. NEPO translates to New Easy Programming Online (or simply OPEN read backwards). NEPO is how we call our graphical programming language and its <b>coupled</b> <b>hardware</b> connection layer. NEPO uses the freely available Blockly library. In addition within NEPO there are additional functionalities and improvements have been adapted for Open Roberta. The programming paradigm of NEPO is inspired by Scratch from Massachusetts Institute of Technology. A NEPO block always represents and encapsulates a certain robot functionality. A blocks feature set can easily be recognized through the associated block category, for example »sensors«. Programming with NEPO follows a simple principle. The blocks are interconnected and will be executed by the robot according to their order. This principle is called »sequential operation«.|$|R
40|$|Image {{recognition}} and classification {{is one of}} the primary challenges of the machine learning community. Recent advances in learning systems, <b>coupled</b> with <b>hardware</b> developments have enabled general object recognition systems to be learned on home computers with graphics processing units. Presented is a Deep Belief Network engineered using NVIDIA 2 ̆ 7 s CUDA programming language for general object recognition tasks...|$|R
40|$|As {{clusters}} of workstations, uniprocessor or symmetric multiprocessors (SMPs), become important platforms for parallel computing, {{there is increasing}} research interest in supporting the attractive, shared address space programming model across them in software. The reason {{is that it may}} provide successful low [...] cost, high [...] performance alternatives to both tightly [...] <b>coupled,</b> <b>hardware</b> [...] coherent distributed shared memory machines and to scalable servers. In both these cases, the clusters are formed with o# [...] the [...] self, high [...] end PCs or workstations and system area networks that track technologies well. Given that a shared memory abstraction is an attractive programming model for this architecture, {{there has been a lot}} of research in fast communication on clusters connected with system area networks and in protocols for supporting software shared memory across them. However, the end performance of applications that were written for the more proven hardware [...] coherent shared memory is still not [...] ...|$|R
40|$|ABSTRACT: This {{research}} {{investigates the}} problem of the optimisation of run-time task mapping on a real-time computing system CPU/FPGA (Central Processing Unit/Field-Programmable Gate Array) used to implement intimately <b>coupled</b> <b>hardware</b> and software models. The case study analyzed in this work is inspired by the avionic industry. Indeed, real-time computing systems are increasingly used in aerospace and avionic industries. In the face of power wall and real-time requirements, hardware designers are directed more and more towards reconfigurable computing with the use of heterogeneous CPU/FPGA systems. In such systems, multi-core processors (CPU) provide high computation rates while the reconfigurable logic (FPGA) offers high performance and adaptability to the application real-time constraints. However, {{there is a lack of}} CAD (Computer-Aided design) tools able to deal with the development of applications on such heterogeneous systems. This work includes the development and the comparison of efficient heuristics that focus on the static initial task mapping, the dynamic mapping of new applications at run-time, and the dynamic re-configuration to avoid the real-time constraint violation...|$|R
40|$|Advances in {{wireless}} networking <b>hardware,</b> <b>coupled</b> with readily-available TCP/IP software solutions {{have enabled}} {{the development of}} a simple, yet highly effective telemetry and remote control system. A description of the various components of the system is presented. Peer reviewed: NoNRC publication: Ye...|$|R
50|$|Some {{limits to}} ILP are {{compiler}} sophistication and hardware sophistication. To overcome these limits, {{new and different}} hardware techniques {{may be able to}} overcome limitations. However, unlikely such advances when <b>coupled</b> with realistic <b>hardware</b> will overcome these limits in the near future.|$|R
40|$|The Itanium {{processor}} is {{the first}} implementation of the IA- 64 instruction set architecture (ISA). The design team optimized the processor to meet {{a wide range of}} requirements: high performance on Internet servers and workstations, support for 64 -bit addressing, reliability for mission-critical applications, full IA- 32 instruction set compatibility in hardware, and scalability across a range of operating systems and platforms. The processor employs EPIC (explicitly parallel instruction computing) design concepts for a tighter <b>coupling</b> between <b>hardware</b> and software. In this design style the hardware-software interface lets the softwar...|$|R
40|$|Reconfigurable logic such as FPGAs is {{increasingly}} being used on system-on-chip (SoC) platforms {{to provide a}} flexible, programmable co-processor that augments the core processor. In this paper, we present a tightly <b>coupled</b> <b>hardware</b> synthesis and interface synthesis approach that forms part of our hardware-software co-design methodology for such FPGA-based platforms. For hardware synthesis, we use a parallelizing high-level synthesis approach that employs aggressive coarse-grain and fine-grain code parallelizing and code motion techniques to discover circuit optimization opportunities beyond what is possible with traditional high-level synthesis. We have implemented this approach in a framework called Spark that takes a behavioral description in ANSI-C as input and produces synthesizable register-transfer level VHDL. Our interface synthesis approach {{is based on a}} novel memory mapping algorithm that uses scheduling information from the high-level synthesis tool to map data used by both the hardware and the software to shared memories on the reconfigurable fabric. We present experimental results for the synthesis of computationally intensive portions of multimedia applications that demonstrate that the code transformations in Spark lead to up to 50 - 70 % improvements in circuit delay with fairly constant circuit area. We also present a case study of the hardware-software co-design of a portion of multimedia application onto a FGPA platform using our methodology. KEY WORDS System synthesis, high-level synthesis, interface synthesis, parallelizing transformations, FPGA, platform design...|$|R
40|$|Abstract. A {{strategy}} for parallelization of a state-of-the-art Branch and Bound algorithm for weighted CSPs and other graphical model optimization tasks is introduced: independent worker nodes concurrently solve subproblems, managed by a Branch and Bound master node; the problem cost functions {{are used to}} predict subproblem complexity, enabling efficient load balancing, which is crucial {{for the performance of}} the parallelization process. Experimental evaluation on up to 20 nodes yields very promising results and suggests the effectiveness of the scheme. The system runs on loosely <b>coupled</b> commodity <b>hardware,</b> simplifying deployment on a larger scale in the future. ...|$|R
50|$|Tabitha {{was born}} near Kijabe, in central Kenya. After {{attending}} Kenyan schools, {{she took up}} employment in the Ministry of Tourism as an Accounting Clerk. She met and married her husband, who owned a successful hardware store in Naivasha town. In 1997, the <b>couple</b> closed the <b>hardware</b> store {{and went into the}} wine-making business.|$|R
40|$|The development, {{application}} and commercialization of cluster computer systems have escalated {{dramatically over the}} last several years. Driven by a range of applications that need relatively low-cost access to high performance computing systems, cluster computers have reached worldwide acceptance and use. A cluster system consists of commercial-off-the-shelf <b>hardware</b> <b>coupled</b> to (generally) open source software. These commodity persona...|$|R
40|$|Parallelism, {{a massive}} {{achievement}} {{in the field of}} processor architecture leading towards increased speed up by incorporating data as well as computation intensive work. Parallel architectural components interconnected with major consideration as communication among <b>coupled</b> <b>hardware</b> in order to stabilize workload distribution and management. Workload distribution with load stability fundamentally a tricky aspect of parallel distribution. Static policies covers load factors which are pre-determined before actually distribution takes place. Dynamic load stability and distribution periodically measures the load for each and every processor in heterogenic parallel processor systems [...] Development of heterogenic multiprocessor machines with dynamic load stability matrices or measurements incorporates vast amount of efforts and covers varied amount of configuration factors on the behalf of the underlying communication architecture. So much of the processor’s efforts may lose for load stabilization, which may be controlled by improved dynamic load stability techniques and theories. In this research, the major aspect of development is to measure processor efficiency by analyzing frequency speed along with current processor load, only then the distribution takes place. Measuring cycle speed (i. e. no. of cycle per second elapsed) in terms of Hz, Mhz, Ghz is one of the measurement metric to analyze the processor efficiency. Further the research covers MIMD based core processor simulation version integrate frequency based distribution for load steadiness and control. Although, load consistency will not be completely managed with in any type of system. Load steadiness and uniformity will only be controlled up to some extent...|$|R
40|$|Abstract—The legacy {{approaches}} to control development of power conversion systems is topology or application oriented. Due to close <b>coupling</b> to <b>hardware</b> {{and lack of}} software engineering technologies, the control software in digitally controlled power conversion system is difficult to design and maintain. This paper proposes a distributed, modular, open control architecture for power conversion systems is proposed to decompose control design complexity and encapsulate and localize independent varieties to reduce unnecessary redesign effort and improve software quality. An implementation of the proposed control architecture will also be presented and evaluated by comparison to the legacy approach to control design in industry and academic. I...|$|R
25|$|By default MSX {{machine has}} {{hardcoded}} character set and keyboard return scan code handling algorithm. While MSX in overall has full application software compatibility, at the firmware (BIOS) level <b>coupled</b> with its <b>hardware</b> level, due to minor hardware differences, {{replacement of the}} BIOS with another from different PC may render incorrect scan code translations and thus incorrect behavior of the keyboard subsystem for the application software.|$|R
40|$|This paper {{provides}} new {{analysis of}} the economics of low-cost propellant launch <b>coupled</b> with dry <b>hardware</b> re-use, and of the thermal control of the liquid hydrogen once on-orbit. One conclusion is that this approach enables an overall reduction in the cost-permission {{by as much as}} a factor of five as compared to current approaches for human exploration of the moon, Mars, and near-Earth asteroids...|$|R
25|$|Computer {{programs}} may be categorized along functional lines. The main functional categories are application software and system software. System software includes {{the operating system}} which <b>couples</b> computer <b>hardware</b> with application software. The purpose of the operating system is to provide {{an environment in which}} application software executes in a convenient and efficient manner. In addition to the operating system, system software includes embedded programs, boot programs, and micro programs. Application software designed for end users have a user interface. Application software not designed for the end user includes middleware, which couples one application with another. Application software also includes utility programs. The distinction between system software and application software is under debate.|$|R
40|$|General pedigrees can be encoded as Bayesian networks, {{where the}} common MPE query {{corresponds}} {{to finding the}} most likely haplotype configuration. Based on this, a strategy for grid parallelization of a stateof-the-art Branch and Bound algorithm for MPE is introduced: independent worker nodes concurrently solve subproblems, managed by a Branch and Bound master node. The likelihood functions are used to predict subproblem complexity, enabling efficient automation of the parallelization process. Experimental evaluation on up to 20 parallel nodes yields very promising results and suggest {{the effectiveness of the}} scheme, solving several very hard problem instances. The system runs on loosely <b>coupled</b> commodity <b>hardware,</b> simplifying deployment on a larger scale in the future. 1...|$|R
40|$|The current {{software}} ecosystem {{for small}} satellites {{is characterized by}} proprietary libraries, tight <b>coupling</b> with <b>hardware</b> and little thought for interoperability. These qualities also marked the software found {{in the early days}} of the computing revolution. As modern computing has advanced and hardware platforms have standardized, there has been a rise in software packages which operate using open standards and are designed with multiple platforms in mind. The software surrounding small satellites is posed to undergo a similar revolution. Increased interest in the market will only drive the need for flexible, reusable software libraries. This paper discusses the approaches used to create flight software capable of reuse on multiple small satellite platforms...|$|R
40|$|We {{present the}} formal {{verification}} of the floating-point multiplier in the Intel IA- 32 Pentium 4 microprocessor. The verification {{is based on}} a combination of theoremproving and BDD based model-checking tasks performed in a unified hardware verification environment. The tasks are tightly integrated to accomplish complete verification of the multiplier <b>hardware</b> <b>coupled</b> with the rounder logic. The approach does not rely on specialized representations like Binary Moment Diagrams or its variants...|$|R
50|$|As it is {{independent}} <b>hardware,</b> <b>coupled</b> {{only by a}} simple communication channel, the TAN generator is not susceptible to attack from the user's computer. Even if the computer is subverted by a Trojan, or if a man-in-the-middle attack occurs, the TAN generated is only valid for the transaction confirmed by the user on the screen of the TAN generator, therefore modifying a transaction retroactively would cause the TAN to be invalid.|$|R
