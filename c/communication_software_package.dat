4|10000|Public
40|$|Heterogeneous {{computing}} {{creates a}} need for transparent communication between distributed software components. Transparent communication is often handled by preexisting low-level communication software packages. A high-level abstract communication architecture leverages off of a pre-existing low-level <b>communication</b> <b>software</b> <b>package</b> to facilitate the creation of distributed software components and to provide simple methods for their integration into distributed applications. BORG is a high-level abstract communication architecture that fosters the evolution of legacy systems into an object model by providing tools that simplify the creation, acquisition and use of distributed software components within that legacy system. A distributed bulletin board assists applications in obtaining and integrating distributed software components which have been created from the legacy system. Distributed software components can be crafted from the legacy system via tools that abstract and encapsulate [...] ...|$|E
40|$|Abstract — Software {{engineers}} increasingly emphasize agility {{and flexibility}} in their designs and development approaches. For example, they increasingly use distributed development teams, rely on component assembly and deployment rather than green field code writing, rapidly evolve the system through incremental development and frequent updating, and use flexible product designs supporting extensive end-user customization. While agility and flexibility have many benefits, they also create {{an enormous number}} of potential system configurations built from rapidly changing component implementations. Since today’s quality assurance (QA) techniques do not scale to handle highly configurable systems, we are developing and validating novel software QA processes and tools that leverage the extensive computing resources of user and developer communities in a distributed, continuous manner to improve software quality significantly. This paper provides several contributions to the study of distributed, continuous QA (DCQA). First, it shows the structure and functionality of Skoll, which is an environment that defines a generic around-the-world, around-the-clock QA process and several sophisticated tools that support this process. Second, it describes several novel QA processes built using the Skoll environment. Third, it presents two studies using Skoll: one involving user testing of the Mozilla browser and another involving continuous build, integration, and testing of the ACE+TAO <b>communication</b> <b>software</b> <b>package.</b> The results of our studies suggest that the Skoll environment can manage and control distributed continuous QA processes more effectively than conventional QA processes. For example, our DCQA processes rapidly identified problems that had taken the ACE+TAO developers much longer to find and several of which they had not found. Moreover, the automatic analysis of QA task results provided developers information that enabled them to find the root cause of quality problems quickly...|$|E
40|$|Software {{engineers}} increasingly emphasize agility {{and flexibility}} in their designs and development approaches. They increasingly use distributed development teams, rely on component assembly and deployment rather than green field code writing, rapidly evolve the system through incremental development and frequent updating, and use flexible product designs supporting extensive end-user customization. While agility and flexibility have many benefits, they also create {{an enormous number}} of potential system configurations built from rapidly changing component implementations. Since today’s quality assurance (QA) techniques do not scale to handle highly configurable systems, we are developing and validating novel software QA processes and tools that leverage the extensive computing resources of user and developer communities in a distributed, continuous manner to improve software quality significantly. This paper provides several contributions to the study of distributed, continuous QA (DCQA). First, it shows the structure and functionality of Skoll, which is an environment that defines a generic around-the-world, around-the-clock QA process and several sophisticated tools that support this process. Second, it describes several novel QA processes built using the Skoll environment. Third, it presents two studies using Skoll: one involving user testing of the Mozilla browser and another involving continuous build, integration, and testing of the ACE+TAO <b>communication</b> <b>software</b> <b>package.</b> The results of our studies suggest that the Skoll environment can manage and control distributed continuous QA processes more effectively than conventional QA processes. For example, our DCQA processes rapidly identified problems that had taken the ACE+TAO developers much longer to find and several of which they had not found. Moreover, the automatic analysis of QA results provided developers information that enabled them to quickly find the root cause of problems...|$|E
40|$|An {{introduction}} and tutorial {{as well as}} a comprehensive reference Using C-Kermit describes the new release, 5 A, of Columbia University's popular C-Kermit <b>communication</b> <b>software</b> - the most portable of all <b>communication</b> <b>software</b> <b>packages.</b> Available at low cost on a variety of magnetic media from Columbia University,C-Kermit can be used on computers of all sizes - ranging from desktop workstations to minicomputers to mainframes and supercomputers. The numerous examples, illustrations, and tables in Using C-Kermit make the powerful and versatile C-Kermit functionsaccessible for new and experience...|$|R
40|$|Abstract — Freshman {{engineering}} {{students have a}} number of writing assignments during the first year that are designed to meet the instructional objectives of the academic, advising, and library programs at the University of Pittsburgh’s School of Engineering. The two semester writing projects are the result of a collaboration between the Freshman Program, Freshman Advising, and the Engineering Library that creates a student centered learning environment to help freshmen learn how to use <b>communication</b> <b>software</b> <b>packages,</b> develop research skills, make informed decisions about their future educational and career goals in engineering and help discover what engineering is...|$|R
50|$|Trust no one (TNO) is an {{approach}} towards Internet and software security issues. In all Internet <b>communication</b> and <b>software</b> <b>packages</b> where {{some sort of}} secrecy is needed, usually some sort of encryption is applied. The trust no one approach teaches that no one (but oneself) should be trusted {{when it comes to}} the storage of the keys behind the applied encryption technology.|$|R
40|$|Abstract—Software {{engineers}} increasingly emphasize agility {{and flexibility}} in their designs and development approaches. They increasingly use distributed development teams, rely on component assembly and deployment rather than green field code writing, rapidly evolve the system through incremental development and frequent updating, and use flexible product designs supporting extensive end-user customization. While agility and flexibility have many benefits, they also create {{an enormous number}} of potential system configurations built from rapidly changing component implementations. Since today’s quality assurance (QA) techniques do not scale to handle highly configurable systems, we are developing and validating novel software QA processes and tools that leverage the extensive computing resources of user and developer communities in a distributed, continuous manner to improve software quality significantly. This paper provides several contributions to the study of distributed, continuous QA (DCQA). First, it shows the structure and functionality of Skoll, which is an environment that defines a generic around-the-world, around-the-clock QA process and several sophisticated tools that support this process. Second, it describes several novel QA processes built using the Skoll environment. Third, it presents two studies using Skoll: one involving user testing of the Mozilla browser and another involving continuous build, integration, and testing of the ACE+TAO <b>communication</b> <b>software</b> <b>package.</b> The results of our studies suggest that the Skoll environment can manage and control distributed continuous QA processes more effectively than conventional QA processes. For example, our DCQA processes rapidly identified problems that had taken the ACE+TAO developers much longer to find and several of which they had not found. Moreover, the automatic analysis of QA results provided developers information that enabled them to quickly find the root causes of problems. Index Terms—Distributed continuous quality assurance, distributed testing, configurable components, testing. Ç...|$|E
40|$|New {{activists are}} {{engaging}} {{in a range of}} extra-parliamentary activities, including extensive use of the internet, to create political change at local, national and international levels. As new activists become more effective, more sophisticated and, above all, more organised, traditional public relations or ‘PR spin’ is increasingly exposed as not just ineffective, but also an unethical way to respond to criticisms. But growing numbers of state and business organisations are trying to create new relationships with stakeholders that are inclusive, sustainable and aligned with the principles of corporate social responsibility (CSR). A range of stakeholder <b>communication</b> <b>software</b> <b>packages</b> claim to guide and support organisations wishing to create such relationships. However, these <b>software</b> <b>packages</b> can do more than merely offer guidance and support. They can actively influence how an organisation engages with stakeholders by embodying particular discourses that construct stakeholders as adversaries. This article examines two stakeholder <b>software</b> <b>packages,</b> showing how each one’s rhetoric of inclusion accompanies discourses that recreate adversarial relationships between organisation and stakeholders. The article sets such developments against the broad backdrop of developing notions of CSR, arguing that the uncritical use of stakeholder communication packages can reduce CSR to ‘more PR spin’. <br /...|$|R
40|$|The work {{reported}} {{here is an}} examination into the interfacing of software. The general objective {{of the study was}} to investigate the methods of <b>communication</b> between <b>software</b> <b>packages</b> in a local environment. The <b>software</b> <b>packages</b> discussed have been grouped into four areas: language; database/spreadsheet/word processor; CAD and CAM. The study specifically follows a design process to illustrate methods of collecting and transferring data between user and CAD/CAM <b>software</b> <b>packages</b> which deal with specific aspects in the design process, such as drawing, analysis and manufacturing. The design of a shaft and its associated components was deliberately chosen for investigation because shaft design is one of the most common steps in machine design. The shaft design assistant system was developed based on the MicroStation environment and most parts are written in MicroStation Development Language which is another area of interest explored in this study. Incorporated into the shaft design is the framework of a knowledge-based module which assists the designer in the selection of suitable bearings. This design process was developed in Prolog to provide an example of communication between MDL applications and programs written in other languages. This module also shows the basic concept of how knowledge based systems are applied to engineering component selection. The interface issues were addressed along with the development of the shaft design assistant system...|$|R
50|$|Construction of SIMUL8 {{models is}} usually not based on {{programming}} or statistical data, but rather on drawing organization schemes on the screen. However, SIMUL8 implements a two-way interface with Visual Basic, which leaves space for creation of advanced model features, which cannot be modeled using only the graphical interface. SIMUL8 also provides its own simulation language based on Visual Basic called Visual Logic, which allows the user to implement detailed logic of the simulation. The design of SIMUL8 also facilitates <b>communication</b> with other <b>software</b> <b>packages</b> such as Microsoft Access, Excel and Visio. The support of XML and OLE automation allows working with external sources of data and exporting internal data to other systems. SIMUL8 also supports communication with databases using SQL.|$|R
40|$|The European Water Framework Directive {{stresses}} the importance of integrated water management at the basin scale. In the scope of this directive, the Open Modelling Interface and Environment (OpenMI) was developed to enhance the <b>communication</b> between <b>software</b> <b>packages.</b> One of the interesting applications of the use of the use of the OpenMI is the bidirectional linking of submodels for the various components of the integrated water system. The OpenMI was reviewed for its technical value as well as for its usefulness when linking hydraulic river and sewer models implemented in InfoWorks CS 7. 51 and InfoWorks RS 7. 51. The effect of the bi-directional linking on the model results was investigated. Based on a single test case, it was concluded that the choice of the simulation timestep and the source of the trigger (that controls the data exchange between the models) in OpenMI are very important for the preciseness of the results. After application to a real integrated sewer-river system case in Belgium, computational times appeared to be longer than the sum of the computational times of the individual systems. Also data storage problems were encountered. Results pointed out that long term simulations with bi-directionally linked hydraulic models may not be realistic with the present generation of computers. status: publishe...|$|R
40|$|A {{graphical}} {{user interface}} (GUI) was created that allows a user to control and display data from an oscilloscope by communicating across a network. The GUI provides a convenient way to observe diagnostic signals throughout the OMEGA laser system. The GUI displays a graph of the data received from each channel of the oscilloscope, showing the signal's shape {{as well as other}} attributes. The user is able to continuously update the display with the most recent data or, at any time, acquire a single trace. The user is also able to arm the oscilloscope or force its trigger. The GUI communicates with the server program using ICE (Internet <b>Communication</b> Engine), a <b>software</b> <b>package</b> used for network communications. This program will allow scientists to analyze the shape of the laser pulse before and after it goes through the amplification process. Plotted signal data Figure 1. Graphical user interface display, showing the Channel Settings dialog box. ...|$|R
40|$|This book {{deals with}} a 'Participative Simulation {{environment}} for Intelligent Manufacturing' (PSIM). PSIM is a software environment for use in assembly operations and it is developed and pilot-demonstrated in five companies: Volvo (Sweden), Finland Post, Fiat (Italy), Yamatake (Japan), Ford (USA). PSIM {{is a combination of}} expertise in the areas of ICT, sociotechnique, assembly engineering and ergonomics. After defining the needs of companies several parts were developed and tested. A procedure was developed. A digital language to enable better <b>communication</b> between several <b>software</b> <b>packages</b> (ontology) was developed. Two tools were developed: 1. socio-technical knowledge to help developing an optimal organisational structure; 2. ergonomics to help developing optimal man-machine interactions. A "navigator" was developed to make the PSIM system usable for different participants. Also software was developed to enable subtracting data from ERP systems (the integrator). The test results show that the approach is very complete, generates new ideas for improvement and contributes to productivity improvement, better physical and mental workload of the operators and a learning organization...|$|R
40|$|We {{introduce}} a novel platform for interactive studies, that is, {{any form of}} study in which participants’ experiences depend not only on their own responses, but also on those of other participants who complete the same study in parallel, for example a prisoner’s dilemma or an ultimatum game. The software thus especially serves the rapidly growing field of strategic interaction research within psychology and behavioral economics. In contrast to all available <b>software</b> <b>packages,</b> our platform does not handle stimulus display and response collection itself. Instead, we provide a mechanism to extend existing experimental software to incorporate interactive functionality. This approach allows us to draw upon the capabilities already available, such as accuracy of temporal measurement, integration with auxiliary hardware such as eye-trackers or (neuro-) physiological apparatus, and recent advances in experimental software, for example capturing response dynamics through mouse-tracking. Through integration with OpenSesame, an open-source graphical experiment builder, studies can be assembled via a drag-and-drop interface requiring little or no further programming skills. In addition, by using the same <b>communication</b> mechanism across <b>software</b> <b>packages,</b> we also enable interoperability between systems. Our source code, which provides support for all major operating systems and several popular experimental packages, can be freely used and distributed under an open source license. The communication protocols underlying its functionality are also well documented and easily adapted to further platforms. Code and documentation are available at [URL] © 2016 Psychonomic Society, Inc...|$|R
40|$|Geographic Information Systems (GIS) are {{powerful}} tools for integrating information from different planetary datasets e. g. images, spectral data and digital terrain models in different formats like vector and raster. Before analyzing these datasets within GIS {{it is necessary}} to relate them to a common reference system. However, while the regular standard GIS Systems are developed for terrestrial reference systems, additional efforts are required for the integration of planetary datasets into a GIS. In this talk we describe the import of different datasets into ESRI`s commercial ArcGIS 9 and the open source project GRASS 5. 3 (Geographic Resources Analysis Support System). We introduced several Mars datasets like MOLA (Mars Obiter Laser Altimeter), MDIM 2. 1 (Mars Digital Image Mosaic), MOC (Mars Orbiter Camera), TES (Thermal Emission Spectrometer), the Geologic Map of Mars and images of High Resolution Stereo Camera of ESA`s Mars Express mission. Before importing these datasets, we referenced all these data within the VICAR (Video Image <b>Communication</b> And Retrieval) <b>software</b> <b>package</b> to the MOLA reference sphere using our mapping tools. We developed scripts to automate these steps and to create the correct image formats for GRASS and ArcGIS, respectively. Some results will be presented at this conference...|$|R
5000|$|A {{number of}} <b>software</b> <b>packages</b> use the SWMM5 engine, {{including}} many commercial <b>software</b> <b>packages.</b> Some of these <b>software</b> <b>packages</b> include: ...|$|R
50|$|There {{are many}} <b>software</b> <b>packages</b> {{available}} to merge text and images into VDP print files. Some are stand-alone <b>software</b> <b>packages,</b> however {{most of the}} advanced VDP <b>software</b> <b>packages</b> are actually plug-in modules for one or more publishing <b>software</b> <b>packages</b> such as Adobe Creative Suite.|$|R
40|$|Bayesian Analysis, Computation and Communication (BACC) {{is a new}} Bayesian <b>software</b> <b>package</b> {{which is}} linked to Gauss and {{takes the form of}} a set of Gauss commands. In this review, I outline a list of qualities that a Bayesian <b>software</b> <b>package</b> should have. I then discuss whether BACC has these qualities in the context of a brief {{description}} and extended example. 1 1 Overview Bayesian Analysis, Computation and <b>Communication</b> (BACC) <b>software</b> attempts to do for Bayesian econometrics what packages such as E-Views, TSP and SHAZAM have done for classical econometrics, viz. create a <b>software</b> <b>package</b> that allows for the simple routine use of Bayesian methods without requiring the researcher to do a great deal of specialized computer programming. However, the nature of the Bayesian task is somewhat dierent from the classical task, so it is worthwhile outlining the essential elements of a typical Bayesian analysis before discussing the details of BACC. Let Y be a vector of observed data and a [...] ...|$|R
5000|$|<b>Software</b> <b>packaging</b> formats {{are used}} to create <b>software</b> <b>packages</b> that may be self-installing files.|$|R
40|$|Subcarrier {{transmission}} of muti-channel video signals over optical fibers may find widespread application in video distribution systems. This thesis details a comparative study {{that has been}} conducted for subcarrier multiplexing systems using various video signal modulation formats. In particular, we have investigated: AM-VSB (NTSC), high-index FM, 4 -level QAM, and HDTV (Zenith). For each modulation scheme, a minimum CNR must be achieved to meet the required SNR. For analog fiber optic systems, system degradation results from laser intrinsic nonlinearities and clipping at threshold, and from noise sources (laser RIN (relative intensity noise), signal shot noise and preamplifier thermal noise at the receiver). We have also considered {{the possibility of using}} laser optical amplifiers to increase the system margin. Again, device nonlinearities must be considered, as well as further degradation from signal-spontaneous beat noise. A <b>communication</b> system simulator <b>software</b> <b>package</b> BOSS (Block Oriented Systems Simulator) was used to develop a laser model based on the classic laser rate equations to predict nonlinear distortion. Adding Langevin noise terms to the rate equations, BOSS was also used to obtain the RIN spectrum. A similar model was developed for the optical amplifier based on the rate equation and wave equation of the optical amplifier. Results of the comparative study are given...|$|R
5000|$|With {{extraction}} lossy data conversion, <b>software</b> <b>packages</b> take content stored by {{a different}} <b>software</b> <b>package</b> and extract out the content to the desired format. This may allow data to be extracted in a format not recognized by the original <b>software</b> <b>package.</b>|$|R
40|$|Numerous <b>software</b> <b>packages</b> {{are being}} used and updated {{regularly}} on most computer systems. Installing all these <b>software</b> <b>packages</b> is a formidable task because each one has a different procedure for compiling or for placing the files required at run time. The LUDE (Logithèque Universitaire Distribuée et Extensible) software library is an organization for installing <b>software</b> <b>packages,</b> a set of tools to install and uninstall <b>software</b> <b>packages</b> and browse their documentation, {{and a number of}} FTP servers offering over 100 pre-installed freely redistributable <b>software</b> <b>packages.</b> It offers functionality and flexibility not available i...|$|R
40|$|This paper {{presents}} an integrated rule-based and case-based reasoning approach for evaluation and {{selection of the}} <b>software</b> <b>packages.</b> Rule-based reasoning is used to (i) store knowledge about the software evaluation criteria (ii) guide user to capture user needs of the <b>software</b> <b>package.</b> Case-based reasoning is used to (i) determine the fit between candidate <b>software</b> <b>packages</b> and user needs of the <b>software</b> <b>package</b> (ii) rank the candidate <b>software</b> <b>packages</b> according to their score. We have implemented this approach and performed usability test to verify functionality, efficiency and convenience of this approach...|$|R
40|$|Teachers using {{traditional}} lecture method {{find it difficult}} to communicate the concept of chemical bonding to students; and students {{find it difficult to}} learn the concept. The trend in the 21 st century learning is the use of computer and <b>software</b> <b>packages</b> to facilitate teaching-learning process. This study set out to develop and validate a <b>software</b> <b>package</b> for teaching chemical bonding in secondary schools. The study produced chemical bonding instructional <b>software</b> <b>package</b> (CBISP), adopting the procedure suggested in FTCESP-model for teacher-made computer educational <b>software</b> <b>package.</b> It also produced an instrument for validation of the <b>software</b> <b>package.</b> The internal consistency (α) of the Chemical Bonding Instructional <b>Software</b> <b>Package</b> (CBISP) has a value of 0. 781, obtained by Kendall's Coefficient of Concordance method used in determining it. The author asserts that the procedure adopted in the development and validation of the CBISP is a veritable way of ensuring sustainable supply of relevant <b>software</b> <b>packages</b> in the school system...|$|R
40|$|Publication of {{this article}} was funded by the Stellenbosch University Open Access Fund. The {{original}} publication is available at [URL] factors exist that may contribute to the unsuccessful completion of application <b>software</b> <b>package</b> implementation projects. The most significant contributor to application <b>software</b> <b>package</b> project failure lies in the misalignment of the organisation’s business processes with the functionality of the application <b>software</b> <b>package.</b> While various IT control frameworks that may assist in the implementation of application <b>software</b> <b>packages</b> are available, the question arises why industry still reports that the success rate of application <b>software</b> <b>package</b> implementation projects remains low. The {{purpose of this study was}} to examine the extent to which the Projects in Controlled Environment (PRINCE 2) framework assists in the alignment of the organisation’s business processes with the functionality provided by the application <b>software</b> <b>package</b> implemented. This study investigated whether PRINCE 2 addresses all the reasons for project failure. It identifies the shortcomings and weaknesses in PRINCE 2 which may contribute to the misalignment between the business processes of the organisation and the functionality of the application <b>software</b> <b>package</b> implemented. The study recommends how these weaknesses identified in PRINCE 2 can be addressed. By taking these recommendations into account when using PRINCE 2 to implement application <b>software</b> <b>packages,</b> proper alignment between the organisation’s business processes and the functionality of the application <b>software</b> <b>package</b> may be achieved. This results in a more successful application <b>software</b> <b>package</b> implementation. Stellenbosch UniversityPublishers' versio...|$|R
40|$|Software defect {{prediction}} {{is the process}} of locating defective modules in software. Software quality may be a field of study and apply that describes the fascinating attributes of <b>software</b> <b>package</b> product. The performance should be excellent with none defects. Software quality metrics are a set of <b>software</b> <b>package</b> metrics that target the standard aspects of the product, process, and project. The <b>software</b> <b>package</b> {{defect prediction}} model helps in early detection of defects and contributes to their economical removal and manufacturing a top quality <b>software</b> <b>package</b> supported many metrics. The most objective of paper is to assist developers determine defects supported existing <b>software</b> <b>package</b> metrics victimization data mining techniques and thereby improve the <b>software</b> <b>package</b> quality. In this paper, role of various classification techniques in software defect prediction process are analyzed...|$|R
40|$|An {{application}} <b>software</b> <b>package</b> implementation is {{a complex}} endeavour, and as such it requires the proper understanding, evaluation and redefining of the current business processes {{to ensure that the}} implementation delivers on the objectives set {{at the start of the}} project. Numerous factors exist that may contribute to the unsuccessful implementation of application <b>software</b> <b>packages.</b> However, the most significant contributor to the failure of an application <b>software</b> <b>package</b> implementation lies in the misalignment of the organisation’s business processes with the functionality of the application <b>software</b> <b>package.</b> Misalignment is attributed to a gap that exists between the business processes of an organisation and what functionality the application <b>software</b> <b>package</b> has to offer to translate the business processes of an organisation into digital form when implementing and configuring an application <b>software</b> <b>package.</b> This gap is commonly referred to as the information technology (IT) gap. This study proposes to define and discuss the IT gap. Furthermore this study will make recommendations for aligning the business processes with the functionality of the application <b>software</b> <b>package</b> (addressing the IT gap). The end result of adopting these recommendations will be more successful application <b>software</b> <b>package</b> implementations...|$|R
25|$|One of the {{elements}} of the package will be the <b>software</b> <b>package.</b> The <b>software</b> <b>package</b> is a package in itself, because it consists of the different software components that together form the product. In contrast with the overall <b>package,</b> the <b>software</b> <b>package</b> is always a technical package in which all the files needed are combined in order to run the software product. Another concept of the <b>software</b> <b>package</b> is the version. This keeps track of the modifications made to the software product. By relating it to the <b>software</b> <b>package</b> the vendor and the customer are able {{to keep track of the}} functionality and properties of the product the customer is using.|$|R
30|$|The {{following}} procedure {{requires a}} computer running Microsoft Windows and our symmetry-mismatch reconstruction <b>software</b> <b>package.</b> Unpacking the <b>software</b> <b>package</b> to a folder and setting {{a path to}} this folder in the Windows system are required before using the <b>software</b> <b>package.</b> This procedure assumes that users have experiences in cryo-EM image processing and single particle reconstruction.|$|R
40|$|A {{statistical}} {{user interface}} is an interface between a human user and a statistical <b>software</b> <b>package.</b> Whenever {{we use a}} statistical <b>software</b> <b>package</b> we want to solve a specific statistical problem. But very often at {{first it is necessary}} to learn specific things about the <b>software</b> <b>package.</b> Everyone of us knows about the ?religious wars? concerning the question which statistical software package/method is the best for a certain task; see Marron (1996) and Cleveland and Loader (1996) and related internet discussions. Experienced statisticians use a bunch of different statistical <b>software</b> <b>packages</b> rather than a single one; although all of the major companies (at least the marketing departments) tell us that we only need their <b>software</b> <b>package.</b> [...] ...|$|R
40|$|This work {{gives an}} {{overview}} of the overall equipment efficiency (OEE) and root cause analysis (RCA) methods. There are summarized parameters necessary to calculate and implement these methods. There has been {{an overview of}} plywood production line gluing process. This work describes overall equipment efficiency and root cause analysis implementation of “Latvijas Finieris” plywood production gluing line, data collection options using Wonderware System Platform, SQL <b>software</b> <b>packages.</b> Data analysis is implemented in several ways: graphs data analyzed with Wonderware Historian <b>software</b> <b>package,</b> logical data processing and calculation implemented through Wonderware System Platform and Wonderware MES <b>software</b> <b>packages,</b> graphical representation is realized with Wonderware Intouch <b>software</b> <b>package.</b> End-user data are available through Wonderware Information Studio <b>software</b> <b>package...</b>|$|R
40|$|Evaluating and {{selecting}} <b>software</b> <b>packages</b> {{that meet}} an organization's requirements {{is a difficult}} software engineering process. Selection of a wrong <b>software</b> <b>package</b> can {{turn out to be}} costly and adversely affect business processes. The aim {{of this paper is to}} provide a basis to improve the process of evaluation and selection of the <b>software</b> <b>packages.</b> This paper reports a systematic review of papers published in journals and conference proceedings. The review investigates methodologies for selecting <b>software</b> <b>packages,</b> <b>software</b> evaluation techniques, software evaluation criteria, and systems that support decision makers in evaluating <b>software</b> <b>packages.</b> The key findings of the review are: (1) analytic hierarchy process has been widely used for evaluation of the <b>software</b> <b>packages,</b> (2) there is lack of a common list of generic software evaluation criteria and its meaning, and (3) there is need to develop a framework comprising of software selection methodology, evaluation technique, evaluation criteria, and system to assist decision makers in software selection. (C) 200...|$|R
30|$|All {{numerical}} simulations and bifurcation diagrams (both one- and two-parameter) {{are constructed}} using the XPPAUT <b>software</b> <b>package</b> [26], using the Runge-Kutta integration method, and computer codes can be downloaded from the following website: [URL] The surface in Figure 9 was constructed using the AUTO <b>software</b> <b>package</b> [27]. All graphics were produced with the <b>software</b> <b>package</b> MATLAB.|$|R
30|$|This section {{presents}} the hardware design, software design, and choice technologies. The hardware {{is an open}} hardware and the <b>software</b> <b>packages</b> used are FLOSS (Free/Libre/Open Source <b>Software)</b> <b>packages.</b>|$|R
50|$|Dependency hell is a colloquial {{term for}} the {{frustration}} of some software users who have installed <b>software</b> <b>packages</b> which have dependencies on specific versions of other <b>software</b> <b>packages.</b>|$|R
40|$|In surveying, volume calculating is {{commonly}} used. Frequently we use cross-section method. Usually terestrical method {{is used to}} determine characteristic points of crosssections. Observations we make on field need to be processed in <b>software</b> <b>packages</b> in order to calculate volume of an object. The calculated volumes may {{vary depending on the}} density of measured cross-sections and selection of <b>software</b> <b>package.</b> In this thesis, we compared the course of processing in <b>software</b> <b>packages</b> and volume differences, which we obtained using different <b>software</b> <b>packages</b> and different density of measured cross-sections...|$|R
