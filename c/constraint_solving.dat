1222|1780|Public
2500|$|Constraint logic {{programming}} combines Horn clause {{logic programming}} with <b>constraint</b> <b>solving.</b> It extends Horn clauses by allowing some predicates, declared as constraint predicates, to occur as literals {{in the body}} of clauses. A constraint logic program is a set of clauses of the form: ...|$|E
2500|$|In 2008, several {{websites}} performed benchmark tests {{using the}} SunSpider JavaScript Benchmark tool {{as well as}} Google's own set of computationally intense benchmarks, which include ray tracing and <b>constraint</b> <b>solving.</b> [...] They unanimously reported that Chrome performed much faster than all competitors against which it had been tested, including Safari (for Windows), Firefox 3.0, Internet Explorer 7, Opera, and Internet Explorer 8. However, on October 11, 2010, independent tests of JavaScript performance, Chrome has been scoring just behind Opera's Presto engine since it was updated in version 10.5.|$|E
5000|$|Task Management under Change and Uncertainty: <b>Constraint</b> <b>Solving</b> Experience {{with the}} CALO Project, P. Berry, K. Myers, T. Uribe, and N. Yorke-Smith. Proceedings of CP'05 Workshop on <b>Constraint</b> <b>Solving</b> under Change and Uncertainty, Sitges, Spain, October 2005.|$|E
30|$|Line 17 executes LP-problem, which allocates {{the highest}} {{possible}} rates subject to capacity and fairness <b>constraints.</b> <b>Solving</b> the LP-problem (6), (7), (8), (9), optimal rate allocation with chosen paths is performed.|$|R
30|$|We {{solved the}} binary integer model using Excel solver {{routines}} {{on a personal}} laptop computer. In spite of {{the large number of}} binary variables and <b>constraints,</b> <b>solving</b> the model took us less than four minutes.|$|R
5000|$|<b>Constraint</b> programming: <b>solving</b> {{algorithms}} {{for particular}} classes of inequalities ...|$|R
5000|$|SWI Prolog a free Prolog system {{containing}} several libraries for <b>constraint</b> <b>solving</b> ...|$|E
50|$|Techniques such as {{abstract}} interpretation, <b>constraint</b> <b>solving,</b> {{and type}} systems {{may be used}} for control-flow analysis.|$|E
50|$|Google OR Tools {{provides}} {{programming language}} wrappers for Operational Research {{tools such as}} optimisation and <b>constraint</b> <b>solving.</b>|$|E
50|$|The ILP {{formulation}} {{listed above}} {{can be solved}} using a traditional ILP solver. This is typically done by temporarily relaxing the integer <b>constraints,</b> <b>solving</b> the problem optimally, and converting the real solution to an integer solution. Additional constraints can be added and the process repeated indefinitely using a branch and bound approach.|$|R
40|$|In D= 3, 4, 6 and 10 space-time {{dimensions}} considered is {{a string}} model invariant under transformations of N= 1 space-time supersymmetry and n=D- 2 local worldsheet supersymmetry with the both Virasoro <b>constraints</b> <b>solved</b> in the twistor form. The twistor solution survives in a modified form {{even in the}} presence of the heterotic fermions...|$|R
40|$|Abstract. Consistency {{maintenance}} {{is a key}} problem in collaborative product design. Firstly, based on product design theory, the semantics relationships described by XML among components in collaborative product design system are made. Secondly, the associated components are determined through backward and forward semantics reasoning. Finally, the data is updated by <b>constraints</b> <b>solving,</b> and the consistency {{maintenance is}} achieved...|$|R
5000|$|As the {{software}} development tool, C3D incorporates four CAD modules: 3D modeling, 3D <b>constraint</b> <b>solving,</b> 3D visualization, and 3D file conversions: ...|$|E
50|$|Logtalk {{has been}} used to process STEP data models used to {{exchange}} product manufacturing information. It has also been used to implement a reasoning system that allows preference reasoning and <b>constraint</b> <b>solving.</b>|$|E
50|$|Cassowary is an {{incremental}} <b>constraint</b> <b>solving</b> toolkit that efficiently solves systems of linear equalities and inequalities. Constraints may be either requirements or preferences. Client code specifies the constraints to be maintained, and the solver updates the constrained variables to have values that satisfy the constraints.|$|E
40|$|Abstract: In D= 3, 4, 6 and 10 space [...] time {{dimensions}} considered is {{a string}} model invariant under transformations of N= 1 space [...] time supersymmetry and n=D- 2 local worldsheet supersymmetry with the both Virasoro <b>constraints</b> <b>solved</b> in the twistor form. The twistor solution survives in a modified form {{even in the}} presence of the heterotic fermions...|$|R
50|$|NASTRAN was {{designed}} {{from the beginning}} to consist of several modules. A module is a collection of FORTRAN subroutines designed to perform a specific task - processing model geometry, assembling matrices, applying <b>constraints,</b> <b>solving</b> matrix problems, calculating output quantities, conversing with the database, printing the solution, and so on. The modules are controlled by an internal language called the Direct Matrix Abstraction Program (DMAP).|$|R
40|$|In $D= 3, 4, 6 $ and 10 space [...] time {{dimensions}} considered is {{a string}} model invariant under transformations of $N= 1 $ space [...] time supersymmetry and $n=D- 2 $ local worldsheet supersymmetry with the both Virasoro <b>constraints</b> <b>solved</b> in the twistor form. The twistor solution survives in a modified form {{even in the}} presence of the heterotic fermions. Comment: 11 pages, latex, report no. Goteborg-ITP- 94 - 1...|$|R
5000|$|Constraint logic {{programming}} combines Horn clause {{logic programming}} with <b>constraint</b> <b>solving.</b> It extends Horn clauses by allowing some predicates, declared as constraint predicates, to occur as literals {{in the body}} of clauses. A constraint logic program is a set of clauses of the form: ...|$|E
5000|$|<b>Constraint</b> <b>solving</b> engines were {{developed}} in the 1980s and 1990s. They can handle the full set of configuration rules to alleviate the problem of combinatorial explosion but can be complex and difficult to maintain as rules have to be written to accommodate the intended use ...|$|E
5000|$|Absys was {{an early}} {{declarative}} programming language from the University of Aberdeen. [...] It anticipated a number of features of Prolog such as negation as failure, aggregation operators, {{the central role of}} backtracking and <b>constraint</b> <b>solving.</b> [...] Absys was the first implementation of a logic programming language.|$|E
40|$|Local {{propagation}} {{is often}} used in graphical user interfaces to <b>solve</b> <b>constraint</b> systems that describe structures and layouts of figures. However, algorithms based on local propagation cannot <b>solve</b> simultaneous <b>constraint</b> systems because local propagation must <b>solve</b> <b>constraints</b> individually. We propose the `DETAIL' algorithm, which efficiently <b>solves</b> systems of <b>constraints</b> with strengths, even if they must be solved simultaneously, by `dividing' {{them as much as}} possible. In addition to multi-way constraints, it handles various other types of constraints, for example, <b>constraints</b> <b>solved</b> with the least squares method. Furthermore, it unifies the treatment of different types of constraints in a single system. We implemented a prototype constraint solver based on this algorithm, and evaluated its performance. 1 Introduction Local propagation is an efficient constraint satisfaction algorithm that takes advantage of potential locality of constraint systems. It {{is often used}} in graphical u [...] ...|$|R
40|$|We give a new {{algorithmic}} {{solution to}} the well-known five-point relative pose problem. Our approach does not deal with the famous cubic constraint on an essential matrix. Instead, we use the Cayley representation of rotations {{in order to obtain}} a polynomial system from epipolar <b>constraints.</b> <b>Solving</b> that system, we directly get relative rotation and translation parameters of the cameras in terms of roots of a 10 th degree polynomial. Comment: 9 pages, 5 figure...|$|R
40|$|A copula {{density is}} the joint {{probability}} density function (PDF) of a random vector with uniform marginals. An approach to bivariate copula density estimation is introduced {{that is based}} on a maximum penalized likelihood estimation (MPLE) with a total variation (TV) penalty term. The marginal unity and symmetry constraints for copula density are enforced by linear equality constraints. The TV-MPLE subject to linear equality <b>constraints</b> is <b>solved</b> by an augmented Lagrangian and operator-splitting algorithm. It offers an order of magnitude improvement in computational efficiency over another TV-MPLE method without <b>constraints</b> <b>solved</b> by log-barrier method for second order cone program. A data-driven selection of the regularization parameter is through K-fold cross-validation (CV). Simulation and real data application show the effectiveness of the proposed approach. The MATLAB code implementing the methodology is available online...|$|R
50|$|Instead {{of logic}} programming, {{constraints}} can be mixed with functional programming, term rewriting, and imperative languages.Programming languages with built-in support for constraints include Oz (functional programming) and Kaleidoscope (imperative programming). Mostly, constraints are implemented in imperative languages via <b>constraint</b> <b>solving</b> toolkits, which are separate libraries for an existing imperative language.|$|E
50|$|The Max Planck Institute for Informatics (German: Max-Planck-Institut f√ºr Informatik, {{abbreviated}} MPI-INF or MPII) is {{a research}} institute in computer science {{with a focus on}} algorithms and their applications in a broad sense. It hosts fundamental research (algorithms and complexity, programming logics) as well a research for various application domains (computer graphics, geometric computation, <b>constraint</b> <b>solving,</b> computational biology). It is part of the Max-Planck-Gesellschaft, Germany's largest society for fundamental research.|$|E
50|$|Problems, however, {{arise when}} {{multiple}} constraining forces act on each particle. One {{way to solve}} this is to loop through every point in a simulation, so that at every point the constraint relaxation of the last is already used {{to speed up the}} spread of the information. In a simulation this may be implemented by using small time steps for the simulation, using a fixed number of <b>constraint</b> <b>solving</b> steps per time step, or solving constraints until they are met by a specific deviation.|$|E
40|$|A two-form {{formulation}} for the N= 2 vector-tensor multiplet {{is constructed}} using superfield methods in central charge superspace. The N= 2 non-Abelian standard supergauge multiplet in central charge superspace is also discussed, as {{is with the}} associated Chern-Simons form. We give the <b>constraints,</b> <b>solve</b> the Bianchi identities and present the action for a theory of the vector-tensor multiplet coupled to the non-Abelian supergauge multiplet via the Chern-Simons form. Comment: 16 pages, LaTeX 2 e with AMS-LaTe...|$|R
40|$|We propose an {{implementation}} of a functional logic language with parametric order sorted types by translating typed lazy narrowing into Prolog, and establishing a reasonable strategy of combination of data and type <b>constraints</b> <b>solving.</b> By means of this translation, we describe how types can be used at run-time to prune the search space of solutions of a goal. Moreover, we present type inference and checking compile-time tools for the language showing its usefulness for improving computations...|$|R
40|$|Abstract. A two-form {{formulation}} for the N = 2 vector-tensor multiplet {{is constructed}} using superfield methods in central charge superspace. The N = 2 non-Abelian standard supergauge multiplet in central charge superspace is also discussed, as {{is with the}} associated Chern-Simons form. We give the <b>constraints,</b> <b>solve</b> the Bianchi identities and present the action for a theory of the vector-tensor multiplet coupled to the non-Abelian supergauge multiplet via the Chern-Simons form. PACS numbers: 11. 30. Pb, 11. 15. -q 1...|$|R
5000|$|Dynamic {{symbolic}} execution. In {{symbolic execution}} programs are executed and monitored symbolically, that is, without concrete inputs. One symbolic {{execution of the}} system may cover a large set of concrete inputs. Off-the-shelf <b>constraint</b> <b>solving</b> or satisfiability checking techniques are often used to drive symbolic executions or to systematically explore their space. When the underlying satisfiability checkers cannot handle a choice point, then a concrete input can be generated to pass that point; this combination of concrete and symbolic execution is {{also referred to as}} concolic execution.|$|E
50|$|Modern SAT solvers {{are also}} having {{significant}} impact on the fields of software verification, <b>constraint</b> <b>solving</b> in artificial intelligence, and operations research, among others. Powerful solvers are readily available as free and open source software. In particular, the conflict-driven MiniSAT, which was relatively successful at the 2005 SAT competition, only has about 600 lines of code. A modern Parallel SAT solver is ManySAT. It can achieve super linear speed-ups on important classes of problems. An example for look-ahead solvers is march_dl, which won a prize at the 2007 SAT competition.|$|E
5000|$|In 2008, several {{websites}} performed benchmark tests {{using the}} SunSpider JavaScript Benchmark tool {{as well as}} Google's own set of computationally intense benchmarks, which include ray tracing and <b>constraint</b> <b>solving.</b> [...] They unanimously reported that Chrome performed much faster than all competitors against which it had been tested, including Safari (for Windows), Firefox 3.0, Internet Explorer 7, Opera, and Internet Explorer 8. However, on October 11, 2010, independent tests of JavaScript performance, Chrome has been scoring just behind Opera's Presto engine since it was updated in version 10.5.|$|E
40|$|In {{the present}} paper we {{investigate}} noncommutativity of $D 9 $ and $D 5 $-brane world-volumes embedded in space-time of type IIB superstring theory. Boundary conditions, which preserve half of the initial supersymmetry, are treated as canonical <b>constraints.</b> <b>Solving</b> the <b>constraints</b> we obtain original coordinates {{in terms of the}} effective coordinates and momenta. Presence of momenta induces noncommutativity of string endpoints. We show that noncommutativity relations are connected by N= 1 supersymmetry transformations and noncommutativity parameters are components of N= 1 supermultiplet...|$|R
40|$|LIFE uses {{matching}} on order-sorted feature {{structures for}} passing arguments to functions. As opposed to unication which amounts to normalizing a conjunction of <b>constraints,</b> <b>solving</b> a matching problem consists of deciding whether a constraint (guard) or its negation are entailed by the context. We give {{a complete and}} consistent set of rules for entailment and disentailment of order-sorted feature constraints. These rules are directly usable for relative simplification, a general proof-theoretic method for proving guards in concurrent constraint logic languages using guarded rules...|$|R
5000|$|Constraint {{programming}} {{can be used}} {{to select}} test cases satisfying specific <b>constraints</b> by <b>solving</b> a set of constraints over a set of variables. The system is described by the means of <b>constraints.</b> [...] <b>Solving</b> the set of constraints can be done by Boolean solvers (e.g. SAT-solvers based on the Boolean satisfiability problem) or by numerical analysis, like the Gaussian elimination. A solution found by solving the set of constraints formulas can serve as a test cases for the corresponding system.|$|R
