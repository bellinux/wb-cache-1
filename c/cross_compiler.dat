63|28|Public
25|$|A cross {{assembler}} (see also <b>cross</b> <b>compiler)</b> is an assembler that is {{run on a}} computer or operating system (the host system) of a different type from the system on which the resulting code is to run (the target system). Cross-assembling facilitates the development of programs for systems {{that do not have}} the resources to support software development, such as an embedded system. In such a case, the resulting object code must be transferred to the target system, either via read-only memory (ROM, EPROM, etc.) or a data link using an exact bit-by-bit copy of the object code or a text-based representation of that code, such as Motorola S-record or Intel HEX.|$|E
500|$|The {{development}} {{team did}} {{not have access to}} official Nintendo documents, and their knowledge of the NES's hardware came from reverse engineering. They decided to have recognisable household environments, and tables were a favourite, although the NES's limited graphics capabilities meant there was some repetition. Artist Paul Perrot converted the California Buggy Boys graphics using Deluxe Paint and a <b>cross</b> <b>compiler.</b> According to Graham, the team tried to keep the tracks short, as they were considered more enjoyable. Graham stated that the artificial intelligence (AI) is basic by modern standards, and that it was difficult to replicate the multiplayer experience in single-player mode. The AI consisted of invisible arrows, which directed computer-controlled vehicles. Graham stated that split screen was not viable on the NES, and that the single-screen system was something that he was eager to try. He further stated that he was [...] "very happy" [...] with the multiplayer mode, saying it is {{the best part of the}} game and made the single player mode [...] "boring" [...] in comparison. He was very pleased when Richard Darling stated that Micro Machines is the best game they had ever made. There was another multiplayer mode in development, but did not make it: this would have involved playing over a network. This was shown at the Consumer Electronics Show.|$|E
5000|$|The gcc <b>cross</b> <b>compiler</b> from machine A {{to machine}} B (3) {{is used to}} build the gcc <b>cross</b> <b>compiler</b> from machine B to machine C (4) ...|$|E
5000|$|Compiling {{native code}} for emulators for older now-obsolete {{platforms}} like the Commodore 64 or Apple II by enthusiasts who use <b>cross</b> <b>compilers</b> {{that run on}} a current platform (such as Aztec C's MS-DOS 6502 <b>cross</b> <b>compilers</b> running under Windows XP).|$|R
5000|$|The first {{business}} sold both native <b>compilers</b> and <b>cross</b> <b>compilers,</b> {{with the}} latter more common since Ada was primarily used in the embedded systems realm. One of the first <b>cross</b> <b>compilers</b> that DDC-I developed was from VAX/VMS to the Intel 8086 and Intel 80286; the effort was already underway by early 1985. [...] It began as {{a joint venture with}} the Italian defense electronics company Selenia that would target both their MARA-860 and MARA-286 multi-microprocessor computers, based on the 8086 and 80286 architectures, and generic embedded and OS-hosting 8086 and 80286 systems. [...] This work was the start of what would become the largest-selling product line for the firm. JwC3PWU. DDC-I developed a reputation for quality Ada <b>cross</b> <b>compilers</b> and runtime systems for Intel 80x86 processors.|$|R
5000|$|GLBasic: A BASIC dialoect and {{compiler}} {{that generates}} C++ code. It includes <b>cross</b> <b>compilers</b> for many platforms and supports numerous platform (Windows, Mac, Linux, Android,iOS and some exotic handhelds).|$|R
50|$|A <b>cross</b> <b>{{compiler}}</b> is a compiler {{capable of}} creating executable code for a platform {{other than the}} one on which the compiler is running. For example, a compiler that runs on a Windows 7 PC but generates code that runs on Android smartphone is a <b>cross</b> <b>compiler.</b>|$|E
50|$|In {{this version}} Embarcadero {{introduces}} two new compilers for Delphi mobile applications, the Delphi <b>Cross</b> <b>Compiler</b> for the iOS Simulator and the Delphi <b>Cross</b> <b>Compiler</b> for the iOS Devices. These compilers significantly {{differ from the}} Win64 desktop compiler as they do not support COM, inline assembly of CPU instructions, and six older string types such as PChar.|$|E
50|$|A <b>cross</b> <b>compiler</b> is {{necessary}} to compile for multiple platforms from one machine. A platform could be infeasible for a compiler to run on, such as for the microcontroller of an embedded system because those systems contain no operating system. In paravirtualization one machine runs many operating systems, and a <b>cross</b> <b>compiler</b> could generate an executable {{for each of them}} from one main source.|$|E
50|$|The {{programmer}} usually edits and compiles the embedded system's code on {{the host}} system, as well. The host system will have special compilers that produce executable code for the embedded system, termed <b>cross</b> <b>compilers</b> or <b>cross</b> assemblers.|$|R
5000|$|In October 1991, it was {{announced}} that DDC-I had acquired the Ada and JOVIAL language embedded systems business of InterACT, which had become a venture of Advanced Computer Techniques. [...] This wholly owned New York-based entity was briefly named DDC-Inter before being subsumed into DDC-I proper. This brought Ada <b>cross</b> <b>compilers</b> for the MIL-STD-1750A and MIPS R3000 processors, and JOVIAL language <b>cross</b> <b>compilers</b> for the MIL-STD-1750A and Zilog Z8002 into the product line. The MIPS product was one which DDC-I emphasised, with engineering efforts that included automatic recognition of certain tasking optimizations, and work in the U.S. Air Force-sponsored Common Ada Runtime System (CARTS) project towards providing standard interfaces into Ada runtime environments.|$|R
50|$|The {{output of}} a {{compiler}} that produces code for a virtual machine (VM) {{may or may}} not be executed on the same platform as the compiler that produced it. For this reason such compilers are not usually classified as native or <b>cross</b> <b>compilers.</b>|$|R
50|$|IGEP SDK Yocto Toolchain: {{provides}} {{all necessary}} tools like a <b>cross</b> <b>compiler,</b> embedded libraries, etc. to compile program sources for IGEP devices.|$|E
5000|$|The gcc native {{compiler}} for machine A (2) {{is used to}} build the gcc <b>cross</b> <b>compiler</b> from machine A to machine B (3) ...|$|E
5000|$|The {{fundamental}} {{use of a}} <b>cross</b> <b>compiler</b> is {{to separate}} the build environment from target environment. This is useful {{in a number of}} situations: ...|$|E
5000|$|By {{the early}} 1990s, DDC-I offered Ada native compilers for VAX/VMS, Sun-3 and SPARC under SunOS, and Intel 80386 under UNIX System V and OS/2, and offered <b>cross</b> <b>compilers</b> for the Motorola 680x0 and Intel i860 in {{addition}} to the abovementioned targets.|$|R
5000|$|Microsoft [...]NET {{applications}} for target platforms like Windows Mobile on the ARM architecture cross-compile on Windows machines {{with a variety}} of processors and Microsoft also offer emulators and remote deployment environments that require very little configuration, unlike the <b>cross</b> <b>compilers</b> in days gone by or on other platforms.|$|R
5000|$|The first {{generation}} TeleSoft compiler was very slow, but compilation speeds improved considerably with the TeleGen2 product. TeleSoft sold both native <b>compilers</b> and <b>cross</b> <b>compilers</b> for various embedded systems architectures.The customer {{base for the}} compiler grew to include many large corporations, including IBM, Sun Microsystems, Intel, Cray Research, Motorola, and Unisys.|$|R
5000|$|Meanwhile, InterACT {{continued}} {{to develop and}} sell the Ada and JOVIAL products on their own. In 1988, the company made a licensing arrangement with MIPS Computer Systems {{to gain access to}} the compiler back end technology for the MIPS R3000 RISC microprocessor, and commenced work on an Ada <b>cross</b> <b>compiler</b> system for the R3000. [...] First validated and released in late 1989, one of the first to do so, the Ada <b>cross</b> <b>compiler</b> product for MIPS R3000 made a number of sales.|$|E
50|$|A <b>cross</b> <b>compiler</b> runs in one {{environment}} but produces {{object code}} for another. Cross compilers {{are used for}} embedded development, where the target computer has limited capabilities.|$|E
5000|$|A {{program that}} {{translates}} into an object code format that is not supported on the compilation machine is called a <b>cross</b> <b>compiler</b> and is commonly used to prepare code for embedded applications.|$|E
50|$|Object Pascal (Embarcadero Delphi) {{is still}} used for {{developing}} Windows applications {{but also has}} the ability to cross compile the same code to Mac, iOS and Android. Another cross-platform version called Free Pascal, with the Lazarus IDE, is popular with Linux users since it also offers write once, compile anywhere development. CodeTyphon is a Lazarus distribution with more preinstalled packages and <b>cross</b> <b>compilers.</b>|$|R
50|$|Use {{of virtual}} {{machines}} (such as Java's JVM) resolves {{some of the}} reasons for which <b>cross</b> <b>compilers</b> were developed. The virtual machine paradigm allows the same compiler output to be used across multiple target systems, although this is not always ideal because virtual machines are often slower and the compiled program can only be run on computers with that virtual machine.|$|R
50|$|In addition, <b>cross</b> <b>compilers</b> {{began to}} be developed, with DDC doing one from VAX/VMS to the Intel 8086, {{beginning}} what would become a successful line of products. In December 1984, DDC {{signed a contract with}} Advanced Computer Techniques in New York, based on a license royalty arrangement. They began using the DDC front end to develop a cross-compiler for the MIL-STD-1750A architecture, which would become a reasonably successful product with a number of customers.|$|R
5000|$|Bootstrapping {{to a new}} platform. When {{developing}} {{software for}} a new platform, or the emulator of a future platform, one uses a <b>cross</b> <b>compiler</b> to compile necessary tools such as the operating system and a native compiler.|$|E
50|$|Cross compilers {{are not to}} be {{confused}} with source-to-source compilers. A <b>cross</b> <b>compiler</b> is for cross-platform software development of binary code, while a source-to-source compiler translates from one programming language to another in text code. Both are programming tools.|$|E
50|$|The {{suite of}} tools is {{currently}} {{the only means of}} building a working copy of RISC OS, although it is ultimately intended that this will also be possible using a <b>cross</b> <b>compiler,</b> e.g. using the free software GCC system.|$|E
50|$|MSC {{took over}} where Aztec C86 left off. The market share for C compilers {{had turned to}} <b>cross</b> <b>compilers</b> which took {{advantage}} of the latest and greatest Windows features, offered C and C++ in a single bundle, and still supported MS-DOS systems that were already a decade old, and the smaller companies that produced compilers like Aztec C could no longer compete and either turned to niche markets like embedded systems or disappeared.|$|R
50|$|From a {{software}} development perspective, {{there is little}} difference between compiling software for a desktop PC or compiling for an x86 PC/104 stack. Software can be developed using standard x86 compilers (e.g. Visual Studio if the PC/104 system is running Windows). There is typically no need for specialized development tools, such as <b>cross</b> <b>compilers,</b> Board Support Packages, or JTAG debuggers. This is {{a significant departure from}} non-x86 embedded system platforms, which often require a development toolchain from the board manufacturer.|$|R
40|$|The Amsterdam Compiler Kit is an {{integrated}} collection of {{programs designed to}} simplify the task of producing portable (<b>cross)</b> <b>compilers</b> and interpreters. For each language to be compiled, a program (called a front end) must be written to translate the source program into a common intermediate code. This intermediate code can be optimized and then either directly interpreted or translated to the assembly language of the desired target machine. The paper describes the various pieces of the tool kit in som...|$|R
5000|$|Pic Micro Pascal [...] PMP {{is a free}} Pascal <b>cross</b> <b>compiler</b> for PIC microcontrollers. It is {{intended}} {{to work with the}} Microchip Technology MPLAB suite installed; it has its own IDE (Scintilla-based) and it is a highly optimized compiler.|$|E
50|$|The {{end-result}} <b>cross</b> <b>compiler</b> (4) {{will not}} be able to run on build machine A; instead it would run on machine B to compile an application into executable code that would then be copied to machine C and executed on machine C.|$|E
50|$|Software {{development}} requires {{use of a}} <b>cross</b> <b>compiler,</b> {{which runs}} on a computer but produces executable code for the target device. Debugging requires use of an in-circuit emulator, JTAG or SWD. Software developers often {{have access to the}} complete kernel (OS) source code.|$|E
50|$|The I, II, III, -286 and -86 {{variants}} {{are intended}} as standalone real-time operating systems. A number of development utilities and applications {{were made for}} iRMX, such as compilers (PL/M, Fortran, C), an editor (Aedit), process and data acquisition applications and so on. <b>Cross</b> <b>compilers</b> hosted on the VAX/VMS system were also made available by Intel. iRMX III is still supported today and {{has been used as}} the core technology for newer real-time virtualization RTOS products including iRMX for Windows and INtime.|$|R
5000|$|TLD then {{entered the}} new {{market for the}} Ada {{programming}} language, which the U.S. Department of Defense had designated as the successor to JOVIAL and other special-purpose languages in use by the military.TLD made embedded system Ada <b>cross</b> <b>compilers</b> targeting the MIL-STD-1750A, hosted on VAX/VMS {{as well as several}} Unix-based platforms. [...] The Ada compilers shared the same associated tools as the JOVIAL product. TLD also made a native Ada compiler for the Data General MV/32 20000 under AOS/VS II.|$|R
50|$|The {{compiler}} {{was subsequently}} repackaged by Microsoft under a distribution agreement as Microsoft C version 2.0. Microsoft {{developed their own}} C compiler that was released in April 1985 as Microsoft C Compiler 3.0. Lattice was purchased by SAS Institute in 1987 and rebranded as SAS/C. After this, support for other platforms dwindled until compiler development ceased for all platforms except IBM mainframes. The product is still available in versions that run on other platforms, but these are <b>cross</b> <b>compilers</b> that only produce mainframe code.|$|R
