206|1391|Public
2500|$|The Mackenzie {{class was}} an {{offshoot}} of the [...] design. Initially planned to be an improved version of the design, budget difficulties led to the Canadian government ordering a repeat of the previous , with improved habitability and better pre-wetting, bridge and weatherdeck fittings to better deal with extreme cold. The original intention was to give the Mackenzie <b>class</b> <b>variable</b> depth sonar during construction, but would have led to delays of up to a year in construction time, which the navy could not accept.|$|E
2500|$|The system ATR0 adds to ACA0 an axiom which states, informally, {{that any}} arithmetical {{functional}} (meaning any arithmetical formula {{with a free}} number variable n and a free <b>class</b> <b>variable</b> X, seen as the operator taking X to the set of n satisfying the formula) can be iterated transfinitely along any countable well ordering starting with any set. [...] ATR0 is equivalent over ACA0 {{to the principle of}} Σ11 separation. ATR0 is impredicative, and has the proof-theoretic ordinal , the supremum of that of predicative systems.|$|E
2500|$|In Fisher's (1987) {{description}} of COBWEB, the measure {{he uses to}} evaluate {{the quality of the}} hierarchy is Gluck and Corter's (1985) category utility (CU) measure, which he re-derives in his paper. [...] The motivation for the measure is highly similar to the [...] "information gain" [...] measure introduced by Quinlan for decision tree learning. [...] It has previously been shown that the CU for feature-based classification [...] {{is the same as the}} mutual information [...] between the feature variables and the <b>class</b> <b>variable</b> (Gluck & Corter, 1985; Corter & Gluck, 1992), and since this measure is much better known, we proceed here with mutual information as the measure of category [...] "goodness".|$|E
5000|$|Metaclass - {{initializing}} <b>class</b> <b>variables,</b> instance creation messages ...|$|R
5000|$|Works {{with any}} parameterizable feature (<b>class</b> <b>variables,</b> cluster detection, etc..) ...|$|R
50|$|The {{two kinds}} of {{variables}} commonly used in Smalltalk are instance variables and temporary variables. Other variables and related terminology depend on the particular implementation. For example, VisualWorks has <b>class</b> shared <b>variables</b> and namespace shared variables, while Squeak and many other implementations have <b>class</b> <b>variables,</b> pool variables and global variables.|$|R
5000|$|In this C++ example, the <b>class</b> <b>variable</b> [...] is {{incremented}} on each {{call to the}} constructor, so that [...] always {{holds the}} number of Requests that have been constructed, and each new Request object is given a [...] in sequential order. Since [...] is a <b>class</b> <b>variable,</b> {{there is only one}} object in contrast, each Request object contains its own distinct [...] field.|$|E
5000|$|This {{means that}} under the above {{independence}} assumptions, the conditional distribution over the <b>class</b> <b>variable</b> [...] is: ...|$|E
5000|$|The [...] class itself doesn't do {{anything}} here, The <b>class</b> <b>variable</b> [...] is a Dictionary/Map used to store [...] instances by [...]|$|E
50|$|Initialization: invokes Java {{code that}} initializes <b>class</b> <b>variables</b> to their proper {{starting}} values.|$|R
5000|$|Preparation: allocates {{memory for}} <b>class</b> <b>variables</b> and {{initializing}} the memory to default values ...|$|R
25|$|Fields, or <b>class</b> <b>variables,</b> can be {{declared}} inside the class body to store data.|$|R
50|$|In {{object-oriented}} programming with classes, a <b>class</b> <b>variable</b> is a variable defined {{in a class}} of which a single copy exists, regardless of how many instances of the class exist.|$|E
5000|$|... struct Request { static int count; int number; Request (...) { number = count; // modifies the {{instance}} variable [...] "this->number" [...] ++count; // modifies the <b>class</b> <b>variable</b> [...] "Request::count" [...] }};int Request::count = 0; ...|$|E
5000|$|... struct Request { static int count1; // {{variable}} {{name is not}} of importance int number; Request (...) { number = count1; // modifies the instance variable [...] "this->number" [...] ++count1; // modifies the <b>class</b> <b>variable</b> [...] "Request::count1" [...] }};int Request::count1 = 0; ...|$|E
40|$|Does {{simultaneous}} {{classification of}} multiple target variables perform better than building a classifier {{for each of}} the target variables independently? To answer this question we implemented a set of classification techniques for multi-target classification and integrated them into Orange Multitarget, an add-on for Orange, an open-source machine learning framework. Performance of both multi-target (clustering trees, neural networks, PLS) and single-target techniques (e. g. random forests) was tested on multiple datasets, which included datasets with binary <b>class</b> <b>variables</b> and datasets with multinomial <b>class</b> <b>variables.</b> The results do not show an advantage for either of the techniques. We have also observed that increased correlation between <b>class</b> <b>variables</b> does not increase the performance of multi-target techniques when compared to single-target techniques...|$|R
5000|$|Fields, or <b>class</b> <b>variables,</b> can be {{declared}} inside the class body to store data.class Foo{ double foo;} ...|$|R
5000|$|<b>Class</b> <b>variables</b> - {{belong to}} the class as a whole; {{there is only one}} copy of each one ...|$|R
5000|$|In {{object-oriented}} programming with classes, an instance variable is a variable defined {{in a class}} (i.e. a member variable [...] ), for which each instantiated object of the class has a separate copy, or instance. An instance variable {{is similar to a}} <b>class</b> <b>variable.</b>|$|E
50|$|A <b>class</b> <b>variable</b> {{is not an}} {{instance}} variable. It is a special type of class attribute (or class property, field, or data member). The same dichotomy between instance and class members applies to methods ("member functions") as well; a class may have both instance methods and class methods.|$|E
5000|$|In {{the example}} above, class [...] {{contains}} two properties, [...] and [...] The [...] property is an integer {{that can be}} read (get) and written (set). Similarly, the [...] property is a string that can also be read and modified, but its value is stored in a separate (private) <b>class</b> <b>variable</b> [...]|$|E
5000|$|Local or <b>class</b> <b>variables</b> must be {{preceded by}} [...] (indicates an {{immutable}} variable) or [...] (indicates a mutable variable).|$|R
50|$|In some languages, <b>class</b> <b>variables</b> and <b>class</b> {{methods are}} either statically resolved, not via dynamic dispatch, or their memory statically {{allocated}} at compile time (once {{for the entire}} <b>class,</b> as static <b>variables),</b> not dynamically allocated at run time (at every instantiation of an object). In other cases, however, either or both of these are dynamic. For example, if classes can be dynamically defined (at run time), <b>class</b> <b>variables</b> of these <b>classes</b> are allocated dynamically when the class is defined, and in some languages class methods are also dispatched dynamically.|$|R
25|$|The system ACA0 is a {{conservative}} extension of first-order arithmetic (or first-order Peano axioms), defined as the basic axioms, plus the first order induction axiom scheme (for all formulas φ involving no <b>class</b> <b>variables</b> at all, bound or otherwise), {{in the language of}} first order arithmetic (which does not permit <b>class</b> <b>variables</b> at all). In particular it has the same proof-theoretic ordinal ε0 as first-order arithmetic, owing to the limited induction schema.|$|R
5000|$|There {{was some}} support for Design by Contract: Oak had assertions whereby <b>Class</b> <b>variable</b> could be {{constrained}} and the constraints were enforced at entry and exit of every public and protected method of the class. Methods could also have their own pre-conditions and post-conditions, which were inherited but not redefinable in a subclass.|$|E
50|$|Multifactor {{dimensionality}} reduction (MDR) is {{a machine}} learning approach for detecting and characterizing combinations of attributes or independent variables that interact to influence a dependent or <b>class</b> <b>variable.</b> MDR was {{designed specifically to}} identify nonadditive interactions among discrete variables that influence a binary outcome and is considered a nonparametric and model-free alternative to traditional statistical methods such as logistic regression.|$|E
5000|$|In this C++ example, the {{instance}} variable [...] is {{a copy of}} the <b>class</b> <b>variable</b> [...] where each instance constructed is assigned a sequential value of [...] before it is incremented. Since [...] is an {{instance variable}}, each [...] object contains its own distinct value; in contrast, there is only one object [...] available to all instances with the same value.|$|E
5000|$|Methods and <b>Class</b> <b>Variables</b> {{are grouped}} into classes (by PHP), {{which are in}} turn grouped into {{packages}} in a Class DocBlock ...|$|R
40|$|In principle, {{units of}} {{personality}} {{may be of}} two varieties: dimensional variables, which involve continuously distributed differences in degree, and <b>class</b> <b>variables,</b> which involve discretely distributed differences in kind. There exists, however, a prevailing and rarely questioned assumption that the units of personality are continuous dimensions and an accompanying prejudice against <b>class</b> <b>variables.</b> We examine this prejudice, the arguments that generated it, and those that uphold it. We conclude that these arguments are applicable to <b>class</b> <b>variables</b> as they often have been explicated, in phenetic terms; by contrast, genetically explicated <b>class</b> <b>variables</b> are not vulnerable to these arguments. We propose criteria for conjecturing and present methods for corroborating the existence of <b>class</b> <b>variables</b> in personality. Specifically, we test a class model of a construct whose conceptual status makes it reasonable to evaluate {{whether or not the}} differences between individuals represented by this construct constitute discrete classes. Finally, we examine the implications for conceptualizing and investigating the nature and origins of personality. As a psychological concept, personality re-fers to regularities and consistencies in the behavior of individuals and to structures and processes that underlie these regularities and consistencies. Such phenomena, {{to the extent that they}} exist, ought to distinguish individuals from other individuals and to render their actions predictable. Typically, in personality theories, these distinguishing features have been treated as comparative individual differ-ences on the assumption that one can mean-The research and preparation of this manuscript wer...|$|R
5000|$|Class methods - {{belong to}} the class {{as a whole and}} have access only to <b>class</b> <b>variables</b> and inputs from the {{procedure}} call ...|$|R
50|$|Consider the {{following}} simple example using the exclusive OR (XOR) function. XOR {{is a logical}} operator that is commonly used in data mining and machine learning {{as an example of}} a function that is not linearly separable. The table below represents a simple dataset where the relationship between the attributes (X1 and X2) and the <b>class</b> <b>variable</b> (Y) is defined by the XOR function such that Y = X1 XOR X2.|$|E
50|$|Optimal {{discriminant}} analysis may {{be thought of}} as a generalization of Fisher's linear {{discriminant analysis}}. Optimal discriminant analysis is an alternative to ANOVA (analysis of variance) and regression analysis, which attempt to express one dependent variable as a linear combination of other features or measurements. However, ANOVA and regression analysis give a dependent variable that is a numerical variable, while optimal discriminant analysis gives a dependent variable that is a <b>class</b> <b>variable.</b>|$|E
5000|$|In {{object-oriented}} programming, {{there is}} also the concept of a static member variable, which is a [...] "class variable" [...] of a statically defined class, i.e., a member variable of a given class which is shared across all instances (objects), and is accessible as a member variable of these objects. A <b>class</b> <b>variable</b> of a dynamically defined class, in languages where classes can be defined at run time, is allocated when the class is defined and is not static.|$|E
40|$|This paper {{shows how}} {{an attempt at}} a uniform and {{reflective}} definition resulted in an open-ended system supporting ObjVlisp, which we use to simulate object-oriented language extensions. We propose to unify Smalltalk classes and their terminal instances. This unification allows us to treat a class as a “first class citizen”, to give a circular definition of the first metaclass, to access to the metaclass level and finally to control the instantiation link. Because each object is an instance of another one and because a metaclass is a real class inheriting from another one, the metaclass links can be created indefinitely. This uniformity allows us to define the <b>class</b> <b>variables</b> at the metalevel thus suppressing the Smalltalk- ambiguity between <b>class</b> <b>variables</b> and instance variables: in our model the instance <b>variables</b> of a <b>class</b> are the <b>class</b> <b>variables</b> of its instances...|$|R
5000|$|Instance methods - {{belong to}} {{individual}} objects, and {{have access to}} instance variables for the specific object they are called on, inputs, and <b>class</b> <b>variables</b> ...|$|R
5000|$|... ===Static member {{variables}}=== In C++, member variables declared as [...] inside class definitions are <b>class</b> <b>variables</b> (shared {{between all}} class instances, {{as opposed to}} instance variables).|$|R
