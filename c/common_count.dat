8|181|Public
60|$|And then, {{and more}} {{in the manner of}} a Russian prince than any <b>common</b> <b>count,</b> Chitterlow bowed and withdrew. Just for a moment he allowed a conquering eye to {{challenge}} Helen's and noted her for a girl of quality....|$|E
5000|$|Quantum valebant is a Latin phrase meaning [...] "as much as {{they were}} worth." [...] It is a <b>common</b> <b>count</b> at law very similar to quantum meruit. The two legal actions differ only in that quantum meruit is used to recover the {{reasonable}} value of services rendered, while quantum valebant is used to recover the reasonable value of goods sold and delivered. This count is considered a type of assumpsit.|$|E
40|$|An {{important}} objective for policy-makers is how {{to allocate}} resources for the enjoyment of its citizens. Outdoor recreation is a very popular hobby {{for a lot of}} people. The sites they travel to for recreational purposes are public sites such as the Clear Lake, located in central Iowa. The users of the lake often care {{about the quality of the}} water. It is the goal of the researcher to determine how much they are willing to pay in order to preserve or improve the water quality. The researcher must decide on not only the theoretical methodology, but the appropriate statistical model. The focus of this thesis is using count data models to estimate individuals 2 ̆ 7 willingness to pay. A <b>common</b> <b>count</b> data model is the Poisson model, however it is restrictive and often alternative models must be used. This thesis introduces a new count data model to the literature: The Conway-Maxwell-Poisson regression model. Using the data gathered by individual users at Clear Lake, I contrast this model with a popular alternate to the Poisson model, the negative binomial model...|$|E
5000|$|... 1982 Peter Buckley Trophy National Junior Road Race Series Winner {{including}} wins at Peak Forest RR, Stokesley Classic and Lincoln GP West <b>Common</b> <b>counting</b> events ...|$|R
40|$|Data mining {{queries are}} often {{submitted}} concurrently {{to the data}} mining system. The data mining system should take advantage of overlapping of the mined datasets. In this paper we focus on frequent itemset mining and we discuss and experimentally evaluate {{the implementation of the}} <b>Common</b> <b>Counting</b> method on top of the Apriori algorithm. The general idea of <b>Common</b> <b>Counting</b> is {{to reduce the number of}} times the common parts of the source datasets are scanned during the processing of the set of frequent pattern queries...|$|R
40|$|Abstract. Frequent itemset mining {{is often}} {{regarded}} as advanced querying where a user species the source dataset and pattern constraints using a given constraint model. Recently, {{a new problem}} of optimizing processing of batches of frequent itemset queries has been considered. The best technique for this problem proposed so far is <b>Common</b> <b>Counting,</b> which consists in concurrent processing of frequent itemset queries and integrating their database scans. <b>Common</b> <b>Counting</b> requires that data structures of several queries are stored in main memory at the same time. Since in practice memory is limited, the crucial problem is scheduling the queries to <b>Common</b> <b>Counting</b> phases so that the I/O cost is optimized. According to our previous studies, the best algorithm for this task, applicable to large batches of queries, is CCAgglomerative. In this paper we present a novel query schedul-ing method CCAgglomerativeNoise, built around CCAgglomerative, increasing its chances of nding an optimal solution. ...|$|R
40|$|A {{number of}} recent studies have {{proposed}} that adults may solve small addition problems (e. g. 3 + 1, 4 + 3) with a compacted counting procedure, challenging the long held assertion that these problems were solved by fact retrieval from memory. However, the transfer of practice across problems containing a similar counting sequence, which is a signature of procedure use, has not been observed in small addition problems. The current experiment sought to examine a known counting procedure, alphabet arithmetic (e. g. A + 2 = C, because “C ” is two letters ahead of “A”), for evidence of transfer of practice. Forty-eight participants practiced blocks of alphabet arithmetic problems, then performed new test problems with answers that overlapped the practiced count sequences and control problems with answers that did not overlap with the practiced counting sequences. Results showed a significant effect of transfer, where test problems containing a <b>common</b> <b>count</b> sequence were solved faster than the problems that did not. This result, combined {{with the findings of}} previous arithmetic transfer studies, support the theory that small additions are solved with memory retrieval...|$|E
40|$|This claim {{can mean}} {{different}} things to different people. Willard V. Quine thought that names were predicates {{in the sense that they}} were to be represented as general terms in translations of English sentences into the language of first-order logic. 1 Clarence Sloat thought that “proper nouns ” were predicates in the sense that, like <b>common</b> <b>count</b> nouns, they must occur either as a bare plural or with a determiner (such as ‘the’, ‘some’, and ‘a’), although that determiner could in some cases go unpronounced (Sloat 1969). 2 Tyler Burge thought that “proper names ” were predicates in the sense that they were true or false of things and should be treated as general terms in a semantic theory of English. 3 While I agree with all of these claims, when I say that names are predicates I mean that they have a predicate-type semantic value, whatever that might turn out to be. The semantic value of a predicate might be extensional: for example, the set of entities of which the predicate is true (an extension); or that function from entities to truth values (a type-〈e, t 〉 function) which assigns TRUTH to all such entities and FALSITY to everything else. Or it might be intensional: for example, a property; or...|$|E
40|$|Association rule mining (ARM) {{identifies}} frequent itemsets from {{databases and}} generates association rules by considering each item in equal value. However, items are actually different in many aspects {{in a number}} of real applications, such as retail marketing, network log, etc. The difference between items makes a strong impact on the decision making in these applications. Therefore, traditional ARM cannot meet the demands arising from these applications. By considering the different values of individual items as utilities, utility mining focuses on identifying the itemsets with high utilities. As “downward closure property” doesn’t apply to utility mining, the generation of candidate itemsets is the most costly in terms of time and memory space. In this paper, we present a Two-Phase algorithm to efficiently prune down the number of candidates and can precisely obtain the complete set of high utility itemsets. In the first phase, we propose a model that applies the “transaction-weighted downward closure property ” on the search space to expedite the identification of candidates. In the second phase, one extra database scan is performed to identify the high utility itemsets. We also parallelize our algorithm on shared memory multi-process architecture using <b>Common</b> <b>Count</b> Partitioned Database (CCPD) strategy. We verify our algorithm by applying it to both synthetic and real databases. It performs very efficiently in terms of speed and memory cost, and shows good scalability on multiple processors, even on large databases that are difficult for existing algorithms to handle...|$|E
40|$|Abstract. Discovery of {{frequent}} itemsets {{is a very}} important data mining problem with numerous applications. Frequent itemset mining is often regarded as advanced querying where a user specifies the source dataset and pattern constraints using a given constraint model. A significant amount of research on frequent itemset mining has been done so far, focusing mainly on developing faster complete mining algorithms, efficient constraint handling, and reusing results of previous queries. Recently, a new problem of optimizing processing of batches {{of frequent}} itemset queries has been considered and two multiple query optimization techniques for frequent itemset queries: <b>Common</b> <b>Counting</b> and Mine Merge have been proposed. Mine Merge does not depend on a particular mining algorithm, while <b>Common</b> <b>Counting</b> has been specifically designed to work with Apriori. Nevertheless, in previous works the efficiency of Mine Merge was tested only on Apriori, and it is unclear how it would perform with newer pattern-growth algorithms like FP-growth. In this paper we adapt the <b>Common</b> <b>Counting</b> method to work with FP-growth and evaluate efficiency of both methods when FP-growth is used as a basic mining algorithm. ...|$|R
40|$|Abstract. In {{this paper}} we {{address the problem of}} {{processing}} of batches of frequent itemset queries using the Apriori algorithm. The best solution of this problem proposed so far is <b>Common</b> <b>Counting,</b> which consists in concurrent execution of the queries using Apriori with the integration of scans of the parts of the database shared among the queries. In this paper we propose a new method – Common Candidate Tree, offering a more tight integration of the concurrently processed queries by sharing memory data structures, i. e., candidate hash trees. The experiments show that Common Candidate Tree outperforms <b>Common</b> <b>Counting</b> in terms of execution time. Moreover, thanks to smaller memory consumption, Common Candidate Tree can be applied to larger batches of queries. ...|$|R
40|$|Abstract: Frequent itemset mining {{is often}} {{regarded}} as ad-vanced querying where a user species the source dataset and pattern constraints using a given constraint model. In this {{paper we address}} the problem of processing batches of frequent itemset queries using the Apriori algorithm. The best solution of this problem proposed so far is <b>Common</b> <b>Counting,</b> which consists in concurrent execution of the queries using Apriori with the integration of scans of the parts of the database shared among the queries. In this paper we propose a new method- Common Candidate Tree, oering a more tight in-tegration of the concurrently processed queries by sharing memory data structures, i. e., candidate hash trees. The experiments show that Common Candidate Tree outperforms <b>Common</b> <b>Counting</b> in terms of execution time. Moreover, thanks to smaller memory con-sumption, Common Candidate Tree can be applied to larger batches of queries...|$|R
40|$|Names are predicates. This claim {{can mean}} {{different}} things to different people. Willard V. Quine thought that names were predicates {{in the sense that they}} were to be represented as general terms in translations of English sentences into the language of first-order logic. 1 Clarence Sloat thought that “proper nouns, ” as he called them, were predicates in the sense that, like <b>common</b> <b>count</b> nouns, they must occur either as a bare plural or with a determiner (such as ‘the’, ‘some’, and ‘a’), although ‘the ’ would in some cases go unpro-nounced (Sloat 1969). Tyler Burge thought that “proper names, ” as he called them, were predicates in the sense that they were true or false of things and should be treated as general terms in a semantic theory of English. 2 While I agree with all of these claims, when I say that names are predicates I mean that they have a predicate-type semantic value, whatever that might turn out to be. The semantic value of a predicate might be extensional: for example, a function from entities to truth values (a type 〈e, t 〉 function). Or it might be intensional: for example a property, or a function from possible worlds to extensions. The question which of these types might be a semantic value of a predicate is indepen-dent of the question whether names are predicates. If names are predicates, then whichever of the above semantic types that can be a value of the predicate ‘planet ’ can also be a value of the name‘Aristotle ’ and vice versa. In what follows I assemble a variety of arguments in order to make the beginnings of the best case that I can for Predicativism: the view that names are predicates in all of their occurrences. 3 When names appear as bare singulars they constitute the predicative component of a denuded determiner phrase, a determiner phrase with an unpronounced de-terminer. 4 Burge proposed that the unpronounced determiner was a demonstrative, so that bare singular names, apparently in argument positions, would constitute the predicate com- 1 In some works (1940, 1948, 1950) Quine proposed that names should be translated as definite descriptions with the name itself showing up in the predicate component of that description. In Word and Object (1960) Quine thought, in contrast with his earlier view, that names were predicates in their own right, not just in his regimented language...|$|E
40|$|Early in {{the genesis}} of Mauritian Creole (MC), the quantificational determiners of its lexifier language, French, {{incorporated}} into {{a large number of}} the nouns that they combined with, resulting in the occurrence of bare nouns in argument positions, yielding (in) definite, singular, plural and generic interpretations. These early changes were accompanied by the loss all inflectional morphology, as well as the loss of the French copula, and that of the Case assigning prepositions à (2 ̆ 7 of 2 ̆ 7) and de (2 ̆ 7 of 2 ̆ 7) which are used in partitive and genitive constructions respectively. I argue that these changes triggered a parametric shift in noun denotation, from predicative in French to argumental in MC, and account for the fact that MC has a very different determiner system from its lexifier. My analysis is motivated by both Longobardi 2 ̆ 7 s (1994) claim that only DPs can be arguments, NPs cannot, and Chierchia 2 ̆ 7 s (1998 b) seemingly incompatible claim that N can be an argument when it is Kind denoting. I provide detailed account of the emergence of the new MC determiners, from their first attestations in the early 18 th century, {{to the end of the}} 19 th century, when the determiner system settles into a form that is still used today. Following an analysis of the modern MC determiner system, I propose that MC nouns are lexically stored as argumental, Kind denoting terms, which share some of the distributional properties of English bare plurals, such as their ability to occur in argument positions without a determiner. The new quantificational determiners are analyzed as 2 ̆ 7 type shifting operators 2 ̆ 7 that shift Kinds and predicate nominals into argumental noun phrases. The singular indefinite article enn and the plural marker bann assign existential quantification over instances of Kind denoting count nouns, and the null definite determiner is an operator that quantifies over the totality of a set. The differential behaviour of MC count vs. mass nouns is accounted for in terms of the Number argument which must be realized for <b>common</b> <b>count</b> nouns. Some seemingly 2 ̆ 7 bare 2 ̆ 7 nouns comprise a phonologically null definite determiner equivalent to French le/la and English the. Subject-object asymmetry of count nouns in MC provides evidence for the occurrence of this null element which requires licensing in certain syntactic environments. The Specificity marker la, which serves to mark anaphoric definiteness, is shown to be a 2 ̆ 7 last resort 2 ̆ 7 means of licensing the null definite determiner. My syntactic analysis is within Chomsky 2 ̆ 7 s (1995 b) Minimalist framework and a Formal Semantics (Partee 1986), both of which stipulate legitimate operator variable constructions. The loss of the French quantificational determiners, and that of the copula meant that early MC lacked overt sources of quantification at both the nominal and clausal levels. In my analysis of the emerging MC determiner system, I look at the new sources of quantification that arise in order to establish the referential properties of nouns, and I show how these various strategies are linked to the means by which the semantic features of Definiteness, Deixis, Number and Specificity are expressed, and also the means by which the syntactic function of predication is realized...|$|E
50|$|As {{a matter}} of day-to-day practice, it is this {{framework}} which is routinely applied as the organising structure for the law. Nevertheless, practitioners frequently plead claims by reference to the old <b>common</b> <b>counts.</b> It is not yet possible to articulate the law without reference to these old categories. Whether it is desirable to do so remains a controversial question.|$|R
40|$|Abstract. Frequent itemset mining {{is often}} {{regarded}} as advanced querying where a user specifies the source dataset and pattern constraints using a given constraint model. Recently, {{a new problem}} of optimizing processing of sets of frequent itemset queries has been considered and two multiple query optimization techniques for frequent itemset queries: Mine Merge and <b>Common</b> <b>Counting</b> have been proposed and tested on the Apriori algorithm. In this paper we discuss and experimentally evaluate three strategies for concurrent processing of frequent itemset queries using FP-growth as a basic frequent itemset mining algorithm. The first strategy is Mine Merge, which {{does not depend on}} a particular mining algorithm and can be applied to FP-growth without modifications. The second is an implementation of the general idea of <b>Common</b> <b>Counting</b> for FP-growth. The last is a completely new strategy, motivated by identified shortcomings of the previous two strategies in the context of FP-growth. ...|$|R
40|$|We {{consider}} {{the problem of}} optimizing the processing of batches of frequent itemset queries. One of the methods proposed for this task is Apriori <b>Common</b> <b>Counting,</b> which consists in concurrent processing of frequent itemset queries and integrating their database scans. Apriori <b>Common</b> <b>Counting</b> requires that hash-trees of several queries are stored in main memory at the same time. Since in practice memory is limited, the crucial problem is scheduling the queries to execution phases so that the I/O cost is optimized. As the scheduling algorithm has to know the hash-tree sizes of the queries, previous approaches generated all the hash-trees before scheduling and swapped them to disk, which introduced extra I/O cost. In this paper we present a method of calculating an upper bound {{on the size of}} a hash tree, and propose to schedule the queries using estimates instead of actual hash-tree sizes...|$|R
40|$|The paper {{presents}} propagation {{rules that}} are common to the minimum constraint family and {{to the number of}} distinct values constraint family. One practical interest of the paper is to describe an implementation of the number of distinct values constraint. This is a quite <b>common</b> <b>counting</b> constraint that one encounters in many practical applications such as time tabling or frequency allocation problems...|$|R
25|$|There {{are several}} ways to {{evaluate}} hand strength; two of the most <b>common</b> are <b>counting</b> outs and using calculators.|$|R
5000|$|Air filled hoses that {{activate}} switches when vehicles {{drive over}} them. <b>Common</b> for <b>counting</b> traffic and at gas stations.|$|R
50|$|There {{are several}} ways to {{evaluate}} hand strength; two of the most <b>common</b> are <b>counting</b> outs and using calculators.|$|R
40|$|The paper {{presents}} propagation {{rules that}} are common to the minimum constraint family and {{to the number of}} distinct values constraint family. One original contribution is to provide a geometrical interpretation of these rules that can be used by a generic sweep pruning algorithm. Finally one practical interest of the paper is to describe an implementation of the number of distinct values constraint. This is a quite <b>common</b> <b>counting</b> constraint that one encounters in many practical applications such as timetabling or frequency allocation problems. ...|$|R
5|$|The {{brains of}} <b>common</b> ravens <b>count</b> {{among the largest}} of any bird species. Specifically, their hyperpallium is large, for a bird. They display ability in problem-solving, {{as well as other}} {{cognitive}} processes such as imitation and insight.|$|R
40|$|The paper {{presents}} propagation {{rules that}} are common to the minimum constraint family and {{to the number of}} distinct values constraint family. One practical interest of the paper is to describe an implementation of the number of distinct values constraint. This is a quite <b>common</b> <b>counting</b> constraint that one encounters in many practical applications such as time tabling or frequency allocation problems. A second important contribution is to provide a pruning algorithm for the constraint "at most n distinct values for a set of variables". This can be considered as the counterpart of Regin's algorithm for the all different constraint where one enforces having at least n distinct values for a given set of n variables...|$|R
40|$|The {{common law}} system of {{pleading}} was founded upon {{the theory that}} issues of fact, representing {{the gist of the}} controversy between the contending parties to a suit, should be developed by the pleadings. In practice this was not always realized, for many fictions and legal conclusions obtained recognition as legitimate allegations, and upon them issues were formed which satisfied the courts. The most striking and familiar instance of this is found in the <b>common</b> <b>counts.</b> Here there is an allegation of indebtedness, which is a mere legal conclusion, and with this as a consideration a promise to pay is alleged, which in all cases of implied contracts is a pure fiction...|$|R
5000|$|In the United States, assumpsit, {{like the}} other forms of action, became {{obsolete}} in the federal courts after {{the adoption of the}} Federal Rules of Civil Procedure in 1938. Thirty-five states have moved to rules similar to the FRCP (see Civil procedure in the United States), which have replaced the various forms of action with the civil action. However, many states continue to recognize assumpsit as a common law or statutory cause of action or allow the use of the old [...] "common counts" [...] as causes of action. For example, California has a special [...] "common counts" [...] cause of action form (to be attached to an optional form complaint) based directly on the old <b>common</b> <b>counts</b> that were pleaded in assumpsit.|$|R
5000|$|In Australian law, actions {{derived from}} the <b>common</b> money <b>counts</b> {{continue}} to generate only personal remedies. The doctrinal basis of subrogation is not unsettled: {{it has nothing to}} do with unjust enrichment. Claims to traceable substitutes are a part of our law of property, not unjust enrichment.|$|R
5000|$|Attempted theft {{contrary}} to section 4 of the Criminal Justice (Theft and Fraud Offences) Act, 2001 and <b>common</b> law (two <b>counts)</b> ...|$|R
50|$|Santa Anna v. Frank, , was a {{case with}} no special finding of facts, the general finding of the issues for the {{plaintiff}} was not open to review by this court. Town of Martinton, Illinois v. Fairbanks, 112 U.S. 670; S. C. ante, 321. Questions were discussed by counsel for the defendant as to the legal authority of the town to issue the bonds referred to, fairly arose upon the first count of the declaration. But their determination could not affect the judgment, for the <b>common</b> <b>counts</b> were sufficient under the statutes of Illinois to support the judgment without reference to any question of the legal authority to issue the bonds described in the first count. Rev. St. Ill. 1870, c. 110, 58; Bond v. Dustin, 112 U.S. 604; S. C. ante, 296.|$|R
5000|$|Full {{floating}} variants {{are common}} while Semi-floating axles exist, but are less <b>common.</b> Axle spline <b>count</b> varies, with 30 spline {{being the most}} common.|$|R
50|$|The {{most common}} and {{challenging}} criticism to metalinguistic description theories was put forth by Kripke himself: {{they seem to be}} an ad hoc explanation of a single linguistic phenomenon. Why should there be a metalinguistic theory for proper nouns (like names) but not for <b>common</b> nouns, <b>count</b> nouns, verbs, predicates, indexicals and other parts of speech.|$|R
5000|$|In some languages, it is <b>common</b> to <b>count</b> {{years by}} {{referencing}} to one season, as in [...] "summers", or [...] "winters", or [...] "harvests". Examples include Chinese 年 [...] "year", originally 秂, an ideographic compound {{of a person}} carrying a bundle of wheat denoting [...] "harvest". Slavic besides godŭ [...] "time period; year" [...] uses lěto [...] "summer; year".|$|R
40|$|Data mining, {{frequent}} itemsets, Apriori algorithm, {{data mining}} queries. Frequent itemset mining {{can be regarded}} as advanced database querying where a user specifies constraints on the source dataset and patterns to be discovered. Since such frequent itemset queries can be submitted to the data mining system in batches, a natural question arises whether a batch of queries can be processed more efficiently than by executing each query individually. So far, two methods of processing batches of frequent itemset queries have been proposed for the Apriori algorithm: <b>Common</b> <b>Counting,</b> which integrates only the database scans required to process the queries, and Common Candidate Tree, which extends the concept by allowing the queries to also share their main memory structures. In this paper we propose a new method called Common Candidates, which further integrates processing of the queries from a batch by performing integrated candidate generation. ...|$|R
6000|$|... "You {{may come}} {{back if you}} like, Malchus; your sailors may aid us with their voices, or, should it come to {{anything}} like a popular disturbance, by their arms. But, as you know, in the voting the <b>common</b> people <b>count</b> for nothing, it is the citizens only who elect, the traders, shopkeepers, and employers of labour. <b>Common</b> people <b>count</b> {{for no more than}} the slaves, save {{when it comes to a}} popular tumult, and they frighten the shopkeeping class into voting in accordance with their views. However, we will leave no stone unturned that may conduce to our success. Do not hurry away from home, my boy, for your mother would think it unkind after three months' absence. Our council is likely to last for some hours; when it is at an end I will look for you here and tell you what has been determined upon." ...|$|R
25|$|The form {{of action}} known as indebitatus assumpsit came to include various sub-forms {{known as the}} <b>common</b> money <b>counts.</b> The most {{important}} of these for the later development of the law of quasi-contract included: (i) actions for money had and received to the plaintiff's use; (ii) actions for money paid to the defendant's use; (iii) quantum meruit; and (iv) quantum valebat.|$|R
40|$|Specimen {{collected}} 28 October 1949. Original Locality: Griegos drain near head, Albuquerque. Locality: Griegos drain near head, Albuquerque. Catalog number: MSB 280; Taxa: Gambusia affinis; Common name: western mosquitofish; Count of specimens: 424; Standard length:Catalog number: MSB 611; Taxa: Pimephales promelas; Common name: fathead minnow; Count of specimens: 154; Standard length:Catalog number: MSB 709; Taxa: Pimephales promelas; Common name: fathead minnow; Count of specimens: 1; Standard length:Catalog number: MSB 1138; Taxa: Hybognathus amarus; Common name: Rio Grande silvery minnow; Count of specimens: 5; Standard length:Catalog number: MSB 1288; Taxa: Cyprinella lutrensis; Common name: red shiner; Count of specimens: 1; Standard length:Catalog number: MSB 1597; Taxa: Cyprinus carpio; Common name: <b>common</b> carp; <b>Count</b> of specimens: 3; Standard length:Catalog number: MSB 1771; Taxa: Gila pandora; Common name: Rio Grande chub; Count of specimens: 5; Standard length:Catalog number: MSB 1857; Taxa: Macrhybopsis aestivalis; Common name: speckled chub; Count of specimens: 1; Standard length:Catalog number: MSB 3162; Taxa: Cyprinus carpio; Common name: <b>common</b> carp; <b>Count</b> of specimens: 1; Standard length...|$|R
