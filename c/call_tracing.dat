14|657|Public
5|$|Scully {{is deeply}} troubled by Pfaster's crimes, and has unsettling dreams and {{hallucinations}} about the case. In Washington, {{she has a}} counseling session with a social worker, during which she shares her anxiety about the investigation. After the session, Scully learns that someone from Minnesota had called for her. When she contacts Mulder, she learns that neither he nor Bocks made the <b>call.</b> <b>Tracing</b> a fingerprint to Pfaster from his arrest, Bocks and Mulder raid his apartment, finding one of the prostitute's fingers in his refrigerator. Meanwhile, after Scully arrives in Minneapolis, Pfaster forces her car off the road. He kidnaps Scully and takes her to his late mother's abandoned house. He ties and gags Scully, and keeps her in a dark closet.|$|E
5000|$|There are {{two types}} of <b>call</b> <b>tracing.</b> Permanent <b>call</b> <b>tracing</b> permits tracing of all calls. On-demand <b>call</b> <b>tracing</b> permits tracing, upon request, of a {{specific}} call, provided that the called party dials a designated code immediately after the call to be traced is disconnected immediately.|$|E
50|$|In telecommunication, <b>call</b> <b>tracing</b> is a {{procedure}} that permits an entitled user to be informed about the routing of data for an established connection, identifying the entire route from the origin to the destination.|$|E
50|$|The forward {{rules are}} UTID suffix match (<b>called</b> <b>tracing</b> rule in this paper) and {{namespace}} match (<b>called</b> <b>tracing</b> track in this paper). The underlying protocol of IDTP may be TCP, UDP, UDP multicast, HTTP, HTTPS, Web Service, or local handling without forwarding.|$|R
40|$|Abstract. Signature-based malware {{detection}} {{will always}} be a step behind as novel malware cannot be detected. On the other hand, machine learning-based methods are capable of detecting novel malware but classification is frequently done in an offline or batched manner and is often associated with time overheads that make it impractical. We propose an approach that bridges this gap. This approach makes use of a support vector machine (SVM) to classify system <b>call</b> <b>traces.</b> In contrast to other methods that use system <b>call</b> <b>traces</b> for malware detection, our approach makes use of a string kernel to make better use of the sequential information inherent in a system <b>call</b> <b>trace.</b> By classifying system <b>call</b> <b>traces</b> in small sections and keeping a moving average over the probability estimates produced by the SVM, our approach is capable of detecting malicious behavior online and achieves great accuracy...|$|R
50|$|Malicious caller {{identification}} facility, also <b>called</b> malicious <b>call</b> <b>trace</b> or caller activated malicious <b>call</b> <b>trace,</b> when subscribed or enabled, works by allowing {{a phone call}} recipient to mark or flag the preceding phone call connection as malicious (i.e. harassing, threatening, obscene, etc.) The phone system will then automatically <b>trace</b> the <b>call</b> by flagging station to station billing and routing data including start and end times. The <b>call</b> <b>trace</b> is not dependent upon call duration (as envisioned in dramatic movie plots) and will record all meta-data regardless of source conditions - even if the call was made from an unlisted number, a payphone or a number with {{caller identification}} disabled. To protect privacy the resulting trace data is only made available to law enforcement.|$|R
50|$|Scully {{is deeply}} troubled by Pfaster's crimes, and has unsettling dreams and {{hallucinations}} about the case. In Washington, {{she has a}} counseling session with a social worker, during which she shares her anxiety about the investigation. After the session, Scully learns that someone from Minnesota had called for her. When she contacts Mulder, she learns that neither he nor Bocks made the <b>call.</b> <b>Tracing</b> a fingerprint to Pfaster from his arrest, Bocks and Mulder raid his apartment, finding one of the prostitute's fingers in his refrigerator. Meanwhile, after Scully arrives in Minneapolis, Pfaster forces her car off the road. He kidnaps Scully and takes her to his late mother's abandoned house. He ties and gags Scully, and keeps her in a dark closet.|$|E
40|$|Abstract—In this paper, {{we propose}} {{a new system}} {{monitoring}} framework that can serve as an enabler for automated malware detection on live systems. Our approach {{takes advantage of the}} increased availability of hardware assisted virtualization capabilities of modern CPUs, and its basic novelty consists in launching a hypervisor layer on the live system without stopping and restarting it. This hypervisor runs at a higher privilege level than the OS itself, thus, {{it can be used to}} observe the behavior of the analyzed system in a transparent manner. For this purpose, we also propose a novel system <b>call</b> <b>tracing</b> method that is designed to be configurable in terms of transparency and granularity. I...|$|E
40|$|During the {{authentication}} {{process in}} the Kerberos network authentication system, all the information exchanged between the application client and the Kerberos authentication server is the argument of some function calls to Kerberos shared libraries. Since this information is exchanged in the clear, local attacks that intercept function calls may inspect and manipulate it before resuming their execution. This paper describes function <b>call</b> <b>tracing</b> attacks against the Kerberos authentication system in a time-sharing environment. They use the DynInst API library, developed to support the easy construction of tools for the control and manipulation of programs at run-time, and ad hoc interposition libraries. We illustrate the proposed attacks against two Kerberos client applications, namely kinit and kpasswd...|$|E
50|$|In Canada, {{the service}} is usually marketed as <b>call</b> <b>trace,</b> and fees {{generally}} only apply when {{the service is}} used.|$|R
40|$|Abstract. <b>Call</b> <b>traces</b> {{can provide}} {{detailed}} {{insight into the}} operation of distributed embedded systems. Developers inspect traces to understand and debug systems using manual and automatic techniques such as data mining. Correlation of traces between nodes provides a network level view of system. These traces are typically gathered by logging a globally unique identifier for each called function. Unfortunately, this naive <b>call</b> <b>trace</b> gathering technique results in excessive consumption of the limited memory, bandwidth, and energy resources available in wireless sensor networks. This paper proposes three new <b>call</b> <b>trace</b> gathering techniques that are designed specifically for the computing platforms with extreme resource constraints. The first technique uses local name spaces and caller side logging to significantly reduce the bit size of function identifiers. The second technique reconstructs <b>call</b> <b>traces</b> from a log of the runtime control flow decisions made by a program. The third technique performs a novel reduction over a program’s control flow graph to limit logging to control flow nodes effecting runtime call decisions. Our work automates the insertion of logging statements into source code for all the techniques described above. Our experimental results show promising outlook where two of the techniques reduced {{the size of the}} log to less than 15 % of traces produced by traditional methods. These savings make the new <b>call</b> <b>trace</b> capturing techniques attractive additions to the toolbox employed by developers and users of wireless sensor networks. ...|$|R
50|$|Products include network <b>call</b> <b>trace,</b> service assurance, {{customer}} experience management, microwave, radio frequency (RF), and optical signal generators, spectrum analyzers, and network analyzers.|$|R
40|$|Abstract: We {{present a}} {{non-invasive}} system for intrusion and anomaly detection, based on system <b>call</b> <b>tracing</b> in par-avirtualized machines over Xen. System calls from guest user programs and operating systems are intercepted stealthy within Xen hypervisor, and passed to a detection system running in Dom 0 via a suitable communi-cation channel. Guest applications and machines are left unchanged, and an intruder on the virtual machine cannot {{tell whether the}} system is under inspection or not. As for the detection algorithm, we present and study a variant of Stide, which we verify experimentally {{to have a good}} performance on intrusion detection with an acceptable overhead—in fact, online real-time intrusion detection feasible. However, since the interception mechanism is kept separated from the detection system, the latter can be replaced according to further needs. ...|$|E
40|$|AbstractVoice call {{transmissions}} on cellular {{networks are}} not end-to-end secure and thus, attacks like <b>call</b> <b>tracing,</b> modification etc by an adversary is easily feasible, that is, any adversary Eve, can trace the call, and can intercept the voice, which is transmitted over an unsecured medium from a user (Alice) to another user (Bob) through mobile phones. Thus, it's not safe to private {{talk on the}} mobile phones. In this paper, we propose a scheme, which provides entire security between valid end users over the security protection provided by the network system. A common secret key is pre-negotiated between end users (many such schemes are available) to initiate the communication. We present a global construction of our proposed protocol. In addition to this, we also discuss the security proofs of our proposed protocol...|$|E
40|$|Dynamic malware {{analysis}} aims at revealing malware’s runtime behavior. To evade analysis, advanced malware is able {{to detect}} the underlying analysis tool (e. g., one based on emulation.) On the other hand, existing malware-transparent analysis tools incur significant performance overhead, making them unsuitable for live malware monitoring and forensics. In this paper, we present IntroLib, a practical tool that traces user-level library calls made by malware with low overhead and high transparency. IntroLib is based on hardware virtualization and resides outside of the guest virtual machine where the malware runs. Our evaluation of an IntroLib prototype with 93 real-world malware samples shows that IntroLib is immune to emulation and API hooking detection by malware, uncovers more semantic information about malware behavior than system <b>call</b> <b>tracing,</b> and incurs low overhead (< 15 % in all-but-one test case) in performance benchmark testing...|$|E
50|$|Other {{fields that}} are added {{on top of}} the header by the {{receiving}} server may be <b>called</b> <b>trace</b> fields, in a broader sense.|$|R
50|$|In October 2008 The British Red Cross {{created a}} serious ARG <b>called</b> <b>Traces</b> of Hope {{to promote their}} {{campaign}} about civilians caught up in conflict.|$|R
50|$|In 2008, {{the first}} {{installment}} of the prequel series The Alchymist's Legacy was published, which is <b>called</b> <b>Tracing</b> the Shadow and is set primarily in Francia.|$|R
40|$|Abstract—Call traces expose runtime {{behaviors}} that greatly aid system developers in profiling performance and diagnosing problems within wireless embedded applications. Strict resource constraints limit {{the volume of}} trace data that can be handled on embedded devices, especially bandwidth limited wireless embedded systems. We propose two new call trace gathering techniques, local identifier logging and control flow logging, which provide significant reductions in bandwidth consumption compared to the current standard practice of global identifier logging. Intuition into the savings {{made possible by the}} proposed trace gathering techniques is provided by an analytical comparison of the bandwidth required by various <b>call</b> <b>tracing</b> approaches. Confirmation of this intuition is demonstrated through experimentation that reveals log bandwidth savings of approximately 85 % compared to global identifier logging using flat name spaces, and 35 % compared to global identifier logging using optimal Huffman coding. Index Terms—Wireless embedded systems, logging, bandwidth compression, dataflow. I...|$|E
40|$|Abstract — Worm {{attacks have}} been major {{security}} {{threats to the}} Internet. Detecting worms, especially new, unseen worms, is still a challenging problem. In this paper, we propose a new worm detection approach based on mining dynamic program executions. This approach captures dynamic program behavior to provide accurate and efficient detection against both seen and unseen worms. In particular, we execute {{a large number of}} realworld worms and benign programs (executables), and trace their system calls. We apply two classifier-learning algorithms (Naive Bayes and Support Vector Machine) to obtain classifiers from a large number of features extracted from the system call traces. The learned classifiers are further used to carry out rapid worm detection with low overhead on the end-host. Our experimental results clearly demonstrate the effectiveness of our approach to detect new worms in terms of a very high detection rate and a low false positive rate. Index Terms — Worm detection, system <b>call</b> <b>tracing,</b> dynamic program analysis, data minin...|$|E
40|$|Abstract—Fault {{injection}} {{campaigns have}} been used extensively to characterize the behavior of systems under errors. Traditional characterization studies, however, focus only on analyzing fail-stop behavior, incorrect test results, and other obvious failures observed during the experiment. More {{research is needed to}} evaluate the impact of silent failures—a relevant and insidious class of real-world failures—and doing so in a fully automated way in a fault injection setting. This paper presents a new methodology to identify fault injection-induced silent failures and assess their impact in a fully automated way. Drawing inspiration from system call-based anomaly detection, we compare faulty and fault-free execution runs and pinpoint behavioral differences that result in externally visible changes—not reported to the user—to detect silent failures. Our investigation across several different programs demonstrates that the impact of silent failures is relevant, consistent with field data, and should be carefully considered to avoid compromising the soundness of fault injection results. Keywords-silent failure; fail-stop; fault injection; LLVM; sys-tem <b>call</b> <b>tracing</b> I...|$|E
40|$|A {{representation}} π of {{a locally}} compact group G is <b>called</b> <b>trace</b> class, if for every test function f the induced operator π(f) is a trace class operator. The group G is <b>called</b> <b>trace</b> class, if every π∈ G is trace class. We show that trace class groups are type I {{and give a}} criterion for semi-direct products to be trace class and show that a representation π is trace class {{if and only if}} π⊗π' can be realized in the space of distributions...|$|R
40|$|We {{describe}} {{a novel approach}} to monitoring high level behaviors using concepts from AI planning. Our goal is to understand what a program is doing based on its system <b>call</b> <b>trace.</b> This ability is particularly important for detecting malware. We approach this problem by building an abstract model of the operating system using the STRIPS planning language, casting system calls as planning operators. Given a system <b>call</b> <b>trace,</b> we simulate the corresponding operators on our model and by observing {{the properties of the}} state reached, we learn {{about the nature of the}} original program and its behavior. Thus, unlike most statistical detection methods that focus on syntactic features, our approach is semantic in nature. Therefore, it is more robust against obfuscation techniques used by malware that change the outward appearance of the trace but not its effect. We demonstrate the efficacy of our approach by evaluating it on actual system <b>call</b> <b>traces...</b>|$|R
30|$|The {{analysis}} of integrity performance (e.g., {{in terms of}} user throughput) in live networks has also gained attention in the research community. This kind of analysis {{can be carried out}} by means of field trials [22 – 24] or by using <b>call</b> <b>traces</b> (or MDT) [25]. However, in the case of field trials, the conclusions may not be representative of the real QoS experienced by the users. In the case of <b>call</b> <b>traces,</b> the correlation analysis presented in [25] is rather limited {{in terms of the number}} of radio measurements employed and no method for root-cause analysis was applied.|$|R
40|$|Virtual machine introspection (VMI) {{describes}} {{the method of}} monitoring and analyzing the state of a virtual machine from the hypervisor level. This lends itself well to security applications, though the hardware virtualization support from Intel and AMD was not designed with VMI in mind. This results in many challenges for developers of hardware-supported VMI systems. This paper {{describes the}} design and implementation of our prototype framework, Nitro, for system <b>call</b> <b>tracing</b> and monitoring. Since Nitro is a purely VMI-based system, it remains isolated from attacks originating within the guest operating system and is not directly visible from within the guest. Nitro is extremely flexible as it supports all three system call mechanisms provided by the Intel x 86 architecture and has been proven to work in Windows, Linux, 32 -bit, and 64 -bit environments. The high performance of our system allows for real-time capturing and dissemination of data without hindering usability. This is supported by extensive testing with various guest operating systems. In addition, Nitro is resistant to circumvention attempts due to a construction called hardware rooting. Finally, Nitro surpasses similar systems in both performance and functionality...|$|E
40|$|Mobile Phones {{have become}} an {{important}} need of today. The term mobile phone and smart phone are almost identical now-a-days. Smartphone market is booming with very high speed. Smartphones have gained such a huge popularity due to wide range of capabilities they offer. Currently android platform is leading the smartphone market. Android has gained an overnight popularity and became the top OS among its competitor OS. This eminence attracted malware authors as well. As android is an open source platform, it seems quite easy for malware authors to fulfill their illicit intentions. In this paper a new technique will be introduced to detect malware. This technique detects malware in android applications through machine learning classifier by using both static and dynamic analysis. This technique does not rely on malware signatures for static analysis but instead android permission model is used. Under dynamic analysis, system <b>call</b> <b>tracing</b> is performed. Using both static and dynamic techniques along with machine learning provides all in one solution for malware detection. The technique used by us is tested on various benign samples collected from official android market (Google Play Store) and on various malicious applications...|$|E
40|$|This paper {{focuses on}} {{intrusion}} detection and countermeasures {{with respect to}} widely-used operating systems and networks. The design and architecture of an intrusion detection system built from distributed agents is proposed to implement an intelligent system on which data mining can be performed to provide global, temporal views of an entire networked system. A starting point for agent intelligence in our system is the research into the use of machine learning over system <b>call</b> <b>traces</b> from the privileged sendmail program on UNIX. We use a rule learning algorithm to classify the system <b>call</b> <b>traces</b> for intrusion detection purposes and show the results...|$|R
40|$|Abstract—Automating the {{localization}} {{of software}} bugs {{that do not}} lead to crashes is a difficult task that has drawn the attention of several researchers. Several popular methods follow the same approach; function <b>call</b> <b>traces</b> are collected and represented as graphs, which are subsequently mined using subgraph mining algorithms {{in order to provide}} a ranking of potentially buggy functions-nodes. Recent work has indicated that the scalability of state-of-the-art methods can be improved by reducing the graph dataset using tree edit distance algorithms. The <b>call</b> <b>traces</b> that are closer to each other, but belong to different sets, {{are the ones that are}} most significant in localizing bugs. In this work, we further explore the task of selecting the most significant traces, by proposing different <b>call</b> <b>trace</b> selection techniques, based on the Stable Marriage problem, and testing their effectiveness against current solutions. Upon evaluating our methods on a real-world dataset, we prove that our methodology is scalable and effective enough to be applied on dynamic bug detection scenarios. Keywords-automated debugging, dynamic bug detection, frequent subgraph mining, tree edit distance, Stable Marriage problem. I...|$|R
5|$|When {{displayed}} in museum exhibitions, the interactive DVD installation is <b>called</b> <b>Tracing</b> the Decay of Fiction. The presentation {{is shown in}} a continuous loop and allows museum patrons to explore the narrative and create their own stories.|$|R
50|$|Because the {{algorithm}} traces the implicit curve it is <b>called</b> <b>tracing</b> algorithm.The algorithm traces only connected {{parts of the}} curve. If the implicit curve consists of several parts {{it has to be}} started several times with suitable starting points.|$|R
3000|$|The gain in {{accuracy}} {{achieved by}} the proposed method is {{at the cost of}} increasing the operational complexity due to the management of a larger amount of information, given by the <b>call</b> <b>traces.</b> To estimate the computational cost, let C [...]...|$|R
50|$|M-Phazes {{was born}} on 1 February 1983. He went to Miami High School on the Gold Coast and lived in Burleigh Heads, Queensland. His first rap group was <b>called</b> <b>Trace</b> Elements which also {{consisted}} of Jake Dangerous, Tactic One and Syntax.|$|R
50|$|The {{pairs of}} letters in an {{independency}} relation induce an equivalence relation {{on the free}} monoid of all possible strings of finite length. The elements of the equivalence classes induced by the independency are <b>called</b> <b>traces,</b> and are studied in trace theory.|$|R
30|$|At {{user level}} {{a series of}} {{magnitudes}} extracted from <b>call</b> <b>traces</b> are aggregated in order to calculate different metrics, e.g., the experimented average SNR in a dedicated channel or the voice call drop rate. These metrics are {{the starting point of}} the SatiX process calculation.|$|R
50|$|Applications {{served by}} probes include {{solutions}} for inter-carrier billing, revenue loss (by-pass/phantom traffic and analysis services), fraud prevention, billing, local number portability, quality of service, surveillance (global <b>call</b> <b>trace),</b> maintenance (protocol analysis), traffic engineering (link and trunk forecasting), alarming and SS7, Sigtran and IS-41 monitoring.|$|R
5000|$|Improving {{traceability}} (i.e. most languages offer ways {{to obtain}} the <b>call</b> <b>trace</b> which includes {{the names of the}} involved subroutines and perhaps even more information such as file names and line numbers); by not decomposing the code into subroutines, debugging would be impaired severely ...|$|R
