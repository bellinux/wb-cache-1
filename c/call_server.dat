18|746|Public
50|$|Web <b>Call</b> <b>Server</b> can be {{configured}} {{for operation}} in networks with various topology, e.g. working behind corporate NAT and serving external clients using public IP address.|$|E
5000|$|Web <b>Call</b> <b>Server</b> is unified {{intermedia}} server software {{developed by}} Flashphoner. It is a server-side platform, implemented in Java, dedicated for streaming video over {{wide range of}} communication protocols, including: ...|$|E
5000|$|... 2013 - The rapid {{development}} of WebRTC technology made to implement {{support of this}} technology. As a result, version Web <b>Call</b> <b>Server</b> 3 supported both protocols (WebRTC and RTMFP) for SIP calls from a browser. In Chrome, Firefox, and Opera browsers calls began to stream directly from the browser without Flash Player.|$|E
5000|$|All primary {{replicas of}} each data item resides {{on the same}} {{computer}} <b>called</b> <b>server.</b>|$|R
50|$|Since {{the release}} of version 6, FinalBuilder has {{included}} a continuous integration <b>server,</b> <b>called</b> FinalBuilder <b>Server.</b>|$|R
30|$|Aggregator Node: In case of LFTM model, these nodes were <b>called</b> <b>server</b> nodes. These are the nodes which {{aggregate}} {{the data}} coming from different sensor nodes.|$|R
5000|$|... 2016 - In {{addition}} to RTMP and WebRTC {{have been added}} support for new additional protocols and case studies: Websockets protocol for streaming to iOS Safari, RTSP protocol broadcasts from IP cameras and distribution streams, RTMP protocol for publishing SIP-calls on the CDN network, WebRTC-record calls, iOS SDK, and official support for Amazon EC2 servers. All of these innovations have been combined into a version of Web <b>Call</b> <b>Server</b> 5.|$|E
5000|$|... 2015 - Based on {{the modern}} {{technological}} basis was issued Web <b>Call</b> <b>Server</b> 4 version, which allowed {{not only to}} make SIP calls, but also to use the product in a video streaming server mode and broadcasts. There were two sets of options: calls and streaming video. Block 'call' {{was responsible for the}} integration with the SIP, and 'streaming' block - for standard video streaming functions, such as the publication of an arbitrary number of video streams, playback of video streams from the server, security, etc.|$|E
50|$|In 1998, {{the firm}} entered the {{circuit-switched}} desktop phone {{business with a}} line of its SoundPoint phones. In {{the third quarter of}} 2001, it entered the IP desktop phone business with the SoundPoint IP 500. Because it does not manufacture its own <b>call</b> <b>server,</b> Polycom phones use session initiation protocol (SIP) to connect to more than 25 different call control platforms. Today, the firm offers a full line of desktop IP phones from the entry level to a color display, full-featured, HD Voice (first introduced to the SoundPoint line in 2006), applications-enabled phone.|$|E
50|$|Windows Server 2008 {{includes}} {{a variation of}} installation <b>called</b> <b>Server</b> Core. Server Core is a significantly scaled-back installation where no Windows Explorer shell is installed. All configuration and maintenance is done entirely through command-line interface windows, or by connecting to the machine remotely using Microsoft Management Console. However, Notepad and some control panel applets, such as Regional Settings, are available.|$|R
50|$|For Mac OS X, {{there is}} a {{graphical}} user interface called Radmind Assistant, {{as well as a}} GUI for the Radmind <b>server</b> <b>called</b> Radmind <b>Server</b> Manager.|$|R
50|$|Lutris Technologies, Inc. was an {{enterprise}} software and services {{company based in}} Santa Cruz, California. It developed an application <b>server</b> <b>called</b> Enhydra <b>Server</b> through about 2005.|$|R
40|$|Abstract. In {{the context}} of {{advanced}} telecommunication service execution environments, this paper presents a reactive mobile agent platform, based on a synchronous programming model, a flexible object request broker, and OMG's MAF specifications on mobile agent systems interoperability. The paper details the specific design of the platform, and shows how it addresses key issues such as scalability, reliability, transparent mobility and interoperability. Finally, the paper shows the use of Moorea agents for executing telecommunication service logic in the ITEA Athos European project's Enhanced <b>Call</b> <b>Server</b> architecture, featuring transparent and dynamic distributed system reconfiguration. ...|$|E
40|$|Abstract. Imagine {{a set of}} self-interested clients, each of whom {{must choose}} a server from a {{permissible}} set. A server’s latency is inversely proportional to its speed, but it grows linearly with (or, more generally, as the pth power of) the number of clients matched to it. Many emerging Internet-centric applications such as peer-to-peer networks, multi-player online games and distributed computing platforms exhibit such interaction of self-interested users. This interaction is naturally modeled as a congestion game, which we <b>call</b> <b>server</b> matching. In this overview paper, we summarize results of our ongoing work on {{the analysis of the}} server matching game, and suggest some promising directions for future research. ...|$|E
40|$|This paper {{describes}} the packet measuring laboratory setup, {{which could be}} used also for lawful interception applications, using professional packet analyzer, Voice over IP call generator, free <b>call</b> <b>server</b> (Asterisk linux setup) and appropriate software and hardware described below. This setup was used for measuring the quality of the automatically generated VoIP calls under stressed network conditions, when the call manager server was flooded with high bandwidth traffic, near the bandwidth limit of the connected switch. The call generator realizes 30 calls simultaneously and the packet capturer & analyzercould decode the VoIP traffic, extract RTP session data, automatically analyze the voice quality using standardized MOS (Mean Opinion Score) values and describe also the source of the voice degradation (jitter, packet loss, codec, delay, etc.) ...|$|E
5000|$|ParaView {{is fully}} scriptable using the simple but {{powerful}} Python language. ParaView's data engine, <b>called</b> <b>server</b> manager, is fully accessible through the Python interface. All changes {{made to the}} engine through Python are automatically reflected to the user interface.|$|R
50|$|Applications (e.g., word processor) are <b>called</b> <b>Servers</b> in MSAA {{because they}} provide, or serve, {{information}} about their user interfaces (UI). Accessibility tools (e.g., screen readers) are called Clients in MSAA because they consume and interact with UI information from an application.|$|R
25|$|For Windows Server, BITS 4.0 adds an HTTP-based file <b>server</b> <b>called</b> BITS compact <b>server</b> for {{computers}} in the same domain.|$|R
40|$|A simple {{interactive}} demonstration {{program has}} been written in C to allow a user to input data field descriptions as label format. This program generates a full RECFMT (record format) description and the complete transfer syntax description notation (TSDN) file. It is intended that this program be upgraded to operational quality and {{be made available to}} users to simplify the description and TSDN file construction task. The total set of capabilities, from the standard formatted data unit packaging of related files and consistent segment structures, through the type definition techniques and the <b>call</b> <b>server,</b> will constitute a unique tool for the systematic transfer of data. This software on each end may be independent, one end from the other. With it available, local software that will be needed to convert user files to and from the canonical interface will be appreciably simplified...|$|E
40|$|Abstract—NGN is {{bringing}} voice, video, data and other triple-play services {{to a single}} platform. Policy Based Network Man-agement (PBNM) is becoming indispensable and complicated while converging those services with assured Quality of Ser-vice (QoS). Recent {{work in this area}} has focused on PBNM considering a particular information domain: e. g. Service Level Agreement (SLA) and/or QoS Routing etc. In this paper we present an architecture with PBNM focussing on access network optimization while taking SLAs, business objectives, routing rules, service Info, user profiles and platform conditions into account. Call setup is based on Session Initiation Protocol (SIP), a text based application layer signaling protocol adopted in NGN for controlling multimedia communications. The service, control and network planes in the proposed architecture are kept isolated. Connection Admission Control (CAC) is correlated with proposed PBNM framework. We also propose to distribute the policy sensitive CAC function between the <b>Call</b> <b>Server</b> (CS) and Session Border Controller (SBC). Two policy enforcement and dissemination modes (Provisioning and Outsourcing) are elaborated. I...|$|E
40|$|OS-level {{virtualization}} incurs smaller start-up and run-time overhead than HAL-based virtualization {{and thus}} forms an important building block for developing fault-tolerant and intrusion-tolerant applications. A complete implementation of OS-level virtualization on the Windows platform requires virtualization of Windows services, such as system services like the Remote Procedure <b>Call</b> <b>Server</b> Service (RPCSS), {{because they are}} essentially extensions of the kernel. As Windows system services work very differently from their counterparts on UNIX-style OS, i. e., daemons, {{and many of their}} implementation details are proprietary, virtualizing Windows system services {{turned out to be the}} most challenging technical barrier for OS-level virtualization for the Windows platform. In this paper, we describe a general technique to virtualize Windows services, and demonstrate its effectiveness by applying it to successfully virtualize a set of important Windows system services and ordinary services on different versions of Windows OS, including RPCSS, DcomLaunch, IIS service group, Tlntsvr, MySQL, Apache 2. 2, CiSvc, ImapiService, etc. Comment: SAC ' 11 Proceedings of the 2011 ACM Symposium on Applied Computin...|$|E
50|$|DDObjects {{supports}} remote method <b>calls,</b> <b>server</b> callbacks, asynchronous <b>calls,</b> asynchronous callbacks, stateful and -less {{objects and}} other features. DDObjects doesn't mimic other implementations as DCOM or CORBA, which are generalized to a least common denominator, but {{makes use of}} Delphi's rich type system including Objects, Exceptions, Records, Sets and Enumerations.|$|R
5000|$|... 2006: BayPackets and Syndeo (<b>Call</b> Management <b>Server</b> and Media Gateway Controller) ...|$|R
50|$|The {{beauty of}} yatchy {{ecosystem}} is {{the support for}} 3rd-party apps or applications. Apps supported by yatchy are basically web and cloud apps which rely on powerful computers <b>called</b> <b>servers</b> to render content. The app support for yatchy was developed by Diptesh Pandey, the co-founder of Yatchy. Diptesh developed the 3rd-party apps support system for yatchy.|$|R
40|$|OS-level {{virtualization}} techniques virtualize system {{resources at}} the system call interface, has the distinct advantage of smaller run-time resource requirements as compared to HAL-level virtualization techniques, and thus forms an important building block for virtualizing parallel and distributed applications such as a HPC clusters. Because the Windows operating system puts certain critical functionalities in privileged user-level system service processes, a complete OS-level virtualization solution for the Windows platform requires duplication of such Windows service as Remote Procedure <b>Call</b> <b>Server</b> Service (RPCSS). As many implementation details of the Windows system services are proprietary, duplicating Windows system services becomes the key technical challenge for virtualizing the Windows platform at the OS level. Moreover, as a core component of cloud computing, IIS web server-related services need to be duplicated in containers (i. e., OS-level virtual machines), but so far {{there is no such}} scheme. In this paper, we thoroughly identify all issues that affect service duplication, and then propose the first known methodology to systematically duplicate both system and ordinary Windows services. Our experiments show that the methodology can duplicate a set of system and ordinary services on different versions of Windows OS...|$|E
40|$|Abstract [...] A {{system is}} {{developed}} that measures the Availability and Performance of the IP Telephony infrastructure {{and the underlying}} services. IP telephony changes the proprietary traditional telephony deployed in enterprises into standards based application that runs on top of IP. There is a requirement to measure the reliability of IP Telephony to assess its ability to run business critical applications that were based on traditional PBX’s that came with five 9 s availability. Availability of an IP Telephony network {{is defined as a}} function of availability of the network, <b>call</b> <b>server,</b> other resources (transcoding resources, bandwidth) and human errors. The performance metrics of the IP Telephony network is measured {{as a function of the}} Call quality metrics and the Voice quality metrics. The failures are categorized based on whether they were signaling failures leading to failures during call setup or media failures that are noticed when the actual media is transmitted. Further classification to determine which factor in the availability function was the cause of the failure is attempted. In some cases the sub categorization might not be entirely accurate but can provide an overall direction to the study. This information is used for proactive fault management, capacity planning, network design (redundancy) and fault diagnosis by higher level management systems...|$|E
40|$|E-learning through VSAT network {{consists}} of a HUB station, which is a satellite earth station and a Studio for video broadcasting of the lectures and many remote classrooms. The HUB will interconnect the VSATs at various geographical locations establishing the communication link in C or in Ku bands. The Studio room {{consists of}} Control Server, Agent Server, AV (Audio/Video) Streaming Server, Presentation Capture Server apart from other servers like Media Control Recording Server, Whiteboard Server, Text interaction Server, Live Voice Room Server, Private Voice <b>Call</b> <b>server</b> etc. The Control Server {{is at the heart}} of the E-learning through VSAT and it acts as a gateway to all remote classrooms. The remote virtual classroom is a receiving agent and must have registered students with computer systems along a dedicated Internet dial up line. The advantages are- video and audio output of the lecturer/teacher, return audio and video from the student for a unique teacher-student interaction, option for displaying animated content during the live lecture with unique interactive tools for making the lecture livelier, text chat option for students to ask questions and to get reply, audio chat for teacher-student interaction through audio mode, option for the student to join or leave a particular lecture session, whiteboard option for the teacher/lecture...|$|E
50|$|There was no {{separate}} server {{edition of}} Mountain Lion, {{just as there}} was no separate server edition of Lion. There was an OS X Server package for Mountain Lion, available from the Mac App Store for $19.99, that included a <b>server</b> management app <b>called</b> <b>Server,</b> {{as well as other}} additional administrative tools to manage client profiles and Xsan.|$|R
50|$|On March 16, 2002, Macromedia {{released}} Flash Player 6. This version {{included all}} the functionality for a {{yet to be}} released <b>server</b> <b>called</b> Flash Communication <b>Server</b> MX.|$|R
5000|$|Finally, the <b>server</b> stub <b>calls</b> the <b>server</b> procedure. The reply {{traces the}} same {{steps in the}} reverse direction.|$|R
40|$|Abstract. Imagine {{a set of}} self-interested clients, each of whom {{must choose}} a server from a {{permissible}} set. A server's latency is inversely proportional to its speed, but it grows linearly with (or, more generally, as the pth power of) the number of clients matched to it. Many emerging Internet-centric applications such as peer-to-peer networks, multi-player online games and distributed computing platforms exhibit such interaction of self-interested users. This interaction is naturally modeled as a congestion game, which we <b>call</b> <b>server</b> matching. In this overview paper, we summarize results of our ongoing work on {{the analysis of the}} server matching game, and suggest some promising directions for future research. 1 Introduction The decentralized nature of the Internet has added a new dimension of complex-ity to the design and analysis of algorithms: lack of cooperation or coordination. The users of the Internet are a diverse group, each selfishly and independentlyinterested in optimizing its own personal utility. These users are neither obedient, as typically assumed in theory of algorithms, nor malicious, as assumed in areaslike cryptography. Instead, these selfish users are best modeled as strategic and rational entities, whose primary objective is to maximize their own benefit. Forinstance, they do not intentionally act to inflict harm on a system, but they also cannot be expected to follow a protocol truthfully if deviating from the protocolis to their advantage...|$|E
40|$|As a user {{moves to}} {{different}} locations, {{how to make}} the communication service in use follows the user to the current location without being broken off depends on the support of Personal Mobility. Therefore, supporting personal mobility for the “follow-me service ” is the goal of this research. We integrate Radio Frequency Identification (RFID), and SIP Express Router (SER) to create a VoIP system which can achieve personal mobility. In our proposed system, as soon as the user moves to different locations, the sensors of the doors/locations can read the RFID Tag of the user and the server can activate an according phone and register to the SER immediately. To avoid multiple registrations, our system will close the phone which the user used before at the same time. The advantage of this research is that it’s unnecessary to change the settings of the SER, and neither to use the specific phone. In the implementation, we introduce two modules, Remote <b>Call</b> <b>Server</b> (RCS) and Remote Call Client (RCC), to support personal mobility. Both modules are written in Microsoft © Visual C#. NET and use the same MySQL database with the SIP Proxy Server for reducing the deployment cost. Moreover, the RFID reader directly connects to RCS via a regular USB port. As a result, the reader can immediately transfer the raw data to RCS when it reads some tags. These features make deploying a personal mobility architecture easier and promising...|$|E
40|$|Abstract-This paper {{presents}} a mechanism that facilitates and enhances {{the use of}} independently administered remote network servers {{in the presence of}} server interface heterogeneity. The mechanism is designed under the client-service model, which extends the client-server model with an abstraction of service to decouple abstract server capabilities from concrete server inter-face specifics such as server interface binding protocols and the interface operation invocation protocols. The mechanism selects servers, accommodates server interface heterogeneity, and han-dles server access failures as per the abstract server capabilities desired by the client. It could return the identity of the server used for each service access invocation to facilitate billing, refining service specifications, and reporting server-specific errors. This paper also illustrates a C library interface to this mecha-nism, and describes a language veneer over the C programming language demonstrating how a typed procedural language could be extended by a few language constructs to support the mech-anism under the client-service model. In this language, server capabilities are referenced by abstract data type (ADT) objects, and are accessed by invoking the objects ’ interface operations using a call-by-value-result paradigm. This language veneer also makes it easier to port the client software across to systems that use different service specification schemes. Our work suggests that this mechanism facilitates the develop-ment, use, and maintenance of client and server software in large heterogeneous distributed systems comprising many autonomous servers. It also shows that the overhead of invoking remote server operations via the mechanism can be quite low. Index Terms-Heterogeneous distributed systems, client-server model, client-service model, service acquisition mechanism, attribute-based naming, remote procedure <b>call,</b> <b>server</b> interface directory service, agent process, fault tolerance, object-oriented programming, language veneer. I...|$|E
5000|$|... iChat AV — The new iChat AV 3.0 in Mac OS X 10.4 Tiger {{supports}} {{up to four}} {{participants in}} a video conference and ten participants in an audio conference. It also now supports communication using the XMPP protocol. A XMPP <b>server</b> <b>called</b> iChat <b>Server</b> is included on Mac OS X 10.4 Tiger Server.|$|R
40|$|All {{requests}} {{that are}} send to website server {{are stored in}} a file <b>called</b> <b>Server</b> File Log, all pages users observe or all user’s requests to the Server are stored in that File. In this paper {{we are going to}} investigate the user’s behavior by web usage mining through Server File Log in order to improve the website better service and at the end by analyzing Download software website we present the result in illustration...|$|R
5000|$|McCarthy is also {{credited}} with developing an early form of time-sharing. His colleague Lester Earnest told the Los Angeles Times: [...] "The Internet {{would not have}} happened nearly as soon as it did {{except for the fact that}} John initiated the development of time-sharing systems. We keep inventing new names for time-sharing. It came to be <b>called</b> <b>servers....</b> Now we <b>call</b> it cloud computing. That is still just time-sharing. John started it." ...|$|R
