5757|210|Public
5|$|In general, the {{question}} of finding a homomorphism from one relational structure to another is a <b>constraint</b> <b>satisfaction</b> problem (CSP).|$|E
5|$|For {{directed}} graphs, {{the situation}} is more complicated and in fact equivalent to the much more general question of characterizing the complexity of <b>constraint</b> <b>satisfaction</b> problems.|$|E
5|$|Homomorphisms generalize various {{notions of}} graph colorings {{and allow the}} {{expression}} of an important class of <b>constraint</b> <b>satisfaction</b> problems, such as certain scheduling or frequency assignment problems.|$|E
40|$|This paper {{presents}} a nonlinear model predictive control (NMPC) strategy combined with <b>constraint</b> <b>satisfactions</b> for a quadcopter. The full {{dynamics of the}} quadcopter describing the attitude and position are nonlinear, which are quite sensitive to changes of inputs and disturbances. By means of <b>constraint</b> <b>satisfactions,</b> partial nonlinearities and modeling errors of the control-oriented model of full dynamics can be transformed into the inequality constraints. Subsequently, the quadcopter can be controlled by an NMPC controller with the updated constraints generated by <b>constraint</b> <b>satisfactions.</b> Finally, the simulation results applied to a quadcopter simulator are provided to show the e ectiveness of he proposed strategy. Postprint (author's final draft...|$|R
40|$|Distributed <b>constraints</b> <b>satisfaction</b> {{problems}} (DisCSPs) {{are composed}} of agents, each holding its local constraints network, that are connected by constraints among variables of different agents. Agents assign values to variables, at-tempting to generate a locally consistent assignment that is also consisten...|$|R
50|$|An {{evaluation}} is consistent {{if it does}} not violate any of the constraints. An {{evaluation is}} complete if it includes all variables. An evaluation is a solution if it is consistent and complete; such an evaluation is said to solve the <b>constraints</b> <b>satisfaction</b> problem.|$|R
5|$|In each case, these {{simplified}} models display many of {{the issues}} that have to be handled in practice. <b>Constraint</b> <b>satisfaction</b> problems, which generalize graph homomorphism problems, can express various additional types of conditions (such as individual preferences, or bounds on the number of coinciding assignments). This allows the models to be made more realistic and practical.|$|E
5|$|The same {{statements}} {{hold more}} generally for <b>constraint</b> <b>satisfaction</b> problems (or for relational structures, in other words). The only assumption needed is that constraints can involve only a bounded {{number of variables}} (all relations are of some bounded arity, 2 {{in the case of}} graphs). The relevant parameter is then the treewidth of the primal constraint graph.|$|E
5|$|In {{computer}} science, 2-satisfiability, 2-SAT or just 2SAT is a computational {{problem of}} assigning values to variables, {{each of which}} has two possible values, in order to satisfy a system of constraints on pairs of variables. It is a special case of the general Boolean satisfiability problem, which can involve constraints on more than two variables, and of <b>constraint</b> <b>satisfaction</b> problems, which can allow more than two choices for the value of each variable. But in contrast to those more general problems, which are NP-complete, 2-satisfiability can be solved in polynomial time.|$|E
40|$|A {{predictive}} control strategy for vehicle platoons {{is presented in}} this paper, accommodating both string stability and constraints (e. g., physical and safety) satisfaction. In the proposed design procedure, the two objectives are achieved by matching a Model Predictive Controller (MPC), enforcing <b>constraints</b> <b>satisfaction,</b> with a linear controller designed to guarantee string stability. The proposed approach neatly combines the straightforward design of a string stable controller in the frequency domain, where {{a considerable number of}} approaches have been proposed in literature, with the capability of a MPC-based controller of enforcing state and input constraints. A controller obtained with the proposed design procedure is validated in simulations, showing how string stability and <b>constraints</b> <b>satisfaction</b> can be simultaneously achieved with a single controller. The operating region that the MPC controller is string stable is characterized by the interior of feasible set of the MPC controller...|$|R
40|$|In {{this paper}} we introduce," {{which are a}} new type of {{integrity}} constraints for deductive databases. We provide a semantics for Datalog type of deductive database augmented with contestations and in terms of this semantics we provide a new theory of <b>constraints</b> <b>satisfaction.</b> We show how certain familiar type of integrity constraints discussed in the deductive database literature can be represented as sets of contestations...|$|R
40|$|This paper {{presents}} extensions for temporal <b>constraints</b> <b>satisfaction</b> in MIndiGolog [KP 06], {{for both}} agent-time and real-time constraints. An implementation {{is provided in}} Prolog, which enables users to specify their constraints as arguments to a single entry point predicate. The results are demonstrated with practical examples, and limitations of our implementation are discussed in depth. Finally, scope for possible further work and research is provided. ...|$|R
25|$|<b>Constraint</b> <b>Satisfaction</b> {{which allows}} for a {{separation}} between problem specification and the implementation.|$|E
25|$|Decomposition MethodTree Decomposition {{is used in}} Decomposition Method {{for solving}} <b>constraint</b> <b>satisfaction</b> problem.|$|E
25|$|<b>Constraint</b> <b>satisfaction</b> {{studies the}} {{case in which the}} {{objective}} function f is constant (this is used in artificial intelligence, particularly in automated reasoning).|$|E
40|$|This paper {{describes}} a new reliable method, based on modal interval analysis (MIA) and set inversion (SI) techniques, for {{the characterization of}} solution sets defined by quantified <b>constraints</b> <b>satisfaction</b> problems (QCSP) over continuous domains. The presented methodology, called quantified set inversion (QSI), can be used {{over a wide range}} of engineering problems involving uncertain nonlinear models. Finally, an application on parameter identification is presente...|$|R
50|$|The relaxed {{intersection}} of m sets {{corresponds to the}} classicalintersection between sets except that it is allowed to relax few sets {{in order to avoid}} an empty intersection.This notion can be used to solve <b>Constraints</b> <b>Satisfaction</b> Problemsthat are inconsistent by relaxing a small number of constraints.When a bounded-error approach is considered for parameter estimation,the relaxed intersection makes it possible to be robust with respectto some outliers.|$|R
40|$|International audienceTimetable {{creation}} has {{usually been}} tackled as a <b>constraints</b> <b>satisfaction</b> problem (CSP). In this article, we propose a new, original and promising {{way to create}} timetables: negotiation. Using negotiation allow users to establish their timetable according to their preferences and without revealing their constraints. The problem we tackle here {{is to create a}} timetable involving teachers and groups of student. Multi-agent systems seem particularly of interest for this problem as different entities have to negotiate together...|$|R
25|$|Every <b>constraint</b> <b>satisfaction</b> problem (CSP) has a {{translation}} into the homomorphism problem. Therefore, {{the complexity of}} CSP can be studied using the methods of finite model theory.|$|E
25|$|In machine learning, tree decompositions {{are also}} called {{junction}} trees, clique trees, or join trees; they {{play an important}} role in problems like probabilistic inference, <b>constraint</b> <b>satisfaction,</b> query optimization, and matrix decomposition.|$|E
25|$|While working (starting in 1975) as a {{research}} assistant at MIT under Gerry Sussman, Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking. This paper was an early work {{on the problem of}} intelligent backtracking in <b>constraint</b> <b>satisfaction</b> problems. , the technique Stallman and Sussman introduced is still the most general and powerful form of intelligent backtracking. The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.|$|E
40|$|Abstract: The {{majority}} of the job shop scheduling literature carries a common assumption that machines are available all the time. However, this availability assumption {{may not be true}} in real industry settings, since machines may become unavailable during certain periods of time when machine shutdowns are scheduled. This paper considers job shop scheduling problem with ready time and due date constraints on jobs, shutdown constraints on the machines, which belongs to strong NP-hard problem. We assume that the machine unavailable time is known in advance. Three cases with single shutdown and multiple shutdowns are studied in this paper. After formulating the problem as <b>constraints</b> <b>satisfaction</b> problem, we develop an algorithm based on GENET model with progressive stochastic search scheme to solve the <b>constraints</b> <b>satisfaction</b> problem optimally. Heuristics are embedded into the process of search to cope with the objective of minimizing the percentage of tardy jobs. The proposed algorithm is compared with priority heuristic algorithms under different experimental settings (problem sizes and constraints tightness) within a reasonable computational time. Experimental results indicate that the presented algorithm is an efficient scheduling alternative for this class of complex optimization problem...|$|R
40|$|Colloque avec actes et comité de lecture. internationale. International audienceIn {{this paper}} we study proof-search methods in the multiplicative {{fragment}} of mixed linear logic {{that are based}} on the use of labelled proof nets. We mainly analyze the interaction and relationships in such a logic between the commutative and non-commutative connectives. From previous results on proof search in commutative and non-commutative (or cyclic) linear logic, we propose two different procedures, both based on proof nets search relative to some <b>constraints</b> <b>satisfaction</b> or propagation...|$|R
40|$|This paper studies a {{synthesis}} approach to predictive control for networked control systems with data loss and quantization. An augmented Markov jump linear model with polytopic uncertainties is modeled {{to describe the}} quantization errors and possible data loss. Based on this model, a predictive control synthesis approach is developed, which involves online optimization of a infinite horizon objective and conditions to deal with system constraints. The proposed MPC algorithm guarantees closed-loop mean-square stability and <b>constraints</b> <b>satisfaction.</b> © 2014 TCCT, CAA. postprin...|$|R
25|$|A Sudoku {{may also}} be {{modelled}} as a <b>constraint</b> <b>satisfaction</b> problem. In his paper Sudoku as a Constraint Problem, Helmut Simonis describes many reasoning algorithms based on constraints which {{can be applied to}} model and solve problems. Some constraint solvers include a method to model and solve Sudokus, and a program may require less than 100 lines of code to solve a simple Sudoku. If the code employs a strong reasoning algorithm, incorporating backtracking is only needed for the most difficult Sudokus. An algorithm combining a constraint-model-based algorithm with backtracking would have the advantage of fast solving time, and the ability to solve all sudokus.|$|E
500|$|... {{describe}} a technique involving limited backtracking for solving <b>constraint</b> <b>satisfaction</b> problems with binary variables and pairwise constraints. They apply this technique {{to a problem}} of classroom scheduling, but they also observe that it applies to other problems including 2-SAT.|$|E
500|$|It {{turns out}} that H-coloring {{problems}} for directed graphs are just as general and as diverse as CSPs with any other kinds of constraints. Formally, a (finite) constraint language (or template) Γ is a finite domain and a finite set of relations over this domain. CSP(Γ) is the <b>constraint</b> <b>satisfaction</b> problem where instances are only allowed to use constraints in Γ.|$|E
40|$|Abstract. The article offers {{original}} approach {{which is}} called Controller Agent for <b>Constraints</b> <b>Satisfaction</b> (CACS). That approach combines multi-agent architecture with constraint solvers in the unified framework which expresses major features of Swarm Intelligence approach and replaces traditional stochastic adaptation of the swarm of the autonomous agents by constraint-driven adaptation. We describe major theoretic, methodological and software engineering principles of composition of constraints and agents {{in the framework of}} one multi-agent system, as well as application of our approach for modelling of particular logistic problem. 12 1...|$|R
40|$|A fast {{implementation}} of a given predictive controller for nonlinear systems is introduced through a piecewise constant approximate function defined over an hyper-cube partition of the system state space. Such a state partition is obtained by maximizing the hyper-cube volumes in order to guarantee, besides stability, an a priori fixed trajectory error as well as input and state <b>constraints</b> <b>satisfaction.</b> The presented approximation procedure is achieved by solving a set of nonconvex polynomial optimization problems, whose approximate solutions are computed by means of semidefinite relaxation techniques for semialgebraic problems...|$|R
40|$|Job-shop {{scheduling}} {{is one of}} {{the most}} difficult production scheduling problems in industry. This paper presents an improved adaptive neural network together with heuristic methods for job-shop scheduling problems. The neural network is based on <b>constraints</b> <b>satisfaction</b> of job-shop scheduling and can adapt its structure and neuron connections during the solving. Several heuristics are also proposed to be combined with the neural network to guarantee its convergence, accelerate its solving process, and improve the quality of solutions. Experimental study shows that the proposed hybrid approach outperforms two classical heuristic algorithms regarding the quality of solutions...|$|R
2500|$|Historically, {{the notion}} of {{construction}} grammar developed out of the ideas of [...] "global rules" [...] and [...] "transderivational rules" [...] in generative semantics, together with the generative semantic idea of a grammar as a <b>constraint</b> <b>satisfaction</b> system.|$|E
2500|$|Constraint logic {{programming}} extends Prolog to include concepts from <b>constraint</b> <b>satisfaction.</b> A constraint logic program allows constraints {{in the body}} of clauses, such as: A(X,Y) :- X+Y>0. [...] It is suited to large-scale combinatorial optimisation problems and is thus useful for applications in industrial settings, such as automated time-tabling and production scheduling. Most Prolog systems ship with at least one constraint solver for finite domains, and often also with solvers for other domains like rational numbers.|$|E
50|$|The {{complexity}} of <b>constraint</b> <b>satisfaction</b> is {{the application of}} computational complexity theory on <b>constraint</b> <b>satisfaction.</b> It has mainly been studied for discriminating between tractable and intractable classes of <b>constraint</b> <b>satisfaction</b> problems on finite domains.|$|E
40|$|Event-triggered and self-triggered control {{have been}} {{proposed}} {{in recent years as}} promising control strategies to reduce communication resources in Networked Control Systems (NCSs). Based on the notion of set-invariance theory, this note presents new self-triggered control strategies for linear discrete-time systems subject to input and state constraints. The proposed schemes not only achieve communication reduction for NCSs, but also ensure both asymptotic stability of the origin and <b>constraint</b> <b>satisfactions.</b> A numerical simulation example validates the effectiveness of the proposed approaches. Comment: To appear in IEEE Transactions on Automatic Contro...|$|R
30|$|As {{shown in}} Fig.  2 and Fig.  3, without {{customer}} <b>satisfaction</b> <b>constraints,</b> the load profile is smooth while the price varies significantly. Actually the drastic adjustment does not prove effective because {{the coefficient of}} price elasticity becomes large for exaggerated price variation. After the customer <b>satisfaction</b> <b>constraints</b> are considered, the price and load profiles present acceptable variation. Fig.  2 and Fig.  3 show that the consumption way satisfaction and payment satisfaction both impact the load profiles and price profiles. In Fig.  2, the load profiles under various payment <b>satisfaction</b> <b>constraints</b> present a greater difference than that under various consumption way <b>satisfaction</b> <b>constraints.</b> In Fig.  3, the impact of payment <b>satisfaction</b> <b>constraints</b> is even more obvious than that of consumption way <b>satisfaction</b> <b>constraints.</b> From the definitions in (5) and (6), {{it can be concluded}} that less payment means shifting more demand to hours with lower price while more consumption way satisfaction means less energy consumption to be shifted. It is noted that the payment is related to both price and load while the consumption way is only related to the load. The shift of load is achieved by the variation of the price. The variation of the price totally impairs the shift of load. Therefore, more efforts are needed to meet the payment constraints. That is why the payment constraints impact constraints more obviously.|$|R
40|$|Constrained {{control for}} {{stochastic}} linear systems is generally {{a difficult task}} due to the possible infeasibility of state constraints. In this paper, we focus on a finite control horizon and propose a design methodology where the constrained control problem is formulated as a chance-constrained optimization problem depending on some parameter. This parameter can be tuned so as to decide the appropriate trade-off between control cost minimization and state <b>constraints</b> <b>satisfaction.</b> An approximate solution is computed via a randomized algorithm. Precise guarantees about its feasibility for the original chance-constrained problem are provided. A numerical example shows {{the efficacy of the}} proposed methodology...|$|R
