22|458|Public
40|$|<b>Configuration</b> <b>Programming,</b> {{based on}} Architecture Description Languages, and Meta-Level Programming are {{considered}} promising approaches {{in the software}} engineering field. This paper shows {{that there is an}} immediate correspondence between some key concepts of Configuration and Meta-Level Programming approaches and that some of the main issues to be solved for their deployment in real systems are quite similar. The main proposition is that the integration of both approaches in a single <b>configuration</b> <b>programming</b> framework can assist in putting into practice meta-level programming in order to achieve separation of concerns and improve software reuse. In addition, the capability of supporting dynamic configuration and flexibility on component programming language choice are potentially improved. A prototype of a <b>configuration</b> <b>programming</b> centered environment and some application examples are presented in order to demonstrate the useful features of the combined approach...|$|E
40|$|<b>Configuration</b> <b>programming</b> is {{the process}} whereby {{components}} written in any conventional programming language can be bound {{together to form a}} dynamic system, often suitable for execution on distributed hardware. Among the specialised languages that exist for <b>configuration</b> <b>programming</b> there is currently a debate over the importance of recognising the connections between components as being as important as the components themselves. This paper lays out {{the pros and cons of}} the debate, outlining in the process the properties and roles of connectors. By means of experiments we show how connectors influence the way configurations are programmed and also how some of the effects can be simulated. The examples are given in Darwin, UniCon and WRIGHT and reference is also made to the status of other current configuration languages. Keywords: <b>configuration</b> <b>programming,</b> connectors, MILs, software architecture, UniCon, Darwin, WRIGHT. 1. Introduction Software architecture is an emerging discipline w [...] ...|$|E
40|$|Abstractâ€”Due to {{the complex}} motion control in {{flexible}} roll forming when processing the sheet metal with variable cross-section, it is required for high real-time and high precision control during the processing. Controlling servo motor by adopting the <b>configuration</b> <b>programming</b> is a common approach to achieve roller motion, {{but it will not}} be able or difficult to realize by the <b>configuration</b> <b>programming</b> for complex contour sheet metal without the rules such as hyperbolic, or the molding product in non-symmetric cross-section shape, etc. Based on the process characteristic of flexible roll forming and its motion control technology, this paper adopts the variable time-domain discrete interpolation control method to process the variable cross-section sheet metal. Experiments indicate that this control method provides a good operating method for the sheet metal forming with complex variable cross-section shape in flexible roll forming...|$|E
50|$|System <b>Configuration</b> <b>Program</b> (SCP): {{configure}} device drivers.|$|R
5000|$|Slughorn is {{the name}} of openSUSE's mascot for the YaST2 setup and <b>configuration</b> <b>program.</b>|$|R
40|$|HOMAR is {{computer}} code using homotopic procedure to produce two-dimensional grids in cross-sectional planes, which grids then stacked to produce quasi-three-dimensional grid systems for aerospace <b>configurations.</b> <b>Program</b> produces grids {{for use in}} both Euler and Navier-Stokes computation of flows. Written in FORTRAN 77...|$|R
40|$|<b>Configuration</b> <b>Programming</b> is an object-based {{approach}} to distributed programming. <b>Configuration</b> <b>Programming</b> is an object-based {{approach to}} distributed programming. The main principle underlying {{this approach is}} that programs should be designed, The main principle underlying {{this approach is that}} programs should be designed, constructed and modified as a structural configuration of interconnected component constructed and modified as a structural configuration of interconnected component instances. Program structure is described by a separate explicit configuration language, instances. Program structure is described by a separate explicit configuration language, while the components themselves may be programmed in a range of heterogeneous while the components themselves may be programmed in a range of heterogeneous programming languages. This approach is central to the ESPRIT II project, REX, on programming languages. This approach is central to the ESPRIT II project, REX, on reconfigur [...] ...|$|E
40|$|There is {{an urgent}} need to provide a sound generic {{framework}} for method and tool There is {{an urgent need}} to provide a sound generic framework for method and tool integration, where many differing notations are used, software development is distributed integration, where many differing notations are used, software development is distributed and management support for the software development process is provided. This paper and management support for the software development process is provided. This paper argues {{that there is much}} to be learnt from proven practical techniques for software argues that there is much to be learnt from proven practical techniques for software construction, particularly those that support distributed software integration, heterogeneity construction, particularly those that support distributed software integration, heterogeneity and software management. and software management. <b>Configuration</b> <b>Programming</b> <b>Configuration</b> <b>Programming</b> is one such approach which is [...] ...|$|E
40|$|The <b>configuration</b> <b>programming</b> {{approach}} has been successfully applied to model parallel and distributed systems {{in terms of their}} component processes and relationships, separated from the functional aspects of the components' behaviour. This approach promotes the construction of modular and flexible systems but the lack of information about the components' behaviour prevents us verifying important properties such as deadlock freedom in the configuration...|$|E
40|$|Cost and {{duration}} of wind-tunnel tests reduced. Computer program developed to predict interference of slipstream of propfan on supercritical wing at subsonic speeds. Use of program reduces cost and time involved in wind-tunnel testing of newly-designed wing/nacelle <b>configurations.</b> <b>Program</b> written in FORTRAN V...|$|R
5000|$|Auto-configuration is the {{automatic}} configuration of devices without manual intervention, without {{any need for}} software <b>configuration</b> <b>programs</b> or jumpers. Ideally, auto-configuring devices should just [...] "plug and play". Autoconfiguration has been made common because of the low cost of microprocessors and other embedded controller devices.|$|R
40|$|Program was {{designed}} to generate data from effects of configuration and trajectory on 747 /space shuttle vehicle. System could be adapted to any similar vehicle arrangement. For given coupled vehicle <b>configuration,</b> <b>program</b> will define rate-of-climb ceiling, corresponding trim attitude, and 747 surface deflection at any attainable altitude...|$|R
40|$|There is {{an urgent}} need to provide a sound generic {{framework}} for method and tool integration, where many differing notations are used, software development is distributed and management support for the software development process is provided. This paper argues {{that there is much}} to be learnt from proven practical techniques for software construction, particularly those that support distributed software integration, heterogeneity and software management. <b>Configuration</b> <b>Programming</b> is one such approach which advocates the use of a separate, declarative configuration language for the description of system structure. It has been used in the Conic Environment for the development of distributable software, and is being extended for the configuration of heterogeneous components programmed in different programming languages. A number of software tools exist for the development, construction and management of Conic systems. This paper shows how an analogous set of the principles, practice and tools from <b>configuration</b> <b>programming</b> can be combined with recent work on ViewPoints 1 to provide a configurable framework for method and tool integration...|$|E
40|$|Separation of {{concerns}} {{is a key}} goal in achieving software reusability. Meta-Level Programming approaches {{pave the way to}} separation {{of concerns}} by handling functional and non-functional aspects in different levels, but provide little help for software composition, verification and evolution activities. Approaches based on Software Architecture / <b>Configuration</b> <b>Programming</b> can overcome these deficiencies and additionally may discipline, and make explicit, the deployment of meta-level programming. Our proposal combines both approaches providing a useful framework to develop, implement and maintain applications...|$|E
40|$|One of {{the most}} {{promising}} approaches in developing component-based (possibly distributed) systems is that of coordination models and languages. Coordination programming enjoys a number of advantages such as the ability to express different software architectures and abstract interaction protocols, support for multilinguality, reusability and programming-in-the-large, etc. <b>Configuration</b> <b>programming</b> is another promising approach in developing large scale, component-based systems, with the increasing need for supporting the dynamic evolution of components. In this paper we explore and exploit the relationship between the notions of coordination and (dynamic) configuration and we illustrate the potential of control- or eventdriven coordination languages to be used as languages for expressing dynamically reconfigurable software architectures. We argue that control-driven coordination has similar goals and aims with the notion of dynamic configuration and we illustrate how the former can ach [...] ...|$|E
40|$|Programs {{based on}} {{equations}} that include functions for boundary values along nozzle axis yield {{different types of}} flow field <b>configurations.</b> <b>Program's</b> documentation details method of calculating subsonic flow field and sonic line, and describes modified method of characteristics for calculating supersonic flow downstream of sonic line...|$|R
50|$|The operation, {{parameterization}} and configuration can {{be carried}} out via the device front, in addition, <b>configuration</b> <b>programs</b> are supplied in which the settings for the user can be clearly arranged. The connection between PC and controller can be established via USB, TCP / IP or serial interfaces.|$|R
5000|$|In Solaris/OpenSolaris, {{the loop}} device is called [...] "loopback file interface" [...] or lofi, and located at /dev/lofi/1, etc. SunOS has the <b>configuration</b> <b>program</b> lofiadm. [...] "lofi {{supports}} read-only compression and read-write encryption. Available {{is also a}} 3rd-party driver fbk (File emulates Blockdevice), for SunOS/Solaris since summer 1988.|$|R
40|$|Regis is a {{programming}} environment aimed at supporting {{the development and}} execution of distributed programs. It embodies a constructive approach {{to the development of}} programs based on separating program structure from communication and computation. The emphasis is on constructing programs from multiple parallel computational components which cooperate to achieve the overall goal. The environment is designed to easily accommodate multiple communication mechanisms and primitives. Both the computational and communication elements of Regis programs are programmed in the Object Oriented programming language C++. The elements are combined into distributed programs using the configuration language Darwin. The paper describes programming in Regis through a set of small example programs drawn from the implementation of an Active Badge system. Keywords <b>configuration</b> <b>programming,</b> dynamic reconfiguration, inter-process communication, distributed programming language, software development enviro [...] ...|$|E
40|$|Many {{distributed}} applications require {{a means of}} managing the dynamic changes of its software interconnection structure in a distributed way. In this paper, we present a model of hierarchical and decentralized change management that supports a parallel execution of independent dynamic changes and provides a deadlock-free cooperation between the managing processes. This model {{is based on the}} <b>Configuration</b> <b>Programming</b> Approach, which views a distributed program as having a hierarchic configuration consisting of interconnected and nested components interacting via message passing. The hierarchy of the program configuration induces a decomposition into several change domains, each of which is managed by a separate change manager. Although this allows for a parallel execution of independent changes, other changes require a cooperation among the managers. This cooperation and the algorithm used in change managers are explained and discussed in this paper. 1 Introduction Distributed systems [...] ...|$|E
40|$|<b>Configuration</b> <b>programming</b> {{emphasizes}} {{the separation of}} structure from traditional programming concerns. It views a program {{in terms of a}} structural configuration of interconnected component instances. While components may be programmed in a variety of heterogeneous languages, their interconnection must be expressed by a configuration language. We describe facilities of the configuration language Darwin which permit the description of multi-user applications in a manner identical to `normal' configuration-based parallel or distributed programs. The implementation platform, Rex, is described as is Conf, a distributed conferencing program which, while simple, illustrates several of Darwin's important and powerful features. 1 Introduction Rex is a five year project of which the goal is to produce a methodology and tool support for the development and management of parallel and distributed systems, [1]. It embodies much of the experience derived from the Conic project, [2]. Rex adopts t [...] ...|$|E
5000|$|... apt-config is the APT <b>Configuration</b> Query <b>program.</b> [...] {{shows the}} configuration.|$|R
50|$|Starting {{with the}} IBM 3081 and IBM 4381 in S/370-Extended Architecture mode, IBM changed the I/O {{architecture}} {{to allow the}} Channel Subsystem to handle the channel scheduling that the operating system had to handle in S/370 mode. The new I/O architecture used a 16-bit Channel Path Id (CHPID); the Channel Subsystem was responsible for mapping the CHPID to the channel and device numbers, for queuing I/O requests and for selecting from the available paths. The installation was responsible for defining the Input/Output Configuration Data Sets (IOCDSs), and the operator could select a specific IOCDS {{as part of a}} power on reset (POR). Input/Output <b>Configuration</b> <b>Program</b> (IOCP) is a program for IBM mainframes that compiles a description of the Channel Subsystem and LPAR configuration, optionally loading it into an Input/Output Configuration Data Set (IOCDS); it recognizes the syntax of MVS <b>Configuration</b> <b>Program</b> (MVSCP) input, and {{there is no need to}} maintain separate input files.|$|R
50|$|Predefined WinFS schemas include schemas for documents, e-mail, appointments, tasks, media, audio, video, {{and also}} {{includes}} system schemas that include <b>configuration,</b> <b>programs,</b> and other system-related data. Custom schemas {{can be defined}} on a per-application basis, in situations where an application wants to store its data in WinFS, but not share the structure of that data with other applications, or they can be made available across the system.|$|R
40|$|The {{underlying}} model {{commonly used}} to describe an application domain is that of processing The underlying model {{commonly used to}} describe an application domain is that of processing components, loosely coupled by communication streams {{for each of the}} different types of components, loosely coupled by communication streams for each of the different types of information produced or consumed. The underlying model used for implementing distributed information produced or consumed. The underlying model used for implementing distributed and parallel systems is usually similar, consisting of distributable processes communicating and parallel systems is usually similar, consisting of distributable processes communicating by message passing. Why then should different models be introduced in the intervening by message passing. Why then should different models be introduced in the intervening phases of software development? <b>Configuration</b> <b>programming</b> advocates the use of the same phases of software [...] ...|$|E
40|$|The {{industry}} {{calls for}} fieldbus architectures that allow transducer nodes {{to be connected}} into a network in a true "plug and play" fashion. A plug and play configuration consists {{of at least three}} tasks: to identify the new nodes, to obtain the documentation, and to download the configuration. This paper deals with node identification and <b>configuration</b> <b>programming</b> for the TTP/A fieldbus. We present a method for identification and configuration of new nodes that is suitable for master-slave fieldbus networks with deterministic timing behavior. The method integrates well with the TTP/A protocol and is implementable in standard TTP/A slave and master nodes. Even though configuration of new components is normally not time critical, our method inherites a deterministic timing behavior from the TTP/A protocol and can be used in parallel with real-time traffic for hot plug and play of new nodes...|$|E
40|$|Abstract: This paper {{discusses}} {{an environment}} for <b>configuration,</b> <b>programming,</b> {{and control of}} robot workcells. The controller is intended to support research in automation programming and motion control, {{and to provide a}} vehicle for conveniently integrating new sensors and other devices into a workcell in a useful way. The system consists of an interactive Programming System connected through a shared memory to a multiple-processor Real Time System that performs time-critical operations. The Programming System executes programs written in an enhanced version of AML and transmits high level commands, called verbs, to the Real Time System for execution. Verbs may either be simple, consisting essentially of a process specification and termination conditions, or they may be compositions of other verbs. The processes themselves are specified in terms of lower level entities called real time application subroutines, state vector variables, and data flow graphs which describe computations to be performed in the Real Time System...|$|E
50|$|GNOME System Tools (GST), {{previously}} {{known as}} Ximian Setup Tools and Helix Setup Tools, {{is a set}} of <b>configuration</b> <b>programs</b> for Linux and other Unix-like operating systems. It consists of a set of 'backends' (scripts written in Perl) which manipulate the system's configuration files, and generate XML descriptions of the current state, and frontends, generally written in C, which are GUIs for the GNOME desktop environment.|$|R
40|$|Algorithm {{developed}} for calculating both quantity of compressor bleed flow required to cool turbine and resulting decrease in efficiency due to cooling air injected into gas stream. Program {{intended for use}} with axial-flow, air-breathing, jet-propulsion engines with variety of airfoil-cooling configurations. Algorithm results compared extremely well with figures given by major engine manufacturers for given bulk-metal temperatures and cooling <b>configurations.</b> <b>Program</b> written in FORTRAN IV for batch execution...|$|R
5000|$|... ffdshow {{does not}} include a media player or {{container}} parsers. Instead, after installation of ffdshow, compatible DirectShow or VFW media players such as Media Player Classic, Winamp, and Windows Media Player will use the ffdshow decoder automatically, thus avoiding the need to install separate codecs for the various formats supported by ffdshow. The user configures ffdshow's audio and video settings by launching the ffdshow video decoder <b>configuration</b> <b>program</b> independently of any media player.|$|R
40|$|Conference Name: 2011 IEEE International Conference on Computer Science and Automation Engineering, CSAE 2011. Conference Address: Shanghai, China. Time:June 10, 2011 - June 12, 2011. IEEE Beijing Section; Pudong New Area Association for Computer; Pudong New Area Science and Technology Development Fund; Tongji University; Xiamen UniversityFor the {{advantages}} of high integration, low power consumption, flexible <b>configuration</b> <b>programming</b> and short development cycle, FPGA {{is more and more}} used in the embedded system design. A power quality monitoring system based on FPGA is presented. The system uses FPGA and Linux as the hardware and software platform, and the FTP protocol to get the sampled data. It is controlled by the network. The core of the system is the Fast Fourier Transform (FFT) that uses the non-recursive complex sequence FFT. Experimental results show that the test design based on the Spartan 3 E 500 platform is reliable and effective. Finally, the influence of Cache and multi-thread in the computation time is also analyzed. ? 2011 IEEE...|$|E
40|$|The {{computing}} {{community needs}} distributed systems to satisfy its need for harnessing more computers solving more problems more quickly. Yet is still hard for programmers to write programs for such systems. Recently, configuration languages have emerged {{which have the}} aim of making distributed programming easier, more robust and more flexible. So far, each of these is confined to a small user community, and there is a wide range of features and facilities offered. In this paper, we consider the basic responsibilities of configuration languages and then look at four sample languages in detail. These are Darwin, Durra, PCL and Polylith. The study starts with simple static <b>configuration</b> <b>programming</b> and proceeds to dynamic programming and change management. The producer consumer example is used throughout, and the comparative code fragments shown are a novel feature of the paper. From the results of the comparison we deduce a ten-point scheme of criteria for evaluating a language in terms o [...] ...|$|E
40|$|Distributed {{programs}} {{consist of}} multiple processes that cooperate by message passing to fulfil some global task. An interesting extension is {{the provision of}} dynamic changes for distributed programs {{as a means to}} establish evolutionary systems. The author models the development of distributable programs using the <b>configuration</b> <b>programming</b> approach (J. Kramer, 1990), that is developed further in the Esprit II project REX on reconfigurable and extensible parallel and distributed systems. A key principle of this approach is the separation of the functional description of individual process behaviour from the description of system structure viewed as a set of processes and their interconnections. The author presents fundamentals of the distributed system model followed by an explanation of programming notation, as used for the distinct levels of configuration and process programming. He describes two distinct views of reconfiguration states. Then all important notions according to a change programming approach are introduced. He shows a detailed example and briefly discusses some correctness aspects. The author also evaluates the proposed model against that of J. Kramer, J. Magee (1990) and an outline of future research work is given...|$|E
5000|$|PU2 nodes are cluster {{controllers}} running <b>configuration</b> support <b>programs</b> such as IBM 3174, IBM 3274, or the IBM 4701 or IBM 4702 Branch Controller ...|$|R
40|$|The CMS {{experiment}} at the LHC at CERN {{is made of}} many detectors {{with more}} than 60 million channels in total. The detector properties are controlled and monitored continuously by the Detector Control System (DCS) {{in order to ensure}} the stability and precision required by its design. This leads to a large data volume to be accessed continuously by people on shift, experts, automatic monitoring tasks, detector <b>configuration</b> <b>programs</b> for trigger and data acquisition systems and offline data reconstruction programs...|$|R
50|$|The {{advantage}} of the NoRMA model {{is the ability to}} construct extremely large configurations, which is achieved by shifting the problem to the user <b>configuration.</b> <b>Programs</b> for NoRMA architectures need to evenly partitioning the data into local memory modules, ensure consistency of software caches to enforce the desired consistency model, handle transformations of data identifiers from one processor's address space to another, and realize a message-passing system for remote access to data. The programming model of Norma architecture is therefore extremely complicated.|$|R
