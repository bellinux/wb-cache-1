7|57|Public
6000|$|The journey seemed endless; street after {{street was}} entered and left behind; and still they went jolting on. At last Mr Squeers began to thrust {{his head out}} of the widow every half-minute, and to bawl a variety of {{directions}} to the coachman; and after passing, with some difficulty, through several mean streets which the appearance of the houses and the bad state of the road denoted to have been recently built, Mr Squeers suddenly tugged at the <b>check</b> <b>string</b> with all his might, and cried, 'Stop!' ...|$|E
6000|$|... 'At any rate, Dorothy,' {{the latter}} said, 'I must {{ask him to}} dinner; {{there will be no}} {{occasion}} for him to interfere farther in the matter, so far as I can see, and I should think that after your manner to him he will not be inclined to do so; still, it is impossible, after the pains he has taken in the matter, not to acquaint him with what has occurred here. We are at the top of St. James's Street,' and he pulled the <b>check</b> <b>string.</b> 'I suppose you will get out here too, Singleton?' ...|$|E
60|$|Off went Aurelia in solitude, {{within a}} large carriage, once gaily fitted though now {{somewhat}} faded and tarnished. She {{was sorry to}} be parted from the Doves, whom she {{wanted to give her}} courage for the introduction to my Lady, and to explain to her the wonders of the streets of London, which she did not quite expect to see paved with gold! She ate her extemporised meal, gazing from the window, and expecting to see houses and churches thicken on her, and hurrying to brush away her crumbs, and put on her gloves lest she should arrive unawares, for she had counted half-a-dozen houses close together. No! here was another field! More fields and houses. The signs of habitation were, so far from increasing, growing more scanty, and looked strangely like what she had before passed. Could this be the right road! How foolish to doubt, when this was my Lady's own coach. But oh, that it had waited for Mrs. Dove! She would beg her to get in when the riders overtook her. When would they? No sign of them could be seen from the windows, and here were more houses. Surely this was Turnham Green again, or there must be another village green exactly like it in the heart of London. How many times did not poor Aurelia go through all these impressions {{in the course of the}} drive. She was absolutely certain that she was taken through Brentford again, this time without a halt; but after this the country became unknown to her, and the road much worse. It was in fact for the most part a mere ditch or cart track, so rough that the four horses came to a walk. Aurelia had read no novels but Telemaque and Le Grand Cyrus, so her imagination was not terrified by tales of abduction, but alarm began to grow upon her. She much longed to ask the coachman whither he was taking her, but the <b>check</b> <b>string</b> had been either worn out or removed; she could not open the door from within, nor make him hear, and indeed she was a little afraid of him.|$|E
50|$|Many compilers can statically <b>check</b> format <b>strings</b> {{and produce}} {{warnings}} for dangerous or suspect formats.|$|R
50|$|While this {{notation}} is much faster, it is {{also more}} dangerous {{because it does not}} perform any <b>checks</b> on <b>string</b> length, and therefore its return cannot be accurately predicted.|$|R
40|$|Force {{analysis}} and calculation of workover string in the slanted and horizontal well {{are the basis}} of designing and <b>checking</b> <b>string</b> strength, selecting tools and determining operation parameters, which determine the operation safety and success of engineering accidence treatment. In this pa-per, by comprehensive consideration of wellbore structure, string assembly, string load and wor-kover operation conditions, the workover string mechanical model has been built under three kinds of working states of lifting, lowering and rotating. The downhole string mechanics has been analyzed and calculated. By field verification, the string assembly, tool selection and operation parameter optimization can be achieved, which can improve the safety and success rates of work-over engineering accident treatment...|$|R
5000|$|Finally, the {{external}} key is set by rotating the key wheels {{to either a}} specific or random sequence of letters. In testing the internal key settings of the M-209, it is customary for the operator to set the key wheels to [...] "AAAAAA", and proceed with encoding a message consisting of nothing but the letter [...] "A." [...] The resulting ciphertext is then compared with a long <b>check</b> <b>string</b> to verify {{that all of the}} internal settings have been performed properly. The <b>check</b> <b>string</b> for this particular configuration is: ...|$|E
5000|$|After the M-209 is {{configured}} {{according to}} the settings above, the machine is ready to encode. Continuing with {{the example of a}} known <b>check</b> <b>string,</b> the first letter to be encoded is [...] "A". The operator sets the indicating disk to the letter [...] "A", and turns the power handle.|$|E
5000|$|Continuing {{the example}} above, the initial letter to be encoded was [...] "A", which maps to [...] "Z" [...] in ciphertext. The shift {{given by the}} variable-toothed gear was 20; {{shifting}} to the left 20 positions gives the final ciphertext letter [...] "T", {{which is the same}} as the first digit in the <b>check</b> <b>string.</b>|$|E
25|$|Rules {{can also}} be applied in reverse to <b>check</b> if a <b>string</b> is grammatically correct {{according}} to the grammar.|$|R
5000|$|JSON: Functions {{to create}} JSON {{documents}}, to access parts of JSON documents and to <b>check</b> whether a <b>string</b> contains valid JSON data ...|$|R
50|$|String problems: A {{small portion}} of men report that they can feel the strings during intercourse. In this case, strings can be trimmed. However, very short strings can prevent the woman from <b>checking</b> the <b>strings</b> for expulsion. Medical {{ultrasonography}} may be required in such cases to check {{the location of the}} IUD.|$|R
40|$|Secret key {{agreement}} protocol between legal parties {{based on}} reconciliation and privacy amplification procedure {{has been considered}} in [2]. The so called privacy amplification theorem is used to estimate the amount of Shannon's information leaking to an illegal party (passive eavesdropper) about the final key. We consider a particular case {{where one of the}} legal parties (Alice) sends to another legal party (Bob) a random binary string x through a binary symmetric channel (BSC) with bit error probability "m while an eavesdropper (Eve) receives this string through an independent BSC with bit error probability "w. We assume that "m < "w and hence the main channel is superior to the wire-tap channel. To reconcile the strings between legal parties Alice sends to Bob through noiseless channel the <b>check</b> <b>string</b> y based on some good error correcting code. Since this transmission is completely public Eve can eavesdrop it and therefore this extra information has {{to be taken into account}} in an estimation of the information leaking to Eve about the final key. In [3] an inequality has been proved to upper bound the information of Eve in such scenario. The main contribution of the running paper is to improve this inequality and hence to enhance the privacy amplification theorem. We present also bounds for the probability of false reconciliation when the check symbols of the linear code are transmitted through noiseless channel. The presented results can be very useful when considering the non-asymptotic case...|$|E
40|$|At 1 algorithm,for {{recognizing}} nutvreric strings with notation {{rules by}} using <b>string</b> <b>checking</b> has been developed. The proposed <b>string</b> <b>check</b> function removes extraneous characters from recognized character strings {{by using the}} notation rules. This function also determines whether to carry out recognition error correction. In this correction process, recognized characters are compared with string in a dictionary. Errors in character strings are autotnatically corrected to meaninRfu 1 letters by using the notcltion rules and dictionary. The string space of the dictionar. ~ to be compared is restricted based on the notation rules; this reduces processing time. The <b>string</b> <b>check</b> function improved the string recognition rate from 98. 5 % to 99. 7 %. and decreases the error rate by 98 %. 2. Numeric String Itnportant nteanirrgful strings, such as I. D. codes. written in a &) main with neighboring characters can be recognized in recil titrre /,?I using this crlgorithm. 1...|$|R
50|$|One {{thing to}} note is that Perl DBI {{requires}} one {{to set the}} TaintIn attribute of a database handle as well as enabling taint mode to <b>check</b> one's SQL <b>strings.</b>|$|R
40|$|Motivated by {{considerations}} in XML database theory and model <b>checking,</b> data <b>strings</b> {{have been introduced}} {{as an extension of}} finite alphabet strings which carry, at each position, a symbol and a data value from an infinite domain. Previous work has shown {{that it is difficult to}} come up with an expressive yet decidable automaton model for data languages. Recently, such a model, data automata, was introduced. This paper introduces a simpler but equivalent model and investigates its expressive power, algorithmic and closure properties, and some extensions. ...|$|R
5000|$|Some compilers, {{like the}} GNU Compiler Collection, will statically <b>check</b> the format <b>strings</b> of printf-like {{functions}} and warn about problems (when using the flags [...] or [...] ). GCC will also warn about user-defined printf-style functions if the non-standard [...] "format" [...] {{is applied to}} the function.|$|R
40|$|Abstract. Motivated by {{considerations}} in XML theory and model <b>checking,</b> data <b>strings</b> {{have been introduced}} {{as an extension of}} finite alphabet strings which carry, at each position, a symbol and a data value from an infinite domain. Previous work has shown that {{it is not easy to}} come up with an expressive yet decidable automata model for data languages. Recently, such an automata model, data automata has been introduced. This paper introduces a simpler but equivalent model and investigates its expressive power, algorithmic and closure properties and some extensions. ...|$|R
5000|$|Some {{security}} extensions to Linux/x86 use rebasing {{to force}} the use of code addresses below [...] in order to introduce a [...] byte into all code pointers; this eliminates a certain class of buffer overflow security problems related to improper <b>checking</b> of null-terminated <b>strings,</b> common in the C programming language.|$|R
40|$|All {{practical}} C programs use structures, arrays, and/or strings. At runtime, {{such objects}} are mapped into consecutive memory locations, hereafter {{referred to as}} buers. Many software defects are caused by buer overow | unintentional access to memory outside the intended object. String manipulation is {{a major source of}} such defects. According to the FUZZ study, they are the cause of most UNIX failures. We present a new algorithm for statically detecting buer overow defects caused by string manipulations in C programs. In many programs, our algorithm is capable of precisely handling destructive memory updates, even in the presence of overlapping pointer variables which reference the same buer at dierent osets. Thus, our algorithm can uncover defects which go undetected by previous works. We reduce the problem of <b>checking</b> <b>string</b> manipulation to that of analyzing integer variables. A prototype of the algorithm has been implemented and applied to statically uncover defects in real C applications, i. e., errors which occur on some inputs to the program. The applications were selected without a priori knowledge of the number of string manipulation errors. A signicant number of string manipulation errors were found in every application, further indicating the extensiveness of such errors. We are encouraged by the fact that our algorithm reports very few false alarms, i. e., warnings on errors that never occur at runtime. ...|$|R
40|$|We {{subject the}} phenomenologically {{successful}} large volume scenario of hep-th/ 0502058 to a first consistency <b>check</b> in <b>string</b> theory. In particular, we consider whether {{the expansion of}} the string effective action is consistent in the presence of D-branes and O-planes. Due to the no-scale structure at tree-level, the scenario is surprisingly robust. We compute the modification of soft supersymmetry breaking terms, and find only subleading corrections. We also comment that for large-volume limits of toroidal orientifolds and fibered Calabi-Yau manifolds the corrections can be more important, and we discuss further checks that need to be performed. Comment: 57 page...|$|R
5000|$|The Linux kernel [...] {{function}} {{supports a}} number of ways to display kernel structures using the generic [...] specification, by appending additional format characters. [...] For example, [...] prints an IPV4 address in dotted-decimal form. This allows static format <b>string</b> <b>checking</b> (of the [...] portion) at the expense of full compatibility with normal printf.|$|R
40|$|Abstract. Consider a {{text string}} of length n, a pattern string of length m, and a match vector of length n which {{declares}} each {{location in the}} text to be either a mismatch (the pattern does not occur beginning at that location in the text) or a potential match (the pattern may occur beginning at that location in the text). Some of the potential matches could be false, i. e., the pattern may not occur beginning at some location in the text declared to be a potential match. We investigate the complexity of two problems in this context, namely, checking {{if there is any}} false match, and identifying all the false matches in the match vector. We present an algorithm on the CRCW PRAM that checks if there exists a false match in O(1) time using O(n) processors. This algorithm does not require preprocessing the pattern. Therefore, checking for false matches is provably simpler than string matching since string matching takes �(log log m) time on the CRCW PRAM. We use this simple algorithm to convert the Karp–Rabin Monte Carlo type string-matching algorithm into a Las Vegas type algorithm without asymptotic loss in complexity. We also present an efficient algorithm for identifying all the false matches and, as a consequence, show that string-matching algorithms take �(log log m) time even given the flexibility to output a few false matches. Key Words. Parallel algorithms, Randomized (Las Vegas) <b>string</b> matching, <b>Checking</b> <b>string</b> matching algorithms. 1. Introduction. Give...|$|R
40|$|There {{are many}} Crypto-system are define in today’s world. There are some private key and public key Crypto-system. These Crypto-systems are all {{mathematical}} calculations So, each {{can be broken}} by computation machine. Computer can check all the possibilities of keys, a Crypto-system have in minutes or hours of time which depends on {{the speed of the}} computer and computation power. Computer applies keys to a cipher text and then <b>checks</b> the <b>string</b> matching with a dictionary. There are many techniques which are being used to increase the key space and secrecy of the Crypto-system but still the computer can find the solution by applying all possible combinations. Reverse String Cipher is a modification in all cipher techniques to increase the security. General Terms Reverse String, Modern Cipher...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedA universal syntax checker was constructed to be utilized with a text editor in a time-sharing environment. This syntax checker is a top-down left-right slow-back parser that will provide, when supplied the syntax of any {{language in the}} Backus-normal form, a syntax <b>check</b> for any <b>string</b> written in a language described. The procedure is capable of handling left, right, and self-embedded recursive definitions. [URL] United States Nav...|$|R
40|$|We discuss {{partition}} {{functions of}} N=(4, 4) type IIA string theory on the pp-wave background. This theory {{is shown to}} be modular invariant. The boundary states are constructed and possible D-brane instantons are classified. Then we calculate cylinder amplitudes in both closed and open <b>string</b> descriptions and <b>check</b> the open/closed <b>string</b> duality. Furthermore we consider general properties of modular invariant partition functions {{in the case of}} pp-waves. Comment: 28 pages, LaTeX 2 e, no figure...|$|R
5000|$|In a {{statement}} released before {{analysis of the}} longer raw video, NPR said, [...] "Schiller's comments are in direct conflict with NPR's official position ... The fraudulent organization represented in this video repeatedly pressed us to accept a $5 million <b>check</b> with no <b>strings</b> attached, which we repeatedly refused to accept." [...] After reviewing the unedited video, Scott Baker, editor-in-chief of TheBlaze, said the NPR executives [...] "seem to be fairly balanced people." ...|$|R
5000|$|There {{are a few}} {{implementations}} of -like {{functions that}} allow extensions to the escape-character-based mini-language, thus allowing the programmer to have a specific formatting function for non-builtin types. One of the most well-known is the (now deprecated) glibc's [...] However, it is rarely used {{due to the fact}} that it conflicts with static format <b>string</b> <b>checking.</b> Another is Vstr custom formatters, which allows adding multi-character format names, and can work with static format checkers.|$|R
40|$|This model {{defines the}} {{structure}} and applicability of aero dynamical complex data (up to four dimensions without flap influence which is separate considered) in steady states calculus for different configurations and optional cases (ground effect, asymmetrical propulsion (one of engines out) {{as well as in}} dynamic simulations. They user is offered many facilities of data entry, correction and graphical view. The punctual values of dimensional parameters for each coefficient are automaticaly <b>checked</b> for the <b>string</b> strictly increased or decreased specific feature...|$|R
25|$|For example, {{there are}} many {{families}} of graphs that are close enough analogues of formal languages {{that the concept of}} a calculus is quite easily and naturally extended to them. Indeed, many species of graphs arise as parse graphs in the syntactic analysis of the corresponding families of text structures. The exigencies of practical computation on formal languages frequently demand that text strings be converted into pointer structure renditions of parse graphs, simply as a matter of <b>checking</b> whether <b>strings</b> are well-formed formulas or not. Once this is done, {{there are many}} advantages to be gained from developing the graphical analogue of the calculus on strings. The mapping from strings to parse graphs is called parsing and the inverse mapping from parse graphs to strings is achieved by an operation that is called traversing the graph.|$|R
40|$|Abstract. String {{matching}} problem instantiates in IP routing {{into several}} operations on packet headers. Routing itself is finding the best matching prefix {{of a set}} of strings, packet filtering is a combination of prefix matching, exact, and range checks. With the increase of IPv 6 importance (with its 128 bit addresses) those operations get more critical in time. Software implementations may not be powerful enough. Natural way is to move the most demanding operations into a hardware accelerator, just in the sense of hardware/software co-design ideas. String matching must be performed by hardware. Unfortunately, we have to <b>check</b> wider <b>strings</b> than today’s Content Addressable Memories can hold; therefore combination of CAM and additional processing may be employed. New task for software support arises here: it has to maintain hardware lookup tables consistent with the software’s ideas about routing and packet filtering. Keywords. String matching, IPv 6, IP routing, CAM, FPGA, Liberouter. ...|$|R
40|$|Existential second-order logic (ESO) and monadic second-order logic (MSO) have {{attracted}} {{much interest in}} logic and computer science. ESO {{is a much more}} expressive logic over word structures than MSO. However, little was known about the relationship between MSO and syntactic fragments of ESO. We shed light on this issue by completely characterizing this relationship for the prefix classes of ESO over strings, (i. e., finite word structures). Moreover, we determine the complexity of model <b>checking</b> over <b>strings,</b> for all ESO-prefix classes. We also give a precise characterization of those ESO-prefix classes which are equivalent to MSO over strings, and of the ESO-prefix classes which are closed under complementation on strings. 1 Introduction and Overview of Results Second-order logic (Σ 1 1) over finite structures has attracted the interest of logicians, mathematicians, and computer scientists for a long time. In particular, several important results have been obtained which [...] ...|$|R
40|$|In {{this article}} we {{consider}} open strings with mixed boundary conditions (a combination of Neumann and Dirichlet at each end), and discuss how their end points show a $D_p$-brane with NS-NS charge, i. e. a bound state of a D-brane with fundamental strings. We show these branes are BPS saturated. Restricting ourselves to D-string case, their mass density is shown to be BPS saturated, in agreement with Sl(2,Z) invariance. Via Chan-Paton factors the consideration is extended {{to the case of}} bound states of $n$ D-strings and $m$ F-strings. These observations are <b>checked</b> both in <b>string</b> theory and the effective field theory limit...|$|R
40|$|Four {{photos of}} women {{standing}} by the stairs leading down to the street, at the commercially zoned apartment in Highland Park, which was the location of Clothespin Fever Press and of the home of Jenny Wrenn and Carolyn Weathers. The women are preparing {{to leave for the}} Page One Bookstore in Pasadena for a double reading by the Weathers Sisters. (Top two photos) Both photos are the same one. Left to right Jenny Wrenn, Carolyn Weathers and Brenda Weathers. Partially visible on the neon light bulb and water damaged ceiling; on the right, the large rectangular world map. (Bottom left photo) Vicki Lewis, sweater, and Brenda Weathers, suspenders. Handwritten note states that these are the suspenders Jenny and Carolyn gave to Vicki for Christmas. Vicki said she couldn't get them off Brenda long enough to wear them. (Bottom right photo) Jenny and Carolyn. Carolyn shows off her new pink socks, white shoes with black and white <b>checked</b> shoe <b>strings.</b> In both left and right bottom photos the stair railing, decorated in tinsel, is visible. Friday, January 23, 1987...|$|R
40|$|Context: In C, {{low-level}} errors, such as {{buffer overflow}} and use-after-free, {{are a major}} problem, as they cause security vulnerabilities and hard-to-find bugs. C lacks automatic checks, and programmers cannot apply defensive programming techniques because objects (e. g., arrays or structs) lack run-time information about bounds, lifetime, and types. Inquiry: Current approaches to tackling low-level errors include dynamic tools, such as bounds or type checkers, that check for certain actions during program execution. If they detect an error, they typically abort execution. Although they track run-time information {{as part of their}} runtimes, they do not expose this information to programmers. Approach: We devised an introspection interface that allows C programmers to access run-time information and to query object bounds, object lifetimes, object types, and information about variadic arguments. This enables library writers to check for invalid input or program states and thus, for example, to implement custom error handling that maintains system availability and does not terminate on benign errors. As we assume that introspection is used together with a dynamic tool that implements automatic checks, errors that are not handled in the application logic continue to cause the dynamic tool to abort execution. Knowledge: Using the introspection interface, we implemented a more robust, source-compatible version of the C standard library that validates parameters to its functions. The library functions react to otherwise undefined behavior; for example, they can detect lurking flaws, handle unterminated <b>strings,</b> <b>check</b> format <b>string</b> arguments, and set errno when they detect benign usage errors. Grounding: Existing dynamic tools maintain run-time information {{that can be used to}} implement the introspection interface, and we demonstrate its implementation in Safe Sulong, an interpreter and dynamic bug-finding tool for C that runs on a Java Virtual Machine and can thus easily expose relevant run-time information. Importance: Using introspection in user code is a novel approach to tackling the long-standing problem of low-level errors in C. As new approaches are lowering the performance overhead of run-time information maintenance, the usage of dynamic runtimes for C could become more common, which could ultimately facilitate a more widespread implementation of such an introspection interface...|$|R
5000|$|Another {{approach}} is to convert strings to a 32 or 64 bit numeric value and then apply a hash function. One method that avoids the problem of strings having great similarity ("Aaaaaaaaaa" [...] and [...] "Aaaaaaaaab") {{is to use a}} Cyclic redundancy check (CRC) of the string to compute a 32- or 64-bit value. While it is possible that two different strings will have the same CRC, the likelihood is very small and only requires that one <b>check</b> the actual <b>string</b> found to determine whether one has an exact match. CRCs will be different for strings such as [...] "Aaaaaaaaaa" [...] and [...] "Aaaaaaaaab". Although, CRC codes can be used as hash values they are not cryptographically secure since they are not collision-resistant.|$|R
