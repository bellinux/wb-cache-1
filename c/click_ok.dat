15|9|Public
2500|$|The dialog {{shows the}} result of a user placing a DVD into a DVD reader, in this case the D: drive. AutoPlay has {{determined}} that content is most likely a DVD movie and presents a set of actions to the user based on that decision. These actions are called Handlers and there are sets of Handlers associated with various types of content. The user can now make their decision and <b>click</b> <b>OK</b> to proceed. However, if they also tick the [...] "Always do the selected action" [...] tick box at this point, they will not be prompted the next time that particular content type is seen on that particular drive; the selected application will automatically start.|$|E
5000|$|<b>Click</b> <b>OK</b> was an Estonian {{pop music}} group. Four {{members of the}} group {{included}} Monika Sjomgina, Kariny Joala, Grete Rämmal and Kairi Siht. Kariny Joala has also {{been a member of the}} Estonian Bad Angels dance group. The group released an album called Lase lõdvaks ('loosen up') in 1998. Many of their songs have also appeared on Estonian various artists compilation albums. These songs include [...] "Casanova", [...] "Narkopolitsei" [...] ('the drug police') and christmas-themed [...] "Taas kord saabub jõulumees" [...] ('once again Santa Claus arrives'), which can't be found on the Lase lõdvaks album.|$|E
50|$|To use the Workgroup Manager local {{directory}} mode, launch it and, {{when presented}} with the Connect dialog box, click Cancel. Then choose View Directories from the Server menu (or use the Apple+D key combination). You will see an alert telling {{you that you are}} not connected to a server directory node, to which you can simply <b>click</b> <b>OK.</b> Before you can manage users or groups, you need to authenticate to the directory by clicking on the lock icon in the upper right of the Workgroup Manager window and entering an administrator username and password for the computer.|$|E
5000|$|Alert {{which opens}} an alert window, which closes {{as soon as}} the user <b>clicked</b> on <b>OK.</b>|$|R
5000|$|Input (you bet!) {{which opens}} an input window (with a text) {{and waits for}} the <b>click</b> on <b>OK</b> ...|$|R
50|$|When {{the user}} <b>clicks</b> the <b>OK</b> button, the dialog is {{closed and the}} focus is {{returned}} to the main window in the state it was in before this dialog was displayed.|$|R
5000|$|Bruce Schneier expands on {{this remark}} as follows: If J. Random Websurfer clicks on a button that {{promises}} dancing pigs {{on his computer}} monitor, and instead gets a hortatory message describing the potential dangers of the applet — he's going to choose dancing pigs over computer security any day. If the computer prompts him with a warning screen like: [...] "The applet DANCING PIGS could contain malicious code that might do permanent damage to your computer, steal your life's savings, and impair your ability to have children," [...] he'll <b>click</b> <b>OK</b> without even reading it. Thirty seconds later he won't even remember that the warning screen even existed.|$|E
5000|$|The dialog {{shows the}} result of a user placing a DVD into a DVD reader, in this case the D: drive. AutoPlay has {{determined}} that content is most likely a DVD movie and presents a set of actions to the user based on that decision. These actions are called Handlers and there are sets of Handlers associated with various types of content. The user can now make their decision and <b>click</b> <b>OK</b> to proceed. However, if they also tick the [...] "Always do the selected action" [...] tick box at this point, they will not be prompted the next time that particular content type is seen on that particular drive; the selected application will automatically start.|$|E
50|$|While PowerTalk was {{generally}} an interesting system, {{a combination of}} design features made it frustrating to use. For instance, the addressing system was so deeply embedded into {{the core of the}} system that simply typing in a new address was an ordeal. First the user had to click on a button, select the address type, type it in, and then finally <b>click</b> <b>OK</b> to have it appear in the message. Disk usage was also a problem; each message was stored as a separate file, requiring 1 kB or more of space in an era where 40 MB and 80 MB disks were still common. Thus a few hundred letters would be enough to fill the free space on the drive. Backing up e-mail was likewise almost impossible as a side-effect of the design; the mail was spread out over the network, some of it remote and inaccessible.|$|E
50|$|Such a {{requirement}} describes {{an interaction between}} an external agent (the user) and the software system. When the user provides input to the system by <b>clicking</b> the <b>OK</b> button, the program responds (or should respond) by closing the dialog window containing the OK button.|$|R
5000|$|In the deluxe {{version of}} the first game, the penguin throws up on impact when the player hits him {{high in the air}} and holds down the left or right arrow key. The {{animation}} lasts longer than the time it takes for the sign saying the score, [...] "replay", [...] "highscores" [...] and [...] "OK" [...] to pop up. If you <b>click</b> the <b>OK</b> button before the vomiting animation is complete, the penguin will vomit on impact next time no matter what. Then if you play the replay, the penguin will not vomit on impact with the ground and keep flying unguided.|$|R
40|$|Background: Confusion between similar drug names is {{a common}} cause of {{potentially}} harmful medication errors. Interventions to prevent these errors {{at the point of}} prescribing have had limited success. The {{purpose of this study is}} to measure whether indication alerts at the time of computerized physician order entry (CPOE) can intercept drug name confusion errors. Methods and Findings: A retrospective observational study of alerts provided to prescribers in a public, tertiary hospital and ambulatory practice with medication orders placed using CPOE. Consecutive patients seen from April 2006 through February 2012 were eligible if a clinician received an indication alert during ordering. A total of 54, 499 unique patients were included. The computerized decision support system prompted prescribers to enter indications when certain medications were ordered without a coded indication in the electronic problem list. Alerts required prescribers either to ignore them by <b>clicking</b> <b>OK,</b> to place a problem in the problem list, or to cancel the order. Main outcome was the proportion of indication alerts resulting in the interception of drug name confusion errors. Error interception was determined using an algorithm to identify instances in which an alert triggered, the initial medication order was not completed, and the same prescriber ordered a similar-sounding medication on the same patient within 5 minutes. Similarity was defined using standard text similarity measures. Two clinicians performed chart review of all cases to determine whether the first, non-complete...|$|R
40|$|How bad {{will it be}} if I <b>click</b> <b>OK</b> on that message, "Are {{you sure}} you want to Question: {{navigate}} away from this page? Your changes will not be saved. Press OK to continue or Cancel to stay on this page"? The "Navigate Away " message displays when you add or modify data on the screen and then click the Cancel button. The message is checking whether you Answer: intend to cancel what you've entered. If you <b>click</b> <b>OK</b> on the message, the system will cancel what you've entered, close that screen and redirect you to the prior screen. You will not exit TEMS. LOGIN (How a TEMS user gains access) Question: How do I get access to TEMS? TEMS is administered at the agency level. Contact your Agency Administrator or Answer: Travel Help Desk for system access. Your agency contact for TEMS may be found through this address...|$|E
40|$|Warning, your {{computer}} is infected with spyware. Windows needs to download and install the anti-spyware updates to remedy this issue. <b>Click</b> <b>OK</b> to begin. ” This {{is just one}} example of many popup warnings that spyware and malware creators use to try to mislead unsuspecting Internet users into downloading potentially harmful software. Falling prey to an illegitimate message could produce negative consequences that vary from bothersome computer performance to complete system failure. The {{purpose of this study was}} to determine which visual design cues, if any, would alert people to the illegitimacy of fake popup warning windows while browsing the Internet. Results indicated that most people did not behave in a cautious manner upon presentation of three different fake popup warning windows. Implications of the research are discussed...|$|E
40|$|EViews COM Automation allows an {{external}} program or script to launch and control EViews programmatically and to transfer data back and forth. This {{allows you to}} use much of the functionality of EViews within your own programs. COM Registration To use EViews COM, you must first register the EViews Type Library on the machine that will need access to EViews. Typically, this is done for you during the EViews installation process. To perform this step manually, first make sure your EViews serial number has been properly registered. Next, open a command window and run EViews with a "/register " command line parameter as follows: C: Files 77. exe /register Conversely, to unregister EViews COM, run the EViews program with a "/unregister " parameter. This will remove all relevant entries from the Windows registry. (Note: This does NOT affect EViews serial number registration.) Adding a Reference In order to use our EViews COM objects in a VBA or. NET project, you must add a reference to our Type Library. In Visual Studio, right-click your project file and select "Add Reference… " and then select the "COM " tab. Scroll down to "EViews 1. 0 Type Library " and select it. <b>Click</b> <b>OK</b> to add this reference to your project. Note: If you cannot find "EViews 1. 0 Type Library " in the list, this means EViews COM has not been properly registered with Windows. See "COM Registration " above. Figure 1 - Visual Studio 'Add Reference ' Popup In VBA (such as in Excel), switch to the VBA development environment (ALT-F 11 in Excel). Under the "Tools " menu, click on "References…". Scroll down to "EViews 1. 0 Type Library " and check the associated checkbox. <b>Click</b> <b>OK</b> to close the popup. In other development environments, please refer to their instructions in properly using COM objects. Our type library definitions are located in a file named "EViewsMgr. dll " in the EViews subdirectory...|$|E
40|$|Confusion between similar drug names is {{a common}} cause of {{potentially}} harmful medication errors. Interventions to prevent these errors {{at the point of}} prescribing have had limited success. The {{purpose of this study is}} to measure whether indication alerts at the time of computerized physician order entry (CPOE) can intercept drug name confusion errors. A retrospective observational study of alerts provided to prescribers in a public, tertiary hospital and ambulatory practice with medication orders placed using CPOE. Consecutive patients seen from April 2006 through February 2012 were eligible if a clinician received an indication alert during ordering. A total of 54, 499 unique patients were included. The computerized decision support system prompted prescribers to enter indications when certain medications were ordered without a coded indication in the electronic problem list. Alerts required prescribers either to ignore them by <b>clicking</b> <b>OK,</b> to place a problem in the problem list, or to cancel the order. Main outcome was the proportion of indication alerts resulting in the interception of drug name confusion errors. Error interception was determined using an algorithm to identify instances in which an alert triggered, the initial medication order was not completed, and the same prescriber ordered a similar-sounding medication on the same patient within 5 minutes. Similarity was defined using standard text similarity measures. Two clinicians performed chart review of all cases to determine whether the first, non-completed medication order had a documented or non-documented, plausible indication for use. If either reviewer found a plausible indication, the case was not considered an error. We analyzed 127, 458 alerts and identified 176 intercepted drug name confusion errors, an interception rate of 0. 14 ±. 01 %. Indication alerts intercepted 1. 4 drug name confusion errors per 1000 alerts. Institutions with CPOE should consider using indication prompts to intercept drug name confusion errors...|$|R
40|$|HUBS is web-based, and Internet Explorer (IE) is the University {{supported}} browser {{for financial}} applications. Version 8 is the recommended version {{and the full}} set of recommended browser settings can be found by following this link, but the settings specific to HUBS are also listed below for your convenience. HUBS can also run in Firefox version 3. 6. If you use Firefox be sure to disable the pop-up blocker. The settings below are exclusive to IE versions 7 & 8. Pop-up blocker = Off � Open IE and select the Tools menu � Select Pop-up Blocker in the Tools menu, and if the blocker is not off, {{you will see the}} selection Turn off Pop-Up Blocker – select it. Check for newer versions of stored pages = Every time I visit the webpage Open IE, select the Tools menu, and in the Tools menu select Internet Options: 1. In the General tab, under Browsing History, click the Settings button and a settings page displays 2. For the question Check for newer version of stored pages, choose Every time I visit the webpage 3. <b>Click</b> the <b>OK</b> button to save the change. 1...|$|R
40|$|CausalTrail CausalTrail is a {{tool for}} causal {{hypotheses}} testing using causal bayesian networks (CBN) and the do-calculus. CausalTrail provides a console application and a graphical user interface. Building CausalTrail can be build using cmake. Mandatory Dependencies The Boost library {{as well as a}} C++ compiler supporting C++ 14 have to be available to build the console version of CausalTrail. Supported compilers are: >= GCC 4. 9 >= Clang 3. 5 Optional Dependencies To build CausalTrails unit test suite, gtest >= 1. 7. 0 is required. To build the gui, Qt version 5. 4 or higher has be installed. Step By Step Build Commands Enter CausalTrails directory and execute the following: mkdir build cd build cmake [...] If the path to gtest can not be found automatically, specify it via cmake. -DGTEST_SRC_DIR= If the path to Qt can not be found automatically, specify it via cmake. -DQt 5 Widgets_DIR= Build the project by typing make To use multiple cores (e. g. 4) for building use the -j option: make -j 4 The executable file for the consol version is located in the folder build/core, the gui version is located in the folder build/gui, and the tests {{can be found in the}} folder build/test. Execution To run CausalTrails tests type make test The console version of CausalTrail can be evoked with the command. /CausalTrail or alternatively. /CausalTrail We provide details on the input files in the next section. The GUI can be launched with. /CausalTrailGui Data Formats Network Files We support two kinds of network formats: the trivial graph format (tgf) and the simple interaction format (sif) along with node node atrribute (na) files. Trivial Graph Format The tgf format has the following structure: NodeID NodeAttribute [...] . # NodeID NodeID EdgeAtribute The upper part of a tgf file contains the mapping between node identifiers and at most one optional attribute, e. g. node names. The # marks the beginning of the actual network definition. Edges are directed from the first to the second node identifier. An edge between two nodes can be mapped to at most one optional attribute. Example 1 Apples 2 Bananas 3 Pears # 1 2 2 3 3 1 Node Attribute Format Node attribute files have the following structure: AttributeName (class = Type) NodeID = NodeAttribute [...] . Different node attribute classes can be referenced via the AttributeName. Type states the data type of the node attributes. The mapping of NodeID to NodeAttribute has to be unique within one class of attributes. Example NodeName (class=java. lang. String) 1 = Apples 2 = Bananas 3 = Pears Simple Interaction Format The simple interaction format is structured as follows: [...] . NodeID EdgeType NodeID [...] . Nodes in the network are identified via the NodeID. Therefore, the NodeIDs have to be unique. The left NodeID represents the source of an edge, the right on represents the target. It is possible to assign more than one target node to a distinct source node, so multiple edges can be stored in one line. The EdgeType encodes the type of an edge, e. g. whether an edge between two nodes is directed or not. It is also common to encode biological meaning in the EdgeType. For example, pd represents Protein-DNA interactions, whereas pp represents Protein-Protein interactions. The EdgeType can also be a longer string, allowing the encoding of more complex descriptions, e. g. activates, inactivates, or phosphorylates. If it is not necessary to encode any specific meaning for an edge xx or yy can be used as an EdgeType. Example 1 pp 2 2 pp 3 3 pp 1 For more information on the SIF format see here. Data Files The samples from which we learn the causal bayesian network parameters should be provided in a tab-delimited text file where the columns represent the samples and the rows represent the features. An example is shown below. SNV 1 Yes No Yes No SNV 2 No No No Yes Expression 1. 7 1. 2 1. 4 0. 6 Discretisation Information CausalTrail uses discretised input data for training the node parameters. As measurements often come as continous values, they have to be discretised before the actual parameter learning can take place. For this reason, we provide several discretisation methods within CausalTrail. Using a simple json file, the user can control the discretisation process. For example: { "SNV 1 ": { "method":"None", }, "SNV 2 ": { "method":"None", }, "Expression": { "method":"Threshold", "threshold": " 1. 0 " } } For every node in the network, the method field specfies the discretisation method. If necessary, additional fields can be used to provide specific information that is needed for the discretisation, e. g. a manually determined threshold as shown in the example above. A list of all keywords and discretisation methods is shown below. Floor: Round the data to the next smaller integer value. Ceil: Round the data to the next larger integer value. Round: Round the data. ArithmeticMean: Divide the data into two groups according to the arithmetic mean. HarmonicMean: Divide the data into two groups according to the harmonic mean. Median: Divide the data into two groups according to the median. Threshold: Divide the data into two groups according to a manually defined threshold. The actual threshold is specified in the field threshold. BracketMedians: Discretise the data according to the bracket medians method. The number of buckets is specified in the field buckets. PearsonTukey: Discretise the data according to the Pearson Tukey method. Z-Score: Divide the data into two groups according to the Z-Score. None: The data is already discret. GUI Usage The initial layout of CausalTrails gui is shown below. At the bottom of the window, there is a dock widget containing general information on the current session, labelled Log. As we see later, the middle area is used for network visualisation and query managment. At the top, there {{is a tool}}bar allowing direct access to the most important actions. Buttons are enabled according to the current status of a session. Thus, errors caused by wrong user input can be avoided. In addition to the toolbar, there is a menubar allowing access to all functions of CausalTrail. In the following we provide step by step guidlines on how to use our tool. For illustration purposes, we use the Student Network presented in Probabilistc Graphical Models by Koller and Friedman. Network Managment Networks can be loaded by a click on Load Network in the toolbar or by clicking on Network -> Load Network in the menu. A dialog will be shown to select networks represented in the formats introduced above. The dialog can also be opened by pressing Strg + O. Upon loading, the network layout is computed using graphviz. If graphviz is not available, the layout is generated by a force directed layouting algorithm included in CausalTrail. The network view is interactive, e. g. it is possible to move nodes or to zoom in or out the network visualisation. By clicking on Layout in the toolbar, the menubar or by pressing Strg + L, the network is layouted again. Networks are visualised in a tab window. In case that the user loads multiple networks, each network is shown in its own tab. Using CausalTrails svg export function, a network visualisation can be exported to a svg file. To do so, click Network -> Export SVG. A click on Delete Network deletes the network that is currently shown. This can also be done with Strg + D. An example of the visualisation of the Student Network is depicted below. To load the Student Network, use the files: test/data/Student. na test/data/Student. sif Loading Samples and Training the Network To load samples, click on Load Samples in the toolbar or in the menu. Once a suitable file is choosen, the data is shown in a table allowing manual inspection of the data as well as (de) selection of individual samples. This allows the exclusion of distinct samples from the analysis. An example for the student network is shown below. Upon confirming the data by a <b>click</b> on <b>OK,</b> a window for selection of discretisation methods is shown. Here, the user has two options: Either the discretisation information is loaded from a existing json file, or it is specified using the interface. A json file can be loaded by clicking on Load. In order to simplify the discretisation step, manually specified discretisation information can be stored in a json file by clicking on Save. As soon as the discretisation information is specified, the user can continue with parameter learning by <b>clicking</b> <b>OK.</b> During parameter learning the conditional probability tables (cpt) for all nodes are computed. It is possible to look at the individual cpts of each node by right clicking on a node and selecting Show CPT in the popmenu. Once the learning is completed, two new dock widgets are shown, the Query History and the Query Control Panel. The Query History lists all submitted and valid queries for individual networks. The Query Control Panel is used in formulating queries. We provide several examples for query managment in the next section. To train the Student Network use the files: test/data/StudentData. txt test/data/controlStudent. json Query Managment Overview CausalTrail offers four ways to submit a query: A query can be entered directly, as in the console version of CausalTrail. A query can be entered interactively. A query can be chosen from the Query History. Several queries can be executed using a Query Batch File. Direct Query Formulation Queries can be entered directly into the Edit field at the top of the Query Control Panel. Correctness of queries is checked while typing. The background color of the Edit field switches to green if the query is correct and to red otherwise. Queries can be submitted by a click on the green tick next to the Edit field or by pressing Enter. Entering queries directly requires the user to be familiar with our query language in detail. As this can not be expected from the general user, we offer an interactive query construction introduced in the next section. Interactive Query Formulation To facilitate the formulation of queries, CausalTrail supports interactive query construction. To build a query, the user has to move the mouse over a node of interest and perform a right click on it. A context menu allowing the following operations is shown: Probability of: Calculates the probability that this node obtains the specified value. Arg Max: Calculates the most likely value assignment for this node. Note that it is not possible to combine (1) and (2) in one query. Condition on: Calculates the conditional probability of other nodes given the specified value of the currently selected node. Set value to: Perform a do-intervention on the current node. The edges to the nodes parents are deleted and its own value is fixed to the selected value. Add Edge to: Adds an edge to another node. To add a new edge double click on the desired target node. The added edge will appear in red. If the new edge would induce a cycle, an error will be shon in the Log. Adding an edge causes retraining of the entire network. Once an item is selected, it is shown in one of the boxes in the Query Control Panel. A colour code and a natural language wrapper around the query item boxes help to understand the query. Double clicking on an item in the Query Control Panel removes it from the current query. In addition to the operations on nodes, there is an operation on edges. A right click on an edge opens a context menu allowing to remove the selected egde. Removed edges are shown in grey. As for adding an edge, removing one causes retraining of the network too. Query History The query history enables the user to reload a previously submitted query. There are two ways to do this: A query can be directly selected via a double click in the Query History. Using the Back and Forward arrows next to the query Edit field one can go stepwise forward or backward in query history. Query Batch Files To permit the user to quickly process a set of queries on networks trained on different data sets, CausalTrails offers Query Batch Files. A batch file containing all queries currently shown in the Query History can be created by clicking on Create Batchfile. It can be executed by a click on Execute Batchfile. Results are shown in the Log. Examples To illustrate the usage of CausalTrail further, we present a few example queries in the Student Network. Predictions In this example, we compute the probability that Intelligence obtains the value i 1. In the second example, we compute the probability that Intelligence obtains the value i 1 if Grade has value g 1 and SAT has value s 1. Interventions Here, we compute the probability that Intelligence obtains the value i 1, if we perform a do-intervention on Grade, setting its value to g 1 and given that SAT has value s 1. Counterfactuals In the last example, we compute the probability to get a letter, if we have not reveived a letter before. Sessions To avoid repeating the process of network and sample loading, CausalTrail supports sessions. A session in CausalTrail contains all currently trained networks and submitted queries. To save a session, click on Save Session in the toolbar or click File -> Save Session in the menu. A session can be restored by a click on Load Session in the toolbar or by clicking File -> Load Session in the menu...|$|R
40|$|IMPORTANT NOTE ABOUT USING THE MICROSOFT ACCESS 2007 VERSION OF THIS GUIDE: When {{you open}} the Microsoft Access version of the T. Lynn Smith {{collection}} guide, you may see a security alert just below the ribbon bar stating that some content in the database has been disabled. If you see this warning, click the OPTIONS [...] . button next to the warning text, then click the ENABLE CONTENT radio button and <b>click</b> <b>OK.</b> This will clear the security warning and enable the database searching tools. A detailed set of instructions for this procedure is provided as a bitstream text file below if you need additional help. This collection contains over 5, 000 pamphlets collected by Thomas Lynn Smith, Professor of Rural Sociology, whose work encompassed sociology, including rural and urban studies, population and census studies, and individual country and state studies in the United States and Latin America. This collection primarily contains pamphlets about the U. S. and Latin America. Topics include agriculture, land use, family, health, education, population, labor, and sociology...|$|E
40|$|The In-System Memory Content Editor allows {{access to}} complex FPGA designs. When {{programming}} devices, you have {{read and write}} access to the memories and constants through the JTAG interface. You can then identify, test, and resolve issues with your design by testing changes to memory contents in the FPGA while your design is running. Before {{you can use the}} In-System Memory Content Editor tool, one additional setting has to be made. In the Quartus II software select Assignments> Settings to open the window shown below and then open the item called Default Parameters under Analysis and Synthesis Settings. As shown in the figure, type the parameter name CYCLONEII_SAFE_WRITE and assign the value RESTRUCTURE. This parameter allows the Quartus II synthesis tools to modify the single-port RAM as needed to allow reading and writing of the memory by the In-System Memory Content Editor tool. <b>Click</b> <b>OK</b> to exit from the Settings window. After full compilation of the single-cycle processor design in Quartus, click the Tools Menu and select In-System Memory Content Editor. The In-System Memory Content Editor has three separate panes: the Instance Manager, the JTAG Chain Configuration...|$|E
40|$|Objective: {{to observe}} and measure the effects of air {{resistance}} on a falling object, and investigate how terminal velocity depends on its mass. To {{learn how to use}} a ULI motion sensor and become familiar with Vernier’s LoggerPro analysis capabilities. Equipment: coffee filters, ULI motion detector Background: Sketch quick graphs of distance, velocity, and acceleration vs. time for an object falling in a resistive fluid: Define terminal velocity: Define drag force: By experiments people have found that the drag force due to a fluid is in some cases proportional to the falling object’s velocity, but in other cases the drag force is proportional to the velocity squared. We would like to determine which of these behaviors applies to a number of coffee filters falling in air on Earth. Write the force equation: The terminal velocity is VT when the net force is _____________ What kind of mathematical relationship do you predict will hold between VT and mass (number of filters) ? Procedure: 1. Setting up the computer Turn on the Universal Lab Interface (ULI) box with the motion sensor attached to Port 2. It is important to do this before launching Logger Pro. On the computer go to Start, All Programs, Vernier Software, Logger Pro 2. 0. There is no preferred calibration folder, so <b>click</b> <b>OK...</b>|$|E
40|$|The {{idea behind}} the GE/McKinsey {{approach}} is to evaluate each business along two composite dimensions: industry attractiveness and business strength. These dimensions, in turn, are composed {{of a series of}} weighted factors. Both the factor weights and the factors themselves may vary from one application to another, for example, industry attractiveness includes measures of market size, growth rate, competitive intensity and the like while business strength normally includes such measures as market share, share growth and product quality. Management then gives each business a rating for each factor and gives each factor a weight. These factor ratings are multiplied by the weights and summed to arrive at a position in the strength/attractiveness matrix. The matrix has nine cells and the three in the upper right are those in which the company has a strong position and would be considered for investment and growth. The three along the diagonal are of intermediate attractiveness and the company should consider a policy selectively enhancing business in those cells to generate earnings. And finally the three cells in the lower left corner are low in overall attractiveness and the company should consider harvesting and divesting businesses in those cells. Software To run the GE model, select the Model menu, choose GE: Portfolio screen. <b>Click</b> <b>OK</b> to get to the main worksheet, which will prompt you for your input. ...|$|E
40|$|This CD {{accompanies the}} book Understanding Oracle and it {{contains}} code and {{solutions to the}} exercises of chapters in the book. These codes help you to implement the ready to use executable programs that are provided in the book. The codes conatin SQL statements and PL/SQL blocks expalined in the book. The extension of the codes given in the CD is. sql. The codes that are given can be executed in SQL *PLUS. To run the. sql files in SQL: 1. Start->Programs->ORACLE_HOME->Application Development->SQL PLUS. 2. Enter the username, password and host string in the Log On dialog box. 3. <b>Click</b> <b>OK</b> to Log On to the Oracle database. 4. Click file->open. Open dialog box appears. Select the. sql file {{that you need to}} run and click Open. 5. Type forward slash ‘/’ and press Enter key to execute the code in the. sql file. The programs of the book are arranged in directories according to the chapters in the book. Inside each chapter directory, the various subdirectories exist that are named according to the topics covered in the chapter. The programs are stored as Listing X-X. sql files that are named exactly as named in the chapters of the book. For example, the Listing 5 - 1. sql file contains the same code that is given as Listing 5 - 1 in chapter 5 of the book. The CD also contains the solutions of the exercises of various chapters in the book. The solutions are given according to the chapter numbers in the Solutions directory in the CD. CD content with book # E 5018...|$|E
40|$|Authors: Spencer Reisbick & Patrick Willoughby ### Abstract This {{protocol}} {{describes an}} approach to preparing a series of Gaussian 09 computational input files for an ensemble of conformers generated in Spartan’ 14. The resulting input files are necessary for computing optimum geometries, relative conformer energies, and NMR shielding tensors using Gaussian. Using the conformational search feature within Spartan’ 14, an ensemble of conformational isomers was obtained. To convert the structures into a format that is readable by Gaussian 09, the conformers were first exported to a single “. sdf” file. A Python script was used to (i) read the structural information of each conformer within the “. sdf” file and (ii) write the corresponding atomic coordinates into a series Gaussian 09 input files. This approach decreases the amount of active effort required to compute NMR chemical shifts of a structure that populates an ensemble of conformers. ### Introduction NMR spectroscopy is the most useful tool for determining the structure of an unknown organic molecule. By coupling this approach with other analytical techniques (e. g. mass spectrometry) the structure of an unknown organic molecule can be elucidated. However, molecules of greater complexity continue to be isolated and/or prepared, and their associated analytical data are increasingly convoluted. Consequently, the assigned structures of these newly isolated compounds are sometimes incorrect, which leads to years of misguided effort “chasing molecules that were never there” (1). Modern computational chemistry software packages (e. g., Spartan (2, 3), Gaussian 09 (4), and Jaguar (5, 6)) have enabled the routine use of density functional theory (DFT) calculations for predicting spectroscopic properties of organic molecules. For example, one of us recently reported a protocol that described an approach using Gaussian 09 to compute NMR data for molecules that adopt conformational isomers (7). An important, {{early part of this}} protocol required the use of the software application, MacroModel (8) (part of the Schrödinger suite) to carry out a stochastic conformational search using the OPLS molecular mechanics force field. For each structure resulting from this conformational search, free energies and NMR shielding tensors were calculated. Using the free energy data, a Boltzmann factor was determined for each conformer, which was, in turn, converted into the relative mole fraction. The computed NMR data are averaged (using the mole fraction of each conformation), referenced, and scaled to generate a set of Boltzmann-weighted average chemical shifts. Due to the widespread use of Spartan for molecular mechanics calculations, we have prepared an addendum to this protocol that utilizes the structures resulting from a Spartan Conformer Distribution calculation. As discussed in our original protocol,(7) molecules of increasing complexity are often accompanied by many conformational isomers. We have developed a Python script (e. g., “write-g 09 -inputs-sdf. py”) that generates two Gaussian 09 input files for each structure resulting from the conformational search. For convenience, we have provided an additional script (e. g., “write-g 03 -inputs-sdf. py”) that prepares Gaussian 03 input files. These input files include an “-opt_freq” file for determining the optimal geometry and free energy along with an “-nmr” file for calculating NMR shielding tensor data. The Python script expedites the DFT computations by greatly simplifying the preparation of the Gaussian input files. More specifically, the script extracts structural information from a “. sdf” file generated in Spartan, and the coordinates of each conformation are written into the Gaussian input files. The “. sdf” file type is routinely used for storing molecular information for multiple structures and can be produced by myriad software applications. The script provided in this protocol will be useful for writing Gaussian input files from “. sdf” files prepared in other chemistry software applications. ### Equipment **Software required to carryout Python scripts** 1. Command-line interface application (Terminal in Mac OS X or Linux; or Command Prompt in Windows) - Python, version 2 or 3 (included with Mac OS X and Linux operating systems) - Python script editor (e. g., IDLE (see [[URL] - Text editing application (e. g., TextEdit in Mac OS X or Notepad in Windows) **Software requirements for calculations** 1. This protocol has been written for use with Spartan’ 142, 3; however, we have tested earlier versions of Spartan (e. g., Spartan’ 08) and found that they are also compatible with the following Procedure. - The approach described in the Procedure is amenable to any software application that is capable of performing a conformational search and exporting the family of conformers as a “. sdf” file (e. g., MacroModel 8 and ChemBio 3 D 9). **Hardware requirements for use of Python scripts** 1. Most standard personal computers built after 2008 are capable of executing the Python scripts included in this protocol. **Hardware requirements for conformational search calculation** 1. A CPU with 4 GB of RAM and a dual-core processor is capable of performing the conformational search calculation for generating a family of conformers of the candidate structure. The hardware requirements for carrying out the DFT calculations in Gaussian 09 are described in ref. 7. ### Procedure **Create input geometry and carry out a molecular mechanics conformational search in Spartan ● TIMING 30 min (Steps 1 – 8) ** 1. Draw cis- 3 -methylcyclohexanol in the Spartan workspace. In Spartan select File → New to open the Model Kit toolbar. Change the Rings drop down menu to Cyclohexane and click inside the workspace to add a parent cyclohexane molecule. Select the Csp 3 button within the Model Kit toolbar and click one of the yellow open valences on the cyclohexane ring. This operation will attach the methyl group. Select the Osp 3 button within the Model Kit toolbar and click a yellow open valence on the cyclohexane ring that is both two carbons separated from and cis to the previously added methyl group. This will add an oxygen atom to the cyclohexane ring to give cis- 3 -methylcyclohexanol. Ensure that the overall structure is cis- 3 -methylcyclohexanol before continuing. - Quick and Crude Molecular Mechanics Geometry Optimization. Cleanup the preliminary geometry by clicking the Minimize button or selecting Build → Minimize. - Perform the conformational search. Select Setup → Calculations. A window will open. Change the Calculate: drop down menu selection to Conformer Distribution. Change the two drop down menus to the right so that they display Molecular Mechanics and MMFF. Check the box next to Maximum: and change the conformers examined to “ 1000 ”. Click Submit and a Save As window will appear. Change the computational filename to “cis- 3 -methylcyclohexanol”, change the directory (i. e. folder) to a location that is convenient for storing the associated computational files, and click Save. <b>Click</b> <b>OK</b> in the window that appears, which indicates that the conformational search has started. - After the conformational search has finished, a window confirming that the job has completed will appear. <b>Click</b> <b>OK</b> in this window. When prompted to open a new document select No. Select File → Close to clear the workspace. - Select File → Open and locate the conformational search output file “cis- 3 -methylcyclohexanol. spartan. ” - Ensure that all expected conformers have been found by the calculation. Select Display → Spreadsheet to open a window containing an entry for each structure found during the conformational search. A conformational search of cis- 3 -methylcyclohexanol is expected to yield six unique conformers. - Export the library of conformers as a single “. sdf” file. Select File → Save As… to open a Save As window. Enter “cis- 3 -methylcyclohexanol” as the filename, change the Save as type: drop down menu selection to MDL SD (*. sdf) and click Save. If a popup window appears with the title Select molecules, click Write all molecules followed by OK. <b>Click</b> <b>OK</b> in the popup window that confirms the file export. This step will export all structures from the conformational search to a single “. sdf” file—“cis- 3 -methylcyclohexanol. sdf”—located in the same directory as the conformational search output file. - Examine the resulting “. sdf” file to ensure that the results of the conformational search were correctly exported (Optional). Open the “. sdf” file in a text-editing application (e. g., TextEdit in Mac OS X or Notepad in Windows) and check that an entry is included for all unique conformations. A unique entry typically begins with the text “Spartan” followed by a series of numbers. Additionally, structures are usually systematically labeled, for example, the first conformation is by default titled “M 0001 ”. **Create Gaussian input files for each conformer ● TIMING 15 min (Steps 9 – 12) ** - 9. Download the “write-g 09 -inputs-sdf. py” (or “write-g 03 -inputs-sdf. py” if using Gaussian 03) Python script from [Supplementary Data 1]([URL] to the directory containing the “. sdf” file created in Step 7 (see Step 3 for directory location). If using Python version 2, download the “write-g 09 -inputs-sdf. py” script located in the Python-Version- 2 directory within [Supplementary Data 1]([URL] ▲ CRITICAL STEP Users must download the Python script from [Supplementary Data 1]([URL] that is compatible with the particular versions of both Python (i. e., either version 2 or 3) and Gaussian (i. e., either version 09 or 03) that are to be used. - 10. Editing the “write-g 09 -inputs-sdf. py” Python script to change the memory and number of processors used in Gaussian calculations (optional). To accommodate different users’ needs, we have prepared the “write-g 09 -inputs-sdf. py” Python script so that it is convenient to change the amount of memory and the number of the processors allocated to the computationally intensive Gaussian 09 jobs. Open the “write-g 09 -inputs-sdf. py” Python script in IDLE or any other Python script editor. Adjust the amount of memory used in the Gaussian 09 optimization/frequency and NMR jobs by changing the number to the right of “%mem=” on line 86 and 113, respectively. Adjust the number of core processors used in the Gaussian 09 optimization/frequency and NMR jobs by changing the number to the right of “%nproc=” on line 87 and 114, respectively. Save the edited script file in the same directory as the “. sdf” file created in Step 9. - 11. In a command line interface application (i. e. Terminal for Mac OS X or Linux or Command Prompt for Windows) navigate to the directory that contains the “. sdf” file, the “write-g 09 -inputs-sdf. py” Python script and the associated computational files. - 12. Execute the “write-g 09 -inputs-sdf. py” Python script (or the edited script that may have been created in Step 10 by entering the following command: *> python write-g 09 -inputs-sdf. py cis- 3 -methylcyclohexanol. sdf* - The script will request the name of the candidate structure by displaying the following prompt: - Enter the name of the candidate structure: - Enter “cis- 3 -methylcyclohexanol” as the candidate structure name. Avoid using spaces when entering the name of the candidate structure. If the script executes successfully, the following message will be displayed: *The script successfully performed the task of creating Gaussian input files for each unique structure within the cis- 3 -methylcyclohexanol. sdf file and moved these input files to the cis- 3 -methylcyclohexanol-gaussian_files directory*. For each unique conformation within the associated “. sdf” file, the script will create two Gaussian input files. The script also creates a new directory labeled “cis- 3 -methylcyclohexanol-gaussian_files” and moves all of the Gaussian input files into this newly created directory. The Gaussian input files labeled “cis- 3 -methylcyclohexanol-opt_freq-conf-#. com” are the input files for geometry optimization and frequency calculation. The Gaussian input files labeled “cis- 3 -methylcyclohexanol-nmr-conf-#. com” are the input files for NMR shielding tensor calculations. ? TROUBLESHOOTING **Perform DFT calculations in Gaussian 09 (cf. Procedure in ref. 7) ● TIMING 1 h (Step 13) ** - 13. To obtain the computed NMR data for the candidate structure, consult the Procedure in ref. 7 for instructions on using the resulting input files from Step 12 within Gaussian 09 to calculate (i) DFT-optimized conformer geometries, (ii) free energies using the “opt_freq-conf” input files, and (iii) NMR shielding tensors using the “nmr-conf” input files. Additionally, the Procedure in ref. 7 includes Python scripts and detailed instructions for (i) assembling the free energy and NMR shielding tensor data into well-organized spreadsheet files, (ii) referencing and scaling the NMR data, (iii) determining the Boltzmann weighting factors of all conformers, and (iv) applying these weighting factors to generate the set of Boltzmann-weighted chemical shifts for the candidate structure. Details with regard to the choice of computational methodology (e. g., DFT functional and basis set preferences) are discussed in ref. (7). Additionally, the previously reported protocol (7) highlights methods for determining the “best fit” for a candidate structure when comparing experimental spectral data to the computed NMR chemical shifts. Alternative approaches to determining the “best fit” have recently been reported by Goodman (10, 11) and Sarotti (12, 13), and more traditional approaches are described in several excellent reviews (14, 15). ### Timing A novice user can complete the Procedure described above in less than one hour. The time required to complete the molecular mechanics conformational search will increase with molecular complexity. However, in our experience this increase has not been substantial. Subsequent Gaussian computations will require significantly more computational time to complete, but the amount of active effort by the user is minimized because several steps have been automated with the use of Python scripts. A summary of the time required to complete various steps in the Procedure is shown below. - Steps 1 – 4 : < 10 min of active effort; ca. 1 – 30 minutes to complete the conformational search depending on the structural complexity of the candidate structure. - Steps 5 – 8 : 15 min - Steps 9 – 12 : 15 min - Step 13 : ca. < 60 min for the 3 -methylcyclohexanols; timing depends on the number of conformational isomers and the structural complexity of the candidate structure. ### Troubleshooting See [Supplementary Table]([URL] for Troubleshooting. ### Anticipated Results Following successful completion of the steps of the Procedure, six conformations of cis- 3 -methylcyclohexanol will be generated from the conformational search in Spartan, and the structure coordinates for each conformation will be exported to a “. sdf” file. Following execution of the Python script, “write-g 09 -inputs-sdf. py”, the directory “cis- 3 -methylcyclohexanol-gaussian_files” will be created, which will contain two Gaussian 09 input files for each conformation of the candidate structure. Once submitted to Gaussian 09, the input files having “opt_freq” in their title will instruct Gaussian to perform a geometry optimization and frequency calculation of the included structural coordinates. Additionally, the input files having “nmr” in their title will instruct Gaussian to calculate NMR shielding tensors of the optimized geometry. For reference, we have provided the Spartan conformational search files and the “. sdf” file as [Supplementary Data 2]([URL] and [Supplementary Data 3]([URL] respectively. Additionally, the Gaussian 09 input files resulting from use of the Python script are included in [Supplementary Data 4]([URL] ### References 1. Nicolaou, K. C. & Snyder, S. A. Chasing molecules that were never there: misassigned natural products and the role of chemical synthesis in modern structure elucidation. *Angew. Chem. Int. Ed*. 44, 1012 – 1044 (2005). - Hehre, W. J. A guide to molecular mechanics and quantum chemical calculations. Wavefunction, Inc., Irvine, CA, 2003. - Shao, Y., Molnar, L. F., Jung, Y., Kussmann, J. R., Ochsenfeld, C., Brown, S. T., Gilbert, A. T. B., Slipchenko, L. V., Levchenko, S. V., O Neill, D. P., DiStasio, R. A., Jr, Lochan, R. C., Wang, T., Beran, G. J. O., Besley, N. A., Herbert, J. M., Yeh Lin, C., Van Voorhis, T., Hung Chien, S., Sodt, A., Steele, R. P., Rassolov, V. A., Maslen, P. E., Korambath, P. P., Adamson, R. D., Austin, B., Baker, J., Byrd, E. F. C., Dachsel, H., Doerksen, R. J., Dreuw, A., Dunietz, B. D., Dutoi, A. D., Furlani, T. R., Gwaltney, S. R., Heyden, A., Hirata, S., Hsu, C. -P., Kedziora, G., Khalliulin, R. Z., Klunzinger, P., Lee, A. M., Lee, M. S., Liang, W., Lotan, I., Nair, N., Peters, B., Proynov, E. I., Pieniazek, P. A., Min Rhee, Y., Ritchie, J., Rosta, E., David Sherrill, C., Simmonett, A. C., Subotnik, J. E., Lee Woodcock, H., III, Zhang, W., Bell, A. T., Chakraborty, A. K., Chipman, D. M., Keil, F. J., Warshel, A., Hehre, W. J., Schaefer, H. F., III, Kong, J., Krylov, A. I., Gill, P. M. W. & Head-Gordon, M. Advances in methods and algorithms in a modern quantum chemistry program package. *Phys. Chem. Chem. Phys*. 8, 3172 (2006). - Gaussian 09, Revision A, Frisch, M. J., Trucks, G. W., Schlegel, H. B., Scuseria, G. E., Robb, M. A., Cheeseman, J. R., Scalmani, G., Barone, V., Mennucci, B., Petersson, G. A., Nakatsuji, H., Caricato, M., Li, X., Hratchian, H. P., Izmaylov, A. F., Bloino, J., Zheng, G., Sonnenberg, J. L., Hada, M., Ehara, M., Toyota, K., Fukuda, R., Hasegawa, J., Ishida, M., Nakajima, T., Honda, Y., Kitao, O., Nakai, H., Vreven, T., Montgomery, J. A., Jr., Peralta, J. E., Ogliaro, F., Bearpark, M., Heyd, J. J., Brothers, E., Kudin, K. N., Staroverov, V. N., Kobayashi, R., Normand, J., Raghavachari, K., Rendell, A., Burant, J. C., Iyengar, S. S., Tomasi, J., Cossi, M., Rega, N., Millam, N. J., Klene, M., Knox, J. E., Cross, J. B., Bakken, V., Adamo, C., Jaramillo, J., Gomperts, R., Stratmann, R. E., Yazyev, O., Austin, A. J., Cammi, R., Pomelli, C., Ochterski, J. W., Martin, R. L., Morokuma, K., Zakrzewski, V. G., Voth, G. A., Salvador, P., Dannenberg, J. J., Dapprich, S., Daniels, A. D., Farkas, Ö., Foresman, J. B., Ortiz, J. V., Cioslowski, J., Fox, D. J. Gaussian, Inc., Wallingford CT, 2009. - Jaguar, version 8. 0. [URL] (Schrödinger, LLC, New York, NY, 2013). - Bochevarov, A. D., Harder, E., Hughes, T. F., Greenwood, J. R., Braden, D. A., Philipp, D. M., Rinaldo, D., Halls, M. D., Zhang, J., Friesner, R. A. Jaguar: a high-performance quantum chemistry software program with strengths in life and materials sciences. *Int. J. Quantum Chem*. 113, 2110 – 2142 (2013). - Willoughby, P. H., Jansma, M. J. & Hoye, T. R. A guide to small-molecule structure assignment through computation of (1 H and 13 C) NMR chemical shifts. *Nature Protocols* 9, 643 – 660 (2014) - MacroModel, version 10. 0. [URL] (Schrödinger, LLC, New York, NY, 2013). - ChemBio 3 D Ultra 13. 0 Suite. [URL] - Smith, S. G. & Goodman, J. M. Assigning the stereochemistry of pairs of diastereoisomers using GIAO NMR shift calculation. *J. Org. Chem*. 74, 4597 – 4607 (2009). - Smith, S. G. & Goodman, J. M. Assigning stereochemistry to single diastereoisomers by GIAO NMR calculation: the DP 4 probability. *J. Am. Chem. Soc*. 132, 12946 – 12959 (2010). - Sarotti, A. M. & Pellegrinet, S. C. A multi-standard approach for GIAO 13 C NMR calculations. *J. Org. Chem*. 74, 7254 – 7260 (2009). - Sarotti, A. M. Successful combination of computationally inexpensive GIAO 13 C NMR calculations and artificial neural network pattern recognition: a new strategy for simple and rapid detection of structural misassignments. *Org. & Biomol. Chem*. 11, 4847 – 4859 (2013). - Lodewyk, M. W., Siebert, M. R. & Tantillo, D. J. Computational prediction of 1 H and 13 C chemical shifts: a useful tool for natural product, mechanistic, and synthetic organic chemistry. *Chem. Rev*. 112, 1839 – 1862 (2012). - Tantillo, D. J. Walking in the woods with quantum chemistry—applications of quantum chemical calculations in natural products research. *Nat. Prod. Rep*. 30, 1079 – 1086 (2013). ### Associated Publications 1. **A guide to small-molecule structure assignment through computation of (1 H and 13 C) NMR chemical shifts**. Patrick H Willoughby, Matthew J Jansma, and Thomas R Hoye. *Nature Protocols* 9 (3) 643 - 660 [doi: 10. 1038 /nprot. 2014. 042]([URL] - **Analysis of Seven-Membered Lactones by Computational NMR Methods: Proton NMR Chemical Shift Data are More Discriminating than Carbon**. Daniel J. Marell, Susanna J. Emond, Aman Kulshrestha, and Thomas R. Hoye. *The Journal of Organic Chemistry* 79 (2) 752 - 758 17 / 01 / 2014 [doi: 10. 1021 /jo 402627 s]([URL] - **Case Study of Empirical and Computational C...|$|E

