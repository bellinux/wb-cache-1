2302|10000|Public
25|$|The goal of {{the library}} is {{to benefit from the}} {{stateful}} <b>component</b> <b>model</b> used in desktop applications APIs, applied to web development, instead of the traditional model–view–controller (MVC) model. Rather than using MVC at the level of a page, MVC is pushed to the level of individual components.|$|E
25|$|Pervasive.SQL 2000 and Pervasive.SQL 2000i uses {{essentially}} the same architecture as Pervasive.SQL 7, though 2000i includes i*Net server. It uses the same <b>component</b> <b>model,</b> {{has the ability to}} use the Btrieve or Scalable SQL engines and continues using an MKDE. This version included support for Red Hat Linux, Caldera OpenLinux, SUSE and Solaris. It also had better integration with Terminal Services, though only one instance of the database engine may run on any terminal server platform. You cannot run separate copies of the database engine within two or more terminal sessions.|$|E
2500|$|Another {{model of}} {{organizational}} justice proposed by Byrne (1999) and colleagues (Byrne & Cropanzano, 2000) [...] suggested that organizational justice is a multi-foci construct, one where employees see justice as {{coming from a}} source - either the organization or their supervisor. Thus, rather than focus on justice as {{the three or four}} factor <b>component</b> <b>model,</b> Byrne suggested that employees personify the organization and they distinguish between whether they feel the organization or supervisor have treated them fairly (interactional), use fair procedures (procedural), or allocate rewards or assignments fairly (distributive justice). A number of researchers used this model exploring the possibility that justice is more than just 3 or 4 factors (e.g., Karriker & Williams, 2009).|$|E
50|$|A {{number of}} {{technical}} <b>component</b> <b>models</b> are now also open source. While these <b>component</b> <b>models</b> {{do not constitute}} systems models aimed at public policy development (the focus of this page), they nonetheless warrant a mention. <b>Component</b> <b>models</b> can be linked or otherwise adapted into these broader initiatives.|$|R
40|$|As component-based {{software}} engineering is growing and its usage expanding, {{more and more}} <b>component</b> <b>models</b> are developed. In this report we present a survey of software <b>component</b> <b>models</b> in which models are described and classified respecting the classification framework for <b>component</b> <b>models</b> proposed by Crnković et. al. [1]. This framework specifies several groups of important principles and characteristics of component models: lifecycle, constructs, specification and management of extra-functional properties, and application domain. This report analyzes {{a considerable amount of}} <b>component</b> <b>models,</b> including widely used industrial models, as well as research models. 2009 - 02 - 20 Classification and survey of componentmodels Page 2 / 6...|$|R
40|$|Several popular component-based {{standards}} have emerged recently, including JavaBeans and Enterprise JavaBeans from Sun Microsystems and the <b>Component</b> Object <b>Model</b> from Microsoft. These <b>component</b> <b>models</b> are being adopted {{for use in}} software development, as they eliminate opportunities for architectural mismatch and are supported by standard services. A highly touted property of <b>component</b> <b>models</b> is that they support the development of replaceable components. Unfortunately, a robust, commercial marketplace of replaceable components has not been established {{for any of these}} <b>component</b> <b>models.</b> On the other hand, the properties of the Service Provider Interface (SPI), used in many Java language packages, has resulted in the development of reusable components in several technology areas. Examples of successful SPI packages include Java Database Connectivity, Java Cryptography Extension, Java Naming and Directory Interface, and the Java Application Program Interface for XML Processing. This technical note considers the motivation for using replaceable components and defines the requirements of replaceable <b>component</b> <b>models.</b> It evaluates the properties of standard <b>component</b> <b>models</b> and the SPI approach that affect their ability to support replaceable components...|$|R
2500|$|Java: McGeady {{testified that}} Microsoft {{made it clear}} to Intel that support for Java would be a [...] "show stopper" [...] in Intel's {{relationship}} with Microsoft, threatening to terminate cooperation that Intel required for new microprocessors. [...] Microsoft allegedly proposed that Intel help them prevent the Java <b>component</b> <b>model</b> from becoming a de facto standard by developing a Java system incompatible with Sun's, defeating Java’s [...] "write once, run anywhere" [...] capabilities, and tying Java to Windows. [...] Microsoft would distribute this Java virtual machine as part of Internet Explorer, a variant of MS’s [...] "embrace, extend, extinguish" [...] strategy. [...] When Microsoft learned that McGeady's group at Intel had implemented its own Java VM and multimedia class libraries that ran very fast on the Intel architecture, Microsoft became very upset that Intel was working in Java. McGeady testified that Microsoft pressed Intel to stop this work.|$|E
50|$|In this context, the lumped <b>component</b> <b>model</b> {{extends the}} {{distributed}} concepts of Acoustic theory subject to approximation. In the acoustical lumped <b>component</b> <b>model,</b> certain physical components with acoustical properties may be approximated as behaving similarly to standard electronic components or simple combinations of components.|$|E
5000|$|KOALA <b>component</b> <b>model</b> {{developed}} for software in consumer electronics ...|$|E
40|$|The {{variance-covariance matrix}} of {{balanced}} {{data in a}} 2 -way crossed classification variance <b>components</b> <b>model</b> is generalized to the case ~f any balanced data variance <b>components</b> <b>model,</b> consisting of crossed and/or nested classifications. The eigenvalues, determinant and inverse of this generalized matrix are derived. 1...|$|R
40|$|Regressions for {{predicting}} long-term stock returns often use moving averages of earnings as the earnings trend. We {{show that the}} earnings trend can be directly estimated using unobserved <b>components</b> <b>models.</b> The estimated trends improve the fit of predictive regressions. Valuation ratios Unobserved <b>components</b> <b>model...</b>|$|R
40|$|The {{volatility}} <b>component</b> <b>models</b> {{have received}} much attention recently, {{not only because}} of their ability to capture complex dynamics via a parsimonious parameter structure, but also because it is believed that they can handle well structural breaks or non-stationarities in asset price volatility. This paper revisits the <b>component</b> <b>models</b> fromastatistical perspective and attempts to explore the stationarity of the underlying processes. There is a clear need for such an analysis, since any discussion about non-stationarity presumes we know when <b>component</b> <b>models</b> are stationary. As it turns out, {{this is not the case}} and the purpose of the paper is to rectify this. We also look into the sampling behavior of the maximum likelihood estimates of recently proposed volatility <b>component</b> <b>models</b> and establish their consistency and asymptotic normality...|$|R
5000|$|... #Subtitle level 2: Inference in the {{independent}} <b>component</b> <b>model</b> ...|$|E
5000|$|... #Subtitle level 4: Three <b>component</b> <b>model</b> {{of future}} {{orientation}} ...|$|E
5000|$|FracTalk is a SmallTalk {{implementation}} of the Fractal <b>component</b> <b>model.</b>|$|E
40|$|The common {{principal}} <b>components</b> <b>model</b> {{for several}} groups of multivariate observations assumes equal principal axes among the groups. Robust estimators {{can be defined}} replacing the sample variance by a robust dispersion measure. This paper studies the asymptotic distribution of robust projection-pursuit estimators under a common principal <b>components</b> <b>model.</b> ...|$|R
40|$|The <b>component</b> <b>models</b> of the PV Toolbox {{have been}} {{validated}} and verified according to standard software engineering practices. The <b>component</b> <b>models</b> used for weather modelling required significant changes; other models required only minor corrections. These {{changes have been}} implemented. Thus the following <b>component</b> <b>models</b> can be considered valid and operational: weather modelling routines, PV generators, thermal mass, fuel reservoir, genset, and inverter. The <b>component</b> <b>models</b> were assembled into system models ranging from a simple PV-load system to a full hybrid system. System model testing revealed that while the components functioned well in isolation, they caused the Simulink ® simulation engine to freeze or halt due to difficulty in resolving the system of equations corresponding to the system model. Through various modifications to the <b>component</b> <b>models,</b> these difficulties were overcome. Subsequently, 12 system models were tested. Eleven of these were able to run for one simulation year without problem; the twelfth stopped only because the test parameters had permitted the battery to reach a low state-of-charge outside {{of the range of}} normal conditions...|$|R
40|$|International audienceDesigning Adaptive Mesh Refinement based {{applications}} is a {{very complex}} task. The aim {{of this paper is to}} study whether <b>component</b> <b>models</b> could simplify their conception and which concepts are needed. The analysis is based on an implementation of an AMR method on top of two <b>component</b> <b>models,</b> ULCM and SALOME...|$|R
5000|$|FractNet http://www-adele.imag.fr/fractnet/ is a [...]Net {{implementation}} of the Fractal <b>component</b> <b>model.</b>|$|E
5000|$|CORBA and the CORBA <b>Component</b> <b>Model</b> {{from the}} Object Management Group ...|$|E
5000|$|Document {{outlining}} {{the development of}} a Configuration, Description and Deployment <b>Component</b> <b>Model</b> ...|$|E
40|$|We have {{investigated}} the <b>component</b> <b>models</b> JavaBeans and COM/ActiveX, their support for component-based software development {{as well as their}} commonalties and differences. The main objective has been to find out the component models' usefulness in building realworld applications and to compare the underlying <b>component</b> <b>models</b> based on a concrete sample application. In this paper we briefly introduce the <b>component</b> <b>models</b> JavaBeans and COM/ActiveX, and present a simple application with two different implementations based on these models. Finally, we make a comparison of the <b>component</b> <b>models.</b> Keywords JavaBeans, COM/ActiveX, resource planer, comparison, case study 1 INTRODUCTION Component-based software engineering means development of software systems by composing reusable components. Components themselves shall only be developed when not being available on the market. This may lead to reduced time to market, improved software quality, and less maintenance effort. The reusability of co [...] ...|$|R
40|$|In {{the paper}} we generalize results of paper [12] for a q- <b>component</b> <b>models</b> on a Cayley tree of order k≥ 2. We generalize them in two {{directions:}} (1) from k= 2 to any k≥ 2; (2) from concrete examples (Potts and SOS <b>models)</b> of q- <b>component</b> <b>models</b> to any q- <b>component</b> <b>models</b> (with nearest neighbor interactions). We give {{a set of}} periodic ground states for the model. Using the contour argument which was developed in [12] we show existence of q different Gibbs measures for q-component models on Cayley tree of order k≥ 2. Comment: 8 page...|$|R
40|$|Multivariate {{canonical}} {{state space}} dynamic models are developed {{by studying the}} eigenstructure of their transition matrices. Observability is introduced for time-varying <b>model</b> <b>components</b> defining locally observable dynamic <b>models.</b> Single <b>component</b> <b>models</b> that have a simple transition matrix are first discussed and categorized according to their forecast function. Then more complicated models, defined as the superposition of single <b>component</b> <b>models,</b> are examined and necessary and sufficient conditions for observability are given...|$|R
5000|$|For each component, {{determine}} the <b>component</b> <b>model</b> to use {{from the standard}} ...|$|E
5000|$|The <b>Component</b> <b>Model</b> sub project {{deals with}} the {{definition}} of the Fractal <b>component</b> <b>model</b> specification. The main characteristics of this model are recursivity (components can be nested in composite components - hence the [...] "Fractal" [...] name) and reflexivity (components have full introspection and intercession capabilities). The Fractal model is also language independent, and fully modular and extensible.|$|E
50|$|Since version 2.3.0 ztemplates {{contains}} a javascript <b>component</b> <b>model</b> to support AJAX programming.|$|E
40|$|Todays {{information}} systems are built using various <b>component</b> <b>models</b> such as Enterprise Java Beans, JavaBeans, Microsoft COM+, and CORBA distributed objects. In this paper {{we argue that}} it is crucial for designers of {{information systems}} to interactively build and test systems constructed from (a) components (enabling interoperability across <b>component</b> <b>models)</b> and (b) Web services at the same time...|$|R
40|$|At various places, it {{has been}} {{proposed}} to extend three-way <b>component</b> <b>models</b> by adding constant additive terms to the model. In the present paper a class of such extended three-way <b>component</b> <b>models</b> is described, and it is demonstrated in which cases such offset terms can be estimated uniquely. Procedures for fitting these models are offered elsewhere...|$|R
40|$|Components are {{receiving}} attention {{as a means}} of advancing the state of software distribution beyond the traditional choices of source code, compiled binary executable, and compiled libraries. In this paper, we examine lightweight <b>component</b> <b>models</b> for embedded real-time software systems, and propose two different <b>component</b> <b>models</b> based on the concepts of actors and models of computation. ...|$|R
50|$|The SOFA 2 system {{includes}} a <b>component</b> <b>model,</b> repository of components, runtime environment and tool support.|$|E
5000|$|A <b>component</b> <b>model</b> is a {{definition}} of properties that components must satisfy, methods and mechanisms for the composition of components.During the last decades, researchers and practitioners have proposed several component models with different characteristics. A classification of the existing component models is given in.Examples of component models are:Enterprise JavaBeans (EJB) model, Component Object Model (COM) model, [...]NET model, and Common Object Request Broker Architecture (CORBA) <b>component</b> <b>Model.</b>|$|E
50|$|The Component-Integrated ACE ORB (CIAO) is a CORBA <b>component</b> <b>model</b> (CCM) {{implementation}} {{built on}} top of TAO.|$|E
40|$|Abstract. This {{position}} paper envisions making large-scale distributed applications self managing by combining <b>component</b> <b>models</b> and structured overlay networks. A key obstacle to deploying large-scale applications running on Internet {{is the amount}} of management they require. Often these applications demand specialized personnel for their maintenance. Making applications self-managing will help removing this obstacle. Basing the system on a structured overlay network will allow extending the abilities of existing <b>component</b> <b>models</b> to large-scale distributed systems. Structured overlay networks provide guarantees for efficient communication, efficient load-balancing, and self-manage in case of joins, leaves, and failures. <b>Component</b> <b>models,</b> on the other hand, support dynamic configuration, the ability of part of the system to reconfigure other parts at run-time. By combining overlay networks with <b>component</b> <b>models</b> we achieve both low-level as well as high-level self-management. We will target multi-tier applications, and specifically we will consider three-tier applications using a self-managing storage service. ...|$|R
50|$|A {{component}} {{library with}} ready-made components {{is available through}} the software containing thousands of <b>components.</b> <b>Modeled</b> <b>components</b> are saved in libraries and can be re-used for different layouts.|$|R
40|$|International audienceComponent based {{software}} development (CBSD) and aspect- oriented {{software development}} (AOSD) are two complemen- tary approaches. However, existing proposals for integrating aspects into <b>component</b> <b>models</b> are direct transposition of object-oriented AOSD techniques to components. In this article, we propose {{a new approach}} based on views. Our proposal introduces crosscutting components quite naturally and can be integrated into different <b>component</b> <b>models...</b>|$|R
