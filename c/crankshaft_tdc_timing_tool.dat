0|165|Public
40|$|This paper {{describes}} a <b>timing</b> <b>tool</b> {{being developed by}} a real-time research group at Seoul National University. Our {{focus is on the}} issues resulting from advanced architectural features such as pipelined execution and cache memories found in many modern RISC-style processors. For each architectural feature we state the issues and explain our approach. 1 Introduction In real-time computing systems, tasks have timing requirements (i. e., deadlines) that must be met for correct operation. Various scheduling techniques have been proposed to guarantee such timing requirements. In many cases, these scheduling techniques require that the worst case execution times (WCETs) of tasks be known a priori. This paper {{describes a}} <b>timing</b> <b>tool</b> that is being developed by a real-time research group at Seoul National University. This <b>timing</b> <b>tool</b> aims at accurately calculating guaranteed worst case execution times of programs for computer systems that use modern RISC-style microprocessors. Our particular fo [...] ...|$|R
40|$|This report {{presents}} a <b>timing</b> <b>tool</b> that calculates worst case execution times for programs written in C. The tool is integrated with IAR-Systems C-compiler for the 8051 microcontroller. For each {{function in the}} source code the tool calculates both the worst case and the best case execution times. It is also possible to add extra timers into the code to calculate execution times for certain parts of a function. These timers allow measurements of the execution times of small parts of a function. This {{may be useful in}} identifying bottlenecks in the code. The report also discusses and presents solutions to several general execution time analysis problems and reviews some theory available today together with a few existing <b>timing</b> <b>tools...</b>|$|R
5000|$|Every {{year from}} spring until fall, the {{speedway}} hosts [...] "Friday Night Drags" [...] where participants drag race down the pit road. The racing is conducted on an 1/8 mile stretch and {{begins at the}} drop of a hand. No lights or <b>timing</b> <b>tools</b> are used.|$|R
40|$|We have {{developed}} an easy-to-use and reliable <b>timing</b> <b>tool</b> to determine the arrival time of an optical laser and a free electron laser (FEL) pulses within the jitter limitation. This <b>timing</b> <b>tool</b> can be used from XUV to X-rays and exploits high FELs intensities. It uses a shadowgraph technique where we optically (at 800 nm) image a plasma created by an intense XUV or X-ray FEL pulse on a transparent sample (glass slide) directly placed at the pump - probe sample position. It {{is based on the}} physical principle that the optical properties of the material are drastically changed when its free electron density reaches the critical density. At this point the excited glass sample becomes opaque to the optical laser pulse. The ultra-short and intense XUV or X-ray FEL pulse ensures that a critical electron density can be reached via photoionization and subsequent collisional ionization within the XUV or X-ray FEL pulse duration or even faster. This technique allows to determine the relative arrival time between the optical laser and the FEL pulses in only few single shots with an accuracy mainly limited by the optical laser pulse duration and the jitter between the FEL and the optical laser. Considering the major interest in pump-probe experiments at FEL facilities in general, such a femtosecond resolution <b>timing</b> <b>tool</b> is of utmost importance. © 2012 IOP Publishing Ltd and Sissa Medialab srl...|$|R
30|$|Two TDCs {{are used}} in LEPi. One of them handles the output signals of the preamplifiers for eight {{azimuthal}} channels (c–e, 0 – 4), and the other handles those for seven azimuthal channels (5 – 9, a, b). When signals reach the <b>TDC,</b> <b>timing</b> information is recorded in TDC, and read by FPGA, which calculates the time interval between the START and STOP signals. This process takes ∼ 2  μs. Therefore, the maximum signal processing rate is ∼ 5 × 10 ^ 5 [count/s/ 8 (7) azimuthal channels], which is ∼ 7 × 10 ^ 3 [count/energy step/ 8 (7) azimuthal channels] for the satellite spin rate of 8  s. Note that, each azimuthal channel has an octuple input buffer for the TOF calculation. In LEPi, each azimuthal channel has a dedicated counter for accumulating the number of events that cannot be processed by TDC + FPGA because of the exceptionally high input rate. These count data {{are attached to the}} observation data for every energy step and sent to the ground.|$|R
50|$|These {{tasks are}} {{properly}} carried out during logic simulation {{or with a}} static <b>timing</b> analysis <b>tool.</b>|$|R
40|$|Traditional corner {{analysis}} {{fails to}} guarantee a target yield for a given performance metric. However, recently proposed solutions, {{in the form of}} statistical timing analysis, which work by propagating delay distributions, do not conform to modern design methodology. Instead, new statistical techniques are needed to modify corner analysis in ways that overcome its weaknesses without violating usage models of <b>timing</b> <b>tools</b> in modern flows. Categories and Subject Descriptors...|$|R
40|$|In {{this paper}} {{we present a}} <b>timing</b> <b>tool</b> for {{language}} training of hearing impaired children. Two major problems for these children to learn oral language are confusion of different phonemes and the timing within different words and syllables. In this paper we focus on developing techniques to overcome the timing problem. The techniques include timing error detection, visual feedback, and head tracking. The aim of the <b>timing</b> <b>tool</b> is to provide support to improve the speaking ability {{of the kids who}} are profoundly deaf and aided by hearing aids, cochlear implants, or a combination of both. We first describe the language training process in which the timing problem is addressed. We propose to use a modified dynamic time warping (DTW) algorithm to detect timing errors. The timing information is fed back to the user through a visual interface. Because the auditory stimulus is degraded, the visual feedback is extremely important to these kids. Two schemes can be used to produce the visual feedback. One scheme is to use the recorded video sequence of the kid to produce a corrected video replay; the other is to use a synthetic head to emphasize visual parts (lip-movement) that is wrong. 1...|$|R
50|$|Today, {{telecine}} {{is synonymous}} with color <b>timing</b> as <b>tools</b> and technologies have advanced to make color timing (color correction) ubiquitous in a video environment.|$|R
5000|$|The RTaW-PEGASE is an {{industrial}} <b>tool</b> devoted to <b>timing</b> analysis <b>tool</b> of switched Ethernet network (AFDX, industrial and automotive Ethernet), based on network calculus.|$|R
40|$|Abstract. This text {{gives an}} {{overview}} about my current research in timing analysis at the Vienna University of Technology. After a short {{introduction to the}} topic follows the description of an approach relying on CLP, the implicit path enumeration technique (IPET). This technique is also used in a tool developed at the institute of Computer Languages (TuBound). Current <b>timing</b> analysis <b>tools</b> suffer from a few flaws worth further investigation {{in order to achieve}} better results than current state-of-the-art <b>timing</b> analysis <b>tools...</b>|$|R
30|$|Ulibarri et al. (2014) {{highlight}} {{the importance of}} creating an emotionally supportive, non-judgemental atmosphere to foster creativity. One way to frame learning in a playful way is by using learning metaphors to prompt and guide the learning design. The selection of a metaphor may guide the conceptualisation of the learning experience in terms of activities, <b>timing,</b> <b>tools,</b> collaboration, assessment, outcomes, support, and location. Learning experiences could for example be like sitting around a campfire, speed dating or viewing a reality show like “The Amazing Race” (Morkel, 2015).|$|R
40|$|We {{measure the}} {{relative}} sentiment of retail versus institutional investors by comparing their respective portfolio allocations to equity versus cash and fixed-income securities. Relative sentiment is uncorrelated with indicators of absolute investor sentiment {{and appears to}} have considerable value as a (contrarian) market <b>timing</b> <b>tool</b> at a quarterly frequency: High levels of relative retail sentiment are associated with significantly lower future excess equity returns, and the change in relative sentiment is strongly positively related to concurrent market returns. These results suggest that fluctuations in retail sentiment are a primary driver of equity valuations for reasons unrelated to fundamentals...|$|R
40|$|The Instruction Scratchpad Timing Analysis Program (ISPTAP) is {{a static}} <b>timing</b> {{analysis}} <b>tool</b> {{developed for the}} D-ISP (dynamic instruction scratchpad). It features the timing analysis of the CarCore and the ARM Cortex M 0 processors and supports common instruction memories of embedded systems, like caches and scratchpads. In this report we describe the <b>timing</b> analysis <b>tool</b> including the <b>timing</b> models of the supported architectures. To validate the timing models we quantify the overestimation of the calculated WCETs compared to the measured execution times obtained from cycle-accurate processor simulators. Furthermore, we describe the usage and {{the configuration of the}} ISPTAP tool...|$|R
40|$|International audienceSKIROC 2 _CMS is a chip {{derived from}} CALICE SKIROC 2 that {{provides}} 64 channels of low noise charge preamplifiers optimized for 50 pF pin diodes and 10 pC dynamic range. They {{are followed by}} high gain and low gain 25 ns shapers, a 13 -deep 40 MHz analog memory used as a waveform sampler at 40 MHz. and 12 -bit ADCs. A fast shaper followed by discriminator and <b>TDC</b> provide <b>timing</b> information to an accuracy of 50 ps, {{in order to test}} TOT and TOA techniques at system level and in test-beam. The chip was sent to fabrication in January 2016 in AMS SiGe 0, 35 μm and was received in May. It was tested in the lab during the summer and will be mounted on sensors for beam-tests in the fall...|$|R
40|$|This paper {{presents}} a hierarchical statistical timing flow for microprocessor designs with minimal run-time and memory overhead {{compared to a}} deterministic timing flow. Application of the flow to robust custom circuit design under variability is highlighted. I. CONTEXT High performance microprocessors contain custom designed circuit macros to achieve aggressive frequency targets. These custom designed circuits are typically timed using circuit simulation engines. Microprocessor designs can contain upwards of one billion transistors. Circuit simulation, while highly accurate, is run-time intensive and is not practical to use in a timing flow where chip level timing runs are made daily during the design cycle of the chip. This {{has led to the}} development of hierarchical contract-based timing where custom parts of the design are timed using transistor level <b>timing</b> <b>tools</b> [1] with circuit simulation type accuracy; followed b...|$|R
40|$|SymTA/S is a {{performance}} and <b>timing</b> analysis <b>tool</b> based on formal scheduling analysis techniques and symbolic simulation. The tool supports heterogeneous architectures, complex task dependencies, context aware analysis, and combines optimization algorithms with system sensitivity analysis for rapid design space exploration. This paper gives {{an overview of}} the current and future research interests in the SymTA/S project...|$|R
40|$|Abstract — With the {{increasing}} use of adaptive body biases in highperformance designs, it has become necessary to build timing models that can include these effects. State-of-the-art <b>timing</b> <b>tools</b> use current source models (CSMs), which have proven to be fast and accurate. However, a straightforward extension of CSMs to incorporate multiple body biases results in unreasonably large characterization tables for each cell. We propose a new approach to compactly capture body bias effects within a mainstream CSM framework. Our approach features a table reduction method for compact storage, and a fast and novel waveform sensitivity method for timing evaluation. On a 45 nm technology, we demonstrate high accuracy, with worst-case errors of under 5 % in both slew and delay as compared to HSPICE. We show a speedup of over five orders of magnitude over HSPICE and almost 70 × over conventional CSMs. I...|$|R
40|$|Compiling {{high-level}} hardware languages {{can produce}} circuits containing combinational cycles {{that can never}} be sensitized. Such circuits do have well-defined functional behavior, but wreak havoc with most logic synthesis and <b>timing</b> <b>tools,</b> which assume acyclic combinational logic. As such, some sort of cycle-removal step is usually necessary for handling these circuits. We present an algorithm able to quickly and exactly characterize all combinational behavior of a cyclic circuit. It iteratively examines the boundary between gates whose outputs are and are not defined and works backward to find additional input patterns that make the circuit behave combinationally. It produces a minimal set of sets of assignments to inputs that together cover all combinational behavior. This can be used to restructure the circuit into an acyclic equivalent, report errors, or as an optimization aid. Experiments show our algorithm runs several orders of magnitude faster than existing ones on real-life cyclic circuits, making it useful in practice. ...|$|R
40|$|This paper {{presents}} {{a case study}} of worst case timing analysis for a RISC processor. The target machine consists of the R 3000 CPU and R 3010 FPA (Floating Point Accelerator). This target machine is typical of a RISC system with pipelined execution units and cache memories. Our methodology is an extension of the existing timing schema. The extended timing schema provides means to reason about the execution time variation of a program construct by surrounding program constructs due to pipelined execution and cache memories of RISC processors. The main focus of this paper is on explaining the necessary steps for performing timing analysis of a given target machine within the extended timing schema framework. This paper also gives results from experiments using a <b>timing</b> <b>tool</b> for the target machine that is built based on the extended timing schema approach. 1 Introduction Calculating tight and safe WCET (Worst Case Execution Time) bounds is an important research topic in the real-time comp [...] ...|$|R
40|$|Abstract. This paper {{describes}} {{a method to}} predict guaranteed and tight deterministic execution time bounds of a sequential program. The basic prediction technique is a static analysis based on simple timing schema for source-level language constructs, which gives accurate predictions in many cases. Using powerful user-provided information, dynamic path analysis refines looser predictions by eliminating infeasible paths and decomposing the possible execution behaviors in a pathwise manner. Overall prediction cost is scalable with respect to desired precision, controlling {{the amount of information}} provided. We introduce a formal path model for dynamic path analysis, where user execution information is represented by a set of program paths. With a well-defined practical high-level interface language, user information can be used in an easy and efficient way. We also introduce a method to verify given user information with known program verification techniques. Initial experiments with a <b>timing</b> <b>tool</b> show that safe and tight predictions are possible fbr a wide range of programs. The tool can also provide predictions for interesting subsets of program executions. 1...|$|R
40|$|Copyright © 2005 American Water Works AssociationOutbreaks of {{waterborne}} disease {{have been associated}} with rainfall when pathogens are washed from the watershed and transported into reservoirs via riverine inflows. To help quantify the concentration and viability of Cryptosporidium contamination in lakes and reservoirs after such occurrences, the authors have developed a simple model that can be accessed online. In addition to the basic dynamics of inflows, the model includes fate transformations associated with temperature, ultraviolet light exposure, and sedimentation. The model's ability to predict inflow characteristics was tested during several inflows at three reservoirs in Australia. The data presented demonstrates the model's effectiveness as well as provides insight into the dynamics of inflow behavior in reservoirs and the processes affecting source water supply. Source water management is an increasingly important area of the water industry. Water utility operations and eventually public health can benefit from the effective use of a <b>timing</b> <b>tool</b> that can also help reduce treatment costs by selecting the best water for use in the plant...|$|R
40|$|Earth 2 ̆ 7 s gravity pulls {{all objects}} toward its center, {{and near the}} Earth 2 ̆ 7 s surface. Objects in free fall {{accelerate}} at 9. 8 m/s 2 vertically downward, provided air resistance is negligible. This value of acceleration {{is often referred to}} as 2 ̆ 2 g 2 ̆ 2. There are many ways to measure this rate of acceleration, and most require a timing device. Typically, stopwatches are the least expensive technology, so these are commonly available in high school science classrooms. With the recent addition of movie cameras on cell phones and digital cameras, another <b>timing</b> <b>tool</b> is available at moderate cost (free if the school policy allows students to use their personal cell phones during class time). The following set of experiments provide four ways to calculate g using (1) a 10 -meter (25 -yard) tape measure, (2) a brightly colored ball, (3) a stop watch, (4) a digital camera with movie mode, (5) a tripod, and (6) free software called MovieTracker ([URL]...|$|R
40|$|Knowing {{the program}} timing {{characteristics}} is funda-mental {{to the successful}} design and execution of real-time systems. Today, measurement-based <b>timing</b> analysis <b>tools</b> such as in-circuit emulators, logic analyzers and oscillo-scopes, are used in industry. A critical timing measure is the worst-case execution time (WCET) of a program. Re-cently, tools for deriving WCET estimates, mostly based on static program analysis, have reached the market. In this article we summarize experiences from five differ-ent industrial case-studies. The studies were made on typi-cal industrial systems, in close cooperation with the system developers, using both static and measurement-based tools. The primary purpose {{was to investigate the}} difficulties in-volved in applying current timing analysis methods to in-dustrial code. We were also interested howWCET estimates can be derived by different methods, how labor-intensive the methods are, and the accuracy of obtained results. As a result, we provide observations on the benefits and drawbacks of the different timing analysis methods used and specify general conditions when a particular method should be most beneficial. We also show the benefits of having sev-eral types of <b>timing</b> analysis <b>tools</b> available. ...|$|R
40|$|This paper {{describes}} {{a method to}} predict guaranteed and tight deterministic execution time bounds of a sequential program. The basic prediction technique is a static analysis based on simple timing schema for source-level language constructs, which gives accurate predictions in many cases. Using powerful user-provided information, dynamic path analysis refines looser predictions by eliminating infeasible paths and decomposing the possible execution behaviors in a pathwise manner. Overall prediction cost is scalable with respect to desired precision, controlling {{the amount of information}} provided. We introduce a formal path model for dynamic path analysis, where user execution information is represented by a set of program paths. With a well-defined practical high-level interface language, user information can be used in an easy and efficient way. We also introduce a method to verify given user information with known program verification techniques. Initial experiments with a <b>timing</b> <b>tool</b> show that safe and tight predictions are possible {{for a wide range of}} programs. The tool can also provide predictions for interesting subsets of program executions...|$|R
40|$|There {{exists a}} large variety of schedulability {{analysis}} tools based on different, often incomparable timing analysis models. This variety {{makes it difficult}} to choose the best fit for analyzing a given real-time system. We have developed RTLib, a library of timed automata templates that represent the semantics of a large variety of timing related concepts proposed by existing models and corresponding <b>timing</b> analysis <b>tools.</b> The key specificity of RTLib is that it is structured to be modular, such that (1) defining a new variant of a given concept requires only a localized change, and (2) non contradictory variants can be trivially combined. The extensibility of RTLib is demonstrated using five examples ranging from simple variants of the task activation model to the more complex mixed-criticality paradigm. RTLib provides the formal basis needed to compare the concepts offered by models of different <b>timing</b> analysis <b>tools</b> at the semantic level. This in turn will allow us to provide a syntactic mapping between the input of different tools. Our final goal is to help the research community to better evaluate analysis models and their underlying methods...|$|R
40|$|The {{interference}} on {{shared resources}} caused by concurrently executing applications unpredictably prolongs their execu-tion. Hence, {{determination of the}} Worst Case Execution Time (Wcet) of applications executing on shared memory multi-core processors is hard to estimate. This hinders the adoption of Commercial Off The Shelf (Cots) multi-core processors in hard real-time systems. The existing techniques opt for tailored multi-core architectures to pro-vide high computation power at predictable execution time. However, this approach yields poor resource utilization and high costs. In this paper, we present a technique to measure the Wcet of applications on multi-core architectures using existing measurement based <b>timing</b> analysis <b>tools.</b> Our technique has a minor area impact (≈ 5 %). However, this impact {{is limited to the}} emulation devices only and production chips remain unchanged. Thus, our technique does not impact performance of the Cots chips by any ways. The technique is demonstrated by measuring Wcet of benchmark applications using the RapiTime <b>timing</b> analysis <b>tool.</b> The tests are conducted on a quad-core NIOS II processor on an Altera Fpga. 1...|$|R
40|$|Preliminary notes The article {{presents}} simulation researches on the combustion {{process in the}} four-cylinder testing engine, based on the spark ignition engine Toyota Yaris 1, 3 dm 3 which was equipped with two systems of power supply i. e. : fundamental and ignition. Two methods of initiating the combustion process were applied: by spark ignition and, after it was turned off, {{by means of the}} ignition dose injection. The researches aimed at revealing the differences in the combustion process and engine performance, above all the changes in pressure that occurred in the cylinder for that kind of two-fuel power supply of the engine. The ignition dose injected into the cylinder was equal to about 5 ÷ 8 % of the general mass of the fuel supplied to the engine. The mass of the fuel injected into the approach collector determined the remaining part, and the direct injection of the fuel took place over several dozen of rotation degrees of the <b>crankshaft</b> before <b>TDC</b> (Top Dead Centre). A spatial grid of the engine’s model (pre-processor) was prepared, and also a modification to the source KIVA 3 V program was made consisting in taking into account of two systems of injection. It is necessary to mention that the standard KIVA 3 V program contains, as a default, only one source of fuel injection...|$|R
40|$|Abstract — A {{methodology}} {{is proposed}} for interdependent setup time and hold time characterization of sequential circuits. Integrating the methodology into an industrial sign-off static <b>timing</b> analysis <b>tool</b> is described. The proposed methodology prevents optimism and reduces unnecessary pessimism, {{both of which}} exist due to independent characterization. Furthermore, the tradeoff between interdependent setup and hold times is exploited to significantly reduce slack violations. These benefits are validated using industrial circuits and tools. I...|$|R
40|$|This {{communication}} presents HALOTIS, a novel {{high accuracy}} logic <b>timing</b> simulation <b>tool,</b> that incorporates a new simulation algorithm based on different concepts for transitions and events. This new simulation algorithm {{is intended for}} including the inertial and degradation delay models. Simulation results {{are very similar to}} those obtained by electrical simulators, and show a higher accuracy compared to conventional delay models implemented in current logic simulators. Ministerio de Ciencia y Tecnología TIC 2000 - 135...|$|R
40|$|Abstract—Signoff timing {{analysis}} remains a critical {{element in the}} IC design flow. Multiple signoff corners, libraries, design methodologies, and implementation flows make timing closure very complex at advanced technology nodes. Design teams often wish to ensure that one <b>tool’s</b> <b>timing</b> reports are neither optimistic nor pessimistic with respect to another tool’s reports. The resulting “correlation ” problem is highly complex because tools contain millions of lines of black-box and legacy code, licenses prevent any reverse-engineering of algorithms, {{and the nature of}} the problem is seemingly “unbounded ” across possible designs, timing paths, and electrical parameters. In this work, we apply a “big-data ” approach to the timer correlation problem. We develop a machine learning-based tool, Golden Timer eXtension (GTX), to correct divergence in flip-flop setup time, cell arc delay, wire delay, stage delay, and path slack at timing endpoints between timers. We propose a methodology to apply GTX to two arbitrary timers, and we evaluate scalability of GTX across multiple designs and foundry technologies / libraries, both with and without signal integrity analysis. Our experimental results show reduction in divergence between <b>timing</b> <b>tools</b> from 139. 3 ps to 21. 1 ps (i. e., 6. 6 ×) in endpoint slack, and from 117 ps to 23. 8 ps (4. 9 × reduction) in stage delay. We further demonstrate the incremental application of our methods so that models can be adapted to any outlier discrepancies when new designs are taped out in the same technology / library. Last, we demonstrate that GTX can also correlate timing reports between signoff and design implementation tools. I...|$|R
40|$|Capacitance {{coupling}} {{can have}} a significant impact on gate delay in today's deep submicron circuits. In this paper we present a static <b>timing</b> analysis <b>tool</b> that calculates the longest path of synchronous circuits taking the impact of crosstalk on gate delays into account. We show that passive modeling of the coupling capacitance can significantly underestimate the delay and that an assumption of permanent worst-case coupling unnecessarily overestimates it. Our method is validated by comparison to Spice simulations. 1...|$|R
40|$|International audienceAs feature sizes {{continue}} to shrink, traditional corner analysis, {{because of its}} limitations and pessimism [1], is being gradually supplanted by Statistical Static Timing Analysis (SSTA) as our major <b>timing</b> <b>tool.</b> Recent works [2 - 4] propose non-linear models handling Gaussian and non-Gaussian variation sources, {{which is a great}} progress relative to linear dependency on Gaussian process parameters presented in [5 - 6]. The authors of [7] propose a simple and practical approach of SSTA. After having analyzed impacts of process variations on delay and probable phenomena of circuit, the authors simplify the cells timing characterization, and the basic operations MAX/MIN for random variables. Following the thought of simplicity, we propose herein a path-based timing approach to propagate iteratively probability density function (PDF) by adopting conditional moments. With this probability concept, plus a model of input signal and the employment of active load, path delay distribution can be estimated taking into account input slope and output load variations. Furthermore, in a first attempt, we propose a technique to estimate cell-to-cell delay correlation which value depends on: (a) environmental parameters like V and T, (b) cell topology and polarity, and (c) input slope and output load values...|$|R
40|$|State-of-the-art <b>timing</b> <b>tools</b> {{are built}} around the use of current source models (CSMs), which {{have proven to be}} fast and {{accurate}} in enabling the analysis of large circuits. As circuits become increasingly exposed to process and temperature variations, there is a strong need to augment these models to account for thermal effects and for the impact of adaptive body biasing, a compensatory technique that is used to overcome onchip variations. However, a straightforward extension of CSMs to incorporate timing analysis at multiple body biases and temperatures results in unreasonably large characterization tables for each cell. We propose a new approach to compactly capture body bias and temperature effects within a mainstream CSM framework. Our approach features a table reduction method for compaction of tables and a fast and novel waveform sensitivity method for timing evaluation under any body bias and temperature condition. On a 45 nm technology, we demonstrate high accuracy, with mean errors of under 4 % in both slew and delay as compared to HSPICE. We show a speedup of over five orders of magnitude over HSPICE and a speedup of about 92 × over conventional CSMs...|$|R
40|$|International audienceThis paper {{describes}} {{the method used}} {{in the design of}} a 26 million transistors chip at BULL to verify the timing performance using the hierarchical <b>timing</b> analysis <b>tool</b> HiTas as well as the interactive path browser Xtas. Those tools have been designed at UPMC and are now commercialized by AVERTEC. The complexity is handled by partitioning the analysis according to the hierarchical partitioning of the design phase. The propagation times within a circuit are represented using a multi-level hierarchical timing view...|$|R
40|$|International audienceIn {{this work}} we apply the <b>timing</b> {{verification}} <b>tool</b> OpenKronos, {{which is based}} on timed automata, to verify corectness of numerous asynchronous circuits. The desired behavior of these circuits is specified in terms of signal transition graphs (STG) and we check whether the synthesized circuit behave correctly under the assumption that the inputs satisfy the STG conventions and that the gate delays are bounded between two given numbers. Our results demonstrate the viability of the timed automaton approach for timing analyis of certain classes of circuits...|$|R
