0|700|Public
2500|$|... in <b>Constructive</b> <b>Solid</b> <b>Geometry</b> {{together}} with assembling instructions ...|$|R
5000|$|Parametric {{modeling}} and <b>Constructive</b> <b>solid</b> <b>geometry</b> and Boundary representation ...|$|R
5000|$|... {{support for}} a number of {{geometric}} primitives and <b>constructive</b> <b>solid</b> <b>geometry</b> ...|$|R
50|$|<b>Constructive</b> <b>solid</b> <b>geometry</b> (CSG) (formerly called {{computational}} binary <b>solid</b> <b>geometry)</b> is {{a technique}} used in <b>solid</b> modeling. <b>Constructive</b> <b>solid</b> <b>geometry</b> allows a modeler to create a complex surface or object by using Boolean operators to combine simpler objects. Often CSG presents a model or surface that appears visually complex, but is actually little more than cleverly combined or decombined objects.|$|R
2500|$|Geometric {{computing}} <b>constructive</b> <b>solid</b> <b>geometry,</b> distance fields, collision detection, transparency computation, shadow generation ...|$|R
5000|$|<b>Constructive</b> <b>solid</b> <b>geometry,</b> Boolean Intersection {{is one of}} {{the ways}} of {{combining}} 2D/3D shapes ...|$|R
5000|$|<b>Constructive</b> <b>solid</b> <b>geometry,</b> {{a method}} of {{defining}} three-dimensional shapes using a similar set of operations ...|$|R
5000|$|OpenSCAD, a <b>constructive</b> <b>solid</b> <b>geometry</b> modeler and domain-specific {{language}} can both generate and import STL files ...|$|R
50|$|In <b>constructive</b> <b>solid</b> <b>geometry,</b> {{primitives}} {{are simple}} geometric shapes {{such as a}} cube, cylinder, sphere, cone, pyramid, torus.|$|R
5000|$|It {{featured}} <b>constructive</b> <b>solid</b> <b>geometry,</b> {{support for}} smooth curved quadric surfaces and a ray-tracer for photo realistic rendering.|$|R
5000|$|Implicit surface {{modeling}} - an older subfield which examines {{the use of}} algebraic surfaces, <b>constructive</b> <b>solid</b> <b>geometry,</b> etc., for surface representation.|$|R
40|$|We convert <b>constructive</b> <b>solid</b> <b>geometry</b> {{input to}} {{explicit}} representations of polygons, polyhedra, or more generally d-dimensional polyhedra, in time O(n d), improving a previous O(n d log n) bound. We then show that any Boolean formula can be preprocessed in time O(n log n/ log log n) {{so that the}} value of the formula can be maintained, as variables are changed one by one, in time O(log n/ log log n) per change; this speeds up certain output-sensitive algorithms for <b>constructive</b> <b>solid</b> <b>geometry.</b> 1 Introduction Computational geometry typically deals with explicit representations of geometric input (polygons, polyhedra, etc) as cell complexes of facets. However another representation is possible: a shape may be described implicitly,in terms of the method of its construction. Such a representation is the <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (CSG) formula, in which a shape is built up from primitive shapes such as halfspaces and spheres, by means of Boolean combinations such as set unio [...] ...|$|R
5000|$|... 3-Dimensional : A design {{where an}} object is {{presented}} that will appear to read several letters or words {{when viewed from}} different angles. Such designs can be generated using <b>constructive</b> <b>solid</b> <b>geometry.</b>|$|R
5000|$|Solid - These models {{define the}} volume of the object they {{represent}} (like a rock). Solid models are mostly used for engineering and medical simulations, and are usually built with <b>constructive</b> <b>solid</b> <b>geometry</b> ...|$|R
5000|$|... 'Body' {{indicates}} a 3D shape {{which may be}} represented by B-rep, NURBS, <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (CSG), or swept profiles. It may be defined directly or derived by applying material definitions to other representations.|$|R
5000|$|Another {{implementation}} {{includes the}} field of visualization during the modeling technique <b>solids</b> <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (CSG), wherein stencil buffer, together with the depth buffer, it can successfully {{solve the problems of}} the Boolean operations of the SOLiD [...]|$|R
50|$|Visibility in 3D is {{inherently}} a 4-Dimensional problem. To tackle this, solutions are often performed using Pl√ºcker coordinates, which effectively linearize {{the problem in}} a 5D projective space. Ultimately, these problems are solved with higher-dimensional <b>constructive</b> <b>solid</b> <b>geometry.</b>|$|R
40|$|Binary Space Partitioning (BSP) {{trees have}} some qualities {{that make them}} useful in solving many {{graphics}} related problems. The purpose is to describe what a BSP tree is, {{and how it can}} be used to solve the problem of hidden surface removal, and <b>constructive</b> <b>solid</b> <b>geometry.</b> The BSP tree is based on the idea that a plane acting as a divider subdivides space into two parts with one being on the positive side and the other on the negative. A polygonal solid is then represented as the volume defined by the collective interior half spaces of the solid's bounding surfaces. The nature of how the tree is organized lends itself well for sorting polygons relative to an arbitrary point in 3 space. The speed at which the tree can be traversed for depth sorting is fast enough to provide hidden surface removal at interactive speeds. The fact that a BSP tree actually represents a polygonal solid as a bounded volume also makes it quite useful in performing the boolean operations used in <b>constructive</b> <b>solid</b> <b>geometry.</b> Due to the nature of the BSP tree, polygons can be classified as they are subdivided. The ability to classify polygons as they are subdivided can enhance the simplicity of implementing <b>constructive</b> <b>solid</b> <b>geometry...</b>|$|R
50|$|Ray casting {{is the use}} of ray-surface {{intersection}} {{tests to}} solve a variety of problems in computer graphics and computational geometry. The term was first used in computer graphics in a 1982 paper by Scott Roth to describe a method for rendering <b>constructive</b> <b>solid</b> <b>geometry</b> models.|$|R
50|$|BRL-CAD is a <b>constructive</b> <b>solid</b> <b>geometry</b> (CSG) <b>solid</b> {{modeling}} {{computer-aided design}} (CAD) system. It includes an interactive geometry editor, ray tracing support for graphics rendering and geometric analysis, computer network distributed framebuffer support, scripting, image-processing and signal-processing tools. The entire package is distributed in source code and binary form.|$|R
5000|$|<b>Constructive</b> <b>solid</b> <b>geometry</b> has {{a number}} of {{practical}} uses. It is used in cases where simple geometric objects are desired, or where mathematical accuracy is important.Nearly all engineering CAD packages use CSG (where it may be useful for representing tool cuts, and features where parts must fit together).|$|R
40|$|This work aims at {{rendering}} 3 D scene using ray tracing. It describes {{advantages and}} disadvantages of this technology and its alternation known as distributed ray tracing. Other part deals with method from different branch, which are closely related to distributed ray tracing - <b>constructive</b> <b>solid</b> <b>geometry</b> and procedural texturing...|$|R
40|$|This paper {{describes}} {{geometric modeling}} {{systems that are}} being applied with computer systems in construction surveying of highway tunnels. These modeling systems include sweeping, skinning, mesh generation, combined <b>constructive</b> <b>solid</b> <b>geometry</b> and boundary representation modeling systems, and computational geometry for irregular surfaces and tunnel intersections. Department of Land Surveying and Geo-Informatic...|$|R
30|$|Even though ADEs are {{intended}} to supplement CityGML, {{it is important to}} note that the geometries must be compatible with the Geography Markup Language (GML). This might be a disadvantage for purposes such as the conversion from IFC because it involves additional forms of <b>geometry</b> such as <b>constructive</b> <b>solid</b> <b>geometry</b> (CSG) [87].|$|R
40|$|The {{repertoire}} of set operators available in <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (CSG) may be extended by the Minkowski addition and subtraction operators. In {{this way the}} problem of visualizing 3 D solids defined as a Minkowski addition or subtraction of elementary objects can be solved by using CSG in combination with ray tracing...|$|R
50|$|Compared to the <b>constructive</b> <b>solid</b> <b>geometry</b> (CSG) representation, {{which uses}} only {{primitive}} objects and Boolean operations to combine them, boundary representation is more flexible {{and has a}} much richer operation set. In addition to the Boolean operations, B-rep has extrusion (or sweeping), chamfer, blending, drafting, shelling, tweaking and other operations which make use of these.|$|R
40|$|We {{consider}} {{the problem of}} visualizing 3 D objects defined as a Minkowski addition or subtraction of elementary objects. It is shown that such visualizations {{can be obtained by}} using techniques from computer graphics such as ray tracing and <b>Constructive</b> <b>Solid</b> <b>Geometry.</b> Applications of the method are found in solid modelling and shape description. ...|$|R
40|$|The Sequenced Convex Subtraction (SCS) {{algorithm}} is a hardware based multi-pass image-space algorithm for general purpose <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (CSG) Rendering. Convex objects combined by volumetric intersection, difference and union are rendered in real-time without b-rep pre-processing. OpenGL stencil and depth testing {{is used to}} determine the visible surface for each pixel on the screen...|$|R
40|$|Constraints are {{described}} for <b>Constructive</b> <b>Solid</b> <b>Geometry</b> which {{ensure that a}} scene composed of solids is described uniquely, up to a choice of the decomposition of compound solids into primitive ones. The constraints can be applied more easily to an Additive <b>Constructive</b> <b>Solid</b> <b>Geometry</b> which is also better suited to implementation on a parallel architecture. <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (CSG) {{has been used in}} several model-based vision programs, most notably in ACRONYM 1. This paper examines {{some of the problems that}} arise with CSG and proposes constraints that make CSG a unique representation of scenes. It is also suggested that Additive <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (ACSG) is more useful for vision because it leads to simpler computation of connectivity, within and between objects, and can be implemented more readily on a parallel architecture. The motivation for examining the properties of a formal modelling system arises from what we shall call the strong thesis of model-based vision. The principal tenet is that all image features required to verify a model can be derived automatically from a model and knowledge of the optics of image formation. That is, models should provide complete knowledge of visual form which can, in principle, be used to solve any visual problem. The subsidiary tenet is that there is a two-way mapping between image locations and instantiated models. Thus, in principle, it is possible for analysis to proceed both top-down from instantiated models to the image and bottom-up from the image to instantiated models. This latter property underlies the definition of visual knowledge as "knowledge which can be brought into a two-way, spatial mapping with an image " (compare with Sloman's similar definition 2). Thus, in model-based vision, models provide a justification for the particular image processing techniques used. They provide a deep knowledge of image processing and mediate between image processing and the rest of the system's knowledge. If models are to be used automatically by an intelligent vision program then it is important that the models and modelling processes are well formed and do not require human intervention...|$|R
50|$|Gmsh is a finite-element mesh {{generator}} {{developed by}} Christophe Geuzaine and Jean-Fran√ßois Remacle. Released under the GNU General Public License, Gmsh is free software. Gmsh contains 4 modules: for geometry description, meshing, solving and post-processing. Gmsh supports parametric input and has advanced visualization mechanisms. Since version 3.0, Gmsh supports full <b>constructive</b> <b>solid</b> <b>geometry</b> features, based on Open Cascade Technology.|$|R
40|$|Solid {{models are}} static entities, often dened by {{boundary}} representation models as sets of enclosing surfaces. <b>Constructive</b> <b>Solid</b> <b>Geometry</b> and feature-based computer-aided design environments create procedural descriptions of 3 D objects in forms of history or CSG trees. These representations are temporally xed, i. e., they describe {{the state of}} an object {{at a point in}} time...|$|R
40|$|Modeling {{two-dimensional}} and three-dimensional objects is {{an important}} theme in computer graphics. Two main types of models are used in both cases: boundary representations, which represent the surface of an object explicitly but represent its interior only implicitly, and <b>constructive</b> <b>solid</b> <b>geometry</b> representations, which model a complex object, surface and interior together, as a boolean combination of simpler objects. Because neither representation is good for all applications, conversion {{between the two is}} often necessary. We consider the problem of converting boundary representations of polyhedral objects into <b>constructive</b> <b>solid</b> <b>geometry</b> (CSG) representations. The CSG representations for a polyhedron P are based on the half-spaces supporting the faces of P. For certain kinds of polyhedra this problem is equivalent to the corresponding problem for simple polygons in the plane. We give a new proof that the interior of each simple polygon can be represented by a monotone [...] ...|$|R
40|$|<b>Solid</b> {{modelling}} using <b>constructive</b> <b>solid</b> <b>geometry</b> (CSG) {{includes many}} examples of stylised divide-and-conquer algorithms. We identify the sources of these recurrent patterns and implement a Geometric Evaluation Library (GEL) which captures them as higher order functions. This library then become the basis of developing CSG applications quickly and concisely. GEL is currently implemented {{as a set of}} separately compiled modules in the pure functional language Hope+. We evaluate our work in terms of performance and general applicability. We also assess the benefits of the functional paradigm in this domain and the merits of programming with a set of higher order functions. 1 Introduction We present a case study in functional programming in the field of <b>solid</b> modelling using <b>Constructive</b> <b>Solid</b> <b>Geometry</b> (CSG). It is motivated by the observation that this application domain uses many (potentially parallel) stylised algorithms based on the divide-and-conquer (D&C) paradigm. Previous [...] ...|$|R
40|$|Abstract‚ÄîIn {{this article}} we intend to present a method of obtaining high {{complexity}} sinthetic scenes by using simple volumes as the building blocks. The below described method {{can be used to}} obtain both homogenous and heterogenous volumes. This is done by combining volumes of different voxel densities. Index Terms‚Äîvolumetric data, voxel, <b>constructive</b> <b>solid</b> <b>geometry,</b> volume modelling, <b>constructive</b> volume geometry. I...|$|R
50|$|VSim {{is under}} {{continuous}} and rapid development. Semiconductor device simulations for diamond and Gallium-Arsenide are now possible, and more TCAD capabilities are being developed. Parametric <b>constructive</b> <b>solid</b> <b>geometry</b> for both geometric CAD {{as well as}} TCAD and photonics-relevant shapes will be available. High-performance computing capabilities across all computing devices, including GPUs and Many-core, will be available with the parallel computing environment.|$|R
40|$|We {{describe}} an algorithm that computes {{the boundary of}} the shadow volume cast by a collection of piecewise linear polyhedra in space using BSP trees. Unlike boundary representations, representing solids in general and shadow volumes in particular using BSP trees {{makes it possible to}} implement boolean operations easily and robustly. Also, in contrast with operating in <b>Constructive</b> <b>Solid</b> <b>Geometry</b> or on Nef polyhedra, no neighborhood analysis is needed. ...|$|R
