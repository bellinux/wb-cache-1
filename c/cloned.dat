10000|10000|Public
5|$|Supporters of Hwang {{founded a}} company called Sooam Biotech where Hwang {{developed}} proprietary techniques based on a licence from ViaGen's subsidiary Start Licensing (which owns the original Dolly patent) and created <b>cloned</b> dogs for owners whose dogs had died, charging $100,000 a time Sooam Biotech {{was reported to have}} <b>cloned</b> 700 dogs by 2015 and to be producing 500 <b>cloned</b> embryos of various species a day in 2016.|$|E
5|$|General Martin Perez (Dan Hedaya) is the {{commanding}} officer of the USM Auriga, overseeing the ship's legal (and illicit) activities. After Ripley 8 is <b>cloned</b> and her Queen embryo is extracted, Perez is uneasy with her enhanced physical and psychological abilities but allows her to live; Dr. Wren and Dr. Gediman continue their research on her. Perez hires Elgyn to abduct a number of humans in cryostasis as incubators for the <b>cloned</b> Aliens; he gives the Betty crew food and lodging, emphasizing that they cannot interfere with the research on the Auriga. When the Aliens board an escape craft, he sabotages them with a grenade. An Alien bites the back of Perez' head, exposing his brain.|$|E
5|$|The gene {{was first}} <b>cloned</b> by {{scientists}} at Myriad Genetics, Endo Recherche, Inc., HSC Research & Development Limited Partnership, and the University of Pennsylvania.|$|E
50|$|The <b>Clone</b> Republic is {{the first}} book in the <b>Clone</b> series of novels, set in 2508 AD. It is {{followed}} by Rogue <b>Clone,</b> The <b>Clone</b> Alliance, The <b>Clone</b> Elite, The <b>Clone</b> Betrayal, The <b>Clone</b> Sedition, The <b>Clone</b> Empire, The <b>Clone</b> Redemption, and The <b>Clone</b> Assassin.|$|R
40|$|Code <b>clone</b> {{inspection}} is {{an integral}} part of software <b>clone</b> management to assess the quality of <b>clones</b> or the tools reporting them, to decide how to resolve code <b>clone</b> issues, and so on. As <b>clone</b> inspection is a manual process its feasibility is limited especially when working with large numbers of <b>clones.</b> This is rather critical as <b>clone</b> detection tools may return many <b>clones</b> even when applied to medium sized projects. Parameterized <b>Clone</b> Pattern abstracts <b>clones</b> using parameters and merge them into shared “patterns”. The more abstract view on <b>clones</b> reduces the number of necessary manual <b>clone</b> inspections. In addition this approach can be used to provide intuitive visualizations of <b>clones,</b> report potential problems, suggest possible next steps etc [...] This makes Parameterized <b>Clone</b> Pattern a good candidate to improve <b>clone</b> inspection efficiency...|$|R
40|$|Abstract—Code <b>clones</b> are {{identical}} or similar code fragments in a code base. A group of code fragments {{that are similar}} to one another forms a <b>clone</b> class. <b>Clone</b> fragments from the same <b>clone</b> class often need to be changed together consistently and thus, they exhibit evolutionary coupling. Evolutionary coupling among <b>clone</b> fragments within a <b>clone</b> class has already been investigated and reported. However, a change to a <b>clone</b> fragment of a <b>clone</b> class may also trigger changes to non-cloned code as well as to <b>clone</b> fragments of other <b>clone</b> classes. Such coupling information is equally important for the proper management of <b>clones</b> during software maintenance. Unfortunately, there are no such studies reported in the literature. In this paper, we describe a large scale empirical study that we conduct to examine whether a <b>clone</b> fragment from a particular <b>clone</b> class exhibits evolutionary coupling with non-clone fragments and/or with <b>clone</b> fragments of other <b>clone</b> classes. Our experimental results on thousands of revisions of six diverse subject systems written in two programming languages indicate the presence of such couplings. We consider both exact and near-miss <b>clones</b> in our study. By analyzing the evolutionary couplings of a particular <b>clone</b> fragment from a particular <b>clone</b> class, we are able to predict its three types of co-change candidates with considerable accuracy in terms of precision and recall. These co-change candidates are: (1) non-clone fragments, (2) <b>clone</b> fragments from <b>clone</b> classes other than its own class, and (3) other <b>clone</b> fragments from its own <b>clone</b> class. Thus, we can improve existing <b>clone</b> tracking techniques so that they can also infer and suggest which non-clone fragments as well as which <b>clone</b> fragments from other <b>clone</b> classes might need to be co-changed correspondingly when modifying a <b>clone</b> fragment from a particular <b>clone</b> class. I...|$|R
5|$|The world's first <b>cloned</b> {{sniffer dogs}} (all {{of which are}} named Toppy) were put to work by South Korean customs in July 2009.|$|E
5|$|For {{the battle}} {{sequence}} in North Africa, two actual Curtiss P-40 Kittyhawks in Desert Air Force paint schemes were used, accompanied by <b>cloned</b> images {{of them or}} by computer-generated planes. In scenes showing squadrons of soldiers, digital extras were not used; instead, photography of real squadrons was <b>cloned.</b> Sony Pictures Imageworks also digitally expanded details on stage locations and at practical locations. The exterior of Hitler's Bavarian residence Berghof was digitally created, since little {{was left of the}} original structure, and the creation was superimposed on a shot of a ski area in Austria. In Berlin itself, city officials helped reduce the need for visual effects by removing power poles and modern lighting over the weekend when filming took place and restoring the equipment by the start of the new week.|$|E
5|$|In the {{following}} years, Boisselier {{claimed to have}} facilitated the cloning of several children {{in a variety of}} countries. As of June 2004, she reported that Clonaid has successfully <b>cloned</b> 13 children. She did not provide evidence to verify the claims. She stated that the a machine called the RMX 2010 was used in the cloning attempts, and exhibited it publicly.|$|E
40|$|Code duplication, or code <b>cloning,</b> is {{a common}} {{phenomena}} {{in the development of}} large software systems. Developers have a love-hate relationship with <b>cloning.</b> On one hand, <b>cloning</b> speeds up the development process. On the other hand, <b>clone</b> management is a challenging task as software evolves. <b>Cloning</b> has commonly been considered as undesirable for software maintenance and several research efforts have been devoted to automatically detect <b>clones</b> and eliminate <b>clones</b> aggressively. However, there is little empirical work done to analyze the consequences of <b>cloning</b> with respect to the software quality. Recent studies show that <b>cloning</b> is not necessarily undesirable. <b>Cloning</b> can used to minimize risks and there are cases where <b>cloning</b> is used as a design technique. In this thesis, three visualization techniques are proposed to aid researchers in analyzing <b>cloning</b> in studying large software systems. All of the visualizations abstract and display <b>cloning</b> information at the subsystem level but with different emphases. At the subsystem level, <b>clones</b> can be classified as external <b>clones</b> and internal <b>clones.</b> External <b>clones</b> refer to code duplicates that reside in the same subsystem, whereas external <b>clones</b> are <b>clones</b> that are spread across different subsystems. Software architecture quality attributes such as cohesion and coupling are introduced to contribute to the study of <b>cloning</b> at the architecture level. The <b>Clone</b> Cohesion and Coupling (CCC) Graph and the <b>Clone</b> System Hierarchy (CSH) Graph display the <b>cloning</b> information for one single release. In particular, the CCC Graph highlights the amount of internal and external <b>cloning</b> for each subsystems; whereas the CSH Graph focuses more on the details of the spread of <b>cloning.</b> Finally, the <b>Clone</b> System Evolution (CSE) Graph shows the evolution of <b>cloning</b> over a period of time...|$|R
40|$|Code <b>clones</b> {{are similar}} program {{structures}} recurring in software systems. <b>Clone</b> detectors produce much {{information and a}} challenge is to identify useful <b>clones</b> depending on the goals of <b>clone</b> analysis. To do so, further abstraction, filtering and visualization of <b>cloning</b> information, with the involvement of a human expert, is required. In this paper, we describe a technique for filtering and visualization of <b>cloning</b> information generated by <b>Clone</b> Miner, a <b>clone</b> detection tool presented in our earlier work. Unique benefit and contribution of our approach is that a human expert can define {{a wide range of}} filters to extract abstract views of the <b>cloning</b> data using a clone-query system to suit specific needs of <b>clone</b> analysis. We then produce standardized graphical presentations of those views for various types of <b>clone</b> queries. We implemented the technique into an Eclipse plug-in called <b>Clone</b> Visualizer. <b>Clone</b> Visualizer works closely with <b>Clone</b> Miner which not only finds similar code fragments (simple <b>clones)</b> but also finds higher-level abstractions of the <b>cloning</b> information. Our method is the first attempt to address filtering and visualization of those higher level <b>cloning</b> abstractions. We illustrate application of our technique with examples from a <b>clone</b> analysis project with <b>Clone</b> Miner and <b>Clone</b> Visualizer. 1. Introduction an...|$|R
40|$|The {{cellular}} {{communications between}} a human CD 4 + <b>clone</b> and autologous CD 4 + <b>clones</b> induced {{with the first}} <b>clone</b> are described. The autoreactive <b>clones</b> proliferated after stimulation with the inducer <b>clone,</b> but not after stimulation with autologous <b>clones</b> expressing irrelevant specificities. The inducer <b>clone</b> markedly lost its ability {{to interact with the}} autoreactive <b>clones</b> after the modulation of its T-cell receptor. The proliferation of the autoreactive <b>clones</b> stimulated with the inducer <b>clone</b> was blocked by anti-DR monoclonal antibody. Collectively, these findings indicate that the autoreactive <b>clones</b> recognize idiotypic-like determinants on the receptor of the inducer <b>clone</b> in conjunction with DR antigen. The regulatory activity of the autoreactive <b>clones</b> was assayed by co-cultivation with their target inducer <b>clone.</b> The autoreactive <b>clones</b> were not committed to a single program, they could either suppress or enhance the proliferation of the target cells depending on the state of activation of the target cells. Activated target cells were suppressed whereas non-activated cells were enhanced. It is predicted that antagonistic cytokines released from the autoreactive <b>clones</b> exert differential effects on the target <b>clone...</b>|$|R
5|$|Since {{breeding}} Scamper was not {{an option}} for genetic inheritability, James spent several years researching the possibility of cloning. She chose ViaGen, an animal genetics corporation based in Austin, Texas, to perform the cloning procedure for $150,000. James registered the resulting colt born in 2006 with the American DNA Registry under the name Clayton, who is an identical genetic match to Scamper. James chose a surrogate mare to be the dam of the colt and receive the <b>cloned</b> embryo. At age two, James started Clayton as a breeding stallion. She offered his services to the public at a fee of $4,000. Clayton sired healthy progeny, many of whom have inherited Scamper's genetics. Of special note, the AQHA does not register <b>cloned</b> horses; however, breed registration is not required to compete in barrel racing or other PRCA and WPRA sanctioned rodeo events.|$|E
5|$|The 2007 film Hitman re-used {{footage of}} Max and other Manticore {{children}} in training from Dark Angel. It {{was used to}} portray the Hitman protagonist Agent 47, a <b>cloned</b> assassin who, like the Manticore children, has a barcode {{on the back of}} his head.|$|E
5|$|An eighteen-issue monthly series, {{published}} between June 2003 and November 2004, follows U.S. Army communications specialist Patricia Robertson. During {{a supply}} run to an outpost {{owned by the}} Ararat Corporation, she discovers that all the scientists except one have been killed. The Ararat Corporation is run by an alien colony of miniature spider robots (led by an entity named Bob) that have infiltrated the U.S. government. The Ararat Corporation has <b>cloned</b> Venom to facilitate the extermination of humanity; however, the clone ravages its hosts and kills the outpost crew.|$|E
40|$|ABSTRACT-In present time’s High level <b>clones</b> (HLC) is an {{emerging}} concept {{that uses a}} hierarchical organization of fine gained <b>clone</b> fragments (Simple <b>clones)</b> to form coarser-grained <b>clones</b> (High Level <b>Clone).</b> Different research groups categorize <b>clones</b> with respect to different contexts. In this paper we review all such available categories of <b>clones</b> and present them {{in the form of}} a High Level <b>Clone</b> Classification. Classification can serve various purposes like studying the more frequently occurring high level <b>clones,</b> prioritizing different types of high level <b>clones,</b> devising re-engineering strategies for different types of high level <b>clones</b> etc [...] For this classification of HLC we develop a fuzzy rule-based system and also visualize the results. Index Terms—High Level <b>Clones,</b> Fuzzy rule-based system...|$|R
40|$|Abstract—Understanding the {{evolution}} of code <b>clones</b> is im-portant for both developers and researchers to understand the maintenance implications of <b>clones</b> and to design robust <b>clone</b> management systems. Generally, a study of <b>clone</b> evolution starts with extracting <b>clone</b> genealogies across multiple versions of a program and classifying them according to their change patterns. Although these tasks are straightforward for exact <b>clones,</b> extracting the history of near-miss <b>clones</b> and classifying their change patterns automatically is challenging due to the potential diverse variety of <b>clone</b> fragments even in the same <b>clone</b> class. In this tool demonstration paper we describe the design and implementation of a near-miss <b>clone</b> genealogy extractor, gCad, that can extract and classify both exact and near-miss <b>clone</b> genealogies. Developers and researchers can compute {{a wide range of}} popular metrics regarding <b>clone</b> evolution by simply post processing the gCad results. gCad scales well to large subject systems, works for different granularities of <b>clones,</b> and adapts easily to popular <b>clone</b> detection tools. Index Terms—Type- 3 clones; <b>clone</b> genealogy; <b>clone</b> evolution I...|$|R
40|$|Abstract — The idea of {{software}} <b>clones</b> is linked with similarity, which can occur {{at various levels}} of abstraction. Simple <b>clones</b> i. e. <b>clones</b> at lower levels of abstraction are classified in literature, however; high level <b>clones</b> are not. We propose and exemplify a consolidated yet novel taxonomy of high level <b>clones.</b> Our discussion augments thus far knowledge of high level <b>clone</b> types and their specialized detection techniques. <b>Clone</b> taxonomies can help in further analysis of high level <b>clone</b> phenomenon like in prioritizing <b>clones</b> for reengineering and for specifying reengineering guidelines. Keywords-High level similarities, software maintenance, classification, code <b>clones.</b> I...|$|R
5|$|As a {{character}} in the games, Mewtwo's physical appearance is not its only stark divergence from Mew. While the alterations to the genetic source material it was <b>cloned</b> resulted in its abilities surpassing Mew's, it also resulted in Mewtwo developing a vicious personality that is primarily interested in proving its own strength. The franchise's non-video game media, particularly the anime, has expanded upon the character. In the most notable instance, Mewtwo telepathically speaks with a male voice and is existentially torn over its purpose in the world.|$|E
5|$|CASS4 (Crk {{associated}} substrate 4) is {{the fourth}} and last described member of the CAS protein family. CASS4 was detected by Singh et al. in 2008 following in silico screening of databases describing expressed sequence tags from an evolutionarily diverse group of organisms, using the CAS-related proteins (p130Cas, NEDD9/HEF1 and EFS) mRNAs as templates. Singh et al. subsequently <b>cloned</b> and characterized the CASS4 gene, originally assigning the name HEPL (HEF1-EFS-p130Cas-like) for similarity to the other three defined CAS genes. The official name was subsequently changed to CASS4 by the Human Genome Organization (HUGO) Gene Nomenclature Committee (HGNC).|$|E
5|$|Despite initial doubts by Nintendo's American staff, Donkey Kong succeeded commercially and {{critically}} in North America and Japan. Nintendo licensed {{the game to}} Coleco, who developed home console versions for numerous platforms. Other companies <b>cloned</b> Nintendo's hit and avoided royalties altogether. Miyamoto's characters appeared on cereal boxes, television cartoons, {{and dozens of other}} places. A lawsuit brought on by Universal City Studios, alleging Donkey Kong violated their trademark of King Kong, ultimately failed. The success of Donkey Kong and Nintendo's victory in the courtroom helped to position the company for video game market dominance from its release in 1981 until the late 1990s (1996–1999).|$|E
40|$|Abstract—Clone {{detection}} {{provides a}} scalable and {{efficient way to}} detect similar code fragments. But it offers limited explanation of differences of functions performed by <b>clones</b> and variations of control and data flows of <b>clones.</b> We refer to such differences as semantic differences of <b>clones.</b> Understanding these semantic differences is essential to correctly interpret <b>cloning</b> information and perform maintenance tasks on <b>clones.</b> Manual analysis of semantic differences of <b>clones</b> is complicated and error-prone. In the paper, we present our <b>clone</b> analysis tool, called Clone-Differentiator. Our tool automatically characterizes <b>clones</b> returned by a <b>clone</b> detector by differentiating Program Dependence Graphs (PDGs) of <b>clones.</b> CloneDifferentiator is able to provide a precise characterization of semantic differences of <b>clones.</b> It can provide {{an effective means of}} analyzing <b>clones</b> in a task oriented manner. Keywords- <b>Clone</b> analysis, Graph differencing, Program dependence graph I...|$|R
30|$|For the CP library {{out of the}} <b>clone</b> groups {{affiliated}} with the Bacilli, {{a large number of}} <b>clones</b> were related to Tuberibacillus calidus or Sporolactobacillus laevolacticus (14 <b>clones,</b> 97.0 - 99.0 %), Pullulanibacillus naganoensis (13 <b>clones,</b> 99.4 %), Alicyclobacillus pomorum (4 <b>clones,</b> 98.0 %), and Paenibacillus spp. (7 <b>clones,</b> 90.0 - 95.2 %). Of these groups, the <b>clones</b> related to Paenibacillus spp. made a cluster with some <b>clones</b> from the BSD library, and a <b>clone</b> group closely related to B. niacini (5 <b>clones,</b> 99.0 %) was also present in the BSD library. Although the high percentages of <b>clones</b> affiliated in the Bacilli were found in both the BSD and CP libraries, the members retrieved from that class in the two libraries were markedly different from each other. Also, a <b>clone</b> group closely related to Burkholderia terricola in the Betaproteobacteria (6 <b>clones,</b> 97.0 - 99.0 %) was an almost unique dominant group (except for a <b>clone</b> in the BSD library) appearing in the CP library.|$|R
40|$|Abstract—Understanding the {{evolution}} of <b>clones</b> is important both for understanding the maintenance implications of <b>clones</b> and building a robust <b>clone</b> management system. To this end, researchers have already conducted {{a number of studies}} to analyze {{the evolution}} of <b>clones,</b> mostly focusing on Type- 1 and Type- 2 <b>clones.</b> However, although there are a significant number of Type- 3 <b>clones</b> in software systems, we know a little how they actually evolve. In this paper, we perform an exploratory study on {{the evolution of}} Type- 1, Type- 2, and Type- 3 <b>clones</b> in six open source software systems written in two different programming languages and compare the result with a previous study to better understand the evolution of Type- 3 <b>clones.</b> Our results show that although Type- 3 <b>clones</b> are more likely to change inconsistently, the absolute number of consistently changed Type- 3 <b>clone</b> classes is higher than that of Type- 1 and Type- 2. Type- 3 <b>clone</b> classes also have a lifespan similar to that of Type- 1 and Type- 2 <b>clones.</b> In addition, a considerable number of Type- 1 and Type- 2 <b>clones</b> convert into Type- 3 <b>clones</b> during evolution. Therefore, it is important to manage type- 3 <b>clones</b> properly to limit their negative impact. However, various automated <b>clone</b> management techniques such as notifying developers about <b>clone</b> changes or linked editing should be chosen carefully due to the inconsistent nature of Type- 3 <b>clones.</b> Index Terms—Type- 3 clones; <b>clone</b> genealogy; <b>clone</b> evolution I...|$|R
5|$|Dr. Jonathan Gediman (Brad Dourif) {{is one of}} five {{scientists}} who clone Ripley, extract the Queen embryo and manage the <b>cloned</b> Aliens. After the embryo is extracted, Gediman begs Wren and Perez to allow Number 8 to live. When the Aliens escape, they abduct him while he investigates their disappearance. Gediman, seen cocooned in the lair when Number 8 is brought to the Queen, is overjoyed to see the Queen give birth to a hybrid Newborn through a human reproductive system. After killing its mother, the Newborn bites into Gediman's skull and kills him.|$|E
5|$|In Legacy of the Void, Daelaam' forces uncover a Purifier robot whose {{personality}} and memories was <b>cloned</b> from Fenix. This Purifier {{thinks he is}} Fenix in a dragoon shell. Artanis is overjoyed to meet this manifestation of his old comrade and is in no rush {{to tell him the}} truth, allowing him to discover it at a pace he is comfortable with, by studying the combat logs. Eventually, upon learning more about Fenix, he decides to have his name changed to 'Talandar'. He becomes the ambassador between the Daelaam and the Purifiers, convincing them to join force. He follows Artanis in battle to reclaim their homeworld.|$|E
5|$|In Legacy of the Void, it is {{revealed}} that before Fenix's defeat at Antioch in StarCraft, his personality was <b>cloned</b> and inserted into an experimental mechanical body of ancient Purifiers. This body was locked inside a stasis vault on planet Glacius. Artanis obtained Fenix {{and with his}} help {{he was able to}} gain the Purifiers as allies against Amon. During the campaign he concludes that despite having Fenix's memories, he was a different being. Because of this he changed his name to Talandar.|$|E
40|$|Understanding the {{evolution}} of duplicated source code is necessary to investigate the phenomenon of <b>cloning.</b> To trace individual code <b>clones</b> across multiple program versions, <b>clones</b> of consecutive versions need to be mapped. Current methods detect <b>clones</b> of different versions first and then map detected <b>clones</b> retroactively. I present an approach to map individual <b>clones</b> between consecutive program versions during <b>clone</b> detection. The method is integrated into a token-based incremental <b>clone</b> detection algorithm. <b>Clones</b> are mapped according to the changes made to the source files of the program between versions. ...|$|R
30|$|<b>Clone</b> Cluster (CC) or <b>Clone</b> Class or <b>Clone</b> Set (CS): {{the union}} of all <b>clone</b> pairs that have code {{portions}} in common.|$|R
40|$|M. Tech. Information NetworksCode <b>clone</b> is a code portion in {{one source}} code {{fragment}} {{that is similar}} or identical to a code portion in another source code fragment. <b>Clones</b> in applications are inevitable within an organization's intranet. There are {{a great number of}} <b>clone</b> detection tools to help maintenance programmers to locate and refactor code <b>clones</b> where they exist. Currently <b>clone</b> detection process has not been explored fully to construct digital libraries to store <b>clones</b> for reuse and shareability. This is because most of <b>clone</b> detection techniques produce Indexed Statistical Reports as textual file showing related group of code fragments. Other techniques visualize <b>clones</b> to depict <b>clones</b> versions history as genealogies. Furthermore current techniques do not indicate the reusability and shareability worthiness of the detected <b>clones</b> in taxonomy. In this mini-dissertation a <b>Clone</b> Wrapper Detection Technique prototype is developed to detect and store commonly used structural <b>clones</b> into a Discoverable Digital <b>Clone</b> Library hosted in Fedora Repository. Stored <b>clones</b> metadata are then extracted to induce a <b>Clone</b> Family Tree Ontology of related class <b>clones</b> in a taxonomy based on Abstraction (inheritance and composition hierarchy) process...|$|R
5|$|Industrialist John Hammond and his {{bioengineering}} company, InGen, {{have created}} a theme park called Jurassic Park on Isla Nublar, a Costa Rican island, populated with <b>cloned</b> dinosaurs. After one of the dinosaur handlers is killed by a Velociraptor, the park's investors, represented by lawyer Donald Gennaro, demand that experts visit the park and certify it is safe. Gennaro invites mathematician and chaos theorist Ian Malcolm, while Hammond invites paleontologist Dr. Alan Grant and paleobotanist Dr. Ellie Sattler. Upon arrival, the group is stunned to see a live Brachiosaurus.|$|E
5|$|Jurassic Park is a 1993 American science-fiction {{adventure}} film {{directed by}} Steven Spielberg and produced by Kathleen Kennedy and Gerald R. Molen. The first installment in the Jurassic Park franchise, {{it is based}} on the 1990 novel of the same name by Michael Crichton and a screenplay written by Crichton and David Koepp. The film is set on the fictional islet of Isla Nublar, located off Central America's Pacific Coast near Costa Rica, where a billionaire philanthropist and a small team of genetic scientists have created a wildlife park of <b>cloned</b> dinosaurs.|$|E
5|$|On May 28, 2003, a Haflinger filly named Prometea {{became the}} first horse clone born. Bred by Italian scientists, she was <b>cloned</b> from a mare skin cell, and was a healthy foal. In 2008, Prometea herself {{gave birth to the}} first {{offspring}} of an equine clone, a colt named Pegaso sired by a Haflinger stallion through artificial insemination. The American Haflinger Registry does not allow horses born as a result of cloning to be registered, although as of 2010 other nations' registries have not yet entered a decision on the topic. In January 2012, Breyer Horses created a model horse of the Haflinger.|$|E
40|$|It {{has been}} broadly assumed that code <b>clones</b> are {{inherently}} bad and that eliminating <b>clones</b> by refactoring would {{solve the problems}} of code <b>clones.</b> To investigate the validity of this assumption, we developed a formal definition of <b>clone</b> evolution and built a <b>clone</b> genealogy tool that automatically extracts the history of code <b>clones</b> from a source code repository. Using our tool we extracted <b>clone</b> genealogy information for two Java open source projects and analyzed their evolution. Our study contradicts some conventional wisdom about <b>clones.</b> In particular, refactoring may not always improve software with respect to <b>clones</b> for two reasons. First, many code <b>clones</b> exist in the system for only a short time; extensive refactoring of such short-lived <b>clones</b> may not be worthwhile if they are likely diverge from one another very soon. Second, many <b>clones,</b> especially long-lived <b>clones</b> that have changed consistently with other elements in the same group, are not easily refactorable due to programming language limitations. These insights show that refactoring will not help in dealing with some types of <b>clones</b> and open up opportunities for complementary <b>clone</b> maintenance tools that target these other classes of <b>clones...</b>|$|R
40|$|As one of {{the major}} {{problems}} in software maintenance, code <b>clone,</b> a pair of duplicated code in a source code, is well known. For software improvement, it is valuable to track code <b>clone</b> which has potential risk. This is because to determine how to treat code <b>clones</b> needs deep insight for the code <b>clones.</b> However, such code <b>clone</b> tracking is hard task especially for fresh developer. To support tracking code <b>clones,</b> we have proposed code <b>clone</b> history detection method. Code <b>clone</b> history reflects various manipulations to code <b>clones</b> including introduction, deletion, or just leav-ing unchanged. It also contains information about creator or modifier of code <b>clones,</b> and time of each manipulation. This means that tracking code <b>clone</b> history reveals many results of developer’s decisions about code <b>clones.</b> Thus, we assume various clues to improve software quality can be retrieved from tracking information of code <b>clones.</b> ...|$|R
2500|$|Intersection of an {{arbitrary}} number of <b>clones</b> is again a <b>clone.</b> It is convenient to denote intersection of <b>clones</b> [...] by simple , i.e., the <b>clone</b> [...] is denoted by C1C2...C'k. Some special <b>clones</b> are introduced below: ...|$|R
