9|1308|Public
5000|$|Another {{application}} of , discovered {{in part by}} Jacob Bernoulli along with French mathematician Pierre Raymond de Montmort, is in the problem of derangements, {{also known as the}} hat <b>check</b> <b>problem.</b> Here [...] guests are invited to a party, and at the door each guest checks his hat with the butler who then places them into labelled boxes. The butler does not know the name of the guests, and so must put them into boxes selected at random. The problem of de Montmort is: what is the probability that none of the hats gets put into the right box. The answer is ...|$|E
40|$|The Non-Identity <b>Check</b> <b>problem</b> {{asks whether}} a given a quantum circuit is {{far away from}} the {{identity}} or not. It is well known that this problem is QMA-Complete [14]. In this note, it is shown that the Non-Identity <b>Check</b> <b>problem</b> remains QMA-Complete for circuits of short depth. Specifically, we prove that for constant depth quantum circuit in which each gate is given to at least Ω(log n) bits of precision, the Non-Identity <b>Check</b> <b>problem</b> is QMA-Complete. It also follows that the hardness of the problem remains for polylogarithmic depth circuit consisting of only gates from any universal gate set and for logarithmic depth circuit using some specific universal gate set. ...|$|E
40|$|For {{uncertain}} fractional-order linear time invariant (FO-LTI) {{systems with}} interval coefficients described in state space form, the robust stability <b>check</b> <b>problem</b> is solved {{for the first}} time in this paper. Both the checking procedure and the Matlab code are presented with two illustrative examples. The conservatism is shown to be small...|$|E
40|$|We {{investigate}} {{the complexity of}} the model <b>checking</b> <b>problem</b> for propositional intuitionistic logic. We show that the model <b>checking</b> <b>problem</b> for intuitionistic logic with one variable is complete for logspace-uniform AC^ 1, and for intuitionistic logic with two variables it is P-complete. For superintuitionistic logics with one variable, we obtain NC^ 1 -completeness for the model <b>checking</b> <b>problem</b> and for the tautology problem...|$|R
40|$|We {{explore the}} {{paradigm}} of artifact-centric systems from a knowledge-based perspective. We provide a semantics based on interpreted-systems to interpret a first-order temporalepistemic language with identity in a multi-agent setting. We consider the model <b>checking</b> <b>problem</b> for this language and provide abstraction results. We isolate a natural subclass of artifact-systems for which the model <b>checking</b> <b>problem</b> is decidable. We give an upper bound on {{the complexity of the}} model <b>checking</b> <b>problem.</b> ...|$|R
40|$|International audienceWe {{investigate}} the path model <b>checking</b> <b>problem</b> for the μ-calculus. Surprisingly, restricting to deterministic structures {{does not allow}} for more efficient model checking algorithm, as we prove that it can encode any instance of the standard model <b>checking</b> <b>problem</b> for the μ-calculus...|$|R
40|$|Abstract—For {{uncertain}} fractional-order linear time invariant (FO-LTI) {{systems with}} interval coefficients described in state space form, the robust stability <b>check</b> <b>problem</b> is solved {{for the first}} time in this paper. Both the checking procedure and the Matlab code are presented with two illustrative examples. The conservatism is shown to be small. Index Terms—Fractional order linear dynamic systems, robust stability, interval linear time invariant systems, interval matrix. I...|$|E
40|$|We present {{authorized}} quantum computation, {{where only}} a user with a non-cloneable quantum authorization key can perform a unitary operation created by an authenticated programmer. The {{security of our}} authorized quantum computation {{is based on the}} quantum computational complexity problem of forging the keys from an obfuscated quantum gate sequence. Under the assumption of the existence of a sufficiently-random gate shuffling algorithm, the problem is shown to be in the NQP (Non-deterministic Quantum Polynomial) -hard class by reducing it to a NQP-Complete problem, the exact non-identity <b>check</b> <b>problem.</b> Therefore, our authorized quantum computation can be computationally secure against attacks using quantum computers...|$|E
40|$|We {{present a}} new {{approach}} to eliminate array bounds checks in Java by using static analyses. Our approach is based upon a flow-sensitive intraprocedural analysis called variable constraint analysis (VCA). VCA collects constraints between locals related to array references. The array bounds <b>check</b> <b>problem</b> is formulated as solving a system of difference constraints. The analysis builds a small constraint graph for each important point in a method, and then computes the shortest-path weight of the graph. The shortest-path weights from upper bound to array index and from the index to lower bound indicates the safety of checks. Using VCA as the base analysis, we also show how two further analyses can improve the results of VCA. Array field analysis is applied on each class and provides information about some arrays stored in fields, while rectangular array analysis is an interprocedural analysis to approximate the shape of arrays, and is useful for finding rectangular (non-ragged) arrays. (Abstract shortened by UMI. ...|$|E
40|$|Abstract. We {{revisit the}} {{complexity}} of the model <b>checking</b> <b>problem</b> for formulas of linear-time temporal logic (LTL). We show that the classic PSPACE-hardness result is actually limited to a subclass of the Kripke frames, which is characterized by a simple structural condition: the model <b>checking</b> <b>problem</b> is only PSPACE-hard if there exists a strongly con-nected component with two distinct cycles. If no such component exists, the problem is in coNP. If, additionally, the model <b>checking</b> <b>problem</b> can be decomposed into a polynomial number of finite path <b>checking</b> <b>problems,</b> for example if the frame is a tree or a directed graph with constant depth, or the frame has an SCC graph of constant depth, then the complexity reduces further to NC. ...|$|R
40|$|In {{this paper}} we study the module <b>checking</b> <b>problem,</b> namely the model <b>checking</b> <b>problem</b> for open systems, as {{proposed}} by Kupferman and Vardi. We show {{how it is possible}} to reduce this problem for several temporal logics to a validity problem in deterministic (equational) ??calculus by means of partial model checking techniques. In this way, we extend the results of Kupferman and Vardi by establishing the decidability of the module <b>checking</b> <b>problem</b> for ??calculus and ECTL?, also with incomplete information. We have built a semi-automated tool for performing module checking, which is based on an existing partial model checker...|$|R
40|$|Abstract. We {{show that}} the model <b>checking</b> <b>problem</b> for intuitionistic propositional logic with one {{variable}} is complete for logspace-uniform AC 1. As basic tool we use the connection between intuitionistic logic and Heyting algebra, and investigate its complexity theoretical aspects. For superintuitionistic logics with one variable, we obtain NC 1 -completeness for the model <b>checking</b> <b>problem.</b> 1...|$|R
40|$|To {{calculate}} the sterilizing value U, and hence, the microbial lethality F in thermal {{processes of the}} canned food, starting from the knowledge of heating time B, a mathematical modeling was carried out. Therefore it’s useful to verify the desired microbial destruction (<b>check</b> <b>problem)</b> and it was obtained by reversing the mathematical approach carried out in a previous work [23] for the design problem, namely to {{calculate the}} retort heating time B, starting from a desired lethality F and, hence from the fh/U parameter. A comparison between the predicted fh/U, related to the lethality F calculated with the mathematical model of the present work and the desired Stumbo’s values of fh/U, provided the following statistical indices: a mean relative error MRE= 1. 18 ± 2. 11 %, a mean absolute error MAE= 1. 61 ± 11. 7 and a determination coefficient R 2 = 0. 991, better than ANN models. The mathematical procedure, quickly usable also with a spreadsheet, replaces the 57 Stumbo’s tables and 18512 data sets in the Ball formula method...|$|E
40|$|Benders {{decomposition}} is {{a well-known}} procedure for solving a combinatorial optimization problem by deﬁning {{it in terms of}} a master problem and a slave problem. Its effectiveness relies, among other factors, on the possibility of synthesizing Benders cuts that rule out not only one, but a large class of trial values for the master problem. In turn, for the class of problems we consider (i. e., optimization plus constraint satisfaction) the possibility of separating the slave problem into several subproblems—i. e., problems exhibiting strong intra-relationships and weak inter-relationships—can be exploited for improving searching procedures efﬁciency. The notion of separation is typically given informally, or relying on syntactical aspects. This paper formally addresses the notion of slave problem separability by giving a semantic deﬁnition and exploring it from the computational point of view. Several examples of separable problems are provided, including some proving that a semantic notion of separability is much more helpful than a syntactic one. We show that separability can be formally characterized as equivalence of logical formulae, and prove the undecidability of the separability <b>check</b> <b>problem.</b> Finally, we show how there are cases where automated tools can still be used for checking subproblem separability...|$|E
40|$|Public {{transportation}} ridership {{has grown}} significantly {{over the past}} decades and this growth {{is expected to continue}} into the future. Crowding at train and metro stations is therefore experienced more frequently, resulting in safety issues, decreased comfort levels, increased total travel times and modality shifts. On the long term large infrastructural changes can be considered to increase the capacity but for the short term more flexible and cheaper crowd management measures can be applied. Little scientific research has been dedicated to study the effects of crowd management measures or when to apply them. The aim of this thesis is to design a method to systematically select and assess effective crowd management measures to increase the safety and throughput in train and metro stations. A list of 29 crowd management measures, their field of application, possible effect, characteristics and indication of costs is composed based on literature, experts or previous applications. A framework is developed to provide a means to select crowd management measures to apply at a particular train or metro station. This framework includes an applicability <b>check,</b> <b>problem</b> analysis, measure selection, assessment method and evaluation. The framework is applied on a fictional metro station, with many similarities to the Amsterdam metro. The measures that are selected using the framework {{have a positive effect on}} the safety and throughput, as indicated by the level of service and travel times. The framework is believed to help guide towards suitable measures in the multi-disciplinary decision making process...|$|E
50|$|The {{computational}} {{complexity of}} the model <b>checking</b> <b>problem</b> is in P in all cases.|$|R
40|$|We show strict lower bounds for the {{complexity}} of several model <b>checking</b> <b>problems</b> for BPA (Basic Process Algebra). Model checking BPA with Hennessy-Milner Logic is PSPACE-hard, while model checking BPA with the (alternation-free) modal µ-calculus is EXPTIME-hard. Model checking BPA with LTL is also EXPTIME- hard. By combining these results with already established upper bounds, {{it follows that the}} model <b>checking</b> <b>problems</b> are PSPACE-complete and EXPTIME-complete, respectively...|$|R
40|$|We {{investigate}} a model <b>checking</b> <b>problem</b> for {{the logic of}} common knowledge and fixpoints µPLC n in well-structured multiagent systems with perfect recall. In this paper we show that a perfect recall synchronous environment over a well-structured environment forms a well-structured environment provided with a special PRS-order. This implies that the model <b>checking</b> <b>problem</b> for the disjunctive fragment of µPLC n is decidable. </p...|$|R
40|$|AbstractThe {{notions of}} serializability, linearizability, and {{sequential}} consistency {{are used in}} the specification of concurrent systems. We show that the model <b>checking</b> <b>problem</b> for each of these properties can be cast in terms of the containment of one regular language in another regular language shuffled using a semicommutative alphabet. The three model <b>checking</b> <b>problems</b> are shown to be, respectively, in Pspace, in Expspace, and undecidable...|$|R
40|$|AbstractWe show strict lower bounds for the {{complexity}} of several model <b>checking</b> <b>problems</b> for BPA (Basic Process Algebra). Model checking BPA with Hennessy-Milner Logic is PSPACE-hard, while model checking BPA with the (alternation-free) modal μ-calculus is EXPTIME-hard. Model checking BPA with LTL is also EXPTIME-hard. By combining these results with already established upper bounds, {{it follows that the}} model <b>checking</b> <b>problems</b> are PSPACE-complete and EXPTIME-complete, respectively...|$|R
40|$|Games {{given by}} {{transition}} graphs of pushdown processes are considered. It is shown {{that if there}} is a winning strategy in such a game then there is a winning strategy which is realized by a pushdown process. This fact turns out to be connected with the model <b>checking</b> <b>problem</b> for pushdown automata and the propositional µ-calculus. It is show that this model <b>checking</b> <b>problem</b> is DEXPTIME-complete...|$|R
40|$|In this paper, we {{introduce}} a lightweight dynamic epistemic logical framework for automated planning under initial uncertainty. We reduce plan verification and conformant planning to model <b>checking</b> <b>problems</b> of our logic. We {{show that the}} model <b>checking</b> <b>problem</b> of the iteration-free fragment is PSPACE-complete. By using two non-standard (but equivalent) semantics, we give novel model checking algorithms to the full language and the iteration-free language...|$|R
40|$|Abstract. Developing a good {{formalism}} and {{an efficient}} decision procedure for the instance <b>checking</b> <b>problem</b> is desirable for practical application of description logics. The data {{complexity of the}} instance <b>checking</b> <b>problem</b> is coNP-complete even for Horn knowledge bases in the basic description logic ALC. In this paper, we present and study weakenings with PTime data complexity of the instance <b>checking</b> <b>problem</b> for Horn knowledge bases in regular description logics. We also study cases when the weakenings are an exact approximation. In contrast to previous related work of other authors, our approach deals with the case when the constructor ∀ is allowed in premises of program clauses that are used as terminological axioms. ...|$|R
40|$|The {{complexity}} of model checking branching and linear time temporal logics over Kripke structures has been addressed in e. g. [SC 85, CES 86]. In {{terms of the}} size of the Kripke model and the length of the formula, they show that the model <b>checking</b> <b>problem</b> is solvable in polynomial time for CTL and NP-complete for L(F). The model <b>checking</b> <b>problem</b> can be generalised by allowing more succinct descriptions of systems than Kripke structures. We investigate the {{complexity of}} the model <b>checking</b> <b>problem</b> when the instances of the problem consist of a formula and a description of a system whose state space is at most exponentially larger than the description. Based on Turing machines, we define compact systems as a general formalisation of such system descriptions. Examples of such compact systems are K-bounded Petri nets and synchronised automata, and in these cases the well-known algorithms presented in [SC 85, CES 86] would require exponential space in term of the sizes of the system descriptions and the formulas; we present polynomial space upper bounds for the model <b>checking</b> <b>problem</b> over compact systems and the logics CTL and L(X; U;S). As an example of an application of our general results we show that the model <b>checking</b> <b>problems</b> of both the branching time temporal logic CTL and the linear time temporal logics L(F) and L(X;U;S) over K-bounded Petri nets are PSPACE-complete...|$|R
50|$|PAL is decidable, its model <b>checking</b> <b>problem</b> is {{solvable}} in {{polynomial time}} and its satisfiability problem is PSPACE-complete.|$|R
40|$|We {{show that}} the model <b>checking</b> <b>problem</b> for intuitionistic propositional logic with one {{variable}} is complete for logspace-uniform AC 1. As basic tool we use the connection between intuitionistic logic and Heyting algebra, and investigate its complexity theoretical aspects. For superintuitionistic logics with one variable, we obtain NC 1 -completeness for the model <b>checking</b> <b>problem.</b> Comment: A preliminary version of this work was presented at STACS 2011. 19 pages, 3 figure...|$|R
40|$|In {{this paper}} we {{investigate}} {{the existence of}} model-equivalence reduction between NP-logic systems which are logic systems with model existence problem in NP. It is shown that among all NP-systems with model <b>checking</b> <b>problem</b> in NP, the existentially quantified propositional logic (∃ PF) is maximal with respect to poly-time model-equivalent reduction. However, ∃ PF seems not a maximal NP-system in general because there exits a NP-system with model <b>checking</b> <b>problem</b> D^P-complete...|$|R
40|$|Abstract. We {{show that}} the {{vectorial}} µ-calculus model <b>checking</b> <b>problem</b> over arbitrary graphs reduces to the vectorial, existential µ-calculus model <b>checking</b> <b>problem</b> over S 5 graphs. We also draw some consequences of this fact. Moreover, we give a proof that satisfiability of µ-calculus in S 5 is NP-complete, and by using S 5 graphs we give a new proof that the satisfiability problem of the existential µ-calculus is also NP-complete. ...|$|R
40|$|In this paper, we {{investigate}} the finite satisfiability and model <b>checking</b> <b>problems</b> for the logic D of the sub-interval relation under the homogeneity assumption, that constrains a proposition letter {{to hold over}} an interval {{if and only if}} it holds over all its points. First, we prove that the satisfiability problem for D, over finite linear orders, is PSPACE-complete; then, we show that its model <b>checking</b> <b>problem,</b> over finite Kripke structures, is PSPACE-complete as wel...|$|R
40|$|We {{study the}} {{complexity}} of the model <b>checking</b> <b>problem,</b> for fixed model A, over certain fragments L of first-order logic. These are sometimes known as the expression complexities of L. We obtain various complexity classification theorems for these logics L as each ranges over models A, {{in the spirit of the}} dichotomy conjecture for the Constraint Satisfaction Problem – which itself may be seen as the model <b>checking</b> <b>problem</b> for existential conjunctive positive first-order logic. ...|$|R
40|$|Abstract. For {{concurrent}} probabilistic programs having process-level nondeterminism, it {{is often}} necessary to restrict the class of schedulers that resolve nondeterminism to obtain sound and precise model checking algorithms. In this paper, we introduce two classes of schedulers called view consistent and locally Markovian schedulers and consider the model <b>checking</b> <b>problem</b> of concurrent, probabilistic programs under these alternate semantics. Specifically, given a Büchi automaton Spec, a threshold x ∈ [0, 1], and a concurrent program P, the model <b>checking</b> <b>problem</b> asks if the measure of computations of P that satisfy Spec is at least x, under all view consistent (or locally Markovian) schedulers. We give precise complexity results for the model <b>checking</b> <b>problem</b> (for different classes of Büchi automata specifications) and contrast it with the complexity under the standard semantics that considers all schedulers. ...|$|R
40|$|A pushdown {{system is}} a graph G(P) of {{configurations}} of a pushdown automaton P. The model <b>checking</b> <b>problem</b> for a logic L is: given a pushdown automaton P and a formula # # L decide if # holds in the vertex of G(P) which is the initial configuration of P. Computation Tree Logic (CTL) and its fragment EF are considered. The model <b>checking</b> <b>problems</b> for CTL and EF are shown to be EXPTIME-complete and PSPACE-complete, respectively. ...|$|R
40|$|We {{prove that}} the model {{checking}} and the satisfiability problem of both Dynamic Logic of Propositional Assignments DL-PA and Coalition Logic of Propositional Control and Delegation DCL-PC are in PSPACE. We explain why the proof of EXPTIME-hardness of the model <b>checking</b> <b>problem</b> of DL-PA presented in (Balbiani, Herzig, Troquard, 2013) is false. We also explain why the proof of membership in PSPACE of the model <b>checking</b> <b>problem</b> of DCL-PC given in (van der Hoek, Walther, Wooldridge, 2010) is wrong...|$|R
40|$|In {{this paper}} a new {{approach}} to the verification of SDL-specifications is presented. The key idea of the method consists of associating a compositional Petri net semantics to SDL-specifications. A temporal logic is defined which allows the formulation of relevant properties of SDLspecifications. The model <b>checking</b> <b>problem</b> for SDL-specifications according to this logic is then reduced to the model <b>checking</b> <b>problem</b> of Petri nets and an appropriate temporal logic. This approach has been implemented in the MOBY-tool...|$|R
40|$|The logic {{considered}} {{in this paper}} is FLC, fixed point logic with chop. It {{is an extension of}} modal -calculus L that is capable of defining non-regular properties which makes it interesting for verification purposes. Its model <b>checking</b> <b>problem</b> over finite transition systems is PSPACE-hard. We define games that characterise FLC's model <b>checking</b> <b>problem</b> over arbitrary transition systems. Over finite transition systems they {{can be used as a}} basis of a local model checker for FLC. I. e...|$|R
40|$|We {{propose a}} method based on {{unrolling}} the inductive definition of binary number multiplication to verify gate-level implementations of multipliers. The induction steps successively {{reduce the size}} of the multiplier under verification. Through induction, the verification of an n-bit multiplier is decomposed into n equivalence <b>checking</b> <b>problems.</b> The resulting equivalence <b>checking</b> <b>problems</b> could be significantly sped up by simple structural analysis. This method could be generalized to the verification of more general arithmetic circuits and the equivalence checking of complex datapath. 1...|$|R
