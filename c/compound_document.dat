138|154|Public
50|$|<b>Compound</b> <b>Document</b> Format (CDF) {{is a set}} of W3C {{candidate}} standards describing electronic <b>compound</b> <b>document</b> file formats {{that contains}} multiple formats, such as SVG, XHTML, SMIL and XForms.The core standards are the Web Integration <b>Compound</b> <b>Document</b> and the <b>Compound</b> <b>Document</b> by Reference Framework (CDR). As of August 19, 2010, the <b>Compound</b> <b>Document</b> Format working group has been closed, and W3C's development of the standard discontinued.|$|E
50|$|Web Integration <b>Compound</b> <b>Document</b> (WICD) is a W3C {{candidate}} {{standard of}} the <b>Compound</b> <b>Document</b> Format working group, {{based on the}} idea of integrating existing markup language formats in preference to inventing new markup.|$|E
5000|$|... #Caption: <b>Compound</b> <b>document</b> {{displayed}} on Xerox 8010 Star system ...|$|E
40|$|Recent {{developments}} in office productivity suites {{make it easier}} for users to publish rich <b>compound</b> <b>documents</b> on the Web. <b>Compound</b> <b>documents</b> appear as a single unit of information but may contain data generated by different applications, such as text, images, and spreadsheets. Given the popularity enjoyed by these office suites and the pervasiveness of the Web as a publication medium, we expect that in the near future these <b>compound</b> <b>documents</b> will become an increasing proportion of the Web's content. As a result, the content handled by servers, proxies, and browsers may change considerably from what is currently observed. Furthermore, these <b>compound</b> <b>documents</b> are currently treated as opaque byte streams, but future Web infrastructure may wish to understand their internal structure to provide higher-quality service...|$|R
40|$|Recent {{developments}} in office productivity suites {{make it easier}} for users to publish rich <b>compound</b> <b>documents</b> on the Web. <b>Compound</b> <b>documents</b> appear as a single unit of information but may contain data generated by different applications, such as text, images, and spreadsheets. Given the popularity enjoyed by these office suites and the pervasiveness of the Web as a publication medium, we expect that in the near future these <b>compound</b> <b>documents</b> will become an increasing proportion of the Web's content. As a result, the content handled by servers, proxies, and browsers may change considerably from what is currently observed. Furthermore, these <b>compound</b> <b>documents</b> are currently treated as opaque byte streams, but future Web infrastructure may wish to understand their internal structure to provide higher-quality service. In order to guide the design of this future Web infrastructure, we characterize <b>compound</b> <b>documents</b> currently found on the Web. Previous studies of Web content either ignored these document types altogether or did not consider their internal structure. We study <b>compound</b> <b>documents</b> originated by the three most popular applications from the Microsoft Office suite: Word, Excel, and PowerPoint. Our study encompasses over 12, 500 documents retrieved from 935 different Web sites. Our main conclusions are: <b>Compound</b> <b>documents</b> are in general much larger than current HTML documents. For large documents, embedded objects and images make up {{a large part of the}} documents' size. For small documents, XML format produces much larger documents than OLE. For large documents, there is little difference. Compression considerably reduces the size of documents in both formats...|$|R
5000|$|XML and XSL are {{encapsulation}} formats {{used for}} <b>compound</b> <b>documents</b> {{of all kinds}} ...|$|R
50|$|Compound File Binary Format (CFBF), {{also called}} Compound File, <b>Compound</b> <b>Document</b> format, or Composite Document File V2 Document (CDF), is a <b>compound</b> <b>document</b> file format for storing {{numerous}} files and streams {{within a single}} file on a disk. CFBF is developed by Microsoft and is an implementation of Microsoft COM Structured Storage.|$|E
5000|$|The {{following}} applications use the OLE Structured Storage (<b>Compound</b> <b>Document</b> Format) ...|$|E
5000|$|... {{placeholder}} in {{the text}} for another unspecified object, for example in a <b>compound</b> <b>document.</b>|$|E
40|$|Information Resources on the Web In recent years, many {{algorithms}} for the Web {{have been}} developed that work with information units distinct from individual web pages. These include segments of web pages or aggregation of web pages into web communities. Using these logical information units {{has been shown to}} improve the performance of many web algorithms. In this paper, we focus on a type of logical information units called <b>compound</b> <b>documents.</b> We argue that the ability to identify <b>compound</b> <b>documents</b> can improve information retrieval, automatic metadata generation, and navigation on the Web. We propose a unified framework for identifying the boundaries of <b>compound</b> <b>documents,</b> which combines both structural and content features of constituent web pages. The framework is based on a combination of machine learning and clustering algorithms, with the former algorithm supervising the latter one. Experiments on a collection of educational web sites show that our approach can reliably identify most of the <b>compound</b> <b>documents</b> on these sites...|$|R
50|$|HP {{described}} the OMF {{as a means}} of binding applications and data together to form “objects”, such as <b>compound</b> <b>documents.</b>|$|R
50|$|OpenDoc was a {{multi-platform}} software componentry framework {{standard for}} <b>compound</b> <b>documents,</b> intended {{as an alternative}} to Microsoft's Object Linking and Embedding (OLE).|$|R
5000|$|POIFS - Java {{implementation}} of the OLE 2 <b>Compound</b> <b>Document</b> format, part of Apache POI.|$|E
50|$|In April 2005 {{he joined}} the <b>Compound</b> <b>Document</b> formats (CDF) Working Group, became {{co-chair}} of the W3C Hypertext Coordination Group, and also took on managerial responsibility for HTML, CSS, SMIL, Timed Text, MathML, and VoiceXML.|$|E
5000|$|<b>Compound</b> <b>document</b> {{technologies}} are commonly utilized {{on top of}} a software componentry framework, but the idea of software componentry includes several other concepts apart from compound documents, and software components alone do not enable compound documents. Well-known technologies for compound documents include: ...|$|E
40|$|A cross media {{analysis}} scheme for the semantic interpretation of <b>compound</b> <b>documents</b> is presented. The proposed scheme {{is essentially a}} late-fusion mechanism that operates on top of single-media extractors output. Evidence extracted from heterogeneous sources are used to trigger probabilistic inference on a bayesian network that encodes domain knowledge and quantifies causality. Experiments performed {{on a set of}} 54 <b>compound</b> <b>documents</b> showed that the proposed scheme is able to exploit the existing cross media relations and achieve performance improvements. ...|$|R
50|$|HP {{described}} NewWave Write as a basic-to-intermediate level “{{what you}} see is what you get” (WYSIWIG) word processor with support for <b>compound</b> <b>documents.</b>|$|R
5000|$|... "The Future of the Web {{is not the}} Past of Windows" [...] W3C Position Paper: Workshop on Web Applications and <b>Compound</b> <b>Documents.</b> June 2004.|$|R
5000|$|MO:DCA(Mixed Object:Document Content Architecture) is an IBM <b>compound</b> <b>document</b> {{format for}} text and {{graphics}} {{elements in a}} document. The 'Mixed Object' refers {{to the fact that}} an MO:DCA file can contain multiple types of objects, including text, images, vector graphics, and barcodes.|$|E
50|$|OS/2 also {{includes}} a radical advancement in application development with <b>compound</b> <b>document</b> technology called OpenDoc, which was developed with Apple. OpenDoc proved interesting as a technology, but was not widely used or accepted by users or developers. OpenDoc is also no longer being developed.|$|E
50|$|In computing, a <b>compound</b> <b>{{document}}</b> is {{a document}} type typically produced using word processing software, {{and is a}} regular text document intermingled with non-text elements such as spreadsheets, pictures, digital videos, digital audio, and other multimedia features. It {{can also be used}} to collect several documents into one.|$|E
40|$|In {{this paper}} a cross media {{analysis}} scheme for the semantic interpretation of <b>compound</b> <b>documents</b> is presented. It {{is essentially a}} late-fusion mechanism that operates on top of single-media extractors output and it’s main novelty relies on using the evidence extracted from heterogeneous media sources to perform probabilistic inference on a bayesian network that incorporates knowledge about the domain. Experiments performed {{on a set of}} 54 <b>compound</b> <b>documents</b> showed that the proposed scheme is able to exploit the existing cross media relations and achieve performance improvements. ...|$|R
40|$|Web {{applications}} are typically proprietary and incompatible technologies. We propose a solution towards device neutral interoperable applications {{based on a}} common model for XML document presentation. The proposed model features a stable core that enables stable browser implementations and a highly extensible upper layer to support new functionality without browser modifications. We summarize the problems of <b>compound</b> <b>documents</b> which are necessary for such a presentation model by separating their integration requirements according to their native support by a browser or not. We conclude by future directions and standardization requirements for generic, device independent applications and for a generic integration model for <b>compound</b> <b>documents.</b> ...|$|R
5000|$|Bonobo is an {{obsolete}} component {{framework for}} the GNOME free desktop environment. Bonobo is designed to create reusable software components and <b>compound</b> <b>documents.</b> Through its development history it resembles Microsoft's OLE technology and is GNOME's equivalent of KDE's KParts [...]|$|R
5000|$|POIFS (Poor Obfuscation Implementation File System) - This {{component}} reads {{and writes}} Microsoft's OLE 2 <b>Compound</b> <b>document</b> format. Since all Microsoft Office files are OLE 2 files, this component {{is the basic}} building block {{of all the other}} POI elements. POIFS can therefore be used to read a wider variety of files, beyond those whose explicit decoders are already written in POI.|$|E
50|$|ODA {{defines a}} <b>compound</b> <b>document</b> format that can contain raw text, raster images and vector graphics. In the {{original}} release {{the difference between}} this standard {{and others like it}} is that the graphics structures were exclusively defined as CCITT raster image and Computer Graphics Metafile (CGM - ISO 8632). This was to limit the problem of having word processor and desktop publisher software be required to interpret all known graphics formats.|$|E
50|$|In October 2007, the OpenDocument Foundation {{controversially}} switched {{its support}} from OpenDocument to the World Wide Web Consortium (W3C)'s <b>Compound</b> <b>Document</b> Format (CDF). The case was unfortunate since {{the name of}} the Foundation suggested for the uninvolved reader that they were deeply connected to the format, or originated it, and the change meant an important supporter to get dissatisfied with the results; while in reality it only meant that the remaining few persons behind the Foundation had changed their minds.|$|E
50|$|Initially {{designed}} for <b>compound</b> <b>documents</b> based on COM Structured Storage, the technology allows one single hosting program like Office Binder to contain unlimited type of documents. The server program that provides an ActiveX document {{can be an}} EXE or a DLL server.|$|R
50|$|It {{also appears}} that OpenDoc {{was a victim}} of an {{oversold}} concept, that of <b>compound</b> <b>documents.</b> Only a few specific examples are common, for instance most word processors and page layout programs include the ability to include graphics, and spreadsheets are expected to handle charts.|$|R
40|$|The e 1 ective classi!cation {{of image}} {{contents}} {{allows us to}} adopt strategies that can meet the increasing demand for quality, speed {{and ease of use}} in imaging applications. We report here on our experience in the use of CART classi!ers for the classi!cation of images indexed by low-level perceptual features such as color, texture, and shape. The problem addressed is the complex matter of distinguishing among photographs, graphics, texts, and <b>compound</b> <b>documents.</b> To cope with the great variety of <b>compound</b> <b>documents</b> we have designed a hierarchical classi!cation strategy which!rst classi!es images as compound or non-compound by verifying the homogeneity of the sub-images in terms of low-level features. Non-compound images are then classi!ed as photographs, graphics, or texts. The results are reported an...|$|R
5000|$|Oliver started POI in April 2001 {{while working}} on a {{short-term}} contract project when he became frustrated that Actuate had purchased the previous proprietary API he had used and raised the price to $10,000. He contacted his local Java User Group and found Marc Johnson and the two ported Microsoft <b>Compound</b> <b>Document</b> Format to Java. Originally they intended to donate this to the Apache Cocoon project, but later {{it was decided that}} POI should be its own top level project.|$|E
5000|$|Bookshelf 1.0 used a {{proprietary}} hypertext engine that Microsoft acquired when it bought the company Cytation in 1986. Also used for Microsoft Stat Pack and Microsoft Small Business Consultant, {{it was a}} Terminate and Stay Resident (TSR) program that ran alongside a dominant program, unbeknownst to the dominant program. Like Apple's similar Hypercard reader, Bookshelf engine's files used a single <b>compound</b> <b>document,</b> containing large numbers of subdocuments ("cards" [...] or [...] "articles"). They both differ from current browsers which normally treat each [...] "page" [...] or [...] "article" [...] as a separate file.|$|E
50|$|Another {{problem was}} the fact that each part saved its data within Bento (the former name of an OpenDoc <b>compound</b> <b>document</b> file format) in its own {{internal}} binary format, and it was very common to find one component could not open a document created by another, even though the internal data represented similar objects (spreadsheet data for instance). OpenDoc attempted to solve this problem by allowing developers to store multiple formats to represent the same document object. For instance, it was both possible and encouraged to store a common format like JPEG along with editable binary format, but in practice few developers followed this recommendation. This problem was not unique to OpenDoc, and in fact was also experienced by the Microsoft equivalent, Object Linking and Embedding (OLE). Indeed, many years later, XML documents which attempt to perform embedding of other XML formats also encounter similar issues.|$|E
40|$|This paper {{presents}} HotDoc, {{a framework}} for the dev elopment of editors for <b>compound</b> <b>documents.</b> HotDoc allows the construction of exible documents consisting of dynamic parts. HotDoc introduces {{a new type of}} document. A document is not only a static sequence of text, but an interface classes of the framework. HotDoc is implemented in VisualWorks Smalltalk...|$|R
5000|$|In {{presentation}} programs, <b>compound</b> <b>documents,</b> and web pages, WYSIWYG {{means the}} display precisely represents {{the appearance of}} the page displayed to the end-user, but does not necessarily reflect how the page will be printed unless the printer is specifically matched to the editing program, as it was with the Xerox Star and early versions of the Apple Macintosh.|$|R
40|$|Building {{environments that}} use visual {{techniques}} (visual environments) is still expensive in labour. In this paper we present an object-oriented framework for <b>compound</b> <b>documents,</b> called HotDoc, {{that can be}} used for building visual environments rapidly. We give an example by describing a user interface for an extended spreadsheet environment called Simple. We focus on spatial composition control which is supported in HotDoc by layout policies...|$|R
