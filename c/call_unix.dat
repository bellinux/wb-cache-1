2|63|Public
50|$|SystemVerilog code can <b>call</b> <b>Unix</b> {{functions}} {{directly by}} importing them, with {{no need for}} a wrapper.|$|E
5000|$|... ncu (networked <b>call</b> <b>unix)</b> was {{the usual}} network remote login procedure, {{analogous}} to TCP/IP's telnet or rlogin protocols. Like rx, it was a netman client (for passing standard I/O to the remote machine), a netman server (for receiving standard I/O on the remote machine), a parent process for hosting the remote login procedure, and a DNIX handler (so that remote programs believed themselves {{to be connected to}} tty devices).|$|E
50|$|In 1984, Stratus added a UNIX System V {{implementation}} <b>called</b> <b>Unix</b> System Facilities (USF) to VOS, integrating Unix and VOS at the kernel level.|$|R
5000|$|... #Caption: The multi-volume programmer's manual to a 1975 {{operating}} system <b>called</b> CB <b>UNIX</b> ...|$|R
5000|$|Being {{based upon}} Apple's {{compatibility}} layer, A/UX can run Macintosh System 7.0.1, Unix, and [...] "hybrid" [...] applications. A hybrid application uses both Macintosh and Unix system functions: for example, a Macintosh application which <b>calls</b> <b>Unix</b> system functions, or a <b>Unix</b> application which <b>calls</b> Macintosh Toolbox (e.g. QuickDraw) functions. The compatibility layer uses some existing Toolbox {{functions in the}} computer’s ROM, while other function calls are translated into native <b>Unix</b> system <b>calls.</b>|$|R
50|$|A {{modified}} version of System V.2 <b>Unix</b> <b>called</b> MV/UX hosted under AOS/VS was also available. A {{modified version}} of System V <b>Unix</b> <b>called</b> DG/UX was made for the Eclipse MV line and later the 88K and x86 AViiON machines.|$|R
5000|$|Bell Labs {{left the}} MULTICS project in 1969, [...] "Over time, hope was {{replaced}} by frustration as the group effort initially failed to produce an economically useful system." [...] Continued participation would drive up project support costs. So researchers turned to other development efforts. A system program language B based on BCPL concepts was written by D. Ritche and K. Thompson. Ritche created a boot-strapping compiler for B and wrote UNICS operating system for a PDP-7 in B. (UNICS became <b>called</b> <b>UNIX.)</b> ...|$|R
5000|$|The {{behavior}} of a trusted system is often characterized {{in terms of a}} mathematical model - which may be more or less rigorous, depending upon applicable operational and administrative constraints - that {{takes the form of a}} finite state machine (FSM) with state criteria; state transition constraints; a set of [...] "operations" [...] that correspond to state transitions (usually, but not necessarily, one); and a descriptive top-level specification, or DTLS, entailing a user-perceptible interface (e.g., an API, a set of system <b>calls</b> <b>UNIX</b> or system exits mainframe), each element of which engenders one or more model operations.|$|R
5000|$|Awk {{uses the}} empty string: two {{expressions}} adjacent {{to each other}} are concatenated. This is <b>called</b> juxtaposition. <b>Unix</b> shells have a similar syntax. Rexx uses this syntax for concatenation including an intervening space.|$|R
5000|$|In Unix, the loader is the handler for {{the system}} <b>call</b> [...] The <b>Unix</b> loader's tasks include: ...|$|R
50|$|The Python for S60 also <b>called</b> PyS60 (<b>Unix</b> name), was Nokia’s port of {{the general}} Python {{programming}} language to its S60 software platform, originally based on Python 2.2.2 from 2002.The latest final version, PyS60-2.0.0, released on 11 February 2010 updated the python core to version 2.5.4.|$|R
40|$|In this {{document}} we describe and discuss a solution, <b>called</b> <b>UNIX</b> Access Table Protection (UATP), {{to the problem}} of providing a secure environment for persistent object types with fine grained protection on a UNIX system. UATP requires no modifications to the UNIX kernel. Users on UNIX have discretionary access control over their directories and files. By using these controls in a particular way, this paper shows a way in which a hierarchy of protection domains can be set up to enable object methods and type instances to be managed securley and to be protected from unauthorised use. The document also describes how a particular object type, UATP - kernel, which executes in these protection domains (in the same way as all other objects) can be used to provide fine grained protection for all other objects which are installed and running in the manner described here...|$|R
5000|$|Micronetics Design Corporation with {{a product}} line <b>called</b> MSM for <b>UNIX</b> and Intel PC {{platforms}} (later ported to IBM's VM operating system, VAX-VMS platforms and Alpha-VMS platforms).|$|R
50|$|Moria is a roguelike {{computer}} game based heavily on J. R. R. Tolkien's novel The Lord of the Rings. The game's {{objective is to}} kill a Balrog, presumably Durin's Bane, deep within the Mines of Moria. A later port of Moria <b>called</b> Umoria (<b>UNIX</b> Moria) inspired the Angband roguelike game. This game influenced the preliminary design of Blizzard Entertainment's Diablo.|$|R
40|$|In {{this paper}} I {{investigate}} Capsicum, an extension to UNIX that introduces a new security model {{on top of}} existing UNIX architecture. This model consists of several new security primitives and system calls that replace existing UNIX functionality. I focus on two aspects of Capsicum: performance and usability. For performance, I compare the performance of Capsicum system <b>calls</b> to corresponding <b>UNIX</b> <b>calls</b> and analyze these differences. I also implement a small file-hosting server that makes use of Capsicum’s sandboxing library, {{in order to determine}} the feasibility of writing new applications using Capsicum and modifying existing applications to use Capsicum. ...|$|R
50|$|Since 2001, the Macintosh {{operating}} system {{is based on}} a variation of <b>Unix</b> <b>called</b> Darwin. On these computers, users can access a Unix-like command-line interface called Terminal found in the Applications Utilities folder. This terminal uses bash by default.|$|R
5000|$|A {{problem that}} plagued Unix {{in this period}} was the {{multitude}} of implementations, based on either System V, BSD, or what Poul-Henning Kamp later described as a [...] "more or less competently executed" [...] combination of the two, usually with home-grown extensions to the base systems from AT&T or Berkeley. Xenix was effectively a third lineage, being based on the earlier System III. The rivalry between vendors was <b>called</b> the <b>Unix</b> wars; customers soon demanded standardization.|$|R
40|$|The {{incredible}} {{opportunity to}} attend Caltech has {{led me to}} many different people and events, some outstanding and memorable and others just memorable. I consider myself extremely fortunate to have gotten the opportunity to study at Caltech with such incredibly intelligent and gifted professors and fellow students. My advisor, Prof. Bill Iwan, has helped direct me down the path toward work that advances the design of structures subjected to seismic events. Hopefully, in part through our efforts, buildings will be more safe for occupants during earthquakes. The technical aspects of computer modeling and nonlinear time history analyses {{could not have been}} successful without the advisement from Prof. John Hall who is always patient and extremely generous with his time. Without the support and encouragement of all other graduate students in Thomas over the years, I definitely would not be writing this today. When I arrived at Caltech, two senior level graduate students, Brad Aagaard and Anders Carlson, were extremely generous with their time showing me the ropes of the computer lab and these things <b>called</b> <b>Unix</b> and Matlab. To all the current CE students, the ”colorful banter ” i...|$|R
5000|$|In {{the early}} 1990s DEC {{produced}} their own flavor of <b>UNIX</b> <b>called</b> ULTRIX which supported TCP/IP. Almost as a skunk works project, they produced a layered product for VMS called UCX (Ultrix Communications Extensions) which later evolved into [...] "TCPIP Services for OpenVMS".|$|R
50|$|The term Research Unix first {{appeared}} in the Bell System Technical Journal (Vol. 57, No. 6, Pt. 2 Jul/Aug 1978) to distinguish it from other versions internal to Bell Labs (such as PWB/UNIX and MERT) whose code-base had diverged from the primary CSRC version. However, that term was little-used until Version 8 Unix, but has been retroactively applied to earlier versions as well. Prior to V8, the operating system was most commonly <b>called</b> simply <b>UNIX</b> (in caps) or the UNIX Time-Sharing System.|$|R
5000|$|The SRM console was {{initially}} designed to boot DEC's OSF/1 AXP (later <b>called</b> Digital <b>UNIX</b> and finally Tru64 UNIX) and OpenVMS operating systems, although various other operating systems (such as Linux, NetBSD, OpenBSD, and FreeBSD, for example) were also written to boot from the SRM console. The third proprietary operating system published for the Alpha AXP architecture - Microsoft Windows NT - did not boot from SRM; instead, Windows booted from the ARC (multi platform [...] "Advanced RISC Computing") boot firmware. (ARC {{is also known}} as AlphaBIOS.) ...|$|R
5000|$|The {{bulk of the}} {{processing}} is delegated to another procedure, KERMIT_SUPPORT, {{which can be found}} in the same module. This is called indirectly via the operating system CTM_JS_CALL, similar to an exec (...) <b>call</b> on <b>Unix</b> systems; this ensures clean failure handling and tidying up of any resources in the event of a fatal error. The PDESC keyword constructs a [...] "procedure descriptor": essentially it treats KERMIT_SUPPORT as a first-class function which can be passed as an argument to another function, making CTM_JS_CALL a higher-order function that calls its supplied argument with appropriate error handling.|$|R
5000|$|... sync is a {{standard}} system <b>call</b> in the <b>Unix</b> operating system, which commits to disk all data in the kernel filesystem buffers, i.e., data which has been scheduled for writing via low-level I/O system calls. Note that higher-level I/O layers such as stdio may maintain separate buffers of their own.|$|R
5000|$|In 1982 {{the port}} of Franz Lisp to the Motorola 68000 {{processor}} was started. In particular, it was ported to a prototype Sun-1 made by Sun Microsystems, which ran a variant of Berkeley <b>UNIX</b> <b>called</b> SunOS. In 1986, at Purdue University, Franz Lisp was ported to the CCI Power 6/32 platform (code named [...] "Tahoe").|$|R
50|$|A server {{implementation}} of 9P for <b>Unix,</b> <b>called</b> u9fs, {{is included in}} the Plan 9 distribution. A 9P OS X client kernel extension is provided by Mac9P. A kernel client driver for Linux is part of the v9fs project. 9P and its derivatives have also found application in embedded environments, such as the Styx on a Brick project.|$|R
50|$|The Berkeley Software Distribution (BSD) {{part of the}} kernel {{provides}} the POSIX application programming interface (API, BSD system <b>calls),</b> the <b>Unix</b> process model atop Mach tasks, basic security policies, user and group ids, permissions, the networking protocols, the virtual file system code (including a filesystem independent journaling layer), several local file systems such as HFS/HFS+, the Network File System (NFS) client and server, cryptographic framework, UNIX System V inter-process communication (IPC), audit subsystem, mandatory access control, {{and some of the}} locking primitives. The BSD code present in XNU came from the FreeBSD kernel. Although much of it has been significantly modified, code sharing still occurs between Apple and the FreeBSD Project.|$|R
50|$|The NCE/UFRJ {{also offered}} {{technical}} courses on OS {{design and implementation}} to local computer companies, some of which later produced their own proprietary UNIX systems. In fact, these Brazilian companies first created an organization of companies interested in <b>UNIX</b> (<b>called</b> API) and tried to license UNIX from AT&T. Their attempts were frustrated {{at the end of}} 1986, when AT&T canceled negotiations with API.|$|R
5000|$|In the VMS {{operating}} system, {{the term}} [...] "root directory" [...] {{is used to}} refer to the directory in which all the user's files are stored, which is what <b>Unix</b> <b>calls</b> the [...] "home directory". The equivalent of a MS-DOS per-disk [...] "root directory" [...] in VMS is referred to as a [...] "Master File Directory" [...] and is specified as 000000 ...|$|R
50|$|Seventh Edition <b>Unix,</b> also <b>called</b> Version 7 <b>Unix,</b> Version 7 or just V7, was an {{important}} early release of the Unix operating system. V7, released in 1979, was the last Bell Laboratories release to see widespread distribution before the commercialization of Unix by AT&T Corporation in the early 1980s. V7 was originally developed for Digital Equipment Corporation's PDP-11 minicomputers and was later ported to other platforms.|$|R
50|$|System V, known inside Bell Labs as Unix 5.0, succeeded AT&T's {{previous}} commercial <b>Unix</b> <b>called</b> System III in January, 1983.There {{was never}} an external release of Unix 4.0, {{which would have been}} System IV.This first release of System V (called System V.0, System V Release 1, or SVR1) was developed by AT&T's UNIX Support Group (USG) and based on the Bell Labs internal USG UNIX 5.0.|$|R
50|$|Sixth Edition <b>Unix,</b> also <b>called</b> Version 6 <b>Unix</b> or just V6, was {{the first}} version of the Unix {{operating}} system to see wide release outside Bell Labs. It was released in May 1975 and, like its direct predecessor, targeted the DEC PDP-11 family of minicomputers. It was superseded by Version 7 Unix in 1978/1979, although V6 systems remained in regular operation until at least 1985.|$|R
40|$|Abstract. We {{describe}} {{a family of}} MPI applications we <b>call</b> the Parallel <b>Unix</b> Commands. These commands are natural parallel versions of common Unix user commands such as ls, ps, and find, together with a few similar commands particular to the parallel environment. We describe the design and implementation of these programs and present some performance results on a 256 -node Linux cluster. The Parallel Unix Commands are open source and freely available. ...|$|R
5000|$|Unix-like and {{otherwise}} POSIX-compliant systems, including Linux-based systems and all macOS versions, {{have a simple}} system for managing individual file permissions, which {{in this article are}} <b>called</b> [...] "traditional <b>Unix</b> permissions". Most of these systems also support some kind of access control lists (ACLs), either proprietary (old HP-UX ACLs, for example), or POSIX.1e ACLs, based on an early POSIX draft that was withdrawn in 1997, or NFSv4 ACLs, which are part of the NFSv4 standard.|$|R
40|$|We {{describe}} {{a family of}} MPI applications we <b>call</b> the Parallel <b>Unix</b> Commands. These commands are natural parallel versions of common Unix user commands such as ls, ps, and find, together with a few similar commands particular to the parallel environment. We describe the design and implementation of these programs and present some performance results on a 256 -node Linux cluster. The Parallel Unix Commands are open source and freely available. Comment: 9 pages, 2 figure...|$|R
5000|$|... brk and sbrk {{are basic}} memory {{management}} system <b>calls</b> used in <b>Unix</b> and Unix-like operating systems {{to control the}} amount of memory allocated to the data segment of the process. These functions are typically called from a higher-level memory management library function such as malloc. In the original Unix system, brk and sbrk were the only ways in which applications could acquire additional data space; later versions allowed this to also be done using the mmap call.|$|R
40|$|This report {{describes}} an {{application program interface}} to <b>UNIX</b> <b>called</b> the q-interface. It {{is designed to provide}} the programmer with convenient access to a reliable, message-oriented asynchronous network transport service, and to asynchronous event handling in general. It utilizes a «call-back» paradigm to notify the programmer of the occurrence of asynchronous events, and guarantees that all call-backs are atomic. It hides both the notification mechanism of the underlying operating system and the underlying networking system, which in the first implementation is TCP/IP...|$|R
