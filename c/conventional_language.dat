188|678|Public
2500|$|Group - A group {{language}} {{functions as}} a <b>conventional</b> <b>language</b> {{among the members of}} a single cultural or ethnic group (e.g. Hebrew amongst the Jews) ...|$|E
2500|$|By the age {{of twenty-five}} (between April 146 and April 147), Marcus had grown disaffected with his studies in jurisprudence, and showed some signs of general malaise. His master, he writes to Fronto, was an {{unpleasant}} blowhard, and had made [...] "a hit at" [...] him: [...] "It is easy to sit yawning next to a judge, he says, but to be a judge is noble work." [...] Marcus had grown tired of his exercises, of taking positions in imaginary debates. When he criticized the insincerity of <b>conventional</b> <b>language,</b> Fronto took to defend it. In any case, Marcus' formal education was now over. He had kept his teachers on good terms, following them devotedly. His biographer records that he [...] "kept gold statues of them in his private chapel, and always honoured their tombs by personal visits". It [...] "affected his health adversely", his biographer adds, to have devoted so much effort to his studies. It {{was the only thing}} the biographer could find fault in Marcus' entire boyhood.|$|E
6000|$|... "Mr. MacIan," [...] he said, [...] "I {{understand}} {{that we have now}} definitely settled that in the <b>conventional</b> <b>language</b> honour is not satisfied. Our action must at least go further than it has gone under recent interrupted conditions. That, I believe, is understood." ...|$|E
40|$|One of {{the most}} serious {{shortcomings}} of multidimensional languages is their inability to collaborate with <b>conventional</b> programming <b>languages</b> and systems. Multidimensional languages are used in order to define (potentially infinite) streams, grids, cubes, and so on, concepts which resemble in nature to the familiar imperative arrays. The main difference is that the former entities are lazy while the latter are generally eager. This paper proposes the embedding of multidimensional <b>languages</b> into <b>conventional</b> ones as a form of definitional lazy arrays. The paper describes the details of an implementation of the proposed idea as well as the expressibility and the performance of the resulting system. The main advantage of the new approach is that multidimensional languages can now benefit from the advanced features that have been developed for <b>conventional</b> <b>languages.</b> Moreover, multidimensionality adds to <b>conventional</b> <b>languages</b> the idea of lazy arrays, which in many cases o#er significant advantages compared to the classical imperative arrays...|$|R
500|$|An {{empirical}} {{study found}} that scripting languages (such as Python) are more productive than <b>conventional</b> <b>languages</b> (such as C and Java) for a programming problem involving string manipulation and search in a dictionary. Memory consumption was often [...] "better than Java and not much worse than C or C++".|$|R
40|$|Many {{language}} theoreticians {{have taken}} great efforts in designing higher-level programming languages {{that are more}} elegant and more expressive than <b>conventional</b> <b>languages.</b> However, few of these new languages have been implemented very efficiently. The result is that most software engineers still prefer to use <b>conventional</b> <b>languages,</b> even though the new higherlevel languages offer a better and simpler programming model. This dissertation concentrates on improving the performance of programs written in Standard ML (SML) [...] -a statically typed functional language [...] -on today's RISC machines. SML poses tough challenges to efficient implementations: very frequent function calls, polymorphic types, recursive data structures, higher-order functions, and first-class continuations. This dissertation presents the design and evaluation of several new compilation techniques that meet these challenges {{by taking advantage of}} some of the higher-level language features in SML. Type-directed compilation [...] ...|$|R
60|$|Turnbull's heart gave {{a leap of}} {{excitement}} which was half hope. As a magistrate Mr. Cumberland Vane had been somewhat careless and shallow, but certainly kindly, and not inaccessible to common sense {{so long as it}} was put to him in strictly <b>conventional</b> <b>language.</b> He was at least an authority of a more human and refreshing sort than the crank with the wagging beard or the fiend with the forked chin.|$|E
6000|$|... “It {{is not a}} {{bit more}} {{perfunctory}} than the present system,” said Egbert; “I have only the same <b>conventional</b> <b>language</b> of gratitude at my disposal with which to thank dear old Colonel Chuttle for his perfectly delicious Stilton, which we shall devour to the last morsel, and the Froplinsons for their calendar, which we shall never look at. Colonel Chuttle knows that we are grateful for the Stilton, without having to be told so, and the Froplinsons {{know that we are}} bored with their calendar, whatever we may say to the contrary, just as we know that they are bored with the bridge-markers in spite of their written assurance that they thanked us for our charming little gift. What is more, the Colonel knows that even if we had taken a sudden aversion to Stilton or been forbidden it by the doctor, we should still have written a letter of hearty thanks around it. So you see the present system of acknowledgment is just as perfunctory and conventional as the counterfoil business would be, only ten times more tiresome and brain-racking.” ...|$|E
60|$|Six {{years ago}} I was {{staying in a}} students' hotel in the Latin Quarter, and somebody, whose name I cannot recollect, {{introduced}} me to an Irishman, who, even poorer than myself, had taken {{a room at the}} top of the house. It was J. M. Synge, and I, who thought I knew the name of every Irishman who was working at literature, had never heard of him. He was a graduate of Trinity College, Dublin, too, and Trinity College does not, as a rule, produce artistic minds. He told me that he had been living in France and Germany, reading French and German Literature, and that he wished to become a writer. He had, however, nothing to show but one or two poems and impressionistic essays, full of that kind of morbidity that has its root in too much brooding over methods of expression, and ways of looking upon life, which come, not out of life, but out of literature, images reflected from mirror to mirror. He had wandered among people whose life is as picturesque as the middle ages, playing his fiddle to Italian sailors, and listening to stories in Bavarian woods, but life had cast no light into his writings. He had learned Irish years ago, but had begun to forget it, for the only language that interested him was that <b>conventional</b> <b>language</b> of modern poetry which has begun to make us all weary. I was very weary of it, for I had finished The Secret Rose, and felt how it had separated my imagination from life, sending my Red Hanrahan, who should have trodden the same roads with myself, into some undiscoverable country. I said, 'Give up Paris, you will never create anything by reading Racine, and Arthur Symons will always be a better critic of French literature. Go to the Arran Islands. Live there as if you were one of the people themselves; express a life that has never found expression.' I had just come from Arran, and my imagination was full of those grey islands where men must reap with knives because of the stones.|$|E
40|$|Experimental {{semiotics}} {{is defined}} as the elucidation of symbols that gain their meaning by being structured {{to take advantage of the}} human sensory apparatus. In making this definition a distinction is made between languages which are fundamentally sensory and those which are fundamentally conventional. Experimental semiotics is concerned with the former. Sensory representations are good (or bad) because they are well matched to the early stages of neural processing of sensory information. They tend to be stable across individuals and cultures. Conversely, <b>conventional</b> <b>languages</b> gain their power from culture and are dependent on the particular cultural milieu of an individual. This theoretical distinction provides a basis for testable predictions about the ease of learning for languages in the two classes. The examples given are mostly based on the visual modality, but the distinction also applies to other sensory modalities. Methods for testing claims about sensory versus <b>conventional</b> <b>languages</b> are discussed...|$|R
5000|$|Befunge is a stack-based, reflective, esoteric {{programming}} language. It {{differs from}} <b>conventional</b> <b>languages</b> in that programs are arranged on a two-dimensional grid. [...] "Arrow" [...] instructions direct the control {{flow to the}} left, right, up or down, and loops are constructed by sending the control flow in a cycle. It {{has been described as}} [...] "a cross between Forth and Lemmings." ...|$|R
40|$|Lazy task {{creation}} (LTC) is {{an efficient}} approach for executing {{divide and conquer}} parallel programs {{that has been used}} in the implementation of Multilisp's future construct. Unfortunately it requires a specialized memory management scheme, in particular for stack frames, which makes it hard to use in the context of <b>conventional</b> <b>languages.</b> We have designed a variant of LTC which has a stack management discipline that is compatible with the semantics of <b>conventional</b> <b>languages.</b> This mechanism, which we call lazy remote procedure call, has been used to implement a parallel variant of C. A first prototype of our system has been ported to shared-memory multiprocessors and network of workstations. Experimental results on a Cray T 3 D multiprocessor show that good performance can be achieved on several symbolic programs. 1 Introduction The future construct of Multilisp [Halstead, 1985] {{has proven to be a}} convenient and effective means of expressing parallelism in Lisp and in symbolic proce [...] ...|$|R
6000|$|... § 3. But though {{inference}} of an inductive {{character is}} possible {{without the use}} of signs, it could never, without them, be carried much beyond the very simple cases which we have just described, and which form, in all probability, the limit of the reasonings of those animals to whom <b>conventional</b> <b>language</b> is unknown. Without language, or something equivalent to it, there could only be as much reasoning from experience as can take place without the aid of general propositions. Now, though in strictness we may reason from past experience to a fresh individual case without the intermediate stage of a general proposition, yet without general propositions we should seldom remember what past experience we have had, and scarcely ever what conclusions that experience will warrant. The division of the inductive process into two parts, the first ascertaining what is a mark of the given fact, the second whether in the new case that mark exists, is natural, and scientifically indispensable. It is, indeed, in a majority of cases, rendered necessary by mere distance of time. The experience by which we are to guide our judgments may be other people’s experience, little of which can be communicated to us otherwise than by language; when it is our own, it is generally experience long past; unless, therefore, it were recorded by means of artificial signs, little of it (except in cases involving our intenser sensations or emotions, or the subjects of our daily and hourly contemplation) would be retained in the memory. It is hardly necessary to add, that when the inductive inference is of any but the most direct and obvious nature—when it requires several observations or experiments, in varying circumstances, and the comparison of one of these with another—it is impossible to proceed a step, without the artificial memory which words bestow. Without words, we should, if we had often seen A and B in immediate and obvious conjunction, expect B whenever we saw A; but to discover their conjunction when not obvious, or to determine whether it is really constant or only casual, and whether there is reason to expect it under any given change of circumstances, is a process far too complex to be performed without some contrivance to make our remembrance of our own mental operations accurate. Now, language is such a contrivance. When that instrument is called to our aid, the difficulty is reduced to that of making our remembrance of the meaning of words accurate. This being secured, whatever passes through our minds may be remembered accurately, by putting it carefully into words, and committing the words either to writing or to memory.|$|E
5000|$|In the <b>conventional</b> <b>language</b> of {{circular}} functions, these th-degree spread polynomials, for , can {{be characterized}} by the identity: ...|$|E
5000|$|Group - A group {{language}} {{functions as}} a <b>conventional</b> <b>language</b> {{among the members of}} a single cultural or ethnic group (e.g. Hebrew amongst the Jews) ...|$|E
40|$|This paper {{introduces}} a new primitive data type, hierarchically tiled arrays (HTAs), {{which could be}} incorporated into <b>conventional</b> <b>languages</b> to facilitate parallel programing and programming for locality. It is argued that HTAs enable a natural representation for many algorithms {{with a high degree}} of locality. Also, the paper shows that, with HTAs, parallel computations and the associated communication operations can be expressed as array operations within single threaded programs. This, is then argued, facilitates reasoning about the resulting programs and stimulates the development of code that is highly readable and easy to modify. The new data type is illustrated using examples written in an extended version of MATLAB. 1. 0 Introduction. This paper {{introduces a}} new primitive data type which could be incorporated into <b>conventional</b> <b>languages</b> to facilitate parallel programing and programming for locality. This new data type facilitates the representation and manipulation of arrays that are organized as a hierarchy of tiles. These hierarchically tiled arrays (HTAs) are a generalization of th...|$|R
40|$|This paper {{presents}} an experimental code generator that performs intra-block stack scheduling for a stack-based execution model. For small test programs, 91 % to 100 % of redundant local variable accesses were eliminated using this compiler. Compiled intra-block stack scheduling and hand-performed global stack scheduling show that significant opportunities exist to keep temporary variable values on the expression evaluation stack when compiling <b>conventional</b> <b>languages...</b>|$|R
2500|$|In simplistic Lisp implementations, {{this list}} {{structure}} is directly interpreted {{to run the}} program; a function is literally a piece of list structure which is traversed by the interpreter in executing it. However, most substantial Lisp systems also include a compiler. The compiler translates list structure into machine code or bytecode for execution. [...] This code can run as fast as code compiled in <b>conventional</b> <b>languages</b> such as C.|$|R
50|$|Usability {{is rarely}} a goal for esoteric {{programming}} language designers—often {{it is quite}} the opposite. Their usual aim is to remove or replace <b>conventional</b> <b>language</b> features while still maintaining a language that is Turing-complete, or even one for which the computational class is unknown.|$|E
50|$|The SI prefix for 1024 is yotta (Y), and for 10−24 (i.e., the {{reciprocal}} of 1024) yocto (y). These numbers {{are the largest}} and smallest number to receive an SI prefix to date. In a 24-hour clock, the twenty-fourth hour is in <b>conventional</b> <b>language</b> called twelve or twelve o'clock.|$|E
50|$|The {{reality of}} vicikicchā {{is not the}} same as what we mean by doubt in <b>conventional</b> <b>language.</b> Vicikicchā is not doubt about someone's name or about the weather. Vicikicchā is doubt about realities, about nāma and rūpa, about cause and result, about the four noble Truths, about the “Dependent Origination”.|$|E
40|$|Mem 4 C(plus plus) is an application-independend memory {{management}} system {{which can be}} used in conjunction with <b>conventional</b> <b>languages</b> like C or Cplus plus as well as in conjunction with dynamical typed languages like Lisp. Mem 4 C(plus plus) was implemented in C with the concept of a configurable toolkit in mind. This paper is a technical documentation describing the interface functions provided by the Mem 4 C(plus plus) library...|$|R
50|$|In simplistic Lisp implementations, {{this list}} {{structure}} is directly interpreted {{to run the}} program; a function is literally a piece of list structure which is traversed by the interpreter in executing it. However, most substantial Lisp systems also include a compiler. The compiler translates list structure into machine code or bytecode for execution. This code can run as fast as code compiled in <b>conventional</b> <b>languages</b> such as C.|$|R
40|$|The {{dominant}} {{technology for}} developing AI applications {{is to work}} in a multi-mechanism, integrated, knowledge-based system (KBS) development environment. Unfortunately, systems developed in such environments are inappropriate for delivering many applications - most importantly, they carry the baggage of the entire Lisp environment and are not written in <b>conventional</b> <b>languages.</b> One resolution of this problem would be to compile applications from complex environments to <b>conventional</b> <b>languages.</b> Here the first efforts to develop a system for compiling KBS developed in KEE to Ada (trademark). This system is called KATYDID, for KEE/Ada Translation Yields Development Into Delivery. KATYDID includes early prototypes of a run-time KEE core (object-structure) library module for Ada, and translation mechanisms for knowledge structures, rules, and Lisp code to Ada. Using these tools, part of a simple expert system was compiled (not quite automatically) to run in a purely Ada environment. This experience has given us various insights on Ada as an artificial intelligence programming language, potential solutions of some of the engineering difficulties encountered in early work, and inspiration on future system development...|$|R
5000|$|... "Because it {{will not}} be content with a <b>conventional</b> <b>language</b> of expression, a {{profound}} love will produce a profound poetry, and it is precisely such poetry which Eddie Woods has achieved." [...] Richard Livermore, editor of Chanticleer Magazine (Edinburgh, Scotland), in his review of Tsunami of Love: A Poems Cycle.|$|E
50|$|SysML {{takes time}} and effort to learn. It is {{intended}} to be a <b>conventional</b> <b>language</b> for conducting model-based systems engineering but it has some important limitations that reduce its efficiency and limit its acceptance. This limited usage is, in itself, a limitation, as the SysML language can be considered a hermetic language that non-initiated find sometimes difficult to exploit.|$|E
50|$|Gentner, Özyürek, Gürcanli, and Goldin-Meadow {{found that}} deaf children, who lacked a <b>conventional</b> <b>language,</b> {{did not use}} {{gestures}} to convey spatial relations (see home sign). Building on that, they showed that deaf children performed significantly worse on a task of spatial cognition compared to hearing children. They concluded that the acquisition of (spatial) language {{is an important factor}} in shaping spatial cognition.|$|E
50|$|Automation was {{designed}} with {{the ease of}} scripting in mind, so controllers often provide languages such as Visual Basic for Applications to end users, allowing them to control automation objects via scripts. Automation objects are often written in <b>conventional</b> <b>languages</b> such as C++, where C++ attributes {{can be used to}} simplify development, Languages such as Visual Basic and Borland Delphi also provides a convenient syntax for Automation which hides the complexity of the underlying implementation.|$|R
40|$|This paper formulates {{the common}} object {{language}} framework for integrating declarative solutions into distributed and heterogeneous environments. It centers on using a common object-level representation of simply-typed lambda terms as a communication protocol. It {{allows for the}} interoperation between distributed processes {{in the form of}} remote-procedure calls, including those that require the transaction of higher-order terms between appropriate languages. It also allows for declarative programs to invoke procedures of <b>conventional</b> <b>languages</b> such as C...|$|R
5000|$|Note that {{variables}} are marked [...] {{to determine their}} scope. This {{is the opposite of}} most modern languages, where [...] "local" [...] is the default scope, and such a declaration would be redundant. In <b>conventional</b> <b>languages</b> the scoping visibility is defined by the location in the source code file - variables declared inside a method are local to that method, those defined outside methods or other declarations are global to the class (or program).|$|R
5000|$|When {{we study}} the Abhidhamma {{we learn that}} 'vedanā' {{is not the same}} as what we mean by feeling in <b>conventional</b> <b>language.</b> Feeling is nāma, it {{experiences}} something. Feeling never arises alone; it accompanies citta and other cetasikas and it is conditioned by them. Thus, feeling is a conditioned nāma. Citta does not feel, it cognizes the object and vedanā feels...|$|E
50|$|Phassa is {{different}} from what we mean in <b>conventional</b> <b>language</b> by physical contact or touch. When we use the word contact in <b>conventional</b> <b>language</b> we may think of the impingement of something external on one of the senses, for example the impingement of hardness on the bodysense. We may use words such as touching or impingement in order to describe phassa, but we should not forget that phassa is nāma, a cetasika which arises together with the citta and assists the citta so that it can experience the object which presents itself through the appropriate doorway. When hardness presents itself through the bodysense there is phassa, contact, arising together with the citta which experiences the hardness. Phassa is not the mere collision of hardness with the bodysense, it is not touch in the physical sense. Impact is the function of phassa {{in the sense that it}} assists the citta so that it can cognize the object.|$|E
50|$|The term holomovement {{is one of}} many neologisms which Bohm coined in {{his search}} to {{overcome}} the limitations of the standard Copenhagen interpretation of quantum mechanics. This approach involved not just a critique of the assumptions of the standard model, but a set of new concepts in physics which move beyond the <b>conventional</b> <b>language</b> of quantum mechanics. Wholeness and the Implicate Order is the culmination of these reflections, an attempt to show how the new insights provided by a post-Copenhagen model can be extended beyond physics into other domains, such as life, consciousness, and cosmology.|$|E
40|$|This article {{describes}} the abstract model implicit in logic programming and compares it to the models used in <b>conventional</b> <b>languages.</b> A simple example in Prolog illustrates how programming in logic can provide a concise problem description while offering a very flexible framework to solve for unknowns. The last section of this article surveys the current fields of active {{research in the area}} of logic programming and concludes with a prognosis for the future of this metho...|$|R
5000|$|While {{considering}} Wilkins' effort naïve, Borges ultimately {{praises the}} ambition {{of a universal}} language and admits that Wilkins's word for salmon, zana, could (for someone well-versed in Willkins' language) hold more meaning than the corresponding words in <b>conventional</b> <b>languages,</b> which are arbitrary and carry no intrinsic meaning.He says that, [...] "Theoretically, it is not impossible {{to think of a}} language where the name of each thing says all the details of its destiny, past and future." ...|$|R
40|$|Many {{researchers}} believe that object-oriented languages are well suited {{for some of the}} programming tasks associated with the building of an office information system (OIS). To lend support to this thesis, we shall concentrate our attention on an object-oriented programming environment, named Oz, which has been effectively employed to capture certain aspects of OISs more simply and naturally than with <b>conventional</b> <b>languages.</b> After pointing out some of the limitations of Oz, we introduce additional facilities into it which further enhance its capabilities, especially with respect to the management of office data. 1...|$|R
