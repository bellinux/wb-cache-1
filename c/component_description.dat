73|513|Public
2500|$|... /** A {{description}} {{that will be}} included in <b>component</b> <b>description</b> */ ...|$|E
5000|$|The term 'process' within IBM's <b>component</b> <b>description,</b> is {{also criticized}} as {{requiring}} additional explanations {{because it has}} dual meaning in Business and single meaning in IT; which one has been meant here? And why each business component has {{to act as a}} [...] "standalone entity" [...] instead of being a compositions of business components as well (i.e. it cannot act standing alone)? ...|$|E
50|$|Addresses were {{encoded in}} orders in two bytes. For twelve bit {{addresses}} the high order two bits of each byte were normally set to form valid EBCDIC (or ASCII) characters. For example, address 0 was coded as X'4040', or space-space, address 1919 was coded as X'5D7F', or ''. Programmers hand coding panels usually kept {{the table of}} addresses from the 3270 <b>Component</b> <b>Description</b> or the 3270 Reference Card handy. For fourteen and sixteen bit address the address used contiguous bits in two bytes.|$|E
5000|$|... #Caption: Image of an {{electric}} forklift with <b>component</b> <b>descriptions</b> ...|$|R
5000|$|... {{to ensure}} {{delivery}} of compatible <b>component</b> <b>descriptions</b> from multiple <b>component</b> vendors, ...|$|R
40|$|Abstract. In this article, {{we propose}} a {{methodology}} to formally verify hardware <b>component</b> <b>descriptions.</b> Our approach considers asynchronous descriptions and introduces abstract scenarios {{as a working}} representation {{to reduce the number}} of behaviours. We aim to use this methodology on the SystemC language. ...|$|R
40|$|In {{this paper}} the digital system {{simulation}} program package ATLAS (Advanced Tools and Languages for microprocessor Architecture Simulation) is described. Different software modules, parts of ATLAS are developed: COMPAS - COnfigurable MicroProcessor Architecture Simulator, CONAS - CONfigurable ASsembler, ADEL - Assembler DEscription Language, COMDEL- <b>COMponent</b> <b>DEscription</b> Language and SYSDEL - SYStem DEscription Language. The simulator COMPAS and its implementation are explained in more details. The digital <b>component</b> <b>description</b> language features are given...|$|E
40|$|The aim of {{the paper}} is to present the results of {{research}} into component based software development by providing a specification mechanism allowing searching for components in a component repository. A new component classification framework is proposed based on which a <b>Component</b> <b>Description</b> Manager has been designed and implemented. The classification framework combines domain knowledge, ontological information and some semantics to allow descriptions of components to be constructed in a consistent, yet informative way. The <b>Component</b> <b>Description</b> Manager consists of the classification framework and a repository of component descriptions constructed using this framework. This new approach is compared to alternative component repositories and marketplaces...|$|E
40|$|A {{study was}} {{conducted}} to determine the configuration and performance of a space tug. Details of the space tug systems are presented to include: (1) propulsion systems, (2) avionics, (3) thermal control, and (4) electric power subsystems. The data generated include engineering drawings, schematics, subsystem operation, and <b>component</b> <b>description.</b> Various options investigated and the rational for the point design selection are analyzed...|$|E
40|$|The Software Engineering Laboratory (SEL) Data Base Maintenance System (DBAM) is explained. The various {{software}} facilities of the SEL, DBAM operating procedures, and DBAM {{system information}} are described. The relationships among DBAM components (baseline diagrams), <b>component</b> <b>descriptions,</b> overlay descriptions, indirect command file listings, file definitions, and sample data collection forms are provided...|$|R
40|$|This bachelor’s thesis {{deals with}} direct {{injection}} applicated in spark ignition engine. It explains {{how the system}} works {{and what are the}} benefits in comparison with older methods. <b>Components</b> <b>description</b> and a list of current engines are mentioned in the next chapter. The last section is focussed on the future of these motors...|$|R
50|$|There {{is broad}} {{activity}} in {{progress on the}} standard. The version 2.0 of the standard with general definitions and a full scope of <b>component</b> <b>descriptions</b> {{is expected to be}} released in 2014. An international ISO/IEC standard will be published end of 2014. Additional activity is underway to develop a Charge Lock Cable.|$|R
40|$|To {{break through}} the {{computational}} capability and memory space of the embedded Communication systems, it is a flexible method to make the communication protocols Component-based. The systems can load the new Components automatically and need not halt. Furthermore, the components are described by <b>component</b> <b>description</b> language and can easy to be developed, stored, assembled and executed with component-based communication protocol architecture. ...|$|E
40|$|You define Qsys {{components}} in the component editor by declaring their properties and behaviors or directly in a Hardware <b>Component</b> <b>Description</b> File (_hw. tcl). Each _hw. tcl file represents one component which you can add to a Qsys system. You can then share these components with other designers. For your component to have maximum flexibility, you should consider that aspects of its behavior that can be parameterized so that other users can change the default parameterization to address different design requirements. A Qsys component is usually composed of the following four types of files: _hw. tcl file—describes the Qsys related characteristics, such as interface behaviors. This file is required. HDL files—define the component’s functionality as hardware, simulation, and constraint files. These files are optional. _sw. tcl—used by the software build tools to compile the component driver code. This file is optional. Component driver files—define the component register map and driver software to allow software to control the component. These files are optional. This chapter discusses the following topics: “Information in a Hardware <b>Component</b> <b>Description</b> File” ■ “Defining Components ” on page 9 –...|$|E
40|$|Table of Contents 1. Acronyms and {{abbreviations}} [...] 4 2. Introduction [...] 5 3. Executive {{summary of}} achievements [...] 8 4. Project <b>component,</b> <b>description</b> and intermediate results [...] 9 5. Achievements during reporting period [...] 10 6. Indicators and milestones [...] 14 7. Gender related achievements [...] 16 8. Synergic activities [...] 17 9. Other important activities [...] 18 10. Problems/challenges and solutions [...] 18 13. Activities planned for next reporting period [...] 1...|$|E
40|$|This paper {{describes}} {{a method for}} the design of digital systems that emphasizes a bottom-up procedure and reuse of existing components. Our method is based on an object-oriented hierarchy of classes describing the structure of <b>components.</b> <b>Descriptions</b> of all classes in a new language HDLC++ are transformed into RTL-Verilog code for the complete system...|$|R
40|$|This paper {{presents}} an approach which supports verification and model-based adaptation of software <b>components</b> <b>description</b> of WF workflows, and we formalise {{the extraction of}} Labelled Transition Systems from these workflows. Next, verification and adaptation are applied using respectively model-checking techniques and existing model-based adaptation approaches. Last, we explain how a WF workflow can be generated from an adaptor protocol...|$|R
40|$|This {{bachelor}} thesis has {{a character}} of a literature review and focuses on main electronic elements and sensors used in earth-moving machinery namely a backhoe loader. The thesis contains {{a brief overview of}} information about individual sensor types and electronic <b>components,</b> <b>description</b> of their function, primary categorization, principle of sensor functioning and their usage in an earth moving machine...|$|R
40|$|This paper {{describes}} a component decomposition of a CHAMP control system for flexible manufacturing. A new active database approach is introduced to simplify relations and messages within the system. The system {{is described in}} terms of SOFA software components and takes advantages of SOFA s ability of formal description of component interfaces, relations and behavior provided by <b>Component</b> <b>Description</b> Language. Other existing features that can support flexible manufacturing like Dynamic Component Updating are also mentioned in the paper...|$|E
40|$|The {{increasing}} number of available software components and competing interoperability standards render the selection, composition, and configuration of software components increasingly complex. In order to support the domain expert in these processes comprehensive, comparable, and sufficiently abstract component descriptions are required. In this paper, we abstract from {{the specifics of the}} component models COM, EJB, and CCM, and propose a unifying <b>component</b> <b>description</b> language for integrated descriptions of structure and behaviour of software components and component-based software systems...|$|E
40|$|Experimental {{aerodynamic}} investigations {{were conducted}} in a low speed wind tunnel on an 0. 0405 scale representation of the 89 A light weight Space Shuttle Orbiter to obtain pressure loads data {{in the presence of}} the ground for orbiter structural strength analysis. The model and the facility are described, and data reduction is outlined. Tables are included for data set/run number collation, data set/component collation, model <b>component</b> <b>description,</b> and pressure tap locations by series number. Tabulated force and pressure source data are presented...|$|E
40|$|Mathematics testing Internet-system requirements, {{the system}} {{architecture}} and main <b>components</b> <b>description</b> are presented here. Peculiarity {{of the proposed}} method is the irrelevance of a user's answer to be congruent with an etalon. The user's answer analyzing is replaced with objectives to check the possibility to equivalently convert an answer to an etalon using symbolic mathematical software like Maple or MathCAD...|$|R
40|$|The {{design is}} {{reported}} of a dual mode multispectral scanner, capable of satisfying both overland and oceanographic requirements. A complete system description and performance {{summary of the}} scanner are given. In addition, subsystem and <b>component</b> <b>descriptions</b> and performance analyses are treated in individual sections. The design of the scanner, with minimum modifications, interfaces to the ERTS spacecraft and the ground data handling system...|$|R
40|$|Problem area Up to {{now most}} primary {{composite}} airframe components {{are made of}} thermoset materials. However, there is an increasing interest to use thermoplastic materials instead of thermoset materials. One {{of the main reasons}} is that thermoplastics have superior toughness properties compared to thermoset materials resulting in lightweight damage tolerant structural <b>components.</b> <b>Description</b> of work NLR started a research programme into co-consolidation techniques fo...|$|R
40|$|Component Libraries Editor Implementation Description. System is {{designed}} for needs of designed conceptual designu system. System is based on component approach and is built on common <b>component</b> <b>description</b> independent on their concrete use. In difference to own design system implementred in Visual Prolog language, the Editor is build in Delphi environment for easiness of graphics user interface implementation. Nevertheless form of data about vreated modell is achieved and so full compatibility {{with the rest of}} system is reached. Available from STL Prague, CZ / NTK - National Technical LibrarySIGLECZCzech Republi...|$|E
40|$|Table of Contents 1. Acronyms and Abbreviations [...] . 4 2. Introduction [...] . 5 3. Executive Summary of Achievements [...] . 8 4. Project <b>component</b> <b>description</b> and {{intermediate}} results [...] . 9 5. Achievements [...] . 11 Production-Marketing [...] . 11 Food Processing [...] . 12 Décrue Sorghum [...] . 14 Training [...] . 15 6. Indicators [...] . 19 7. Gender related achievements [...] . 23 8. Synergic activities [...] . 24 9. Other important activities [...] . 26 10. Problems/challenges and solutions [...] . 27 11. Success stories [...] . 32 12. Lessons learned [...] . 33 13. Annexes [...] . 3...|$|E
40|$|Abstract — Graded {{components}} are a resource-conserving alternative to today’s composite materials. Functional gradation means a steady {{progress of the}} property values through the three spatial dimensions of the component. At the present time there is no methodology to specify the graded properties in the <b>component</b> <b>description.</b> Its starting point {{takes place in the}} conventional CAD-Models, based on Voxel models. The component geometry is reproduced with the aid of voxels. Each single Voxel is linked with the component properties. The effort of the description is reduced by the use of interpolation techniques. As a result, we have an enhanced component model which contains all the necessary information for the description of a functional graded component. This model constitutes the starting point of the process chain planning for the component production. Transregio 30 (CRC/TR TRR 30). Within the scope of the CRC, a flanged steel shaft is used as demostrator of a component with graded properties. The flanged steel shaft is produced in a three-steps-process (figure 1). With the aid of an induction coil, a steel cylinder is locally heated a) and after that, through a two-steps deformation, the cylinder is transformed into a flanged steel shaft. The reshape process consists of the steps: b) + c), which are tool-independent, and the step c), which is tool-dependent. a) b) c) d) Index Terms—functional gradation, graded properties, <b>component</b> <b>description,</b> voxelmodel I...|$|E
40|$|The {{development}} and performance {{history of the}} Apollo extravehicular mobility unit and its major subsystems is described. The three major subsystems, the pressure garment assembly, the portable life-support system, and the oxygen purge system, are defined and described in detail as is the evolutionary process that culminated in each major subsystem <b>component.</b> <b>Descriptions</b> of ground-support equipment and the qualification testing process for component hardware are also presented...|$|R
40|$|In this paper, {{we discuss}} {{a way of}} {{composing}} a system from components with anonymous dependencies. We make observations based on our experience with defining and implementing a composition mechanism for layered architectures. We propose a manner of specifying <b>component</b> <b>descriptions</b> by means of semantic-unaware properties, an applicationdomain independent formalism for describing the client-specific configuration requests in terms of desired properties, and a composition algorithm that works well in these conditions...|$|R
50|$|ODB {{stands for}} open database, but its {{openness}} is disputed, as discussed below. The '++' suffix, evocative of C++, was added in 1997 {{with the addition}} of <b>component</b> <b>descriptions.</b> There are two versions of ODB++: the original (now controlled by Mentor) and an XML version called ODB++(X) that Valor developed and donated to the IPC organization in an attempt to merge GenCAM (IPC-2511) and ODB++ into Offspring (IPC-2581).|$|R
40|$|Abstract – Shorter product {{cycles and}} {{increasing}} system and software complexity, especially {{with respect to}} mobile computing, require changes in software construction and the utilization of leading-edge technologies. We present an abstract, platform-independent component model {{as a basis for}} component-oriented development, leading to better software reuse and reduction of architectural complexity. For this component model we have defined mappings to various combinations of programming language, middleware and operating system. According to these mappings, and with the support of tools, concrete component logic for a certain platform can be generated from an abstract <b>component</b> <b>description.</b> Keywords: mobile computing, MDA, CCM; I...|$|E
40|$|A new semi-formal {{method for}} {{describing}} and retrieving components has been devised, implemented and validated {{through the development}} of a <b>component</b> <b>description</b> manager. A new classification framework which allows component providers to describe components in a semi-formal but consistent way is proposed. The component descriptions are stored in a repository, and component consumers can use the same framework to define their requirements when searching for components. The framework is semi-formal and focuses on ease of use for the component providers and consumers. It aims to provide a level of accuracy and consistency close to that achieved by formal methods, without the same level of complexity...|$|E
40|$|In this paper, a novel {{approach}} for creating configuration models is supplied by introducing a metaknowledge base that enables the construction of configuration models. The meta-knowledge base represents all knowledge bases that can be expressed with a given configuration language, {{in the case of}} this paper, with the <b>Component</b> <b>Description</b> Language CDL. The meta-knowledge base itself is again represented with CDL and thus, at the metalevel it can use configuration tools that relay on CDL. With this approach inference techniques that are normally used for configuration of technical systems can be applied for the construction of configuration model, i. e. during knowledge acquisition and evolution. ...|$|E
40|$|Abstract: Detecting {{functional}} errors on generic hardware components {{is often}} a complex task. This task becomes more complex in a componentwise approach when analyzing components without their embedded context that is the entire system description. In this paper, we propose a methodology that successfully detects just from the <b>component’s</b> <b>description</b> a pure functional error that neither extensive tests nor formal methods could find. Key–Words: static analysis, hardware functional error, logical formulae, formal inference...|$|R
30|$|Increased {{adoption}} of these frameworks by DevOps professionals has spawned active communities of users {{with an interest}} in exchanging know-how and in better understanding the DevOps field. A recent trend in DevOps communities is the creation of repositories of information where users can jointly contribute knowledge –via crowdsourcing [8]– creating shared value. These include repositories of software, such as GitHub [9], Sourceforge [10], GoogleCode [11], CodePlex [12], and repositories of software <b>component</b> <b>descriptions</b> and associated configuration and management procedures, such as Chef Supermarket [13].|$|R
40|$|A {{procedure}} for {{the measurement of}} the generalized ellipsometric angles using a phase-modulation spectroscopic ellipsometer is described. Generalized phase-modulation ellipsometry combined with zone averaging enables precise characterization of samples with generalized anisotropy including anisotropic thin films with general axis orientation, liquid crystals, gratings, and anisotropic nanostructures. We employed a UVISEL Jobin Yvon spectroscopic ellipsometer with a photoelastic modulator (PEM). The Jones matrix formalism is applied to nondepolarizing samples and ellipsometer <b>components</b> <b>description.</b> The zone averaging proposed enables elimination of azimuth-angle error and component imperfection...|$|R
