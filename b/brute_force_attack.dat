291|10000|Public
25|$|The {{architecture}} of the processor makes it better suited to hardware-assisted cryptographic <b>brute</b> <b>force</b> <b>attack</b> applications than conventional processors.|$|E
25|$|Passwords {{are created}} either {{automatically}} (using randomizing equipment) or by a human; {{the latter case}} is more common. While the strength of randomly chosen passwords against a <b>brute</b> <b>force</b> <b>attack</b> can be calculated with precision, determining the strength of human-generated passwords is challenging.|$|E
25|$|Moving from never {{changing}} one's password {{to changing}} the password on every authenticate attempt (pass or fail attempts) only doubles {{the number of}} attempts the attacker must make on average before guessing the password in a <b>brute</b> <b>force</b> <b>attack.</b> One gains much more security by just increasing the password length by one character than changing the password on every use.|$|E
5000|$|... mod_evasive - protects your site(s) from HTTP DoS/DDoS <b>attacks</b> and <b>brute</b> <b>force</b> <b>attacks</b> ...|$|R
5000|$|Fail2ban, {{a similar}} program that {{prevents}} <b>brute</b> <b>force</b> <b>attacks</b> against SSH and other services ...|$|R
30|$|We used <b>brute</b> <b>force</b> <b>attacks</b> {{to guess}} the layout of ssl_session_st when we did the experiments.|$|R
25|$|Cryptanalysis of symmetric-key ciphers {{typically}} involves {{looking for}} {{attacks against the}} block ciphers or stream ciphers that are more efficient than any attack that could be against a perfect cipher. For example, a simple <b>brute</b> <b>force</b> <b>attack</b> against DES requires one known plaintext and 255 decryptions, trying {{approximately half of the}} possible keys, to reach a point at which chances are better than even that the key sought will have been found. But this may not be enough assurance; a linear cryptanalysis attack against DES requires 243 known plaintexts and approximately 243 DES operations. This is a considerable improvement on brute force attacks.|$|E
25|$|In December, 2012, William Cheswick {{wrote an}} article {{published}} in ACM magazine that included the mathematical possibilities of how easy or difficult it would be to break passwords that are constructed using the commonly recommended, and sometimes followed, standards of today. In his article, William showed that a standard eight character alpha-numeric password could withstand a <b>brute</b> <b>force</b> <b>attack</b> of ten million attempts per second, and remain unbroken for 252 days. Ten million attempts each second is the acceptable rate of attempts using a multi-core system that most users would have access to. A much greater degree of attempts, at the rate of 7 billion per second, could also be achieved when using modern GPUs. At this rate, the same 8 character alpha-numeric password could be broken in approximately 30 seconds. Increasing the password complexity to a 13 character alpha-numeric password increases the time needed to crack it to more than 900,000 years at 7 billion attempts per second. This is, of course, assuming the password does not use a common word that a dictionary attack could break much sooner. Using a password of this strength reduces the obligation to change it as often as many organizations require, including the U.S. Government, as it could not be reasonably broken in such a short period of time.|$|E
500|$|In {{the second}} instance, {{breaking}} the scheme {{is even more}} straightforward. Since {{there are only a}} limited number of possible shifts (26 in English), they can each be tested in turn in a <b>brute</b> <b>force</b> <b>attack.</b> One way to do this is to write out a snippet of the ciphertext in a table of all possible shifts â€“ a technique sometimes known as [...] "completing the plain component". The example given is for the ciphertext [...] "EXXEGOEXSRGI"; the plaintext is instantly recognisable by eye at a shift of four. Another way of viewing this method is that, under each letter of the ciphertext, the entire alphabet is written out in reverse starting at that letter. This attack can be accelerated using a set of strips prepared with the alphabet written down in reverse order. The strips are then aligned to form the ciphertext along one row, and the plaintext should appear in one of the other rows.|$|E
40|$|This project {{deals with}} {{analysis}} of <b>brute</b> <b>force</b> <b>attacks</b> focused on breaking authentication of common services (especially ssh) of Linux and xBSD operating systems. It also examines real attacks, actual tools {{and ways of}} detection of theese attacks. Finaly there are designed new mechanisms of coordination and evaluation of distributed <b>brute</b> <b>force</b> <b>attacks</b> in distributed environment. These mechanisms are then implemented in distributed system called DBFAP...|$|R
50|$|In most {{commercial}} {{applications of}} the NTRUEncrypt, the parameter N=251 is used. To avoid lattice <b>attacks,</b> <b>brute</b> <b>force</b> <b>attacks</b> and meet-in-the-middle attacks, f and g should have about 72 non-zero coefficients.|$|R
5000|$|In cryptography, PBKDF1 and PBKDF2 (Password-Based Key Derivation Function 2) are key {{derivation}} functions with {{a sliding}} computational cost, aimed {{to reduce the}} vulnerability of encrypted keys to <b>brute</b> <b>force</b> <b>attacks.</b>|$|R
2500|$|Information theory {{leads us}} to believe {{it is much more}} {{difficult}} to keep secrets than it might first appear. [...] A <b>brute</b> <b>force</b> <b>attack</b> can break systems based on asymmetric key algorithms or on most commonly used methods of symmetric key algorithms (sometimes called secret key algorithms), such as block ciphers. [...] The security of all such methods currently comes from the assumption that no known attack can break them in a practical amount of time.|$|E
2500|$|Several secret-sharing schemes {{are said}} to be information-theoretically secure and can be proven to be so, while others give up this {{unconditional}} security for improved efficiency while maintaining enough security to be considered as secure as other common cryptographic primitives. [...] For example, they might allow secrets to be protected by shares with 128-bits of entropy each, since each share would be considered enough to stymie any conceivable present-day adversary, requiring a <b>brute</b> <b>force</b> <b>attack</b> of average size 2127.|$|E
2500|$|In cryptanalysis, entropy {{is often}} roughly {{used as a}} measure of the unpredictability of a {{cryptographic}} key. For example, a 128-bit key that is uniformly randomly generated has 128 bits of entropy. It also takes (on average) [...] guesses to break by brute force. However, entropy fails to capture the number of guesses required if the possible keys are not chosen uniformly. Instead, a measure called guesswork can be used to measure the effort required for a <b>brute</b> <b>force</b> <b>attack.</b>|$|E
5000|$|Even if DES {{encryption}} is used, as of 2009, 56-bit DES {{is widely}} considered to be obsolete and is subject to <b>brute</b> <b>force</b> <b>attacks</b> well within the capabilities of consumer-grade computer equipment.|$|R
30|$|In this algorithm, {{besides the}} control {{parameter}} and initial {{condition of the}} piecewise nonlinear chaotic map, {{the parameters of the}} one-dimensional chaotic map are chosen as the secret keys. From the security point of view, the key space for a cryptographic algorithm should not be less than 2128 in order to resist <b>brute</b> <b>force</b> <b>attacks</b> [48, 49]. If the precision 10 - 14 is used, the key space size for two coupling parameters, three initial conditions, and three control parameters of the chaotic map is over 2279, so the key space is very large to resist all kinds of <b>brute</b> <b>force</b> <b>attacks.</b>|$|R
50|$|PBA {{is easily}} {{defeated}} with Evil Maid style of attacks. However, with modern hardware (including TPM) most FDE solutions {{are able to}} ensure removal of hardware for <b>brute</b> <b>force</b> <b>attacks</b> are no longer possible.|$|R
2500|$|It is {{a common}} {{misconception}} that every encryption method can be broken. In connection with his WWII work at Bell Labs, Claude Shannon proved that the one-time pad cipher is unbreakable, provided the key material is truly random, never reused, kept secret from all possible attackers, and of equal or greater length than the message. Most ciphers, apart from the one-time pad, can be broken with enough computational effort by <b>brute</b> <b>force</b> <b>attack,</b> but the amount of effort needed may be exponentially dependent on the key size, {{as compared to the}} effort needed {{to make use of the}} cipher. In such cases, effective security could be achieved if it is proven that the effort required (i.e., [...] "work factor", in Shannon's terms) is beyond the ability of any adversary. This means it must be shown that no efficient method (as opposed to the time-consuming brute force method) can be found to break the cipher. Since no such proof has been found to date, the one-time-pad remains the only theoretically unbreakable cipher.|$|E
50|$|It {{has been}} shown that linear {{cryptanalysis}} can break NUSH with less effort than a <b>brute</b> <b>force</b> <b>attack.</b>|$|E
50|$|The {{simplest}} {{method to}} read encrypted data without actually decrypting it is a <b>brute</b> <b>force</b> <b>attack</b> - simply attempting every number, {{up to the}} maximum length of the key. Therefore, {{it is important to}} use a sufficiently long key length; longer keys take exponentially longer to attack, rendering a <b>brute</b> <b>force</b> <b>attack</b> impractical. Currently, key lengths of 128 bits (for symmetric key algorithms) and 1024 bits (for public-key algorithms) are common.|$|E
5000|$|... crypt is {{considered}} far too cryptographically weak to withstand <b>brute</b> <b>force</b> <b>attacks</b> by modern computing systems (Linux systems generally ship with GNU Privacy Guard which {{is considered}} to be reasonably secure by modern standards) ...|$|R
5000|$|Use {{of a long}} {{random number}} or string as the session key. This reduces the risk that an {{attacker}} could simply guess a valid session key {{through trial and error}} or <b>brute</b> <b>force</b> <b>attacks.</b>|$|R
40|$|Abstractâ€”Considering the {{complexities}} involved in Cloud computing, {{there are still}} plenty of issues that affect the privacy of data in cloud environment. Unless these problems get solved, {{we think that the}} problem of preserving privacy in cloud databases is still open. In tokenization and homomorphic cryptography based solutions for privacy preserving cloud database querying, there is possibility that by colluding with service provider adversary may run <b>brute</b> <b>force</b> <b>attacks</b> that will reveal the attribute values. In this paper we propose a solution by defining the variant of K â€“ means clustering algorithm that effectively detects such <b>brute</b> <b>force</b> <b>attacks</b> and enhances privacy of cloud database querying by preventing this attacks...|$|R
50|$|As of October 2006, no key {{recovery}} attacks better than <b>brute</b> <b>force</b> <b>attack</b> are known against Grain Version 1.0.|$|E
50|$|The {{architecture}} of the processor makes it better suited to hardware-assisted cryptographic <b>brute</b> <b>force</b> <b>attack</b> applications than conventional processors.|$|E
50|$|The DES Challenges were {{a series}} of <b>brute</b> <b>force</b> <b>attack</b> {{contests}} created by RSA Security to highlight the lack of security provided by the Data Encryption Standard.|$|E
2500|$|... bcrypt is a {{password}} hashing function which, {{combined with a}} variable number of iterations (work [...] "cost"), exploits the expensive key setup phase of Blowfish to increase the workload and duration of hash calculations, further reducing threats from <b>brute</b> <b>force</b> <b>attacks.</b>|$|R
50|$|Kippo is a medium-interaction SSH {{honeypot}} {{written in}} Python. Kippo {{is used to}} log <b>brute</b> <b>force</b> <b>attacks</b> and the entire shell interaction performed by an attacker. It is inspired by Kojoney. The source code is released under the New BSD License.|$|R
5000|$|... bcrypt is a {{password}} hashing function which, {{combined with a}} variable number of iterations (work [...] "cost"), exploits the expensive key setup phase of Blowfish to increase the workload and duration of hash calculations, further reducing threats from <b>brute</b> <b>force</b> <b>attacks.</b>|$|R
50|$|The {{resulting}} 64-bit data {{is to be}} used as a DES key. Due to step 3, a <b>brute</b> <b>force</b> <b>attack</b> {{needs to}} test only 240 possible keys.|$|E
50|$|The {{contests}} {{are associated}} with the distributed.net group, which had actively participated in the challenge by making use of distributed computing to perform a <b>brute</b> <b>force</b> <b>attack.</b>|$|E
50|$|In other words, {{the data}} {{used as an}} {{encryption}} key has a low entropy, meaning that guessing the session key is possible via a modest <b>brute</b> <b>force</b> <b>attack.</b>|$|E
50|$|Microchip {{introduced}} in 1996 {{a version of}} KeeLoq ICs which use a 60-bit seed. If a 60-bit seed is being used, an attacker would require approximately 100 days of processing on a dedicated parallel <b>brute</b> <b>force</b> <b>attacking</b> machine before the system is broken.|$|R
50|$|Much like symmetric-key ciphers are {{vulnerable}} to <b>brute</b> <b>force</b> <b>attacks,</b> every cryptographic hash function is inherently vulnerable to collisions using a birthday attack. Due to the birthday problem, these attacks are much faster than a <b>brute</b> <b>force</b> would be. A hash of n bits can be broken in 2n/2 time (evaluations of the hash function).|$|R
50|$|Environmental {{security}} - The {{concentration of}} computing resources and users {{in a cloud}} computing environment also represents a concentration of security threats. Because of their size and significance, cloud environments are often targeted by virtual machines and bot malware, <b>brute</b> <b>force</b> <b>attacks,</b> and other attacks.|$|R
