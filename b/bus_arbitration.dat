116|19|Public
25|$|An MMU {{effectively}} performs {{virtual memory}} management, handling {{at the same}} time memory protection, cache control, <b>bus</b> <b>arbitration</b> and, in simpler computer architectures (especially 8-bit systems), bank switching.|$|E
25|$|The PCI bus arbiter {{performs}} <b>bus</b> <b>arbitration</b> among multiple masters on the PCI bus. Any {{number of}} bus masters can reside on the PCI bus, {{as well as}} requests for the bus. One pair of request and grant signals is dedicated to each bus master.|$|E
5000|$|Some systems, such as Conventional PCI, have {{a single}} {{centralized}} <b>bus</b> <b>arbitration</b> device that one can point to as [...] "the" [...] bus arbiter.Other systems use decentralized <b>bus</b> <b>arbitration,</b> where all the devices cooperate to decide who goes next.|$|E
50|$|The ZV port is {{a direct}} {{connection}} between the PC card slot and VGA controller. Video data is transferred in real time without any buffering, removing the need for <b>bus</b> mastering or <b>arbitration.</b>|$|R
40|$|The {{emphasis}} of {{this course is}} {{an understanding of the}} system architecture around the proces-sor. Course covers all types of modern semiconductor memory, cache and virtual memory or-ganization, hard disk drives and video-output subsystem. Course gives classification of buses and description of concepts of bus organization, <b>bus</b> protocols, <b>arbitration</b> mechanisms and the concept of Direct Memory Access (DMA). The laboratory projects include design of Cache Controller and VGA-signal generator using VHDL in Xilinx CAD environment...|$|R
50|$|The bus is {{controlled}} {{by a set of}} nine lines, known as the <b>arbitration</b> <b>bus.</b> All communications are controlled by the card in slot one of the Eurocard chassis, known as the arbiter module. Two arbitration modes are supported - Round Robin and Prioritized.|$|R
50|$|The CPU {{clock and}} the <b>bus</b> <b>arbitration</b> network were {{implemented}} using 15ns PALs.|$|E
5000|$|Single master, up to 16 slaves (i.e. no <b>bus</b> <b>arbitration).</b> This is {{the value}} {{recommended}} by the LIN Consortium to achieve deterministic time response.|$|E
50|$|An MMU {{effectively}} performs {{virtual memory}} management, handling {{at the same}} time memory protection, cache control, <b>bus</b> <b>arbitration</b> and, in simpler computer architectures (especially 8-bit systems), bank switching.|$|E
50|$|The Amiga 3000 and 4000 lines use Super Buster for <b>bus</b> {{control and}} <b>arbitration</b> of both Zorro II and Zorro III subsystems. Super Buster's {{development}} {{was never really}} finished, so there are various levels of compatibility. All revision Super Buster are pin-compatible and can be upgraded.|$|R
50|$|IEEE 1394a {{offers a}} couple of {{advantages}} over the original IEEE 1394-1995. 1394a is capable of arbitration accelerations, allowing the <b>bus</b> to accelerate <b>arbitration</b> cycles to improve efficiency. It also allows for arbitrated short bus reset, in which a node can be added or dropped without causing a big drop in isochronous transmission.|$|R
40|$|Several {{architectural}} innovations {{intended to}} reduce access latency and improve overall throughput increase system bandwidth requirements. Bandwidth scales with clock speed, {{and can be}} regarded as an architectural resource to be applied to latency reduction. A properly designed <b>bus</b> provides low <b>arbitration</b> latency and delivers high sustained bandwidth. This paper evaluates the performance of 3. 2 Gbyte/s peak bandwidth, low-latency <b>arbitration</b> <b>bus</b> connecting a GaAs superscalar CPU to a GaAs memory management unit. A microarchitectural performance model was written in the Verilog hardware description language. Bus transactions characteristic of the SPECint 92 benchmarks and other workloads were generated as input. Sustained bandwidths of 1. 68 Gbytes/s were achieved with arbitration costs of less than 0. 5 cycles per data transfer. Keywords: I/O Microarchitecture, Bandwidth, Latency, Hardware Description Language, Performance Modeling. 1 Introduction Processor clock speeds are increasing [...] ...|$|R
50|$|Buster is the {{expansion}} BUS conTrollER {{and was used}} in the Amiga 2000(B), integrating discrete logic from the original A2000(A). Buster controls <b>bus</b> <b>arbitration</b> and DMA for the Zorro II expansion subsystem.|$|E
50|$|All SLIMbus Devices use DATA and CLK to {{synchronize}} with the bus configuration in use, to receive or transmit messages and data, and to implement <b>bus</b> <b>arbitration,</b> collision detection, and contention resolution between devices.|$|E
50|$|One of {{the most}} elegant {{features}} of the Futurebus design is its distributed <b>bus</b> <b>arbitration</b> mechanism. See US patent number 5060139 for more information. In the end this {{was replaced by a}} central arbiter.|$|E
40|$|The NTNU Test Satellite is double CubeSat {{being built}} at NTNU. The main payload of the {{satellite}} is a camera for earth observations. The satellite {{is based on a}} modular design with a "motherboard" style backplane where modules are placed in slots. In the current revisions of the backplane, lack of documentation and partially incomplete schematics combined with an increase in complexity over several iterations has made the task of realizing the backplane within an acceptable time-frame difficult. For data transfer the current backplane makes use of two parallel I 2 C buses for redundancy and a custom made <b>arbitration</b> <b>bus</b> for <b>arbitration</b> between the two OBCs (On-board Controllers) in the satellite. This results in a complex arbitration scheme having to be implemented in software with the potential of fault propagation over the <b>arbitration</b> <b>bus</b> between modules. A new design is proposed using CAN bus with built in arbitration with priority based on message address. Due to the robust nature of the CAN bus a single bus is considered able to replace the two I 2 C buses. In the current design control signals for the backplane are sent using a single wire custom serial bus implementation based on shift-registers. The proposed new design connects the control of utility functions and housekeeping on the backplane, such as module power management, to the CAN bus. A new schematic design for the backplane is presented and test methodology suggested. The design is partially assembled on breadboard and tested. Lastly a partial hardware test and verification is presented before a conclusion is reached on the reduced complexity and future ease of implementation when it comes to board layout and production...|$|R
40|$|This paper {{describes}} a fault-tolerant steer-by-wire road wheel control system. With dual motor and dual microcontroller architecture, this system has {{the capability to}} tolerate single-point failures without degrading the control system performance. The <b>arbitration</b> <b>bus,</b> mechanical arrangement of motors, and the developed control algorithm allow the system to reconfigure itself automatically {{in the event of}} a single-point fault, and assure a smooth reconfiguration process. Both simulation and experimental results illustrate the effectiveness of the proposed fault-tolerant control system...|$|R
50|$|Regardless of the {{arbitration}} mode, a card can {{attempt to}} become the bus master by holding {{one of the four}} Bus Request lines low. With round robin arbitration, the arbiter cycles amongst Bus Request lines BR0-BR3 to determine which of the potentially simultaneous requesters will be granted the <b>bus.</b> With priority <b>arbitration,</b> BR0-BR3 use a fixed priority scheme (BR0 lowest, up to BR3 highest) and the arbiter will grant the bus to the highest priority requestor.|$|R
5000|$|As a side effect, the CAN {{identifier}} {{groups in}} Figure 1 affect {{the priority of}} the message transmission in case of <b>bus</b> <b>arbitration.</b> The communication channels are therefore arranged according to their relative importance: ...|$|E
50|$|Many of the {{technical}} features (asynchronous data bus, distributed <b>bus</b> <b>arbitration,</b> large board size) are shared with IEEE standard FASTBUS.FASTBUS {{was used as a}} data acquisition system in many high-energy physics experiments in the 1980s and 1990s.|$|E
50|$|LatticeMico32 is a 32-bit {{microprocessor}} {{soft core}} from Lattice Semiconductor optimized for field-programmable gate arrays (FPGAs). It uses a Harvard architecture, {{which means the}} instruction and data buses are separate. <b>Bus</b> <b>arbitration</b> logic {{can be used to}} combine the two buses, if desired.|$|E
40|$|This paper {{describes}} {{a family of}} chips used to link multiple processors together on a speed-independent communication <b>bus.</b> Sendership <b>arbitration</b> is included {{as an integral part}} of the signalling scheme, incurring very little overhead and providing a measure of fairness. The protocol allows for one-to-many communication in which the sender must wait for all receivers to respond to each datum transmitted. The width of the data bus is arbitrary, and only three control wires are necessary for normal transmission cycles. In order to alleviate congestion, the global bus may be divided into several local buses by a method which is entirely transparent to the processor software. Thus the bus topology may be reconfigured for each processing network using these chips as building blocks. Functional verification of speed-independent circuits is also discussed. The problem is seen to be very complex, but some conclusions are drawn about the type of tools which will be helpful in implementing self-timed systems. </p...|$|R
40|$|This paper {{introduces}} MARBLE, the Manchester Asyn-chRonous Bus for Low Energy, a two channel mi-cropipeline <b>bus</b> with centralized <b>arbitration</b> {{and address}} decoding which {{provides for the}} interconnection of asyn-chronous VLSI macrocells. In addition to basic bus func-tionality, MARBLE supports bus-bridging and test access, demonstrating that all the functions of a high speed macro-cell bus can be implemented efficiently in a fully asyn-chronous design style. MARBLE {{is used in the}} AMULET 3 i microprocessor to connect the CPU core and DMA controller to RAM, ROM and peripherals. It exploits pipelining of the arbitration, address and data cycles, together with spatial locality op-timizations and in-order split transfers, to supply the band-width requirements of such a system. The design of a MAR-BLE initiator data interface used in the AMULET 3 i is pre-sented, including a Petri-net specification suitable for syn-thesis using the Petrify tool. ...|$|R
40|$|Bus {{architectures}} are a neccessity for today’s System-On-Chip (SoC) design. Current SoC {{design is}} getting more complex with additional features and functions. The <b>bus</b> architecure <b>arbitration</b> need to handle requests from multiple cores where this will ultimately becomes a bottleneck to the bus architecture performances. Most Intellectual Property (IP) designs today use bus protocol such as Advanced Microcontroller Bus Architecture (AMBA) Advanced High-performance Bus (AHB) and are facing such limitations. The ability for an IP core to be reusable in Network-on- Chip (NoC) based SoCs is highly desirable. The solution is to implement the AMBA Advanced eXtensible Interface (AXI) to NoC bridge which emulates the bus protocol and convert it to NoC protocol and vice versa, enabling quick migration of IPs cores designed for a traditional bus architecture to the NoC architecture. In this work, a busto- NoC bridge has been designed. The bus-to-NoC bridge converts the AMBA AXI bus protocol to NoC protocol and sends through NoC interface, achieving performance gain comparable to the traditional AMBA bus architectures. The advantages of busto- NoC bridge architecture includes 1. Two times performance gain in terms of latency and throughput compared to tranditional bus architectures. 2. Supports various AXI command signals such as protection unit supports information signals, Atomic operations signals, error response encoding for AXI and ordering rules signals. 3. The ability to support burst for memory access. This enables the migration of bus architectures to NoC architectures, which will likely be the future design trend...|$|R
50|$|The PCI bus arbiter {{performs}} <b>bus</b> <b>arbitration</b> among multiple masters on the PCI bus. Any {{number of}} bus masters can reside on the PCI bus, {{as well as}} requests for the bus. One pair of request and grant signals is dedicated to each bus master.|$|E
50|$|In CANopen the 11-bit id of a CAN-frame {{is known}} as {{communication}} object identifier, or COB-ID. In case of a transmission collision, the <b>bus</b> <b>arbitration</b> used in the CAN bus allows the frame with the smallest id to be transmitted first and without a delay. Using a low code number for time critical functions ensures the lowest possible delay.|$|E
5000|$|SCSI was {{available}} as a CD-ROM expansion option at the time, but devices with SCSI were more expensive than ATA devices due {{to the need for}} a smart interface that is capable of <b>bus</b> <b>arbitration.</b> SCSI typically added [...] to the cost of a storage device, in addition to the cost of a SCSI host adapter.|$|E
40|$|Cache {{hierarchy}} Bus Figure 3 : The template architecture models. {{defines a}} bus component. It {{is a simple}} forwarding mechanism, carrying out arbitration upon multiple accesses. The parameters used to configure this component include buswidth, <b>bus</b> cycle-time and <b>arbitration</b> details. Changing the bus to a more complex structure, such as a multistage network, can be done without too much remodelling effort. In that case, only a new Pearl module needs to be written, replacing the bus component within the template model. Finally, the memory component simulates a simple DRAM memory. It is parameterized with memory size, memory refresh rate, and memory access latencies. 4. 2 Multi-node communication model A node within the communication template model is constructed from an abstract processor, a router and multiple communication links. This setup is shown in Figure 3 (b). The nodes are connected in a topology that reflects the physical interconnection scheme of the multicomputer, resulting in [...] ...|$|R
40|$|In this paper, we {{show the}} {{usefulness}} of an agile formal method (named XFM) based on extreme programming concepts to construct abstract models from a natural language specification of a complex system. Building formal models for verification purposes is being employed in the industry for two different usage modes: (i) Descriptive Formal Models (DFM) which, are used to capture an implementation into an abstract model to submit to analysis by model checking tools, (ii) Prescriptive Formal Models (PFM) which, are used to capture natural language specifications into a formal model to analyze consistency of the specification and also as a reference model to compare a DFM against it. We propose XFM as a methodology to incrementally build a correct PFM from a natural language specification. In this paper, using XFM, on various examples related to microprocessors, we build the models of DLX pipeline in SPIN, the ISA <b>bus</b> monitor and <b>arbitration</b> phase of the Pentium Pro bus in SMV. 1...|$|R
40|$|The mesh is {{a popular}} multi-computer {{topology}} due to its simplicity and need for few connections, regardless {{of the size of}} the system. However, one-to-all (broadcast- ing) or point-to-point communication between two nodes far away result in a long delay. In this paper, we propose a mesh with a global bus as a multi-computer topology. This structure enhances the communication capability of the mesh and shows that the mesh with a global bus has more salient properties than the mesh, the hypercube, or other variants. These properties includes a small diameter, a relatively small degree, small average distance, suitability for broadcasting, small initial data distribution time, etc. We propose a dynamic load distribution algorithm to utilize the enhanced communication capability of the mesh with a global bus. Also, asynchronous <b>bus</b> control and <b>arbitration</b> logics are designed to support the proposed algorithm efficiently. It has been shown through simulation that the proposed dynamic load [...] ...|$|R
50|$|If {{multiple}} {{devices are}} able to master the bus, {{there needs to be}} a <b>bus</b> <b>arbitration</b> scheme to prevent multiple devices attempting to drive the bus simultaneously. A number of different schemes are used for this; for example SCSI has a fixed priority for each SCSI ID. PCI does not specify the algorithm to use, leaving it up to the implementation to set priorities.|$|E
50|$|A strict Master-Slave {{relationship}} {{means that}} {{at any point in}} time, only one device can be the Master of the Q-bus. This master device can initiate data transactions which can then be responded to by a maximum of one selected slave device. (This had no effect on whether a given bus cycle is reading or writing data; the bus master can command either type of transaction.) At the end of the bus cycle, a <b>bus</b> <b>arbitration</b> protocol then selects the next device to be given mastery of the bus.|$|E
50|$|All units ran {{much faster}} than the {{original}} TRS-80, at 4 MHz, (with a software selectable throttle to the original speed for compatibility purposes) and the display supported upper and lower case, hardware snow suppression (video ram <b>bus</b> <b>arbitration</b> logic), and an improved character font set. The floppy disk interface supported dual density, and disk capacities up to 800 KB, {{more than four times}} the capacity of the original TRS-80. A special version of NewDos/80, (an improved TRS-DOS compatible Disk operating system) was used to support these disk capacities when using the TRS-80 compatibility mode.|$|E
40|$|International audiencePredictability is an {{important}} aspect in real-time and safety-critical systems, where non-functional properties – such as the timing behavior – have high impact on the system cor-rectness. As many safety-critical systems have a growing performance demand, simple, but outdated architectures are not sufficient anymore. Instead, multi-core systems {{are more and more}} popular, even in the real-time domain. To combine the performance benefits of a multi-core architecture with the required predictability, Time Division Multiple Access (TDMA) buses are often advocated. In this paper, we are interested in accesses to shared resources in such environments. Our approach uses SMT (Satisfiability Modulo Theory) to encode the semantics and execution time of the analyzed program in an environment with shared resources. We use an SMT-solver to find a solution that corresponds to the execution path with correct semantics and maximal execution time. We propose to model a shared <b>bus</b> with TDMA <b>arbitration</b> policy. Using examples, we show how the WCET estimation is enhanced by combining the semantics and the shared bus analysis in SMT...|$|R
40|$|This thesis {{investigates the}} {{plausibility}} of designing {{and developing a}} versatile, reusable, high speed interface for custom computing applications, based on the Peripheral Component Interface (PCI) Bus. A PCI I/O board was developed, utilizing mainly Complex Programmable Logic Devices (CPLD 2 ̆ 7 s), which included a custom Direct Memory Access (DMA) Controller {{to take advantage of}} the unique feature set of the PCI <b>bus.</b> The <b>arbitration</b> mechanisms and performance characteristics of the PCI bus are taken advantage of in order to achieve a maximum burst throughput rate of 66 Megabytes per second. Performance characteristics of the I/O board are analyzed for two separate PCI host systems. In the faster of the two systems, a 166 MHz Pentium PC, a maximum aggregate throughput rate of 54 Megabytes per second for PCI burst writes was achieved. In all cases throughput increased as a function of transfer size. Due to buffering implementations in the host systems write performance was always superior to read performance. In addition to exceptional throughput capability, this implementation provides a design engineer with a versatile interface which can be mated to a number of high performance applications. The PCI I/O board 2 ̆ 7 s external interface is implemented with a CPLD which can be quickly and easily modified to meet the needs of practically any custom interface without decreasing PCI bus performance. Using the on-board latency timer and programmable FIFO 2 ̆ 7 s the board can be fine tuned to meet a variety of application requirements. The two main design goals were to provide unlimited bursting capability and to transfer 32 -bits of data on every clock. The first was achieved through the implementation of a 32 -bit burst Transfer Count register. The second goal had to be reduced by 50...|$|R
40|$|The {{complexity}} of today’s embedded applications requires mod-ern high-performance embedded System-on-Chip (SoC) platforms to be multiprocessor architectures. Advances in FPGA technology make {{the implementation of}} such architectures in a single chip (MP-SoC) feasible and very appealing. In recent years, the FPGA ven-dors integrated enormous amount of hardware resources in their FPGAs allowing larger and more complex MPSoCs {{to be built in}} their FPGA fabric. The main limitation on the size of an MPSoC that can be built in a single FPGA appears to be the amount of on-chip memory. To relax this limitation, the usage of external (off-chip) memory has to be considered. The state-of-the-art development tools support off-chip memory for (multi-master) shared <b>bus</b> architectures with <b>arbitration</b> of the memory accesses. Such architectures might be efficient for single processor systems however for multiproces-sor systems the shared bus concept significantly limits the systems performance even if a DMA mechanism is used. In this paper we present our approach and interface when using an external memory for inter-processor data communication in mul-tiprocessor platforms. We propose a hierarchical memory system with a programmable controller to transfer data between external and on-chip memories using a DMA mechanism. Our approach does not require arbitration which results in better overall performance. Results demonstrating the effectiveness of the proposed hierarchical memory system are presented as well. 1...|$|R
