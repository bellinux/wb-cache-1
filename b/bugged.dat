547|10000|Public
5|$|Alsos teams {{rounded up}} German {{scientists}} including Kurt Diebner, Otto Hahn, Walther Gerlach, Werner Heisenberg, and Carl Friedrich von Weizsäcker, who {{were taken to}} England where they were interned at Farm Hall, a <b>bugged</b> house in Godmanchester. After the bombs were detonated in Japan, the Germans were forced to confront {{the fact that the}} Allies had done what they could not.|$|E
5|$|Because of Billingsley's long-standing {{friendship}} with Federal Bureau of Investigation (FBI) head J. Edgar Hoover, rumors persisted that the Stork Club was <b>bugged.</b> During {{his work on}} the Stork Club book, author and New York Times reporter Ralph Blumenthal was contacted by Jean-Claude Baker, one of Josephine Baker's sons. Having read an article by Blumenthal about Leonard Bernstein's FBI file, he indicated that he had read his mother's FBI file and by comparing the file to the tapes, said he thought the Stork Club incident was overblown.|$|E
5|$|Tintin joins {{his friends}} {{a few days}} later, where he points out to Haddock and Calculus that their villa is <b>bugged.</b> He {{recognises}} one of the staff as Pablo, {{a man who had}} saved his life in The Broken Ear. From Pablo, Tintin learns that the entire scenario is a plot organised by Colonel Sponsz, a figure in the Bordurian military who is assisting Tapioca's government in order to gain revenge against Tintin for the events of The Calculus Affair.|$|E
40|$|<b>Bugs</b> {{severely}} hurt blockchain system dependability. A {{thorough understanding}} of blockchain <b>bug</b> characteristics is required to design effective tools for preventing, detecting and mitigating <b>bugs.</b> We perform an empirical study on <b>bug</b> characteristics in eight representative open source blockchain systems. First, we manually examine 1, 108 <b>bug</b> reports {{to understand the nature}} of the reported <b>bugs.</b> Second, we leverage card sorting to label the <b>bug</b> reports, and obtain ten <b>bug</b> categories in blockchain systems. We further investigate the frequency distribution of <b>bug</b> categories across projects and programming languages. Finally, we study the relationship between <b>bug</b> categories and <b>bug</b> fixing time. The findings include: (1) semantic <b>bugs</b> are the dominant runtime <b>bug</b> category, (2) frequency distributions of <b>bug</b> types show similar trends across different projects and programming languages, (3) security <b>bugs</b> take the longest median time to be fixed, (4) 35. 71 % performance <b>bugs</b> are fixed in more than one year, performance <b>bugs</b> take the longest average time to be fixed...|$|R
40|$|Compatible with CAJALv 1. 8 Features PUT/GET {{interfaces}} for SWC files. PUT/GET interfaces for NIFTI files. RESTful interfaces for {{create and}} delete channel. Documentation for Web-Console. Faster blosc interface <b>Bug</b> Fixes PutAnnotation <b>Bug</b> Fix. Voxeks Offset <b>Bug</b> Fix. DeleteAnnotaiton <b>Bug</b> Fix. CATMAID Tiles <b>Bug</b> Fix. GraphGen Test <b>Bug</b> Fix. Django combined with celery. Tasks <b>bug</b> Fix. Iso Projinfo <b>bug</b> Fixed in JSON Projinfo. NOTE:This is not fixed for hdf 5 projinfo Setup config files fixed. Misc OCPviz <b>bug</b> fixes...|$|R
40|$|Concurrency <b>bugs</b> are {{difficult}} to find and fix. To help with finding and fixing concurrency <b>bugs,</b> prior research has mostly focused on static or dynamic analyses for finding spe-cific classes of <b>bugs.</b> We present an approach whose focus is understanding the differences between concurrency and non-concurrency <b>bugs,</b> the differences among various con-currency <b>bug</b> classes, and predicting <b>bug</b> quantity, type, and location, from patches, <b>bug</b> reports and bug-fix met-rics. First, we show that <b>bug</b> characteristics and bug-fixing processes vary significantly among different kinds of concur-rency <b>bugs</b> and compared to non-concurrency <b>bugs.</b> Next, we build a quantitative predictor model to estimate concur-rency <b>bugs</b> appearance in future releases. Then, we build a qualitative predictor that can predict the type of concur-rency <b>bug</b> for a newly-filed <b>bug</b> report. Finally, we build a <b>bug</b> location predictor to indicate the likely source code loca-tion for newly-reported <b>bugs.</b> We validate the effectiveness of our approach on three popular projects, Mozilla, KDE, and Apache. 1...|$|R
5|$|When Amato breaks his {{telephone}} in a rage, he finds {{one of the}} surveillance devices. Tubbs quickly calls him, claiming to have been <b>bugged</b> as well, and the two arrange to move the buy to that evening. Amato is noticeably on-edge during the meet, and is desperate to unload the missiles. The buy is set to {{take place at the}} docks, and the remainder of the Metro-Dade vice squad arrive with federal agents to complete the bust, taking Amato into custody safely.|$|E
5|$|Judge Appleby also {{threatened}} Kunstler with dismissal {{and contempt}} of court after he delivered an October 21, 1976 speech at nearby Rutgers University that in part discussed the upcoming trial, but later ruled that Kunstler could represent Shakur. Until obtaining a court order, Williams was forced to strip naked and undergo a body search before each visit with Shakur—during which Shakur was shackled to a bed by both ankles. Judge Appleby also refused to investigate a burglary of her defense counsel's office {{that resulted in the}} disappearance of trial documents, amounting to half of the legal papers related to her case. Her lawyers also claimed that their offices were <b>bugged.</b>|$|E
5|$|The {{girls and}} the Rippers sneak into W, {{where they are}} ambushed. Kesslee, whose body had been reconstructed by the cybernetic surgeon Che'tsai (James Hong), reveals that Tank Girl has unknowingly been <b>bugged.</b> Deetee is killed. While the Rippers turn the tide of the battle, Jet Girl kills Sergeant Small (Don Harvey), who had earlier sexually harassed her. Kesslee reveals that Sam is in the pipe, her life {{endangered}} by rising water. Tank Girl uses her tank to kill Kesslee, then pulls Sam out of the pipe. The film ends with an animated sequence showing water starting to flow freely. Tank Girl drives down rapids, pulling Booga behind on water-skis, then takes them over a waterfall, shouting for joy.|$|E
5000|$|Chariot <b>Bugs</b> a.k.a. Minion <b>Bugs</b> - About {{the size}} of Sentry <b>Bugs</b> and bearing a {{resemblance}} to common roaches, these <b>Bugs</b> accompany and serve the Brain <b>Bugs.</b> When needed, the Brain <b>Bugs</b> can lie {{on top of them}} to be moved about.|$|R
40|$|In {{open-source}} {{software development}} a new <b>bug</b> firstly is found by developers or users. Then the <b>bug</b> {{is described as}} a <b>bug</b> report, which is submitted to a <b>bug</b> repository. Finally the <b>bug</b> triager checks the <b>bug</b> report and typically assigns a developer to fix the <b>bug.</b> The assignment process is time-consuming and error-prone. Furthermore, a large number of <b>bug</b> reports are tossed (reassigned) to other developers, which increases bug-fix time. In order to quickly identify the fixer to <b>bug</b> reports we present an approach based on the <b>bug</b> tossing history and textual similarities between <b>bug</b> reports. This proposed approach is evaluated on Eclipse and Mozilla. The results show that our approach can significantly improve the efficiency of <b>bug</b> assignment: the <b>bug</b> fixer is often identified with fewer tossing events. </p...|$|R
40|$|Abstract To design {{effective}} {{tools for}} detecting and recovering from soft-ware failures requires a {{deep understanding of}} software <b>bug</b> characteristics. We study software <b>bug</b> characteristics by sampling 2, 060 real world <b>bugs</b> in three large, representative open-source projects—the Linux kernel, Mozilla, and Apache. We manually study these <b>bugs</b> in three dimensions—root causes, impacts, and components. We further study the correlation between categories in different dimensions, and the trend {{of different types of}} <b>bugs.</b> The findings include: (1) semantic <b>bugs</b> are the dominant root cause. As software evolves, semantic <b>bugs</b> increase, while memory-related <b>bugs</b> decrease, calling for more research effort to address semantic bugs; (2) the Linux kernel operating sys-tem (OS) has more concurrency <b>bugs</b> than its non-OS counterparts, suggesting more effort into detecting concurrency <b>bugs</b> in operating system code; and (3) reported security <b>bugs</b> are increasing, and the majority of them are caused by semantic <b>bugs,</b> suggesting more support to help developers diagnose and fix security <b>bugs,</b> especially semantic security <b>bugs.</b> In addition, to reduce the manual effort in building <b>bug</b> benchmarks for evaluating <b>bug</b> detection an...|$|R
5|$|At {{the urging}} of Groves and Furman, the Alsos Mission was created on 4 April 1944 {{under the command of}} Lieutenant Colonel Boris Pash to conduct {{intelligence}} in the field relating to the German nuclear energy project. The more experienced British considered creating a rival mission, but in the end {{agreed to participate in the}} Alsos Mission as a junior partner. In June 1945, Welsh reported that the German nuclear physicists captured by the Alsos Mission were in danger of being executed by the Americans, and Jones arranged for them to be moved to Farm Hall, a country house in Huntingdonshire used for training by MI6 and the Special Operations Executive (SOE). The house was <b>bugged,</b> and the conversations of the scientists were recorded.|$|E
5|$|Throughout the writing, {{and also}} the filming stages of the series, the writers were advised by ex-MI5 {{officers}} who gave insight into how the characters operate and how their personal lives {{would be affected by}} it. Among the advisors were Nick Day, who worked in counter-terrorism in the Security Services, Viktor Abramkin, a UK-based former KGB officer, and Mike Baker, an ex-CIA agent. When including terrorists, the BBC often has the responsibility to portray people with as much balance as possible for both sides. The first series finale was heavily researched, as the episode was based on real life instances in which terrorists agreed to work with the authorities in Colombia. Meanwhile, a scene in which Tom and Patrick strip naked to ensure they are not <b>bugged</b> came from the producers' sources. The sources also advised the producers how to tail targets without being spotted.|$|E
5|$|A {{spin-off}} titled Summer Days, {{was released}} on June 23, 2006, retelling the original game during summer vacation and {{from the perspective of}} Setsuna Kiyoura. Unlike its predecessor, however, Summer Days was almost universally panned for its heavily <b>bugged</b> state, loads of patches, and recall. Another spin-off titled Cross Days {{was released on}} March 19, 2010. Set in the same continuity as School Days, Cross Days follows the life of another protagonist, Yuuki Ashikaga, a high school freshman who also finds himself caught between the affection of two girls, Roka Kitsuregawa and Kotonoha Katsura, during his second term at Sakakino Academy. The game also features yaoi scenarios, during which Yuuki cross-dresses as a maid. 0verflow released Shiny Days on February 2, 2012 which establishes a solid link between the Days series and Radish Vacation series. A third spin-off, Island Days, was developed for the Nintendo 3DS and was released in Japan on July 3, 2014. The game, developed by Klon, focuses on Makoto and the girls becoming trapped on a remote island and includes tower defense elements.|$|E
50|$|Eurydema oleracea is {{a species}} of shield <b>bug</b> in the Pentatomidae family and is {{commonly}} known as the rape <b>bug,</b> the crucifer shield <b>bug,</b> the cabbage <b>bug</b> or the brassica <b>bug.</b>|$|R
30|$|In this study, we {{investigate}} the <b>bug</b> reports from five {{open source software}} projects, i.e., Apache Hadoop project, Apache ZooKeeper project, Oozie project, Accumulo project and Apache Spark project. We classify the reported <b>bugs</b> into three distinct categories, i.e., fixed and closed concurrency <b>bugs,</b> fixed and closed non-concurrency <b>bugs</b> and unreproducible <b>bugs.</b> We further classify the concurrency <b>bugs</b> based on <b>bug</b> type. For concurrency and non-concurrency we additionally consider severity and fixing time. We compare the non-concurrency, concurrency and unreproducible <b>bugs</b> {{in terms of their}} reporting frequency. Our results indicate that a relatively small share of <b>bugs</b> is related to concurrency issues, while the vast majority are non-concurrency <b>bugs.</b> Fixing time for concurrency and non-concurrency <b>bugs</b> is different but this difference is not big. However, the fixing time for unreproducible concurrency and unreproducible non-concurrency <b>bugs</b> is similar. In addition, concurrency <b>bugs</b> are considered to be slightly severer than non-concurrency <b>bugs.</b>|$|R
5000|$|Agonoscelis pubescens (Thunb.) - Andat <b>bug,</b> Sudan dura <b>bug,</b> Pentatomid sorghum <b>bug,</b> African cluster <b>bug,</b> syn. A. versicolor (Fabricius, 1794) ...|$|R
5|$|From {{early in}} his career, Wałęsa was {{interested}} in workers' concerns; in 1968 he encouraged shipyard colleagues to boycott official rallies that condemned recent student strikes. He was a charismatic leader, who helped organize the illegal 1970 protests at the Gdańsk Shipyard when workers protested the government's decree raising food prices and he was considered for the position of chairman of the strike committee. The strikes' outcome, which involved the deaths of over 30 workers, galvanized Wałęsa's views {{on the need for}} change. In June 1976, Wałęsa lost his job at the Gdańsk Shipyard because of his continued involvement in illegal unions, strikes, and a campaign to commemorate the victims of the 1970 protests. Afterwards he worked as an electrician for several other companies but his activism led to him continually being laid off and he was jobless for long periods. Wałęsa and his family were under constant surveillance by the Polish secret police; his home and workplace were always <b>bugged.</b> Over the next few years, he was arrested several times for participating in dissident activities.|$|E
5|$|Micro Machines was {{completed}} in September 1990. The game did not go through quality assurance, and as a result, a major bug that caused the game to crash was discovered near completion. The bug occurred when the player tried to reverse on the first race, and escaped notice because none of the testers thought to do so as {{they thought it was}} so easy. It was determined that just one binary bit was wrong, and a device that functioned like a miniature Game Genie was installed on the cartridges to correct it, as by the time the bug was discovered, there were plenty of ROM chips containing the <b>bugged</b> version. Micro Machines was released for the NES by Camerica in 1991. Nintendo wanted development halted because Codemasters did not have a licence from them, and sued Galoob over the sales of the Game Genie. Courts ruled in Galoob's favour (Nintendo appealed, but the ruling was upheld), but the legal issues meant that sales of the NES version were not as good as hoped.|$|E
5|$|On August 29, 2016 (August 29, 1997, {{being the}} date when Skynet becomes self-aware in the films), it was {{announced}} that the film would be digitally remastered in 3D to commemorate its 25th anniversary, with a worldwide re-release planned for summer 2017. The version to be remastered and rereleased in 3D was the original 137 minute theatrical cut, as the extended edition is not James Cameron's preferred version. Only one camera shot from the opening chase sequence was digitally altered to fix a minor continuity error which had <b>bugged</b> Cameron since the 1991 release. DMG Entertainment and Studiocanal worked together with Cameron to convert the film using the StereoD technology. The 3D version premiered on February 17, 2017, at the Berlin International Film Festival, with the theatrical re-release being scheduled for August 25, 2017. Similar to Cameron's Titanic 3D, Lightstorm Entertainment oversaw the work on the 3D version of Terminator 2, which took nearly a year to finish. The film was released by Distrib Films US which typically handles the release of French films. The studio released the film exclusively for one week in AMC Theatres nationwide, and said that it will expand depending on the film's performances in its first week.|$|E
50|$|He {{also appears}} in the video games Loons: The Fight for Fame, Taz: Wanted, <b>Bugs</b> Bunny Crazy Castle, The <b>Bugs</b> Bunny Crazy Castle 2, <b>Bugs</b> Bunny Crazy Castle 3, The <b>Bugs</b> Bunny Birthday Blowout, <b>Bugs</b> Bunny: Rabbit Rampage, <b>Bugs</b> Bunny in Double Trouble, <b>Bugs</b> Bunny: Lost in Time, <b>Bugs</b> Bunny and Taz: Time Busters, Sheep, Dog, 'n' Wolf, Looney Tunes B-Ball, Daffy Duck in Hollywood and Looney Tunes: Back in Action the video game.|$|R
40|$|The {{change history}} of a {{software}} project contains a rich collection of code changes that record previous development experience. Changes that fix <b>bugs</b> are especially interesting, since they record both the old buggy code and the new fixed code. This paper presents a <b>bug</b> finding algorithm using <b>bug</b> fix memories: a project-specific <b>bug</b> and fix knowledge base developed by analyzing the history of <b>bug</b> fixes. A <b>bug</b> finding tool, BugMem, implements the algorithm. The approach is different from <b>bug</b> finding tools based on theorem proving or static model checking such as Bandera, ESC/Java, FindBugs, JLint, and PMD. Since these tools use pre-defined common <b>bug</b> patterns to find <b>bugs,</b> they do not aim to identify project-specific <b>bugs.</b> <b>Bug</b> fix memories use a learning process, so the <b>bug</b> patterns are projectspecific, and project-specific <b>bugs</b> can be detected. The algorithm and tool are assessed by evaluating if real <b>bugs</b> and fixes in project histories {{can be found in}} the <b>bug</b> fix memories. Analysis of five open source projects shows that, for these projects, 19. 3 %- 40. 3 % of <b>bugs</b> appear repeatedly in the memories, and 7. 9 %- 15. 5 % of <b>bug</b> and fix pairs are found in memories. The results demonstrate that project-specific <b>bug</b> fix patterns occur frequently enough to be useful as a <b>bug</b> detection technique. Furthermore, for the <b>bug</b> and fix pairs, it is possible to both detect the <b>bug</b> and provide a strong suggestion for the fix. However, there is also a high false positive rate, with 20. 8 %- 32. 5 % of non-bug containing changes also having patterns found in the memories. A comparison of BugMem with a <b>bug</b> finding tool, PMD, shows that the <b>bug</b> sets identified by both tools are mostly exclusive, indicating that BugMem complements other <b>bug</b> finding tools...|$|R
40|$|Abstract—Software {{performance}} {{is critical for}} how users perceive the quality of software products. Performance bugs—programming errors that cause significant performance degradation—lead to poor user experience and low system throughput. Designing effective techniques to address perfor-mance <b>bugs</b> requires a deep understanding of how performance <b>bugs</b> are discovered, reported, and fixed. In this paper, we study how performance <b>bugs</b> are discovered, reported to developers, and fixed by developers, and compare the results with those for non-performance <b>bugs.</b> We study performance and non-performance <b>bugs</b> from three popular code bases: Eclipse JDT, Eclipse SWT, and Mozilla. First, we find little evidence that fixing performance <b>bugs</b> has a higher chance to introduce new functional <b>bugs</b> than fixing non-performance <b>bugs,</b> which implies that developers may {{not need to be}} over-concerned about fixing performance <b>bugs.</b> Second, although fixing performance <b>bugs</b> is about as error-prone as fixing non-performance <b>bugs,</b> fixing performance <b>bugs</b> is more difficult than fixing non-performance <b>bugs,</b> indicating that developers need better tool support for fixing performance <b>bugs</b> and testing performance <b>bug</b> patches. Third, unlike many non-performance <b>bugs,</b> a large percentage of performance <b>bugs</b> are discovered through code reasoning, not through users observing the negative effects of the <b>bugs</b> (e. g., performance degradation) or through profiling. The result suggests that techniques to help developers reason about performance, better test oracles, and better profiling techniques are needed for discovering performance <b>bugs.</b> I...|$|R
5|$|Johnson's negotiators {{hoped to}} reach a truce in Vietnam prior to the election. Nixon {{received}} astute analysis on the talks from Henry Kissinger, then a consultant to U.S. negotiator Averell Harriman, and his campaign was in regular contact with Anna Chennault (at a July 1968 meeting in Nixon's New York apartment with South Vietnamese ambassador Bùi Diễm, he had been informed that Chennault would represent Nixon during the campaign). She advised South Vietnamese president Thieu {{not to go to}} Paris to join the talks, hinting that Nixon would give him a better deal if elected. Johnson was aware of what was going on, as he had both Chennault and the South Vietnamese ambassador to Washington <b>bugged,</b> and was enraged by what he considered an attempt by Nixon to undermine U.S. foreign policy. On October 31, with no agreement, Johnson announced a unilateral halt to the bombing, and that peace negotiations would start in Paris on November 6, the day after Election Day. On November 2, after speaking with Chennault again, Thieu stated he would not go to Paris. Johnson telephoned Nixon, who denied any involvement; the President did not believe him. Johnson felt he could not publicly mention Chennault's involvement, which had been obtained by wiretapping, but told Humphrey, who chose not to use the information.|$|E
25|$|Talks between Nixon and Prime Minister Edward Heath {{may have}} been <b>bugged.</b> Heath did not {{publicly}} display his anger, with aides {{saying that he was}} unconcerned about having been <b>bugged</b> at the White House. According to officials, Heath commonly had notes taken of his public discussions with Nixon so a recording would not have bothered him. However, officials privately said that if private talks with Nixon were <b>bugged,</b> then Heath would be outraged. Even so, Heath was privately outraged over being taped without his prior knowledge.|$|E
25|$|In 1986, {{just before}} a crucial debate in campaign, Rove claimed that his office had been <b>bugged</b> by Democrats. The police and FBI {{investigated}} and discovered that the bug's battery was so small that {{it needed to be}} changed every few hours, and the investigation was dropped. Critics, including other Republican operatives, suspected Rove had <b>bugged</b> his own office to garner sympathy votes in the close governor's race.|$|E
30|$|Farchi et al. [37] {{analyzed}} concurrency <b>bugs</b> {{by creating}} such <b>bugs</b> artificially. They asked programmers to write codes which have concurrency <b>bugs.</b> We believe that artificially creating <b>bugs</b> may {{not lead to}} <b>bugs</b> that {{are representative of the}} real-world software <b>bugs.</b> We, on the other hand, analyze the <b>bug</b> database of an open-source software, which is well maintained, and widely used software.|$|R
40|$|Context: Blocking <b>bugs</b> are <b>bugs</b> {{that prevent}} other <b>bugs</b> from being fixed. Previous {{studies show that}} {{blocking}} <b>bugs</b> take approximately {{two to three times}} longer to be fixed compared to non-blocking <b>bugs.</b> Objective: Thus, automatically predicting blocking <b>bugs</b> early on so that developers are aware of them, can help reduce the impact of or avoid blocking <b>bugs.</b> However, a major challenge when predicting blocking <b>bugs</b> is that only a small proportion of <b>bugs</b> are blocking <b>bugs,</b> i. e., there is an unequal distribution between blocking and non-blocking <b>bugs.</b> For example, in Eclipse and OpenOffice, only 2. 8 % and 3. 0 % <b>bugs</b> are blocking <b>bugs,</b> respectively. We refer to this as the class imbalance phenomenon. Conclusion: ELBlocker can help deal with the class imbalance phenomenon and improve the prediction of blocking <b>bugs.</b> ELBlocker achieves a substantial and statistically significant improvement over the state-of-the-art methods, i. e., Garcia and Shihab’s method, SMOTE, OSS, and Bagging...|$|R
40|$|Open source {{projects}} often maintain open <b>bug</b> repositories during {{development and}} maintenance, and the reporters often point out straightly or implicitly {{the reasons why}} <b>bugs</b> occur when they submit them. The comments about a <b>bug</b> are very valuable for developers to locate and fix the <b>bug.</b> Meanwhile, it is very common in large software for programmers to override or overload some methods according to the same logic. If one method causes a <b>bug,</b> {{it is obvious that}} other overridden or overloaded methods maybe cause related or similar <b>bugs.</b> In this paper, we propose and implement a tool Rebug- Detector, which detects related <b>bugs</b> using <b>bug</b> information and code features. Firstly, it extracts <b>bug</b> features from <b>bug</b> information in <b>bug</b> repositories; secondly, it locates <b>bug</b> methods from source code, and then extracts code features of <b>bug</b> methods; thirdly, it calculates similarities between each overridden or overloaded method and <b>bug</b> methods; lastly, it determines which method maybe causes potential related or similar <b>bugs.</b> We evaluate Rebug-Detector on an open source project: Apache Lucene-Java. Our tool totally detects 61 related <b>bugs,</b> including 21 real <b>bugs</b> and 10 suspected <b>bugs,</b> and it costs us about 15. 5 minutes. The results show that <b>bug</b> features and code features extracted by our tool are useful to find real <b>bugs</b> in existing projects. Comment: 10 pages, 5 figures, 4 tables conference; 2010 IEEE 34 th Annual Computer Software and Applications Conferenc...|$|R
25|$|Tariq Masood (Shazad Latif; 2009–2011) Technician and Data Analyst, Section D Assassinated with a {{hydrogen}} cyanide-related compound after discovering vital intel at his <b>bugged</b> home in Series 10, Episode 2.|$|E
25|$|Sharpton {{is alleged}} to have {{secretly}} recorded conversations with black activists in the 1980s regarding Joanne Chesimard (Assata Shakur) and other underground black militants. Veteran activist Ahmed Obafemi told the New York Daily News that he had long suspected Sharpton of taping him with the <b>bugged</b> briefcase.|$|E
25|$|In 1979, {{some special}} forces units {{were accused of}} using counterinsurgent {{operations}} as cover for ivory poaching and smuggling. Colonel Reid-Daly (commander of the Selous Scouts) discovered that his phone was <b>bugged</b> and after challenging a superior officer on this issue was court martialled for insubordination. He received the lightest sentence possible, a caution, but he continued to fight his conviction and eventually resigned his commission and left the Army.|$|E
40|$|Some <b>bugs,</b> {{among the}} {{millions}} that exist, {{are similar to}} each other. When fixing a <b>bug,</b> a programmer tends to search for similar <b>bugs</b> that have been reported and resolved in the past. A fix for a similar <b>bug</b> can help him understand his <b>bug,</b> or even directly fix his <b>bug.</b> Studying <b>bugs</b> with similar symptoms, programmers may determine how to detect or resolve them. Existing work has focused on analyzing <b>bug</b> reports and other unstructured <b>bug</b> information. To tackle the problem of finding similar <b>bugs,</b> we propose and advocate the systematic use of semantic <b>bug</b> information {{in the form of}} execution traces, the most practical and precise approximation of semantics. In particular, this paper introduces novel language and tool support for performing semantic querying and analysis of <b>bugs.</b> We describe <b>bug</b> query language (BQL), a flexible query language over execution traces that allows users to express diverse queries. To support and validate our design, we developed the BQL open infrastructure that consists of a <b>bug</b> database, a query processing engine, an execution trace collection engine, and a web-based user interface. Given a <b>bug</b> and a query, BQL exhaustively searches in its database for similar <b>bugs.</b> We also provide tools for recording and uploading <b>bug</b> traces to the BQL infrastructure. We evaluated BQL on a collection of <b>bugs</b> from popular open-source projects. We show that BQL accurately and efficiently finds similar <b>bugs,</b> some of which could have been immediately used to fix open <b>bugs.</b> 1...|$|R
5000|$|Leaf-footed <b>bugs,</b> squash <b>bugs,</b> and sweetpotato <b>bugs</b> (Coreidae) ...|$|R
40|$|When {{fixing a}} <b>bug,</b> a {{programmer}} tends {{to search for}} similar <b>bugs</b> that have been resolved in the past. A fix for a similar <b>bug</b> may help him fix his <b>bug</b> or at least understand his <b>bug.</b> We designed and implemented the <b>Bug</b> Query Language (BQL) and its accompanying tools to help users search for similar <b>bugs</b> to aid debugging. This paper demonstrates the main features of the BQL infrastructure. We populated BQL with <b>bugs</b> collected from open-source projects and show that BQL could have helped users to fix real-world <b>bugs...</b>|$|R
