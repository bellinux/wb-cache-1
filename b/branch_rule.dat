8|591|Public
5000|$|Foreign {{base company}} sales income from buying goods from a related party {{and selling them}} to anyone or buying goods from anyone and selling them to a related party, where such goods are both made and for use outside the CFC's country of incorporation. A <b>branch</b> <b>rule</b> may cause {{transfers}} between a manufacturing branch of a CFC in one country and a sales branch in another country to trigger Subpart F income.|$|E
50|$|Two cadet {{branches}} ruled Alalakh, {{the first}} was founded by Yarim-Lim son of Hammurabi I in c. 1735, he had an exceptional long reign so did his successor Ammitakum who started to reign {{at the beginning of}} Niqmi-Epuh term and died shortly before the sack of Alalakh. Ammitakum asserted his autonomy from Yamhad without declaring an independent kingdom, he declared his son prince Hammurabi as his heir in the presence of Yarim-Lim III who had no part in making that decision, those acts probably played a part in Aleppo decision not to send reinforcements to protect Alalakh from the Hittites who sacked it ending the first <b>branch</b> <b>rule</b> in c. 1650 BC.|$|E
40|$|In this paper, we {{construct}} the q-Schur modules as left principle {{ideals of the}} cyclotomic q-Schur algebras, and prove that they are isomorphic to those cell modules defined in 8 and 15 at any level r. Then we prove that these q-Schur modules are free modules and {{construct the}}ir bases. This result gives us new versions of several results about the standard basis and the branching theorem. With the help of such realizations and the new bases, we re-prove the <b>Branch</b> <b>rule</b> of Weyl modules which was first discovered and proved by Wada in 23. Comment: 14 page...|$|E
40|$|Abstract. We give a modular <b>branching</b> <b>rule</b> {{for certain}} wreath {{products}} as a generalization of Kleshchev’s modular <b>branching</b> <b>rule</b> for the symmetric groups. Our result contains a modular <b>branching</b> <b>rule</b> for the complex reflection groups G(m, 1, n) (which are {{often called the}} generalized symmetric groups) in splitting fields for Z/mZ. Especially for m = 2 (which {{is the case of}} the Weyl groups of type B), we can give a modular <b>branching</b> <b>rule</b> in any field. Our proof is elementary in that it is essentially a combination of Frobenius reciprocity, Mackey theorem, Clifford’s theory and Kleshchev’s modular <b>branching</b> <b>rule.</b> 1...|$|R
40|$|AbstractWe give a modular <b>branching</b> <b>rule</b> {{for certain}} wreath {{products}} as a generalization of Kleshchev's modular <b>branching</b> <b>rule</b> for the symmetric groups. Our result contains a modular <b>branching</b> <b>rule</b> for the complex reflection groups G(m, 1,n), {{which are often}} called the generalized symmetric groups, in splitting fields for Z/mZ. Especially for m= 2, which {{is the case of}} the Weyl groups of type B, we can give a modular <b>branching</b> <b>rule</b> in any field...|$|R
40|$|Abstract. The DPLL (Davis-Putnam-Logemann-Loveland) {{procedure}} {{is one of}} the most effective methods for solving SAT problems. It is well known that its efficiency depends on the choice of the <b>branching</b> <b>rule.</b> Different <b>branching</b> <b>rules</b> are proposed in the literature. Unit propagation look-ahead (UPLA) <b>branching</b> <b>rule</b> was one of the main improvements in the DPLL procedure (e. g.,[10]). The UPLA <b>branching</b> <b>rule</b> integrated in satz SAT solver [10] performs a series of variable filtering process at each node as a static variable filtering agency. In this paper we introduce and experiment with dynamic variable filtering (DVF) based <b>branching</b> <b>rule</b> which extends the UPLA heuristic process for doing more filtering and choosing a best branching variable from an irreducible sub-formula. To enhance the performance of DVF <b>branching</b> <b>rule,</b> we integrate neighborhood variable ordering heuristic (NVO) for exploring only the neighborhood variables of the current assigned variable. Experimental results of DVF+NVO <b>branching</b> <b>rule</b> on a number of real-world benchmark instances and quasigroup problems prove our approaches to be useful in many circumstances...|$|R
40|$|The paper {{presents}} an O ∗ (1. 2312 n) -time and polynomial-space algorithm for the traveling salesman problem in an n-vertex graph with maximum degree 3. This improves the previous time bound for this problem. Our algorithm {{is a simple}} branch-and-search algorithm. The only <b>branch</b> <b>rule</b> is designed on a cut-circuit structure of a graph induced by unprocessed edges. To improve a time bound by a simple analysis on measure and conquer, we introduce an amortization scheme over the cut-circuit structure by defining the measure of an instance to be the sum of not only weights of vertices but also weights of connected components of the induced graph. ...|$|E
40|$|The paper {{presents}} an O^*(1. 2312 ^n) -time and polynomial-space algorithm for the traveling salesman problem in an n-vertex graph with maximum degree 3. This improves the previous time bounds of O^*(1. 251 ^n) by Iwama and Nakashima and O^*(1. 260 ^n) by Eppstein. Our algorithm {{is a simple}} branch-and-search algorithm. The only <b>branch</b> <b>rule</b> is designed on a cut-circuit structure of a graph induced by unprocessed edges. To improve a time bound by a simple analysis on measure and conquer, we introduce an amortization scheme over the cut-circuit structure by defining the measure of an instance to be the sum of not only weights of vertices but also weights of connected components of the induced graph. Comment: 24 pages and 4 figure...|$|E
40|$|Aspect {{composition}} — {{application of}} two or more separately developed aspects to a single target code — generally re-quires great skills and knowledge on both aspects and the target. We give a collection of rules, called extension rules, for safely composable aspects. If all the member of a set of aspects obey the extension rules, they can be safely com-posable, even if independent programmers implement them. Our extension rules restrict how aspects extend the behavior of existing methods in the target. In this paper, we say how the extension rules {{can be applied to the}} diamond inheri-tance case of mixins and then MixJuice language modules. We describe a method of verifying extension rules in those cases. We use the notion of pre- and post-conditions and be-havioral subtyping to define the composability criterion for mixins and MixJuice modules. Four specific extension rules (the After Rule, the Plus Rule, the Functional Protocol Rule and the Disjoint <b>Branch</b> <b>Rule)</b> and their verification method are presented. We also mention the future direction of our research needed to realize safe and easy aspect-oriented pro-gramming. 1...|$|E
40|$|This {{thesis is}} devoted to <b>branching</b> <b>rules</b> for Lie algebras, that is the {{description}} of decompositions of algebra representations upon restriction to a subalgebra, and consists of three major parts. In the first part the Weyl orbit-orbit <b>branching</b> <b>rules</b> are calculated for all classical simple Lie algebra - maximal regular reductive subalgebra pairs: Cm+n⊃Cm⊕C n, Dm+n⊃Dm⊕D n, Bm+n⊃Dm⊕B n, Am+n+ 1 ⊃Am⊕An⊕ u 1, Bm+ 1 ⊃Bm⊕u 1, Cm+ 1 ⊃Am⊕u 1, Dm+ 1 ⊃Dm⊕u 1, Dm+ 1 ⊃Am⊕u 1. The <b>branching</b> <b>rules</b> are given in terms of integrity bases and compatibility rules. In the second part we use results from the first part to derive the complete <b>branching</b> <b>rules</b> (i. e. representation-representation <b>branching</b> <b>rules)</b> for the algebra subalgebra series son ⊃son- 2 ⊕u 1. The <b>branching</b> <b>rules</b> are given in terms of generating functions. The third part is in character similar to the first part [...] -the Weyl orbit-orbit <b>branching</b> <b>rules</b> are computed for affine algebra-subalgebra, pairs obtained from the pairs listed above by affinization. The rules are presented in terms of integrity bases and compatibility rules...|$|R
40|$|AbstractRecently, a new {{weighted}} {{generalization of}} the <b>branching</b> <b>rule</b> for the hook lengths, {{equivalent to the}} hook formula, was proved. In this paper, we generalize the complementary <b>branching</b> <b>rule,</b> {{which can be used}} to prove Burnside’s formula. We present three different proofs: bijective, via weighted hook walks, and via the ordinary weighted <b>branching</b> <b>rule...</b>|$|R
40|$|Recently, a new {{weighted}} {{generalization of}} the <b>branching</b> <b>rule</b> for the hook lengths, {{equivalent to the}} hook formula, was proved. In this paper, we generalize the complementary <b>branching</b> <b>rule,</b> {{which can be used}} to prove Burnside's formula. We present three different proofs: bijective, via weighted hook walks, and via the ordinary weighted <b>branching</b> <b>rule.</b> Comment: 20 pages, 9 figure...|$|R
40|$|We {{present an}} amusing {{semantic}} tableau system for propositional S 5 {{which is actually}} quite efficient in practice. We assume the reader {{is familiar with the}} propositional tableau system using unsigned formulas as presented in [4], Ch. II. We continue the a, β classification of formulas, and add two new categories, necessaries (v) and possibles (π). These, together with their respective components v 0 and π 0 are defined by the following tables: v v 0 Ή π 0 πx x ox x OX X ΏX X We begin with a tableau system for propositional S 4. To the a and β rules of [4] we add the following two rules: Rule v — (i. e., if a v formula occurs on a branch, v 0 may be added {{to the end of the}} <b>branch).</b> <b>Rule</b> π: — proviso (interpreted similarly) where the proviso reads: before adding Ή 0 to the end of a branch on which Ή occurs, cross out all formulas on that branch which are not v formulas. (Note: a given occurrence of a non-y formula X may be common to several branches, and it may be desired to cross it out on only one branch. If this happens, simply add fresh occurrences of X to the ends of all branches on which it should remain undeleted.) Now a branch is called closed if it contains X and X, both un-crossed out. The above system is propositional S 4. There is a completeness proof for the corresponding first order system in [2]. To modify the above into a propositional S 5 system we add one more rule...|$|E
40|$|The march ks Sat solver is an {{upgraded}} {{version of the}} successful march dl and march eq Sat solvers, which won several awards at the Sat 2004 and Sat 2005 competitions. For the latest detailed description, we refer to [2]. Like its predecessors, march ks integrates equivalence reasoning into a DPLL architecture and uses lookahead heuristics to determine the branch variable in all nodes of the DPLL search-tree. The main improvements in march ks are: • renewed pre-processing techniques: Removal of the 3 -Sat translator and therefore a new procedure for the addition of resolvents. • an improved adaptive algorithm to trigger the DoubleLook procedure- inspired by the one used int satz by Li [1]. • a guided jumping strategy: Instead of the conventional depth-first search, march ks uses a jumping strategy based {{on the distribution of}} solutions measured on random 3 -Sat instances [3]. 2 pre-processing The pre-processor of march dl, reduces the formula at hand prior to calling the main solving (DPLL) procedure. Earlier versions already contained unit-clause and binary equivalence propagation, as well as equivalence reasoning, a 3 -Sat translator, and finally a full- using all free variables- iterative root look-ahead. However, march ks is the first version of march which does not use a 3 -Sat translator by default (although it is still optional). The motivation for its removal is to examine the effect of (not) using a 3 -Sat translator on the performance. Because the addition of resolvents was only based on the ternary clauses in the formula (after the translation) we developed a new algorithm for this addition which uses all clauses with at least three literals. 3 the architecture As a look-ahead Sat solver, the <b>branch</b> <b>rule</b> of march ks is based on a look-ahead evaluation function (Diff). The applied Diff measures the reduction of CNF- and equivalence-clauses between two formulas F and F ′ in a weighted manner. The solver differs from the straightforward look-ahead architecture in two aspects: (1) look-ahead is performed on a subset of the free (unfixed) variables, and (2) if a certain look-ahead significantly reduces the formula, the DoubleLookhead procedure is called to check whether this look-ahead will eventually result in a conflict. Algorithms below show the pseudocode of this architecture...|$|E
40|$|Abstract. We propose an {{adaptive}} framework for <b>branching</b> <b>rule</b> selection {{that is based}} on a set of <b>branching</b> <b>rules.</b> Each <b>branching</b> <b>rule</b> is attached a preference value that is dynamically adapted with respect to conflict analysis. Thus, our approach brings together two essential features of modern SAT algorithms which were traditionally independent from each other. Experimental results show the feasibility of our approach. ...|$|R
40|$|The {{method of}} Weyl orbit {{reduction}} for obtaining <b>branching</b> <b>rules</b> is extended to affine Kac-Moody algebras. The orbits of affine rank 2 and 3 algebras are obtained analytically and the fundamental orbits are decomposed into irreducible representations (I. R.). Numerical inversion of a triangular matrix then gives the orbit multiplicities in an I. R. Orbit to orbit <b>branching</b> <b>rules</b> are deduced for selected subalgebras {{and used to}} produce I. R. to I. R. <b>branching</b> <b>rules...</b>|$|R
40|$|AbstractThe Davis-Putnam-Logemann-Loveland {{algorithm}} {{is one of}} the most popular algorithms for solving the satisfiability problem. Its efficiency depends on its choice of a <b>branching</b> <b>rule.</b> We construct a sequence of instances of the satisfiability problem that fools a variety of “sensible” <b>branching</b> <b>rules</b> in the following sense: when the instance has n variables, each of the “sensible” <b>branching</b> <b>rules</b> brings about Ω(2 n 5) recursive calls of the Davis-Putnam-Logemann-Loveland algorithm, even though only O(1) such calls are necessary...|$|R
40|$|In this dissertation, {{we examine}} {{variations}} of the DPLL algorithm, a popular algorithm for solving the satisfiability problem, which is NP-complete. The variations include operations in the Davis-Putnam kernel (monotone literal fixing and the subsumption <b>rule)</b> and five <b>branching</b> <b>rules</b> in the literature (the Jeroslow-Wang rule, the two-sided Jeroslow-Wang rule, the DSJ rule, the MinLen rule, and the C-SAT rule.) Experimental performances on random 3 -SAT formulas and on DIMACS benchmark formulas are reported. Monotone literal fixing and the subsumption rule are of little use on random 3 -SAT formulas, but they can speed up the DPLL algorithm significantly when solving some of the DIMACS formulas. Among the five <b>branching</b> <b>rules,</b> the C-SAT rule is best for random 3 -SAT formulas. However, the results on the DIMACS formulas are mixed. New <b>branching</b> <b>rules</b> are described that are better than other <b>branching</b> <b>rules</b> on random 3 -SAT formulas. A sequence of formulas is described that fools a variety of “sensible ” <b>branching</b> <b>rules</b> in the following sense: when the formula has n variables, each of the “sensible” <b>branching</b> <b>rules</b> brings about Ω(2 n/ 5) recursive calls of the DPLL algorithm, even though only O(1) such calls are necessary. i...|$|R
50|$|After {{the decline}} of the Gurjara-Pratiharas, the Guhilas ruled as sovereigns. In the 13th century, the dynasty divided into two branches: one <b>branch</b> <b>ruled</b> from Chitrakuta (modern Chittorgarh) with the title Rawal, while another <b>branch</b> <b>ruled</b> from Sesoda with the title Rana.|$|R
40|$|Abstract. Recently, a new {{weighted}} {{generalization of}} the <b>branching</b> <b>rule</b> for the hook lengths, {{equivalent to the}} hook formula, was proved. In this paper, we generalize the complementarybranchingrule,whichcanbeusedtoproveBurnside’sformula. Wepresent three different proofs: bijective, via weighted hook walks, and via the ordinary weighted <b>branching</b> <b>rule...</b>|$|R
40|$|We {{prove the}} modular <b>branching</b> <b>rule</b> of the {{cyclotomic}} Hecke algebras. Unlike the other modular <b>branching</b> <b>rules,</b> this rule {{is the rule}} by which we can compute the modular branching of given simple module. As a corollary, we prove a conjecture of Dipper, James and Murphy which remained open for a decade. In particular, we have obtained a nonrecursive definition of Kleshchev multipartitions...|$|R
5000|$|In algebra, a hypoalgebra is a {{generalization}} of a subalgebra of a Lie algebra introduced by [...] The relation between an algebra and a hypoalgebra {{is called a}} subjoining , which generalizes {{the notion of an}} inclusion of subalgebras. There is also a notion of restriction of a representation of a Lie algebra to a subjoined hypoalgebra, with <b>branching</b> <b>rules</b> similar to those for restriction to subalgebras except that some of the multiplicities in the <b>branching</b> <b>rule</b> may be negative. [...] calculated many of these <b>branching</b> <b>rules</b> for hypoalgebras.|$|R
5000|$|... #Subtitle level 2: Judicial <b>branch</b> <b>ruled</b> the {{commissions}} unconstitutional ...|$|R
40|$|The DPLL {{procedure}} {{is the most}} popular complete satisfiability (SAT) solver. While its worst case complexity is exponential, the actual running time is greatly affected by the ordering of branch variables during the search. Several <b>branching</b> <b>rules</b> have been proposed, but none is the best in all cases. This work investigates the use of automated methods for choosing the most appropriate <b>branching</b> <b>rule</b> at each node in the search tree. We consider a reinforcementlearning approach where a value function, which predicts the performance of each <b>branching</b> <b>rule</b> in each case, is learned through trial runs on a typical problem set of the target class of SAT problems. Our results indicate that, provided sufficient training on a given class, the resulting strategy performs as well as (and, in some cases, better than) the best <b>branching</b> <b>rule</b> for that class. 1...|$|R
40|$|In this note, we {{formulate}} {{and prove}} <b>branching</b> <b>rules</b> of simple polynomial modules for the Lie superalgebra gl(m|n). Our <b>branching</b> <b>rules</b> {{depend on the}} conjugacy class of the Borel subalgebra. A Gelfand-Tsetlin basis of a polynomial module associated to each Borel subalgebra is obtained in terms of generalized semistandard tableaux. Comment: 7 pages, comments welcom...|$|R
40|$|AbstractWe {{study the}} <b>branching</b> <b>rules</b> between K(Sp×Sp) and KS 2 p: {{that is we}} determine, in {{characteristic}} p for p odd, the Loewy structure of the principal block simple K(Sp×Sp) -modules induced to KS 2 p and the Loewy structure of the principal block simple KS 2 p-modules restricted to K(Sp×Sp). In characteristic zero the answer follows easily from the Littlewood–Richardson rule, but in other characteristics {{the structure of the}} induced and restricted modules is not known. Kleshchev has obtained the simple module <b>branching</b> <b>rules</b> between KSn and KSn+ 1 for any n and any field characteristic. We provide similar <b>branching</b> <b>rules</b> for our case...|$|R
40|$|AbstractThe {{decomposition}} of representations of compact classical Lie groups into representations of finite subgroups is discussed. A Mathematica package is presented {{that can be}} used to compute these <b>branching</b> <b>rules</b> using the Weyl character formula. For some low order finite groups including A 4 and Δ(27) general analytical formulas are presented for the <b>branching</b> <b>rules</b> of arbitrary representations of their smallest Lie super-groups...|$|R
40|$|We give a {{combinatorial}} description {{for when}} the Specht module of an arbitrary diagram admits a (complete) <b>branching</b> <b>rule.</b> This description, given {{in terms of the}} maximal rectangles of the diagram, generalizes all previously known <b>branching</b> <b>rules</b> for Specht modules, such as those given by Reiner and Shimozono for northwest diagrams and by the present author for forest diagrams. Comment: 21 page...|$|R
40|$|The {{decomposition}} of representations of compact classical Lie groups into representations of finite subgroups is discussed. A Mathematica package is presented {{that can be}} used to compute these <b>branching</b> <b>rules</b> using the Weyl character formula. For some low order finite groups including A 4 and Δ(27) general analytical formulas are presented for the <b>branching</b> <b>rules</b> of arbitrary representations of their smallest Lie super-groups...|$|R
40|$|The {{problem of}} proving that a propositional boolean formula is satisfiable (SAT) {{is one of}} the {{fundamental}} problems in computer science. The application of SAT solvers in VLSI CAD has become of major interest. The most popular SAT algorithms are based on the well known Davis-Putnam procedure. There, to guide the search, a <b>branching</b> <b>rule</b> is applied for selecting and assigning unassigned variables. Additionally, conflict analysis methods are available that result in non-chronological backtracking that prevents the SAT algorithm from searching nonrelevant parts of the search space. In this paper we focus on the impact of different <b>branching</b> <b>rules</b> and present an approach which (1) allows the use of several <b>branching</b> <b>rules</b> to be applied (not limited to one static rule) and (2) uses information from non-chronological backtracking to dynamically adapt the probabilities of the <b>branching</b> <b>rules</b> to be selected. Our approach results in a faster and more robust behaviour of the SAT algorithm. ...|$|R
40|$|We {{approach}} {{the problem of}} obtaining <b>branching</b> <b>rules</b> {{from the point of}} view of dual reductive pairs. Specifically, we obtain a stable <b>branching</b> <b>rule</b> for each of 10 classical families of symmetric pairs. In each case, the branching multiplicities are expressed in terms of Littlewood-Richardson coefficients. Some of the formulas are classical and include, for example, Littlewood's restriction rule as a special case. Comment: 26 page...|$|R
5000|$|Classical <b>branching</b> <b>rules</b> {{describe}} the restriction of an irreducible representation (π, V) of a classical group G to a classical subgroup H, i.e. the multiplicity with which an irreducible representation (σ, W) of H occurs in π. By Frobenius reciprocity for compact groups, this {{is equivalent to}} finding the multiplicity of π in the unitary representation induced from σ. <b>Branching</b> <b>rules</b> for the classical groups were determined by ...|$|R
40|$|Abstract. In mixed-integer programming, the <b>branching</b> <b>rule</b> {{is a key}} {{component}} to a fast convergence of the branch-and-bound algorithm. The most common strategy is to branch on simple disjunctions that split the domain of a single integer variable into two disjoint intervals. Multi-aggregation is a presolving step that replaces variables by an affine linear sum of other variables, thereby reducing the problem size. While this simplification typically improves the performance of MIP solvers, it also restricts the degree of freedom in variable-based <b>branching</b> <b>rules.</b> We present a novel branching scheme that tries to overcome the above drawback by considering general disjunctions defined by multi-aggregated variables {{in addition to the}} standard disjunctions based on single vari-ables. This natural idea results in a hybrid between variable- and con-straint-based <b>branching</b> <b>rules.</b> Our implementation within the constraint integer programming framework SCIP incorporates this into a full strong <b>branching</b> <b>rule</b> and reduces the number of branch-and-bound nodes on a general test set of publicly available benchmark instances. For a specific class of problems, we show that the solving time decreases significantly. ...|$|R
40|$|We {{establish}} <b>branching</b> <b>rules</b> {{between some}} Iwahori-Hecke algebra of type B and their subalgebras which {{are defined as}} fixed subalgebras by involutions including Goldman involution. The Iwahori-Hecke algebra of type D is one of such fixed subalgebras. We also obtain <b>branching</b> <b>rules</b> between those fixed subalgebras and their intersection subalgebra. We determine basic sets of irreducible representations of those fixed subalgebras and their intersection subalgebra by making use of generalized Clifford theory. Comment: 30 page...|$|R
40|$|Recently, {{a simple}} {{proof of the}} hook length formula was given via the <b>branching</b> <b>rule.</b> In this paper, we extend the results to shifted tableaux. We give a {{bijective}} proof of the <b>branching</b> <b>rule</b> for the hook lengths for shifted tableaux; present variants of this rule, including weighted versions; and make the first tentative steps toward a bijective proof of the hook length formula for d-complete posets. Comment: 27 pages, 22 figure...|$|R
40|$|We {{study the}} limit of <b>branching</b> <b>rules</b> in Davis-Putnam (DP) {{procedure}} for hard random unsatisfiable 3 -SAT and try to answer the question: {{what would be the}} search tree size if every branching variable were the best possible? The issue is of practical interest because many efforts have been spent for designing better <b>branching</b> <b>rules.</b> Our experimental results suggest that the <b>branching</b> <b>rules</b> used in the current state-of-the-art DP procedures are already close to the optimal for hard random unsatisfiable 3 -SAT, and in particular, that the first of the ten challenges for propositional reasoning and search formulated by Selman et al. in [14], namely, proving a hard 700 variable random 3 -SAT formula is unsatisfiable, probably cannot be answered by DP procedure unless something significantly different from branching can be made effective for hard random unsatisfiable 3 -SAT...|$|R
