200|103|Public
5|$|Reviewers {{commented that}} the imaginative {{character}} designs and use of advanced graphics technology, such as hardware transform and lighting, and <b>bump</b> <b>mapping,</b> made the graphics of the game unrivaled in its time; ActionTrip was so impressed by the game's visuals that they thought their graphics card was supporting the complex hardware environmental <b>bump</b> <b>mapping</b> it was incapable of. The animation of Kabuto's antics such as elbow dropping onto tiny enemies, and tossing up and catching food with his mouth, in particular, won the praises of reviewers. Many critics, however, were disappointed that the computer versions of the game could not run smoothly at full details on the recommended system specifications.|$|E
25|$|The {{continued}} {{rise and}} increasing {{sophistication of the}} graphics processing unit were crucial to this decade, and 3D rendering capabilities became a standard feature as 3D-graphics GPUs became considered a necessity for desktop computer makers to offer. The Nvidia GeForce line of graphics cards dominated {{the market in the}} early decade with occasional significant competing presence from ATI. As the decade progressed, even low-end machines usually contained a 3D-capable GPU of some kind as Nvidia and AMD both introduced low-priced chipsets and continued to dominate the market. Shaders which had been introduced in the 1980s to perform specialized processing on the GPU would {{by the end of the}} decade become supported on most consumer hardware, speeding up graphics considerably and allowing for greatly improved texture and shading in computer graphics via the widespread adoption of normal mapping, <b>bump</b> <b>mapping,</b> and a variety of other techniques allowing the simulation of a great amount of detail.|$|E
25|$|Texture mapping {{has matured}} into a {{multistage}} process with many layers; generally, {{it is not}} uncommon to implement texture mapping, <b>bump</b> <b>mapping</b> or isosurfaces, normal mapping, lighting maps including specular highlights and reflection techniques, and shadow volumes into one rendering engine using shaders, which are maturing considerably. Shaders are now very nearly a necessity for advanced work in the field, providing considerable complexity in manipulating pixels, vertices, and textures on a per-element basis, and countless possible effects. Their shader languages HLSL and GLSL are active fields of research and development. Physically based rendering or PBR, which implements even more maps to simulate real optic light flow, is an active research area as well, along with advanced optics areas like subsurface scattering and photon mapping. Experiments into the processing power required to provide graphics in real time at ultra-high-resolution modes like Ultra HD are beginning, though beyond reach of all but the highest-end hardware.|$|E
40|$|Figure 1 : <b>Bump</b> <b>mapped</b> sphere at {{different}} levels of detail consistently generated and shaded with the normal distribution shown on the left. In this paper we present a method that automatically synthesizes <b>bump</b> <b>maps</b> at arbitrary levels of detail in real-time. The only input data we require is a normal density function; the <b>bump</b> <b>map</b> is generated according to that function. It is also used to shade the generated <b>bump</b> <b>map.</b> The technique allows to infinitely zoom into the surface, because more (consistent) detail can be created on the fly. The shading of such a surface is consistent when displayed {{at different}} distances to the viewer (assuming that the surface structure is self-similar). The <b>bump</b> <b>map</b> generation and the shading algorithm can also be used separately...|$|R
5000|$|Environment <b>maps,</b> <b>bump</b> <b>maps,</b> transparency, specularity amongst others ...|$|R
5000|$|... #Caption: Examples of multitexturing (click {{for larger}} image);1: Untextured sphere, 2: Texture and <b>bump</b> <b>maps,</b> 3: Texture map only, 4: Opacity and texture maps.|$|R
500|$|In December 2002, {{publisher}} Activision signed Stainless Steel to a multi-game contract, {{the first}} title {{of which was}} revealed to be Empires in February 2003. By April, the team estimated the game to be 60–70% finished. The engine used to create Empire Earth—later released under the name Titan 2.0—was retained and upgraded for Empires. Significantly more detail {{was added to the}} units' 3D models than had appeared in Empire Earth. Further additions included reflection mapping, environmental <b>bump</b> <b>mapping</b> and a new physics engine. According to Goodman, reusing the game engine enabled the team to place its full concentration on gameplay, without worrying about technological development. Another priority was storytelling, an element of the RTS game [...] (2002) particularly enjoyed by the Empires team.|$|E
500|$|David Hodgson of Electronic Gaming Monthly (EGM) found Deathrow European origins {{apparent}} as [...] "awkward, over-the-top expletives in obnoxious American accents" [...] were {{paired with}} rugby. Hodgson said that Deathrow struggled to show grittiness {{in a very}} shiny environment. He added that the game suffered from immoderate violence, frustrating fighting sequences, lack of online play, and [...] "steep learning curve". Hodgson compared the core mechanics to a [...] "mini-game masquerading as sports entertainment". William Racer of the Official Xbox Magazine (OXM) praised the fast-paced nature {{of the game and}} its eye for detail, and complained about the camera angles and difficulty. He placed the game in a lineage of invented sports from a dystopian future and found the game more entertaining than the rest. Racer also found the music generic, and the voice acting good. Eric Bush of TeamXbox complimented the computer opponents's artificial intelligence and said that they put up a challenge. GameSpy Osborne appreciated the game's small details like the streak trailing the disc through the air. IGN's Kaiser Hwang called the arena lighting effects, <b>bump</b> <b>mapping,</b> and textures the best since [...] 1UP.com, OXM Racer, and IGN's Douglass Perry and David Clayman recommended Deathrow as a party game, with the IGN staff specifically recommending the game with System Link.|$|E
500|$|Physically, the Dreamcast {{measures}} [...] {{and weighs}} [...] [...] The Dreamcast's main CPU is a two-way 360MIPS superscalar Hitachi SH-4 32-bit RISC clocked at 200MHz with an 8 Kbyte instruction cache and 16 Kbyte data cache and a 128-bit graphics-oriented floating-point unit delivering 1.4GFLOPS. Its 100MHz NEC PowerVR2 rendering engine, {{integrated with the}} system's ASIC, is capable of drawing more than 3 million polygons per second and of deferred shading. Sega estimated that the Dreamcast was theoretically capable of rendering 7 million raw polygons per second, or 6 million with textures and lighting, but noted that [...] "game logic and physics reduce peak graphic performance." [...] Graphics hardware effects include trilinear filtering, gouraud shading, z-buffering, spatial anti-aliasing, per-pixel translucency sorting and <b>bump</b> <b>mapping.</b> The system can output approximately 16.77 million colors simultaneously and displays interlaced or progressive scan video at 640×480 video resolution. Its 67MHz Yamaha AICA sound processor, with a 32-bit ARM7 RISC CPU core, can generate 64 voices with PCM or ADPCM, providing ten times {{the performance of the}} Saturn's sound system. [...] The Dreamcast has 16 MB main RAM, along with an additional 8 MB of RAM for graphic textures and 2 MB of RAM for sound. [...] The system reads media using a 12x speed Yamaha GD-ROM Drive. In addition to Windows CE, the Dreamcast supports several Sega and middleware application programming interfaces. In most regions, the Dreamcast included a removable modem for online connectivity, which was modular for future upgrades. The original Japanese model and all PAL models had a transfer rate of 33.6kbit/s, while consoles sold in the US and in Japan after September 9, 1999 featured a 56 kbit/s dial-up modem.|$|E
40|$|Many {{researchers}} have been arguing that geometry, <b>bump</b> <b>maps,</b> and BRDFs present a hierarchy of detail that should be exploited for efficient rendering purposes. In practice however, this is often not possible due to inconsistencies in the illumination for these different levels of detail. For example, while <b>bump</b> <b>map</b> rendering often only considers direct illumination and no shadows, geometry-based rendering and BRDFs will mostly also respect shadowing effects, {{and in many cases}} even indirect illumination caused by scattered light. In this paper, we present an approach for overcoming these inconsistencies. We introduce an inexpensive method for consistently illuminating height fields and <b>bump</b> <b>maps,</b> as well as simulating BRDFs based on precomputed visibility information. With this information we can achieve a consistent illumination across the levels of detail. The method we propose offers significant performance benefits over existing algorithms for computing the light scattering in hei [...] ...|$|R
40|$|Bump-maps, like texture maps or {{any other}} maps {{consisting}} of discretely stored data have to be properly filtered, if they are being resampled {{in the process of}} rendering an image. If, however, <b>bump</b> <b>maps</b> are filtered in the traditional way, the bumps are lost in the filtering process and the result is a smooth surface. We introduce a <b>bump</b> <b>map</b> pyramid, that contains and preserves isotropic or anisotropic roughness information in all resolution levels. (orig.) Available from TIB Hannover: RR 4367 (97 - 15) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|R
50|$|KPT Materializer {{can create}} {{advanced}} surface textures based on <b>bump</b> <b>maps</b> that define troughs and peaks. It can use any external image for {{the basis of}} the <b>bump</b> <b>map</b> or alternatively the user can pick out the hue, saturation, luminance or red, green, or blue channel of the current image. It can then offset, scale and rotate the texture map, control its lighting, and even blend in a reflection map. The filter can be used for anything from providing an oil-painting feel to an entire image, to giving the illusion of depth to a selection.|$|R
2500|$|In {{addition}} to legacy API support, the fork adds additional post processing shader options, allowing ambient occlusion, tessellation, <b>bump</b> <b>mapping,</b> and other effects {{not available in}} Dolphin.|$|E
2500|$|Also in the 1970s, Henri Gouraud, Jim Blinn and Bui Tuong Phong {{contributed to}} the {{foundations}} of shading in CGI via {{the development of the}} Gouraud shading and Blinn-Phong shading models, allowing graphics to move beyond a [...] "flat" [...] look to a look more accurately portraying depth. Jim Blinn also innovated further in 1978 by introducing <b>bump</b> <b>mapping,</b> a technique for simulating uneven surfaces, and the predecessor to many more advanced kinds of mapping used today.|$|E
2500|$|Comparing the 360 version to the PC version, Zawodny stated {{there would}} be {{considerable}} graphical improvement; [...] "We squeezed {{as much as possible}} from the Xbox 360's vertex and pixel shaders. There's high dynamic range lighting, hardware anti-aliasing, <b>bump</b> <b>mapping</b> on almost everything, relief mapping on many objects, and subsurface scattering, just to mention a few technical terms." [...] He also revealed the 360 version would utilize both Xbox Live and System Link for multiplayer mode, Gamerscore achievements for both single and multiplayer modes, and would feature a number of non-story single-player bonus missions, and additional multiplayer modes and maps.|$|E
5000|$|... bump lemur_bump.tga # <b>bump</b> <b>map</b> (which {{by default}} uses {{luminance}} channel of the image) disp lemur_disp.tga # displacement map decal lemur_stencil.tga # stencil decal texture (defaults to 'matte' channel of the image) ...|$|R
50|$|When light {{bounces off}} an object, it {{reflects}} with location-specific brightness {{that depends on}} the shape of the object and the position of the lightning source. This reflection map can be used to create a <b>bump</b> <b>map</b> of a surface, which uses grayscale levels to depict the height of a point on a surface. Knowing the direction and angle of the light source, one can calculate the approximate height that a point has. However, the light direction and angle is usually unknown, which leads to poor quality images, or having to create multiple <b>bump</b> <b>maps,</b> each time trying different settings.|$|R
40|$|The bump-mapping {{technique}} {{is often used}} to represent bumps on objects such as bark on trees and craters on the moon. In order to render shadows cast by <b>bumps,</b> the horizon <b>map</b> method was proposed. The horizon map is a table which has, for each of a small collection of azimuthal directions, slopes from each viewpoint on the <b>bump</b> <b>map</b> (height field) to the corresponding horizon point, which is the highest viewable point seen from that viewpoint. In this paper, we propose a more precise method for rendering bumpmap shadows using a both a horizon map and a distance map, to take curvature of surfaces into consideration. The distance map is a table which has, for each azimuthal direction, horizontal projected distances from each point of the <b>bump</b> <b>map</b> to its corresponding horizon point. The proposed method can render shadows efficiently by using programmable graphics hardware...|$|R
2500|$|The {{game was}} {{previously}} known as I-8 when a demo {{of the game}} was first shown in E3 2005 as a World War II-inspired, alien-infested first-person shooter. Insomniac Games, who developed the Spyro and Ratchet & Clank series' of video games, {{were going to be}} developers of the game. A new demo was shown by Sony Computer Entertainment in the Game Developers Conference (GDC) in March 2006. The new demo was in real-time, demonstrating the gameplay, graphics and effects like <b>bump</b> <b>mapping.</b> Insomniac was said to [...] "love the Blu-ray's contribution of tremendous space to gaming". The team also [...] "loved the multiple simultaneous processor units".|$|E
2500|$|Technology and {{algorithms}} for rendering {{continued to}} improve greatly. In 1996, Krishnamurty and Levoy invented normal mapping - an improvement on Jim Blinn's <b>bump</b> <b>mapping.</b> 1999 saw Nvidia release the seminal GeForce 256, the first home video card {{billed as a}} graphics processing unit or GPU, which in its own words contained [...] "integrated transform, lighting, triangle setup/clipping, and rendering engines". By {{the end of the}} decade, computers adopted common frameworks for graphics processing such as DirectX and OpenGL. Since then, computer graphics have only become more detailed and realistic, due to more powerful graphics hardware and 3D modeling software. [...] AMD also became a leading developer of graphics boards in this decade, creating a [...] "duopoly" [...] in the field which exists this day.|$|E
2500|$|The {{game was}} met with {{critical}} acclaim, as GameRankings gave it a score of 90.04%, while Metacritic gave it 90 out of 100. David Trammell of Nintendo World Report gave it {{nine out of ten}} and called it [...] "a visual and aural masterpiece. The game has all the bells and whistles you'd expect from a next-generation game including <b>bump</b> <b>mapping</b> and 480p support on the visual end, and five channel surround sound via Dolby Pro Logic II on the aural end." [...] Marc Saltzman of Playboy gave it a score of 90% and stated that, [...] "The combined package of beautiful graphics, intense action (including force-feedback rumble support in the controller!) and familiar Star Wars ditties all work together to create an immersive, outstanding experience from beginning to end." [...] In The Cincinnati Enquirer, he gave the game four stars out of five and stated that, [...] "If there was ever a reason to purchase this compact new console, this is it... there's no multiplayer mode. It would have been fun to fly alongside or against another player in some of the missions." [...] Alex Porter of Maxim gave it a similar score of eight out of ten and said: [...] "More than a Jedi mind trick to make you buy Nintendo's new whiz-bang console, this is the closest a video game has come to recreating a Star Wars movie." ...|$|E
40|$|<b>Bump</b> <b>maps</b> are {{commonly}} used in computer graphics to visualize bumps and wrinkles {{on the surface of}} an object, more specifically, in height-field rendering. In order to render shadows for large terrain data using <b>bump</b> <b>maps,</b> various methods such as horizon mapping have been suggested. A horizon map describes the occlusion of terrain data by using angles with respect to a view point. In this paper, we propose a method exploiting ideas from horizon mapping to generate real time shadows for large terrain data. We only consider a single azimuth direction per height-field point to compute the shadows. The generated horizon map is computed in real time and allows for interactive exploration of the terrain. We demonstrate that our method produces accurate results while keeping the memory requirements lo...|$|R
40|$|Fig 2) Colour maps, alpha <b>maps</b> and <b>bump</b> <b>maps</b> {{used for}} texture mapping (Fig 3) 3 D Cartesian coordinate‘s (Fig 4) Visual {{representation}} of human vision hemifield (Fig 5) Visual representation of human vision inverting an image (Fig 6) A screenshot from Mario's Tennis on an emulator (Fig 7) RealD circular polarized glasse...|$|R
40|$|We {{describe}} {{the design of}} a system to augment a light striping camera for three dimensional scanning with a photometric system to capture <b>bump</b> <b>maps</b> and approximate reflectances. In contrast with scanning an object with very high spatial resolution, this allows the relatively efficient and inexpensive acquistion of input for high quality rendering...|$|R
50|$|<b>Bump</b> <b>mapping</b> {{is another}} form of texture mapping which does not provide pixels with color, but rather with depth. Especially with modern pixel shaders (see below), <b>bump</b> <b>mapping</b> creates the feel of view and lighting-dependent {{roughness}} on a surface to enhance realism greatly.|$|E
5000|$|... #Caption: Frosted glass using Dielectric and Spekle <b>bump</b> <b>mapping.</b>|$|E
5000|$|Line and edge anti-aliasing, <b>bump</b> <b>mapping,</b> 8-bit {{stencil buffer}} ...|$|E
5000|$|Mudbox also {{includes}} stamps and stencils. Stencils work by overlaying a grayscale, or [...] "alpha channel" [...] image, {{such as a}} <b>bump</b> <b>map,</b> over the mesh. The artist can then project part {{or all of the}} image's detail onto the mesh through brush strokes, providing a method to quickly sculpt surface detail.|$|R
40|$|Normal <b>maps</b> and <b>bump</b> <b>maps</b> are {{commonly}} used techniques to make 3 D scenes more realistic. Consequently, the efficient storage of normal vectors is an important task in computer graphics. This work presents a fast, lossy compression/decompression algorithm for arbitrary resolutions. The complete source code is listed in the appendix and is ready to use...|$|R
40|$|Several {{methods for}} {{rendering}} and modeling water {{have been made}} {{and a few of}} them address the natural phenomenon of water droplets flow. As far as we know, none of those methods have used <b>bump</b> <b>maps</b> in order to simulate the flow of a droplet on structured surfaces. The normals of the <b>bump</b> <b>map,</b> that describes the geometry of the micro structured surface, are used in the flow computation of the droplets. As a result, the water droplets will meander down on the surface as if it has a micro structure. Existing models were not suitable for this purpose. Therefore, a new model is proposed in this paper. The droplet will also leave a trail, which is produced by changing the background texture on the surface. This method will not present a physically correct simulation of water droplets flow on a structured surface. However, it will produce a physically plausible real-time animation. 1...|$|R
50|$|There are {{two primary}} methods to perform <b>bump</b> <b>mapping.</b> The first uses a height map for {{simulating}} the surface displacement yielding the modified normal. This is the method invented by Blinn {{and is usually}} what {{is referred to as}} <b>bump</b> <b>mapping</b> unless specified. The steps of this method are summarized as follows.|$|E
50|$|Rollcage Stage II {{was also}} among the very first titles to feature {{hardware-accelerated}} <b>bump</b> <b>mapping</b> upon its release in March 2000, {{in the form of}} EMBM (Environment Mapped <b>Bump</b> <b>Mapping).</b> RSII was designed to be best experienced at the time on Matrox Millennium G400 graphics cards, released in mid-1999, which had exclusive support for EMBM until the ATI Radeon was released in late 2000. Matrox's <b>bump</b> <b>mapping</b> technology was much hyped by industry press outlets at the time, with Matrox demoing Rollcage Stage II as a cutting-edge showcase for their cards, as well as dedicating a page on their website to the game.|$|E
50|$|Normal mapping is {{the most}} common {{variation}} of <b>bump</b> <b>mapping</b> used.|$|E
5000|$|For this reason, Bézier patch meshes are {{in general}} {{eventually}} decomposed into meshes of flat triangles by 3D rendering pipelines. In high-quality rendering, the subdivision is adjusted {{to be so}} fine that the individual triangle boundaries cannot be seen. To avoid a [...] "blobby" [...] look, fine detail is usually applied to Bézier surfaces at this stage using texture <b>maps,</b> <b>bump</b> <b>maps</b> and other pixel shader techniques.|$|R
40|$|A {{method is}} {{presented}} for representing botanical trees, given three-dimensional points and connections ~ Limbs are modeled as generalized cylinders whose axes are space curves that interpolate the points A free-form sur~ce connects branching limbs. "'Blobby' " techniques {{are used to}} model the tree trunk {{as a series of}} non-circular cross sections. Bark is simulated with a <b>bump</b> <b>map</b> digitized from real world bark; leaves are textures mapped onto simple surface...|$|R
40|$|Abstract: We {{describe}} {{a system for}} capturing <b>bump</b> <b>maps</b> {{from a series of}} images of an object from the same view point, but with varying, known, illumination. Using the illumination information we can reconstruct the surface normals for a variety of, but not all, surface nishes and geometries. The system allows an existing object to be rerendered with new lighting and surface nish without explicitly reconstructing the object geometry. ...|$|R
