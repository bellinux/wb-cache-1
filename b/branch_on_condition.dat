4|10000|Public
5000|$|BCFR and BCFA: <b>branch</b> <b>on</b> <b>condition</b> False (zero, greater-than or less-than) with {{relative}} or absolute addressing.|$|E
5000|$|BCTR and BCTA: <b>branch</b> <b>on</b> <b>condition</b> True (zero, greater-than, less-than or unconditional) with {{relative}} or absolute addressing ...|$|E
5000|$|Branching [...] - [...] skip or <b>branch</b> <b>on</b> <b>condition,</b> branch unconditional, {{branch and}} store program counter (conditional and unconditional), add to index {{register}} and skip on test ...|$|E
40|$|This study {{deals with}} a novel {{generation}} method of tool paths in a main-processor of a CAM. Currently, some tool path generation methods such as contouring path, scanning path, spiral path and constant scallop height path are installed in several CAM applications. However, since these tool paths are generated by differential operations and convergence calculations, complex <b>branches</b> <b>on</b> <b>conditions</b> are required, and the operation is unstable behavior at extremum neighborhood. It still threatens to cause clash of the operation. Therefore, two parameters (u, v) composing a machined surface {{are the focus of}} this study. In our proposed method, machining points are calculated on a plane constructed by the parameters. Then, since the calculation is executed in response to the real space, a homogeneous tool path is obtained. By using our proposed method, it is possible to generate tool paths quickly and effectively without the extremum problem and complex <b>branches</b> <b>on</b> <b>conditions.</b> This paper explains the particulars of our proposed method and the implementation method for two spiral paths. Finally, the effectiveness of our method is confirmed with machined workpieces...|$|R
5000|$|BSFR and BSFA: <b>branch</b> to {{subroutine}} <b>on</b> <b>condition</b> False (zero, greater-than or less-than) {{with relative}} or absolute addressing ...|$|R
5000|$|BSTR and BSTA: <b>branch</b> to {{subroutine}} <b>on</b> <b>condition</b> True (zero, greater-than, less-than or unconditional) {{with relative}} or absolute addressing ...|$|R
5000|$|Branch {{instructions}} include standard S/360 <b>Branch</b> <b>on</b> <b>Condition.</b> Instead of [...] "Branch and Link" [...] {{the instruction}} set uses [...] "Branch and Store" [...] (BASR, X'0D', and BAS, X'4D') which functions similarly except that a 16 bit link address is stored. [...] "Set PSW" [...] (SPSW, X'B1'), which loads a 32 bit Program Status Word (PSW) replaces the standard [...] "Load PSW". The Model 20 has {{no concept of}} privileged instructions or a distinction between supervisor state and user state so SPSW is available to user programs.|$|E
50|$|Conditional: Evaluates {{a program}} <b>branch,</b> {{depending}} <b>on</b> a <b>condition</b> computed at runtime. This skeleton leaves the parallelism potential unchanged.|$|R
40|$|We characterise all the quasi-stationary {{distributions}} and the Q-process {{associated with}} a continuous state branching process that explodes in finite time. We also provide a rescaling for the continuous state <b>branching</b> process <b>conditioned</b> <b>on</b> non-explosion when the branching mechanism is regularly varying at 0. Comment: 13 page...|$|R
40|$|Quasi-stationary {{distributions}} {{associated with}} explosive CSBP Cyril Labbé∗ We characterise all the quasi-stationary distributions and the Q-process {{associated with a}} continuous state branching process that explodes in finite time. We also provide a rescaling for the continuous state <b>branching</b> process <b>conditioned</b> <b>on</b> non-explosion when the branching mechanism is regularly varying at 0...|$|R
40|$|We study Galton-Watson <b>branching</b> {{processes}} <b>conditioned</b> <b>on</b> {{the total}} progeny to be n which are scaled by a sequence cn tending to infinity as o(p n). It is shown {{that this process}} weakly converges to the totallocal time of a two-sided three-dimensional Bessel process. This is done by means of characteristic functions and a generating function approach. 1...|$|R
40|$|The reduced Markov {{branching}} {{process is a}} stochastic model for the genealogy of an unstructured biological population. Its limit behavior in the critical case is well studied for the Zolotarev-Slack regularity parameter α∈(0, 1]. We turn {{to the case of}} very heavy tailed reproduction distribution α= 0 assuming Zubkov's regularity condition with parameter β∈(0,∞). Our main result gives a new asymptotic pattern for the reduced <b>branching</b> process <b>conditioned</b> <b>on</b> non-extinction during a long time interval. Comment: 15 pages, 1 figur...|$|R
50|$|A {{branch is}} an {{instruction}} {{in a computer}} program that can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order. Branch (or branching, branched) may also refer to the act of switching execution to a different instruction sequence {{as a result of}} executing a branch instruction. A branch instruction can be either an unconditional branch, which always results in branching, or a conditional branch, {{which may or may not}} cause <b>branching,</b> depending <b>on</b> some <b>condition.</b> <b>Branch</b> instructions are used to implement control flow in program loops and conditionals (i.e., executing a particular sequence of instructions only if certain conditions are satisfied).|$|R
40|$|An {{important}} {{problem that}} arises in path oriented testing is {{the generation of}} test data that causes a program to follow a given path. In this paper, we present a novel program exe-cution based approach using an iterative relaxation method to address the above problem. In this method, test data generation is initiated with an arbitrarily chosen input from a given domain. This input is then iteratively refined to obtain an input on which all the <b>branch</b> predicates <b>on</b> the given path evaluate to the desired outcome. In each iteration the program statements relevant to the evaluation of each <b>branch</b> predicate <b>on</b> the path are executed, {{and a set of}} lin-ear constraints is derived. The constraints are then solved to obtain the increments for the input. These increments are added to the current input to obtain the input for the next iteration. The relaxation technique used in deriving the constraints provides feedback on the amount by which each input variable should be adjusted for the <b>branches</b> <b>on</b> the path to evaluate to the desired outcome. When the <b>branch</b> <b>conditions</b> <b>on</b> a path are linear functions of input variables, our technique either finds a solution for such paths in one iteration or it guarantees that the path is infeasible. In contrast, existing execution based approaches may require an unacceptably large number of iterations for relatively long paths because they consider only one input variable and one branch predicate at a time and use backtracking. When the <b>branch</b> <b>conditions</b> <b>on</b> a path are nonlinear functions of input variables, though it may take more then one iteration to derive a desired input, the set of constraints to be solved in each iteration is linear and is solved using Gaussian elimination. This makes our technique practical and suitable for automation. Keywords- path testing, dynamic test data generation, predicate slices, input dependency set, predicate residuals, relaxation methods. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advan-tage and that copies bear this notice and the full citation on the first page...|$|R
40|$|We {{consider}} the genealogy tree for a critical <b>branching</b> process <b>conditioned</b> <b>on</b> non-extinction. We enumerate vertices in each {{generation of the}} tree so that for each two generations one can define a monotone map describing the ancestor [...] descendant relation between their vertices. We show that under appropriate rescaling this family of monotone maps converges in distribution in a special topology to a limiting flow of discontinuous monotone maps which {{can be seen as}} a continuum tree. This flow is a solution of an SPDE with respect to a Brownian sheet. Comment: 39 pages; 2 figur...|$|R
40|$|This paper {{addresses}} how {{to automatically}} generate code for multimedia extension architectures {{in the presence}} of conditionals. We evaluate {{the costs and benefits of}} exploiting <b>branches</b> <b>on</b> the aggregate <b>condition</b> codes associated with the fields of a superword (an aggregate object larger than a machine word) such as the branch-on-any instruction of the AltiVec. Branch-on-superword-condition-codes (BOSCC) instructions allow fast detection of aggregate conditions, an optimization opportunity often found in multimedia applications. This paper presents compiler analyses and techniques for generating efficient parallel code using BOSCC instructions. We evaluate our approach, which has been implemented in the SUIF compiler, through a set of experiments with multimedia benchmarks, and compare it with the default approach previously implemented in our compiler. Our experimental results show that using BOSCC instructions can result in better performance for applications where the aggregate condition codes of a superword often evaluate to the same value...|$|R
40|$|Abstract. Let T be a plane rooted {{tree with}} n nodes which is {{regarded}} as family tree of a Galton-Watson <b>branching</b> process <b>conditioned</b> <b>on</b> the total progeny. The profile of the tree may be described {{by the number of}} nodes or the number of leaves in layer t √ n, respectively. It is shown that these two processes converge weakly to Brownian excursion local time. This is done via characteristic functions which are obtained by means of generating functions arising from the combinatorial setup and complex contour integration. Besides, an integral representation for the two dimensional density of Brownian excursion local time is derived. 1...|$|R
40|$|If {{we follow}} an asexually {{reproducing}} population through time, then {{the amount of}} time that has passed since the most recent common ancestor (MRCA) of all current individuals lived will change as time progresses. The resulting "MRCA age" process has been studied previously when the population has a constant large size and evolves via the diffusion limit of standard Wright [...] Fisher dynamics. For any population model, the sample paths of the MRCA age process are made up of periods of linear upward drift with slope + 1 punctuated by downward jumps. We build other Markov processes that have such paths from Poisson point processes on R_++×R_++ with intensity measures of the form λ⊗μ where λ is Lebesgue measure, and μ (the "family lifetime measure") is an arbitrary, absolutely continuous measure satisfying μ((0,∞)) =∞ and μ((x,∞)) 0. Special cases of this construction describe the time evolution of the MRCA age in (1 +β) -stable continuous state <b>branching</b> processes <b>conditioned</b> <b>on</b> nonextinction [...] a particular case of which, β= 1, is Feller's continuous state <b>branching</b> process <b>conditioned</b> <b>on</b> nonextinction. As well as the continuous time process, we also consider the discrete time Markov chain that records the value of the continuous process just before and after its successive jumps. We find transition probabilities for both the continuous and discrete time processes, determine when these processes are transient and recurrent and compute stationary distributions when they exist. Comment: Published in at [URL] the Annals of Applied Probability ([URL] by the Institute of Mathematical Statistics ([URL]...|$|R
40|$|Abstract. If {{we follow}} an asexually {{reproducing}} population through time, then {{the amount of}} time that has passed since the most recent common ancestor (MRCA) of all current individuals lived will change as time progresses. The resulting “MRCA age ” process has been studied previously when the population has a constant large size and evolves via the diffusion limit of standard Wright-Fisher dynamics. For any population model, the sample paths of the MRCA age process are made up of periods of linear upwards drift with slope + 1 punctuated by downwards jumps. We build other Markov processes that have such paths from Poisson point processes on R++ × R++ with intensity measures of the form λ ⊗ µ, where λ is Lebesgue measure and µ (the “family lifetime measure”) is an arbitrary absolutely continuous measure satisfying µ((0, ∞)) = ∞ and µ((x, ∞)) 0. Special cases of this construction describe the time evolution of the MRCA age in (1 +β) -stable continuous state <b>branching</b> processes <b>conditioned</b> <b>on</b> non-extinction – a particular case of which, β = 1, is Feller’s continuous state <b>branching</b> process <b>conditioned</b> <b>on</b> non-extinction. As well as the continuous time process, we also consider the discrete time Markov chain that records the value of the continuous process just before and after its successive jumps. We find transition probabilities for both the continuous and discrete time processes, determine when these processes are transient and recurrent, and compute stationary distributions when they exist. Moreover, we introduce a new family of Markov processes that stands in a relation with respect to the general (1 +β) -stable continuous state branching process and its conditioned version that is similar to the one between the family of Bessel-squared diffusions and the unconditioned and conditioned Feller continuous state branching process. 1...|$|R
50|$|The current Pink Line route was {{assigned}} to the Douglas <b>branch</b> <b>on</b> June 25, 2006. The CTA ended Blue Line service <b>on</b> the Douglas <b>branch</b> <b>on</b> April 25, 2008.|$|R
50|$|Book {{discussion}} groups are also {{held at the}} Brown <b>Branch</b> <b>on</b> the first Tuesday of each month at 6:30 pm and at the Weaver-Bolden <b>Branch</b> <b>on</b> the second Thursday of each month at 5:30 pm.|$|R
50|$|In 1886 the NCSR put a {{cable line}} on Clark St. and {{parallel}} 5th Ave. (now Wells St.) into service. In 1889 a <b>branch</b> <b>on</b> Lincoln Ave. opened, {{and the last}} <b>branch,</b> <b>on</b> Clybourn Ave., opened in 1891.|$|R
50|$|The Wollaston Branch {{is listed}} {{separately}} on the National Register of Historic Places. The library had two other branches as of October 2009: the North Quincy <b>Branch</b> <b>on</b> Hancock Street near North Quincy High School, and the Adams Shore <b>branch</b> <b>on</b> Sea Street in Hough's Neck. There had been four other branches until municipal budget cutbacks in 1981; {{two of these}} were the Atlantic <b>Branch</b> <b>on</b> Atlantic Street and the Quincy Point branch off of Washington Street.|$|R
50|$|The {{route is}} an {{important}} part of the long-distance connection between the industrial district of west Saxony and western Germany (the Mid-Germany Connection). It runs from a <b>branch</b> <b>on</b> the Dresden-Werdau in Glauchau-Schönbörnchen via Meerane to a <b>branch</b> <b>on</b> the Leipzig-Hof line near Gößnitz.|$|R
25|$|The New York Public Library {{contains}} two <b>branches</b> <b>on</b> {{opposite sides of}} 23rd Street: the Muhlenberg <b>Branch</b> <b>on</b> West 23rd Street and Seventh Avenue, and the Epiphany <b>Branch</b> <b>on</b> East 23rd Street west of Second Avenue. The Epiphany Branch, which is located in Gramercy, opened in 1887 and moved to its current location, a Carnegie library on 23rd Street, in 1907. It was renovated from 1982 to 1984. The Muhlenberg Branch, also a Carnegie library, opened in Chelsea in 1906 and was renovated in 2000.|$|R
40|$|Path-wise {{test data}} {{generation}} {{is generally considered}} an important problem in the automation of software testing. In essence, it is a constraint optimization problem, which is often solved by search methods such as backtracking algorithms. In this paper, the backtracking algorithm branch and bound and state space search in artificial intelligence are introduced to tackle the problem of path-wise test data generation. The former is utilized to explore the space of potential solutions and the latter is adopted to construct the search tree dynamically. Heuristics are employed in the look-ahead stage of the search. Dynamic variable ordering is presented with a heuristic rule to break ties, values of a variable {{are determined by the}} monotonicity analysis <b>on</b> <b>branching</b> <b>conditions,</b> and maintaining path consistency is achieved through analysis on the result of interval arithmetic. An optimization method is also proposed to reduce the search space. The results of empirical experiments show that the search is conducted in a basically backtrack-free manner, which ensures both test data generation with promising performance and its excellence over some currently existing static and dynamic methods in terms of coverage. The results also demonstrate that the proposed method is applicable in engineering...|$|R
5000|$|... #Caption: Toronto Public Library Rexdale <b>Branch</b> <b>on</b> Kipling Avenue ...|$|R
5000|$|... #Caption: Yorkshire Building Society <b>branch</b> <b>on</b> Briggate in Leeds ...|$|R
5000|$|... #Caption: Historic Bank Leumi <b>branch</b> <b>on</b> Jaffa Road, Jerusalem ...|$|R
5000|$|... #Caption: HMV's former {{flagship}} <b>branch</b> <b>on</b> Oxford Street, London ...|$|R
5000|$|Parksville <b>branch</b> <b>on</b> Vancouver Island, {{managed by}} Ara Balabanian ...|$|R
5000|$|... {{simulating}} the <b>Branch</b> <b>on</b> Program Interrupt (BPI) pseudo instructions, ...|$|R
40|$|Provides an {{authoritative}} {{history of the}} Army Air Defense Artillery <b>Branch</b> <b>on</b> Fort Bliss, Texas. Shipping list no. : 2009 - 0314 -P. Includes bibliographical references (p. 368 - 381) and index. Provides {{an authoritative}} history of the Army Air Defense Artillery <b>Branch</b> <b>on</b> Fort Bliss, Texas. Mode of access: Internet...|$|R
50|$|Austin Public Library {{operates}} the Ruiz <b>Branch</b> <b>on</b> Grove Road.|$|R
5000|$|... #Caption: The Epiphany <b>branch,</b> <b>on</b> East 23rd Street in Manhattan ...|$|R
5000|$|... #Caption: The main <b>branch</b> <b>on</b> Havemeyer Street in Williamsburg, Brooklyn ...|$|R
