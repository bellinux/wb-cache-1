9|10000|Public
5000|$|BNF (<b>Backus</b> <b>normal</b> <b>form,</b> or Backus-Naur form) and EBNF (extended Backus-Naur form) are the {{two main}} {{notation}} techniques for context-free grammars.|$|E
5000|$|Further {{development}} of ALGOL led to ALGOL 60. In the committee's 1963 report, Peter Naur called Backus's notation <b>Backus</b> <b>normal</b> <b>form.</b> Donald Knuth argued that BNF should rather {{be read as}} Backus-Naur form, as it is [...] "not a normal form in the conventional sense",unlike, for instance, Chomsky normal form. The name Pāṇini Backus form was also once suggested {{in view of the}} fact that the expansion <b>Backus</b> <b>normal</b> <b>form</b> may not be accurate, and that Pāṇini had independently developed a similar notation earlier.|$|E
50|$|John Backus {{developed}} the <b>Backus</b> <b>normal</b> <b>form</b> method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth's suggestion renamed Backus-Naur form.|$|E
40|$|Spatio-temporal {{semantics}} {{based on}} "object views" or "event views" has few abilities to represent and model the continuity and gradual oceanic phenomena or objects, which seriously limits the specific marine applications and knowledge discovery and data mining, so this paper proposes a hierarchical abstraction semantics with "marine spatio-temporal process -> life span phases -> evolution sequences -> state units" and process objects included by level with "marine process objects -> phase objects -> sequence object -> state objects" with the oceanic process characteristics into the marine process semantics. In addition, this paper designs the storage and representation of marine process objects using the <b>backus</b> <b>normal</b> <b>forms</b> (BNF) and {{abstract data type}} (ADT). Base on El Nino Southern Oscilation (ENSO) index and Chinese rain gauging station data, this paper also gives a case of study. The spatio-temporal analysis between ENSO process and Chinese rainfall anomalies shows that the marine spatio-temporal semantics not only can illustrate the spatial distribution of Chinese rainfall anomalies in different time scales at ENSO process, life span phases and state units, but also analyze the dynamic changes of Chinese rainfall anomalies in different life span phases or state units within ENSO evolution...|$|R
5000|$|A head <b>normal</b> <b>form</b> is {{not always}} a <b>normal</b> <b>form,</b> because the applied {{arguments}} [...] need not be normal. However, the converse is true: any <b>normal</b> <b>form</b> is also a head <b>normal</b> <b>form.</b> In fact, the <b>normal</b> <b>forms</b> are exactly the head <b>normal</b> <b>forms</b> in which the subterms [...] are themselves <b>normal</b> <b>forms.</b> This gives an inductive syntactic description of <b>normal</b> <b>forms.</b>|$|R
50|$|The third <b>normal</b> <b>form,</b> Boyce-Codd <b>normal</b> <b>form,</b> fourth <b>normal</b> <b>form</b> {{and fifth}} <b>normal</b> <b>form</b> are special {{cases of the}} domain/key <b>normal</b> <b>form.</b> All have either functional, multi-valued or join {{dependencies}} that can be converted into (super)keys. The domains on those <b>normal</b> <b>forms</b> were unconstrained so all domain constraints are satisfied. However, transforming a higher <b>normal</b> <b>form</b> into domain/key <b>normal</b> <b>form</b> {{is not always a}} dependency-preserving transformation and therefore not always possible.|$|R
50|$|Further {{development}} of ALGOL led to ALGOL 60; {{in its report}} (1963), Peter Naur named Backus's notation <b>Backus</b> <b>normal</b> <b>form</b> (BNF), and simplified it to minimize the character set used. However, Donald Knuth argued that BNF should rather be read as Backus-Naur form, and {{that has become the}} commonly accepted usage.|$|E
50|$|In {{computer}} science, Backus-Naur form or <b>Backus</b> <b>normal</b> <b>form</b> (BNF) is a notation {{technique for}} context-free grammars, {{often used to}} describe the syntax of languages used in computing, such as computer programming languages, document formats, instruction sets and communication protocols. They are applied wherever exact descriptions of languages are needed: for instance, in official language specifications, in manuals, and in textbooks on programming language theory.|$|E
5000|$|The {{need for}} formal {{specification}} systems {{has been noted}} for years. In the ALGOL 58 report, John Backus presented a formal notation for describing programming language syntax, later named <b>Backus</b> <b>normal</b> <b>form</b> then renamed Backus-Naur form (BNF). Backus also wrote that a formal description {{of the meaning of}} syntactically valid ALGOL programs wasn't completed in time for inclusion in the report. [...] "Therefore the formal treatment of the semantics of legal programs will be included in a subsequent paper." [...] It never appeared.|$|E
50|$|An {{arbitrary}} propositional formula {{may have}} a very complicated structure. It is often convenient to work with formulas that have simpler <b>forms,</b> known as <b>normal</b> <b>forms.</b> Some common <b>normal</b> <b>forms</b> include conjunctive <b>normal</b> <b>form</b> and disjunctive <b>normal</b> <b>form.</b> Any propositional formula {{can be reduced to}} its conjunctive or disjunctive <b>normal</b> <b>form.</b>|$|R
50|$|A formula in {{negation}} <b>normal</b> <b>form</b> can be {{put into}} the stronger conjunctive <b>normal</b> <b>form</b> or disjunctive <b>normal</b> <b>form</b> by applying distributivity.|$|R
40|$|A key {{is simple}} if it {{consists}} of a single attribute. It is shown that if a relation schema is in third <b>normal</b> <b>form</b> and every key is simple, then it is in projection-join <b>normal</b> <b>form</b> (sometimes called fifth <b>normal</b> <b>form),</b> the ultimate <b>normal</b> <b>form</b> with respect to projections and joins. Furthermore, it is shown that if a relation schema is in Boyce-Codd <b>normal</b> <b>form</b> and some key is simple, then it is in fourth <b>normal</b> <b>form</b> (but not necessarily projection-join <b>normal</b> <b>form).</b> These results give the database designer simple sufficient conditions, {{defined in terms of}} functional dependencies alone, that guarantee that the schema being designed is automatically in higher <b>normal</b> <b>forms...</b>|$|R
50|$|His main {{areas of}} inquiry were design, {{structure}} {{and performance of}} computer programs and algorithms. Areas such as software engineering and software architecture have also been pioneered by Naur. In his book Computing: A Human Activity (1992), which {{is a collection of}} his contributions to computer science, he rejected the formalist school of programming that views programming as a branch of mathematics. He did not like being associated with the Backus-Naur form (attributed to him by Donald Knuth) and said that he would prefer it to be called the <b>Backus</b> <b>normal</b> <b>form.</b>|$|E
40|$|This is a {{definition}} of the syntax of the *** language. It consists of modifications and extensions of the "Revised Report on the Algorithmic Language ALGOL 60 " which is printed in the "Communications of the ACM", January 1963. The paragraph numbering of that report is used in this paper. The corrections and additions are made partially in <b>Backus</b> <b>normal</b> <b>form,</b> and partially in English, and the choice has been {{made on the basis}} of convenience. For example, the use of the weak separator is described readily in a few sentences, whereas the modification to incorporate this into the syntax as described in <b>Backus</b> <b>normal</b> <b>form</b> would have been extensive...|$|E
40|$|Abstract—A {{method of}} reusing and {{retrieving}} shoes ’ design information using CBR (Case Based Reasoning) in area of knowledge based engineering was presented, {{and a new}} framework for reusing design information had been created. The framework and CBR inference engine were introduced. And it emphasized the knowledge expression of mold cases by level decomposition tree BNF (<b>Backus</b> <b>Normal</b> <b>Form)</b> description, a method of measure similarity between the design cases and problem requirement by the fuzzy comprehensive evaluation, and the method of reusing and retrieving shoes ’ design information. This method was validated by the design case of sport shoes in the end. Index Terms—Case based reasoning (CBR), Knowledg...|$|E
50|$|Relations are {{classified}} {{based upon the}} types of anomalies to which they're vulnerable. A database that's in the first <b>normal</b> <b>form</b> is vulnerable to all types of anomalies, while a database that's in the domain/key <b>normal</b> <b>form</b> has no modification anomalies. <b>Normal</b> <b>forms</b> are hierarchical in nature. That is, the lowest level is the first <b>normal</b> <b>form,</b> and the database cannot meet the requirements for higher level <b>normal</b> <b>forms</b> without first having met all {{the requirements of the}} lesser <b>normal</b> <b>forms.</b>|$|R
40|$|In {{this paper}} we {{introduce}} {{the class of}} additive <b>normal</b> <b>form</b> games, which is a subset of <b>normal</b> <b>form</b> games. In additive <b>normal</b> <b>form</b> games, the actions of each agent contribute some amount to the final payoff of all the agents. The contributions of the agents {{are assumed to be}} additive. We discuss the necessary and sufficient conditions for a <b>normal</b> <b>form</b> game to be an additive <b>normal</b> <b>form</b> game and show exactly how a <b>normal</b> <b>form</b> game may be converted to our additive representation...|$|R
50|$|It's {{much easier}} to build a {{database}} in domain/key <b>normal</b> <b>form</b> {{than it is to}} convert lesser databases which may contain numerous anomalies. However, successfully building a domain/key <b>normal</b> <b>form</b> database remains a difficult task, even for experienced database programmers. Thus, while the domain/key <b>normal</b> <b>form</b> eliminates the problems found in most databases, it tends to be the most costly <b>normal</b> <b>form</b> to achieve. However, failing to achieve the domain/key <b>normal</b> <b>form</b> may carry long-term, hidden costs due to anomalies which appear in databases adhering only to lower <b>normal</b> <b>forms</b> over time.|$|R
40|$|In logic, {{there are}} various <b>normal</b> <b>forms</b> for formulae; for example, {{disjunctive}} and conjunctive <b>normal</b> <b>form</b> for formulae of propositional logic or prenex <b>normal</b> <b>form</b> for formulae of predicate logic. There are algorithms for ‘reducing’ a given formula to a semantically equivalent formula in <b>normal</b> <b>form.</b> <b>Normal</b> <b>forms</b> are used {{in a variety of}} contexts including proofs of completeness, automated theorem proving, logic programming etc. In this paper, we develop a <b>normal</b> <b>form</b> for unitary Euler diagrams with shading. We give an algorithm for reducing a given Euler diagram to a semantically equivalent diagram in <b>normal</b> <b>form</b> and hence a decision procedure for determining whether two Euler diagrams are semantically equivalent. Potential applications of the <b>normal</b> <b>form</b> include clutter reduction and automated theorem proving in systems based on Euler diagrams...|$|R
40|$|In {{this paper}} {{the problem of}} finding a <b>normal</b> <b>form</b> of triangles and plane quadrilaterals up to {{similarity}} is considered. Several <b>normal</b> <b>forms</b> for triangles and a <b>normal</b> <b>form</b> for quadrilaterals of special case are described. <b>Normal</b> <b>forms</b> of simple plane objects such as triangles {{can be used in}} mathematics teaching...|$|R
40|$|A {{new type}} of dependency, which {{includes}} the well-known functional dependencies as a special case, is defined for relational databases. By using this concept, a new (“fourth”) <b>normal</b> <b>form</b> for relation schemata is defined. This fourth <b>normal</b> <b>form</b> is strictly stronger than Codd’s “im-proved third <b>normal</b> <b>form</b> ” (or “Boyce-Codd normal form”). It is shown that, every relation schema can be decomposed into a family of relation schemata in fourth <b>normal</b> <b>form</b> without loss of information (that is, the original relation {{can be obtained from}} the new relations by taking joins). Key words and phrases: database design, multivalued dependency, functional dependency, fourth <b>normal</b> <b>form,</b> 4 NF, third <b>normal</b> <b>form,</b> 3 NF, Boyce-Codd <b>normal</b> <b>form,</b> normalization, decomposition, relational databas...|$|R
40|$|<b>Normal</b> <b>forms</b> of Boolean {{functions}} {{allow to}} check whether two given Boolean expressions describe the same Boolean function. The disjunctive <b>normal</b> <b>form</b> (DNF) {{as well as}} the conjunctive <b>normal</b> <b>form</b> (CNF) are widely used. Sometimes an algebraic <b>normal</b> <b>form</b> is taken into account in order to compare or to evaluate given Boolean functions. The basic property of each <b>normal</b> <b>form</b> is the unique representation of the given Boolean function. The aim {{of this paper is to}} study whether there are other <b>normal</b> <b>forms</b> of Boolean functions which allow a more detailed exploration of properties of Boolean Functions. In order to do this we extend the theory of Boolean <b>normal</b> <b>forms</b> in several directions. ...|$|R
50|$|The first {{example is}} also in conjunctive <b>normal</b> <b>form</b> and the last two are in both conjunctive <b>normal</b> <b>form</b> and {{disjunctive}} <b>normal</b> <b>form,</b> but the second example is in neither.|$|R
40|$|In {{this paper}} we are {{concerned}} with the simplest <b>normal</b> <b>form</b> computation of a family of Hopf-zero vector fields without a first integral. This family of vector fields are the classical <b>normal</b> <b>forms</b> of a larger family of vector fields with Hopf-Zero singularity. Indeed, these are defined such that this family would be a Lie subalgebra for the space of all classical <b>normal</b> <b>form</b> vector fields with Hopf-Zero singularity. The simplest <b>normal</b> <b>forms</b> and simplest orbital <b>normal</b> <b>forms</b> of this family with non-zero quadratic part are computed. We also obtain the simplest parametric <b>normal</b> <b>form</b> of any non-degenerate perturbation of this family within the Lie subalgebra. The symmetry group of the simplest <b>normal</b> <b>forms</b> are also discussed. This is a part of our results in decomposing the <b>normal</b> <b>forms</b> of Hopf-Zero singular systems into systems with a first integral and nonconservative systems...|$|R
2500|$|Hermite <b>normal</b> <b>form</b> {{may also}} be used for solving systems of linear Diophantine equations. However, Hermite <b>normal</b> <b>form</b> does not {{directly}} provide the solutions; to get the solutions from the Hermite <b>normal</b> <b>form,</b> one has to successively solve several linear equations. Nevertheless, Richard Zippel wrote that the Smith <b>normal</b> <b>form</b> [...] "is somewhat more than is actually needed to solve linear diophantine equations. Instead of reducing the equation to diagonal form, we only need to make it triangular, which is called the Hermite <b>normal</b> <b>form.</b> The Hermite <b>normal</b> <b>form</b> is substantially easier to compute than the Smith normal form." ...|$|R
40|$|Abstract. Boolean {{circuits}} of polynomial {{size and}} poly-logarithmic depth are given for computing the Hermite and Smith <b>normal</b> <b>forms</b> of polynomial matrices over finite {{fields and the}} field of rational numbers. The circuits for the Smith <b>normal</b> <b>form</b> computation are probabilistic ones and also determine very efficient sequential algorithms. Furthermore, we give a polynomial-time deterministic sequential algorithm for the Smith <b>normal</b> <b>form</b> over the rationals. The Smith <b>normal</b> <b>form</b> algorithms are applied to the Rational canonical form of matrices over finite fields and the field of rational numbers. Ke ywords: Parallel algorithm, Hermite <b>normal</b> <b>form,</b> Smith <b>normal</b> <b>form,</b> polynomial-time complexity. 1...|$|R
5000|$|Hermite <b>normal</b> <b>form</b> {{may also}} be used for solving systems of linear Diophantine equations. However, Hermite <b>normal</b> <b>form</b> does not {{directly}} provide the solutions; to get the solutions from the Hermite <b>normal</b> <b>form,</b> one has to successively solve several linear equations. Nevertheless, Richard Zippel wrote that the Smith <b>normal</b> <b>form</b> [...] "is somewhat more than is actually needed to solve linear diophantine equations. Instead of reducing the equation to diagonal form, we only need to make it triangular, which is called the Hermite <b>normal</b> <b>form.</b> The Hermite <b>normal</b> <b>form</b> is substantially easier to compute than the Smith normal form." ...|$|R
40|$|We review various <b>normal</b> <b>form</b> {{representations}} of Boolean functions and outline a comparative study between them, {{which shows that}} the median <b>normal</b> <b>form</b> system provides representations that are more efficient than the classical DNF, CNF and Reed–Muller (polynomial) <b>normal</b> <b>form</b> representations. We present an algorithm for producing median <b>normal</b> <b>form</b> {{representations of}} Boolean functions...|$|R
5000|$|In Boolean algebra, the {{algebraic}} <b>normal</b> <b>form</b> (ANF), {{ring sum}} <b>normal</b> <b>form</b> (RSNF or RNF), Zhegalkin <b>normal</b> <b>form,</b> or Reed-Muller expansion {{is a way}} of writing logical formulas in one of three subforms: ...|$|R
40|$|We {{introduce}} the peak <b>normal</b> <b>form</b> for {{elements of the}} Baumslag-Solitar groups BS(p,q). This <b>normal</b> <b>form</b> {{is very close to}} the lengthlexicographical <b>normal</b> <b>form,</b> but more symmetric. Both <b>normal</b> <b>forms</b> are geodesic. This means the <b>normal</b> <b>form</b> of an element u − 1 v yields the shortest path between u and v in the Cayley graph. For horocyclic elements the peak <b>normal</b> <b>form</b> and the length-lexicographical <b>normal</b> <b>form</b> coincide. The main result of this paper is that we can compute the peak <b>normal</b> <b>form</b> in polynomial time if p divides q. As consequence we can compute geodesic lengths in this case. In particular, this gives a partial answer to Question 1 in [4]. For arbitrary p and q it is possible to compute the peak <b>normal</b> <b>form</b> (length-lexicographical <b>normal</b> <b>form</b> resp.) also the for elements in the horocyclic subgroup and, more generally, for elements which we call hills. This approach leads to a linear time reduction of the problem of computing geodesics to the problem of computing geodesics for Britton-reduced words where the t-sequence starts with t − 1 and ends with t. 1...|$|R
50|$|The Kuroda <b>normal</b> <b>form</b> is {{an actual}} <b>normal</b> <b>form</b> for non-contracting grammars.|$|R
5000|$|... #Subtitle level 2: A {{rational}} <b>normal</b> <b>form</b> generalizing the Jordan <b>normal</b> <b>form</b> ...|$|R
40|$|We {{present an}} {{algorithm}} for the computation of a shifted Popov <b>Normal</b> <b>Form</b> of a rectangular polynomial matrix. For speci c input shifts, we obtain methods for computing the matrix {{greatest common divisor}} of two matrix polynomials (in <b>normal</b> <b>form)</b> or such polynomial <b>normal</b> <b>form</b> computation as the classical Popov form and the Hermite <b>Normal</b> <b>Form...</b>|$|R
40|$|This thesis {{deals with}} issues of <b>normal</b> <b>forms</b> from theory of formal languages. Basic terms from this area are listed here, {{different}} types of grammars as well and especially <b>normal</b> <b>forms</b> and algorithms that transfer grammars into <b>normal</b> <b>forms.</b> Description of design and implementation of program {{which is used to}} transfer input grammar into entered <b>normal</b> <b>form</b> is included...|$|R
40|$|Boolean {{circuits}} of polynomial {{size and}} poly-logarithmic depth are given for computing the Hermite and Smith <b>normal</b> <b>forms</b> of polynomial matrices over finite {{fields and the}} field of rational numbers. The circuits for the Smith <b>normal</b> <b>form</b> computation are probabilistic ones and also determine very efficient sequential algorithms. Furthermore, we give a polynomial-time deterministic sequential algorithm for the Smith <b>normal</b> <b>form</b> over the rationals. The Smith <b>normal</b> <b>form</b> algorithms are applied to the Rational canonical form of matrices over finite fields and the field of rational numbers. Keywords: Parallel algorithm, Hermite <b>normal</b> <b>form,</b> Smith <b>normal</b> <b>form,</b> polynomial-time complexity. 1. Introduction The main results of this paper establish fast parallel algorithms for computing the Hermite and Smith <b>normal</b> <b>form</b> of matrices with polynomial entries. The Hermite or Smith <b>normal</b> <b>form</b> of a square matrix is generally defined for the case of entries from a principal ideal domain. For example [...] ...|$|R
5000|$|An object x in A {{is called}} {{reducible}} if there exist some other y in A and otherwise {{it is called}} irreducible or a <b>normal</b> <b>form.</b> An object y is called a <b>normal</b> <b>form</b> of x if , and y is irreducible. If x has a unique <b>normal</b> <b>form,</b> then this is usually denoted with [...] In example 1 above, c is a <b>normal</b> <b>form,</b> and [...] If every object {{has at least one}} <b>normal</b> <b>form,</b> the ARS is called normalizing.|$|R
