93|30|Public
25|$|In 1974, Tamiaki Yoneya {{discovered}} {{that all the}} known string theories included a massless spin-two particle that obeyed the correct Ward identities to be a graviton. John Schwarz and Joel Scherk came {{to the same conclusion}} and made the bold leap to suggest that string theory was a theory of gravity, not a theory of hadrons. They reintroduced Kaluzaâ€“Klein theory as a way of making sense of the extra dimensions. At the same time, quantum chromodynamics was recognized as the correct theory of hadrons, shifting the attention of physicists and apparently leaving the <b>bootstrap</b> <b>program</b> in the dustbin of history.|$|E
25|$|Since the {{beginning}} of computer networks, {{there has been a}} persistent need for client systems which can boot appropriate software images, with appropriate configuration parameters, both retrieved at boot time from one or more network servers. This goal requires a client to use a set of pre-boot services, based on industry standard network protocols. Additionally, the Network <b>Bootstrap</b> <b>Program</b> (NBP) which is initially downloaded and run must be built using a client firmware layer (at the device to be bootstrapped via PXE) providing a hardware independent standardized way to interact with the surrounding network booting environment. In this case the availability and subjection to standards are a key factor required to guarantee the network boot process system interoperability.|$|E
25|$|DHCP is used {{to provide}} the {{appropriate}} client network parameters and specifically the location (IP address) of the TFTP server hosting, ready for download, the initial <b>bootstrap</b> <b>program</b> (NBP) and complementary files. To initiate a PXE bootstrap session the DHCP component of the client's PXE firmware broadcasts a DHCPDISCOVER packet containing PXE-specific options to port 67/UDP (DHCP server port); it asks for the required network configuration and network booting parameters. The PXE-specific options identify the initiated DHCP transaction as a PXE transaction. Standard DHCP servers (non PXE enabled) {{will be able to}} answer with a regular DHCPOFFER carrying networking information (i.e. IP address) but not the PXE specific parameters. A PXE client {{will not be able to}} boot if it only receives an answer from a non PXE enabled DHCP server.|$|E
5000|$|Some {{machines}} {{accelerated the}} bootstrap process {{by allowing the}} operator to set the switches to contain one or two machine language instructions and then directly executing those instructions. Other machines allowed I/O devices to be explicitly commanded from the front panel (for example, [...] "Read-In Preset" [...] on the PDP-10 or the accessing of memory-mapped I/O devices on a PDP-11). Some machines also contained various <b>bootstrap</b> <b>programs</b> in ROM and all that was required to boot the system was to start it executing at {{the address of the}} correct ROM program.|$|R
50|$|A Volume Boot Record (VBR) (also {{known as}} a volume boot sector, a {{partition}} boot record or a partition boot sector) {{is a type of}} boot sector introduced by the IBM Personal Computer. It may be found on a partitioned data storage device such as a hard disk, or an unpartitioned device such as a floppy disk, and contains machine code for <b>bootstrapping</b> <b>programs</b> (usually, but not necessarily, operating systems) stored {{in other parts of the}} device. On non-partitioned storage devices, it is the first sector of the device. On partitioned devices, it is the first sector of an individual partition on the device, with the first sector of the entire device being a Master Boot Record (MBR) containing the partition table.|$|R
40|$|The Mosaic {{element is}} a fast single chip {{computer}} {{designed to be}} used in groups for concurrent computation experiments. Each element contains a 16 -bit processor, read-write storage, read-only store for a small initialization and <b>bootstrap</b> loading <b>program</b> and four output ports. The Mosaic processor, a highly structured design that achieves very good performance and density through innovations in its microcode, circuit techniques, and layout, is described in detai 1...|$|R
25|$|Over {{the next}} years, {{hundreds}} of physicists worked {{to complete the}} <b>bootstrap</b> <b>program</b> for this model, with many surprises. Veneziano himself discovered that for the scattering amplitude to describe the scattering of a particle that appears in the theory, an obvious self-consistency condition, the lightest particle must be a tachyon. Miguel Virasoro and Joel Shapiro found a different amplitude now understood {{to be that of}} closed strings, while Ziro Koba and Holger Nielsen generalized Veneziano's integral representation to multiparticle scattering. Veneziano and Sergio Fubini introduced an operator formalism for computing the scattering amplitudes that was a forerunner of world-sheet conformal theory, while Virasoro understood how to remove the poles with wrong-sign residues using a constraint on the states. Claud Lovelace calculated a loop amplitude, and noted that there is an inconsistency unless the dimension of the theory is 26. Charles Thorn, Peter Goddard and Richard Brower went on to prove that there are no wrong-sign propagating states in dimensions {{less than or equal to}} 26.|$|E
2500|$|TFTP {{has always}} been {{associated}} to network booting. One of the first attempts in this regard was the Bootstrap Loading using TFTP standard RFC 906, published in 1984, which established the 1981 published Trivial File Transfer Protocol standard RFC 783 {{to be used as}} the standard file transfer protocol for bootstrap loading. It was [...] followed shortly after by the Bootstrap Protocol standard RFC 951 (BOOTP), published in 1985, which allowed a disk-less client machine to discover its own IP address, the address of a TFTP server, and the name of a Network <b>Bootstrap</b> <b>Program</b> (NBP) to be TFTP transferred, loaded into memory, and executed. Dynamic Host Configuration Protocol standard RFC 2131 (DHCP) published in 1997 improved BOOTP capabilities. Finally, the Preboot Execution Environment (PXE) version 2.0 was released in December 1998, and the update 2.1 was made public in September 1999 counting on TFTP as its file transfer protocol. Intel has recently decided to widely support PXE within the new UEFI specification extending the TFTP support to all EFI/UEFI environments.|$|E
5000|$|The server {{sends the}} Network <b>Bootstrap</b> <b>Program</b> (NBP) (...) through TFTP ...|$|E
40|$|Transcription {{factors can}} either {{activate}} or repress target genes by binding onto short nucleotide sequence motifs in the promoter regions of these genes. Here, we present POBO, a promoter <b>bootstrapping</b> <b>program,</b> for gene expression data. POBO {{can be used}} to detect, compare and verify predetermined transcription factor binding site motifs in the promoters of one or two clusters of co-regulated genes. The program calculates the frequencies of the motif in the input promoter sets. A bootstrap analysis detects significantly over- or underrepresented motifs. The output of the <b>program</b> presents <b>bootstrapped</b> results in picture and text formats. The program was tested with published data from transgenic WRKY 70 microarray experiments. Intriguingly, motifs recognized by the WRKY transcription factors of plant defense pathways are similarly enriched in both up- and downregulated clusters. POBO analysis suggests slightly modified hypothetical motifs that discriminate between up- and downregulated clusters. In conclusion, POBO allows easy, fast and accurate verification of putative regulatory motifs. The statistical tests implemented in POBO can be useful in eliminating false positives from the results of pattern discovery programs and increasing the reliability of true positives. POBO is freely available from [URL]...|$|R
5000|$|... module demo; /* This {{behavior}} simply sends two print(...) {{messages to}} the standardOutput actor.*/behavior HelloWorld { /* The act(...) message handler is invoked by stand-alone theaters automatically and is used to <b>bootstrap</b> salsa <b>programs.</b> */ void act( [...] String argv [...] ) { standardOutput<-print( [...] "Hello" [...] ) @ standardOutput<-print( [...] "World!" [...] ); } /* Notice that the above code is different from standardOutput<-print( [...] "Hello" [...] ); standardOutput<-print( [...] "World!" [...] ); the code above uses a continuation {{to insure that the}} world message is sent after the hello message completes processing. */} ...|$|R
40|$|We derive an {{empirical}} test for third-order stochastic dominance {{that allows for}} diversification between choice alternatives. The test can be computed using straightforward linear <b>programming.</b> <b>Bootstrapping</b> techniques and asymptotic distribution theory can approximate the sampling properties of the test results and allow for statistical inference. Our approach is illustrated using real-life US stock market data...|$|R
50|$|The <b>Bootstrap</b> <b>program</b> {{is broken}} up into two modules, Bootstrap:1 and Bootstrap:2.|$|E
5000|$|... #Caption: PDP-8/E {{front panel}} showing the {{switches}} used {{to load the}} <b>bootstrap</b> <b>program</b> ...|$|E
50|$|Racket is used {{to teach}} {{students}} algebra through game design in the <b>Bootstrap</b> <b>program.</b>|$|E
40|$|This paper {{considers}} feature {{discovery in}} fault diagnosis using bootstrap processing and genetic <b>programming.</b> <b>Bootstrap</b> {{is one of}} the powerful computer-simulated statistical techniques. It integrates classical statistics with the numerical calculations of a computer. This paper uses bootstrap to preprocess the operational data acquired from a running machine. Then, genetic programming evolves with the preprocessed data samples. The main aim is to discover an efficient tree-like structure {{on the basis of a}} group of simple initial candidate features. The best compound feature found by genetic programming can discriminate among the four kinds of commonly operating statuses of the machine. This novel approach is demonstrated by fault diagnosis of the fuel system in a diesel engine. Significance: The proposed feature discovery and analysis approach, which has been tested in a diesel engine fuel system, will significantly enhance the classification performance of fault diagnosis by combing <b>bootstrap</b> processing, genetic <b>programming,</b> and engineering knowledge...|$|R
40|$|Abstract This paper {{performs}} a multidimensional first order dominance analysis of child wellbeing in the Democratic Republic of Congo (DRC). This methodology allows the ordinal ranking of the 11 provinces of the DRC {{in terms of}} their wellbeing based upon the probability of their domination. This empirical application obviates the need to adopt a weighting scheme for the deprivation indicators or to rely on the signs of other cross-derivatives for comparison. We execute a <b>bootstrap</b> linear <b>programming</b> algorithm on seven deprivation indicators for three age groups of children derived from the DRC 2007 Standard Demographic and Health Survey. The results reveal widespread disparities in child wellbeing in the DRC...|$|R
5000|$|... === Path names === Fully {{qualified}} path name (FQPN) is {{the full}} {{path of a}} resource, directory or file, stored in a computer. It is composed by the full path to the resource and its syntax depends on the operating system. In Unix-like operating systems it is represented in the following form: , while in DOS and Microsoft Windows it is represented in the following form: [...] FQPN is also used in Networking and takes the following form: , where [...] is the root directory, the first or top-most directory in a hierarchy, and, in this case, the rooted tree; [...] is the fully qualified domain name or node. It is also used in <b>bootstrapping,</b> computer <b>programming</b> and in computer science referencing.|$|R
50|$|The {{computer}} term bootstrap {{began as}} a metaphor in the 1950s. In computers, pressing a bootstrap button caused a hardwired program to read a <b>bootstrap</b> <b>program</b> from an input unit. The computer would then execute the <b>bootstrap</b> <b>program,</b> which caused it to read more program instructions. It became a self-sustaining process that proceeded without external help from manually entered instructions. As a computing term, bootstrap has been used since at least 1953.|$|E
50|$|XDOS was the {{diagnostic}} and <b>bootstrap</b> <b>program</b> for the Cromemco XXU. XDOS is a 64K Byte program stored on the XXU 68020 processor Card.|$|E
50|$|On final approach, Allen {{realized}} that they had forgotten to write a <b>bootstrap</b> <b>program</b> to read the tape into memory. Writing in 8080 machine language, Allen finished the program before the plane landed. Only when they loaded the program onto an Altair and saw a prompt asking for the system's memory size did Gates and Allen know that their interpreter worked on the Altair hardware. Later, they made a bet on who could write the shortest <b>bootstrap</b> <b>program,</b> and Gates won.|$|E
50|$|The ND812 did {{not have}} an {{operating}} system, just a front panel and run and halt switches.The I/O facility allowed for peripherals to directly load programs into memory while the computerwas halted and not executing instructions. Another option was to enter a short loader programthat would be used to <b>bootstrap</b> the desired <b>program</b> from a peripheral such as a teletype orpaper tape reader. Since core memory is non-volatile, shutting off the computer did not resultin data or program loss.|$|R
40|$|We derive {{empirical}} {{tests for}} stochastic dominance {{that allow for}} diversification between choice alternatives. The tests can be computed using straightforward linear <b>programming.</b> <b>Bootstrapping</b> techniques and asymptotic distribution theory can approximate the sampling properties of the test results and allow for statistical inference. Our results could provide a stimulus to the further proliferation of stochastic dominance for the problem of portfolio selection and evaluation (as well as other choice problems under uncertainty that involve diversification possibilities). An empirical application for US stock market data illustrates our approach...|$|R
30|$|The {{sequences}} were aligned {{using the}} MEGA 3.1 program (Molecular Evolutionary Genetic Analysis) ([URL] The size of CYP 102 A 1 variants was 1, 049 amino acids (Additional file 1). ITS (338 nucleotides) between 16 S and 23 S rRNA genes of B. megaterium was analyzed in this study. Phylogenetic trees {{were conducted by}} the neighbor-joining method using the MEGA 3.1 <b>program.</b> <b>Bootstrap</b> analysis of the neighbor-joining data, using 1, 000 resamplings, was carried out to evaluate the validity and reliability of the tree topology.|$|R
50|$|PXELINUX {{is used in}} {{conjunction}} with a PXE-compliant ROM on a network interface controller (NIC), which establishes a PXE environment that uses DHCP or BOOTP to configure its minimalistic networking stack capable of UDP/IP networking, and then downloads a <b>bootstrap</b> <b>program</b> via TFTP. This <b>bootstrap</b> <b>program</b> loads and configures an operating system kernel according to directives that are also downloaded from the TFTP server; after the kernel is booted, it sets up its own drivers for network devices, establishes networking configuration, etc. and carries out desired tasks on its own.|$|E
5000|$|Next the {{operator}} {{would set the}} [...] "value" [...] switch, and then enter the value intended for that address. After entering several of these instructions (most computers had a [...] "deposit next" [...] button, which would deposit subsequent values in subsequent addresses, relieving {{the operator}} of needing to toggle in addresses), the operator would then set the starting address of the <b>bootstrap</b> <b>program</b> and press the [...] "run" [...] switch to begin {{the execution of the}} program. The <b>bootstrap</b> <b>program</b> usually read a somewhat longer program from punched paper-tape, punched cards, magnetic tape or disk which in turn would load the operating system from disk.|$|E
5000|$|The resource-level Load Management {{capability}} acts as {{a specialized}} Control that interfaces with the <b>bootstrap</b> <b>program</b> of the designated Entity to identify which operating system or other software should be loaded when a bootstrap operation is performed.|$|E
50|$|The term boot {{comes from}} the idea of lifting oneself by one's own bootstraps: the {{computer}} contains a tiny <b>program</b> (<b>bootstrap</b> loader) which will load and run a program found on a boot device. This program may itself be a small program designed to load a larger and more capable program, i.e., the full operating system. To enable booting without the requirement either for a mass storage device or to write to the boot medium, it is usual for the boot program to use some system RAM as a RAM disk for temporary file storage.|$|R
40|$|A recent upgrade of the TSRV {{research}} flight {{system at}} NASA Langley Research Center retained the original monochrome display system. However, the display memory loading equipment was replaced requiring design {{and development of}} new methods of performing this task. This paper describes the new techniques developed to load memory in the display system. An outdated paper tape method for loading the <b>BOOTSTRAP</b> control <b>program</b> was replaced by EPROM storage of the characters contained on the tape. Rather than move a tape past an optical reader, a counter was implemented which steps sequentially through EPROM addresses and presents the same data to the loader circuitry. A cumbersome cassette tape method for loading the applications software was replaced with a floppy disk method using a microprocessor terminal installed {{as part of the}} upgrade. The cassette memory image was transferred to disk and a specific software loader was written for the terminal which duplicates the function of the cassette loader...|$|R
30|$|The Tollip {{sequence}} {{was analyzed}} by BLAST program ([URL] at the NCBI server (www.ncbi.nlm.nih.gov/Structure/cdd/). The multiple sequence alignment of Tollip protein between common carp {{and other species}} was performed by Clustal W method. The conserved domain structures of Tollip were predicted by the SMART online software ([URL] Phylogenetic tree was constructed based on the multiple sequence alignment with the full-length amino acid sequences of known Tollip using neighbor-joining method in MEGA 6.0 software <b>program.</b> <b>Bootstrap</b> sampling was reiterated 1000 times. The GenBank accession numbers or references for these sequences were shown in Additional file 1 : TableÂ S 1.|$|R
50|$|A drum could record 12,000 {{words of}} data. It also had 400 words of 'reserved' storage where the computer's <b>bootstrap</b> <b>program</b> (then called Initial Orders) was stored. Up to 8 drums could be attached. Average access time was 5.7 ms.|$|E
50|$|Major Smith was {{selected}} {{to participate in the}} <b>Bootstrap</b> <b>Program</b> and reported to Oklahoma State in August 1978. He earned a Bachelor's Degree in Asian Studies in January 1980 and was then transferred to the Armed Forces Staff College in Norfolk, Virginia.|$|E
5000|$|Airman Scholarship and Commissioning Program (ASCP)*: Permits {{active duty}} USAF airmen and junior non-commissioned {{officers}} {{to separate from}} active duty and receive a scholarship worth up to $18,000 per year while pursuing their commission through Air Force ROTC.(* Previously known as <b>Bootstrap</b> <b>Program.)</b> ...|$|E
50|$|The Q-31s were {{equipped}} with four 16 kiloword memory banks. The memory bank was {{oil and water}} cooled. Also considered {{as part of the}} memory subsystem in that they were addressed via fixed reserved memory addresses, were four 48 position switch banks, in which a short program could be inserted, and a plugboard, similar to the one used in IBM unit record equipment, that had the capacity of 32 words, so longer <b>bootstrap</b> or diagnostic <b>programs</b> could be installed in plug panels which could then be inserted into the receptacle and used. This served as a primitive ROM.|$|R
40|$|Abstract â€” The {{general purpose}} {{microcomputer}} data system described was {{developed as a}} costâ€”effective means to bring the power of machine intelligence {{to a wide variety}} of oneâ€”ofâ€”aâ€”kind chemical instruments and their researcher/operator. The salient design features include extreme low cost, modularity, optimized I/O structure for real time experimental control and data acquisition, economical large random access memory implementation, flexible video display generation for operator interaction and data presentation, hardware <b>program</b> <b>bootstrap,</b> compatibility with a host computer support system, as rell as provisions for local mass storage and hard copy generation. Application to some specific instruments and its use as a standâ€”alone instructional unit are described...|$|R
40|$|Adding {{computer}} science to already-packed middle- and highschool curricula can be difficult; after-school programs offer an enticing alternative to broadening student exposure to computing. Over {{the last eight}} years, we have deployed a content-rich introductory computing course to over a thousand middle-school students through after-school programs nationwide. Our <b>program,</b> <b>Bootstrap,</b> teaches students to program their own videogames {{in a way that}} connects deeply to in-school learning goals for algebra and coordinate geometry. Volunteers (college students or software professionals) teach Bootstrap through established after-school partners. This paper describes both Bootstrap and lessons we have learned about teaching computing effectively in after-school programs using volunteer teachers...|$|R
