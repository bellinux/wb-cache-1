0|343|Public
5000|$|Many {{non-integral}} values, such as decimal 0.2, have {{an infinite}} place-value representation in binary (.001100110011...) {{but have a}} finite place-value in <b>binary-coded</b> <b>decimal</b> (0.0010). Consequently, a system based on <b>binary-coded</b> <b>decimal</b> <b>representations</b> of <b>decimal</b> fractions avoids errors representing and calculating such values.|$|R
5000|$|<b>Binary-coded</b> <b>decimal,</b> a <b>representation</b> of {{integers}} {{commonly used}} in mainframe financial applications and in databases ...|$|R
50|$|Early {{computers}} used {{a variety}} of four-bit binary coded <b>decimal</b> (BCD) <b>representations</b> and the six-bit codes for printable graphic patterns common in the U.S. Army (FIELDATA) and Navy. These representations included alphanumeric characters and special graphical symbols. These sets were expanded in 1963 to seven bits of coding, called the American Standard Code for Information Interchange (ASCII) as the Federal Information Processing Standard, which replaced the incompatible teleprinter codes in use by different branches of the U.S. government and universities during the 1960s. ASCII included the distinction of upper- and lowercase alphabets and a set of control characters to facilitate the transmission of written language as well as printing device functions, such as page advance and line feed, and the physical or logical control of data flow over the transmission media. During the early 1960s, while also active in ASCII standardization, IBM simultaneously introduced in its product line of System/360 the eight-bit Extended Binary Coded Decimal Interchange Code (EBCDIC), an expansion of their six-bit <b>binary-coded</b> <b>decimal</b> (BCDIC) <b>representation</b> used in earlier card punches.The prominence of the System/360 led to the ubiquitous adoption of the eight-bit storage size, while in detail the EBCDIC and ASCII encoding schemes are different.|$|R
25|$|Both {{computer}} {{hardware and software}} also use internal representations which are effectively decimal for storing decimal values and doing arithmetic. Often this arithmetic is done on data which are encoded using some variant of <b>binary-coded</b> <b>decimal,</b> especially in database implementations, {{but there are other}} <b>decimal</b> <b>representations</b> in use (such as in the new IEEE 754 Standard for Floating-Point Arithmetic).|$|R
50|$|The <b>binary-coded</b> <b>decimal</b> scheme {{described}} in this article is the most common encoding, but there are many others. The method here can be referred to as Simple <b>Binary-Coded</b> <b>Decimal</b> (SBCD) or BCD 8421.|$|R
5000|$|Auxiliary carry (AC or H), {{used for}} <b>binary-coded</b> <b>decimal</b> arithmetic.|$|R
500|$|... where data {{is stored}} in the {{smallest}} possible decimal format (typically packed <b>binary-coded</b> <b>decimal)</b> ...|$|R
50|$|Unlike {{most other}} timecodes, the {{components}} are encoded in straight binary, not <b>binary-coded</b> <b>decimal.</b>|$|R
5000|$|... where data {{is stored}} in the {{smallest}} possible decimal format (typically packed <b>binary-coded</b> <b>decimal)</b> ...|$|R
50|$|<b>Binary-coded</b> <b>decimal</b> (BCD) {{numbers were}} in the past used for storing decimal numbers, {{especially}} in financial software.|$|R
5|$|<b>Binary-coded</b> <b>decimal</b> {{time code}} of date and time, {{transmitted}} as varying length pulses of 100Hz tone, one bit per second.|$|R
5000|$|<b>Binary-coded</b> <b>decimal</b> day of year, hours, minutes, and (for some formats) {{seconds and}} {{fractions}} are always included. Optional components are: ...|$|R
5000|$|<b>Binary-coded</b> <b>decimal</b> {{time code}} of date and time, {{transmitted}} as varying length pulses of 100 Hz tone, one bit per second.|$|R
50|$|The Saturn {{architecture}} is nibble-based; that is, the core unit of data is 4-bit-sized, which can hold one <b>binary-coded</b> <b>decimal</b> (BCD) digit.|$|R
50|$|Technically, <b>binary-coded</b> <b>decimal</b> {{describes}} the encoding of decimal numbers where each decimal digit {{is represented by}} a fixed number of bits, usually four.|$|R
50|$|Software that encodes the CE / AD {{calendar}} {{year of a}} date as a four-character <b>binary-coded</b> <b>decimal</b> {{will no longer be}} able to encode the contemporaneous date.|$|R
50|$|Binary fixed-point {{types are}} most {{commonly}} used, because the rescaling operations {{can be implemented}} as fast bit shifts. Binary fixed-point numbers can represent fractional powers of two exactly, but, like binary floating-point numbers, cannot exactly represent fractional powers of ten. If exact fractional powers of ten are desired, then a decimal format should be used. For example, one-tenth (0.1) and one-hundredth (0.01) can be represented only approximately by binary fixed-point or binary floating-point representations, while they can be represented exactly in decimal fixed-point or <b>decimal</b> floating-point <b>representations.</b> These representations may be encoded in many ways, including <b>binary-coded</b> <b>decimal</b> (BCD).|$|R
5000|$|... #Caption: A binary clock {{might use}} LEDs to express binary values. In this clock, each column of LEDs shows a <b>binary-coded</b> <b>decimal</b> numeral of the {{traditional}} sexagesimal time.|$|R
500|$|Also {{like the}} IRIG timecode, numeric data (minute, hour, day of year, and last two digits of year) are sent in <b>binary-coded</b> <b>decimal</b> (BCD) format {{rather than as}} simple binary integers: ...|$|R
5000|$|<b>Binary-coded</b> <b>decimal</b> (BCD) is an {{encoding}} for decimal {{numbers in}} which each digit is represented by its own binary sequence. It is possible to implement a floating-point system with BCD encoding.|$|R
25|$|The answer, 34 is sent (shifted) {{back to the}} X register. From there, it is {{converted}} by the binary decoder unit into a <b>decimal</b> number (usually <b>binary-coded</b> <b>decimal),</b> and then shown on the display panel.|$|R
40|$|The {{subject of}} the article is about basic {{principles}} of creating scale transform circuits in current D/A conversion (DAC) schemes for the <b>binary-coded</b> <b>decimal</b> numbers (BCD). Optimal transform circuits for BCD DAC was also given. ???????????? ???????? ???????? ?????????? ???????????? ????? (??) ??? ???????????????? ???-??? (???) ???????-?????????? ?????? ????????? (????). ?????????? ??????????? ????????? ???????????? ????? ??? ??? ????...|$|R
50|$|The SPD EEPROM {{on modern}} {{computer}} memory modules contains a single-byte <b>binary-coded</b> <b>decimal</b> (two digit) year-of-manufacture code at offset +93 (0x5D). Due to the 18-24 month generational cycle {{in computer technology}} {{this should not be}} a problem.|$|R
50|$|The time is {{represented}} in <b>binary-coded</b> <b>decimal.</b> It represents civil time, including summer time adjustments. The time transmitted {{is the time of}} the following minute; e.g. during December 31 23:59, the transmitted time encodes January 1 00:00.|$|R
50|$|Each minute, WWVB {{broadcasts}} {{the current}} {{time in a}} <b>binary-coded</b> <b>decimal</b> format.While {{this is based on}} the IRIG timecode, the bit encoding and the order of the transmitted bits differs from any current or past IRIG time distribution standard.|$|R
50|$|One {{variant of}} seven-segment decoder is the BCD to seven-segment decoder, which {{translates}} a <b>binary-coded</b> <b>decimal</b> value into the corresponding segment control signals for input integer values 0 to 9. This decoder function {{is available in}} standard ICs such as the CMOS 4511.|$|R
50|$|With four bits, it is {{possible}} to create 16 different values. All single digit hexadecimal numbers can be written with four bits. <b>Binary-coded</b> <b>decimal</b> is a digital encoding method for numbers using decimal notation, with each decimal digit represented by four bits.|$|R
50|$|The {{traditional}} {{system of}} binary encoding for decimal digits, known as <b>binary-coded</b> <b>decimal</b> (BCD), uses four bits to encode each digit, resulting in significant wastage of binary data bandwidth (since four bits can store 16 states {{and are being}} used to store only 10).|$|R
50|$|A four-bit {{quantity}} {{is known}} as a nibble (when eating, being smaller than a bite) or nybble (being a pun on the form of the word byte). One nibble corresponds to one digit in hexadecimal and holds one digit or a sign code in <b>binary-coded</b> <b>decimal.</b>|$|R
50|$|The basic {{format is}} an 80-bit code {{that gives the}} time of day to the second, and the frame number within the second. Values are stored in <b>binary-coded</b> <b>decimal,</b> least {{significant}} bit first.There are thirty-two bits of user data, usually used for a reel number and date.|$|R
5000|$|In {{computer}} science, {{the double}} dabble algorithm {{is used to}} convert binary numbers into <b>binary-coded</b> <b>decimal</b> (BCD) notation. It {{is also known as}} the Shift-and-add-3 algorithm, and can be implemented using a small number of gates in computer hardware, but at the expense of high latency.|$|R
40|$|Coded {{representation}} of time signals [...] day, hour, minute, second [...] is changed from <b>binary-coded</b> <b>decimal</b> (BCD) to IRIG standard time-code format B by circuit that uses nine integrated circuits. Input to code-converter circuit is parallel BCD pulses on bus output is serial pulses of IRIG-B on single line...|$|R
5000|$|A BCD to decimal decoder has ten output bits. It accepts {{an input}} value {{consisting}} of a <b>binary-coded</b> <b>decimal</b> integer value and activates one specific, unique output for every input value in the range 0,9. All outputs are held inactive when a non-decimal value {{is applied to the}} inputs.|$|R
50|$|In {{computing}} {{and electronic}} systems, <b>binary-coded</b> <b>decimal</b> (BCD) is {{a class of}} binary encodings of decimal numbers where each decimal digit is represented by a fixed number of bits, usually four or eight. Special bit patterns are sometimes used for a sign or for other indications (e.g., error or overflow).|$|R
50|$|Six-bit BCD {{code was}} the {{adaptation}} of the punched card code to binary code. IBM applied the terms <b>binary-coded</b> <b>decimal</b> and BCD to the variations of BCD alphamerics used in most early IBM computers, including the IBM 1620, IBM 1400 series, and non-Decimal Architecture members of the IBM 700/7000 series.|$|R
25|$|The {{main source}} of {{problems}} was confusion between hexadecimal number encoding and <b>binary-coded</b> <b>decimal</b> encodings of numbers. Both hexadecimal and BCD encode the numbers 0–9 as 0x0–0x9. But BCD encodes the number 10 as 0x10, whereas hexadecimal encodes the number 10 as 0x0A; 0x10 interpreted as a hexadecimal encoding represents the number 16.|$|R
