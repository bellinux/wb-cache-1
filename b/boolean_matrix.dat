300|161|Public
2500|$|The {{following}} function [...] "life", {{written in}} Dyalog APL, takes a <b>boolean</b> <b>matrix</b> and calculates {{the new generation}} according to Conway's Game of Life. It demonstrates the power of APL to implement a complex algorithm in very little code, {{but it is also}} very hard to follow unless one has advanced knowledge of APL.|$|E
2500|$|In automata theory, {{the term}} {{rectangular}} relation {{has also been}} used to denote a difunctional relation. This terminology is justified {{by the fact that}} when represented as a <b>boolean</b> <b>matrix,</b> the columns and rows of a difunctional relation can be arranged {{in such a way as}} to present rectangular blocks of true on the (asymmetric) main diagonal. Other authors however use the term [...] "rectangular" [...] to denote any heterogeneous relation whatsoever.|$|E
5000|$|Cycle rank of a graph, or a {{symmetric}} <b>Boolean</b> <b>matrix,</b> {{measures the}} minimum parallel {{time needed to}} perform Cholesky decomposition ...|$|E
40|$|An {{equivalence}} relation is a reflexive, symmetric, transitive binary relation. Equivalence relations are fundamental {{in the theory}} of relations and important in the fields of applications. In the paper relations are represented by <b>boolean</b> <b>matrices,</b> and properties of <b>boolean</b> <b>matrices</b> representing {{equivalence relation}}s are examined. Especially equivalent conditions for equivalence relations are shown in the form of <b>boolean</b> <b>matrices...</b>|$|R
40|$|AbstractAnalogous to minimum norm g-inverses {{and least}} squares g-inverses for real matrices, we {{introduce}} {{the concepts of}} minimum weight g-inverses and least distance g-inverses for <b>Boolean</b> <b>matrices.</b> All those <b>Boolean</b> <b>matrices</b> which admit such g-inverses are characterized. This paper {{is a continuation of}} [2]...|$|R
40|$|Abstract — Different {{types of}} {{computational}} verb rule bases(verb rule bases, for short) {{are presented in}} this paper. The basic properties of verb rule bases are defined. The formal presentation of verb rule bases using <b>Boolean</b> <b>matrices</b> is given. The algorithms of merging and splitting verb rule bases using <b>Boolean</b> <b>matrices</b> are studied. Copyright c © 2008 Yang’s Scientifi...|$|R
5000|$|This {{means in}} {{practice}} that one only needs to define [...] {{or the other}} <b>Boolean</b> <b>matrix</b> is calculated using the nullspace property.|$|E
5000|$|Determining an {{instance}} of the membership problem; i.e. given a string , determine whether [...] where [...] is the language generated by a given grammar {{is also known as}} recognition. Context-free recognition for Chomsky normal form grammars was shown by Leslie G. Valiant to be reducible to <b>boolean</b> <b>matrix</b> multiplication, thus inheriting its complexity upper bound of O(n2.3728639).Conversely, Lillian Lee has shown O(n3−ε) <b>boolean</b> <b>matrix</b> multiplication to be reducible to O(n3−3ε) CFG parsing, thus establishing some kind of lower bound for the latter.|$|E
5000|$|A {{two-dimensional}} <b>Boolean</b> <b>matrix,</b> {{in which}} the rows represent the vertices and columns represent the edges. The entries indicate whether the vertex at a row is incident to the edge at a column.|$|E
5000|$|Again, the nullspace {{property}} of the <b>Boolean</b> <b>matrices</b> is used here, namely: [...]|$|R
50|$|In 1979, he {{obtained}} a Master of Science degree from Queen's University with a thesis on Prime <b>Boolean</b> <b>matrices.</b>|$|R
40|$|AbstractIn this paper, we {{characterize}} (i) linear transformations {{from one}} space of <b>Boolean</b> <b>matrices</b> to another that send pairs of distinct rank one elements to pairs of distinct rank one elements and (ii) surjective mappings from one space of <b>Boolean</b> <b>matrices</b> to another that send rank one matrices to rank one matrices and preserve order relation in both directions. Both results are proved {{in a more}} general setting of tensor products of two Boolean vector spaces of arbitrary dimension...|$|R
50|$|A logical matrix, binary matrix, {{relation}} matrix, <b>Boolean</b> <b>matrix,</b> or (0,1) matrix is {{a matrix}} with entries from the Boolean domain B = {0, 1}. Such a matrix {{can be used}} to represent a binary relation between a pair of finite sets.|$|E
5000|$|The {{compatibility}} condition {{requires that}} the interface DoFs have the same sign and value at {{both sides of the}} interface: [...] This condition can be expressed using a so-called signed <b>Boolean</b> <b>matrix,</b> denoted by [...] For the given example this can be expressed as: ...|$|E
5000|$|A second {{notation}} {{in which}} the equilibrium condition can be expressed is by introducing a set of Lagrange multipliers [...] The substitution of these Lagrange multipliers is possible as [...] and [...] differ only in sign, not in value. Using again the signed <b>Boolean</b> <b>matrix</b> : ...|$|E
40|$|AbstractWe {{study the}} extent to which certain theorems on linear {{operators}} on field-valued matrices carry over to linear operators on <b>Boolean</b> <b>matrices.</b> We obtain analogues and near analogues of several such theorems. One of these leads us to consider linear spaces of m × n <b>Boolean</b> <b>matrices</b> whose nonzero members all have Boolean rank 1. We obtain a structure theorem for such spaces that enables us to determine the maximum Boolean dimension of such spaces and their maximum cardinality...|$|R
40|$|In this paper. we {{characterize}} (i) linear transformations {{from one}} space of <b>Boolean</b> <b>matrices</b> to another that send pairs of distinct rank one elements to pairs of distinct rank one elements and (ii) subjective mappings from one space of <b>Boolean</b> <b>matrices</b> to another that send rank one matrices to rank one matrices and preserve order relation in both directions. Both results are proved {{in a more}} general setting of tensor products of two Boolean vector spaces of arbitrary dimension...|$|R
40|$|AbstractThe {{index of}} maximum density of a <b>Boolean</b> (or nonnegative) <b>matrix</b> A {{is defined as}} the least {{positive}} integer h=h(A) such that the number of ones (or positive entries) in Ah is maximized in all powers of A. Our main results are the following: (1) Let IBn,p be the set of n × n irreducible <b>Boolean</b> <b>matrices</b> with period p. We give the largest value of h(A) for A ϵ IBn,p. (2) Let Hn,p be the set of h(A) for A ϵ IBn,p. We exhibit a system of gaps in Hn,p. (3) We completely determine the set of h(A) for all n × n symmetric irreducible <b>Boolean</b> <b>matrices...</b>|$|R
5000|$|The {{following}} function [...] "life", {{written in}} Dyalog APL, takes a <b>boolean</b> <b>matrix</b> and calculates {{the new generation}} according to Conway's Game of Life. It demonstrates the power of APL to implement a complex algorithm in very little code, {{but it is also}} very hard to follow unless one has advanced knowledge of APL.|$|E
50|$|The bits {{allocated}} {{stencil buffer}} {{can be used}} for the representation of numerical values in the range 2 n -1, and also as n <b>Boolean</b> <b>matrix</b> (N is the number of allocated bits), each of which may be used to control the particular part of the scene. Any combination of these two ways of using the available memory is also possible.|$|E
5000|$|The second {{condition}} {{that has to}} be satisfied for substructure assembly is the force equilibrium for matching interface forces [...] For the current example, this condition can be written as [...] Similar to the compatibility equation, the force equilibrium condition can be expressed using a <b>Boolean</b> <b>matrix.</b> Use is made of the transpose of the Boolean localisation matrix [...] that was introduced to write compatibility: ...|$|E
40|$|This paper {{describes}} a technique for multi-level logic minimization on functions represented as if-then-else DAGS. We define {{the concept of}} <b>Boolean</b> <b>matrices,</b> and give formal definitions of blocks and rectangles and their meanings. We introduce a new heuristic two-column rectangle replacement for finding rectangle coverings of <b>Boolean</b> <b>matrices.</b> This heuristic is well suited for optimizing circuits for area, while controlling the delay. A slight variation of the heuristic optimizes with respect to delay. The results of using two-column rectangle replacement on if-then-else DAGS are reported for several benchmark examples. ...|$|R
40|$|AbstractThe {{annoying}} {{experience in}} timetable construction is that usually a complete timetable cannot be found without violating or diminishing some preconditions, {{even if the}} problem is theoretically solvable. Neither {{the control of the}} Hall conditions by Gotlieb's process of reducing availabilities nor the application of elaborate exchange operations guarantees a solution. In this paper an iteration of elementary implications is described which is expected to improve this situation, if applied in the final period of construction. In the course of these investigations, some formulas on <b>Boolean</b> <b>matrices</b> are derived, and a Galois connection between sets of Boolean vectors and <b>Boolean</b> <b>matrices</b> is exhibited...|$|R
40|$|Valiant {{proposed}} an O(n 2) time algorithm which reduces the recognition problem for context-free languages (CFLs) to the <b>boolean</b> <b>matrices</b> multiplication problem. By this algorithm, the recognition problem for CFLs {{can be solved}} in O(maxfn 2; M(n) g) time where n is the length of an input string and M(k) is the time needed for multiplying two k Θ k <b>boolean</b> <b>matrices.</b> The best known value for M(k) is O(k 2 : 376). Multiple context-free grammars (MCFGs) were introduced to denote the syntax of natural languages. By the known fastest algorithm, the recognition problem for multiple context-free languages (MCFLs) can be solved in O(n e) time where e is a constant which depends only on a given MCFG G, called the degree of G. In this paper, we propose an algorithm which reduces the recognition problem for MCFLs to the <b>boolean</b> <b>matrices</b> multiplication problem. By this algorithm, the recognition problem for MCFLs can be solved in O(n e 0 Γ 3 i 0 + 1 Δ M(n i 0)) t [...] ...|$|R
5000|$|In automata theory, {{the term}} {{rectangular}} relation {{has also been}} used to denote a difunctional relation. This terminology is justified {{by the fact that}} when represented as a <b>boolean</b> <b>matrix,</b> the columns and rows of a difunctional relation can be arranged {{in such a way as}} to present rectangular blocks of true on the (asymmetric) main diagonal. Other authors however use the term [...] "rectangular" [...] to denote any heterogeneous relation whatsoever.|$|E
50|$|To {{prove that}} {{transitive}} reduction {{is as easy}} as transitive closure, Aho et al. rely on the already-known equivalence with <b>Boolean</b> <b>matrix</b> multiplication. They let A be the adjacency matrix of the given graph, and B be the adjacency matrix of its transitive closure (computed using any standard transitive closure algorithm). Then an edge uv belongs to the transitive reduction if and only if there is a nonzero entry in row u and column v of matrix A, and there is a zero entry in the same position of the matrix product AB. In this construction, the nonzero elements of the matrix AB represent pairs of vertices connected by paths of length two or more.|$|E
50|$|This {{approach}} aims {{to reduce}} power dissipation by sequential circuits by choosing state assignment which minimizes the switching activity between state transitions. Thus the combinational part of FSM has lower input transition probability {{and is more}} like to give low power dissipation when synthesized. This algorithm uses <b>boolean</b> <b>matrix</b> with rows corresponding to state codes and column corresponding to state variables. Single state variable is considered {{at a time and}} try to assign its value to each state in FSM, in a way which is likely to minimize the switching activity for the complete assignment. This procedure is repeated for the next variable. Since minimization technique is applied column by column this technique is called as Column based.|$|E
40|$|Abstract: In {{this paper}} {{we present a}} new {{formalism}} to study the structure of workflows. A workflow is an abstraction of a business process that consists {{of one or more}} activities that need to be executed to reach a final objective. Our formalism is based on Graph Theory, Propositional Logic, and <b>Boolean</b> <b>matrices.</b> Indeed, we model workflows with tri-logic acyclic directed graphs. Moreover, we analyze the behavior of workflows using a certain type of <b>Boolean</b> <b>matrices.</b> In particular, we establish a necessary and sufficient condition for the logical termination of workflows. Finally, we show that a derived workflow has the same behavior as the original workflow...|$|R
50|$|In {{computer}} science, the Method of Four Russians is {{a technique}} for speeding up algorithms involving <b>Boolean</b> <b>matrices,</b> or more generally algorithms involving matrices in which each cell may take on only a bounded number of possible values.|$|R
40|$|AbstractInclines are the additively {{idempotent}} semirings {{in which}} the products are {{less than or equal}} to factors. Thus inclines generalize Boolean algebra, fuzzy algebra and distributive lattice. And the <b>Boolean</b> <b>matrices,</b> the fuzzy matrices and the lattice matrices are the prototypical examples of the incline matrices (i. e., the matrices over inclines). In this paper, the complete description of the invertible incline matrices is given. Some necessary and sufficient conditions for an incline matrix to be invertible are studied, Cramer's rule over inclines is presented and the group of invertible incline matrices is investigated. The main results in the present paper generalize and develop the corresponding results in the literatures for the <b>Boolean</b> <b>matrices,</b> the fuzzy matrices and the lattice matrices...|$|R
5000|$|The {{colorful}} cycle-finding algorithm {{works by}} first finding all pairs of vertices in [...] that are {{connected by a}} simple path of length , and then checking whether the two vertices in each pair are connected. Given a coloring function [...] to color graph , enumerate all partitions of the color set [...] into two subsets [...] of size [...] each. Note that [...] {{can be divided into}} [...] and [...] accordingly, and let [...] and [...] denote the subgraphs induced by [...] and [...] respectively. Then, recursively find colorful paths of length [...] in each of [...] and [...] Suppose the <b>boolean</b> <b>matrix</b> [...] and [...] represent the connectivity of each pair of vertices in [...] and [...] by a colorful path, respectively, and let [...] be the matrix describing the adjacency relations between vertices of [...] and those of , the boolean product [...] gives all pairs of vertices in [...] that are connected by a colorful path of length [...] Thus, the recursive relation of matrix multiplications is , which yields a runtime of [...] Although this algorithm finds only the end points of the colorful path, another algorithm by Alon and Naor that finds colorful paths themselves can be incorporated into it.|$|E
40|$|AbstractFor a <b>Boolean</b> <b>matrix</b> A, a g-inverse of A is a <b>Boolean</b> <b>matrix</b> G {{satisfying}} AGA=A, and a Vagner inverse is a g-inverse {{which in}} addition satisfies GAG=G. We give algorithms for finding all g-inverses, all Vagner inverses, {{and all of}} several other types of inverses including Moore-Penrose inverses. We give a criterion for a <b>Boolean</b> <b>matrix</b> to be regular, and criteria for {{the various types of}} inverse to exist. We count the numbers of Boolean matrices having Moore-Penrose and related types of inverses...|$|E
40|$|Abstract. In {{this work}} the {{relation}} between <b>Boolean</b> <b>Matrix</b> Multipli-cation (BMM) and Context Free Grammar (CFG) parsing is shown. The first described approach, {{which is due to}} Valiant (1975), shows how CFG parsing can be reduced to <b>Boolean</b> <b>Matrix</b> Multiplication. Afterwards the reverse direction, i. e. how a CFG parser can be used to multiply two Boolean matrices, is presented, which is due to Lee (2002). The funda-mental theorem that can be derived from the reductions is that fast CFG parsing requires fast <b>Boolean</b> <b>matrix</b> multiplication, and vice versa. ...|$|E
40|$|Large <b>boolean</b> <b>matrices</b> are a basic {{representational}} unit in {{a variety}} of applications, with some notable examples being interactive visualization systems, mining large graph structures, and association rule mining. Designing space and time e#cient scalable storage and query mechanisms for such large matrices is a challenging problem...|$|R
40|$|AbstractThis article {{discusses}} {{the concept of}} Boolean spaces endowed with a Boolean valued inner product and their matrices. A natural inner product structure for the space of Boolean n-tuples is introduced. Stochastic boolean vectors and stochastic and unitary <b>Boolean</b> <b>matrices</b> are studied. A dimension theorem for orthonormal bases of a Boolean space is proven. We characterize the invariant stochastic Boolean vectors for a <b>Boolean</b> stochastic <b>matrix</b> and show {{that they can be}} used to reduce a unitary matrix. Finally, we obtain a result on powers of stochastic and unitary matrices...|$|R
40|$|We propose an {{explicit}} representation of central $(2 k+ 1) $-nomial coefficients {{in terms of}} finite sums over trigonometric constructs. The approach utilizes the diagonalization of circulant <b>boolean</b> <b>matrices</b> and is generalizable to all $(2 k+ 1) $-nomial coefficients, thus yielding a new family of combinatorical identities. Comment: 5 page...|$|R
