10000|97|Public
5|$|Model 1200 Hunting: 28-inch barrel with a <b>built-in</b> choke and a five-shell tubular magazine.|$|E
5|$|Ruby's Array class {{includes}} a bsearch method with <b>built-in</b> approximate matching.|$|E
5|$|A {{physical}} USB device may {{consist of}} several logical sub-devices that {{are referred to}} as device functions. A single device may provide several functions, for example, a webcam (video device function) with a <b>built-in</b> microphone (audio device function). This kind of device is called a composite device. An alternative to this is compound device, in which the host assigns each logical device a distinctive address and all logical devices connect to a <b>built-in</b> hub that connects to the physical USB cable.|$|E
50|$|These are the <b>built-ins</b> for IBM's PL/I for MVS and VM compiler. There can be {{considerable}} {{difference in the}} <b>built-ins</b> provided among preprocessors of various PL/I compilers.|$|R
40|$|Continuations {{are well}} known in {{functional}} programming {{where they have been}} used to transform and compile programs. Some languages provide explicit manipulations of the continuation for the user: The user can catch and modify the current continuation. Continuations have also been used in the logic programming context to give a denotational semantics for Prolog, to generate Prolog compilers and to transform Prolog programs. In this paper, we propose to introduce new <b>built-ins</b> in a logic programming language to enable the user to explicitly replace the continuations. These <b>built-ins</b> allow the user to have a new control of the execution. We choose Prolog because of its higher-order syntax and implications in the goals which are necessary for the definition and use of these <b>built-ins.</b> In order to define the <b>built-ins,</b> we extend to Prolog the Prolog semantics based on continuations. Then, we show that an exception mechanism can be easily implemented using these new <b>built-ins.</b> The proposed s [...] ...|$|R
40|$|Jena [1] is a Java {{framework}} for building Semantic Web applications. One {{of the fundamental}} part of Semantic Web is the ontology which is a formal speciﬁcation of a shared conceptualization[2]. Jena provides a programmatic environment for ontologies, but it includes also both a rule—based inference and a SPARQL query engine. In particular, Jena provides several <b>built-ins</b> rule ﬁles. They are functions which require some parameters as input and return others as output. Unfortunately, with default <b>built-ins,</b> {{there are lots of}} limitations. You cannot do operations such as : calculating the difference between two dates and establishing the minimum and maximum between two dates. On the other hand, it is possible to compare two dates. <b>Built-ins</b> can be extended and the aim {{of this study is to}} create customized <b>built-ins,</b> in order to use them in a huge variety of cases where default <b>built-ins</b> are not useful In particular, the attention has been focused on <b>built-ins</b> known as Data—Time. They allow to manage Dates and Times values since there are just few builtins for this purpose. Now, it is possible to calculate the difference between one value typed as “XSDDateTime” and another one; you can easily know how many days are between the actual date and another one. Finally, SPARQL QUERIES [3] have been performed also, to get the minimum and the maximum date from a dataset which is not possible to take over with normal <b>built-ins.</b> All of this work has been carried out under the project called “AALISABETH”...|$|R
5|$|Console organs {{have two}} 61-note manuals and a pedalboard {{of at least}} two octaves. Most {{consoles}} do not have a <b>built-in</b> power amplifier or speakers, so an external amplifier and speaker cabinet is required.|$|E
5|$|F-84G was {{the first}} fighter with <b>built-in</b> aerial {{refueling}} capability and the first single-seat aircraft capable of carrying a nuclear bomb.|$|E
5|$|In September 2014, Steam Music, a <b>built-in</b> music player, {{was added}} to the Steam client, {{allowing}} users to play through music stored on their computer or to stream from a locally networked computer.|$|E
5000|$|... #Caption: The lounge {{features}} extensive <b>built-ins</b> {{and bright}} colors.|$|R
5000|$|<b>Built-Ins</b> and Love in a Charles Eames Chair (performance), Sushi, San Diego, CA ...|$|R
5000|$|... with John Beresniewicz, Chip Dawes. Oracle PL/SQL <b>Built-ins</b> Pocket Reference, O'Reilly Media, October 1998, ...|$|R
5|$|On May 14, 2011, Perl 5.14 was {{released}}. JSON {{support is}} <b>built-in</b> as of 5.14.0. The {{latest version of}} that branch, 5.14.4, was released on March 10, 2013.|$|E
5|$|Oracle's dialect of SQL {{provides}} a <b>built-in</b> function DECODE {{which can be}} used instead of the simple CASE expressions and considers two nulls equal.|$|E
5|$|The Ouya release {{supports}} the Xbox 360 and PlayStation 3 controllers. Ascension uses the DualShock 4 controller's <b>built-in</b> speaker to play sound effects. The game {{does not have}} online multiplayer.|$|E
40|$|By using archetypes, it is {{possible}} to define how data are stored in the EHR,which facilitates querying for data. The objective of this thesis is to investigate the possibility of connecting a decisionsupport system to archetype-based medical records by using the ArchetypeQuery Language (AQL) and the Semantic Web Rule Language (SWRL). The result shows that, since SWRL is a logic language rather than a programminglanguage, <b>built-ins</b> are necessary to allow SWRL rules to function as programmingrules. <b>Built-ins</b> are SWRL modules that can be written in e. g. Java,which allows complex functions to be created. The conclusion is that <b>built-ins</b> can be used to connect archetypes and SWRLrules by querying the archetype path with AQL. There are however several ruledesign factors to consider when using SWRL e. g. data location problems...|$|R
30|$|We have {{implemented}} {{the concept of}} a semantic node using different Semantic Web technologies. To store and retrieve RDF descriptions of connected devices (or persons), we used OWLDB [8] together with the OWL API [9]. We used Pellet [10] coupled with customized SWRLg <b>built-ins,</b> to execute OWL-based rules enabling knowledge sharing process. We fed both Pellet and OWLDB with semantic profiles of entities respecting models detailed in [11]. To determine the path between two nodes willing to share knowledge, we used the JGraphT open source library, providing features to build and process graphs. <b>Built-ins</b> allowing messages to be generated and sent between nodes were developed in Java, and registered in Pellet. Messages generated by these <b>built-ins</b> were composed of one customized HTTP Request header (X-nodes) containing the ordered list of nodes retrieved by the aforementioned algorithm and a set of triples to push in the triple store of the recipient of such information. All mentioned components were wrapped in a Web application allowing the concept of semantic node to be deployed on a servlet container such as Tomcath.|$|R
40|$|International audienceThis work {{focuses on}} the {{integration}} of the spatial analyses for semantic reasoning in order to compute new axioms of an existing OWL ontology. To make it concrete, we have defined Spatial <b>Built-ins,</b> an extension of existing <b>Built-ins</b> of the SWRL rule language. It permits to run deductive rules {{with the help of a}} translation rule engine. Thus, the Spatial SWRL rules are translated to standard SWRL rules. Once the spatial functions of the Spatial SWRL rules are computed with the help of a spatial database system, the resulting translated rules are computed with a reasoning engine such as Racer, Jess or Pellet...|$|R
5|$|The T series, {{produced}} from 1968 to 1975, {{was the last}} of the tonewheel spinet organs. Unlike all the earlier Hammond organs, which used vacuum tubes for preamplification, amplification, percussion and chorus-vibrato control, the T series used all-solid-state, transistor circuitry, though, unlike the L-100, it did include the scanner-vibrato as seen on the B-3. Other than the T-100 series models, all other T-Series models included a <b>built-in</b> rotating Leslie speaker and some included an analog drum machine, while the T-500 also included a <b>built-in</b> cassette recorder. It {{was one of the last}} tonewheel Hammonds produced.|$|E
5|$|The {{building}} contains 210,851 square-feet {{within the}} tower structure {{and it was}} the first office building in the United States with <b>built-in</b> air conditioning when constructed.|$|E
5|$|Tracking collars with <b>built-in</b> global {{positioning}} systems {{may be used}} to help locate the dog, though historically the dog's voice was used as a locator.|$|E
40|$|Abstract. JSON Rules is a {{declarative}} rule {{language for}} the World Wide Web. It {{has been created}} to satisfy at least the following list of requirements: (1) create and execute rules in browser; (2) support for ECA and PR rules; (3) the Working Memory contains event-facts. Here we extend the language {{with the concept of}} <b>built-ins</b> (predicates and actions). We focus on the relation with RIF-DTB, however with a strong emphasis on the environment where the rules are going to be executed: the web browser. As such we introduce here an initial set of <b>built-ins,</b> as well as the architectural aspects that should be taken into consideration for an engine implementing the JSON Rules language. ...|$|R
40|$|International audienceThis paper {{presents}} a knowledge-based detection of objects approach using the OWL ontology language, the Semantic Web Rule Language, and 3 D processing <b>built-ins</b> aiming at combining geometrical analysis of 3 D point clouds and specialist's knowledge. Here, we share our experience regarding {{the creation of}} 3 D semantic facility model out of unorganized 3 D point clouds. Thus, a knowledge-based detection approach of objects using the OWL ontology language is presented. This knowledge is used to define SWRL detection rules. In addition, the combination of 3 D processing <b>built-ins</b> and topological <b>Built-Ins</b> in SWRL rules allows a more flexible and intelligent detection, and the annotation of objects contained in 3 D point clouds. The created WiDOP prototype takes a set of 3 D point clouds as input, and produces as output a populated ontology corresponding to an indexed scene visualized within VRML language. The context {{of the study is}} the detection of railway objects materialized within the Deutsche Bahn scene such as signals, technical cupboards, electric poles, etc. Thus, the resulting enriched and populated ontology, that contains the annotations of objects in the point clouds, is used to feed a GIS system or an IFC file for architecture purposes...|$|R
40|$|This paper {{presents}} a knowledge-based detection of objects approach using the OWL ontology language, the Semantic Web Rule Language, and 3 D processing <b>built-ins</b> aiming at combining geometrical analysis of 3 D point clouds and specialist's knowledge. Here, we share our experience regarding {{the creation of}} 3 D semantic facility model out of unorganized 3 D point clouds. Thus, a knowledge-based detection approach of objects using the OWL ontology language is presented. This knowledge is used to define SWRL detection rules. In addition, the combination of 3 D processing <b>built-ins</b> and topological <b>Built-Ins</b> in SWRL rules allows a more flexible and intelligent detection, and the annotation of objects contained in 3 D point clouds. The created WiDOP prototype takes a set of 3 D point clouds as input, and produces as output a populated ontology corresponding to an indexed scene visualized within VRML language. The context {{of the study is}} the detection of railway objects materialized within the Deutsche Bahn scene such as signals, technical cupboards, electric poles, etc. Thus, the resulting enriched and populated ontology, that contains the annotations of objects in the point clouds, is used to feed a GIS system or an IFC file for architecture purposes. Comment: ISSN: 1942 - 2679. arXiv admin note: text overlap with arXiv: 1301. 478...|$|R
5|$|A {{variation}} on this theme were oil-lamp clocks. These early timekeeping devices {{consisted of a}} graduated glass reservoir to hold oil — usually whale oil, which burned cleanly and evenly — supplying the fuel for a <b>built-in</b> lamp. As the level in the reservoir dropped, it provided a rough measure of the passage of time.|$|E
5|$|CNET {{also criticized}} the iPad for its {{apparent}} lack of wireless sync which other portable devices such as Microsoft's Zune have had {{for a number of}} years. The <b>built-in</b> iTunes app is able to download from the Internet as well.|$|E
5|$|Loitering munitions fit in {{the niche}} between cruise {{missiles}} and unmanned combat aerial vehicles (UCAVs) sharing characteristics with both. They differ from cruise missiles {{in that they are}} designed to loiter for a relatively long time around the target area, and from UCAVs in that a loitering munition is intended to be expended in an attack and has a <b>built-in</b> warhead.|$|E
40|$|Abstract. Both {{aggregates}} and arithmetic <b>built-ins</b> {{are widely}} used in current database query languages: Aggregates are second-order constructs such as COUNT and SUM of SQL; arithmetic <b>built-ins</b> include relational and other mathematical operators that apply to numbers, such as ≤ and +. These features are also {{of interest in the}} context of database integrity constraints: correct and efficient integrity checking is crucial, as, without any guarantee of data consistency, the answers to queries cannot be trusted. In this paper we propose a method of practical relevance {{that can be used to}} derive, at database design time, simplified versions of such integrity constraints that can be tested before the execution of any update. In this way, virtually no time is spent for optimization or rollbacks at run time. Both set and bag semantics are considered. ...|$|R
40|$|Abstract—This paper {{presents}} a knowledge-based detection of objects approach using the OWL ontology language, the Semantic Web Rule Language, and 3 D processing <b>built-ins</b> aiming at combining geometrical analysis of 3 D point clouds and specialist’s knowledge. Here, we share our experience regarding {{the creation of}} 3 D semantic facility model out of unorganized 3 D point clouds. Thus, a knowledge-based detection approach of objects using the OWL ontology language is presented. This knowledge is used to define SWRL detection rules. In addition, the combination of 3 D processing <b>built-ins</b> and topological <b>Built-Ins</b> in SWRL rules allows a more flexible and intelligent detection, and the annotation of objects contained in 3 D point clouds. The created WiDOP prototype takes a set of 3 D point clouds as input, and produces as output a populated ontology corresponding to an indexed scene visualized within VRML language. The context {{of the study is}} the detection of railway objects materialized within the Deutsche Bahn scene such as signals, technical cupboards, electric poles, etc. Thus, the resulting enriched and populated ontology, that contains the annotations of objects in the point clouds, is used to feed a GIS system or an IFC file for architecture purposes. Keywords-Ontology; Semantic facility information model; Semantic VRML model; Geometric analysis; Topologic analysis; 3 D processing algorithm, Semantic web; knowledge modeling...|$|R
50|$|There {{are many}} classic Wright details, {{such as a}} {{stunning}} example of a 12'x16'x16' cantilevered roof over the carport {{that is similar to}} the Goetsch-Winkler House. There are double clerestory windows with cut-wood light screens. The home has a hidden entrance. The Shavins' house contains <b>built-ins</b> and furniture designed by Wright, resulting in a unified design scheme.|$|R
5|$|PHP {{defines a}} large array of {{functions}} in the core language and many are also available in various extensions; these functions are well documented in the online PHP documentation. However, the <b>built-in</b> library has {{a wide variety of}} naming conventions and associated inconsistencies, as described under history above.|$|E
5|$|Perl {{also has}} many <b>built-in</b> {{functions}} that provide tools {{often used in}} shell programming (although many of these tools are implemented by programs external to the shell) such as sorting, and calling operating system facilities.|$|E
5|$|The Nintendo DSi {{connects to}} the Internet via either its <b>built-in</b> 802.11b/g Wi-Fi or a Nintendo Wi-Fi USB Connector; both methods grant access to the Nintendo Wi-Fi Connection service. The DSi {{supports}} WEP, WPA (AES/TKIP), and WPA2 (AES/TKIP) wireless encryption; only software with <b>built-in</b> support can use the latter two encryption types, as they were {{not supported by the}} DS and DS Lite. Up to six wireless Internet connection profiles can be saved; using the traditional setup method, the first three profiles support WEP encryption, while the remaining three are selectable under a more advanced option, which supports WPA encryption. Under this advanced option, users may access the Wi-Fi Protected Setup method and configure proxy settings. The DSi can automatically detect Nintendo Zone service areas thus preventing the need to manually setup Wi-Fi connections. The service offers demos of upcoming and currently available games, access to the Nintendo Wi-Fi Connection and DSi Shop, and may have location-specific content.|$|E
5000|$|It {{was added}} to the National Register of Historic Places in 1983. It was deemed {{significant}} architecturally as a [...] "fine example of a turn-of-the-century Neoclassical style house in Cochran." [...] Neoclassical features include its monumental portico, large rooms, and details in its interior, such as paneled wainscoting, <b>built-ins,</b> and Ionic columns and urns in stairways and room dividers.|$|R
5000|$|GCC 4.6+ and Clang 3.2+ provide {{intrinsic}} {{functions for}} RdRand when -mrdrnd is {{specified in the}} flags, also setting __RDRND__ to allow conditional compilation. Newer versions additionally provide [...] to wrap these <b>built-ins</b> into functions compatible with version 12.1+ of Intel's C Compiler. These functions write random data to the location pointed to by their parameter, and return 1 on success.|$|R
40|$|Abstract. The {{specific}} {{problem that}} motivates {{this paper is}} how to obtain abstract descriptions of the meanings of imported predicates (such as <b>built-ins)</b> {{that can be used}} when analysing a module of a logic program with respect to some abstract domain. We assume that abstract descriptions of the imported predicates are available in terms of some “standard” assertions. The first task is to define an abstract domain corresponding to the assertions for a given module and express the descriptions as objects in that domain. Following that they are automatically transformed into the analysis domain of interest. We develop a method which has been applied in order to generate call and success patterns from the CiaoPP assertions for <b>built-ins,</b> for any given regular type-based domain. In the paper we present the method as an instance of the more general problem of mapping elements of one abstract domain to another, with as little loss in precision as possible. ...|$|R
