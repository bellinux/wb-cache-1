12|14|Public
50|$|Screen: The {{display unit}} was 640×300 pixel, 80×25 {{character}} (8×12 dot matrix) green monochrome CRT <b>bit-mapped</b> <b>display.</b> The display offered programmable features {{which could be}} invoked from the main processing unit via a character-stream interface built in between the Z80 CPU and 6502 co-processor.|$|E
50|$|The High-Performance Graphics Display Controller 7220 (commonly µPD7220 or NEC 7220) is a video {{interface}} controller {{capable of}} drawing lines, circles, arcs, and character graphics to a <b>bit-mapped</b> <b>display.</b> It {{was developed by}} NEC and used in NEC's APC III computers, the optional graphics module for the DEC Rainbow, the Tulip System-1, and the Epson QX-10.|$|E
50|$|The CAT III was a three-user system. The primary user {{sat at the}} CAT III system console, which {{contained}} the CPU, floppy drive, and hard disk. Other users connected to the system by way of serial terminals. By {{the end of the}} CAT series, over 25,000 systems and 200,000 terminals were manufactured. If the CAT had had a <b>bit-mapped</b> <b>display,</b> it would have seemed like the first Apple Macintosh without the Xerox GUI.|$|E
40|$|The WARRANT project {{represents}} {{an attempt to}} teach reading, reasoning, and writing skills to students on powerful, large-screen personal computers, supporting high resolution <b>bit-map</b> <b>display</b> graphics and multiple-windowing. This report overviews and then details our current and expected progress on the project from January 1, I 985 through September 30, I 985...|$|R
5|$|Douglas Engelbart, {{the founder}} of SRI's Augmentation Research Center (ARC), was the primary force behind the design and {{development}} of the multi-user oN-Line System (or NLS), featuring original versions of modern computer-human interface elements including <b>bit-mapped</b> <b>displays,</b> collaboration software, hypertext, and precursors to the graphical user interface such as the computer mouse. As a pioneer of human-computer interaction, Engelbart is arguably SRI's most notable alumnus. He was awarded the National Medal of Technology and Innovation in 2000.|$|R
50|$|Assuming {{the fourth}} {{register}} {{of the video}} controller sets the background colour of the screen, the CPU can set this colour by writing a value to the memory location A003 using its standard memory write instruction. Using the same method, graphs can be displayed on a screen by writing character values into a special area of RAM within the video controller. Prior to cheap RAM that enabled <b>bit-mapped</b> <b>displays,</b> this character cell method was a popular technique for computer video displays (see Text user interface).|$|R
5000|$|In 1981, Xerox Corporation {{introduced}} the Xerox Star workstation, officially {{known as the}} [...] "8010 Star Information System". Drawing upon its predecessor, the Xerox Alto, {{it was the first}} commercial system to incorporate various technologies that today have become commonplace in personal computers, including a <b>bit-mapped</b> <b>display,</b> a windows-based graphical user interface, icons, folders, mouse, Ethernet networking, file servers, print servers and e-mail. It also included a programming language system called Smalltalk.|$|E
5000|$|Visi On {{had many}} {{features}} of a modern GUI, and included a few that did not become common until many years later. It was fully mouse-driven, used a <b>bit-mapped</b> <b>display</b> for both text and graphics, included on-line help, and allowed the user to open a number of programs at once, each in its own window. Visi On did not, however, include a graphical file manager. Visi On also demanded a hard drive in order to implement its virtual memory system used for [...] "fast switching", {{and at the time}} hard drives were a very expensive piece of equipment.|$|E
5000|$|Another kind of TUI was {{the primary}} {{interface}} of the Oberon operating system as released in 1988. In contrast to the so far mentioned uses of text user interfaces, the Oberon system did not use a console or terminal based mode but required a large <b>bit-mapped</b> <b>display</b> on which text was used as primary target for mouse clicks. Commands of the form Module.Procedure parameters ~ were activated by a middle-mouse click on Module.Procedure. Any text displayed on the screen could be edited and every command displayed in a text, which complied to the required syntax, could be clicked and executed. Any text {{with a bunch of}} commands {{could be used as a}} so-called tool text serving as a user-configurable menu. Even the output of a previous command could be edited and used as a command. This approach is radically different from the dialogue oriented command prompt and console menus described so far. Since it did not use graphical elements, but text elements, it was termed a text user interface. For a short introduction see the 2nd paragraph on p.4 of the first published report on the Oberon System.|$|E
40|$|Using current {{development}} techniques {{multimedia application}} creation is {{an ad hoc}} process yielding applications rooted in particular environments. We have designed authoring and presentation facilities which manage the creation and display of interactive multimedia presentations for applications in a distributed context. We illustrate with our prototype platform and applications developed using it. 1 Introduction A multimedia environment integrates continuous media such as digital audio and video with the text and still pictures already supported in standard distributed computing environments. Workstations with <b>bit-mapped</b> <b>displays</b> and running windowing systems allow control over the presentation of visual media. Speakers allow audio to be played. Input devices such as cameras and microphones are becoming standard for the capture of audio and video. Storage services for continuous media have been developed and ATM networking technology supports the transport of multiservice traffic. U [...] ...|$|R
40|$|INTRODUCTION Modern {{computer}} workstations with <b>bit-mapped</b> <b>displays</b> feature sophisticated userinterface systems {{which are}} characterized by {{a high degree of}} interactivity between user actions, such as moving a mouse or pressing a key, and the display. These `direct-manipulation' user interfaces are a great improvement over those which have been widely available in the past. This potential has a price: the programmatic interfaces to these systems are complex and the experience needed to use them well is not yet widely available. Even when experienced programmers are available, making an application interactive usually requires substantial effort, often exceeding the effort that went into building the original, non-interactive application. Also, the more mature of these systems are vendor-specific and thus sacrifice portability. *Now at Department of Computer Science, University of Texas, Burdine Hall, Austin, Texas 78712, U. S. A. 0038 [...] 0644 / 91 / 010013 [...] 21 $ 10. 50 Received 18 September 198...|$|R
40|$|The {{technology}} for producing sophisticated sounds has become common in modern workstations {{and a wide}} variety of sounds are appearing in an ever increasing number of application programs and research projects. However we do not yet know how to use sounds appropriately to exploit the special abilities of the human auditory system. This paper explores several of the theoretical considerations behind the appropriate use of sounds in a computer workstation and proposes a set of experiments whose purpose is to empirically determine a good classification of sounds, according to the activities and tasks for which they are best suited in an interactive computing environment. 1 Introduction During the past two decades computer graphics has progressed along a logical course of evolution. Beginning as a novelty requiring uncommon hardware, it quickly became an active research area. As <b>bit-mapped</b> <b>displays</b> became common in workstations and personal computers, graphical techniques began to form an [...] ...|$|R
40|$|This paper {{describes}} {{the design and}} proposed implementation of a shared object hierarchy. The object hierarchy is stored in a relational database and objects referenced by an application program are cached in the program's address space. The paper {{describes the}} database representation for the object hierarchy {{and the use of}} POSTGRES, a next-generation relational database management system, to implement object referencing efficiently. The shared object hierarchy system will be used to implement OBJFADS, an object-oriented programming environment for interactive multimedia database applications, that will be the programming interface to POSTGRES. 1. Introduction Object-oriented programming has received much attention recently as a new way to develop and structure programs [GoR 83, StB 86]. This new programming paradigm, when coupled with a sophisticated interactive programming environment executing on a workstation with a <b>bit-mapped</b> <b>display</b> and mouse, improves programmer productivity and [...] ...|$|E
40|$|Introduction Many of {{the systems}} in this book exemplify {{negotiating}} a technological barrier {{in order to provide}} access to a computer or other device. The necessity of providing access of any kind to existing devices has often outweighed the desire to design systems specifically for a small, although important group of users. For example, computer access has been almost completely driven by the goal of overcoming more and more technological barriers. Currently, a significant problem in computer access is providing access to Graphical User Interfaces (GUIs) for computer users who are blind. [BBV 90][Bux 86] The technical problem is capturing the information that is being sent to a <b>bit-mapped</b> <b>display.</b> The design problem is creating a nonvisual interface which provides the same power as a GUI. Modern computing environments generally employ GUIs to provide an intuitive abstraction to operating system concepts and actions. This discussion focuses on the design of a nonvisual computin...|$|E
40|$|The {{efficient}} {{implementation of}} Common Lisp's SEARCH function specialized to bit-vectors is discussed. With its non-word-aligned search patterns and its small 2 -element alphabet, a bit-vector SEARCH {{can often be}} the most inefficient of all SEARCH'es. Techniques, some of which we believe are novel, are discussed for overcoming these problems and achieving excellent performance on standard computer hardware. To reduce the amortized pattern pre-processing costs, we use four distinct search algorithms for pattern lengths of 1, 2 to w, w+ 1 to 2 w- 2, and larger, where w is the algorithm byte size. Fast searching of a bit-string for an exact match of a shorter pattern bit-string can be required for some "bit-stuffing" communication protocols, and for the 1 -dimensional portion of a 2 -dimensional search within a binary image, such as those found on a <b>bit-mapped</b> <b>display</b> or transmitted by facsimile. Some of the techniques discussed are also relevant for searching with other small alphabets, e. g., [...] ...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe visual display is usually {{treated as a}} separate I/O device. The interface to the programmer is at a low conceptual level and vaguely defined. Software that uses sophisticated displays are notoriously non-portable. In this study, we apply techniques using an axiom specification method to design, specify, and implement the resources of a <b>bit-mapped</b> color <b>display</b> device which is fully integrated with an abstract processor called AM. In conjunction, we provide a precise and high conceptual interface to the resource to facilitate image programming. [URL] Commander, United States Nav...|$|R
5000|$|Professor Forest Baskett {{suggested}} the best-known configuration: {{a relatively low}} cost personal workstation for computer aided logic design work. The design created a 3M computer: a 1 million instructions per second (MIPS) processor, 1 Megabyte of memory and a 1 Megapixel raster scan <b>bit-map</b> graphics <b>display.</b> Sometimes the $10,000 estimated price was called the fourth [...] "M" [...] — a [...] "Megapenny".Director of Computer Facilities Ralph Gorin suggested other configurations and initially funded the project.Graduate student Andy Bechtolsheim designed the hardware, with several other students and staff members assisting with software {{and other aspects of}} the project. Vaughan Pratt became unofficial faculty leader of the project in 1980.|$|R
40|$|Described is {{a display}} sub-system, {{designed}} for {{support of a}} very high speed rendering engine. It provides high-performance graphics to an enVironment that consists of a hierarchy of resizable windows. The concept of virtual memory has been applied with {{the organization of the}} virtual to physical address spaces having a unique mapping that fits the organization of a <b>bit-mapped</b> graphics memory <b>display...</b>|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimited. Computer wargame simulations have typically provided military officers with an effective {{method of testing}} their knowledge of tactics and strategy. However, large simulations typically use a command language dialogue interfacing the uses with the wargame. This type of interface requires {{a great deal of}} typing skill and memorization of the language syntax and allowing little time for decision making and battle analysis. RESA is a typical theater level naval wargame which utilizes this type of interface. Presented in this research is the RESA Enhanced FORCE and BUILD (REFAB), a first phase prototype development of a graphic user interface utilizing a <b>bit-mapped</b> <b>display</b> and windowing environment. REFAB was developed from an existing system, BATMAN and ROBIN. The interface concentrates on combinations of form filling, graphic, direct manipulation, and iconic dialogues, and stresses information presentation. This interface could be utilized for RESA to ease the system operating requirements placed on the RESA users, allowing the user to make timely decisions, gather information more quickly, and provide a more rewarding wargaming session. Captain, United States Marine Corp...|$|E
40|$|The 1990 paper "The Graphical User Interface: Crisis, Danger and Opportunity" {{summarized}} {{an overwhelming}} concern {{expressed by the}} blind community: {{a new type of}} visual interface threatened to erase the progress made by the innovators of screen reader software. Such software (as the name implies) could read the contents of a computer screen, allowing blind computer users equal access to the tools used by their sighted colleagues. Whereas ASCII-based screens were easily accessible, new graphical interfaces presented a host of technological challenges. The contents of the screen were mere pixel values, the on or off "dots" which form the basis of any <b>bit-mapped</b> <b>display.</b> The goal for screen reader providers was to develop new methods for bringing the meaning of these picture-based interfaces to users who could not see them. The crisis was imminent. Graphical user interfaces were quickly adopted by the sighted community as a more intuitive interface. Ironically, these interfaces were deemed more accessible by the sighted population because they seemed approachable for novice computer users. The danger was tangible in the forms of lost jobs, barriers to education, and the simple frustration of being left behind as the computer industry charged ahead. Much has changed since that article was published. Commercial screen reader interfaces now exist for two of the three main graphical environments. Some feel that the crisis has been adverted, that the danger is now diminished. But what about the opportunity? Have graphical user interfaces improved the lives of blind computer users? The simple answer is not very much. This opportunity has not been realized because current screen reader technology provides access to graphical screens, not graphical interfaces. In this paper, we discuss the historical reasons for this mismatch as well as analyze the contents of graphical user interfaces. Next, we describe one possible way for a blind user to interact with a graphical user interface, independent of its presentation on the screen. We conclude by describing the components of a software architecture which can capture and model a graphical user interface for presentation to a blind computer user...|$|E
40|$|Detailed {{procedures}} are described {{for the study}} of somatosensory event-related potentials (ERPs) to electric stimulation of fingers. Control responses to homogeneous (100 %) series of identical stimuli (thus eliminating input mismatch) while the subject reads a novel (thus providing a distinct attention-capturing activity and maintaining vigilance level) are validated as reflecting the exogenous obligatory profiles required for assessing cognitive component in ERPs to target relevant stimuli. With these 'neutral' conditions, the control responses have a similar profile even at larger ISIs such as those separating the infrequent targets in Attention runs. Conversely, series of stimuli identical to those in control runs can elicit cognitive components in a 'Lie' experiment when the subject is induced to treat the stimuli like targets even though there is no discrimination involved. On this basis, the somatosensory P 30, P 40, P 100 and N 140 components appearing in the target profiles are considered genuine cognitive components. They have been analyzed with scatter <b>displays,</b> electronic subtraction, <b>bit-mapped</b> <b>displays</b> and with calculation of Z and dilation factors. The cognitive P 30 and P 40 reflect selective attention-related enhancements of the neural generators in receiving somatosensory cortex. The early parietal positivity P 27 can thus be modulated separately from the frontal N 30 component and is thought to be generated by a radial dipole in area 1. The later cognitive P 100 and N 140 reflect the invocation of distinct processors in conjunction with the behavioral use of the sensory input. The evolving topographical patterns of the P 100 and N 140 electrogeneses, revealed by bit-mapped data, suggest complex interactions between posterior parietal and prefrontal cortex whereby the sensory information is placed into spatial coordinate systems and matched with representations of relevant objects or relationships in space for target processing in the sequential tasks. Journal ArticleResearch Support, Non-U. S. Gov'tSCOPUS: ar. jinfo:eu-repo/semantics/publishe...|$|R
40|$|The use of {{networks}} of computers for human communication is surprising and fascinating. Electronic mail (email) becomes {{an important tool}} of any organization whose members {{spend a lot of}} time using computers. This paper reports on the state of email activity at Carnegie Mellon where thousands of students, faculty, and staff have been using the Andrew system during its development over the last few years. There is some analysis of why and how email works and what it will take for it to become more widespread. The Andrew System Carnegie Mellon is a relatively small university of 8, 000 people located on a physically compact campus, with a long-standing record of excellence in computer science research. In 1982 Carnegie Mellon and IBM created the Information Technology Center to design and develop a system to support the university's needs. The system has been named Andrew, after two benefactors of the university, Andrew Carnegie and Andrew Mellon. It is one of the largest distributed personal computing systems of its kind. As part of the NSF EXPRES project Andrew is being extended to support interchange of multi-media mail. Some earlier papers 1, 2, 3 describe the system in general. Computers There are nearly 3, 000 different computers at Carnegie Mellon today: mainframes, mini-computers, personal computers and workstations. The most interesting of them are the 1, 000 or so workstations. They run UNIX and have such advanced features as multi-million-instruction per second processors, <b>bit-map</b> <b>displays,</b> virtual memory, megabytes of real memory, a mouse, and a local area network (LAN) connection. These machines cost about $ 5, 000 today. The primary machine that Andrew runs on is the IBM RT, a 32 -bit RISC Technology machine. It also runs on SUN workstations and DEC VAXstations...|$|R
40|$|J. Williams and Nelson A. Mills The Integral PC {{contains}} {{mass storage}} and printing capa bilities in a compact package {{that can be}} easily transported between the workplace and the home, or taken on trips. 6 Electronics System for a Transportable Computer, by David L Kepler and James A. Espeland A clever memory manager and simple, low-cost system logic design are key elements. 1 f Custom Graphics Processor Unit for the Integral PC, by Dean M. Heath This special- purpose microprocessor can control the internal <b>bit-mapped</b> flat-panel <b>display</b> or external CRT monitors. High-Quality Electroluminescent Display for a Personal Workstation, by Marvin L Higgins An energy-recovery drive scheme keeps power requirements below 15 watts. 1 O Mechanical Design of the Integral PC: Not Just a Desktop Computer with a Handle, i) by Thomas A. Pearo Able to fit under an airline seat, the package contains an ink-jet printer, a disc mouse. a detachable keyboard, and space for an optional mouse...|$|R
40|$|Abstract:- The {{cellular}} concept {{applied in}} mobile communication systems enables significant increase of overall system capacity, but requires careful radio network planning and dimensioning. Wireless and mobile network operators typically rely on various commercial radio network planning and dimensioning tools, which incorporate different radio signal propagation models. In this paper we present {{the use of}} open-source Geographical Resources Analysis Support System (GRASS) for the calculation of radio signal coverage. We developed GRASS modules for radio coverage prediction {{for a number of}} different radio channel models, with antenna radiation patterns given in the standard MSI format. The results are stored in a data base (e. g. MySQL, PostgreSQL) for further processing and in a simplified form as a <b>bit-map</b> file for <b>displaying</b> in GRASS. The accuracy of prediction was confirmed by comparison with results obtained by a dedicated professional prediction tool as well as with measurement results. Key-Words: network planning tool, open-source, GRASS GIS, path loss, raster, clutter, radio signal coverage...|$|R

