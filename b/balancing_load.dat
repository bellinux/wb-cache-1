126|10000|Public
25|$|The {{keyboard}} {{was again}} modified in 1974. This time the layout {{was based on}} the frequency tables and bifurcation (<b>balancing</b> <b>load</b> on typist's fingers) techniques, and the characters relating to other languages were replaced with the numerals.|$|E
50|$|Load <b>balancing,</b> <b>load</b> matching, or {{daily peak}} demand reserve {{refers to the}} use of various {{techniques}} by electrical power stations to store excess electrical power during low demand periods for release as demand rises. The goal would be for the power supply system to see a load factor of 1.|$|E
50|$|Server-load {{balancing}} uses {{one or more}} techniques including service-based (global load balancing) or hardware-based, i.e. layer 4-7 switches, {{also known}} as a web switch, content switch, or multilayer switch to share traffic among a number of servers or web caches. Here the switch is assigned a single virtual IP address. Traffic arriving at the switch is then directed to one of the real web servers attached to the switch. This has the advantage of <b>balancing</b> <b>load,</b> increasing total capacity, improving scalability, and providing increased reliability by redistributing the load of a failed web server and providing server health checks.|$|E
50|$|Cloud <b>load</b> <b>balancing</b> {{is a type}} of <b>load</b> <b>balancing</b> that is {{performed}} in cloud computing. Cloud <b>load</b> <b>balancing</b> is the process of distributing workloads across multiple computing resources. Cloud <b>load</b> <b>balancing</b> reduces costs associated with document management systems and maximizes availability of resources. It {{is a type of}} <b>load</b> <b>balancing</b> and {{not to be confused with}} Domain Name System (DNS) <b>load</b> <b>balancing.</b> While DNS <b>load</b> <b>balancing</b> uses software or hardware to perform the function, cloud <b>load</b> <b>balancing</b> uses services offered by various computer network companies.|$|R
5000|$|The phase {{currents}} tend {{to cancel}} out one another, summing to zero {{in the case of}} a linear <b>balanced</b> <b>load.</b> This makes it possible to reduce the size of the neutral conductor because it carries little or no current. With a <b>balanced</b> <b>load,</b> all the phase conductors carry the same current and so can be the same size.|$|R
40|$|<b>Load</b> <b>balancing</b> {{middleware}} is {{used extensively}} to improve scalability and overall system throughput in distributed systems. Many <b>load</b> <b>balancing</b> middleware services are simplistic, however, {{since they are}} geared only for specific usecases and environments. These limitations {{make it hard to}} use the same <b>load</b> <b>balancing</b> service for anything other than the distributed application it was designed for originally. This lack of generality forces continuous re-development of application-specific <b>load</b> <b>balancing</b> services. Not only does re-development increase deployment costs of distributed applications, but it also increases the potential of producing nonoptimal <b>load</b> <b>balancing</b> implementations since proven <b>load</b> <b>balancing</b> service optimizations cannot be reused directly. This paper presents a set of <b>load</b> <b>balancing</b> service features that address many existing middleware <b>load</b> <b>balancing</b> service inadequacies, such as lack of server-side transparency, centralized <b>load</b> <b>balancing,</b> sole support for stateless replication, fixed load monitoring granularities, lack of fault tolerant <b>load</b> <b>balancing,</b> non-extensible <b>load</b> <b>balancing</b> algorithms, and simplistic replica management. All the capabilities described in this paper are currently under development {{for the next generation of}} middleware-based <b>load</b> <b>balancing</b> service distributed with our CORBA-compliant ORB (TAO). Keywords: Middleware, patterns, scalability, CORBA, <b>load</b> <b>balancing.</b> ...|$|R
50|$|Unlike the original, the new {{funicular}} {{used two}} separate haulage systems (one for each car), {{with the two}} systems connected to each other, the drive motor, and the service brake by a gear train; it was the failure of this gear train that was the immediate cause of the accident since it effectively disconnected Sinai both from Olivet’s <b>balancing</b> <b>load</b> and from the service brake. There were emergency brakes that acted {{on the rim of}} each haulage drum, but due to inadequate maintenance, the emergency brakes for both cars were inoperative, which left Sinai without any brakes once its physical connection to the service brake was lost. Contrary to what might be expected, the new funicular was constructed with neither safety cable nor track brakes, either of which would have prevented the accident; the NTSB was unable to identify another funicular worldwide that operated without either of these safety features.|$|E
50|$|Some gliders {{not only}} use flaps when landing, {{but also in}} flight to {{optimize}} the camber of the wing for the chosen speed. When thermalling, flaps may be partially extended to reduce the stalling speed so that the glider can be flown more slowly and thereby reduce the rate of sink, which lets the glider use the rising air of the thermal more efficiently, and to turn in a smaller circle to make best use of {{the core of the}} thermal. At higher speeds a negative flap setting is used to reduce the nose-down pitching moment. This reduces the <b>balancing</b> <b>load</b> required on the horizontal stabilizer, which in turn reduces the trim drag associated with keeping the glider in longitudinal trim. Negative flap may also be used during the initial stage of an aerotow launch {{and at the end of}} the landing run in order to maintain better control by the ailerons.|$|E
5000|$|A {{commonly}} used configuration is the catenary anchor leg mooring (CALM), {{which can be}} capable of handling very large crude carriers. This configuration uses six or eight heavy anchor chains placed radially around the buoy, of a size to suit the designed load, each about 350 m long, and attached to an anchor or pile to provide the required holding power. The anchor chains are pre-tensioned {{to ensure that the}} buoy is held in position above the PLEM. As the load from the tanker is applied, the heavy chains on the far side straighten and lift off the seabed to apply the <b>balancing</b> <b>load.</b> Under full design load there is still some 27 m of chain lying on the bottom. The flexible hose riser may be in one of three basic configurations, all designed to accommodate tidal depth variation and lateral displacement due to mooring loads. In all cases the hose curvature changes to accommodate lateral and vertical movement of the buoy, and the hoses are supported at near neutral buoyancy by floats along the length. These are: ...|$|E
5000|$|... #Caption: Howe truss {{illustrated}} - the diagonals {{are under}} compression under <b>balanced</b> <b>loading</b> ...|$|R
40|$|Abstract: In <b>load</b> <b>balancing,</b> each {{processor}} {{is assigned}} work proportional to its performance so that execution {{time of the}} program can be minimized. The gap between lightly loaded processor and heavily loaded processor is filled by <b>load</b> <b>balancing.</b> Static <b>load</b> <b>balancing</b> and dynamic <b>load</b> <b>balancing</b> {{are two types of}} <b>load</b> <b>balancing.</b> For decreasing unnecessary request messages and for increasing acceptance rate, genetic algorithm is used with <b>load</b> <b>balancing.</b> Population of solutions are maintained iteratively by genetic algorithm in which each solution represents a chromosome. Basic operation of genetic algorithm here is to determine a destination processor that can receive a task...|$|R
5000|$|... resource-manager: {{distributes}} {{the load}} over the recservers as required to <b>balance</b> <b>load</b> {{and to provide}} fault-tolerance.|$|R
40|$|The {{analysis}} of strategies of <b>balancing</b> <b>load</b> in the Grid-systems and comparative {{analysis of}} existing algorithms {{of the distribution}} of flow of the tasks between computing resources of a Grid environment are shown. ???????? ?????? ????????? ?????????????? ???????? ? ????-???????? ? ????????????? ?????? ????????? ?????????? ????????????? ?????? ??????? ????? ??????????????? ????????? ????-?????...|$|E
40|$|International audienceAn {{algorithm}} {{to adapt}} dynamically virtual networks to additional resource requirements is proposed and evaluated. The optimization is achieved while <b>balancing</b> <b>load</b> and avoiding fragmentation in the infrastructure (often referred as substrate or physical network). The algorithm focuses on virtual nodes requiring more resources by extending their allocations and maintaining their connectivity (even if the node is migrated) to other resources while tidying up (or consolidating) the infrastructure. The algorithm outperforms existing approaches...|$|E
40|$|Abstract- Various {{types of}} {{scheduling}} algorithms {{are used by}} load balancers to determine which backend server to send a request to. Simple algorithms include random choice or round robin. High-performance systems may use multiple layers of load <b>balancing.</b> <b>Load</b> balancing {{is the process of}} distributing client request over the set of servers and is a key element of obtaining good performance in distributed application [...] Java RMI extends java with distributed objects whose methods can be called from remote clients...|$|E
5000|$|Power {{transfer}} into {{a linear}} <b>balanced</b> <b>load</b> is constant, which helps to reduce generator and motor vibrations.|$|R
40|$|Motivated by {{the need}} to reduce the {{potential}} for queuing at charging stations, and {{by the need}} to <b>balance</b> <b>load</b> across a number of charging stations, a stochastic algorithm is presented to <b>balance</b> <b>load</b> over a network of stations that also facilitates decentralised plug-and-play type behaviour that allows stations to provide charging services on an adhoc basis. Simulation results are presented to illustrate the efficacy of our algorithm...|$|R
40|$|The <b>load</b> <b>balancing</b> {{architecture}} {{is the most}} popular method to improve the performance of the server. The selection of the <b>load</b> <b>balancing</b> algorithms {{is one of the most}} important issues. In this paper, we use NetFlow to collect traffic for six <b>load</b> <b>balancing</b> algorithms, including least connections, round robin, minimum misses, hash, response time, and bandwidth. We compared their flow counts and packet counts separately. Both the WAN link <b>load</b> <b>balancing</b> and server <b>load</b> <b>balancing</b> are implemented. In addition, we also collected the burst traffic for server <b>load</b> <b>balancing.</b> The results for the performance of the algorithms are analyzed and compared. Key words: NetFlow, <b>load</b> <b>balancing,</b> cluste...|$|R
40|$|This paper proposes an {{algorithm}} {{which helps}} {{in reducing the}} network traffic at intermediate nodes in a mesh network. This model analyses the network performance by using queuing theory and provides QoS for end-users. The performance metrics are mean waiting time, throughput and delay. Each node {{is assumed to be}} M/M/m model in the network. The major focus of this work is to provide better QoS for end-users by effective utilization of bandwidth and <b>balancing</b> <b>load</b> over the network. Keywords: Parallelism, arrival rate, service rate, QoS. 1...|$|E
40|$|Abstract. Irregular {{applications}} are challenging to scale on supercom-puters {{due to the}} difficulty of <b>balancing</b> <b>load</b> across large numbers of nodes. This challenge is exacerbated by the increasing heterogeneity of modern supercomputers in which nodes often contain multiple proces-sors and coprocessors operating at different speeds, and with differing core and thread counts. We present Dtree, a dynamic task scheduler de-signed to address this challenge. Dtree shows close to optimal results for a class of HPC applications, improving time-to-solution by achieving near-perfect load balance while consuming negligible resources. We demon-strate Dtree’s effectiveness on up to 77, 824 heterogeneous cores of the TACC Stampede supercomputer with two different petascale HPC ap-plications: ParaBLe, which performs large-scale Bayesian network struc-ture learning, and GTFock, which implements Fock matrix construction, an essential and expensive step in quantum chemistry codes. For Para-BLe, we show improved performance while eliminating the complexity of managing heterogeneity. For GTFock, we match the most recently pub-lished performance without using any application-specific optimizations for data access patterns (such as the task distribution design for commu-nication reduction) that enabled that performance. We also show that Dtree can distribute from tens of thousands to hundreds of millions of irregular tasks across up to 1024 nodes with minimal overhead, while <b>balancing</b> <b>load</b> to within 2 % of optimal...|$|E
30|$|So, the {{approach}} of <b>balancing</b> <b>load</b> in AOMDV is done when the link is broken due to link failures or congestion at nodes by keeping an alternate path as a standby. However, if the links are many, there is an option to choose alternate path. But, a congestion control mechanism is required to balance the load. This protocol has become popular because {{it is based on}} providing a multipath solution to avoid congestion or link failures in AODV routing protocol. Thus, AOMDV has been considered to compare the performances of APU and LAPU.|$|E
40|$|Abstract: <b>Load</b> <b>balancing</b> is a {{technique}} in which workload is distributed across multiple computers or other resources to get optimal resource utilization, minimum time delay, maximize throughput and avoid overload. Mainly in operation of parallel and distributed computing systems, <b>load</b> <b>balancing</b> problem arises. <b>Load</b> <b>balancing</b> scheme can be characterized as: static and dynamic <b>load</b> <b>balancing.</b> This paper represents a senderinitiated <b>load</b> <b>balancing</b> scheme, which {{is a part of}} dynamic <b>load</b> <b>balancing</b> scheme, with the help of genetic algorithm (GA), as due to easily adaptable search technique and robust, immense popularity have gained by genetic algorithms...|$|R
40|$|This paper {{presents}} a <b>load</b> <b>balancing</b> model {{to investigate the}} effect of non-uniform traffic distributions on <b>load</b> <b>balancing</b> in CDMA system. Applying two traffic models on non-uniform traffic distributions, the impact of traffic non-uniformity on system <b>load</b> <b>balancing</b> is compared with uniform distributions. To evaluate the model, we define both <b>load</b> <b>balancing</b> factor (LBF) and <b>load</b> <b>balancing</b> coefficient (LBC). Results indicate that the more offered traffic is easier to achieving <b>load</b> <b>balancing</b> than the less offered traffic. 1...|$|R
30|$|The LSP will be {{established}} on the sub-graph having low CF value, {{leading to the}} optimum network utilization and <b>balanced</b> <b>load</b> on the network.|$|R
40|$|Abstract—Fueled {{power systems}} using {{secondary}} energy storage are analyzed. A generic model of such systems is suggested, and an optimal power management strategy that maximizes efficiency is derived analytically. The model and optimal management solu-tion emphasizes the constraint imposed by finite storage capacity. The optimal generated energy is established {{independently of the}} system’s capacity, and load, and general characteristics of it are de-rived and proved. The analytic solution provides an intuitive com-prehension into the optimal power management, without needing numeric simulations. Index Terms—Battery lifetime, energy storage, load <b>balancing,</b> <b>load</b> leveling, optimal efficiency, power management. I...|$|E
40|$|Network {{operators}} {{must have}} control over the flow of traffic into, out of, and across their networks. However, the Border Gateway Protocol (BGP) does not facilitate common traffic engineering tasks, such as <b>balancing</b> <b>load</b> across multiple links to a neighboring AS or directing traffic to a different neighbor. Solving these problems is difficult {{because the number of}} possible changes to routing policies is too large to exhaustively test all possibilities, some changes in routing policy can have an unpredictable effect on the flow of traffic, and the BGP decision process implemented by router vendors limits an operator's control over path selection. We propos...|$|E
40|$|Abstract. To {{improve the}} power quality and {{efficiency}} on feeding unbalanced loads, this paper proposes a scheme of instantaneous current compensation that can modify the power factor and balance the three-phase currents simultaneously. The method of instantaneous space vectors can compensate the reactive power effectively, but {{the problems of}} unbalanced load currents remains. This paper suggests a method that can mitigate the unbalanced load currents by setting the active power as a constant for each cycle. Field measurement data were analyzed. Simulation results confirmed the feasibility of correcting the power factor and <b>balancing</b> <b>load</b> currents simultaneously using the proposed method...|$|E
40|$|Abstract: – The {{preliminary}} design space exploration for large, interdisciplinary engineering problems {{is often a}} difficult and time-consuming task. General techniques are needed that efficiently and methodically search the design space. This work focuses {{on the use of}} parallel <b>load</b> <b>balancing</b> techniques integrated with a global optimizer to reduce the computational time of the design space exploration. The method is applied to the multidisciplinary design of a High Speed Civil Transport (HSCT). A modified Lipschitzian optimization algorithm generates large sets of design points that are evaluated concurrently using a variety of <b>load</b> <b>balancing</b> schemes. The <b>load</b> <b>balancing</b> schemes implemented in this study are: static <b>load</b> <b>balancing,</b> dynamic <b>load</b> <b>balancing</b> with a master-slave organization, fully distributed dynamic <b>load</b> <b>balancing,</b> and fully distributed dynamic <b>load</b> <b>balancing</b> via threads. All of the parallel computing schemes have high parallel efficiencies. When the variation in the design evaluation times is small, the computational overhead needed for fully distributed dynamic <b>load</b> <b>balancing</b> is substantial enough so that it is more efficient to use a master-slave paradigm. However, when the variation in evaluation times is increased, fully distributed <b>load</b> <b>balancing</b> is the most efficient. Key-Words: – Nonlinear programming, Global optimization, Parallel computation, Aerospace...|$|R
40|$|The {{preliminary}} design space exploration for large,interdisciplinary engineering problems {{is often a}} difficult and time-consuming task. General techniques are needed that efficiently and methodically search the design space. This work focuses {{on the use of}} parallel <b>load</b> <b>balancing</b> techniques integrated with a global optimizer to reduce the computational time of the design space exploration. The method is applied to the multidisciplinary design of a High Speed Civil Transport (HSCT). A modified Lipschitzian optimization algorithm generates large sets of design points that are evaluated concurrently using a variety of <b>load</b> <b>balancing</b> schemes. The <b>load</b> <b>balancing</b> schemes implemented in this study are: static <b>load</b> <b>balancing,</b> dynamic <b>load</b> <b>balancing</b> with a master-slave organization, fully distributed dynamic <b>load</b> <b>balancing,</b> an fully distributed dynamic <b>load</b> <b>balancing</b> via threads. All of the parallel computing schemes have high parallel efficiencies. When the variation in the design evaluation times is small, the computational overhead needed for fully distributed dynamic <b>load</b> <b>balancing</b> is substantial enough so that it is more efficient to use a master-slave paradigm. However, when the variation in evaluation times is increased, fully distributed <b>load</b> <b>balancing</b> is the most efficient...|$|R
40|$|Due to {{the fast}} {{development}} of internet, {{a huge amount}} of load increases over data centers every second. This causes scheduling overhead, huge memory demand at data centers. Thus increases overhead effects the <b>load</b> <b>balancing</b> at data centers. So, there is a need of mechanisms which will decrease overhead and provide effective <b>load</b> <b>balancing.</b> Today, every <b>load</b> <b>balancing</b> scheduling algorithm <b>balances</b> the <b>load</b> on data centers that reside in the same region. They give birth to same problems like scheduling overhead, huge memory demand. This paper proposes a <b>Load</b> <b>balancing</b> scheduling algorithm which is based on load and time. This algorithm <b>balances</b> the <b>load</b> over the Data centers which reside in different regions. This mechanism will maximize hardware utilization, decrease huge memory demand and decrease cost...|$|R
40|$|Abstract Caching and {{replication}} {{techniques can}} improve latency of the Web, whilereducing network traffic and <b>balancing</b> <b>load</b> among servers. However, no single strategy is optimal for replicating all documents. Depending on its access pattern,each document {{should use the}} policy that suits it best. This paper presents an architecture for adaptive replicated documents. Each adaptive document monitorsits access pattern, and uses it to determine which strategy it should follow. When a change is detected in its access pattern, it re-evaluates its strategy to adapt tothe new conditions. Adaptation comes at an acceptable cost considering to the benefits of per-document replication strategies...|$|E
40|$|ABSTRACT- Composite mobile {{services}} {{refer to}} access of concurrent services {{at a time}} on a mobile phone. Nowadays due to execution of many services simultaneously at a time leads to slow process, time consumption, and excessive load on the system and security issues. “Security in Composite Mobile Services and Load Balancing ” aims at providing tool support and middleware infrastructure for the implementation and execution of composite mobile services and also <b>balancing</b> <b>load</b> at the mobile phone’s processor end. Development of this application will ease the usage of composite mobile services by the users resulting in quick speed, secure access and balanced processor load...|$|E
40|$|Caching and {{replication}} {{techniques can}} improve latency of the Web, while reducing network traffic and <b>balancing</b> <b>load</b> among servers. However, no single strategy is optimal for replicating all documents. Depending on its access pattern, each document {{should use the}} policy that suits it best. This paper presents an architecture for adaptive replicated documents. Each adaptive document monitors its access pattern, and uses it to determine which strategy it should follow. When a change is detected in its access pattern, it re-evaluates its strategy {{to adapt to the}} new conditions. Adaptation comes at an acceptable cost considering to the benefits of per-document replication strategies. Faculty of Mathematics and Computer Science...|$|E
40|$|This paper {{presents}} {{the process of}} <b>load</b> <b>balancing</b> in simulation system Triad. Net, the architecture of <b>load</b> <b>balancing</b> subsystem. The main features of static and dynamic <b>load</b> <b>balancing</b> are discussed and new approach, controlled dynamic <b>load</b> <b>balancing,</b> needed for regular mapping of simulation model on the network of computers is proposed. The paper considers linguistic constructions of Triad language for different <b>load</b> <b>balancing</b> algorithms description...|$|R
40|$|In {{communication}} networks servers are duplicated for dependability reasons. To utilize them efficiently a controller distributes {{the load}} {{between them in}} a best possible way. In this paper we study dynamic <b>load</b> <b>balancing</b> based on {{the states of the}} servers {{at the start of the}} <b>load</b> <b>balancing</b> interval. The servers are modeled as M/M/ 1 /n queuing systems. The transient loss of this system is found using renewal type of argument. This result is used for dynamic <b>load</b> <b>balancing</b> to minimize the sum of lost tasks over the <b>load</b> <b>balancing</b> interval. The result is compared with ideal <b>load</b> <b>balancing</b> and weighted <b>load</b> <b>balancing</b> of tasks to the two servers. 1...|$|R
40|$|This paper aims {{to conduct}} an {{experiment}} on using some popular algorithms say Particle Swarm Optimization <b>Load</b> <b>Balancing</b> Algorithm(PSO), Cat Swarm Optimization <b>Load</b> <b>Balancing</b> Algorithm(CSO) and Genetic <b>Load</b> <b>Balancing</b> Algorithm (GA) in dynamic cloud computing environment {{in order to achieve}} low over heads during <b>load</b> <b>balancing...</b>|$|R
