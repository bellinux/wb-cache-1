158|183|Public
25|$|These {{semantics}} {{permit a}} translation between tautologies of propositional logic and equational theorems of Boolean algebra. Every tautology Φ of propositional logic {{can be expressed}} as the <b>Boolean</b> <b>equation</b> Φ = 1, which will be a theorem of Boolean algebra. Conversely every theorem Φ = Ψ of Boolean algebra corresponds to the tautologies (Φ∨¬Ψ) ∧ (¬Φ∨Ψ) and (Φ∧Ψ) ∨ (¬Φ∧¬Ψ). If → is in the language these last tautologies can also be written as (Φ→Ψ) ∧ (Ψ→Φ), or as two separate theorems Φ→Ψ and Ψ→Φ; if ≡ is available then the single tautology Φ ≡ Ψ can be used.|$|E
5000|$|Caesar_Solve, which {{resolves}} <b>boolean</b> <b>equation</b> {{systems on}} the fly ...|$|E
5000|$|A 2-1 AOI gate can be {{represented}} by following the <b>boolean</b> <b>equation</b> and truth table: ...|$|E
40|$|A {{method is}} {{presented}} for generating a single formula involving arbitary Boolean parameters, which includes in it {{each and every}} possible solution {{of a system of}} <b>Boolean</b> <b>equations.</b> An alternate condition equivalent to a known necessary and sufficient condition for solving a system of <b>Boolean</b> <b>equations</b> is given...|$|R
40|$|Abstract- The optimal {{design of}} a {{non-deterministic}} finite state machine by solving and resolving <b>Boolean</b> <b>equations</b> is shown, {{taking advantage of the}} relationships between single Boolean functions, sets of <b>Boolean</b> functions, <b>Boolean</b> <b>equations,</b> and their solutions. The Boolean Differential Calculus is used to point out the key ideas of the applied resolvability theory...|$|R
40|$|In {{this paper}} ∗ we analyse {{with respect to}} {{algebraic}} attacks a small-scale version of the stream cipher Lex. We base it on a small-scale version of the block cipher AES with 16 -bit state and 16 -bit key. We represent the small-scale Lex and its key schedule in two alternative ways: as a system of cubic <b>boolean</b> <b>equations</b> and as a system of quadratic <b>boolean</b> <b>equations.</b> We use Gröbner bases to solve the two systems for different number of rounds and sizes of the leak. We obtain the best results for the quadratic representation of the cipher. For this case {{we are able to}} recover the secret key in time less than 2 minutes by solving a system of 374 quadratic <b>boolean</b> <b>equations</b> in 208 unknowns resulting from 5 rounds of the cipher. ...|$|R
5000|$|A 2-to-1 {{multiplexer}} has a <b>boolean</b> <b>equation</b> where [...] and [...] {{are the two}} inputs, [...] is the selector input, and [...] is the output: ...|$|E
5000|$|In Boolean algebra, Poretsky's law {{of forms}} {{shows that the}} single <b>Boolean</b> <b>equation</b> [...] is {{equivalent}} to [...] {{if and only if}} , where [...] represents exclusive or.|$|E
5000|$|AOI gates perform {{one or more}} AND {{operations}} {{followed by}} an OR operation and then an inversion. For example, a 2-2 AOI gate can be represented by the <b>boolean</b> <b>equation</b> and truth table: ...|$|E
25|$|Brown, Frank Markham (2003), Boolean Reasoning: The Logic of <b>Boolean</b> <b>Equations,</b> 1st edition, Kluwer Academic Publishers, Norwell, MA. 2nd edition, Dover Publications, Mineola, NY.|$|R
40|$|A {{network of}} {{switches}} controlled by Boolean variables {{can be represented}} as a system of <b>Boolean</b> <b>equations.</b> The solution of this system gives a symbolic description of the conducting paths in the network. Gaussian elimination provides an e cient technique for solving sparse systems of <b>Boolean</b> <b>equations.</b> For the class of networks that arise when analyzing digital metal-oxide semiconductor (MOS) circuits, a simple pivot selection rule guarantees that most s switch networks encountered in practice can be solved with O(s) operations. When represented by a directed acyclic graph, the set of Boolean formulas generated by the analysis has total size bounded {{by the number of}} operations required by the Gaussian elimination. This paper presents the mathematical basis for systems of <b>Boolean</b> <b>equations,</b> their solution by Gaussian elimination, and data structures and algorithms for representing and manipulating Boolean formulas...|$|R
40|$|There is {{investigated}} {{possibility to}} exploring the linear <b>boolean</b> <b>equations</b> as a periodic bits sequences generators. There is proposed methodology for such generator synthesis. There are given recommendations on {{application of a}} methodology. ??????????? ??????????? ????????????? ??????? ?????????? ???????? ????????? ? ??????????? ???????????? ??? ??????????? ????????????? ??????? ???????????????????. ?????????? ???????? ??????? ????? ???????????. ???? ???????????? ?? ?????????? ????????...|$|R
50|$|The {{following}} table {{shows how}} many of the usual properties of binary relations can be expressed as succinct RA equalities or inequalities. Below, an inequality of the form A≤B is shorthand for the <b>Boolean</b> <b>equation</b> A∨B = B.|$|E
5000|$|Models provide {{mathematical}} representations for parallel {{programs and}} related verification problems. Examples of models are automata, networks of communicating automata, Petri nets, binary decision diagrams, <b>boolean</b> <b>equation</b> systems, etc. From a theoretical point of view, research on models seeks for general results, independent {{of any particular}} description language.|$|E
50|$|These {{semantics}} {{permit a}} translation between tautologies of propositional logic and equational theorems of Boolean algebra. Every tautology Φ of propositional logic {{can be expressed}} as the <b>Boolean</b> <b>equation</b> Φ = 1, which will be a theorem of Boolean algebra. Conversely every theorem Φ = Ψ of Boolean algebra corresponds to the tautologies (Φ∨¬Ψ) ∧ (¬Φ∨Ψ) and (Φ∧Ψ) ∨ (¬Φ∧¬Ψ). If → is in the language these last tautologies can also be written as (Φ→Ψ) ∧ (Ψ→Φ), or as two separate theorems Φ→Ψ and Ψ→Φ; if ≡ is available then the single tautology Φ ≡ Ψ can be used.|$|E
5000|$|The logical {{level is}} {{described}} in the behaviour perspective by <b>boolean</b> <b>equations.</b> In the structural view, this is displayed with gates and flip-flops. In the geometric domain, the logical level is described by standard cells.|$|R
40|$|ABSTRACT. A {{new method}} for obtaining a compact subsumptive general {{solution}} {{of a system}} of <b>Boolean</b> <b>equations</b> is presented. The method relies {{on the use of the}} variable-entered Karnaugh map (VEKM) to achieve successive elimination through successive map folding. It also makes an artificial distinction between don’t-care and can’t-happen conditions. Therefore, it is highly efficient as it requires the construction of maps that are both significantly fewer and significantly smaller than those required by classical methods. Moreover, the method is applicable to general <b>Boolean</b> <b>equations</b> and is not restricted to the twovalued case. Details of the method are formally justified, carefully explained and further demonstrated via an illustrative example. 1...|$|R
40|$|K Maps are {{generally}} and ideally, {{thought to be}} simplest form for obtaining solution of <b>Boolean</b> <b>equations.</b> Cubical Representation of <b>Boolean</b> <b>equations</b> is an alternate pick to incur a solution, otherwise to be meted out with Truth Tables, Boolean Laws and different traits of Karnaugh Maps. Largest possible k- cubes that exist for a given function are equivalent to its prime implicants. A technique of minimization of Logic functions is tried to be achieved through cubical methods. The main purpose is to make aware and utilise the advantages of cubical techniques in minimization of Logic functions. All this is done with an aim to achieve minimal cost solution...|$|R
5000|$|In early 1870 W. Stanley Jevons {{presented}} a [...] "Logical Machine" [...] (Jevons 1880:200) for analyzing a syllogism or other logical form e.g. an argument {{reduced to a}} <b>Boolean</b> <b>equation.</b> By means of what Couturat (1914) called a [...] "sort of logical piano , ... the equalities which represent the premises ... are [...] "played" [...] on a keyboard {{like that of a}} typewriter. ... When all the premises have been [...] "played", the panel shows only those constituents whose sum is equal to 1, that is, ... its logical whole. This mechanical method has the advantage over VENN's geometrical method..." [...] (Couturat 1914:75).|$|E
5000|$|The second prime implicant can be 'covered' by {{the third}} and fourth, and the third prime implicant can be 'covered' by the second and first, and neither is thus {{essential}}. If a prime implicant is essential then, as would be expected, {{it is necessary to}} include it in the minimized <b>boolean</b> <b>equation.</b> In some cases, the essential prime implicants do not cover all minterms, in which case additional procedures for chart reduction can be employed. The simplest [...] "additional procedure" [...] is trial and error, but a more systematic way is Petrick's method. In the current example, the essential prime implicants do not handle all of the minterms, so, in this case, one can combine the essential implicants with one of the two non-essential ones to yield one equation: ...|$|E
5000|$|... #Caption: Before {{it can be}} {{presented}} in a Venn diagram or Karnaugh Map, the Euler diagram's syllogism [...] "No Y is Z, All X is Y" [...] must first be reworded into the more formal language of the propositional calculus: [...] " [...] 'It {{is not the case}} that: Y AND Z' AND 'If an X then a Y' [...] ". Once the propositions are reduced to symbols and a propositional formula ( [...] ~(y & z) & (x → y) [...] ), one can construct the formula's truth table; from this table the Venn and/or the Karnaugh map are readily produced. By use of the adjacency of [...] "1"s in the Karnaugh map (indicated by the grey ovals around terms 0 and 1 and around terms 2 and 6) one can [...] "reduce" [...] the example's <b>Boolean</b> <b>equation</b> i.e. (x'y'z' + x'y'z) + (x'yz' + xyz') to just two terms: x'y' + yz'. But the means for deducing the notion that [...] "No X is Z", and just how the reduction relates to this deduction, is not forthcoming from this example.|$|E
40|$|<b>Boolean</b> {{differential}} <b>equations</b> and "time" <b>boolean</b> differential <b>equations</b> {{are considered}} in the paper aiming at the grouping property investigation of differential <b>equations</b> in n-dimensional <b>boolean</b> space in the expansion of this space by the set of integer non-negative numbers. As a result the approach has been developed, methods of the drouping analysis of <b>boolean</b> differential <b>equations</b> and equations in expanded space have been suggested and substantiated as well as methods of the grouping analysis on graphs. The scheme of the grouping analysis methods use for <b>boolean</b> differential <b>equations</b> in problems of the complicated dynamic recognition has been consideredAvailable from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|R
40|$|An {{architecture}} {{for using}} diagnostic reasoning techniques in selective monitoring is presented. Given the sensor readings {{and a model}} of the physical system, a number of assertions are generated and expressed as <b>Boolean</b> <b>equations.</b> The resulting system of <b>Boolean</b> <b>equations</b> is solved symbolically. Using a priori probabilities of component failure and Bayes' rule, revised probabilities of failure can be computed. These will indicate what components have failed or are the most likely to have failed. This approach is suitable for systems that are well understood and for which the correctness of the assertions can be guaranteed. Also, the system must be such that changes are slow enough to allow the computation...|$|R
40|$|Abstract. Equational Boolean Relation Theory {{concerns}} the <b>Boolean</b> <b>equations</b> between sets and their forward images under multivariate functions. We study a particular instance of equational BRT involving two multivariate functions {{on the natural}} numbers and three infinite sets of natural numbers. We prove this instance from certain large cardinal axioms going far beyond the usual axioms of mathematics as formalized by ZFC. We show that this particular instance cannot be proved in ZFC, even {{with the addition of}} slightly weaker large cardinal axioms, assuming the latter are consistent. 1. EQUATIONAL BOOLEAN RELATION THEORY. Equational Boolean Relation Theory (equational BRT) {{concerns the}} <b>Boolean</b> <b>equations</b> between sets and their images under multivariate functions. We formally present equational BRT i...|$|R
40|$|ABSTRACT: <b>Boolean</b> <b>equation</b> {{systems are}} ordered {{sequences}} of Boolean equations decorated with least and greatest fixpoint operators. <b>Boolean</b> <b>equation</b> systems provide a useful framework for formal verification because various specification and verification problems, for instance, µ-calculus model checking {{can be represented}} as the problem of solving <b>Boolean</b> <b>equation</b> systems. The general problem of solving a <b>Boolean</b> <b>equation</b> system is a computationally hard task, and no polynomial time solution technique for {{the problem has been}} discovered so far. In this thesis, techniques for finding solutions to <b>Boolean</b> <b>equation</b> systems are studied and new methods for solving such systems are devised. The thesis presents a general framework that allows for dividing <b>Boolean</b> <b>equation</b> systems into individual blocks and solving these blocks in isolation with special techniques. Three special techniques are presented, namely...|$|E
40|$|ABSTRACT: <b>Boolean</b> <b>equation</b> {{systems are}} ordered {{sequences}} of Boolean equations decorated with fixpoint operators. <b>Boolean</b> <b>equation</b> systems provide a useful framework for computer aided verification because various specification and verification {{problems can be}} encoded as the problem of solving such fixpoint equation systems. In this work, techniques for finding solutions to <b>Boolean</b> <b>equation</b> systems are studied, and new methods for solving such systems are devised. An approach to solve a general form <b>Boolean</b> <b>equation</b> system, which simplifies the process of finding the solution by dividing the system into more simple subsystems and solving these by optimized procedures, is introduced and analyzed. New solution algorithms for disjunctive and conjunctive classes of <b>Boolean</b> <b>equation</b> systems are presented, together with an implementation and experimental evaluation of a solver for these classes. A novel translation {{of the problem of}} solving a general form <b>Boolean</b> <b>equation</b> system into the problem of finding a stable model of a logic program is given. The translation allows to use an implementation of an answe...|$|E
40|$|In {{this paper}} we apply answer set {{programming}} to solve alternating <b>Boolean</b> <b>equation</b> systems. We develop a novel characterization of solutions for variables in disjunctive and conjunctive <b>Boolean</b> <b>equation</b> systems. Based on this we devise a mapping from <b>Boolean</b> <b>equation</b> systems with alternating fixed points to normal logic programs {{such that the}} solution of a given variable of an equation system can {{be determined by the}} existence of a stable model of the corresponding logic program...|$|E
5000|$|Determination of Boolean {{functions}} for next-state and output functions: The <b>Boolean</b> <b>equations</b> {{can be obtained}} by a two-level structure or random-logic by an interconnection of logic primitives. In either case, Boolean minimization, logical partitioning and decomposition are essential for an efficient realization ...|$|R
40|$|An {{intelligent}} {{fuzzy logic}} inference pipeline {{for the control}} of a dc-dc buck-boost converter was designed and built using a semi-custom VLSI chip. The fuzzy linguistics describing the switching topologies of the converter was mapped into a look-up table that was synthesized into a set of <b>Boolean</b> <b>equations.</b> A VLSI chip–a {{field programmable gate array}} (FPGA) was used to implement the <b>Boolean</b> <b>equations.</b> Features include the size of RAM chip independent of number of rules in the knowledge base, on-chip fuzzification and defuzzification, faster response with speeds over giga fuzzy logic inferences per sec (FLIPS), and an inexpensive VLSI chip. The key application areas are: 1) on-chip integrated controllers; and 2) on-chip co-integration for entire system of sensors, circuits, controllers, and detectors for building complete instrument systems...|$|R
40|$|A new {{symbolic}} approach models the sensitization {{paths to}} selected primary output(s) as <b>Boolean</b> <b>equations,</b> with satisfying solutions representing {{the set of}} all sources of single and multiple sensitizations in the circuit. The paper discusses two applications of this idea: model-free fault diagnosis and input sensitization analysis...|$|R
40|$|This {{data set}} {{contains}} a computer-checkable formal mathematical {{proof of the}} soundness and completeness of a proof system for the "consistent consequence" relation on <b>Boolean</b> <b>equation</b> systems, along with a formalisation of <b>Boolean</b> <b>equation</b> systems, the notion of solution and a formalisation {{of the relation between}} a solution of a <b>Boolean</b> <b>equation</b> system and a consistent consequence on such an equation system. The proofs can be machine-checked using the Coq proof assistant, version CoqIDE 8. 5 pl 2; these proofs accompany the paper "A Formalisation of Consistent Consequence for <b>Boolean</b> <b>Equation</b> Systems" by Van Delft, Geuvers & Willemse {{that is part of the}} (forthcoming) proceedings of the 8 th International Conference on Interactive Theorem Proving...|$|E
40|$|<b>Boolean</b> <b>equation</b> {{systems are}} ordered {{sequences}} of Booleanequations decorated with least and greatest fixpoint operators. <b>Boolean</b> <b>equation</b> systems provide a useful framework for formal verification because various specification and verification problems, for instance, µ-calculus modelchecking {{can be represented}} as the problem of solving Boolean equatio...|$|E
40|$|We {{investigate}} a parity game interpretation of <b>boolean</b> <b>equation</b> systems. Given this interpretation, {{we present a}} version of the algorithm for solving parity games based on small progress measures [3]. The algorithm is applied directly on the <b>boolean</b> <b>equation</b> system (BES), eliminating the intermediate transformation step of BES to parity game. The resulting algorithm runs in O(ad(E) ΣX∈X |rhs(X) | · (|X |bad(E) / 2 c) bad(E) / 2 c) time, which is an improvement on the currently known bounds for solving <b>boolean</b> <b>equation</b> systems. ...|$|E
40|$|A {{program which}} accepts a system {{model in the}} form of <b>Boolean</b> <b>{{equations}}</b> and solves these equations using a ternary algebra will determine the response of large combinational and sequencial switching circuits to given input changes, taking into account malfunctions due to races, hazards, and oscillations...|$|R
5000|$|The main {{instruction}} book, {{as well as}} a supplementary book of wiring diagrams, gave jumper {{positions and}} wiring diagrams for building a number of [...] "machines," [...] which could realize fairly complicated <b>Boolean</b> <b>equations.</b> So, the behavior of Geniac could often be computationally complex and interesting.|$|R
5000|$|Couturat now observes that, in {{a direct}} {{algorithmic}} (formal, systematic) manner, one cannot derive reduced <b>Boolean</b> <b>equations,</b> nor does it show how {{to arrive at the}} conclusion [...] "No X is Z". Couturat concluded that the process [...] "has ... serious inconveniences as a method for solving logical problems": ...|$|R
