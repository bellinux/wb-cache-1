72|85|Public
25|$|This {{standard}} supports standard memory cycles with {{lengths of}} 1 byte to 4 kilobytes of data, short memory cycles with lengths of 1, 2, or 4 bytes that have much less overhead compared to standard memory cycles, and I/O cycles with lengths of 1, 2, or 4 bytes of data which are low overhead as well. This significantly reduces overhead {{compared to the}} LPC bus, where all cycles except for the 128-byte firmware hub read cycle spends more than one-half {{of all of the}} bus's throughput and time in overhead. The standard memory cycle allows a length of anywhere from 1 byte to 4 kilobytes in order to allow its larger overhead to be amortised over a large transaction. eSPI slaves are allowed to initiate <b>bus</b> <b>master</b> versions of all of the memory cycles. <b>Bus</b> <b>master</b> I/O cycles, which were introduced by the LPC bus specification, and ISA-style DMA including the 32-bit variant introduced by the LPC bus specification, are not present in eSPI. Therefore, <b>bus</b> <b>master</b> memory cycles are the only allowed DMA in this standard.|$|E
25|$|The PCI bus arbiter {{performs}} {{bus arbitration}} among multiple masters on the PCI bus. Any number of bus masters can reside on the PCI bus, {{as well as}} requests for the bus. One pair of request and grant signals is dedicated to each <b>bus</b> <b>master.</b>|$|E
25|$|To begin communication, the <b>bus</b> <b>master</b> configures the clock, using a {{frequency}} {{supported by the}} slave device, typically up to a few MHz. The master then selects the slave device with a logic level 0 on the select line. If a waiting period is required, such as for an analog-to-digital conversion, the master must wait for at least {{that period of time}} before issuing clock cycles.|$|E
5000|$|PCI <b>bus</b> <b>mastering</b> {{for display}} list {{processing}} and video capture support ...|$|R
5000|$|Local buses {{of various}} sorts—in particular, for <b>bus</b> <b>mastering</b> on modern systems ...|$|R
5000|$|... 16-bit vs. 32-bit: 32 bit {{includes}} DMA or <b>bus</b> <b>mastering,</b> 16-bit {{does not}} ...|$|R
25|$|Conventional PCI, often {{shortened}} to PCI, is a {{local computer}} bus for attaching hardware devices in a computer. PCI is the initialism for Peripheral Component Interconnect and {{is part of the}} PCI Local Bus standard. The PCI bus supports the functions found on a processor bus but in a standardized format that is independent of any particular processor's native bus. Devices connected to the PCI bus appear to a <b>bus</b> <b>master</b> to be connected directly to its own bus and are assigned addresses in the processor's address space. It is a parallel bus, synchronous to a single bus clock.|$|E
2500|$|Any {{device on}} a PCI bus that {{is capable of}} acting as a <b>bus</b> <b>master</b> may {{initiate}} a transaction with any other device. [...] To ensure that only one transaction is initiated at a time, each master must first wait for a bus grant signal, GNT#, from an arbiter located on the motherboard. [...] Each device has a separate request line REQ# that requests the bus, but the arbiter may [...] "park" [...] the bus grant signal at any device if there are no current requests.|$|E
50|$|Systems {{that have}} more than one <b>bus</b> <b>master</b> have {{additional}} control bus signals that control which <b>bus</b> <b>master</b> drives the address bus, avoiding bus contention on the address bus.|$|E
5000|$|Memory lock (MLB) output {{indicates}} {{to other}} <b>bus</b> <b>masters</b> when a read-modify-write instruction is being processed ...|$|R
50|$|Because the USB 2.0 {{interface}} {{is limited}} to 35 MByte/s and lacks <b>bus</b> <b>mastering</b> hardware, USB 2.0 implementation results in slower access.|$|R
50|$|Mid 1992, {{the master}} {{specification}} was released, {{resulting in the}} development of a number of <b>bus</b> <b>masters</b> with and without interfaces to other higher-level ‘’fieldbus’’ solutions.|$|R
5000|$|... 8-bit {{source address}} (lower 4 bits: {{priority}} class, higher 4 bits: <b>bus</b> <b>master</b> address) ...|$|E
50|$|The bus is {{completely}} asynchronous, allowing {{a mixture of}} fast and slow devices. It allows the overlapping of arbitration (selection of the next <b>bus</b> <b>master)</b> while the current <b>bus</b> <b>master</b> is still performing data transfers. The 18 address lines allow the addressing of a maximum of 256 kiB. Typically, the top 8 kiBw is reserved for the registers of the memory-mapped I/O devices used in the PDP-11 architecture.|$|E
50|$|However, some non-ISA bus cycles were added. Cycles {{that were}} added to improve the {{performance}} of devices beside firmware hubs include LPC-style one-, two-, and four-byte <b>bus</b> <b>master</b> memory cycles; one-, two-, and four-byte <b>bus</b> <b>master</b> I/O cycles; and 32-bit third-party DMA which conforms {{to all of the}} restrictions of ISA-style third-party DMA {{except for the fact that}} it can do 32-bit transfers. Any device that is allowed to accept traditional ISA-style DMA is also allowed to use this 32-bit ISA-style DMA. The host could initiate 32-bit ISA-style DMA cycles, while peripherals could initiate <b>bus</b> <b>master</b> cycles. Firmware hubs consumed firmware cycles that were designed just for firmware hubs so that firmware addresses and normal memory-mapped I/O addresses could overlap without conflict. Firmware memory reads could read 1, 2, 4, 16, or 128 bytes at once. Firmware memory writes could write one, two or four bytes at once.|$|E
5000|$|X-Raider 7.1Based on the CMI 8768 chipset. Launched in July 2009, the X-Raider is a 24-bit, 96 kHz PCI 2.2 {{compliant}} card, supporting <b>bus</b> <b>mastering</b> modes.|$|R
5000|$|<b>Bus</b> <b>mastering</b> for a 6502-style system bus; CPU and VIC-II {{accessing}} the bus during alternating half-clock cycles (the VIC-II will halt the CPU when it needs extra cycles) ...|$|R
50|$|While <b>bus</b> <b>mastering</b> {{theoretically}} {{allows one}} peripheral device to directly communicate with another, in practice almost all peripherals <b>master</b> the <b>bus</b> exclusively to perform DMA to main memory.|$|R
5000|$|... rev 11 (A4000T and aftermarket) {{provides}} DMA {{support for}} a single <b>bus</b> <b>master.</b> A 16 MHz A3000 requires a 25 MHz upgrade for Buster 11 to work.|$|E
50|$|While both {{technologies}} provide similar end results, there are fundamental differences between USB and FireWire. USB requires {{the presence of}} a <b>bus</b> <b>master,</b> typically a PC, which connects point to point with the USB slave. This allows for simpler (and lower-cost) peripherals, at the cost of lowered functionality of the bus. Intelligent hubs are required to connect multiple USB devices to a single USB <b>bus</b> <b>master.</b> By contrast, FireWire is essentially a peer-to-peer network (where any device may serve as the host or client), allowing multiple devices to be connected on one bus.|$|E
50|$|This {{standard}} supports standard memory cycles with {{lengths of}} 1 byte to 4 kilobytes of data, short memory cycles with lengths of 1, 2, or 4 bytes that have much less overhead compared to standard memory cycles, and I/O cycles with lengths of 1, 2, or 4 bytes of data which are low overhead as well. This significantly reduces overhead {{compared to the}} LPC bus, where all cycles except for the 128-byte firmware hub read cycle spends more than one-half {{of all of the}} bus's throughput and time in overhead. The standard memory cycle allows a length of anywhere from 1 byte to 4 kilobytes in order to allow its larger overhead to be amortised over a large transaction. eSPI slaves are allowed to initiate <b>bus</b> <b>master</b> versions of all of the memory cycles. <b>Bus</b> <b>master</b> I/O cycles, which were introduced by the LPC bus specification, and ISA-style DMA including the 32-bit variant introduced by the LPC bus specification, are not present in eSPI. Therefore, <b>bus</b> <b>master</b> memory cycles are the only allowed DMA in this standard.|$|E
50|$|The {{number of}} Attention Requests {{reflects}} that the STEbus aims to be simple. Single-master systems are the norm, but these signals allow systems to have secondary <b>bus</b> <b>masters</b> if needed.|$|R
50|$|The ZV port is {{a direct}} {{connection}} between the PC card slot and VGA controller. Video data is transferred in real time without any buffering, removing the need for <b>bus</b> <b>mastering</b> or arbitration.|$|R
5000|$|IOMD2, the new IO chip had {{to support}} {{multiple}} processors, included message passing and multiple <b>bus</b> <b>mastering,</b> and was manufactured using a 0.35 µm process. Throughout development and prototyping the IOMD2 were developed {{on a large}} FPGA.|$|R
50|$|A bus arbiter is {{a device}} {{used in a}} multi-master bus system to decide which <b>bus</b> <b>master</b> {{will be allowed to}} control the bus for each bus cycle.The most common kind of bus arbiter is the memory arbiter in a system bus system.|$|E
50|$|The PCI bus arbiter {{performs}} {{bus arbitration}} among multiple masters on the PCI bus. Any number of bus masters can reside on the PCI bus, {{as well as}} requests for the bus. One pair of request and grant signals is dedicated to each <b>bus</b> <b>master.</b>|$|E
5000|$|LDRQ#: DMA/bus master request. This is an {{output from}} {{a device that}} wants to perform direct memory access, either via the Intel 8237 {{compatible}} DMA controller, or the LPC-specific <b>bus</b> <b>master</b> protocol. The host must provide one corresponding input pin per device that needs it (minimum two).|$|E
50|$|BUSRQ/ and BUSAK/: Bus Requests and Bus Acknowledge. Optional, used by multi-master systems.The {{number of}} Attention Requests {{reflects}} that the ECB-bus aims to be simple. Single-master systems are the norm, but these signals allow systems to have secondary <b>bus</b> <b>masters</b> if needed.|$|R
25|$|Channel {{controllers}} {{are making}} a comeback {{in the form of}} <b>bus</b> <b>mastering</b> peripheral devices, such as PCI direct memory access (DMA) devices. The rationale for these devices is the same as for the original channel controllers, namely off-loading transfer, interrupts, and context switching from the main CPU.|$|R
5000|$|... 4 <b>Bus</b> <b>Masters</b> the PC/104-Plus and PCI-104 {{specifications}} did not originally {{allow for}} 4 sets of Grant/Request pairs on the PCI bus. This was resolved in newer {{revisions of the}} specification. However, older boards may have issue using DMA in the 3rd or 4th PCI slot position.|$|R
50|$|Nios II {{uses the}} Avalon switch fabric as the {{interface}} to its embedded peripherals. Compared {{to a traditional}} bus in a processor-based system, which lets only one <b>bus</b> <b>master</b> access the bus at a time, the Avalon switch fabric, using a slave-side arbitration scheme, lets multiple masters operate simultaneously.|$|E
50|$|A multi-master bus is a {{computer}} bus {{in which there are}} multiple <b>bus</b> <b>master</b> nodes present on the bus.This is used when multiple nodes on the bus must initiate transfer.For example, direct memory access (DMA) is used to transfer data between peripherals and memory without the need to use the central processing unit (CPU).|$|E
50|$|To begin communication, the <b>bus</b> <b>master</b> configures the clock, using a {{frequency}} {{supported by the}} slave device, typically up to a few MHz. The master then selects the slave device with a logic level 0 on the select line. If a waiting period is required, such as for an analog-to-digital conversion, the master must wait for at least {{that period of time}} before issuing clock cycles.|$|E
40|$|With the {{advancement}} of Network-on-chip (NoC), fast and fair arbiter as the basic building block for high speed switches/routers gained attention in recent years. In this paper I propose the fair chance round robin arbiter (FCRRA), a high speed, low power and area efficient RRA for NoC applications. The FCRRAG tool propose in this paper can generate a design for bus arbiter, which can handle {{the exact number of}} <b>bus</b> <b>masters</b> for both on chip and off chip buses within one short cycle. General Terms i. Arbiters are electronic devices that allocate access to shared resources. ii. iii. Virtual Output Queues (VOQs) [4]: there are VOQs in a switch to remove possible output port contention (Head of Line (HOL) blocking). Bus Arbiter resolves bus conflicts when multiple <b>bus</b> <b>masters</b> request a <b>bus</b> in the same cycle. [4...|$|R
5000|$|In computing, <b>bus</b> <b>mastering</b> is {{a feature}} {{supported}} by many bus architectures that enables a device {{connected to the}} bus to initiate transactions. It is {{also referred to as}} first-party DMA, in contrast with [...] "third-party DMA" [...] where a system DMA controller (also known as peripheral processor, I/O processor, or channel) actually does the transfer.|$|R
50|$|Although the MCA bus had {{a slight}} {{performance}} advantage over EISA (bus speed of 10 MHz, compared to 8.33 MHz), EISA contained {{almost all of the}} technological benefits that MCA boasted, including <b>bus</b> <b>mastering,</b> burst mode, software configurable resources, and 32-bit data/address buses. These brought EISA nearly to par with MCA from a performance standpoint, and EISA easily defeated MCA in industry support.|$|R
