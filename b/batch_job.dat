153|418|Public
25|$|IBM JCL uses {{a double}} slash to start each {{line in a}} <b>batch</b> <b>job</b> stream except for /* and /&.|$|E
5000|$|The nodes {{allocated}} to a <b>batch</b> <b>job</b> are used exclusively for that <b>batch</b> <b>job.</b>|$|E
5000|$|When a new <b>batch</b> <b>job</b> is submitted, the {{scheduler}} searches available nodes (Step.1). After the {{nodes and}} the estimated start time are {{allocated to the}} <b>batch</b> <b>job,</b> stage-in process starts (Step.2). The job waits until the estimated start time after stage-in process is finished. If the scheduler find the earlier start time than the estimated start time, it allocates the new start time to the <b>batch</b> <b>job.</b> This process is called [...] "Job Escalation" [...] (Step.3). When the estimated start time has arrived, the scheduler executes the <b>batch</b> <b>job</b> (Step.4). The scheduler terminates the <b>batch</b> <b>job</b> and starts stage-out process after the job execution is finished or the declared elapsed time is over (Step.5).To execute the <b>batch</b> <b>job,</b> the user logs into the login-server and submits the batch script to ES. And the user waits until the job execution is done. During that time, the user can see {{the state of the}} <b>batch</b> <b>job</b> using the conventional web browser or user commands. The node scheduling, the file staging and other processing are automatically processed by the system according to the batch script.|$|E
25|$|<b>Batch</b> <b>jobs</b> are {{processed}} {{in the background}} on free computing power as it becomes available. Thus, <b>batch</b> <b>jobs</b> will often take longer than individually submitted jobs, but this is necessary to allow a fair distribution of computing resources to all Phyre2 users.|$|R
5000|$|...SINK* {{standard}} output (normally a terminal or for <b>batch</b> <b>jobs,</b> a printer); ...|$|R
5000|$|Batch queue - for schedulers {{that plan}} the {{execution}} of <b>batch</b> <b>jobs</b> ...|$|R
50|$|Usually a <b>batch</b> <b>job</b> {{or group}} of related batch jobs (schedule/stream) runs to {{accomplish}} one or more business functions. These batch jobs run unattended and normally complete without any errors or issues. However, sometimes the <b>batch</b> <b>job</b> can have a break/interruption/abend/abort. There could be several reasons why a job could abend.|$|E
50|$|ISPF {{can also}} be run from a z/OS <b>batch</b> <b>job.</b>|$|E
5000|$|... "History-Based <b>Batch</b> <b>Job</b> Scheduling on Workstation Clusters", Rothauser, Wespi, 1997 ...|$|E
5000|$|A {{straightforward}} {{command language}} {{that is the same}} for both terminal and <b>batch</b> <b>jobs.</b>|$|R
5000|$|...JOBQ: Job queue (used {{to queue}} up <b>batch</b> <b>jobs</b> to run in a subsystem).|$|R
5000|$|...SOURCE* {{standard}} input (normally either a terminal or for <b>batch</b> <b>jobs,</b> the input queue); ...|$|R
5000|$|An IBM 1402 card reader/punch {{was used}} for <b>batch</b> <b>job</b> submission.|$|E
5000|$|... "History-Based <b>Batch</b> <b>Job</b> Scheduling on Workstation Clusters", Andreas Wespi, Ernst Rothauser ...|$|E
5000|$|Can be run as <b>batch</b> <b>job</b> without GUI for {{converting}} reference files.|$|E
50|$|Renato “Butch” Landingin, {{co-founder and}} chief {{technology}} officer, {{is the author}} of an open source application called Squishdot, written in Python and Zope. Squishdot is a news and publishing content management system used by KDE Dot News. He also authored the <b>Batch</b> <b>Jobs</b> Management Console (Batman-Con), a web-based application written in Grails (framework) to monitor batch runs of Spring Batch-based <b>batch</b> <b>jobs.</b>|$|R
50|$|<b>Batch</b> <b>jobs</b> are {{scheduled}} and run across different operating system platforms and business application environments.|$|R
50|$|Portable Batch System, a {{computer}} software job scheduler that allocates network resources to <b>batch</b> <b>jobs.</b>|$|R
50|$|Although TSO {{allows a}} user {{to do more}} than a locked-down WYLBUR system did, it is {{possible}} to write WYLBUR Exec scripts that execute batch jobs to perform functions that ordinarily would have required a TSO account, filling a <b>batch</b> <b>job</b> skeleton out with parameters, submitting the <b>batch</b> <b>job,</b> retrieving the output and displaying it on the screen.|$|E
5000|$|The <b>batch</b> <b>job</b> is {{scheduled}} based on elapsed time instead of CPU time.|$|E
50|$|IBM JCL uses {{a double}} slash to start each {{line in a}} <b>batch</b> <b>job</b> stream except for /* and /&.|$|E
5000|$|In {{addition}} to the online functions CICS has several support programs that run as <b>batch</b> <b>jobs.</b>|$|R
40|$|Abstract Opportunistic {{scheduling}} utilizes idle workstations to ex-ecute <b>batch</b> <b>jobs.</b> Other than {{ensuring that}} each batch user receives a fair allocation of service, no work addressingopportunistic scheduling of <b>batch</b> <b>jobs</b> has been done. In this {{paper we propose}} two simple scheduling policies to beused {{in conjunction with the}} Condor Up-Down scheduling algorithm. We show that an order of magnitude reductionin mean job slowdown can be achieved by rotating a user's <b>batch</b> <b>jobs</b> within their queue. Furthermore, this im-proved slowdown can be achieved without a significant loss of throughput. The reduced slowdowns result in a more in-teractive nature of the system thus increasing its appeal. Our proposed modifications to the algorithms would requirevery little effort to implement...|$|R
5000|$|Batch {{engine for}} {{controlling}} large file transfers, <b>batch</b> <b>jobs,</b> execution of external scripts and other non-messaging based tasks.|$|R
5000|$|BatchPipes is a <b>batch</b> <b>job</b> {{processing}} utility {{designed for}} the MVS/ESA operating system, and all later incarnations - OS/390 and z/OS.|$|E
50|$|On IBM mainframes, BatchPipes is a <b>batch</b> <b>job</b> {{processing}} utility {{which runs}} under the MVS/ESA operating system and later versions - OS/390 and z/OS.|$|E
5000|$|... {{set up a}} {{high-performance}} computing software stack, including software for <b>batch</b> <b>job</b> submission, parallel libraries, and other software that is useful on a cluster ...|$|E
40|$|Opportunistic {{scheduling}} utilizes idle workstations {{to execute}} <b>batch</b> <b>jobs.</b> Other than ensuring that each batch user receives a fair allocation of service, no work addressing opportunistic scheduling of <b>batch</b> <b>jobs</b> has been done. In this {{paper we propose}} two simple scheduling policies {{to be used in}} conjunction with the Condor Up-Down scheduling algorithm. We show that an order of magnitude reduction in mean job slowdown can be achieved by rotating a user's <b>batch</b> <b>jobs</b> within their queue. Furthermore, this improved slowdown can be achieved without a signi cant loss of throughput. The reduced slowdowns result in a more interactive nature of the system thus increasing its appeal. Our proposed modifications to the algorithms would require very little effort to implement...|$|R
50|$|Spring Batch {{provides}} reusable {{functions that}} are essential in processing large volumes of records, including logging/tracing, transaction management, job processing statistics, job restart, skip, and resource management. It also provides more advanced technical services and features that will enable extremely high-volume and high performance <b>batch</b> <b>jobs</b> though optimization and partitioning techniques. Simple as well as complex, high-volume <b>batch</b> <b>jobs</b> can leverage the framework in a highly scalable manner to process significant volumes of information.|$|R
5000|$|... forfiles [...] - [...] Selects a file (or set of files) and executes {{a command}} on that file. This is helpful for <b>batch</b> <b>jobs.</b>|$|R
50|$|Rollin/rollout {{allows the}} {{computer}} operator to interrupt a running batch program, execute an inquiry program, and then restart the <b>batch</b> <b>job</b> {{where it was}} interrupted.|$|E
50|$|HPC Profile Basic:This {{describes}} how JSDL, Basic Execution Service (BES) and existing web services security mechanisms {{can be used}} interoperable to address <b>batch</b> <b>job</b> scheduling use case.|$|E
50|$|Job Control Language (JCL) is a {{name for}} {{scripting}} languages used on IBM mainframe operating systems to instruct the system on {{how to run a}} <b>batch</b> <b>job</b> or start a subsystem.|$|E
5000|$|The same JCL (Job Control Language, for {{initiating}} <b>batch</b> <b>jobs),</b> {{which was}} more flexible and easier to use, though more complex, than that of DOS/360.|$|R
40|$|A {{resource}} management system can effectively shorten the runtime of <b>batch</b> <b>jobs</b> {{in a network}} of workstations (NOW). This is achieved with load balancing mechanisms to distribute the load equally among the hosts. To avoid conflicts between interactive users and <b>batch</b> <b>jobs,</b> a {{resource management}} system {{must be able to}} migrate <b>batch</b> <b>jobs</b> from an interactive host to an idle host. Common resource management systems offer process migration only for sequential jobs but not for parallel jobs. Within the SEMPA project a resource management system with batch queuing functionalities including checkpointing and migration is designed and implemented. We focus on PVM applications because PVM offers dynamic task management and an interface to resource management systems 1. 1 Introduction Parallel scientific computing applications, e. g. in computational fluid dynamics, require a large amount of CPU time and memory. Therefore, they are often run on massively parallel systems. However, networks of wo [...] ...|$|R
50|$|CMS {{provides}} users an environment for running applications or <b>batch</b> <b>jobs,</b> managing data files, creating and debugging applications, doing cross-platform development, and communicating with other systems or users.|$|R
