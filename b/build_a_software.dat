104|10000|Public
5000|$|CyberSKA: A Canadian {{initiative}} to <b>build</b> <b>a</b> <b>software</b> platform {{that can handle}} data sets {{from one of the}} world's biggest science initiatives - the Square Kilometre Array radio telescope.|$|E
50|$|Soon {{after taking}} office, Olsen led {{negotiations}} with Motorola to <b>build</b> <b>a</b> <b>software</b> centre in Adelaide. Motorola decided {{to open the}} centre in April after winning a number of incentives, including becoming the supplier for a government radio network, and a contract was signed in June. During a September Question Time, Olsen stated {{that there had been}} no discussions with Motorola about the radio contract. This statement would ultimately prove to be his undoing.|$|E
50|$|There {{are many}} uses for a {{reference}} model. One use {{is to create}} standards for both the objects that inhabit the model and their relationships to one another. By creating standards, the work of engineers and developers who need to create objects that behave according to the standard is made easier. Software can be written that meets a standard, and developers can copy that software to use it again, or <b>build</b> <b>a</b> <b>software</b> factory that generates that code. When done well, a standard can make use of design patterns that support key qualities of software, {{such as the ability}} to extend the software in an inexpensive way.|$|E
30|$|The {{model is}} based on a graph {{structure}} representing scenarios of interest in terms of facts, processes, and technologies. Moreover, it adopts an algorithm specifically proposed to find a minimum cost composition of processes. The resulting composition <b>builds</b> <b>a</b> <b>software</b> architecture satisfying the input goal and, at the same time, defines the operational requirements translating the goal.|$|R
40|$|This thesis makes a {{valuable}} {{contribution to the}} design of low-cost Global Navigation Satellite System receivers. The research <b>builds</b> <b>a</b> <b>software</b> defined radio that can acquire, track and decode the data messages from Japanese navigation satellites to improve the accuracy of GPS receivers from several meters down to several decimeters. This improvement can benefit automotive vehicle users, driverless vehicles and industry robots...|$|R
5000|$|The {{decision}} to <b>build</b> <b>a</b> custom <b>software</b> or {{go for a}} COTS implementation would usually rest on {{one or more of}} the following factors: ...|$|R
50|$|Pristine Sources is a {{software}} management concept coined by the developers of the short-lived Bogus Linux distribution and popularized by Marc Ewing, co-founder of Red Hat Inc, after he adopted it and RPM Package Manager as a development philosophy for Red Hat Linux. It was {{the concept that}} enabled Red Hat to build Linux distributions faster and more reliably than had been possible previously. Briefly, the problem with building an operating systems out of the myriad pieces of open source (or free software) components available from teams across the Internet {{was that there were}} many of these components and they all upgraded on different schedules at different times. Ewing's insight was to recognize that he could not take responsibility for these components. He and Erik Troan, wanted to <b>build</b> <b>a</b> <b>software</b> package management system, RPM, that allowed the team at Red Hat to avoid changing any of the source code of the software components they needed to use to build their Red Hat Linux operating system.|$|E
50|$|Milestone Systems {{was founded}} in 1998 to <b>build</b> <b>a</b> <b>software</b> {{development}} company that could improve business through managing and distributing digital video data regardless of time or location. Co-founders Henrik Friborg and John Blem saw that their experience in developing IP technology for real-time data systems in the European financial sector could also {{be applied to the}} handling of video images. With that mindset the first Milestone VMS is launched in 1999. At that time, digital video technology was not in use in the security surveillance industry. The security market back then was mainly operating with proprietary analogue equipment, and the digital share of sales grew slowly at first. This gradual pace allowed Milestone to grow organically, without the need for external funding. From the beginning and throughout its maturing phases, the company has stayed independent and entirely self-funded with very healthy growth rates. To fuel the commercial development of the organization, more like-minded professionals were hired. CEO Lars Thinggaard and a sales team of account managers, top software system architects, expert support staff, marketing and technical documentation talent were included in Milestone team.|$|E
40|$| 3) <b>Build</b> <b>a</b> <b>software</b> {{platform}} that will allows tools ranging from sequence|$|E
50|$|Real-time {{software}} may use {{one or more}} of the following: synchronous programming languages, real-time operating systems, and real-time networks, each {{of which}} provide essential frameworks on which to <b>build</b> <b>a</b> real-time <b>software</b> application.|$|R
40|$|This paper {{presents}} an approach at improving Product Lifecycle Management (PLM) in large scale multinational manufacturing companies using Ford Motor Company {{as a case}} study. The solution <b>builds</b> <b>a</b> <b>software</b> layer around <b>an</b> existing PLM infrastructure that uses Semantic Web Services (SWSs) to enable {{a new generation of}} PLM. This new PLM is then integrated into a digital ecosystem for factory automation using Ford Powertrain as a case study. The work illustrates how a Digital Business Ecosystem (DBE) can spur innovation and evolution in applications around this new type of PLM...|$|R
50|$|In <b>software</b> development, <b>a</b> neutral <b>build</b> is <b>a</b> <b>software</b> <b>build</b> that {{reflects}} {{the current state of}} the source code checked into the source code version control system by the developers, and done in a neutral environment (an environment not used for development).|$|R
40|$| 3) <b>Build</b> <b>a</b> <b>software</b> {{platform}} that will allows tools ranging from sequence analysis to text and data mining {{to be integrated}} in various research environments so as to answer specific needs of academic and industrial users. |$|E
40|$|Research into {{software}} development {{is required to}} reduce its production cost and to improve its quality. Modern software systems, such as the embedded software required for NASA's space station initiative, stretch current software engineering techniques. The requirements to build large, reliable, and maintainable software systems increases with time. Much theoretical and practical research is in progress to improve software engineering techniques. One such technique is to <b>build</b> <b>a</b> <b>software</b> system or environment which directly supports the software engineering process, i. e., the SAGA project, comprising the research necessary to design and <b>build</b> <b>a</b> <b>software</b> development which automates the software engineering process. Progress under SAGA is described...|$|E
40|$|Software process {{improvement}} requires high level formalisms for describing project-specific, organizational and quality aspects. These formalisms must be convenient {{not only for}} capture but also for execution purposes. In order to fulfill these requirements and to <b>build</b> <b>a</b> <b>software</b> process environment capable of supporting engineering tasks we have designed a new graphical, but still enactable, formalism called APEL (for Abstract Process Engine Language) ...|$|E
50|$|A {{smoke test}} {{may be used}} as an {{acceptance}} test prior to introducing <b>a</b> <b>build</b> of <b>software</b> to the main testing process.|$|R
40|$|In a {{networked}} {{environment where}} computers {{are required to}} collectively work together, it is frequently the case that a single compromised machine can compromise the functionality of the entire system. In such an environment, standard protocols such as password authentication may not provide the security level we desire in that a computer attempting {{to gain access to}} the network cannot prove that it has not been compromised. The Trusted Computing Group (TCG) provides a specification for using a Trusted Platform Module (TPM) to <b>build</b> <b>a</b> trusted <b>software</b> stack which can be verified by a remote machine. As <b>a</b> proof-of-concept, we <b>build</b> <b>a</b> rudimentary trusted <b>software</b> stack, verify that its validation mechanisms work and how long they take, and measure how much time is added to the boot process by the TPMâ€™s added code. 1...|$|R
40|$|Abstract. This paper {{focus on}} concern {{interactions}} and tradeoffs {{in the context}} of <b>an</b> approach to <b>build</b> <b>an</b> aspect-oriented <b>software</b> architecture from <b>an</b> aspectoriented requirements specification. This approach, the Requirements Engineering to Software Architecture Framework, is composed of several activities, where the first two address the problem domain and constitute the main body for this paper. These two activities will be described and exemplified by means of a case study. ...|$|R
40|$|In {{this work}} we present an {{application}} for observing and recording data about movements of a human eye when looking at a computer screen. We use two commercially available devices: I 4 Control by Medicton Group Ltd. and TrackIR 4 by NaturalPoint. We <b>build</b> <b>a</b> <b>software</b> package which interfaces with the SpaNav system for cognitive research. We also provide an extensible framework for creating other eye tracking applications...|$|E
40|$|In {{recent years}} {{there has been}} an {{increased}} growth of interest in object oriented programming which is a new approach to software construction having wide application. The possibility of using object oriented programming to <b>build</b> <b>a</b> <b>software</b> package that will assist the nuclear reactor operator in diagnosing any faults or alarms in the Loss of Fluid Test (LOFT), a small scale pressurised water reactor, reactor is investigated in this work...|$|E
40|$|We have {{implemented}} an application-independent collaboration manager, called Collagen, {{based on the}} SharedPlan theory of discourse, {{and used it to}} <b>build</b> <b>a</b> <b>software</b> interface agent for a simple air travel application. The software agent provides intelligent, mixed initiative assistance without requiring natural language understanding. A key benefit of the collaboration manager is the automatic construction of an interaction history which is hierarchically structured according to the user's and agent's goals and intentions. ...|$|E
40|$|Abstract. With {{the widely}} used of {{software}} technology, how to <b>build</b> <b>a</b> trusted <b>software</b> system {{has become a}} hot topic in the academic field. However, to the multi-channel and multi-option of the realization for software systems, how to optimization and selection the requirement has become an important issue. Based on the AGORA extended model, this paper proposes a requirement optimization and selection method with some indicators, such as development costs, correctness and consistency...|$|R
40|$|International audienceThis paper {{deals with}} the fast {{modeling}} and fast multiobjective optimal design of mechatronic systems. To solve this problem, the object-oriented modeling language Modelica and object-oriented programming language Java {{have been used to}} <b>build</b> <b>an</b> innovate <b>software</b> platform. This platform has been designed to allow multidisciplinary design optimization of complex systems using a free platform. This platform only contains open-source tools and frameworks and was validated on an optimization application: the stabilization of a quarter-car system...|$|R
50|$|In <b>software</b> development, <b>a</b> {{codebase}} (or code base) {{refers to}} a whole collection of source code {{that is used to}} <b>build</b> <b>a</b> particular <b>software</b> system, application, or <b>software</b> component. Typically, <b>a</b> codebase includes only human-written source code files; thus, a codebase usually does not include source code files generated by tools (generated files) or binary library files (object files), as they can be built from the human-written source code. However, it generally does include configuration and property files, as they are the data necessary for the build.|$|R
40|$|In {{this thesis}} an {{overlook}} {{of the software}} process for a car has been made. Two design choices have been proposed to enhance the scalability and improve {{the time it takes}} to <b>build</b> <b>a</b> <b>software</b> application. In these design choices, Jenkins has been used as a tool to make the implementations possible and to distribute work over different computers. Measurements show that distributing the workload on multiple computers would improve the utilization and reduce the time for building software...|$|E
40|$|Abstract. According to {{the problem}} that the {{accurate}} and efficiency of the software model, this paper proposes a new method to describe the software behavior. The method using program slicing to dynamic analysis the system calls of the running software, help the system to capture the key system calls. And then <b>build</b> <b>a</b> <b>software</b> model combining import system calls and its arguments. Experiments shows that it can construct the software model with high accuracy and can efficient detect the abnormal behavior...|$|E
40|$|The {{current state}} of the World Wide Web demands website designs that engage {{consumers}} in order to allow them to consume services or generate leads to maximize revenue. This paper describes a software quality factor to measure the success of websites by analyzing web design structure and not relying only on websites traffic data. It is also documents the requirements and architecture to <b>build</b> <b>a</b> <b>software</b> tool that measures criteria for determining Engagibility. A new set of social criteria to be measured for current website philosophy is also proposed...|$|E
50|$|Also in 2012, {{they were}} {{commissioned}} by Aphex Twin to <b>build</b> <b>a</b> piece of <b>software</b> for his Remote Orchestra project, {{in which he}} controlled a 32 piece orchestra in realtime by sending frequencies {{to each of the}} players on headphones. The work was used in a one-off performance at London's Barbican Hall.|$|R
40|$|This paper {{presents}} {{the integration of}} approaches for process design and process implementation, namely transforming high-level MVP-L process models into low-level Process WEAVER scripts and cooperative procedures. The goals {{of the study were}} to compare approaches for process definition, to offer an integrated approach for process design and implementation, and to <b>build</b> <b>a</b> prototype <b>software</b> engineering environment for experimental purposes. On top of Process WEAVER a layer could be defined to emulate the semantic of MVP-L. The study shows that approaches developed independently can be integrated to offer more sophisticated support to the process engineer...|$|R
40|$|This paper {{proposes a}} {{component}} based configuration software platform model {{that aims to}} develop the application system meeting different demands and <b>build</b> <b>a</b> high-quality <b>software</b> integration system. The model separates system logic description from system implementation and reinforces logic extensibility and reusability using the configuration idea of industrial controlling automation for reference {{on the base of}} traditional software developing method. From the effects of the application for the real projects, we can see that the method can reduce the system implementation cost and reinforce the software credibility with better maneuverability and reusability. </p...|$|R
40|$|Stemming is {{the removal}} of affixes (prefixes and suffixes) in a word in order to {{generate}} its root word. The objectives of this research were to <b>build</b> <b>a</b> <b>software</b> stemmer that can stem any given Malay word, {{and to develop a}} standard stemming algorithm for the Malay language. The Malay language was chosen because a complete stemmer for this language is unavailable. Stemmers have a wide variety of applications, such as in information retrieval and machine translation. It is expected that when this system is fully developed, it will benefit users and customers tremendously...|$|E
40|$|Abstract â€” In a {{previous}} paper the authors argue {{the case for}} incorporating concepts from innate immunity into Artificial Immune Systems and present an outline for a conceptual framework for such systems. A number of key general properties observed in the biological innate and adaptive immune systems were highlighted, and how such properties might be instantiated in artificial systems was discussed in detail. The next logical step is to take these ideas and <b>build</b> <b>a</b> <b>software</b> system with these properties that can be implemented and experimentally evaluated. This paper reports {{on the results of}} this step. I...|$|E
40|$|Our {{goal is to}} <b>build</b> <b>a</b> <b>software</b> able {{to solve}} {{problems}} in non linear optimization. A central point is selection of the algorithm, {{which is based on}} Augmented Lagrangian Method combined with quasi-Newton methods (BFGS, L-BFGS). The article expains how software is structured, the steps of its construction and the mode of use; furthermore, results ansd numerical tests are analyzed. OPTIMIZA 3. 0 was built on Borland Delphi 3. 0 and runs on Windows, its capacity on the number of variables and constraints are ontly limited ont he memory machine to be used. keywords: Nonlinear optimization, constrained optimization, mathematical programming,Â  nonlinear porgramming, optimization...|$|E
40|$|The {{maintenance}} of <b>a</b> <b>software</b> system still represents the most costly part in its development lifecycle. To reduce cost while doing maintenance, developers {{must be able}} to understand the architecture of the existing code base. However, applying detailed software architecture recovery to <b>a</b> large <b>software</b> system is expensive and time consuming. It is instead usually advantageous to perform domain-specific software architecture recovery [...] - with a focus and a directed set of goals for a particular application domain, which encompasses the knowledge used to <b>build</b> <b>a</b> family of <b>software</b> systems...|$|R
40|$|This article {{describes}} the developments {{in the field of}} emerging new military radio systems to be deployed in Finland. Finnish software radio programme is the tool to deploy these new systems. The demonstrator platform, that is being <b>build,</b> is <b>a</b> <b>software</b> defined radio wherein the developed wideband applications can be demonstrated. The systems that will be deployed on the demonstrator platform-Tactical Radio Communication System (TRCS) and National Tactical Positioning System (NTPS) - are introduced in this paper. Brief introduction of the adaptive antenna system to be applied in the demonstrator is also given. 1...|$|R
40|$|In {{this paper}} {{we will give}} an {{overview}} of our crossplatform software framework {{for the development of}} medical simulations in the field of surgical planning. We use state-of-the-art technologies, like XML, CORBA and a scalable, component based architecture to <b>build</b> <b>a</b> highly extensible <b>software</b> development platform which provides the researcher with high-level services to build new simulation applications more easily...|$|R
