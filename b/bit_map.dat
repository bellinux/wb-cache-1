55|237|Public
5000|$|The header {{building}} {{can become}} a very easy operation, overwrite a <b>bit</b> <b>map.</b>|$|E
5000|$|Method for {{converting}} a <b>bit</b> <b>map</b> of {{an image}} to a run length or run. US Pat. 4646356 ...|$|E
50|$|Not every {{driver and}} server needs to {{communicate}} with every other driver and server. Accordingly, a per-process <b>bit</b> <b>map</b> determines which destinations each process may send to.|$|E
50|$|Super <b>Bit</b> <b>Mapping</b> (SBM) is a noise shaping process, {{developed}} by Sony for CD mastering.|$|R
5000|$|... {{availability}} of advanced data structures: arrays, queues (single or double), stacks, <b>bit</b> <b>maps,</b> sets, AVL trees.|$|R
3000|$|... {{taken from}} the {{alphabet}} of an arbitrary <b>bit</b> <b>mapping</b> scheme applied after channel encoding and bit interleaving.|$|R
50|$|This profile {{extends the}} full DFXP and with three SMPTE-specific {{elements}} aimed at legacy formats. Interoperability with pre-existing and regionally-specific formats (such as CEA-708, CEA-608, DVB Subtitles, andWST (World System Teletext)) {{is provided by}} means of tunneling data or <b>bit</b> <b>map</b> images and adding necessary metadata.|$|E
50|$|Device drivers obtain kernel {{services}} (such as copying data to users' address spaces) {{by making}} kernel calls. The MINIX 3 kernel has a <b>bit</b> <b>map</b> for each driver specifying which calls it is authorized to make. In monolithic kernels, every driver can call every kernel function, authorized or not.|$|E
50|$|Having enough {{memory to}} store the <b>bit</b> <b>map</b> and since Galaksija's own CPU {{directly}} drove the video signal, video generation hardware {{did not have to}} change significantly. Video generation routine was modified to take the raw video data from the new video memory instead of relying on character set ROMs. Some games for original Galaksija used to do a similar trick, albeit in a limited fashion due to restrictive memory capacity.|$|E
3000|$|... bits. There {{should be}} a bit-mapping. The only subset, which {{contains}} the all-zero bit-vector, is used for <b>bit</b> <b>mapping</b> from [...]...|$|R
50|$|Enterprise {{has five}} {{graphics}} modes: 40- and 80-column text modes, Lo-Res and Hi-Res <b>bit</b> <b>mapped</b> graphics, and attribute graphics. <b>Bit</b> <b>mapped</b> graphics modes allow selection between displays of 2, 4,16 or 256 colours, but horizontal resolution decreases as colour depth increases. Interlaced and non-interlaced modes are available. The maximum resolution is 640×512 pixels interlaced, or 640×256 pixels non-interlaced. These resolutions permit only a 2-colour display. A 256-colour display has a maximum resolution of 80×256. The attribute graphics mode provides a 320×256 pixel resolution with 16 colours, selectable from {{a palette of}} 256.|$|R
3000|$|... [...]. Here {{superscript}} 0 {{points out}} that these symbol estimates are obtained before coded feedback. This idea was presented in [4], and we use it before the first soft symbols to <b>bits</b> <b>mapping.</b>|$|R
5000|$|The IBM 709 has a 38-bit accumulator, a 36-bit {{multiplier}} quotient register, {{and three}} 15-bit index registers whose contents are subtracted {{from the base}} address instead of being added to it. All three index registers can participate in an instruction: the 3-bit tag field in the instruction is a <b>bit</b> <b>map</b> specifying which of the registers participate in the operation, however if more than one index register is specified, their contents are combined by a logical or operation, not addition.p. 12 ...|$|E
50|$|A {{bit array}} (also known as <b>bit</b> <b>map</b> , bit set, bit string, or bit vector) is an array data {{structure}} that compactly stores bits. It {{can be used}} to implement a simple set data structure. A bit array is effective at exploiting bit-level parallelism in hardware to perform operations quickly. A typical bit array stores kw bits, where w is the number of bits in the unit of storage, such as a byte or word, and k is some nonnegative integer. If w does not divide the number of bits to be stored, some space is wasted due to internal fragmentation.|$|E
5000|$|... 10 GRAPHIC 3,1 :REM MULTICOLOR GRAPHIC MODE20 A=PEEK(1): B=PEEK(216) :REM SAVE THESE30 POKE 216,255 :REM TELL IRQ TO GIVE US VIC CONTROL40 POKE 1, A AND 252 :REM SELECT PROCESSOR NYBBLE BANK50 BLOAD [...] "ERINLOG.BMC" [...] :REM LOAD <b>BIT</b> <b>MAP</b> AT $200060 BLOAD [...] "ERINLOG.VMC" [...] :REM LOAD COLORS 01 AND 10 AT $1C0070 BLOAD [...] "ERINLOG.CMC" [...] :REM LOAD COLORS 11 AT $D80080 POKE 1,A :REM RESTORE SYSTEM NYBBLE BANK90 POKE 216,B :REM RESTORE SYSTEM VIC CONTROL100 K$ = [...] ""110 GET K$ :REM WAIT FOR A KEYPRESS120 IF K$ = [...] "" [...] THEN 110130 GRAPHIC 0,1 :REM TEXT MODE140 END ...|$|E
5000|$|... native {{support for}} {{high-level}} data structures: arrays, queues (single or double), stacks, <b>bit</b> <b>maps,</b> sets, AVL trees are already available in Proteus {{and do not}} require additional code or libraries to be used; ...|$|R
3000|$|... -ary square QAM with Gray <b>bit</b> <b>mapping.</b> In {{the work}} of Rugini and Banelli [11], the BER of SISO-OFDM with {{frequency}} offset is developed. The BER analysis in [11] is now extended to MIMO-OFDM.|$|R
50|$|Whitewater Resource Editor was {{an early}} {{resource}} editor developed by the Whitewater Group for Microsoft Windows 3.11. The WYSIWYG editor allowed resources to be edited, created, and managed including accelerator keys, <b>bit</b> <b>maps,</b> cursor shapes, icons, dialog boxes, menus, and more.|$|R
5000|$|A {{standard}} {{scenario in}} many computer applications {{is a collection}} of points (measurements, dark pixels in a <b>bit</b> <b>map,</b> etc.) in which one wishes to find a topological feature. Homology can serve as a qualitative tool to search for such a feature, since it is readily computable from combinatorial data such as a simplicial complex. However, the data points have to first be triangulated, meaning one replaces the data with a simplicial complex approximation. Computation of persistent homology involves analysis of homology at different resolutions, registering homology classes (holes) that persist as the resolution is changed. Such features can be used to detect structures of molecules, tumors in X-rays, and cluster structures in complex data.|$|E
5000|$|The IBM 704 has a 38-bit accumulator, a 36-bit {{multiplier}} quotient register, {{and three}} 15-bit index registers. The {{contents of the}} index registers are subtracted from the base address, so the index registers are also called [...] "decrement registers". All three index registers can participate in an instruction: the three-bit tag field in the instruction is a <b>bit</b> <b>map</b> specifying which of the registers participate in the operation. However, when more than one index register is selected, then their contents are or'ed [...] - [...] not added [...] - [...] together before the decrement takes place. This behavior persisted in later Scientific Architecture machines (such as the IBM 709 and IBM 7090) until the IBM 7094. The IBM 7094, introduced in 1962, {{increased the number of}} index registers to seven and only selected one at a time; the [...] "or" [...] behavior remains available in a compatibility mode of the IBM 7094.|$|E
30|$|The {{proposed}} {{method is}} based on the use of a <b>Bit</b> <b>Map.</b> The <b>Bit</b> <b>Map</b> is a table recording and indicating how many bits were or are allocated on each subcarrier of OFDM symbols in a previous or current packet, respectively. In fact, the number of bits is directly proportional to the data rate of each subcarrier (data rate = the number of bits/OFDM symbol duration). In order to avoid confusion, hereinafter we use only the data rate. The overall operation of the protocol is as follows. The sender sends an RTS to the receiver. When it receives the RTS, the receiver estimates the condition of all subcarriers and determines the data rate that can be sent on each of them. After updating its <b>Bit</b> <b>Map,</b> the receiver sends a CTS packet, which uses a modified packet format derived from the IEEE 802.11 standard. The detailed CTS packet format is described in Section 2.2. The sender updates its <b>Bit</b> <b>Map</b> according to the information embedded in the CTS. The details of the method are illustrated in the following subsections.|$|E
5000|$|The dyadic {{transformation}} (also {{known as}} the dyadic <b>map,</b> <b>bit</b> shift <b>map,</b> 2x mod 1 map, Bernoulli map, doubling map or sawtooth map) is the mapping (i.e., recurrence relation) ...|$|R
50|$|Sony {{claims that}} the Super <b>Bit</b> <b>Mapping</b> process {{converts}} a 20-bit signal from master recording into a 16-bit signal nearly without sound quality loss, using noise shaping to improve {{signal to noise ratio}} over the frequency bands most acutely perceived by human hearing.|$|R
50|$|In addition, jaggies {{often occur}} when a <b>bit</b> <b>mapped</b> image is {{converted}} to a different resolution. They can occur for variety of reasons, the most common being that the output device (display monitor or printer) {{does not have enough}} resolution to portray a smooth line.|$|R
40|$|The {{most common}} methods for {{maintain}} {{a list of}} free sectors on disk are to use either a linked list or a <b>bit</b> <b>map</b> [1]. Using a linked list has the advantage that is requires no extra storage since the links are stored in the free sectors. It also provides quick allocation and deallocation, requiring only that a free sector {{be removed from the}} head of the list, or a freed sector be added {{to the head of the}} list, respectively. The main disadvantage of a linked list is that over time the list tends towards random. That is, unless the list is sorted, sectors are placed on the list in no particular order. The result is poor locality during file access, significantly impacting performance by increasing the average seek time. By using a <b>bit</b> <b>map,</b> adjacent free sectors will always appear adjacent in the <b>bit</b> <b>map.</b> There is a small cost in terms of storage; that is, the <b>bit</b> <b>map</b> will contain one eighth as many bytes as there are sectors on the disk. There is a potentially more important concern: the average number of bits that must be scanned in order to find a free sector. Since this technique was first used, the size of disks has increased by approximately four orders of magnitude. If the number of bits to b...|$|E
40|$|The {{most common}} methods for {{maintain}} {{a list of}} free sectors on disk are to use either a linked list or a <b>bit</b> <b>map</b> [1]. Using a linked list has the advantage that is requires no extra storage since the links are stored in the free sectors. It also provides quick allocation and deaUocation, requiring only that a free sector {{be removed from the}} head of the list, or a freed sector be added {{to the head of the}} list, respectively. The main disadvantage of a linked list is that over time the list tends towards random. That is, unless the list is sorted, sectors are placed on the list in no particular order. The result is poor locality during file access, significantly impacting performance by increasing the average seek time. By using a <b>bit</b> <b>map,</b> adjacent free sectors will always appear adjacent in the <b>bit</b> <b>map.</b> There is a small cost in terms of storage; that is, the <b>bit</b> <b>map</b> will contain one eighth as many bytes as there are sectors on the disk. There is a potentially more important concern: the average number of bits that must be scanned in order to find a free sector. Since this technique was first used, the size of disks has increased by approximately four orders of magnitude. If the number of bits to be scanned on average increased even a small fraction of this amount, the technique would need to be abandoned. This question came up in our undergraduate operating systems course. Our initial speculation was that bit maps would be inappropriate for the large disks that are becoming available. As the following analysis will show, the <b>bit</b> <b>map</b> technique remains viable for large disks, and as we shall see it is, in a sense, independent of the size of the disk. Assume for the moment that the free sectors are uniformly distributed across the disk, resulting from files being freed in no particular order. Further assume that the system is in steady state with r sectors free on average out of a total n. The problem then reduces to drawing one of r cards from a deck of size n [2]. Let b~, 1 < i < n, be the <b>bit</b> <b>map</b> where there are r zero bits indicating free sectors. Then the probability of the first bit being zero i...|$|E
30|$|If the {{transmission}} of the CTS packet fails, the receiver {{goes back to the}} previous bit allocation information contained in the <b>Bit</b> <b>Map,</b> {{as in the case of}} DATA packet loss. This case is shown in Figure 7 (b).|$|E
5000|$|The BANCStar 10.0 release {{changed the}} [...] "Screen Code" [...] format to binary, and rearranged the numeric codes into an opcode with a {{variable}} number of parameter integers. The 10.0 opcode encoded a <b>bit</b> <b>mapped</b> length value that indicated {{the length of}} the command in words.|$|R
40|$|A general {{recursive}} algorithm for the efficient and accurate computation of the {{bit error rate}} (BER) of square-shaped $M$-QAM constellations over additive white Gaussian noise (AWGN) channels is derived. We {{take advantage of the}} relationship amongst different square-shaped $M$-QAM constellations using Gray coded <b>bit</b> <b>mapping.</b> Index Terms—AWGN, BER computation, $M$-QAM, square constellation...|$|R
50|$|The {{album was}} {{released}} {{for the first}} time on compact disc on June 28, 1994, as part of the Master Sound series in which Sony Music used the Super <b>Bit</b> <b>Mapping</b> process to remaster certain titles and burn them onto discs with 24-karat gold plating. It was also issued on a standard compact disc on December 23, 1999.|$|R
3000|$|After {{the process}} {{illustrated}} in Section 2.3 is completed, the receiver (i.e., the destination of the RTS packet) sends a CTS packet to the sender (i.e., {{the source of}} the RTS packet). The CTS packet includes the Bit-Map-Adjustment OFDM symbol updated by the receiver. After receiving the CTS packet, the sender also updates its own <b>Bit</b> <b>Map</b> following the rule shown in Table 1. By using the data rates represented in the updated Bit-Map, the sender generates and sends a DATA packet with the [...] "Confirmation" [...] subfield set to 1. When the receiver receives this DATA packet, it demodulates the packet based on the <b>Bit</b> <b>Map</b> information and sends an ACK to the sender.|$|E
40|$|In this paper, we revisit {{a method}} to produce binary {{sequences}} using the most significant <b>bit</b> <b>map</b> from to the binary field. This method is useful {{for the construction of}} binary sequences with low correlation and large family size. Theremay be more cases where starting with could help researchers design new low correlation sequences for code-division multiple access application...|$|E
3000|$|This {{additional}} single OFDM symbol {{is composed}} of 48 data subcarriers and 4 parity subcarriers. Each parity bit covers 12 subcarriers. Each subcarrier is set to 1 /− 1 (BPSK) {{or one of the}} BPSK symbols. The objective of this additional OFDM symbol is to adjust the data rate allocated on the subcarriers for the subsequent data transmission. The method employed to allocate the data rate to each subcarrier is described in the following subsection. For the DATA packet, only one subfield is changed, as shown in Figure 3. The [...] "Reserved" [...] subfield in the DATA PLCP header in IEEE 802.11 a is used as a [...] "Confirmation" [...] subfield. This subfield is used as an Acknowledgment for the <b>Bit</b> <b>Map</b> in the CTS packet. If the sender agrees with the <b>Bit</b> <b>Map,</b> the bit is set to 1. Otherwise, it is set to 0. The [...] "Confirmation" [...] subfield is used for the error recovery process, which is described in detail in Section 2.4.|$|E
30|$|In the {{modulation}} process through a backward iteration, the information <b>bit</b> 0 is <b>mapped</b> to s= 0 {{and the information}} <b>bit</b> 1 is <b>mapped</b> to s= 1.|$|R
40|$|For TREC- 5, {{retrieval}} from {{corrupted data}} was studied through retrieval of single target documents from a corpus which was corrupted by producing page images, corrupting the <b>bit</b> <b>maps,</b> and applying OCR techniques to the results. In general, methods which attempted a probabilistic {{estimation of the}} original clean text fare better than methods which simply accept corrupted versions of the query text. ...|$|R
30|$|For {{decoding}} data successfully the eavesdropper {{must first}} perform blind channel estimation to map its received joint constellation symbols to information bits. Finding the <b>bit</b> <b>mapping</b> {{is an act}} of deciphering, where the received joint symbols are the cipher-text, the channel coefficients are the encryption key and the information bits are the encrypted message. After deciphering, the eavesdropper must decode the data from a deteriorated signal.|$|R
