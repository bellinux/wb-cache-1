5|9|Public
5000|$|The current {{firmware}} updates for {{the device}} contain a directory {{by the name}} of Ace_Update, confirming the original internal code name. A string inside the <b>Bluetooth</b> <b>driver</b> file indicates that another internal code name may have been [...] "Ace Ventura", a reference to the movie of the same name.|$|E
40|$|Software {{systems can}} often be large or small complex systems. Without proper {{documentation}} or documentation not corresponding to the actual architecture, these systems are difficult to understand, utilize and maintain. As a software system evolves, its structure encounters major changes over time. In this report, we present an investigation technique in understanding these changes as a system evolves. The system we choose to study is the kernel space Bluetooth HCI subsystem. To {{evaluate the effectiveness of}} this approach, we then analyze the statistics gathered from multiple <b>Bluetooth</b> <b>driver</b> versions and present our own observational views on how <b>Bluetooth</b> <b>driver</b> subsystem evolve in Linux. Our study results in documentation that is useful for understanding the <b>Bluetooth</b> <b>driver</b> structure on the Linux system and its evolving nature. We find that this analysis technique can be effectively used to study both tradition and open source system evolution. ...|$|E
40|$|Abstract. We {{consider}} the model-checking problem for C programs with (1) data ranging over very large domains, (2) (recursive) procedure calls, and (3) concurrent parallel components that communicate via synchronizing actions. We model such programs using communicating pushdown systems, {{and reduce the}} reachability problem for this model to deciding the emptiness of the intersection of two context-free languages L 1 and L 2. We tackle this undecidable problem using a CounterExample Guided Abstraction Refinement (CEGAR) scheme. We implemented our technique in the model checker MAGIC and found a previously unknown bug in a version of a Windows NT <b>Bluetooth</b> <b>driver.</b> ...|$|E
5000|$|Microsoft Phone Data Manager - an {{alternative}} to Nokia PC Suite (though you may still need to install Nokia PC Suite to get the <b>Bluetooth</b> <b>drivers</b> (and then possibly uninstall to remove it afterwards)) ...|$|R
50|$|PlayStation 3 {{controllers}} {{are compatible}} with Bluetooth-equipped Apple Macintosh computers, with no external software required. Workarounds have been created allowing the Sixaxis and DualShock 3 controllers to be used on PCs and Android devices despite this limitation, using custom software and <b>Bluetooth</b> <b>drivers</b> {{or in the case}} of Android, an App and Root access.|$|R
50|$|BlueSoleil is a Bluetooth software/driver for Microsoft Windows, Linux and Windows CE. It {{supports}} Bluetooth chipsets from CSR, Broadcom, Marvell etc. Bluetooth dongles, PCs, Laptops, PDAs, PNDs and UMPCs {{are sometimes}} bundled with {{a version of}} this software. The software is rarely needed on modern computers, as well-functioning <b>Bluetooth</b> <b>drivers</b> for the most widely used Bluetooth chips have been available though Windows Update since Windows Vista.|$|R
40|$|AbstractWe {{address the}} {{verification}} problem of networks of communicating pushdown systems modeling communicating parallel programs with procedure calls. Processes in such networks {{can read the}} control state of the other processes according to a given communication structure (specifying the observability rights between processes). The reachability problem of such models is undecidable in general. First, we define a class of networks that effectively preserves recognizability (hence, its reachability problem is decidable). Then, we consider networks where the communication structure can change dynamically during the execution according to a phase graph. The reachability problem for these dynamic networks being undecidable in general, we define a subclass for which it becomes decidable. Then, we consider reachability when the switches in the communication structures are bounded. We show that this problem is undecidable even for one switch. We define a natural class of models for which this problem is decidable. This class {{can be used in}} the definition of an efficient semi-decision procedure for the analysis of the general model of dynamic networks. Our techniques allowed to find bugs in two versions of a Windows NT <b>Bluetooth</b> <b>driver...</b>|$|E
5000|$|Audio-Technica ATH-WS99BT - {{over-ear}} consumer Solid Bass headphones (53mm <b>drivers,</b> <b>Bluetooth</b> 3, Class 2) ...|$|R
50|$|For Microsoft platforms, Windows XP Service Pack 2 and SP3releases work {{natively}} with Bluetooth v1.1, v2.0 and v2.0+EDR.Previous versions required {{users to}} install their <b>Bluetooth</b> adapter's own <b>drivers,</b> {{which were not}} directly supported by Microsoft.Microsoft's own Bluetooth dongles (packaged with their Bluetooth computer devices) have no external drivers and thus require at least Windows XP Service Pack 2. Windows Vista RTM/SP1 with the Feature Pack for Wireless or Windows Vista SP2 work with Bluetooth v2.1+EDR. Windows 7 works with Bluetooth v2.1+EDR and Extended Inquiry Response (EIR).|$|R
40|$|Abstract. Device drivers {{account for}} a {{substantial}} part of the operating system (OS), since they implement the code that interfaces the components connected to a computer system. Unfortunately, in the large majority of cases, hardware vendors do not release their code, making the analysis of failures attributed to device drivers extremely difficult. Although several instrumentation tools exist, most of them are useless to study device drivers as they work at user level. This paper presents Intercept, a tool that profiles Windows Device Drivers (WDD) and logs the driver interactions with the OS core at function level. The tool helps to understand how a WDD works and can provide support for several activities, such as debugging, robustness testing, or reverse engineering. Experiments using Ethernet, Wi-Fi and <b>Bluetooth</b> device <b>drivers</b> show that Intercept is able to record function calls, parameters and return values, with small overheads even when the device driver under test is subject to a heavy workload...|$|R
50|$|The Toyota Sportivo Coupe is {{a concept}} car {{developed}} by Toyota of Australia. The car is most notable for not only its decidedly high-tech design, {{but that it was}} designed by a group of teenagers (ages 14-18). Key design elements include a speedometer in which the speed limit always occupies the 12 o'clock position. It also features GPS, <b>Bluetooth,</b> and a <b>Driver</b> I.D. system which automatically configures the car to the drivers settings saved on the card. The entire vehicle was built in 30 weeks using CAD and rapid prototyping. The vehicle is built on top of a modular Toyota frame using a modified drive train from the Camry and RAV4.|$|R
50|$|Bluetooth’s OBEX/OPP {{profiles}} {{allow for}} file transfer between a PC and a mobile device. Using this option is slightly {{more complicated than}} using a USB connection as the two devices have to be paired first. Also, unlike the familiar drag and drop that is usually available via USB, Bluetooth implementation is specific to the <b>Bluetooth</b> transceiver and <b>drivers</b> being used.Files that are sideloaded to mobile devices via Bluetooth are often received as messages, {{in the same way}} that SMS texts would be received. While these files can be saved to any storage medium, their initial location is the handset’s internal memory. As such the limitations of the internal memory have to be taken into account before beginning the sideload.|$|R
40|$|The Bluetooth {{technology}} is being increasingly used to track vehicles throughout their trips, within urban networks and across freeway stretches. One important opportunity offered by {{this type of}} data is the measurement of Origin-Destination patterns, emerging from the aggregation and clustering of individual trips. In order to obtain accurate estimations, however, {{a number of issues}} need to be addressed, through data filtering and correction techniques. These issues mainly stem from the use of the <b>Bluetooth</b> technology amongst <b>drivers,</b> and the physical properties of the Bluetooth sensors themselves. First, not all cars are equipped with discoverable Bluetooth devices and the Bluetooth-enabled vehicles may belong to some small socio-economic groups of users. Second, the Bluetooth datasets include data from various transport modes; such as pedestrian, bicycles, cars, taxi driver, buses and trains. Third, the Bluetooth sensors may fail to detect all of the nearby Bluetooth-enabled vehicles. As a consequence, the exact journey for some vehicles may become a latent pattern that will need to be extracted from the data. Finally, sensors that are in close proximity to each other may have overlapping detection areas, thus making the task of retrieving the correct travelled path even more challenging. The aim of this paper is twofold. We first give a comprehensive overview of the aforementioned issues. Further, we propose a methodology that can be followed, in order to cleanse, correct and aggregate Bluetooth data. We postulate that the methods introduced by this paper are the first crucial steps that need to be followed in order to compute accurate Origin-Destination matrices in urban road networks...|$|R

