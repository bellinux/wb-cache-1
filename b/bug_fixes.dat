1490|1467|Public
5|$|After Ensemble's closing, Robot Entertainment {{announced}} that it was developing downloadable content (DLC) for Halo Wars. Pottinger described support as ongoing rather than a one-time effort and compared it to Bungie's post-launch additions to Halo 3. He stated that Robot would also work on balance issues, <b>bug</b> <b>fixes,</b> and other patches.|$|E
5|$|Beginning on June 28, 2011, the PHP Group {{implemented}} a timeline {{for the release}} of new versions of PHP. Under this system, at least one release should occur every month. Once per year, a minor release should occur which may include new features. Every minor release should at least be supported for two years with security and <b>bug</b> <b>fixes,</b> followed by at least one year of only security fixes, for a total of a three-year release process for every minor release. No new features, unless small and self-contained, are to be introduced into a minor release during the three-year release process.|$|E
5|$|Charlie Murder was {{the third}} Ska Studios game {{published}} by Microsoft Studios. During development, Microsoft Studios provided Ska Studios with usability testing and play testing feedback, handled localization, and found and suggested <b>bug</b> <b>fixes.</b> Microsoft required Ska Studios to create picture packs (Xbox Live account customizations), but was {{not responsible for the}} Windows Phone 8 game mechanic. Ska Studios had complete creative control over the game itself. Charlie Murder was promoted as a free Xbox download with Microsoft's Games with Gold program during the month of June 2014.|$|E
40|$|This {{manuscript}} {{presents an}} approach {{for studying the}} abundance of <b>bug</b> <b>fix</b> patterns. <b>Bug</b> <b>fix</b> patterns capture the knowledge on how to <b>fix</b> <b>bugs,</b> they are essential building blocks for research areas such as <b>bug</b> <b>fix</b> recommendation and automatic repair. In this paper, {{we focus on the}} problem of the accurate measurement of <b>bug</b> <b>fix</b> pattern abundance: how to reliably tell that one pattern is more common than another one? We propose an approach to formalizing <b>bug</b> <b>fix</b> patterns and an accurate instance pattern identification process that uses this formalization. Our technique is based on a tree differencing algorithm working with abstract syntax trees (AST). A comparative evaluation shows that our approach improves the accuracy of pattern instance identification by an order of magnitude...|$|R
40|$|Abstract Twenty-seven {{automatically}} extractable <b>bug</b> <b>fix</b> {{patterns are}} defined using the syntax components and {{context of the}} source code involved in <b>bug</b> <b>fix</b> changes. <b>Bug</b> <b>fix</b> patterns are extracted from the configuration management repositories of seven open source projects, all written in Java (Eclipse, Columba, JEdit, Scarab, ArgoUML, Lucene, and MegaMek). Defined <b>bug</b> <b>fix</b> patterns cover 45. 7 % to 63. 3 % of the total <b>bug</b> <b>fix</b> hunk pairs in these projects. The frequency of occurrence of each <b>bug</b> <b>fix</b> pattern is computed across all projects. The most common individual patterns are MC-DAP (method call with different actual parameter values) at 14. 9 – 25. 5 %, IF-CC (change in if conditional) at 5. 6 – 18. 6 %, and AS-CE (change of assignment expression) at 6. 0 – 14. 2 %. A correlation analysis on the extracted pattern instances on the seven projects shows that six have very similar <b>bug</b> <b>fix</b> pattern frequencies. Analysis of if conditional <b>bug</b> <b>fix</b> sub-patterns shows a trend towards increasing conditional complexity in if conditional fixes. Analysis of five developers in the Eclipse projects shows overall consistency with project-level <b>bug</b> <b>fix</b> pattern frequencies, as well as distinct variations among developers in their rates of producing various bug patterns. Overall, data in the paper suggest that developers have difficulty with specific code situations at surprisingly consistent rates. There appear to be broad mechanisms causing the injection of bugs that are largely independent {{of the type of}} software being produced...|$|R
40|$|Abstract—Fixing bugs is an {{important}} activity of the soft-ware development process. A typical process of <b>bug</b> <b>fixing</b> consists of the following steps: 1) a user files a bug report; 2) the bug is assigned to a developer; 3) the developer fixes the bug; 4) changed code is reviewed and verified; and 5) the bug is resolved. Many studies have investigated the process of <b>bug</b> <b>fixing.</b> However, {{to the best of}} our knowledge, none has explicitly analyzed the interval between bug assignment and the time when <b>bug</b> <b>fixing</b> starts. After a bug assignment, some developers will immediately start <b>fixing</b> the <b>bug</b> while others will start <b>bug</b> <b>fixing</b> after a long period. We are blind on developer’s delays when <b>fixing</b> <b>bugs.</b> This paper explores such delays of developers through an empirical study on three open source software systems. We examine factors affecting <b>bug</b> <b>fixing</b> time along three dimensions: bug reports, source code involved in the fix, and code changes that are required to <b>fix</b> the <b>bug.</b> We further compare different factors by descriptive logistic regression models. Our results can help development teams better understand factors behind delays, and then improve <b>bug</b> <b>fixing</b> process. Keywords-bug fixing process; change request; fixing time; empirical software engineering; bug report; mylyn. I...|$|R
5|$|Dillon started DragonFly in {{the belief}} that the methods and {{techniques}} being adopted for threading and symmetric multiprocessing in FreeBSD 5 would lead to poor system performance and cause maintenance difficulties. He sought to correct these suspected problems within the FreeBSD project. Due to ongoing conflicts with other FreeBSD developers over the implementation of his ideas, his ability to directly change the FreeBSD codebase was eventually revoked. Despite this, the DragonFly BSD and FreeBSD projects still work together contributing <b>bug</b> <b>fixes,</b> driver updates, and other system improvements to each other.|$|E
5|$|Following release, {{there were}} several {{complaints}} about the game crashing, having a vague user interface, and lacking any save system. In response to these complaints, Svensson noted that a patch was being discussed with the development team {{to address these issues}} in a future update. An updated version was released on January 28, 2013 under the name, Street Fighter X Mega Man V2. The update boasts an improved user interface, better controller compatibility, <b>bug</b> <b>fixes,</b> a password save system reminiscent of the original Mega Man games on the Nintendo Entertainment System, and an additional boss character.|$|E
5|$|The later Saturn version {{featured}} {{a number of}} changes: an optional easy difficulty setting (providing the player with twice the fire-power and slower fuel consumption), adjustable brightness on the heads-up display; two hidden powerful weapons; hundreds of <b>bug</b> <b>fixes</b> from the PlayStation version; extra sound effects added to helicopters; improvements to the graphics of control and menu screens and compass; stereo and mono versions; cow sound effects; and more improvised fuel added to level 4. It was also compatible with the Saturn's then-recent analogue controllers. The game {{was followed by a}} further sequel, Nuclear Strike, released for the PlayStation in late 1997.|$|E
40|$|New in v 1. 1. 0 Modifications to prinComp {{interface}} Minor <b>bug</b> <b>fix</b> {{in setting}} climatology output attributes Add support to bindGrid. time {{for dealing with}} multiGrids New function climatologyVariogram for empirical variogram calculation Prepare bindGrid. {{time to deal with}} multigrids <b>Bug</b> <b>fix</b> in attribute definition in subsetVar interna...|$|R
40|$|NEW FEATURES Dynamic {{activity}} centers (i. e., {{those with}} coordinates {{that can change}} over time) can now be handled via the centroids argument in prepData and simData. An example based on the group dynamic model of Langrock et al. (2014) {{has been added to}} the vignette. initialPosition argument in simData can now be specified as a list indicating the initial position for each individual CHANGES multinomial logit link now used on zeroInflation and oneInflation parameters <b>bug</b> <b>fix</b> in calculation of pseudo-residuals (pseudoRes) with zeroInflation and/or oneInflation <b>bug</b> <b>fix</b> in CIreal when natural scale delta estimates are near boundary <b>bug</b> <b>fix</b> in crawlWrap when predTime is of length one <b>bug</b> <b>fix</b> in MIpool when initial distribution includes covariates splines and splines 2 package dependencies changed to Suggests in DESCRIPTION fil...|$|R
5000|$|To {{facilitate}} software improvements through <b>bug</b> <b>fixing</b> and plug-ins ...|$|R
5|$|Sony {{launched}} a multimillion-dollar ad {{campaign to promote}} Final Fantasy XI along with the PlayStation 2 hard drive add-on which the game required. Having been released on the PlayStation 2 {{as well as the}} personal computer, it became the first cross-platform MMORPG ever created. On June 14, 2002, the game server was down for four hours for maintenance to the database servers, <b>bug</b> <b>fixes</b> on the text interface, and a new patch for the game client. This is thought to be the first patch ever released for a console game. Other early issues included complaints by American players that experienced Japanese players had already completed all the quests. Square Enix responded by adding new servers in order to have game worlds with fewer expert players.|$|E
5|$|In May 2006, an auto-update {{was made}} {{available}} on Xbox Live, responsible for fixing some bugs and adding additional multiplayer options to the game. The <b>bug</b> <b>fixes</b> included code {{to prevent an}} ongoing problem where players could walk through the air, an issue where some weapons could make use of rapid fire, and a map-exiting glitch, among others. The new multiplayer options provide seven additional new bot types {{and the ability to}} use bots in DarkOps matches, since bots had only one AI variant and were only available in DeathMatch scenarios when the game was released. Additionally, a playable demo of the game was made freely available on the Xbox Live Marketplace shortly afterwards. The demo includes one campaign mission that can be played in solo mode or co-operatively, and a new multiplayer map.|$|E
5|$|The updates also {{contribute}} to the main story mode; the first added Sandman as its boss, while the fourth added Doctor Octopus, the sixth added Mysterio, and Venom was added in the August 2016 update. New characters are frequently added through the updates, and some of them, such as Spider-Gwen, Silk, Spider-Punk, and Aracnido Jr., made their first appearances in Spider-Man Unlimited. Other common update content includes thematic fights against specific villains, such as Jack O'Lantern, Hydro-Man, and Silver Sable. The sixth improved objective counters for events, while the seventh added short mission-style events. Some updates like the first and the sixth also included <b>bug</b> <b>fixes,</b> while the first adapted it to run on Windows Phone devices with 512 megabytes of RAM, and the sixth also made it compatible with the MFi Program.|$|E
40|$|The {{controlling}} of <b>bug</b> <b>fixing</b> process {{during the}} system testing phase of software development life cycle {{is very important}} for fixing all the detected bugs within the scheduled time. The presence of open bugs often delays the release of the software or result in releasing the software with compromised functionalities. These can lead to customer dissatisfaction, cost overrun and eventually the loss of market share. In this paper, the authors propose a methodology to quantitatively manage the <b>bug</b> <b>fixing</b> process during system testing. The proposed methodology identifies the critical milestones in the system testing phase which differentiates the successful projects from the unsuccessful ones using Mahalanobis Taguchi system. Then a model is developed to predict whether a project is successful or not with the <b>bug</b> <b>fix</b> progress at critical milestones as control factors. Finally the model is used to control the <b>bug</b> <b>fixing</b> process. It is found that the performance of the proposed methodology using Mahalanobis Taguchi system is superior to the models developed using other multi-dimensional pattern recognition techniques. The proposed methodology also reduces the number of control points providing the managers with more options and flexibility to utilize the <b>bug</b> <b>fixing</b> resources across system testing phase. Moreover the methodology allows the mangers to carry out mid- course corrections to bring the <b>bug</b> <b>fixing</b> process back on track so that all the detected <b>bugs</b> can be <b>fixed</b> on time. The methodology is validated with eight new projects and the results are very encouraging...|$|R
50|$|On 22 December 2011 <b>bug</b> <b>fix</b> version 4.63 became available.|$|R
5000|$|... to {{facilitate}} software improvements through <b>bug</b> <b>fixing</b> and software extension ...|$|R
5|$|While Microsoft largely {{failed to}} {{participate}} in the rise of the Internet in the early 1990s, some of the key technologies in which the company had invested to enter the Internet market started to pay off by the mid-90s. One of the most prominent of these was ActiveX, an application programming interface built on the Microsoft Component Object Model (COM); this enabled Microsoft and others to embed controls in many programming languages, including the company's own scripting languages, such as JScript and VBScript. ActiveX included frameworks for documents and server solutions. The company also released the Microsoft SQL Server 6.5, which had built-in support for internet applications. Later in 1997, Microsoft Office 97 as well as Internet Explorer 4.0 were released, marking the beginning of the takeover of the browser market from rival Netscape, and by agreement with Apple Computer, Internet Explorer was bundled with the Apple Macintosh operating system as well as with Windows. Windows CE 2.0, the handheld version of Windows, was released this year, including a host of <b>bug</b> <b>fixes</b> and new features designed to make it more appealing to corporate customers. In October, the Justice Department filed a motion in the federal district court in which they stated that Microsoft had violated an agreement signed in 1994, and asked the court to stop the bundling of Internet Explorer with Windows.|$|E
25|$|The {{first public}} {{release of the}} game took place on June 26, 2004, as a {{demonstration}} preview of an incomplete game. With each following version from 0.01 to 0.09, new features and content were progressively introduced, along with various <b>bug</b> <b>fixes.</b> The latest version, 0.10, featured general <b>bug</b> <b>fixes</b> and became available on October 1, 2007.|$|E
25|$|Ubuntu {{is built}} on Debian's {{architecture}} and infrastructure, and comprises Linux server, desktop and discontinued phone and tablet operating system versions. Ubuntu releases updated versions predictably every six months, and each release receives free support for nine months (eighteen months prior to 13.04) with security fixes, high-impact <b>bug</b> <b>fixes</b> and conservative, substantially beneficial low-risk <b>bug</b> <b>fixes.</b> The first release was in October 2004.|$|E
5000|$|X-plore <b>bug</b> <b>Fixed</b> (When opened untype(unknown) file led to {{restarting}} phone) ...|$|R
50|$|<b>Bug</b> <b>fixing</b> patches {{versioned}} 1.02, 1.03 and 1.04 {{were released}} after publication.|$|R
50|$|On August 19, 2009, Critical Thought Games {{released}} a <b>bug</b> <b>fix</b> update.|$|R
25|$|MuseScore 1.3 was {{released}} in February 2013 as a small update containing mostly <b>bug</b> <b>fixes.</b>|$|E
25|$|In September 2017, the GNOME Project {{released}} GNOME 3.26, providing <b>bug</b> <b>fixes</b> {{as well as}} new major features.|$|E
25|$|Paid {{support for}} {{production}} releases which allows access to security updates and <b>bug</b> <b>fixes</b> was offered by Sun through the /support repository on pkg.sun.com.|$|E
30|$|Focusing on the reopening of <b>bugs</b> <b>fixed</b> by {{a source}} code patch, Almossawi (2012) {{analyzed}} 32 open source {{systems in the}} GNOME project and, using a logistic regression model, concluded that bugs located in code with high cyclomatic complexity {{are more likely to}} be reopened. Jongyindee et al. (2011) found that <b>bugs</b> <b>fixed</b> by more experienced developers are less likely to be reopened.|$|R
40|$|Today, many {{electronic}} systems are developed using a hardware description language, {{a kind of}} software that can be converted into integrated circuits or programmable logic devices. Like traditional software projects, hardware projects have bugs, and significant developer time is spent fixing them. A useful first step toward reducing bugs in hardware is developing {{an understanding of the}} frequency of different types of errors. Once the most common types are known, it is then possible to focus attention on eliminating them. As most hardware projects use software configuration management repositories, these can be mined for the textual <b>bug</b> <b>fix</b> changes. In this project, we analyze the <b>bug</b> <b>fix</b> history of four hardware projects written in Verilog and manually define 25 <b>bug</b> <b>fix</b> patterns. The frequency of each bug type is then computed for all projects. We find that 29 − 55 % of the <b>bug</b> <b>fix</b> pattern instances in Verilog involve assignment statements, while 18 − 25 % are related to if statements...|$|R
50|$|This release {{focused on}} <b>bug</b> <b>fixing,</b> announcing that {{refactoring}} and potential backward incompatibilities would come soon.|$|R
25|$|Mainstream {{support for}} all editions (new {{features}} and <b>bug</b> <b>fixes)</b> ended as of January 2015, but extended support (security updates) will continue until January 2020.|$|E
25|$|Development {{releases}} {{were built}} {{from the latest}} OpenSolaris codebase (consolidations) and included newer technologies, security updates and <b>bug</b> <b>fixes,</b> and more applications, but may not have undergone extensive testing.|$|E
25|$|The 4.2 release {{includes}} {{thousands of}} <b>bug</b> <b>fixes</b> and has implemented many features that {{were present in}} KDE 3.5 but had been missing in KDE 4.0 and 4.1.|$|E
5000|$|Stagefright (bug) - {{security}} <b>bug</b> <b>fixed</b> in Firefox OS 2.2, {{but mostly}} known to affect Android ...|$|R
50|$|On June 14, 2013, the LightWave 3D Group {{released}} a <b>bug</b> <b>fix</b> patch (11.5.1) to version 11.5.|$|R
5000|$|However, on October 27, 2008, Schulz {{announced}} a new version 1.30, described as a <b>bug</b> <b>fix</b> release.|$|R
