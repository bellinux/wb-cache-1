3190|10000|Public
5|$|There {{are several}} {{technologies}} in use {{to achieve the}} flashing effect. These include flashing a light bulb or LED, flashing or rotating halogen, and strobe lights, which are usually brighter than incandescent lights. Each of these can <b>be</b> <b>programmed</b> to flash singly or in groups, and can <b>be</b> <b>programmed</b> to flash in patterns (such as a left -> right pattern for use when the ambulance is parked on the left hand side of the road, indicating to other road users that they should move to the right (away from the ambulance)). Incandescent and LED lights may also <b>be</b> <b>programmed</b> to burn steadily, without flashing, which is required in some provinces.|$|E
5|$|Emergency lights may be {{housed in}} special fittings, {{such as in}} a lightbar, or may be hidden in a host light (such as a headlamp) by {{drilling}} {{a hole in the}} host light's reflector and inserting the emergency light. These hidden lights may not be apparent until they are activated. Additionally, some of the standard lights fitted to an ambulance (e.g. headlamps, tail lamps) may <b>be</b> <b>programmed</b> to flash. Flashing headlights (typically the high beams, flashed alternately) are known as a wig-wag.|$|E
5|$|FPGAs can <b>be</b> <b>programmed</b> with {{hardware}} description languages such as VHDL or Verilog. However, {{programming in}} these languages can be tedious. Several vendors have created C to HDL languages {{that attempt to}} emulate the syntax and semantics of the C programming language, with which most programmers are familiar. The best known C to HDL languages are Mitrion-C, Impulse C, DIME-C, and Handel-C. Specific subsets of SystemC based on C++ {{can also be used}} for this purpose.|$|E
50|$|The {{earliest}} peripherals <b>were</b> <b>programmed</b> in {{the assembly}} language appropriate to each processor. Eventually, most peripherals <b>were</b> <b>programmed</b> in variations of C and C++.|$|R
30|$|Resource {{customers}} <b>are</b> <b>programmed</b> as FNSSAs {{and in one}} experiment their trading opponents <b>are</b> <b>programmed</b> as MDAs [12, 23] and {{in another}} experiment their trading opponents <b>are</b> <b>programmed</b> as FNSSAs. By holding the type of customer agents constant (i.e., consider the same type), the performance of FNSSA_CRPs against those of MDA_CRPs [12, 23] can be measured without having any possible influence on the negotiation outcomes.|$|R
50|$|The Apple II version <b>was</b> <b>programmed</b> by Alan Pavlish of Designer Software. All other {{versions}} <b>were</b> <b>programmed</b> by Robert Leyland. The Commodore 64 version {{states it}} was by Mission Accomplished, Inc., but also gives credit to Leyland for programming.|$|R
5|$|For {{the shot}} of the levitating truck, which {{was used in the}} film to {{demonstrate}} the strange phenomena brought on by the coming of the alignment of the worlds, filmmakers attached a cement truck to a large hydraulic rig, which could <b>be</b> <b>programmed</b> to change speed and movement. In order to create Algrim's transformation into Kurse, Double Negative morphed live action performances of Adewale Akinnuoye-Agbaje as both Algrim and Kurse. Double Negative then added in smoke and lava-like effects.|$|E
5|$|Marble Madness is an arcade {{video game}} {{designed}} by Mark Cerny {{and published by}} Atari Games in 1984. The player uses a trackball to guide an onscreen marble through six obstacle-filled courses within a time limit. Marble Madness was Atari's first game to use the Atari System 1 hardware and to <b>be</b> <b>programmed</b> in the C programming language. It {{was also one of}} the first games to use true stereo sound; previous games used either monaural sound or simulated stereo.|$|E
5|$|Dangerous or not, Bache {{soon began}} a lifelong crusade to win {{popularity}} for Liszt's works in England. In 1865 {{he began a}} series of annual concerts in conjunction with singer Gustave Garcia. They began modestly, in Collard's Rooms, Grosvenor Street. As they increased in popularity, they were relocated to the more spacious Beethoven Rooms in Cavendish Square, then to the Queen's Concert Rooms in Hanover Square, and finally to St. James's Hall in Regents Square. At first these concerts were of instrumental and chamber works and piano arrangements. In 1868, they had grown to include choral works, which allowed pieces such as Liszt's Soldatenlied and choruses from Wagner's Tannhäuser and Lohengrin to <b>be</b> <b>programmed.</b> By 1871, the concerts had been changed to an orchestral format.|$|E
40|$|First, {{this paper}} defines a {{subclass}} of algebraic specifications. Each specification of the subclass {{consists of two}} sub-specifications: a <b>BE</b> <b>program</b> and a <b>BE</b> interpreter specification. The syntax of <b>BE</b> <b>programs</b> resembles the syntax of LOTOS, and the semantics of <b>BE</b> <b>programs</b> <b>is</b> defined as a behavior of an interpreter, called a BE interpreter, which has {{a finite number of}} registers and unbounded I/O buffers. Since BE interpreter specifications are based on a state transition model, each specification of the subclass can be easily compiled into an executable program. Next, the paper proposes a method of implementing logical formulae, which are derived from natural language specifications of communication protocols, by <b>BE</b> <b>programs.</b> Such a natural language specification often specifies valid sequences of actions to be performed by a protocol machine. In this implementation method, the meaning of each predicate that corresponds to a word denoting actions is defined as a <b>BE</b> <b>program</b> and stored as a “lexical item” of the predicate. Then, a <b>BE</b> <b>program</b> for logical formulae is constructed in a bottom-up manner. Thus, a natural language specification of communication protocols can be translated into an executable program in the framework of algebraic specifications. [URL]...|$|R
50|$|It <b>was</b> <b>programmed</b> in {{assembly}} language.|$|R
50|$|Jeff Strange <b>is</b> <b>Program</b> Director Manager.|$|R
5|$|Flash memory can <b>be</b> <b>programmed</b> and erased only {{a limited}} number of times. This is often {{referred}} to as the maximum number of program/erasecycles (P/Ecycles) it can sustain over the life of the flash memory. Single-level cell (SLC) flash, designed for higher performance and longer endurance, can typically operate between 50,000 and 100,000 cycles. , multi-level cell (MLC) flash is designed for lower cost applications and has a greatly reduced cycle count of typically between 3,000 and 5,000. Since 2013, triple-level cell (TLC) flash has been available, with cycle counts dropping to 1,000 program-erase (P/E) cycles. A lower write amplification is more desirable, as it corresponds to a reduced number of P/Ecycles on the flash memory and thereby to an increased SSD life.|$|E
5|$|Of {{the moons}} {{discovered}} by the Voyager2 imaging team, only Puck was discovered early enough that the probe could <b>be</b> <b>programmed</b> to image it in some detail. Images showed that Puck has a shape of a slightly prolate spheroid (ratio between axes is 0.97±0.04). Its surface is heavily cratered and is grey in color. There are three named craters {{on the surface of}} Puck, the largest being about 45km in diameter. Observations with the Hubble Space Telescope and large terrestrial telescopes found water-ice absorption features in the spectrum of Puck.|$|E
5|$|Shooting long {{scenes in}} a zero-g {{environment}} was a challenge. Eventually, the team {{decided to use}} computer-generated imagery for the spacewalk scenes and automotive robots to move Bullock's character for interior space station scenes. This meant that shots and blocking had to be planned well in advance for the robots to <b>be</b> <b>programmed.</b> It also made the production period much longer than expected. When the script was finalized, Cuarón assumed it would take about a year to complete the film, but it took {{four and a half}} years.|$|E
50|$|PICAXE {{microcontrollers}} <b>are</b> <b>programmed</b> using BASIC.|$|R
50|$|A GenVoca {{model of}} a domain or {{software}} product line {{is a collection of}} base programs and features (see MetaModels and Program Cubes).The programs (expressions) that can be created defines a product line. Expression optimization <b>is</b> <b>program</b> design optimization, and expression evaluation <b>is</b> <b>program</b> generation.|$|R
5000|$|... 4. INTE (Interrupt enable) - It {{is neither}} an input nor an output; {{it is an}} {{internal}} bit programmed to enable or disable the INTR pin. The INTE A bit <b>is</b> <b>programmed</b> using the PC6 bit and INTE B <b>is</b> <b>programmed</b> using the PC2 bit.|$|R
5|$|A {{wind energy}} {{penetration}} figure {{can be specified}} for different duration of time, but is often quoted annually. To obtain 100% from wind annually requires substantial long term storage or substantial interconnection to other systems which may already have substantial storage. On a monthly, weekly, daily, or hourly basis—or less—wind might supply as much as or more than 100% of current use, with the rest stored or exported. Seasonal industry might then take advantage of high wind and low usage times such as at night when wind output can exceed normal demand. Such industry might include production of silicon, aluminum, steel, or of natural gas, and hydrogen, and using future long term storage to facilitate 100% energy from variable renewable energy. Homes can also <b>be</b> <b>programmed</b> to accept extra electric power on demand, for example by remotely turning up water heater thermostats.|$|E
5|$|In {{the second}} quarter of 2012, the Naga 2012 was released. Similarly to the Naga Epic, it came with {{interchangeable}} side panels. The Naga 2012 supported Razer's Synapse 2.0 software allowing all the buttons to <b>be</b> <b>programmed</b> and that information to be stored online. The other 2012 installment was the Naga Hex, the first mouse in the series to have only six programmable side-on buttons. Razer noted it was made for multiplayer online battle arenas (MOBAs), such as League of Legends and Diablo 3, instead of massively multiplayer online games (MMOs). In May of the same year, the Wraith Red edition was released. The only difference between the versions was the coloring. In March 2013, after the announcement of a partnership between Razer and Riot Games, a League of Legends style Naga Hex was released, with the only difference being the design and the change from a plastic to a matte surface.|$|E
5|$|Before any {{products}} are sold, the company pre-cooks the ingredients and holds {{them in a}} heated holding cabinet. To ensure that product consistency is maintained and {{to reduce the amount}} of products discarded as waste, Burger King utilizes a computerized monitoring system created by Integrated Control Corp, or ICC. The system, called Kitchen Minder, monitors time and temperature in the cabinets and notifies staff and managers when to prepare more food and discard older products. Initially developed from 1998 to 2000, the system is designed to work with a holding cabinet system that was developed by Duke. The initial test designs were time-consuming to program because each bay in the holding units had to <b>be</b> <b>programmed</b> manually. This meant several minutes were required for each product, which added up to several hours to program up to six units with eight bays each. When BK finally deployed the system in 2001, the updated units utilized a Palm Pilot to configure the units using a custom program designed to easily configure the units via Infrared or serial port. A kitchen flow software system that helps centralize information about the system was deployed in 2007; combined with the new equipment, it helped further reduce costs for the company and its franchises by calculating projected sales and actual usage. Along with the holding system, Burger King deployed newer high-speed toasters to decrease make times; the new toasters, while faster, require more maintenance, which increases overall labor costs.|$|E
50|$|Music <b>is</b> <b>programmed</b> via {{a number}} of methods.|$|R
5000|$|... <b>be</b> <b>programming</b> from CBC {{and provincial}} {{educational}} broadcasters ...|$|R
25|$|The {{middle section}} of the western rail corridor, Athenry – Claremorris, has <b>been</b> <b>programmed</b> but not funded under Transport 21 while the Colooney – Claremorris {{northern}} section has not <b>been</b> <b>programmed</b> or funded bar some line clearance work in 2006. Transport 21 is no longer Irish government policy.|$|R
25|$|While {{driving on}} an {{extended}} trip, {{to reduce the}} risk of hypoglycemia, a lower temporary basal rate may <b>be</b> <b>programmed.</b>|$|E
25|$|In 1961, the Burroughs B5000 {{was built}} {{specifically}} to <b>be</b> <b>programmed</b> in the ALGOL 60 language. The hardware featured circuits {{to ease the}} compile phase.|$|E
25|$|These lights can <b>be</b> <b>programmed</b> to {{highlight}} pavilions, illuminate {{the smoke from}} fireworks above the lagoon, or just make interesting patterns in the sky as they cross each other and move.|$|E
5000|$|The {{specification}} <b>is</b> to <b>be</b> <b>programming</b> language-neutral and platform-neutral.|$|R
50|$|A Rectiverter <b>is</b> <b>programmed</b> {{to accept}} either 50 Hz or 60 Hz mains frequency. The {{adaptive}} frequency option enables the Rectiverter to automatically determine the mains frequency, and synchronize. A tolerance of +/- 3 Hz <b>is</b> <b>programmed</b> from factory. The tolerance range {{can be set}} by the user from the controller.|$|R
50|$|Tele-Artist <b>is</b> a {{graphics}} <b>program</b> {{produced by}} Microdeal in 1985. It <b>was</b> <b>programmed</b> by Ray Methuen. It was released for the Dragon 32.|$|R
25|$|OS X Yosemite {{introduced}} JavaScript for Automation (JXA), {{which is}} built upon JavaScriptCore and the Open Scripting Architecture. It features an Objective-C bridge that enables entire Cocoa applications to <b>be</b> <b>programmed</b> in JavaScript.|$|E
25|$|The {{next level}} of {{autonomous}} task performance requires a robot to perform conditional tasks. For instance, security robots can <b>be</b> <b>programmed</b> to detect intruders and respond {{in a particular way}} depending upon where the intruder is.|$|E
25|$|SVG {{drawings}} can be {{dynamic and}} interactive. Time-based {{modifications to the}} elements {{can be described in}} SMIL, or can <b>be</b> <b>programmed</b> in a scripting language (e.g. ECMAScript or JavaScript). The W3C explicitly recommends SMIL as the standard for animation in SVG.|$|E
50|$|The synergy <b>program</b> <b>is</b> a <b>program</b> for {{students}} in grade 8 and 9. It <b>is</b> a <b>program</b> {{for students}} who have demonstrated excellence.|$|R
50|$|The HoloShed <b>is</b> <b>programmed</b> in BASIC {{because the}} writers were {{amused by the}} idea that in the Star Trek universe, any {{simulation}} one wants to experience has already <b>been</b> painstakingly <b>programmed.</b>|$|R
30|$|The {{algorithms}} {{presented in}} this study <b>are</b> <b>programmed</b> in MATLAB script.|$|R
