301|73|Public
5|$|Another {{hardware}} quirk produced one of {{the most}} distinctive aspects of the ZX81's screen display – during loading or saving, moving zigzag stripes appear across the screen. The same pin on the ULA is used to handle the video signal and the tape output, producing the stripes as an interference pattern of sorts. The ULA cannot maintain the display during SAVE and LOAD operations, as it has to operate continuously to maintain the correct <b>baud</b> <b>rate</b> for data transfers. The interference produces the zigzag stripes.|$|E
25|$|For its {{transmission}} speed, RTTY has low spectral efficiency. The typical RTTY signal with 170Hz {{shift at}} 45.45 baud requires around 250Hz receiver bandwidth, {{more than double}} that required by PSK31. In theory, at this <b>baud</b> <b>rate,</b> the shift size can be decreased to 22.725Hz, reducing the overall band footprint substantially. Because RTTY, using either AFSK or FSK modulation, produces a waveform with constant power, a transmitter {{does not need to}} use a linear amplifier, which is required for many digital transmission modes. A more efficient Class C amplifier may be used.|$|E
25|$|One {{very early}} {{experiment}} in electrical telegraphy was an electrochemical telegraph {{created by the}} German physician, anatomist, and inventor Samuel Thomas von Sömmering in 1809, based on an earlier, less robust design of 1804 by Spanish polymath and scientist Francisco Salva Campillo. Both their designs employed multiple wires (up to 35) in order to visually represent most Latin letters and numerals. Thus, messages could be conveyed electrically up to a few kilometers (in von Sömmering's design), {{with each of the}} telegraph receiver's wires immersed in a separate glass tube of acid. As an electric current was applied by the sender representing each character of a message, it would at the recipient's end electrolyse the acid in its corresponding tube, releasing a stream of hydrogen bubbles next to its associated letter or numeral. The telegraph receiver's operator would visually observe the bubbles and could then record the transmitted message, albeit at a very low <b>baud</b> <b>rate.</b>|$|E
50|$|MDC, {{also known}} as MDC-1200 and MDC-600, is a {{low-speed}} Motorola data system using audio frequency shift keying, (AFSK). MDC-600 uses a 600 <b>baud</b> data <b>rate.</b> MDC-1200 uses a 1,200 <b>baud</b> data <b>rate.</b> Systems employ either {{one of the two}} <b>baud</b> <b>rates.</b> Mark and space tones are 1,200 Hz and 1,800 Hz. The data are sent in bursts over the radio system's voice channel.|$|R
50|$|MDC (Motorola Data Communications), {{also known}} as Stat-Alert, MDC-1200 and MDC-600, is a Motorola two-way radio {{low-speed}} data system using audio frequency shift keying, (AFSK). MDC-600 uses a 600 <b>baud</b> data <b>rate.</b> MDC-1200 uses a 1,200 <b>baud</b> data <b>rate.</b> Systems employ either {{one of the two}} <b>baud</b> <b>rates.</b> Mark and space tones are 1,200 Hz and 1,800 Hz. The data are sent in bursts over the radio system's voice channel.|$|R
50|$|Unlike the POSIX {{terminal}} interface, the Seventh Edition Unix {{terminal interface}} recorded {{input and output}} <b>baud</b> <b>rates</b> directly in the data structure.|$|R
2500|$|... /BAUDRATE=nnn [...] Sets the <b>baud</b> <b>rate</b> of the debug port that is {{used for}} kernel debugging. Use of this switch {{automatically}} enables the /DEBUG switch. [...] Specifies an override for the default <b>baud</b> <b>rate</b> (19200) at which a remote kernel debugger host will connect. [...] Example: /BAUDRATE=115200.|$|E
2500|$|RTTY has {{a typical}} <b>baud</b> <b>rate</b> for Amateur {{operation}} of 45.45 baud (approximately 60 words per minute). It remains popular as a [...] "keyboard to keyboard" [...] mode in Amateur Radio. [...] RTTY has declined in commercial popularity as faster, more reliable alternative data modes have become available, using satellite or other connections.|$|E
2500|$|The optimum {{data rate}} {{used to drive}} the Selectric {{mechanism}} {{turned out to be}} equivalent to 134.5 baud, which was a highly unusual data rate before the appearance of the mechanism. [...] Driving the Selectric mechanism at the more-standard rate of 110 baud appeared to work well, although at a slightly slower speed. [...] However, driving the mechanism at a non-optimal rate would soon result in its failure, by forcing an internal start-stop clutch to actuate for each character typed, thus wearing it out very rapidly. Continuous typing at the proper 134.5 <b>baud</b> <b>rate</b> would engage the clutch only {{at the beginning and end}} of a long sequence of characters, as designed.|$|E
5000|$|Not {{all of the}} {{transmission}} is visible to the user. The most noticeable part of {{the transmission}} is the report of status codes like ACK, GOO, BAD, and SYN for handshaking results. A typical transmission might look like [...] "ACKGOOGOOGOOGOOBADGOOGOOGOOBADGOO," [...] with bad blocks reported to the user just as frequently as they occurred. This allows users to record the error rate according to hour and day of the week, and determine which {{hours of the day}} and which days of the week had cleaner phone lines. Unlike modern computers, the C64 and C128 can poll the User Port (where the modem is interfaced) at slightly different <b>BAUD</b> <b>rates</b> and connection speeds. For instance, a transmission at 1200 BAUD on Sunday evening might actually produce fewer errors than 2400 BAUD on Tuesday afternoon. By choosing slower <b>BAUD</b> <b>rates,</b> files can actually be transmitted faster than at higher <b>BAUD</b> <b>rates,</b> inasmuch as there are fewer resendings in a given transfer.|$|R
50|$|CBterm 5.0 was favourably {{reviewed}} in Run, with columnist Loren Lovhaug praising its speed, customizability, and CompuServe compatibility. Some criticism was levied {{at the lack}} of native support for Punter and for <b>baud</b> <b>rates</b> other than 300 and 1200.|$|R
50|$|The seven bits {{resulting}} are {{converted from}} parallel to serial, sending the left-most element first, and then modulated onto a radio carrier using frequency shift keying. Standard <b>baud</b> <b>rates</b> are 48, 64, 72, 86, 96, 144, and 192 baud.|$|R
5000|$|Most of modems seen {{in market}} {{at this time}} support autobaud. Before {{receiving}} any input data, most modem use a default <b>baud</b> <b>rate</b> 9600 for default output <b>baud</b> <b>rate.</b> For example, the following modems have been verified for autobaud and default output <b>baud</b> <b>rate</b> 9600.|$|E
5000|$|Example {{of use and}} {{misuse of}} [...] "baud rate": It is correct to write [...] "the <b>baud</b> <b>rate</b> of my COM port is 9,600" [...] if we mean that the bit rate is 9,600 bit/s, since there is one bit per symbol in this case. It is not correct to write [...] "the <b>baud</b> <b>rate</b> of Ethernet is 100 megabaud" [...] or [...] "the <b>baud</b> <b>rate</b> of my modem is 56,000" [...] if we mean bit rate. See below for more details on these techniques.|$|E
5000|$|... /BAUDRATE=nnn [...] - [...] Sets the <b>baud</b> <b>rate</b> of the debug port that is {{used for}} kernel debugging. Use of this switch {{automatically}} enables the /DEBUG switch. [...] Specifies an override for the default <b>baud</b> <b>rate</b> (19200) at which a remote kernel debugger host will connect. [...] Example: /BAUDRATE=115200.|$|E
50|$|The {{original}} protocol operated at 4800 baud {{with subsequent}} releases standardising on 9600 baud. Low cost bridge chips {{are now available}} {{from a number of}} manufacturers to allow ccTalk to run over USB at <b>baud</b> <b>rates</b> of at least 1 Mbit/s.|$|R
5000|$|By 2003, it {{was used}} in Europe and Japan in {{electronic}} toll collection.DSRC systems in Europe, Japan and U.S. are not compatible and include some very significant variations (5.8 GHz, 5.9 GHz or even infrared, different <b>baud</b> <b>rates,</b> and different protocols).|$|R
50|$|Due to some mixed <b>baud</b> <b>rates</b> {{between the}} {{connected}} systems, the compatibility with CHIPS means that some devices will have reduced transfer rates, but CHIPS are primary designed for Lab-, office-, home-, factory- and building automation {{also used in}} Internet of Things.|$|R
5000|$|During the autobaud process, the <b>baud</b> <b>rate</b> of {{received}} character {{stream is}} determined byexamining the received pattern and its timing, {{and the length}} of a start bit. These type of <b>baud</b> <b>rate</b> detection mechanism are supported by many hardware chips including processors such as MPC8280, MPC8360, and so on.|$|E
5000|$|Dual-channel UART and <b>baud</b> <b>rate</b> {{generator}} for {{serial communications}} ...|$|E
5000|$|Two {{full-duplex}} {{serial interfaces}} with own <b>baud</b> <b>rate</b> generators ...|$|E
5000|$|An optical {{communication}} system transmitter {{consists of a}} digital-to-analog converter (DAC), a driver amplifier and a Mach-Zehnder-Modulator. The deployment of higher modulation formats (> 4QAM) or higher <b>Baud</b> <b>rates</b> (> 32 GBaud) diminishes the system performance due to linear and non-linear transmitter effects. These effects can be categorised in linear distortions due to DAC bandwidth limitation and transmitter I/Q skew as well as non-linear effects caused by gain saturation in the driver amplifier and the Mach-Zehnder modulator. Digital predistortion counteracts the degrading effects and enables <b>Baud</b> <b>rates</b> up to 56 GBaud and modulation formats like 64QAM and 128QAM with the commercially available components. The transmitter digital signal processor performs digital predistortion on the input signals using the inverse transmitter model before uploading the samples to the DAC.|$|R
50|$|Digi XBee is {{the brand}} name {{of a family of}} form factor {{compatible}} radio modules from Digi International. The first XBee radios were introduced under the MaxStream brand in 2005 and were based on the IEEE 802.15.4-2003 standard designed for point-to-point and star communications at over-the-air <b>baud</b> <b>rates</b> of 250 kbit/s.|$|R
50|$|Thanks to the {{performance}} of EtherCAT, communication with external fieldbus masters is as fast as with traditional cards connected via PCI or other backbone buses. Since decentralized fieldbus interfaces lead to shorter extensions, they can be operated with even higher <b>baud</b> <b>rates</b> than would have been possible with the traditional architecture.|$|R
5000|$|POKEY {{is a sort}} of UART. Usually one of the doubled audio {{channels}} is used as <b>baud</b> <b>rate</b> generator. The standard <b>baud</b> <b>rate</b> is 19.2 kbit/s, {{the maximum}} possible <b>baud</b> <b>rate</b> is 127 kbit/s. A byte put into the SEROUT register is automatically sent over the serial bus. The data frame contains 10 bits: 1 start bit, 8 data bits, 1 stop bit. The voltage levels are 0 V (logical 0) and +4 V (logical 1). It is possible to connect the Atari serial port with an RS-232 port by means of a simple voltage converter.|$|E
5000|$|Direct {{memory access}} (DMA) circuitry, {{interrupt}} controller, time-slot assigner and <b>baud</b> <b>rate</b> generators.|$|E
5000|$|... where fs is the <b>baud</b> <b>rate</b> in symbols/second or pulses/second. (See Hartley's law).|$|E
50|$|The {{terminal}} only supported forward scrolling {{and direct}} cursor addressing; no fancier editing functions were supported. No special character renditions (such as blinking, bolding, underlining, or reverse video) were supported. The VT05 supported asynchronous communication at <b>baud</b> <b>rates</b> up to 2400 {{bits per second}} (although fill characters were required above 300 bits per second).|$|R
5000|$|The later MAX232A is {{backward}} {{compatible with the}} original MAX232 but may operate at higher <b>baud</b> <b>rates</b> and can use smaller external capacitors 0.1 μF {{in place of the}} 1.0 μF capacitors used with the original device. [...] The newer MAX3232 and MAX3232E are also backwards compatible, but operates at a broader voltage range, from 3 to 5.5 V.|$|R
50|$|X00 was {{developed}} by Raymond L. Gwinn from 1989 until 1993. The final release version was version 1.50, with a later beta version 1.53 which added support for <b>baud</b> <b>rates</b> above 38400. X00 is free for non-commercial usage. X00 included many enhancements to the FTC FOSSIL revision 5 specifications, which were later used in other FOSSIL drivers such as ADF and NetFoss.|$|R
5000|$|... query {{the input}} <b>baud</b> <b>rate</b> from the implementation-defined fields in a [...] {{structure}} ...|$|E
5000|$|... set {{the input}} <b>baud</b> <b>rate</b> in the implementation-defined fields in a [...] {{structure}} ...|$|E
5000|$|An on-chip {{bit rate}} (<b>baud</b> <b>rate)</b> {{generator}} to control transmit and receive data rate.|$|E
50|$|A Commodore 64 (or Commodore 128 in 64 mode) is {{required}} to run C*Base. All CBM and CMD floppy and hard drives are supported, {{as well as the}} Lt. Kernal hard drive. Modem <b>baud</b> <b>rates</b> up to 2400 are supported through the user port, and up to 9600 through the cartridge port. The program is fully compatible with CPU and disk accelerators such as TurboMaster and JiffyDOS.|$|R
40|$|This {{correspondence}} {{presents the}} architecture of a high-speed low-complexity digital receiver for wideband satellite communications supporting multiple <b>baud</b> <b>rates,</b> ranging from 10 to 200 MBaud. The design of the modem {{is based on the}} Cascaded Integrator-Comb (CIC) scheme which exploits a parallel processing so as to provide an outstanding decimation agility. Eventually, bit error rate (BER) performance of the multi-rate receiver are assessed by floating-point simulations...|$|R
5000|$|The {{order of}} the fields within the [...] {{structure}} is not defined, and implementations are allowed to add non-standard fields. Indeed, implementations have to add non-standard fields for recording input and output <b>baud</b> <b>rates.</b> These are recorded in the structure, in an implementation-defined form, and accessed via accessor functions, rather than by direct manipulation of the field values, {{as is the case}} for the standardized structure fields.|$|R
