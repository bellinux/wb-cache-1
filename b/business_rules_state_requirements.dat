0|10000|Public
40|$|Documentation of created {{variables}} {{within a}} data warehouse requires {{a compromise between}} definitions in code (Base SAS) and text supplied by analysts. <b>Business</b> <b>rules</b> nestled within code serve no documentation audience other than skilled SAS programmers, not management and analysts who ultimately provide the logic for these <b>rules.</b> However, <b>business</b> <b>rules</b> <b>stated</b> purely {{in terms of the}} customer are not directly translatable into code without major concession to both the code sophistication and the expertise of the customers. A workable solution is to store each busines...|$|R
40|$|Nowadays, many authors {{suggest that}} <b>business</b> <b>rules</b> are a special class of {{information}} system requirements. <b>Business</b> <b>rules</b> {{should have a}} special handling, from the earliest analysis phases to the implementation. The related literature states many ways for <b>business</b> <b>rule</b> specification, among them, the UML Object Constraint Language (OCL). OCL is an adequate choice for formal representation of <b>business</b> <b>rules.</b> <b>Business</b> <b>rules</b> <b>stated</b> in OCL can be translated into pieces of code that implements the desired capability. Moreover, the system can automatically infer the events where this code must be evaluated. This paper presents the design and implementation of Athena, an OCL constraint enforcement engine built {{on the top of}} a commercial relational DBMS (Oracle). In addition, we evaluated the use of the Athena in a real application. The enforcement engine was designed to offer the highest functionality at the minimum impact in the style of database design and access. As a result, it was possible to couple a <b>business</b> <b>rule</b> layer to an existing application with little effort, in an incremental approach. The ability to quickly create and maintain <b>business</b> <b>rules</b> was greatly improved, resulting in a large improvement of productivity. The overall programming effort spent on enforcing <b>business</b> <b>rules</b> was greatly reduced, and the <b>business</b> <b>rules</b> were <b>stated</b> declaratively. The system automatically discovers the events where the rules must be fired. To bring this functionality to existing RDBMS represents a great progress in the evolution of relational technology. Moreover, the main result is that the <b>business</b> <b>rule</b> system assures that a buggy or ill-programmed function in the application will not accidentally violate a <b>business</b> <b>rule.</b> 1...|$|R
50|$|For example, a <b>business</b> <b>rule</b> might <b>state</b> that {{no credit}} check {{is to be}} {{performed}} on return customers. Other examples of <b>business</b> <b>rules</b> include requiring a rental agent to disallow a rental tenant if their credit rating is too low, or requiring company agents to use a list of preferred suppliers and supply schedules.|$|R
40|$|In this paper, {{we examine}} the design of {{business}} process diagrams in contexts where novice analysts only have basic design tools such as paper and pencils available, and little to no understanding of formalized modeling approaches. Based on a quasi-experimental study with 89 BPM students, we identify five distinct process design archetypes ranging from textual to hybrid, and graphical representation forms. We also examine {{the quality of the}} designs and identify which representation formats enable an analyst to articulate <b>business</b> <b>rules,</b> <b>states,</b> events, activities, temporal and geospatial information in a process model. We found that the quality of the process designs decreases with the increased use of graphics and that hybrid designs featuring appropriate text labels and abstract graphical forms are well-suited to describe business processes. Our research has implications for practical process design work in industry as well as for academic curricula on process design...|$|R
40|$|Process {{modeling}} is {{an important}} design practice in organizational improvement projects. In this paper, we examine the design of business process diagrams in contexts where novice analysts only have basic design tools such as paper and pencils available, and little to no understanding of formalized modeling approaches. Based on a quasi-experimental study with 89 BPM students, we identify five distinct process design archetypes ranging from textual to hybrid and graphical representation forms. We examine {{the quality of the}} designs and identify which representation formats enable an analyst to articulate <b>business</b> <b>rules,</b> <b>states,</b> events, activities, temporal and geospatial information in a process model. We found that the quality of the process designs decreases with the increased use of graphics and that hybrid designs featuring appropriate text labels and abstract graphical forms appear well-suited to describe business processes. We further examine how process design preferences predict formalized process modeling ability. Our research has implications for practical process design work in industry as well as for academic curricula on process design...|$|R
40|$|Service {{composition}} {{has become}} an important paradigm for building distributed applications and e-business processes. While effort {{has been reported to}} verify a posteriori whether a given composition such as a BPEL schema satisfies the predefined behavioural properties, little effort has been made to utilise the properties to assist the designer in developing a correct service composition in the first place. This paper reports our first attempt towards this goal by presenting a framework and associated techniques to provide automated guidance to the designer during the composition design process. The guidance can be suggestions on the next valid steps in the business process, identifications of missing/misplaced steps, and/or propositions for inserting, deleting or reordering activities. The guidance is provided based on the temporal <b>business</b> <b>rules</b> which <b>state</b> the temporal/sequential relationships between business activities. Jun Han, Yan Jin, Zheng Li, Tan Phan and Jian Y...|$|R
40|$|There {{are various}} {{mechanisms}} for creating an application object model. These mechanisms {{are used for}} modeling the application Meta model and the user models. Some of the mechanisms allow constraints to be specified on object entities. Constraints are expressions and evaluate to either true or false, and are used to specify invariants or act as guards on objects, their attributes or associations. However, they do not derive new states from existing states, nor do constraints create new objects or assert an association dynamically. Thus it becomes cumbersome to specify <b>business</b> <b>rules</b> during modeling, especially the kind of <b>business</b> <b>rules</b> that {{have an impact on}} the association between objects. We present a framework for specifying declarative rules on objects, attributes and associations in the object-model for a domain. Our framework permits the specification of an association which has related <b>business</b> <b>rules,</b> such that the rules are apparent during modeling, and also provides a mechanism to evaluate the rules before the association is created between run-time instances of the classes. Using such a framework, some of the <b>business</b> <b>rules</b> can be <b>stated</b> during modeling and need not be buried in the code or be separately defined in a rule language. We discuss the framework and its advantages during modeling. ...|$|R
40|$|Abstract. The {{author has}} {{designed}} {{a framework for}} building web sites using Microsoft’s. NET technology. The framework employs a design approach based upon the Model View Controller (MVC) design pattern. A framework in an object oriented system {{is a collection of}} classes that provide an abstract approach to solving a given problem. Controller The controller is very important to the system, and which is a layer of code that is responsible for processing user requests and determining how to respond. This layer of code is essentially the glue that manages the interaction with all of the system services and layers. The EAF separates the controller layer into three main components. (1) State Machine,(2) Form Based Development Approach,(3) Separate <b>Business</b> <b>Rule</b> Layer <b>State</b> Machine. The Controller layer is based on the use of a state machine. A state machine is a collection of code that processes all user interaction as though they were events in a UML State Chart. Also it is an engine that implements the processing of a UML State Chart. We can view each request that comes into the system as an event that is being fired {{within the context of a}} given state by using it. The state machine is responsible for processing the event and then transitioning t...|$|R
40|$|Abstract: <b>Business</b> <b>rules</b> {{should first}} be {{specified}} at the conceptual level, using concepts and languages easily {{understood by the}} business domain experts who are best qualified to validate the rules. This paper focuses on the verbalization of static <b>business</b> <b>rules</b> (i. e. constraints and derivation rules that apply to individual states of the <b>business),</b> ignoring dynamic <b>rules</b> relating to <b>state</b> transitions and/or workflows. We propose desirable language criteria for rule verbalization, and orthogonal dimensions by which rule verbalizations may be classified, and illustrate these general qualities {{with a wide variety}} of <b>business</b> <b>rule</b> examples, using model fragments depicted graphically in Entity-Relationship, Object-Role Modeling and Unified Modeling Language notations...|$|R
40|$|Businesses are {{changing}} rapidly and organizations tend to act worldwide and are increasingly becoming distributed over the continents. As a consequence, distributed software systems {{have to keep}} track with rapidly changing markets. <b>Business</b> <b>rules</b> provide support for capturing some knowledge that changes frequently. Current <b>business</b> <b>rule</b> systems manage and execute <b>business</b> <b>rules,</b> however, typically lack support for increasingly distributed software systems, in particular, with respect to flexibility and reuse of <b>business</b> <b>rules</b> across distributed rule engines. In this {{paper we propose a}} service-oriented distributed <b>business</b> <b>rules</b> system that manages and deploys <b>business</b> <b>rules</b> to various <b>business</b> <b>rule</b> engines. Furthermore, we present the design and some implementation aspects of a service-oriented <b>business</b> <b>rules</b> system based on WS-Coordination. The system supports management and deployment of <b>business</b> <b>rules</b> to various <b>business</b> <b>rules</b> engines. Furthermore, we present a framework that unifies the access to several heterogeneous <b>business</b> <b>rules</b> engines, and we propose a solution that automatically generates and provisions Web services for executing <b>business</b> <b>rules</b> managed by a <b>business</b> <b>rule</b> engine...|$|R
40|$|<b>Business</b> <b>Rules</b> are formal {{statements}} about the data and processes of an enterprise. In an enterprise, <b>business</b> <b>rules</b> are used to represent certain aspects of a <b>business</b> domain (static <b>rules)</b> or <b>business</b> policy (dynamic <b>rules).</b> Hence, regarding problem domains in the organization, <b>business</b> <b>rules</b> are classified into two groups: static and dynamic <b>business</b> <b>rules.</b> The paper introduces a new concept of <b>business</b> <b>rules,</b> Extended Dynamic <b>Business</b> <b>Rule</b> which contains {{the results of the}} occurrence of <b>business</b> <b>rule's</b> action. In this paper, we focus on such <b>business</b> <b>rules</b> and use Mineau’s approach for modeling them. Mineau’s approach is an extension of Conceptual Graph theory by John Sowa. Keywords: Extended Dynamic <b>Business</b> <b>Rules,</b> Conceptual Graphs, Mineau’s approac...|$|R
40|$|Abstract. <b>Business</b> <b>Rules</b> are formal {{statements}} about the data and processes of an enterprise. They present projections of the organization’s constraints and ways of working on their supporting information systems. Therefore, their collection, structuring and organization should be central activities within information systems. In an enterprise, <b>business</b> <b>rules</b> are used to represent certain aspects of a <b>business</b> domain (static <b>rules)</b> or <b>business</b> policy (dynamic <b>rules).</b> Hence, regarding problem domains in the organization, <b>business</b> <b>rules</b> are classified into two groups: static and dynamic <b>business</b> <b>rules.</b> The paper introduces a new concept of <b>business</b> <b>rules,</b> Extended Dynamic <b>Business</b> <b>Rule</b> (EDBR) which contains {{the results of the}} occurrence of <b>business</b> <b>rule’s</b> action. The focus of this paper is in the organizing, defining and modeling of such <b>business</b> <b>rules</b> using Mineau’s approach. Mineau’s approach is an extension of Sowa’s Conceptual Graph theory...|$|R
40|$|Abstract. <b>Business</b> <b>rules</b> {{approach}} is a modern methodology that could help to improve both qualitative and quantitative properties of traditional Information Systems (IS). In this paper the basics of this approach are discussed and the best known methods of classifying and modelling <b>business</b> <b>rules</b> are analysed. The main aspects {{of the creation of}} <b>business</b> <b>rules</b> repository are viewed through and <b>business</b> <b>rules</b> structuring process is discussed. Basing on the analysis, conceptual <b>business</b> <b>rule</b> repository model is proposed and the process of rule registration is described. Structuring of <b>business</b> <b>rules</b> is illustrated by an example. Conceptual model of <b>business</b> <b>rule</b> manipulation mechanism based on event interception and appropriate rule implementation is presented. ...|$|R
40|$|Organizations {{operate in}} dynamic environments, which require {{continuous}} modifications of business policies. The latter also implies changes in business informatics, {{the basis for}} effective and prosperous operation. To answer to the constant need for modifications and adaptations, {{a new approach to}} information systems design and implementation has been developed, based on separating <b>business</b> <b>rules</b> {{from the rest of the}} information system. In such solutions, <b>business</b> <b>rule</b> execution is entrusted to special <b>business</b> <b>rule</b> management systems, which incorporate development and management tools, including the execution environment. In existing <b>business</b> <b>rules</b> applications, developers are responsible for maintenance of the <b>business</b> <b>rule</b> logic throughout the system lifecycle. In the future we would like to encourage business users to maintain their rules by themselves, and thereby shorten the time needed to deploy new <b>business</b> <b>rules</b> into execution. The Thesis focuses on <b>business</b> <b>rules,</b> introduction of the basic concepts of <b>business</b> <b>rule</b> management systems, and providing appropriate tools for business support. An alternative method for testing <b>business</b> <b>rules,</b> which differs from the standard testing procedure due to their changing nature, is also presented. This delta testing technique simplifies the testing of continuous change in <b>business</b> <b>rules.</b> The IBM WebSphere ILOG JRules <b>business</b> <b>rule</b> management system is then used to introduce the possibilities of direct involvement of business users into the process of applying and managing <b>business</b> <b>rules</b> and thus into the lifecycle of <b>business</b> <b>rules.</b> The functionalities of the selected tools, which are presented in detail, are reviewed in order to assess if they meet our demands. Finally, we review the consequences of the usage of the featured tools in existing <b>business</b> <b>rules</b> applications. We present the possibilities to remedy these consequences, and thereby enable the integration of business users into the entire lifecycle of <b>business</b> <b>rules.</b> ...|$|R
5000|$|... #Caption: Enterprise Designer {{includes}} <b>business</b> <b>rules</b> and <b>business</b> <b>rules</b> designer.|$|R
5000|$|Oracle <b>Business</b> <b>Rules,</b> {{contains}} a JSR 94 <b>Business</b> <b>rules</b> engine ...|$|R
50|$|As {{more and}} more BPM vendors either add <b>business</b> <b>rules</b> engines to their BPM engines or OEM <b>business</b> <b>rules</b> {{management}} systems, <b>business</b> <b>rules</b> seems to be becoming a subset of BPM.|$|R
50|$|The {{programs}} {{designed specifically to}} run <b>business</b> <b>rules</b> are called rule engines. More complete systems that support the writing, deployment and management of <b>business</b> <b>rules</b> are called <b>business</b> <b>rules</b> management systems (BRMSs).|$|R
40|$|Abstract. <b>Business</b> <b>rules</b> are evidently {{important}} for organisations as they describe {{how they are}} doing <b>business.</b> <b>Business</b> <b>rules</b> templates are often proposed {{as a means of}} the specification of <b>business</b> <b>rules.</b> <b>Business</b> <b>rules</b> templates language (BRTL) is a language developed for the specification of <b>business</b> <b>rules</b> templates. This paper documents the findings of an experiment aimed at determining the extent to which <b>business</b> <b>rules</b> specified using BRTL can be used within the model driven development of the financial reporting systems. The results of the experiment are compared with the data available from the four historical projects of the same domain. 1...|$|R
5000|$|<b>Business</b> <b>rule</b> mining {{supports}} a <b>Business</b> <b>rules</b> approach, which {{is defined as}} a formal way of managing and automating an organization's <b>business</b> <b>rules</b> so that the business behaves and evolves as its leaders intend.|$|R
50|$|The XBRL {{standard}} has {{the ability}} to define <b>business</b> <b>rules.</b> These <b>business</b> <b>rules</b> can be found in different places in the XBRL taxonomy, that is in datatypes or linkbases. Application of these <b>business</b> <b>rules</b> will contribute to the reliability of the XBRL report. The <b>business</b> <b>rules</b> can be used by the reporting company, the taxonomy author or the auditor.|$|R
40|$|A <b>business</b> <b>rule</b> is a {{statement}} that defines or constrains some aspects of a business. There has been a growing interest in developing techniques to support the extraction of <b>business</b> <b>rules</b> buried in legacy systems. However, little has been done so far to help understand the semantics of extracted <b>business</b> <b>rules.</b> We propose a framework to support the comprehension of <b>business</b> <b>rules</b> extracted from legacy systems. The framework consists of two levels: a representation level and a presentation level. At the representation level, we proposed a language, BRL, to express <b>business</b> <b>rules.</b> We also perform logical inferences over the set of <b>business</b> <b>rules</b> at this level. This helps to recover some properties {{that may not be}} explicitly available from the extracted <b>business</b> <b>rules,</b> but are essential to their understanding by users. The presentation level, on the other hand, is concerned with how to convey the semantics of <b>business</b> <b>rules</b> to different users. We believe that the expressiveness and reasoning power of our proposed approach significantly improve previous techniques in helping users to comprehend extracted <b>business</b> <b>rule...</b>|$|R
40|$|Abstract. <b>Business</b> <b>rules</b> {{approach}} is quite new and oriented at software systems {{in which the}} rules are separated, logically and physically, from {{other aspects of the}} system. There are several problems arising while managing <b>business</b> <b>rules.</b> In this paper some current software practice is discussed. The fact model and OCL (Object Constraint Language) for <b>business</b> <b>rules</b> collecting are analysed. Events that activate <b>business</b> <b>rules</b> and steps of managing them are discussed. A schema for execution of the <b>business</b> <b>rules</b> is presented...|$|R
50|$|Automated Decision Support {{systems are}} based on <b>business</b> <b>rules.</b> These <b>business</b> <b>rules</b> can be created or {{operated}} by the business analytics. The <b>business</b> <b>rules</b> can trigger an automatic decision {{that is part of}} the business informatics.|$|R
50|$|<b>Business</b> <b>Rule</b> Management Tools. JBoss Developer Studio {{includes}} {{support for}} {{the most widely used}} <b>Business</b> <b>rules</b> engine in the market, Drools. It offers graphical tools to create, edit and manage <b>business</b> <b>rules,</b> rule resources and decision tables.|$|R
40|$|Author {{supplied}} <b>Business</b> <b>rules</b> play {{a critical}} role in an organization’s daily activities. With the increased use of <b>business</b> <b>rules</b> (solutions) the interest in modelling guidelines that address the manageability of <b>business</b> <b>rules</b> has increased as well. However, current research on modelling guidelines is mainly based on a theoretical view of modifications that can occur to a <b>business</b> <b>rule</b> set. Research on actual modifications that occur in practice is limited. The goal of this study is to identify modifications that can occur to a <b>business</b> <b>rule</b> set and underlying <b>business</b> <b>rules.</b> To accomplish this goal we conducted a grounded theory study on 229 rules set, as applied from March 2006 till June 2014, by the National Health Service. In total 3495 modifications have been analysed from which we defined eleven modification categories that can occur to a <b>business</b> <b>rule</b> set. The classification provides a framework for the analysis and design of <b>business</b> <b>rules</b> management architectures...|$|R
40|$|At the Information Systems Department of Kaunas University of Technology the {{employees}} are simultaneously working in several projects, {{carry out research}} activities, deliver lectures, participate in conferences and seminars. It {{is essential for the}} staff of the department that to perform all assignments within the specified time frame and complying with determined schedules. Currently used IS cannot ensure proper work coordination in this department. The study goal is to improve and computerize the process of the department labor organizing, creating a specialized information system enhanced with the <b>business</b> <b>rules</b> subsystem. The idea is that the system of the determined <b>business</b> <b>rules</b> would be helpful both for department administration and employees themselves in optimizing and organizing labor while evaluating present situation (in the employment rates and other factors). The paper analyzes the <b>business</b> <b>rules</b> (BR) management systems (BRMS). It reviews the advantages and limitations of the system. It deals with the operating <b>business</b> <b>rules</b> of the use of information systems capabilities. BRMS Blaze Advisor was selected to create the <b>business</b> <b>rules</b> management subsystem of department's work planning information system. Architecture, Structured Rule Language (SRL) and components of BRMS were analyzed on purpose to reach our goals. Main methods of using BA advisor components (decision tables, decision trees, rule flows, “IF… THEN…” <b>rules)</b> are <b>stated</b> in this work. Processes of component management are presented in activity diagrams. Methodology of BRMS Blaze Advisor integration with online information systems were created during the analysis, design, development, testing and documenting of the work planning information system. Also instructions for the <b>business</b> <b>rules</b> management user interface were created. It enables user to create and modify <b>business</b> <b>rules.</b> Employees of the organization get the ability to control business. processes, if the systems are implemented using proposed methodology...|$|R
40|$|Abstract: Research on {{ontology}} {{is becoming}} increasingly widespread in the computer science community, and its importance is being recognized in a multiplicity of research fields and application areas, including and knowledge engineering. Ontology represents the real-world domain knowledge, which part is <b>business</b> <b>rules.</b> We analyse ontology and <b>business</b> <b>rule</b> concepts and define how <b>business</b> <b>rules</b> are related with domain ontology. The main {{purpose of this paper}} is to show how domain ontology can be used for eliciting of <b>business</b> <b>rules.</b> Key words: Formal ontology, <b>business</b> <b>rules</b> model, ECA rules...|$|R
40|$|Discovering <b>business</b> <b>rules</b> from <b>business</b> process {{models are}} of {{advantage}} {{to ensure the}} compliance of business processes with <b>business</b> <b>rules.</b> Furthermore it provides the agility of business processes in case of <b>business</b> <b>rules</b> evolution. Current approaches are limited on types of rules that can be discovered. This paper analyses the expression power of some popular business process modelling languages in embedding <b>business</b> <b>rules</b> in its presentation and provides indicators to extract various types of <b>business</b> <b>rules</b> from <b>business</b> process models. Comment: International Conference on Computer Systems and Technologies - CompSysTech' 11, 7 page...|$|R
50|$|Business logic {{should be}} {{distinguished}} from <b>business</b> <b>rules.</b> <b>Business</b> logic is the portion of an enterprise system which determines how data is transformed or calculated, {{and how it is}} routed to people or software (workflow). <b>Business</b> <b>rules</b> are formal expressions of business policy. Anything that is a process or procedure is business logic, and anything that is neither a process nor a procedure is a <b>business</b> <b>rule.</b> Welcoming a new visitor is a process (workflow) consisting of steps to be taken, whereas saying every new visitor must be welcomed is a <b>business</b> <b>rule.</b> Further, <b>business</b> logic is procedural whereas <b>business</b> <b>rules</b> are declarative.|$|R
40|$|<b>Business</b> <b>rules</b> change quite often. These changes {{cannot be}} handled effciently by {{representing}} <b>business</b> <b>rules</b> {{embedded in the}} source code of the business logic. Effcient handling of rules that govern ones business is one factor for success. That is where <b>business</b> <b>rules</b> engines play an important role. The service-oriented computing paradigm {{is becoming more and}} more popular. Services offered by di#erent providers, are composed to new services by using Web service composition languages such as BPEL. Such process-based composition languages lack the ability to use <b>business</b> <b>rules</b> managed by different <b>business</b> <b>rules</b> engines in the composition process. In this paper, we propose an approach on how to use and integrate <b>business</b> <b>rules</b> in a serviceoriented way into BPEL...|$|R
40|$|<b>Business</b> <b>rules</b> are compact {{statements}} that depict {{important aspects of}} business processes. For most enterprises, <b>business</b> <b>rules</b> are embedded in the information systems. As change is inherent in software, information systems turn into legacy ones and their documentations may not reflect the actual business logics. Thus, <b>business</b> <b>rules</b> in legacy systems become significant investments, and {{it is necessary to}} evolve legacy systems without simply getting rid of the embedded <b>business</b> <b>rules.</b> This paper studies the scheme of business rule-based legacy systems evolution. To locate valuable functionalities, reengineering techniques are used to comprehend legacy system. Then <b>business</b> <b>rules</b> are extracted from these functionalities by means of information flow analysis and decomposition slicing. Since service-oriented architecture is flexible to reuse components and connect components with changes in <b>business,</b> <b>business</b> <b>rules</b> are stored and managed by a service-oriented <b>business</b> <b>rule</b> management system. A case study is illustrated to show the scheme can preserve valuable <b>business</b> <b>rules,</b> facilitate evolving <b>business</b> rule-based legacy systems, and involve non-technical users to business related software evolution...|$|R
40|$|<b>Business</b> <b>rules</b> {{provide an}} elegant {{solution}} to manage dynamic business logic by separating business knowledge from its implementation logic. The drawback of most existing <b>business</b> <b>rule</b> approaches {{is the lack}} of standardization and interoperability. The lack of service-orientation and remote accessibility of <b>business</b> <b>rule</b> engines makes it hard to use <b>business</b> <b>rules</b> in distributed environments. This paper contributes the design and implementation of VIDRE (Vienna Distributed Rules Engine), a service-oriented <b>business</b> <b>rule</b> engine based on RuleML. VIDRE enables enterprise applications to access <b>business</b> <b>rules</b> as easy as accessing a database, by exposing rules as Web services. VIDRE uses RuleML as an interlingua to represent facts, rules, and queries. One of the main contributions of the VIDRE approach is the ability to distribute rules and facts across various rule engines, therefore, enabling powerful ways of separating and executing <b>business</b> <b>rules</b> within intra- and interorganizational boundaries. 1...|$|R
40|$|<b>Business</b> <b>rules</b> and <b>business</b> {{processes}} are essential artifacts {{in defining the}} requirements of a software system. Business processes capture <b>business</b> behavior, while <b>rules</b> connect processes and thus control processes and <b>business</b> behavior. Traditionally, <b>rules</b> are scattered inside application code. This approach makes {{it very difficult to}} change rules and shorten the life cycle of the software system. Because rules change more quickly than the application itself, it is desirable to externalize the rules and move them outside the application. This paper analyzes and evaluates three well-known <b>business</b> <b>rules</b> approaches. It also outlines some critical factors that have {{to be taken into account}} in the decision to introduce <b>business</b> <b>rules</b> facilities in a software system. Based on the concept of explicit manipulation of <b>business</b> <b>rules</b> in a software system, the need for a general approach based on <b>business</b> <b>rules</b> is discussed. methodology, <b>business</b> <b>rules.</b> ...|$|R
40|$|In this paper, {{we present}} a novel {{approach}} of translating natural languages specification to SBVR <b>business</b> <b>rules.</b> The <b>business</b> <b>rules</b> constraint <b>business</b> structure or control behaviour of a business process. In modern business modelling, {{one of the important}} phases is writing <b>business</b> <b>rules.</b> Typically, a <b>business</b> <b>rule</b> analyst has to manually write hundreds of <b>business</b> <b>rules</b> in a natural language (NL) and then manually translate NL specification of all the rules in a particular rule language such as SBVR, or OCL, as required. However, the manual translation of NL rule specification to formal representation as SBVR rule is not only difficult, complex and time consuming but also can result in erroneous <b>business</b> <b>rules.</b> In this paper, we propose an automated approach that automatically translates the N...|$|R
5000|$|<b>Business</b> <b>Rules</b> Processing: Every {{transaction}} {{is governed}} by <b>business</b> <b>rules,</b> and these are built into the message processing platform.|$|R
