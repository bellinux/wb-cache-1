0|8285|Public
40|$|Part 8 : Demos and PostersInternational audienceThe {{trend of}} Open Data and Internet-of-Things {{initiatives}} {{contribute to the}} ever growing amount of data available through web APIs. While building web applications has become easier with recent advancement in web development technologies and proliferation of JavaScript frameworks, the access to data from various APIs and data stores still poses certain challenges. It often requires complex setup and advanced programming skills that hinder the rapid prototyping efforts. Therefore, we propose Endev, a declarative framework for prototyping applications that is built on modern web technologies and supports <b>building</b> <b>modern</b> web <b>applications,</b> that utilize the vast amount of available data, {{without the need for}} setup or write complex JavaScript code...|$|R
40|$|Abstract. Efficiently {{accessing}} multidimensional data is {{a challenge}} for <b>building</b> <b>modern</b> database <b>applications</b> that involve many folds of data such as temporal, spatial, data warehousing, bio-informatics, etc. This problem {{stems from the fact}} that multidimensional data have no given order that preserves proximity. The ma-jority of the existing solutions to this problem cannot be easily integrated into the current relational database systems since they require modifications to the kernel. A prominent class of methods that can use existing access structures are ‘space filling curves’. In this study, we describe a method that is also based on the space filling curve approach, but in contrast to earlier methods, it connects regions of various sizes rather than points in multidimensional space. Our approach allows an efficient transformation of interval queries into regions of data that results in significant improvements when accessing the data. A detailed empirical study demonstrates that the proposed method outperforms the best available off-the-shelf methods for accessing multidimensional data. ...|$|R
40|$|Efficient {{management}} of multidimensional data {{is a challenge}} when <b>building</b> <b>modern</b> database <b>applications</b> that involve many fold data such as temporal, spatial, data warehousing, bio-informatics, etc. This problem {{stems from the fact}} that multidimensional data has no order that preserves proximity. The majority of existing solutions to this problem cannot be easily integrated into the current relational database systems since they require modifications to the kernel. A prominent class of methods that can use existing access structures are 'space filling curves'. In this work we describe a method that is also based on the space filling curve approach, but in contrast to earlier methods, it connects regions of various sizes rather than points in multidimensional space. Our approach allows efficient transformation of interval queries into regions of data which results in significant improvements when accessing the data. In detailed empirical study, we have demonstrated that the proposed method, which can be integrated within the commercial RDBMS, outperforms the best available off-the-shelf methods for accessing multidimensional point data. Full Tex...|$|R
40|$|Java and {{distributed}} object models {{are important for}} <b>building</b> <b>modern,</b> scalable, interoperable <b>applications.</b> This paper {{is focused on the}} performance analysis, comparison and optimization of distributed object middleware for Java 2 : RMI (Remote Method Invocation), IDL (Interface Definition Language – CORBA) and RMI-IIOP (Remote Method Invocation over Internet Inter-ORB Protocol). The paper presents the following contributions to the research on distributed object performance. First, a detailed performance analysis is provided with the comparison. These results help to understand how the models perform. Second, an overhead analysis has been done, which explains why there are differences in performance. Third, optimizations and improved performance for RMI-IIOP and IDL are presented. These show considerably better performance in all areas compared to the original versions...|$|R
40|$|This report {{summarizes}} {{the activities and}} results of a cooperative agreement. The scope focused on natural gas fuel processing subsystems for fuel cell systems {{that could be used}} in <b>modern</b> <b>buildings.</b> The focus of this project was the development of a natural gas (NG) fueled, fuel processing subsystem (FPS) for polymer electrolyte membrane (PEM) fuel cell systems in <b>modern</b> <b>buildings</b> <b>applications.</b> This cooperative development program was coordinated with several parallel programs that were related to integrated fuel processor developments for fuel cell systems. The most significant were the development of an integrated fuel-flexible, fuel processing subsystem (DE-FC 02 - 97 EE 0482) and internal HbT programs to develop autothermal reforming (ATR) technologies and to develop a commercially viable stationary subsystem...|$|R
40|$|Distributed object {{architectures}} and Java {{are important}} for <b>building</b> <b>modern,</b> scalable, web-enabled <b>applications.</b> This paper is focused on qualitative and quantitative analysis of two distributed object models for use with Java: CORBA and RMI. We compare both models in terms of features, maturity, legacy system support and ease of development. Focus is given to performances. We present performance results based on real world scenarios that include single client and multi-client configurations and different data types and sizes. We evaluate multithreading strategies and analyse code {{in order to identify}} the most time consuming methods. We compare the results and give hints and conclusions. We have found that because of its complexity CORBA is slightly slower than RMI in simple scenarios. On the other hand CORBA handles multiple simultaneous clients and larger data amounts better and suffers from far lower performance degradation under heavy client load. The article presents a solid basis [...] ...|$|R
40|$|This project {{includes}} the imagining, design, build, and {{test of a}} web application that creates and tracks a user’s progress on completing tasks that an administrator has created for the user. The goal of this project {{is to have a}} functioning webpage that is robust and scalable to support many users and many tasks. The application will be developed for use on all modern web browsers, and will have a persistent server to access from any platform. This project was designed to be an exercise in <b>building</b> a <b>modern</b> web <b>application,</b> and as such is written using many different languages, APIs and libraries. The front-end is setup in HTML and CSS, with an approach that a web-designer might update the aesthetic of the application. MySQL is utilized for the server databasing implementation, and PHP, JavaScript and JQuery are used as the bridge between the database and the front-end of the application...|$|R
40|$|Understanding real, large {{distributed}} {{systems can be}} as difficult and important as <b>building</b> them. Complex <b>modern</b> <b>applications</b> that span geographic and organizational boundaries confound performance analysis in challenging new ways. These systems clearly demand new analytic methods, but we are wary of approaches that suffer from the same problems as the systems themselves (e. g., complexity and opacity). This paper shows how to obtain valuable insight into the performance of globally-distributed applications without abstruse techniques or detailed application knowledge: Simple queueing-theoretic observations together with standard optimization methods yield remarkably accurate performance models. The models {{can be used for}} performance anomaly detection, i. e., distinguishing performance faults from mere overload. This distinction can in turn suggest both performance debugging tools and remedial measures. Extensive empirical results from three production systems serving real customers—two of which are globally distributed and span administrative domains— demonstrate that our method yields accurate performance models of diverse applications. Our method furthermore flagged as anomalous an episode of a real performance bug in one of the three systems. ...|$|R
40|$|Thanks to European {{environmental}} {{rules and}} regulations establishment, waste recycling has become a more and more relevant problematic. For manufacturing plants, especially those producing hazardous wastes, expenses linked to waste production have drastically increased over the last decades. In the proposed work, various hazardous and non-hazardous wastes, among: soda-lime and borosilicate glass cullet, cathode ray tubes glass, exhausted lime from fume abatement systems residues, sludge and slags from ferrous and non-ferrous metallurgy, and pre-stabilized municipal solid waste incinerators ashes are used to elaborate several compositions of glass-ceramics. High-temperature treatment (minimum 800 °C) associated to a Direct Sintering process (30 min) was {{an efficient way to}} stabilize chemically the final products. The impact of each waste on the final product’s mechanical properties was studied, but also their synergies between each other, when mixed together. Statistic mixture designs enabled to develop interesting products for <b>modern</b> <b>building</b> <b>applications,</b> such as porous tiles and lightweight panels destined to insulation, with a purpose of fulfilling multifunctional properties...|$|R
40|$|The goal of {{this thesis}} is to design and develop a {{framework}} for <b>building</b> <b>modern</b> single- page <b>application</b> in the JavaScript programming language and describe this approach to development. The work also contains the documentation for a more comfortable use and customization. The content is divided into eight chapters. The introduction {{is followed by the}} retrieval of information resources, including the specifics of the JavaScript programming language and explanation of the formation of single-page application. The description of the basic principles of their functioning, motivation and justification, when and why this approach is appropriate is also included. The work is primarily focused on the issue of single-page application, for which the use of the JavaScript programming language is crucial. For this reason, this work provides a whole chapter about this programming language, also including a description of its history and role in the context of others. Below are the common characteristics of single-page applications frameworks, built on top of the library ReactJS, whose formation is engaged in the following chapter. The developed framework also contains the user guide. The practical outcome of this work is an open source framework for creating serverless single-page applications, which is due to its architecture and documentation appropriately adaptable...|$|R
5000|$|The {{house is}} <b>building</b> (<b>modern</b> English: The house is being built) ...|$|R
50|$|Unicode is {{preferred}} for <b>modern</b> <b>applications.</b>|$|R
5000|$|Barrett, R. D. (2009). 1950-1975: <b>Building</b> <b>Modern</b> Australia (Vol. 8). Australia: Macmillan Education ...|$|R
5000|$|... 2012 - Stages in my {{life and}} taking part in <b>building</b> <b>modern</b> Yemen.|$|R
5000|$|... #Subtitle level 3: Radio-electronic <b>building</b> (<b>modern</b> name: NTU [...] "KhPI" [...] Center for Integrated Technologies) ...|$|R
50|$|Unicode is {{preferred}} to Windows-1257 in <b>modern</b> <b>applications.</b>|$|R
5000|$|... #Caption: Ljungström air {{preheater}} in <b>modern</b> <b>application</b> (2010).|$|R
5000|$|... #Subtitle level 2: Historical {{relevance}} and <b>modern</b> <b>applications</b> ...|$|R
5000|$|... #Subtitle level 3: <b>Modern</b> <b>applications</b> of {{mechanical}} scanning ...|$|R
40|$|<b>Modern</b> <b>Applications</b> {{need to be}} developed, {{performed}} and analysed by a programmer studiously. These systems should be scalable, fault-tolerant and responsive. Reactive Programming is the programming paradigm which encourages these key factors to be implemented over the <b>modern</b> <b>applications</b> {{in order to ensure}} high quality systems. BSc/BAComputer Scienc...|$|R
50|$|The success, esprit and {{discipline}} of FSSF became {{a template for}} <b>building</b> <b>modern</b> special forces worldwide.|$|R
50|$|<b>Modern</b> <b>applications</b> include {{experimental}} High {{altitude wind}} power generation.|$|R
50|$|<b>Modern</b> <b>applications</b> prefer Unicode UTF-8 or UTF-16 to Windows-1255.|$|R
5000|$|... #Subtitle level 2: <b>Modern</b> <b>application</b> {{in common}} law jurisdictions ...|$|R
5000|$|... #Caption: Close up view of Tramways Substation No. 10. Looking at {{the side}} of the <b>building,</b> the <b>modern</b> {{extension}} can be seen, with one third of the <b>building</b> <b>modern</b> yellow brick rather than the original reddish-brown [...] "Burnt Sienna" [...] brick.|$|R
50|$|For <b>modern</b> <b>applications</b> UTF-8 or UTF-16 is a {{preferred}} encoding.|$|R
50|$|Despite nearly 40 {{years of}} existence, STAP has <b>modern</b> <b>applications.</b>|$|R
5000|$|... #Subtitle level 2: <b>Modern</b> <b>applications</b> of {{uses and}} gratifications {{research}} ...|$|R
25|$|Most {{compiled}} languages have {{a standard}} library although programmers can also {{create their own}} custom libraries. Most modern software systems provide libraries that implement {{the majority of the}} system services. Such libraries have commoditized the services which a <b>modern</b> <b>application</b> requires. As such, most code used by <b>modern</b> <b>applications</b> is provided in these system libraries.|$|R
5000|$|<b>Modern</b> <b>Applications</b> News - 2008 Reader’s Choice Awards, CAD/CAM - Third Place ...|$|R
5000|$|... #Caption: Head CT scan (transverse plane) slice -- a <b>modern</b> <b>application</b> {{of medical}} {{radiography}} ...|$|R
5000|$|<b>Modern</b> <b>applications</b> {{have become}} more complex, modular, distributed, interdependent and {{sensitive}} to environmental conditions.|$|R
50|$|An early <b>modern</b> <b>application</b> of the {{catheter}} {{was employed}} by Claude Bernard {{for the purpose}} of cardiac catheterization in 1844. The procedure involved entering a horse’s ventricles via the jugular vein and carotid artery. This appears to be an earlier and <b>modern</b> <b>application</b> of the catheter because this catheter approach technique is still performed by neurosurgeons, cardiologists, and cardiothoracic surgeons.|$|R
40|$|This survey paper {{focuses on}} some {{important}} advanced This survey paper focuses on some important advanced This survey paper focuses on some important advanced This survey paper focuses on some important advanced research directions in key enabling technologies for <b>building</b> <b>modern</b> research directions in key enabling technologies for <b>building</b> <b>modern</b> research directions in key enabling technologies for <b>building</b> <b>modern</b> research directions in key enabling technologies for <b>building</b> <b>modern</b> C 3 I systems. Special attention {{is given to}} communication and C 3 I systems. Special attention is given to communication and C 3 I systems. Special attention is given to communication and C 3 I systems. Special attention is given to communication and intelligent aspects of such systems. Finally, our research experience intelligent aspects of such systems. Finally, our research experience intelligent aspects of such systems. Finally, our research experience intelligent aspects of such systems. Finally, our research experience and future directions in C 3 I systems development are also shown. and future directions in C 3 I systems development are also shown. and future directions in C 3 I systems development are also shown. and future directions in C 3 I systems development are also shown...|$|R
50|$|<b>Modern</b> <b>applications</b> {{of double}} cloth include haute couture coats, blankets, {{furnishing}} fabrics, and some brocades.|$|R
5000|$|... 1940 : The name changes {{again for}} [...] "School of <b>modern</b> <b>applications</b> of radio Bordeaux".|$|R
