30|3011|Public
2500|$|In DOS memory management, {{conventional}} memory, {{also called}} <b>base</b> <b>memory,</b> {{is the first}} 640 kilobytes (...) of the memory on IBM PC or compatible systems. It is the read-write memory directly addressable by the processor {{for use by the}} operating system and application programs. As memory prices rapidly declined, this design decision became a limitation in the use of large memory capacities until the introduction of operating systems and processors that made it irrelevant.|$|E
50|$|In August 1986, Leading Edge cut {{the price}} of the base model by $200, to $1,295, and {{increased}} the <b>base</b> <b>memory</b> of the machine to 512 KB.|$|E
50|$|NoInt {{tries to}} stop {{programs}} from detecting it. This causes read errors if the computer tries {{to access the}} partition table. Systems infected with NoInt have a decrease of 2 kB in <b>base</b> <b>memory.</b>|$|E
2500|$|The {{memory in}} flash drives is {{commonly}} engineered with multi-level cell (MLC) <b>based</b> <b>memory</b> {{that is good}} for around 3,000-5,000 program-erase cycles, but some flash drives have single-level cell (SLC) <b>based</b> <b>memory</b> that is good for around 100,000 writes. There is virtually no limit {{to the number of}} reads from such flash memory, so a well-worn USB drive may be write-protected to help ensure the life of individual cells.|$|R
40|$|Abstract—During the 1990 ’s Ritter, et al. {{introduced}} a new family of associative <b>memories</b> <b>based</b> on lattice algebra instead of linear algebra. These memories provide unlimited storage capacity, unlike linear correlation based models. The canonical lattice <b>based</b> <b>memories,</b> however, are susceptible to noise in the initial input data. We present novel methods of encoding and decoding lattice <b>based</b> <b>memories</b> using two families of Ordered Weighted Average (OWA) operators. The result is a greater robustness to distortion in the initial input data, and {{a greater understanding of}} the effect of the choice of encoding and decoding operators on the behavior of the system. Index Terms—lattice, associative, memory, OWA. I...|$|R
40|$|Abstract. This paper {{proposes a}} <b>memory</b> scheme <b>based</b> on {{abstraction}} for evolutionary algorithms to address dynamic optimization problems. In this memory scheme, the memory does not store good solutions as themselves but as their abstraction, i. e., their approximate {{location in the}} search space. When the environment changes, the stored abstraction information is extracted to generate new individuals into the population. Experiments are carried out to validate the abstraction <b>based</b> <b>memory</b> scheme. The results show {{the efficiency of the}} abstraction <b>based</b> <b>memory</b> scheme for evolutionary algorithms in dynamic environments. ...|$|R
50|$|Additionally, on Intel 80386 machines, DR DOS's EMS memory manager {{allowed the}} OS to load DOS device drivers into upper memory blocks, further freeing <b>base</b> <b>memory.</b> For more {{information}} on this, see the article on the Upper Memory Area (UMA).|$|E
50|$|In {{the context}} of these definitions, a byte is the {{smallest}} primitive; each memory address specifies a different byte. The memory address of the initial byte of a datum is considered the memory address (or <b>base</b> <b>memory</b> address) of the entire datum.|$|E
50|$|The {{advantage}} of DR DOS 5.0 over {{the combination of}} an older DOS plus QEMM was that the DR DOS kernel itself {{and almost all of}} its data structures could be loaded into high memory. This left virtually all the <b>base</b> <b>memory</b> free, allowing configurations with up to 620 KB out of 640 KB free.|$|E
40|$|Background: Patients with Parkinson’s disease {{have been}} {{reported}} to have retrospective memory impairment, while prospective memory, which is memory for actions to be performed in the future, has not yet been investigated. Objective: To investigate the prospective memory of patients with Parkinson’s disease. Methods: Twenty Parkinson’s disease patients and 20 age matched normal controls were given event based and time <b>based</b> prospective <b>memory</b> tasks. In the event <b>based</b> prospective <b>memory</b> task, the sub-ject was asked to perform an action whenever particular words were presented. In the time <b>based</b> pro-spective <b>memory</b> task, the subject was asked to perform an action at certain times. Results: The Parkinson’s disease patients were impaired on the event <b>based</b> prospective <b>memory</b> task but not on the time <b>based</b> prospective <b>memory</b> task. The impairment of the Parkinson’s disease patients on the event <b>based</b> prospective <b>memory</b> task was not the result of their forgetting the content of the pro-spective memory instructions, but the result of their failure to retrieve it spontaneously when the target words appeared. Conclusions: These results suggest that event <b>based</b> prospective <b>memory</b> is impaired in patients with Parkinson’s disease, presumably relating to frontal lobe dysfunction...|$|R
40|$|Two {{acceptability}} judgment {{experiments were}} conducted to investigate the role of similarity in weak islands environments. We tested predictions stemming from a narrow ap-proach to similarity (Featural Relativized Minimality) and from a broad approach to similarity (Cue- <b>based</b> <b>memory</b> model) in generating intervention effects. According to Featural Relativized Minimality, only syntactic features triggering movement modulate similarity amongst elements, while according to the Cue- <b>based</b> <b>memory</b> model both syntactic and semantic features modulate similarity. Results show significant effects of both animacy and reversibility of thematic roles, two features that do not trigger movement. Therefore, our results support the broad approach to similarity...|$|R
5000|$|One {{can imagine}} {{circumstances}} under which a biological being might retain information in non-neural ways (suggesting a Martian with a bitmap <b>based</b> <b>memory,</b> or humans with prosthetics to support memory), thus being neural cannot be {{a necessary condition for}} being cognitive.|$|R
50|$|Perhaps {{the most}} common cards found on early Apple II systems were the Disk II Controller Card, which allowed users of earlier Apple IIs to use the Apple Disk II, a 5¼ inch, 140 kB floppy disk drive; and the Apple 16K Language Card, which {{increased}} the <b>base</b> <b>memory</b> of late-model Apple II and standard Apple II Plus units from 48 kB to 64 kB.|$|E
50|$|Its {{stronger}} {{appeal was}} both delivering a structured language allowed complex programs to be built, free from BASIC's Spaghetti code, and being nearly {{as fast as}} the compiled languages loaded by more expensive computers. Forth programs tend to be more memory-efficient than the bigger programs; as they become bigger, they reuse more previously-defined code. Its starting <b>base</b> <b>memory</b> was equivalent to 2kB up to 4kB in a more common system.|$|E
50|$|Sun {{used the}} same {{enclosure}} as the SPARCstation 4 for the SPARC Xterminal 1, which was, as the name implies, marketed as an X terminal, with no local storage. Unlike the earlier SPARCclassic X, it {{did not use the}} same motherboard as the workstation it was derived from, instead using a lower-powered 50 MHz microSPARC processor and expansion from its <b>base</b> <b>memory</b> of 8 MB to 128 MB rather than 160 MB.|$|E
40|$|Copyright @ Springer-Verlag Berlin Heidelberg 2008. This paper {{proposes a}} <b>memory</b> scheme <b>based</b> on {{abstraction}} for evolutionary algorithms to address dynamic optimization problems. In this memory scheme, the memory does not store good solutions as themselves but as their abstraction, i. e., their approximate {{location in the}} search space. When the environment changes, the stored abstraction information is extracted to generate new individuals into the population. Experiments are carried out to validate the abstraction <b>based</b> <b>memory</b> scheme. The results show {{the efficiency of the}} abstraction <b>based</b> <b>memory</b> scheme for evolutionary algorithms in dynamic environments. This work was supported by the Engineering and Physical Sciences Research Council (EPSRC) of UK under Grant No. EP/E 060722 / 1...|$|R
5000|$|... librte_pmd_memnic_copy.so {{provides}} a Virtual PMD Ethernet layer through shared <b>memory</b> <b>based</b> on 2 <b>memory</b> copies of packets ...|$|R
50|$|As well as present speech production, very often, {{someone will}} have {{difficulty}} remembering things. This memory problem is only disturbing for speech; non-verbal or non-linguistically <b>based</b> <b>memory</b> will be unimpaired. An {{example of a}} child with expressive language disorder can be seen here.|$|R
50|$|In DOS memory management, {{conventional}} memory, {{also called}} <b>base</b> <b>memory,</b> {{is the first}} 640 kilobytes (640 × 1024 bytes) of the memory on IBM PC or compatible systems. It is the read-write memory directly addressable by the processor {{for use by the}} operating system and application programs. As memory prices rapidly declined, this design decision became a limitation in the use of large memory capacities until the introduction of operating systems and processors that made it irrelevant.|$|E
50|$|Memory size {{increments}} for all SDS/XDS/Xerox {{computers are}} stated in kWords, not kBytes. For example, the Sigma 5 <b>base</b> <b>memory</b> is 16K 32-Bit words (64K Bytes). Maximum memory {{is limited by}} the length of the instruction address field of 17 bits, or 128K Words (512K Bytes). Although this is a trivial amount of memory in today's technology, Sigma systems performed their tasks exceptionally well, and few were deployed with, or needed, the maximum 128K Word memory size.|$|E
50|$|Amstrad CPCs are {{equipped}} with either 64 (CPC464, CPC664, 464plus, GX4000) or 128 (CPC6128, 6128plus) KB of RAM. This <b>base</b> <b>memory</b> can be extended by up to 512 KB using memory expansions sold by third-party manufacturers, and by up to 4096 KB using experimental methods developed by hardware enthusiasts. Because the Z80 processor is only able to directly address 64 KB of memory, additional memory from the 128 KB models and memory expansions is made available using bank switching.|$|E
50|$|All passage details <b>based</b> on <b>memory.</b>|$|R
50|$|The {{frontal lobe}} also plays an {{important}} part in integrating longer non-task <b>based</b> <b>memories</b> stored across the brain. These are often memories associated with emotions derived from input from the brain's limbic system. The frontal lobe modifies those emotions to generally fit socially acceptable norms.|$|R
5000|$|Smartcard {{controller}} SmartMX2, P61, flash <b>based</b> persistent <b>memory</b> ...|$|R
5000|$|HP-41 series — Three {{models in}} this series were {{released}} over its lifetime, the 41C, 41CV, and 41CX. The 41C had user configurable program steps and memory registers, alpha-numeric display, user programmable key mappings, and four expansion ports that could hold additional memory, an interface to HP-IL peripherals, a magnetic card reader-writer, or commercial application programs. The 41CV quintupled the amount of <b>base</b> <b>memory,</b> and the 41CX added a clock and some additional functions and memory.|$|E
50|$|LanMan {{normally}} {{ran across}} Microsoft's basic, non-routable NetBIOS/NetBEUI NBF protocol, but Pathworks included a DECnet stack, including layers like the LAT transport used for terminal sessions. The complexity of DECnet by 1980s PC standards {{meant that the}} Pathworks client was a huge software stack to have resident in MS-DOS; configuring the Pathworks client was a complex task, made more so {{by the need to}} preserve enough Conventional memory for DOS applications to run. To keep a reasonable amount of <b>base</b> <b>memory</b> free mandated the use of QEMM or a similar memory manager.|$|E
5000|$|Expansion devices {{respond to}} certain fixed memory {{addresses}} starting at hexadecimal 0xE8 0000 (or 0xFF00 0000 [...] for Zorro III) if the /CFGIN signal is asserted and {{the device is}} not already configured. The CPU reads nibbles of configuration information (usually supplied by a PAL) such as manufacturer ID, product ID, {{and the amount of}} address space the device requires. The CPU then writes a <b>base</b> <b>memory</b> address to the device (or tells it to [...] "shut up" [...] if for some reason it can't be configured), and the device asserts /CFGOUT.|$|E
40|$|This paper {{describes}} a tabu search algorithm {{to solve the}} integrated cellular manufacturing systems design problem. The algorithm makes use of both short term and long term memory aspects, in combination with integer linear programming (ILP), to construct the neighbour solutions. Within the short term memory component, attributive recency <b>based</b> <b>memory</b> is used in tabu lists to determine the tabu status of move operators. Within the long-term <b>memory</b> structures, frequency <b>based</b> <b>memory</b> {{is used in the}} form of residency measures to guide the diversification scheme and explicit memory is used to guide the intensification scheme. Computational results show that the tabu search procedure generates good quality solutions and that better solution times are experienced compared to that of state-of-the-art optimization software, hence proves to be a viable algorithm especially for the larger sized problems. <br/...|$|R
40|$|The Real-Time Specification for Java (RTSJ) {{introduces}} region <b>based</b> <b>memory</b> {{management to}} avoid the need for garbage collection. This region <b>based</b> <b>memory</b> management, however, introduces new possible runtime errors. To ensure that an application developed with the Real-Time Specification for Java executes correctly, {{it has to be}} proven that no runtime errors occur. The use of program-wide pointer analysis for the proof of absence of runtime error conditions such as null pointer uses or illegal casts is still not widespread. Current uses of program-wide pointer analysis focus on applying the results for optimisations in compilers, where a low accuracy of the results leads to missed opportunities for optimisation, which is often tolerable. This papers presents the application of a program-wide data flow analysis to prove the absence of memory related runtime errors such as those introduced by the RTSJ...|$|R
40|$|The CMOS <b>based</b> <b>memories</b> {{are facing}} major issues with {{technology}} scaling, such as decreased reliability and increased leakage power. A point will be reached when the technology scaling issues will overweight the benefits. For this reason, alternate solutions are being proposed in literature, to possibly replace charge <b>based</b> <b>memories.</b> One {{of the most}} promising of these solutions is the spin-transfer-torque magnetic random access memory (STT-MRAM). To evaluate the viability of such solution, one must understand how it behaves under the effect of the various reliability degradation factors. In this paper we propose a methodology which allows for fast reliability evaluation of an STT-MRAM cell under process, voltage, and temperature variations. Our proposed method allows for a sensitivity analysis which will show the designer/test engineer which is the main reliability concern of a certain design. The method is general, and it can be applied to any memory design. Postprint (published version...|$|R
5000|$|The {{system had}} a <b>base</b> <b>memory</b> of 4 KB of core memory with a 2 μs cycle time, {{expandable}} to 32 KB. It supported {{one to four}} input/output channels with up to 16 devices per channel. It offered a choice of line printers between 280 and 1250 lines per minute (lpm), a 400 cards per minute (cpm) card reader, a 160 columns per second card punch, a paper tape reader, a 2.48 MB disk storage unit, and 7 and 9-track half-inch magnetic tape drives. [...] An optional asynchronous terminal could be attached as a console.|$|E
5000|$|Suppose a {{computer}} system has DDR memory, a Memory Divider of 1:1, a FSB operating at 200 MHz and a CPU multiplier of 10x. Then, the <b>base</b> <b>memory</b> clock will operate at (Memory Divider) × (FSB) = 1 × 200 = 200 MHz and the effective memory clock would be 400 MHz since it is a DDR system ("DDR" [...] stands for Double Data Rate; the effective memory clock speed is double the actual clock speed). The CPU will operate at 10 × 200 MHz = 2.0 GHz. Using I/O bus frequency of 200 MHz various types of DRAM will operate as: ...|$|E
50|$|While the MBR boot sector code {{expects to}} be loaded at {{physical}} address 0000hex:7C00hex, all the memory from physical address 0000hex:0501hex (address 0000hex:0500hex is the last one used by a Phoenix BIOS) to 0000hex:7FFFhex, later relaxed to 0000hex:FFFFhex (and sometimes up to 9000hex:FFFFhex)the {{end of the first}} 640 KBis available in real mode. The INT 12h BIOS interrupt call may help in determining how much memory can be allocated safely (by default, it simply reads the <b>base</b> <b>memory</b> size in KB from segment:offset location 0040hex:0013hex, but it may be hooked by other resident pre-boot software like BIOS overlays, RPL code or viruses to reduce the reported amount of available memory in order to keep other boot stage software like boot sectors from overwriting them).|$|E
40|$|Recently {{there is}} a growing {{interest}} in both the architecture and the security community to create a hardware based solution for authenticating system memory. As shown in the previous work, such silicon <b>based</b> <b>memory</b> authentication could become a vital component for creating future trusted computing environments and digital rights protection. Almost all the published work have focused on authenticating memory that is exclusively owned by one processing unit. However, in today's computing platforms, memory is often shared by multiple processing units which support shared system memory and snoop bus <b>based</b> <b>memory</b> coherence. Authenticating shared memory is a new challenge to memory protection. In this paper, we present a secure and fast architecture solution for authenticating shared memory. In terms of incorporating memory authentication into the processor pipeline, we proposed a new scheme called Authentication Speculative Execution. Unlike the previous approach for hiding or tolerating latency of memory authentication, our scheme does not trades security for performance. The novel ASE scheme is both secure to be combined with one-time-pad (OTP) <b>based</b> <b>memory</b> encryption and efficient to tolerate authentication latency. Results using modified rsim and splash 2 benchmarks show only 5 % overhead in performance on dual and quad processor platforms. Furthermore, ASE shows 80 % performance advantage on average over conservative non-speculative execution based authentication. The scheme is of practical use for both symmetric multiprocessor systems and uni-processor systems where memory is shared by the main processor and other co-processors attached to the system bus...|$|R
5000|$|THE {{multiprogramming}} {{system for the}} Electrologica X8 (software <b>based</b> virtual <b>memory</b> without hardware support) ...|$|R
40|$|Reconfigurable {{hardware}} architectures {{represent a}} modern trend in {{development of new}} circuits. A lot of embedded systems is used as mobile devices with high demands on data capacity and power consumption of peripheral devices. This demands are suited with FLASH <b>based</b> <b>memory,</b> like SecureDigital memory card. This bachelors thesis deals {{with the problem of}} usage of this memory card on FITkit development platform...|$|R
