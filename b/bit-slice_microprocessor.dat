5|13|Public
25|$|Intel {{had created}} the first {{microprocessor}}, its 4-bit 4004, in 1971. By 1975, AMD entered the microprocessor market with the Am9080, a reverse-engineered clone of the Intel 8080, and the Am2900 <b>bit-slice</b> <b>microprocessor</b> family. When Intel began installing microcode in its microprocessors in 1976, it entered into a cross-licensing agreement with AMD, granting AMD a copyright license to the microcode in its microprocessors and peripherals, effective October 1976.|$|E
5000|$|Soviet <b>bit-slice</b> <b>microprocessor</b> modules (late 1970s) [...] {{produced}} as К587, К588 [...] and К1883 (U83x in East Germany) ...|$|E
50|$|Intel {{had created}} the first {{microprocessor}}, its 4-bit 4004, in 1971. By 1975, AMD entered the microprocessor market with the Am9080, a reverse-engineered clone of the Intel 8080, and the Am2900 <b>bit-slice</b> <b>microprocessor</b> family. When Intel began installing microcode in its microprocessors in 1976, it entered into a cross-licensing agreement with AMD, granting AMD a copyright license to the microcode in its microprocessors and peripherals, effective October 1976.|$|E
50|$|One or more {{intelligent}} I/O channels controlled peripheral activity. Each of these included a full function microcomputer based around the Z80 which performed control functions and housekeeping. Data transfers {{to and from}} peripheral devices took place via a direct memory access (DMA) path itself constructed using Am2901 <b>bit-slice</b> <b>microprocessors.</b> This allowed the full performance of the Orion memory system and of the peripheral device to be exploited, with the microcomputer able to take corrective action on soft I/O errors. Software on the Orion communicated with the microcomputer using a high level message passing protocol.|$|R
50|$|The CPU {{consisted}} of an ALU {{that was built}} around the Am2901 <b>bit-sliced</b> <b>microprocessor.</b> To this a byte manipulation unit was added which could perform the shifting, rotating and masking operation required for handling eight and sixteen bit data. Additional logic was provided to support both signed and unsigned two's complement comparisons in a single operation, multiple precision arithmetic and floating point normalization. Most operations could be performed in 150 ns, however the cycle time was variable from 125 ns to 200 ns under microprogram control so that timing could be optimized. A microsequencer, based around the Am2910, directed the control flow though the microprogram. It could perform branches, loops and subroutine calls most {{of which could be}} conditional on any of several CPU status conditions.|$|R
40|$|After a short {{review of}} the {{hardware}} and/or software tools {{for the development of}} single-chip, fixed instruction set microprocessor-based systems the author focuses on the software tools for designing systems based on microprogrammed <b>bit-sliced</b> <b>microprocessors.</b> Emphasis is placed on meta-microassemblers and simulation facilities at the register-transfer-level and architecture level. The author reviews available meta-microassemblers giving their most important features, advantages and disadvantages. He also makes extensions to higher-level microprogramming languages and associated systems specifically developed for bit-slices. In the area of simulation facilities the author first discusses the simulation objectives and the criteria for choosing the right simulation language. He concentrates on simulation facilities already used in bit-slices projects and discusses the gained experience, and concludes by describing the way the Signetics meta-microassembler and the ISPS simulation tool have been employed in the design of a fast microprogrammed machine, called MICE, made out to ECL bit-slices. (35 refs) ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe {{design of a}} COBOL editor and interpreter is explored which uses simple, straightforward algorithms similar to the approach found in programmable calculators. The algorithms {{are designed to be}} implemented using the microinstructions of a high-performance <b>bit-slice</b> <b>microprocessor.</b> A possible machine design using a family of microprogrammable four-bit-slice bipolar circuits is outlined. [URL] United States Nav...|$|E
40|$|The {{architectures}} of {{a single}} processor, a three processor, and a multiple processor system are described. The hardware circuits, and software routines required for implementing the three and multiple processor designs are presented. A <b>bit-slice</b> <b>microprocessor</b> was designed and microprogrammed. Maximum throughput was calculated for all three designs. Queue theoretic models for these three designs were developed and utilized to obtain analytical expressions for the average waiting times, overall average response times and average queue sizes. From these expressions, graphs were obtained showing {{the effect on the}} system performance of a number of design parameters...|$|E
40|$|Abstract A {{bit-slice}} microprocessor-based real-time decoder {{has been}} proposed in this paper. A microprocessor-based architecture is preferable because of its programmability, availability, low cost and simplicity of design. Two strategies are adapted to increase throughput of the decoder for real-time decoding. First, <b>bit-slice</b> <b>microprocessors</b> are used and ALU word length is chosen to be {{equal to that of}} a code word. Second, decoding operation is accomplished in two steps, namely (1) Error detection and (2) Error correction. It takes relatively much longer time to correct errors. Therefore, a buffer memory is used to store incoming blocks as more than one block may be received during a decoding cycle. The design is versatile since different decoding algorithms can be executed by changing the microprogram. Minor, apparent and simple changes have {{to be made in the}} design to decode codes of longer block length. Keywords: Bit-slice devices; Coding; Decoding; Microprogramming; Universal AHPL...|$|R
40|$|The Hopkins Ultraviolet Telescope (HUT) is {{a general}} purpose {{moderate}} resolution spectrograph which is now being constructed for launch on the Space Shuttle. The instrument contains a Rowland spectrograph, which {{is located at the}} prime focus of a 0. 9 -m f/ 2 parabola. A description is given of the progress which has been made {{in the development of a}} flight detector for HUT. The detector developed is an intensified photodiode array. The image intensifier part of the detector contains two 25 -mm 80 : 1, 12 -micron pore microchannel plates (PCPs). A thin layer of CsI deposited on the front surface of the first microchannel plate has the objective to increase the quantum efficiency of the detector below 1850 A. The detector system utilizes a spectrometer processor (SP) which is based upon a <b>bit-sliced</b> <b>microprocessor.</b> The current status of the HUT detector system is discussed, and aspects of performance are evaluated. It is felt that the developed system will meet or exceed the design requirements...|$|R
40|$|Includes bibliographical {{references}} (pages 53 - 54) This report {{describes the}} resign {{and implementation of}} a flexible and interactive microprogram simulator. The structure of the simulator is functionally subdivided in four independent blocks: Master Controller, Command Controller, Simulation Controller, Simulation Routines. A high degree of flexibility is obtained by keeping {{the description of the}} machine structure and the simulator procedure apart. An easy-to-modify table-driven system description is used to facilitate updating. Moreover a user friendly command language is provided for user-simulator communication. Proposed uses for the simulator include verification of the hardware design and debugging of the software and firmware. The use of the simulator {{in the development of a}} microprogrammable machine, based on Am 2900 <b>bit-slice</b> <b>microprocessors,</b> is described. The host machine used for the simulator is the CDC CYBER 170 / 750 computer. The simulator itself is written in the PASCAL language. This simulator can also be used as a teaching aid in microprogroming courses. With this tool, one may design and run a microprogram in a more friendly environment than usually found with micropogrammable hardware. This would give the student a simulated ???hands-on??? experience as part of their education in rnicroprogrammning...|$|R
40|$|Abstract-The {{structure}} of microprogrammed processors is largelydeterminedbythe state of(semiconductor) technologyand {{the requirements of}} the task ofemulation. We discuss the impact ofLSIcomponents onmicroprogrammable processorsandinparticular, the effect of large memory arrays, LSI <b>microprocessors</b> (<b>bit-slices),</b> programmable logic arrays,and high-speed shifters. A secondary theme of this article is that microprogramming differs very little from &quot;regular &quot; programming. We argue that the rightapproach tounderstanding microprogranning is torecognize that it isprimarily applied tothetaskofemulation. Wereviewthe requirements ofthe emulation (interpretation) task and indicate what capabilities a microprogrammable processor needs to have in order tomake the process of emulation efficient. We conclude with a taxonomy ofmicroprogrammable processors. Index Terms-Emulation, interpretation, microprocessor, microprogramming, semiconductor technology...|$|R
40|$|The {{structure}} of microprogrammed processors is largely {{determined by the}} state of (semiconductor) technology and the requirements of the task of emulation. We discuss the impact of LSI components on micruprogrammable processors and in par-ticular, the effect of large memory arrays, LSI <b>microprocessors</b> (<b>bit-slices),</b> programmable logic arrays, and high-speed shifters. A secondary theme of this article is that microprogramming differs very little from &quot;regular &quot; programming. We argue that the right approach to understanding microprogramming is to recognize that it is primarily applied to the task of emulation. We review the requirements of the emulation (interpretation) task and indicate what capabilities a microprogrammable processor needs to have {{in order to make the}} process of emulation efficient. We conclude with a taxonomy of microprogrammable processors...|$|R
5000|$|The term [...] "TTL" [...] {{is applied}} to many {{successive}} generations of bipolar logic, with gradual improvements in speed and power consumption over about two decades. The most recently introduced family 74Fxx is still sold today, and was widely used into the late 90s. 74AS/ALS Advanced Schottky was introduced in 1985. As of 2008, Texas Instruments continues to supply the more general-purpose chips in numerous obsolete technology families, albeit at increased prices. Typically, TTL chips integrate {{no more than a}} few hundred transistors each. Functions within a single package generally range from a few logic gates to a <b>microprocessor</b> <b>bit-slice.</b> TTL also became important because its low cost made digital techniques economically practical for tasks previously done by analog methods.|$|R
40|$|A {{software}} system that integrates an ADAGE 3000 Programmable Display Generator into a C. A. D. software package {{known as the}} Solid Modeling Program is described. The Solid Modeling Program (SMP) is an interactive program {{that is used to}} model complex solid object through the composition of primitive geomeentities. In addition, SMP provides extensive facilities for model editing and display. The ADAGE 3000 Programmable Display Generator (PDG) is a color, raster scan, programmable display generator with a 32 -bit <b>bit-slice,</b> bipolar <b>microprocessor</b> (BPS). The modularity of the system architecture and the width and speed of the system bus allow for additional co-processors in the system. These co-processors combine to provide efficient operations on and rendering of graphics entities. The resulting {{software system}} takes advantage of the graphics capabilities of the PDG in the operation of SMP by distributing its processing modules between the host and the PDG. Initially, the target host computer was a PRIME 850, which was later substituted with a VAX- 11 / 785. Two versions of the software system were developed, a phase 1 and a phase 2. In phase 1, the ADAGE 3000 is used as a frame buffer. In phase II, SMP was functionally partitioned and some of its functions were implemented in the ADAGE 3000 by means of ADAGE's SOLID 3000 software package...|$|R
50|$|In 1981, with a {{small number}} of BNR colleagues, Pearson left to found Orcatech Inc., one of the first {{companies}} specialising in the design and development of high resolution intelligent graphics workstations for the computer-aided engineering market. In the early 1980s, the availability of <b>bit-slice</b> and 16-bit <b>microprocessors</b> started to revolutionise high resolution computer graphics terminals which now increasingly became intelligent, semi-standalone and standalone workstations. Graphics and application processing were increasingly migrated to the intelligence in the workstation, rather than continuing to rely on central mainframe and mini-computers. The Orca 3000 was based on Motorola 68000 and AMD bit-slice processors and had Unix as its operating system. It was targeted squarely at the sophisticated end of the design engineering sector and included General Motors, Nortel, Boeing and Lockheed as clients. After developing a portfolio of successful workstation products and a rich portfolio of blue-chip clients, Orcatech went public on the Toronto Stock Exchange in 1983 at a valuation of over $100m, at that time one of the highest valued young technology companies ever to go public on the TSX.|$|R
2500|$|In {{the early}} 1980s, the {{availability}} of <b>bit-slice</b> and 16-bit <b>microprocessors</b> started to revolutionize high-resolution computer graphics terminals which now increasingly became intelligent, semi-standalone and standalone workstations. Graphics and application processing were increasingly migrated to the intelligence in the workstation, rather than continuing to rely on central mainframe and mini-computers. Typical of the early move to high-resolution computer graphics intelligent workstations for the computer-aided engineering market were the Orca 1000, 2000 and 3000 workstations, developed by Orcatech of Ottawa, a spin-off from Bell-Northern Research, and led by David Pearson, an early workstation pioneer. The Orca 3000 was based on Motorola 68000 and AMD bit-slice processors and had Unix as its operating system. It was targeted squarely at the sophisticated end of the design engineering sector. Artists and graphic designers {{began to see the}} personal computer, particularly the Commodore Amiga and Macintosh, as a serious design tool, one that could save time and draw more accurately than other methods. [...] The Macintosh remains a highly popular tool for computer graphics among graphic design studios and businesses. Modern computers, dating from the 1980s, often use graphical user interfaces (GUI) to present data and information with symbols, icons and pictures, rather than text. Graphics are one of the five key elements of multimedia technology.|$|R

