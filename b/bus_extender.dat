5|2|Public
5000|$|... 8X41 Asynchronous {{bidirectional}} <b>bus</b> <b>extender</b> and repeater (SABER) ...|$|E
40|$|This paper {{describes}} the architecture {{and performance of}} a PC-based controller for 7 -DOF dextrous manipulators. The computing platform is a 486 -based personal computer equipped with a <b>bus</b> <b>extender</b> to access the robot Multibus controller, together with a single board computer as the graphical engine, and with a parallel I/O board to interface with a force-torque sensor mounted on the manipulator wrist...|$|E
40|$|This paper {{describes}} the architecture {{and performance of}} a PC-based configuration controller for dexterous 7 -DOF manipulators. The computing platform is a 486 -based personal computer equipped with a <b>bus</b> <b>extender</b> to access the robot Multibus controller, together with a single-board computer as the graphical engine, and a parallel I/O board to interface with a force-torque sensor mounted on the manipulator wrist. The Windows TM environment is enhanced by the iRMX flR real-time operating system that runs the configuration control algorithms for redundancy resolution. The position control algorithm is executed every 2 : 5 ms; motions can be simulated and displayed in real-time by the graphical engine on a separate monitor. The results of several experiments carried out with a Robotics Research manipulator have shown motion control capabilities comparable to those obtained with more extensive computing systems, thus validating the use of PC's for dexterous manipulator control. PCbased moti [...] ...|$|E
40|$|The ESRF {{control system}} was {{developed}} more than 10 years ago, using VME Motorola 68000 CPUs with OS/ 9, connected to control HP/Sun workstations (WS) through TACO. Needs of faster experiments and change to sup-ported hardware require the modernisation of beamline (BL) control. Industrial PCs with Pentium III CPUs run-ning Linux {{have been chosen}} as main control PCI crates. Support of current VME instrumentation is ensured through PCI/VME bus couplers; cPCI crates can also be controlled by PCI/cPCI <b>bus</b> <b>extenders.</b> TACO/TANGO is used to export the instrumentation control through the network. This system is very flexible in terms of configu-rations; it can control a simple BL from a single PC, and it can fit more complex experiments with dedicated PCI/cPCI crates controlled by a client WS. Fast acquisi-tions are implemented with a soft real time, kernel-based mechanism called Hook, which allows simultaneous read-ing of PCI, cPCI and VME cards. SPEC is used as main control application, now featuring a server mode that al-lows PyQt GUIs to easily access the hardware from a higher level...|$|R
40|$|The aim of {{this work}} was to purify, identify, and {{characterize}} the component of goat bulbourethral gland secretion (BUS) re-sponsible for goat sperm deterioration in skim milk <b>extender.</b> <b>BUS</b> extracts promote {{a decrease in the}} percentage of motile spermatozoa, deterioration in the quality of movement, break-age of acrosomes, and cellular death of goat spermatozoa di-luted in skim milk. A 55 - to 60 -kDa monomeric glycoprotein(BUSgp 60 O) was purified by cation-exchange, concanavalin A, and heparin-affinity chromatography and was identified as the only BUS component responsible for the deterioration of sper-matozoa in milk. The BUSgp 60 O was shown to display triacylglyc-erol hydrolase activity, and partial sequences (37 amino acids in all) exhibited 50 - 70 % homology with sequences of various types of pancreatic lipases (PLs), especially PL-related protein 2 (PL-RP 2). In addition, porcine PL produced deterioration of goat sperm properties in milk as effectively as BUS and BUSgp 6 O. These results support the preliminary identification of the goat BUSgp 60 as a bulbourethral lipase belonging to the PL-RP 2 fam-ily. Since seminal plasma also contains factors favorable for sperm survival, it is envisaged that, for the best preservation of goat semen, specific inhibitors of this family of lipase could be added into milk-based extenders without eliminating seminal plasma...|$|R
40|$|An {{extender}} {{system for}} MIL-STD- 1553 buses transparently couples bus components at multiple developer sites. The bus network extender {{is a relatively}} inexpensive system that minimizes the time and {{cost of integration of}} avionic systems by providing a convenient mechanism for early testing without the need to transport the usual test equipment and personnel to an integration facility. This bus network extender can thus alleviate overloading of the test facility while enabling the detection of interface problems that can occur during the integration of avionic systems. With this <b>bus</b> <b>extender</b> in place, developers can correct and adjust their own hardware and software before products leave a development site. Currently resident at Johnson Space Center, the bus network extender is used to test the functionality of equipment that, although remotely located, is connected through a MILSTD- 1553 bus. Inasmuch as the standard bus protocol for avionic equipment is that of MIL-STD- 1553, companies that supply MIL-STD- 1553 -compliant equipment to government or industry and that need long-distance communication support might benefit from this network bus extende...|$|E
40|$|It is very {{difficult}} to fix the hardware errors happen in the complicated system where a common bus and various kinds of modules are used. In the KEKB control computer system, it happened when we put a VME-MXI driver module and a CPU module with Power PC in a subrack of the beam monitor IOC. It took us some time to identify the true source of this problem: a malfunctioning VME-MXI module in the IOC and fix it. The CPU in the beam monitor IOC stopped as often as once in a day or less depending on the configuration of the VME subrack, e. g. number of modules, position of each module, and so on. We have 20 such computers and the frequency of the CPU halts was too much for stable operation of KEKB accelerators. We observed the noises on the signals on the VME backplane when the VME-MXI driver module was accessed. We first tried to make the shape of the waveform better and decrease the number of system halts. For that purpose, we put additional load on to the bus by putting a <b>bus</b> <b>extender</b> module into a slot. It gave us a preferable decrease of system halts but was not the final solution. Then we started to analyze bus signal carefully and found abnormal bus cycles happened when the CPU module requested a write bus cycle to the VME-MXI module and the CPU module did not complete the bus cycle. We reported the fact to the manufacturer and in reply, they sent us patch information about the module. Since we put the patch on all the VME-MXI modules we have, we have not observed any halt. The process of this experience will be described. ...|$|E

