600|782|Public
25|$|Without ko, Go is PSPACE-hard. This is proved by {{reducing}} True Quantified <b>Boolean</b> <b>Formula,</b> {{which is known}} to be PSPACE-complete, to generalized geography, to planar generalized geography, to planar generalized geography with maximum degree 3, finally to Go positions.|$|E
25|$|This {{is proven}} by {{converting}} the Quantified <b>Boolean</b> <b>Formula</b> problem, which is PSPACE-complete, into a sum of small (with polynomial size canonical game trees) Go subgames. Note {{that the paper}} does not prove that Go endgames are in PSPACE, so {{they might not be}} PSPACE-complete.|$|E
25|$|A {{strengthening}} of this result was proved by Reisch by reducing quantified <b>Boolean</b> <b>formula</b> in {{conjunctive normal form}} to Hex played on arbitrary planar graphs. In computational complexity theory, it is widely conjectured that PSPACE-complete problems cannot be solved with efficient (polynomial time) algorithms. This result limits {{the efficiency of the}} best possible algorithms when considering arbitrary positions on boards of unbounded size, but it doesn't rule out the possibility of a simple winning strategy for the initial position (on boards of unbounded size), or a simple winning strategy for all positions on a board of a particular size.|$|E
40|$|In {{this paper}} we study the satisfiability of constant-free {{quantified}} <b>boolean</b> <b>formulas.</b> We {{consider the following}} classes of quantified <b>boolean</b> <b>formulas.</b> Fix a finite set of basic boolean logical functions. Take conjunctions of these basic functions applied to variables in arbitrary way. Finally, quantify existentially or universally some of the variables. Schaefer [20] earlier studied the satisfiability of quantified <b>boolean</b> <b>formulas</b> with constants. He showed that every such problem is either in P or PSPACE-complete and he gave a complete classification of the tractable cases. We extend the PSPACE-hardness results to constantfree quantified <b>boolean</b> <b>formulas</b> obtaining a dichotomy theorem for the satisfiability of constant-free quantified <b>boolean</b> <b>formulas.</b> We find that, in fact, constants do not make a difference when considering the satisfiability of quantified <b>boolean</b> <b>formulas.</b> We also prove a dichotomy theorem {{that allows us to}} improve a previous result on the learnability of quantif [...] ...|$|R
40|$|Abstract — Quantified <b>Boolean</b> <b>formulas</b> are a {{powerful}} representation {{that have been}} used to capture and solve a variety of problems in Artificial Intelligence. While most research has focused on quantified <b>Boolean</b> <b>formulas</b> in prenex normal form (QBF), we explore an alternative representation of quantified <b>Boolean</b> <b>formulas,</b> called Constrained Quantified Formulas (CQF). CQF allows for a more direct representation of many applications. We present complexity results for CQF and for several subclasses of CQF. We have developed a solver, called QRSsat 3, for CQF instances at the second level of the polynomial hierarchy. Computational results of QRSsat 3 are compared with the results of solvers for quantified <b>Boolean</b> <b>formulas</b> in prenex normal form...|$|R
40|$|AbstractSymbolic {{decision}} {{trees are}} not the only way to correlate the relationship between flags and numeric variables. <b>Boolean</b> <b>formulae</b> can also represent such relationships where the integer variables are modelled with bit-vectors of propositional variables. <b>Boolean</b> <b>formulae</b> can be composed to express the semantics of a block and program state, but they are hardly tractable, hence the need to compute their abstractions. This paper shows how incremental SAT can be applied to derive range and set abstractions for bit-vectors that are constrained by <b>Boolean</b> <b>formulae...</b>|$|R
2500|$|In {{computational}} complexity theory, the Cook–Levin theorem, {{also known}} as Cook's theorem, states that the Boolean satisfiability problem is NP-complete. [...] That is, any problem in NP can be reduced in polynomial time by a deterministic Turing machine {{to the problem of}} determining whether a <b>Boolean</b> <b>formula</b> is satisfiable.|$|E
50|$|The {{problem is}} {{complete}} for P under uniform AC reductions. The <b>Boolean</b> <b>Formula</b> Value Problem (or <b>Boolean</b> <b>Formula</b> Evaluation Problem) is the special {{case of the}} problem when the circuit is a tree. The <b>Boolean</b> <b>Formula</b> Value Problem is complete for NC.|$|E
5000|$|A fully {{quantified}} <b>Boolean</b> <b>formula</b> can {{be assumed}} {{to have a very}} specific form, called prenex normal form. It has two basic parts: a portion containing only quantifiers and a portion containing an unquantified <b>Boolean</b> <b>formula</b> usually denoted as [...] If there are [...] Boolean variables, the entire formula can be written as ...|$|E
5000|$|Zhang (2003) {{provides}} some historical background of <b>Boolean</b> <b>formulas.</b>|$|R
40|$|Abstract. In this paper, {{the notion}} of {{equivalence}} models for quantified <b>Boolean</b> <b>formulas</b> with free variables is introduced. The computational complexity of the equivalence model checking problem is investigated in the general case and some restricted cases. We also establish {{a connection between the}} structure of some quantified <b>Boolean</b> <b>formulas</b> and the structure of models...|$|R
5000|$|Such {{a machine}} decides {{quantified}} <b>Boolean</b> <b>formulas</b> in time [...] and space [...]|$|R
5000|$|How many {{different}} variable assignments will satisfy a given general <b>boolean</b> <b>formula?</b> (#SAT) ...|$|E
5000|$|... #SAT, a {{function}} problem {{related to the}} Boolean satisfiability problem, {{is the problem of}} counting the number of satisfying assignments of a given <b>Boolean</b> <b>formula.</b> It is a #P-complete problem (by definition), as any NP machine can be encoded into a <b>Boolean</b> <b>formula</b> by a process similar to that in Cook's theorem, such that the number of satisfying assignments of the <b>Boolean</b> <b>formula</b> is equal to the number of accepting paths of the NP machine. Any formula in SAT can be rewritten as a formula in 3-CNF form preserving the number of satisfying assignments, and so #SAT and #3SAT are equivalent and #3SAT is #P-complete as well.|$|E
5000|$|The {{proof of}} the Valiant-Vazirani theorem {{consists}} of a probabilistic reduction from SAT to SAT such that, with probability at least , the output formula has at most one satisfying assignment, and thus satisfies {{the promise of the}} Unambiguous-SAT problem.More precisely, the reduction is a randomized polynomial-time algorithm that maps a <b>Boolean</b> <b>formula</b> [...] with [...] variables [...] to a <b>Boolean</b> <b>formula</b> [...] such that ...|$|E
40|$|We {{present an}} {{algorithm}} for model checking temporal-epistemic properties of multi-agent systems, {{expressed in the}} formalism of interpreted systems. We first introduce a technique for the translation of interpreted systems into <b>boolean</b> <b>formulae,</b> and then present a model-checking algorithm based on this translation. The algorithm is based on OBDD's, as they offer a compact and efficient representation for <b>boolean</b> <b>formulae...</b>|$|R
40|$|This paper {{proposes a}} new set of {{propagation}} rules for quantified <b>Boolean</b> <b>formulae</b> based on literals and generated automatically thanks to quantified <b>Boolean</b> <b>formulae</b> certificates. Different decompositions by introduction of existentially quantified variables are discussed in order to construct complete systems. This set of rules is compared with already proposed quantified Boolean propagation rule sets and Stålmarck 2 ̆ 7 s method...|$|R
40|$|This thesis {{considers}} {{a class of}} propositional <b>boolean</b> <b>formulas</b> on which various problems related to satisfiability are efficiently solvable by a dynamic programming algorithm. It mainly consists of two larger parts: the first part describes the class of <b>boolean</b> <b>formulas</b> {{we are interested in}} and how to find them, and the second part investigates whether this class of formulas have any practical implications...|$|R
50|$|Buss proved in 1983 that <b>Boolean</b> <b>Formula</b> Evaluation {{problem is}} in ALogTime, a major result in {{complexity}} theory.|$|E
5000|$|Input: A <b>Boolean</b> <b>formula</b> {{of depth}} at most [...] with an AND-gate on top, {{and a number}} [...]|$|E
50|$|Edge Geography is PSPACE-complete. This is proved by {{reducing}} a decision problem of quantified <b>Boolean</b> <b>formula</b> to Edge Geography.|$|E
5000|$|Zhang, Lintao. (2003). Searching for truth: Techniques for satisfiability of <b>boolean</b> <b>formulas.</b> Retrieved October 10, 2005.|$|R
40|$|We {{present an}} {{algorithm}} for symbolic model checking temporal-epistemic properties of multi-agent systems, {{expressed in the}} formalism of interpreted systems. We rst introduce a technique for the translation of interpreted systems into <b>boolean</b> <b>formulae,</b> and then present a model-checking algorithm based on this translation. The algorithm is tailored {{for the use of}} OBDDs, as they oer a compact and ecient representation for <b>boolean</b> <b>formulae...</b>|$|R
40|$|Manyimportantproblemscanbecompactlyrepresented as {{quantified}} <b>boolean</b> <b>formulas</b> (QBF) and {{solved by}} general QBF solvers. To date QBFsolvershavemainlyfocusedondetermining whetherornottheinputQBFistrueorfalse. However,additionalimportantinformationaboutanapplicationcanbegatheredfromitsQBFformulation. Inthispaperwedemonstratethatacircuit-basedQBFsolvercanbeexploitedtoobtainaQ...|$|R
5000|$|The {{quantified}} <b>Boolean</b> <b>formula</b> problem differs {{in allowing}} both universal and existential quantification over {{the values of}} the variables: ...|$|E
5000|$|It is {{important}} to note that while TQBF the language is defined as the collection of true quantified Boolean formulas, the abbreviation TQBF is often used (even in this article) to stand for a totally quantified <b>Boolean</b> <b>formula,</b> often simply called a QBF (quantified <b>Boolean</b> <b>formula,</b> understood as [...] "fully" [...] or [...] "totally" [...] quantified). It {{is important}} to distinguish contextually between the two uses of the abbreviation TQBF in reading the literature.|$|E
5000|$|An {{example of}} a PSPACE-complete problem is the {{quantified}} <b>Boolean</b> <b>formula</b> problem (usually abbreviated to QBF or TQBF; the T stands for [...] "true").|$|E
5000|$|In {{this case}} the {{relation}} [...] is given by tuples of suitably encoded <b>boolean</b> <b>formulas</b> and satisfying assignments.|$|R
40|$|A {{number of}} {{researchers}} have proposed the use of Boolean satisfiability solvers for verifying C programs. They encode correctness checks as <b>Boolean</b> <b>formulas</b> using finitization: loops and recursion are bounded, as {{is the size of}} the input instances. The SAT approach has been shown to find subtle bugs with reasonable resources. However, it does not scale well; in particular, it lacks the ability to handle larger bounds. We present SEBAC, which can handle the same class of programs as the SAT approach, and scales to bounds that are orders of magnitude higher. The key difference between SEBAC and SAT techniques is SEBAC’s use of imperative Boolean sequential circuits, which are <b>Boolean</b> <b>formulas</b> with memory elements instead of the <b>Boolean</b> <b>formulas</b> which are stateless...|$|R
40|$|AbstractThe paper {{investigates the}} {{computational}} complexity of quantified <b>Boolean</b> <b>formulas</b> with fixed maximal deficiency. The satisfiability problem for quantified <b>Boolean</b> <b>formulas</b> with maximal deficiency 1 {{is shown to}} be solvable in polynomial time. For k≥ 1, it is shown that true formulas with fixed maximal deficiency k have models in which all Boolean functions can be represented as CNF formulas over at most 24 k/ 3 universal variables. As a consequence, the satisfiability problem for QCNF formulas with fixed maximal deficiency is in NP and for fixed deficiency the minimal falsity problem is in DP. For two subclasses of quantified <b>Boolean</b> <b>formulas</b> with PSPACE-complete evaluation problem, QEHORN  and QE 2 -CNF , we show that for fixed deficiency the minimal falsity problem can be decided in polynomial time...|$|R
5000|$|Given a <b>boolean</b> <b>formula</b> [...] with {{variables}} , find {{an assignment}} [...] such that [...] evaluates to [...] or decide that no such assignment exists.|$|E
50|$|It is a #P-complete problem, as any NP machine can be encoded into a <b>Boolean</b> <b>formula</b> by {{a process}} {{similar to that in}} Cook's theorem, such that the number of {{satisfying}} assignments of the <b>Boolean</b> <b>formula</b> is equal to the number of accepting paths of the NP machine. Any formula in SAT can be rewritten as a formula in 3-CNF form preserving the number of satisfying assignments, and so #SAT and #3SAT are equivalent and #3SAT is #P-complete as well.|$|E
50|$|One simple {{example of}} a co-NP-complete problem is tautology, the problem of {{determining}} whether a given <b>Boolean</b> <b>formula</b> is a tautology; that is, whether every possible assignment of true/false values to variables yields a true statement. This {{is closely related to}} the Boolean satisfiability problem, which asks whether there exists at least one such assignment. Note that the tautology problem for positive Boolean formulae remains co-NP complete, even though the satisfiability problem is trivial, as every positive <b>Boolean</b> <b>formula</b> is satisfiable.|$|E
40|$|The {{notion of}} minimal unsatisfiability and minimal falsity will be {{extended}} to nonclausal and non-prenex quantified <b>Boolean</b> <b>formulas.</b> For quantified <b>Boolean</b> <b>formulas</b> in negation normal form we generalize the notion of deficiency to the so-called cohesion, which is 1 + {{the difference between the}} number of occurrences of the conjunction symbol ∧ and the number of existential and free variables. Further, we show that all the complexity results with respect to minimal unsatisfiability or minimal falsity known for formulas with fixed deficiency can be adapted to formulas with fixed cohesion. For example, (1) the minimal unsatisfiability of propositional formulas with fixed cohesion is still solvable in polynomial time and, (2) the minimal falsity of quantified <b>Boolean</b> <b>formulas</b> with cohesion 1 is solvable in polynomial time...|$|R
5|$|It {{describes}} how to translate <b>Boolean</b> <b>formulas</b> in {{conjunctive normal form}} (CNF) into equivalent instances of the maximum clique problem.|$|R
40|$|Abstract. In 1978, Schaefer proved {{his famous}} {{dichotomy}} theorem for generalized satisfiability problems. He defined {{an infinite number}} of propositional satisfiability problems, showed that all these problems are either in P or NP-complete, and gave a simple criterion to determine which of the two cases holds. This result is surprising in light of Ladner’s theorem, which implies that there are {{an infinite number of}} complexity classes between P and NP-complete (under the assumption that P is not equal to NP). Schaefer also stated a dichotomy theorem for quantified generalized <b>Boolean</b> <b>formulas,</b> but this theorem was only recently proven by Creignou, Khanna, and Sudan, and independently by Dalmau: Determining truth of quantified <b>Boolean</b> <b>formulas</b> is either PSPACE-complete or in P. This paper looks at alternation-bounded quantified generalized <b>Boolean</b> <b>formulas.</b> In their unrestricted forms, these problems are the canonical problems complete for the levels of the polynomial hierarchy. In this paper, we prove dichotomy theorems for alternation-bounded quantified generalized <b>Boolean</b> <b>formulas,</b> by showing that these problems are either-complete or in P, and we give a simple criterion to determine which of the two cases holds. This is the first result that obtains dichotomy for an infinite number of classes at once...|$|R
