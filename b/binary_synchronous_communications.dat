12|219|Public
5000|$|ALTERBSC, {{to change}} the <b>binary</b> <b>synchronous</b> <b>communications</b> profile.|$|E
5000|$|Systems Network Architecture (SNA) and <b>Binary</b> <b>Synchronous</b> <b>Communications</b> (BSC) ...|$|E
50|$|The {{system can}} also have an {{integrated}} communications adapter. Two adapter versions were available, one for Synchronous transmit-receive (STR) and one for <b>binary</b> <b>synchronous</b> <b>communications</b> (Bisync).|$|E
5000|$|IBM 1130 Computing System with <b>Synchronous</b> <b>Communications</b> Adapter (SCA) ...|$|R
5000|$|<b>Synchronous</b> <b>Communications</b> - Modem {{interface}} for Bell 201- and 300-series modems {{or equivalent}} ...|$|R
50|$|Basic Telecommunications Access Method (BTAM) was a {{low-level}} programming interface specified by IBM {{for use on}} the IBM System/360 for start-stop and <b>binary</b> <b>synchronous</b> telecommunications terminals. Later, IBM specified higher-level interfaces QTAM and TCAM.|$|R
5000|$|The IBM 2922 Programmable Terminal is a Remote Job Entry (RJE) {{terminal}} {{introduced by}} IBM in 1972. [...] The 2922 communicated using <b>Binary</b> <b>Synchronous</b> <b>Communications</b> (Bisync).|$|E
50|$|The IBM 2780 and the IBM 3780 were devices {{developed}} by IBM to perform Remote Job Entry (RJE) functions. They communicated with the mainframe via <b>Binary</b> <b>Synchronous</b> <b>Communications</b> (BSC or Bisync).|$|E
50|$|Other {{protocols}} are NAK-based, {{meaning that}} they only respond to messages {{if there is a}} problem. Examples include most reliable multicast protocols which send a NAK when the receiver detects missing packets. Still other protocols make use of both NAKs and ACKs. <b>Binary</b> <b>Synchronous</b> <b>Communications</b> (Bisync) and Adaptive Link Rate (for Energy-Efficient Ethernet) is an example.|$|E
50|$|The IBM 1009 Data Transmission Unit, the IBM 1130 <b>Synchronous</b> <b>Communications</b> Adapter, the IBM System/360 model 20 Communications Adapter, and the IBM 2701 Data Transmission Unit {{provided}} {{host computer}} support for STR.|$|R
50|$|<b>Communications</b> - <b>Synchronous</b> <b>Communications</b> Adapter (SCA). The IBM 1130 MTCA, for Multiple Terminal Control Adapter, {{announced}} in 1970 allowed {{up to four}} 2741 terminals {{to be connected to}} an IBM 1130, for use with APL.|$|R
40|$|As Internet {{bandwidth}} improves {{and connections}} become more reliable, on-line course designers will {{be encouraged to}} make more structured use of <b>synchronous</b> <b>communications.</b> Little work {{has so far been}} reported on how to make the best use of <b>synchronous</b> <b>communications</b> to support a problem solving approach. The OTIS pilot course made extensive use of synchronous communication to support learning through case studies in occupational therapy. The transcripts of communication sessions have been analysed using the SOLO taxonomy, to study the development of deep learning week by week. Results show that synchronous peer-to-peer working meetings have an important role to play in the development of deep learning. </p...|$|R
50|$|The 2922-1 Terminal Control Unit (RPQ 810563) {{employed}} the same instruction set architecture as the Model 20. It incorporated 8,192 bytes of 3.6 μs magnetic-core memory. The control unit also containd the <b>Binary</b> <b>Synchronous</b> <b>Communications</b> Adapter (BSCA) {{integrated into the}} Terminal Control Unit that supported a single line at speeds up to 7200 bits per second (bps).|$|E
50|$|Transcode, or Transmission Code, is a {{no longer}} used 6-bit plus parity BCD {{character}} set {{which was used}} by IBM {{for a short time}} for <b>Binary</b> <b>Synchronous</b> <b>communications.</b> The IBM 2780 data transmission terminal was announced with Transcode support in 1967. The IBM 3780 data communication terminal, the 2780 successor announced in 1972, dropped Transcode support.|$|E
50|$|During {{the late}} 1960 and 1970s, the {{computing}} environment expanded beyond the large computer rooms based on card input/output {{and started to}} allow data input and output terminals from remote locations. For such purposes, printer terminals such as IBM 2741 printer, using the traditional asynchronous serial communication (start-stop signaling), and display terminals such as IBM 2260 and IBM 3270, using the new communications protocol set (<b>Binary</b> <b>Synchronous</b> <b>Communications</b> or BSC), became available.|$|E
50|$|The system {{supported}} <b>synchronous</b> <b>communications</b> {{at up to}} 9600 baud, {{and usually}} served as a remote job entry system to a larger mainframe computer. The remote job entry software provided full support for the HASP multi-leaving protocol, among others.|$|R
50|$|August 9, 1966 - IBM {{rolls out}} the 1130 <b>synchronous</b> <b>communications</b> adapter, which permits the small 1130 {{system to be}} {{connected}} by regular leased telephone lines to, and function as a communications terminal for, any model of the IBM System/360.|$|R
50|$|The 3780 dropped Transcode {{support and}} {{incorporated}} several performance enhancements. It supported compression of blank fields in data using Run-length encoding. It provided {{the ability to}} interleave data between devices, introduced double buffering, and added support for the Wait-before-transmit ACKnowledgement (WACK) and Temporary Text Delay (TTD) <b>Binary</b> <b>Synchronous</b> control characters.|$|R
5000|$|The 2701 {{supported}} {{up to four}} start-stop or synchronous communications lines. It had two multiplexor channel interfaces for {{connection to}} one or two host computers. The synchronous adapter originally supported the Synchronous Transmit-Receive (STR) protocol, and later <b>Binary</b> <b>Synchronous</b> <b>Communications</b> (BISYNC) when it was introduced in 1967, in half duplex mode at speeds of up to 40,800 bits per second (bit/s). The 2701 could also have [...] "data acquisition and control adapters" [...] for direct control of external equipment.|$|E
50|$|The USART's {{synchronous}} capabilities {{were primarily}} intended to support synchronous protocols like IBM's Synchronous transmit-receive (STR), <b>Binary</b> <b>Synchronous</b> <b>Communications</b> (BSC), Synchronous Data Link Control (SDLC), and the ISO-standard High-Level Data Link Control (HDLC) synchronous link-layer protocols, which were used with synchronous voice-frequency modems. These protocols {{were designed to}} make the best use of bandwidth when modems were analog devices. In those times, the fastest asynchronous voice-band modem could achieve at most speeds of 300 bit/s using frequency-shift keying modulation, while synchronous modems could run at speeds up to 9600 bit/s using phase-shift keying. Synchronous transmission used only slightly over 80% of the bandwidth of the now more-familiar asynchronous transmission, since start and stop bits were unnecessary. Those modems are obsolete, having been replaced by modems which convert asynchronous data to synchronous forms, but similar synchronous telecommunications protocols survive in numerous block-oriented technologies such as the widely used IEEE 802.2 (Ethernet) link-level protocol. USARTs are still sometimes integrated with MCUs. USARTs are still used in routers that connect to external CSU/DSU devices, and they often use either Cisco's proprietary HDLC implementation or the IETF standard Point-to-Point Protocol in HDLC-like framing as defined in RFC 1662.|$|E
40|$|Abstract: A {{response}} time analysis {{for a general}} class of terminals-to-computer subsystem is presented in this paper. The model used {{is based on the}} most advanced data communications system in which terminals are connected to Terminal Control Units (TCU) that are in turn connected to local Front-End Processors (FEP). The line control procedures used to interface a TCU and an FEP may be half-duplex <b>Binary</b> <b>Synchronous</b> <b>Communications</b> (BSC), half-duplex Synchronous Data Link Control (SDLC), or full-duplex SDLC. The models presented here can be used to determine bottlenecks in the entire system and to facilitate the initial phase of system design and configuration...|$|E
40|$|In this paper, a novel {{interference}} cancellation {{technique is}} proposed for asynchronous non-orthogonal multiple access (NOMA) {{systems and the}} performance is theoretically investigated in a small cell uplink scenario. It is shown that unlike <b>synchronous</b> <b>communications,</b> at uplink transmission, NOMA users' performance strongly depends on the relative time offset between interfering users...|$|R
5000|$|In <b>synchronous</b> <b>communications,</b> {{the stream}} of data to be {{transferred}} is encoded as fluctuating voltage levels in one wire (the 'DATA'), and a periodic pulse of voltage on a separate wire (called the [...] "CLOCK" [...] or [...] "STROBE") which tells the receiver [...] "the current DATA bit is 'valid' {{at this moment in}} time".|$|R
40|$|AbstractA {{new version}} of the Snapshot Algorithm of Chandy and Lamport (1985) is presented. It {{considers}} <b>synchronous</b> <b>communications</b> and partially ordered semantics and allows for repeated snapshots. Its implementation in the language CSP is described: it is symmetric, generic and bounded in storage. It yields a symmetric and generic solution to the ‘Distributed Termination Detection’ problem of Francez...|$|R
40|$|This article studies {{characteristic}} properties of synchronous and asynchronous message communications in distributed systems. Based on the causality relation between events in computations with asynchronous communications, we characterize computations which are realizable with <b>synchronous</b> <b>communications,</b> which respect causal order, or where messages between two processes are always {{received in the}} order sent. It is shown that the corresponding computatio...|$|R
40|$|Asynchronous {{communications}} {{are prominent}} in distributed and mobile systems. Often concurrent systems consider an abstract {{point of view}} with <b>synchronous</b> <b>communications.</b> However it seems more realistic and finer to consider asynchronous communicating systems, since it provides a more primitive communication protocol and maximize the concurrency. Several languages and models have been defined using this communication mode: agent, actor, mobile computation, and so on. Here we reconsider a previous component model with full data types and <b>synchronous</b> <b>communications</b> with an asynchronous flavour. The dynamic behaviour of a component is represented as a structured symbolic transition system with mailboxes. We also present an algorithm devoted {{to an analysis of}} the dynamic behaviour of the system. This algorithm decides if the system has bound mailboxes and computes the reachable mailbox contents of the system. The component model and the algorithm are illustrated on a flight system reservation...|$|R
40|$|The authors {{consider}} a <b>binary</b> <b>synchronous</b> stream cipher where a correlation {{has been identified}} between the keystream sequence and the output {{from one of the}} linear feedback shift registers (LFSR). They present a theoretical analysis of their recent algorithm for fast correlation attacks, based on the use of convolutional codes (see Advances in Cryptology - EUROCRYPT' 99, Lecture Notes in Computer Science, vol. 1592, p. 347 - 62, Springer-Verlag, 1999) ...|$|R
5000|$|Synchronous Idle (SYN) is the ASCII control {{character}} 22 (0x16), represented as ^V in caret notation. In EBCDIC the corresponding character is 50 (0x32). Synchronous Idle {{is used in}} some synchronous serial communication systems such as Teletype machines or the <b>Binary</b> <b>Synchronous</b> (Bisync) protocol to provide a signal from which synchronous correction may be achieved between data terminal equipment, [...] particularly when no other character is being transmitted.|$|R
50|$|Traditional {{assessment}} is equated with individualized exams and evaluations. However, in online collaborative learning, assessment requires a broader perspective as it encompasses the collaborative interactions using asynchronous and <b>synchronous</b> <b>communications</b> between group members. Assessment {{has been found}} to {{have a significant effect on}} CSCL by motivating learners through accountability and constructive feedback. It supports students in growing familiar with the course content through discourse and effectively encourages the participation of students.|$|R
50|$|In 1988 Telebit {{added the}} T1000, {{essentially}} a TrailBlazer {{limited to a}} lower-speed 9600 bit/s version of PEP, remaining compatible at that speed with existing TrailBlazers. The T2000 added support for <b>synchronous</b> <b>communications,</b> typically used between mainframe computers. The original TrailBlazer, T1000 and T2000 were backwards-compatible with the 2400 bit/s V.22bis standard, allowing them to connect with {{what was then the}} most common modem speed when talking to other brands of modems.|$|R
40|$|This paper reviews some {{preliminary}} {{experiences of the}} use of Desktop Video Conferencing (DVC) within a multi-site Initial Teacher Training Institution. The limitations of asynchronous communication such as email and the potential of <b>synchronous</b> <b>communications</b> such as DVC are appraised. Examples of actual and potential DVC are described alongside the attendant benefits derived from both practical experience and research evidence. Consideration is also given to the realities of setting up DVC, such as firewall issues and resource implications including hardware and software...|$|R
50|$|In the ITCOLE project {{there were}} several {{parallel}} software development projects. At first Fle3 was developed in Media Lab in Helsinki as a user interface and interaction demonstration for the main software development taking place in Fraunhofer and based on their BSCW system. The University of Murcia's main task was to develop the <b>synchronous</b> <b>communications</b> tools, which were then integrated experimentally to BSCW and Fle3. The software based on BSCW was named at first Synergeia and later BSCL (Basic Support for Collaborative Learning).|$|R
5000|$|... 3rd {{generation}} VLE: The {{novelty of}} 3rd generation VLE {{is that they}} incorporate the newest technologies, accessible in real and non real time (<b>synchronous</b> and <b>synchronous</b> <b>communications),</b> such as audio and video conferences through the internet -‘one to one’ and ‘one to many’, collaboration features for work in groups, seminars, labs, forums, {{and of course the}} learning, development, planning, library and administrative functions. Stanford On-line, InterLabs, Classroom 2000 and the system [...] "Virtual University" [...] (VU) are examples of this VLE.|$|R
50|$|<b>Binary</b> <b>Synchronous</b> Communication (BSC or Bisync) is an IBM character-oriented, {{half-duplex}} link protocol, announced in 1967 after {{the introduction of}} System/360. It replaced the synchronous transmit-receive (STR) protocol used with second generation computers. The intent was that common link management rules could be used with three different character encodings for messages. Six-bit Transcode looked backwards to older systems; USASCII with 128 characters and EBCDIC with 256 characters looked forward. Transcode disappeared very quickly but the EBCDIC and USASCII dialects of Bisync continued in use.|$|R
50|$|Early {{synchronous}} protocols were byte-oriented protocols, where synchronization {{was maintained}} by transmitting {{a sequence of}} synchronous idle characters when the line was not actively transmitting data or transparently within a long transmission block. A certain number of idles were sent prior to each transmission. The IBM <b>Binary</b> <b>Synchronous</b> protocol (Bisync) is still in use, Other examples of byte-oriented protocols are IBM's Synchronous transmit-receive (STR), and Digital Data Communications Message Protocol (DDCMP) from Digital Equipment Corporation. Other computer manufacturers often offered similar protocols, differing mainly in small details.|$|R
40|$|This paper {{presents}} {{the use of}} Berger code for concurrent error detection in asynchronous or <b>synchronous</b> <b>communications.</b> Berger-invert code is a coding scheme proposed to protect communication channels against asymmetric errors and to decrease power consumption. Area and power are main key components playing vital role in designing many circuits. By introducing clock gating technique and gated driver in to Bus Inverter Berger Codec, power and area are reducing respectively. Berger codes detect any number of unidirectional errors with less power and low density...|$|R
