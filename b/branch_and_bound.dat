2503|10000|Public
5|$|There {{has also}} been {{extensive}} research on heuristic algorithms for solving maximum clique problems without worst-case runtime guarantees, based on methods including <b>branch</b> <b>and</b> <b>bound,</b> local search, greedy algorithms, and constraint programming. Non-standard computing methodologies that have been suggested for finding cliques include DNA computing and adiabatic quantum computation. The maximum clique problem {{was the subject of}} an implementation challenge sponsored by DIMACS in 1992–1993, and a collection of graphs used as benchmarks for the challenge is publicly available.|$|E
25|$|Several {{algorithms}} {{are available}} to solve knapsack problems, based on dynamic programming approach, <b>branch</b> <b>and</b> <b>bound</b> approach or hybridizations of both approaches.|$|E
25|$|MINTO (Mixed Integer Optimizer, {{an integer}} {{programming}} solver which uses <b>branch</b> <b>and</b> <b>bound</b> algorithm) has publicly available source code {{but is not}} open source.|$|E
40|$|The {{solution}} of convex Mixed Integer Quadratic Programming (MIQP) {{problems with a}} general <b>branch</b> [...] <b>and</b> [...] <b>bound</b> framework is considered. It is shown how lower bounds can be computed efficiently during the <b>branch</b> [...] <b>and</b> [...] <b>bound</b> process. Improved lower bounds {{such as the ones}} derived in this paper can reduce the number of QP problems that have to be solved. The <b>branch</b> [...] <b>and</b> [...] <b>bound</b> approach is also shown to be superior to other approaches to solving MIQP problems. Numerical experience is presented which supports these conclusions. Key words : Integer Programming, Mixed Integer Quadratic Programming, <b>Branch</b> [...] <b>and</b> [...] <b>Bound</b> AMS subject classification: 90 C 10, 90 C 11, 90 C 20 1 Introduction One of the most successful methods for solving mixed [...] integer nonlinear problems is <b>branch</b> [...] <b>and</b> [...] <b>bound.</b> Land <b>and</b> Doig [16] first introduced a <b>branch</b> [...] <b>and</b> [...] <b>bound</b> algorithm for the travelling salesman problem. Dakin [3] introduced the now common <b>branching</b> dichotomy <b>and</b> was the first to realize {{that it is possible to}} so [...] ...|$|R
40|$|International audienceWe give an {{alternative}} {{proof of a}} result by N. Gantert, Y. Hu and Z. Shi on the asymptotic behavior of the survival probability of the branching random walk killed below a linear boundary, in the special case of deterministic binary <b>branching</b> <b>and</b> <b>bounded</b> random walk steps. Connections with the Brunet-Derrida theory of stochastic fronts are discussed...|$|R
40|$|Two new {{implementations}} of a maximum-likelihood soft-decision decoding algorithm for binary linear {{codes are}} derived. Instead of checking only error patterns yielding a codeword when {{added to the}} rounded-off version of the received vector, these implementations principally consider all possible column patterns. Compared to known implementations, this allows a more efficient use of <b>branching</b> <b>and</b> <b>bounding</b> techniques...|$|R
25|$|In practice, <b>branch</b> <b>and</b> <b>bound</b> {{strategies}} and graph isomorphism rejection are employed to avoid some recursive calls. The running time {{depends on the}} heuristic used to pick the vertex pair.|$|E
25|$|Many {{problems}} (such {{as playing}} chess) can be modeled as problems on graphs. A graph exploration algorithm specifies rules for moving around a graph and {{is useful for}} such problems. This category also includes search algorithms, <b>branch</b> <b>and</b> <b>bound</b> enumeration and backtracking.|$|E
25|$|The {{benefit of}} alpha–beta pruning {{lies in the}} fact that {{branches}} of the search tree can be eliminated. This way, the search time can be limited to the 'more promising' subtree, and a deeper search can be performed in the same time. Like its predecessor, it belongs to the <b>branch</b> <b>and</b> <b>bound</b> class of algorithms. The optimization reduces the effective depth to slightly more than half that of simple minimax if the nodes are evaluated in an optimal or near optimal order (best choice for side on move ordered first at each node).|$|E
40|$|New {{types of}} laws {{of large numbers}} are derived by using {{connections}} between estimation and stochastic optimization problems. They enable one to "track" time-and-path dependent functionals by using, in general, nonlinear estimators. Proofs {{are based on the}} new stochastic version of the Lyapunov's method. Applications to Monte Carlo optimization, stochastic <b>branch</b> <b>and</b> <b>bounds</b> method <b>and</b> minimization of risk functions are discussed. ...|$|R
40|$|Abstract. In {{the early}} 1990 s, we {{proposed}} {{the integration of}} constraint programming and optimization techniques within the branch-and-bound framework for the global optimization of nonconvex nonlinear and mixed-integer nonlinear programs. This approach, referred to as branch-and-reduce, was subsequently supplemented {{with a variety of}} <b>branching</b> <b>and</b> <b>bounding</b> schemes. In this paper, we review the theory and algorithms behind branch-and-reduce, its implementation in the BARON software, and some recent successful applications. ...|$|R
40|$|In {{the paper}} we discuss two cases of vector {{problems}} on forests: the problem of covering a graph with stars {{and the problem of}} the spanning tree with bound on the degree. In both cases, the one-criterion statement for these problems is NP-complete. For the two-criterion statement, in the first case, a condition under which the problem is solvable in polynomial time is given. For the proof a precise algorithm is constructed that fulfils the formulated conditions. This algorithm guarantees a full set of alternatives for covering a graph with stars, with criteria of type MINSUM and MINMAX in polynomial time. In the second case, the problem of the spanning tree with a bound on the degree, an algorithm is given based on the known method of <b>branches</b> <b>and</b> <b>bounds.</b> This fact is of specific interest and significance because so far the method of <b>branches</b> <b>and</b> <b>bounds</b> has only been known for one extreme case, the traveller problem on a graph. (orig.) Available from TIB Hannover: RR 4487 (1999, 9) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|R
25|$|In the {{following}} decades, {{the problem was}} studied by many researchers from mathematics, computer science, chemistry, physics, and other sciences. In the 1960s however a new approach was created, that instead of seeking optimal solutions, one would produce a solution whose length is provably bounded by a multiple of the optimal length, {{and in doing so}} create lower bounds for the problem; these may then be used with <b>branch</b> <b>and</b> <b>bound</b> approaches. One method of doing this was to create a minimum spanning tree of the graph and then double all its edges, which produces the bound that the length of an optimal tour is at most twice the weight of a minimum spanning tree.|$|E
25|$|In the 1950s and 1960s, {{the problem}} became {{increasingly}} popular in scientific circles in Europe and the USA after the RAND Corporation in Santa Monica offered prizes for steps {{in solving the}} problem. Notable contributions were made by George Dantzig, Delbert Ray Fulkerson and Selmer M. Johnson from the RAND Corporation, who expressed the problem as an integer linear program and developed the cutting plane method for its solution. They wrote what is considered the seminal paper on the subject in which with these new methods they solved an instance with 49 cities to optimality by constructing a tour and proving that no other tour could be shorter. Dantzig, Fulkerson and Johnson, however, speculated that given a near optimal solution {{we may be able}} to find optimality or prove optimality by adding a small amount of extra inequalities (cuts). They used this idea to solve their initial 49 city problem using a string model. They found they only needed 26 cuts to come to a solution for their 49 city problem. While this paper did not give an algorithmic approach to TSP problems, the ideas that lay within it were indispensable to later creating exact solution methods for the TSP, though it would take 15 years to find an algorithmic approach in creating these cuts. As well as cutting plane methods, Dantzig, Fulkerson and Johnson used <b>branch</b> <b>and</b> <b>bound</b> algorithms perhaps for the first time.|$|E
2500|$|A* {{itself is}} a special case of a {{generalization}} of <b>branch</b> <b>and</b> <b>bound</b> ...|$|E
40|$|New {{types of}} laws {{of large numbers}} are derived by using {{connections}} between estimation and stochastic optimization problems. They enable one to "track" time-and-path dependent functionals by using, in general, nonlinear estimators. Proofs {{are based on the}} new stochastic version of the second Lyapunov's method. Applications to adaptive Monte-Carlo optimization, stochastic <b>branch</b> <b>and</b> <b>bounds</b> method <b>and</b> minimization of risk functions are discussed. [...] iii [...] Contents 1 Introduction 1 2 Nonstationary Laws of Large Numbers 3 3 Applications 6 Example 3. 1....................................... 6 Example 3. 2....................................... 6 Example 3. 3....................................... 7 Example 3. 4....................................... 7 Example 3. 5..................................... [...] . ...|$|R
40|$|The article {{suggests}} an approach {{of solving the}} problem of warehouse and transport infrastructure optimization in a region. The task {{is to determine the}} optimal capacity and location of the support network of warehouses in the region, as well as power, composition and location of motor fleets. Optimization is carried out using mathematical models of a regional warehouse network and a network of motor fleets. These models are presented as mathematical programming problems with separable functions. The process of finding the optimal solution of problems is complicated due to high dimensionality, non-linearity of functions, and the fact that a part of variables are constrained to integer, and some variables can take values only from a discrete set. Given the mentioned above complications search for an exact solution was rejected. The article {{suggests an}} approximate approach to solving problems. This approach employs effective computational schemes for solving multidimensional optimization problems. We use the continuous relaxation of the original problem to obtain its approximate solution. An approximately optimal solution of continuous relaxation is taken as an approximate solution of the original problem. The suggested solution method implies linearization of the obtained continuous relaxation and use of the separable programming scheme and the scheme of <b>branches</b> <b>and</b> <b>bounds.</b> We describe the use of the simplex method for solving the linearized continuous relaxation of the original problem and the specific moments of the <b>branches</b> <b>and</b> <b>bounds</b> method implementation. The paper shows the finiteness of the algorithm and recommends how to accelerate process of finding a solution. </p...|$|R
40|$|Given an (undirected) graph G = (V; E); a clique of G is {{a subset}} of {{vertices}} in which every pair is connected by an edge. The problem of finding a clique of maximum size is a classical NP [...] hard problem, and many algorithms, both heuristic and exact, have been proposed. While the philosophy behind the heuristic algorithms varies greatly, {{almost all of the}} exact algorithms are designed in the <b>branch</b> [...] <b>and</b> [...] <b>bound</b> framework. As is well known, <b>branch</b> [...] <b>and</b> [...] <b>bound</b> is well suited to parallelization, and PUBB is a software utility which implements a generic version of it. In this paper, we show effectiveness of parallelization of <b>branch</b> [...] <b>and</b> [...] <b>bound</b> for the maximum clique problem. Especially, by using PUBB with good heuristics <b>and</b> <b>branching</b> techniques, we were able to solve five previously unsolved DIMACS benchmark problems to optimality...|$|R
2500|$|... on a graph with n {{vertices}} and m edges. The {{analysis can}} be improved to within a polynomial factor of the number [...] of spanning trees of the input graph. In practice, <b>branch</b> <b>and</b> <b>bound</b> strategies and graph isomorphism rejection are employed to avoid some recursive calls, the running time depends on the heuristic used to pick the vertex pair.|$|E
2500|$|Divide {{and conquer}} {{algorithms}} {{can also be}} implemented by a non-recursive program that stores the partial sub-problems in some explicit data structure, such as a stack, queue, or priority queue. [...] This approach allows more freedom {{in the choice of}} the sub-problem that is to be solved next, a feature that is important in some applications — e.g. in breadth-first recursion and the <b>branch</b> <b>and</b> <b>bound</b> method for function optimization. [...] This approach is also the standard solution in programming languages that do not provide support for recursive procedures.|$|E
2500|$|For example, [...] {{explored}} {{more effective}} implementations, while improved containment {{procedures for the}} solution set of systems of equations were due to Arnold Neumaier among others. In the 1960s, Eldon R. Hansen dealt with interval extensions for linear equations and then provided crucial contributions to global optimisation, including what {{is now known as}} Hansen's method, perhaps the most widely used interval algorithm. Classical methods in this often have the problem of determining the largest (or smallest) global value, but could only find a local optimum and could not find better values; Helmut Ratschek and Jon George Rokne developed <b>branch</b> <b>and</b> <b>bound</b> methods, which until then had only applied to integer values, by using intervals to provide applications for continuous values.|$|E
40|$|A {{nonlinear}} function {{has been}} introduced for indexing the disagreement degree {{of a group of}} judgment matrices (in FW, 1994). It has many good properties and may be applied in decision making and information process. In this paper, we will discuss a global optimization problem concerned with the global maximum of this function which is constrained on some sets of matrices. Because the size of matrix groups in the problem is arbitrary and the number of local maximum solutions increases exponentially, numerical methods are not suitable and formalized results are desired for the problem. By an approach somewhat similar to the <b>branch</b> <b>and</b> <b>bounded</b> method, we have obtained some formulae on global maximums, a sufficient and necessary condition of the function's taking the maximums, and its some maximum solution sets. Key Words: discrepancy, entropy, global maximization 1 Introduction Based on an axiom set, a nonlinear function FDOD {{has been introduced}} for indexing disagreement degree of a gr [...] ...|$|R
40|$|We {{present a}} new {{approach}} to the performance prediction of parallel programs that provides information on the distribution of execution times when considering a large space of input data sets. The research aims to extend low-cost performance analysis techniques by accounting for the stochastic behavior of system parameters. Current analysis techniques are based on path analysis with the assumption of deterministic task times (mean values) instead of accounting for variance. Most of the system model parameters, however, are stochastic rather than deterministic due to data dependency in programs, for example in terms of <b>branches</b> <b>and</b> loop <b>bounds,</b> as well as due to various other probabilistic model abstractions. The approach is based on moments representations of distribution. We present a lowcost algorithm that computes the moments of the program execution time based on the moments associated with <b>branching,</b> loop <b>bounds,</b> <b>and</b> basic blocks. The novelty of the analysis technique is the combi [...] ...|$|R
40|$|We discuss {{possible}} {{constraints on}} R-parity violation from recently announced Belle/Babar {{results on the}} B→τν <b>branching</b> fraction, <b>and</b> the <b>bounds</b> on τ^-→ℓ^- K_S^ 0 (ℓ=e or μ) from Babar. Comment: 10 pages, 2 figures, Tables updated to account for new analysis presented in arXiv: 0910. 4980. Updated reference...|$|R
50|$|Another {{class of}} {{algorithms}} are variants of the <b>branch</b> <b>and</b> <b>bound</b> method. For example, the branch and cut method that combines both <b>branch</b> <b>and</b> <b>bound</b> and cutting plane methods. <b>Branch</b> <b>and</b> <b>bound</b> algorithms {{have a number}} of advantages over algorithms that only use cutting planes. One advantage is that the algorithms can be terminated early and as long as at least one integral solution has been found, a feasible, although not necessarily optimal, solution can be returned. Further, the solutions of the LP relaxations can be used to provide a worst-case estimate of how far from optimality the returned solution is. Finally, <b>branch</b> <b>and</b> <b>bound</b> methods can be used to return multiple optimal solutions.|$|E
5000|$|Version 2.2 added <b>branch</b> <b>and</b> <b>bound</b> solving {{of mixed}} integer problems.|$|E
5000|$|<b>Branch</b> <b>and</b> <b>Bound</b> based: Clone, MaxSatz (based on Satz), IncMaxSatz, IUT_MaxSatz, WBO, GIDSHSat.|$|E
40|$|Inferences in {{directed}} acyclic graphs {{associated with}} probability sets and probability intervals are NP-hard, even for polytrees. In this paper {{we focus on}} such inferences, and propose: 1) a substantial improvement on Tessems A / R algorithm FOR polytrees WITH probability intervals; 2) a new algorithm FOR direction - based local search(IN sets OF probability) that improves ON existing methods; 3) a collection OF <b>branch</b> - <b>AND</b> - <b>bound</b> algorithms that combine the previous techniques. The first two techniques lead TO approximate solutions, WHILE <b>branch</b> - <b>AND</b> - <b>bound</b> procedures can produce either exact OR approximate solutions. We report ON dramatic improvements ON existing techniques FOR inference WITH probability sets AND intervals, IN SOME cases reducing the computational effort BY many orders OF magnitude. Comment: Appears in Proceedings of the Nineteenth Conference on Uncertainty in Artificial Intelligence (UAI 2003...|$|R
40|$|International audienceWe {{compute the}} lowest stable-equilibrium pose of a rigid body {{suspended}} in space by an arbitrary number of cables, being given the cable lengths and the attachment-point {{positions on the}} fixed frame and on the rigid body. This fundamental problem of mechanics if {{of interest in the}} fields of underconstrained cable-driven parallel robots and cooperative towing. The approach of the present work is very similar to one that is reported in a previous paper by the authors. Indeed, the problem is formulated as a potential energy minimization, and is solved using a branch-and-bound algorithm. Hence, we report mainly on improvements in the <b>branching</b> <b>and</b> <b>bounding</b> parts of the algorithm. In short, the idea is to search for the optimum rigid-body pose by partitioning only the rotation subgroup of rigid-body displacements. This is done here by dividing the four-dimensional space of Euler-Rodrigues parameters with polyhedral cones instead of boxes, the latter being normally used for this type of problem. The advantage is that cones conformbetter to the four-dimensional unit sphere of Euler-Rodrigues parameters. The convex relaxations of the original optimization problem are then adapted to the newly defined conical subsets. Besides resulting in a more elegant algorithm, this new conical branch-and-bound method leads to a higher efficiency in the case of reported examples...|$|R
40|$|This paper studies {{haplotype}} inference by maximum parsimony using population data. We {{define the}} optimal haplotype inference (OHI) problem as given {{a set of}} genotypes {{and a set of}} related haplotypes, find a minimum subset of haplotypes that can resolve all the genotypes. We prove that OHI is NP-hard and can be formulated as an integer quadratic programming (IQP) problem. To solve the IQP problem, we propose an iterative semi-definite programming based approximation algorithm, (called SDPHapInfer). We show that this algorithm finds a solution within a factor of O(log n) of the optimal solution, where n is the number of genotypes. This algorithm has been implemented and tested on a variety of simulated and biological data. In comparison with three other methods: (1) HAPAR, which was implemented based on the <b>branching</b> <b>and</b> <b>bound</b> algorithm, (2) HAPLOTYPER, which was implemented based on the Expectation-Maximization algorithm, and (3) PHASE, which combined the Gibbs sampling algorithm with an approximate coalescent prior, the experimental results indicate that SDPHapInfer and HAPLOTYPER have similar error rates. In addition, the results generated by PHASE have lower error rates on some data but higher error rates on others. The error rates of HAPAR are higher than the others on biological data. I...|$|R
50|$|The {{protein design}} {{conformational}} space {{can be represented}} as a tree, where the protein residues are ordered in an arbitrary way, and the tree branches {{at each of the}} rotamers in a residue. <b>Branch</b> <b>and</b> <b>bound</b> algorithms use this representation to efficiently explore the conformation tree: At each branching, <b>branch</b> <b>and</b> <b>bound</b> algorithms bound the conformation space and explore only the promising branches.|$|E
50|$|MINTO (Mixed Integer Optimizer) is {{an integer}} {{programming}} solver which uses <b>branch</b> <b>and</b> <b>bound</b> algorithm.|$|E
50|$|At this point, the <b>branch</b> <b>and</b> <b>bound</b> {{part of the}} {{algorithm}} is started. The problem is split into multiple (usually two) versions. The new linear programs are then solved using the simplex method and the process repeats. During the <b>branch</b> <b>and</b> <b>bound</b> process, non-integral solutions to LP relaxations serve as upper bounds and integral solutions serve as lower bounds. A node can be pruned if an upper bound is lower than an existing lower bound. Further, when solving the LP relaxations, additional cutting planes may be generated, which may be either global cuts, i.e., valid for all feasible integer solutions, or local cuts, meaning that they are satisfied by all solutions fulfilling the side constraints from the currently considered <b>branch</b> <b>and</b> <b>bound</b> subtree.|$|E
40|$|This paper {{introduces}} parallel-cascade realizations of trun-cated Volterra {{systems with}} arbitrary, but finite order of nonlinearity. Parallel-cascade realizations implement higher-order Volterra systems using parallel and multiplica-tive combinations of lower-order Volterra systems. Such realizations are very modular and therefore well-suited for VLSI implementation. A systematic way of approximat-ing higher-order Volterra systems in parallel-cascade form using a reduced number of <b>branches</b> <b>and</b> a <b>bound</b> on the mean-square {{error in the}} output signals caused by such ap-proximate realizations are derived in this paper. A varia-tion of the parallel-cascade structure in which a pth order Volterra filter is implemented as a parallel combination of linear filters whose outputs are raised to the pth power is also described in this paper. 1...|$|R
40|$|The {{quadratic}} assignment problem (QAP) is {{a central}} problem in combinatorial optimization. Several famous computationally hard tasks, such as graph matching, partitioning, and the traveling salesman all reduce to special cases of the QAP. In this {{paper we propose a}} new approach to the QAP based on the theory of non–commutative Fourier analysis on the symmetric group. Specifically, we present a branch–and–bound algorithm that performs both the <b>branching</b> <b>and</b> the <b>bounding</b> steps in Fourier space. By exploiting the band–limited nature of the QAP objective function and using FFT techniques, the algorithm runs in O(n 3) time per branch–and–bound node. The techniques underlying the algorithm generalize to a range of other combinatorial optimization problems...|$|R
40|$|We propose {{an exact}} method which {{combines}} the resolution search <b>and</b> <b>branch</b> & <b>bound</b> algorithms for solving the 0 – 1 Multidimensional Knapsack Problem. This algorithm {{is able to}} prove large–scale strong correlated instances. The optimal values of the 10 constraint, 500 variable instances of the OR-Library are exposed. These values were previously unknown...|$|R
