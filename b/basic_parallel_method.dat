0|3304|Public
30|$|Here, we {{denote the}} <b>basic</b> <b>parallel</b> multisplitting {{iterative}} <b>method</b> with fixed weighting matrix by B-Meth (see [1]). In Basic Methods, we propose {{three groups of}} weighting matrices, which are generated by random selection. Thus, the corresponding <b>parallel</b> multisplitting iterative <b>methods</b> are denoted by B-Meth 1, B-Meth 2, B-Meth 3, respectively.|$|R
40|$|This {{paper is}} {{concerned}} with parallel computation in solving the convection-di#usion equation and the incompressible Navier-Stokes equation via Newton-Schwarz method, a nonlinear domain decomposition (DD) method. Various preconditioners are investigated here. An interface problem is tackled as a preconditioner for nonlinear block Jacobi DD approach, with an optional fine level interface problem solved as further preconditioner. Also a (global) coarse level preconditioner is considered. Examined also is the relaxation type preconditioner. Such preconditioned nonlinear DD methods exhibit impressive improvement over the <b>basic</b> non-preconditioned <b>parallel</b> NewtonJacobi <b>method.</b> A general review on Newton-Schwarz method is [GEMT 98]. Our setup has the advantages of both the overlapped and the nonoverlap DD approach. The subdomain variables form a (nonoverlap) partition of the whole global system of equations. Solving the interface problem {{is regarded as a}} preconditioner to all subproblems. We note that the interface variables were excluded from subproblems in [LC 98]. We describe in later sections the problem and solution procedure, the test cases and results, and a brief conclusion. Solution Procedure and Newton-Schwar...|$|R
40|$|This work proposes four <b>parallel</b> <b>methods</b> for multipattern {{matching}} {{which are}} executed on a heterogeneous cluster. These <b>parallel</b> <b>methods</b> {{are based on}} the master- worker paradigm and they implement different partitioning schemes such as static and dynamic load balancing. Furthermore, the <b>parallel</b> <b>methods</b> are analyzed experimentally using the Message Passing Interface (MPI) library on a cluster of heterogeneous workstations. Further, we propose a performance modeling of the <b>parallel</b> <b>methods</b> {{that can be used to}} predict the parallel performance on a cluster of workstations. The results by the theoretical performance models have been validated against experimental results of the four <b>parallel</b> <b>methods...</b>|$|R
40|$|We {{investigate}} {{the set of}} <b>basic</b> <b>parallel</b> processes, recursively defined by action prefix, interleaving, 0 and 1. Different from literature, we use the constants 0 and 1 standing for unsuccessful and successful termination {{in order to stay}} closer to the analogies in automata theory. We prove that any <b>basic</b> <b>parallel</b> process is rooted branching bisimulation equivalent to a regular process communicating with a bag (also called a parallel pushdown automaton) and therefore we can regard the bag as the prototypical <b>basic</b> <b>parallel</b> process. This result is closely related to the fact that any context-free process is either rooted branching bisimulation equivalent or contrasimulation equivalent to a regular process communicating with a stack, a result that is the analogy in process theory of the language theory result that any context-free language is the language of a pushdown automaton...|$|R
40|$|Abstract. Jančar has {{recently}} shown that bisimilarity on <b>Basic</b> <b>Parallel</b> Processes (BPP) can {{be decided in}} polynomial space (presented at LiCS 2003). In this paper are summarized two results which use general techniques from Jančar’s paper. First result by Kot and Jančar (presented at AVIS 2004) shows that bisimilarity on normed <b>basic</b> <b>parallel</b> processes can be decided in O(n 3). The second result by Kot and Sawa (submitted to Infinity 2004) shows that bisimilarity of given BPP and finite-state system can be decided in polynomial time, concretely in O(n 5) ...|$|R
40|$|The Standard Template Adaptive Parallel Library (STAPL) is a {{parallel}} programming infrastructure that extends C++ with support for parallelism. It includes {{a collection of}} distributed data structures called pContainers that are thread-safe, concurrent objects, i. e., shared objects that provide <b>parallel</b> <b>methods</b> that can be invoked concurrently. In this work, we present the STAPL Parallel Container Framework (PCF), {{that is designed to}} facilitate the development of generic parallel containers. We introduce a set of concepts and a methodology for assembling a pContainer from existing sequential or parallel containers, without requiring the programmer to deal with concurrency or data distribution issues. The PCF provides a large number of <b>basic</b> <b>parallel</b> data structures (e. g., pArray, pList, pVector, pMatrix, pGraph, pMap, pSet). The PCF provides a class hierarchy and a composition mechanism that allows users to extend and customize the current container base for improved application expressivity and performance. We evaluate STAPL pContainer performance on a CRAY XT 4 massively parallel system and show that pContainer methods, generic pAlgorithms, and different applications provide good scalability on more than 16, 000 processors...|$|R
40|$|The ways {{to define}} {{execution}} {{time of the}} <b>parallel</b> <b>methods</b> at the multiprocessor computing systems have been considered. The main relations have been obtained which allow estimating execution time of the numerical integration <b>parallel</b> <b>method</b> a priori to minimize solution time. ??????????? ??????? ??????????? ??????? ?????????? ???????????? ??????? ?? ?????????????????? ?????????????? ????????. ???????? ???????? ???????????, ??????????? ???????? ??????? ????? ?????????? ????????????? ?????? ?????????? ?????????????? ??? ??????????? ??????? ???????. ???????? ??????????? ????????????? ?????????? ?????? ??? ??????????????? ?????? ??????...|$|R
40|$|Three <b>parallel</b> <b>methods</b> (OpenMP, MPI, and OpenACC) are {{evaluated}} for the computation of a two-dimensional dam-break model using the explicit finite volume method. A dam-break {{event in the}} Pangtoupao flood storage area in China is selected {{as a case study}} to demonstrate the key technologies for implementing parallel computation. The subsequent acceleration of the methods is also evaluated. The simulation results show that the OpenMP and MPI <b>parallel</b> <b>methods</b> achieve a speedup factor of 9. 8 × and 5. 1 ×, respectively, on a 32 -core computer, whereas the OpenACC <b>parallel</b> <b>method</b> achieves a speedup factor of 20. 7 × on NVIDIA Tesla K 20 c graphics card. The results show that if the memory required by the dam-break simulation does not exceed the memory capacity of a single computer, the OpenMP <b>parallel</b> <b>method</b> is a good choice. Moreover, if GPU acceleration is used, the acceleration of the OpenACC <b>parallel</b> <b>method</b> is the best. Finally, the MPI <b>parallel</b> <b>method</b> is suitable for a model that requires little data exchange and large-scale calculation. This study compares the efficiency and methodology of accelerating algorithms for a dam-break model and can also be used as a reference for selecting the best acceleration method for a similar hydrodynamic model...|$|R
5000|$|... pContainers - generic, {{distributed}} data structures with <b>parallel</b> <b>methods.</b>|$|R
40|$|A new {{parallel}} {{approach for}} solving a pentadiagonal linear system is presented. The <b>parallel</b> partition <b>method</b> for this {{system and the}} TW <b>parallel</b> partition <b>method</b> on a chain of P processors are introduced and discussed. The result of this algorithm is a reduced pentadiagonal linear system of order P Γ 2 compared with a system of order 2 P Γ 2 for the <b>parallel</b> partition <b>method.</b> More importantly the new method involves only half the number of communications startups than the <b>parallel</b> partition <b>method</b> (and other standard <b>parallel</b> <b>methods)</b> and hence {{is a far more}} efficient parallel algorithm...|$|R
5000|$|<b>Parallel</b> <b>Methods</b> on Large-Scale Structural Analysis & Physics Applications, Pergamon Press 1991.|$|R
5000|$|OpenMOC - An MIT {{developed}} {{open source}} <b>parallel</b> <b>method</b> of characteristics code ...|$|R
40|$|AbstractThe branching-time {{temporal}} logic EF is a simple, but natural fragment of computation-tree logic (CTL) and the modal μ-calculus. We study the decidability {{of the model}} checking problem for EF and infinite-state systems. We use process rewrite systems (PRS) to describe infinite-state systems and define a hierarchy of subclasses of PRS that includes Petri nets, pushdown processes, <b>basic</b> <b>parallel</b> processes (BPP), context-free processes and PA-Processes. Then we establish the exact limits of the decidability of model checking with EF in this hierarchy. Model checking with EF is undecidable for Petri nets and even for parallel pushdown automata (the pushdown extension of <b>Basic</b> <b>Parallel</b> Processes). On the other hand, model checking with EF is decidable for PAD, a process model that subsumes both PA-processes and pushdown processes...|$|R
40|$|AbstractWe {{prove that}} weak bisimilarity is decidable in {{polynomial}} time between finite-state systems and several classes of infinite-state systems: context-free processes and normed <b>basic</b> <b>parallel</b> processes (normed BPP). To {{the best of}} our knowledge, these are the first polynomial algorithms for weak bisimilarity problems involving infinite-state systems...|$|R
40|$|The paper {{describes}} {{techniques used}} to obtain stable high performance from parallel simulation of large telecommunication networks. A <b>basic</b> <b>parallel</b> simulation model of a telecommunication network and the conservative implementation of the model are discussed and the experimental results {{on the performance of}} the simulator are examined...|$|R
40|$|We {{prove that}} weak bisimilarity is decidable in {{polynomial}} time between finite-state systems and several classes of infinite-state systems: context-free processes (BPA) and normed <b>Basic</b> <b>Parallel</b> Processes (normed BPP). To {{the best of}} our knowledge, these are the first polynomial algorithms for weak bisimilarity problems involving infinite-state systems...|$|R
40|$|This book makes a clear {{presentation}} of the traditional topics included in a course of undergraduate parallel programming. As explained by the authors, it was developed from their own experience in classrooms, introducing their students to parallel programming. It can be used almost directly to teach <b>basic</b> <b>parallel</b> programming...|$|R
40|$|One of the {{algorithms}} used in multi-agent systems {{is based on}} the wave propagation model. This article discusses some sequential (recursive, iterative, and based on distance) and <b>parallel</b> <b>methods</b> (frontier exchanging, domain decomposition changing, private environments, and mutex-based) to implement it. The mixing between these sequential and <b>parallel</b> <b>methods</b> is also shown, and the performance of some of them on two shared-memory parallel architectures is introduced...|$|R
40|$|Abstract. In {{order to}} handle {{large-scale}} pattern classification prob-lems, various sequential and <b>parallel</b> classification <b>methods</b> {{have been developed}} according to the divide-and-conquer principle. However, ex-isting sequential methods need long training time, and some of <b>parallel</b> <b>methods</b> lead to generalization accuracy decreasing {{and the number of}} support vectors increasing. In this paper, we propose a novel hierarchical and <b>parallel</b> <b>method</b> for training support vector machines. The simula-tion results indicate that our method can not only speed up training but also reduce the number of support vectors while maintaining the generalization accuracy. ...|$|R
40|$|We show # 1 -completeness of weak bisimilarity for PA (process algebra), and of weak {{simulation}} preorder/equivalence for PDA (pushdown automata), PA and PN (Petri nets). We {{also show}} # 1 - hardness of weak #-trace equivalence for the (sub) classes BPA (basic process algebra) and BPP (<b>basic</b> <b>parallel</b> processes) ...|$|R
50|$|Stencil {{lithography}} is a resist-less and <b>parallel</b> <b>method</b> of fabricating {{nanometer scale}} patterns using nanometer-size apertures as shadow-masks.|$|R
40|$|Abstract: In {{this paper}} Present survey on Data mining, Data mining using Rough set Theory and Data Mining using <b>parallel</b> <b>method</b> for rough set Approximation with MapReduce Technique. With the {{development}} of Information technology data growing at a tremendous rate, so big data mining and knowledge discovery become a new challenge. Rough set theory has been successfully applied in data mining by using MapReduce programming technique. We use the Hadoop MapReduce System as an Implementation platform. The lower and upper approximations are two basic concept of rough set theory. A <b>parallel</b> <b>method</b> {{is used for the}} effective computation of approximation and is improving the performance of data mining. With the benefits of MapReduce it makes our approach more ideal for executing large scale data using <b>parallel</b> <b>method...</b>|$|R
30|$|This set of {{algorithms}} represents is {{the set of}} <b>parallel</b> <b>method</b> {{based on}} MapReduce to solve the least square problem.|$|R
40|$|This paper {{describes}} {{techniques used}} to optimise {{the performance of}} parallel simulation of SS 7 telecommunication networks. A <b>basic</b> <b>parallel</b> simulation model of an SS 7 network and the conservative implementation of the model are discussed and experimental results {{on the performance of}} the simulator are examined. A technique for achieving further optimisation is proposed...|$|R
5000|$|... "Investigation of the Comparative Values of Concentrated and <b>Parallel</b> <b>Methods</b> of Mortar Fire." [...] 1896. Journal of the United States Artillery ...|$|R
40|$|We show {{polynomial}} time algorithms for deciding hereditary history preserving bisimilarity (in O(n 3 log n)) and history preserving bisimilarity (in O(n 6)) on the class <b>Basic</b> <b>Parallel</b> Processes. The latter algorithm also decides {{a number of}} other non-interleaving behavioural equivalences (e. g., distributed bisimilarity) which are known to coincide with history preserving bisimilarity on this class. The common general scheme of both algorithms is based on a fixpoint characterization of the equivalences for tree-like labelled event structures. The technique for realizing the greatest fixpoint computation in the case of hereditary history preserving bisimilar-ity is based on the revealed tight relationship between equivalent tree-like labelled event structures. In the case of history preserving bisimilarity, a technique of decid-ing classical bisimilarity on acyclic Petri nets is used. Key words: verification, equivalence checking, non-interleaving equivalences, labelled event structures, hereditary history preserving bisimilarity, history preserving bisimilarity, bisimulation equivalence, <b>basic</b> <b>parallel</b> processe...|$|R
40|$|The branching-time {{temporal}} logic EF is a simple, but natural fragment of computation -tree logic (CTL) and the modal -calculus. We study the decidability {{of the model}} checking problem for EF and infinite-state systems. We use process rewrite systems (PRS) to describe infinite-state systems and define a hierarchy of subclasses of PRS that includes Petri nets, pushdown processes, <b>Basic</b> <b>Parallel</b> Processes (BPP), context-free processes and PA-Processes. Then we establish the exact limits of the decidability of model checking with EF in this hierarchy. Model checking with EF is undecidable for Petri nets and even for parallel pushdown automata (the pushdown extension of <b>Basic</b> <b>Parallel</b> Processes). On the other hand, model checking with EF is decidable for PAD, a process model that subsumes both PA-processes and pushdown processes. Key words: infinite-state systems, {{temporal logic}}, EF, model checking, process algebra, PA-processes, pushdown processes 1 Introduction The branching-time tempora [...] ...|$|R
40|$|We {{investigate}} the model checking problem for branching time logics and <b>Basic</b> <b>Parallel</b> Processes. We {{show that the}} problem is undecidable for the logic 8 L(O; F; U) (equivalent to CTL) in the usual interleaving semantics, but decidable in a standard partial order interpretation. 1 Introduction Most techniques for the verification of concurrent systems are only applicable to the finite state case. However, many interesting systems have infinite state spaces. In the last years, several verification problems {{have been shown to be}} decidable for two classes of infinite-state systems, namely the processes of Basic Process Algebra (BPA) [1], a natural subset of ACP, and the <b>Basic</b> <b>Parallel</b> Processes (BPP) [3], a natural subset of CCS. These results can be classified into those showing the decidability of equivalence relations [3, 4], and those showing the decidability of model checking for different modal and temporal logics. In this paper, we contribute to this second group. In the sequel [...] ...|$|R
40|$|<b>Basic</b> <b>Parallel</b> Processes (BPP) are {{a natural}} {{subclass}} of CCS infinite-state processes. They are also {{equivalent to a}} special class of Petri nets. We show that unlike for general Petri nets, it is decidable if a BPP and a finite-state system are weakly bisimilar. To {{the best of our}} knowledge, this is the first decidability result for weak bisimulation and a non-trivial class of infinite-state systems. We also show that the model checking problem for BPPs and the branching time logic UB Γ is PSPACE-complete. This settles a conjecture of [4]. Keywords: <b>Basic</b> <b>Parallel</b> Processes, bisimulation, model checking. 1 Introduction Bisimulation equivalence [10], {{has become one of the}} most successful equivalence notions in concurrency theory, both with respect to theoretical research and to applications. In recent years, the decidability of bisimulation equivalence on several classes of infinite-state systems has been intensely studied, and a number of positive results have been obtained. [...] ...|$|R
40|$|The paper {{provides}} a structural characterisation of the reachable markings of Petri nets {{in which every}} transition has exactly one input place. As a corollary, the reachability problem for this class is proved to be NP-complete. Further consequences are: the uniform word problem for commutative context-free grammars is NP-complete; weak-bisimilarity is semidecidable for <b>Basic</b> <b>Parallel</b> Processes. Keywords: Petri nets, Commutative Context-free Grammars, <b>Basic</b> <b>Parallel</b> Processes, Weak bisimilarity. 1. Introduction The reachability problem plays {{a central role in}} Petri net theory, and has been studied in numerous papers (see [5] for a comprehensive list of references). In {{the first part of this}} paper we study it for the nets in which every transition needs exactly one token to occur. Following [8], we call them communication-free nets, because no cooperation between places is needed in order to fire a transition; every transition is activated by one single token, and the tokens may flow [...] ...|$|R
30|$|The {{digital signal}} {{processing}} part (i.e., baseband processing) has two major tasks. First, the Doppler frequencies and code phases of the satellites need to be acquired. The details of the acquisition process are well explained in literature, for example, [1, 7]. There {{are a number of}} ways to implement acquisition, with <b>parallel</b> <b>methods</b> being faster than serial ones, but at the cost of consuming more resources. The <b>parallel</b> <b>methods</b> can be applied either as convolution in the time domain (matched filters) or as multiplication in the frequency domain (using FFT and IFFT).|$|R
40|$|Fuel {{cell system}} which can solve the {{environmental}} problem is receiving attention. To use utility power necessary power conversion system from low voltage that {{is generated by}} fuel cell system. because fuel cell has special characteristic of low voltage high current. To improve PCS's efficiency the <b>paralleling</b> <b>method</b> is used. Available the method could reduce the switching loss. But the existing research {{could not be found}} optimal result and accompanying several effects. In this study analysis several effects causing the <b>parallel</b> <b>method.</b> The effects have been demonstrated through simulation...|$|R
40|$|In a {{companion}} paper Lopez and Trigiante [4] introduced BVM methods for solving linear ODEs. In this paper {{we describe the}} implementation of a particular method in this class on a parallel computer. The corresponding discrete problem requires the solution of an unsymmetric block tridiagonal linear system, which is solved by means of an iterative method. A brief survey of such iterative methods is given. Comparisons of the <b>parallel</b> <b>method</b> with the LSODE package are reported, both in terms of precision of the numerical solution and speed-up, showing the effectiveness of the <b>parallel</b> <b>method...</b>|$|R
40|$|PA (Process algebra) is {{the name}} that has become common use to denote the algebra with a {{sequential}} and parallel operator (without communication), plus recursion. PA-processes subsume both <b>Basic</b> <b>Parallel</b> Processes (BPP) [Chr 93] and context-free processes (BPA). They are a simple model for infinite state concurrent systems. We show that the model checking problem for the branching time temporal logic EF is decidable for PA-processes...|$|R
40|$|Abstract. We {{propose a}} polynomial-time {{decision}} procedure for hereditary history preserving bisimilarity (hhp-b) on <b>Basic</b> <b>Parallel</b> Processes (BPP). Furthermore, we give a sound and complete equational axiomatization for the equivalence. Both results {{are derived from}} a decomposition property of hhp-b, which is the main technical contribution of the paper. Altogether, our results complement previous work on complexity and decomposition of classical and historypreserving bisimilarity on BPP. ...|$|R
40|$|Standard No. EN 15831 : 2004 {{provides}} 2 {{methods of}} calculating insulation: parallel and serial. The <b>parallel</b> <b>method</b> {{is similar to}} the global one defined in Standard No. ISO 9920 : 2007. Standards No. EN 342 : 2004, EN 14058 : 2004 and EN 13537 : 2002 refer to the methods defined in Standard No. EN ISO 15831 : 2004 for testing cold protective clothing or equipment. However, it is necessary to consider several issues, e. g., referring to measuring human subjects, when using the serial method. With one zone, there is no serial–parallel issue as the results are the same, while more zones increase the difference in insulation value between the methods. If insulation is evenly distributed, differences between the serial and <b>parallel</b> <b>method</b> are relatively small and proportional. However, with more insulation layers overlapping in heavy cold protective ensembles, the serial method produces higher insulation values than the parallel one and human studies. Therefore, the <b>parallel</b> <b>method</b> is recommended for standard testing...|$|R
