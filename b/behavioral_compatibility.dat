24|4|Public
40|$|Abstract: The component-based {{software}} development (CBSD) {{has been paid}} more attention by software practicers in recent years. How to analyze and verify behavior-level component substitutability is very important when the component-based software system needs upgrading or maintaining. Concentrating on the component-based software system, this paper formally specifies the components and their interaction behaviors, analyzes {{the behavior of the}} new component compared with the old one, and then presents a set of rules for verifying behavioral substitutability of components in software system to ensure the <b>behavioral</b> <b>compatibility</b> whenever a component is replaced by a new one. Finally, an example of e-commerce is presented to illustrate the feasibility and pertinence of this approach. Key-Words: software component component composition <b>behavioral</b> <b>compatibility</b> behavioral substitutabilit...|$|E
40|$|Services (BPEL) is {{becoming}} the industrial standard for modeling web service-based business processes. <b>Behavioral</b> <b>compatibility</b> for web service composition {{is one of the}} most important topics. The commonly used reachability exploration method focuses on verifying deadlock-freeness. When this property is violated, the states and traces in the reachability graph only give clues to re-design the composition. The process must then repeat itself until no deadlock is found. In this paper, multiple web services interaction is modeled with a Petri net called Composition net (C-net for short). The problem of <b>behavioral</b> <b>compatibility</b> among web services is hence transformed into the deadlock structure problem of a C-net. If services are incompatible, a policy based on appending additional information channels is proposed. It is proved that it can offer a good solution that can be mapped back into the BPEL models automatically...|$|E
40|$|Business Process Execution Language for Web Services (BPEL) is {{becoming}} the industrial standard for modeling web service-based business processes. <b>Behavioral</b> <b>compatibility</b> for web service composition {{is one of the}} most important topics. The commonly used reachability exploration method focuses on verifying deadlock-freeness. When this property is violated, the states and traces in the reachability graph only give clues to re-design the composition. The process must then repeat itself until no deadlock is found. In this paper, multiple web services interaction is modeled with a Petri net called Composition net (C-net for short). The problem of <b>behavioral</b> <b>compatibility</b> among web services is hence transformed into the deadlock structure problem of a C-net. If services are incompatible, a policy based on appending additional information channels is proposed. It is proved that it can offer a good solution that can be mapped back into the BPEL models automatically...|$|E
30|$|The {{first time}} the concept of {{transition}} covers in Petri net models was proposed for obtaining a live Petri net controller of small size [11]. The authors of article [12] proposed a new methodology to design and analyze an urban traffic network control system by using the STPN (synchronized timed Petri nets), which also modularized the applications of the STPN to eight-phase, six-phase, and two-phase traffic-light control systems. A Petri net-based method was presented to address the temporal constraint satisfiability in a holistic manner and also in a modular way in article [13]. The automatic Web service composition method was presented by the authors of article [14] that deals with both input/output <b>compatibility</b> and <b>behavioral</b> constraint <b>compatibility</b> of fuzzy semantic services. The admissible heuristic function was designed in article [15] which considered the available time of shared machine resources and subparts during calculating the lower bound of the remaining time for unprocessed operations. The authors of article [16] presented a method for hierarchical configurable Petri nets description in VHDL language.|$|R
40|$|Using {{artificial}} insemination {{we attempted to}} produce hybrids between captive, male, western, gray wolves (Canis lupus) and female, western coyotes (Canis latrans) to determine whether their gametes would be compatible and the coyotes could produce and nurture offspring. The results contribute new information to an ongoing controversy over whether the eastern wolf (Canis lycaon) is a valid unique species that could {{be subject to the}} U. S. Endangered Species Act. Attempts with transcervically deposited wolf semen into nine coyotes over two breeding seasons yielded three coyote pregnancies. One coyote ate her pups, another produced a resorbed fetus and a dead fetus by C-section, and the third produced seven hybrids, six of which survived. These results show that, although it might be unlikely for male western wolves to successfully produce offspring with female western coyotes under natural conditions, western-gray-wolf sperm are compatible with western-coyote ova and that at least one coyote could produce and nurture hybrid offspring. This finding in turn demonstrates that gamete incompatibility would not have prevented western, gray wolves from inseminating western coyotes and thus producing hybrids with coyote mtDNA, a claim that counters the view that the eastern wolf is a separate species. However, some of the difficulties experienced by the other inseminated coyotes tend to temper that finding and suggest that more experimentation is needed, including determining the <b>behavioral</b> and physical <b>compatibility</b> of western gray wolves copulating with western coyotes. Thus although our study adds new information to the controversy, it does no...|$|R
40|$|Selecting {{an optimal}} event {{distribution}} for experimental use in event-related fMRI studies can require {{the generation of}} large numbers of event sequences with characteristics hard to control. The use of known probability distributions offers the possibility to control event timing and constrain the search space for finding optimal event sequences. We investigated different probability distributions in terms of response estimation (estimation efficiency), detectability (detection power, parameter estimation efficiency, sensitivity to true positives), and false-positive activation. Numerous simulated event sequences were generated selecting interevent intervals (IEI) from the uniform, uniform permuted, Latin square, exponential, binomial, Poisson, � 2, geometric, and bimodal probability distributions and fixed IEI. Event sequences from the bimodal distribution, like block designs, had the best performance for detection and the poorest for estimation, while high estimation and detectability occurred for the long-decay exponential distribution. The uniform distribution also yielded high estimation efficiency, but probability functions with a long tail toward higher IEI, such as the geometric and the � 2 distributions, had superior detectability. The distributions with the best detection performance also had a relatively high incidence of false positives, in contrast to the ordered distributions (Latin square and uniform permuted). The predictions of improved sensitivities for distributions with long tails were confirmed with empirical data. Moreover, the Latin square design yielded detection of activated voxels similar to the � 2 distribution. These results indicate that high detection and suitable <b>behavioral</b> designs have <b>compatibility</b> for application of functional MRI methods to experiments requiring complex designs. © 2001 Academic Pres...|$|R
40|$|Abstract. Behavior {{protocols}} {{turned out}} to be very suitable platform for component behavior specification if one is interested in <b>behavioral</b> <b>compatibility</b> of communicating software components. The level of abstraction provided by BP is however sometimes too high resulting in both hiding important aspects of the design and introducing artificial incompatibilities. In this paper, we present extensions to behavior protocols allowing more precise behavior specification addressing the aforementioned issues...|$|E
40|$|Component-oriented {{development}} {{establishes the}} building of software artifacts by means of connection {{of a collection of}} components, independently produced. The success of applying this development approach depends of the compatibility between connected component interfaces. That compatibility includes interface structural and behavioral features. Component Interface Pattern establishes a structure for building component interfaces that allows to evaluate and to assure the structural and <b>behavioral</b> <b>compatibility</b> between components to be connected...|$|E
40|$|Research on mate choice has {{primarily}} {{focused on}} preferences for quality indicators, assuming that all individuals show consensus {{about who is}} the most attractive. However, in some species, mating preferences seem largely individual-specific, suggesting that they might target genetic or <b>behavioral</b> <b>compatibility.</b> Few studies have quantified the fitness con-sequences of allowing versus preventing such idiosyncratic mate choice. Here, we report on an experiment that controls for variation in overall partner quality and show that zebra finch (Taeniopygia guttata) pairs that resulted from free mate choice achieved a 37 % higher reproductive success than pairs that were forced to mate. Cross-fostering of freshly laid eggs showed that embryo mortality (before hatching) primarily depended on {{the identity of the}} genetic parents, whereas offspring mortality during the rearing period depended on foster-parent identity. Therefore, preventing mate choice should lead to an increase in embryo mortality if mate choice targets genetic compatibility (for embryo viability), and to an increase in offspring mortality if mate choice targets <b>behavioral</b> <b>compatibility</b> (for better rear-ing). We found that pairs from both treatments showed equal rates of embryo mortality, bu...|$|E
40|$|Die vorliegende Dissertation beinhaltet drei Studien, welche die kognitiven und neuronalen Grundlagen der Kontrollregulation – ausgelöst durch vorherige Konflikte, konfliktankündigende Hinweise sowie Arousal – untersuchen. Jede Studie basierte auf Interferenzaufgaben mit Durchgängen, die Reaktionskonflikt auslösten (inkompatibel) oder nicht (kompatibel). Studie 1 untersuchte, ob Abfolge abhängigen Verhaltensanpassungen äquivalent sind mit erwartungsbasierten Kontrollprozessen, die durch Hinweise auf die Kompatibilität der nächsten Aufgabe ausgelöst werden. Behaviorale und elektroenzephalographische (EEG) Maße belegten, dass diese Prozesse dissoziieren. Die kontingente {{negative}} Variation (CNV), eine EEG Komponente, die Aufgabenantizipation indiziert, zeigte, dass von der Abfolge anhängige Kontrollanpassungen bereits zwischen den Durchgängen agieren. Studie 2 fokussierte auf Prozesse und neuronale Substrate der Kontrollantizipation durch Hinweise. Kompatibilitätshinweise begünstigten effektiv die Leistung, vergrößerten die CNV vor dem nächsten Durchgang und reduzierten konfliktbezogene Konfliktverarbeitung, wie sie durch die N 2 Komponente indiziert wird. Im Gegensatz zur Kontrollbedingung gab es keine Anzeichen von Reaktionskonflikt, was auf präemptive Strategien hinweist (d. h. {{a priori}} Konfliktverhinderung durch Umschreibung von Bedingungs-Handlungs-Regeln). Funktionelle Bildgebung bestätigte dies, da sie Beteiligung neuronaler Netzwerke zeigte, die eher mit Regelelaboration und –aufrechterhaltung einhergehen als mit Konfliktüberwachung und –lösung. Studie 3 untersuchte das Verhältnis von Handlungskontrolle und Arousalniveau. Toninduziertes Arousal verbesserte Leistung in inkompatiblen und kompatiblen Durchgängen, wobei letztere stärker begünstigt wurden. N 1 und N 2 im EEG wiesen darauf hin, dass die Effekte auf bessere frühe perzeptuelle Diskriminierung und Aufmerksamkeitszuteilung zurückgehen. The present dissertation contains three studies that investigated {{the cognitive and}} neuronal basis underlying action control regulation prompted by prior conflicts, cues predicting conflict, {{as well as the}} state of arousal. These studies were based on inference paradigms involving trials that either induced response conflict (incompatible trials) or did not (compatible trials). Study 1 examined whether behavioral adjustments due to the trial sequence are equivalent to expectancy-based adjustments triggered by cues predicting <b>compatibility.</b> <b>Behavioral</b> and electroencephalographic (EEG) measures showed dissociation of these processes. The contingent negative variation (CNV), a pre-target EEG component indexing task anticipation, further indicated that sequence-related control adjustments already act in the intertrial interval. Study 2 focused on processes and neural substrates underlying cue-based anticipatory control. Cues predicting <b>compatibility</b> effectively benefitted <b>behavioral</b> performance, enhanced the pre-target CNV, and reduced post-target conflict-related processing, as indicated by the N 2 component. In contrast to the control condition, indicators of response conflict were absent, a result pointing to conflict preemption strategies (a priori avoidance of conflict via transformation of condition-action rules). Functional neuroimaging fostered this conclusion by showing the involvement of neuronal networks associated with rule elaboration and maintenance rather than with conflict monitoring or resolution. Study 3 investigated the interrelation of action control and the state of arousal. Tone-induced arousal improved performance in both incompatible and compatible trials, whereas the latter ones were relatively more accelerated. N 1 and N 2 in EEG indicated that these effects are due to enhanced early perceptual discrimination and attentional allocation...|$|R
40|$|A {{request to}} a service {{registry}} must be {{answered with a}} service that fits in several regards, including semantic compatibility, non-functional compatibility, and interface compatibility. In the case of stateful services, there is the additional need to check behavioral (i. e. protocol) compatibility. This paper {{is concerned with the}} latter aspect. An apparent approach to establishing <b>behavioral</b> <b>compatibility</b> would be to apply the well-known technology of model checking to a composition of the provided service and the requesting service. However, this procedure must potentially be repeated for all provided services in the registry which may unprohibitively slow down the response time of the broker. Hence, we propose to insert a preprocessing step. It consists of computing an abstraction of the behavior for each published service that we call communication fingerprint. Upon request, we use the fingerprint to rule out as many as possible incompatible services thus reducing the number of candidates that need to be model checked for <b>behavioral</b> <b>compatibility.</b> The technique is based on linear programming and is thus extremely efficient. We validate our approach on a large set of services that we cut out of real world business processes...|$|E
40|$|Abstract. Treating {{control and}} data in an {{integrated}} way {{is an important issue}} in system development. We discuss a compositional approach for specifying concurrent behavior of components with data states on the basis of interface theories. The dynamic aspects of a system are specified by modal I/O-transition systems, whereas changes of data states are specified by pre- and postconditions. In this setting we study refinement and <b>behavioral</b> <b>compatibility</b> of components. We show that refinement is compositional and that compatibility is preserved by refinement; thus the requirements for interface theories are satisfied. As a consequence, our approach supports independent implementability and reusability of concurrently interacting components with data states. 1...|$|E
40|$|Abstract. The paper {{represents}} current {{achievements of}} an ongoing research that aims to develop a formal approach supporting an automatic selection of a Web service sought by a requestor. The approach {{is based on the}} matching the requestor’s requirements for a ”useful ” service against the service description offered by the provider. We focus on the checking <b>behavioral</b> <b>compatibility</b> between operation contracts specifying pre-conditions and effects of required and provided operations. Graph transformation rules with positive application conditions are proposed as a visual formal notation for contracts. The desired dependence between requestor and provider contracts is determined by the semantic compatibility relation and syntactic matching procedure that is sound w. r. t. this relation. ...|$|E
40|$|Web {{services}} {{have become the}} technology of choice for service-oriented computing implementation, where Web services can be composed in response to some users' needs. It is critical to verify the compatibility of component Web services to ensure the correctness {{of the whole composition}} in which these components participate. Traditionally, two conditions need to be satisfied during the verification of compatibility: reachable termination and proper termination. Unfortunately, it is complex and time consuming to verify those two conditions. To reduce the complexity of this verification, we model Web services using colored Petri nets (PNs) so that a specific property of their structures is looked into, namely, well structuredness. We prove that only reachable termination needs to be satisfied when verifying <b>behavioral</b> <b>compatibility</b> among well-structured Web services. When a composition is declared as valid and in the case where one of its component Web services fails at run time, an alternative one with similar behavior needs to come into play as a substitute. Thus, it is important to develop effective approaches that permit one to analyze the similarity of Web services. Although many existing approaches utilize PNs to analyze <b>behavioral</b> <b>compatibility,</b> few of them explore further appropriate definitions of behavioral similarity and provide a user-friendly tool with automatic verification. In this paper, we introduce a formal definition of context-independent similarity and show that a Web service can be substituted by an alternative peer of similar behavior without intervening other Web services in the composition. Therefore, the cost of verifying service substitutability is largely reduced. We also provide an algorithm for the verification and implement it in a tool. Using the tool, the verification of behavioral similarity of Web services can be performed in an automatic way. Xitong Li, Yushun Fan, Quan Z. Sheng, Zakaria Maamar, and Hongwei Zh...|$|E
40|$|Abstract. The {{ability of}} {{applications}} to dynamically discover required services {{is a key}} problem for Web Services. However, this aspect is not adequately supported by current Web Services standards. It is our objective to develop a formal approach allowing the automation of the discovery process. The approach {{is based on the}} matching of requestor’s requirements for a useful service against service descriptions. In the present paper, we concentrate on <b>behavioral</b> <b>compatibility.</b> This amounts to check a relation between provided and required operations described via operation contracts. Graph transformation rules with positive and negative application conditions are proposed as a visual formal notation for contract specification. We establish the desired semantic relation between requestor and provider and prove the soundness and completeness of a syntactic notion of matching w. r. t. this relation. ...|$|E
40|$|Abstract—Web {{services}} {{have become the}} technology of choice for service-oriented computing implementation, where Web services can be composed in response to some users ’ needs. It is critical to verify the compatibility of component Web services to ensure the correctness {{of the whole composition}} in which these components participate. Traditionally, two conditions need to be satisfied during the verification of compatibility: reachable termination and proper termination. Unfortunately, it is complex and time consuming to verify those two conditions. To reduce the complexity of this verification, we model Web services using colored Petri nets (PNs) so that a specific property of their structures is looked into, namely, well structuredness. We prove that only reachable termination needs to be satisfied when verifying <b>behavioral</b> <b>compatibility</b> among well-structured Web services. When a composition is declared as valid and in the case where one of it...|$|E
40|$|Online social {{networking}} (SN) has gained enormous {{popularity in the}} last ten years with users numbering in the millions. There are an equal number of males and females who use social net-working and there is no difference in ethnicity; Caucasians, African-American and Hispanic adults are equally likely to use these sites. This paper studies {{social networking}} behavior using Rogers (1995) model of human behavior known as Diffusion of Innovation (DI). Specifically, findings re-veal that <b>behavioral</b> <b>compatibility</b> (COMP) with social networking, relative advantage (RA), com-plexity (CMPX) and ease of trying (TRY) are positively associated with intention to use social net-working. In addition, findings confirm that intention influences use of social networking. A review of gender shows little difference between diffusion influences on intention. The modified DI model provides a good fit with the overall data and can be used to predict and understand the usage of social networking...|$|E
40|$|International audienceWith the {{emergence}} of Service Component Architecture (SCA), all interests were focused on representing this architecture in a formal way {{in order to be}} able to prevent the specifications failures. In this context, our recent works were interested in formalising structural properties of the SCA specifications, particularly to defining structural compatibility between connected services. In fact, verifying structural compatibility is necessary but not sufficient. In this paper we intend to represent, in a first step, the SCA behavioral properties by means of Event-B invariants and events. In a second step, we established <b>behavioral</b> <b>compatibility</b> between services interacting together which is considered as a delicate task and has a great importance in guaranteeing reliable communication between services. At last, we propose an Event-B based approach so as to configure the SCA composition dynamically. We focus, particularly, on the correctional dynamic such as substituting faulty services and components. The consistency and the validity of the obtained model have been proved by the Event-B dedicated tool...|$|E
40|$|Embedded {{software}} systems, e. g. automotive, robotic or automation {{systems are}} highly configurable and consist of many software components being available in different vari-ants and versions. To identify {{the degree of}} reusability be-tween these different occurrences of a component, it is nec-essary to determine the functional backward and forward compatibility between them. Based on this information {{it is possible to}} identify in which system context a component can be replaced safely by another version, e. g. exchanging an older component, or variant, e. g. introducing new fea-tures, to achieve the same functionality. This paper presents a model checking approach to de-termine <b>behavioral</b> <b>compatibility</b> of Simulink models, ob-tained from different component variants or during evolu-tion. A prototype for automated compatibility checking demonstrates its feasibility. In addition implemented op-timizations make the analysis more efficient, when the com-pared variants or versions are structurally similar. A case study on a driver assistance system provided by Daimler AG shows the effectiveness of the approach to au-tomatically compare Simulink components. 1...|$|E
40|$|Component-based {{software}} development is gaining recognition {{as the key}} technology {{for the construction of}} high-quality, evolvable, large software systems in timely and affordable manners. In this new setting, interoperability is one of the essential issues, since it enables the composition of reusable heterogeneous components developed by different people, at different times, and possibly with different uses in mind. Currently most object and component platforms (such as CORBA, DCOM, or EJB) already provide the basic infrastructure for component interoperability at the lower levels, i. e., they sort out most of the "plumbing" issues. However, interoperability goes far beyond that; it also involves <b>behavioral</b> <b>compatibility,</b> protocol compliance, agreements on the business rules, etc. This chapter tries to go through the basic concepts related to component interoperability, with special emphasis in the syntactic, protocol and operational specifications of components. Our main goal is to point out the existing problems, survey the current solutions and how they address those problems, and to draw attention towards some of the still open issues and challenges in this interesting research area...|$|E
40|$|The {{component}} based {{development is}} a well established methodology of software development. The industry, however does not take the advantage of component behavior modeling. Although the analyses of models guarantee notiobn of correctness in form of <b>behavioral</b> <b>compatibility</b> of component composition, the application in practice {{is limited by the}} expressiveness of the modeling languages {{as well as by the}} fact that the manual preparation of models is demanding and error prone task. To ease the application of behavioral modeling in practice, we propose Threaded Behavior Protocols (TBP) |a modeling language aiming at the gap between the modeling and imperative languages and the imperative languages. By providing the developers with the concepts known from the imperative languages at the model level, we enable easier preparation of component models. The theoretical framework of TBP provides the notion of correctness based on absence of communication errors and the re nement relation preserving the correctness in arbitrary environment. Thus, the analyses supported by the framework provide similar bene ts as the legacy modeling languages, however considering also the imperative language concepts...|$|E
40|$|Most {{methods for}} {{designing}} component-based systems and verifying their compatibility address only the syntactic compatibility of components; no analysis of run-time behavior is made. Those methods that do address run-time behavior suffer from state-explosion: the exponential {{increase of the}} number of global states, and hence the complexity of the analysis, with the number of components. We present a method for designing component-based systems and verifying their <b>behavioral</b> <b>compatibility</b> and temporal behavior that is not susceptible to state explosion. Our method is mostly automatic, with little manual deduction required, and does not analyze a large system of connected components at once, but instead analyzes components two-at-a-time. This pair-wise approach enables the automatic verification of temporal behavior, using model-checking, in time polynomial in the number and size of all components. Our method checks that behavior of a pair of interacting components conforms to given properties, specified in temporal logic. Interaction of the components is captured in a product of their behavioral automata, which are provided as a part of each component’s interface. We demonstrate the effectiveness of our method by applying it to the design and verification of a component-based elevator control algorithm...|$|E
40|$|International audienceAn {{ontology}} driven domain model {{approach for}} improving the fidelity of the simulation by developing models through the inclusion of simulation objectives for the system Verification & Validation activities (V&V) is presented. The system V&V by simulation ontology used to build this domain model is briefly outlined in the system teleological framework of Structure, Behavior, Function, Interface and Operation. The concept of operating mode is proposed and discussed with an example. The ontology approach is demonstrated with an aircraft nacelle anti-ice system presented in the experimental frame formalism. An example of using the inference and query capabilities of the domain model approach to identify and justify abstractions consistent with the test scenarios is illustrated with a failure mode case study for this application case. The relationship with formal behavioral approach through operating modes is briefly discussed at the end where some theoretical results on the <b>behavioral</b> <b>compatibility</b> of the experimental frame components with interface simulation distances are briefly presented. The paper concludes with a discussion {{on the benefits of}} this approach from an industrial perspective along with an overview of the challenges ahead and the future work...|$|E
40|$|AbstractWe {{present a}} {{compositional}} approach for specifying concurrent behavior of components with data {{states on the}} basis of interface theories. The dynamic aspects of a system are specified by modal input/output automata, whereas changing data states are specified by pre- and postconditions. The combination of the two formalisms leads to our notion of modal input/output automata with data constraints (MIODs). In this setting we study refinement and <b>behavioral</b> <b>compatibility</b> of MIODs. We show that compatibility is preserved by refinement and that refinement is compositional w. r. t.  synchronous composition, thus satisfying basic requirements of an interface theory. We propose a semantic foundation of interface specifications where any MIOD is equipped with a model-theoretic semantics describing the class of its correct implementation models. Implementation models are formalized in terms of guarded input/output transition systems and the correctness notion is based on a simulation relation between an MIOD and an implementation model which relates not only abstract and concrete control states but also (abstract) data constraints and concrete data states. We show that our approach is compositional in the sense that locally correct implementation models of compatible MIODs compose to globally correct implementations, thus ensuring independent implementability...|$|E
40|$|The {{social and}} {{maintenance}} behaviors of {{two pairs of}} Mexican gray wolf in captivity were studied. Wolves belonged to Zacango (ZZ) and Leon Zoo (LZ). For the ZZ pair significant differences were observed (p< 0. 01) for the social behaviors, whereas {{no differences were found}} for neutral or affiliative behaviors. The LZ pair showed no differences in social behavior before the breeding season, but after this significant differences were observed for playing and sexual activity (p< 0. 001). Wolves showed a preference (p< 0. 0001) to perform their activities on a reduced place far away from the human transit, especially those related with the courtship behavior. For the ZZ pair a total number of 389 mounting observations were registered during 11 consecutive days, most of them with pelvic movements but only two culminating with copulation (0. 6 %). The LZ pair showed a reproductive activity of 180 mountings, three of them culminating with copula (1. 6 %); none of the pairs showed reproductive success. Reproductive success depends on both physiological and <b>behavioral</b> <b>compatibility,</b> but some other causes may be involved in the reproductive failure of the ZZ pair, among them the stress of restraining for the cytology studies and the housing conditions like the presence of large predators as closer neighbors to the wolves...|$|E
40|$|We {{present a}} {{methodology}} for designing component-based systems and verifying their temporal behavior properties. Our verification method is mostly automatic, {{and is not}} susceptible to the well-known state-explosion problem, which has hitherto severely limited the practical applicability of automatic verification methods. Our method specifies the externally visible behavior of each component £ as several behavioral interface automaton (BIA), {{one for each of}} the other components which £ interacts directly with. A BIA is a finite-state automaton whose transitions can be labeled with method calls. For each pair of directly interacting components, we compute the product of the BIA. These “pair machines ” are then verified mechanically. The verified “pair properties ” are then combined deductively to deduce global properties. Since the pair-machines are the product of only two components, they are small, and so their mechanical verification, e. g., by model checking, does not run up against state-explosion. The use of several BIA per component enables a clean separation between interfaces, so that the interactions of a component £ with several other components are cleanly separated, and can be inspected in isolation. This in itself promotes the understandability of a design. Our method also enhances extensibility. If a component is modified, only the pairs in which that component is involved are affected. The rest of the system is undisturbed. To our knowledge, our method is the first approach to <b>behavioral</b> <b>compatibility</b> that does not suffer from state-explosion...|$|E

