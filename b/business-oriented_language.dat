8|7|Public
5|$|In {{the late}} 1950s, {{computer}} users and manufacturers were becoming {{concerned about the}} rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new programming languages were proliferating at an ever-increasing rate, the same survey suggested that if a common <b>business-oriented</b> <b>language</b> were used, conversion would be far cheaper and faster.|$|E
500|$|COBOL ( [...] , {{an acronym}} for common <b>business-oriented</b> <b>language)</b> is a {{compiled}} English-like computer programming language designed for business use. It is imperative, procedural and, since 2002, object-oriented. COBOL is primarily used in business, finance, and administrative systems for companies and governments. [...] COBOL is still widely used in legacy applications deployed on mainframe computers, such as large-scale batch and transaction processing jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages. Most programming in COBOL is now purely to maintain existing applications.|$|E
2500|$|In {{the spring}} of 1959, {{computer}} experts from industry and government were brought together in a two-day conference known as the Conference on Data Systems Languages (CODASYL). Hopper served as a technical consultant to the committee, and many of her former employees served on the short-term committee that defined the new language COBOL (an acronym for COmmon <b>Business-Oriented</b> <b>Language).</b> The new language extended Hopper's FLOW-MATIC language with some ideas from the IBM equivalent, COMTRAN. [...] Hopper's belief that programs should be written in a language that was close to English (rather than in machine code or in languages close to machine code, such as assembly languages) was captured in the new business language, and COBOL went on {{to be the most}} ubiquitous business language to date. Among the members of the committee that worked on COBOL was Mount Holyoke College alumni Jean E. Sammet.|$|E
50|$|While B5000 was {{specifically}} designed to support ALGOL, this was only a starting point. Other <b>business-oriented</b> <b>languages</b> such as COBOL were also well supported, most notably by the powerful string operators which were included {{for the development of}} fast compilers.|$|R
5000|$|In April, 1959, a {{group of}} {{computer}} manufacturers and users met at the University of Pennsylvania to plan {{the development of a}} computer language for business applications. At the time, <b>business-oriented</b> <b>languages</b> were built to work with specific computer systems. This new effort would seek to build a language whose programs could be easily adapted to run on other computers. Gene Smith represented the Navy's Bureau of Ships at that meeting. The development was divided among three task forces: ...|$|R
5000|$|... dBase {{was also}} one of the first <b>business-oriented</b> <b>languages</b> to {{implement}} string evaluation. i = 2 myMacro = [...] "i + 10" [...] i = &myMacro * comment: i now has the value 12Here the [...] "&" [...] tells the interpreter to evaluate the string stored in [...] "myMacro" [...] as if it were programming code. This is an example of a feature that made dBase programming flexible and dynamic, sometimes called [...] "meta ability" [...] in the profession. This could allow programming expressions to be placed inside tables, somewhat reminiscent of formulas in spreadsheet software.|$|R
50|$|Syntactically, MATH-MATIC {{was similar}} to Univac's {{contemporaneous}} <b>business-oriented</b> <b>language,</b> FLOW-MATIC, differing in providing algebraic-style expressions and floating-point arithmetic, and arrays rather than record structures.|$|E
50|$|In {{the late}} 1950s, {{computer}} users and manufacturers were becoming {{concerned about the}} rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new programming languages were proliferating at an ever-increasing rate, the same survey suggested that if a common <b>business-oriented</b> <b>language</b> were used, conversion would be far cheaper and faster.|$|E
50|$|At {{the same}} time, Ross {{maintained}} his military commission and served annual tours at the Pentagon under {{a succession of}} Secretaries of Defence: Charles E. Wilson; Neil H. McElroy and Thomas S. Gates. With twenty years of military service behind him, Ross retired from the Army, but he remained an active veteran attending annual reunions into this century. It was at the Pentagon in the late fifties where Ross first learned about the potential of computerization and information technology and became privy {{to the work of}} the Short Range Committee that led to the origin of Common <b>Business-Oriented</b> <b>Language</b> (COBOL).|$|E
5000|$|BFM Belgium is a French <b>language</b> <b>business-oriented</b> {{radio station}} in Belgium, part of BFM France. [...] It arrived in Belgium in 1995.|$|R
50|$|Programming Language for Business or PL/B is a <b>business-oriented</b> {{programming}} <b>language</b> originally called DATABUS {{and designed}} by Datapoint in 1972 {{as an alternative}} to COBOL because Datapoint's 8-bit computers could not fit COBOL into their limited memory, and because COBOL did not at the time have facilities to deal with Datapoint's built-in keyboard and screen.|$|R
40|$|Abstract. The <b>Business-oriented</b> Constraint <b>Language</b> (BCL) is {{proposed}} {{as a means}} of annotating diagrams in UML. BCL is grounded in the Object Constraint Language (OCL) but is designed particularly {{to address the needs of}} people who are concerned with enterprise application integration (EAI), although it may be more widely applicable. EAI often requires a loosely coupled event-based architecture in which timing and statistical measures are important; these are described in another paper (1). BCL provides these features together with a syntax that is flexible and extensible. It is intended to be accessible to most practitioners, including those who do not have a mathematical background. 1...|$|R
5000|$|COBOL ( [...] , {{an acronym}} for common <b>business-oriented</b> <b>language)</b> is a {{compiled}} English-like computer programming language designed for business use. It is imperative, procedural and, since 2002, object-oriented. COBOL is primarily used in business, finance, and administrative systems for companies and governments. COBOL is still widely used in legacy applications deployed on mainframe computers, such as large-scale batch and transaction processing jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages. Most programming in COBOL is now purely to maintain existing applications.|$|E
5000|$|In {{the spring}} of 1959, {{computer}} experts from industry and government were brought together in a two-day conference known as the Conference on Data Systems Languages (CODASYL). Hopper served as a technical consultant to the committee, and many of her former employees served on the short-term committee that defined the new language COBOL (an acronym for COmmon <b>Business-Oriented</b> <b>Language).</b> The new language extended Hopper's FLOW-MATIC language with some ideas from the IBM equivalent, COMTRAN. Hopper's belief that programs should be written in a language that was close to English (rather than in machine code or in languages close to machine code, such as assembly languages) was captured in the new business language, and COBOL went on {{to be the most}} ubiquitous business language to date. Among the members of the committee that worked on COBOL was Mount Holyoke College alumna Jean E. Sammet.|$|E
40|$|Abstract. Enterprise Application Integration (EAI) often {{requires}} a loosely coupled event-based architecture in which timing and statistical measures are important. Statistical constraints are proposed {{to address some}} of these requirements, although they may well have broader applicability. This idea is extended to the use of approximate terms such as “some ” that can be given a statistical interpretation, as in “Some fault reports give rise to subscriptions. ” These can be a convenient way of expressing constraints that are important to the application architecture but are not absolute — abstraction through approximation. They may be used to annotate diagrams in UML and are based on the existing Object Constraint Language (OCL) (1). Some of the examples use a more flexible syntax known as the <b>Business-oriented</b> Constraint <b>Language</b> (BCL) (2). BCL provides a flexible, extensible syntax that is intended to be accessible to most practitioners, including those who do not have a mathematical background. 1...|$|R

