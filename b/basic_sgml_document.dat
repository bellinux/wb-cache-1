0|162|Public
50|$|A {{conforming}} <b>SGML</b> <b>document</b> must {{be either}} a type-valid <b>SGML</b> <b>document,</b> a tag-valid <b>SGML</b> <b>document,</b> or both. Note: A user may wish to enforce additional constraints on a document, such as whether a document instance is integrally-stored or free of entity references.|$|R
50|$|When an {{external}} entity references a complete <b>SGML</b> <b>document,</b> {{it is known}} in the calling <b>document</b> as an <b>SGML</b> <b>document</b> entity. An <b>SGML</b> <b>document</b> is a text <b>document</b> with <b>SGML</b> markup defined in an SGML prologue (i.e., the DTD and subdocuments). A complete <b>SGML</b> <b>document</b> comprises not only the document instance itself, but also the prologue and, optionally, the SGML declaration (which defines the document's markup syntax and declares the character encoding).|$|R
5000|$|The {{class of}} {{documents}} that conform {{to a given}} <b>SGML</b> <b>document</b> grammar forms an LL(1) language. … The <b>SGML</b> <b>document</b> grammars by themselves are, however, not LL(1) grammars.|$|R
50|$|Many SGML {{features}} {{relate to}} markup minimization. Other features relate to concurrent (parallel) markup (CONCUR), to linking processing attributes (LINK), and to embedding <b>SGML</b> <b>documents</b> within <b>SGML</b> <b>documents</b> (SUBDOC).|$|R
5000|$|An {{advanced}} guide {{focusing on}} XML and <b>SGML</b> <b>document</b> type definitions.|$|R
5000|$|An {{example of}} {{internal}} entity declarations (here in an internal DTD subset of an <b>SGML</b> <b>document)</b> is: ...|$|R
5000|$|Learning of {{structural}} descriptions from structured example documents, in particular Document Type Definitions (DTD) from <b>SGML</b> <b>documents</b> ...|$|R
50|$|The Document Style Semantics and Specification Language (DSSSL) is an {{international}} standard developed to provide a stylesheets for <b>SGML</b> <b>documents.</b>|$|R
40|$|Sgrep is a Unix {{tool for}} searching the {{contents}} of text files. Sgrep implements an algebra of unrestricted text fragments called regions. The algebra allows the retrieval of document components, represented as regions, based on conditions on their relative containment and ordering. This simple yet powerful model is suitable for querying structured document formats like electronic mail, RTF, LaTeX, HTML, or <b>SGML</b> <b>documents.</b> We describe the sgrep query language and give examples of its use. Especially, we explain how sgrep {{can be used for}} querying and assembling <b>SGML</b> <b>documents.</b> Keywords: Text search tools, structured <b>documents,</b> <b>SGML.</b> 1 Introduction Every-day data processing creates large amounts of structured documents that have a more or less regular structure. Familiar examples of such structured documents include electronic mail, Usenet news, program source code, HTML pages, and <b>SGML</b> <b>documents.</b> Users seldom bother to index or to store such volatile texts in advanced information retr [...] ...|$|R
40|$|A {{method for}} augmenting an <b>SGML</b> <b>document</b> {{repository}} system with database functionality is presented. SGML (ISO 8879, 1986) {{has been widely}} accepted as a standard language for writing text with added structural information that gives the text greater applicability. Recently {{there has been a}} trend to use this structural information as metadata in databases. The complex structure of docuuments, however, makes it difficult to directly map the structural information in documents to database structures. In particular, the flat nature of relational databases makes it extremely difficult to model documents that are inherently hierarchical in nature. Consequently, documents are modeled in object-oriented databases (Abite-boul, Cluet, & Milo, 1993), and object-relational databases (Holst, 1995), in which <b>SGML</b> <b>documents</b> are mapped into the corresponding database models and are later reconstructed as necessary. However, this mapping strategy is not natural and can potentially cause loss of information in the original <b>SGML</b> <b>documents.</b> Moreover, interfaces for building queries for current document databases are mostly built on form-based query techniques and do not use the â â look and feelâ â of the documents. This article introduces an implementation method for a complex-object modeling technique specifically for <b>SGML</b> <b>documents</b> and describes interface techniques tailored for text databases. Some of the concepts for a Structured Document Database Management System (SDDBMS) specifically designed for <b>SGML</b> <b>documents</b> are described. A small survey of some current products is also presented to demonstrate the need for such a system...|$|R
50|$|An <b>SGML</b> <b>{{document}}</b> in which, {{for each}} document instance, {{there is an}} associated document type declaration (DTD) to whose DTD that instance conforms.|$|R
40|$|SGML {{standardized}} in ISO 8879 [International Organization for Standardization (1986) ] {{has been}} proliferated {{because it can}} provide various styles and transform documents on different platforms. The <b>SGML</b> <b>document</b> has logical structure information {{in addition to the}} contents. As <b>SGML</b> <b>documents</b> are widely used, there is an increasing demand for a storage and retrieval system to use the logical structure of documents efficiently. However, traditional retrieval systems based on document indexes cannot exploit the logical structure appropriately. In this paper, we have developed a document storage and retrieval system based on structure information, where the <b>SGML</b> <b>document</b> is transformed into Grove, which is the document model for DSSSL and HyTime, and stored at an element level by an object-oriented DBMS, Object Store. It supports structured documents and provides a query interface to retrieve information contained in the structures...|$|R
50|$|In computing, AAP DTD is a Document Type Definition for a {{standard}} <b>SGML</b> <b>document</b> type for scientific documents, {{defined by the}} Association of American Publishers.|$|R
40|$|We {{study the}} problem of {{automatic}} generation of a document type definition (DTD) {{for a set of}} Standard Generalized Markup Language (<b>SGML)</b> <b>documents.</b> We present various situations where we have tagged documents but no DTD, and discuss the requirements various applications may have with respect to the generation process. We also present an automatic DTD generation tool that can be adjusted for several tasks necessary in the applications. The method is also demonstrated with some experimental cases. KEY WORDS <b>SGML</b> <b>Document</b> type definitions Generatio...|$|R
40|$|One of {{the most}} {{exciting}} applications of SGML which has emerged in the recent years is its use in document databases. The structural information embedded in <b>SGML</b> <b>documents</b> makes it possible to query <b>SGML</b> <b>documents</b> and extract information in an automatic manner; however, this querying process has not been standardized. As a result, different SGML database implementations use their own query language syntax, thus making the migration from one system to another a difficult process. In the relational database domains, however, the query language SQL (Structured Query Language) has been a standard for over ten years and is universally used in most relational database systems. Although originally designed for relational databases, SQL is quite powerful for specifying complex queries in a relatively easy-to-understand syntax. With a small set of extensions {{to take advantage of the}} hierarchical structure of SGML, SQL can be easily adapted for use with <b>SGML</b> <b>document</b> databases [TAG- 496]. The pow [...] ...|$|R
40|$|This {{document}} {{describes the}} Normalised SGML Library (NSL), {{which consists of}} a set of C programs for manipulating SGML files and a C application program interface (API) designed to ease the writing of C programs which manipulate <b>SGML</b> <b>documents.</b> LRE Project 62 - 050 Multext Workpackage 2 Milestone C D NSL: SGML Tools 4 1 Introduction In pursuit of a development environment for SGML-based corpus and document processing, with support for multiple versions and multiple levels of annotation, LTG have developed an integrated set of SGML tools and a developers tool-kit, including a C-based API. This software described here contains everything required to process a very wide range of conformant <b>SGML</b> <b>documents.</b> Its initial parsing module incorporates v 0. 4 of James Clark's SP software, arguably the broadest coverage SGML parser available anywhere, commercial or not. The basic architecture is one in which an arbitrary <b>SGML</b> <b>document</b> is processed on the way in, as it were, yielding two results: [...] ...|$|R
40|$|The {{purpose of}} this query {{language}} is to capture feasible and interesting queries on SGML databases. The main property of this query language is that it acts on <b>SGML</b> <b>documents</b> directly and produces <b>SGML</b> <b>documents</b> as output. This approach {{is different from the}} current database systems that support <b>SGML</b> <b>document</b> databases. In current systems, querying is either handled by a proprietary data structure and a query language to suit that structure, or by converting documentations to suit some existing database technology, and using the available query languages for that platform. The language we propose here will work with structure <b>documents</b> in <b>SGML</b> format natively and will use the information in the documents directly without first converting them into a foreign format. 1 The Calculus 1. 1 Types There will be two primary types in this language: 1. Base Types: The base types consist of the basic types such as character strings and numbers. In <b>SGML,</b> the primary <b>basic</b> type is characters (PCD [...] ...|$|R
5000|$|... i4i [...] (Infrastructures for Information) is an {{independent}} software company specializing {{in the delivery of}} XML / <b>SGML</b> <b>document</b> processing software in Toronto, Ontario, Canada, founded by Michel Vulpe in 1993.|$|R
40|$|The Standard Generalized Markup Language (SGML), is an ISO Standard that {{specifies}} {{a language}} for document representation. This paper gives a short introduction to SGML and describes the Amsterdam SGML Parser {{and the problems}} we encountered in implementing the Standard. These problems include interpretation of the Standard in the places where it is ambiguous and the technical problems in parsing <b>SGML</b> <b>documents.</b> KEY WORDS <b>SGML</b> Structured <b>documents</b> Document preparation Parser generator...|$|R
50|$|DynaText is an SGML {{publishing}} tool. It {{was introduced}} in 1990, {{and was the first}} system to handle arbitrarily large <b>SGML</b> <b>documents,</b> and to render them according to multiple style-sheets that could be switched at will.|$|R
50|$|Tag {{omission}} is {{an optional}} feature to minimize an <b>SGML</b> <b>document.</b> Whenever a tag can be implicitly anticipated by the parser from {{the structure of}} the document, the tag can be omitted.The tag omission feature can be generally enabled or disabled in the <b>SGML</b> Declaration. The <b>Document</b> Type Definition is used to enable or disable the tag for a specific tag.|$|R
5000|$|A {{report on}} an early {{implementation}} of a parser for <b>basic</b> <b>SGML,</b> the Amsterdam SGML Parser, [...] notes [...] the DTD-grammar in SGML must conform to a notion of unambiguity which closely resembles the LL(1) conditions [...] and specifies various differences.|$|R
50|$|HyTime (Hypermedia/Time-based Structuring Language) is a markup {{language}} that is an application of SGML. HyTime defines a set of hypertext-oriented element types that, in effect, supplement SGML and allow <b>SGML</b> <b>document</b> authors to build hypertext and multimedia presentations in a standardized way.|$|R
50|$|EAD 1.0 was an <b>SGML</b> <b>document</b> type {{definition}} (DTD). EAD 2002, {{the second}} incarnation of EAD, was finalized in December 2002 and made available as an XML DTD. The {{latest version of}} EAD, EAD3, is available as both an XML schema and a DTD.|$|R
50|$|An <b>SGML</b> <b>{{document}},</b> all {{of whose}} document instances are fully tagged. There {{need not be}} a document type declaration associated with any of the instances. Note: If there is a document type declaration, the instance can be parsed with or without reference to it.|$|R
40|$|Abstract In {{traditional}} {{information retrieval}} (IR) systems, a document {{as a whole}} is the target for a query. With increasing interests in structured <b>documents</b> like <b>SGML</b> <b>documents,</b> there is a growing need to build an LR system that can retrieve parts of documents, which satisfy not only content-based but also structure-based requirements. In this paper, we describe an inference-net-based approach to this problem. The model is capable of retrieving elements at any level in a principled way, satisfying certain containment constraints in a quety. Moreover, lvhile the model is general enough to reproduce the ranking strategy adopted by conventional document retrieval systems by making use of document and collection level statistics such as TF and IDF, its flexibility allows for incorporation of a variety of pragmatic and semantic information associated with document structures. We implemented the model and ran a series of experiments to show that, in addition to the added functionality, the use of the structural information embedded in <b>SGML</b> <b>documents</b> can improve the effectiveness of document retrieval, compared to the case where no such information is used. We also show that giving a pragmatic preference to a certain element tape of the <b>SGML</b> <b>documents</b> can enhance retrieval effectiveness. ...|$|R
40|$|The International Standard for the Standard Generalized Markup Language (SGML) {{published}} in 1986 is now {{seen as a}} mature language for expressing document structure and is accepted as the basis for major projects such as the Text Encoding Initiative and important hypertext languages such as HTML and XML. The historical origin of SGML as a technique for adding marks to texts has left a legacy of complexities and di#culties which hinder its wide acceptance. A key di#culty is the dual role that <b>SGML</b> <b>documents</b> currently play: they are both a representation for interchange and a human readable presentation. We examine possible document markup techniques in a post-SGML 86 world with emphasis on the framework architecture. The novel ideas include the generalization of the notion of a "character" to a much broader token which is strongly typed to differentiate text, markup, images and other component types. KEYWORDS <b>SGML,</b> <b>document</b> architectures, document, views. INTRODUCTION The origins of t [...] ...|$|R
50|$|A DTD is {{associated}} with an XML or <b>SGML</b> <b>document</b> {{by means of a}} document type declaration (DOCTYPE). The DOCTYPE appears in the syntactic fragment doctypedecl near the start of an XML document. The declaration establishes that the document is an instance of the type defined by the referenced DTD.|$|R
50|$|An <b>SGML</b> <b>document</b> may be {{composed}} from many entities (discrete pieces of text). In SGML, the entities and element types {{used in the}} document may be specified with a DTD, the different character sets, features, delimiter sets, and keywords are specified in the SGML Declaration to create the concrete syntax of the document.|$|R
40|$|Using {{database}} {{technology for}} the administration of digital libraries offers many advantages in a multi-user and distributed environment. However, conventional DBMS are not particularly suited to manage semi-structured data with heterogeneous, irregular, evolving structures {{as in the case}} of <b>SGML</b> <b>documents</b> found in digital libraries. To overcome the difficulties imposed by the rigid schema of conventional systems, several schema-less approaches have been proposed. Using instead unconstrained, extensible schemata offered by object-oriented semantic network systems, we are able both to map document specific structures as database classes, and to model the associated constraint information as integrated schema annotations. In this paper we present the benefits of this approach to create, access and process heterogeneous <b>SGML</b> <b>documents,</b> and in particular to exploit the shared semantics of evolving SGML structures. A respective application is currently being implemented in t [...] ...|$|R
40|$|For GIS, <b>SGML</b> <b>document</b> servers {{and other}} highly {{specialized}} applicationdomains, the systems integration problem is essential since the available softwareoften {{is complex and}} would be costly to reimplement or to modify. In this paperwe describe a two-level architecture for integrating software components basedon partial data integration and user interface synchronization. We also present aprototype implementation of this architecture...|$|R
40|$|In this report, {{we present}} a {{language}} for producing virtual documents, where dynamic information objects can be retrieved from various sources, transformed, and included along with static information in <b>SGML</b> <b>documents.</b> The language uses a tree-like structure for the representation of information objects, and allows querying without a complete knowledge of the structure or the types of information...|$|R
40|$|We {{describe}} some of {{the principles}} behind {{the design of the}} Euromath system, concentrating on some aspects that are needed to explain how the system deals with alphabets and fonts and are not immediately apparent from a demonstration of the system. In particular we outline what an SGML DTD is and what <b>SGML</b> <b>documents</b> look like...|$|R
40|$|A {{method for}} augmenting an <b>SGML</b> <b>document</b> {{repository}} with database functionality is presented. SGML [ISO 8879, 1986] {{has been widely}} accepted as a standard language for writing text with added structural information that gives the text greater applicability. Recently {{there has been a}} trend to use this structural information as meta-data in databases. The complex structure of documents, however, makes it difficult to directly map the structural information in documents to database structures. In particular, the flat nature of relational databases makes it extremely difficult to model documents that are inherently hierarchical in nature. Consequently, documents are modeled in object-oriented databases [Abiteboul et al., 1993], and object-relational databases [Holst, 1995], in which <b>SGML</b> <b>documents</b> are mapped into the corresponding database models and are later reconstructed as necessary. However, this mapping strategy is not natural and can potentially cause loss of information in the orig [...] ...|$|R
40|$|Abstract. Using {{database}} {{technology for}} the administration of digital libraries o ers many advantages in a multi-user and distributed environment. However, conventional DBMS are not particularly suited to manage semi-structured data with heterogeneous, irregular, evolving structures {{as in the case}} of <b>SGML</b> <b>documents</b> found in digital libraries. To overcome the di culties imposed by the rigid schema of conventional systems, several schema-less approaches have been proposed. Using instead unconstrained, extensible schemata o ered by object-oriented semantic network systems, we are able both to map document speci c structures as database classes, and to model the associated constraint information as integrated schema annotations. In this paper we present the bene ts of this approach to create, access and process heterogeneous <b>SGML</b> <b>documents,</b> and in particular to exploit the shared semantics of evolving SGML structures. A respective application is currently being implemented in the context of the AQUARELLE project. ...|$|R
40|$|Standard Generalized Markup Language (SGML) {{has been}} widely {{accepted}} as a standard for document representation. The strength of SGML {{lies in the fact}} that it embeds logical structural information in documents while preserving a human-readable form. This structural information in <b>SGML</b> <b>documents</b> allows processing of these documents using database techniques. SGML facilitates this goal by providing a conceptual modeling tool for collections of documents using a document type definition (DTD) and by allowing query processing beyond the classic keyword-based searches of traditional IR systems. We use these observations about SGML as the design principles for developing and implementing a structured document database system. The key difference of our approach from other similar approaches is that the design and implementation remain entirely within the context of the SGML framework. We achieve this by using SGML as the modeling tool of the database instances, by generating <b>SGML</b> <b>documents</b> as [...] ...|$|R
