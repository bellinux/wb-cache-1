0|181|Public
5000|$|AWStats {{supports}} {{most major}} web server <b>log</b> file <b>formats</b> including Apache (NCSA combined/XLF/ELF <b>log</b> <b>format</b> or Common <b>Log</b> <b>Format</b> (CLF)), WebStar, IIS (W3C <b>log</b> <b>format),</b> {{and many other}} common web server <b>log</b> <b>formats.</b>|$|R
50|$|Web servers log HTTP traffic using {{different}} file formats. Common file <b>formats</b> are Common <b>Log</b> <b>Format</b> (CLF), the Apache Custom <b>Log</b> <b>Format,</b> and Extended <b>Log</b> File <b>Format.</b> An {{example of a}} CLF log line is shown below.|$|R
50|$|Extended <b>Log</b> <b>Format</b> (ELF) is a {{standardised}} {{text file}} <b>format,</b> like Common <b>Log</b> <b>Format</b> (CLF), {{that is used}} by web servers when generating log files, but ELF files provide more information and flexibility.|$|R
5000|$|The {{ability to}} <b>format</b> <b>log</b> {{messages}} using Unix shell-like variable expansion (can break cross-platform <b>log</b> <b>format</b> compatibility) ...|$|R
50|$|Apache Custom <b>Log</b> <b>Format</b> can be {{customized}} to log most HTTP parameters, including request {{processing time}} {{and the size of}} the request itself. The format of a custom log is controlled by the format line. A typical Apache <b>log</b> <b>format</b> configuration is shown below.|$|R
5000|$|Supports Hamiltonian input: Molpro FCIDUMP and Gaussian <b>log</b> <b>formats</b> ...|$|R
50|$|The Common <b>Log</b> <b>Format,</b> {{also known}} as the NCSA Common <b>log</b> <b>format,</b> (after NCSA_HTTPd) is a {{standardized}} text file format used by web servers when generating server log files. Because the format is standardized, the files can be readily analyzed by a variety of web analysis programs, for example Webalizer and Analog.|$|R
40|$|Web servers such as Apache and web proxies like Squid support {{event logging}} using a common <b>log</b> <b>format.</b> The <b>logs</b> {{produced}} using these de-facto standard formats are invaluable to system administrators for trouble-shooting a server and tool writers to craft tools that mine the log files and produce reports and trends. The Session Initiation Protocol (SIP) {{does not have}} a common <b>log</b> <b>format,</b> and as a result, each server supports a distinct <b>log</b> <b>format.</b> This plethora of formats discourages the creation of common tools. Whilst SIP is similar to HTTP, {{there are a number of}} fundamental differences between a sessionmode protocol and a stateless request-response protocol. We propose a common <b>log</b> file <b>format</b> for SIP servers that can be used uniformly by proxies, registrars, redirec...|$|R
5000|$|Each {{line in a}} file {{stored in}} the Common <b>Log</b> <b>Format</b> has the {{following}} syntax: ...|$|R
40|$|DraftWell-known {{web servers}} such as Apache and web proxies like Squid support event logging using a common <b>log</b> <b>format.</b> The <b>logs</b> {{produced}} using these de-facto standard formats are invaluable to system administrators for trouble-shooting a server and tool writers to craft tools that mine the log files and produce reports and trends. Furthermore, these log files {{can also be}} used to train anomaly detection systems and feed events into a security event management system. The Session Initiation Protocol does not have a common <b>log</b> <b>format,</b> and as a result, each server supports a distinct <b>log</b> <b>format</b> that makes it unnecessarily complex to produce tools to do trend analysis and security detection. We propose a common <b>log</b> file <b>format</b> for SIP servers that can be used uniformly by proxies, registrars, redirect servers as well as back-to-back user agents...|$|R
5000|$|... pisg {{supports}} many <b>log</b> <b>formats,</b> including: mIRC, Trillian, Eggdrop, irssi, and more, {{and can be}} customized to {{work with}} other <b>log</b> file <b>formats.</b> Because it is open-source, pisg has an active community for further developing log interpreters. pisg runs on basically any platform with perl, including Linux, BSD, Microsoft Windows and Mac OS X.|$|R
5000|$|This {{interpretation}} is primarily useful for functions that grow extremely slowly: (binary) iterated logarithm (log*) {{is less than}} 5 for all practical data (265536 bits); (<b>binary)</b> log-log (<b>log</b> log n) is less than 6 for virtually all practical data (264 bits); and <b>binary</b> <b>log</b> (log n) is less than 64 for virtually all practical data (264 bits). An algorithm with non-constant complexity may nonetheless be more efficient than an algorithm with constant complexity on practical data if the overhead of the constant time algorithm results in a larger constant factor, e.g., one may have [...] so long as [...] and [...]|$|R
50|$|Microsoft's Internet Information Services (IIS) {{web server}} logs HTTP traffic in W3C Extended <b>Log</b> File <b>Format.</b> Similarly to Apache Custom <b>Log</b> <b>format,</b> IIS <b>logs</b> may be {{configured}} to capture such extended parameters as request processing time. W3C extended logs may {{be recognized by}} the presence of one or more format lines, such as the one shown below.|$|R
40|$|The {{analysis}} of log {{data can be}} extremely difficult for an administrator due to a large volume of log data with various formats {{from a number of}} different sources. It is also impossible to get a more precise view of the network security without aggregating and correlating log data generated by different defending systems and tools. The paper described is to establish an intermediate and platform-independent representation to which all security log data can be normalized to. The work presented here is only a part of an ongoing project that aims at detecting intrusions by utilizing data-mining techniques. In this paper, the <b>log</b> <b>format</b> normalized is proposed and implemented in XML <b>format.</b> This XML <b>log</b> <b>format</b> is not only flexible, extensible and heterogeneous; it also satisfies the other requirements, such as being convenient and easy to share, transfer, and store among different computer systems. It is anticipated that the XML <b>log</b> <b>format</b> will facilitate further research work in intrusion detection. Godkänd; 2004; 20080522 (ysko...|$|R
30|$|In the industry, parsers {{are usually}} {{manually}} developed by experts {{familiar with the}} <b>log</b> <b>format</b> used by each device. Vendors make these parsers available to their customers {{in the form of}} plugins, which can be integrated into the same machines where the correlation system is installed, into a different server, or even into the device generating the logs itself. They also include some tool or language so customers can develop their own custom parsers. The problem of manual creation of parsers is that technologies change and so do <b>log</b> <b>formats,</b> so their operation should be checked after each system update.|$|R
50|$|The <b>logging</b> <b>format</b> {{used by the}} MTA, {{known as}} syslog, was at first used solely by sendmail, but {{eventually}} became an unofficial standard format used by other unrelated programs for <b>logging.</b> Later, this <b>format</b> was made official by RFC 3164 in 2001; however, the original format has been made obsolete by the most recent revision, RFC 5424.|$|R
40|$|We rely on {{programs}} that consume audit logs {{to do so}} successfully (a robustness issue) and form the correct interpretations of the input (a semantic issue). The vendor’s documentation of the <b>log</b> <b>format</b> {{is an important part}} of the specification for any log consumer. As a specification, it is subject to improvement using formal specification techniques. This work presents a methodology for formalizing and refining the description ofan audit log to improve robustness and semantic accuracy of programs that use the log. Ideally applied during design of a new format, the methodology is also profitably applied to existing <b>log</b> <b>formats.</b> Its application to Solaris BSM (an existing, commercial format) demonstrated utility by detecting ambiguities or errors ofseveral types in the documentation or implementation ofBSM logging, and identifying opportunities to improve the content ofthe logs. The products of this work are the methodology itself for use in refining other <b>log</b> <b>formats</b> and their consumers, and an annotated, machine-readable grammar for Solaris BSM that can be used by the community to quickly construct applications that consume BSM logs...|$|R
5000|$|The data {{is stored}} in <b>log</b> <b>format,</b> {{directly}} corresponding to density of the original negative. Since the scanned material is likely a negative, the data {{can be said to}} be [...] "gamma with log encoding".|$|R
50|$|Appenders use Layouts to <b>format</b> <b>log</b> entries. A popular way to <b>format</b> one-line-at-a-time <b>log</b> files is PatternLayout, {{which uses}} a pattern string, much like the C / C++ {{function}} printf. There are also HTMLLayout and XMLLayout formatters for use when HTML or XML formats are more convenient, respectively. Log4j 2 added Layouts for CSV, Graylog Extended <b>Log</b> <b>Format</b> (GELF), JSON, YAML and RFC-5424.|$|R
5000|$|Well log {{and well}} <b>log</b> curve <b>format</b> and {{classification}} standards : the Practical Well Log classification Standards (PWLS), the well <b>log</b> data <b>format</b> standards (RP66/DLIS and LIS), and core analysis standards (RP40), {{as well as}} the Geology SIG.|$|R
40|$|Logs are {{ubiquitous}} for {{system monitoring}} and debugging. However, there lacks a comprehensive {{system that is}} capable of performing heterogeneous log organization and analysis for various purposes with very limited domain knowledge and human surveillance. In this manuscript, a novel system for heterogeneous log analysis is proposed. The system, denoted as Heterogeneous Log Analyzer (HLAer), achieves the following goals concurrently: 1) heterogeneous log categorization and organization; 2) automatic <b>log</b> <b>format</b> recognition and 3) heterogeneous log indexing. Meanwhile, HLAer supports queries and outlier detection on heterogeneous logs. HLAer provides a framework which is purely data-oriented and thus general enough to adapt to arbitrary <b>log</b> <b>formats,</b> applications or systems. The current implementation of HLAer is scalable to Big Data. I...|$|R
40|$|Mismanagement of the {{persistent}} state of a system—all the executable files, configuration settings {{and other data}} that govern how a system functions—causes reliability problems, security vulnerabilities, and drives up operation costs. Recent research traces persistent state interactions—how state is read, modified, etc. —to help troubleshooting, change management and malware mitigation, but has been limited by the difficulty of collecting, storing, and analyzing the 10 s to 100 s of millions of daily events that occur on a single machine, much less the 1000 s or more machines in many computing environments. We present the Flight Data Recorder (FDR) that enables always-on tracing, storage and analysis of persistent state interactions. FDR uses a domain-specific <b>log</b> <b>format,</b> tailored to observed file system workloads and common systems management queries. Our lossless <b>log</b> <b>format</b> compresses <b>logs</b> to only 0. 5 - 0. 9 bytes per interaction. In this <b>log</b> <b>format,</b> 1000 machine-days of logs—over 25 billion events—can be analyzed in less than 30 minutes. We report on our deployment of FDR to 207 production machines at MSN, and show that a single centralized collection machine can potentially scale to collecting and analyzing the complete records of persistent state interactions fro...|$|R
50|$|The Genesis {{can record}} in a custom Panalog color space, {{which is a}} log color space that is also 4:4:4, unlike {{traditional}} HD. The tone-curve {{is different from the}} Cineon <b>log</b> <b>format</b> used for film post-production, but preserves highlight detail that would be lost with typical video gamma correction.|$|R
50|$|LogLogic makes a Computer {{appliance}} that IT system administrators, compliance managers, CIOs and CiSOs can use {{to collect}} logs and events from network devices, servers, databases, operating systems and applications. The appliances also translate various <b>log</b> <b>formats,</b> search through <b>logs,</b> generate alerts and create graphs with logging trends.|$|R
40|$|International audienceIn a posteriori access control, {{users are}} {{accountable}} for actions they performed and must provide evidence, when required by some legal authorities for instance, {{to prove that}} these actions were legitimate. Generally, log files contain the needed data to achieve this goal. This logged data can be recorded in several formats; we consider here IHE-ATNA (Integrating the healthcare enterprise-Audit Trail and Node Authentication) as <b>log</b> <b>format.</b> The difficulty lies in extracting useful information regardless of the <b>log</b> <b>format.</b> A posteriori access control frameworks often include a log filtering engine that provides this extraction function. In this paper we define and enforce this function by building an IHE-ATNA based ontology model, which we query using SPARQL, and show how the a posteriori security controls are made effective and easier based on this function...|$|R
50|$|In {{the field}} of {{databases}} in computer science, a transaction log (also transaction journal, database <b>log,</b> <b>binary</b> <b>log</b> or audit trail) {{is a history of}} actions executed by a database management system used to guarantee ACID properties over crashes or hardware failures. Physically, a log is a file listing changes to the database, stored in a stable storage format.|$|R
30|$|Logging {{efficiency}} and capacity were improved greatly by log record mode based on encoding storage. The recorded data, which uses <b>log</b> <b>format</b> standardization, {{can be played}} again in the test platform, providing {{the basis for the}} dynamic analysis of the operation status of equipment evaluation and replication site problems [11].|$|R
40|$|The SIPCLF {{working group}} has defined a Common <b>Log</b> <b>Format</b> (CLF) {{framework}} for Session Initiation Protocol (SIP) servers. This CLF mimics the successful event <b>logging</b> <b>format</b> found in well-known web servers like Apache and web proxies like Squid. This document proposes an indexed text encoding format for the SIP CLF that retains the key {{advantages of a}} text-based format while significantly increasing processing performance over a purely text-based implementation. This file format adheres to the SIP CLF information model and provides an effective encoding scheme for all mandatory and optional fields that appear in a SIP CLF record. Status of This Memo This is an Internet Standards Track document. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|R
40|$|World Wide Web gives large {{information}} to internet user; it {{is a huge}} repository of web pages and links. At which time user visit website his or her clicks recorded in web log file. When user accesses website, log file are created. Log file is simple plain text ASCII file. Tremendous uses of web, web log files are growing at faster rate. Display of log file data in different format like W 3 C Extended <b>log</b> file <b>format,</b> NCSA common <b>log</b> file <b>format,</b> IIS <b>log</b> file <b>format.</b> <b>Log</b> file contain noisy & ambiguous data which may affect result of mining process. To improve quality of data, log file should be preprocessed. One technique to detection of web attack is to analyze web server log file. This web attack means intrusion, Intrusion detection consists of procedures and systems created and operated to detect system intrusions.. It gives detailed discussion about web log file, web <b>log</b> file <b>format,</b> intrusion detection. In this paper we survey about data preprocessing of web log file for web intrusion detection...|$|R
40|$|This report {{describes}} the FITTEST <b>log</b> <b>format.</b> "FITTEST " {{is the name}} of the project from where the format originates, which stands for Future Internet Testing. The format itself has nothing to do with Internet; it can be used to express any kind of logs. The important feature of the FITTEST format is that is deeply structured ala XML. However, i...|$|R
50|$|Log data {{provides}} {{a record of}} all corporate system activity and is critical for improving security, complying with requirements such as Sarbanes-Oxley, HIPAA and PCI-DSS, and optimizing IT operations. However, given {{the large number of}} logs produced by different devices, their inherent obscurity and the lack of a standard <b>logging</b> <b>format,</b> system-specific expertise is typically needed to extract any meaningful intelligence.|$|R
40|$|Web mining is the {{application}} of data mining, chart technology, artificial intelligence and so on to the web data and identifies user’s visiting behaviors and extracts their interests using patterns. It extract the behavior of users which is used in variety of applications like pre fetching, creating attractive web sites, personalized services, adaptive web sites, customer profiling, etc. The Common <b>log</b> <b>formats</b> or Extended <b>Log</b> <b>Formats</b> only records the visitors browsing activities rather than {{the details of the}} visitor’s identity. A session is a sequence of activities made by one user during one visit to the site. There is a method in which is based on total session time and another method is based on single page stay time. The records with failed status code are also eradicated from logs. The changes in technology has made it possible to capture the users essence and interaction with the web. Due to large amount of incorrect information in the web log, the original log file cannot be directly used...|$|R
40|$|This dataset {{contains}} the latency measurements of several BFT protocols {{on a wide}} area network. The experiments were described and the results presented in the SRDS’ 15 paper. Type of data: Data collected directly from clients upon completing a request to a RSM. Software used: All software based on the BFT-SMaRt replication library ([URL] Data format: Text, i. e., custom <b>log</b> <b>format</b> Source: Experiments with real protocol...|$|R
40|$|The paper {{concerns}} with processing of log files from server applications. System architecture {{is based on}} study of availible technologies. Firstly, design of unified <b>log</b> <b>format</b> and impelementation of unified logger library is described. Secondly, installation and configuration of used technologies and their integration is described. The result is log processing system designed to be scalable in the future. System was tested and integrated into project BeeeOn...|$|R
40|$|The {{aim of the}} Autonomic Computing is to {{increase}} reliability and performance by enabling the system to be Self- managed. Challenging issue in making the system autonomous is to introduce the standardization for co-existences of heterogeneous system. Every system has its own <b>log</b> file <b>format,</b> to make multiple systems to co exists {{in the corporate world}} there is a necessity to follow standard format called Common Base Event (CBE) to represent the log files, the context called Symptom and the actions that administrator may initiate. This paper proposes a new user friendly language to represent the Symptoms and associate the actions and supports the co-existences of systems with heterogeneous <b>log</b> <b>format</b> without the need for conversion to CBE format...|$|R
5000|$|Extended <b>Log</b> File <b>Format</b> as {{described}} in the documentation of the World Wide Web consortia webserver (W3C httpd).|$|R
