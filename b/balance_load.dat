185|10000|Public
5000|$|... resource-manager: {{distributes}} {{the load}} over the recservers as required to <b>balance</b> <b>load</b> {{and to provide}} fault-tolerance.|$|E
50|$|A content cluster {{or service}} node can be formed using a layer 4-7 switch to <b>balance</b> <b>load</b> across {{a number of}} servers or a number of web caches within the network.|$|E
50|$|Processes may also, if {{the user}} wants, be {{automatically}} migrated {{in order to}} <b>balance</b> <b>load</b> across the cluster. OpenSSI uses an algorithm developed by the MOSIX project for determining the load on each node.|$|E
50|$|Cloud <b>load</b> <b>balancing</b> {{is a type}} of <b>load</b> <b>balancing</b> that is {{performed}} in cloud computing. Cloud <b>load</b> <b>balancing</b> is the process of distributing workloads across multiple computing resources. Cloud <b>load</b> <b>balancing</b> reduces costs associated with document management systems and maximizes availability of resources. It {{is a type of}} <b>load</b> <b>balancing</b> and {{not to be confused with}} Domain Name System (DNS) <b>load</b> <b>balancing.</b> While DNS <b>load</b> <b>balancing</b> uses software or hardware to perform the function, cloud <b>load</b> <b>balancing</b> uses services offered by various computer network companies.|$|R
5000|$|The phase {{currents}} tend {{to cancel}} out one another, summing to zero {{in the case of}} a linear <b>balanced</b> <b>load.</b> This makes it possible to reduce the size of the neutral conductor because it carries little or no current. With a <b>balanced</b> <b>load,</b> all the phase conductors carry the same current and so can be the same size.|$|R
40|$|<b>Load</b> <b>balancing</b> {{middleware}} is {{used extensively}} to improve scalability and overall system throughput in distributed systems. Many <b>load</b> <b>balancing</b> middleware services are simplistic, however, {{since they are}} geared only for specific usecases and environments. These limitations {{make it hard to}} use the same <b>load</b> <b>balancing</b> service for anything other than the distributed application it was designed for originally. This lack of generality forces continuous re-development of application-specific <b>load</b> <b>balancing</b> services. Not only does re-development increase deployment costs of distributed applications, but it also increases the potential of producing nonoptimal <b>load</b> <b>balancing</b> implementations since proven <b>load</b> <b>balancing</b> service optimizations cannot be reused directly. This paper presents a set of <b>load</b> <b>balancing</b> service features that address many existing middleware <b>load</b> <b>balancing</b> service inadequacies, such as lack of server-side transparency, centralized <b>load</b> <b>balancing,</b> sole support for stateless replication, fixed load monitoring granularities, lack of fault tolerant <b>load</b> <b>balancing,</b> non-extensible <b>load</b> <b>balancing</b> algorithms, and simplistic replica management. All the capabilities described in this paper are currently under development {{for the next generation of}} middleware-based <b>load</b> <b>balancing</b> service distributed with our CORBA-compliant ORB (TAO). Keywords: Middleware, patterns, scalability, CORBA, <b>load</b> <b>balancing.</b> ...|$|R
50|$|Electric utility {{companies}} {{took advantage of}} economies of scale and moved to centralized power generation, distribution, and system management. With long distance power transmission it became possible to interconnect stations to <b>balance</b> <b>load</b> and improve load factors.|$|E
50|$|A {{differential}} tariff creates a balance in {{production and consumption}} of power by utilizing customer demand. For instance, if there is time where energy is being used faster than can be supplied, a {{differential tariff}} can be used: raising the price at that specific time to <b>balance</b> <b>load</b> on the system.|$|E
5000|$|SQL Server mode: State {{variables}} {{are stored in}} a database, allowing session variables to be persisted across ASP.NET process shutdowns. The main advantage of this mode {{is that it allows}} the application to <b>balance</b> <b>load</b> on a server cluster, sharing sessions between servers. This is the slowest method of session state management in ASP.NET.|$|E
5000|$|... #Caption: Howe truss {{illustrated}} - the diagonals {{are under}} compression under <b>balanced</b> <b>loading</b> ...|$|R
40|$|Abstract: In <b>load</b> <b>balancing,</b> each {{processor}} {{is assigned}} work proportional to its performance so that execution {{time of the}} program can be minimized. The gap between lightly loaded processor and heavily loaded processor is filled by <b>load</b> <b>balancing.</b> Static <b>load</b> <b>balancing</b> and dynamic <b>load</b> <b>balancing</b> {{are two types of}} <b>load</b> <b>balancing.</b> For decreasing unnecessary request messages and for increasing acceptance rate, genetic algorithm is used with <b>load</b> <b>balancing.</b> Population of solutions are maintained iteratively by genetic algorithm in which each solution represents a chromosome. Basic operation of genetic algorithm here is to determine a destination processor that can receive a task...|$|R
5000|$|Power {{transfer}} into {{a linear}} <b>balanced</b> <b>load</b> is constant, which helps to reduce generator and motor vibrations.|$|R
50|$|While the {{petroleum}} industry had largely {{lost interest in}} the field in the late 1930s, the need for natural gas increased during the Second World War. Pacific Lighting Gas, the predecessor of the SoCalGas, needed a way to <b>balance</b> <b>load</b> between winter and summer use of gas, so began repressurizing the La Goleta Gas Field with natural gas, converting it into storage, and building a compressor station.|$|E
5000|$|... "Load-balancing" [...] {{clusters}} are configurations {{in which}} cluster-nodes share computational workload to provide better overall performance. For example, a web server cluster may assign different queries to different nodes, so the overall response {{time will be}} optimized. However, approaches to load-balancing may significantly differ among applications, e.g. a high-performance cluster used for scientific computations would <b>balance</b> <b>load</b> with different algorithms from a web-server cluster which may just use a simple round-robin method by assigning each new request to a different node.|$|E
50|$|One {{advantage}} of a smart grid application is time-based pricing. Customers who traditionally pay a fixed rate for consumed energy (kWh) and requested peak load can set their threshold and adjust their usage to take {{advantage of}} fluctuating prices. This may require the use of an energy management system to control appliances and equipment and can involve economies of scale. Another advantage, mainly for large customers with generation, is being able to closely monitor, shift, and <b>balance</b> <b>load</b> in a way that allows the customer to save peak load and not only save on kWh and kW/month but be able to trade what they have saved in an energy market. Again this involves sophisticated energy management systems, incentives, and a viable trading market.|$|E
40|$|The <b>load</b> <b>balancing</b> {{architecture}} {{is the most}} popular method to improve the performance of the server. The selection of the <b>load</b> <b>balancing</b> algorithms {{is one of the most}} important issues. In this paper, we use NetFlow to collect traffic for six <b>load</b> <b>balancing</b> algorithms, including least connections, round robin, minimum misses, hash, response time, and bandwidth. We compared their flow counts and packet counts separately. Both the WAN link <b>load</b> <b>balancing</b> and server <b>load</b> <b>balancing</b> are implemented. In addition, we also collected the burst traffic for server <b>load</b> <b>balancing.</b> The results for the performance of the algorithms are analyzed and compared. Key words: NetFlow, <b>load</b> <b>balancing,</b> cluste...|$|R
40|$|Abstract: <b>Load</b> <b>balancing</b> is a {{technique}} in which workload is distributed across multiple computers or other resources to get optimal resource utilization, minimum time delay, maximize throughput and avoid overload. Mainly in operation of parallel and distributed computing systems, <b>load</b> <b>balancing</b> problem arises. <b>Load</b> <b>balancing</b> scheme can be characterized as: static and dynamic <b>load</b> <b>balancing.</b> This paper represents a senderinitiated <b>load</b> <b>balancing</b> scheme, which {{is a part of}} dynamic <b>load</b> <b>balancing</b> scheme, with the help of genetic algorithm (GA), as due to easily adaptable search technique and robust, immense popularity have gained by genetic algorithms...|$|R
40|$|This paper {{presents}} a <b>load</b> <b>balancing</b> model {{to investigate the}} effect of non-uniform traffic distributions on <b>load</b> <b>balancing</b> in CDMA system. Applying two traffic models on non-uniform traffic distributions, the impact of traffic non-uniformity on system <b>load</b> <b>balancing</b> is compared with uniform distributions. To evaluate the model, we define both <b>load</b> <b>balancing</b> factor (LBF) and <b>load</b> <b>balancing</b> coefficient (LBC). Results indicate that the more offered traffic is easier to achieving <b>load</b> <b>balancing</b> than the less offered traffic. 1...|$|R
5000|$|The La Goleta Gas Field (also {{known as}} the Goleta Gas Field and La Goleta Storage Field) is a natural gas field in unincorporated Santa Barbara County, California, {{adjacent}} {{to the city of}} Goleta. Discovered in 1929, and first put into production in 1932, it has been in continuous use ever since, producing approximately 12 billion cubic feet of gas. With production declining, the field was converted into a gas storage reservoir in 1941. As of 2016 it remains one of the four gas storage facilities maintained by Southern California Gas Company (SoCalGas), a division of Sempra Energy, with the others being Aliso Canyon, Honor Rancho and Playa del Rey. It is the oldest storage facility of the four and the third largest, with a maximum capacity of 21.5 billion cubic feet. [...] The storage facilities are necessary to <b>balance</b> <b>load</b> for the over ten million customers of SoCalGas: during summer months, when gas usage is at a minimum, gas is pumped into the reservoirs; and in the winter when usage is high, gas is withdrawn. The La Goleta field serves the northern portion of SoCalGas's geographic range.|$|E
40|$|Motivated by {{the need}} to reduce the {{potential}} for queuing at charging stations, and {{by the need}} to <b>balance</b> <b>load</b> across a number of charging stations, a stochastic algorithm is presented to <b>balance</b> <b>load</b> over a network of stations that also facilitates decentralised plug-and-play type behaviour that allows stations to provide charging services on an adhoc basis. Simulation results are presented to illustrate the efficacy of our algorithm...|$|E
40|$|This note {{concerns}} charging, {{rate control}} and routing for {{a communication network}} using priority mechanisms at queues. It is argued that by appropriately marking packets at overloaded resources, end-systems can be provided with the information necessary to <b>balance</b> <b>load</b> across different routes and priorities...|$|E
30|$|The LSP will be {{established}} on the sub-graph having low CF value, {{leading to the}} optimum network utilization and <b>balanced</b> <b>load</b> on the network.|$|R
40|$|Abstract: – The {{preliminary}} design space exploration for large, interdisciplinary engineering problems {{is often a}} difficult and time-consuming task. General techniques are needed that efficiently and methodically search the design space. This work focuses {{on the use of}} parallel <b>load</b> <b>balancing</b> techniques integrated with a global optimizer to reduce the computational time of the design space exploration. The method is applied to the multidisciplinary design of a High Speed Civil Transport (HSCT). A modified Lipschitzian optimization algorithm generates large sets of design points that are evaluated concurrently using a variety of <b>load</b> <b>balancing</b> schemes. The <b>load</b> <b>balancing</b> schemes implemented in this study are: static <b>load</b> <b>balancing,</b> dynamic <b>load</b> <b>balancing</b> with a master-slave organization, fully distributed dynamic <b>load</b> <b>balancing,</b> and fully distributed dynamic <b>load</b> <b>balancing</b> via threads. All of the parallel computing schemes have high parallel efficiencies. When the variation in the design evaluation times is small, the computational overhead needed for fully distributed dynamic <b>load</b> <b>balancing</b> is substantial enough so that it is more efficient to use a master-slave paradigm. However, when the variation in evaluation times is increased, fully distributed <b>load</b> <b>balancing</b> is the most efficient. Key-Words: – Nonlinear programming, Global optimization, Parallel computation, Aerospace...|$|R
40|$|The {{preliminary}} design space exploration for large,interdisciplinary engineering problems {{is often a}} difficult and time-consuming task. General techniques are needed that efficiently and methodically search the design space. This work focuses {{on the use of}} parallel <b>load</b> <b>balancing</b> techniques integrated with a global optimizer to reduce the computational time of the design space exploration. The method is applied to the multidisciplinary design of a High Speed Civil Transport (HSCT). A modified Lipschitzian optimization algorithm generates large sets of design points that are evaluated concurrently using a variety of <b>load</b> <b>balancing</b> schemes. The <b>load</b> <b>balancing</b> schemes implemented in this study are: static <b>load</b> <b>balancing,</b> dynamic <b>load</b> <b>balancing</b> with a master-slave organization, fully distributed dynamic <b>load</b> <b>balancing,</b> an fully distributed dynamic <b>load</b> <b>balancing</b> via threads. All of the parallel computing schemes have high parallel efficiencies. When the variation in the design evaluation times is small, the computational overhead needed for fully distributed dynamic <b>load</b> <b>balancing</b> is substantial enough so that it is more efficient to use a master-slave paradigm. However, when the variation in evaluation times is increased, fully distributed <b>load</b> <b>balancing</b> is the most efficient...|$|R
40|$|On packet marking at {{priority}} queues Abstract — This note concerns charging, {{rate control}} and routing for {{a communication network}} using priority mechanisms at queues. It is argued that by appropriately marking packets at overloaded resources, end-systems can be provided with the information necessary to <b>balance</b> <b>load</b> across different routes and priorities. Keywords—Congestion pricing, differentiated services, priority queues, rate control, routing. I...|$|E
40|$|Cloud {{computing}} provides dynamic virtual {{computing resources}} such as storage, processing power etc, base on pay per use. To satisfy increasing request day by day from users of cloud, efficient load balancing is required. It is responsible to <b>balance</b> <b>load</b> Between nodes in a cloud system for better resource utilization and improve system performance. This paper will discuss some of the existing load balancing technique and benefits of it...|$|E
40|$|Conference Name: 2011 International Conference on Cloud and Service Computing, CSC 2011. Conference Address: Hong Kong, China. Time:December 12, 2011 - December 14, 2011. Croucher Foundation; Hong Kong Polytechnic University; Chinese Institute of ElectronicsIt's an basic {{requirement}} in cloud computing that scheduling virtual resources to physical resources with <b>balance</b> <b>load,</b> however, the simple scheduling methods {{can not meet}} this requirement. This paper proposed a virtual resources scheduling model and solved it by advanced Non-dominated Sorting Genetic Algorithm II (NSGA II). This model was evaluated by <b>balance</b> <b>load,</b> virtual resources and physical resources were abstracted a lot of nodes with attributes based on analyzing the flow of virtual resources scheduling. NSGA II was employed to address this model and a new tree sorting algorithms was adopted to improve the efficiency of NSGA II. In experiment, verified the correctness of this model. Comparing with Random algorithm, Static algorithm and Rank algorithm {{by a lot of}} experiments, at least 1. 06 and at most 40. 25 speed-up of balance degree can be obtained by NSGA II. ? 2011 IEEE...|$|E
40|$|Due to {{the fast}} {{development}} of internet, {{a huge amount}} of load increases over data centers every second. This causes scheduling overhead, huge memory demand at data centers. Thus increases overhead effects the <b>load</b> <b>balancing</b> at data centers. So, there is a need of mechanisms which will decrease overhead and provide effective <b>load</b> <b>balancing.</b> Today, every <b>load</b> <b>balancing</b> scheduling algorithm <b>balances</b> the <b>load</b> on data centers that reside in the same region. They give birth to same problems like scheduling overhead, huge memory demand. This paper proposes a <b>Load</b> <b>balancing</b> scheduling algorithm which is based on load and time. This algorithm <b>balances</b> the <b>load</b> over the Data centers which reside in different regions. This mechanism will maximize hardware utilization, decrease huge memory demand and decrease cost...|$|R
40|$|This paper {{presents}} {{the process of}} <b>load</b> <b>balancing</b> in simulation system Triad. Net, the architecture of <b>load</b> <b>balancing</b> subsystem. The main features of static and dynamic <b>load</b> <b>balancing</b> are discussed and new approach, controlled dynamic <b>load</b> <b>balancing,</b> needed for regular mapping of simulation model on the network of computers is proposed. The paper considers linguistic constructions of Triad language for different <b>load</b> <b>balancing</b> algorithms description...|$|R
40|$|In {{communication}} networks servers are duplicated for dependability reasons. To utilize them efficiently a controller distributes {{the load}} {{between them in}} a best possible way. In this paper we study dynamic <b>load</b> <b>balancing</b> based on {{the states of the}} servers {{at the start of the}} <b>load</b> <b>balancing</b> interval. The servers are modeled as M/M/ 1 /n queuing systems. The transient loss of this system is found using renewal type of argument. This result is used for dynamic <b>load</b> <b>balancing</b> to minimize the sum of lost tasks over the <b>load</b> <b>balancing</b> interval. The result is compared with ideal <b>load</b> <b>balancing</b> and weighted <b>load</b> <b>balancing</b> of tasks to the two servers. 1...|$|R
40|$|Recently {{there has}} been an {{increasing}} deployment of content distribution networks (CDNs) that offer hosting services to Web content providers. CDNs deploy a set of servers distributed throughout the Internet and replicate provider content across these servers for better performance and availability than centralized provider servers. Existing work on CDNs has primarily focused on techniques for efficiently redirecting user requests to appropriate CDN servers to reduce request latency and <b>balance</b> <b>load.</b> However...|$|E
40|$|To attain better {{time-delay}} performance, this article, {{based on}} clustering method, adapts vertices coverage method {{to build the}} tree-based structure for data transmission. It effectively decreases the data transmitting time and <b>balance</b> <b>load.</b> Then, a distributed fuzzy C-means algorithm (DFCMA) for heterogeneous data in WSN clusters is proposed to implement data fusion. According to the simulation result, the proposed data fusion algorithm owns good scalability and accuracy and lower time-delay. Copyright © 2012 Binary Information Press...|$|E
40|$|An {{effective}} replica {{management method}} can save bandwidth, reduce latency, <b>balance</b> <b>load,</b> and improve system reliability. A comprehensive scheme is introduced to manage replica for the grid environment. The schemes of replica creation and placement {{based on the}} frequency of visits and storage space, replica replacement based on the replica value, and replica selection based on comprehensive performance are proposed. Our scheme can achieve optimization of data distribution and replication, improve the efficiency of data visits in the grid environment...|$|E
40|$|This paper aims {{to conduct}} an {{experiment}} on using some popular algorithms say Particle Swarm Optimization <b>Load</b> <b>Balancing</b> Algorithm(PSO), Cat Swarm Optimization <b>Load</b> <b>Balancing</b> Algorithm(CSO) and Genetic <b>Load</b> <b>Balancing</b> Algorithm (GA) in dynamic cloud computing environment {{in order to achieve}} low over heads during <b>load</b> <b>balancing...</b>|$|R
40|$|AbstractThis paper applies network {{tomography}} for <b>load</b> <b>balancing.</b> <b>Load</b> <b>balancing</b> is {{the allocation}} {{of the work of}} a single application to processors at run-time so that the execution time of the application is minimized. In order to achieve this purpose, <b>load</b> <b>balancing</b> algorithms require various network parameters to make decisions for effectively <b>balancing</b> the <b>load.</b> This paper analyses the scope of the application of network tomography to facilitate <b>load</b> <b>balancing</b> algorithms in estimating network parameters (packet loss and delay) to be used in decision making. This paper also exploits the interdependence of packet loss and delay in the context of <b>load</b> <b>balancing.</b> Evaluation results show that network tomography estimates link delays accurately from the knowledge of path delays and packet loss. This information is instrumental to be used to tune the delay dependence module of various <b>load</b> <b>balancing</b> algorithms...|$|R
40|$|The {{assignment}} {{includes the}} following tasks 1. Study the Telenor Connected Object (COOS) infrastructure 2. Study existing <b>load</b> <b>balancing</b> techniques that are relevant for COOS 3. Make a model of COOS in order to investigate <b>load</b> <b>balancing</b> techniques 4. Propose usage scenarios for COOS which need performance differentiation and <b>load</b> <b>balancing</b> 5. Conduct <b>load</b> <b>balancing</b> experiments on scenarios with different techniques 6. Propose principles for <b>load</b> <b>balancing</b> in COOS • How can you achieve effective routing across different (access) network technologies? <b>Load</b> <b>balancing</b> of traffic – optimised for node performance (e. g. battery and/or bandwidth limitations, least cost routing). How can one distribute load across different networks (e. g. wifi, bluetooth, 3 G [...] .) in an effective manner...|$|R
