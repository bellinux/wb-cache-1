3|169|Public
5000|$|The {{prompt release}} of Gecko led many {{to believe that}} a {{complete}} browser could not be far behind. However, the first release of the layout engine was far from bug- and crash-free, and even farther from being ready for the prime-time. Producing a fully functional web <b>browser</b> <b>required</b> much more than the nascent rendering engine: the Mozilla developers soon envisioned a project more ambitious than a simple web browser. The new Mozilla (internally codenamed [...] "Seamonkey") would be a platform for Internet applications, with a fully programmable user interface and a modular architecture. This Mozilla would function equally well as a host for email client, instant messaging client, news client, or any number of other applications.|$|E
40|$|A two-dimensional, zoomable, space filling user {{interface}} is presented for browsing conventional, hierarchical file systems. Through user studies the Goldleaf browser was {{compared with the}} widely used Microsoft Windows Explorer {{user interface}}. The times and number of mouse clicks to locate directories and files were recorded. The user studies found that the Goldleaf <b>browser</b> <b>required</b> {{less than half the}} mouse clicks to locate a directory compared with Windows Explorer. Through the use of document thumbnails subjects were able to locate documents in less than two-thirds the time that it took using Windows Explorer. A majority of subjects felt that the ability of the Goldleaf browser to display multiple levels of the file system simultaneously was its most beneficial feature in completing the tasks. Subjects found that the Goldleaf <b>browser</b> <b>required</b> less mental and physical effort and was more enjoyable to use than Explorer. 1 Introduction Since the introduction of the graphical user inte [...] ...|$|E
40|$|This paper {{reports the}} results of a {{quantitative}} analysis of students’ performances in manipulative tasks in the dynamic geometry environment. 252 Grade 6 students from about 70 primary schools in Hong Kong attempted the geometric tasks {{in the context of a}} mathematics competition. These tasks, set up by the dynamic geometry software C. a. R. but accessible by an ordinary Java-enabled <b>browser,</b> <b>required</b> students to drag points (mostly vertices of polygons) in prepared geometric drawings so as to obtain specific areas or shapes. They were designed in such a way that students had to exercise their understanding about area, congruence or symmetry while continuously transforming the geometric figures on the screen. Results of these students in 10 geometric tasks of this kind are analyzed in an exploratory manner. By employing Factor Analysis, these ten items are grouped into three types. Results of our analysis display certain significant differences in students’ performance in different groups of geometric tasks, which in turn suggests distinctive groups of geometric concepts and skills involved in the tasks. Apart from these geometric tasks, there was also a paper (in multiple-choice format) that called for general mathematical reasoning and knowledge. Correlation between the scores on such multiple-choice questions and the performances on the dynamic geometric items is also studied. The weak correlation tends to suggest that the dynamic geometric items are probing a kind of ability different from the general mathematical knowledge expected of a Grade 6 student. While all these findings are based on quantitative analysis, we draw on the understandings of the designer of the geometric items as well as the experience of a few veteran primary mathematics teachers when reviewing these findings. We thus provide in this paper a careful examination of the geometric concepts and skills that possibly account for the significant differences revealed by the numerical data. This is believed to be one step closer to the incorporation of dynamic geometry into our school mathematics curriculum, particularly as a possible tool for alternative assessment of basic geometric concepts and skills at an elementary level...|$|E
5000|$|As {{a general}} PHP script it allows running crawler {{manually}} from <b>browser,</b> <b>requires</b> no SSH {{access to the}} hosting.|$|R
50|$|BOLT can be {{installed}} on nearly all Java-based handsets since the <b>browser</b> <b>requires</b> only Java MIDP 2 and CLDC 1.0 or higher support.|$|R
5000|$|Tape is a tap-producing {{test harness}} for node and <b>browsers</b> <b>requiring</b> few APIs It {{can be used}} for unit and {{integration}} testing. Tests are code. So, you can run tests as modules with node ...|$|R
50|$|Netscape-derived browsers store {{bookmarks}} in {{the single}} HTML-coded file bookmarks.html. This approach permits publication and printing of a categorized and indented catalog, and works across platforms. Bookmark names need not be unique. Editing this file outside its native <b>browser</b> <b>requires</b> editing HTML.|$|R
5000|$|Documents are {{accepted}} as PDF, Microsoft Office formats, ODF formats and images as PNG, JPEG and GIF. The client <b>browser</b> <b>requires</b> javascript and cookies to be enabled. A.nnotate {{can be used}} with Firefox, Internet Explorer (versions 6, 7, and 8), Safari or Google chrome ...|$|R
50|$|A text-based {{web browser}} is {{a web browser}} that renders only the text of web pages, and ignores graphic content. Usually, they render pages faster than {{graphical}} web browsers due to lowered bandwidth demands. Additionally, the greater CSS, JavaScript and typography functionality of graphical <b>browsers</b> <b>require</b> more CPU resources.|$|R
50|$|These {{pages are}} {{designed}} to be familiar to web-based users, and easy to deploy within a web <b>browser</b> (<b>requiring</b> no plugin or download, unlike Oracle Forms). As such, they are often expected to require no support or training for users, are more user friendly, and result in better performance over the internet and a faster transaction rate.|$|R
5000|$|PC (<b>browser</b> {{streaming}} <b>requires</b> Google Chrome, application streaming requires Windows XP with IE8 or above) ...|$|R
5000|$|TiddlySaver Java applet {{to extend}} Safari, Opera, Chrome/Chromium, and other <b>browsers.</b> [...] <b>Requires</b> the Java runtime.|$|R
5000|$|If {{the user}} {{attempts}} {{to dismiss the}} pop-up, it will often pop up repeatedly, blocking all user interaction with the <b>browser,</b> <b>requiring</b> repeated dismissal by the user. Sometimes, the pop-up message occurs so continually {{that the only way}} to recover is to kill the browser process through the operating system. The problem was originally observed on Yahoo-associated sites (e.g.,, Yahoo Mail) [...] but can appear on any web page that accepts a Yahoo-associated advertisement, ...|$|R
50|$|Wget is non-interactive in {{the sense}} that, once started, {{it does not require}} user {{interaction}} and does not need to control a TTY, being able to log its progress to a separate file for later inspection. Users can start Wget and log off, leaving the program unattended. By contrast, most graphical or text user interface web <b>browsers</b> <b>require</b> the user to remain logged in and to manually restart failed downloads, which can be a great hindrance when transferring a lot of data.|$|R
5000|$|IE Tab add-on {{that allows}} to view pages through the Internet Explorer layout engine {{and can be}} used in {{conjunction}} with various <b>browsers,</b> if <b>required</b> ...|$|R
5000|$|Mac (<b>browser</b> {{streaming}} <b>requires</b> Google Chrome, application streaming requires Mac OS X Snow Leopard 10.6, Mac OS X Lion 10.7 with Safari version 5 or above) ...|$|R
40|$|MOVES Research & Education Systems Seminar: Presentation; Session 7 : Computer Gaming and Web-Delivered Simulation; Moderator: Perry McDowell; The Web Browser as a Simulation Platform; speaker: Chris DarkenWebGL and HTML 5 {{combine to}} make web browsers capable {{simulation}} platforms. Building simulations {{to run in}} <b>browsers</b> <b>require</b> skills that are relatively common and easy to obtain. The resulting simulations are easy to share with students, research collaborators and customers. We will discuss how we use this infrastructure to teach the latest generation of our graphical simulation course, and {{how it could be}} applied to other educational and research projects...|$|R
5000|$|IPA chart affricate consonants with audio - (<b>requires</b> <b>browser</b> with JavaScript) ...|$|R
50|$|SVG-edit is {{a web-based}} free and {{open-source}} vector graphics editor. It {{can be used}} to create and edit Scalable Vector Graphics (SVG) images from within a web <b>browser,</b> not <b>requiring</b> additional software installation.|$|R
50|$|The human {{models are}} {{based on data from}} the Zygote Media Group. The website uses JavaScript and WebGL {{technology}} to display 3D images inside the web <b>browser</b> without <b>requiring</b> the installation of external browser plug-ins.|$|R
5000|$|... by {{requiring}} mobile manufacturers to pre-install Google Search and Google Chrome <b>browser</b> and <b>requiring</b> them to set Google Search as default search service on their devices, {{as a condition}} to license certain Google proprietary apps; ...|$|R
5000|$|A basic {{technique}} for dynamic web application {{is to use}} a hidden iframe HTML element (an inline frame, which allows a website to embed one HTML document inside another). This invisible iframe is sent as a chunked block, which implicitly declares it as infinitely long (sometimes called [...] "forever frame"). As events occur, the iframe is gradually filled with [...] tags, containing JavaScript to be executed in the browser. Because browsers render HTML pages incrementally, each [...] tag is executed as it is received. Some <b>browsers</b> <b>require</b> a specific minimum document size before parsing and execution is started, which can be obtained by initially sending 1-2 kB of padding spaces.|$|R
50|$|Race War Kingdoms is a <b>browser</b> {{game that}} <b>requires</b> an {{internet}} connection to play.|$|R
50|$|The {{provision}} of services to local government entities {{is based on a}} distribution model known as software as a service, which allows users to access software and data on the Internet via a web <b>browser</b> without <b>requiring</b> on-premise server installation.|$|R
50|$|To {{display a}} tiled map in a <b>browser</b> usually <b>requires</b> {{the support of}} a web mapping {{framework}}. This framework handles the retrieval of tiles, display, caching, and user navigation. Popular frameworks for tiled maps include Google Maps API, OpenLayers and Leaflet.|$|R
50|$|Html4 markup language, in use since 2000, doesn't support {{multimedia}} elements natively. Html4 email systems typically simulate embedded {{video in}} email by having an embedded image (gif) which appears like a frame from a video. Clicking {{on the image}} causes a hyperlink to be launched in a browser window to display a video using the browser's video codec or a rich internet application like Adobe Flash. Many codecs and rich internet applications are not natively supported in <b>browsers</b> and <b>require</b> <b>browser</b> extensions to operate which can impede embedded video display.|$|R
50|$|The Wikimedia Foundation {{sponsored}} {{a free and}} open source online JavaScript Opus encoder for <b>browsers</b> supporting the <b>required</b> HTML5 features.|$|R
50|$|Access 2010 allows {{databases}} to {{be published}} to SharePoint 2010 web sites running Access Services. These web-based forms and reports run in any modern web browser. The resulting web forms and reports, when accessed via a web <b>browser,</b> don't <b>require</b> any add-ins or extensions (e.g. ActiveX, Silverlight).|$|R
40|$|Abstract. In initial {{laboratory}} studies, subsymbolic user behavior 1 {{has shown}} promise {{as a source}} of information for social navigation. Scalable, unobtrusive methods are needed for acquiring data on subsymbolic user behavior in field studies or live systems. Current methods are not suitable for use outside the laboratory because they interfere with normal user behavior and environment. We present a method for unobtrusively collecting subsymbolic user behavior in web-based systems, and report results from a field study. Our method is unobtrusive in that it uses current web technologies, works on the vast majority of current <b>browsers,</b> <b>requires</b> minimal instrumentation of existing web-based systems, and requires no additional user effort. This unobtrusive data collection method paves the way for future research on using subsymbolic user behavior to improve social navigation...|$|R
50|$|Maqetta is a {{free and}} open-source, web-based WYSIWYG HTML editor {{designed}} to edit HTML5 documents and web applications. Its name {{is derived from the}} Spanish word maqueta, that means “mock-up”. The Maqetta application itself is authored in HTML, and therefore runs in the <b>browser,</b> without <b>requiring</b> additional plugins or downloads.|$|R
40|$|Abstract—The {{internet}} is constantly expanding. Identifying web links of interest from web <b>browsers</b> <b>requires</b> users to visit {{each of the}} links listed, individually until a satisfactory link is found, therefore those users need to evaluate {{a considerable amount of}} links before finding their link of interest; this can be tedious and even unproductive. By incorporating web assistance, web users could be benefited from reduced time searching on relevant websites. In this paper, a rough set approach is presented, which facilitates classification of unlimited available e-vocabulary, to assist web users in reducing search times looking for relevant web sites. This approach includes two methods for identifying relevance data on web links based on the priority and percentage of relevance. As a result of these methods, a list of web sites is generated in priority sequence with an emphasis of the search criteria...|$|R
40|$|Genome Browser in a Box (GBiB) {{is a small}} {{virtual machine}} version of the popular University of California Santa Cruz (UCSC) Genome Browser that can be run on a researcher's own computer. Once GBiB is installed, a {{standard}} web browser is used to access the virtual server and add personal data files from the local hard disk. Annotation data are loaded on demand through the Internet from UCSC or can be downloaded to the local computer for faster access. Availability and Implementation: Software downloads and installation instructions are freely available for non-commercial use at [URL] GBiB requires the installation of open-source software VirtualBox, available for all major operating systems, and the UCSC Genome Browser, which is open source and free for non-commercial use. Commercial use of GBiB and the Genome <b>Browser</b> <b>requires</b> a license ([URL] genome@soe. ucsc. edu...|$|R
50|$|Because many web <b>browser</b> attacks <b>require</b> scripting, {{configuring}} {{the browser}} to have scripting disabled by default reduces {{the chances of}} exploitation. Blocking plug-in content, as well, helps to mitigate any vulnerabilities in plug-in technologies, such as Java, Flash, Acrobat, and so on. NoScript will replace these blocked elements with a placeholder icon. Clicking on this icon enables the element.|$|R
50|$|Google <b>Browser</b> Sync <b>required</b> a Google account, {{in which}} the user's cookies, saved passwords, bookmarks, {{browsing}} history, tabs, and open windows could be stored. The data was optionally encrypted using an alphanumerical PIN, which theoretically prevented even Google from reading the data. Passwords and cookies were always encrypted and could only be accessed by the user.|$|R
50|$|Texterity's {{technologies}} utilize International standard-based {{technologies to}} enable readers to access digital magazine editions through major web <b>browsers</b> without <b>requiring</b> {{the use of}} Flash (Adobe Flash) or other plug-ins. This approach allows publishers to integrate magazine content with web-based social media networks and multimedia applications. The Texterity platform integrates protected (subscription) digital magazine content with search engines.|$|R
40|$|Abstract. In {{this paper}} we propose {{scrambling}} as a lightweight method of censorship resistance, {{in place of the}} traditional use of encryption. We consider a censor which can only block banned content by scanning it while in transit (for example using deep-packet inspection), instead of attacking the communication endpoints (for example using address filtering or taking servers offline). Our goal is to greatly increase the workload of the censor by scrambling all data during communication, while maintaining reasonable workloads for the endpoints of the communication network. In particular, our goal is to make it impossible for the censor to effectively accelerate the de-scrambling procedure over what may be achieved by commodity PCs or mobile phones at the endpoints, a goal which we term high-inertia scrambling. We also aim to achieve this using the standard JavaScript runtime environment of modern <b>browsers,</b> <b>requiring</b> no distribution or installation of censorship-resistance software. ...|$|R
