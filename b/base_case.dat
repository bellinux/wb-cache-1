3246|10000|Public
25|$|For the <b>base</b> <b>case,</b> {{note that}} 2 is prime.|$|E
25|$|Whether n=0 or n=1 {{depends on}} the {{definition}} of the natural numbers. If 0 is considered a natural number, as is common in the fields of combinatorics and mathematical logic, the <b>base</b> <b>case</b> is given by n=0. If, on the other hand, 1 is taken as the first natural number, then the <b>base</b> <b>case</b> is given by n=1.|$|E
25|$|The <b>base</b> <b>case</b> of the {{recursion}} is {{arrays of}} size zero or one, {{which are in}} order by definition, so they never need to be sorted.|$|E
50|$|Check for {{the above}} <b>base</b> <b>cases.</b>|$|R
50|$|This {{algorithm}} {{has a few}} <b>base</b> <b>cases.</b>|$|R
40|$|Abstract. Maintaining {{compact and}} {{competent}} <b>case</b> <b>bases</b> {{has become a}} main topic of <b>Case</b> <b>Based</b> Reasoning (CBR) research. The main goal is to obtain a compact <b>case</b> <b>base</b> (with a reduced number of cases) without losing accuracy. In this work we present JUST, a technique {{to reduce the size}} of a <b>case</b> <b>base</b> while maintaining the classification accuracy of the CBR system. JUST uses justifications in order to select a subset of cases from the original <b>case</b> <b>base</b> that will form the new reduced <b>case</b> <b>base.</b> A justification is an explanation that the CBR system generates to justify the solution found for a given problem. Moreover, we present empirical evaluation in various data sets showing that JUST is an effective <b>case</b> <b>base</b> reduction technique that maintains the classification accuracy of the <b>case</b> <b>base.</b> Keywords: CBR, <b>Case</b> <b>Base</b> Management, <b>Case</b> <b>Base</b> Reduction. ...|$|R
25|$|Numbers {{represent}} {{the number of}} free moves, or the move advantage of a particular player. By convention positive numbers represent an advantage for Left, while negative numbers represent an advantage for Right. They are defined recursively with 0 being the <b>base</b> <b>case.</b>|$|E
25|$|Proof. For the <b>base</b> <b>case</b> of induction, {{consider}} i=0 and {{the moment}} before for loop is executed for the first time. Then, for the source vertex, source.distance = 0, which is correct. For other vertices u, u.distance = infinity, which is also correct {{because there is no}} path from source to u with 0 edges.|$|E
25|$|Note {{also that}} the {{anonymous}} function is named Smaller in the parameter list of the second definition of qsort {{so that it can}} be referenced by that name within that function. It is not named in the first definition of qsort, which deals with the <b>base</b> <b>case</b> of an empty list and thus has no need of this function, let alone a name for it.|$|E
2500|$|Alternatively, one can employ large <b>base</b> <b>cases</b> {{that still}} use a divide-and-conquer algorithm, but {{implement}} the algorithm for predetermined set of fixed sizes where the algorithm can be completely unrolled into code {{that has no}} recursion, loops, or conditionals (related to the technique of partial evaluation). [...] For example, this approach is used in some efficient FFT implementations, where the <b>base</b> <b>cases</b> are unrolled implementations of divide-and-conquer FFT algorithms {{for a set of}} fixed sizes. [...] Source code generation methods may be used to produce the large number of separate <b>base</b> <b>cases</b> desirable to implement this strategy efficiently.|$|R
5000|$|... #Subtitle level 3: Jadu 'CXM' (Cloud <b>based</b> <b>Case</b> Management and CRM) ...|$|R
50|$|The Advanced level {{consists}} of 5 text <b>based</b> <b>cases</b> on real-world science topics.|$|R
25|$|On {{the other}} hand, {{efficiency}} often improves if the recursion is stopped at relatively large base cases, {{and these are}} solved non-recursively, resulting in a hybrid algorithm. This strategy avoids the overhead of recursive calls that do little or no work, and may also allow the use of specialized non-recursive algorithms that, for those base cases, are more efficient than explicit recursion. A general procedure for a simple hybrid recursive algorithm is short-circuiting the <b>base</b> <b>case,</b> also known as arm's-length recursion. In this case whether the next step {{will result in the}} <b>base</b> <b>case</b> is checked before the function call, avoiding an unnecessary function call. For example, in a tree, rather than recursing to a child node and then checking if it is null, checking null before recursing; this avoids half the function calls in some algorithms on binary trees. Since a D algorithm eventually reduces each problem or sub-problem instance to a large number of base instances, these often dominate the overall cost of the algorithm, especially when the splitting/joining overhead is low. Note that these considerations do not depend on whether recursion is implemented by the compiler or by an explicit stack.|$|E
25|$|As Paul Erdős observed, the Sylvester–Gallai theorem {{immediately}} {{implies that}} any set of n points {{that are not}} collinear determines at least n different lines. As a <b>base</b> <b>case,</b> the result is clearly true for n=3. For any larger value of n, {{the result can be}} reduced from n points to n1 points, by deleting an ordinary line and one of the two points on it. Thus, it follows by mathematical induction. The example of a near-pencil (a set of n1 collinear points together with one additional point that is not on the same line as the other points) shows that this bound is tight.|$|E
25|$|Mathematical {{induction}} {{is a form}} {{of direct}} proof, usually done in two steps. When trying to prove a given statement for a set of natural numbers, the first step, known as the <b>base</b> <b>case,</b> is to prove the given statement for the first natural number. The second step, known as the inductive step, is to prove that, if the statement is assumed to be true for any one natural number, then it must be true for the next natural number as well. Having proved these two steps, the rule of inference establishes the statement to be true for all natural numbers. In common terminology, using the stated approach is referred to as using the Principle of mathematical induction.|$|E
2500|$|... {{defined by}} the {{recurrence}} relations fusc(2n)=fusc(n) and fusc(2n+1)=fusc(n)+fusc(n+1), with the <b>base</b> <b>cases</b> fusc(0)=0 and fusc(1)=1.|$|R
40|$|Abstract. This article {{presents}} a framework called Mémoire for the interoperability of <b>case</b> <b>bases</b> and <b>case</b> <b>based</b> reasoning in biology and medicine. It explains {{the motivation for}} such as formalization effort, based {{on the importance of}} semantics in the success of biomedical <b>case</b> <b>based</b> reasoning systems. This paper defends the suitability of a semantic approach similar to the semantic Web for sharing and distributing <b>case</b> <b>bases</b> and <b>case</b> <b>based</b> reasoning in biology and medicine. With semantic interoperability, <b>case</b> <b>based</b> reasoning systems will be able to communicate with one another, for example to provide decision-support across several domains, make available to agents and Web services on the Web the <b>case</b> <b>based</b> competency of CBR systems adopting Mémoire interchange language, and cooperate with other computational methods and systems such as information retrieval. This paper presents Mémoire‘s framework for the representation of <b>cases</b> and <b>case</b> <b>based</b> ontologies in biology and medicine. ...|$|R
40|$|The {{traditional}} approach {{of dealing with}} cases from Multiple <b>Case</b> <b>Bases</b> is to map these to one central <b>case</b> <b>base</b> that is used for knowledge extraction and problem solving. Accessing Multiple <b>Case</b> <b>Bases</b> should not require a change to their data structure. This paper presents an investigation into applying Case-Based Reasoning to Multiple Heterogeneous <b>Case</b> <b>Bases.</b> A <b>case</b> study is presented to illustrate and evaluate the approach...|$|R
25|$|Overlapping sub-problems {{means that}} the space of sub-problems must be small, that is, any {{recursive}} algorithm solving the problem should solve the same sub-problems over and over, rather than generating new sub-problems. For example, consider the recursive formulation for generating the Fibonacci series: F'i = F'i1 + F'i2, with <b>base</b> <b>case</b> F1=F2=1. Then F43 =F42+F41, and F42 =F41+F40. Now F41 is being solved in the recursive sub-trees of both F43 as well as F42. Even though {{the total number of}} sub-problems is actually small (only 43 of them), we end up solving the same problems over and over if we adopt a naive recursive solution such as this. Dynamic programming takes account of this fact and solves each sub-problem only once.|$|E
25|$|This axiomatization is complete, {{meaning that}} every Boolean law s= t is provable in this system. One first shows by {{induction}} on {{the height of}} s that every Boolean law for which t is atomic is provable, using R1 for the <b>base</b> <b>case</b> (since distinct atoms are never equal) and A1 and R3 for the induction step (s an application). This proof strategy amounts to a recursive procedure for evaluating s to yield an atom. Then to prove s= t in the general case when t may be an application, use {{the fact that if}} s= t is an identity then s and t must evaluate to the same atom, call it u. So first prove s= u and t= u as above, that is, evaluate s and t using A1, R1, and R3, and then invoke R2 to infer s= t.|$|E
500|$|Exactness {{immediately}} {{implies that}} the map ∂* is an isomorphism. Using the reduced homology of the 0-sphere (two points) as a <b>base</b> <b>case,</b> it follows ...|$|E
40|$|Two {{parallel}} contracted {{studies were}} conducted. Each contractor investigated three <b>base</b> <b>cases</b> and parametric variations about these <b>base</b> <b>cases.</b> Each contractor concluded {{that two of}} the <b>base</b> <b>cases</b> (a plant using separate firing of an advanced high temperature regenerative air heater with fuel from an advanced coal gasifier and a plant using an intermediate temperature metallic recuperative heat exchanger to heat oxygen enriched combustion air) were comparable in both performance and cost of electricity. The contractors differed in the level of their cost estimates with the capital cost estimates for the MHD topping cycle and the magnet subsystem in particular accounting for {{a significant part of the}} difference. The impact of the study on the decision to pursue a course which leads to an oxygen enriched plant as the first commercial MHD plant is described...|$|R
40|$|Self {{medication}} is {{the selection and}} use of medicines by individuals to treat self recognized illnesses or sym-ptoms. Objectives: To identify various psychosocial factors associated with self medication. Design: Population <b>based</b> <b>case</b> control study. Place and Duration: Lahore— 12 months. Subjects and Methods: A population <b>based</b> <b>case</b> – control study with 1 : 1 case to control ratio was con-ducted. A total of 100 persons (50 cases and 50 con-trols) were recruited in study. Selection was made on laid down criteria after taking due consent. Interview...|$|R
40|$|This report {{addresses}} {{the problem of}} synthesizing integer recurrences by genetic programming (GP). A number of alternative approaches were proposed and tested by running thousands of experiments. In particular the following aspects were investigated: approaches to <b>base</b> <b>cases,</b> population size, different fitness measures and superiority of GP over random search. Results of the experiments showed that our approach (fixed <b>base</b> <b>cases)</b> {{is much better than}} the conventional one (evolved <b>base</b> <b>cases)</b> on finding integer recurrences and, for non-trivial problems, it outperforms random search in this task. There are also results that demonstrate the optimality of the larger population sizes commonly used in GP. Unfortunately, the experiments with additional fitness terms in the fitness function did not give any conclusive results. Preface Chaos often breeds life when order breeds habit. [...] Henry Adams This is my master thesis in computer science. During my work with it at the computer science de [...] ...|$|R
500|$|An {{alternative}} {{proof of}} sufficiency {{can be used}} to show that there are many different flat foldings. Consider the smallest angle [...] and the two creases on either side of it. Mountain-fold one of these two creases and valley-fold the other, choosing arbitrarily which fold to use for which crease. Then, glue the resulting flap of paper onto the remaining part of the crease pattern. The result of this gluing will be a crease pattern with two fewer creases, on a conical sheet of paper, that still satisfies Kawasaki's condition. Therefore, by mathematical induction, repeating this process will eventually lead to a flat folding. The <b>base</b> <b>case</b> of the induction is a cone with only two creases and two equal-angle wedges, which can obviously be flat-folded by using a mountain fold for both creases. There are two ways to choose which folds to use in each step of this method, and each step eliminates two creases. Therefore, any crease pattern with [...] creases that satisfies Kawasaki's condition has at least [...] different choices of mountain and valley folds that all lead to valid flat foldings.|$|E
2500|$|Although {{the form}} just {{described}} requires one {{to prove the}} <b>base</b> <b>case,</b> ...|$|E
2500|$|In {{this form}} the <b>base</b> <b>case</b> is subsumed {{by the case}} , where P(0) is proved with no other P(n) assumed; ...|$|E
25|$|In any {{recursive}} algorithm, {{there is}} considerable freedom {{in the choice of}} the <b>base</b> <b>cases,</b> the small subproblems that are solved directly in order to terminate the recursion.|$|R
30|$|The {{recommendation}} manager {{creates a}} query {{based on the}} application requirements, the deployment entities and customer preferences and sends it to the case-based recommender (a). The case-based recommender provides a list of recommendations for the application deployment using the knowledge <b>bases</b> (application <b>case</b> <b>base,</b> adaptation <b>case</b> <b>base,</b> and providers knowledge base). The list of recommendations along with the case similarity is then {{sent back to the}} recommendation manager (b).|$|R
5000|$|According to (...) , configurators can be {{classified}} as rule based, model <b>based</b> and <b>case</b> <b>based,</b> depending on the reasoning techniques used.|$|R
2500|$|If [...] is {{the weight}} of the edge between {{vertices}} [...] and , we can define [...] in terms of the following recursive formula: the <b>base</b> <b>case</b> is ...|$|E
2500|$|In {{this form}} of {{complete}} induction one still has to prove the <b>base</b> <b>case,</b> P(0), and {{it may even be}} necessary to prove extra base cases such as P(1) ...|$|E
2500|$|... 1. The Base Case: MTDB {{described}} the <b>base</b> <b>case</b> as a modified bus network that retained {{the same number}} of total vehicles as the present San Diego Transit system.|$|E
30|$|The system {{contains}} four knowledge bases, namely: the Abstract <b>Case</b> <b>Base,</b> Introduction <b>Case</b> <b>Base,</b> Rules and Similarity Measures, and Critiquing Rules. The Abstract <b>Case</b> <b>Base</b> includes 52 {{examples of}} schematic structures taken from authentic abstracts {{as well as}} the description of the rhetorical components, strategies and lexical patterns for each case. Similarly, the Introduction <b>Case</b> <b>Base</b> contains 48 examples of schematic structures for introductions and the description of the rhetorical components, strategies and lexical patterns for each case. For both <b>case</b> <b>bases,</b> all information was manually annotated according to appropriate rhetorical structure models [4, 16]. The user can freely browse these databases and search for occurrences of any given rhetorical structure.|$|R
40|$|Mental health {{services}} are {{primarily concerned with}} early diagnosis and treatment, apart from preservation and promotion of good mental health and prevention of mental illness. Over the past few years, a strengths-based approach to case management with people with severe mental illness has emerged. This paper reviews empirical evidence and illustrates an evidence <b>based</b> <b>case</b> study to validate the existing literature on the strengths perspective in treating mental illness. The exploration of the strengths perspective {{as it relates to}} the evidence <b>based</b> <b>case</b> study shows that the strengths perspective influences both the well-being and the coping of people with mental illness...|$|R
40|$|Abstract- SequenceL is a concise, {{high-level}} language {{with a simple}} semantic that provides for the automatic derivation of many iterative and all parallel control structures. The semantic repeatedly applies a “Normalize-Transpose-Distribute ” operation to functions and operators until <b>base</b> <b>cases</b> are discovered. <b>Base</b> <b>cases</b> include the grounding of variables {{and the application of}} built-in operators to operands of appropriate types. The automatic derivation of many iterative and all parallel control structures suggests that the language is a good candidate for execution on a parallel computer. This paper presents an implementation of the SequenceL Tuple Space/Thin Evaluator architecture on a distributed memory multicomputer...|$|R
