371|10000|Public
5|$|In the 1970s, the anti-terrorism {{industry}} offered bullet-proof vehicles, <b>bugging</b> {{devices and}} security hardware, so Mardas set up companies offering these products to VIPs. King Hussein of Jordan bought {{a fleet of}} cars that Mardas had customised, but then reportedly had the changes reversed when tests demonstrated them to be useless. In 1987, Mardas was a managing director of Alcom Ltd, which specialised in electronic communications and security. He later returned to Greece.|$|E
5|$|In the 1970s, the anti-terrorism {{industry}} offered bullet-proof vehicles, <b>bugging</b> {{devices and}} security hardware. Mardas set up companies offering these products to VIPs, using the former King Constantine II of Greece as his principal salesman. Ex-King Constantine—who {{at the time}} was exiled in Britain—provided contacts to several royal families for Mardas, and had close contact with the deposed Shah of Iran, who had moved to Mexico. The Shah {{was one of the first}} people interested in the customised bullet-proof cars that Mardas was offering, and was believed to have financially assisted Mardas’ companies.|$|E
5|$|Keith, Veronica's {{father and}} owner of Mars Investigations, their detective firm, visits Veronica in jail. Cliff McCormack (Daran Norris), a local public defender, also arrives, and tells Veronica {{that she has been}} all but cleared, but Sheriff Lamb will keep her in custody {{for as long as he}} can because he still {{believes}} she was involved in Josh's disappearance. Keith returns to Mars Investigations, where Hank Landry arrives and says that he found a <b>bugging</b> device in his phone. Landry had been implicated in the ongoing investigation into the death of Cyrus O’Dell, dean of Hearst College where Veronica is a student. Keith denies that he or Veronica placed the device in his phone, but Hank becomes angry, telling him to stop investigating him.|$|E
40|$|<b>Bugs</b> {{severely}} hurt blockchain system dependability. A {{thorough understanding}} of blockchain <b>bug</b> characteristics is required to design effective tools for preventing, detecting and mitigating <b>bugs.</b> We perform an empirical study on <b>bug</b> characteristics in eight representative open source blockchain systems. First, we manually examine 1, 108 <b>bug</b> reports {{to understand the nature}} of the reported <b>bugs.</b> Second, we leverage card sorting to label the <b>bug</b> reports, and obtain ten <b>bug</b> categories in blockchain systems. We further investigate the frequency distribution of <b>bug</b> categories across projects and programming languages. Finally, we study the relationship between <b>bug</b> categories and <b>bug</b> fixing time. The findings include: (1) semantic <b>bugs</b> are the dominant runtime <b>bug</b> category, (2) frequency distributions of <b>bug</b> types show similar trends across different projects and programming languages, (3) security <b>bugs</b> take the longest median time to be fixed, (4) 35. 71 % performance <b>bugs</b> are fixed in more than one year, performance <b>bugs</b> take the longest average time to be fixed...|$|R
40|$|Compatible with CAJALv 1. 8 Features PUT/GET {{interfaces}} for SWC files. PUT/GET interfaces for NIFTI files. RESTful interfaces for {{create and}} delete channel. Documentation for Web-Console. Faster blosc interface <b>Bug</b> Fixes PutAnnotation <b>Bug</b> Fix. Voxeks Offset <b>Bug</b> Fix. DeleteAnnotaiton <b>Bug</b> Fix. CATMAID Tiles <b>Bug</b> Fix. GraphGen Test <b>Bug</b> Fix. Django combined with celery. Tasks <b>bug</b> Fix. Iso Projinfo <b>bug</b> Fixed in JSON Projinfo. NOTE:This is not fixed for hdf 5 projinfo Setup config files fixed. Misc OCPviz <b>bug</b> fixes...|$|R
40|$|Concurrency <b>bugs</b> are {{difficult}} to find and fix. To help with finding and fixing concurrency <b>bugs,</b> prior research has mostly focused on static or dynamic analyses for finding spe-cific classes of <b>bugs.</b> We present an approach whose focus is understanding the differences between concurrency and non-concurrency <b>bugs,</b> the differences among various con-currency <b>bug</b> classes, and predicting <b>bug</b> quantity, type, and location, from patches, <b>bug</b> reports and bug-fix met-rics. First, we show that <b>bug</b> characteristics and bug-fixing processes vary significantly among different kinds of concur-rency <b>bugs</b> and compared to non-concurrency <b>bugs.</b> Next, we build a quantitative predictor model to estimate concur-rency <b>bugs</b> appearance in future releases. Then, we build a qualitative predictor that can predict the type of concur-rency <b>bug</b> for a newly-filed <b>bug</b> report. Finally, we build a <b>bug</b> location predictor to indicate the likely source code loca-tion for newly-reported <b>bugs.</b> We validate the effectiveness of our approach on three popular projects, Mozilla, KDE, and Apache. 1...|$|R
5|$|Zach shows Peter incriminating photos he {{had been}} hiding from Alicia, which are doctored to show Peter being unfaithful. Zach intercepted the photos when they were {{anonymously}} delivered to the Florrick residence. Zach also shows Peter a photo he secretly took of a man <b>bugging</b> the Florrick apartment entranceway. Peter hires hardened and blunt political operative Eli Gold (Alan Cumming) {{to assist in the}} appeal. Gold recognizes the man as a federal investigator and informs Peter he is under investigation by the FBI. Peter reveals to Alicia that Zach hid the photos from her to spare her feelings.|$|E
25|$|Hunt {{organized}} the <b>bugging</b> of the Democratic National Committee at the Watergate office building.|$|E
25|$|There {{was even}} a bug in Levinson's bedroom. Levinson brought {{a lawsuit against the}} FBI for the <b>bugging.</b>|$|E
5000|$|Chariot <b>Bugs</b> a.k.a. Minion <b>Bugs</b> - About {{the size}} of Sentry <b>Bugs</b> and bearing a {{resemblance}} to common roaches, these <b>Bugs</b> accompany and serve the Brain <b>Bugs.</b> When needed, the Brain <b>Bugs</b> can lie {{on top of them}} to be moved about.|$|R
40|$|In {{open-source}} {{software development}} a new <b>bug</b> firstly is found by developers or users. Then the <b>bug</b> {{is described as}} a <b>bug</b> report, which is submitted to a <b>bug</b> repository. Finally the <b>bug</b> triager checks the <b>bug</b> report and typically assigns a developer to fix the <b>bug.</b> The assignment process is time-consuming and error-prone. Furthermore, a large number of <b>bug</b> reports are tossed (reassigned) to other developers, which increases bug-fix time. In order to quickly identify the fixer to <b>bug</b> reports we present an approach based on the <b>bug</b> tossing history and textual similarities between <b>bug</b> reports. This proposed approach is evaluated on Eclipse and Mozilla. The results show that our approach can significantly improve the efficiency of <b>bug</b> assignment: the <b>bug</b> fixer is often identified with fewer tossing events. </p...|$|R
40|$|Abstract To design {{effective}} {{tools for}} detecting and recovering from soft-ware failures requires a {{deep understanding of}} software <b>bug</b> characteristics. We study software <b>bug</b> characteristics by sampling 2, 060 real world <b>bugs</b> in three large, representative open-source projects—the Linux kernel, Mozilla, and Apache. We manually study these <b>bugs</b> in three dimensions—root causes, impacts, and components. We further study the correlation between categories in different dimensions, and the trend {{of different types of}} <b>bugs.</b> The findings include: (1) semantic <b>bugs</b> are the dominant root cause. As software evolves, semantic <b>bugs</b> increase, while memory-related <b>bugs</b> decrease, calling for more research effort to address semantic bugs; (2) the Linux kernel operating sys-tem (OS) has more concurrency <b>bugs</b> than its non-OS counterparts, suggesting more effort into detecting concurrency <b>bugs</b> in operating system code; and (3) reported security <b>bugs</b> are increasing, and the majority of them are caused by semantic <b>bugs,</b> suggesting more support to help developers diagnose and fix security <b>bugs,</b> especially semantic security <b>bugs.</b> In addition, to reduce the manual effort in building <b>bug</b> benchmarks for evaluating <b>bug</b> detection an...|$|R
25|$|River bugs {{are small}} single person {{inflatable}} craft where a person's feet stick {{out of one}} end. River <b>Bugging</b> is done feet first with no paddle.|$|E
25|$|In January 2009, after {{pleading}} {{not guilty}} at Winchester Crown Court, Nicholson was jailed for 11 years for conspiracy to blackmail during the SHAC campaign. Police obtained evidence {{to secure the}} conviction by <b>bugging</b> a 2007 meeting in a cottage in Moorcote, near Hook, Hampshire, attended by Nicholson and six other SHAC activists, as well as hired cars they had used. The <b>bugging</b> was part of Operation Achilles, a police operation against animal rights activists that led to 32 arrests in May 2007, carried out by 700 officers in England, Amsterdam and Belgium. Nicholson gave herself up to police when she heard about the raids; she was arrested and denied bail.|$|E
25|$|However, in {{the same}} {{interview}} on the Jonathan Dimbleby programme, Short backtracked on her claim about British agents <b>bugging</b> Annan. She admitted that the transcripts she saw of Annan's private conversations might have related to Africa and not to Iraq.|$|E
50|$|Eurydema oleracea is {{a species}} of shield <b>bug</b> in the Pentatomidae family and is {{commonly}} known as the rape <b>bug,</b> the crucifer shield <b>bug,</b> the cabbage <b>bug</b> or the brassica <b>bug.</b>|$|R
30|$|In this study, we {{investigate}} the <b>bug</b> reports from five {{open source software}} projects, i.e., Apache Hadoop project, Apache ZooKeeper project, Oozie project, Accumulo project and Apache Spark project. We classify the reported <b>bugs</b> into three distinct categories, i.e., fixed and closed concurrency <b>bugs,</b> fixed and closed non-concurrency <b>bugs</b> and unreproducible <b>bugs.</b> We further classify the concurrency <b>bugs</b> based on <b>bug</b> type. For concurrency and non-concurrency we additionally consider severity and fixing time. We compare the non-concurrency, concurrency and unreproducible <b>bugs</b> {{in terms of their}} reporting frequency. Our results indicate that a relatively small share of <b>bugs</b> is related to concurrency issues, while the vast majority are non-concurrency <b>bugs.</b> Fixing time for concurrency and non-concurrency <b>bugs</b> is different but this difference is not big. However, the fixing time for unreproducible concurrency and unreproducible non-concurrency <b>bugs</b> is similar. In addition, concurrency <b>bugs</b> are considered to be slightly severer than non-concurrency <b>bugs.</b>|$|R
5000|$|Agonoscelis pubescens (Thunb.) - Andat <b>bug,</b> Sudan dura <b>bug,</b> Pentatomid sorghum <b>bug,</b> African cluster <b>bug,</b> syn. A. versicolor (Fabricius, 1794) ...|$|R
25|$|Hoover {{began using}} {{wiretapping}} in the 1920s during Prohibition to arrest bootleggers. In the 1927 case Olmstead v. United States, {{in which a}} bootlegger was caught through telephone tapping, the United States Supreme Court ruled that FBI wiretaps did not violate the Fourth Amendment as unlawful search and seizure, {{as long as the}} FBI did not break into a person's home to complete the tapping. After Prohibition's repeal, Congress passed the Communications Act of 1934, which outlawed non-consensual phone tapping, but did allow <b>bugging.</b> In the 1939 case Nardone v. United States, the court ruled that due to the 1934 law, evidence the FBI obtained by phone tapping was inadmissible in court. After the 1967 case Katz v. United States overturned the 1927 case that had allowed <b>bugging,</b> Congress passed the Omnibus Crime Control Act, allowing public authorities to tap telephones during investigations, as long as they obtained warrants beforehand.|$|E
25|$|Besides {{reactive}} {{intelligence reports}} like those he provided concerning Hess, Schellenberg arranged numerous plots of subterfuge and intelligence gathering, including the <b>bugging</b> of Salon Kitty, a high-class Berlin brothel. Some of the Nazi regime's upper echelons even visited this brothel unaware at first, like Foreign Minister Joachim von Ribbentrop. However, intelligence collection efforts at Salon Kitty were essentially a failure as they never revealed anything significant.|$|E
25|$|Controversy arose {{when it was}} {{alleged that}} the service was {{monitoring}} trade unions and left-wing politicians. A file was kept on Labour Prime Minister Harold Wilson from 1945, when he became an MP, although the agency's official historian, Christopher Andrew maintains that his fears of MI5 conspiracies and <b>bugging</b> were unfounded. As Home Secretary, the Labour MP Jack Straw discovered the existence of his own file dating from {{his days as a}} student radical.|$|E
50|$|He {{also appears}} in the video games Loons: The Fight for Fame, Taz: Wanted, <b>Bugs</b> Bunny Crazy Castle, The <b>Bugs</b> Bunny Crazy Castle 2, <b>Bugs</b> Bunny Crazy Castle 3, The <b>Bugs</b> Bunny Birthday Blowout, <b>Bugs</b> Bunny: Rabbit Rampage, <b>Bugs</b> Bunny in Double Trouble, <b>Bugs</b> Bunny: Lost in Time, <b>Bugs</b> Bunny and Taz: Time Busters, Sheep, Dog, 'n' Wolf, Looney Tunes B-Ball, Daffy Duck in Hollywood and Looney Tunes: Back in Action the video game.|$|R
40|$|The {{change history}} of a {{software}} project contains a rich collection of code changes that record previous development experience. Changes that fix <b>bugs</b> are especially interesting, since they record both the old buggy code and the new fixed code. This paper presents a <b>bug</b> finding algorithm using <b>bug</b> fix memories: a project-specific <b>bug</b> and fix knowledge base developed by analyzing the history of <b>bug</b> fixes. A <b>bug</b> finding tool, BugMem, implements the algorithm. The approach is different from <b>bug</b> finding tools based on theorem proving or static model checking such as Bandera, ESC/Java, FindBugs, JLint, and PMD. Since these tools use pre-defined common <b>bug</b> patterns to find <b>bugs,</b> they do not aim to identify project-specific <b>bugs.</b> <b>Bug</b> fix memories use a learning process, so the <b>bug</b> patterns are projectspecific, and project-specific <b>bugs</b> can be detected. The algorithm and tool are assessed by evaluating if real <b>bugs</b> and fixes in project histories {{can be found in}} the <b>bug</b> fix memories. Analysis of five open source projects shows that, for these projects, 19. 3 %- 40. 3 % of <b>bugs</b> appear repeatedly in the memories, and 7. 9 %- 15. 5 % of <b>bug</b> and fix pairs are found in memories. The results demonstrate that project-specific <b>bug</b> fix patterns occur frequently enough to be useful as a <b>bug</b> detection technique. Furthermore, for the <b>bug</b> and fix pairs, it is possible to both detect the <b>bug</b> and provide a strong suggestion for the fix. However, there is also a high false positive rate, with 20. 8 %- 32. 5 % of non-bug containing changes also having patterns found in the memories. A comparison of BugMem with a <b>bug</b> finding tool, PMD, shows that the <b>bug</b> sets identified by both tools are mostly exclusive, indicating that BugMem complements other <b>bug</b> finding tools...|$|R
40|$|Abstract—Software {{performance}} {{is critical for}} how users perceive the quality of software products. Performance bugs—programming errors that cause significant performance degradation—lead to poor user experience and low system throughput. Designing effective techniques to address perfor-mance <b>bugs</b> requires a deep understanding of how performance <b>bugs</b> are discovered, reported, and fixed. In this paper, we study how performance <b>bugs</b> are discovered, reported to developers, and fixed by developers, and compare the results with those for non-performance <b>bugs.</b> We study performance and non-performance <b>bugs</b> from three popular code bases: Eclipse JDT, Eclipse SWT, and Mozilla. First, we find little evidence that fixing performance <b>bugs</b> has a higher chance to introduce new functional <b>bugs</b> than fixing non-performance <b>bugs,</b> which implies that developers may {{not need to be}} over-concerned about fixing performance <b>bugs.</b> Second, although fixing performance <b>bugs</b> is about as error-prone as fixing non-performance <b>bugs,</b> fixing performance <b>bugs</b> is more difficult than fixing non-performance <b>bugs,</b> indicating that developers need better tool support for fixing performance <b>bugs</b> and testing performance <b>bug</b> patches. Third, unlike many non-performance <b>bugs,</b> a large percentage of performance <b>bugs</b> are discovered through code reasoning, not through users observing the negative effects of the <b>bugs</b> (e. g., performance degradation) or through profiling. The result suggests that techniques to help developers reason about performance, better test oracles, and better profiling techniques are needed for discovering performance <b>bugs.</b> I...|$|R
25|$|In the {{six weeks}} leading up to the {{shooting}} of O'Neill, the Metropolitan Police of London had kept O'Neill and fellow IRA Volunteers, Brian McHugh and Patrick Kelly, under intensive police surveillance including <b>bugging</b> of O'Neill's room and video surveillance. Commander John Grieve, who was Head of the Metropolitan Police Anti-Terrorist Branch at the time, stated that the extent of that operation exceeded that of others carried out in Britain by far.|$|E
25|$|The term Watergate, by metonymy, {{has come}} to {{encompass}} an array of clandestine and often illegal activities undertaken {{by members of the}} Nixon administration. Those activities included such “dirty tricks” as <b>bugging</b> the offices of political opponents and people of whom Nixon or his officials were suspicious. Nixon and his close aides also ordered investigations of activist groups and political figures, using the Federal Bureau of Investigation (FBI), the Central Intelligence Agency (CIA), and the Internal Revenue Service (IRS).|$|E
25|$|In 1937 the Jewish Agency's {{intelligence}} {{groups were}} responsible for <b>bugging</b> the Peel Commission hearings in Palestine. Eventually, the Arab Revolt convinced the Agency that a central intelligence service was required and {{this led to the}} formation of a counter-intelligence agency known as the Ran (headed by Yehuda Arazi, who also helped to smuggle rifles, machine guns and ammunition from Poland to Palestine) and thereafter in 1940 to the creation of SHAI, the forerunner of Mossad.|$|E
30|$|Farchi et al. [37] {{analyzed}} concurrency <b>bugs</b> {{by creating}} such <b>bugs</b> artificially. They asked programmers to write codes which have concurrency <b>bugs.</b> We believe that artificially creating <b>bugs</b> may {{not lead to}} <b>bugs</b> that {{are representative of the}} real-world software <b>bugs.</b> We, on the other hand, analyze the <b>bug</b> database of an open-source software, which is well maintained, and widely used software.|$|R
40|$|Context: Blocking <b>bugs</b> are <b>bugs</b> {{that prevent}} other <b>bugs</b> from being fixed. Previous {{studies show that}} {{blocking}} <b>bugs</b> take approximately {{two to three times}} longer to be fixed compared to non-blocking <b>bugs.</b> Objective: Thus, automatically predicting blocking <b>bugs</b> early on so that developers are aware of them, can help reduce the impact of or avoid blocking <b>bugs.</b> However, a major challenge when predicting blocking <b>bugs</b> is that only a small proportion of <b>bugs</b> are blocking <b>bugs,</b> i. e., there is an unequal distribution between blocking and non-blocking <b>bugs.</b> For example, in Eclipse and OpenOffice, only 2. 8 % and 3. 0 % <b>bugs</b> are blocking <b>bugs,</b> respectively. We refer to this as the class imbalance phenomenon. Conclusion: ELBlocker can help deal with the class imbalance phenomenon and improve the prediction of blocking <b>bugs.</b> ELBlocker achieves a substantial and statistically significant improvement over the state-of-the-art methods, i. e., Garcia and Shihab’s method, SMOTE, OSS, and Bagging...|$|R
40|$|Open source {{projects}} often maintain open <b>bug</b> repositories during {{development and}} maintenance, and the reporters often point out straightly or implicitly {{the reasons why}} <b>bugs</b> occur when they submit them. The comments about a <b>bug</b> are very valuable for developers to locate and fix the <b>bug.</b> Meanwhile, it is very common in large software for programmers to override or overload some methods according to the same logic. If one method causes a <b>bug,</b> {{it is obvious that}} other overridden or overloaded methods maybe cause related or similar <b>bugs.</b> In this paper, we propose and implement a tool Rebug- Detector, which detects related <b>bugs</b> using <b>bug</b> information and code features. Firstly, it extracts <b>bug</b> features from <b>bug</b> information in <b>bug</b> repositories; secondly, it locates <b>bug</b> methods from source code, and then extracts code features of <b>bug</b> methods; thirdly, it calculates similarities between each overridden or overloaded method and <b>bug</b> methods; lastly, it determines which method maybe causes potential related or similar <b>bugs.</b> We evaluate Rebug-Detector on an open source project: Apache Lucene-Java. Our tool totally detects 61 related <b>bugs,</b> including 21 real <b>bugs</b> and 10 suspected <b>bugs,</b> and it costs us about 15. 5 minutes. The results show that <b>bug</b> features and code features extracted by our tool are useful to find real <b>bugs</b> in existing projects. Comment: 10 pages, 5 figures, 4 tables conference; 2010 IEEE 34 th Annual Computer Software and Applications Conferenc...|$|R
25|$|The alleged crimes, {{which he}} stated had been {{committed}} without his knowledge or consent, included the attempted murder of his personal physician, poisonings of public officials, wiretapping and <b>bugging</b> within the commune and within his own home, and a bioterror attack on the citizens of The Dalles, Oregon, using salmonella to impact the county elections. While his allegations were initially greeted with scepticism by outside observers, the subsequent investigation by the US authorities confirmed these accusations and resulted in the conviction of Sheela and several of her lieutenants.|$|E
25|$|The Daily Star {{reported}} in November 2011 that SIS helped capture Saif al-Islam Gaddafi. The top-secret mission, dubbed Operation X to disguise its purpose, used modern electronic intelligence (ELINT) technologies to bug him {{along with his}} friends and family. Gaddafi had been hiding {{out in the desert}} for a month but the breakthrough came when he made two phone calls, one after the other, to say he was safe. It allowed the joint British and French <b>bugging</b> operation to pinpoint his location. SIS agents using the £25million top-secret equipment closed in on him before calling in the Libyan snatch squad to apprehend him.|$|E
25|$|Based {{on these}} revelations, Texas A history {{professor}} Luke Nichter, who had successfully petitioned {{for the release}} of the information, argued that Woodward and Bernstein were incorrect in concluding, based largely on Watergate burglar James McCord's word, {{that the purpose of the}} break-in was to bug O'Brien's phone to gather political and financial intelligence on the Democrats. Instead, Nichter sided with late journalist J. Anthony Lukas of the New York Times, who had concluded that the committee was seeking to find evidence linking the Democrats to prostitution, as it was alleged that Oliver's office had been used to arrange such meetings. However, Nichter acknowledged that Woodward and Bernstein's theory of O'Brien as the target could not be debunked unless information was released about what Baldwin heard in his <b>bugging</b> of conversations.|$|E
40|$|Some <b>bugs,</b> {{among the}} {{millions}} that exist, {{are similar to}} each other. When fixing a <b>bug,</b> a programmer tends to search for similar <b>bugs</b> that have been reported and resolved in the past. A fix for a similar <b>bug</b> can help him understand his <b>bug,</b> or even directly fix his <b>bug.</b> Studying <b>bugs</b> with similar symptoms, programmers may determine how to detect or resolve them. Existing work has focused on analyzing <b>bug</b> reports and other unstructured <b>bug</b> information. To tackle the problem of finding similar <b>bugs,</b> we propose and advocate the systematic use of semantic <b>bug</b> information {{in the form of}} execution traces, the most practical and precise approximation of semantics. In particular, this paper introduces novel language and tool support for performing semantic querying and analysis of <b>bugs.</b> We describe <b>bug</b> query language (BQL), a flexible query language over execution traces that allows users to express diverse queries. To support and validate our design, we developed the BQL open infrastructure that consists of a <b>bug</b> database, a query processing engine, an execution trace collection engine, and a web-based user interface. Given a <b>bug</b> and a query, BQL exhaustively searches in its database for similar <b>bugs.</b> We also provide tools for recording and uploading <b>bug</b> traces to the BQL infrastructure. We evaluated BQL on a collection of <b>bugs</b> from popular open-source projects. We show that BQL accurately and efficiently finds similar <b>bugs,</b> some of which could have been immediately used to fix open <b>bugs.</b> 1...|$|R
5000|$|Leaf-footed <b>bugs,</b> squash <b>bugs,</b> and sweetpotato <b>bugs</b> (Coreidae) ...|$|R
40|$|When {{fixing a}} <b>bug,</b> a {{programmer}} tends {{to search for}} similar <b>bugs</b> that have been resolved in the past. A fix for a similar <b>bug</b> may help him fix his <b>bug</b> or at least understand his <b>bug.</b> We designed and implemented the <b>Bug</b> Query Language (BQL) and its accompanying tools to help users search for similar <b>bugs</b> to aid debugging. This paper demonstrates the main features of the BQL infrastructure. We populated BQL with <b>bugs</b> collected from open-source projects and show that BQL could have helped users to fix real-world <b>bugs...</b>|$|R
