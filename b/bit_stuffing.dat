56|76|Public
5|$|To {{ensure that}} there are enough signal {{transitions}} for clock recovery {{to occur in the}} bitstream, a <b>bit</b> <b>stuffing</b> technique is applied to the data stream: an extra 0bit is insert into the data stream after any occurrence of six consecutive 1bits. (Thus ensuring that there is a 0bit to cause a transmission state transition.) Seven consecutively received 1bits are always an error. For USB3.0, additional data transmission encoding is used to handle the higher data rates required.|$|E
5000|$|... 24 bit buffer {{used for}} <b>bit</b> <b>stuffing,</b> {{synchronization}} jitter and distance delay.|$|E
50|$|There are two popular ways {{to ensure}} that no more than 15 {{consecutive}} zeros are ever sent: robbed-bit signaling and <b>bit</b> <b>stuffing.</b>|$|E
40|$|By {{generalization}} {{of the charge}} concept a feed back controlled <b>bit</b> <b>stuff</b> encoder is introduced for spectral shaping. There is demonstrated the spectral shaping property and an approximate formula is given for the output's spectrum {{as a function of}} the applied loop filter's characteristics. A host of calculated and simulated results are given...|$|R
6000|$|... "They have a {{very good}} <b>bit</b> of <b>stuff</b> at {{thirteen}} stone down Gloucester way. Wilson is his name, and they call him Crab on account of his style." ...|$|R
50|$|Walter Vanderplatz : Eddie's {{supervisor}} at the South Richmond Bank. More than a <b>bit</b> of a <b>stuffed</b> shirt.|$|R
50|$|<b>Bit</b> <b>stuffing</b> {{means that}} data frames may {{be larger than}} one would expect by simply {{enumerating}} the bits shown in the tables above.|$|E
50|$|All {{fields in}} the frame are stuffed with the {{exception}} of the CRC delimiter, ACK field and end of frame which are a fixed size and are not stuffed. In the fields where <b>bit</b> <b>stuffing</b> is used, six consecutive bits of the same type (111111 or 000000) are considered an error. An active error flag can be transmitted by a node when an error has been detected. The active error flag consists of six consecutive dominant bits and violates the rule of <b>bit</b> <b>stuffing.</b>|$|E
50|$|Note that check {{words are}} not subject to <b>bit</b> <b>stuffing,</b> and may be all-zero or all-one. Thus, it is not {{possible}} to detect erasure of a check word.|$|E
6000|$|... 'Have a roast fowl,' said Mrs MacStinger, 'with a <b>bit</b> of weal <b>stuffing</b> {{and some}} egg sauce. Come, Cap'en Cuttle! Give {{yourself}} a little treat!' ...|$|R
40|$|Digital Video Broadcasting (DVB) {{defines the}} {{carriage}} of multimedia information to clients {{by means of}} MPEG- 2 Transport Streams (TS). Multimedia information, due to coding and compression, is variable bit rate (VBR) in nature. Furthermore it displays burstiness on different time scales. Due to its bursty nature, VBR video requires more bandwidth than its mean <b>bit</b> rate. <b>Stuffing</b> <b>bits</b> are inserted into the TS to make TS constant bit-rate. In this thesis, we propose a system, which makes use of the wasted bandwidth, due to <b>stuffing</b> <b>bits</b> in MPEG- 2 TS, by carrying best-effort IP traffic with the prioritized video traffic. We investigate the statistical properties of the traffic on the proposed network. We give a detailed description for the traffic characteristics, i. e., self-similarity and long-range dependence. We use the NS simulator to simulate the proposed system for different network resource configurations, i. e., bottleneck bandwidth, buffer size, and different traffic characteristics, i. e., self-similarity (Hurst parameter). Analyzing the results, we suggest a bandwidth-driven network resource allocation policy, assuming a fixed overall traffic demand, since it improves both throughput an...|$|R
6000|$|... "You {{could do}} some of them over now," [...] said Jackson, feeling my friend's upper arm. [...] "No better <b>bit</b> of <b>stuff</b> was ever seen in a twenty-four foot ring. It would be a rare treat to see you take some of these young ones on. Won't you let me spring you on them?" ...|$|R
50|$|<b>Bit</b> <b>stuffing</b> is {{used for}} various purposes, such as for {{bringing}} bit streams that do not necessarily have the same or rationally related bit rates up to a common rate, or to fill buffers or frames. The location of the stuffing bits is communicated to {{the receiving end of}} the data link, where these extra bits are removed to return the bit streams to their original bit rates or form. <b>Bit</b> <b>stuffing</b> may be used to synchronize several channels before multiplexing or to rate-match two single channels to each other.|$|E
50|$|In data {{transmission}} and telecommunication, <b>bit</b> <b>stuffing</b> (also known—uncommonly—as positive justification) is {{the insertion of}} non information bits into data. Stuffed bits {{should not be confused}} with overhead bits.|$|E
50|$|Similar {{techniques}} {{are used to}} combine four &times; 8 Mbit/s together, plus <b>bit</b> <b>stuffing</b> and Frame Alignment, giving 34 Mbit/s. Four &times; 34 Mbit/s, gives 140. Four &times; 140 gives 565.|$|E
60|$|THE BEEFEATER. Now the Lord bless your innocence, sir, do {{you think}} you are the only pretty man in the world? A merry lady, sir: a warm <b>bit</b> of <b>stuff.</b> Go to: I'll not see her pass a deceit on a gentleman that hath given me the first piece of gold I ever handled.|$|R
6000|$|... "You {{must keep}} it carefully, and produce {{it at the}} inquest," [...] he said. [...] "I don't know, though, that {{it is likely to}} lead to anything. The <b>bit</b> of <b>stuff</b> may have been lying on the {{pavement}} near her, and her hand may have unconsciously clutched it when she fell. Was she subject to fainting-fits?" ...|$|R
60|$|It {{was decided}} that Sam and Fred should be the hares, while Larry Colby was to be leading hound. As Frank Harrington had a trumpet he was made whipper-in. Captain Putnam {{supplied}} the boys with a package of old copying books, and these were cut up into small <b>bits</b> and <b>stuffed</b> into two pillow cases loaned by Mrs. Green.|$|R
50|$|Zero-bit {{insertion}} is {{a particular}} type of <b>bit</b> <b>stuffing</b> used in some data transmission protocols to aid clock recovery from the data stream. It was popularized by IBM's SDLC (later renamed HDLC).|$|E
5000|$|However, even NRZI {{can have}} {{long series of}} zeroes (or ones if {{transitioning}} on [...] "zero"), and thus clock recovery can be difficult unless some form of run-length limited (RLL) coding is used in addition to NRZI. Magnetic disk and tape storage devices generally use fixed-rate RLL codes, while USB uses <b>bit</b> <b>stuffing,</b> which inserts an additional 0 bit after 6 consecutive 1 bits, thus forcing a transition. While <b>bit</b> <b>stuffing</b> is efficient, it results in a variable data rate because it takes slightly longer to send {{a long string of}} 1 bits than it does to send a long string of 0 bits.|$|E
50|$|The Media Access Control {{sublayer}} also determines {{where one}} frame of data {{ends and the}} next one starts - frame synchronization. There are four means of frame synchronization: time based, character counting, byte stuffing and <b>bit</b> <b>stuffing.</b>|$|E
6000|$|... "I {{told you}} so!" [...] cried Peterkin {{with a loud}} laugh.--"Oh Ralph, you're incorrigible! See, there's a club for you. I was sure, when we left you looking at that <b>bit</b> of <b>stuff,</b> that we would find you poring over it when we came back, so I just cut a club for you {{as well as for}} myself." ...|$|R
40|$|This paper {{considers}} {{application of}} a convolutional interleaver {{and the issue of}} influence of the space parameter in the turbo code performance. Similarly to previously considered convolutional interleavers, the new interleavers are designed as block interleavers and their performance in different code structures is compared with the interleaver having higher periods and space value of 1. In each comparison, the number of inserted <b>stuff</b> <b>bits</b> {{at the end of each}} data block is considered to be of similar order. Finally, suitable modification to the new interleavers is proposed improving performance for the codes with lower number of <b>stuff</b> <b>bits...</b>|$|R
5000|$|Bit stuffing: The {{insertion}} of non-information or escape characters to modify, synchronize and justify the data so it never looks like signaling information (and remove the <b>stuffed</b> <b>bits</b> and escape codes {{at the far}} end, restoring the data {{to be the same}} as the original).|$|R
5000|$|A <b>bit</b> <b>stuffing</b> {{technique}} {{is used to}} prevent the receiver from detecting the special flag byte in user data e.g. whenever the sender's data link layer encounters 5 consecutive ones in the data, it automatically stuffs 0 into the outgoing stream.|$|E
5000|$|Flag Field. The flag is used {{to perform}} {{high-level}} data link synchronization which indicates {{the beginning and end}} of the frame with the unique pattern 01111110. To ensure that the 01111110 pattern does not appear somewhere inside the frame, <b>bit</b> <b>stuffing</b> and destuffing procedures are used.|$|E
50|$|To ensure enough {{transitions}} to maintain synchronization, {{a bit of}} opposite polarity is inserted after five consecutive bits of the same polarity. This practice is called <b>bit</b> <b>stuffing,</b> and is necessary due to the non-return to zero (NRZ) coding used with CAN. The stuffed data frames are destuffed by the receiver.|$|E
30|$|The {{experiments}} {{also provide}} evidence for hypothesis 2 and the fault containment of the CAN router. At each CAN port messages are blocked where value or timing failures are detected by the CAN controller or the CIS’ CPU. In contrast to a bus-based system, no faulty messages or error frames are relayed by the CAN router. Thus, faulty messages do not cause inaccessibility times (e.g., due to <b>bit</b> errors, <b>stuffing</b> errors, CRC errors, form errors and acknowledgment errors) as described for bus-base systems in [26].|$|R
5000|$|Another critic {{from the}} same paper said that {{although}} the play [...] "had... some holes in its... story big enough to sink the entire cast and author combined, it came off {{as one of the}} finest bits of Australian drama from the A.B.C.'s Sydney studios... an absorbing <b>bit</b> of <b>stuff.</b> It plunged straight into the centre of the story with a minimum of preamble, the cast all turned in workmanlike performances, and action and suspense (even with those implausible holes) was sustained to the last." ...|$|R
50|$|Note {{that the}} signal on the VHF carrier is NRZI encoded and uses bit-stuffing to avoid unintentional stop-flags which may {{otherwise}} {{occur in the}} data. As such, the raw bits must first be decoded, and the <b>stuffing</b> <b>bits</b> removed, {{to arrive at the}} actual usable message format described above.|$|R
50|$|Flag - The {{value of}} the flag is always 0x7E. In {{order to ensure that}} the bit pattern of the frame {{delimiter}} flag does not appear in the data field of the frame (and therefore cause frame misalignment), a technique known as <b>Bit</b> <b>stuffing</b> is used by both the transmitter and the receiver.|$|E
5000|$|In SDLC the {{transmitted}} bit sequence [...] "01111110" [...] containing six adjacent 1 bits is the Flag byte. <b>Bit</b> <b>stuffing</b> {{ensures that}} this pattern can never occur in normal data, {{so it can}} be used as a marker for the beginning and end of frame without any possibility of being confused with normal data.|$|E
50|$|<b>Bit</b> <b>stuffing</b> {{does not}} {{ensure that the}} payload is intact (i.e. not {{corrupted}} by transmission errors); it is merely a way of attempting {{to ensure that the}} transmission starts and ends at the correct places. Error detection and correction techniques are used to check the frame for corruption after its delivery and, if necessary, the frame will be re-sent.|$|E
6000|$|... "That's {{better than}} {{speaking}} soft and letting things go the wrong way, I reckon, isn't it? If I wasn't sharp with him he'd sell every <b>bit</b> o' <b>stuff</b> i' th' yard and {{spend it on}} drink. I know there's a duty {{to be done by}} my father, but it isn't my duty to encourage him in running headlong to ruin. And what has Seth got to do with it? The lad does no harm as I know of. But leave me alone, Mother, and let me get on with the work." ...|$|R
40|$|Abstract – In this paper, {{we develop}} an indoor {{localization}} device which embeds localization information into indoor light-emitting-diodes (LED) lighting systems. The key idea of our device {{is the use}} of the newly proposed “bit stuffing method”. Through the use of <b>stuff</b> <b>bits,</b> our device is able to measure signal strengths even in transient states, which prohibits interference between lighting signals. The <b>stuff</b> <b>bits</b> also scatter the parts of the signal where the LED is turned on, thus provides quality indoor lighting. Additionally, for the indoor localization system based on RSSI and TDM to be practical, we propose methods for the control of LED lamps and compensation of received signals. The effectiveness of the proposed scheme is validated through experiments with a low-cost implementation including an indoor navigation task...|$|R
40|$|The {{universal}} {{serial bus}} (USB) transceiver macro cell interface (UTMI) is a two wire, bi-directional serial bus interface. UTMI consists of transmitting and receiving sections, in which the transmitter of the UTMI sends data to different USB devices through D+ and D- lines whereas the receiver gets data on the same lines. UTMI {{is one of the}} important functional blocks of USB controller, which can transmit and receive data to or from USB devices. There are three functional blocks present in USB controller; those are Serial Interface Engine (SIE), UTMI and Device Specific Logic (DSL). The parallel data from SIE is taken into the transmit hold register and this data is sent to transmit shift register from where the data is converted serially. This serial data is <b>bit</b> <b>stuffed</b> to perform data transitions for clock recovery and NRZI (1) encoding. Then the encoded data is sent on to the serial bus. When the data is received on the serial bus, it is decoded, bit unstuffed and is sent to receive shift register. After the shift register is full, the Data is sent to receive hold register. This presentation reveals the FPGA implementation of UTMI transmission rate providing with USB 2. 0 specifications. Further UTMI has been designed by using VHDL code and simulated, synthesized and programmed to the targeted Spartan family of FPGA in th...|$|R
