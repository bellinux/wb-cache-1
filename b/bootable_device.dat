16|20|Public
25|$|When a PC {{is powered}} on its BIOS follows the {{configured}} boot {{order to find}} a <b>bootable</b> <b>device.</b> This can be a harddisk, floppy, CD/DVD, network connection, USB-device, etc. depending on the BIOS. In {{the case of a}} floppy the BIOS interprets its boot sector (first sector) as code, for NTLDR this could be a NTLDR boot sector looking for the ntldr file on the floppy. For a harddisk the code in the Master Boot Record (first sector) determines the active partition. The code in the boot sector of the active partition could then be again a NTLDR boot sector looking for ntldr in the root directory of this active partition. In a more convoluted scenario the active partition can contain a Vista boot sector for the newer Vista boot manager with an {ntldr} entry pointing to another partition with a NTLDR boot sector.|$|E
50|$|The {{device was}} created by {{software}} engineers and entrepreneurs Marty Algire and Corey Velan. The FixMeStick was designed as an external <b>bootable</b> <b>device</b> that allows it to remove malware {{that could not be}} removed from within an operating system.|$|E
5000|$|... xOSL (meaning Extended Operating System Loader) is {{the name}} of a bootloader, which is a program product class that {{launches}} operating systems from a <b>bootable</b> <b>device</b> such as a hard disk or floppy drive. xOSL was originally developed by Geurt Vos.|$|E
2500|$|Intel Macs can boot in two ways: {{directly}} via EFI, or in a [...] "legacy" [...] BIOS compatibility mode. For multibooting, {{holding down}} [...] "Option" [...] gives {{a choice of}} <b>bootable</b> <b>devices,</b> while the rEFInd bootloader is commonly used for added configurability.|$|R
50|$|The {{interface}} devices are also defined with subclass descriptors. The subclass descriptor {{is used to}} declare a <b>device</b> <b>bootable.</b> A boot <b>device</b> meets a minimum adherence to a basic protocol and will be recognized by a computer's BIOS.|$|R
5000|$|The Master Boot Record of <b>bootable</b> storage <b>devices</b> {{on almost}} all IA-32 IBM PC compatibles has {{a code of}} [...] as its last two bytes.|$|R
50|$|Bootable Mac OS X CD/DVDs are {{included}} with {{programs such as}} Drive Genius, DiskWarrior, FileSalvage, CopyCatX, and other software utilities. The bootable DVD used for the Mac OS X installer disc cannot be used as it lacks libraries required to create a <b>bootable</b> <b>device.</b>|$|E
5000|$|The {{behavior}} if the BIOS {{does not}} find a <b>bootable</b> <b>device</b> has varied as personal computers developed. The original IBM PC and XT had Microsoft Cassette BASIC in ROM, and if no <b>bootable</b> <b>device</b> was found, ROM BASIC was started by calling INT 18h. Therefore, barring a hardware failure, an original IBM PC or XT would never fail to boot, either into BASIC or from disk (or through an option ROM). One model of the original IBM PC was available with no disk drive; a cassette recorder could be attached via the cassette port on the rear, for loading and saving BASIC programs to tape. Since few programs used BASIC in ROM, clone PC makers left it out; then a computer that failed to boot from a disk would display [...] "No ROM BASIC" [...] and halt (in response to INT 18h).|$|E
50|$|The FixMeStick is a {{bootable}} Linux based {{device that}} uses malware scanners by Kaspersky, Sophos, and Avira. Since the FixMeStick is a <b>bootable</b> <b>device</b> {{that runs on}} its own operating system, {{it is designed to}} remove malware that could not be removed from within an operating system and the FixMeStick program is not installed on the computer. The FixMeStick also updates its malware definitions via an internet connection each time it runs a scan.|$|E
50|$|ATAPI devices with {{removable}} media, {{other than}} CD and DVD drives, {{are classified as}} ARMD (ATAPI Removable Media Device) and can appear as either a super-floppy (non-partitioned media) or a hard drive (partitioned media) to the operating system. These can be supported as <b>bootable</b> <b>devices</b> by a BIOS complying with the ATAPI Removable Media Device BIOS Specification, originally developed by Compaq Computer Corporation and Phoenix Technologies. It specifies provisions in the BIOS of a personal computer to allow the computer to be bootstrapped from devices such as Zip drives, Jaz drives, SuperDisk (LS-120) drives, and similar devices.|$|R
50|$|Syslinux is {{a common}} program to make a <b>bootable</b> USB storage <b>device.</b>|$|R
50|$|A modern PC is {{configured}} {{to attempt}} to boot from various devices in a certain order. If a computer is not booting from the device desired, such as the floppy drive, the user may have to enter the BIOS setup function by pressing a special key when the computer is first turned on (such as Delete, F1, F2, F10 or F12), and then changing the boot order. More recent BIOSes permit the interruption of {{the final stage of}} the boot process by pressing a function key (usually F11). This results in a list of <b>bootable</b> <b>devices</b> being presented, from which a selection may be made.|$|R
50|$|To boot {{the system}} from the DasBoot device, the user starts their Mac with the 'Option' (sometimes called 'Alt') key held down. This will display a startup screen {{that allows them to}} select which <b>bootable</b> <b>device</b> they would like to start the system from. They then select the DasBoot device and the system will start up as normal. A DasBoot {{interface}} will appear once the system boots and allow the user to select the installed application(s) they would like to run.|$|E
50|$|While few {{companies}} build MMC slots into devices today (SD cards are more common), the embedded card (eMMC) is still {{widely used in}} the industry as a primary means of integrated storage in portable devices. It provides a low-cost flash memory system with a built-in controller that can reside inside an Android or Windows phone or low-cost PC and appear to its host as a <b>bootable</b> <b>device,</b> {{in lieu of a}} more expensive form of solid-state storage, like the traditional solid-state drive.|$|E
50|$|After {{initializing}} required hardware, the BIOS {{goes through}} a pre-configured list of non-volatile storage devices ("boot device sequence") until it finds one that is bootable. A <b>bootable</b> <b>device</b> is defined as {{one that can be}} read from, and where the last two bytes of the first sector contain the little-endian word AA55h, found as byte sequence 55h, AAh on disk (also known as the MBR boot signature), or where it is otherwise established that the code inside the sector is executable on x86 PCs.|$|E
50|$|NAS4Free is installable {{on almost}} any boot media {{including}} LiveCD optionally {{with a small}} USB flash drive for config storage if necessary, both for x86-64 and x86-32 computer platforms up to version 10.3. As of version 11.0, NAS4Free no longer supports x86-32, but version 10.3 is still getting updates. NAS4Free can be installed on Compact Flash, USB flash drive, SSD, Hard drive or other <b>bootable</b> <b>devices,</b> and supports advanced formatted drives using 4kb sectors. It can be booted from LiveCD or LiveUSB. The software distribution is currently distributed as in ISO image (.iso, ~370MB) or USB flash drive image (.img, ~320MB) format, and in source form.|$|R
50|$|In {{most modern}} BIOSes, the boot {{priority}} order of all potentially <b>bootable</b> <b>devices</b> can be freely configured {{by the user}} through the BIOS configuration utility. In older BIOSes, limited boot priority options are selectable; in the earliest BIOSes, a fixed priority scheme was implemented, with floppy disk drives first, fixed disks (i.e. hard disks) second, and typically no other boot devices supported, subject to modification of these rules by installed option ROMs. The BIOS in an early PC also usually would only boot from the first floppy disk drive or the first hard disk drive, {{even if there were}} two drives of either type installed. All more advanced boot priority sequences evolved as incremental improvements on this basic system.|$|R
50|$|FFNK has {{partnered with}} the Human Rights Foundation on {{activities}} to get liberty-oriented materials {{across the border}} and into North Korea since 2013. Drops have included offline copies of the Korean Wikipedia on a <b>bootable</b> USB memory <b>device.</b>|$|R
50|$|When a {{computer}} is turned on, BIOS finds the configured primary <b>bootable</b> <b>device</b> (usually the computer's hard disk) and loads and executes the initial bootstrap program from the {{master boot record}} (MBR). The MBR is the first sector of the hard disk, with zero as its offset (sectors counting starts at zero). For a long time, {{the size of a}} sector has been 512 bytes, but since 2009 there are hard disks available with a sector size of 4096 bytes, called Advanced Format disks. , such hard disks are still accessed in 512-byte sectors, by utilizing the 512e emulation.|$|E
50|$|Once the BIOS {{has found}} a <b>bootable</b> <b>device</b> it loads the boot sector to linear address 7C00h (usually segment:offset 0000h:7C00h, but some BIOSes erroneously use 07C0h:0000h) and {{transfers}} execution to the boot code. In {{the case of a}} hard disk, this {{is referred to as the}} Master Boot Record (MBR) and is by definition not operating-system specific. The conventional MBR code checks the MBR's partition table for a partition set as bootable (the one with active flag set). If an active partition is found, the MBR code loads the boot sector code from that partition, known as Volume Boot Record (VBR), and executes it.|$|E
5000|$|At {{start-up}} Kickstart {{attempts to}} boot from a <b>bootable</b> <b>device</b> (typically, a floppy disk or hard disk drive). In {{the case of}} a floppy, the system reads the first two sectors of the disk (the bootblock), and executes any boot instructions stored there. Normally this code passes control back to the OS (invoking AmigaDOS and the GUI) and using the disk as the system boot volume. Any such disk, regardless of the other contents of the disk, was referred to as a [...] "Boot disk" [...] or [...] "bootable disk". A bootblock could be added to a blank disk by use of the [...] command. Some entertainment software contained custom bootblocks. This allowed an application, game or demo to take control of memory and resources, effectively disabling AmigaOS.|$|E
50|$|Like {{a normal}} Linux distribution, the project {{releases}} prebuilt ISO images which can run under live mode or install to the harddisks {{of the target}} devices. Since the 4.4-r2 the project also releases efi_img {{which could be used}} to create a live USB which is <b>bootable</b> from UEFI <b>devices.</b>|$|R
50|$|It is {{intended}} to allow enterprise administrators to provide users with an imaged version of Windows that reflects the corporate desktop. Creation of Windows To Go drives is not officially supported by non-Enterprise (or Education) Windows 8.1 editions; however, Enterprise and Education versions of Windows 10 are supported. Some information has been published describing various ways to install Windows To Go using any version of Windows 8.x and 10 and any <b>bootable</b> USB <b>device.</b> Reported restrictions of some unofficial versions include unavailability of Bitlocker protection, no access to the Windows Store, and inability to boot on both BIOS and UEFI machines.|$|R
50|$|Furthermore, {{whatever}} {{is stored in}} the first sector of a floppy diskette, USB device, hard disk or any other <b>bootable</b> storage <b>device,</b> {{is not required to}} immediately load any bootstrap code for an OS, if ever. The BIOS merely passes control to whatever exists there, as long as the sector meets the very simple qualification of having the boot record signature of 0x55, 0xAA in its last two bytes. This is why it's easy to replace the usual bootstrap code found in an MBR with more complex loaders, even large multi-functional boot managers (programs stored elsewhere on the device which can run without an operating system), allowing users a number of choices in what occurs next. With this kind of freedom, abuse often occurs in the form of boot sector viruses.|$|R
5000|$|The BIOS {{proceeds}} to test each device sequentially until a <b>bootable</b> <b>device</b> is found, {{at which time}} the BIOS transfers control to the loaded sector with a jump instruction to its first byte at address [...] (exactly 1 KiB below the 32 KiB mark); see MBR invocation and VBR invocation. (This location is one reason that an IBM PC requires at least 32 KiB of RAM {{in order to be}} equipped with a disk system; with 31 KiB or less, {{it would be impossible to}} boot from any disk, removable or fixed, using the BIOS boot protocol.) Most, but not all, BIOSes load the drive number (as used by INT 13h) of the boot drive into CPU register DL before jumping to the first byte of the loaded boot sector.|$|E
5000|$|When a PC {{is powered}} on its BIOS follows the {{configured}} boot {{order to find}} a <b>bootable</b> <b>device.</b> This can be a harddisk, floppy, CD/DVD, network connection, USB-device, etc. depending on the BIOS. In {{the case of a}} floppy the BIOS interprets its boot sector (first sector) as code, for NTLDR this could be a NTLDR boot sector looking for the [...] file on the floppy. For a harddisk the code in the Master Boot Record (first sector) determines the active partition. The code in the boot sector of the active partition could then be again a NTLDR boot sector looking for [...] in the root directory of this active partition. In a more convoluted scenario the active partition can contain a Vista boot sector for the newer Vista boot manager with an [...] entry pointing to another partition with a NTLDR boot sector.|$|E
30|$|Finally, the {{benefits}} of cooperative execution using the CPU and Intel Phi 7120 P are assessed in Section 6.7. This evaluation has not included the Intel Phi 7250 {{because it is a}} standalone <b>bootable</b> <b>device</b> and, as such, it is not attached to a CPU.|$|E
50|$|SpinRite is a {{computer}} program for scanning magnetic data storage devices such as hard disks, recovering data from them and refreshing their surfaces. The first version was released in 1987 by Steve Gibson. Version 6.0, still current , was released in 2004. SpinRite is run from a bootable medium (floppy disc, optical disc, <b>bootable</b> external storage <b>device</b> such as a USB stick) on a PC-compatible computer. Spinrite uses its own operating system and ignores any boot loader or file system structure that {{may be on the}} drive being examined.|$|R
40|$|Remote {{laboratories}} are laboratories {{where the}} hardware devices are accessible through the Internet 24 h {{a day for}} running experiments on physical processes. These laboratories are commonly used as complementary tools in engineering education, allowing students to integrate theoretical notions with practical experiments without the necessity of being physically present inside a laboratory. The increased availability of experiments in a remote laboratory is certainly an advantage for students, but it implies an increase of the probability of hardware and software failures. Thus, maintaining physical processes in a remote laboratory may become a heavy task for laboratory administrators. Remote laboratory inefficiency due to hardware and software maintenance can be certainly reduced if the time that is required for software reinstallation and/or upgrade is kept as short as possible. In this paper, a technique based {{on the use of}} a <b>bootable</b> (live) <b>device</b> on the server side of a remote laboratory is reported. This solution, which, in principle, can be used in almost any remote laboratory, allows an administrator to greatly reduce the time that is needed to fix a hardware/software failure, as well as to add a new process to the laboratory in a faster way. Moreover, the use of such a tool will also increase the reliability of the entire laboratory. The application of the proposed method to the "Automatic Control Telelab", which is a remote laboratory that was developed at the University of Siena, is also described in detail...|$|R
500|$|Rogen {{predicted}} that the film would make its way to North Korea, stating that [...] "we were told {{one of the reasons}} they're so against the movie is that they're afraid it'll actually get into North Korea. They do have bootlegs and stuff. Maybe the tapes will make their way to North Korea and cause a revolution." [...] Business Insider reported via Free North Korea Radio that there was high demand for bootleg copies of the film in North Korea. The South Korean human rights organizations Fighters for a Free North Korea and Human Rights Foundation, largely made up of North Korean defectors, planned to distribute DVD copies of The Interview via balloon drops. The groups had previously air-dropped offline copies of the Korean Wikipedia into North Korea on a <b>bootable</b> USB memory <b>device.</b> The balloon drop was postponed after the North Korean government referred to the plan as a de facto [...] "declaration of war." ...|$|R
40|$|The paper {{describes}} how can be LiveCD (Bootable CD) used for geoinformatics distance learning. We have prepared one LiveCD with basic software for learning geoinformatics {{and we have}} some feedback from users and teachers. The paper should evaluate this feedback. LiveCD is a CD-ROM, that {{can be used as a}} <b>bootable</b> <b>device.</b> After booting from the CD, the user can access all resources compiled to the CD. There are operating system (usually based on GNU/Linux) and (user, desktop) software installed and configured to be used directly after boot. Our CD named GIS´ ak LiveCD contains basic GIS software such as UMN MapServer, GRASS, Quantum GIS, Thuban, JUMP, GPS Drive, Blender and we work on other software packages such as MapLab for UMN MapServer, PostGIS, GeoNetwork Open Source, CatMDEdit, gvSIG, uDIG. GIS´ ak LiveCD contains set of spatial data from the Czech Republic. Main part of the CD are tutorials for GIS software. CD is open for other e-learning materials. Now we have about 20 students using our LiveCD and few other users that are not curently our students. The paper should show Pros & Cons of the LiveCD usage for a distance learning...|$|E
5000|$|The BIOS selects {{candidate}} boot devices {{using information}} collected by POST and configuration information from EEPROM, CMOS RAM or, {{in the earliest}} PCs, DIP switches. Following the boot priority sequence in effect, BIOS checks each device {{in order to see}} if it is bootable. For a disk drive or a device that logically emulates a disk drive, such as a USB flash drive or perhaps a tape drive, to perform this check the BIOS attempts to load the first sector (boot sector) from the disk into RAM at memory address [...] If the sector cannot be read (due to a missing or unformatted disk, or due to a hardware failure), the BIOS considers the device unbootable and proceeds to check the next device. If the sector is read successfully, some BIOSes will also check for the boot sector signature 0x55 0xAA in the last two bytes of the sector (which is 512 bytes long), before accepting a boot sector and considering the <b>device</b> <b>bootable.</b>|$|R
5000|$|Rogen {{predicted}} that the film would make its way to North Korea, stating that [...] "we were told {{one of the reasons}} they're so against the movie is that they're afraid it'll actually get into North Korea. They do have bootlegs and stuff. Maybe the tapes will make their way to North Korea and cause a revolution." [...] Business Insider reported via Free North Korea Radio that there was high demand for bootleg copies of the film in North Korea. The South Korean human rights organizations Fighters for a Free North Korea and Human Rights Foundation, largely made up of North Korean defectors, planned to distribute DVD copies of The Interview via balloon drops. The groups had previously air-dropped offline copies of the Korean Wikipedia into North Korea on a <b>bootable</b> USB memory <b>device.</b> The balloon drop was postponed after the North Korean government referred to the plan as a de facto [...] "declaration of war." ...|$|R
40|$|Abstract—Remote {{laboratories}} are laboratories {{where the}} hardware devices are accessible through the Internet 24 h {{a day for}} running experiments on physical processes. These laboratories are commonly used as complementary tools in engineering education, allowing students to integrate theoretical notions with practical experiments without the necessity of being physically present inside a laboratory. The increased availability of experiments in a remote laboratory is certainly an advantage for students, but it implies an increase of the probability of hardware and software failures. Thus, maintaining physical processes in a remote laboratory may become a heavy task for laboratory administrators. Remote laboratory inefficiency due to hardware and software maintenance can be certainly reduced if the time that is required for software reinstallation and/or upgrade is kept as short as possible. In this paper, a technique based {{on the use of}} a <b>bootable</b> (live) <b>device</b> on the server side of a remote laboratory is reported. This solution, which, in principle, can be used in almost any remote laboratory, allows an administrator to greatly reduce the time that is needed to fix a hardware/software failure, as well as to add a new process to the laboratory in a faster way. Moreover, the use of such a tool will also increase the reliability of the entire laboratory. The application of the proposed method to the “Automatic Control Telelab, ” which is a remote laboratory that was developed at the University of Siena, is also described in detail. Index Terms—Bootable live device, distance learning, remote laboratories...|$|R
40|$|Recent {{development}} of the Caltech data acquisition system installed in 1981, which runs on a VAX- 11 / 750, a Peritek Q-bus network, LSI- 11 s, and CAMAC, is described. In this system, the DEC VMS and RT- 11 operating systems are supported on the VAX "host" and LSI- 11 "front-end" computers by a VMS device driver and network host program, and a <b>bootable</b> RT- 11 <b>device</b> driver. Network "utility" and "control" programs provide general purpose support for communication between front-end and host software. Data acquisition software tools are provided for writing programs to run nuclear physics experiments. A system similar to Caltech's was installed at the University of Rochester in 1982. The network has been tested for speed and real-time response. After including all software overhead required by data acquisition, {{it was found that}} the system could transfer buffers and acknowledge their receipt at a net speed of 127 KB per second with a 35 % load on the host computer. The network software is currently being rehosted on Ethernet hardware at Caltech in a multiple host - many front-end computer configuration. Compatibility with the current Peritek network software will be maintained...|$|R

