162|0|Public
5|$|COBOL's syntax {{is usually}} {{described}} {{with a unique}} metalanguage using braces, brackets, bars and underlining. The metalanguage was developed for the original COBOL specifications. Although <b>Backus–Naur</b> <b>form</b> did exist at the time, the committee had not heard of it.|$|E
25|$|The {{vertical}} bars ("|") in {{the above}} list are not separators {{in the sense of}} the <b>Backus-Naur</b> <b>form,</b> but are part of the format. Multiple identifiers can be concatenated, also separated by vertical bars.|$|E
25|$|In linguistics, {{some authors}} {{use the term}} phrase {{structure}} grammar to refer to context-free grammars, whereby phrase-structure grammars are distinct from dependency grammars. In computer science, a popular notation for context-free grammars is <b>Backus–Naur</b> <b>form,</b> or BNF.|$|E
500|$|The COBOL {{community}} {{has always been}} isolated from the computer science community. No academic computer scientists participated {{in the design of}} COBOL: all of those on the committee came from commerce or government. [...] Computer scientists at the time were more interested in fields like numerical analysis, physics and system programming than the commercial file-processing problems which COBOL development tackled. Jean Sammet attributed COBOL's unpopularity to an initial [...] "snob reaction" [...] due to its inelegance, the lack of influential computer scientists participating in the design process and a disdain for business data processing. The COBOL specification used a unique [...] "notation", or metalanguage, to define its syntax rather than the new <b>Backus–Naur</b> <b>form</b> because few committee members had heard of it. This resulted in [...] "severe" [...] criticism.|$|E
2500|$|An {{important}} landmark of the Vedic {{period was}} the work of Sanskrit grammarian, [...] (c. 520–460 BCE). His grammar includes early use of Boolean logic, of the null operator, and of context free grammars, and includes a precursor of the <b>Backus–Naur</b> <b>form</b> (used in the description programming languages).|$|E
2500|$|The MKDE was {{retained}} in Pervasive.SQL 7. However, {{due to the}} new component architecture's dynamic binding, the internal architecture was modified. The application using Btrieve calls a services manager which then searches through various configured directories for specific encoded filename. The file name loaded for Btrieve files in <b>Backus-Naur</b> <b>form</b> is: ...|$|E
2500|$|Context-free grammars are {{represented}} {{as a set of}} rules inspired from attempts to model natural languages. The rules are absolute and have a typical syntax representation known as <b>Backus–Naur</b> <b>form.</b> The production rules consist of terminal [...] and non-terminal [...] symbols and a blank [...] may also be used as an end point. [...] In the production rules of CFG and PCFG the left side has only one nonterminal whereas the right side can be any string of terminal or nonterminals. In PCFG nulls are excluded. An example of a grammar: ...|$|E
2500|$|Block {{structure}} was introduced into computer programming languages by the Algol project (1957–1960), which, as a consequence, also featured a context-free grammar {{to describe the}} resulting Algol syntax. This became a standard feature of computer languages, and the notation for grammars used in concrete descriptions of computer languages {{came to be known}} as <b>Backus–Naur</b> <b>form,</b> after two members of the Algol language design committee. The [...] "block structure" [...] aspect that context-free grammars capture is so fundamental to grammar that the terms syntax and grammar are often identified with context-free grammar rules, especially in computer science. Formal constraints not captured by the grammar are then considered to be part of the [...] "semantics" [...] of the language.|$|E
50|$|Augmented <b>Backus-Naur</b> <b>form</b> (ABNF) and Routing <b>Backus-Naur</b> <b>form</b> (RBNF) are {{extensions}} {{commonly used}} to describe Internet Engineering Task Force (IETF) protocols.|$|E
5000|$|BNF (Backus normal form, or <b>Backus-Naur</b> <b>form)</b> and EBNF (extended <b>Backus-Naur</b> <b>form)</b> are the {{two main}} {{notation}} techniques for context-free grammars.|$|E
50|$|Many {{extensions}} and {{variants of}} the original Backus-Naur notation are used; some are exactly defined, including extended <b>Backus-Naur</b> <b>form</b> (EBNF) and augmented <b>Backus-Naur</b> <b>form</b> (ABNF).|$|E
50|$|A metasyntax {{describes}} the allowable {{structure and composition}} of phrases and sentences of a metalanguage, {{which is used to}} describe either a natural language or a computer programming language. Some of the widely used formal metalanguages for computer languages are <b>Backus-Naur</b> <b>form</b> (BNF), extended <b>Backus-Naur</b> <b>form</b> (EBNF), Wirth syntax notation (WSN), and augmented <b>Backus-Naur</b> <b>form</b> (ABNF).|$|E
50|$|We {{specify the}} syntax of Janus using <b>Backus-Naur</b> <b>form.</b>|$|E
50|$|Extended <b>Backus-Naur</b> <b>form</b> grammar syntax. (Supports the *, ? and + operators).|$|E
5000|$|The {{following}} <b>Backus-Naur</b> <b>form</b> example {{illustrates the}} interpreter pattern. The grammar ...|$|E
50|$|In {{computer}} science, extended <b>Backus-Naur</b> <b>form</b> (EBNF) is {{a family}} of metasyntax notations, any {{of which can be}} used to express a context-free grammar. EBNF is used to make a formal description of a formal language which can be a computer programming language. They are extensions of the basic <b>Backus-Naur</b> <b>form</b> (BNF) metasyntax notation.|$|E
50|$|Niklaus Wirth defined {{extended}} <b>Backus-Naur</b> <b>form</b> (EBNF), {{a refined}} version of BNF, {{in the early}} 1970s for PL/0. Augmented <b>Backus-Naur</b> <b>form</b> (ABNF) is another variant. Both EBNF and ABNF are widely used to specify the grammar of programming languages, as the inputs to parser generators, and in other fields such as defining communication protocols.|$|E
5000|$|... an {{extended}} <b>Backus-Naur</b> <b>form</b> (EBNF) {{to specify the}} syntax of a language; ...|$|E
5000|$|GOLD grammars {{are based}} {{directly}} on <b>Backus-Naur</b> <b>form,</b> regular expressions, and set notation.|$|E
5000|$|<b>Backus-Naur</b> <b>form</b> (A {{compact form}} for writing the {{productions}} of a context-free grammar.) ...|$|E
5000|$|The syntax of a urn: scheme URI is {{represented}} in Augmented <b>Backus-Naur</b> <b>form</b> as: ...|$|E
5000|$|In {{computer}} science, augmented <b>Backus-Naur</b> <b>form</b> (ABNF) is a metalanguage {{based on}} <b>Backus-Naur</b> <b>form</b> (BNF), but consisting {{of its own}} syntax and derivation rules. The motive principle for ABNF is to describe a formal system of a language {{to be used as}} a bidirectional communications protocol. It is defined by Internet Standard 68 ("STD 68", type case sic), which [...] is RFC 5234, and it often serves as the definition language for IETF communication protocols.|$|E
50|$|The {{definition}} of the Charm grammar in <b>Backus-Naur</b> <b>form</b> along with descriptive examples of Charm constructs is defined on the Charm language page.|$|E
50|$|Formal {{ways for}} {{describing}} the syntax of the communications are Abstract Syntax Notation One (an ISO standard) or Augmented <b>Backus-Naur</b> <b>form</b> (an IETF standard).|$|E
5000|$|The grammar for ALGOL 68 {{is officially}} in the {{two-level}} Van Wijngaarden grammar, but a subset {{has been done}} in the one-level <b>Backus-Naur</b> <b>form,</b> compare: ...|$|E
5000|$|... yo-yo parser for van Wijngaarden grammars with example grammars for expressions, eva, sal and Pascal (the actual ISO 7185 {{standard}} for Pascal uses extended <b>Backus-Naur</b> <b>form).</b>|$|E
5000|$|This {{definition}} {{can also}} be written as a formal grammar in <b>Backus-Naur</b> <b>form,</b> provided the set of variables is finite:Using this grammar, the sequence of symbols ...|$|E
50|$|Lojban texts can be parsed just as {{texts in}} {{programming}} languages are by using formal grammars such as PEG, YACC, <b>Backus-Naur</b> <b>form.</b> There are several parsers available.|$|E
50|$|Coco/R is a {{compiler}} generator that takes an L-attributed Extended <b>Backus-Naur</b> <b>Form</b> (EBNF) grammar of a source language and generates a scanner and a parser for that language.|$|E
50|$|In <b>Backus-Naur</b> <b>form,</b> an {{expression}} consists of sequences of symbols and/or sequences separated by '|', indicating a choice, the whole being a possible substitution for the symbol on the left.|$|E
50|$|The {{latest version}} of the {{language}} is PDDL3.1. The BNF (<b>Backus-Naur</b> <b>Form)</b> syntax definition of PDDL3.1 can be found among {{the resources of the}} IPC-2011 homepage or the IPC-2014 homepage.|$|E
5000|$|Pāṇini, {{the ancient}} Hindu grammarian who {{formulated}} the 3959 rules of Sanskrit morphology. The <b>Backus-Naur</b> <b>form</b> syntax {{used to describe}} modern programming languages have significant similarities to Pāṇini's grammar rules.|$|E
50|$|We {{take these}} {{concepts}} for granted today, but theywere novel and even controversial in 1977. Wirth later incorporated someof the concepts (with a different syntax and notation) into extended <b>Backus-Naur</b> <b>form.</b>|$|E
5000|$|... a mathematically exact notation, <b>Backus-Naur</b> <b>form</b> (BNF), {{was used}} to {{describe}} the language's syntax. Nearly all subsequent programming languages have used a variant of BNF to describe the context-free portion of their syntax.|$|E
50|$|The {{vertical}} bars ("|") in {{the above}} list are not separators {{in the sense of}} the <b>Backus-Naur</b> <b>form,</b> but are part of the format. Multiple identifiers can be concatenated, also separated by vertical bars.|$|E
5000|$|Consider the simply typed lambda calculus, where types τ can be basic types (α), {{function}} types (→), or products (×), {{given by}} the following <b>Backus-Naur</b> <b>form</b> grammar (→ associating to the right, as usual): ...|$|E
