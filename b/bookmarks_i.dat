4|3|Public
50|$|The same source made it {{evident that}} she {{received}} V-letters by the bale. They were always torn into strips like <b>bookmarks.</b> <b>I</b> used occasionally to pluck myself a bookmark in passing. Remember and miss you and rain and please write and damn and goddamn were the words that recurred most often on these slips; those, and lonesome and love.|$|E
40|$|Read {{this book}} to learn answers to {{questions}} like these: How do I load six Web pages at once? Now that I've loaded six pages, how do I best work with them? What are all the keyboard shortcuts for working with tabs? How do I bookmark a page I want to return to? How do I import Firefox <b>bookmarks?</b> <b>I</b> have 1, 042 bookmarks. Is there a sensible way to search or organize them? What are the default keyboard shortcuts for the bookmarks bar? Can I search for text on the currently active Web page? How do I erase my history to prevent someone snooping through it? Where does Safari store Web site user nam...|$|E
40|$|We {{introduce}} the novel concept of knowledge states. The knowledge state {{approach can be}} used to construct competitive randomized online algorithms and study the trade-off between competitiveness and memory. Many well-known algorithms can be viewed as knowledge state algorithms. A knowledge state consists of a distribution of states for the algorithm, together with a work function which approximates the conditional obligations of the adversary. When a knowledge state algorithm receives a request, it then calculates one or more “subsequent” knowledge states, together with a probability of transition to each. The algorithm uses randomization to select one of those subsequents to be the new knowledge state. We apply this method to randomized k-paging. The optimal minimum competitiveness of any randomized online algorithm for the k-paging problem is the kth harmonic number, Hk = ∑k i= 1 1 i. Existing algorithms which achieve that optimal competitiveness must keep <b>bookmarks,</b> <b>i.</b> e., memory of the names of pages not in the cache. An Hk-competitive randomized algorithm for that problem which uses O(k) bookmarks is presented, settling an open question by Borodin and El-Yaniv. In the special cases where k = 2 and k = 3, solutions are given using only one and two bookmarks, respectively...|$|E
40|$|Social {{bookmarking}} websites allow {{users to}} store, organize, and search bookmarks of web pages. Users {{of these services}} can annotate their bookmarks by using informal tags and other metadata, such as titles, descriptions, etc. In this paper, {{we focus on the}} task of item recommendation for social <b>bookmarking</b> websites, <b>i.</b> e. predicting which unseen bookmarks a user might like based on his or her profile. We examine how we can incorporate the tags and other metadata into a nearest-neighbor collaborative filtering (CF) algorithm, by replacing the traditional usage-based similarity metrics by tag overlap, and by fusing tag-based similarity with usage-based similarity. In addition, we perform experiments with content-based filtering by using the metadata content to recommend interesting items. We generate recommendations directly based on Kullback-Leibler divergence of the metadata language models, and we explore the use of this metadata in calculating user and item similarities. We perform our experiments on three data sets from tw...|$|R
40|$|Abstract — We {{propose a}} concept called “Small Knowledge” and a {{prototype}} system called “Small Knowledge Canvas” that enables users {{to collect and}} utilize fragmental knowledge, “Small Knowledge”. We find pieces of Small Knowledge in our daily life, such as a book that seems interesting, a phrase that might be used in ones writing, or a beautiful place to go. For the first step, though the concept is general, we limit the target for adopting this concept to the Web browsing environment. Small Knowledge {{can be regarded as}} an enhanced bookmark with personal context. We also propose a simple browsing model and context extraction algorithm for extracting personal context for Small Knowledge. Finally, we discuss the results of a user experiment of our prototype system. Index Terms—personal knowledge management, <b>bookmark,</b> visualization, context <b>I...</b>|$|R
40|$|Recently, {{malicious}} {{computer users}} have been compromising computers en masse and combining them to form coordinated botnets. The rise of botnets {{has brought the}} problem of home computers {{to the forefront of}} security. Home computer users commonly have insecure systems; these users do not have the knowledge, experience, and skills necessary to maintain a secure system. I take steps toward designing a socio-technical system that will hopefully help home computer users make better security decisions. Designing such a system requires additional knowledge before a successful system can be developed. First, more information is needed about the knowledge and skills that home computer users currently possess. I conducted an interview study of home computer users and identified eight distinct mental models of security threats; four are models of ``viruses,'' and four are models of ``hackers. '' The respondents in this study use the models to decide which security precautions should be used and which can be ignored. Second, to share information, users need an incentive to exert the time and effort required for sharing. I describe two mechanisms {{that can be used in}} social computing systems to encourage contribution. I illustrate the first mechanism, the side effect mechanism, by describing how it is used in a popular social <b>bookmarking</b> website. <b>I</b> also illustrate a design feature that is important when applying this mechanism: incentive alignment. The second mechanism that I describe is technically simple: set a minimum threshold and exclude users who don't contribute enough. I develop a theory of how users are likely to respond to such a mechanism and use that theory to characterize when such a mechanism should be used. Finally, I bring all of these findings together to suggest some preliminary design features for a socio-technical security system to help home computer users. While there are many unanswered questions, these design features can serve as a starting point for future work in the area...|$|R
40|$|Paging {{is one of}} the {{prominent}} problems in the field of on-line algorithms. While in the deterministic setting there exist simple and efficient strongly competitive algorithms, in the randomized setting a tradeoff between competitiveness and memory is still not settled. Bein et al. [4] conjectured that there exist strongly competitive randomized paging algorithms, using o(k) <b>bookmarks,</b> <b>i.</b> e. pages not in cache that the algorithm keeps track of. Also in [4] the first algorithm using O(k) bookmarks (2 k more precisely), Equitable 2, was introduced, proving in the affirmative a conjecture in [7]. We prove tighter bounds for Equitable 2, showing that it requires less than k bookmarks, more precisely ≈ 0. 62 k. We then give a lower bound for Equitable 2 showing that it cannot both be strongly competitive and use o(k) bookmarks. Nonetheless, we show that it can trade competitiveness for space. More precisely, if its competitive ratio is allowed to be (Hk + t), then it requires k/(1 + t) bookmarks. Our main result proves the conjecture that there exist strongly competitive paging algorithms using o(k) bookmarks. We propose an algorithm, denoted Partition 2, which is a variant of the Partition algorithm byMcGeoch and Sleator [13]. While classical Partition is unbounded in its space requirements, Partition 2 uses θ(k/ log k) bookmarks. Furthermore, we show that this result is asymptotically tight when the forgiveness steps are deterministic...|$|E

