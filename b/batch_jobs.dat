227|344|Public
25|$|<b>Batch</b> <b>jobs</b> are {{processed}} {{in the background}} on free computing power as it becomes available. Thus, <b>batch</b> <b>jobs</b> will often take longer than individually submitted jobs, but this is necessary to allow a fair distribution of computing resources to all Phyre2 users.|$|E
25|$|Freedman's {{graduate}} {{work at the}} University of Calgary had involved {{the development of a}} process migration subsystem for networks of Sun Microsystems computers. From 1992 - 1994, the company commercialized that work, developing the company's Load Balancer product, which was a versatile system for distributing <b>batch</b> <b>jobs</b> across the increasingly larger networks of computers emerging at that time. Freedman hired Theo de Raadt as FSA's first employee. De Raadt's programming and architecture competence have since been proven in his OpenBSD operating system project, but at the time FSA Corporation was his first job since graduating from the University of Calgary. In January, 1994, the Load Balancer product line was sold to Unison Tymlabs, which needed a UNIX-based product line ahead of its IPO. Unison has since been absorbed via acquisition by IBM, and the load balancer product line is now sold by IBM.|$|E
50|$|<b>Batch</b> <b>Jobs</b> - A {{batch job}} is a job that executes in the background, {{independent}} of a terminal. A user at a terminal can be executing multiple <b>batch</b> <b>jobs,</b> {{and at the same}} time, be performing foreground and/or background operations in an interactive job.|$|E
5000|$|The nodes {{allocated}} to a <b>batch</b> <b>job</b> are used exclusively for that <b>batch</b> <b>job.</b>|$|R
5000|$|When a new <b>batch</b> <b>job</b> is submitted, the {{scheduler}} searches available nodes (Step.1). After the {{nodes and}} the estimated start time are {{allocated to the}} <b>batch</b> <b>job,</b> stage-in process starts (Step.2). The job waits until the estimated start time after stage-in process is finished. If the scheduler find the earlier start time than the estimated start time, it allocates the new start time to the <b>batch</b> <b>job.</b> This process is called [...] "Job Escalation" [...] (Step.3). When the estimated start time has arrived, the scheduler executes the <b>batch</b> <b>job</b> (Step.4). The scheduler terminates the <b>batch</b> <b>job</b> and starts stage-out process after the job execution is finished or the declared elapsed time is over (Step.5).To execute the <b>batch</b> <b>job,</b> the user logs into the login-server and submits the batch script to ES. And the user waits until the job execution is done. During that time, the user can see {{the state of the}} <b>batch</b> <b>job</b> using the conventional web browser or user commands. The node scheduling, the file staging and other processing are automatically processed by the system according to the batch script.|$|R
50|$|ISPF {{can also}} be run from a z/OS <b>batch</b> <b>job.</b>|$|R
50|$|Usually a {{batch job}} {{or group of}} related <b>batch</b> <b>jobs</b> (schedule/stream) runs to {{accomplish}} one or more business functions. These <b>batch</b> <b>jobs</b> run unattended and normally complete without any errors or issues. However, sometimes the batch job can have a break/interruption/abend/abort. There could be several reasons why a job could abend.|$|E
5000|$|...SINK* {{standard}} output (normally a terminal or for <b>batch</b> <b>jobs,</b> a printer); ...|$|E
5000|$|Batch queue - for schedulers {{that plan}} the {{execution}} of <b>batch</b> <b>jobs</b> ...|$|E
5000|$|... "History-Based <b>Batch</b> <b>Job</b> Scheduling on Workstation Clusters", Rothauser, Wespi, 1997 ...|$|R
5000|$|An IBM 1402 card reader/punch {{was used}} for <b>batch</b> <b>job</b> submission.|$|R
5000|$|... "History-Based <b>Batch</b> <b>Job</b> Scheduling on Workstation Clusters", Andreas Wespi, Ernst Rothauser ...|$|R
50|$|In early 1967 {{running on}} the single {{processor}} IBM S/360-67 at UM without virtual memory support, MTS was typically supporting 5 simultaneous terminal sessions and one batch job. In November 1967 after virtual memory support was added, MTS {{running on the}} same IBM S/360-67 was simultaneously supporting 50 terminal sessions and up to 5 <b>batch</b> <b>jobs.</b> In August 1968 a dual processor IBM S/360-67 replaced the single processor system, supporting roughly 70 terminal and up to 8 <b>batch</b> <b>jobs.</b> By late 1991 MTS at UM was running on an IBM ES/9000-720 supporting over 600 simultaneous terminal sessions and from 3 to 8 <b>batch</b> <b>jobs.</b>|$|E
5000|$|A {{straightforward}} {{command language}} {{that is the same}} for both terminal and <b>batch</b> <b>jobs.</b>|$|E
5000|$|...JOBQ: Job queue (used {{to queue}} up <b>batch</b> <b>jobs</b> to run in a subsystem).|$|E
5000|$|Can be run as <b>batch</b> <b>job</b> without GUI for {{converting}} reference files.|$|R
40|$|This {{document}} {{provides information}} to the Grid community on <b>batch</b> <b>job</b> scheduling of scientific/technical applications, also broadly {{referred to as the}} “core ” high performance computing (HPC) use case. It does not define any standards or technical recommendations. Distribution is unlimited. Copyright Notice Copyright © Open grid forum (2006 - 2007). All Rights Reserved. This document describes the set of use cases for <b>batch</b> <b>job</b> scheduling of scientific/technical applications, also broadly referred to as the core high performance computing (HPC) use case. A simple base case is defined that we expect to have universally implemented by all <b>batch</b> <b>job</b> scheduling clients and schedulers. Additional "Common Cases " are enumerated, which are anticipated to be applicable to at least two but not all <b>batch</b> <b>job</b> scheduling clients and schedulers. This Base Case and Common Cases will be used as a set of requirements for the forthcomin...|$|R
5000|$|The <b>batch</b> <b>job</b> is {{scheduled}} based on elapsed time instead of CPU time.|$|R
5000|$|...SOURCE* {{standard}} input (normally either a terminal or for <b>batch</b> <b>jobs,</b> the input queue); ...|$|E
50|$|Renato “Butch” Landingin, {{co-founder and}} chief {{technology}} officer, {{is the author}} of an open source application called Squishdot, written in Python and Zope. Squishdot is a news and publishing content management system used by KDE Dot News. He also authored the <b>Batch</b> <b>Jobs</b> Management Console (Batman-Con), a web-based application written in Grails (framework) to monitor batch runs of Spring Batch-based <b>batch</b> <b>jobs.</b>|$|E
50|$|<b>Batch</b> <b>jobs</b> are {{scheduled}} and run across different operating system platforms and business application environments.|$|E
25|$|IBM JCL uses {{a double}} slash to start each {{line in a}} <b>batch</b> <b>job</b> stream except for /* and /&.|$|R
5000|$|BatchPipes is a <b>batch</b> <b>job</b> {{processing}} utility {{designed for}} the MVS/ESA operating system, and all later incarnations - OS/390 and z/OS.|$|R
50|$|On IBM mainframes, BatchPipes is a <b>batch</b> <b>job</b> {{processing}} utility {{which runs}} under the MVS/ESA operating system and later versions - OS/390 and z/OS.|$|R
50|$|Portable Batch System, a {{computer}} software job scheduler that allocates network resources to <b>batch</b> <b>jobs.</b>|$|E
5000|$|In {{addition}} to the online functions CICS has several support programs that run as <b>batch</b> <b>jobs.</b>|$|E
5000|$|Batch {{engine for}} {{controlling}} large file transfers, <b>batch</b> <b>jobs,</b> execution of external scripts and other non-messaging based tasks.|$|E
5000|$|... {{set up a}} {{high-performance}} computing software stack, including software for <b>batch</b> <b>job</b> submission, parallel libraries, and other software that is useful on a cluster ...|$|R
50|$|Rollin/rollout {{allows the}} {{computer}} operator to interrupt a running batch program, execute an inquiry program, and then restart the <b>batch</b> <b>job</b> {{where it was}} interrupted.|$|R
30|$|A {{number of}} {{clustering}} and grid environments have been ported to cloud infrastructures, often provided {{as a set}} of instance images that can be deployed relatively easily. An example is StarCluster [29], a cluster computing toolkit that supports the deployment of a <b>batch</b> <b>job</b> submission system based on Sun’s Grid Engine into Amazon’s EC 2 cloud. This approach is suitable for a multitude of workloads and user communities where researchers are already using <b>batch</b> <b>job</b> submission systems and are thus familiar with their interfaces.|$|R
50|$|Spring Batch {{provides}} reusable {{functions that}} are essential in processing large volumes of records, including logging/tracing, transaction management, job processing statistics, job restart, skip, and resource management. It also provides more advanced technical services and features that will enable extremely high-volume and high performance <b>batch</b> <b>jobs</b> though optimization and partitioning techniques. Simple as well as complex, high-volume <b>batch</b> <b>jobs</b> can leverage the framework in a highly scalable manner to process significant volumes of information.|$|E
5000|$|... forfiles [...] - [...] Selects a file (or set of files) and executes {{a command}} on that file. This is helpful for <b>batch</b> <b>jobs.</b>|$|E
5000|$|The same JCL (Job Control Language, for {{initiating}} <b>batch</b> <b>jobs),</b> {{which was}} more flexible and easier to use, though more complex, than that of DOS/360.|$|E
50|$|HPC Profile Basic:This {{describes}} how JSDL, Basic Execution Service (BES) and existing web services security mechanisms {{can be used}} interoperable to address <b>batch</b> <b>job</b> scheduling use case.|$|R
40|$|In this paper, {{we present}} a {{performance}} comparison of two linux live CD distributions, Knoppix (v. 3. 3) and Quantian (v 0. 4. 96). The library used for performance evaluation is the Parallel Image Processing Toolkit (PIPT), a software library that contains several parallel image processing routines. A set of images was chosen and a <b>batch</b> <b>job</b> of PIPT routines were run and timed using both live CD distributions. The point of comparison between the two live CDs was the total time the <b>batch</b> <b>job</b> required for completion...|$|R
50|$|Job Control Language (JCL) is a {{name for}} {{scripting}} languages used on IBM mainframe operating systems to instruct the system on {{how to run a}} <b>batch</b> <b>job</b> or start a subsystem.|$|R
