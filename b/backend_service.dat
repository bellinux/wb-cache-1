17|87|Public
50|$|Partnerships include IBM Bluemix, Amazon Web Services, CloudBees, Engine Yard, Heroku, Joyent, Rackspace Hosting, and Microsoft Azure {{as well as}} mobile {{application}} <b>backend</b> <b>service</b> providers Appcelerator, Parse, and StackMob.|$|E
5000|$|Ritter was {{directly}} responsible {{for many of the}} key evolutions of the <b>backend</b> <b>service</b> architecture during Napster's period of hyper-growth, including its novel load-balancing system, MySQL and subsequent Oracle database integration, and transparent full-mesh server linking. [...] In addition to leading the backend team, Ritter also managed production systems deployment and network security, database systems and supporting infrastructure, and served as primary public contact point for all security-related issues concerning the service and operations. [...] Ritter also oversaw the Moderator Community, a group of individuals who volunteered their free time to help moderate the various socially-focused portions of the Napster service.|$|E
5000|$|While the T-Mobile Sidekick LX 2009 was {{no longer}} sold from July 2, 2010 onwards, {{modified}} versions of the device have been available for sale since. In Canada, carrier Mobilicity began selling the device under the name [...] "Mobiflip" [...] and the model number PV300G in late December 2010. In the United States, regional carrier Cincinnati Bell began selling the [...] "Sharp Jump", model number PV300GC, in early 2011. Both devices have {{a modified version of}} the Danger OS installed, although any mention of Danger has been removed. This modified OS is independent of any <b>backend</b> <b>service,</b> and the original Danger Web browser, Instant Messaging and Email applications have been removed. The Web browser was replaced with Opera Mini whereas the Instant Messaging clients were replaced with one universal client which also allows the user to connect to an IM service through an XMPP server. There is no email client installed, and there is no Catalog service available.|$|E
40|$|Current Web servers use various API sets {{to access}} <b>backend</b> <b>services.</b> This model {{does not support}} service differentiation, {{overload}} control, caching of contents generated by backend servers. We have proposed a framework for using service brokers to facilitate these features. Service brokers are software agents that are the access points to <b>backend</b> <b>services</b> in Web servers. Unlike the current API-based scheme where accesses to <b>backend</b> <b>services</b> are through stateless and isolated APIs, in service broker framework, they are undertaken by passing messages to service brokers who gather all the requests and intelligently process them. We have prototyped this framework and validated its function in providing request clustering and service differentiation in accessing <b>backend</b> <b>services.</b> In addition, the performance {{in terms of the}} processing time is enhanced by this approach...|$|R
5000|$|Mobile {{contains}} Mobile <b>Backend</b> <b>Services,</b> {{application and}} Mobile SDK（basic building blocks）.|$|R
5000|$|Beego, {{high-performance}} web {{framework in}} Go, used for web apps and <b>backend</b> <b>services.</b>|$|R
3000|$|... ● Crawler: For any Internet search engine, a crawler will be {{necessary}} to perform as <b>backend</b> <b>service</b> to acquire available Web resource.|$|E
40|$|Abstract—Cloud {{computing}} {{infrastructure is}} increasingly used for distributed applications. Mobile learning applications {{deployed in the}} cloud are a new research direction. The applications require specific development approaches for effective and reliable communication. This paper proposes an interdisciplinary approach for design and development of mobile applications in the cloud. The approach includes front service toolkit and <b>backend</b> <b>service</b> toolkit. The front service toolkit packages data and sends it to a backend deployed in a cloud computing platform. The <b>backend</b> <b>service</b> toolkit manages rules and workflow, and then transmits required results to the front service toolkit. To further show feasibility of the approach, the paper introduces a case study and shows its performance...|$|E
40|$|WebFridge: a RESTful {{architecture}} {{for online}} social poetry WebFridge is a RESTful architecture for supporting online social poetry. Its design {{is intended to}} function as a <b>backend</b> <b>service</b> providing &quot;fridge poetry&quot;-related resources to power social poetry widgets and applets. I lay out one possible architecture, designed to provide multiple and shareable fridge instances, multiple vocabulary sets, and ownership/permissions...|$|E
40|$|Abstract — Web service infrastrutures {{usually are}} {{comprised}} of front-end Web servers that accept requests and process them, and backend servers that manage data and services. Current Web servers use various API sets to access <b>backend</b> <b>services.</b> This model {{does not support}} service differentiation, overload control, caching of contents generated by backend servers. We have proposed a framework for using service brokers to facilitate these features. Service brokers are software agents that are the access points to <b>backend</b> <b>services</b> in Web servers. Unlike the current API-based scheme where accesses to <b>backend</b> <b>services</b> are through stateless and isolated APIs, in service broker framework, they are undertaken by passing messages to service brokers who gather all the requests and intelligently process them. We have prototyped this framework and validated its function in providing request clustering and service differentiation in accessing <b>backend</b> <b>services.</b> In addition, the performance {{in terms of the}} processing time is enhanced by this approach...|$|R
50|$|CSH runs all {{services}} on both its wired and wireless networks. Web hosting, email, newsgroups, and shell services are provided to all members. <b>Backend</b> <b>services</b> include OpenLDAP, MIT Kerberos, and FreeRADIUS.|$|R
50|$|PHP is a {{commonly}} used language to write scraping scripts for websites or <b>backend</b> <b>services,</b> it has powerful capabilities built in (DOM parsers, libcURL) but its memory usage is typical 10 times the factor of a similar C/C++ code. Ruby on Rails as well as Python are also frequently used to automated scraping jobs. For highest performance C++ DOM parsers should be considered.|$|R
40|$|Sindice [1] is a <b>backend</b> <b>service</b> that {{operates}} on semantically structured data harvested from the Web. Sindice uses both crawlers and Semantic Web Sitemaps [2] to find RDF sources {{as well as}} microformats 1 such as XFN, hcards, hvote and others. Sindice targets developers by offering the following a set of API to find, reuse and publish structure...|$|E
40|$|This {{purpose of}} this thesis is to {{describe}} a system allowing users to record their workout data without acquiring custom gear, such as an activity wrist band. Given this description, the necessary assessments required to develop and produce a prototype of said system is performed. After assessing the available technologies and system architecture options, the efforts would be made to develop a prototype featuring the described components of system. The assessments were made, and recommendations on applicable technologies were made. Combined with simplifications made to the system topology to make it conform to {{the scope of this}} thesis, resulted in the decision to develop a prototype consisting of a hub, gateway and <b>backend</b> <b>service.</b> The hub and gateway components were going to be powered by node. js, communicating with sensors over Bluetooth Smart, while the <b>backend</b> <b>service,</b> powered by node. js and MongoDB, was going to be deployed to Amazon Web Services. The three components have been developed as suggested, and the process of doing so is described in this thesis, including measures being made with respect to securing the application. Part of this thesis is also recommendations on further work {{that needs to be done}} to bring the system from a state of prototype to a state of being production-ready...|$|E
40|$|Web {{application}} {{users have}} no other option than to trust backend services of cloud data storage that they will protect their data. In practice, it is actually impossible {{to protect them from}} web attacks. This thesis presents the possibility of encrypting data within a web application. The proposed solution shifts responsibility of protecting data from the backend to the client side. This ensures both, the security and the integrity of the data, even if the attacker has access to the <b>backend</b> <b>service.</b> Attackers cannot decrypt or modify data because the key is not available to the backend system. Beside the protection, this solution also offers secure data exchange among users specified as a process of storage and exchange of keys. In the end, the implementation of KalPass web application presents data protection and exchange by using SPA technology and Angular framework...|$|E
5000|$|CentralNic {{provides}} <b>backend</b> <b>services</b> {{through an}} exclusive distribution agreement and {{shares in the}} global revenues from [...]design domain names. Ben Crawford, CentralNic's CEO, said of the top-level domain, [...] "It has impressive commercial potential, {{and it will be}} adopted more quickly than many other TLDs as it caters, among many other groups, to one of the best-informed professions on new Internet developments - website designers".|$|R
40|$|Modern server {{operating}} systems (OS's) {{do not address}} the issue of interference between competing applications. This deficiency is a major road-block for Internet and Application Service Providers who want to multiplex server resources among their business clients. To insulate applications from each other, we introduce Virtual Services (VSs). Besides providing per-service resource budgets, VSs drastically reduce cross-service interference in the presence of shared <b>backend</b> <b>services,</b> such as databases and name services...|$|R
40|$|While Internet-Of-Things (IoT) {{has drawn}} more {{attention}} to researchers and the public, to build a complete system from the edge sensing units to the cloud services requires massive amount of efforts. Researchers with strong interests in collected information are often lost in various technologies, including distributed sensing embedded systems, bridge devices between Internet and local network, and data <b>backend</b> <b>services.</b> This work takes a cross-system, script-based, and semantic-enhanced approach {{to address the problem}} of lacking suitable runtime supports. We proposed a threaded code runtime support for edge sensing systems, a script based wrapper on Physical-to-Cyber bridges, and scalable middleware into the <b>backend</b> <b>services.</b> With proposed runtime supports, we are able to apply distributed sensing systems into real world applications quickly and explorer insights from collected information. As a result, a building structure monitoring system is installed and allow civil researchers to develop algorithms to prevent disaster events. Body area sensing systems such as ECG monitoring, CO 2 detection, and body movement are developed. This enables baby screening and detect potential heart problems. The results have shown that with proposed runtime supports applications can be realized quickly and scalable...|$|R
40|$|This paper {{presents}} an approach and an integrated tool {{that supports the}} creation of personal learning environments suitable for self-regulated learning. The rationale behind this approach is an ontology of cognitive and meta-cognitive learning activities {{that are related to}} widgets from a Widget Store. Patterns of such learning activities allow for providing the user with appropriate recommendations of widgets for each learning activity. The system architecture follows a Web-based approach and includes the Mashup Recommender widget and its <b>backend</b> <b>service,</b> the ontology available through a Web service, the Widget Store with its interface to retrieve widgets, and the integration into the learning environment framework. The pedagogical approach regarding the usage of this technology is based on self-regulated learning taking into account different levels between guidance and freedom. A quantitative and qualitative evaluation with teachers describes advantages and ideas fo r improvement...|$|E
40|$|Abstract — Quality of Service (QoS) of {{disadvantaged}} networks {{is usually}} considered from a purely network standpoint in existing works. Adversarial intervention in such networks is not analyzed, {{nor is it}} possible to infer if a QoS loss is benign or otherwise. In this work, we analyze the nature of a QoS loss between a remote system and a <b>backend</b> <b>service</b> infrastructure connected over a disadvantaged satellite network. We present a game theoretic framework to infer if a QoS loss is due to benign or malicious factors. An attack on the backend system (DDoS attack) or on the transmitting station (RF Jamming) {{is considered to be a}} malicious factor, while a statistical network variation due to random noise is considered to be a benign factor. We then present the implementation of the game theoretic framework to the satellite network, and verify the validity of the idea through simulations in OPNET...|$|E
40|$|In {{this thesis}} we {{described}} {{the motivation for}} and development of a mobile application for study organising. The result of the thesis is a mobile application prototype for Android and iOS. This prototype allows students and staff access to interactive timetable, messages, study index and general information about the faculty and staff. It {{also serves as a}} platform for communication between staff and students. To define key developed functionalities of the prototype we conducted a market analysis in which we analysed similar mobile applications. Based on the information gathered through the market analysis we determined which functionalities are important and which are unnecessary. The application was made with HTML 5 technologies (HTML, CSS, javascript). A <b>backend</b> <b>service</b> was made on Amazon AWS platform for communication purposes between the mobile application and server. The backend server was developed on node. js software stack which is also written in javascript. ...|$|E
5000|$|WebORB is an {{integration}} server {{developed and}} maintained by Midnight Coders Incorporated. It {{is used in}} SOA/Rich Internet Application development projects to connect browser clients (Adobe Flex, Adobe Flash, AJAX, Java, [...]NET, Silverlight, JSON) and mobile clients (Android, Windows Phone 7, BlackBerry PlayBook) with <b>backend</b> <b>services</b> (.NET, Java, PHP and Ruby on Rails) and databases (MySQL, Microsoft SQL Server, SQL Azure, PostgreSQL, ODBC and Oracle database). It combines technologies that provide developer productivity tools, AMF remoting, real time messaging, code-level security and real time streaming media.|$|R
50|$|Additional {{services}} include O as an operserv reference bot to {{the server}} operators on QuakeNet, and R (RequestBot) which {{allows users to}} request both Q and S if their channel meets their requirements. There are many other <b>backend</b> <b>services</b> which help QuakeNet staff administer the network. QuakeNet also is the home to many other third-party bot-operated services {{that can be used}} for various purposes to assist channel operators to run their channels or provide light entertainment. Many of these channels can be found using the channel search facility on the QuakeNet website.|$|R
40|$|Abstract—Modern user {{interface}} mashups combine web-based <b>backend</b> <b>services</b> and a composite {{user interface}}. While the former {{can be used}} in different runtime platforms without further ado, user interface components are rendered platform-dependently. Creating and maintaining multiple implementa-tion variants for different technologies and communication in-terfaces implies high development costs. This paper introduces a generic platform adaptation concept of such visual mashup components. The practicability of the proposed concept is demonstrated by implementing the adapter for a subsistent integration infrastructure and component model. Keywords-user interface integration; platform adaptation; mashup components; composite web applications I...|$|R
40|$|Integrating user-generated content into digital games {{helps to}} {{increase}} re-usability and to decrease development effort. In terms of learning games, the content creation {{can be extended}} to the learning parts of the game as well, e. g., allowing teachers to create custom games for their students. In this work, we propose a method of how to create learning games with arbitrary user-generated learning content. This includes not only different topics of learning content, but also different types of knowledge acquisition. To do this we combine a static game scenario with lightweight HTML 5 -based mini games. Learning content can be conveniently added through a web-based authoring tool that does not require any programming or game design knowledge. In addition to that, we created a game prototype based on the Unity 3 D engine that uses a tower defence game setting to integrate the learning content. These mini games are retrieved from the <b>backend</b> <b>service</b> at runtime. The implemented solution already allows for the integration of arbitrary content and can easily extended without altering the game client...|$|E
40|$|Abstract: Personal {{learning}} environments (PLEs) comprise {{a new kind}} of learning technology which aims at putting learners into centre stage, i. e. by empowering them to design and use environments for their learning needs and purposes. Setting a PLE approach into practice, however, is not trivial at all, as the proposed end-users have varying attitudes and experiences in using ICT in general and PLE software in particular. Here, practice sharing could be an enabler for increasing the usefulness and usability of PLE solutions. In this paper we examine the relevant issues of capturing and sharing ‘good practices ’ of PLE-based, collaborative activities. By good practices we refer to learning experiences provided by learners for a networked community. Moreover, we introduce the concept of a pattern repository as a <b>backend</b> <b>service</b> for PLEs which should, in the sense of community approaches like Last. fm, support PLE users in applying learning tools for their activities. Finally, we present a preliminary prototype and argue for the advantages of such a practice sharing infrastructure with respect to community literature, experiences, and an internal evaluation study...|$|E
40|$|In {{advanced}} physics experiment {{systems like}} a large particle accelerators, {{it is important that}} physicists can easily analyze device behavior based on archived data to achieve an optimal result of the experiment. Standard network and software technologies such as Web, XML, Java, etc would be employed to enable a wider range of environment for analysis tools. To this end a Java tool for displaying EPICS ChannelArchiver has been developed for the KEKB injector linac. The EPICS Archive Viewer is implemented as a pure Java code, which utilizes a high-quality commercial software package for charting (JClass Chart). The viewer retrieves archive data by interfacing with an extensible set of “archive data providers”. Current implementation includes providers for SOAP and CGI protocols and also allows support for custom, “in-house ” archive data providers (e. g. a provider that relies on CORBA/IIOP). The server-side of SOAP archive data provider is represented by a <b>backend</b> <b>service</b> object deployed within the AXIS/Tomcat container. The implementation of all viewer modules is highly portable and offers a potential for data sharing among organizations via the emerging Web Services standards. ...|$|E
40|$|Cloud {{computing}} {{is becoming}} increasingly important {{and a growing number}} of systems are being developed to help solve different problems that the developers are facing. Numerous systems for enabling different <b>backend</b> <b>services</b> on remote servers have been developed for mobile applications. By doing so the developers do not have to include the necessary software in the application, which results in a shorter development time. To access these systems, applications need access keys, saved in the application’s source code. If the applications run on the devices that the user has access to, it can lead to an unauthorised access and disclosure of information. This paper presents the outline and the development of a new <b>backend</b> as a <b>service</b> system which improves the existing systems in the field of data security, isolation and protection...|$|R
40|$|Augmented reality {{applications}} are gaining popularity {{due to increased}} capabilities of modern mobile devices. However, existing {{applications are}} tightly integrated with <b>backend</b> <b>services</b> that expose content using proprietary interfaces. We demonstrate an architecture that allows visualization of web content in augmented and mirror world applications, based on open web protocols and formats. We describe two clients, one for creating virtual artifacts, web resources that bind together web content with location and a 3 D model, and one that visualizes the virtual artifacts in the mirror world. Categories and Subject Descriptors H. 3. 5 [Information Storage and Retrieval]: On-line Information Services- Web-based service...|$|R
40|$|PrivAd is a {{research}} effort to build and evaluate a practical non-tracking advertising system. The system is carefully designed to enable behaviorally targeted advertising while preserving privacy of sensitive user information. Designed several auction models for the non-tracking advertising model, analyzed auctions designs in terms of privacy risks, potential attack vectors and {{the impact on the}} targeting quality and revenue streams. Built an experimental PrivAd prototype consisting of a Firefox extensions as a front-end client responsible for profiling and serving of ads {{as well as a number}} of <b>backend</b> <b>services</b> for proxying users, generating and distributing ads, and collecting anonymous view and click reports...|$|R
40|$|Mobile {{carriers}} {{are struggling to}} cope with the surge in smartphone traffic, which reflects badly on end users who often experience poor connectivity in densely populated urban environments. Data transfers between mobile client applications and their Internet backend services contribute significantly to the contention in radio access networks (RANs). Client applications, however, typically transfer unnecessary data because (i) <b>backend</b> <b>service</b> APIs do not support a fine-grained specification of the data actually required by clients and (ii) clients aggressively prefetch data that is never used. We describe EDGEREDUCE, an automated approach for reducing the data transmitted from backend services to a mobile device. Based on source-level program analysis, EDGEREDUCE generates application-specific proxies for mobile client applications that execute part of the application logic at the network edge to filter data returned by backend API calls and only send used data to the client. EDGEREDUCE also permits the tuning of aggressive prefetching strategies: proxies replace large prefetched objects such as images by futures, whose access by the client triggers the retrieval of the object on-demand. We show that EDGEREDUCE reduces the RAN traffic for real-world iOS client applications by up to 8 ×, with only a modest increase in response time...|$|E
40|$|An {{agricultural}} {{information service}} platform, called FieldTouch, {{is being built}} and tested on geospatial data infrastructure and crop modeling framework. More than 100 farmers in Hokkaido, Japan, have been participating on this development and are utilizing the services for optimizing their daily agricultural practices, e. g., planning and targeting areas where to apply fertilizer more to enhance homogeneity of growth and robustness of crops in their fields. FieldTouch integrates multi-scale sensor data for field monitoring, provides functionality for recording agricultural practices, then supports farmers in decision making e. g., fertilizer management. RapidEye satellite images are being used for monitoring vegetation status updated every two weeks. Field sensor data from 25 nodes record soil moisture and temperature data at different soil depths, and suites of meteorological variables e. g., rainfall, minimum and maximum temperature, solar radiation, wind, etc. every 10 minutes. Data from national weather observation network, AMeDAS, is also a source of daily weather data. We used "cloudSense" sensor <b>backend</b> <b>service</b> that serves meta-data and data to FieldTouch via a standard web service called SOS (Sensor Observation Service), which brought great flexibility and enhanced automation of system’s operation. Using agronomic data from experimental station, the cultivar parameters (genetic coefficients) of a local wheat variety were calibrated for the DSSAT (Decision Support System for Agrotechnology Transfer) crop model using data assimilation. These were built in a web-based DSSAT wheat crop model called Tomorrow’s Wheat (TMW) where in a user can explore the effects of timing of sowing at a given climatic condition, soil and crop management. TMW accesses long-term weather data from the on-line observation station up {{to the most recent}} archive, parameterize a built-in weather generator, then generate 100 weather scenarios then runs the wheat model at the chosen planting date, then two weeks, and one week before and after that. The yields are presented as distribution of yields at these different planting options. Future developments are going-on to personalize more the system so that the user can input fertilizer scenario, and be able also to apply seasonal climate forecast, and link to the 25 sensor nodes to simulate current plant conditions given a management scenario. In this way, the user can be informed better on how to manage their sources of vulnerabilities in their fields...|$|E
2500|$|The lab also {{supported}} {{a number of}} Sun Microsystems thin clients for use by students enrolled in AP Computer Science. In 2008, the school received a grant from Sun Microsystems for $388,048, which was student-written. The Syslab was given 7 Sun workstations, 12 Sun servers, and 145 Sun Rays for distribution throughout the school. These {{were placed in the}} existing AP Computer Science Lab and the science classrooms, support <b>backend</b> <b>services,</b> and serve as kiosks placed around the school for guests, students, and faculty. However, the Sun Rays were taken out of the AP Computer Science Lab due to teachers' objections. By 2014, the Sun Ray clients were decommissioned, and [...] replaced with Linux-based thin clients running LTSP.|$|R
5000|$|Flox is a <b>Backend</b> as a <b>Service</b> {{targeting}} especially Starling developers (and {{built by}} the same team).|$|R
40|$|Image {{compression}} is a core {{task for}} mobile devices, social media and cloud storage <b>backend</b> <b>services.</b> Key evaluation criteria for compression are: {{the quality of}} the output, the compression ratio achieved and the computational time (and energy) expended. Predicting the effectiveness of standard compression implementations like libjpeg and WebP on a novel image is challenging, and often leads to non-optimal compression. This paper presents a machine learning-based technique to accurately model the outcome of image compression for arbitrary new images in terms of quality and compression ratio, without requiring significant additional computational time and energy. Using this model, we can actively adapt the aggressiveness of compression on a per image basis to accurately fit user requirements, leading to a more optimal compression. Postprin...|$|R
40|$|NCore is an {{open source}} {{architecture}} and software platform for creating flexible, collaborative digital libraries. NCore {{was developed by the}} National Science Digital Library (NSDL) project, and it serves as the central technical infrastructure for NSDL. NCore consists of a central Fedora-based digital repository, a specific data model, an API, and a set of <b>backend</b> <b>services</b> and frontend tools that create a new model for collaborative, contributory digital libraries. This paper describes NCore, presents and analyzes its architecture, tools and services; and reports on the experience of NSDL in building and operating a major digital library on it over the past year and the experience of the Digital Library for Earth Systems Education in porting their existing digital library and tools to the NCore platform. Comment: 11 pages, to appear in JCDL 200...|$|R
