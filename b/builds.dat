10000|10000|Public
5|$|A public beta {{program for}} Windows10 {{known as the}} Windows Insider Program (previously Windows Technical Preview) began with the first {{publicly}} available preview release on October 1, 2014. Insider preview <b>builds</b> are aimed towards enthusiasts and enterprise users for the testing and evaluation of updates and new features. Users of the Windows Insider program receive occasional updates to newer preview <b>builds</b> of the operating system {{and will continue to}} be able to evaluate preview releases after general availability (GA) in July 2015this is in contrast to previous Windows beta programs, where public preview <b>builds</b> were released less frequently and only during the months preceding GA. Windows Insider <b>builds</b> continued being released after the release to manufacturing (RTM) of Windows10.|$|E
5|$|The Toulouse Blagnac final {{assembly}} line <b>builds</b> A320s, whereas the Hamburg Finkenwerder {{final assembly}} line <b>builds</b> A318s, A319s, and A321s. The Airbus factory in Tianjin, China assembles A319s, A320s, and A321s; A320s and A321s are also assembled at the Airbus Americas factory in Mobile, Alabama. Airbus produced 42 A320 per month in 2015, and expects to increase to 50 per month in 2017.|$|E
5|$|Cortana can {{no longer}} be fully hidden, as it was made the default search {{experience}} in the Windows shell for all users (on previous revisions, a generic search experience without any Cortana branding and functionality is used if it is disabled). As with previous <b>builds,</b> users must still opt-in and grant permission for the software to perform data collection and tracking in order to fully enable Cortana's personalized features. If this functionality is not enabled, Cortana operates in a feature-limited mode with basic web and device search functionality, nearly identical to the non-Cortana search experience on previous <b>builds.</b>|$|E
50|$|One of {{the goals}} of Bazel is to create a <b>build</b> system where <b>build</b> target inputs and outputs are fully {{specified}} and therefore precisely known to the <b>build</b> system. This allows a more accurate analysis and determination of out-of-date <b>build</b> artifacts in the <b>build</b> system's dependency graph. Making the dependency graph analysis more deterministic leads to potential improvements in <b>build</b> times by avoiding re-executing unnecessary <b>build</b> targets. <b>Build</b> reliability is improved by avoiding errors where <b>build</b> targets might depend on out-of-date input artifacts.|$|R
5000|$|... 2002-May: Macromedia ColdFusion MX version 6.0 (<b>build</b> 6,0,0,48097), Updater 1 (<b>build</b> 6,0,0,52311), Updater 2 (<b>build</b> 6,0,0,55693), Updater 3 (<b>build</b> 6,0,0,58500) ...|$|R
5000|$|<b>Build</b> tools: <b>Build</b> {{automation}}, List of <b>build</b> automation software ...|$|R
5|$|Country group Little Big Town {{performed}} {{a cover for}} the American Red Cross: Music <b>Builds</b> disaster relief effort.|$|E
5|$|Early 624?: Justus {{converts}} Eadbald. Messengers go to Rome. Also {{at about}} this time Æthelburg's marriage to Edwin is arranged, perhaps before the conversion. Eadbald <b>builds</b> a church, and Mellitus consecrates it.|$|E
5|$|General Dynamics Land Systems (GDLS) <b>builds</b> {{armoured}} {{personnel carriers}} in the city. GDLS has a 14-year $15-billion deal to supply light armoured vehicles to Saudi Arabia. There are 2,400 workers at GDLS Canada.|$|E
2500|$|<b>Build</b> 5808 (<b>build</b> date of October 12, 2006) was {{released}} to TAP testers on October 19, 2006. This <b>build</b> was notable {{because it was}} the first <b>build</b> released to testers since Microsoft entered RTM [...] "escrow" [...] with <b>build</b> 5800. This explains why the <b>build</b> numbers jumped from 57xx to 58xx.|$|R
50|$|Bazel {{provides}} tooling {{which helps}} developers to create bit-identical reproducible <b>build</b> outputs. Bazel's implemented rules avoid typical pitfalls such as embedding timestamps in generated outputs to ensure content digest matches. This in turn allows the <b>build</b> system to reliably cache (memoize) the outputs of intermediate <b>build</b> steps. Furthermore, reproducible <b>build</b> {{makes it possible}} to share intermediate <b>build</b> results between teams or departments in an organization, using dedicated <b>build</b> servers or distributed caches. Bazel therefore is particularly well-suited for larger organizations and software projects that have significant number of <b>build</b> dependencies. A deterministic <b>build</b> and an ability to precisely analyze <b>build</b> input and output artifacts across the dependency graph lends itself to parallel execution of <b>build</b> steps.|$|R
40|$|The <b>build</b> is {{situated}} in the waterfront. It is the corner house. It {{is situated}} in rambling build-up area. It is important relation from between the matter of <b>build</b> and the matter of <b>build</b> - up area, it is important relation from between traffic operation in the waterfront and the operation in the <b>build,</b> it is important look relation from between the <b>build</b> and historic centre over the river Bečva. The part of <b>build</b> salient from <b>build</b> to river and approach to it. The <b>build</b> with its detail of fasade and with its concepton of matter cooperates with the <b>build</b> - up area. The <b>build</b> contains the living. When it is unattractive the day time, it vitalize the place. The commercial areas are tradicionally open to waterfront. The <b>build</b> try to create {{the reason for the}} stay in this place...|$|R
5|$|Lactate Threshold: This level <b>builds</b> an {{efficient}} base speed by training {{the body to}} convert blood lactate into energy, rather than creating a sensation of tired muscles.|$|E
5|$|Lead {{poisoning}} inhibits excretion of {{the waste}} product urate and causes a predisposition for gout, in which urate <b>builds</b> up. This condition is known as saturnine gout.|$|E
5|$|Musically, {{the group}} <b>builds</b> upon {{the style of}} Russian bard music, which {{features}} strong vocals with a guitar accompaniment. The music mixes these more traditional instruments with an accordion, synthesizer, and drums.|$|E
50|$|BuildAMation {{supports}} {{building code}} for C/C++, and Objective C derivatives. It writes <b>build</b> output to a folder named the <b>build</b> root. This out-of-place <b>build</b> ensures that source trees are not modified by a <b>build,</b> and performing a clean <b>build</b> {{is as simple}} as deleting one directory.|$|R
5000|$|... <b>build</b> &rArr; [...] help to <b>build</b> &rArr; [...] {{help each}} other to <b>build</b> &rArr; [...] {{neighbour}} (since traditionally neighbouring houses would share a wall and yard, which the owners would <b>build</b> together) ...|$|R
5000|$|Memory Configurations: (1) Flat {{embedded}} <b>build,</b> (2) Protected <b>build</b> with MPU, and (3) Kernel <b>build</b> with MMU ...|$|R
5|$|Several titles {{by other}} {{developers}} feature gameplay that either copies or <b>builds</b> upon Jousts design. The 1983 Jetpac and Mario Bros. feature elements inspired by it, {{as does the}} 1984 Balloon Fight.|$|E
5|$|The male then {{leads the}} female to {{potential}} nest sites, {{and the female}} will choose one. The female dove <b>builds</b> the nest. The male will fly about, gather material, {{and bring it to}} her. The male will stand on the female's back and give the material to the female, who then <b>builds</b> it into the nest. The nest is constructed of twigs, conifer needles, or grass blades, and is of flimsy construction. Mourning doves will sometimes requisition the unused nests of other mourning doves, other birds, or arboreal mammals such as squirrels.|$|E
5|$|The {{study of}} {{homotopy}} groups of spheres <b>builds</b> {{on a great}} deal of background material, here briefly reviewed. Algebraic topology provides the larger context, itself built on topology and abstract algebra, with homotopy groups as a basic example.|$|E
40|$|The {{efficiency}} of a <b>build</b> system {{is an important}} factor for developer productivity. As a result, developer teams have been increasingly adopting new <b>build</b> systems that allow higher <b>build</b> parallelization. However, migrating the existing legacy <b>build</b> scripts to new <b>build</b> systems is a tedious and error-prone process. Unfortunately, there is insufficient support for automated migration of <b>build</b> scripts, making the migration more problematic. We propose the first dynamic approach for auto-mated migration of <b>build</b> scripts to new <b>build</b> systems. Our approach works in two phases. First, from a set of execution traces, we synthesize <b>build</b> scripts that ac-curately capture the intent of the original <b>build.</b> The synthesized <b>build</b> scripts are typically long and hard to maintain. Second, we apply refactorings that raise the abstraction level of the synthesized scripts (e. g., introduce functions for similar fragments). As differ-ent refactoring sequences may lead to different <b>build</b> scripts, we use a search-based approach that explores various sequences to identify the best (e. g., shortest) <b>build</b> script. We optimize search-based refactoring with partial-order reduction to faster explore refactoring se-quences. We implemented the proposed two-phase mi-gration approach in a tool called Metamorphosis that has been recently used at Microsoft. 1...|$|R
5000|$|To <b>build</b> {{a native}} {{application}} developers sign in/register to the Codename One <b>build</b> server {{and send a}} <b>build</b> to the cloud based <b>build</b> server. Then they can download the native app from the <b>build</b> server to run on the device/submit to the store. [...] Since the <b>build</b> server performs static translation of the code into a native application, {{it is no longer}} required after the application has been compiled.|$|R
50|$|Gundam <b>Build</b> Fighters is {{followed}} by the 2014 sequel Gundam <b>Build</b> Fighters Try. A sequel OVA titled Gundam <b>Build</b> Fighters: GM's Counterattack (lead=1), which takes place between <b>Build</b> Fighters and <b>Build</b> Fighters Try is officially in development. It was to be released in November 2017, but later moved to August 25th, 2017.|$|R
5|$|The western rock {{nuthatch}} <b>builds</b> an elaborate flask-shaped nest from mud, dung and hair or feathers, and decorates the nest's exterior and nearby crevices with feathers and insect wings. The nests are located in rock crevices, in caves, under cliff overhangs or on buildings. The eastern {{rock nuthatch}} <b>builds</b> a similar but less complex structure across {{the entrance to a}} cavity. Its nest can be quite small but may weigh up to 32kg (70lb). This species will also nest in river banks or tree holes and will enlarge its nest hole if it the cavity is too small.|$|E
5|$|Upgraded <b>builds</b> of Windows10, {{known as}} feature updates, are {{occasionally}} released, containing new features and other changes; in April 2017, Microsoft stated {{that in the}} future, these updates would be released twice a year every March and September.|$|E
5|$|Additionally, {{the early}} season follows an arc where Landry kills and hides {{the body of}} a man who {{attempted}} to rape Tyra, leading to a romance between the two. Eventually, guilt <b>builds</b> within Landry and he confesses. Charges are not pressed, although tension between him and Tyra remains. Landry also joins the football team.|$|E
40|$|Abstract—Build systems orchestrate how human-readable {{source code}} is {{translated}} into executable programs. In a software project, source code changes can induce {{changes in the}} <b>build</b> system (aka. <b>build</b> co-changes). It is difficult for developers to identify when <b>build</b> co-changes are necessary due {{to the complexity of}} <b>build</b> systems. Prediction of <b>build</b> co-changes works well if there is a sufficient amount of training data to <b>build</b> a model. However, in practice, for new projects, there exists a limited number of changes. Using training data from other projects to predict the <b>build</b> co-changes in a new project can help improve the performance of the <b>build</b> co-change prediction. We refer to this problem as cross-project <b>build</b> co-change prediction. In this paper, we propose CroBuild, a novel cross-project <b>build</b> co-change prediction approach that iteratively learns new classi-fiers. CroBuild constructs an ensemble of classifiers by iterativel...|$|R
25|$|<b>Build</b> 6001.18063 (release date of June 24, 2008). Microsoft Released KB952709 as a Reliability and Performance update for Windows Vista this <b>build</b> {{is notable}} for two reasons. First, This {{is the first}} {{publicly}} released update that increases Vista <b>build</b> number beyond the 6001.18000 (final) <b>build</b> of Service Pack 1. Second, this <b>build</b> replaces the 6001.longhorn_rtm.080118-1840 <b>build</b> string of SP1 with 6001.vistasp1_gdr.080425-1930. The longhorn <b>build</b> string was present during the early development of Vista but was not seen in the official release <b>build</b> or any update after until it was reintroduced during the SP1 beta and was left in when SP1 was released, this <b>build</b> marks its removal from the only release version of Vista to contain the longhorn codename in a prominent manner.|$|R
50|$|Variant 3: A {{player with}} a <b>build</b> {{on the table}} cannot trail. Play must {{initiate}} from the hand. Continuing a <b>build</b> from only {{cards on the table}} is not allowed. You must either take in the <b>build,</b> duplicate it or increase it, OR defer by starting another <b>build</b> or assuming ownership of an opponent's <b>build.</b> A <b>build</b> 'belongs' to the last player that set its value. You may assume ownership of a <b>build</b> started by another by increasing it. But only if it consists of a single combination, i.e., not duplicated. You may have more than one <b>build,</b> but only one of any particular value, and having a <b>build</b> of the same value of another (an adversary's) makes no sense at all.|$|R
5|$|Although it is a mimid, {{the black}} catbird {{is not known}} to imitate any other species. Its song {{is a mix of}} harsh notes and clear flute-like whistles, with the phrases repeated. It <b>builds</b> a cup nest in low bushes or trees, and lays two bluish eggs. It is {{threatened}} by habitat loss, and has been assessed as near threatened by the International Union for the Conservation of Nature.|$|E
5|$|Before Windows Server 2012 was finalized, two test <b>builds</b> {{were made}} public. A public beta version of Windows Server 2012 was {{released}} {{along with the}} Windows 8 Consumer Preview on February 29, 2012. The release candidate of Windows Server 2012 was released on May 31, 2012, along with the Windows 8 Release Preview.|$|E
5|$|Billionaire {{industrialist}} Tony Stark <b>builds</b> {{himself a}} suit of armor after he is taken captive by a terrorist organization. Free from his captors, he decides to upgrade and don his armor as Iron Man in order to hunt down weapons that were sold under the table.|$|E
40|$|<b>Build</b> {{systems are}} an {{essential}} part of modern software engineering projects. As software projects change continuously, it is crucial to understand how the <b>build</b> system changes because neglecting its maintenance can lead to expensive <b>build</b> breakage. Recent studies have investigated the (co-) evolution of <b>build</b> configurations and reasons for <b>build</b> breakage, but they did this only on a coarse grained level. In this paper, we present BUILDDIFF, an approach to extract detailed <b>build</b> changes from MAVEN <b>build</b> files and classify them into 95 change types. In a manual evaluation of 400 <b>build</b> changing commits, we show that BUILDDIFF can extract and classify <b>build</b> changes with an average precision and recall of 0. 96 and 0. 98, respectively. We then present two studies using the <b>build</b> changes extracted from 30 open source Java projects to study the frequency and time of <b>build</b> changes. The results show that the top 10 most frequent change types account for 73 % of the <b>build</b> changes. Among them, changes to version numbers and changes to dependencies of the projects occur most frequently. Furthermore, our results show that <b>build</b> changes occur frequently around releases. With these results, we provide the basis for further research, such as for analyzing the (co-) evolution of <b>build</b> files with other artifacts or improving effort estimation approaches. Furthermore, our detailed change information enables improvements of refactoring approaches for <b>build</b> configurations and improvements of models to identify error-prone <b>build</b> files. Comment: Accepted at the International Conference of Mining Software Repositories (MSR), 201...|$|R
50|$|Development of Windows Vista {{came to an}} {{end when}} Microsoft {{announced}} that it had been finalized on 8 November 2006, and was concluded by co-president of Windows development, Jim Allchin. The RTM's <b>build</b> number had also jumped to 6000 to reflect Vista's internal version number, NT 6.0. Jumping RTM <b>build</b> numbers is common practice among consumer-oriented Windows versions, like Windows 98 (<b>build</b> 1998), Windows 98 SE (<b>build</b> 2222), Windows Me (<b>build</b> 3000) or Windows XP (<b>build</b> 2600), as compared to the business-oriented versions like Windows 2000 (<b>build</b> 2195) or Server 2003 (<b>build</b> 3790). On 16 November 2006, Microsoft made the final <b>build</b> available to MSDN and Technet Plus subscribers. A business-oriented Enterprise edition was made available to volume license customers on 30 November. Windows Vista was launched for general customer availability on 30 January 2007.|$|R
40|$|FDM is one {{of popular}} rapid {{prototyping}} methods. <b>Build</b> orientation of an object using FDM is usually determined by the object's structure after considering <b>build</b> feasibility, <b>build</b> efficiency, and <b>build</b> accuracy. In this paper, a novel object <b>build</b> orientation selection method in FDM is proposed based on the tensile strain of an object to be built. Test specimens with different <b>build</b> orientations are built with FDM to investigate the relationship between <b>build</b> orientation and allowed maximum tensile strain through tensile test experiments. Based on the relationship, golden section search is employed to determine the <b>build</b> orientation of an object consisting of multi-parts {{in order to get}} allowed maximum tensile strain. The <b>build</b> orientation of a truss is determined with the proposed method to verify its feasibility and reliability with satisfied results. © 2010 IEEE. link_to_subscribed_fulltex...|$|R
