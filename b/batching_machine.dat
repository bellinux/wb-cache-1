48|239|Public
40|$|This paper {{addresses}} a new problem, called semi-continuous batch scheduling, which arises in the heating-operation of tube-billets {{in the steel}} industry. Each heating furnace {{can be regarded as}} a semi-continuous <b>batching</b> <b>machine,</b> which can handle up to C jobs simultaneously. The jobs in the same batch enter and leave the machine semi-continuously, which differs from the traditional <b>batching</b> <b>machine</b> scheduling where the jobs in same batch have a starting time and a finishing time. In this paper the processing time of a batch depends on the capacity of the semi-continuous <b>batching</b> <b>machine,</b> the longest processing time of jobs in the batch and its size. The objectives are to schedule jobs on the machine so that the makespan and the total completion time are minimized. A schedule for a semi-continuous <b>batching</b> <b>machine</b> consists of a batching and sequencing for the batches. We propose the optimal properties of two different objective functions and present the different dynamic programming algorithms with a running time of O(n 2), respectively. Scheduling Semi-continuous <b>batching</b> <b>machine</b> Dynamic programming algorithm...|$|E
40|$|We {{study the}} problem of {{scheduling}} jobs on a serial <b>batching</b> <b>machine</b> to minimize total tardiness. Jobs of the same batch start and are completed simultaneously {{and the length of}} a batch equals the sum of the processing times of its jobs. When a new batch starts, a constant setup time s occurs. This problem 1 js-batchj P T i is known to be NP-Hard in the ordinary sense. In this paper we show that it is solvable in pseudopolynomial time by dynamic programming. AMS Subject Classication. 90 B 35, 90 C 39, 90 C 27. Introduction In this paper, we study the situation where n jobs fJ 1; : : :; Jn g have to be scheduled on a serial <b>batching</b> <b>machine.</b> Each job J i is described by a processing time p i and a due date d i (all numerical values used in this paper being integer). All jobs of the same batch start and are completed simultaneously, i. e., at the starting time (respectively at the completion time) of the batch. On a serial <b>batching</b> <b>machine,</b> the length of a batch equals the sum of the pr [...] ...|$|E
40|$|We {{consider}} a two-stage hybrid flowshop scheduling problem where each of n tasksistobe processed first at stage 1 {{and then at}} stage 2. The first stage contains m 1 identical parallel discrete machines and the second stage contains m 2 identical parallel batching machines. Each discrete machine can process {{no more than one}} task at time and each <b>batching</b> <b>machine</b> ca...|$|E
40|$|A <b>batch</b> <b>machine</b> is {{a machine}} that can process up to c jobs {{simultaneously}} as a batch, and the processing time of the batch {{is equal to the}} longest processing time of the jobs assigned to it. In this paper, we deal with the complexity of scheduling an un-bounded <b>batch</b> <b>machine,</b> i. e., c = +∞. We prove that minimizing total tardiness is binary NP-hard, which has been an open problem in the literature. Also, we establish the pseudopolynomial solvability of the unbounded <b>batch</b> <b>machine</b> scheduling problem with job release dates and any regular objective. This is distinct from the bounded <b>batch</b> <b>machine</b> and the classical single machine scheduling problems, most of which with different release dates are unary NP-hard. Combined with the existing results, this paper provides a nearly complete mapping of the complexity of scheduling an unbounded <b>batch</b> <b>machine...</b>|$|R
40|$|Scheduling is a {{key factor}} for {{manufacturing}} productivity. Effective scheduling can improve on-time delivery, reduce work-in-process inventory, cut lead time, and improve machine utilization. Motivated by the extensive use of <b>batch</b> <b>machines</b> in manufacturing industries, the scheduling of job shops with <b>batch</b> <b>machines</b> is studied in this paper. Unlike machines that can process one part at a time (called "standard machines" for simplicity), a <b>batch</b> <b>machine</b> {{is the one that}} can simultaneously process several parts with the same processing requirement as a batch, subject to the capacity of the <b>batch</b> <b>machine.</b> This simultaneous processing requires the "synchronization" (batch formation) of different parts for a batch operation. In view that a part may have to be processed by many standard and <b>batch</b> <b>machines,</b> multiple <b>batch</b> formation and batch splitting result in complicated coupling among the parts. In this paper, batches are viewed as "virtual" facilities that host and "synchronize" [...] ...|$|R
40|$|This study {{addresses}} a two-stage flowshop with a <b>batch</b> <b>machine</b> in stage 1 and a discrete machine in stage 2, {{subject to the}} constraint that the input buffer of the discrete machine can only host limited number of jobs. The <b>batch</b> <b>machine</b> processes a <b>batch</b> of jobs simultaneously, and the discrete machine processes one job at a time. The objective function {{of the problem is}} the makespan minimization. Several properties are proposed to solve the special case of the problem optimally. An effective heuristic is presented, and a branch-and-bound procedure is proposed for benchmarking. Extensive experimentation shows that the heuristic yields good results. Flowshop, <b>batch</b> <b>machine,</b> discrete machine, limited buffer storage...|$|R
40|$|We {{address the}} problem of {{scheduling}} n jobs on a <b>batching</b> <b>machine</b> to minimize regular scheduling criteria that are non-decreasing in the job completion times. A <b>batching</b> <b>machine</b> is a machine that can handle up to b jobs simultaneously. The jobs that are processed together form a batch, and all jobs in a batch start and complete at the same time. The processing time of a batch is equal to the largest processing time of any job in the batch. We analyse two variants: the unbounded model, where b¿n; and the bounded model, where b 1; for the case with m different processing times, we give a dynamic programming algorithm that requires O(b 2 m 22 m) time. Moreover, we prove that due date based scheduling criteria give rise to NP-hard problems. Finally, we show that an arbitrary regular cost function can be minimized in polynomial time for a fixed number of batches...|$|E
40|$|We {{address the}} problem of {{scheduling}} n jobs on a <b>batching</b> <b>machine</b> to minimize regular scheduling criteria that are non-decreasing in the job completion times. A <b>batching</b> <b>machine</b> is a machine that can handle up to b jobs simultaneously. The jobs that are processed together form a batch, and all jobs in a batch start and complete at the same time. The processing time of a batch is equal to the largest processing time of any job in the batch. We analyze two variants: the unbounded model, where b n; and the bounded model, where b ! n. For the unbounded model, we give a characterization of a class of optimal schedules, which leads to a generic dynamic programming algorithm that solves the problem of minimizing an arbitrary regular cost function in pseudopolynomial time. The characterization leads to more efficient dynamic programming algorithms for specific cost functions: a polynomial algorithm for minimizing the maximum cost, an O(n 3) time algorithm for minimizing the number of tard [...] ...|$|E
40|$|Abstract. The paper {{describes}} a small <b>batching</b> <b>machine</b> control system that takes chip C 8051 F 040 {{as the core}} controller. The system that has automatic control and manual control modes can complete the high-precision automatic weighing of few powder and granular material. This article describes {{the composition of the}} control system and the major design of hardware, and provides more detailed software program scheme...|$|E
50|$|The {{input side}} of the user {{interfaces}} for <b>batch</b> <b>machines</b> were mainly punched cards or equivalent media like paper tape. The output side added line printers to these media. With the limited exception of the system operator's console, human beings did not interact with <b>batch</b> <b>machines</b> in real time at all.|$|R
40|$|A <b>batch</b> <b>machine</b> is {{a machine}} that can process a number of jobs {{simultaneously}} as a batch, and the processing time of a batch {{is equal to the}} longest processing time of the jobs assigned to it. In this paper we present a polynomial time approximation scheme (PTAS) for scheduling a <b>batch</b> <b>machine</b> to minimize the total completion time with job release dates. Also, we present a fully polynomial time approximation scheme (FPTAS) for scheduling an unbounded <b>batch</b> <b>machine,</b> which can process an arbitrary number of jobs simultaneously, to minimize the total weighted completion time with job release dates...|$|R
40|$|Game theoretic {{analysis}} of sequencing situations has been restricted to manufactur- ing systems which consist of machines that can process only one {{job at a}} time. However, in many manufacturing systems, operations are carried out by <b>batch</b> <b>machines</b> which can simultaneously process multiple jobs. This paper aims to extend the game theoretical approach to the cost allocation problems arising from sequencing situations on systems that consist of <b>batch</b> <b>machines.</b> We first consider sequencing situations with a single <b>batch</b> <b>machine</b> and analyze cooperative games arising from these situations. It is shown that these games are convex and an expression for the Shapley value of these games is provided. We also introduce an equal gain splitting rule for these sequencing situa- tions and provide an axiomatic characterization. Second, we analyze various aspects of flow-shop sequencing situations which consist of <b>batch</b> <b>machines</b> only. In particular, we provide two {{cases in which the}} cooperative game arising from the flow-shop sequencing situation is equal to the game arising from a sequencing situation that corresponds to one specific machine in the flow-shop. ...|$|R
40|$|Colloque avec actes et comité de lecture. internationale. International audienceWe study {{a problem}} of {{scheduling}} $n$ tasks in a no-wait flowshop consisting of two batching machines. Each task has to be processed by both machines. All tasks visit the machines in the same order. Batching machines can process several tasks in batch so that all tasks of the same batch start and complete together. The processing time of a batch on the first <b>batching</b> <b>machine</b> {{is equal to the}} maximal processing time of the tasks in this batch, and on the second <b>batching</b> <b>machine</b> is equal to the sum of the processing time of tasks in this batch. We assume that the capacity of any batch on the fist machine is bounded, and when a batch is completed on an upstream machine should immediately transferred to the dowstream machine. The aim is to make batching and sequencing decisions so that the makespan is minimized. We prove that the makespan minimization is NP-Hard in strong sense, and we give some well solvable cases...|$|E
40|$|We {{consider}} {{the problem of}} scheduling family jobs with release dates on a bounded <b>batching</b> <b>machine</b> to minimize the makespan. A polynomial-time approximation scheme for the identical job size model and an approximation algorithm with a worst-case ratio of 5 / 2 for the non-identical job size model will be derived. Department of Logistics and Maritime StudiesAuthor name used in this publication: C. T. NgAuthor name used in this publication: T. C. E. Chen...|$|E
40|$|We {{present a}} new type of {{formulation}} for scheduling problems where jobs are identical in all aspects but one This type of formulation is particularly useful for deriving Lagrangian lower and upper bounds for owshop problems where the jobs only dier in their processing times We illustrate the eectiveness of this type of formulation for a twomachine owshop problem where the rst machine is a <b>batching</b> <b>machine</b> that executes the jobs in constant time Mathematics Subject Classication Revision...|$|E
40|$|We {{consider}} {{the control of}} a <b>batch</b> processing <b>machine</b> {{which is part of}} a larger manufacturing network of machines. Systems consisting of a <b>batch</b> processing <b>machine</b> and one or more unit-capacity machines in tandem are considered. The objective is to minimize the average time that jobs spend in the entire system. We present algorithms to determine the optimal policies for certain finite horizon, deterministic problems. We then discuss the structure of the optimal policies for infinite horizon, stochastic problems, and investigate the benefit of utilizing information about upstream and downstream unit-capacity machines in the control of the <b>batch</b> <b>machine.</b> We develop a simple heuristic scheduling policy to control the <b>batch</b> <b>machine</b> which takes into account the state of other machines in the network. Computational results demonstrate the effectiveness of our heuristic over a wide range of problem instances...|$|R
40|$|International audienceIn this abstract, we {{consider}} makespan minimization in the twostage hybrid flowshop. The first stage contains several identical machines {{and the second}} stage contains several <b>batching</b> <b>machines.</b> Processing time of each task is given by an interval on <b>batching</b> <b>machines,</b> and tasks of a same batch have to share a common processing time. We present two branch and bound methods to solve this problem. Direct method solves the previous problem, whereas reverse method solves the reversed problem. Several computational experiments {{will be presented to}} show the efficiency of our method...|$|R
40|$|Game theoretic {{analysis}} of sequencing situations has been restricted to manufacturing systems which consist of machines that can process only one {{job at a}} time. However, in many manufacturing systems, operations are carried out by <b>batch</b> <b>machines</b> which can simultaneously process multiple jobs. This paper aims to extend the game theoretical approach to the cost allocation problems arising from sequencing situations on systems that consist of <b>batch</b> <b>machines.</b> To analyze the allocation problem at hand, it focusses {{on the existence of}} core elements, convexity, and the Shapley value...|$|R
40|$|We {{address the}} problem of {{scheduling}} n jobs on a <b>batching</b> <b>machine</b> to minimize regular scheduling criteria that are nondecreasing in the job completion times A <b>batching</b> <b>machine</b> is a machine that can handle up to b jobs simultaneously The jobs that are processed together form a batch and all jobs in a batch start and complete at the same time The processing time of a batch is equal to the largest processing time of any job in the batch We analyze two variants the unbounded model where b n and the bounded model where b n For the unbounded model we give a characterization of a class of optimal schedules which leads to a generic dynamic programming algorithm that solves the problem of minimizing an arbitrary regular cost function in pseudopolynomial time The characterization leads to more ecient dy namic programming algorithms for specic cost functions a polynomial algorithm for minimizing the maximum cost an On time algorithm for minimizing the number of tardy jobs an On time algorithm for minimizing the maximum lateness and an On logn time algorithm for mini mizing the total weighted completion time Furthermore we prove that minimizing the weighte...|$|E
40|$|We {{study the}} {{problems}} of scheduling jobs, with dierent release dates and equal processing times, on two types of batching machines. All jobs of the same batch start and are completed simultaneously. On a serial <b>batching</b> <b>machine,</b> {{the length of a}} batch equals the sum of the processing times of its jobs and, when a new batch starts, a constant setup time s occurs. On a parallel <b>batching</b> <b>machine,</b> there at most b jobs per batch and the length of a batch is the largest processing time of its jobs. We show that in both environments, for a large class of so called " objective functions, the problems are polynomially solvable by dynamic programming. This allows us to derive that the problems where the objective is to minimize the weighted number of late jobs, or the weighted ow time, or the total tardiness, or the maximal tardiness are polynomial. In other words, we show that 1 jp- batch; b < n; r i; p i = pjF and 1 js-batch; r i; p i = pjF, are polynomial for F 2 f P [...] ...|$|E
40|$|We {{consider}} {{the problem of}} scheduling n deteriorating jobs with release dates on a single <b>batching</b> <b>machine.</b> Each job's processing time is an increasing simple linear function of its starting time. The machine can process up to b jobs simultaneously as a batch. The objective is to minimize the maximum completion time, i. e., makespan. For the unbounded model, i. e., b = [infinity], we obtain an O(n log n) dynamic programming algorithm. For the bounded model, i. e., b Scheduling Batching Deterioration Release dates Dynamic programming...|$|E
40|$|AbstractWe {{study the}} online batch {{scheduling}} problem on parallel machines with delivery times. Online algorithms are designed on m parallel <b>batch</b> <b>machines</b> {{to minimize the}} time by which all jobs have been delivered. When all jobs have identical processing times, we provide the optimal online algorithms for both bounded and unbounded versions of this problem. For the general case of processing time on unbounded <b>batch</b> <b>machines,</b> an online algorithm with a competitive ratio of 2 is given {{when the number of}} machines m= 2 or m= 3, respectively. When m≥ 4, we present an online algorithm with a competitive ratio of 1. 5 +o(1) ...|$|R
40|$|This paper {{presents}} a constraint programming approach for a <b>batch</b> processing <b>machine</b> {{on which a}} finite number of jobs of non-identical sizes must be sched-uled. A <b>batch</b> processing <b>machine</b> can process several jobs simultaneously. Such machines are encountered in chemical, pharmaceutical, aeronautical and semi...|$|R
40|$|AbstractIn this paper, we {{consider}} the unbounded parallel <b>batch</b> <b>machine</b> scheduling with release dates and rejection. A job is either rejected with a certain penalty having to be paid, or accepted and processed in batches on the parallel <b>batch</b> <b>machine.</b> The processing time of a batch {{is defined as the}} longest processing time of the jobs contained in it. The objective is to minimize the sum of the makespan of the accepted jobs and the total rejection penalty of the rejected jobs. We show that this problem is binary NP-hard and provide a pseudo-polynomial-time algorithm. When the jobs have the same rejection penalty, the problem can be solved in polynomial time. Finally, a 2 -approximation algorithm and a fully polynomial-time approximation scheme are given for the problem...|$|R
40|$|International audienceWe {{consider}} a two-stage hybrid flowshop scheduling problem where each of n tasks {{is to be}} processed first at stage 1 and then at stage 2. The first stage contains m_ 1 identical parallel discrete machines and the second stage contains m_ 2 identical parallel batching machines. Each discrete machine can process {{no more than one}} task at time and each <b>batching</b> <b>machine</b> can process up to k tasks simultaneously in batch. The processing time of task j on any machine of stage one requires p_j time units and on any machine of stage two requiers q_j time units, which is given by the interval [a_j,b_j]. On the second stage the tasks are processed in batch and all tasks of the same batch start and finish together with the additional constraint that the tasks of the same batch have to be compatible. A compatibility is a symmetric binary relation in which a pair (i,j) of tasks is compatible if they share a similar processing time on the second machine (i. e, [a_i, b_i] ∩ [a_j, b_j] ≠∅). The batch processing time on the <b>batching</b> <b>machine</b> is determined as the maximum initial value a_j of compatible tasks. The objective is to find a schedule such that the completion time of the latest batch is minimized...|$|E
40|$|We {{present a}} new type of {{formulation}} for scheduling problems where jobs are identical in all aspects but one. ?? This type of formulation is particularly useful for deriving Lagrangian lower and upper bounds for ??flowshop problems??, where the jobs only differ in their processing times. ?? We illustrate the effectiveness of this type of formulation for a two??-machine fl??owshop problem where the fi??rst machine is a <b>batching</b> <b>machine</b> that executes the jobs in constant time??. Keywords and Phrases:?? machine scheduling problems,?? mathematical formulation??, positional completion times??, batching,?? fl??ow shop scheduling,?? total completion time??, Lagrangian relaxation??...|$|E
40|$|AbstractThis paper {{studies the}} bicriteria problem of {{scheduling}} n jobs on a <b>batching</b> <b>machine</b> to minimize maximum lateness and makespan simultaneously. A parallel-batching machine is {{a machine that}} can handle up to b jobs in a batch. The jobs in a batch start and complete at the same time, respectively, and the processing time of a batch {{is equal to the}} largest processing time of jobs in the batch. We analyse the unbounded model, where b≥n. We present a polynomial-time algorithm for finding all Pareto optimal solutions of this bicriteria scheduling problem...|$|E
40|$|This paper {{considers}} a production line with two unreliable <b>batch</b> <b>machines</b> and a finite buffer. <b>Batch</b> <b>machines</b> process {{a set of}} parts simultaneously; the maximum number in the set {{is the size of}} the machine. The {{purpose of this paper is}} twofold: (i) to present a model of this system and its exact analysis; (ii) to present new qualitative insights and interpretations of system behavior. We demonstrate new generalized conservation of flow and flow rate-idle time relationships. We also present various performance measures of interest such as production rate, machine efficiencies, probabilities of blocking and starvation, and expected in-process inventory. We demonstrate an equivalence property and describe deadlock behavior. The effect of the sizes of machines on the performance measures is examined, new phenomena and insights are established, and possible interpretations are presented. ...|$|R
5000|$|<b>Batch</b> coding <b>machines</b> are {{categorized}} in {{the following}} two categories; ...|$|R
40|$|International audienceThis paper {{deals with}} the problem of task {{scheduling}} in a no-wait flowshop with two <b>batching</b> <b>machines.</b> Each task has to be processed by both machines. All tasks visit the machines in the same order. <b>Batching</b> <b>machines</b> can process several tasks per batch so that all tasks of the same batch start and complete together. The batch processing time for the first machine is equal to the maximal processing time of the tasks in this batch, and for the second machine is equal to the sum of the processing times of the tasks in this batch. We assume that the capacity of any batch on the first machine is bounded, and that when a batch is completed on the first machine it is immediately transferred to the second machine. The aim is to make batching and sequencing decisions that allow the makespan to be minimized...|$|R
40|$|C'est un résumé qui a été présenté à la conférence MAPSP 07, en une partie nommé IntroductionInternational audienceWe {{consider}} a two-stage hybrid flowshop scheduling problem where each of n tasks {{is to be}} processed first at stage 1 and then at stage 2. The first stage contains m_ 1 identical parallel discrete machines and the second stage contains m_ 2 identical parallel batching machines. Each discrete machine can process {{no more than one}} task at time and each <b>batching</b> <b>machine</b> can process up to k tasks simultaneously in batch. The processing time of task j on any machine of stage one requires p_j time units and on any machine of stage two requiers q_j time units, which is given by the interval [a_j,b_j]. On the second stage the tasks are processed in batch and all tasks of the same batch start and finish together with the additional constraint that the tasks of the same batch have to be compatible. A compatibility is a symmetric binary relation in which a pair (i,j) of tasks is compatible if they share a similar processing time on the second machine (i. e, [a_i, b_i] ∩ [a_j, b_j] ≠∅). The batch processing time on the <b>batching</b> <b>machine</b> is determined as the maximum initial value a_j of compatible tasks. The objective is to find a schedule such that the completion time of the latest batch is minimized...|$|E
40|$|AbstractIn this paper, we {{consider}} the problem of scheduling with release dates and rejection on a single parallel <b>batching</b> <b>machine,</b> where the jobs have non-identical sizes. Our objective is to minimize the makespan of the accepted jobs plus the total penalty of the rejected jobs. First, we give a polynomial time approximation scheme (PTAS) for the case where jobs can be split. Then, we propose a 2 -approximation algorithm for the special case with identical release dates. Finally, we present an approximation algorithm for the general problem with worst-case ratio 2 +ϵ, where ϵ> 0 is an arbitrarily small constant...|$|E
40|$|International audienceWe study a {{scheduling}} problem, {{in which}} two agents compete to perform their jobs on the same serial <b>batching</b> <b>machine.</b> On this machine, jobs of the same batch start and complete simultaneously and the batch processing time {{is equal to the}} total processing time of its jobs. Each agent aims at minimizing a function which depends only on the completion times of its jobs. The problem is to find a schedule that minimizes the objective function of one agent, subject to the objective function of the other agent does not exceed a given threshold Q. Polynomial and pseudo-polynomial time algorithms are derived for settings with various combinations of the objective functions...|$|E
40|$|Im Werkzeugmaschinenbau m zahlreiche Auftr 4 ge simultan in einem mehrstufigen Produktionsprozess gefertigt werden. Infolge kundenspezifischer Anforderungen sind die Losgr 6 sehr klein. Ein Arbeitsplan spezifiziert das ben 6 tigte Personal und die erforderlichen Maschinen. Das hier betrachtete Problem h 4 ngt eng zusammen mit der Mehr-Projekt Multi-Ressourcenplanung. Wir beschreiben die wesentlichen Komponenten des PRISMA-Systems (PRoduction Improvement in Small <b>Batch</b> <b>Machine</b> Tool Assembly), einem prototypischen DSS-Leitstand. PRISMA ist infolge seiner Schnittstellen zu PPS- und BDE-Systemen integraler Bestandteil einer CIM-Umgebung. Neben leistungsf 4 higen Methoden zur Ablaufsteuerung enth 4 lt das System ein Modul zur integrierten Fl 4 chenbelegungsplanung sowie ein Modul zur Unterst des Materialmanagement. In {{machine tool}} {{assembly}} several make-to-order products {{have to be}} manufactured simultaneously in a multi-stage production system. Due to customer requirements batches are very small. A process plan specifies the requirements for machines, tools, auxiliary devices as well as operations to be performed. We consider the small <b>batch</b> <b>machine</b> tool assembly problem with alternative process plans and multiple resource-constraints. This problem basically relates to nonpreemptive multi-project multi-mode resource-constrained project scheduling. We describe the main features of the PRISMA-system (PRoduction Improvement in Small <b>Batch</b> <b>Machine</b> Tool Assembly), a prototype DSS-leitstand. PRISMA {{is an integral part}} of a CIM-environment due to its interfaces to MRP- as well as factory data collection-systems. Besides advanced scheduling components the system provides an integrated ordering component as well as an integrated layout component...|$|R
40|$|Abstract We {{consider}} {{the problem of}} minimizing the makespan(Cmax) on m identical parallel <b>batch</b> processing <b>machines.</b> The <b>batch</b> processing <b>machine</b> can process up to B jobs simultaneously. The jobs that are processed together form a batch, and all jobs in a batch start and complete at the same time. For a batch of jobs, the processing time of the batch {{is equal to the}} largest processing time among the jobs in the batch. In this paper, we design a fully polynomial time approximation scheme (FPTAS) to solve the bounded identical parallel batch scheduling problem Pm|B < n|Cmax when the number of identical parallel <b>batch</b> processing <b>machines</b> m is constant...|$|R
40|$|AbstractWe {{consider}} the online scheduling on two parallel <b>batch</b> <b>machines</b> with infinite <b>batch</b> size to minimize makespan, where jobs arrive over time. That is, all information {{of a job}} is not available until it is released. For this online scheduling problem, Nong et al. [Q. Q. Nong, T. C. E. Cheng, C. T. Ng, An improved online algorithm for scheduling on two unrestrictive parallel <b>batch</b> processing <b>machines,</b> Operations Research Letters, 36 (2008) 584 – 588] have provided an online algorithm with competitive ratio no greater than 2. We show that this bound is tight for the problem. Furthermore we give a new best possible online algorithm with a tighter structure...|$|R
