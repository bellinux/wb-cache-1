275|51|Public
5|$|To {{make the}} <b>boot</b> <b>loader</b> {{appealing}} to other operating system developers, Apple added features to allow {{flexibility in the}} booting process such as network boot using TFTP and load Mach-O and ELF formatted kernels. BootX can also boot from HFS, HFS+, UFS and ext2 formatted volumes. The <b>boot</b> <b>loader</b> can be manipulated at startup by holding down various key combinations to alter the booting process. Such functions include Verbose Mode, achieved by holding down the Command and V key at startup, which replaces the default Apple logo with text-based information on the boot process and Single User Mode, achieved by holding down the Command and S, which, depending on the operating system, may boot into a more basic command-line or text-based version of the operating system, to facilitate maintenance and recovery action. The ROM can also be set to require a password to access these technical functions using the OpenFirmware interface.|$|E
25|$|The Hurd {{requires}} a multiboot-compliant <b>boot</b> <b>loader,</b> such as GRUB.|$|E
25|$|If the <b>boot</b> <b>loader</b> timeout {{option in}} boot.ini {{is set to}} 0, the NTLDR boot menu does not appear.|$|E
50|$|Some {{conditions}} can be relaxed in controlled environments, for example, some <b>boot</b> <b>loaders</b> today assume to {{have up to}} 128 KB of memory to work with in normal operation (without querying for more), and some <b>boot</b> <b>loaders</b> using LBA access assume at least an Intel 80188 or 80186 CPU.|$|R
5000|$|Full {{compatibility}} with third party <b>boot</b> <b>loaders</b> (LILO, GRUB, etc.).|$|R
5000|$|... {{will be the}} <b>boot</b> <b>loader's</b> choice {{if nothing}} else {{overrides}} this ...|$|R
25|$|Extreme caution {{should be}} taken when modifying the <b>boot</b> <b>loader,</b> as {{erroneous}} information can result in an OS that fails to boot.|$|E
25|$|Windows 95 {{was able}} to reduce the role of MS-DOS in Windows much further than had been done in Windows 3.1x and earlier. According to Microsoft {{developer}} Raymond Chen, MS-DOS served two purposes in Windows 95: as the <b>boot</b> <b>loader,</b> and as the 16-bit legacy device driver layer.|$|E
25|$|The first {{reserved}} sector (logical sector 0) is the Boot Sector (also called Volume Boot Record {{or simply}} VBR). It includes an area called the BIOS Parameter Block (BPB) which contains some basic file system information, in particular its type and pointers {{to the location}} of the other sections, and usually contains the operating system's <b>boot</b> <b>loader</b> code.|$|E
5000|$|Read-only <b>boot</b> <b>loaders</b> keep {{data from}} being altered or deleted during a {{physical}} extraction.|$|R
50|$|The {{following}} tables compare {{general and}} technical information {{for a number}} of available <b>boot</b> <b>loaders.</b>|$|R
5000|$|... well {{documented}} building blocks so user allowed {{to write his}} own <b>boot</b> <b>loaders</b> and kernels.|$|R
25|$|NTLDR (abbreviation of NT loader) is the <b>boot</b> <b>loader</b> for all {{releases}} of Windows NT operating system {{up to and}} including Windows XP and Windows Server 2003. NTLDR is typically run from the primary hard disk drive, but it can also run from portable storage devices such as a CD-ROM, USB flash drive, or floppy disk. NTLDR can also load a non NT-based operating system given the appropriate boot sector in a file.|$|E
25|$|While {{many other}} vendors have {{continued}} to utilize a single-sector setup (logical sector 0 only) for the bootstrap loader, Microsoft's boot sector code has grown to span over logical sectors 0 and 2 since the introduction of FAT32, with logical sector 0 depending on sub-routines in logical sector 2. The Backup Boot Sector area consists of three logical sectors 6, 7, and 8 as well. In some cases, Microsoft also uses sector 12 of the reserved sectors area for an extended <b>boot</b> <b>loader.</b>|$|E
25|$|The startup {{process for}} Windows Vista has changed {{completely}} {{in comparison to}} earlier versions of Windows. The NTLDR <b>boot</b> <b>loader</b> {{has been replaced by}} a more flexible system, with NTLDR's functionality split between two new components: winload.exe and Windows Boot Manager. A notable change is that the Windows Boot Manager is invoked by pressing the space bar instead of the F8 function key. The F8 key still remains assigned for advanced boot options once the Windows Boot Manager menu appears.|$|E
50|$|Some {{operating}} systems {{do not require}} any translation {{because they do not}} use geometry reported by BIOS in their <b>boot</b> <b>loaders.</b> Among these {{operating systems}} are BSD, Linux, macOS, OS/2 and ReactOS.|$|R
50|$|In modern live CDs, a {{read-only}} {{file system}} is merged with a RAM drive using transparent {{techniques such as}} UnionFS, AuFS or EWF. <b>Boot</b> <b>loaders</b> like syslinux can boot ISO files from USB memory devices.|$|R
50|$|Other <b>boot</b> <b>loaders</b> used by {{third-party}} boot managers (such as GRUB or XOSL) can {{be installed}} to a master boot record and can boot primary or extended partitions, which {{do not have the}} boot flag set.|$|R
500|$|... iBoot <b>boot</b> <b>loader</b> on Mac OS X {{is located}} in /System/Library/CoreServices/boot.efi. Once the kernel and all drivers {{necessary}} for booting are loaded, the <b>boot</b> <b>loader</b> starts the kernelâ€™s initialization procedure. At this point, enough drivers are loaded for the kernel to find the root device.|$|E
2500|$|All the {{above-mentioned}} projects, {{when they are}} able to boot/install more than one OS, work under a [...] "Boot Manager - Boot Loader" [...] paradigm. The initial NBP is a Boot Manager able to retrieve its own configuration and deploy a menu of booting options. The user selects a booting option and an OS dependent <b>Boot</b> <b>Loader</b> is downloaded and run in order to continue with the selected specific booting procedure.|$|E
2500|$|An {{example of}} such an attack on disk {{encryption}} is the [...] "Evil Maid Attack", in which an attacker installs a bootkit on an unattended computer, replacing the legitimate <b>boot</b> <b>loader</b> with one under their control. Typically the malware loader persists through the transition to protected mode when the kernel has loaded, and is thus able to subvert the kernel. For example, the [...] "Stoned Bootkit" [...] subverts the system by using a compromised <b>boot</b> <b>loader</b> to intercept encryption keys and passwords. More recently, the Alureon rootkit has successfully subverted the requirement for 64-bit kernel-mode driver signing in Windows 7 by modifying the master boot record. Although not malware {{in the sense of}} doing something the user doesn't want, certain [...] "Vista Loader" [...] or [...] "Windows Loader" [...] software works in a similar way by injecting an ACPI SLIC (System Licensed Internal Code) table in the RAM-cached version of the BIOS during boot, in order to defeat the Windows Vista and Windows 7 activation process. This vector of attack was rendered useless in the (non-server) versions of Windows 8, which use a unique, machine-specific key for each system, that can only be used by that one machine. Many antivirus companies provide free utilities and programs to remove bootkits.|$|E
50|$|A BIOS boot {{partition}} {{is needed}} because GPT uses the disk sectors {{immediately following the}} Master Boot Record (MBR) to hold the actual partition table, whereas the traditional MBR-based partitioning scheme does not designate them for any special purpose. As a result, {{there is not enough}} unused space available for storing second stages of <b>boot</b> <b>loaders</b> on GPT disks; <b>boot</b> <b>loaders</b> are usually implemented so their code stored within the MBR, which cannot hold more than 512 bytes, operates as a first stage that serves primarily to load a more sophisticated second stage, which is, for example, capable of reading and loading an operating system kernel from a file system.|$|R
50|$|The SYSLINUX Project is a {{suite of}} {{lightweight}} master boot record (MBR) <b>boot</b> <b>loaders</b> for starting up IBM PC compatible computers with the Linux kernel. Primarily developed by H. Peter Anvin, the SYSLINUX bundle consists of several separate systems used for different purposes, including ISOLINUX, PXELINUX and EXTLINUX.|$|R
50|$|One {{possible}} {{approach for}} <b>boot</b> <b>loaders</b> to load kernel images is by directly accessing hard disk sectors without understanding the underlying file system. Usually, additional level of indirection is required, {{in form of}} maps or map files auxiliary files that contain a list of physical sectors occupied by kernel images. Such maps need to be updated each time a kernel image changes its physical location on disk, due to installing new kernel images, file system defragmentation etc. Also, in case of the maps changing their physical location, their locations need to be updated within the <b>boot</b> <b>loader's</b> MBR code, so the sectors indirection mechanism continues to work. This is not only cumbersome, but it also leaves the system in need of manual repairs in case something goes wrong during system updates.|$|R
2500|$|The DOS Plus {{adaptation}} for the BBC Master 512 supported two FAT12 formats on 80-track, double-sided, double-density 5.25" [...] drives, {{which did}} not use conventional boot sectors at all. 800 KB data disks omitted a boot sector and began with a single copy of the FAT. The first byte of the relocated FAT in logical sector 0 {{was used to determine}} the disk's capacity. 640 KB boot disks began with a miniature ADFS file system containing the <b>boot</b> <b>loader,</b> followed by a single FAT. Also, the 640 KB format differed by using physical CHS sector numbers starting with 0 (not 1, as common) and incrementing sectors in the order sector-track-head (not sector-head-track, as common). The FAT started {{at the beginning of the}} next track. These differences make these formats unrecognizable by other operating systems. The geometry parameters for these formats are: ...|$|E
2500|$|The DEC Rainbow 100 (all variations) {{supported}} one FAT12 format on 80-track, single-sided, quad-density 5.25" [...] drives. The {{first two}} tracks were {{reserved for the}} <b>boot</b> <b>loader,</b> but didn't contain an MBR nor a BPB (MS-DOS used a static in-memory BPB instead). The boot sector (track 0, side 0, sector 1) was Z80 code beginning with DI 0xF3. The 8088 bootstrap was loaded by the Z80. Track 1, side 0, sector 2 starts with the Media/FAT ID byte 0xFA. Unformatted disks use 0xE5 instead. The file system starts on track 2, side 0, sector 1. There are 2 copies of the FAT and 96 entries in the root directory. In addition, there is a physical to logical track mapping to effect a 2:1 sector interleaving. The disks were formatted with the physical sectors in order numbered 1 to 10 on each track after the reserved tracks, but the logical sectors from 1 to 10 were stored in physical sectors 1, 6, 2, 7, 3, 8, 4, 9, 5, 10.|$|E
2500|$|Within a year Microsoft {{licensed}} MS-DOS to over 70 other companies. It {{was designed}} to be an OS that could run on any 8086-family computer. Each computer would have its own distinct hardware and its own version of MS-DOS, similar to the situation that existed for CP/M, and with MS-DOS emulating the same solution as CP/M to adapt for different hardware platforms. To this end, MS-DOS was designed with a modular structure with internal device drivers, minimally for primary disk drives and the console, integrated with the kernel and loaded by the <b>boot</b> <b>loader,</b> and installable device drivers for other devices loaded and integrated at boot time. The OEM would use a development kit provided by Microsoft to build a version of MS-DOS with their basic I/O drivers and a standard Microsoft kernel, which they would typically supply on disk to end users along with the hardware. Thus, there were many different versions of [...] "MS-DOS" [...] for different hardware, and there is a major distinction between an IBM-compatible (or ISA) machine and an MS-DOS [...] machine. [...] Some machines, like the Tandy 2000, were MS-DOS compatible but not IBM-compatible, so they could run software written exclusively for MS-DOS without dependence on the peripheral hardware of the IBM PC architecture.|$|E
50|$|In simple layouts, {{programs}} {{begin their}} execution at the beginning, which {{is common in}} scripting languages, simple binary executable formats, and <b>boot</b> <b>loaders.</b> In other cases, the entry point is at some other fixed point, which is some memory address than can be an absolute address or relative address (offset).|$|R
50|$|However, WDS {{automated}} {{capture and}} apply {{can be used}} to duplicate and create dual-boot systems, if each OS is captured and applied separately. Generally, Windows XP and older operating systems need to be applied to the target system before Vista or Windows 7, due to the different <b>boot</b> <b>loaders</b> used by the newer operating systems.|$|R
2500|$|When <b>booting,</b> the <b>loader</b> {{portion of}} NTLDR does the {{following}} in order: ...|$|R
5000|$|Quik (<b>boot</b> <b>loader),</b> a {{replacement}} <b>boot</b> <b>loader</b> for Old World PCI systems ...|$|E
50|$|The {{contents}} {{are mostly}} Linux kernel files or <b>boot</b> <b>loader</b> files, {{depending on the}} <b>boot</b> <b>loader,</b> most commonly (on Linux) LILO or GRUB.|$|E
5000|$|A <b>boot</b> <b>loader</b> is a {{computer}} program that loads an operating system or some other system software for the computer after completion of the power-on self-tests; it is the loader for the operating system itself. Within the hard reboot process, it runs after completion of the self-tests, then loads and runs the software. A <b>boot</b> <b>loader</b> is loaded into main memory from persistent memory, such as a hard disk drive or, in some older computers, from a medium such as punched cards, punched tape, or magnetic tape. The <b>boot</b> <b>loader</b> then loads and executes the processes that finalize the boot. Like POST processes, the <b>boot</b> <b>loader</b> code comes from a [...] "hard-wired" [...] and persistent location; if that location is too limited for some reason, that primary <b>boot</b> <b>loader</b> calls a second-stage <b>boot</b> <b>loader</b> or a secondary program loader.|$|E
50|$|The {{variety of}} output formats allows {{retargeting}} programs to virtually any x86 operating system (OS). Also, NASM can create flat binary files, usable to write <b>boot</b> <b>loaders,</b> read-only memory (ROM) images, and in various facets of OS development. NASM can run on non-x86 platforms, such as PowerPC and SPARC, though it cannot generate programs usable by those machines.|$|R
50|$|Generally this {{is harder}} to achieve because the device {{original}} equipment manufacturer needs to secure against arbitrary reading of memory; therefore, a device may be locked to a certain operator. To get around this security, mobile forensics tool vendors often develop their own <b>boot</b> <b>loaders,</b> enabling the forensic tool to access the memory (and often, also to bypass user passcodes or pattern locks).|$|R
50|$|An ESP {{contains}} the <b>boot</b> <b>loaders</b> or kernel images for all installed operating systems (which {{are contained in}} other partitions), device driver files for hardware devices present in a computer and used by the firmware at boot time, system utility programs that are intended to be run before an operating system is booted, and data files such as error logs.|$|R
