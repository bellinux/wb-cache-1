1|10000|Public
40|$|A user {{interface}} description is an abstract model {{that is used}} to describe the structure of a dialogue between a user and an interactive computer system. It forms the <b>basis</b> <b>of</b> <b>notation</b> that are used in {{user interface}} management systems. In this paper three classes of description formalisms are investigated. These classes are single-threaded representations (state-transition-diagram and grammar based specifications), multi-threaded representation (events, state charts based specifications) and concurrent dialogue representations (Petri nets and Process Calculus based specifications). Formal definitions of all the models are presented along-with algorithms for converting the notions into executable forms, which are used in various User Interface Management Systems. An evaluation method is presented and the implication of the results for the design and implementation of UIMs are also discussed. i Contents 1 Introduction 1 2 Description Formalisms 1 2. 1 Single-threaded description form [...] ...|$|E
30|$|The {{mathematical}} model {{in this paper}} is developed on the <b>basis</b> <b>of</b> the following <b>notation</b> and assumptions.|$|R
50|$|A <b>basis</b> <b>of</b> the <b>notation</b> is that {{behavior}} is always associated with some component. Component-states which represent nodes of behavior are composed sequentially or concurrently {{to construct a}} behavior tree that represents the behavior expressed in the natural language requirements. A behavior tree with leaf nodes may revert (symbolized by adding the caret operator ^) to an ancestor node to repeat behavior, or start a new thread (symbolized by two carets ^^).|$|R
5|$|At {{that time}} there was dispute {{regarding}} the difference between rational numbers and irrational numbers {{and there was no}} consistency {{in the way in which}} decimal fractions were represented. In 1586, Simon Stevin published a small pamphlet called De Thiende ("the tenth") which historians credit as being the <b>basis</b> <b>of</b> modern <b>notation</b> for decimal fractions. Stevin felt that this innovation was so significant that he declared the universal introduction of decimal coinage, measures, and weights to be merely a question of time.|$|R
5000|$|Circular layouts are a {{good fit}} for {{communications}} network topologies such as star or ring networks, [...] and for the cyclic parts of metabolic networks. For graphs with a known Hamiltonian cycle, a circular layout allows the cycle to be depicted as the circle, and in this way circular layouts form the <b>basis</b> <b>of</b> the LCF <b>notation</b> for Hamiltonian cubic graphs.|$|R
40|$|Abstract. Euler {{diagrams}} {{have been}} used for centuries as a means for conveying logical statements in a simple, intuitive way. They form the <b>basis</b> <b>of</b> many diagrammatic <b>notations</b> used to represent set-theoretic relationships {{in a wide range of}} contexts including software modelling, logical reasoning systems, statistical data representation, database search queries and file system management. In this paper we survey notations based on Euler diagrams with particular emphasis on formalization and the development of software tool support...|$|R
40|$|Euler Diagrams are a {{well-known}} visualisation of set-based relationships, {{used in many}} application areas and at the <b>basis</b> <b>of</b> more complex <b>notations.</b> We propose a static code for concrete Euler Diagrams, which enables efficient storage (vs. storage of concrete diagrams), and transformations preserving concrete-level structure, hence the viewer’s mental map. We provide the theoretical underpinnings of the encoding, examples and deductions, and an indication of their utility. For use in an interactive setting, we provide algorithms to update the code upon curve addition and removal. Independently, we show that the code identifies minimal regions, enabling the computation of the abstract zone set...|$|R
40|$|The {{aim of the}} {{research}} was to conduct a cryptographic analysis of an encryption scheme developed on the <b>basis</b> <b>of</b> nonpositional polynomial <b>notations</b> to estimate the algorithm strength. Nonpositional polynomial notations (NPNs) are residue number systems (RNSs) based on irreducible polynomials over GF(2). To evaluate if the algorithms developed on the <b>basis</b> <b>of</b> NPNs are secure, mathematical models of cryptanalysis involving algebraic, linear and differential methods have been designed. The cryptanalysis is as follows. A system of nonlinear equations is obtained from a function transforming plaintext into ciphertext with a key. Next, a possibility of transition of the nonlinear system to a linear one is considered. The cryptanalysis was conducted for the cases with known: 1) ciphertext; 2) plaintext and the related ciphertext; 3) plaintext file format; and 4) ASCII-encoded plaintext...|$|R
40|$|Approach to {{synthesis}} of modular {{structure of a}} subsystem of information security of the automated process control system is offered. The task has been solved on the <b>basis</b> <b>of</b> a set-theoretic <b>notation</b> with elements <b>of</b> the graph theory. The graph model constructed thus will be used further during the setting and {{the decision of the}} task of {{synthesis of}} the optimum conceptual diagram of modular structure. Thus, we can conclude that graph theory is widely applied {{in the design of the}} information space of the organization and can be used at all stages – from the formation of the it strategy and building it infrastructure to optimize specific software tools subsystem of information security...|$|R
40|$|The {{attribution}} of this love song to the troubadour from Rouergue, Daude de Pradas, {{according to the}} only Occitan testimony, i. e. song-book C, was considered impossible or at least suspicious by many scholars for {{the mere fact that}} its first verse is quoted, as a ‘chançon auvrignace’, in the “Roman de la Rose” (or Guillaume de Dole) attributed to Jean Renart and initially dated to the earliest years of the XIIIth century. However, {{in the light of the}} recent dating of Daude’s poetic activity between 1191 and 1242, the chronological criterion alone cannot resolve the issue of attribution. This paper, where a more conservative edition of the text than that by C. Appel (1890) is proposed, will now present for the first time codicological – i. e. order and sources of Daude’s section in Ms. C – as well as metrical, stylistic and musical data, on the <b>basis</b> <b>of</b> the <b>notation</b> present in Ms. W. The discussion leads to the hypothesis that the song might be the work of an author belonging to the group of Marcabru’s imitators and therefore relatively early (third quarter of the XIIth century), setting aside the isolated attribution to Daude de Pradas...|$|R
40|$|The paper {{presents}} selected {{problems of}} visualizing animated sign language sentences in real time. The presented solution {{is a part}} of a system for translation of texts into the sign language. The animation and graphical techniques applied in the system are briefly presented, but the main problems discussed are: how to specify the sign language and how to interpret such a specification. A concise, easy-to-use Szczepankowski's gestographic notation has been adopted. It is widely used in the Polish deaf community. It has been originally intended to be used by humans; thus a part of information it holds is incomplete, inexact, in many cases highly intuitive. The automatic interpretation has to reconstruct all the information that lacks. Another group of problems we have encountered involves issues of kinematics: the motion is to be generated depending on the information that is very general. Techniques like reverse kinematics and collision detecting and avoiding have to be applied. In effect the system is capable to demonstrate gestures as well as whole sentences on the <b>basis</b> <b>of</b> the <b>notation,</b> that is easy for humans to create and to read...|$|R
40|$|Euler {{diagrams}} {{form the}} <b>basis</b> <b>of</b> many diagrammatic <b>notations</b> {{used to represent}} set theoretic relationships {{in a wide range}} of contexts including: file system information, statistical data representation, object-oriented modeling, logical specification and reasoning systems, and database search queries. An abstract Euler diagram is a formal abstract description of the information that is to be displayed as a concrete (or drawn) Euler diagram. If the abstract diagram can be visualized, whilst satisfying certain desirable visual properties (called well-formedness conditions), then we say the diagram is drawable. We solve the drawability problem for a given set of well-formedness conditions, identifying the properties which classify a diagram as drawable or undrawable. Furthermore, we present a high level algorithm which enables the generation of a concrete diagram from an abstract diagram, whenever it is drawable...|$|R
50|$|The {{disposition}} of the material in al-Ḥāwi (here quoted from the Hyderabad edition) generally follows the traditional order: localized diseases and their therapy from the crown of the head to the sole of the feet (men al-qarn ela’l-qadam, vols. 1-10); worms, gout, etc. (vol. 11); external lesions and their treatment (vols. 12-13); fevers (vols. 14-16); acute diseases (vol. 17); crises (vol. 18); uroscopy, animal bites, etc., poisons (vol. 19); materia medica, pharmacy (vols. 20-22, partly subdivided); diatetics, dermatology (vol. 23). The most plausible assumption {{seems to be that}} the extant compilation was derived from a series of notebooks organized by subject; thus the (approximate) duplications of certain excerpts can be explained on the <b>basis</b> <b>of</b> repeated <b>notations</b> as required by the subject under review. Frequently, only one of these multiple occurrences agrees with the original text, which would indicate that it was (more or less) directly copied from the respective exemplar, whereas Rāzi jotted down the others from memory (Weisser, esp. pp. 281 ff.). As a rule, Rāzi took the opening quotation in each section from a pertinent work of Galen as the basis that he laid out for himself and future physicians. His attitude to Galen, perhaps best described as ambivalent rather than critical, has been much discussed throughout history from Rāzi’s lifetime on.|$|R
5000|$|Alternatively, one {{can work}} entirely {{in a local}} {{coordinate}} system [...] The coordinate differentials [...] form a <b>basis</b> <b>of</b> the space of one-forms, each associated with a coordinate. Given a multi-index [...] with [...] for [...] (and denoting [...] with an abuse <b>of</b> <b>notation</b> [...] ), the exterior derivative of a (simple) -form ...|$|R
40|$|The class <b>of</b> scales <b>of</b> <b>notation</b> {{should be}} defined by the order of symbol?s calculation. In A class scales <b>of</b> <b>notation,</b> to which {{positional}} scales <b>of</b> <b>notation</b> referred to, the order of symbol?s calculation is dependent and successive. In scales <b>of</b> <b>notation</b> <b>of</b> B class, to which scales <b>of</b> <b>notation</b> <b>of</b> vestigial classes referred to, the order of symbol?s calculation is parallel and dependent. The classification <b>of</b> scale <b>of</b> <b>notation</b> is given. ????? ?????? ????????? ????????????? ?????????? ???????? ?????????? ????????. ? ???????? ????????? ?????? ?, ? ??????? ????????? ??????????? ???????, ??????? ?????????? ???????? ??????? ? ????????????????. ? ???????? ?????? ?, ? ??????? ????????? ??????? ????????? ?????????? ???????, ??????? ?????????? ???????? ?????????? ? ?????????. ???? ????????????? ?????? ?????????...|$|R
40|$|Software {{development}} {{means the}} development {{of a wide range of}} work products covering different views on a system. These views are generally represented using different notations. In this paper we propose a model for the static part of a software development process that enables an integrated foundation of work products on the <b>basis</b> <b>of</b> a system model, as well as a flexible foundation <b>of</b> <b>notations</b> on the <b>basis</b> <b>of</b> work products. We differentiate between models <b>of</b> <b>notations,</b> work products, and systems and show their relationships. An example covering a system model for object-based systems together with different work product types and their representations by alternative notations illustrates our approach. 1. Introduction Nowadays software development is far more than producing source code in a certain programming language. In order to meet the challenges of {{the development of}} complex applications, we specify a system from different viewpoints and on different levels of abstraction. T [...] ...|$|R
50|$|In mathematics, abuse <b>of</b> <b>notation</b> {{occurs when}} an author uses a {{mathematical}} notation {{in a way}} that is not formally correct but that seems likely to simplify the exposition or suggest the correct intuition (while being unlikely to introduce errors or cause confusion). However, the concept of formal correctness depends on time and on the context. Therefore, many notations in mathematics are qualified as abuse <b>of</b> <b>notation</b> in some context and are formally correct in other contexts; as many notations were introduced a long time before any formalization of the theory in which they are used, the qualification <b>of</b> abuse <b>of</b> <b>notation</b> is strongly time dependent. Moreover, many abuses <b>of</b> <b>notation</b> may be made formally correct by improving the theory. Abuse <b>of</b> <b>notation</b> should be contrasted with misuse <b>of</b> <b>notation,</b> which should be avoided.|$|R
40|$|The <b>basis</b> <b>of</b> our {{accepted}} scale <b>of</b> <b>notation</b> is {{the number}} ten. We derive it from the Arabs. It {{is not the only}} basis, for, apart from theoretical system of numeration, we find in our English tables of weights, measures, and coins, distinct applications of binary, duodecimal, and vigesimal factors. But the decimal basis is paramount, and governs not only the writing, but the language, of number. When we come to divide the unit we may resort to fractions...|$|R
50|$|Sumarsam {{argues that}} the use of the term, {{beginning}} directly after the introduction <b>of</b> <b>notation,</b> arose from the use <b>of</b> <b>notation,</b> theory, and pedagogy.|$|R
40|$|Notation is {{a central}} issue in modern western music. Composers have often sought ways of {{expanding}} and refining the functionality <b>of</b> <b>notation</b> and, in doing so, have re-shaped the music that they were originally aiming to describe. Other musical traditions have very different uses for notation; some have no use for it at all; each approach creates contrasting musical experiences. The role that electronics and computers have played in music has also influenced the nature and function <b>of</b> <b>notation.</b> More traditional 'live' <b>notation</b> <b>of</b> note/pitch- based music generated algorithmically has proved particularly problematic: musical notation is itself a very complex subject. Composers and technologists have instead used libraries of images, algorithms for the pre- generation of material or simplified notations {{that can be used}} as the <b>basis</b> <b>of</b> more improvisatory performances. This paper presents work involving the live presentation of 'traditionally precise' music notation created through algorithmically generated material. This notation can then be performed by a human musician alongside computer-generated diffused sound or other 'real' musicians. Technologies used include the SuperCollider audio programming environment and the INScore notation project with the Open Sound Control protocol used to communicate between them. As well as providing a fascinating musical experience, the process highlights a number of issues concerning performance practice, instrumental technique, rehearsal, time and timing, as well as the nature <b>of</b> <b>notation</b> itself and its relationship to improvisation...|$|R
5000|$|... #Subtitle level 2: Publishing <b>of</b> <b>notations</b> <b>of</b> Sri Muthuswami Dikshitar in Swadesamitran ...|$|R
40|$|Abstract. The {{real-time}} process algebra (RTPA) {{is a set}} <b>of</b> new mathematical <b>notations</b> for formally de-scribing system architectures, and {{static and}} dynamic behaviors. It is recognized that the specification of software behaviors is a three-dimensional problem known as: (i) mathematical operations, (ii) event/process timing, and (iii) memory manipulations. Conventional formal methods in software engineering were de-signed to describe the 1 -D (type (i)) or 2 -D (types (i) and (iii)) static behaviors of software systems via logic, set and type theories. However, they are inadequate to address the 3 -D problems in real-time systems. A new notation system that is capable to describe and specify the 3 -D real-time behaviors, the real-time process algebra (RTPA), is developed in this paper to meet the fundamental requirements in software engineering. RTPA is designed as a coherent software engineering notation system and a formal engineering method for addressing the 3 -D problems in software system specification, refinement, and implementation, partic-ularly for real-time and embedded systems. In this paper, the RTPA meta-processes, algebraic relations, system architectural notations, {{and a set of}} fundamental primary and abstract data types are described. On the <b>basis</b> <b>of</b> the RTPA <b>notations,</b> a system specification method and a refinement scheme of RTPA are devel-oped. Then, a case study on a telephone switching system is provided, which demonstrates the expressive power of RTPA on formal specification of both software system architectures and behaviors. RTPA elicit...|$|R
25|$|Gregorian Chant, an {{outgrowth}} of Roman plain chant, strongly influenced both liturgical and secular music during the Middle Ages. An Italian monk, Guido of Arezzo (born in 991), developed the form <b>of</b> musical <b>notation</b> that became the <b>basis</b> <b>of</b> Western music and, subsequently, of music worldwide.|$|R
40|$|We {{defend the}} need of a dual {{approach}} for specifying reactive systems and reasoning about their timing properties; this dual approach uses a notation for the specification of behaviour, preferably a graphical one, and a temporal logic to express formally, and reason about, this behaviour. The combination of two representation schemes forms the <b>basis</b> <b>of</b> a generic framework that can be instantiated for different choices <b>of</b> <b>notations.</b> Two instantiations <b>of</b> the framework, illustrating its use, are discussed. To describe in detail one of the instantiations, the ArchSM method, we use the pattern form. ...|$|R
40|$|This {{document}} {{contains the}} questionnaires and {{responses of the}} survey conducted on the UML-B method. The survey assessed the usability of the method, particularly the notation used, from the developers’ perspective. The questionnaires were constructed based on a usability evaluation framework namely the Cognitive Dimensions <b>of</b> <b>Notations</b> (CD) and the usability criteria suggested by the International Organization for Standardization. This document {{is not intended to}} explain the survey execution, analysis and findings. Rather, it presents the raw data gathered from the respondents, which act as a <b>basis</b> <b>of</b> discussion in other related documents...|$|R
40|$|On the <b>basis</b> <b>of</b> {{the program}} <b>{{notation}}</b> PGLD <b>of</b> program algebra, a program notation PGLDg (PGLD with goto's) is proposed with indirect absolute jumps. An indirect absolute jump, also called a goto instruction, instructs the agent executing {{a program to}} move to an occurrence of a label catch instruction. The semantics of PGLDg is determined by a projection back to PGLD. An interpretation of flow charts into PGLDg is given, thus demonstrating the expressive strength of PGLDg. PGLDg {{turns out to be}} a useful point of departure for further language extensions, the meaning of more involved languages being determined by a projection back to PGLDg. This semantic method (paradigm) is introduced as projection semantics. As an example a language extension of PGLDg with a conditional construct is discussed. Coprograms are introduced to model the working memory of a machine executing a program. Projection semantics as a paradigm must provide the possibility to translate a program into a PGLDg program together with an appropriate coprogram. A rigorous definition of coprograms is provided. Two modes of cooperation between programs and coprograms are introduced: `use' and `apply'. Coprograms give rise to a natural calculus, which is studied in some detail. The use of coprograms in projection semantics is exemplified in the case of a language extension with recursion...|$|R
30|$|The phonemic Polish {{language}} corpus contains words {{written with}} the use <b>of</b> phonemic <b>notation,</b> obtained on the <b>basis</b> <b>of</b> automatic grapheme-to-phoneme conversion of an orthographic text. Automatic processing of a natural language, very often requires the implementation of automatic grapheme-to-phoneme conversion. Grapheme-to-phoneme conversion determines phonemic transcriptions directly from orthographic representations [23].|$|R
50|$|The {{anthology}} has 22 songs out {{of which}} only nine exists in Swarabitan (Vol. XXI), collection <b>of</b> <b>notations</b> <b>of</b> Tagore’s music.|$|R
5000|$|... 1923: [...] "The History <b>of</b> <b>Notations</b> <b>of</b> the Calculus." [...] Annals of Mathematics, 2nd Ser., Vol. 25, No. 1, pp. 1-46 ...|$|R
5000|$|Mark Applebaum - The Metaphysics <b>of</b> <b>Notation</b> (innova records) ...|$|R
2500|$|Florian Cajori, [...] "The History <b>of</b> <b>Notations</b> <b>of</b> the Calculus." [...] Annals of Mathematics, 2nd Ser., Vol. 25, No. 1 (Sep. 1923), pp.1–46.|$|R
5000|$|An affine {{frame of}} an affine space {{consists}} of a point, called the origin, and a linear <b>basis</b> <b>of</b> the associated vector space. More precisely, for an affine space [...] with associated vector space [...] the origin [...] belongs to , and the linear basis is a <b>basis</b> [...] <b>of</b> [...] (for simplicity <b>of</b> the <b>notation,</b> we consider only the case of finite dimension, the general case is similar).|$|R
5000|$|Cognitive {{dimensions}} <b>of</b> <b>notations,</b> design {{principles for}} programming languages' syntax ...|$|R
5000|$|Ksp = ApBq (electrical charges omitted for {{simplicity}} <b>of</b> <b>notation)</b> ...|$|R
40|$|The {{terms of}} {{realization}} of cryptographic analysis of sectional matrix transformations {{from the position}} scale <b>of</b> <b>notation</b> in the system of systems of remaining classes and from the system of conditional tailings in the position scale <b>of</b> <b>notation,</b> and also condition of providing of high cryptographic firmness of such transformations are examined...|$|R
5000|$|A similar abuse <b>of</b> <b>notation</b> {{occurs in}} {{sentences}} such as [...] "Let us consider the function ..." [...] In fact [...] {{is not a}} function. The function is the operation that associates [...] to , often denoted as [...] Nevertheless, this abuse <b>of</b> <b>notation</b> is widely used since it is generally not confusing.|$|R
