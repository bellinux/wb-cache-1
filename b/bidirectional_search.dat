90|44|Public
25|$|A* {{can also}} be adapted to a <b>bidirectional</b> <b>search</b> algorithm. Special care {{needs to be taken}} for the {{stopping}} criterion.|$|E
5000|$|<b>Bidirectional</b> <b>search,</b> an {{algorithm}} {{that finds}} the shortest path between two vertices on a directed graph ...|$|E
50|$|A* {{can also}} be adapted to a <b>bidirectional</b> <b>search</b> algorithm. Special care {{needs to be taken}} for the {{stopping}} criterion.|$|E
5000|$|... #Subtitle level 2: Approaches for <b>Bidirectional</b> Heuristic <b>Search</b> ...|$|R
40|$|<b>Bidirectional</b> {{heuristic}} <b>search</b> is {{a well-known}} technique for solving pathfinding problems. The goal in a pathfinding problem is to find paths [...] -often of lowest cost [...] -between nodes in a graph. Many real-world problems, such as finding the quickest route between two points in a map or measuring the similarity of DNA sequences, can be modeled as pathfinding problems. <b>Bidirectional</b> brute-force <b>search</b> does simultaneous brute-force searches forward from the initial state and backward from the goal states, finding solutions when both intersect. The idea of adding a heuristic to guide search is an old one, but has not seen widespread use and is generally believed to be ineffective. I present an intuitive explanation for the ineffectiveness of front-to-end <b>bidirectional</b> heuristic <b>search.</b> Previous work has examined this topic, but mine is the first comprehensive explanation for why most front-to-end <b>bidirectional</b> heuristic <b>search</b> algorithms will usually be outperformed by either unidirectional heuristic or <b>bidirectional</b> brute-force <b>searches.</b> However, I also provide a graph wherein <b>bidirectional</b> heuristic <b>search</b> does outperform both other approaches, as well as real-world problem instances from the road navigation domain. These demonstrate {{that there can be}} no general, formal proof of the technique's ineffectiveness. I tested my theory in a large number of popular search domains, confirming its predictions. One of my experiments demonstrates that a commonly-repeated explanation for the ineffectiveness of <b>bidirectional</b> heuristic <b>search</b> [...] -that it spends most of its time proving solution optimality [...] -is in fact wrong, and that with a strong heuristic a <b>bidirectional</b> heuristic <b>search</b> tends to find optimal solutions very late in a search. Finally, I introduce state-of-the-art solvers for the four-peg Towers of Hanoi with arbitrary initial and goal states, and peg solitaire, using disk-based, bidirectional algorithms. The Towers of Hanoi solver is a bidirectional brute-force solver which, as my theory predicts, outperforms a unidirectional heuristic solver. The peg solitaire solver is a bidirectional heuristic algorithm with novel heuristics. While my theory demonstrates that <b>bidirectional</b> heuristic <b>search</b> is generally ineffective, the peg solitaire domain demonstrates several caveats to my theory that this algorithm takes advantage of...|$|R
40|$|AIthough it is {{generally}} agreed that <b>bidirectional</b> heuristic <b>search</b> is potentially more efficient than unidirectional heuristic search, so far {{there have been no}} algorithms which realize this potential. The basic difficulty is that the two search trees (one rooted at the start, the other at the goal) do not meet in the middle. This results in essentiofly two unidirectional starches and poorer performance. In this paper we present an efficient olge rithm for <b>bidirectional</b> heuristic <b>search</b> which overcomes this difficulty. We also compare this algorithm with de Champeaux’s BHFFA (2331 on the basis of search efficiency, solution quality, and computational cost. I...|$|R
50|$|Directing a {{synthesis}} toward a desirable intermediate can greatly narrow {{the focus of}} an analysis. This allows <b>bidirectional</b> <b>search</b> techniques.|$|E
50|$|The MTA-2 can {{interface}} {{up to four}} drives for half-inch Mylar magnetic tapes, {{which can}} store as many as 300,000 words (in blocks no longer than 108 words). The read/write rate is 430 hexadecimal digits per second; the <b>bidirectional</b> <b>search</b> speed is 2500 characters per second.|$|E
5000|$|... : {{the leaves}} of [...] (sometimes {{referred}} to as [...] ). It is from this set that a node is chosen for expansion. In <b>bidirectional</b> <b>search,</b> these are sometimes called the search 'frontiers' or 'wavefronts', referring to how they appear when a search is represented graphically. In this metaphor, a 'collision' occurs when, during the expansion phase, a node from one wavefront is found to have successors in the opposing wavefront.|$|E
5000|$|A <b>Bidirectional</b> Heuristic <b>Search</b> is a {{state space}} search from some state [...] to another state , searching from [...] to [...] and from [...] to [...] simultaneously. It returns a valid list of {{operators}} that if applied to [...] will give us [...]|$|R
40|$|This paper {{introduces}} {{a proposal to}} extend the particle swarm optimization (PSO) to deal with constrained multiobjective optimization problems. PSO is modified by using the <b>bidirectional</b> <b>searching</b> strategy to guide each particle to search simultaneously in its neighborhood and the region where particles are distributed sparsely. The advantages of the approach are that {{it is easy to}} implement and the obtained solutions has a good distribution. It is validated using several test cases. The results show that the approach can efficiently find multiple Pareto optimal solutions. Finally, the approach is used to solve buoys-arrangement problem and the results are satisfying. IEEE Comp Soc, Web Intelligence Consortium, Assoc Comp Machinery, Beijing Univ Technol, Natl Nat Sci Fdn China, Microsoft Res Asia, China Comp Federat, Hong Kong Baptist Univ, Maebashi Inst Technol, Tsinghua Uni...|$|R
40|$|Background: The {{alignment}} of short reads generated by next-generation sequencers to genomes {{is an important}} problem in many biomedical and bioinformatics applications. Although many proposed methods work very well on narrow ranges of read lengths, they tend to suffer in performance and alignment quality for reads outside of these ranges. Results: We introduce RandAL, a novel method that aligns DNA sequences to reference genomes. Our approach utilizes two FM indices to facilitate efficient <b>bidirectional</b> <b>searching,</b> a pruning heuristic {{to speed up the}} computing of edit distances, and most importantly, a randomized strategy that enables effective estimation of key parameters. Extensive comparisons showed that RandAL outperformed popular aligners in most instances and was unique in its consistent and accurate performance over a wide range of read lengths and error rates. The software package is publicly available a...|$|R
50|$|<b>Bidirectional</b> <b>search</b> is a graph search {{algorithm}} {{that finds}} a shortest path from an initial vertex to a goal vertex in a directed graph. It runs two simultaneous searches: one {{forward from the}} initial state, and one backward from the goal, stopping when the two meet in the middle. The reason for {{this approach is that}} in many cases it is faster: for instance, in a simplified model of search problem complexity in which both searches expand a tree with branching factor b, and the distance from start to goal is d, each of the two searches has complexity O(bd/2) (in Big O notation), and the sum of these two search times is much less than the O(bd) complexity that would result from a single search from the beginning to the goal.|$|E
30|$|<b>Bidirectional</b> <b>search</b> (Pohl 1969).|$|E
40|$|Three {{admissible}} <b>bidirectional</b> <b>search</b> algorithms {{have been}} described in the literature: A Cartesian product approach due to Doran, Pohl 2 ̆ 7 s BHPA, and Champeaux and Sint 2 ̆ 7 s BHFFA 2. This paper describes an algorithm, GP, which contains the latter two and others. New admissibility results are obtained. A first order analysis is made comparing the run times of Cartesian products search, two versions of GP, and unidirectional A. The goal is to gain insight on when <b>bidirectional</b> <b>search</b> is useful and direction for seeking better <b>bidirectional</b> <b>search</b> algorithms...|$|E
40|$|This paper {{presents}} a new pathfinding algorithm called the boundary iterative-deepening depth-first search (BIDDFS) algorithm. The BIDDFS compromises the increasing memory {{usage of the}} Dijkstra 2 ̆ 7 s algorithm, where the memory clears enables the BIDDFS to consume less memory than the Dijkstra 2 ̆ 7 s algorithm. The expansion redundancy of the iterative-deepening depth-first search (IDDFS) is also compensated; it is faster than the IDDFS {{in all of the}} testing instances conducted. The BIDDFS is further enhanced for <b>bidirectional</b> <b>searching</b> to allow expanding to fewer nodes and reducing pathfinding time. The bidirectional BIDDFS and the parallel bidirectional BIDDFS are also proposed. The proposed BIDDFS is further extended to the multi-goal BIDDFS, which is able to search for multiple goals present on the map in a single search. Simulation examples and comparisons have revealed the good performance of the proposed algorithms...|$|R
40|$|International audienceRoute {{planning}} {{is an important}} problem for many real-time applications in open and complex environments. The maritime domain is a relevant example of such environments where dynamic phenomena and navigation constraints generate difficult route finding problems. This paper develops a spatial data structure that supports the search for an optimal route between two locations while minimizing a cost function. Although various search algorithms have been proposed so far (e. g. breadth-first <b>search,</b> <b>bidirectional</b> breadth-first <b>search,</b> Dijkstra's algorithm, A*, etc.), this approach provides a bidirectional dynamic routing algorithm {{which is based on}} hexagonal meshes and an iterative deepening A* (IDA*) algorithm, and a front to front strategy using a dynamic graph that facilitates data accessibility. The whole approach is applied to the context of maritime navigation, taking into account navigation hazards and restricted areas. The algorithm developed searches for optimal routes while minimizing distance and computational time...|$|R
40|$|The {{branch-and-bound}} {{algorithm is}} stated in generality, {{and illustrated by}} two applications, unidirectional graph search, and reducing a sparse matrix to its minimal band form. The algorithm is then generalised to multiple partitions, applied to <b>bidirectional</b> graph <b>searching</b> for both heuristic and non-heuristic searches, and further extended to graph searches and problem solving with subgoals. 1. 0 Introduction and Summary The branch-and-bound algorithm is a simple technique for the optimisation search for the minimum (or maximum) o...|$|R
40|$|Abstract. For {{the issues}} of {{unreasonable}} taxi distribution, high load rate and low dispatching efficiency etc. in the current city calling taxi services, the paper presents some key technologies of implementation of taxi driver-passenger <b>bidirectional</b> <b>search</b> system based on smart phones, including map matching, hotspot analysis, taxi route planning and <b>bidirectional</b> <b>search</b> UI. The results help achieve efficiency of urban taxi service...|$|E
40|$|Although the {{heuristic}} search algorithm A * is well-known to be optimally efficient, this result explicitly assumes forward search. <b>Bidirectional</b> <b>search</b> has long held promise for sur-passing A*’s efficiency, and many varieties have been pro-posed, {{but it has}} proven difficult to achieve robust perfor-mance across multiple domains in practice. We introduce a simple <b>bidirectional</b> <b>search</b> technique called Incremental KKAdd that judiciously performs backward search to im-prove {{the accuracy of the}} forward heuristic function for any search algorithm. We integrate this technique with A*, assess its theoretical properties, and empirically evaluate its perfor-mance across seven benchmark domains. In the best case, it yields a factor of six reduction in node expansions and CPU time compared to A*, and in the worst case, its overhead is provably bounded by a user-supplied parameter, such as 1 %. Viewing performance across all domains, it also surpasses previously proposed <b>bidirectional</b> <b>search</b> algorithms. These results indicate that Incremental KKAdd is a robust way to leverage <b>bidirectional</b> <b>search</b> in practice...|$|E
40|$|On the surface, <b>bidirectional</b> <b>search</b> (BDS) is an {{attractive}} idea {{with the potential for}} significant asymptotic reductions in search effort. However, the results in practice often fall far short of expectations. We introduce a new <b>bidirectional</b> <b>search</b> algorithm, Single-Frontier <b>Bidirectional</b> <b>Search</b> (SF-BDS). Unlike traditional BDS which keeps two frontiers, SF-BDS uses a single frontier. Each node in the tree can be seen as an independent task of finding the shortest path between the current start and current goal. At a particular node we can decide to search from start to goal or from goal to start, choosing the direction with the highest potential for minimizing the total work done. Theoretical results give insights as to when this approach will work and experimental data validates the algorithm for a broad range of domains...|$|E
30|$|The {{paper is}} {{structured}} as follows: In Section 2, we present {{an overview of}} the data model and basic definitions of semantic association. In Section 3, we overview some related works in the area of semantic association. In section 4, we explain our Modified <b>bidirectional</b> breadth-first <b>search</b> algorithm. In Section 5, we explain the approach for ranking semantic associations. Experimental evaluation of the proposed approach is explained in Section 6. In Section 7, we discuss our contribution and state possible future work.|$|R
3000|$|A new algorithm, ORS, was {{developed}} based on model reduction and a <b>bidirectional</b> <b>searching</b> method {{in order to}} optimize the processing running time of calculating PPR estimations. This algorithm estimated the importance of nodes in the graph {{with respect to the}} initiation and end nodes. Calculation was done over the optimized set of nodes in two separated steps. The first step involved going from the node i to reach node w with a predefined threshold; in addition, the estimated value was determined from node e to node u. Finally, calculations were done, as given in “Our algorithm” section, to determine if a pair counted as significant or not. The upper-bound complexity of the estimation process in large scale networks was changed from O([...] √(a/)) to ([...] √(a/ - m)), where a is the graph’s average degree, δ is the given threshold, and m is reciprocal to the number of reduced nodes. The lower bound of running time is defined as ([...] 1 /δ). The accuracy used to calculate probabilities is 4 /n for the experiments. Lower bound is where there are few children for a given node and upper bound occurs when the targets node have large numbers of children.|$|R
40|$|AbstractIn {{this paper}} {{we present a}} new <b>bidirectional</b> {{heuristic}} <b>search</b> algorithm. Our algorithm {{can be viewed as}} a perimeter search algorithm, and it uses a new technique for reducing the number of heuristic evaluations. We also prove some general results on the behavior of iterative deepening perimeter search algorithms, and we discuss some new ‘lazy evaluation’ techniques for improving their performance. The theoretical and experimental results show that perimeter search algorithms outperform the other bidirectional algorithms, and we believe it is worthwhile to give them a deep look in subsequent research...|$|R
40|$|It is {{well-known}} that any admissible unidirectional heuristic search algorithm must expand all states whose $f$-value {{is smaller than}} the optimal solution cost when using a consistent heuristic. Such states are called "surely expanded" (s. e.). A recent study characterized s. e. pairs of states for <b>bidirectional</b> <b>search</b> with consistent heuristics: if a pair of states is s. e. then {{at least one of}} the two states must be expanded. This paper derives a lower bound, VC, on the minimum number of expansions required to cover all s. e. pairs, and present a new admissible front-to-end bidirectional heuristic search algorithm, Near-Optimal <b>Bidirectional</b> <b>Search</b> (NBS), that is guaranteed to do no more than 2 VC expansions. We further prove that no admissible front-to-end algorithm has a worst case better than 2 VC. Experimental results show that NBS competes with or outperforms existing <b>bidirectional</b> <b>search</b> algorithms, and often outperforms A* as well. Comment: Accepted to IJCAI 2017. Camera ready version with new timing result...|$|E
40|$|AbstractSearching for genes {{encoding}} microRNAs (miRNAs) is {{an important}} task in genome analysis. Because the secondary structure of miRNA (but not the sequence) is highly conserved, the genes encoding it can be determined by finding regions in a genomic DNA sequence that match the structure. It is known that algorithms using a <b>bidirectional</b> <b>search</b> on the DNA sequence for this task outperform algorithms based on unidirectional search. The data structures supporting a <b>bidirectional</b> <b>search</b> (affix trees and affix arrays), however, are rather complex and suffer from their large space consumption. Here, we present a new data structure called bidirectional wavelet index that supports <b>bidirectional</b> <b>search</b> with much less space. With this data structure, {{it is possible to}} search for candidates of RNA secondary structural patterns in large genomes, for example the complete human genome. Another important application of this data structure is short read alignment. As a second contribution, we show how bidirectional matching statistics can be computed in linear time...|$|E
40|$|We propose an {{incremental}} algorithm {{for the problem}} of maintaining systems of difference constraints. As a difference from the unidirectional approach of Ramalingam et al. [16], it employs <b>bidirectional</b> <b>search,</b> {{which is similar to}} that of Alpern et al. [1], and has a bounded runtime complexity in the worst case in terms of the size of changes. The major challenge is how to update the solution efficiently after the <b>bidirectional</b> <b>search</b> discovers a region that needs changes. Experimental results show that our approach is much faster in runtime and generates much smaller changes than the algorithm in [16]. We also perform an experimental study on the edge value heuristic [1] and results show that a simpler method may be faster in practice...|$|E
40|$|The {{purpose of}} this {{bachelor}} thesis is to summarize the most important results on <b>bidirectional</b> heuristic <b>search</b> and to bring some new thoughts. Two algorithms are described which attempt to improve the best algorithms in this field. The algorithms were experimentally compared with a unidirectional algorithm. According to {{the result of the}} comparison, we can state that bidirectional heuristic algorithms can be much faster than unidirectional heuristic algorithms. The text also describes how to solve some problems by shortest-path algorithms and how to make a good heuristic. A program which can solve a generalized puzzle was created as a demonstration...|$|R
40|$|One of {{the main}} {{challenges}} in systems biology is {{the establishment of the}} metabolome: a catalogue of the metabolites and biochemical reactions present in a specific organism. Current knowledge of biochemical pathways as stored in public databases such as KEGG, is based on carefully curated genomic evidence for the presence of specific metabolites and enzymes that activate particular biochemical reactions. In this paper, we present an efficient method to build {{a substantial portion of the}} artificial chemistry defined by the metabolites and biochemical reactions in a given metabolic pathway, which is based on <b>bidirectional</b> chemical <b>search.</b> Computational results on the pathways stored in KEGG reveal novel biochemical pathways...|$|R
30|$|When {{the number}} of RDF triples {{increases}} the execution time of both bidirectional BFS method and Modified bidirectional BFS method increases as well. Since our proposed algorithm reduces the searching of the paths that are irrelevant to the user, it always takes less execution time than bidirectional BFS method. According to our experiment our Modified <b>bidirectional</b> BFS algorithm, <b>searches</b> the paths efficiently.|$|R
40|$|Previous {{approaches}} to <b>bidirectional</b> <b>search</b> require exponential space, {{and they are}} either less efficient than unidirectional search for finding optimal solutions, or they cannot even find such solutions for difficult problems. Based on a memory-bounded unidirectional algorithm for trees (SMA*), we developed a graph search extension, and we used it to construct a very efficient memory-bounded bidirectional algorithm. This bidirectional algorithm can be run for difficult problems with bounded memory. In addition, {{it is much more}} efficient than the corresponding unidirectional search algorithm also for finding optimal solutions to difficult problems. In summary, <b>bidirectional</b> <b>search</b> appears to be the best approach to solving difficult problems, and this indicates the extreme usefulness of a paradigm that was neglected for long. Notation s,t l- 1 (4 ra (4 d d’ d(n) hf (4 il$f F$) c...|$|E
40|$|Solving AI {{planning}} {{problems by}} transformation into (normal) logic programs and computing answer sets (stable models) has gained considerable interest {{over the last}} years. We investigate in this context a classical AI search technique, <b>bidirectional</b> <b>search,</b> where search is performed both from the initial facts towards the goal and vice versa. Our contribution is to show how <b>bidirectional</b> <b>search</b> can be realized in the logic programming/answer set paradigm to planning. This seems not having been investigated so far. We report on practical experiments on planning problems from an AIPS competition and show how our approach helps speeding up the planning process. We perceive our contribution mainly as a technique that is compatible with and complementary to existing extensions and improvements, {{rather than as a}} concrete planning system. Keywords...|$|E
40|$|In concept {{learning}} from instances, a partially ordered concept space is searched. Whereas top-down methods search the whole space, bottom-up methods search a reduced space whose elements are most specific generalizations of positive instances. In this work {{we give the}} foundations for this reduction, and propose a method that performs a <b>bidirectional</b> <b>search</b> of this reduced space using a Tabu search strategy...|$|E
40|$|Optimization {{of route}} {{planning}} {{is essential to}} everyday tasks such as planning trips and traffic simulation. In order to optimize routes in large graphs such as transportation networks, an algorithm {{must be able to}} quickly find the shortest path from some source to a specified destination. The contraction hierarchy algorithm is a proposed solution to optimization of route planning. This algorithm has two stages: the first stage consists of ordering the nodes by some importance and removing nodes according to their importance to create a graph in which the shortest paths between nodes are preserved. The second stage is the query in which a shortest path is calculated using a <b>bidirectional</b> Dijkstra <b>search...</b>|$|R
40|$|Autonomous Path Planning (APP) {{problem is}} an {{important}} research topic in many fields including Mobile Robot (MR) applications. The main purpose of APP is to minimize the human intervention in searching feasible sequence path from the initial to goal position at optimal cost that satisfies any given constraints. Most of the paths planning algorithms developed so far used one direction information in developing the path solution. However, this approach leads to arguable solution. This research attempts to integrate the <b>bidirectional</b> <b>searching</b> strategy with Swarm Intelligence (SI) or called as Bidirectional Swarm (BiS) model. SI such as the Foraging Food Ant (FFAnt) behaviour is proven efficient in solving the path planning problem. The current research on FFAnt mostly focused on pheromone concept for agent communication. Instead, in this research the non-pheromone FFAnt is used and the agent communication is conducted via bidirectional interaction. The BiS was validated with double bridge experiment standard benchmark and similar result from the original double bridge model is obtained. The developed model {{has led to the}} development of Bidirectional Swarm based Path Planning (BiSPP) algorithm for MR using top-down methodology. The matrix performances of BiSPP are measured via computational time and path length. A series of experiment were conducted through the developed simulation tool with various static environments. The results are compared to Bidirectional Ant Colony Optimization algorithm and Multi-Scout Ants Cooperation algorithm. Results show that BiSPP algorithm has outperform the other two algorithms by decreasing up to 20 percent of the path length in a reasonable computational time. The simulation results indicate that the BiSPP algorithm has a potential to perform in static environmen...|$|R
40|$|Abstract. This paper investigates {{symbolic}} {{heuristic search}} with BDDs for solving domain-independent action planning problems cost-optimally. By distributing {{the impact of}} operators that take part in several abstractions, multiple partial symbolic pattern databases are added for an admissible heuristic, even if the selected patterns are not disjoint. As a trade-off between symbolic <b>bidirectional</b> and heuristic <b>search</b> with BDDs on rather small pattern sets, partial symbolic pattern databases are applied. ...|$|R
