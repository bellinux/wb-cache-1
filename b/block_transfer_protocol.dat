3|3156|Public
50|$|A <b>block</b> <b>transfer</b> <b>protocol</b> allows several bus {{transfers}} to occur {{with a single}} address cycle. In block transfer mode, the first transfer includes an address cycle and subsequent transfers require only data cycles. The slave is responsible for ensuring that these transfers use successive addresses.|$|E
40|$|Recent {{advances}} in optical communications, VLSI, and fiber-optic technologies have created new horizons for high-speed protocols and applications seeking end-to-end data transport at Gb/s speeds. In this Ph. D dissertation, an itemized goodness definition consisting of six criteria is presented {{for evaluation of}} high speed transport protocols used in lightweight networking applications. Based on this goodness definition, a goodness measure is also defined in this dissertation to quantify the relative goodness of existing and future transport protocols. The goodness definition has been developed and enhanced {{as a result of}} analysis and characterization of nine transport protocols: 1) Delta-t, 2) Datakit Universal Receiver Protocol (Datakit URP), 3) Transmission Control Protocol (TCP), 4) Versatile Message Transaction Protocol (VMTP), 5) Open Systems Interconnection Transport Protocol Class 4 (OSI/TP 4), 6) Network <b>Block</b> <b>Transfer</b> <b>Protocol</b> (NETBLT), 7) Express Transfer Protocol (XTP), 8) Sa [...] ...|$|E
40|$|Abstract—Wireless sensor {{networks}} that are energy-constrained must transmit and receive data {{as efficiently as}} possible. If the transmission is delay tolerant, transferring blocks of accumulated data can be more efficient than transferring each sensed measurement {{as soon as it}} is available. This paper proposes a <b>Block</b> <b>Transfer</b> <b>Protocol</b> (BTP) designed for efficient and reliable transmission in wireless sensor networks. BTP reduces {{the time it takes to}} reliably transfer a block of packets compared to conventional link layer protocols, by piggybacking in data packets information about the transfer, minimizing the number of acknowledgements needed for reliable transmission, and reducing the need for timeouts, which can substantially slow down communication when transmission is unreliable. In addition, BTP improves reliability by handling false positive acknowledgements 1 and by letting the receivers communicate to senders how many packets they are prepared to accept, providing a flow control mechanism to exert back-pressure on the senders. BTP has been evaluated on a real sensor node platform, as well as in simulation. BTP reduces the average time to transfer blocks of 60 packets, each 41 bytes long, by more than 20 % over a perfect link with no packet loss, to 63 % when 50 % of the packets are lost. Furthermore, BTP ensures channel fairness and in our tests achieves a 100 % delivery over multiple hops. Index Terms—block transfer; hop-by-hop transport; reliabil-ity; energy efficiency; sensor network I...|$|E
50|$|Multigrain {{uses the}} Luhn {{algorithm}} {{to validate the}} credit and debit card details. This POS malware then infects the computer and <b>blocks</b> Hypertext <b>Transfer</b> <b>Protocol</b> (http) and file <b>transfer</b> <b>protocol</b> (ftp) traffic which monitors the data exfiltration. It exfiltrates the scraped information of credit and debit card via Domain Name Server (DNS). Then it sends the collected payment card information to a 'command and control server' server.|$|R
5000|$|Checks {{accessibility}} of TCP based services like Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP), Post Office <b>Protocol</b> (POP3), Hypertext <b>Transfer</b> <b>Protocol</b> (HTTP), Network News <b>Transfer</b> <b>Protocol</b> (NNTP), File <b>Transfer</b> <b>Protocol</b> (FTP), Secure Shell (SSH), and so on.|$|R
40|$|We {{describe}} a reliable <b>transfer</b> <b>protocol,</b> Tsunami, designed for faster transfer of large files over high-speed networks than appears possible with standard implementations of TCP. Tsunami is an application-level protocol that features rate control via adjustment of inter-packet delay {{rather than a}} sliding-window mechanism. Data <b>blocks</b> are <b>transferred</b> via UDP and control data are transferred via TCP. We also discuss future steps in development of the protocol. ...|$|R
50|$|EFTP (various {{expansions}} of {{this have}} been given, including Easy File <b>Transfer</b> <b>Protocol,</b> Ether File <b>Transfer</b> <b>Protocol,</b> and Experimental File <b>Transfer</b> <b>Protocol)</b> {{was a very}} simple file <b>transfer</b> <b>protocol</b> developed {{as part of the}} PUP protocol suite at Xerox PARC in the late 1970s. It was part of the inspiration for the Trivial File <b>Transfer</b> <b>Protocol</b> (TFTP) in the TCP/IP suite.|$|R
5000|$|File transfer: File <b>Transfer</b> <b>Protocol</b> (FTP), Trivial File <b>Transfer</b> <b>Protocol</b> (TFTP) ...|$|R
5000|$|The Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP), {{defined in}} RFC 788 [...] has {{replaced}} the Mail <b>Transfer</b> <b>Protocol.</b>|$|R
50|$|A <b>block</b> <b>transfer</b> attempt {{begins when}} the first bit of the block crosses the {{functional}} interface between the source user and the telecommunication system. A <b>block</b> <b>transfer</b> attempt ends either in successful <b>block</b> <b>transfer</b> or in <b>block</b> <b>transfer</b> failure.|$|R
50|$|Successful <b>block</b> <b>{{transfer}}</b> is {{the transfer}} of a correct, nonduplicate, user information block between the source user and intended destination user. Successful <b>block</b> <b>transfer</b> occurs when {{the last bit of}} the <b>transferred</b> <b>block</b> crosses the functional interface between the telecommunications system and the intended destination user. Successful <b>block</b> <b>transfer</b> can only occur within a defined maximum <b>block</b> <b>transfer</b> time after initiation of a <b>block</b> <b>transfer</b> attempt.|$|R
40|$|This paper {{represents}} {{a review of}} security vulnerabilities in a cluster storage system. In particular, we focus on identifying the different network level vulnerabilities including attack on the authentication, key exchange and data <b>transfer</b> <b>protocol.</b> We provide {{a brief description of}} the different functional entities and we investigate several technical issues including infrastructure and aspects related to the security of the existing system. This paper proposes a secure authentication technique for the network layer of DAS, SAN and NAS. We also bring unencrypted data communication under an encryption process. We implement the concept of shared key by using a one way chain algorithm for <b>block</b> <b>transfer</b> of data. We integrate a new protocol to maintain the level of security according to the data priority concept...|$|R
50|$|Crax Commander {{improves}} productivity {{by offering}} user configurable keyboard shortcuts, built-in text editor with sync coloring, full user interface customizing including fonts and colors, archive support, and built in File <b>Transfer</b> <b>Protocol</b> (FTP), Server Message Block (SMB), Apple Filing Protocol (AFP), SSH File <b>Transfer</b> <b>Protocol</b> (SSH), and SSH File <b>Transfer</b> <b>Protocol</b> (sFTP).|$|R
50|$|Some {{examples}} of service ports used for banner grabbing are {{those used by}} Hyper Text <b>Transfer</b> <b>Protocol</b> (HTTP), File <b>Transfer</b> <b>Protocol</b> (FTP), and Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP); ports 80, 21, and 25 respectively. Tools commonly used to perform banner grabbing are Telnet,nmap,zmap which is included with most operating systems, and Netcat.|$|R
50|$|The Local Mail <b>Transfer</b> <b>Protocol</b> (LMTP) is a {{derivative}} of ESMTP, {{the extension of}} the Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP). It is defined in RFC 2033.|$|R
40|$|Integrating {{support for}} <b>block</b> data <b>transfer</b> {{has become an}} {{important}} emphasis in recent cache-coherent shared address space multiprocessors. This paper examines the potential performance benefits of adding this support. A set of ambitious hardware mechanisms is used to study performance gains in five important scientific computations {{that appear to be}} good candidates for using <b>block</b> <b>transfer.</b> Our conclusion is that the benefits of <b>block</b> <b>transfer</b> are not substantial for hardware cache- coherent multiprocessors. The main reasons for this are (i) the relatively modest fraction of time applications spend in communication amenable to <b>block</b> <b>transfer,</b> (ii) the difficulty of finding enough independent computation to overlap with the communication latency that remains after <b>block</b> <b>transfer,</b> and (iii) long cache lines often capture many of the benefits of <b>block</b> <b>transfer</b> in efficient cache-coherent machines. In the cases where <b>block</b> <b>transfer</b> improves performance, prefetching can often provide comparable, if not superior, performance benefits. We also examine the impact of varying important communication parameters and processor speed on the effectiveness of <b>block</b> <b>transfer,</b> and comment on useful features that a <b>block</b> <b>transfer</b> facility should support for real applications...|$|R
50|$|The Line Mode Browser was {{designed}} {{to be able to be}} platform independent. There are official ports to Apollo/Domain, IBM RS6000, DECStation/ultrix, VAX/VMS, VAX/Ultrix, MS-DOS, Unix, Windows, Classic Mac OS, Linux, MVS, VM/CMS, FreeBSD, Solaris, and to macOS. The browser supports many <b>protocols</b> like File <b>Transfer</b> <b>Protocol</b> (FTP), Gopher, Hypertext <b>Transfer</b> <b>Protocol</b> (HTTP), Network News <b>Transfer</b> <b>Protocol</b> (NNTP), and Wide area information server (WAIS).|$|R
50|$|UDP-based Data <b>Transfer</b> <b>Protocol</b> (UDT), is a {{high-performance}} data <b>transfer</b> <b>protocol</b> designed for <b>transferring</b> large volumetric datasets over high-speed wide area networks. Such settings are typically disadvantageous {{for the more}} common TCP protocol.|$|R
40|$|Integrating 1 {{support for}} <b>block</b> data <b>transfer</b> {{has become an}} im- portant {{emphasis}} in recent cache-coherent shared address space multiprocessors. This paper examines the potential performance benefits of adding this support. A set of ambitious hardware mechanisms is used to study performance gains in five important scientific computations {{that appear to be}} good candidates for using <b>block</b> <b>transfer.</b> Our conclusion is that the benefits of <b>block</b> <b>transfer</b> are not substantial for hardware cache- coherent multiprocessors. The main reasons for this are (i) the relatively modest fraction of time applications spend in communication amenable to <b>block</b> <b>transfer,</b> (ii) the difficulty of finding enough independent computation to overlap with the communication latency that remains after <b>block</b> <b>transfer,</b> and (iii) long cache lines often capture many of the benefits of <b>block</b> <b>transfer</b> in efficient cache-coherent machines. In the cases where <b>block</b> <b>transfer</b> improves performance, prefetching can often provide comparable, if not superior, performance benefits. We also examine the impact of varying important communication parameters and processor speed on the effectiveness of <b>block</b> <b>transfer,</b> and comment on useful features that a <b>block</b> <b>transfer</b> facility should support for real applications...|$|R
50|$|The Quick Mail <b>Transfer</b> <b>Protocol</b> (QMTP) is {{an e-mail}} {{transmission}} protocol {{that is designed}} to have better performance than Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP), the de facto standard. It was designed and implemented by Daniel J. Bernstein.|$|R
25|$|File <b>transfer</b> <b>protocol</b> {{filesystem}} translator.|$|R
5000|$|... gPhoto has {{support for}} the Picture <b>Transfer</b> <b>Protocol</b> (PTP) and will also connect to devices that use the Media <b>Transfer</b> <b>Protocol.</b> Many cameras are not {{supported}} by gPhoto, but have {{support for the}} USB mass-storage device class, which is well-supported under Linux.|$|R
5000|$|... {{adapters}} - {{to integrate}} with other technologies and systems (HTTP, AMQP (Advanced Message Queuing Protocol), JMS, XMPP (Extensible Messaging and Presence Protocol), SMTP (Simple Mail <b>Transfer</b> <b>Protocol),</b> IMAP (Internet Message Access <b>Protocol),</b> FTP (File <b>Transfer</b> <b>Protocol)</b> {{as well as}} FTPS/SFTP, file systems, etc.) ...|$|R
30|$|Retrieval: {{the ability}} to {{retrieve}} the required data from a specified source using various methods such as the OGC download service standard, File <b>Transfer</b> <b>Protocol</b> (FTP), Hyper Text <b>Transfer</b> <b>Protocol</b> (HTTP), eXtensible Markup Language-Remote Procedure Call (XML-RPC), Simple Object Access Protocol (SOAP) services, etc.|$|R
50|$|The Media <b>Transfer</b> <b>Protocol</b> (MTP) is an {{extension}} to the Picture <b>Transfer</b> <b>Protocol</b> (PTP) communications protocol that allows media files to be transferred atomically to and from portable devices. Whereas PTP was designed for downloading photographs from digital cameras, Media <b>Transfer</b> <b>Protocol</b> allows the <b>transfer</b> of music files on digital audio players and media files on portable media players, as well as personal information on personal digital assistants. MTP is {{a key part of}} WMDRM10-PD, a digital rights management (DRM) service for the Windows Media platform.|$|R
25|$|Noteworthy alumni have {{graduated}} from the school, including: Roy Fielding, co-creator of Hypertext <b>Transfer</b> <b>Protocol</b> and the Apache HTTP Server; Patrick Hanratty, CAD pioneer; Paul Mockapetris, creator of Domain Name System and the first Simple Mail <b>Transfer</b> <b>Protocol</b> server; Steven Joe, CEO of D-Link North America.|$|R
5000|$|Electronic mail transport: Simple Mail <b>Transfer</b> <b>Protocol</b> (SMTP) ...|$|R
5000|$|Simple File <b>Transfer</b> <b>Protocol</b> (SFTP), the {{historical}} protocol ...|$|R
5000|$|... draft-ietf-dnsext-axfr-clarify DNS Zone <b>Transfer</b> <b>Protocol</b> (AXFR) {{internet}} draft ...|$|R
40|$|Radio Frequency Identification (RFID) {{has been}} widely adopted in {{practice}} for objects identification. The ownership of an object can be represented by the ownership of the RFID tag attached to the object. An ownership could be shared among different parties and should be transferable. Although many RFID ownership <b>transfer</b> <b>protocols</b> were proposed, a shared ownership <b>transfer</b> <b>protocol</b> remains as a daunting task with absence of a trusted party. In this paper, we propose the first provably secure shared ownership <b>transfer</b> <b>protocol,</b> which requires merely hashing computations and has a constant key size. 10 page(s...|$|R
5000|$|Trivial File <b>Transfer</b> <b>Protocol</b> (TFTP) is a simple, lock-step FTP {{that allows}} a client to get a file from or put a file onto a remote host. One of its primary uses is {{in the early stages}} of booting from a local area network, because TFTP is very simple to implement. TFTP lacks {{security}} and most of the advanced features offered by more robust file <b>transfer</b> <b>protocols</b> such as File <b>Transfer</b> <b>Protocol.</b> TFTP was first standardized in 1981 and the current specification for the protocol can be found in [...]|$|R
40|$|Abstract—Key <b>transfer</b> <b>protocols</b> {{rely on a}} {{mutually}} trusted key generation center (KGC) to select session keys and transport session keys to all communication entities secretly. Most often, KGC encrypts session keys under another secret key shared with each entity during registration. In this paper, we propose an authenticated key <b>transfer</b> <b>protocol</b> based on secret sharing scheme that KGC can broadcast group key information to all group members at once and only authorized group members can recover the group key; but unauthorized users cannot recover the group key. The confidentiality of this transformation is information theoretically secure. We also provide authentication for transporting this group key. Goals and security threats of our proposed group key <b>transfer</b> <b>protocol</b> will be analyzed in detail. Index Terms—Group key <b>transfer</b> <b>protocol,</b> session key, secret sharing, confidentiality, authentication. Ç...|$|R
50|$|The Peer Distributed <b>Transfer</b> <b>Protocol</b> is an Internet file <b>transfer</b> <b>protocol</b> for distributing {{files from}} a central server across a {{peer-to-peer}} network. It is conceptually similar to BitTorrent but allows for streaming media. The protocol {{has been assigned}} port 6086 by the Internet Assigned Numbers Authority. The primary implementation is DistribuStream.|$|R
50|$|At {{the outset}} of the IETF Secure Shell File Transfer project, the Secsh group stated that its {{objective}} of SSH File <b>Transfer</b> <b>Protocol</b> was to provide a secure file transfer functionality over any reliable data stream, and to be the standard file <b>transfer</b> <b>protocol</b> for use with the SSH-2 protocol.|$|R
50|$|Supported {{terminal}} emulation modes included ASCII, Avatar, ANSI, RIP, VT102, and others. A number of file <b>transfer</b> <b>protocols</b> like Zmodem were {{built into the}} application, along with support for external protocols like HS/Link and BiModem. The built-in support for advanced file <b>transfer</b> <b>protocols</b> made Terminate very popular at the time.|$|R
50|$|GAxel (GUI-Axel) is a {{front-end}} of Axel, {{which is}} a popular lightweight command-line Hypertext <b>Transfer</b> <b>Protocol</b> (HTTP) and File <b>Transfer</b> <b>Protocol</b> (FTP) downloading client for Unix-like operating systems. GAxel is for users who are unfamiliar or uncomfortable with command-line interfaces (CLIs). It is written in C++ using the Qt library.|$|R
