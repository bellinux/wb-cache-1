121|1020|Public
25|$|That is, a Boolean algebra {{is a set}} and {{a family}} of {{operations}} thereon interpreting the <b>Boolean</b> <b>operation</b> symbols and satisfying the same laws as the Boolean prototype.|$|E
25|$|The n-ary Boolean {{operations}} themselves {{constitute a}} power set algebra 2W, namely when W {{is taken to}} be the set of 2n valuations of the n inputs. In terms of the naming system of operations n'f'i where i in binary is a column of a truth table, the columns can be combined with Boolean operations of any arity to produce other columns present in the table. That is, we can apply any <b>Boolean</b> <b>operation</b> of arity m to m Boolean operations of arity n to yield a <b>Boolean</b> <b>operation</b> of arity n, for any m and n.|$|E
25|$|Digital {{logic is}} the {{application}} of the Boolean algebra of 0 and 1 to electronic hardware consisting of logic gates connected to form a circuit diagram. Each gate implements a <b>Boolean</b> <b>operation,</b> and is depicted schematically by a shape indicating the operation. The shapes associated with the gates for conjunction (AND-gates), disjunction (OR-gates), and complement (inverters) are as follows.|$|E
5000|$|<b>Boolean</b> <b>operations</b> on polygons: Various <b>Boolean</b> <b>operations</b> on {{the sets}} of points defined by {{polygonal}} regions.|$|R
40|$|Abstract. A complex {{structure}} can {{be constructed}} by <b>Boolean</b> <b>operations</b> of geometric primitives such as cube, sphere, cylinder, and so on. However, <b>Boolean</b> <b>operations</b> cannot represent the structure in form of mathematical function. In this paper, we propose a new shape representation method that combines the <b>Boolean</b> <b>operations</b> with the KS function. Applications show that 2 D and 3 D engineering parts can be described by a single implicit KS function...|$|R
50|$|Modern {{implementations}} for <b>Boolean</b> <b>operations</b> on polygons {{tend to use}} plane sweep algorithms (or Sweep line algorithms). A list {{of papers}} using plane sweep algorithms for <b>Boolean</b> <b>operations</b> on polygons {{can be found in}} References below.|$|R
25|$|A Venn diagram is a {{representation}} of a <b>Boolean</b> <b>operation</b> using shaded overlapping regions. There is one region for each variable, all circular in the examples here. The interior and exterior of region x corresponds respectively to the values 1 (true) and 0 (false) for variable x. The shading indicates {{the value of the}} operation for each combination of regions, with dark denoting 1 and light 0 (some authors use the opposite convention).|$|E
25|$|A {{family is}} indexed by an index set. In {{the case of}} a family of {{operations}} forming an algebra, the indices are called operation symbols, constituting the language of that algebra. The operation indexed by each symbol is called the denotation or interpretation of that symbol. Each operation symbol specifies the arity of its interpretation, whence all possible interpretations of a symbol have the same arity. In general it is possible for an algebra to interpret distinct symbols with the same operation, {{but this is not the}} case for the prototype, whose symbols are in one-one correspondence with its operations. The prototype therefore has 22n n-ary operation symbols, called the <b>Boolean</b> <b>operation</b> symbols and forming the language of Boolean algebra. Only a few operations have conventional symbols, such as ¬ for negation, ∧ for conjunction, and ∨ for disjunction. It is convenient to consider the i-th n-ary symbol to be n'f'i as done below in the section on truth tables.|$|E
25|$|Solid {{modeling}} {{systems for}} {{computer aided design}} {{offer a variety of}} methods for building objects from other objects, combination by Boolean operations being one of them. In this method the space in which objects exist is understood as a set S of voxels (the three-dimensional analogue of pixels in two-dimensional graphics) and shapes are defined as subsets of S, allowing objects to be combined as sets via union, intersection, etc. One obvious use is in building a complex shape from simple shapes simply as the union of the latter. Another use is in sculpting understood as removal of material: any grinding, milling, routing, or drilling operation that can be performed with physical machinery on physical materials can be simulated on the computer with the <b>Boolean</b> <b>operation</b> x∧¬y or x−y, which in set theory is set difference, remove the elements of y from those of x. Thus given two shapes one to be machined and the other the material to be removed, the result of machining the former to remove the latter is described simply as their set difference.|$|E
5000|$|<b>Boolean</b> <b>operations</b> on polygons are {{a set of}} <b>Boolean</b> <b>operations</b> (AND, OR, NOT, XOR, ...) {{operating}} on one or more sets of polygons in computer graphics. These sets of operations are widely used in computer graphics, CAD, and in EDA (in integrated circuit physical design and verification software).|$|R
5000|$|... #Subtitle level 2: Language {{equations}} with <b>Boolean</b> <b>operations</b> ...|$|R
40|$|The paper {{discusses}} {{the potential of}} the usage of Extended <b>Boolean</b> <b>operations</b> for personalized information delivery on the Internet based on semantic vector representation models. The final goal is the design of an e-commerce portal tracking user's clickstream activity and purchases history in order to offer them personalized information. The emphasis is put on the introduction of dynamic composite user profile constructed by means of extended <b>Boolean</b> <b>operations.</b> The basic binary <b>Boolean</b> <b>operations</b> such as OR, AND and NOT (AND-NOT) and their combinations have been introduced and implemented in variety of ways...|$|R
2500|$|A Boolean {{homomorphism}} is {{a function}} h: A→B between Boolean algebras A, B such that for every <b>Boolean</b> <b>operation</b> m'f'i, ...|$|E
2500|$|Example 2. All bit vectors {{of a given}} length form a Boolean algebra [...] "pointwise", {{meaning that}} any n-ary <b>Boolean</b> <b>operation</b> {{can be applied to}} n bit vectors one bit {{position}} at a time. For example, the ternary OR of three bit vectors each of length 4 is the bit vector of length 4 formed by oring the three bits {{in each of the four}} bit positions, thus 0100∨1000∨1001= 1101. Another example is the truth tables above for the n-ary operations, whose columns are all the bit vectors of length 2n and which therefore can be combined pointwise whence the n-ary operations form a Boolean algebra.|$|E
5000|$|A Boolean {{homomorphism}} is {{a function}} h: A→B between Boolean algebras A, B such that for every <b>Boolean</b> <b>operation</b> mfi, ...|$|E
5000|$|... the <b>Boolean</b> <b>operations</b> of (binary) intersection, union, and complement, ...|$|R
5000|$|Rich {{geometry}} <b>operations</b> (e.g. <b>Boolean</b> <b>operations,</b> path widening, outlining, etc.) ...|$|R
2500|$|The three <b>Boolean</b> <b>operations</b> {{described}} above {{are referred to}} as basic, meaning that they can be taken as a basis for other <b>Boolean</b> <b>operations</b> that can be built up from them by composition, the manner in which operations are combined or compounded. Operations composed from the basic operations include the following examples: ...|$|R
50|$|That is, a Boolean algebra {{is a set}} and {{a family}} of {{operations}} thereon interpreting the <b>Boolean</b> <b>operation</b> symbols and satisfying the same laws as the Boolean prototype.|$|E
5000|$|SAND CDBMS traces {{its roots}} to {{developments}} by Nucleus International Corporation research and eventual patent issued to, among others, Edward L. Glaser on “Bit string compressor with <b>boolean</b> <b>operation</b> processing capability.” ...|$|E
50|$|The n-ary Boolean {{operations}} themselves {{constitute a}} power set algebra 2W, namely when W {{is taken to}} be the set of 2n valuations of the n inputs. In terms of the naming system of operations nfi where i in binary is a column of a truth table, the columns can be combined with Boolean operations of any arity to produce other columns present in the table. That is, we can apply any <b>Boolean</b> <b>operation</b> of arity m to m Boolean operations of arity n to yield a <b>Boolean</b> <b>operation</b> of arity n, for any m and n.|$|E
5000|$|<b>Boolean</b> <b>operations</b> on polygons for {{orthogonal}} polygons (e.g., intersection and union) ...|$|R
50|$|Compared to the {{constructive}} {{solid geometry}} (CSG) representation, which uses only primitive objects and <b>Boolean</b> <b>operations</b> to combine them, boundary representation is more flexible {{and has a}} much richer operation set. In addition to the <b>Boolean</b> <b>operations,</b> B-rep has extrusion (or sweeping), chamfer, blending, drafting, shelling, tweaking and other operations which make use of these.|$|R
5000|$|... #Caption: Venn {{diagrams}} for the <b>Boolean</b> <b>operations</b> of conjunction, disjunction, and complement ...|$|R
5000|$|This {{distinguished}} agent represents ambiguous {{choice and}} can be used to simulate any other agent with arbitrary number of principal ports. For instance, it allows to define a [...] <b>boolean</b> <b>operation</b> that returns true if any of its arguments is true, independently of the computation taking place in the other arguments.|$|E
50|$|Digital {{logic is}} the {{application}} of the Boolean algebra of 0 and 1 to electronic hardware consisting of logic gates connected to form a circuit diagram. Each gate implements a <b>Boolean</b> <b>operation,</b> and is depicted schematically by a shape indicating the operation. The shapes associated with the gates for conjunction (AND-gates), disjunction (OR-gates), and complement (inverters) are as follows.|$|E
50|$|Listed {{are some}} of the {{possible}} sub-expressions that can be created for various logic gates. In an operation expression, C acts as an output; in a CNF sub-expression, C acts as a new Boolean variable. For each operation, the CNF sub-expression is true if and only if C adheres to the contract of the <b>Boolean</b> <b>operation</b> for all possible input values.|$|E
40|$|Defining the {{standard}} <b>Boolean</b> <b>operations</b> on fuzzy <b>Booleans</b> with the compositional rule of inference (CRI) or Zadeh's extension principle gives counter-intuitive results. We introduce and motivate a slight {{adaptation of the}} CRI, which only effects the results for non-normal fuzzy sets. It is shown that the adapted CRI gives the expected results for {{the standard}} <b>Boolean</b> <b>operations</b> on fuzzy <b>Booleans.</b> As a second application, we show that the adapted CRI enables a don't-care value in approximate reasoning. From the close connection between the CRI and Zadeh's extension principle, we derive an adaptation of the extension principle, which, like the modified CRI, also gives the expected <b>Boolean</b> <b>operations</b> on fuzzy <b>Booleans...</b>|$|R
5000|$|... octclip - This package allows to do <b>boolean</b> <b>operations</b> with polygons {{using the}} Greiner-Hormann {{algorithm}} ...|$|R
50|$|Complexity {{classes have}} a variety of closure properties; for example, {{decision}} classes may be closed under negation, disjunction, conjunction, or even under all <b>Boolean</b> <b>operations.</b> Moreover, they might also be closed under a variety of quantification schemes. P, for instance, is closed under all <b>Boolean</b> <b>operations,</b> and under quantification over polynomially sized domains. However, it is most likely not closed under quantification over exponential sized domains.|$|R
50|$|A Venn diagram is a {{representation}} of a <b>Boolean</b> <b>operation</b> using shaded overlapping regions. There is one region for each variable, all circular in the examples here. The interior and exterior of region x corresponds respectively to the values 1 (true) and 0 (false) for variable x. The shading indicates {{the value of the}} operation for each combination of regions, with dark denoting 1 and light 0 (some authors use the opposite convention).|$|E
50|$|The Quake {{engine and}} Unreal engine both use this system, as does Hammer (the native Source engine level editor), and Torque Game Engine/Torque Game Engine Advanced. CSG is popular because a modeler {{can use a}} set of {{relatively}} simple objects to create very complicated geometry. When CSG is procedural or parametric, the user can revise their complex geometry by changing the position of objects or by changing the <b>Boolean</b> <b>operation</b> used to combine those objects.|$|E
5000|$|The Commodore Amiga, {{released}} the following year, {{also has a}} full-featured blitter. The first US patent filing {{to use the term}} blitter was [...] "Personal computer apparatus for block transfer of bit-mapped image data," [...] assigned to Commodore-Amiga, Inc. Compared to the MC68000 processor, the blitter needs no memory cycles for fetching instructions, no silicon for decoding, and contains a barrel shifter to assist shifting pixel-accurate graphics in bitplanes. It also performs a [...] "4 operand" [...] <b>boolean</b> <b>operation</b> (typically destination:=op(destination, source, mask)) ...|$|E
5000|$|Improved Pre-Processing Capabilities: Additions to {{built-in}} functions include {{a range of}} <b>Boolean</b> <b>operations</b> and an If-Then-Else function.|$|R
50|$|<b>Boolean</b> <b>operations</b> on convex polygons and {{monotone}} polygons of {{the same}} direction may be performed in linear time.|$|R
50|$|There are {{straightforward}} ways {{to perform}} the standard <b>boolean</b> <b>operations</b> on ANF inputs {{in order to get}} ANF results.|$|R
