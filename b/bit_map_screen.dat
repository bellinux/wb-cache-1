0|683|Public
5000|$|The header {{building}} {{can become}} a very easy operation, overwrite a <b>bit</b> <b>map.</b>|$|R
40|$|<b>Bit</b> <b>maps</b> {{have been}} used in many Design Automation (DA) {{algorithms}} uch as printed circuit board (PCB) layout and integrated circuit (IC) design rule checking ('DRC). The attraction of <b>bit</b> <b>maps</b> is that they provide a direct representation f two-dimensional images. The difficulty with large so:ale use of <b>bit</b> <b>maps</b> (e. g., for DRC on VLSI) is that the large amounts of data can consume impractical amounts of computation on sequential machines. This paper describes a processing archilecture that is specifically designed to operate on <b>bit</b> <b>maps.</b> It has an inherently two-dimensional construction and has a very large parallel processing capability. Also included in tiffs paper are descriptions of algorithms that exploit the architecture. Algnrithms for routing, DRC, and bit vector manipulation are included, large amounts of data; a miss match between conventional word based computers and required bit operations on two dimensional data structures. It should be noted that <b>bit</b> <b>map</b> processing architectures have been proposed since 1958 [9] for image processing applications. Recently, machines have been reported by Reeves [6, 7] and l) nff[2, 3]. ltowever, in all the earlier work, a large scale implementation was problematic. We describe a physical chip design that can be integrated into a large scale bit processing architecture. The approach is to incorporate one processing element into each node of a <b>bit</b> <b>map.</b> The scheme is called SAM for synchronous active memory. In the following sections, the operation of one SAM cell, tile overall SAM architecture, algorithms and future work arc described. 2...|$|R
50|$|Super <b>Bit</b> <b>Mapping</b> (SBM) is a noise shaping process, {{developed}} by Sony for CD mastering.|$|R
5000|$|... {{availability}} of advanced data structures: arrays, queues (single or double), stacks, <b>bit</b> <b>maps,</b> sets, AVL trees.|$|R
3000|$|... {{taken from}} the {{alphabet}} of an arbitrary <b>bit</b> <b>mapping</b> scheme applied after channel encoding and bit interleaving.|$|R
5000|$|Method for {{converting}} a <b>bit</b> <b>map</b> of {{an image}} to a run length or run. US Pat. 4646356 ...|$|R
30|$|The {{proposed}} {{method is}} based on the use of a <b>Bit</b> <b>Map.</b> The <b>Bit</b> <b>Map</b> is a table recording and indicating how many bits were or are allocated on each subcarrier of OFDM symbols in a previous or current packet, respectively. In fact, the number of bits is directly proportional to the data rate of each subcarrier (data rate = the number of bits/OFDM symbol duration). In order to avoid confusion, hereinafter we use only the data rate. The overall operation of the protocol is as follows. The sender sends an RTS to the receiver. When it receives the RTS, the receiver estimates the condition of all subcarriers and determines the data rate that can be sent on each of them. After updating its <b>Bit</b> <b>Map,</b> the receiver sends a CTS packet, which uses a modified packet format derived from the IEEE 802.11 standard. The detailed CTS packet format is described in Section 2.2. The sender updates its <b>Bit</b> <b>Map</b> according to the information embedded in the CTS. The details of the method are illustrated in the following subsections.|$|R
3000|$|... bits. There {{should be}} a bit-mapping. The only subset, which {{contains}} the all-zero bit-vector, is used for <b>bit</b> <b>mapping</b> from [...]...|$|R
50|$|Detector {{displays}} active {{levels on}} the <b>map</b> <b>screen.</b>|$|R
40|$|The {{most common}} methods for {{maintain}} {{a list of}} free sectors on disk are to use either a linked list or a <b>bit</b> <b>map</b> [1]. Using a linked list has the advantage that is requires no extra storage since the links are stored in the free sectors. It also provides quick allocation and deaUocation, requiring only that a free sector {{be removed from the}} head of the list, or a freed sector be added {{to the head of the}} list, respectively. The main disadvantage of a linked list is that over time the list tends towards random. That is, unless the list is sorted, sectors are placed on the list in no particular order. The result is poor locality during file access, significantly impacting performance by increasing the average seek time. By using a <b>bit</b> <b>map,</b> adjacent free sectors will always appear adjacent in the <b>bit</b> <b>map.</b> There is a small cost in terms of storage; that is, the <b>bit</b> <b>map</b> will contain one eighth as many bytes as there are sectors on the disk. There is a potentially more important concern: the average number of bits that must be scanned in order to find a free sector. Since this technique was first used, the size of disks has increased by approximately four orders of magnitude. If the number of bits to be scanned on average increased even a small fraction of this amount, the technique would need to be abandoned. This question came up in our undergraduate operating systems course. Our initial speculation was that <b>bit</b> <b>maps</b> would be inappropriate for the large disks that are becoming available. As the following analysis will show, the <b>bit</b> <b>map</b> technique remains viable for large disks, and as we shall see it is, in a sense, independent of the size of the disk. Assume for the moment that the free sectors are uniformly distributed across the disk, resulting from files being freed in no particular order. Further assume that the system is in steady state with r sectors free on average out of a total n. The problem then reduces to drawing one of r cards from a deck of size n [2]. Let b~, 1 < i < n, be the <b>bit</b> <b>map</b> where there are r zero bits indicating free sectors. Then the probability of the first bit being zero i...|$|R
50|$|Not every {{driver and}} server needs to {{communicate}} with every other driver and server. Accordingly, a per-process <b>bit</b> <b>map</b> determines which destinations each process may send to.|$|R
50|$|Enterprise {{has five}} {{graphics}} modes: 40- and 80-column text modes, Lo-Res and Hi-Res <b>bit</b> <b>mapped</b> graphics, and attribute graphics. <b>Bit</b> <b>mapped</b> graphics modes allow selection between displays of 2, 4,16 or 256 colours, but horizontal resolution decreases as colour depth increases. Interlaced and non-interlaced modes are available. The maximum resolution is 640×512 pixels interlaced, or 640×256 pixels non-interlaced. These resolutions permit only a 2-colour display. A 256-colour display has a maximum resolution of 80×256. The attribute graphics mode provides a 320×256 pixel resolution with 16 colours, selectable from {{a palette of}} 256.|$|R
50|$|Gameplay {{is divided}} into the main world <b>map</b> <b>screen</b> and {{individual}} battle <b>screens.</b> On the <b>map</b> <b>screen,</b> the player is allowed one action per turn (in-game month) per territory. With that action, the player may hire or move troops, upgrade the territory's economy or defenses, engage in diplomatic actions (such as sabotage or plunder a neighboring territory), or attack an adjacent enemy territory.|$|R
40|$|The {{most common}} methods for {{maintain}} {{a list of}} free sectors on disk are to use either a linked list or a <b>bit</b> <b>map</b> [1]. Using a linked list has the advantage that is requires no extra storage since the links are stored in the free sectors. It also provides quick allocation and deallocation, requiring only that a free sector {{be removed from the}} head of the list, or a freed sector be added {{to the head of the}} list, respectively. The main disadvantage of a linked list is that over time the list tends towards random. That is, unless the list is sorted, sectors are placed on the list in no particular order. The result is poor locality during file access, significantly impacting performance by increasing the average seek time. By using a <b>bit</b> <b>map,</b> adjacent free sectors will always appear adjacent in the <b>bit</b> <b>map.</b> There is a small cost in terms of storage; that is, the <b>bit</b> <b>map</b> will contain one eighth as many bytes as there are sectors on the disk. There is a potentially more important concern: the average number of bits that must be scanned in order to find a free sector. Since this technique was first used, the size of disks has increased by approximately four orders of magnitude. If the number of bits to b...|$|R
5000|$|... #Caption: Screenshot from Spirit of Excalibur {{showing a}} portion of Britain on the <b>map</b> <b>screen</b> ...|$|R
3000|$|... [...]. Here {{superscript}} 0 {{points out}} that these symbol estimates are obtained before coded feedback. This idea was presented in [4], and we use it before the first soft symbols to <b>bits</b> <b>mapping.</b>|$|R
5000|$|... native {{support for}} {{high-level}} data structures: arrays, queues (single or double), stacks, <b>bit</b> <b>maps,</b> sets, AVL trees are already available in Proteus {{and do not}} require additional code or libraries to be used; ...|$|R
3000|$|... -ary square QAM with Gray <b>bit</b> <b>mapping.</b> In {{the work}} of Rugini and Banelli [11], the BER of SISO-OFDM with {{frequency}} offset is developed. The BER analysis in [11] is now extended to MIMO-OFDM.|$|R
50|$|Since iOS 7, a bug {{made the}} game unplayable, {{preventing}} {{the user to}} get past the <b>map</b> <b>screen.</b>|$|R
5000|$|... #Caption: Screen of the Director's Cut {{showcasing}} the new [...] "Leon Mode" [...] and the 3D <b>map</b> <b>screen.</b>|$|R
5|$|Donkey Kong Country uses {{a series}} of <b>map</b> <b>screens</b> to track the players' progress. Between each level, players control their {{character}} on the <b>map</b> <b>screen,</b> navigating {{to the next level}} they want to play. Each level on the map is marked with an icon: unfinished levels are marked by Kremlings (the game's main enemy), while friendly areas are marked by members of the Kong family. Every individual world <b>map</b> <b>screen</b> has one boss enemy {{at the end of the}} course, which must be defeated to travel back to the main <b>map</b> <b>screen</b> of the whole island. It is possible to access previous world maps without defeating the boss by finding Funky Kong and borrowing his barrel plane. Players use this ability to select the world from the main screen, then the level within it. During play the game interface hides most game-related information, such as the number of bananas, letters, and animal tokens collected, as well as the number of lives remaining. When an item is collected, the relevant information briefly appears on the screen.|$|R
50|$|Update 3.7 {{included}} the character Predator Furry, Zombie Gore, and Easter Bunny. It also introduced graphical {{improvements to the}} <b>map</b> <b>screen.</b>|$|R
5|$|Players can journey between field screen {{locations}} via {{the world}} map, a downsized representation of Final Fantasy Legends various worlds. Players can freely navigate {{around the world}} <b>map</b> <b>screen</b> unless restricted by terrain, such as water or mountains. The goal in each world {{is to find the}} entrance to the next level of the Tower. Random enemy encounters occasionally interrupt travel across the world <b>map</b> <b>screen</b> and hostile areas, as in other Final Fantasy related games.|$|R
5000|$|Players can journey between field screen {{locations}} via {{the world}} map, a downsized representation of Final Fantasy Legend IIs various worlds. Players can freely navigate {{around the world}} <b>map</b> <b>screen</b> unless restricted by terrain, such as water or mountains. The goal in each world is to obtain enough [...] "MAGI" [...] to progress to the next world. Like other Final Fantasy related games, travel across the world <b>map</b> <b>screen</b> and hostile areas is occasionally interrupted by random enemy encounters.|$|R
50|$|Donkey Kong Country uses {{a series}} of <b>map</b> <b>screens</b> to track the players' progress. Between each level, players control their {{character}} on the <b>map</b> <b>screen,</b> navigating {{to the next level}} they want to play. Each level on the map is marked with an icon: unfinished levels are marked by Kremlings (in the original trilogy), while friendly areas are marked by members of the Kong family. Every individual world <b>map</b> <b>screen</b> has one boss enemy {{at the end of the}} course, which must be defeated to advance to further worlds. In the original trilogy, it is only possible to access the entire island map after defeating a world boss. However, it is also possible to access previous world maps by finding Funky Kong and borrowing his barrel plane. Players use this ability to select the world from the main screen, then the level within it. During play the game interface hides most game-related information, such as the number of bananas, letters, and animal tokens collected, as well as the number of lives remaining. When an item is collected, the relevant information briefly appears on the screen. In Donkey Kong 64 a huge overworld is used instead of a <b>map</b> <b>screen.</b>|$|R
30|$|If the {{transmission}} of the CTS packet fails, the receiver {{goes back to the}} previous bit allocation information contained in the <b>Bit</b> <b>Map,</b> {{as in the case of}} DATA packet loss. This case is shown in Figure 7 (b).|$|R
50|$|Whitewater Resource Editor was {{an early}} {{resource}} editor developed by the Whitewater Group for Microsoft Windows 3.11. The WYSIWYG editor allowed resources to be edited, created, and managed including accelerator keys, <b>bit</b> <b>maps,</b> cursor shapes, icons, dialog boxes, menus, and more.|$|R
3000|$|After {{the process}} {{illustrated}} in Section 2.3 is completed, the receiver (i.e., the destination of the RTS packet) sends a CTS packet to the sender (i.e., {{the source of}} the RTS packet). The CTS packet includes the Bit-Map-Adjustment OFDM symbol updated by the receiver. After receiving the CTS packet, the sender also updates its own <b>Bit</b> <b>Map</b> following the rule shown in Table 1. By using the data rates represented in the updated Bit-Map, the sender generates and sends a DATA packet with the [...] "Confirmation" [...] subfield set to 1. When the receiver receives this DATA packet, it demodulates the packet based on the <b>Bit</b> <b>Map</b> information and sends an ACK to the sender.|$|R
5|$|Players journey between field screen {{locations}} {{on the world}} map, a three dimensional, downsized representation of Final Fantasy IXs world presented from a top-down perspective. Players can freely navigate around the world <b>map</b> <b>screen</b> unless restricted by terrain like bodies of water or mountain ranges. To overcome geographical limitations, players can ride chocobos, sail on a boat or pilot airships. Like previous Final Fantasy installments, travel across the world <b>map</b> <b>screen</b> and hostile field screen locations is interrupted by random enemy encounters.|$|R
5|$|Starting {{from the}} second act, players can journey between field screen {{locations}} via the world map, a downsized representation of Final Fantasy VIIs world. Players can freely navigate the world <b>map</b> <b>screen</b> unless restricted by geographical obstacles, such as water or mountains. To overcome this, players can ride emu-like chocobos and various vehicles available to them, though usage is limited. As in other Final Fantasy-related games, travel across the world <b>map</b> <b>screen</b> and hostile areas is frequently interrupted by random enemy encounters.|$|R
50|$|Players journey between field screen {{locations}} {{on the world}} map, a three dimensional, downsized representation of Final Fantasy IXs world presented from a top-down perspective. Players can freely navigate around the world <b>map</b> <b>screen</b> unless restricted by terrain like bodies of water or mountain ranges. To overcome geographical limitations, players can ride chocobos, sail on a boat or pilot airships. Like previous Final Fantasy installments, travel across the world <b>map</b> <b>screen</b> and hostile field screen locations is interrupted by random enemy encounters.|$|R
50|$|The {{music of}} the game was {{composed}} by Jun Chikuma. The game reuses music from other installments in the series. The <b>map</b> <b>screen</b> music from Bomberman '93 {{is used in the}} <b>map</b> <b>screen</b> of the game, and the first world, final world, and final boss music from Bomberman '94 is used in the first world, fifth world, and final boss of the game, respectively. The battle menu theme is taken from Super Bomberman 3, as is the battle game music.|$|R
50|$|Starting {{from the}} second act, players can journey between field screen {{locations}} via the world map, a downsized representation of Final Fantasy VIIs world. Players can freely navigate the world <b>map</b> <b>screen</b> unless restricted by geographical obstacles, such as water or mountains. To overcome this, players can ride emu-like chocobos and various vehicles available to them, though usage is limited. As in other Final Fantasy-related games, travel across the world <b>map</b> <b>screen</b> and hostile areas is frequently interrupted by random enemy encounters.|$|R
5000|$|The dyadic {{transformation}} (also {{known as}} the dyadic <b>map,</b> <b>bit</b> shift <b>map,</b> 2x mod 1 map, Bernoulli map, doubling map or sawtooth map) is the mapping (i.e., recurrence relation) ...|$|R
50|$|Sony {{claims that}} the Super <b>Bit</b> <b>Mapping</b> process {{converts}} a 20-bit signal from master recording into a 16-bit signal nearly without sound quality loss, using noise shaping to improve {{signal to noise ratio}} over the frequency bands most acutely perceived by human hearing.|$|R
25|$|Star Fox 2 {{employs a}} semi-real-time game system. While {{selecting}} a destination on the <b>map</b> <b>screen,</b> {{the game is}} paused, but while the player's ships travel to their destinations, enemies and missiles also move toward theirs. While fighting enemies in the action screen, time counts forward {{at a slower pace}} than on the <b>map</b> <b>screen,</b> allowing other enemies and missiles to advance and cause damage. To prevent excessive damage to Corneria, the player may occasionally need to leave a battle to intercept another enemy.|$|R
