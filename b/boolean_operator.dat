87|588|Public
25|$|When {{a single}} logical {{connective}} or <b>Boolean</b> <b>operator</b> is functionally complete by itself, {{it is called}} a Sheffer function or sometimes a sole sufficient operator. There are no unary operators with this property. NAND and NOR , which are dual to each other, {{are the only two}} binary Sheffer functions. These were discovered, but not published, by Charles Sanders Peirce around 1880, and rediscovered independently and published by Henry M. Sheffer in 1913.|$|E
50|$|Decision: A Boolean {{expression}} {{composed of}} conditions and zero or more Boolean operators. A decision without a <b>Boolean</b> <b>operator</b> is a condition.|$|E
5000|$|... it {{is useful}} to define the notion of a {{generalized}} conjunctive normal form formula, viz. as a conjunction of arbitrarily many generalized clauses, the latter being of the form [...] for some <b>boolean</b> <b>operator</b> R and (ordinary) literals [...] Different sets of allowed boolean operators lead to different problem versions.|$|E
5000|$|... 48 “Gate” cards {{using three}} <b>Boolean</b> <b>operators</b> AND, OR, and XOR ...|$|R
40|$|International audienceBoolean systems still {{constitute}} {{most of the}} {{installed base}} of online public access catalogues (OPACs) in the French universities even if many {{studies have shown that}} <b>Boolean</b> <b>operators</b> are not frequently used by ‘non-librarian' users (by contrast with professional librarians). The first study examined the use of <b>Boolean</b> <b>operators</b> by French university students; In the second study, elaborated to evaluate the impact of information search expertise on this use, <b>Boolean</b> <b>operators</b> are explicitly presented and participants were explicitly invited to use them. We assumed that university students would not frequently use the operators in searching, and that even if they were explicitly invited to make use of them. Results obtained with the first study based on transaction logs analyses confirmed that French university students did not frequently use <b>Boolean</b> <b>operators.</b> The impact of information search expertise, analysed in the second study, compared three levels of expertise: Novice (university students), intermediate (future professional librarians), and expert (professional librarians). Results showed that, even if the three groups were invited to use <b>Boolean</b> <b>operators,</b> this use increased significantly with the level of information search expertise. University students, if they manage procedural functions of connectives in natural language, do not always manage the whole set of procedural functions carried by such connectives when used in the documentary language. So, the relevance of presenting explicit <b>Boolean</b> <b>operators</b> in the OPACs when users are ‘non-librarians' is questioned...|$|R
5000|$|Less than 5% {{of users}} used {{advanced}} search features (e.g., <b>boolean</b> <b>operators</b> like AND, OR, and NOT).|$|R
5000|$|... where Qi(ni,Xi) denotes a {{statistical}} decision rule, ni denotes {{the size of}} the sample Si, that is the number of the samples the rule is applied upon, and Xi denotes the vector of the rule specific parameters, including the decision limits. Each symbol # denotes either the <b>Boolean</b> <b>operator</b> AND or the operator OR. Obviously, for # denoting AND, and for n1 < n2 <...< nq, that is for S1 [...] S2 .... Sq, the (1) denotes a q-sampling QC procedure.|$|E
50|$|When {{a single}} logical {{connective}} or <b>Boolean</b> <b>operator</b> is functionally complete by itself, {{it is called}} a Sheffer function or sometimes a sole sufficient operator. There are no unary operators with this property. NAND and NOR , which are dual to each other, {{are the only two}} binary Sheffer functions. These were discovered, but not published, by Charles Sanders Peirce around 1880, and rediscovered independently and published by Henry M. Sheffer in 1913.In digital electronics terminology, the binary NAND gate and the binary NOR gate are the only binary universal logic gates.|$|E
5000|$|For {{manipulating}} values {{belonging to}} data types, operators are defined on the values. Thus, natural number addition, subtraction etc. are provided, as are Boolean operators such as equality and inequality. The language does not fix a maximum or minimum representable number or a precision for real numbers. Such constraints are defined {{where they are}} required in each model by means of data type invariants—Boolean expressions denoting conditions that must be respected by all elements of the defined type. For example, a requirement that user identifiers must be no greater than 9999 would be expressed as follows (where [...] is the “less than or equal to” <b>Boolean</b> <b>operator</b> on natural numbers): ...|$|E
25|$|An {{instance}} of the Boolean satisfiability problem is a Boolean expression that combines Boolean variables using <b>Boolean</b> <b>operators.</b>|$|R
50|$|The Java <b>boolean</b> <b>operators</b> do {{not support}} ternary logic, nor is it {{implemented}} in the base class library.|$|R
50|$|An {{instance}} of the Boolean satisfiability problem is a Boolean expression that combines Boolean variables using <b>Boolean</b> <b>operators.</b>|$|R
5000|$|In {{logic and}} mathematics, the logical {{biconditional}} (sometimes {{known as the}} material biconditional) is the logical connective of two statements asserting [...] "p {{if and only if}} q", where p is an antecedent and q is a consequent. This is often abbreviated [...] "p iff q". The operator is denoted using a doubleheaded arrow (↔), a prefixed E (Epq), an equality sign (=), an equivalence sign (≡), or EQV. It is logically equivalent to (p → q) ∧ (q → p). It is also logically equivalent to [...] "(p and q) or (not p and not q)" [...] (or the XNOR (exclusive nor) <b>boolean</b> <b>operator),</b> meaning [...] "both or neither".|$|E
5000|$|Unlike in Integer BASIC, Applesoft BASIC {{variable}} {{names are}} significant only to two letters; {{they can be}} made longer, but only the first two letters are used. For instance, [...] "LOW" [...] and [...] "LOSS" [...] are treated as the same variable, and attempting to assign a value to [...] "LOSS" [...] overwrites any value assigned to [...] "LOW". Furthermore, because the language used tokenization, a programmer has to avoid using any consecutive letters that are also Applesoft commands or operations (one cannot use the name [...] "SCORE" [...] for a variable because it interprets the OR as a <b>Boolean</b> <b>operator,</b> thus rendering it SC OR E, nor can one use [...] "BACKGROUND" [...] because the command [...] "GR" [...] invokes the low-resolution graphics mode, in this case creating a syntax error).|$|E
40|$|Have {{you ever}} {{wondered}} why a Google search gets so many results? Part {{of the reason}} {{has to do with}} what Google is doing with what you type in. Here are a few things to remember so that you can focus your searching: <b>Boolean</b> <b>Operator</b> AND Google automatically connects the words you type with the <b>Boolean</b> <b>operator</b> AND. So if you type kayak quebec, Google will search for both those words in various websites, automatically looking for them together...|$|E
5000|$|Short-circuit {{evaluation}}, minimal evaluation, or McCarthy evaluation (after John McCarthy) is the semantics of some <b>Boolean</b> <b>operators</b> in some programming {{languages in}} which the second argument is executed or evaluated only if the first argument does not suffice to determine {{the value of the}} expression: when the first argument of the [...] function evaluates to , the overall value must be and when the first argument of the [...] function evaluates to , the overall value must be [...] In some programming languages (Lisp, Perl), the usual <b>Boolean</b> <b>operators</b> are short-circuit. In others (Ada, Java), both short-circuit and standard <b>Boolean</b> <b>operators</b> are available. For some Boolean operations, like exclusive or (XOR), {{it is not possible to}} short-circuit, because both operands are always required to determine the result.|$|R
50|$|Spotlight {{incorporates}} additional search capabilities such as <b>Boolean</b> <b>operators,</b> {{as well as}} {{the ability}} to search other computers (with permissions).|$|R
5000|$|Keywords. Users can use <b>Boolean</b> <b>operators</b> and Mask {{for finding}} {{information}} in project description and title fields. [...] Search query examples: ...|$|R
40|$|Abstract-Predicates {{appear in}} both the {{specification}} and implementation of a program. One approach to software testing, referred to as predicate testing, is to require certain types of tests for a predicate. In this paper, three fault-based testing criteria are defined for compound predicates, which are predicates {{with one or more}} AND/OR operators. BQR (<b>boolean</b> <b>operator)</b> testing requires a set of tests to guarantee the detection of (single or multiple) <b>boolean</b> <b>operator</b> faults, including incorrect AND/OR operators and missing/extra NOT operators. BRO (boolean and relational operator) testing requires a set of tests to guarantee the detection of <b>boolean</b> <b>operator</b> faults and relational operator faults (i. e., incorrect relational operators). BRE (boolean and relational expression) testing requires a set of tests to guarantee the detection of <b>boolean</b> <b>operator</b> faults, relational operator faults, and a type of fault involving arithmetical expressions. It is shown that for a compound predicate with n, n z 0, AND/OR operators, at most n + 2 constraints are needed for BOR testing and at most 2 * n + 3 constraints for BRO or BRE testing, where each constraint specifies a restriction on the value of each boolean variable or relational expression in the predicate. Algorithms for generating a minimum set of constraints for BOR, BRO, and BRE testing of a compound predicate are given, and the feasibility problem for the generated constraints is discussed. For boolean expressions that contain multiple occurrences of some boolean variables, how to combine BOR testing with the meaningful impact strategy developed by Weyuker, Goradia, and Singh [21] is briefly described. Index Terms-Software testing, predicate testing, fault-based testing, <b>boolean</b> <b>operator</b> faults, relational operator faults, off-by-c faults. 1 INTRODUCT~O...|$|E
30|$|<b>Boolean</b> <b>Operator</b> used—AND/OR. Full text {{articles}} in English language {{were selected from}} 2000 to 2015 to restrict {{the focus of the}} review to the most recent and advanced findings.|$|E
40|$|One {{elegant and}} linguistically {{powerful}} guideline for a semantic theory of coordination will {{be referred to}} here as the Boolean assumption. According to this assumption conjunctive coordinators like and are described using the cross-categorial <b>Boolean</b> <b>operator</b> of Generalized Conjunction (GC). Symmetrically, disjunctive coordinator...|$|E
5|$|Python {{uses the}} words and, or, not for its <b>boolean</b> <b>operators</b> {{rather than the}} {{symbolic}} &&, ||, ! used in Java and C.|$|R
5000|$|Some {{examples}} of <b>boolean</b> <b>operators</b> in action: if name:eqs:"luke" [...] out:"May the force be with you!" [...] if ^age:gtn:500 out:"Heh, you cant be Yoda!" ...|$|R
40|$|The {{inference}} {{network model}} of information retrieval allows for a probabilistic interpretation of <b>Boolean</b> query <b>operators.</b> Prior work has shown, however, that these operators do not perform {{as well as the}} the pnorm operators developed {{in the context of the}} vector space model. The design of alternative operators in the inference network framework must contend with the issue of computational tractability. We define a flexible class of link matrices that are natural candidates for the implementation of <b>Boolean</b> <b>operators</b> and an O(n²) algorithm for the computation of probabilities involving link matrices of this class. We present experimental results indicating that <b>Boolean</b> <b>operators</b> implemented in terms of link matrices from this class perform at least as well as pnorm operators...|$|R
30|$|The {{reviewed}} {{papers are}} identified through keywords in referenced electronic databases, such as Google Scholar, Web of Science, ERIC, PsycInfo, PsycArticles Fulltext Search, InterDok, ProQuest, Scopus, BEI, and SearchPlus. The keywords for learning outcomes are {{a combination of}} the term games or simulations paired with the term higher education, employing the <b>Boolean</b> <b>operator</b> “AND”. Additional keywords for learning outcomes are learning objectives, learning goals, learning objectives and effects. Keywords for platform and delivery methods include computer-based, web-based, digital, virtual, online, and technology. Keywords for games and simulations are educational games, business simulations, role-playing simulations, game-based learning, video games, and serious games. Moreover, the <b>Boolean</b> <b>operator</b> “OR” is employed to combine all these keywords. The study sets the broadest range of keywords, so as not to limit the scope of related articles.|$|E
40|$|As {{databases}} and Internet search engines continue to become increasingly user-friendly, {{the need for}} <b>Boolean</b> <b>operator</b> skills seems to have waned but in reality, the amount of online information is skyrocketing as thousands of articles are uploaded each day. Bridging familiar activities with new <b>Boolean</b> <b>operator</b> skills {{sets the stage for}} a smooth introduction for students and creates a strong foundation for the retention of those skills. Using the simple task of ordering from a restaurant menu to demonstrate to students they already have the skills to do successful online searching, the South-of-the-Border Boolean lesson plan connects everyday tasks and scholarly application, while boosting confidence in students. This article will begin with a brief literature review, followed by an introduction of the lesson plan, including student learning outcomes, assessment, and unexpected results...|$|E
30|$|A {{systematic}} {{literature search}} {{was performed to}} retrieve articles pertaining to body composition, energy intake, and TEE in endurance athletes across the training season. One researcher (JH) conducted the search for publications on 31 January 2015 in the electronic databases MEDLINE (via PubMed) and SPORTDiscus with Full Text (via EBSCOHost). A hand search of relevant reviews was performed to obtain additional articles missed by the database search. No individual or organization was contacted to receive further publications. To identify the population of endurance athletes, the following keywords connected with the <b>Boolean</b> <b>operator</b> “OR” were searched: endurance athletes, endurance-trained, endurance trained, aerobically trained, runners, swimmers, triathletes, skiers, cyclists, and rowers. To identify the outcome of body composition, TEE, and energy intake, the following keywords connected with the <b>Boolean</b> <b>operator</b> “OR” were searched: body composition, fat mass, fat-mass, fat free mass, fat-free mass, body fat, metabolic rate, energy expenditure, dietary intake, food intake, energy intake, food consumption, and macronutrient*. Terms for the study population and outcomes were combined {{by the use of}} the <b>Boolean</b> <b>operator</b> “AND”. Limits included articles published in the English language, human studies, and publishing date limits between 1990 and January 2015. Keywords were searched as free text in the title, abstract, and subject heading. A detailed overview of search strategies in the two databases can be obtained in Additional file 1 : Table S 1.|$|E
50|$|Extended Pascal {{addresses}} many {{of these}} early criticisms. It supports variable-length strings, variable initialization, separate compilation, short-circuit <b>boolean</b> <b>operators,</b> and default (OTHERWISE) clauses for case statements.|$|R
40|$|Abstract. The {{standard}} reasoning problem, concept satisfiability, in {{the basic}} description logic ALC is PSPACE-complete, and it is EXPTIMEcomplete {{in the presence of}} unrestricted axioms. Several fragments of ALC, notably logics in the FL, EL, and DL-Lite families, have an easier satisfiability problem; sometimes it is even tractable. All these fragments restrict the use of <b>Boolean</b> <b>operators</b> in one way or another. We look at systematic and more general restrictions of the <b>Boolean</b> <b>operators</b> and establish the complexity of the concept satisfiability problem in the presence of axioms. We separate tractable from intractable cases. ...|$|R
5000|$|The {{concept of}} [...] "tree search" [...] brings about strong search ability. In addition, the {{flexible}} use of AND, OR and NOT <b>Boolean</b> <b>operators</b> helps filtering out undesirable results.|$|R
3000|$|... {{and where}} 1 (·) is a <b>Boolean</b> <b>operator</b> equalling one when the term inside the {{brackets}} {{is true and}} zero otherwise. In addition, x 1 j is a vector of variables affecting the hazard rate of returning to accommodated work (j = 1), non-accommodated work (j[*]=[*] 2) and to a new employer (j[*]=[*] 3), and β 1 j;[*]j[*]=[*] 1,[*] 2,[*] 3 is a corresponding row vector of regression coefficients. The parameter [...]...|$|E
40|$|We {{identify}} a new representation of propositional knowledge bases, the Sentential Decision Diagram (SDD), which is interesting {{for a number}} of reasons. First, it is canonical in the presence of additional properties that resemble reduction rules of OBDDs. Second, SDDs can be combined using any <b>Boolean</b> <b>operator</b> in polytime. Third, CNFs with n variables and treewidth w have canonical SDDs of size O(n 2 w), which is tighter than the bound on OBDDs based on pathwidth. Finally, every OBDD is an SDD. Hence, working with the latter does not preclude the former. ...|$|E
40|$|Consider the {{following}} curious puzzle: call an n-tuple X=(X_ 1, [...] ., X_n) of sets smaller than another n-tuple Y {{if it has}} fewer //unordered sections//. We show that equivalence classes for this preorder are very easy to describe and characterize the preorder {{in terms of the}} simpler pointwise inclusion and the existence of a special increasing <b>boolean</b> <b>operator</b> f:B^n -> B^n. We also show that contrary to increasing boolean operators, the relevant operators are not finitely generated, which might explain why this preorder is not easy to describe concretely. Comment: 10 pages, including appendi...|$|E
50|$|IARP {{translates}} {{this initial}} search formulation and automatically adds field names, <b>Boolean</b> <b>operators,</b> and enhancing the search formulation significantly, in particular by routinely combining (using the OR operator) text words.|$|R
5000|$|Using <b>Boolean</b> <b>operators</b> {{on major}} search engine sites (Google, Bing.com, Yahoo!, etc.) to {{identify}} potential candidates who might {{meet the criteria}} of the position to be filled based on targeted keywords.|$|R
25|$|Apart from logical connectives (<b>Boolean</b> <b>operators),</b> {{functional}} completeness can {{be introduced}} in other domains. For example, {{a set of}} reversible gates is called functionally complete, if it can express every reversible operator.|$|R
