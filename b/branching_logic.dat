37|461|Public
5000|$|The {{software}} has built-in <b>branching</b> <b>logic,</b> {{which will}} skip {{questions that are}} not applicable or will probe for more detail when warranted.|$|E
50|$|The {{other main}} setting for ePRO is the clinic, with {{questionnaires}} completed when patients {{come in for}} their scheduled visits. In this supervised situation, compliance is less of an issue. The questionnaires used in site-based ePRO are often longer and more complex than those used in diaries, assessing {{quality of life and}} activities of daily living, for example, in some detail. They more often include <b>branching</b> <b>logic</b> ("if YES continue with the next question, if NO, goto question 34"). Such <b>branching</b> <b>logic</b> can be handled automatically by the ePRO application, and it is often not necessary for the patient even to know that branching is taking place. This makes it easier for the patient to use.|$|E
50|$|The Monroe EPIC was a {{programmable}} calculator that {{came on the}} market in the 1960s. It consisted of a large desktop unit which attached to a floor-standing logic tower, and was capable of being programmed to perform many computer-like functions. However the only form of a branching instruction available was a hard-coded unconditional branch (GOTO) that always executed at program completion (the end of the operation stack) to return to the starting instruction of the program (looped back to beginning of operation stack). This made the creation of conditional <b>branching</b> <b>logic,</b> such as IF-THEN-ELSE, impossible.|$|E
50|$|The Ebox {{therefore}} {{has four}} 64-bit adders, four logic units, two barrel shifters, byte-manipulation logic, {{two sets of}} conditional <b>branch</b> <b>logic</b> equally divided between U1 and U0.|$|R
50|$|The {{processor}} {{is available}} in many different variants, some with fixed-point arithmetic and some with floating point arithmetic. The floating point DSP TMS320C3x, which exploits delayed <b>branch</b> <b>logic,</b> has {{as many as three}} delay slots.|$|R
40|$|High-performance superscalar {{processors}} {{examine a}} large pool of speculative instructions, called the dynamic instruction window, to exploit instruction-level parallelism (ILP). Scaling performance requires {{a larger and}} more accurate dynamic instruction window, which, in turn, requires a more accurate branch predictor. Achieving higher accuracy typically requires increasing {{the size of the}} branch predictor. Unfortunately, this may cause an increase in the processor's cycle time. A fast cycle time can be preserved by pipelining the <b>branch</b> prediction <b>logic.</b> This is not straightforward, however. The branch predictor uses the program counter (PC) of the current fetch block (among other context) to produce information that is needed to predict the PC of the next fetch block. This means that the inputs to the <b>branch</b> prediction <b>logic</b> depend on its outputs. This dependency loop within the <b>branch</b> prediction <b>logic</b> renders naive pipelining ineffective. Accordingly, if we want to use a larger branch predictor without increasing cycle time, then we need to apply sophisticated approaches to effectively pipeline the next PC loop. Several approaches to effectively pipeline the <b>branch</b> prediction <b>logic</b> hav...|$|R
50|$|Two {{otherwise}} securely isolated processes {{running on}} a single system with either cache memory or virtual memory can communicate by deliberately causing page faults and/or cache misses in one process, then monitoring the resulting changes in access times from the other. Likewise, if an application is trusted, but its paging/caching is affected by <b>branching</b> <b>logic,</b> {{it may be possible}} for a second application to determine the values of the data compared to the branch condition by monitoring access time changes; in extreme examples, this can allow recovery of cryptographic key bits.|$|E
50|$|Oracle Policy Modeling is a Windows desktop {{application}} for transforming legislation and policy documents into executable business rules. Rules {{are written in}} Microsoft Word and Excel documents using phrases in languages such as English, Chinese and French. These rule documents can be shared amongst business and information technology stakeholders, and commentary can be added into the documents without affecting {{the structure of the}} rules themselves. Other features of Oracle Policy Modeling include integrated test case execution and debugging capabilities, and the definition of interviews for interactive rule-based assessments. Interview screen order and <b>branching</b> <b>logic</b> can be defined using visual flow diagrams.|$|E
5000|$|Temporal logic {{always has}} the ability to reason about a time line. So-called linear time logics are {{restricted}} to this type of reasoning. Branching logics, however, can reason about multiple time lines. This presupposes an environment that may act unpredictably.To continue the example, in a <b>branching</b> <b>logic</b> we may state that [...] "there is a possibility that I will stay hungry forever." [...] We may also state that [...] "there is a possibility that eventually I am no longer hungry." [...] If we do not know whether or not I will ever get fed, these statements are both true sometimes.|$|E
40|$|We {{show that}} ECTL, the {{classical}} extension of CTL with fairness properties, is expressively equivalent to BTL 2. BTL 2 is the <b>branching</b> time <b>logic</b> with abritrary quanti cation over paths, and where path formulae {{are restricted to}} quanti er depth rst-order formulae in the monadic logic of order. This result, linking ECTL to a natural fragment of the monadic logic of order, provides a characterization that other <b>branching</b> time <b>logics,</b> e. g. CTL, lack...|$|R
5000|$|... 32-bit VLIW-SIMD vector {{units at}} 147.456 MHz: VPU0 and VPU1 (floating point {{multiply}} accumulator × 9, floating point divider × 1) each VPU contains a vector unit (VU), instruction cache, data cache and interface unit. Each vector unit also has upper execution unit containing 4xfMAC and lower execution unit containing fDIV, integer ALU, load-store unit, <b>branch</b> <b>logic,</b> 16 16-bit integer registers and 32 128-bit floating point registers. VPU1 has an additional EFU unit.|$|R
25|$|Conversely, any {{dependence}} logic {{sentence is}} equivalent to some sentence in the <b>logic</b> of <b>branching</b> quantifiers, since all existential second-order sentences are expressible in <b>branching</b> quantifier <b>logic.</b>|$|R
50|$|Two early contenders {{in formal}} {{verifications}} were Linear Temporal Logic (a linear time logic by Amir Pnueli) and Computation Tree Logic, a branching time logic by Mordechai Ben-Ari, Zohar Manna and Amir Pnueli. An almost equivalent formalism to CTL was suggested {{around the same}} time by E.M. Clarke and E.A. Emerson. The fact that the second logic can be decided more efficiently than the first does not reflect on branching and linear logics in general, as has sometimes been argued. Rather, Emerson and Lei show that any linear logic can be extended to a <b>branching</b> <b>logic</b> that can be decided with the same complexity.|$|E
40|$|A {{heuristic}} method for the false-path elimination and the simplification of sequential acyclic descriptions with complex <b>branching</b> <b>logic</b> is introduced. The presented techniques {{are able to}} cope with sequentially dependent branching conditions involving bit-vector expressions. Implications and mutual exclusion of branching conditions are considered. Promising results in the area of automated pipelined synthesis demonstrate that the method considerably reduces control complexity. ...|$|E
40|$|This archive {{includes}} {{three types of}} files. First, FBLL-SurveyDescription. pdf and FBLL-SurveyDescription. txt both provide {{a description of the}} survey instrument, including the text of the survey questions and <b>branching</b> <b>logic</b> about when questions are or are not shown. Second, FBLL-SurveyData. csv contains 410 anonymized responses received to the survey. Purely nonsensical or unusable responses have been removed. Third, for those who use Qualtrics online survey software, FBLL-QualtricsFile. qsf contains an export of the survey questions and <b>branching</b> <b>logic</b> compatible with the Qualtrics. These data come from a questionnaire of over 400 Internet users, focusing specifically on Facebook and those users who have left the service. Results are reported in Baumer, E. P. S., Adams, P., Khovanskaya, V., Liao, T., Smith, M., Sosik, V. S., & Williams, K. (2013). Limiting, Leaving, and (re) Lapsing: A Survey of Facebook Non-use Practices and Experiences. Proceedings of the ACM Conference on Human Factors in Computing Systems (CHI) ...|$|E
40|$|We {{present a}} proof system for <b>branching</b> propositional {{temporal}} <b>logic.</b> The system {{is based on}} nonclausal resolution. The system is proved to be complete. The proof of completeness uses tableau construction for the logic. 1. Introduction Temporal logic is an appropriate formalism to reason about concurrent systems. We consider here the <b>branching</b> propositional temporal <b>logic</b> BPTL, i. e. in underlying model of the logic any instant of time may split into different possible futures. <b>Branching</b> time <b>logic</b> allows to reason about different possible futures. BPTL is a subsystem of <b>branching</b> time <b>logic</b> introduced in [BPM]. The language of BPTL contains the usual propositional connectives (say;; k; oe) and temporal modalities. Time is assumed discrete and branching. In BPTL if u and v range over formulas then ffl fl u means "u is true in each next state"; ffl u means "u is true in some next state; in other words u j kflku; ffl u means "u is always true (from now on) "; ffl Σ u me [...] ...|$|R
50|$|In axiomatic {{set theory}} and the <b>branches</b> of <b>logic,</b> mathematics, and {{computer}} science that use it, the axiom of extensionality, or axiom of extension, {{is one of the}} axioms of Zermelo-Fraenkel set theory.|$|R
40|$|Introduction ! [...] trees {{arise in}} various areas of logic and {{computer}} science. Therefore {{there have been}} many different approaches to specify sets of ! [...] trees: via first and second order logic, tree automata, term rewriting systems, and modal and temporal logics. In this paper we consider <b>logics</b> related to <b>branching</b> time temporal <b>logic.</b> However, unlike the usual <b>branching</b> time <b>logic,</b> we include several "nexttime" operators into the logic, one for each successor relation in the tree. In <b>branching</b> time <b>logics</b> the tree structure is intended to model the nondeterministic behaviour of a program; therefore in these logics one can not distinguish different subtrees which look alike. In many contexts however it is important whether a node has only one child or twin children. Also the order of the children may be of some interest. We regard as "reference logic" the predicate logic containing interpreted binary successor predicates S 1; :...|$|R
40|$|A clausal {{resolution}} approach {{originally developed}} for the <b>branching</b> <b>logic</b> CTL has recently been extended to the logics ECTL and ECTL +. In {{the application of the}} resolution rules searching for a loop is essential. In this paper we define a Depth-First technique to complement the existing Breadth-First Search and provide the complexity analysis of the developed methods. Additionally, it contains a correction in our previous presentation of loops. 1...|$|E
40|$|We view a {{treatment}} protocol as a hierarchical structure of therapeutic modules. The {{lowest level of}} this structure consists of individual therapeutic actions. Combinations of individual actions define higher level modules, which we call routines. Routines are designed to manage limited clinical problems, such as the routine for fluid loading to correct hypovolemia. Combinations of routines and additional actions, together with comments, questions, or precautions organized in a <b>branching</b> <b>logic,</b> in turn, define the treatment protocol for a given disorder...|$|E
40|$|Abstract. We give a {{sound and}} {{complete}} axiomatization {{for the full}} computation tree logic, CTL*, of R-generable models. This solves a long standing open problem in branching time temporal logic. ? 1. Introduction. CTL*, which is occasionally called full computation tree logic, was first described in [Emerson and Sistla, 1984] and [Emerson and Halpern, 1986]. By using a slightly unusual semantics based on paths through Kripke (or transition) structures, CTL * is able to extend, in expressiveness, both the computation tree logic, CTL, of [Clarke and Emerson, 1981], a simple <b>branching</b> <b>logic,</b> and th...|$|E
40|$|The {{first part}} of the thesis {{concerns}} problems related to the question: "when can a regular tree language be defined in first-order logic?" Characterizations in terms of automata of first-order logic and the related chain logic are presented. A decidable property of tree automata called confusion is introduced; it is conjectured that a regular tree language can be defined in chain logic if and only if its minimal automaton does not contain confusion. Furthermore, polynomial time algorithms are presented that decide if a given regular tree language can be defined in any one of the temporal <b>branching</b> <b>logics</b> TL[EX], TL[EF] and TL[EX, EF]. In the second part [...] ...|$|R
25|$|Finitary {{infinite}} matroids are {{studied in}} model theory, a <b>branch</b> of mathematical <b>logic</b> with {{strong ties to}} algebra.|$|R
2500|$|In axiomatic {{set theory}} and the <b>branches</b> of <b>logic,</b> mathematics, and {{computer}} science that use it, the axiom of pairing {{is one of the}} axioms of Zermelo–Fraenkel set theory. It was introduced by [...] as a special case of his axiom of elementary sets.|$|R
40|$|Information {{gathering}} tools, such as questionnaires, surveys, {{and structured}} interviews, are ubiquitously used in evaluating patients and systems. Despite their common use, {{there is a}} desperate need for better questionnaires in medical research 1 and epidemiology 2, and an infrastructure that lets them be publicly scrutinized. 3. Unfortunately, {{there has been no}} common platform that supports the deployment of arbitrary information gathering tools. Some psychiatric diagnostic interviews and epidemiological trials require sophisticated structured interviews containing complex <b>branching</b> <b>logic,</b> dynamic phrase composition, and multiple languages. The Dialogix system was developed to meet this need and facilitate the rapid definition an...|$|E
40|$|Branching {{occurs in}} natural systems for {{functional}} reasons. However, the <b>branching</b> <b>logic</b> for each specific system {{is quite different}} due to environmental and mathematical factors. In the computation of branching systems, these mathematical factors can be incorporated quite easily into the coding of each system. However, it is the environmental components that must be given further consideration in the simulation of these natural systems. Through the engine of genetic algorithms based on evolutionary developmental theory, the specific logics observed and analyzed in branching patterns of river systems, trees, and insect tracheae can be simulated and optimized in a digital environment...|$|E
40|$|INTRODUCTION: Patient {{contact is}} the favored {{strategy}} for increasing diagnostic expertise. However, changes in clinical education, notably the 80 -hour resident duty week, have narrowed trainees’ opportunities for case exposure. Online interactive cases, virtual patients (VPs), may help fill this gap. Design and development heuristics have been advanced, however {{there is no}} instructional design (ID) theory of VPs. PURPOSE: Our aim is to develop an ID theory of VPs to enhance the development of diagnostic skills in medical trainees. Intrapartum EFM data interpretation serves as an initial instructional case for theory development. METHODOLOGY: Formative research {{will be used to}} refine an existing ID theory, Goalbased Scenarios (GBS), {{to address the needs of}} EFM novice learners. Residents, midwivesin- training, and nurses will interact with an experimental EFM VP that exposes learners to both <b>branching</b> <b>logic</b> and game technology-based VP platforms. Both objective and perceptual data will be captured and analyzed. RESULTS: Based on preliminary work, the potential of game technology to reduce the determinism inherent in <b>branching</b> <b>logic</b> VPs and provide more nuanced options for exploring decision-making paths enhanced its preferability. However, the meaningfulness of diagnostic and intervention tasks afforded, both in terms of clinical relevance and learners’ own health care roles, was seen as more fundamental to VP design. CONCLUSIONS: Situationality is intrinsic to ID theory-building. The theory emerging from this research may be informative in the design of VPs teaching processes similar to EFM interpretation...|$|E
30|$|Whittle et al. (2009) {{proposed}} a new specification language, named RELAX, for self-adaptive systems. It is expressive language based on fuzzy <b>branching</b> temporal <b>logic</b> {{to specify the}} uncertain dynamic behavior of the system. The paper, however, neither shows the verification phase nor provide support tool.|$|R
50|$|CTL* is a superset of {{computational}} tree logic (CTL) and linear {{temporal logic}} (LTL). It freely combines path quantifiers and temporal operators. Like CTL, CTL* is a <b>branching</b> time <b>logic.</b> The formal semantics of CTL* formulae are defined {{with respect to}} a given Kripke structure.|$|R
50|$|Modern {{mathematics}} formalizes its foundations to such {{an extent}} that mathematical theories can be regarded as mathematical objects, and mathematics itself can be regarded as a <b>branch</b> of <b>logic.</b> Frege, Russell, Poincaré, Hilbert, and Gödel are some of the key figures in this development.|$|R
40|$|Data and {{accompanying}} documentation for the Open Source Survey fielded by GitHub and collaborators in 2017. Respondents were sourced via random sampling from traffic to licensed open source repositories on GitHub. com and from invitations sent to selected open source communities that work on other platforms. The files here include a README, a full {{copy of the}} (English) questionnaire, notes for working with the data, and two CSV data files. A report based on the subset of responses sampled from GitHub. com is available at [URL] See the README for details on sampling methodology, and notes and questionnaire files for question wordings, response options, <b>branching</b> <b>logic,</b> and recoded variables...|$|E
40|$|Decision Support Systems (DSS) {{technology}} {{provides a}} structure and model {{that can be}} used as a pedagogical tool for guiding students while they conduct research projects. This article describes a DSS technique called Candidate Evaluation and its implementation in a DSS authoring tool called Candidate Evaluation Editor (CEVED) and a consultation environment called Candidate Evaluator (CEVAL). The software is used by students in various business courses to augment research in which they identify key components of a sector in the information technology industry and then evaluate companies and their products in that industry sector. CEVED provides a mechanism for creating a knowledge-based expert system and gives students exposure to multi-attribute utility models. CEVAL allows students to apply the model and knowledge base in evaluating real-world companies and products. This is a viable alternative to the traditional term-paper assignments normally given as research projects. I n troduct ion Decision support systems (DSS) and expert systems (ES) technologies are commonly used for creating computer-aided instruction (CAI) programs. Such software, often called “courseware, ” typically includes lesson content, questions, and <b>branching</b> <b>logic</b> designed to meet the needs of an individual student. A sufficiently sophisticated courseware program analyzes the student’s responses to questions and other activities and responds appropriately according to the <b>branching</b> <b>logic</b> programmed by the courseware developer. Often, artificial intelligence and DSS techniques are used to enhance the presentation and diagnostic capabilities of a CAI system. The use and effectiveness of such systems have been studied and reported in the literature (Alavi, 1994; Hofmeister...|$|E
40|$|Psychiatric {{diagnosis}} {{has traditionally}} been unreliable. A new classification system (DSM-III) has been introduced, but its increased complexity places a greater burden on the clinician. We argue that computer diagnostic programs can be useful training and consultative tools, since computers can apply diagnostic logic consistently and demonstrate diagnostic principles in regard to a particular patient. A program that collects information from clinicians to make DSM-III diagnoses is described. It also performs several teaching functions, e. g. explaining <b>branching</b> <b>logic</b> during data collection, indicating criteria necessary to make any specific diagnosis, and indicating which were not met if the diagnosis was not made. Preliminary data are reported on agreement between computer and clinician diagnosis...|$|E
5000|$|In axiomatic {{set theory}} and the <b>branches</b> of <b>logic,</b> mathematics, and {{computer}} science that use it, the axiom of pairing {{is one of the}} axioms of Zermelo-Fraenkel set theory. It was introduced by [...] as a special case of his axiom of elementary sets.|$|R
5000|$|The {{logic of}} class is a <b>branch</b> of <b>logic</b> that distinguishes valid from invalid syllogistic {{reasoning}}s {{by the use}} of Venn Diagrams. [...] In syllogistic reasoning each premise takes one of the following forms, referring to an individual or class of individuals. For example: ...|$|R
40|$|Abstract. We {{show that}} the satisfiability problem for CTL+, the <b>branching</b> time <b>logic</b> that allows boolean {{combinations}} of path formulas inside a path quantifier but no nesting of them, is 2 -EXPTIME-hard. The construction is inspired by Vardi and Stockmeyer's 2 -EXPTIME-hardness proof of CTL*'s satisfiability problem. As a consequence, there is no subexponential reduction from CTL+ to CTL which preserves satisfiability. 1 Introduction In the early 80 s, a family of <b>branching</b> time <b>logics</b> was defined by Emerson andHalpern [3, 4]. This included the commonly known logics CTL and CTL * {{as well as the}} less known logic CTL+. CTL formulas can only speak about states of a transition system, while CTL*allows properties of paths and states to be expressed. CT...|$|R
