0|124|Public
40|$|Tubular {{transition}} joints {{providing a}} metallurgically bonded connection between tantalum and 316 {{stainless steel pipe}} sections were comparatively evaluated for durability under thermal cycling conditions approximating the operation of a SNAP- 8 mercury boiler. Both coextruded and vacuum <b>brazed</b> <b>transition</b> joints of 50 mm (2 inch) diameter were tested by thermal cycling 100 times between 730 C and 120 C(1350 F and 250 F) in a high vacuum environment. The twelve evaluated transition joints survived the full test sequence without developing leaks, although liquid penetrant bond line indications eventually developed in all specimens. The <b>brazed</b> <b>transition</b> joints exhibited the best dimensional stability and bond line durability...|$|R
40|$|CERN’s R&D {{programme}} on the Superconducting Proton Linac’s (SPL) superconducting {{radio frequency}} (SRF) elliptical cavities made from niobium sheets explores new mechanical design and consequently new fabrication methods, where several opportunities for improved optimization were identified. A stainless steel helium vessel is under design {{rather than a}} titanium helium vessel using an integrated <b>brazed</b> <b>transition</b> between Nb and the SS helium vessel. Different design and fabrication aspects were proposed {{and the results are}} discussed hereafter...|$|R
5000|$|Finite State Machine: a state <b>transition</b> <b>machine</b> with finite sets {{of events}} and states ...|$|R
40|$|Abstract. The black-box {{view of an}} {{interactive}} component concentrates on the input/output behaviour based on communication histories. The glass-box view discloses the component’s internal state with inputs effecting an update of the state. The black-box view is modelled by a stream processing function, the glass-box view by a state <b>transition</b> <b>machine.</b> We present a formal method for transforming a stream processing function into a state <b>transition</b> <b>machine</b> with input and output. We introduce states as abstractions of the input history and derive the <b>machine’s</b> <b>transition</b> functions using history abstractions. The state refinement is illustrated with two applications, viz. iterator components and {{an interactive}} stack...|$|R
40|$|A Radio Frequency Identification (RFID) {{system is}} a {{wireless}} network composed of a reader which tries to communicate with and read (identify) a subset of tags from among a larger population. There are several standards defined {{for this type of}} network including the EPCGlobal UHF Class 1 Gen 2 RFID standard which is the focus of this work. The increasing number of tag and reader manufacturers necessitates the design of standard conformity tests. To create conformity tests one needs to know the possible states and transitions between states that the tags may experience. In this work a tag is modeled as a state <b>transition</b> <b>machine</b> where the tag transitions from one state to another upon receiving commands from the reader. The model is Markovian; i. e., each transition only depends on the current state and the received command and is independent of the previous transitions, states and commands. The contribution of this work is to fully define the transitions of this model such that it conforms to the specification of the EPCGlobal standard. This, in turn, is necessary for the design of a conformity testing methodology. Considering all the configurations of the internal tag parameters and command parameters yields a state <b>transition</b> <b>machine</b> with 449 unique states and 141 unique commands. For each unique command there is one unique transition out of each state; thus, there are 63, 309 unique transitions that need to be considered. The <b>transition</b> <b>machine</b> has been expressed as a table which has states as rows, commands as columns and the future states as the table entries. This table has been automatically filled using roughly 3000 lines of MATLAB code. A Graphical User Interface (GUI) has also been developed to test and verify the transitions...|$|R
40|$|Abstract. This paper proposes the {{technique}} to apply model checking {{in order to}} show the regulatory compliance of requirements specifications written in use case models. For automatic compliance checking, the behavior of business processes and information systems are specified with use case models and they are translated into finite state <b>transition</b> <b>machines,</b> while we represent regulations with branching time temporal logic (CTL: computational tree logic). By using model checker SMV, we formally verify if the regulations can be satisfied with the state machines. ...|$|R
40|$|Both object-orientation and the Internet {{make the}} {{widespread}} reuse of software a possibility. Unfortunately, {{the potential benefits}} from these facilities have not been forthcoming. One {{reason for this is}} the lack of a coherent model for software development and reuse. This paper proposes such a model which is based upon modelling software components using state <b>transition</b> <b>machines.</b> Reuse is made possible by defining matching relations between component descriptions in terms of machine simulations. Both the development process and matching relations are given a formal semantics...|$|R
5000|$|Very few {{machines}} of {{this type}} were built, but all were made between 1913 and 1915. This was a <b>transition</b> <b>machine</b> that introduced the [...] "Controlled-Key" [...] safeguard, {{which was part of}} an error detection mechanism that blocked most of the keyboard if a key was not pressed enough to add its total to the result. When this mechanism was activated, all the columns of keys were blocked except for the one where the error occurred. Therefore, the operator could find the column in question, reenter the number and unlock the keyboard by pressing the release key in order to resume the operations.|$|R
40|$|Abstract. The {{process of}} {{compiler}} generation from lambda-calculus definitions is studied. The compiling schemes developed utilize as their object language {{the set of}} state <b>transition</b> <b>machines</b> (STMs) : automata-like transition sets using firstorder arguments. An intermediate definition form, the STM-interpreter, is treated as central to the formulation of STMs. Three compiling schemes are presented: one derived directly from an STM-interpreter for the lambda-calculus; one formulated from an STM-interpreter variant of Landin’s SECD-machine; and one defined through meaning-preserving transformations upon a denotational definition of the lambda-calculus. The results are compared and some tentative conclusions are made regarding the utility of compiler generation with the STM forms. 1...|$|R
40|$|E-AoSAS++ is an aspect-oriented {{software}} architecture style for embedded software. It basically gives the style {{in which a}} set of state <b>transition</b> <b>machines</b> organizes a soft-ware. We have identified such concerns as state transition, concurrency, fault-tolerance, real-time, and error-handling. We categorize those concerns into two classes and found the way we call universal modularization pattern to pack-age them in an orderly fashion. From the experience we have had {{through the construction of}} E-AoSAS++, we re-alized that we needed model for style construction. We defined XCC model which is construction model of archi-tecture style. Based on E-AoSAS++, architecture centered software development environment is designed. 1...|$|R
40|$|This paper {{describes}} an approach for detecting dialogue scenes in movies. The approach uses automatically extracted low- and mid-level visual features that characterise the visual content of individual shots, {{and which are}} then combined using a state <b>transition</b> <b>machine</b> that models the shotlevel temporal characteristics of the scene under investigation. The choice of visual features used is motivated by a consideration of formal film syntax. The system is designed so that the analysis may be applied in order to detect different types of scenes, although {{in this paper we}} focus on dialogue sequences as these are the most prevalent scenes in the movies considered to date. ...|$|R
40|$|Abstract. Single crystal diamond grits with a 600 m {{mesh size}} {{were used as}} {{grinding}} grits capturing the interaction between grinding wheel and workpiece under low to high grinding speeds. The analysis considered the critical depth of cut corresponding to the brittle/ductile material removal <b>transition,</b> <b>machined</b> groove morphology carried out with AFM (Atomic Force Microscope) and SEM respectively. Subsurface integrity of the machined groves and wear mechanisms of the diamond grit after single grit grinding were also considered. The {{results showed that the}} single grit grinding method integrated with the advanced on-position monitoring methods and imaging techniques is capable of providing accurate fundamental data and defines guidelines for realizing ductile machining of brittle materials with high surface quality...|$|R
5000|$|Explanation of the Directory state <b>transition</b> Finite State <b>Machine</b> (refer image 1) is {{captured}} below in the table: ...|$|R
40|$|Abstract. We {{introduce}} {{the concept of}} an algebraic state machine. This is a state <b>transition</b> <b>machine</b> all parts of that are described by algebraic and logical means. This way we base the description of state transition systems exclusively on the concept of algebraic specifications. Also the state of an algebraic state machine is represented by an algebra. In particular, we describe the state spaces of the state machine by algebraic techniques, and the state transitions by special axioms called transition rules. Then we show how known concepts from algebraic specifications can be used to provide a notion of parallel composition with asynchronous interaction for algebraic state machines. As example we introduce a notion of object-oriented component and show how algebraic state machines can formalize such components. ...|$|R
40|$|This {{technical}} memo {{provides a}} syntactic and semantic basis for state transition diagrams (STDs) {{as they are}} used for the description of state <b>transition</b> <b>machines</b> (STMs) with input and output. STMs serve for the specification of system components. We work with STDs with transition rules labelled by input and output patterns and pre- and postconditions. We extend our notation to support specifications that deal with the timing of input and output as well. In particular, we work out the following concepts. the semantic model of STMs with input and output,. the semantic model of STDs in terms of predicate logic,. the description of STMs by STDs,. the definition of stream processing functions by STMs,. a syntax for STDs and their labels...|$|R
40|$|Sapr_ 2014 ? ???????????? ??????? ?? ???????? HAAS_ST- 10 Y ??? ????????? ????????? ????? ? ????????? 5 ? 240 ??. ?????? ????????? ???????????? ??? ????????????? ???????????? ??????????? ????????????? ??????? ?? ???????? ??? ????????????? ???????? ? ???????? ??????????? ???????? ????????????? ????????? ?????????? ???????. I In the {{practice}} of engineering production today important is the effective use of modern metal-cutting equipment. The cost of such equipment is considerably higher {{than the cost of}} previous models. So important is the definition of rational treatment regimes. Necessary to clarify the procedure available vliterature recommendation for setting tool life. The results of virtual modeling in CAPP system ?Sapr_ 2014 ? roughing turning on the machine HAAS_ST- 10 Y. Znacheniya reztsazadavalis resistance in the range of 5 - 240 minutes. Presents practical advice on the rational use of zadanoogo equipment and tools. Our procedure is versatile and allows the simulation of the model in the main technological <b>transitions</b> <b>machining.</b> ? ???????? ??????????????????? ???????????? ??????? ?????? ???? ??????????? ????????????? ??????????????????????????? ????????????. ???? ?????? ???????????? ??????????? ????, ??? ???? ?????????? ???????. ??????? ?????? ?????????? ??????????? ???????????? ??????? ?????????. ?????????? ???????? ????? ???????? ????????? ??????????? ???????????? ?? ??????? ????????? ???????????. ????????? ?????????? ???????????? ????????????? ? ??????? ??????????????????? ?????????????? ?Sapr_ 2014 ? ????????????? ??????? ?? ?????? HAAS_ST- 10 Y. ???????? ????????? ??????????????? ? ????????? 5 ? 240 ???. ???????????? ???????????? ???????????? ?? ????????????? ????????????? ????????? ???????????? ? ???????????. ????????????? ???????? ???????? ????????????? ? ????????? ????????????? ? ???????? ??????? ??????????????? ????????? ???????????? ?????????...|$|R
50|$|Because {{all of the}} {{indicated}} operations are performed in a single <b>transition,</b> a tag <b>machine</b> strictly has only one state.|$|R
3000|$|... [*]⊆[*]S[*]×[*]I[*]×[*]O[*]×[*]S is a {{behavior}} relation. The behavior relation defines all possible <b>transitions</b> of the <b>machine.</b> Given a current state s [...]...|$|R
50|$|The machine {{obviously}} had a longer history in North America {{than in the}} UK, which started when the Singer Business Machines division was bought by ICL in 1976. At {{the time of the}} sale ICL estimated that there were 8,000 System Tens in use around the world. ICL continued to market the system as the ICL System 10, but also attempted to wean customers off it and onto their mainstream product offering, the 2900 series, by introducing a <b>transition</b> <b>machine</b> called the ME/29. When this strategy failed, they turned to a division of Singer which made intelligent terminals, to re-engineer the system and bring it up the then modern day standards and considerable reduce its size and power consumption, and the model 25, the last iteration of the machine, was then created.|$|R
5000|$|D. Goldin, S. Smolka, P. Attie, E. Sonderegger, Turing <b>Machines,</b> <b>Transition</b> Systems, and Interaction. J. Information and Computation 194:2 (2004), pp. 101-128 ...|$|R
30|$|Byzantine {{consensus}} {{is a fundamental}} building block for fault-tolerant distributed systems. It allows a group of peers to reach agreement on some value, even if {{a fraction of the}} peers are controlled by an active adversary. Theory-oriented work on Byzantine consensus often focuses on finding a single agreement on a binary flag or bit string [29]. More recent approaches for practical applications are mainly based on state machine replication (SMR), wherein peers agree on a sequence of state <b>machine</b> <b>transitions.</b> State <b>machine</b> replication makes it relatively easy to lift existing, non-fault-tolerant services to a Byzantine fault-tolerant implementation [15]. Each request from a client triggers a state transition in the replicated state machine that provides the service.|$|R
5000|$|We {{also have}} a block for each {{position}} <b>transition</b> the <b>machine</b> can make, showing how the tape head moves, how the finite state changes, {{and what happens to}} the surrounding symbols. For example, here the tape head is over a 0 in state 4, and then writes a 1 and moves right, changing to state 7: ...|$|R
40|$|Both object-orientation and the Internet {{make the}} {{widespread}} reuse of software a possibility. Unfortunately, {{the potential benefits}} from these facilities have not been forthcoming. One {{reason for this is}} the lack of a coherent model for software development and reuse. This paper proposes such a model which is based upon modelling software components using state <b>transition</b> <b>machines.</b> Reuse is made possible by defining matching relations between component descriptions in terms of machine simulations. Both the development process and matching relations are given a formal semantics. 2 Introduction The reuse of software components has long been a major aim of Software Engineering [12]. We propose that there are two major reasons why this aim has not yet been realised. Firstly, no single organisation can afford to develop all the software which it will subsequently need to reuse (and until recently there has been no effective mechanism which allows different organisations to pool software r [...] ...|$|R
40|$|AbstractXML stream transformation, which {{sequentially}} processes {{the input}} XML {{data on the}} fly, {{makes it possible to}} process large sized data within a limited amount of memory. Though being efficient in memory-use, stream transformation requires stateful programming, which is error-prone and hard to manage. This paper proposes a scheme for generating XML stream transformers. Given an attribute grammar definition of transformation over an XML tree structure, we systematically derive a stream transformer in two steps. First, an attribute grammar definition of the XML stream transformation is inferred by applying a program composition method. Second, a finite state <b>transition</b> <b>machine</b> is constructed through a dependency analysis. Due to the closure property of the program composition method, our scheme also allows modular construction of XML stream transformers. We have implemented a prototype XML stream transformer generator, called altSAX. The experimental results show that the generated transformers are efficient in memory consumption as well as in execution time...|$|R
40|$|In Distributed Cooperative Problem Solving, {{an agent}} must {{coordinate}} with other agents. Coordination among agents is realized only when an agent can understand, {{or at least}} predict, actions of the other agents. That is to say, an agent has to have some model of other agents inside itself. To make an agent adaptive in cooperating with others, it should observe other agents and dynamically establish models of others in order to plan its actions. In this paper, we regard an agent as a state <b>transition</b> <b>machine</b> (a finite state automaton) and propose a method of observing other agents and dynamically establishing models of others. A simple experiment of "Moving Robots" {{will be used to}} explain the method. 1 Introduction In the real world, we take action while managing continuous interactions. In particular, we need to coordinate our actions when becoming a member of an organization or a group and trying to achieve its goal. Distributed Cooperative Problem Solving (DCPS) is the proc [...] ...|$|R
5000|$|The sovkhozy {{tended to}} {{emphasize}} larger scale production than the kolkhozy {{and had the}} ability to specialize in certain crops. The government tended to supply them with better machinery and fertilizers, not least because Soviet ideology held them to be a higher step on the scale of socialist <b>transition.</b> <b>Machine</b> and tractor stations were established with the [...] "lower form" [...] of socialist farm, the kolkhoz, mainly in mind, because they were at first not trusted with ownership of their own capital equipment (too [...] "capitalist") as well as not trusted to {{know how to use it}} well without close instruction. Labor productivity (and in turn incomes) tended to be greater on the sovkhozy. Workers in state farms received wages and social benefits, whereas those on the collective farms tended to receive a portion of the net income of their farm, based, in part, on the success of the harvest and their individual contribution.|$|R
40|$|Deoxyribo{{nucleic acid}} (DNA) is a nucleic acid that {{contains}} the genetic information used {{in the development and}} functioning of all known existing organisms. In DNA computing, a set of DNA sequences is involved in solving an optimisation problem. The design of those sequences is difficult because of the frequency of DNA sequence mismatch hybridisations. In this paper, an Ant Colony System approach for DNA sequence design is proposed to solve this DNA sequence design problem. A 4 -node state <b>transition</b> <b>machine</b> was used in this study as the computation model. During the implementation, each ant was placed randomly at a start node and then moved according to the state transition rule. Once all of the ants completed the tour, the objective function was computed. This process was repeated until the maximum iteration was obtained. Seven ants were used to design seven sequences that were 20 nucleobases in length. The results showed that a set of usable DNA sequences can be produced using this method, which is better than previous approaches using the Genetic Algorithm and Multi-Objective Evolutionary Algorithm...|$|R
40|$|In {{this work}} the fuel {{consumption}} of two vehicles is compared. For investigating the fuel consumption a whole vehicle simulation is developed with the Smart-PowerTrains library and the SmartElectricDrives li-brary. Both librarys {{are written in}} Modelica language. As a reference vehicle a conventional vehicle with manual transmission is modeled. A parallel hybrid electric vehicle with a starter/generator and two <b>transition</b> <b>machines</b> at {{the front and rear}} drive train wheels is compared with this reference vehicle. The operating strategy of the hybrid electric vehicle is explained. Furthermore, an analysis for finding the optimal sizes of the electric machines for the parallel hybrid electric vehicle using the developed simulation tools and the developed operating strategy is presented. The practical operation modes of the parallel hybrid electric vehicle are considered with regard to the implemented drive train configuration. A dynamic operating method is developed to determine the optimal power split between the internal com-bustion engine and the electric energy sources. The computer simulation results show the improved fuel consumption of the hybrid electric vehicle...|$|R
50|$|It {{has been}} proved that the Krivine machine {{implements}} correctly the call by name head normal form reduction in the lambda-calculus. Moreover the Krivine machine is deterministic, since each pattern of the state corresponds to at most one <b>machine</b> <b>transition.</b>|$|R
40|$|Targeted {{proteomics}} {{techniques such}} as Selected Reaction Monitoring (SRM) have become very popular for protein quantification due to their high sensitivity and reproducibility. However, these rely on the selection of optimal transitions, which are not always known in advance and may require expensive and time-consuming discovery experiments to identify. We propose a computer program for the automated identification of optimal <b>transitions</b> using <b>machine</b> learning and show encouraging results when compared to a widely used spectral library. status: publishe...|$|R
50|$|The Intel Core Duo brand {{refers to}} a {{low-power}} (less than 25 watts) dual-core microprocessor, which offered lower power operation than the competing AMD Opteron 260 and 860 HE at 55 watts. Core Duo was released on 5 January 2006, with the other components of the Napa platform. It was the first Intel processor {{to be used in}} Apple Macintosh products (although the Apple Developer <b>Transition</b> Kit <b>machines,</b> non-production units distributed to some developers, used Pentium 4 processors).|$|R
5000|$|Markov logic {{networks}} {{implement a}} form of uncertain inference based on the maximum entropy principle—the idea that probabilities should be assigned {{in such a way}} as to maximize entropy, in analogy with the way that Markov chains assign probabilities to finite state <b>machine</b> <b>transitions.</b>|$|R
5000|$|More formally, {{the problem}} {{concerns}} cellular automata, arrays of finite state machines called [...] "cells" [...] {{arranged in a}} line, such that at each time step each <b>machine</b> <b>transitions</b> to a new state {{as a function of}} its previous state and the states of its two neighbors in the line. For the firing squad problem, the line consists of a finite number of cells, and the rule according to which each <b>machine</b> <b>transitions</b> to the next state should be the same for all of the cells interior to the line, but the transition functions of the two endpoints of the line are allowed to differ, as these two cells are each missing a neighbor on one of their two sides.|$|R
40|$|Many {{researchers}} have been studying the resilience in urban cities. However, due {{to the complexity of}} the system involving human activities, it is difficult to define the resilience of an urban area quantitatively. We introduce an abstract model that represents an urban system through a set of variables and a utility function (or dually, a cost function) evaluating the “quality” of the states of the variables. This cost function depends on the criterion of interest for evaluating the resilience of the system, and can be easily defined in a succinct way. Then, our contribution is mainly twofold. First, we propose several performance metrics that evaluate how resilient a given system has been in some specific scenario, that is, in the past. Second, assuming we are given some knowledge about the dynamics of the system, we model its possible evolutions by embedding it into a discrete state <b>transition</b> <b>machine,</b> and show how we can adapt the performance metrics to this framework to predict the resilience of the system in the future. Such an adaptation of a performance metric to our dynamic model is called here a performance-based competency metric. This new kind of metric is useful to validate existing competency metrics (Ilmola in Competency metric of economic resilience. Urban resilience: a transformative approach. Springer, 2016) by aligning these competency metrics with our performance-based ones...|$|R
50|$|Service <b>Transition</b> - Virtual <b>Machine</b> Lifecycle Management augments the {{traditional}} set of requirements built into delivering an infrastructure component to the business. Best practices and specific tools {{can be used}} to create the right controls within each virtual machine, ensuring the behavior of all the machines is in line with the design.|$|R
40|$|Wide angular {{velocity}} operation of an electrical machine {{is demonstrated by}} partitioning each of the stator coils of a three-phase configuration. An open-winding machine drive circuit is proposed with which dynamic <b>transitions</b> between <b>machine</b> operating modes can be executed. The principle of operation and the design choices of the required bidirectional series switch are explained and motivated. The behavior of the proposed system is analyzed, and verified by simulations. Finally, {{the results of a}} configuration (gear) transition are compared to a state-of-the-art mechanical twin-clutch transmission, showing that both the angular jerk and transition time are much smaller with the proposed system...|$|R
