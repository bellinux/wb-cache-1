19|67|Public
2500|$|... <b>boot</b> <b>file</b> name can {{be changed}} using the SYS /DR:ext option, where ext {{represents}} the new extension. Other potential DR-DOS <b>boot</b> <b>file</b> names to be expected in special scenarios are [...] "DRBIOS␠␠SYS", [...] "DRDOS␠␠␠SYS", [...] "IO␠␠␠␠␠␠SYS", [...] "JO␠␠␠␠␠␠SYS".|$|E
2500|$|The client chooses an {{operating}} {{system from the}} list and {{sends a message to}} the server indicating its selection. The selected boot server responds supplying the <b>boot</b> <b>file</b> and ...|$|E
5000|$|Similarly, custom icons for the Application Directory may be {{contained}} within it—either [...]DirIcon (in any supported image format) or AppIcon.xpm under the ROX Desktop, or !Sprites and optionally !Sprites22 under RISC OS. The RISC OS Filer automatically loads these sprite files {{in the absence}} of a !<b>Boot</b> <b>file,</b> otherwise it is left to the !<b>Boot</b> <b>file</b> to load the appropriate icons.|$|E
5000|$|... !<b>Boot</b> <b>files</b> are {{the most}} popular {{propagation}} vector for such RISC OS viruses as exist (such as the well-known Extend virus), though they can be defeated simply by holding Control.|$|R
50|$|In 2014, Samsung {{released}} a security service called Knox, {{which is a}} tool that prevents all modifying of system and <b>boot</b> <b>files,</b> and any attempts set an eFuse to 0x1, permanently voiding the warranty.|$|R
5000|$|Although {{its basic}} {{role was to}} {{implement}} a PXE stack, iPXE can be also used as a network boot manager with limited capabilities for menu-based interaction with end users. iPXE can fetch <b>boot</b> <b>files</b> using multiple network protocols, such as TFTP, NFS, HTTP or FTP.|$|R
50|$|The <b>Boot</b> <b>File</b> System (named BFS on Linux, but BFS also {{refers to}} the Be File System) was used on UnixWare to store files {{necessary}} to its boot process.|$|E
50|$|The later <b>boot</b> <b>file,</b> AUTOEXEC.BAT, {{would receive}} the chosen {{selection}} through a special %CONFIG% environment variable and thereby could branch into separately configured areas within this batch file as well.|$|E
5000|$|The Be File System (BFS) is {{the native}} file {{system for the}} BeOS. In the Linux kernel, it is {{referred}} to as [...] "BeFS" [...] to avoid confusion with <b>Boot</b> <b>File</b> System.|$|E
5000|$|In the [...] "Diagnostics Center," [...] it is {{possible}} to reset a corrupt BCD storage and automatically create the necessary entries for the current operating system, as well as search for and replace missing/corrupt <b>boot</b> <b>files.</b> This latter feature can be taken advantage of to install the Windows Vista BCD bootloader.|$|R
2500|$|Similarly, {{corrupted}} registry files, system <b>files</b> or <b>boot</b> <b>files</b> can {{be restored}} from the command line. Windows 95 and Windows 98 can be started from DOS Mode by typing 'WIN' [...] at the command prompt. [...] However, the Recovery Console for Windows 2000, which as {{a version of}} Windows NT played a similar role in removing viruses.|$|R
5000|$|Boot Configuration Data {{are stored}} in a data file that has the same format as Windows Registry hives and is {{eventually}} mounted at registry key HKEY_LOCAL_MACHINE\BCD00000 (with restricted permissions). For UEFI <b>boot,</b> the <b>file</b> is located at [...] on the EFI System Partition. For traditional BIOS <b>boot,</b> the <b>file</b> is at [...] on the active partition.|$|R
50|$|The client chooses an {{operating}} {{system from the}} list and {{sends a message to}} the server indicating its selection. The selected boot server responds supplying the <b>boot</b> <b>file</b> andboot image, and any other information needed to download and execute the selected operating system.|$|E
5000|$|Disks {{had to be}} {{manually}} mounted and dismounted {{using the}} *MOUNT / *DISMOUNT commands, or using the CTRL-A+BREAK key combination. Disks could also be booted from via the standard [...] "Shift+BREAK" [...] key-combination, if the ! <b>BOOT</b> <b>file</b> was present on the disk. This behaviour {{was the same as}} on the BBC Micro.|$|E
50|$|The decTOP's {{original}} BIOS {{does not}} allow any human interaction during POST at boot time. Therefore, {{it is not possible}} to format and re-install any other operating system. Any attempts to install a different OS, even when extracting the disk from the main chassis fail, since BIOS would look for WinCE's main <b>boot</b> <b>file.</b>|$|E
50|$|Boot Log XP troubleshoots boot-up {{problems}} in Windows XP, {{creates a new}} <b>boot</b> log <b>file.</b>|$|R
50|$|Other {{manufacturers}} and companies partitioned and formatted disks manually, then used file copy utilities or archiving utilities, such as tar or zip to copy files. It {{is not sufficient}} simply to copy all files from one disk to another, because there are special <b>boot</b> <b>files</b> or <b>boot</b> tracks which must be specifically placed for an operating system to run, so additional manual steps were required.|$|R
50|$|As {{it often}} resides on a Live CD or USB drive, BartPE allows a user to boot Windows, {{even if a}} {{hardware}} or software fault has disabled the installed operating system(s) on the internal hard drive - for instance, to recover files. It {{can also be used}} to scan for and remove rootkits, viruses and spyware (that have infected <b>boot</b> <b>files),</b> or to reset a lost administrator password.|$|R
5000|$|The Task Manager icon, located to the {{far right}} of the icon bar. When clicked with the left mouse button this opens a window {{similar to that of}} the Windows Task Manager, where the running {{programs}} and processes are listed, along with their memory usage. Basic control over the processes is also available (forced termination and in some cases manual control over how much memory is allocated). From the task manager's icon bar menu it is also possible to shut down the computer, exit the window manager to the single-tasking CLI, or open a multi-tasking CLI window. A desktop <b>boot</b> <b>file</b> can also be saved, which contains the current state of the desktop and any loaded programs. In theory this provides full hibernation support, although in reality because each program is responsible for saving and restoring its state within the file, the computer's state after executing the saved <b>boot</b> <b>file</b> will not be identical to its state before.|$|E
50|$|They are {{currently}} used in RISC OS and the ROX Desktop, and also {{form the basis}} of the Zero Install application distribution system. Similar technology includes VMware ThinApp, and the NEXTSTEP/GNUstep/Mac OS X concept of application bundles. Their heritage lies in the system for automatically launching software stored on floppy disk on Acorn's earlier 8-bit micros such as the BBC Micro (the !<b>BOOT</b> <b>file).</b>|$|E
5000|$|On November 17, 2014, Cubic Ninja {{became the}} subject of notoriety when Jordan [...] "Smealum" [...] Rabet publicized that a user mode exploit in the game would allow all {{existing}} 3DS models (including the 2DS and the New Nintendo 3DS) to execute homebrew code. The exploit, known as Ninjhax, requires users to place a <b>boot</b> <b>file</b> on the device's SD card, and then use the level sharing feature of Cubic Ninja to scan a special QR code. The code triggers the download and execution of a launcher program, which can then be used to run applications. The data from the exploit is stored within the game's save data.|$|E
50|$|NTBackup {{supports}} several {{operating system}} features including backing up the computer's System State. On computers {{that are not}} domain controllers, this includes the Windows Registry, <b>boot</b> <b>files,</b> files protected by Windows File Protection, Performance counter configuration information, COM+ class registration database, IIS metabase, replicated data sets, Exchange Server data, Cluster service information, and Certificate Services database. On domain controllers, NTBackup can back up Active Directory, including the SYSVOL directory share.|$|R
5000|$|After all <b>boot</b> <b>files</b> {{are loaded}} by the boot loader, the message [...] "Setup is {{starting}} Windows" [...] is displayed and the kernel starts. Just {{like a normal}} install, it starts the drivers and loads the only service which is [...] It runs in kernel mode and starts a GUI still in text mode. From now on, all the drivers are NT based and BIOS interrupts are not used anymore.|$|R
5000|$|The boot {{partition}} is {{a primary}} partition that contains the boot loader, a piece of software responsible for booting the operating system. For example, in the standard Linux directory layout (Filesystem Hierarchy Standard), <b>boot</b> <b>files</b> (such as the kernel, initrd, and boot loader GRUB) are mounted at [...] Despite Microsoft's radically different definition (see below), System Information, a utility app included in Windows NT family of operating systems refers to it as [...] "boot device".|$|R
5000|$|Boot loaders {{may face}} {{peculiar}} constraints, especially in size; for instance, on the IBM PC and compatibles, a boot sector should typically work in only 32 KB (later relaxed to 64 KB) of system memory and not use instructions {{not supported by}} the original 8088/8086 processors. The first stage of boot loaders (FSBL, first-stage boot loader) located on fixed disks and removable drives must fit into the first 446 bytes of the Master Boot Record in order to leave room for the default 64-byte partition table with four partition entries and the two-byte boot signature, which the BIOS requires for a proper boot loader [...] - [...] or even less, when additional features like more than four partition entries (up to 16 with 16 bytes each), a disk signature (6 bytes), a disk timestamp (6 bytes), an Advanced Active Partition (18 bytes) or special multi-boot loaders have to be supported as well in some environments. In floppy and superfloppy Volume Boot Records, up to 59 bytes are occupied for the Extended BIOS Parameter Block on FAT12 and FAT16 volumes since DOS 4.0, whereas the FAT32 EBPB introduced with DOS 7.1 requires even 71 bytes, leaving only 441 bytes for the boot loader when assuming a sector size of 512 bytes. Microsoft boot sectors therefore traditionally imposed certain restrictions on the boot process, for example, the <b>boot</b> <b>file</b> had to be located at a fixed position in the root directory of the file system and stored as consecutive sectors, conditions taken care of by the [...] command and slightly relaxed in later versions of DOS. The boot loader was then able to load the first three sectors of the file into memory, which happened to contain another embedded boot loader able to load the remainder of the file into memory. When they added LBA and FAT32 support, they even switched to a two-sector boot loader using 386 instructions. At the same time other vendors managed to squeeze much more functionality into a single boot sector without relaxing the original constraints on the only minimal available memory and processor support. For example, DR-DOS boot sectors are able to locate the <b>boot</b> <b>file</b> in the FAT12, FAT16 and FAT32 file system, and load it into memory as a whole via CHS or LBA, even if the file is not stored in a fixed location and in consecutive sectors.|$|E
5000|$|DS:SI = {{points to}} the 16-byte MBR {{partition}} table entry (in the relocated MBR) corresponding with the activated VBR. PC-MOS 5.1 depends on this to boot if no partition in the partition table is flagged as bootable. In conjunction with LOADER, Multiuser DOS and REAL/32 boot sectors use this to locate the boot sector of the active partition (or another bootstrap loader like IBMBIO.LDR at a fixed position on disk) if the <b>boot</b> <b>file</b> (LOADER.SYS) could not be found. PTS-DOS 6.5 and S/DOS 1.0 use this in conjunction with their Advanced Active Partition (AAP) feature. In addition to support for LOADER and AAPs, DR-DOS 7.07 can use this to determine the necessary INT 13h access method when using its dual CHS/LBA VBR code. The MBR code of OS/2, MS-DOS (prior to 7.0), PC DOS (up to 7.10), and Windows NT (up to ca. 2007) happens to provide this same interface as well, although these systems do not make use of it. The MBR installed by Windows NT 6.0 (and higher) uses other registers, and is therefore no longer compatible with these extensions. While some extensions only depend on the 16-byte partition table entry itself, other extensions may require the whole 4 (or 5 entry) partition table to be present as well.|$|E
5000|$|Having {{multiple}} file {{systems on}} a single system has the additional benefit that {{in the event of}} a corruption of a single partition, the remaining file systems will frequently still be intact. This includes virus destruction of the system partition or even a system that will not <b>boot.</b> <b>File</b> system utilities which require dedicated access can be effectively completed piecemeal. In addition, defragmentation may be more effective. Several system maintenance utilities, such as virus scans and backups, can also be processed in segments. For example, it is not necessary to backup the file system containing videos along with all the other files if none have been added since the last backup. As for the image files, one can easily [...] "spin off" [...] differential images which contain only [...] "new" [...] data written to the master (original) image. Differential images can be used for both safety concerns (as a [...] "disposable" [...] system - can be quickly restored if destroyed or contaminated by a virus, as the old image can be removed and a new image can be created in matter of seconds, even without automated procedures) and quick virtual machine deployment (since the differential images can be quickly spawned using a script in batches).|$|E
50|$|The {{contents}} {{are mostly}} Linux kernel <b>files</b> or <b>boot</b> loader <b>files,</b> {{depending on the}} boot loader, most commonly (on Linux) LILO or GRUB.|$|R
50|$|Version 2.0 {{provides}} information on network, enhance reporting of video capabilities, APM, DPMI/VCPI/EMS/XMS memory. New feature include editing DOS and Windows <b>boot</b> configuration <b>files.</b>|$|R
5000|$|A primary {{partition}} contains one file system. In DOS and all early versions of Microsoft Windows systems, Microsoft required {{what it called}} the system partition {{to be the first}} partition. All Windows operating systems from Windows 95 onwards can be located on (almost) any partition, but the <b>boot</b> <b>files</b> ( [...] , , , etc.) must reside on a {{primary partition}}. However, other factors, such as a PC's BIOS (see Boot sequence on standard PC) may also impose specific requirements as to which partition must contain the primary OS.|$|R
5000|$|DS:SI = {{points to}} the 16-byte MBR {{partition}} table entry (in the relocated MBR) corresponding with the activated VBR. PC-MOS 5.1 depends on this to boot if no partition in the partition table is flagged as bootable. In conjunction with LOADER, Multiuser DOS and REAL/32 boot sectors use this to locate the boot sector of the active partition (or another bootstrap loader like IBMBIO.LDR at a fixed position on disk) if the <b>boot</b> <b>file</b> (LOADER.SYS) could not be found. PTS-DOS 6.6 and S/DOS 1.0 use this in conjunction with their Advanced Active Partition (AAP) feature. In addition to support for LOADER and AAPs, DR-DOS 7.07 can use this to determine the necessary INT 13h access method when using its dual CHS/LBA VBR code and it will update the boot drive / status flag field in the partition entry according to the effectively used DL value. Darwin bootloaders (Apple's , , and David Elliott's [...] ) depend on this pointer as well, but additionally they don't use DS, but assume it to be set to 0000hex instead. This will cause problems if this assumption is incorrect. The MBR code of OS/2, MS-DOS 2.0 to 8.0, PC DOS 2.0 to 7.10 and Windows NT/2000/XP provides this same interface as well, although these systems do not use it. The Windows Vista/7 MBRs no longer provide this DS:SI pointer. While some extensions only depend on the 16-byte partition table entry itself, other extensions may require the whole 4 (or 5 entry) partition table to be present as well.|$|E
5000|$|As stated above, the {{conventional}} MBR bootstrap code loads and runs (boot loader- or operating system-dependent) volume boot record code that {{is located at}} the beginning of the [...] "active" [...] partition. A conventional volume boot record will fit within a 512-byte sector, but it is safe for MBR code to load additional sectors to accommodate boot loaders longer than one sector, provided they do not make any assumptions on what the sector size is. In fact, at least 1 KB of RAM is available at address 7C00hex in every IBM XT- and AT-class machine, so a 1 KB sector could be used with no problem. Like the MBR, a volume boot record normally expects to be loaded at address 0000hex:7C00hex. This derives from the fact that the volume boot record design originated on unpartitioned media, where a volume boot record would be directly loaded by the BIOS boot procedure; as mentioned above, the BIOS treats MBRs and volume boot records (VBRs) exactly alike. Since this is the same location where the MBR is loaded, one of the first tasks of an MBR is to relocate itself somewhere else in memory. The relocation address is determined by the MBR, but it is most often 0000hex:0600hex (for MS-DOS/PC DOS, OS/2 and Windows MBR code) or 0060hex:0000hex (most DR-DOS MBRs). (Even though both of these segmented addresses resolve to the same physical memory address in real mode, for Apple Darwin to boot, the MBR must be relocated to 0000hex:0600hex instead of 0060hex:0000hex, since the code depends on the DS:SI pointer to the partition entry provided by the MBR, but it erroneously refers to it via 0000hex:SI only.) While the MBR code relocates itself it is still important not to relocate to other addresses in memory because many VBRs will assume a certain standard memory layout when loading their <b>boot</b> <b>file.</b>|$|E
40|$|The {{majority}} of this chapter {{is based on}} the in-kernel documentation for the different kernel boot command-line reference options, which were written by the kernel developers and released under the GPL. There are three ways to pass options to the kernel and thus control its behavior: • When building the kernel. Most of this book discusses these options. • When starting the kernel. Usually, parameters are passed to the kernel when it is invoked from a <b>boot</b> <b>file</b> such as the GRUB or LILO configuration file. • At runtime, by writing to files in the /proc and /sys directories. This chapter describes the second method of passing options. The chapter breaks the boot time options into different logical sections. A number of architecturespecific and individual driver options are not listed here. For a complete list of all known options, please see the file Documentation/kernel-parameters. txt in the kernel source tree and the individual architecture-specific documentation files. Not all of the listed options are always available. Most are associated with subsystems and work only if the kernel is configured with those subsystems buil...|$|E
50|$|In modern live CDs, a {{read-only}} {{file system}} is merged with a RAM drive using transparent {{techniques such as}} UnionFS, AuFS or EWF. Boot loaders like syslinux can <b>boot</b> ISO <b>files</b> from USB memory devices.|$|R
500|$|Transparent {{operation}} mode: [...] This mode {{uses the}} capabilities of TPM 1.2 hardware to provide for a [...] transparent user experience—the user powers up and logs into Windows as normal. The key used for disk encryption is sealed (encrypted) by the TPM chip and will only be released to the OS loader code if the early <b>boot</b> <b>files</b> appear to be unmodified. The pre-OS components of BitLocker achieve this by implementing a Static Root of Trust Measurement—a methodology specified by the Trusted Computing Group (TCG). This mode is vulnerable to a cold boot attack, as it allows a powered-down machine to be booted by an attacker.|$|R
40|$|Abstract. Trusted Computing {{technique}} can {{be applied}} to alleviate the concerns for the security of virtual machines (VMs), accompanying the increase in the use of virtualization technology. This paper aims to provide for guest para-virtualized machine (GPVM) applications a complete trusted chain from the physical TPM in a flexible way. We propose a robust and fast method for measuring the integrity of the system <b>booting</b> <b>files</b> of a GPVM. This method integrated with the existing integrity measure software such as Trusted Grub and Integrity Measurement Architecture (IMA) can provide the complete trusted chain. Compared to the existing method of measuring the GPVM integrity, our method is very flexible and fast...|$|R
