43|123|Public
50|$|While {{keeping track}} of history is {{straightforward}} in a <b>batch</b> <b>program,</b> it requires special attention and planning in an event-driven program.|$|E
50|$|Rollin/rollout {{allows the}} {{computer}} operator to interrupt a running <b>batch</b> <b>program,</b> execute an inquiry program, and then restart the batch job {{where it was}} interrupted.|$|E
50|$|A {{distinction}} {{was made}} between interactive (timesharing) terminals and transactional terminals. Where interactive terminals were controlled {{directly by the}} operating system, transactional terminals were controlled from a <b>batch</b> <b>program.</b> Initially, this <b>batch</b> <b>program,</b> known as MCP for Multichannel Communications Program, was developed for the RCA and Sperry batch-oriented operating systems, TDOS (Tape-Disk Operating System) and DOS (Disk Operating System). Once {{it became clear that}} they would be phased out in favor of the much more robust interactive operating system, VMOS, MCP was ported to run on VMOS. VMOS (Virtual Memory Operating System) became the new moniker for TSOS on RCA Spectra 70 models 46, 61, 3, and 7 computers, and then initially on Univac Series 70 (formerly RCA) computers.|$|E
50|$|Batch parameters. Equivalent to %1-%9 in <b>batch</b> <b>programs.</b>|$|R
50|$|Exit statuses {{are often}} {{captured}} by <b>batch</b> <b>programs.</b>|$|R
50|$|As {{any other}} DOS, Amiga deals with {{environment}} variables {{as used in}} <b>batch</b> <b>programming.</b>|$|R
5000|$|... "WTO" [...] is an {{assembler}} macro {{that generates}} an operating system call. Because of saving registers and later restoring and returning, this small program is usable as a <b>batch</b> <b>program</b> invoked {{directly by the}} operating system Job control language (JCL) like this: ...|$|E
5000|$|A Windows Forms {{application}} is an event-driven application supported by Microsoft's [...]NET Framework. Unlike a <b>batch</b> <b>program,</b> it {{spends most of}} its time simply waiting for the user to do something, such as fill in a text box or click a button.|$|E
50|$|Prior to this {{he worked}} at the Philips Research Laboratories in Redhill, Surrey where he worked on realtime image processing, using {{electronic}} hardware rather than software. At that time, software would have been either a <b>batch</b> <b>program</b> on the PRL mainframe computer or, within the departmental laboratory, the Commodore PET.|$|E
5000|$|Non-Shared Resources (NSR), {{which is}} {{optimised}} for sequential access. NSR access {{has historically been}} easier to use than LSR for <b>batch</b> <b>programs.</b>|$|R
50|$|With z/OS Release 9 SDSF {{supports}} a REXX interface, allowing <b>batch</b> <b>programs</b> to use SDSF facilities. This support includes stem variables containing SDSF-originated information.|$|R
5000|$|A command {{language}} is a language for job control in computing. It is a domain-specific and interpreted language; common examples of a {{command language}} are shell or <b>batch</b> <b>programming</b> languages.|$|R
5000|$|The {{heart of}} the Metaphor DIS system was the Capsule. Basically, a capsule was a {{simplified}} <b>BATCH</b> <b>program.</b> Because Metaphor applications were built so they communicated with each other, they could be moved into a folder and automated in a [...] "Capsule". (The name {{was taken from the}} manned space capsules of the time.) ...|$|E
5000|$|Note: Outbound from WAS to CICS {{would not}} require API coding. In that case the {{supplied}} BBO$/BBO# link server transactions {{would do that}} processing. Those link server transactions [...] "host a service" [...] using the internal constructs similar to the BBOA1SRV API. Outbound to a <b>batch</b> <b>program</b> would {{require the use of}} the APIs to [...] "host a service." ...|$|E
5000|$|The Program Development Facility (PDF) and XEDIT editors for MVS and VM/SP (ISPF/PDF was {{available}} for VM, but little used) respectively make extensive use of 3270 features. [...] The modified data tag is well suited to converting formatted, structured punched card input onto the 3270 display device. With the appropriate programming, any <b>batch</b> <b>program</b> that uses formatted, structured card input can be layered onto a 3270 terminal.|$|E
50|$|QuickWrap 3.0 automates <b>batch</b> mode <b>programs.</b>|$|R
50|$|Real time is {{not another}} type of run. Rather it {{is a set of}} {{priority}} levels which any activity may request. Real time is most typically used by long running <b>batch</b> <b>programs,</b> like the OS 2200 communications manager CPComm, but is not restricted to such.|$|R
50|$|A CICS system {{consists}} of the online nucleus, <b>batch</b> support <b>programs,</b> and applications services.|$|R
50|$|The System/3 (1969) ran a disk-based batch {{operating}} system called SCP (5702-SC1). IBM introduced for the S/3 an online program called CCP ("Communications Control Program.") which was {{started as a}} <b>batch</b> <b>program.</b> The IBM System/32 (1975) ran a disk-based {{operating system}} called SCP ("System Control Program.") The IBM System/38 (1978) ran an operating system called CPF ("Control Program Facility") that was much more advanced than SSP and not particularly similar.|$|E
5000|$|RSTS uses {{a serial}} {{communication}} connection {{to interact with}} the operator. The connection might be a local computer terminal with a 20 mA current loop interface, an RS-232 interface (either local serial port or remote connection via modem), or by an ethernet connection utilizing DECnet or LAT. As many as 128 terminals (using multi-terminal service) could connect to a RSTS system, running under a maximum of 63 jobs (depending on the processor being used, the amount of memory and disk space, and the system load). Most RSTS systems had nowhere near that many terminals. Users could also submit jobs to be run in batch mode. There was also a <b>batch</b> <b>program</b> called [...] "ATPK" [...] that allowed users to run a series of commands on an imaginary terminal (pseudo-terminal) in semi-interactive mode similar to batch commands in MS-DOS.|$|E
5000|$|A TSR {{program can}} be loaded at any time; sometimes, they are loaded {{immediately}} after the operating system's boot, by being explicitly loaded in the AUTOEXEC.BAT <b>batch</b> <b>program,</b> or alternatively at the user's request (for example, Borland's Sidekick and Turbo Debugger, Quicken's QuickPay, or FunStuff Software's Personal Calendar). These programs will, as [...] "TSR" [...] implies, stay resident in memory while other programs are executing. Some {{of them do not}} have an option for unloading themselves from memory, so calling TSR means the program will remain in memory until a reboot. However unloading is possible externally, using utilities like the MARK.EXE/RELEASE.EXE combo by TurboPower Software or soft reboot TSRs which will catch a specific key combination and release all TSRs loaded after them. As the chain of ISRs is singly linked, there is no provision for discovering the previous handler's address (other than attempting to trace back the interrupt chain), or to inform its predecessor that it needs to update its [...] "next address to which to jump" [...] not to point to the TSR which desires to remove itself, so that in order to safely unload TSRs {{in the middle of a}} chain, stubs had to be left in memory in most cases, thereby causing memory fragmentation. This gave rise to TSR cooperation frameworks such as TesSeRact and AMIS.|$|E
50|$|The Exec is {{at heart}} a real time, multi-threaded batch {{processing}} system. Everything {{has been built}} around that model. The Exec itself is largely structured as a real time program. Functions that are performed as Services in Windows or Daemons in Linux and UNIX are implemented as either activities within the Exec or as <b>batch</b> <b>programs</b> that are always running in the background.|$|R
50|$|This {{is a list}} of notable <b>batch</b> {{renaming}} <b>programs</b> in {{the form}} of a comparison table.|$|R
40|$|This paper {{describes}} {{a set of}} computer programs for Chinese corpus analysis. These programs include (1) extraction of diflrent characters, bigrams and words; (2) word segmentation based on bigrain, maximal-matching and the combined teclmique; (3) identification of special terms; (4) Chinese concordancing; (5) compiling collocatiou statistics and (6) evaluation utilities. These programs run on the IBMPC and <b>batch</b> <b>programs</b> co-ordinate {{the use of these}} programs...|$|R
40|$|Project Planning Analysis and Reporting System (PPARS) is {{automated}} aid {{in monitoring}} and scheduling of activities within project. PPARS system consists of PPARS <b>Batch</b> <b>Program,</b> five preprocessor programs, and two post-processor programs. PPARS <b>Batch</b> <b>program</b> is full CPM (Critical Path Method) scheduling program with resource capabilities. Can process networks {{with up to}} 10, 000 activities...|$|E
40|$|Idle {{computation}} {{cycles of}} a shared network of workstations are increasingly being used to run batch parallel programs. For one common paradigm, the <b>batch</b> <b>program</b> task running on an idle workstation is preempted when the owner reclaims the workstation. This owner interference has a considerable impact on the execution time of a <b>batch</b> <b>program,</b> {{especially in the case}} of large parallel programs. Replication of <b>batch</b> <b>program</b> tasks has been used to reduce the impact of owner interference. We show analytically that reclamation can significantly improve parallel program speedup. Perhaps surprisingly, replication can also improve efficiency for certain workloads. We present analysis to quantify the amount of speedup and efficiency improvement. Furthermore, we provide analysis to help determine whether extra available workstations should be used for increasing job parallelism or for task replication. I...|$|E
30|$|Fourth, we {{developed}} a <b>batch</b> <b>program</b> named count.bat (Additional file 1 : Appendix E) to call the count.class with the input parameters “DE” and “ID”. All 158 text files were processed one by one. As a result, 158 intermediate files were created.|$|E
40|$|This essay {{examines}} {{the nature of}} programs, classifies the traditional or enigmatic styles of programming, distinguishing template, prose and literate styles; notes the contrast between <b>batch</b> <b>programs</b> and interactive programs; and highlights the advantages of giving priority in developing interactive programs to the online documentation, and proposes that this documentation should be the principal target of development, with the executable program code being regarded of secondary and consequent...|$|R
50|$|TCC {{provides}} a {{rich set of}} command line and <b>batch</b> <b>programming</b> capabilities. It can work {{in conjunction with other}} scripting languages, such as REXX, Ruby and Perl, or Windows Scripting languages, in the form of Active Scripting engines such as VBScript and JScript as well as PerlScript (via ActivePerl), TclScript (via ActiveTcl), PythonScript (via ActivePython), and the scripting engine version of Object REXX to provide greater access to the operating system.|$|R
5000|$|AmigaDOS {{also has}} the feature of dealing with <b>batch</b> <b>programming,</b> which it calls [...] "script" [...] programming, and {{has a number of}} {{commands}} such as Echo, If, Then, EndIf, Val, and Skip to deal with structured script programming. Scripts are text-based files and can be created with AmigaDOS's internal text editor program, called Ed (unrelated to Unix's Ed), or with any other third-party text editor. To invoke a script program, AmigaDOS uses the command Execute.|$|R
30|$|Fifth, we {{developed}} another <b>batch</b> <b>program</b> named merge.bat (Additional file 1 : Appendix F) {{to call the}} merge.class with the input parameters, that is, the 158 intermediate files, to merge them. As a result, a final file was created, in which all keywords in 78, 986 articles were counted and sorted.|$|E
40|$|The PHILSOM {{system for}} {{periodicals}} control {{evolved from a}} <b>batch</b> <b>program</b> {{for the management of}} an inventory problem to a national online network using long-line and distributed computing techniques. The stages of growth from consortium development, through sharing of professional expertise, to the current state of shared resources are described. Current operation and future prospects are discussed...|$|E
40|$|It is {{very common}} to run a group of SAS {{programs}} together in batch mode. For example, often we run {{a large number of}} individual SAS programs to generate listings and tables for a clinical trial. These programs are submitted to run together in a batch job. There are different ways to create the <b>batch</b> <b>program.</b> For instance, a shell script for a UNIX system can be created to do it on the server side (SUGI 145 - 31), or a. BAT file for Windows OS can fulfill this task on a specific PC (SUGI 105 - 27). In this article, we present another approach. We use a simple macro to create the SAS <b>batch</b> <b>program</b> in the Windows environment {{that can be used for}} batch-submit later in either operating system. This macro can run on any PC which has the SAS system installed...|$|E
5000|$|Optimized Local Adapters -- an {{externalization}} of a pre-existing cross-memory communication feature. This allows address spaces {{outside of}} the WAS z/OS application server the ability {{to participate in the}} same cross-memory exchange that exists within a WAS z/OS cell. The Optimized Local Adapters ("OLA" [...] or [...] "WOLA") are bi-directional, allowing the invocation of EJB assets from outside the application server, and the invocation of services in external facilities such as CICS, <b>batch</b> <b>programs,</b> or Unix Systems Services processes.|$|R
50|$|Advanced Renamer is a <b>batch</b> renamer <b>program</b> {{that can}} rename {{multiple}} files and folders at once. It is developed for Microsoft Windows and released as freeware.|$|R
50|$|Some {{compiled}} languages explicitly permit self-modifying code. For example, the ALTER verb in COBOL may {{be implemented}} as a branch instruction which is modified during execution. One <b>batch</b> <b>programming</b> technique {{is to use}} self-modifying code. Clipper and SPITBOL also provide facilities for explicit self-modification. The Algol compiler on B6700 systems offered an interface to the operating system whereby executing code could pass a text string or a named disc file to the Algol compiler and was then able to invoke the new version of a procedure.|$|R
