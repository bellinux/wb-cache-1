321|520|Public
25|$|<b>Boolean</b> <b>circuit,</b> a {{mathematical}} model for digital logical circuits.|$|E
25|$|Models such as Boolean {{circuits}} and sorting {{networks are}} used. A <b>Boolean</b> <b>circuit</b> {{can be seen}} as a computer network: each gate is a computer that runs an extremely simple computer program. Similarly, a sorting network {{can be seen as}} a computer network: each comparator is a computer.|$|E
25|$|Logic {{sentences}} {{that can be}} expressed in classical propositional calculus have an equivalent expression in Boolean algebra. Thus, Boolean logic is sometimes used to denote propositional calculus performed in this way. Boolean algebra {{is not sufficient to}} capture logic formulas using quantifiers, like those from first order logic. Although the development of mathematical logic did not follow Boole's program, the connection between his algebra and logic was later put on firm ground in the setting of algebraic logic, which also studies the algebraic systems of many other logics. The problem of determining whether the variables of a given Boolean (propositional) formula can be assigned {{in such a way as}} to make the formula evaluate to true is called the Boolean satisfiability problem (SAT), and is of importance to theoretical computer science, being the first problem shown to be NP-complete. The closely related model of computation known as a <b>Boolean</b> <b>circuit</b> relates time complexity (of an algorithm) to circuit complexity.|$|E
40|$|We present partial {{results of}} a {{research}} project in which we use <b>boolean</b> <b>circuits</b> as a parallel computation model {{for the expression of}} queries to relational databases. For that purpose, we use the well-known equivalence between First Order Logic (FO) and a class of restricted families of <b>boolean</b> <b>circuits.</b> First, we translate a given query, expressed through a FO formula, into a uniform family of <b>boolean</b> <b>circuits.</b> Then we analyse the depth of the <b>boolean</b> <b>circuits,</b> in order to optimize parallel time. For this sake, we work on the expression tree of the formula, looking for its transformation into an equivalent family of <b>boolean</b> <b>circuits</b> of minimum depth. Facultad de Inform√°tic...|$|R
50|$|Because of this equivalence, P/poly is {{sometimes}} {{defined as the}} class of decision problems solvable by polynomial size <b>Boolean</b> <b>circuits,</b> or by polynomial-size non-uniform <b>Boolean</b> <b>circuits.</b>|$|R
5000|$|P {{can also}} {{be viewed as a}} uniform family of <b>boolean</b> <b>circuits.</b> A {{language}} L is in P if and only if there exists a polynomial-time uniform family of <b>boolean</b> <b>circuits</b> , such that ...|$|R
5000|$|O. B. Lupanov is {{best known}} for his (k, s)-Lupanov {{representation}} of Boolean functions that he used to devise an asymptotically optimal method of <b>Boolean</b> <b>circuit</b> synthesis, thus proving the asymptotically tight upper bound on <b>Boolean</b> <b>circuit</b> complexity: ...|$|E
50|$|As {{a special}} case, a propositional formula or Boolean {{expression}} is a <b>Boolean</b> <b>circuit</b> {{with a single}} output node in which every other node has fan-out of 1. Thus, a <b>Boolean</b> <b>circuit</b> {{can be regarded as}} a generalization that allows shared subformulas and multiple outputs.|$|E
5000|$|<b>Boolean</b> <b>circuit,</b> a {{mathematical}} model for digital logical circuits.|$|E
40|$|AbstractWe {{compare the}} two {{computational}} models of <b>Boolean</b> <b>circuits</b> and arithmetic circuits in cases where they both apply, namely the computation of polynomials over the rational numbers or over finite fields. Over Q and finite fields, <b>Boolean</b> <b>circuits</b> can simulate arithmetic circuits efficiently with respect to size. Over finite fields of small characteristic, the two models are equally powerful when size is considered, but <b>Boolean</b> <b>circuits</b> are exponentially more powerful than arithmetic circuits with respect to depth. Most of the technical results given in this synopis are taken from the literature...|$|R
50|$|AC and NC, {{which are}} defined using <b>boolean</b> <b>circuits.</b>|$|R
40|$|<b>Boolean</b> <b>circuits</b> were {{introduced}} in complexity theory to provide a model for parallel computation. A big advantage of studying <b>Boolean</b> <b>circuits</b> {{is that they can}} be viewed as simple combinatorial objects and thus allow us to use many algebraic and combinatorial techniques to derive upper and lower bounds on their computational power. The relationship between <b>Boolean</b> <b>circuits</b> and the traditional Turing machine model helps us to translate the bounds obtained for circuits into bounds for the Turing machine model which is otherwise hard to analyze. In this thesis we study the power of certain kinds of uniform constant depth circuits and provide upper and lower bounds. When we talk about Turing machines, the most important resources are time and space. The most important resources in case of <b>Boolean</b> <b>circuits</b> are size and depth. Circuits that hav [...] ...|$|R
5000|$|Nevanlinna Prize (1990) for {{introducing}} the [...] "approximation method" [...] in proving <b>Boolean</b> <b>circuit</b> lower bounds of some essential algorithmic problems, ...|$|E
50|$|The Circuit Value Problem (or Circuit Evaluation Problem) is the {{computational}} {{problem of}} computing {{the output of}} a given <b>Boolean</b> <b>circuit</b> on a given input.|$|E
50|$|Computing {{the output}} of a given <b>Boolean</b> <b>circuit</b> on a {{specific}} input is P-complete problem. If the input is an integer circuit, however, it is unknown whether this problem is decidable.|$|E
40|$|We {{demonstrate}} that DNA computers can simulate <b>Boolean</b> <b>circuits</b> {{with a small}} overhead. <b>Boolean</b> <b>circuits</b> embody the notion of massively parallel signal processing and are frequently encountered in many parallel algorithms. Many important problems such as sorting, integer arithmetic, and matrix multiplication {{are known to be}} computable by small size <b>Boolean</b> <b>circuits</b> much faster than by ordinary sequential digital computers. This paper shows that DNA chemistry allows one to simulate large semi-unbounded fan-in <b>Boolean</b> <b>circuits</b> with a logarithmic slowdown in computation time. Also, for the class NC 1, the slowdown can be reduced to a constant. In this algorithm we have encoded the inputs, the Boolean AND gates, and the OR gates to DNA oligonucleotide sequences. We operate on the gates and the inputs by standard molecular techniques of sequence-specific annealing, ligation, separation by size, amplification, sequence-specific cleavage, and detection by size. Additional steps of amplifica [...] ...|$|R
50|$|Complexity classes {{defined in}} terms of <b>Boolean</b> <b>circuits</b> include AC0, AC, TC0 and NC.|$|R
40|$|We propose two {{different}} ways to simulate <b>Boolean</b> <b>circuits</b> {{in the framework of}} ciliate computations, based on the intramolecular and on the intermolecular gene assembly models with contextual operations applied in a maximal parallel manner. In both cases, the running time and the size of resources of the simulating devices are proportional to the corresponding depth and size of the simulated <b>Boolean</b> <b>circuits...</b>|$|R
50|$|Equivalently, NC can {{be defined}} as those {{decision}} problems decidable by a uniform <b>Boolean</b> <b>circuit</b> (which can be calculated from the length of the input) with polylogarithmic depth and a polynomial number of gates.|$|E
5000|$|The {{underlying}} function (e.g., in the millionaires' problem, comparison function) {{is described}} as a <b>Boolean</b> <b>circuit</b> with 2-input gates. The circuit is known to both parties. This step can be done beforehand by a third-party.|$|E
50|$|In {{theoretical}} computer science, {{the circuit}} satisfiability problem (also known as CIRCUIT-SAT, CircuitSAT, CSAT, etc.) is the decision problem of {{determining whether a}} given <b>Boolean</b> <b>circuit</b> has an assignment of its inputs that makes the output true.|$|E
50|$|We {{prove it}} {{now in the}} case of {{probabilistic}} Turing machine, since Adleman has already done the work of replacing randomization with non-uniformity in his theorem. The case of <b>boolean</b> <b>circuits</b> cannot be derived from this case (since it involves deciding potentially undecidable problems), but the proof of Adleman's theorem can be easily adapted to the case of non-uniform <b>boolean</b> <b>circuits</b> families.|$|R
50|$|Boolean {{expressions}} {{correspond to}} propositional formulas in logic {{and are a}} special case of <b>Boolean</b> <b>circuits.</b>|$|R
40|$|This paper {{proposes a}} method for {{simulating}} <b>Boolean</b> <b>circuits</b> based on primer extension and DNA cleavage. The advantage of the current method is the requirement of little human intervention {{during the course of}} simulation. The paper also explores the potential of RecA-assisted DNA-DNA hybridization in DNA-based computation. The method could in principle allow simulation of many levels of large <b>Boolean</b> <b>circuits</b> in a single test tube. ...|$|R
50|$|Several {{important}} complexity {{measures can}} be defined on Boolean circuits, including circuit depth, circuit size, and number of alternations between AND gates and OR gates. For example, the size complexity of a <b>Boolean</b> <b>circuit</b> {{is the number of}} gates.|$|E
5000|$|Models such as Boolean {{circuits}} and sorting {{networks are}} used. A <b>Boolean</b> <b>circuit</b> {{can be seen}} as a computer network: each gate is a computer that runs an extremely simple computer program. Similarly, a sorting network {{can be seen as}} a computer network: each comparator is a computer.|$|E
50|$|In 2000, Gajardo et al. {{showed a}} {{construction}} that calculates any <b>boolean</b> <b>circuit</b> using {{the trajectory of}} a single instance of Langton's ant. Thus, {{it would be possible}} to simulate an arbitrary Turing machine using the ant's trajectory for computation. This means that the ant is capable of universal computation.|$|E
50|$|Together {{with his}} {{graduate}} school advisor, Sergey Vsevolodovich Yablonsky, he {{is considered one}} of the founders of the Soviet school of Mathematical Cybernetics. In particular he authored pioneering works on synthesis and complexity of <b>Boolean</b> <b>circuits,</b> and of control systems in general (–£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏—Å—Ç–µ–º—ã), the term used in the USSR and Russia for a generalization of finite state automata, <b>Boolean</b> <b>circuits</b> and multi-valued logic circuits.|$|R
40|$|This paper {{presents}} a methodology to transfer self-timed circuit specifications into sequential quantum <b>Boolean</b> <b>circuits</b> (SQBCs) and composable SQBCs (CQBCs). State graphs (SGs) {{are used to}} describe the behaviors of self-timed circuits and then are translated into SQBCs based on Toffoli gates. The concept of IP (Intellectual Property) reuse is applied to the constructed SQBCs to produce reusable and composable quantum <b>Boolean</b> <b>circuits</b> (CQBCs). Therefore, these reusable CQBCs as basic modular components can be exploited to construct more complicated quantum <b>Boolean</b> <b>circuits.</b> A set of self-timed components is successfully and automatically synthesized into CQBCs by our methodology. These CQBCs can be used as building blocks to compose control-path components of self-timed systems...|$|R
40|$|Communicated by Editor‚Äôs name We propose two {{different}} ways to simulate <b>Boolean</b> <b>circuits</b> {{in the framework of}} ciliate computations, based on the intramolecular and on the intermolecular gene assembly models with contextual operations applied in a maximal parallel manner. In both cases, the running time and the size of resources of the simulating devices are proportional to the corresponding depth and size of the simulated <b>Boolean</b> <b>circuits.</b> 1...|$|R
50|$|In {{computational}} {{complexity theory}} and circuit complexity, a <b>Boolean</b> <b>circuit</b> is {{a mathematical model}} for digital logic circuits. A formal language can be decided by a family of Boolean circuits, one circuit for each possible input length. Boolean circuits are also used as a formal model for combinational logic in digital electronics.|$|E
5000|$|The Circuit Value Problem, {{the problem}} of {{computing}} the output of a given <b>Boolean</b> <b>circuit</b> on a given input string, is a P-complete decision problem. Therefore, this problem {{is considered to be}} [...] "inherently sequential" [...] in the sense that there is likely no efficient, highly parallel algorithm that solves the problem.|$|E
50|$|The most {{flexible}} of way {{of representing}} a succinct game is by representing each player by a polynomial-time bounded Turing machine, which takes as its input {{the actions of}} all players and outputs the players utility. Such a Turing machine is equivalent to a <b>Boolean</b> <b>circuit,</b> {{and it is this}} representation, known as circuit games, that we will consider.|$|E
50|$|Several {{important}} complexity {{classes are}} {{defined in terms}} of <b>Boolean</b> <b>circuits,</b> including NC. NC is defined to be the set of Boolean functions that can be decided by uniform <b>Boolean</b> <b>circuits</b> of polynomial size and polylogarithmic depth. Here, the word uniform means that there must be some condition on the circuit family so that a description of a circuit can be computed from only the number of inputs to the circuit.|$|R
5000|$|A {{family of}} <b>Boolean</b> <b>circuits</b> [...] is logspace uniform if {{there exists a}} {{deterministic}} Turing machine M, such that ...|$|R
50|$|<b>Boolean</b> <b>circuits</b> {{provide a}} model for many digital {{components}} used in computer engineering, including multiplexers, adders, and arithmetic logic units.|$|R
