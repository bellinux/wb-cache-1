2|18|Public
50|$|TrueType outline fonts. Up to this point, all fonts on the Macintosh were bitmapped, or {{a set of}} <b>bitmapped</b> <b>screen</b> fonts {{paired with}} outline PostScript printer fonts; TrueType {{for the first time}} offered a single font format that scaled to any size on screen and on paper. This {{technology}} was recognized as being so important that a TrueType extension for System 6 was also released, along with an updated Font/DA Mover capable of installing these new kinds of fonts into the System 6 System file.|$|E
50|$|Engelbart's work {{directly}} {{led to the}} advances at Xerox PARC. Several people went from SRI to Xerox PARC in the early 1970s.In 1973, Xerox PARC developed the Alto personal computer. It had a <b>bitmapped</b> <b>screen,</b> {{and was the first}} computer to demonstrate the desktop metaphor and graphical user interface (GUI). It was not a commercial product, but several thousand units were built and were heavily used at PARC, as well as other XEROX offices, and at several universities for many years. The Alto greatly influenced the design of personal computers during the late 1970s and early 1980s, notably the Three Rivers PERQ, the Apple Lisa and Macintosh, and the first Sun workstations.|$|E
50|$|In hi-res <b>bitmaps,</b> <b>screen</b> RAM {{is used to}} {{hold the}} {{foreground}} and background colors of each tile (high and low nibble of each byte). This is the only VIC-II mode {{that does not make}} any use of the color RAM at $D800 or the background color register at $D021.|$|R
50|$|While {{computer}} graphics software provides {{a variety of}} alternatives to screentone, its appearance is still frequently simulated, to achieve consistency with earlier work or avoid the appearance of computer-generated images. It is sometimes accomplished by scanning actual screentone sheets, but original vector or <b>bitmap</b> <b>screen</b> patterns are also used.|$|R
5000|$|The Lisp Machine {{operating}} system {{was written in}} Lisp Machine Lisp. It was a one-user workstation initially targeted at software developers for artificial intelligence projects. The system had a large <b>bitmap</b> <b>screen,</b> a mouse, a keyboard, a network interface, a disk drive and slots for expansion. The {{operating system}} was supporting this hardware and it provided (among others): ...|$|R
5|$|The ARC {{became the}} driving force behind the design and {{development}} of the oN-Line System (NLS). He and his team developed computer interface elements such as <b>bitmapped</b> <b>screens,</b> the mouse, hypertext, collaborative tools, and precursors to the graphical user interface. He conceived and developed many of his user interface ideas in the mid-1960s, long before the personal computer revolution, at a time when most computers were inaccessible to individuals who could only use computers through intermediaries (see batch processing), and when software tended to be written for vertical applications in proprietary systems.|$|R
500|$|Under Engelbart's guidance, the Augmentation Research Center developed, {{with funding}} {{primarily}} from DARPA, the NLS to demonstrate numerous technologies, {{most of which}} are now in widespread use; this included the computer mouse, <b>bitmapped</b> <b>screens,</b> hypertext; all of which were displayed at [...] "The Mother of All Demos" [...] in 1968. The lab was transferred from SRI to Tymshare in the late 1970s, which was acquired by McDonnell Douglas in 1984, and NLS was renamed Augment. At both Tymshare and McDonnell Douglas, Engelbart was limited by a lack of interest in his ideas and funding to pursue them, and retired in 1986.|$|R
40|$|Computer {{supported}} cooperative work {{depends on}} conventional personal productivity tools {{and on the}} ability of the system to provide effective means for various members involved in the work to interact with one another. The interaction mechanism may be formalized through operations on shared information, through strict message-passing protocols, or by providing a means by which the human users can interact with one another through conventional conversation. Desktop virtual environment technology can be used to create group human-computer interface in which different users on different computers interact with common virtual artifacts, and with representations of one another using pointing devices, keyboards, and <b>bitmapped</b> <b>screens.</b> Virtual environments place tremendous demands on bandwidth for data movement, extensive graphics, data stream synchronization, and frequent interactions among object representations of the artifacts and virtual users. This paper describes our organization of an [...] ...|$|R
40|$|While {{the method}} was successful, an {{alternative}} idea was conceived {{in which the}} student and instructor could be more interactive and more visual than simply using an overhead projection panel. A Toolbook (using Toolbook II) was created initially as a teaching mechanism to be piloted during the Fall 1997 semester. This multimedia attempt allows the student {{to have some of}} the instruction that was afforded previously now on a large screen projected within the classroom, and allows through captured screen images stored as <b>bitmaps,</b> <b>screens</b> that can be manipulated size wise for more effective classroom instruction. A simple menu-driven program that works visually through the basics of arithmetic and continues through tables of values, graphing, statistics, and programming is included within the software package. In addition, there are sections about, and maps of, the TI- 82 / 83 calculators with pop-up labels. For note-taking convenience, students are provided with printouts of the individua...|$|R
50|$|The ImageWriter printer {{supported}} a higher resolution mode where bitmap fonts double {{the size of}} the screen resolution were automatically substituted for 'near letter quality' printing. (For example, a 24-point bitmapped font would be used for 12-point printing.) This feature was sometimes called two-times font printing. Some later Apple QuickDraw-based laser printers also supported four-times font printing where <b>bitmaps</b> quadruple the <b>screen</b> size were used for letter quality output.|$|R
5000|$|After {{initializing}} {{the screen}} for [...] "high-resolution" [...] (320 × 200 monochrome pixels) or multicolor (160 wide × 200 pixels in four colors) graphics with the GRAPHIC command, one could draw lines, circles, ellipses, arcs, boxes and more using the DRAW, CIRCLE, and BOX commands. PAINT would [...] "flood-fill" [...] an area enclosed by lines, e.g. {{the interior of a}} CIRCLE or BOX. A CHAR command was used to [...] "print" [...] characters from the character generator ROM onto the <b>bitmap</b> graphics <b>screen.</b> SSHAPE and GSHAPE would store the contents of a rectangular area of the high-res graphics into a string variable, and GSHAPE would [...] "stamp" [...] it back onto the screen at arbitrary locations. Such [...] "graphics-in-a-string" [...] could also be used to transfer something drawn on the hi-res screen into one of the eight sprite patterns.|$|R
25|$|Originally, sprites were {{a method}} of {{integrating}} unrelated bitmaps so that {{they appeared to be}} part of the normal <b>bitmap</b> on a <b>screen,</b> such as creating an animated character that can be moved on a screen without altering the data defining the overall screen. Such sprites can be created by either electronic circuitry or software. In circuitry, a hardware sprite is a hardware construct that employs custom DMA channels to integrate visual elements with the main screen in that it super-imposes two discrete video sources. Software can simulate this through specialized rendering methods.|$|R
50|$|With HP RGS all the processing, {{including}} hardware-accelerated graphics {{with the}} latest OpenGL or DirectX rendering is done on the workstation and only compressed <b>bitmap</b> images (the <b>screen)</b> are sent to the client device. HP RGS is distinguished by its proprietary compression algorithms which allows for real-time transmission of complex 3D images and video, which traditional remote desktop protocols struggle with. This opens up the use of remote desktops and thin clients to graphics-intensive industries such as CAD, oil and gas exploration, animation, architecture engineering and construction which previously required local workstations.|$|R
50|$|Microsoft and Monotype {{technicians}} used TrueType's hinting {{technology to}} ensure that these fonts did not suffer from the problem of illegibility at low resolutions, which had previously forced the use of <b>bitmapped</b> fonts for <b>screen</b> display. Subsequent advances in technology have introduced first anti-aliasing, which smooths the edges of fonts {{at the expense of}} a slight blurring, and more recently subpixel rendering (the Microsoft implementation goes by the name ClearType), which exploits the pixel structure of LCD based displays to increase the apparent resolution of text. Microsoft has heavily marketed ClearType, and sub-pixel rendering techniques for text are now widely used on all platforms.|$|R
40|$|The Plan 9 window system, 8 1 / 2, is a modest-sized {{program of}} novel design. It {{provides}} ASCII I/O and bitmap graphic services to {{both local and}} remote client programs by offering a multiplexed file service to those clients. It serves traditional UNIX files like /dev/tty {{as well as more}} unusual ones that provide access to the mouse and the raw <b>screen.</b> <b>Bitmap</b> graphics operations are provided by serving a file called /dev/bitblt that interprets client messages to perform raster operations. The file service that 8 1 / 2 offers its clients is identical to that it uses for its own implementation, so it is fundamentally no more than a multiplexer. This architecture has some rewarding symmetries and can be implemented compactl...|$|R
40|$|Ho Ho-ching. Thesis (M. Phil.) [...] Chinese University of Hong Kong, 2001. Includes bibliographical {{references}} (leaves 104 - 107). Abstracts in English and Chinese. Abstract [...] - p. iAcknowledgment [...] - p. viChapter 1. [...] - Introduction [...] - p. 1 Chapter 1. 1. [...] - Introduction to PBX based Call Center [...] - p. 1 Chapter 1. 2. [...] - The Scenarios [...] - p. 2 Chapter 1. 3. [...] - Thesis Overview [...] - p. 5 Chapter 2. [...] - Features of Collaborative Browsing [...] - p. 8 Chapter 2. 1. [...] - Feature Synchronization vs <b>Bitmap</b> <b>Screen</b> Transfer [...] - p. 8 Chapter 2. 2. [...] - Basic Collaborative Features of the Collaborative Browser [...] - p. 9 Chapter 2. 2. 1. [...] - Web Page Pushing [...] - p. 10 Chapter 2. 2. 2. [...] - Screen Widget Synchronization [...] - p. 11 Chapter 2. 2. 3. [...] - Tele-pointing and Shared Whiteboard [...] - p. 12 Chapter 2. 3. [...] - Collaborative Form Manipulation [...] - p. 13 Chapter 2. 3. 1. [...] - Importance of Electronic Form Collaboration [...] - p. 13 Chapter 2. 3. 2. [...] - Basic Support for Form Collaboration ´ؤ´ؤData Synchronization [...] - p. 14 Chapter 2. 3. 3. [...] - Existence of Form Complexity ´ؤForm Data Dependency [...] - p. 75 Chapter 2. 3. 4. [...] - Hinting [...] - p. 17 Chapter 2. 4. [...] - Collaborative IVR [...] - p. 23 Chapter 2. 4. 1. [...] - Traditional Interactive Voice Response (IVR) Service [...] - p. 23 Chapter 2. 4. 2. [...] - Abstraction ´ؤCorrelating Form Interaction Mechansim with IVR [...] - p. 25 Chapter 2. 4. 3 [...] - Collaborative IVR by Form Interaction Mechanism [...] - p. 27 Chapter 3. [...] - Software Architecture [...] - p. 33 Chapter 3. 1. [...] - The Three-Tier Architecture [...] - p. 33 Chapter 3. 2. [...] - The Collaboration Mechanism for Collaborative Browser [...] - p. 37 Chapter 3. 2. 1. [...] - Session Initialization/Termination [...] - p. 37 Chapter 3. 2. 2. [...] - Data Flow of the Basic Collaboration Features [...] - p. 39 Chapter 3. 2. 3. [...] - Control Mechanism [...] - p. 40 Chapter 3. 2. 4. [...] - The Hinting Mechanism for Collaborative Form Manipulation [...] - p. 43 Chapter 3. 3. [...] - The Collaboration Mechanism for Collaborative IVR [...] - p. 45 Chapter 4. [...] - Implementation [...] - p. 51 Chapter 4. 1. [...] - Shareable Document Object Architecture for Collaboration [...] - p. 51 Chapter 4. 1. 1. [...] - Document Object Architecture [...] - p. 51 Chapter 4. 1. 2. [...] - Generalizing to Shareable Document Object Architecture [...] - p. 53 Chapter 4. 2. [...] - Whiteboard Mechanism [...] - p. 55 Chapter 4. 3. [...] - Packet Data Unit for Communication [...] - p. 57 Chapter 4. 4. [...] - Bridging Different Software Components [...] - p. 60 Chapter 4. 5. [...] - Hinting Mechanism for Collaborative Form Manipulation [...] - p. 63 Chapter 4. 5. 1. [...] - Relating Form Fields to Table Fields [...] - p. 63 Chapter 4. 5. 2. [...] - Hinting by the Hinting Tables [...] - p. 69 Chapter 4. 6. [...] - Collaborative IVR [...] - p. 73 Chapter 4. 6. 1. [...] - Using Mediator for Collaborative IVR [...] - p. 73 Chapter 4. 6. 2. [...] - Concept of Telephone Form [...] - p. 74 Chapter 4. 6. 3. [...] - Hinting for Collaborative IVR [...] - p. 78 Chapter 4. 7. [...] - System Integration [...] - p. 81 Chapter 5. [...] - Performance Evaluation and Experiment Results [...] - p. 84 Chapter 5. 1. [...] - Optimizing the Transmission Methodology [...] - p. 84 Chapter 5. 2. [...] - Browser Responsiveness Study [...] - p. 86 Chapter 5. 2. 1. [...] - Experiment Details [...] - p. 86 Chapter 5. 2. 2. [...] - The Assumptions [...] - p. 89 Chapter 5. 2. 3. [...] - Experiment Results and Analysis [...] - p. 90 Chapter 5. 3. [...] - Bandwidth Consumption [...] - p. 94 Chapter 6. [...] - Conclusions [...] - p. 97 Appendix A 一 Government Profit Tax Return Form [...] - p. 101 Appendix B ´ؤ A Phone Banking IVR Service Tree [...] - p. 103 Bibliography [...] - p. 10...|$|R
40|$|Although the {{majority}} of the typefaces installed with a standard TEX distribution are available in Postscript Type 1 format, there are still several very useful ones available only in METAFONT format. These include the specialist fonts in the bookhands bundle, such as Rustic or Uncial, the BB Dingbats, the cartographic symbols (Karta), Ogham, and many others. METAFONT is a font outline language, but by default TEX systems use the bitmap output from such fonts (a. pk font file). It is possible that these will never be rewritten as PostScript fonts, so using them will continue to require a TEX system, {{with a little help from}} The L ATEX Companion [2]. The Adobe Acrobat Reader notoriously used to make a complete hames of <b>bitmapped</b> fonts on <b>screen,</b> blurring them into unreadability while printing them perfectly, but this has been improved significantly in recent versions. It is very fashionable in certain quarters to decry the use of bitmapped fonts on purely technical grounds, disregarding the fact that they do actually provide a useful — and in some cases essential — instantiation of a specific design. There are some problems: a few of the fonts available (Ogham is one example) produce microscopically tiny glyphs by default, requiring a correction to the METAFONT code; and not all of them can yet be used directly in L ATEX via a standard package. But they are all worth investigating, not just for special effects, but because they are a useful contribution to the range of typefaces available to us...|$|R

