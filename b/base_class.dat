424|6439|Public
5|$|Mass Effect is a single-player action {{role-playing}} game {{in which}} the player takes the role of Commander Shepard through a third-person perspective. Shepard's gender, appearance, military background, combat-training and first name {{are determined by the}} player before the game begins. There are six different character classes for the player to choose from and each of them has different talents that provide enhanced combat capabilities. For example, the Soldier class is trained in weapon damage and has improved health, while the Sentinel class is trained in protecting and healing allies. At one point in the game, players may evolve their <b>base</b> <b>class</b> talent into one of two specializations, which depend on the class chosen by the player. Although any class can use any weapon type, each class is only effective with the weapons they are trained in.|$|E
25|$|Ordinarily, when a {{function}} in a derived class overrides {{a function}} in a <b>base</b> <b>class,</b> the function to call {{is determined by the}} type of the object. A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a <b>base</b> <b>class</b> pointer; the decision is therefore put off until runtime. This is called dynamic dispatch. Virtual member functions or methods allow the most specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using virtual function tables. If the object type is known, this may be bypassed by prepending a fully qualified class name before the function call, but in general calls to virtual functions are resolved at run time.|$|E
25|$|Variable {{pointers}} {{and references}} to a <b>base</b> <b>class</b> type in C++ can also refer to objects of any derived classes of that type. This allows arrays {{and other kinds}} of containers to hold pointers to objects of differing types (references cannot be directly held in containers). This enables dynamic (run-time) polymorphism, where the referred objects can behave differently depending on their (actual, derived) types.|$|E
50|$|Tome of Battle adds eight martial adept {{prestige}} classes, in {{the same}} expanded format as the <b>base</b> <b>classes</b> earlier in the book, and rules for using other prestige classes with the martial adept <b>base</b> <b>classes.</b> Martial adepts continue to advance in their martial skills while multiclassing (either with other <b>base</b> <b>classes</b> or with prestige classes), but more slowly, except when multiclassing with other martial adept classes.|$|R
5000|$|In C++, a class defined {{with the}} [...] keyword has private members and <b>base</b> <b>classes</b> by default. A {{structure}} is a class defined with the [...] keyword. Its members and <b>base</b> <b>classes</b> are public by default. This {{is the only}} difference between structs and classes in C++.|$|R
50|$|JSBSim is {{designed}} to be extensible. The key objects (engines, flight control components) are implemented as <b>base</b> <b>classes</b> with a simple interface. Specific, new engines can be modeled by creating new classes derived from the <b>base</b> <b>classes.</b> New flight control components can be created in the same manner.|$|R
25|$|Once a {{character}} earns enough experience, each class may also choose from two advanced classes, {{resulting in a}} total of 8 advanced classes per faction. Advanced classes share the same storyline as their <b>base</b> <b>class.</b> Lightsaber and blaster colors are not faction or class restricted, but some are restricted based on level and/or Lightside or Darkside alignment. For example, some lightsabers can only be bought if Light or Darkside aligned.|$|E
500|$|In contrast, {{reference}} types {{have the}} notion of referential identity - each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for [...] ). In general, {{it is not always}} possible to create an instance of a reference type, nor to copy an existing instance, or perform a value comparison on two existing instances, though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as [...] or [...] ). Examples of reference types are [...] (the ultimate <b>base</b> <b>class</b> for all other C# classes), [...] (a string of Unicode characters), and [...] (a <b>base</b> <b>class</b> for all C# arrays).|$|E
500|$|Final Fantasy Type-0 HD is {{an action}} {{role-playing}} video game that utilizes a real-time battle system similar to [...] The player controls Class Zero, an elite fighting force of fourteen students from Rubrum's Akademeia. Outside mission environments and Akademeia (Class Zero's home <b>base),</b> <b>Class</b> Zero navigates Orience through a scaled-down world map. The {{world can be}} navigated on foot, using chocobos (recurring galliform birds in the Final Fantasy series) or via an airship. Type-0 HD is split into missions with free periods in between. During these free periods between missions, players can explore Akademeia, breed chocobos for personal use, and complete side quests for characters in Akademeia and liberated towns.|$|E
25|$|Developers rarely create DirectShow filters from scratch. Rather, {{they employ}} DirectShow <b>Base</b> <b>Classes.</b> The <b>Base</b> <b>Classes</b> can often simplify development, {{allowing}} the programmer to bypass certain tasks. However, the process may remain relatively complex; the code {{found in the}} <b>Base</b> <b>Classes</b> is nearly {{half the size of}} the entire MFC library. As a result, even with the <b>Base</b> <b>Classes,</b> the number of COM objects that DirectShow contains often overwhelms developers. In some cases, DirectShow's API deviates from traditional COM rules, particularly with regard to the parameters used for methods. To overcome their difficulties with DirectShow's unique COM rules, developers often turn to a higher level API that uses DirectShow, notably, Windows Media Player SDK, an API provides the developer with an ActiveX Control that has fewer COM interfaces to deal with.|$|R
5000|$|Struct/Union <b>base</b> <b>classes</b> {{for direct}} {{interfacing}} with native applications ...|$|R
30|$|Finally, Wedyan and Gosh [15] and Wedyan et al. [29] {{presented}} an approach and tool implementation for measuring data flow coverage based on state variables defined in <b>base</b> <b>classes</b> or aspects. The {{goal of the}} approach is to prevent faults resulting from interactions (i.e. data flow) between <b>base</b> <b>classes</b> and aspects by focusing on attributes responsible for change the behaviour of both (state variables). Similarly {{to the work of}} our research group, they also define data flow criteria for AO programs. However, they only focus on the interaction between <b>base</b> <b>classes</b> and aspects established by the so-called state variables.|$|R
2500|$|Classes inherit [...] either {{directly}} or indirectly through another <b>base</b> <b>class.</b>|$|E
2500|$|... Specifies that a class only {{serves as}} a <b>base</b> <b>class.</b> It must be {{implemented}} in an inheriting class.|$|E
2500|$|Inheritance {{allows one}} data type to acquire {{properties}} of other data types. Inheritance from a <b>base</b> <b>class</b> may be declared as public, protected, or private. This access specifier determines whether unrelated and derived classes can access the inherited public and protected {{members of the}} <b>base</b> <b>class.</b> Only public inheritance corresponds to what is usually meant by [...] "inheritance". The other two forms are much less frequently used. If the access specifier is omitted, a [...] "class" [...] inherits privately, while a [...] "struct" [...] inherits publicly. Base classes may be declared as virtual; this is called virtual inheritance. Virtual inheritance ensures that only one instance of a <b>base</b> <b>class</b> exists in the inheritance graph, avoiding some of the ambiguity problems of multiple inheritance.|$|E
50|$|Contains the <b>base</b> <b>classes</b> for Java 2 Platform, Micro Edition applications.|$|R
5000|$|The eleven <b>base</b> <b>classes</b> {{presented}} in the 3rd edition Player's Handbook are: ...|$|R
50|$|It {{focuses on}} the skill <b>based</b> {{character}} <b>classes</b> of D&D, replacing and expanding upon an earlier soft-cover rulebook entitled Song and Silence. It also provides a catchall for anything that doesn't fit into Complete Arcane, Complete Divine, Complete Warrior, or Complete Psionic. It presents additional <b>base</b> <b>classes,</b> prestige classes, and feats.|$|R
2500|$|The <b>base</b> <b>class</b> library has a class called [...] {{from which}} all other {{exception}} classes are derived. An -object contains all the information about a specific exception and also the inner exceptions that were caused.|$|E
2500|$|All types, even value {{types in}} their boxed form, implicitly inherit from the [...] class, the {{ultimate}} <b>base</b> <b>class</b> of all objects. This class contains {{the most common}} methods shared by all objects. Some of these are [...] and can be overridden.|$|E
2500|$|An {{array type}} is a {{reference}} type {{that refers to}} a space containing one or more elements of a certain type. All array types derive from a common <b>base</b> <b>class,</b> [...] Each element is referenced by its index just like in C++ and Java.|$|E
50|$|ELK is {{a library}} for common Kernels, {{boundary}} conditions and material <b>base</b> <b>classes.</b>|$|R
50|$|The school {{offers a}} variety of both {{standard}} and AP curriculum <b>based</b> <b>classes.</b>|$|R
5000|$|The four <b>base</b> <b>classes</b> {{presented}} in the 5th edition free-to-download Basic Rules are: ...|$|R
2500|$|Multiple {{inheritance}} is a C++ feature {{not found}} in most other languages, allowing a class {{to be derived from}} more than one base class; this allows for more elaborate inheritance relationships. For example, a [...] "Flying Cat" [...] class can inherit from both [...] "Cat" [...] and [...] "Flying Mammal". Some other languages, such as C# or Java, accomplish something similar (although more limited) by allowing inheritance of multiple interfaces while restricting the number of base classes to one (interfaces, unlike classes, provide only declarations of member functions, no implementation or member data). An interface as in C# and Java can be defined in C++ as a class containing only pure virtual functions, often known as an abstract <b>base</b> <b>class</b> or [...] "ABC". The member functions of such an abstract <b>base</b> <b>class</b> are normally explicitly defined in the derived class, not inherited implicitly. C++ virtual inheritance exhibits an ambiguity resolution feature called dominance.|$|E
2500|$|FCL is a superset of BCL and {{refers to}} the entire class library that ships with [...]NET Framework. It {{includes}} an expanded set of libraries, including the Windows Forms, ASP.NET, and Windows Presentation Foundation (WPF) but also extensions to the <b>base</b> <b>class</b> libraries ADO.NET, Language Integrated Query (LINQ), Windows Communication Foundation (WCF), and Workflow Foundation (WF). FCL is much larger in scope than standard libraries for languages like C++, and comparable in scope to standard libraries of Java.|$|E
2500|$|...NET Framework {{includes}} {{a set of}} standard class libraries. The class library is organized in a hierarchy of namespaces. Most of the built-in application programming interfaces (APIs) are part of either System.* or Microsoft.* namespaces. These class libraries implement many common functions, such as file reading and writing, graphic rendering, database interaction, and XML document manipulation. The class libraries are available for all CLI compliant languages. The class library {{is divided into two}} parts (with no clear boundary): <b>Base</b> <b>Class</b> Library (BCL) and Framework Class Library (FCL).|$|E
50|$|The Complete Arcane {{introduces}} {{three new}} <b>base</b> <b>classes</b> to the 3rd edition game.|$|R
5000|$|Half {{a year of}} an Internship <b>based</b> <b>class.</b> Internship {{classes are}} held in the school.|$|R
2500|$|This {{protocol}} can now {{be added}} to String, with no access to the <b>base</b> <b>class's</b> source: ...|$|R
2500|$|Visual Studio Debugger {{includes}} features targeting easier debugging of multi-threaded applications. In debugging mode, in the Threads window, which lists all the threads, {{hovering over}} a thread displays the stack trace of that thread in tooltips. The threads can directly be named and flagged for easier identification from that window itself. In addition, {{in the code}} window, along with indicating {{the location of the}} currently executing instruction in the current thread, the currently executing instructions in other threads are also pointed out. The Visual Studio debugger supports integrated debugging of the [...]NET 3.5 Framework <b>Base</b> <b>Class</b> Library (BCL) which can dynamically download the BCL source code and debug symbols and allow stepping into the BCL source during debugging. [...] a limited subset of the BCL source is available, with more library support planned for later.|$|E
2500|$|Microsoft SQL Server 2005 {{includes}} a component named SQL CLR ("Common Language Runtime") via which it integrates with [...]NET Framework. Unlike most other applications that use [...]NET Framework, SQL Server itself hosts the [...]NET Framework runtime, i.e., memory, threading and resource management requirements of [...]NET Framework are satisfied by SQLOS itself, {{rather than the}} underlying Windows operating system. SQLOS provides deadlock detection and resolution services for [...]NET code as well. With SQL CLR, stored procedures and triggers can be written in any managed [...]NET language, including C# and VB.NET. Managed code {{can also be used}} to define UDT's (user defined types), which can persist in the database. Managed code is compiled to CLI assemblies and after being verified for type safety, registered at the database. After that, they can be invoked like any other procedure. However, only a subset of the <b>Base</b> <b>Class</b> Library is available, when running code under SQL CLR. Most APIs relating to user interface functionality are not available.|$|E
5000|$|The fragile <b>base</b> <b>class</b> {{problem is}} a {{fundamental}} architectural problem of object-oriented programming systems where base classes (superclasses) are considered [...] "fragile" [...] because seemingly safe modifications to a <b>base</b> <b>class,</b> when inherited by the derived classes, may cause the derived classes to malfunction. The programmer cannot determine whether a <b>base</b> <b>class</b> change is safe simply by examining in isolation the methods of the <b>base</b> <b>class.</b>|$|E
5000|$|It has no <b>base</b> <b>classes</b> of {{the same}} type as the first defined non-static data member ...|$|R
50|$|The Expanded Psionics Handbook {{introduces}} four <b>Base</b> <b>Classes,</b> several prestige classes alters {{some rules}} {{and includes a}} new system for becoming psionically focused. The <b>base</b> <b>classes</b> are the psion and psychic warrior (both of which are reprints from the Psionics Handbook), the wilder, and the Soulknife. The prestige classes are the Cerebremancer, Elocater, Fist of Zuoken, Illithid Slayer, Metamind, Psion Uncarnate, Pyrokineticist, Thrallherd and the War Mind.|$|R
5000|$|... httpdefs unit defines <b>base</b> <b>classes</b> for cookies, sessions, file uploads, mime handling, HTTP header, request & {{response}} ...|$|R
