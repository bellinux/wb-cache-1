4|33|Public
500|$|Ludvig Luplau {{operated}} in Copenhagen until he {{emigrated to the}} U.S.A (circa 1870), where he opened a photography studio in Chicago. His CDV backmarks stated [...] "Ludvig Luplau from Copenhagen," [...] and the Chicago city business directories listed him {{at a variety of}} locations in the 1870s-90s. His stereoview <b>backmark</b> advertising claimed Luplau & Co., of 80 Fourth Street, specialized in both outdoor photography and stereoscopic interiors. Louis Laplau, his son, continued in photography beginning in the 1890s.|$|E
50|$|Skanskaskrapan was {{designed}} by Ralph Erskine in cooperation with White Architects and built by Skanska in the late 1980s, led by Gösta <b>Backmark.</b>|$|E
5000|$|Ludvig Luplau {{operated}} in Copenhagen until he {{emigrated to the}} U.S.A (circa 1870), where he opened a photography studio in Chicago. His CDV backmarks stated [...] "Ludvig Luplau from Copenhagen," [...] and the Chicago city business directories listed him {{at a variety of}} locations in the 1870s-90s. His stereoview <b>backmark</b> advertising claimed Luplau & Co., of 80 Fourth Street, specialized in both outdoor photography and stereoscopic interiors. Louis Laplau, his son, continued in photography beginning in the 1890s.|$|E
50|$|In {{constraint}} satisfaction, <b>backmarking</b> is {{a variant}} of the backtracking algorithm.|$|R
40|$|Over {{the years}} {{a large number}} of {{algorithms}} has been discovered to solve instances of CSP problems. In a recent paper Prosser [9] proposed a new approach to these algorithms by splitting them up in groups with identical forward (Backtracking, Backjumping, Conflict-Directed Backjumping) and backward (Backtracking, <b>Backmarking,</b> Forward Checking) moves. By combining the forward move of an algorithm from the first group and the backward move of an algorithm from the second group he was able to develop four new hybrid algorithms: <b>Backmarking</b> with Backjumping (BMJ), <b>Backmarking</b> with Conflict-Directed Backjumping (BMCBJ), Forward Checking with Backjumping (FC-BJ) and Forward Checking with Conflict-Directed Backjumping (FC-CBJ). Variable reordering heuristics have been suggested by, among others, by Haralick [6] and Purdom [11, 14] to improve the standard CSP algorithms. They obtained both analytical and empiral results about the performance of these heuristics in their research. In this thes [...] ...|$|R
40|$|Abstract. The forward {{checking}} algorithm {{for solving}} constraint satisfaction problems {{is a popular}} and successful alternative to backtracking. However, its success has largely been determined empirically, {{and there has been}} limited work towards a real understanding of why and when forward checking is the superior approach. This paper advances our understanding by showing that forward checking is closely related to <b>backmarking,</b> which is a widely used improvement of ordinary backtracking. This result is somewhat surprising, because(as their names suggest) forward checking is superficially quite different from backtracking and its variants. The result may also help in predicting when forward checking will be the best method. Finally, the paper shows how the relationship to <b>backmarking</b> helps understand a recently introduced improvement to the forward checking algorithm, known as minimal forward checking. We argue that the new algorithm is best viewed as a hybrid combination of <b>backmarking</b> and forward checking. ...|$|R
50|$|Only {{having a}} limited preparation, he contested the 1980 Western Australian Pacing Cup series and was beaten by new rival Satinover {{in the first}} round of heats. It was a 17th {{consecutive}} win for Satinover, but after he was injured Pure Steel won the WA Cup final for a record fourth time becoming the leading stakeswinner in Australian racing passing the thoroughbred Family Of Man and then won the Fremantle Cup from the 35m <b>backmark.</b> Heading east, Pure Steel won a record third Hunter Cup outstaying Koala King who’d had an easier run, and finished second behind New Zealander Locarno in the Miracle Mile. After three unsuccessful Interdominion campaigns, wins in all three rounds of heats indicated that 1980 at Harold Park might be his year. It was not to be, however, with a 15m handicap combined with rivals the quality of winner Koala King and runner-up Locarno too difficult to overcome.|$|E
40|$|There {{are three}} main {{approaches}} within the AI community to constraint satisfaction problems (CSP) and constraint optimisation problems (COP) : Domainfiltering, Tree-search, and Repair-based methods. The {{purpose of this}} paper is to present an algorithm, no-good <b>backmarking,</b> that unifies these techniques. It is repair-based and guarantees to find a solution (optimal) to a CSP (COP), if one exists. The no-good <b>backmarking</b> algorithm is a development of an approach called nogood justifications. The search space of the proposed algorithm is controlled by a <b>backmarking</b> strategy which records generic patterns of partial labels that are found to be inconsistent. Variables that contribute to inconsistencies are re-labelled in the spirit of dependency directed backjumping. The proposed method accepts a re-labelling if it reduces the number of conflicts (or the cost) of the current label. Repair-based methods, of which this is an example, have been shown to be useful for large combinatorial optim [...] ...|$|R
40|$|The forward {{checking}} algorithm {{for solving}} constraint satisfaction problems {{is a popular}} and successful alternative to backtracking. However, its success has largely been determined empirically, {{and there has been}} limited work towards a real understanding of why and when forward checking is the superior approach. This paper advances our understanding by showing that forward checking is closely related to <b>backmarking,</b> which is a widely used improvement of ordinary backtracking. This result is somewhat surprising, because(as their names suggest) forward checking is superficially quite different from backtracking and its variants. The result may also help in predicting when forward checking will be the best method. Finally, the paper shows how the relationship to <b>backmarking</b> helps understand a recently introduced improvement to the forward checking algorithm, known as minimal forward checking. We argue that the new algorithm is best viewed as a hybrid combination of <b>backmarking</b> and for [...] ...|$|R
50|$|Contrary {{to other}} {{variants}} to backtracking, <b>backmarking</b> does not reduce the search space but only possibly {{reduce the number}} of constraints that are satisfied by a partial solution.|$|R
40|$|Abstract-Information {{extraction}} {{is important}} for crime analysis. Due to {{the popularity of the}} Web, information related to crime and terrorism is available in multiple languages. As a result, cross-lingual semantic interoperability is essential when we extract information across multiple languages. In our previous work, we have developed several techniques to generate an automatic cross-lingual thesaurus to support cross-lingual information retrieval based on a parallel corpus collected from the Web. The techniques include Hopfield network and associate constraint network with <b>backmarking.</b> Although these techniques obtain satisfactory performance, they have weaknesses in efficiency, consistency, precision or recall. In this work, we develop a new searching technique, namely forward evaluation, on the basis of our previously developed associate constraint network model. We have conducted an experiment and show that the proposed forward evaluation technique outperforms both Hopfield network and associate constraint network with <b>backmarking</b> in terms of precision and recall. In addition, its efficiency is better than Hopfield network but is not as good as associate constraint network with <b>backmarking.</b> I...|$|R
50|$|In Friday {{practice}} 1, Williams, Ferrari and McLaren performed well, Nico Rosberg, Lewis Hamilton and Jarno Trulli posting the top 3 times. Brawn, Toyota, Red Bull and Renault ran mid field {{during the}} session with BMW and STR <b>backmarking.</b>|$|R
50|$|In Friday {{practice}} 2, Williams, Renault and Red Bull {{were the}} most consistent performers, Heikki Kovalainen, Fernando Alonso and Robert Kubica posted the top 3 times. Ferrari, Brawn and Toyota ran mid field during the session with Force India and STR <b>backmarking.</b>|$|R
5000|$|<b>Backmarking</b> {{works like}} {{backtracking}} by iteratively evaluating variables {{in a given}} order, for example, [...] It improves over backtracking by maintaining information about {{the last time a}} variable [...] was instantiated to a value and information about what changed since then. In particular: ...|$|R
40|$|Over {{the past}} twenty five years many {{backtracking}} algorithms {{have been developed for}} constraint satisfaction problems. This survey describes the basic backtrack search within the search space framework and then presents a number of improvements developed in the past two decades, including look-back methods such as backjumping, constraint recording, <b>backmarking,</b> and look-ahead methods such as forward checking and dynamic variable ordering...|$|R
40|$|In recent years, {{numerous}} new backtracking algorithms {{have been}} proposed. The algorithms are usually evaluated by empirical testing. This method, however, has its limitations. Our thesis adopts a di erent, purely theoretical approach, {{which is based}} on characterizations of the sets of search tree nodes visited by the backtracking algorithms. A new notion of inconsistency between instantiations and variables is introduced, a useful tool for describing such well-known concepts as backtrack, backjump, and domain annihilation. The characterizations enable us to: (a) prove the correctness of the algorithms, and (b) partially order the algorithms according to two standard performance measures: the number of visited nodes, and the number of performed consistency checks. Among other results, we prove, for the rst time, the correctness of Backjumping and Con ict-Directed Backjumping, and show that Forward Checking never visits more nodes than Backjumping. Our approach leads us also to propose a modi cation to two hybrid backtracking algorithms, <b>Backmarking</b> with Backjumping (BMJ) and <b>Backmarking</b> with Con ict-Directed Backjumpin...|$|R
40|$|AbstractIn recent years, {{many new}} {{backtracking}} algorithms for solving constraint satisfaction {{problems have been}} proposed. The algorithms are usually evaluated by empirical testing. This method, however, has its limitations. Our paper adopts a different, purely theoretical approach, {{which is based on}} characterizations of the sets of search tree nodes visited by the backtracking algorithms. A notion of inconsistency between instantiations and variables is introduced, and is shown to be a useful tool for characterizing such well-known concepts as backtrack, backjump, and domain annihilation. The characterizations enable us to: (a) prove the correctness of the algorithms, and (b) partially order the algorithms according to two standard performance measures: the number of nodes visited, and the number of consistency checks performed. Among other results, we prove the correctness of Backjumping and Conflict-Directed Backjumping, and show that Forward Checking never visits more nodes than Backjumping. Our approach leads us also to propose a modification to two hybrid backtracking algorithms, <b>Backmarking</b> with Backjumping (BMJ) and <b>Backmarking</b> with Conflict-Directed Backjumping (BM-CBJ), so that they always perform fewer consistency checks than the original algorithms...|$|R
5000|$|The data {{collected}} {{this way is}} used to avoid some consistency checks. In particular, whenever backtracking would set , <b>backmarking</b> compares the two indexes relative to [...] and the pair [...] Two conditions allow to determine partial consistency or inconsistency without checking with the constraints. If [...] is the minimal index of a variable that changed {{since the last time}} [...] was evaluated and [...] is the minimal index such that the evaluation of [...] was consistent the last time [...] has been evaluated to , then: ...|$|R
50|$|Montoya went {{onto the}} grass briefly at Turn Eight as he {{prepared}} to make his second call to pitlane; this, plus another off-track excursion while tangling with a <b>backmarking</b> rookie, cost him valuable time. When he later lost part of his rear deflector, Montoya eased up to finish the race and to preserve his Mercedes-Benz power plant for the next race. Teammate Räikkönen also lost a significant portion of his deflector, which became imbedded under his side barge board; mechanics were later seen removing it during a pit stop.|$|R
40|$|Empirical {{evidence}} indicates that the most successful backtracking algorithms for solving constraint satisfaction problems do some level of forward constraint propagation. That is they check constraints against the as yet uninstantiated variables in the search tree. Two popular examples are the forward checking and maintaining arc-consistency algorithms. Although {{there is a growing}} body of empirical evidence supporting the superiority of these algorithms, relatively {{little is known about the}} theoretical relationship between these forward looking algorithms and backtracking algorithms that do not employ any constraint propagation, like generic backtracking and <b>backmarking.</b> In this paper we demonstrate that there is in fact a strong relationship between these different types of algorithms. ...|$|R
40|$|The forward {{checking}} routine (FC) of Haralick and Elliott attempts to encourage early failures within the search tree of constraint satisfaction problems, {{leading to a}} reduction in nodes visited, which tends to result in reduced search effort. In contrast, Gaschnig's <b>backmarking</b> routine (BM) attempts to avoid performing redundant consistency checks. These two algorithms are combined to give us FC-BM, an algorithm that attempts to minimise the number of nodes visited, while avoiding redundant consistency checks. This algorithm is further enhanced such that it incorporates conflict-directed backjumping (CBJ) to give us FC-BM-CBJ. A series of experiments are then carried out on really hard problems in an attempt to position these new algorithms with respect to the known algorithms...|$|R
40|$|Yet, {{two classes}} of {{algorithms}} {{have been used in}} partial constraint satisfaction: local search methods and branch&bound search extended by the classical constraint-processing techniques like e. g. forward checking and <b>backmarking.</b> Both classes exhibit characteristic advantages and drawbacks. This article presents a novel approach for solving partial constraint satisfaction problems exhaustively that combines advantages of local search and extended branch&bound algorithms. This method relies on repair based search and a generic method for an exhaustive enumeration of repair steps. 1 Introduction Algorithms for solving constraint satisfaction problems (CSP) have been successfully applied to several fields including scheduling, design, and planning. Extending the standard CSP by a representation of constraint importance led to the class of partial constraint satisfaction problems (PCSP) [2] which provides new opportunities for solving several problems of combinatorial optimization more [...] ...|$|R
40|$|Algorithms {{for solving}} {{constraint}} satisfaction problems (CSP) {{have been successfully}} applied to several fields including scheduling, design, and planning. Latest extensions of the standard CSP to constraint optimization problems (COP) additionally provided new opportunities for solving several problems of combinatorial optimization more efficiently. Basically, two classes of algorithms {{have been used for}} searching constraint satisfaction problems (CSP) : local search methods and systematic tree search extended by the classical constraint-processing techniques like e. g. forward checking and <b>backmarking.</b> Both classes exhibit characteristic advantages and drawbacks. This report presents a novel approach for solving constraint optimization problems that combines the advantages of local search and tree search algorithms which have been extended by constraint-processing techniques. This method proved applicability in a commercial nurse scheduling system as well as on randomly generated problems...|$|R
40|$|We {{investigate}} the dynamic variable ordering (DVO) technique {{commonly used in}} conjunction with tree-search algorithms for solving constraint satisfaction problems. We first provide an implementation methodology for adding DVO to an arbitrary tree-search algorithm. Our methodology is applicable {{to a wide range of}} algorithms including those that maintain complicated information about the search history, like <b>backmarking.</b> We then {{investigate the}} popular reordering heuristic of next instantiating the variable with the minimum remaining values (MRV). We prove some interesting theorems about the MRV heuristic which demonstrate that if one wants to use the MRV heuristic one may as well use it with forward checking. Finally, we investigate the empirical performance of 12 different algorithms with and without DVO. Our experiments and theoretical results demonstrate that forward checking equipped with dynamic variable ordering is a very good algorithm for solving CSPs. 1 Introduction Despite [...] ...|$|R
40|$|Over {{the past}} twenty five years many {{backtracking}} algorithms {{have been developed for}} constraint satisfaction problems. This survey describes the basic backtrack search within the search space framework and then presents a number of improvements developed in the past two decades, including look-back methods such as backjumping, constraint recording, <b>backmarking,</b> and look-ahead methods such as forward checking and dynamic variable ordering. 1 Introduction Constraint networks have proven successful in modeling mundane cognitive tasks such as vision, language comprehension, default reasoning, and abduction, as well as specialized reasoning tasks including diagnosis, design, and temporal and spatial reasoning. The constraint paradigm is a generalization of propositional logic, in that variables may be assigned values from a set with any number of elements, instead of only true and false. Flexibility in the number of values can improve the ease and naturalness with which interesting problem [...] ...|$|R
40|$|Abstract. We {{investigate}} the dynamic variable ordering (DVO) technique {{commonly used in}} conjunction with tree-search algorithms for solving constraint satisfaction problems. We first provide an implementation methodology for adding DVO to an arbitrary tree-search algorithm. Our methodology is applicable {{to a wide range of}} algorithms including those that maintain complicated information about the search history, like <b>backmarking.</b> We then {{investigate the}} popular reordering heuristic of next instantiating the variable with the minimum remaining values (MRV). We prove some interesting theorems about the MRV heuristic which demonstrate that if one wants to use the MRV heuristic one may as well use it with forward checking. Finally, we investigate the empirical performance of 12 different algorithms with and without DVO. Our experiments and theoretical results demonstrate that forward checking equipped with dynamic variable ordering is a very good algorithm for solving CSPs. ...|$|R
40|$|There are {{generally}} three approaches to constraint satisfaction and optimization: domain-filtering, tree-search labelling and solution repair. The main attractions of repair-based algorithms over domainfiltering and/or tree-search algorithms {{seem to be}} their scalability, reactivity and applicability to optimization problems. The main detraction of the repair-based algorithms appear to be their failure to guarantee optimality. In this paper, a repair-based algorithm, that guarantees to find an optimal solution if one exists, is presented. The search space of the algorithm is controlled by no-good <b>backmarking,</b> a learning process of polynomial complexity that records generic patterns of no-good partial labels 3. These no-goods serve to avoid the repeated traversing of those failed paths of a search graph and to force the search process {{to jump out of}} a local optimum. Unlike some similar repair-based methods which usually work on complete (but possibly inconsistent) labels, the propose [...] ...|$|R
40|$|Over {{the past}} twenty years, a number of {{backtracking}} algorithms for constraint satisfaction problems, have been developed. This survey describes the basic backtrack search within the search space framework and then presents a number of improvements including look-back methods such as backjumping, constraint recording, <b>backmarking,</b> and look-ahead methods such as, forward checking, and dynamic variable ordering. 1 Introduction The standard procedure for solving constraint satisfaction problems is backtracking search. The backtracking algorithm typically considers the variables in some specified order. Starting with the first variable, the algorithm assigns a provisional value to each variable in turn as long as each assigned value {{is found to be}} consistent with values assigned in the past. When the algorithm encounters a variable for which none of the domain values is consistent with previous assignments (a situation referred to as a dead-end), backtracking takes place. That is, the val [...] ...|$|R
40|$|Recently Dent and Mercer have {{introduced}} an algorithm called minimal forward checking (MFC) which always performs {{no worse than}} forward checking (FC) in terms of number of compatibility checks and node expanded given the same variable and value orderings. In this paper we describe an algorithm which extends MFC with <b>backmarking</b> and conflict-directed backtracking. The new algorithm has a smaller space complexity than MFC. Experiments were conducted to compare it with MFC and some regular FC based algorithms. The {{results show that the}} new algorithm always performs at least as good as its "non-lazy" counterpart. It outperforms MFC on average and its edge over MFC is particularly clear for problems near to phase transitions. Interestingly, the minimum width variable ordering heuristic appears to be a better choice than the fail-first heuristic for the new algorithm in many occasions, particularly for sparsely constrained problems. 1. Introduction A constraint satisfact [...] ...|$|R
40|$|The {{idea behind}} forward {{checking}} is to check forward {{so that a}} wrong decision can be detected in early stage during search and thus futile search space can be pruned. However constraint propagation in forward checking may be overdone in certain situations. In this paper we suggest a way to delay constraint evaluation in forward checking with <b>backmarking.</b> Conflict-directed backtracking can also be easily fitted in. Despite the new algorithms {{can be considered as}} extensions of Dent and Mercer's minimal forward checking, they employ simpler data structures which have a smaller space complexity. Experiments were conducted to compare them with minimal forward checking and other regular forward checking based algorithms. Like minimal forward checking, our new algorithms always perform no worse than forward checking and their "non-lazy" counterparts in terms of number of compatibility checks and node expanded given the same variable and value orderings. They also outperform minimal forward ch [...] ...|$|R
5000|$|Backtracking is a {{recursive}} algorithm. It {{maintains a}} partial assignment of the variables. Initially, all variables are unassigned. At each step, a variable is chosen, and all {{possible values are}} assigned to it in turn. For each value, {{the consistency of the}} partial assignment with the constraints is checked; in case of consistency, a recursive call is performed. When all values have been tried, the algorithm backtracks. In this basic backtracking algorithm, consistency is defined as the satisfaction of all constraints whose variables are all assigned. Several variants of backtracking exist. <b>Backmarking</b> improves the efficiency of checking consistency. Backjumping allows saving part of the search by backtracking [...] "more than one variable" [...] in some cases. Constraint learning infers and saves new constraints that can be later used to avoid part of the search. Look-ahead is also often used in backtracking to attempt to foresee the effects of choosing a variable or a value, thus sometimes determining in advance when a subproblem is satisfiable or unsatisfiable.|$|R
40|$|Virtual {{cellular}} manufacturing systems (VCMSs) {{have drawn}} significant attention {{in recent years}} because traditional cellular manufacturing systems (CMSs) are inadequate in a highly dynamic manufacturing environment. In this paper, a new mathematical model is presented to formulate the production schedules of virtual cellular manufacturing systems in a multi-period planning horizon, where the product mix and demand are different but deterministic in each period. The model takes backlog of jobs into consideration and aims to minimize the total manufacturing cost over the entire planning horizon. A constraint programming (CP) approach is developed to solve this difficult scheduling problem effectively by depicting it as an associate constraint network where nodes and arcs represent {{the operations of the}} jobs and their associations respectively. An innovative <b>backmarking</b> propagation technique is proposed to search for a set of feasible production sequences. Some effective heuristics are also developed to facilitate the formation of complete schedule solutions. Results of extensive experiments on a set of randomly generated test problems show that the constraint programming approach outperforms the genetic algorithm in terms of both solution quality and computational time. © 2010 IEEE. link_to_subscribed_fulltex...|$|R
500|$|Forti's {{withdrawal}} marked {{not only}} {{the end of its}} participation in Formula One, but also terminated a team which had enjoyed success in International Formula 3000 and other minor categories. It is generally agreed that Forti may have succeeded if it had its 1995 budget and the FG03 car at the same time, and that Diniz's departure meant that it stood little chance of survival, but the team has become another example of a small, <b>backmarking</b> team unable to finance its aspirations; one of the final [...] "privateer" [...] teams to enter the sport in an era of increasing influence and participation from the large car manufacturers. Forti is often cited along with Pacific and Simtek as prime examples of this tendency. It was also argued that the increasing amount of money involved in financing an F1 team which was forcing many of the smaller teams to withdraw in the early to mid-1990s was a long-term threat {{to the future of the}} sport. Alternatively, some saw Forti and similar tail-enders as undeserving of a place in F1, and it has been suggested that the imposition of the 107% rule by the FIA in 1996 was a move to force them to raise their game or leave the sport altogether.|$|R

