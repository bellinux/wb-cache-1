3|7|Public
50|$|Once a {{computer}} becomes infected by the trojan horse, the computer becomes {{known as a}} zombie, which will then be at the command of the controller of the botnet, {{commonly referred to as}} the <b>botnet</b> <b>herder.</b> The operation of the Srizbi botnet is based upon a number of servers which control the utilization of the individual bots in the botnet. These servers are redundant copies of each other, which protects the botnet from being crippled in case a system failure or legal action takes a server down.|$|E
50|$|On 25 October 2010, {{a team of}} Dutch law {{enforcement}} agents seized control of 143 servers which contained three command & control servers, one database server and several management servers from the Bredolab botnet in a datacenter from LeaseWeb, effectively removing the botnet herder's ability to control the botnet centrally. In an attempt to regain control over his botnet, the <b>botnet</b> <b>herder</b> utilized 220,000 computers which were still under his control, to unleash a DDoS attack on LeaseWeb servers, though these attempts were ultimately in vain. After taking control over the botnet, the {{law enforcement}} team utilized the botnet itself {{to send a message}} to owners of infected computers, stating that their computer was part of the botnet.|$|E
40|$|We {{would like}} to express a word of {{gratitude}} for the opportunity, the University of Amsterdam and SURFnet gave us, to conduct our research project. We want to thank our supervisors Ir. R. Spoor and Dr. W. Biemolt for their time and effort guiding us through the project. They were always willing to help us and gave us the possibility to use SURFnet’s infrastructure. Without their aid, we couldn’t have completed our research. Also a word of thanks to the following persons for supplying us with files, information and advice: Nicolas Albright (Disog. org), Dr. Chato H. Flores and Dr. Jose Nazario (Arbor Networks). We gave SURFnet and the University of Amsterdam a deeper insight in the detection of Peacomm and decentralized peer-to-peer botnets in general. SURFnet can use this knowledge to successfully identify the threat of P 2 P botnets, {{now and in the}} future. We gave our vision on the future and the technological possibilities these botnets have. These botnets are growing each day, and it is very scary what a <b>botnet</b> <b>herder</b> could do with all the bandwidth. As their possibilities seem endless, we don’t think that the Internet society is ready yet to face these malicious acts but we are definitely going in the right direction. All in all, it was a very educational experience and we have learned a lot {{in a very short time}} span...|$|E
50|$|While {{the seizure}} of the command and control servers {{severely}} disrupted the botnet's ability to operate, the botnet itself is still partially intact, with command and control servers persisting in Russia and Kazakhstan. Security firm FireEye believes that a secondary group of <b>botnet</b> <b>herders</b> {{has taken over the}} remaining part of the botnet for their own purposes, possibly a previous client who reverse engineered parts of the original botnet creator's code. Even so, the group noted that the botnet's size and capacity has been severely reduced by the law enforcement intervention.|$|R
40|$|Published online: 29 November 2014 During 2013 the Tor network had {{a massive}} spike in new users as a botnet started using Tor hidden {{services}} to hide its C&C (Command and Control) servers. This resulted in network congestion and reduced performance for all users. Tor hidden services are attractive to <b>botnet</b> <b>herders</b> {{because they provide}} anonymity for both the C&C servers and the bots. The aim {{of this paper is}} to present a superior way that Tor hidden services can be used for botnet C&C which minimises harm to the Tor network while retaining all security benefits. Lachlan Kan...|$|R
50|$|In {{response}} to efforts {{to detect and}} decapitate IRC <b>botnets,</b> bot <b>herders</b> have begun deploying malware on peer-to-peer networks. These bots may use digital signatures so that only someone {{with access to the}} private key can control the botnet. See e.g. Gameover ZeuS and ZeroAccess botnet.|$|R
40|$|International audienceModern {{workstations}} and servers implicitly trust hard disks {{to act as}} well-behaved block devices. This paper {{analyzes the}} catastrophic loss of security that occurs when hard disks are not trustworthy. First, we show {{that it is possible}} to compromise the firmware of a commercial off-the-shelf hard drive, by resorting only to public information and reverse engineering. Using such a compromised firmware, we present a stealth rootkit that replaces arbitrary blocks from the disk while they are written, providing a data replacement back-door. The measured performance overhead of the compromised disk drive is less than 1 % compared with a normal, non-malicious disk drive. We then demonstrate that a remote attacker can even establish a communication channel with a compromised disk to infiltrate commands and to exfiltrate data. In our example, this channel is established over the Internet to an unmodified web server that relies on the compromised drive for its storage, passing through the original webserver, database server, database storage engine, filesystem driver, and block device driver. Additional experiments, performed in an emulated disk-drive environment, could automatically extract sensitive data such as /etc/shadow (or a secret key file) in less than a minute. This paper claims that the difficulty of implementing such an at- tack is not limited to the area of government cyber-warfare; rather, it is well within the reach of moderately funded criminals, <b>botnet</b> <b>herders</b> and academic researchers...|$|R
40|$|While botnets {{themselves}} {{provide a}} rich platform for financial gain for the botnet master, {{the use of}} the infected hosts as webservers can provide an additional <b>botnet</b> use. <b>Botnet</b> <b>herders</b> often use fast-flux DNS techniques to host unwanted or illegal content within a botnet. These techniques change the mapping of the domain name to different bots within the botnet with constant shifting, while the bots simply relay content back to a central server. This can give the attackers additional stepping stones to thwart takedown and can obscure their true origins. Evidence suggests that more attackers are adopting fastflux techniques, but very little data has been gathered to discover what these botnets are being used for. To address this gap in understanding, we have been mining live traffic to discover new fast-flux domains and then tracking those botnets with active measurements for several months. We have identified over 900 fast-flux domain names from early to mid 2008 and monitored their use across the Internet to discern fast-flux botnet behaviors. We found that the active lifetimes of fast-flux botnets vary from less than one day to months, domains that are used in fast-flux operations are often registered but dormant for months prior to activation, that these botnets are associated with a broad range of online fraud and crime including pharmacy sites, phishing and malware distribution, and that we can identify distinct botnets across multiple domain names. We support our findings through an in-depth examination of an Internet-scale data continuously collected for hundreds of domain names over several months. ...|$|R
40|$|A botnet {{is a large}} {{network of}} bots that are {{under the control of}} a bot <b>herder.</b> <b>Botnets</b> have become a {{significant}} threat to network communications and applications. Botnets' execution relies on Command and Control (C 2) communication channels traffic, which occur prior to the attack activity itself. Therefore, the detection of C 2 communication channels traffic enables the detection of the members of a botnet before any target is attacked. We study the periodic behavior of C 2 traffic that is caused by the pre-programmed behavior of bots to check for and download updates every T seconds. We use this periodic behavior of the C 2 traffic to detect bots. This involves evaluating the periodogram of traffic in the monitored network. Then applying Walker's large sample test to the maximum ordinate of the periodogram to determine if it is due to a high periodic component in the traffic or not, and, if it is, then it is bot traffic. We apply the test to a TinyP 2 P botnet generated by SLINGbot and show a strong periodic behavior in the bots traffic. We study the effect of the period's length and duty cycle of the C 2 traffic on the test performance and find that it increases with the increase of the duty cycle and/or the decrease of the period length. We analyze the test's performance in the presence of injected random noise traffic and develop a lower and an upper bounds for the test performance. ...|$|R

