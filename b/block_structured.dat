197|2647|Public
2500|$|Scheme {{inherits}} its {{block structure}} from earlier <b>block</b> <b>structured</b> languages, particularly ALGOL. [...] In Scheme, blocks are implemented by three binding constructs: let, let* and letrec. [...] For instance, the following construct creates a block {{in which a}} symbol called var is bound to the number 10: ...|$|E
50|$|Optimized {{approaches}} {{exist for}} calculating the pseudoinverse of <b>block</b> <b>structured</b> matrices.|$|E
50|$|TACPOL (Tactical Procedure Oriented Language) is a <b>block</b> <b>structured</b> {{programming}} language {{developed by the}} United States Army for the TACFIRE Tactical Fire Direction command and control application. TACPOL is similar to PL/I.|$|E
40|$|Many sparse {{matrices}} have {{a natural}} <b>block</b> <b>structure,</b> for instance arising from the discretisation of a physical domain. We give an algorithm for finding this <b>block</b> <b>structure</b> from the matrix sparsity pattern. This algorithm {{can be used for}} instance in iterative solver libraries in cases where the user does not or can not pass this <b>block</b> <b>structure</b> information to the software. The <b>block</b> <b>structure</b> can then be used as a basis for domain-decomposition based preconditioners. ...|$|R
40|$|The <b>block</b> <b>structure</b> of the Laurent-Padé {{table is}} {{investigated}} {{in a formal}} algebraic setting. It contains rectangular blocks, being the intersection of two classical Padé square <b>block</b> <b>structures.</b> In the same proceedings a paper by L. N. Trefethen: Square blocks and equioscillation in the Padé, Walsh and CF tables, treats <b>block</b> <b>structures</b> for tables of other rational approximants. status: publishe...|$|R
40|$|AbstractThe <b>block</b> <b>structure</b> of {{a matrix}} and its {{relation}} to the <b>block</b> <b>structure</b> of the corresponding eigenvectors is investigated. A set of points is said to have multispherical structure if they lie on a collection of concentric spheres. When the centroid of each of the clusters lies at the common center, the associated distance matrix has a <b>block</b> <b>structure</b> with simple relations between the blocks. Further, such <b>block</b> <b>structure</b> may be recognized from the structure of the eigenvectors of the distance matrix. A computational procedure is proposed to find the least number of concentric spheres containing the points represented by a distance matrix...|$|R
50|$|AC-3 is a <b>block</b> <b>structured</b> encoder, so {{that one}} or more blocks of samples of the signal in time are stored in the buffer for each channel input before {{proceeding}} with the prosecution. The blocks are usually composed of 512 samples.|$|E
50|$|SPIRES {{was rewritten}} in PL360, a <b>block</b> <b>structured</b> {{programming}} language designed explicitly for IBM/360-compatible hardware. The primary authors were: Thomas H. Martin, Dick Guertin and Bill Kiefer. John Schroeder was {{the manager of}} the SPIRES project during this early phase of development.|$|E
5000|$|Scheme {{inherits}} its {{block structure}} from earlier <b>block</b> <b>structured</b> languages, particularly ALGOL. In Scheme, blocks are implemented by three binding constructs: , [...] and [...] For instance, the following construct creates a block {{in which a}} symbol called [...] is bound to the number 10: ...|$|E
50|$|Mirage was {{the first}} {{official}} <b>block</b> <b>structure</b> in Magic: The Gathering. This new <b>block</b> <b>structure</b> consisted of three expansion sets and would continue for nearly two decades, finally ending with Khans of Tarkir in 2014. The new <b>block</b> <b>structure</b> also set up the precedent that the first set in the block also became the name for the entire block. Mirage block consisted of three sets: Mirage, Visions and Weatherlight.|$|R
40|$|This {{paper is}} a study of {{high-throughput}} filter <b>structures</b> such as <b>block</b> <b>structures</b> and their behavior in finite precision environments. <b>Block</b> <b>structures</b> achieve high throughput rates by using {{a large number of}} processors working in parallel. It has been believed that <b>block</b> <b>structures</b> which are relatively robust to round-off noise must also be robust to coefficient quantization errors. However, our research has shown that <b>block</b> <b>structures,</b> in fact, have high coefficient sensitivity. A potential problem that arises as a result of coefficient quantization is a periodically time-varying behavior exhibited by the realized filter. We will demonstrate how finite wordlength errors can change a nominally time-invariant filter into a time-varying system. We will identify the <b>block</b> <b>structures</b> that have low coefficient sensitivity, and develop high-speed structures that are immune to the time-varying problems caused by coefficient quantization...|$|R
50|$|Blocks can be nested {{to create}} {{arbitrarily}} complex <b>block</b> <b>structures</b> {{according to the}} need of the programmer. The use of <b>block</b> <b>structuring</b> to create local bindings alleviates the risk of namespace collision that can otherwise occur.|$|R
5000|$|Lambda {{lifting and}} closure are both methods for {{implementing}} <b>block</b> <b>structured</b> programs. It implements block structure by eliminating it. All functions are lifted {{to the global}} level. Closure conversion provides a [...] "closure" [...] which links the current frame to other frames. Closure conversion takes less compile time.|$|E
50|$|The Let expression, {{is useful}} in {{describing}} lifting and dropping, and in describing the relationship between recursive equations and lambda expressions. Most functional languages have let expressions. Also <b>block</b> <b>structured</b> programming languages like ALGOL and Pascal are similar in that they to allow the local definition of a function, {{for use in a}} restricted scope.|$|E
50|$|Code_Saturne is a {{general-purpose}} computational {{fluid dynamics}} free computer software package. Developed since 1997 at Électricité de France R&D, Code_Saturne is distributed under the GNU GPL licence.It {{is based on a}} co-located finite-volume approach that accepts meshes with any type of cell (tetrahedral, hexahedral, prismatic, pyramidal, polyhedral...) and any type of grid structure (unstructured, <b>block</b> <b>structured,</b> hybrid, conforming or with hanging nodes...).|$|E
40|$|Abstract: The {{question}} as to the correct block exit strategy, retention or deletion, is resolved by formally comparing the contour model and the stack model, each of which implements one of the strategies, to the copy rule, a formal definition of <b>block</b> <b>structuring.</b> <b>Block</b> <b>structure</b> was introduced with the programming language Algol 60 [Nau 60, 63] primarily to provide the ability to define local variables. Since then the notion of <b>block</b> <b>structure</b> has bee...|$|R
40|$|Thesis (Master) [...] İzmir Institute of Technology, City and Regional Planning, İzmir, 2004 Includes bibliographical {{references}} (leaves: 153 - 157) Text in English; Abstract: Turkish and Englishxiii, 157 leavesThis thesis aims {{to introduce}} the fundamental role of the <b>block</b> <b>structure</b> in formation of the urban fabric, and with the aim to develop an alternative method for optimum conditions of the <b>block</b> <b>structure,</b> unlike the formation methods of the 'Development Regulation'. <b>Block</b> <b>structure</b> refers to arrangement of the plots, buildings and spaces within the building blocks. So, this thesis revealed {{the importance of the}} appropriate formation of the <b>block</b> <b>structure</b> to form the urban space creating the urban vitality in central part of the city. In order to achieve these aims, urban fabric, urban space, <b>block</b> <b>structure,</b> and streets are defined with their components to understand the scope of the study. After that, the existing conditions of the urban planning techniques are mentioned to expose the formation methods of the current applications. Then, the design criteria, which are selected in the literature survey, are introduced to welladjusted design conditions of the <b>block</b> <b>structure</b> arrangement. Within this framework, the design methods are designated to analyze and design the optimum formation conditions of the <b>block</b> <b>structure.</b> Finally, these design methods, which are defined as 'Comparative Study', 'Typo-Morphological Approach', 'Figure-Ground Theory', 'Density Distribution Model', 'Natural Lighting Assessment Method', 'Urban Design Guidelines' and 'Urban Coding', are used to suggest a conceptual model for an alternative size and form of the <b>block</b> <b>structure,</b> in contrast the existing conditions of the case study area with the aim to evaluate the determination process of the optimum conditions. Key Words: Urban Fabric, Urban Form, <b>Block</b> <b>Structure,</b> Plot Pattern, Building Structure, Network, Building Density, Design Criteria, Urban Morphology, Urban Design Guidelines, Comparative Study...|$|R
40|$|The Noto Peninsula is {{characterized}} geologically by tilted <b>blocks</b> and active <b>structures</b> associated with <b>block</b> movements. We investigate {{the activity of}} microearthquakes to discuss {{the relationships between the}} distribution of hypocenters, together with the 2007 Noto Hanto earthquake, and geological structures such as tilted <b>blocks</b> and active <b>structures</b> in the Noto Peninsula. We use the hypocentral catalogue for 1986 － 2004 of the Kamitakara Observatory, Disaster Prevention Re-search Institute, Kyoto University. In the southern Noto Peninsula, we can recognize relatively high seismicity areas corresponding to the <b>block</b> <b>structures.</b> We find that the <b>block</b> <b>structures</b> seem to control seismicity, and a tilted <b>block</b> <b>structure</b> is related closely to the source fault of the 2007 Noto Hanto earthquake. These suggest that a <b>block</b> <b>structure</b> may be a basic unit of the generation for a large earthquake in the Noto Peninsula...|$|R
50|$|The {{language}} is <b>block</b> <b>structured,</b> with each block being introduced by a language keyword that is descriptive {{of the operation}} being performed in the block e.g. for, while, repeat (iteration), case, if (selection). Each block is enclosed by { and } delimiters. Additionally language lines within a block are normally indented for clarity, though this not required as white space is ignored.|$|E
50|$|SuperPascal is a <b>block</b> <b>structured</b> language, {{with the}} same basic syntax as Pascal. A program {{consists}} of a header, global variable definitions, function or procedure definitions and a main procedure. Functions and procedures consists of blocks, where a block {{is a set of}} statements. Statements are separated by semicolons, as opposed to languages like C or Java, where they are terminated by semicolons.|$|E
50|$|Recursive functions, and <b>block</b> <b>structured</b> programs, with {{or without}} lifting, may be {{implemented}} using a stack based implementation, which is simple and efficient. However a stack frame based implementation must be strict (eager). The stack frame based implementation requires that the life of functions be last-in, first-out (LIFO). That is, the most recent function to start its calculation must {{be the first to}} end.|$|E
40|$|We {{extend the}} {{classical}} notion of <b>block</b> <b>structure</b> for periodic orbits of interval maps to {{the setting of}} tree maps and study the algebraic properties of the Markov matrix of a periodic tree pattern having a <b>block</b> <b>structure.</b> We also prove a formula which relates the topological entropy of a pattern having a <b>block</b> <b>structure</b> {{with that of the}} underlying periodic pattern obtained by collapsing each block to a point, and characterize the structure of the zero entropy patterns in terms of <b>block</b> <b>structures.</b> Finally, we prove that an n-periodic pattern has zero (positive) entropy if and only if all n-periodic patterns obtained by considering the k-th iterate of the map on the invariant set have zero (respectively, positive) entropy, for each k relatively prime to n...|$|R
40|$|International audienceIn the {{analysis}} of hyperbolic boundary value problems, the construction of Kreiss' symmetrizers relies on a suitable <b>block</b> <b>structure</b> decomposition of {{the symbol of the}} system. In this paper, we show that this <b>block</b> <b>structure</b> condition is satisfied by all symmetrizable hyperbolic systems of constant multiplicit...|$|R
30|$|Shifted single JPEG {{compressed}} (SSJPEG in short): Different from SDJPEG patches, {{when the}} image patches before the shifted JPEG compression (with the <b>block</b> <b>structure</b> in dashed line) {{have never been}} compressed with the <b>block</b> <b>structure</b> starting from the top-left corner, the output image patches are called SSJPEG patches.|$|R
5000|$|SQL PL is a {{computationally}} complete {{programming language}} {{for use in}} RDM SQL stored routines (procedures or functions). The language is <b>block</b> <b>structured</b> {{with the ability to}} declare variables that conform to the usual scoping rules with an assignment statement so that value can be assigned to them. Control flow constructs provided include if-elseif-else and case statements along with several loop control constructs (including while, repeat-until, and for loop statement).|$|E
50|$|Structured text {{is one of}} {{the five}} {{languages}} supported by the IEC 61131-3 standard, designed for programmable logic controllers (PLCs). It is a high level language that is <b>block</b> <b>structured</b> and syntactically resembles Pascal, on which it is based. All of the languages share IEC61131 Common Elements. The variables and function calls are defined by the common elements so different languages within the IEC 61131-3 standard can be used in the same program.|$|E
50|$|Silo is a {{computer}} data format and library developed at Lawrence Livermore National Laboratory (LLNL) for storing rectilinear, curvilinear, unstructured, or point meshes in 2D and 3D. It supports data upon those meshes, including scalar, vector, and tensor variables; volume fraction-based materials; and mass fraction-based species. It fully supports <b>block</b> <b>structured</b> adaptive mesh refinement (AMR) meshes by way of mesh blocks structured in a hierarchy. Silo sits on top of other low-level storage libraries such as PDB, NetCDF, and HDF5.|$|E
40|$|AbstractIn {{this paper}} we define a {{particular}} Markov chain on some combinatorial <b>structures</b> called orthogonal <b>block</b> <b>structures.</b> These structures include, as a particular case, the poset <b>block</b> <b>structures,</b> {{which can be}} naturally regarded as the set on which the generalized wreath product of permutation groups acts as the group of automorphisms. In this case, we study the associated Gelfand pairs together with the spherical functions...|$|R
5000|$|The {{stochastic}} matrix describing the Markov chain has <b>block</b> <b>structure</b> ...|$|R
40|$|We {{examine the}} {{recovery}} of block sparse signals and extend the framework in two important directions; one by exploiting signals' intra-block correlation and the other by generalizing signals' <b>block</b> <b>structure.</b> We propose two families of algorithms based on the framework of block sparse Bayesian learning (BSBL). One family, directly derived from the BSBL framework, requires knowledge of the <b>block</b> <b>structure.</b> Another family, derived from an expanded BSBL framework, {{is based on a}} weaker assumption on the <b>block</b> <b>structure,</b> and can be used when the <b>block</b> <b>structure</b> is completely unknown. Using these algorithms we show that exploiting intra-block correlation is very helpful in improving recovery performance. These algorithms also shed light on how to modify existing algorithms or design new ones to exploit such correlation and improve performance. Comment: Matlab codes can be downloaded at: [URL] or [URL]...|$|R
5000|$|The modern {{compiling}} {{system for}} OS 2200 {{is known as}} UCS, Universal Compiling System. [...] The UCS architecture uses a common syntax analyzer, separate semantic front ends for each language and a common back-end and optimizer. There is also a common language runtime environment. The UCS system was developed starting in 1969 and initially included PL/I and Pascal. FORTRAN and COBOL were soon added. Ada was added later. The currently supported languages include COBOL, FORTRAN, C, and PLUS. [...] PLUS, Programming Language for Unisys (originally UNIVAC) Systems, is a <b>block</b> <b>structured</b> language somewhat similar to Pascal which it predates.|$|E
50|$|However, {{there are}} ways of quickly {{building}} a hexahedral mesh such as using a 2D quad mesh and projecting into the z-direction. Another method is building a <b>block</b> <b>structured</b> mesh by using a CAD based program to create logically connected splines. After the blocks are built the cell factors {{are added to the}} blocks and the mesh created. One significant advantage of using a block based hexahedral mesh is the mesh can be smoothed very quickly. For large complex geometric models the process of building a hexahedral mesh can take days, weeks and even months depending on the skill level and tool sets available to the analyst.|$|E
5000|$|These {{are also}} known as body fitted grids and works on the {{principle}} of mapping the flow domain onto computational domain with simple shape.The mapping is quite tedious if it involves Complex geometry. In order to model this type of geometry we divide the flow region into various smaller sub domains. All these regions are meshed separately and joined up correctly with the neighbors. This type of arrangement is known as <b>Block</b> <b>Structured</b> Grid. This type of system is flexible than the previous one. Two-dimensional structured mesh use quadrilaterals elements while three dimension meshes utilize hexahedra.There are two types of Body fitted Co-ordinate grids ...|$|E
2500|$|Since {{the time}} of Pāṇini, at least, {{linguists}} have described the grammars of languages {{in terms of their}} <b>block</b> <b>structure,</b> and described how sentences are recursively built up from smaller phrases, and eventually individual words or word elements. An essential property of these <b>block</b> <b>structures</b> is that logical units never overlap. For example, the sentence: ...|$|R
50|$|Benders {{decomposition}} (or Benders' decomposition) is {{a technique}} in mathematical programming that allows the solution of very large linear programming problems that have a special <b>block</b> <b>structure.</b> This <b>block</b> <b>structure</b> often occurs in applications such as stochastic programming as the uncertainty is usually represented with scenarios. The technique is named after Jacques F. Benders.|$|R
5000|$|Since {{the time}} of Pāṇini, at least, {{linguists}} have described the grammars of languages {{in terms of their}} <b>block</b> <b>structure,</b> and described how sentences are recursively built up from smaller phrases, and eventually individual words or word elements. An essential property of these <b>block</b> <b>structures</b> is that logical units never overlap. For example, the sentence: ...|$|R
