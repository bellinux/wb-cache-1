0|10000|Public
40|$|Stochastic {{analysis}} {{techniques for}} real-time systems model the execution time of tasks as random variables. These techniques constitute {{a very powerful}} tool to study the behaviour of real-time systems. However, as they can not avoid all the <b>timing</b> <b>bugs</b> <b>in</b> the implementation, they must be combined with measurement techniques {{in order to gain}} more confidence in the implemented system. In this pa-per, a set of tools to measure, analyze and visualize traces of real-time systems is presented. These tools are driven by stochastic models. In order to find <b>bugs</b> <b>in</b> the <b>timing</b> be-haviour of the system, two metrics, called “pessimism ” and “optimism”, are proposed. They are based on two random variables, the optimistic and the pessimistic execution time, which are also introduced in this paper. These metrics are used in the debugging tools to compare the model and the measured system in order to find errors. The metrics are examined in three case studies. ...|$|R
40|$|Abstract: In {{real-time}} systems, temporal behaviour is {{as important}} as functional behaviour, so several techniques have been especially developed for these systems. Stochastic analysis techniques model the execution time of tasks as random variables and constitute a very powerful tool to study the temporal behaviour of real-time systems. However, as they can not avoid all the <b>timing</b> <b>bugs</b> <b>in</b> the implementation, they must be combined with measurement techniques in order to gain more confidence in the implemented system. This paper presents a monitoring tool which can measure real-time systems developed using POSIX. The corresponding analysis and a visualization tool that makes it possible to find errors easily is also introduced. In order to find <b>bugs</b> <b>in</b> the <b>timing</b> behaviour of the system when an stochastic analysis technique is used, two metrics, called “pessimism ” and “optimism”, are proposed. They are based on two random variables, the optimistic and the pessimistic execution time, which are also introduced in this paper. These metrics are used in the debugging tools to compare the model and the measured system in order to find errors. The metrics are examined in four case studies...|$|R
40|$|This is a bugfix {{release that}} {{includes}} a workaround for an issue in matplotlib 1. 4. 2 and fixes for two <b>bugs</b> <b>in</b> functions that were new in 0. 5. 0. Implemented a workaround for a <b>bug</b> <b>in</b> matplotlib 1. 4. 2 that prevented point markers from being drawn when the seaborn styles had been set. See this github issue for more information. Fixed a <b>bug</b> <b>in</b> heatmap where the mask was vertically reversed relative to the data. Fixed a <b>bug</b> <b>in</b> clustermap when using nested lists of side colors...|$|R
40|$|New {{features}} and improvements Define stats_get_* function with global variable {{instead of asking}} user to edit the source code of stats_get. m. Add sample data for testing and exemplification purposes. Ignore sub-folders when providing wilcards to output_plot and stats_gather. Bug fixes Fix <b>bug</b> <b>in</b> stats_table_per_setup when only one statistical summary is specified. Fix <b>bug</b> <b>in</b> stats_compare, number of statistical summaries was set to six instead of depending on stats_gather objects. Fix <b>bug</b> <b>in</b> startup. m, add complete SimOutUtils paths instead of partial paths. Fix <b>bug</b> <b>in</b> pval_adjust, wrong results with Holm method. Other Add unit tests for most functions. Improved documentation...|$|R
50|$|Proponents of {{waterfall}} model argue that {{time spent in}} designing is a worthwhile investment, {{with the hope that}} less time and effort will be spent fixing a <b>bug</b> <b>in</b> the early stages of a software product's lifecycle than when that same bug is found and must be fixed later. That is, {{it is much easier to}} fix a requirements <b>bug</b> <b>in</b> the requirements phase than to fix that same <b>bug</b> <b>in</b> the implementation phase, as to fix a requirements <b>bug</b> <b>in</b> the implementation phase requires scrapping at least some of the implementation and design work which has already been completed.|$|R
5000|$|Vector Fabrics' Pareon Verify uses dynamic {{analysis}} to find <b>bugs</b> <b>in</b> C or C++ application code. It {{has been used}} to find <b>bugs</b> <b>in</b> various open source software projects like PicoTCP, VTK, Navit and YARP.|$|R
40|$|Bugfix For ROHF reference, CCSD {{function}} takes UCCSD method. Handle zero beta electrons <b>in</b> UCCSD. Fix <b>bug</b> <b>in</b> FCI solver when {{system has}} Dooh symmetry. Fix <b>bug</b> <b>in</b> KUHF gradients which affects newton SCF convergence. Fix <b>bug</b> <b>in</b> gradients of PM localization which affects convergence. Fix "hcore" initial guess for KHF. Fix <b>bug</b> <b>in</b> Mulliken pop analysis caused by wrong overlap matrix for PBC calculations. Improvements Handle ghost atom in HF initial guess. Remove special treatments on CIAH negative hessians which often cause convergence problem Memory usage in CISD Proper treatment of ECP/PP in Mulliken pop analysis Unless critical errors were found, {{this is the}} last release of 1. 3 branch...|$|R
50|$|Dindymus is Old World genus of true <b>bugs</b> <b>in</b> {{the family}} Pyrrhocoridae, the cotton stainers. They are often {{confused}} with <b>bugs</b> <b>in</b> the family Lygaeidae, {{but can be}} distinguished {{by the lack of}} ocelli on the head.|$|R
40|$|Fixed <b>bug</b> <b>in</b> {{parallel}} molecule setup {{which caused}} the same molecule to be setup multiple times. Fixed <b>bug</b> <b>in</b> Cerberus schema for LEaP where molecule parameters accumulated. Fixed <b>bug</b> where options <b>in</b> experiment section were not coerced. Fixed status command to print information about all combinatorial experiments. Faster restart with combinatorial experiments...|$|R
40|$|New {{features}} Additional URL stripping from variable values if tidy==TRUE. Added tabling_mp_id parameter to all_answered_questions() Bug Fixes Fixed <b>bug</b> <b>in</b> members() where {{looking up}} a single member returned a tibble with two rows. Fixed <b>bug</b> <b>in</b> mp_edms() where additional data {{was not being}} returned if full_data==TRUE. Fixed <b>bug</b> <b>in</b> election_results() where it did not return data if constit_details==TRUE. Fixed bugs where empty queries in election_results(), members() and possibly other functions were returning incorrect errors in some environments or circumstances...|$|R
25|$|<b>Bugs</b> <b>in</b> {{one part}} of the kernel have strong side effects; since every {{function}} in the kernel has all the privileges, a <b>bug</b> <b>in</b> one function can corrupt data structure of another, totally unrelated part of the kernel, or of any running program.|$|R
50|$|Roscius is an Afrotropical genus of true <b>bugs</b> <b>in</b> {{the family}} Pyrrhocoridae, the cotton stainers. They are often {{confused}} with <b>bugs</b> <b>in</b> the family Lygaeidae, {{such as the}} genus Oncopeltus, but can be distinguished {{by the lack of}} ocelli on the head.|$|R
50|$|Acanthosoma labiduroides, {{also known}} as the {{scissors}} turtle <b>bug</b> <b>in</b> English, and (ハサミツノカメムシ) (Hasamitsuno-kamemushi) in Japanese, is a typical <b>bug</b> species <b>in</b> the family Hemiptera.|$|R
40|$|This {{release is}} {{primarily}} focused on refactoring the code structure for greater manageability. All of the estimation code {{has been moved}} into a separate sub-module, with its own examples, documentation and tests, and throughout the folder structure has been improved. However, this release does add one significant new feature (by request), namely the ability to set the initial state from which a simulation run starts, using the InitialStateFile option. Furthermore, a reduced, updated, version of the OptiToolbox is now included with DynareOBC, reducing the amount DynareOBC downloads on its first run (though increasing {{the size of the}} release here). Additionally, this release fixes <b>bugs</b> <b>in</b> estimation, <b>bugs</b> <b>in</b> models without OBCs, <b>bugs</b> <b>in</b> the "bypass" command and <b>bugs</b> <b>in</b> the simulation of model local variables...|$|R
50|$|With {{the rise}} of high {{definition}} television, NBC, Fox, and ABC {{and a majority of}} cable networks present the <b>bugs</b> <b>in</b> a 16:9 format while CBS, along with the CW, most PBS stations and networks, Telemundo, Univision, and Unimás presents their <b>bugs</b> <b>in</b> a 4:3 format.|$|R
50|$|Fixed <b>bugs</b> <b>in</b> web {{services}} serialization, deployment, databases.|$|R
40|$|Major changes: Add {{geodesic}} diameter 3 d plugin. Update LabelToValuePlugin. java to keep spatial calibration. Fix <b>bug</b> <b>in</b> 3 D distance transform (only for 3 x 3 x 3 neighborhood). Fix <b>bug</b> <b>in</b> Connected Components labeling. Fix potential bug on {{border of}} morphological filtering with diamond structuring element...|$|R
5000|$|The {{award for}} best {{server-side}} bug went to the security researchers who discovered Heartbleed, and best client-side bug went to George Hotz for finding a <b>bug</b> <b>in</b> Chrome OS. The [...] "most epic fail" [...] award went to Apple for its goto fail <b>bug</b> <b>in</b> iOS and OS X.|$|R
40|$|This thesis {{describes}} CB-DPOR, an algorithm for quickly finding <b>bugs</b> <b>in</b> lock-free data structures. CB-DPOR is {{a combination}} of the CHESS and DPOR model checking algorithms. CB-DPOR performs similar to the concurrently developed preemption-bounded BPOR algorithm. CODEX is a tool for finding <b>bugs</b> <b>in</b> lock-free data structures. CODEX implements CB-DPOR and this thesis demonstrates how to use CODEX to find bugs. This thesis describes new <b>bugs</b> <b>in</b> open-source lock-free data structures, and compares the performance of CB-DPOR with the earlier model checking algorithms CHESS, DPOR, and PCT. CB-DPO...|$|R
40|$|Cqual {{is a type}} {{qualifier}} inference tool used {{to detect}} multiple classes of security vulnerabilities. This tool {{has been used to}} detect format string vulnerabilities, deadlock, and user/kernel pointer <b>bugs</b> <b>in</b> Linux. In this paper we discuss our extension of this work towards finding user/kernel pointer <b>bugs</b> <b>in</b> FreeBSD 5. 3. ...|$|R
50|$|The min-max {{process is}} {{important}} {{as it is}} a quality assurance mechanism and often a team needs to perform both. For example, the coding team needs to maximize the identification of <b>bugs</b> <b>in</b> the specification, but it also needs to minimize the number of <b>bugs</b> <b>in</b> the code it produces.|$|R
2500|$|... {{in-depth}} {{articles on}} analyzing and finding <b>bugs</b> <b>in</b> crash dumps ...|$|R
50|$|Calyptoproctus is a genus of <b>bugs</b> <b>in</b> {{the family}} Fulgoridae.|$|R
50|$|Cantao is a genus of true <b>bugs</b> <b>in</b> family Scutelleridae.|$|R
50|$|Cardiastethus is a genus of <b>bugs</b> <b>in</b> {{the family}} Anthocoridae.|$|R
50|$|Bryocorinae is a {{subfamily}} of <b>bugs</b> <b>in</b> {{the family}} Miridae.|$|R
50|$|<b>Bugs</b> <b>in</b> Space, Simon & Schuster (New York, NY), 1997.|$|R
50|$|Eblis is a genus of <b>bugs</b> <b>in</b> {{the tribe}} Mirini.|$|R
50|$|Closterocoris is a genus of <b>bugs</b> <b>in</b> {{the family}} Miridae.|$|R
50|$|Colposcenia is a genus of <b>bug</b> <b>in</b> the {{subfamily}} Aphalarinae.|$|R
50|$|Coreini is a {{tribe of}} <b>bugs</b> <b>in</b> the {{subfamily}} Coreinae.|$|R
50|$|Cymus is a genus of <b>bugs</b> <b>in</b> {{the family}} Lygaeidae.|$|R
50|$|Deraeocoris is a genus of <b>bugs</b> <b>in</b> the Miridae family.|$|R
50|$|Banasa is a genus of <b>bugs</b> <b>in</b> {{the family}} Pentatomidae.|$|R
5000|$|... #Caption: Stenotus binotatus, a plant <b>bug</b> <b>in</b> {{the group}} Heteroptera ...|$|R
50|$|Lincolnia is a genus of <b>bugs</b> <b>in</b> {{the tribe}} Mirini.|$|R
