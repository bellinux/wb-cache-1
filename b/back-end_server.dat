159|149|Public
25|$|Smuxi {{is based}} on the client–server model: The core {{application}} exists in the Smuxi <b>back-end</b> <b>server</b> which is connected to the Internet around-the-clock. The user interacts with one or more Smuxi front-end clients which are connected to the Smuxi <b>back-end</b> <b>server.</b> This way, the Smuxi <b>back-end</b> <b>server</b> can maintain connections to IRC servers even when all Smuxi front-end clients have been closed. January 14, 2010.|$|E
25|$|Previously {{known as}} Plex Media Center, Plex Home Theater is the {{software}} component {{used for a}} long time as the front-end media player for Plex's <b>back-end</b> <b>server</b> component Plex Media Server.|$|E
2500|$|Boxee {{source code}} is {{otherwise}} in majority {{based on the}} XBMC (now Kodi) media center project's source code which Boxee uses as its software framework, and the Boxee developers contribute changes to that part back upstream to the XBMC project. So Boxee is partially open source and those parts are distributed under the GNU General Public License, however Boxee's social networking layer library, [...] "libboxee" [...] is closed source as it deals with proprietary methods of communication with Boxee's online <b>back-end</b> <b>server</b> which handles the user account information and social network communications between the users in the Boxee userbase, {{it is not clear}} if this way of using closed source libraries with a GPL licensed software passes the GPL linking exception or not.|$|E
40|$|A cluster-based server {{consists}} of a front-end dispatcher and multiple <b>back-end</b> <b>servers.</b> The dispatcher receives incoming jobs, and then decides how to assign them to <b>back-end</b> <b>servers,</b> which in turn serve the jobs according to some discipline. Cluster-based servers have been broadly deployed as they combine good performance with low cost. Several assignment policies have been proposed for cluster-based servers, most of which aim to balance the load among <b>back-end</b> <b>servers.</b> There are two main strate-gies for load balancing: The first strategy aims at balancing {{the amount of work}} at <b>back-end</b> <b>servers,</b> while the second strategy aims at balancing the number of jobs assigned to <b>back-end</b> <b>servers.</b> Example of policies using these strategies are JSQ (Join Shortest Queue) and LC (Least Connected), respectively. In this paper we propose a policy, called LC*, which combines the two aforementioned strategies. The paper shows experimentally that when preemption is admitted (i. e. jobs are executed concurrently by <b>back-end</b> <b>servers),</b> LC substantially outperforms both JSQ and LC. This improved performance is achieved by using only information readily available to the dispatcher, and therefore LC * is a practical policy in regards to implementation...|$|R
40|$|Cluster based packet {{capturing}} {{is a way}} {{of overcoming}} the speed of a slow disk to tap a high-speed network. Most cluster-based architectures, however, do not consider load balancing as an important issue. In order to perform mon-itoring at full line speed without losing packets, we accept that the balance among <b>back-end</b> <b>servers</b> must be main-tained. Conventional methods rely on fixed or random rout-ing where a ”source-destination ” address pair is used as a unit for load balancing. Instead of using such a coarse grain unit, we use a flow, a ”source-destination-port ” pair. In ad-dition, we adaptively balance loads of <b>back-end</b> <b>servers</b> us-ing a flow load estimation technique. The proposed meth-ods have been validated by performing a trace-based sim-ulation. Compared to the existing routing approaches, our method balances load of <b>back-end</b> <b>servers.</b> From a simula-tion, we find that for protocols having a transient load with a small variance in flow length, we may use simple meth-ods of load balancing such as round-robin, but for those having a persistent load with a large variance, we need to use a flow estimation technique...|$|R
40|$|We {{present a}} {{threshold}} identity-based authenticated key exchange protocol {{that can be}} applied to an authenticated server-controlled gateway-user key exchange. The objective is to allow a user and a gateway to establish a shared session key with the permission of the <b>back-end</b> <b>servers,</b> while the <b>back-end</b> <b>servers</b> cannot obtain any information about the established session key. Our protocol has potential applications in strong access control of confidential resources. In particular, our protocol possesses the semantic security and demonstrates several highly-desirable security properties such as key privacy and transparency. We prove the security of the protocol based on the Bilinear Diffie-Hellman assumption in the random oracle model...|$|R
50|$|Smuxi {{is based}} on the {{client-server}} model: The core application exists in the Smuxi <b>back-end</b> <b>server</b> which is connected to the Internet around-the-clock. The user interacts with one or more Smuxi front-end clients which are connected to the Smuxi <b>back-end</b> <b>server.</b> This way, the Smuxi <b>back-end</b> <b>server</b> can maintain connections to IRC servers even when all Smuxi front-end clients have been closed.|$|E
50|$|NeoPlanet’s client/server {{architecture}} {{also included}} a scalable <b>back-end</b> <b>server</b> component. The NeoPlanet back-end {{had the ability to}} track and target marketing and promotions, even through corporate firewalls.|$|E
50|$|Previously {{known as}} Plex Media Center, Plex Home Theater is the {{software}} component {{used for a}} long time as the front-end media player for Plex's <b>back-end</b> <b>server</b> component Plex Media Server.|$|E
50|$|All models feature content {{delivery}} network support, allowing sites such as YouTube that use multiple <b>back-end</b> <b>servers</b> to be effectively cached. ApplianSys's licensing model does not restrict by number of users or throughput supported by each device.|$|R
40|$|Abstract: Cluster-based server {{architectures}} combine {{good performance}} and low cost, and {{are commonly used}} for applications that generate heavy loads. Essentially, a cluster-based server consists of a front-end dispatcher and several <b>back-end</b> <b>servers.</b> The dispatcher receives incoming requests, and then assigns them to <b>back-end</b> <b>servers,</b> which are responsible for request processing. The many benets of cluster-based servers make them {{a good choice for}} e-commerce applications as well. However, applying this type of architecture to e-commerce applications is hindered by the fact that e-commerce clusters have the additional task of verifying that requests comply with contract terms. The problem is further {{complicated by the fact that}} contract terms may be expressed as functions of dynamic, mutable states. We have proposed a policy, called TDA (Type Dependent Assignment), which is designed to balance load among <b>back-end</b> <b>servers</b> and to that request validation is done in a an ecient manner. In this paper we are interested in evaluating the performance of TDA. To gauge its ecacy, we present an empirical study, using real-life trace data measured at Internet cluster-based servers. Experimental results of this study show that TDA outperforms the Least Connected policy by a factor of four...|$|R
5000|$|TCP offload: {{different}} vendors {{use different}} terms for this, {{but the idea}} is that normally each HTTP request from each client is a different TCP connection. This feature utilizes HTTP/1.1 to consolidate multiple HTTP requests from multiple clients into a single TCP socket to the <b>back-end</b> <b>servers.</b>|$|R
50|$|Many mobile {{services}} {{split the}} application into a front-end client {{program and a}} <b>back-end</b> <b>server</b> program following the traditional client-server model. The front-end mobile application offloads its functionality to the back-end servers for various reasons such as speeding up processing. With the advent of cloud computing, the <b>back-end</b> <b>server</b> is typically hosted at the cloud datacenter. Though {{the use of a}} cloud datacenter offers various benefits such as scalability and elasticity, its consolidation and centralizion lead to a large separation between a mobile device and its associated datacenter. End-to-end communication then involves many network hops and results in high latencies and low bandwidth.|$|E
50|$|Client {{software}} is primarily the SAP Business One client {{that is a}} Microsoft Windows-based product that connects to a <b>back-end</b> <b>server.</b> SAP also offer clients for phones and tablets (iOS and Android) that contain {{a subset of the}} full features aimed at sales employees.|$|E
50|$|MLDonkey {{is an open}} source, multi-protocol, {{peer-to-peer}} {{file sharing}} application that runs as a <b>back-end</b> <b>server</b> application on many platforms. It can be controlled through a user interface provided by one of many separate front-ends, including a Web interface, telnet interface and over a dozen native client programs.|$|E
5000|$|Distributed Denial of Service (DDoS) attack protection: {{load balancers}} can provide {{features}} such as SYN cookies and delayed-binding (the <b>back-end</b> <b>servers</b> don't see the client until it finishes its TCP handshake) to mitigate SYN flood attacks and generally offload work from the servers to a more efficient platform.|$|R
40|$|We {{present a}} new {{strategy}} for the allocation of requests in clustered web servers, based on the size distribution of the requested documents. This strategy, EquiLoad, manages to achieve a balanced load {{to each of the}} <b>back-end</b> <b>servers,</b> and its parameters are obtained from the analysis of a trace's past data. To study its performance, we use phase-type distribution ttings and solve the resulting models using a new solution method for M/PH/ 1 queues that only requires solution of linear systems. The results show that EquiLoad greatly outperforms random allocation, performs comparably or better than the Shortest Remaining Processing Time and Join Shortest Queue policies and maximizes cache hits at the <b>back-end</b> <b>servers,</b> therefore behaving similarly to a -aware" allocation policy, but at a very low implementation cost. ...|$|R
50|$|All {{versions}} of IAS support multi domain setups. Only Windows Server 2003 supports cross forest. While NT4 version includes a Radius Proxy, Windows 2000 didn't {{have such a}} feature. Windows Server 2003 reintroduced the feature and is capable of intelligently proxy, load balance, and tolerate faults from faulty or unreachable <b>back-end</b> <b>servers.</b>|$|R
50|$|From the start, Newi was {{targeted}} at both front-end GUI systems and <b>back-end</b> <b>server</b> systems. The front-end version had a GUI run-time framework implemented as components. The component concept fitted {{very well with}} the object-based UI provided. Hence a designer/programmer used the same technical code structure to implement both front-end and back-end business function.|$|E
5000|$|... some {{software}} systems combine traditional user-interface markup languages (such as HTML) with declarative markup {{that defines}} what (but not how) the <b>back-end</b> <b>server</b> systems {{should do to}} support the declared interface. Such systems, typically using a domain-specific XML namespace, may include abstractions of SQL database syntax or parameterised calls to web services using representational state transfer (REST) and SOAP.|$|E
50|$|The SAW Video Mediatheque was {{the first}} online archive for {{independent}} media arts in Canada, soft-launched in 2003, and released publicly in 2004. The archive featured 496 videos, streamed in full for free on the Web. The Mediatheque suffered a <b>back-end</b> <b>server</b> crash and lost its database in 2009. The archive was relanched October 1, 2011 and continues to showcase over 300 videos, calling on its members to keep the archive growing.|$|E
5000|$|In {{parallel}} with Vision97 development, a separate development team began work in 1996 {{on a project}} codenamed Tarantella. The goal of this project was [...] "any application, any client, anywhere": {{to provide access to}} applications of any type (hosted on <b>back-end</b> <b>servers)</b> from any client device that supported a Java-enabled web browser.|$|R
50|$|A {{year after}} Garden was released, Garden Networks {{releases}} {{a new product}} called Garden G2. This software tool provides {{a different way of}} accessing the <b>back-end</b> <b>servers,</b> and a different way of engaging proxying. Unlike Garden, in G2, proxying is triggered by DNS resolution in order to provide support for a wider range of applications.|$|R
50|$|GTunnel version 1.1 {{provides}} a standard mode, {{which is the}} main working mode and provides the best data transfer performance by connecting to the <b>back-end</b> <b>servers</b> directly, a Skype mode, and a Tor mode that go through computers in these P2P network. GTunnel also has an improved user interface which features real-time traffic graphs.|$|R
50|$|Numerous {{scheduling}} algorithms, {{also called}} load-balancing methods, {{are used by}} load balancers to determine which <b>back-end</b> <b>server</b> to send a request to.Simple algorithms include random choice or round robin. More sophisticated load balancers may take additional factors into account, such as a server's reported load, least response times, up/down status (determined by a monitoring poll of some kind), number of active connections, geographic location, capabilities, or how much traffic it has recently been assigned.|$|E
50|$|ODMA was {{an effort}} to {{standardize}} the API to be used by desktop applications on Microsoft Windows to interface with <b>back-end,</b> <b>server</b> based document management systems (DMS). Version 1.0 of the API specification was completed in 1994, and went on to be supported by many of the major DMS vendors. Version 2.0 of the specification was completed in 1997.ODMA has subsequently been superseded by other, more standard ways of interfacing, such as WebDAV or CMIS.|$|E
50|$|Alternatively, Mythbuntu {{can be used}} {{to install}} a MythTV client: a {{front-end}}-only system. This might be useful where users already have a central storage server in their home. The central storage device can act as a MythTV server, and the MythTV front-end client software can be installed on devices with low-power hardware. Mythbuntu can also run directly from a CD-ROM (without installation), provided that there is a network connection to a PC with a MythTV <b>back-end</b> <b>server.</b>|$|E
30|$|While certain {{sources are}} {{expected}} to provide real-time streams of data (I 6), the scheduled transfer of data in bulk from <b>back-end</b> <b>servers,</b> repositories, and applications may also occur in a manufacturing setting (I 7). In fact, the cleaned data may {{also need to be}} transferred back to some of these same databases for transactional operations.|$|R
40|$|The Decomate project enables mutual {{access to}} heterogeneous, distributed, and pooled digital {{resources}} of consortium members. Using a mediator architecture with a Broker and several <b>back-end</b> <b>servers,</b> a scalable and flexible {{system has been}} developed that is going in production in major European universities. Ongoing work focuses on access improvements using graphical browsing and thesaurus integration...|$|R
40|$|Future {{systems have}} been {{characterized}} as ubiquitous, pervasive, and invisible. They will consist of devices that are diverse in size, performance, and power consumption. Some of these devices will be mobile, posing additional requirements to system software and applications. The focus will move from technology to deployment {{and ease of use}} of services. Consequently, traditional paradigms for reasoning about, designing, and implementing software systems and services will no longer be sufficient. We believe that this future vision will rely on a three-tier infrastructure consisting of <b>back-end</b> <b>servers,</b> infrastructure servers, and front-end clients (mobile or static, handheld or embedded). The critical question for future systems will be how to deliver services on demand from <b>back-end</b> <b>servers</b> to resource-constrained clients. If we can handle the new requirements of these systems, we can enable this computing infrastructure to offer significantly more services to users in a more pervasive way...|$|R
50|$|According to Mavor, while game {{visualization}} {{began in}} May 2012, {{just three months}} prior to the game's public announcement, the game concept itself had been in development for approximately three years by that time. Additionally, the server and game engine technologies that would underpin the game had been in development for several years prior to the game's public revelation, with some of the server technology having already made its way into PlayFab, Uber Entertainment's <b>back-end</b> <b>server</b> network.|$|E
50|$|Alternatively, LinHES {{can be used}} {{to install}} a MythTV client, front-end-only system. For example, users may have a central storage device (server) in their house, the server can then be {{accessed}} from numerous other devices throughout the house, these other devices needing only a front-end installation on devices containing minimal hardware. LinHES can also run directly from a CD-ROM (i.e. without installation) providing that there is a network connection to a PC with a 'complete installation' (a MythTV <b>back-end</b> <b>server).</b>|$|E
50|$|In 2013 Sparacino {{worked with}} Vodafone Italy to design, engineer, and develop {{software}} for an invite-only 10,000 sq feet interactive showroom to creatively unveil new enterprise products to CEOs, high-level executives, city officials, and journalists. The showroom articulated the experience through eight different interactive environments {{controlled by a}} dedicated software running on a tablet. Her custom mobile user interface and <b>back-end</b> <b>server</b> software allowed for easy content management and controls of all screens, audio, and lighting levels {{in all areas of}} the showroom.|$|E
5000|$|Plex Media <b>Server</b> — the <b>back-end</b> media <b>server</b> {{component}} of Plex software suite.|$|R
40|$|Abstract—Innovation in {{gateways}} {{for data}} gathering sensor networks has lagged compared to advances in mote-class devices, leaving {{us with a}} limited set of options for deploying such systems. In this paper we outline the system design of a gateway that meets the hardware and software demands of data gathering networks and present a prototype implementation of this design using the popular Stargate platform. The gateway communicates with the <b>back-end</b> <b>servers</b> through a periodic query-response protocol which is robust to connectivity outages. Commands from the <b>back-end</b> <b>servers</b> instruct the gateway to wake up the sensor network, perform bulk data downloads, and finally upload the collected measurements to a remote server. We investigate mechanisms to minimize energy consumption at the gateway including completely powering it off in between query intervals and batching data uploads. While we ground our design using the Stargate device and evaluate its power consumption using different long-haul radios, we present several alternative platforms which could become viable alternatives {{in terms of their}} cost/performance ratio. I...|$|R
40|$|Abstract. A {{distributed}} reasoning {{platform is}} presented to reduce the energy consumption of Wireless Sensor Networks (WSNs) offering geospatial services by minimizing the amount of wireless communication. It combines local, rule-based reasoning on the sensors and gateways with global, ontology-based reasoning on the <b>back-end</b> <b>servers.</b> The Semantic Sensor Network (SNN) Ontology was extended to model the WSN energy consumption. One exemplary prototype is presented, namely the Garbage Bin Tampering Monitor (GBTM). ...|$|R
