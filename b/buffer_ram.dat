9|55|Public
500|$|Featuring a {{total of}} eight {{processors}} the Saturn's main central processing units are two Hitachi SH-2 microprocessors clocked at 28.6MHz and capable of 56 MIPS. The system contains a Motorola 68EC000 running at 11.3MHz as a sound controller, a custom sound processor with an integrated Yamaha FH1 DSP running at 22.6MHz capable of up to 32 sound channels with both FM synthesis and 16-bit PCM sampling at a maximum rate of 44.1kHz, and two video display processors, the VDP1 (which handles sprites, textures and polygons) and the VDP2 (which handles backgrounds). Its double-speed CD-ROM drive is controlled by a dedicated Hitachi SH-1 processor to reduce load times. The Saturn's System Control Unit (SCU), which controls all buses and functions as a co-processor of the main SH-2 CPU, has an internal DSP running at 14.3MHz. The Saturn contains a cartridge slot for memory expansion, 16 Mbit of work random-access memory (RAM), 12 Mbit of video RAM, 4 Mbit of RAM for sound functions, 4 Mbit of CD <b>buffer</b> <b>RAM</b> and 256 Kbit (32 KB) of battery backup RAM. Its video output, provided by a stereo AV cable, displays at resolutions from 320×224 to 704×224 pixels, and is capable of displaying up to 16.77 million colors simultaneously. Physically, the Saturn measures [...] The Saturn was sold packaged with an instruction manual, one control pad, a stereo AV cable, and its 100V AC power supply, with a power consumption of approximately 15W.|$|E
5000|$|Checks the {{electrical}} and mechanical performance {{as well as}} the read performance of the disk. Electrical tests might include a test of <b>buffer</b> <b>RAM,</b> a read/write circuitry test, or a test of the read/write head elements. Mechanical test includes seeking and servo on data tracks. Scans small parts of the drive's surface (area is vendor-specific and there is a time limit on the test). Checks the list of pending sectors that may have read errors, and it usually takes under two minutes.|$|E
5000|$|The Super System Card (Sūpā Shisutemu Kādo), {{an upgrade}} for the CD-ROM² System, was {{released}} on October 26, 1991. It updates the BIOS to Version 3.0 and increases the <b>buffer</b> <b>RAM</b> from 64kB to 2MB required to play Super CD-ROM² discs. An American version of the Super System Card for the TurboGrafx-16/CD combo was also sold exclusively as a mail-order. PC Engine owners who did not already own the original CD-ROM² add-on could instead opt for the Super CD-ROM² (Sūpā Shī Dī Romu Romu), {{an updated version of}} the add-on released on December 13, which combines the CD-ROM drive, interface unit and Super System Card into one device.|$|E
50|$|The {{chips in}} the chip set were {{connected}} with four buses: the MIB, DAL, PAL and CAL. The MIB (microinstruction bus) carried microinstructions control signals and addresses {{from the control}} store to the I/E and F chips. The MIB is 40 bits wide, the same width as a microword and is parity protected. The DAL is a 32-bit parity-protected bus that carries data addresses {{to and from the}} I/E, M and F chips, cache, backup translation <b>buffer</b> <b>RAMs</b> and the port interface.|$|R
50|$|MagnaRAM {{worked by}} {{replacing}} {{a portion of}} Windows' virtual memory system. MagnaRAM would insert itself in the string of Windows Programs that determined what pieces of RAM will be moved to the hard disk. Instead of writing directly to the hard disk, the information to be written would go to MagnaRAM's own buffer as this was a faster process. During CPU idle, MagnaRAM would compress the information in its own <b>RAM</b> <b>buffer.</b> When the <b>RAM</b> <b>buffer</b> becomes full, it is then swapped to the hard disk taking both less time and less space.|$|R
5000|$|Double-speed (depending on manufacturer) 300 kB/s data {{transfer}} CD-ROM drive with 32 KB <b>RAM</b> <b>buffer</b> ...|$|R
50|$|The modem's {{hardware}} {{must not}} delay data too much, {{while waiting for}} more to compress in one packet, otherwise an unacceptable latency level will result. It also cannot afford to, as this would require both sizable computing resources (on the scale of a modem) as well as significant <b>buffer</b> <b>RAM.</b> Software compression such as MPPC is free to use the host computer's resources which will typically include a CPU of several hundred Megahertz and several hundred Megabytes of RAM - greater computing power {{than that of the}} modem by several orders of magnitude. This allows it to keep a much larger buffer to work on at any one time, and it processes through a given amount of data much faster.|$|E
50|$|Featuring a {{total of}} eight {{processors}} the Saturn's main central processing units are two Hitachi SH-2 microprocessors clocked at 28.6 MHz and capable of 56 MIPS. The system contains a Motorola 68EC000 running at 11.3 MHz as a sound controller, a custom sound processor with an integrated Yamaha FH1 DSP running at 22.6 MHz capable of up to 32 sound channels with both FM synthesis and 16-bit PCM sampling at a maximum rate of 44.1 kHz, and two video display processors, the VDP1 (which handles sprites, textures and polygons) and the VDP2 (which handles backgrounds). Its double-speed CD-ROM drive is controlled by a dedicated Hitachi SH-1 processor to reduce load times. The Saturn's System Control Unit (SCU), which controls all buses and functions as a co-processor of the main SH-2 CPU, has an internal DSP running at 14.3 MHz. The Saturn contains a cartridge slot for memory expansion, 16 Mbit of work random-access memory (RAM), 12 Mbit of video RAM, 4 Mbit of RAM for sound functions, 4 Mbit of CD <b>buffer</b> <b>RAM</b> and 256 Kbit (32 KB) of battery backup RAM. Its video output, provided by a stereo AV cable, displays at resolutions from 320×224 to 704×224 pixels, and is capable of displaying up to 16.77 million colors simultaneously. Physically, the Saturn measures 260 x 230 x 83 mm. The Saturn was sold packaged with an instruction manual, one control pad, a stereo AV cable, and its 100V AC power supply, with a power consumption of approximately 15W.|$|E
5000|$|The {{character}} address increases linearly. When {{the chip}} signals horizontal sync {{it increases the}} row address. If the row address does not equal the programmatically set number of rows per character, then the character address is reset to the value it had {{at the beginning of}} the scanline that was just completed. Otherwise the row address is reset to zero and the memory address is continues increasing linearly. This causes the same sequence of character values to be re-read from the memory for each raster line of each character row, before the 6845 advances the memory address to the next character row and repeats the same pattern. Therefore, if a character occupies one [...] "word" [...] in the video buffer, a display of l lines and c columns of characters with s scan lines per character requires l × c words of memory to represent a full screen of characters but takes s times that many memory accesses to complete one refresh cycle (as each line of character words is repeatedly read s times before the next one is read). This means that character displays using the 6845, compared to all-points-addressable graphics displays of the same resolution, require much less memory but still require high memory bandwidth on the order of the bandwidth required for graphics. (A different video display controller that buffers one whole line of character data internally can avoid this repeated reading of each line of characters from the display <b>buffer</b> <b>RAM,</b> reducing the required memory bandwidth and allowing either slower, less expensive memory chips to be used, more time for a system CPU to access the memory, or a combination of both.) ...|$|E
30|$|We {{must provide}} a {{circular}} <b>buffer</b> into the <b>RAM</b> memory to save all the messages {{that must be}} sent.|$|R
40|$|An {{apparatus}} for injecting errors into a FDDI {{token ring}} network is disclosed. The error injection scheme operates by fooling a FORMAC into thinking it sent a real frame of data. This {{is done by}} using two <b>RAM</b> <b>buffers.</b> The <b>RAM</b> <b>buffer</b> normally accessed by the RBC/DPC becomes a SHADOW RAM during error injection operation. A dummy frame is loaded into the shadow RAM in order to fool the FORMAC. This data is just like the data {{that would be used}} if sending a normal frame, with the restriction that it must be shorter than the error injection data. The other buffer, the error injection RAM, contains the error injection frame. The error injection data is sent out to the media by switching a multiplexor. When the FORMAC is done transmitting the data, the multiplexor is switched back to the normal mode. Thus, the FORMAC is unaware of what happened and the token ring remains operational...|$|R
50|$|Fully {{buffered}} memory systems place {{a memory}} buffer device on every memory module (called an FB-DIMM when Fully <b>Buffered</b> <b>RAM</b> is used), which unlike traditional memory controller devices, use a serial data {{link to the}} memory controller instead of the parallel link used in previous RAM designs. This decreases {{the number of the}} wires necessary to place the memory devices on a motherboard (allowing for a smaller number of layers to be used, meaning more memory devices can be placed on a single board), at the expense of increasing latency (the time necessary to access a memory location). This increase is due to the time required to convert the parallel information read from the DRAM cell to the serial format used by the FB-DIMM controller, and back to a parallel form in the memory controller on the motherboard.|$|R
40|$|The NASA Langley Research Center's Wind Tunnel Reinvestment project {{plans to}} shrink the {{existing}} data acquisition electronics to fit inside a wind tunnel model. Space limitations within a model necessitate a distributed system of Application Specific Integrated Circuits (ASICs) rather than a centralized system based on PC boards. This thesis {{will focus on the}} design of the prototype of the communication Controller board. A portion of the communication Controller board is to be used as the basis of an ASIC design. The communication Controller board will communicate between the internal model modules and the external data acquisition computer. This board is based around an FPGA, to allow for reconfigurability. In addition to the FPGA, this board contains <b>buffer</b> <b>RAM,</b> configuration memory (EEPROM), drivers for the communications ports, and passive components. ii Acknowledgments I would like to acknowledge the following people for their efforts on this project. Dr. Robert Hodson for his [...] ...|$|E
40|$|DFT(Discrete Fourier Transform) is a {{fundamental}} principle of DSP whose applications vary from Spectral analysis, Data compression, solving Partial Differential Equations, convolution and multiplication of large numbers. Despite its enormous potential in theoretically solving many DSP problems, it is of very little use in practical because of its extremely expensive hardware implementation. It is due to its complexity O(N 2), N being number of data points. To address this problem Fast Fourier Transform (FFT) was introduced. This algorithm uses the symmetry and periodicity properties of Twiddle Factor involved with DFT {{to reduce the number}} of calculations drastically. For N= 1024, FFT is more than 200 times faster than DFT. In this paper we focus on implementing FFT for a processor, by applying Cooley-Tukey Algorithm to improve the speed of computation at expense of minimum power. This paper discusses in detail about the core FFT block and auxiliary blocks of Testbench like <b>Buffer</b> <b>Ram,</b> Complex Multiplier and Bit Shifter. The simulation has been done in Xilinx ISE with verification on two different FPGA platforms. The correctness of our algorithm is demonstrated via output waveform...|$|E
40|$|Up to 2 Mbps on air {{data rate}} • Enhanced ShockBurst ™ {{hardware}} link layer • Air compatible with nRF 24 LU 1, nRF 24 LE 1, nRF 24 L 01 +, nRF 24 L 01, nRF 2401 A, nRF 2402, nRF 24 E 1 and nRF 24 E 2 • Low cost external ± 60 ppm 16 MHz crystal • Full speed USB 2. 0 compliant device controller • Up to 12 Mbps USB transfer rate • 2 control, 10 bulk/interrupt and 2 ISO endpoints • Dedicated 512 bytes endpoint <b>buffer</b> <b>RAM</b> • Software controlled pull-up resistor for D+ • PLL for full-speed USB operation • Voltage regulator, 4. 0 to 5. 25 V supply range • Enhanced 8 -bit 8051 compatible microcontroller • Drop-in compatibility with nRF 24 LU 1 • Reduced instruction cycle time • 32 -bit multiplication-division unit • 16 or 32 kbytes of on-chip flash memory • 2 kbytes of on-chip SRAM • 6 general purpose digital input/output pins • Hardware SPI slave and master, UART • 3 16 -bit timers/counters • AES encryption/decryption co-processor • Supports firmware upgrade over USB • Supports FS 2 hardware debugge...|$|E
5000|$|GPU chipset: 3× Namco 02xx GFX Shifter (16-bit video shifter), 2× Namco 03xx Playfield Data Buffer, Namco 04xx Sprite Address Generator, Namco 09xx Sprite <b>RAM</b> <b>Buffer</b> ...|$|R
5000|$|Power Systems S821LC [...] "Stratton" [...] 2× POWER8 SCM (8 or 10 cores), 1U. Up to 512 GB DDR4 <b>RAM</b> <b>buffered</b> by four Centaur L4 chips. Manufactured by Supermicro.|$|R
5000|$|If enacted, the S1RA {{would have}} {{provided}} for a blanket license for digital music providers to reproduce and distribute [...] "general and incidental" [...] digital copies of musical works, including cache, network, and <b>RAM</b> <b>buffer</b> copies.Critics of the S1RA ...|$|R
50|$|In {{order to}} scroll a {{character}} screen, the VIC-II {{is set to}} 38-column and/or 24-line mode via the registers at $D011 and $D016. This creates an off-screen buffer where the row of characters to be scrolled is placed. By adjusting the scroll bits in the above-mentioned registers, one row may be moved on-screen after which it repeats unless a new row is put in the <b>buffer.</b> Color <b>RAM</b> is scrolled simultaneous with screen RAM and works the same way.|$|R
30|$|A new {{reception}} module must be implemented. It {{must include}} a circular <b>buffer</b> into the <b>RAM</b> memory to save all the incoming messages. Each time a packet is {{received from the}} transceiver (in asynchronous mode), it will be saved in this buffer.|$|R
5000|$|The Athlon 64 was {{originally}} codenamed ClawHammer by AMD, and {{was referred to}} as such internally and in press releases. The first Athlon 64 FX was based on the first Opteron core, SledgeHammer. Both cores, produced on a 130 nanometer process, were first introduced on September 23, 2003. The models first available were the FX-51, fitting Socket 940, and the 3200+, fitting Socket 754. Like the Opteron, on which it was based, the Athlon FX-51 required <b>buffered</b> <b>RAM,</b> increasing the final cost of an upgrade. The week of the Athlon 64's launch, Intel released the Pentium 4 Extreme Edition, a CPU designed to compete with the Athlon 64 FX. The Extreme Edition was widely considered a marketing ploy to draw publicity away from AMD, and was quickly nicknamed among some circles the [...] "Emergency Edition". Despite a very strong demand for the chip, AMD experienced early manufacturing difficulties that made it difficult to deliver Athlon 64s in quantity. In the early months of the Athlon 64 lifespan, AMD could only produce 100,000 chips per month. However, it was very competitive in terms of performance to the Pentium 4, with magazine PC World calling it the [...] "fastest yet". [...] "Newcastle" [...] was released soon after ClawHammer, with half the Level 2 cache.|$|R
5000|$|... x11vnc keeps {{a copy of}} the X server's frame <b>buffer</b> in <b>RAM.</b> The X11 {{programming}} interface XShmGetImage is used {{to retrieve}} the frame buffer pixel data. x11vnc compares the X server's frame buffer against its copy to see which pixel regions have changed (and hence need to be sent to the VNC viewers.) Reading pixel data from the physical frame buffer can be much slower than writing to it (because graphics devices are not optimized for reading) and so a sequential pixel by pixel check would often be too slow.|$|R
40|$|Abstract—One of the {{difficulties}} with optical packet switched (OPS) networks is buffering optical packets in the network. The research on optical RAM presently being done {{is not expected to}} achieve a large capacity soon. However, the burstiness of Internet traffic causes high packet drop rates and low utilization in small buffered OPS networks. In this article, we investigate and compare optical-buffered switch architectures and pacing algorithms for minimizing the buffer requirements of OPS switches. We simulate two mesh topologies (NSFNET and Abilene) for goodput and packet drop rate comparisons and optimization of XCP parameters. We show that XCP-based pacing algorithm with a shared buffered switch architecture yields high TCP goodput and low packet drop rate in a core OPS network when very small optical <b>RAM</b> <b>buffers</b> are used. Keywords-small <b>buffer,</b> OPS, optical <b>RAM,</b> optical switch I...|$|R
40|$|The redo log plays a prime role in Oracle database’s core functionality. However it imposes disk i/o for the redo log’s {{inherent}} functionality, increased i/o can highly {{affect the}} Oracle performance. In this paper I am analyzing the performance {{issues related to}} the Oracle redo log, and solutions to address those issues, also I am covering how to minimize the overhead of redo logs and improve the overall database performance. Concept review The redo log <b>buffer</b> is a <b>RAM</b> area defined by the initialization parameter log_buffer that works to save changes to database, in case something fails and Oracle has to put it back into its original state (a “rollback”). When Oracle SQL updates a table, redo images are created and stored in the redo log <b>buffer.</b> Since <b>RAM</b> is faster than disk, this makes the storage of redo very fast. Oracle will eventually flush the redo log buffer to disk, called online redo log. This can happen in a number of special cases, but what’s really important is that Oracle guarantees that the redo log buffer will be flushed to disk after a commit operatio...|$|R
50|$|In November 2008, the U.S. Copyright Office {{announced}} {{the implementation of}} an interim regulation which would clarify the scope of section 115 for digital music providers. It has also been controversial. The copyright office has declined, in this interim regulation, to discuss whether <b>RAM</b> <b>buffer</b> copies and other incidental copies constitute copies under {{the meaning of the}} copyright act.|$|R
30|$|F 2 a[*]=[*]F 1 aΦz, Eq. (57). F 1 a is {{calculated}} in the M module using the output from step 7 and loaded into a FIFO buffer to eliminate any memory access for step 9. F 1 a is {{loaded into the}} input buffer from the FIFO. Simultaneously, the first column from Φ is loaded into the other input <b>buffer</b> from <b>RAM.</b> This step continues until all three columns of Φ have been loaded into the MACx. Once the MACx computations for F 2 a are completed, the MACx output module sends {{a signal to the}} MACx input module, to initiate the execution of step 10.|$|R
40|$|Abstract: One of the {{difficulties}} of optical packet switched networks is buffering optical packets in the network. Burstiness of Internet traffic causes high packet drop rates and low utilization in very small buffered OPS networks. In this paper, we propose a new node-based pacing algorithm and show that it can increase the utilization of very small optical <b>RAM</b> <b>buffered</b> core optical packet-switched (OPS) networks...|$|R
50|$|The chip is used {{to render}} 3D polygons and to assist the SNES in {{rendering}} advanced 2D effects. This custom-made RISC processor is typically programmed {{to act like a}} graphics accelerator chip that draws polygons to a frame <b>buffer</b> in the <b>RAM</b> that sits adjacent to it. The data in this frame buffer is periodically transferred to the main video memory inside of the console using DMA in order to show up on the television display.|$|R
40|$|Abstract. A data {{acquisition}} system is introduced based on FPGA and USB 3. 0 to achieved high transfer rate. FPGA control AD and manage the DDR <b>RAM</b> <b>buffer.</b> The USB connect model is synchronous Slave FIFO. The multi data buffer queue structure is selected as the data structure. The testing {{results show that the}} average storage rate is 229. 1 MByte/s. When using two hard disk, the rate can reach to 289. 8 MByte/s. Some key factors affect the transfer rate is also discussed...|$|R
50|$|Although x11vnc's {{primary use}} is for X servers {{associated}} with physical graphics hardware, {{it can also}} attach to virtual X servers (whose frame <b>buffers</b> exist in <b>RAM</b> only) such as Xvfb or a Sun Ray session. x11vnc has options (-create and -svc) to start Xvfb automatically, possibly as the Unix user that logged in. The interactive response of x11vnc and Xvfb {{may not be as}} fast as Xvnc, however this mode enables features that Xvnc does not have, such as SSL encryption and Unix usernames and passwords.|$|R
40|$|Abstract—In this paper, a new cell re-sequence {{mechanism}} is proposed to restore cell sequence in multipath ATM switches. Since the proposed mechanism uses per-VC logical queues which store only the cells {{belonging to the}} same VC, the mechanism can reduce processing time compared to convent ional re-sequence mechanisms. The mechanism also has no limitation on the peak rate of VCS and no arbitration functions to select an output cell. The mechanism can be implemented using a <b>RAM</b> <b>buffer,</b> a CAM/RAM table, a controller, etc...|$|R
40|$|Optical buffers {{implemented}} by fiber delay lines (FDLs) have a volatile nature due to signal loss and noise accumulation. Packets suffer from excessive recirculation through FDLs, {{and they may}} be dropped eventually in their routing paths. Because of this, packet scheduling becomes more difficult in FDL <b>buffers</b> than in <b>RAM</b> <b>buffers,</b> and requires additional design considerations for reducing packet loss. We propose a latency-aware scheduling scheme and an analytical model for all-optical packet switching networks with FDL buffers. The latency-aware scheduling scheme is intended to minimize the packet loss rate of the networks by ranking packets in the optimal balance between latency and residual distance. The analytical model is based on non-homogeneous Markovian analysis to study the effect of the proposed scheduling scheme on packet loss rate and average delay. Furthermore, our numerical results show how various network parameters affect the optimal balance. We demonstrate quantitatively how to achieve the proper balance between latency and residual distance so that the network performance can be improved significantly. For instance, we find that under a given latency limit and light traffic load our scheduling scheme achieves a packet loss rate 71 % lower than a scheduling scheme that ranks packets simply based on latency...|$|R
50|$|DWM {{works in}} {{different}} ways depending on the operating system (Windows 7 or Windows Vista) and on the version of the graphics drivers it uses (WDDM 1.0 or 1.1).Under Windows 7 and with WDDM 1.1 drivers, DWM only writes the program's buffer to the video RAM, {{even if it is}} a graphics device interface (GDI) program. This is because Windows 7 supports (limited) hardware acceleration for GDI and in doing so does not need to keep a copy of the <b>buffer</b> in system <b>RAM</b> so that the CPU can write to it.|$|R
5000|$|The Ultra 5 {{came in a}} [...] "pizzabox" [...] style {{case with}} a 270, 333, 360, or 400-MHz UltraSPARC IIi CPU and {{supported}} a maximum of 512 MB <b>Buffered</b> EDO ECC <b>RAM</b> in four 50ns 168-pin DIMM slots. It included a single EIDE Hard Disk Drive of between 4 and 20 GB, a CD-ROM drive, three 32-bit 33 MHz PCI slots (two full-size, one short), a graphics port (HD15), a parallel printer port (DB25), two serial ports (DB25 and DE9), an Ethernet port (10BASE-T/100BASE-TX) and headphone, line-in, line-out and microphone 3.5-mm jacks.|$|R
50|$|Arbitrary code {{execution}} {{is commonly}} achieved through {{control over the}} instruction pointer (such as a jump or a branch) of a running process. The instruction pointer points to the next instruction in the process that will be executed. Control over {{the value of the}} instruction pointer therefore gives control over which instruction is executed next. In order to execute arbitrary code, many exploits inject code into the process (for example by sending input to it which gets stored in an input <b>buffer</b> in <b>RAM)</b> and use a vulnerability to change the instruction pointer to have it point to the injected code. The injected code will then automatically get executed. This type of attack exploits the fact that most computers do not make a general distinction between code and data, so that malicious code can be camouflaged as harmless input data. Many newer CPUs have mechanisms to make this harder, such as a no-execute bit.|$|R
40|$|Runway {{detection}} in long wavelength infrared (LWIR) video {{could potentially}} {{increase the number}} of successful landings by increasing the situational awareness of pilots and verifying a correct approach. A method for detecting runways in LWIR video was therefore proposed and evaluated for robustness, speed and FPGA acceleration. The proposed algorithm improves the detection probability by making assumptions of the runway appearance during approach, as well as by using a modified Hough line transform and a symmetric search of peaks in the accumulator that is returned by the Hough line transform. A video chain was implemented on a Xilinx ZC 702 Development card with input and output via HDMI through an expansion card. The video frames were <b>buffered</b> to <b>RAM,</b> and the detection algorithm ran on the CPU, which however did not meet the real-time requirement. Strategies were proposed that would improve the processing speed by either acceleration in hardware or algorithmic changes...|$|R
