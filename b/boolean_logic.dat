996|187|Public
5|$|In electronics, {{magnetic}} core memory, radar, single electron transistors, and inertial guidance controls were invented or substantially developed by MIT researchers. Harold Eugene Edgerton {{was a pioneer}} in high speed photography and sonar. Claude E. Shannon developed much of modern information theory and discovered the application of <b>Boolean</b> <b>logic</b> to digital circuit design theory. In the domain of computer science, MIT faculty and researchers made fundamental contributions to cybernetics, artificial intelligence, computer languages, machine learning, robotics, and cryptography. At least nine Turing Award laureates and seven recipients of the Draper Prize in engineering have been or are currently associated with MIT.|$|E
25|$|Carnot cycle graphs (above) {{should not}} be {{confused}} with Karnaugh maps in <b>boolean</b> <b>logic</b> and digital electronics.|$|E
25|$|The Z1 computer, {{which was}} {{designed}} and built by Konrad Zuse between 1935 and 1938, used <b>Boolean</b> <b>logic</b> and binary floating point numbers.|$|E
40|$|We {{introduce}} a new variant of dependence <b>logic</b> called <b>Boolean</b> dependence <b>logic.</b> In <b>Boolean</b> dependence <b>logic</b> dependence atoms are of the type =(x_ 1, [...] .,x_n,α), where α is a Boolean variable. Intuitively, with Boolean dependence atoms one can express quantification of relations, while standard dependence atoms express quantification over functions. We compare the expressive power of <b>Boolean</b> dependence <b>logic</b> to dependence logic and first-order logic enriched by partially-ordered connectives. We show that the expressive power of <b>Boolean</b> dependence <b>logic</b> and dependence logic coincide. We define natural syntactic fragments of <b>Boolean</b> dependence <b>logic</b> and show that they coincide with the corresponding fragments of first-order logic enriched by partially-ordered connectives with respect to expressive power. We then show that the fragments form a strict hierarchy. Comment: 41 page...|$|R
40|$|Introduction. Boolean rings (By x, +) and <b>Boolean</b> <b>logics</b> (= <b>Boolean</b> algebras) (B, n, *) though {{historically}} and conceptionally different, are equationally interdefinable {{in a familiar}} way [6]. With this equational interdefinability as motivation, Foster introduced and studied the theory of ring-logics. In this theory, a ring (or an algebra) R is studied modul...|$|R
50|$|Rete {{supports}} only <b>boolean,</b> {{first order}} <b>logic.</b>|$|R
25|$|In {{the early}} days of {{research}} into neurology, scientists realized that neurons fire in all-or-nothing pulses. Several researchers, such as Walter Pitts and Warren McCulloch, argued that neurons functioned similar to the way <b>Boolean</b> <b>logic</b> gates operate, and so could be imitated by electronic circuitry {{at the level of the}} neuron.|$|E
25|$|In the 1930s {{and working}} independently, American {{electronic}} engineer Claude Shannon and Soviet logician Victor Shestakov both showed a one-to-one {{correspondence between the}} concepts of <b>Boolean</b> <b>logic</b> and certain electrical circuits, now called logic gates, which are now ubiquitous in digital computers. They showed that electronic relays and switches can realize the expressions of Boolean algebra. This thesis essentially founded practical digital circuit design.|$|E
25|$|Quantum logic can be {{regarded}} as a kind of propositional logic suitable for understanding the apparent anomalies regarding quantum measurement, most notably those concerning composition of measurement operations of complementary variables. This research area and its name originated in the 1936 paper by Garrett Birkhoff and John von Neumann, who attempted to reconcile some of the apparent inconsistencies of classical <b>boolean</b> <b>logic</b> with the facts related to measurement and observation in quantum mechanics.|$|E
5000|$|... #Subtitle level 2: Comparison between <b>Boolean</b> {{and fuzzy}} <b>logic</b> rules ...|$|R
50|$|Anatoly Shalyto {{also has}} {{scientific}} results in <b>Boolean</b> functions and <b>Logic</b> Control.|$|R
40|$|AbstractWe {{introduce}} {{a class of}} coalgebraic models and a family of modal logics that support the specification of spatial properties of distributed applications. The evaluation of a formula yields a value in a suitable multi-valued algebraic structure, giving {{a measure of the}} satisfaction of a requirement, induced by the decomposition of a system into subsystems, meant as available resources. As semantic domain we consider certain algebraic structures, called c-semirings, that allow us to generalize <b>boolean</b> <b>logics</b> to the multi-valued case, while keeping a number of the axioms of boolean algebras. Under suitable conditions on the structure of c-semirings, we show that, even if our logical formalisms are equipped with spatial operators, the interpretation of formulas fully characterizes bisimilarity...|$|R
25|$|All of {{the laws}} treated {{so far have been}} for {{conjunction}} and disjunction. These operations have the property that changing either argument either leaves the output unchanged or the output changes {{in the same way as}} the input. Equivalently, changing any variable from 0 to 1 never results in the output changing from 1 to 0. Operations with this property are said to be monotone. Thus the axioms so far have all been for monotonic <b>Boolean</b> <b>logic.</b> Nonmonotonicity enters via complement ¬ as follows.|$|E
25|$|The nonexistence of free {{complete}} Boolean algebras can {{be traced}} to failure to extend the equations of <b>Boolean</b> <b>logic</b> suitably to all laws that should hold for infinitary conjunction and disjunction, in particular the neglect of distributivity in the definition of complete Boolean algebra. A complete Boolean algebra is called completely distributive when arbitrary conjunctions distribute over arbitrary disjunctions and vice versa. A Boolean algebra is a CABA if and only if it is complete and completely distributive, giving a third definition of CABA. A fourth definition is as any Boolean algebra isomorphic to a power set algebra.|$|E
25|$|LDP is a {{reactive}} programming language. It {{has been}} used to trigger debugging in the earlier research. With the addition of language that enables the programmer to build operations {{in the development of the}} shape of the matrix, it can be used to analyze the distributed local conditions. It can operate on fixed-size, connected groups of modules providing various functions of state configuration. A program that addresses a fixed-size module rather than the entire ensemble allows programmers to operate the claytronic matrix more frequently and efficiently. LDP further provides a means of matching distributed patterns. It enables the programmer to address a larger set of variables with <b>Boolean</b> <b>logic,</b> which enables the program to search for larger patterns of activity and behavior among groups of modules.|$|E
50|$|Interests: <b>Boolean</b> algebras, {{mathematical}} <b>logic,</b> functional analysis, {{theories of}} distribution, measure theory, general topology (descriptive set theory).|$|R
40|$|Course Contents Introduction to {{computer}} architecture. Number systems. <b>Boolean</b> algebra. <b>Logic</b> gates and flip flops. Combinational and sequential circuit design. Registers, counters. Bus transfer. RAM, ROM units. Instruction execution and hardwired control. Course Objectives Detailed knowledges about basics of logic circuits, analysis, synthesis and functio...|$|R
5000|$|Second-generation {{cognitive}} science {{emerged in the}} 1970s, after LoF was written. On {{cognitive science}} and its relevance to <b>Boolean</b> algebra, <b>logic,</b> and set theory, see Lakoff (1987) (see index entries under [...] "Image schema examples: container") and Lakoff and Núñez (2001). Neither book cites LoF.|$|R
25|$|The syllogistic logic {{developed}} by Aristotle predominated in the West until the mid-19thcentury, when {{interest in the}} foundations of mathematics stimulated the development of symbolic logic (now called mathematical logic). In 1854, George Boole published An Investigation of the Laws of Thought on Which are Founded the Mathematical Theories of Logic and Probabilities, introducing symbolic logic and the principles {{of what is now}} known as <b>Boolean</b> <b>logic.</b> In 1879, Gottlob Frege published Begriffsschrift, which inaugurated modern logic with the invention of quantifier notation. From 1910 to 1913, Alfred North Whitehead and Bertrand Russell published Principia Mathematica on the foundations of mathematics, attempting to derive mathematical truths from axioms and inference rules in symbolic logic. In 1931, Gödel raised serious problems with the foundationalist program and logic ceased to focus on such issues.|$|E
25|$|Logic {{sentences}} {{that can be}} expressed in classical propositional calculus have an equivalent expression in Boolean algebra. Thus, <b>Boolean</b> <b>logic</b> is sometimes used to denote propositional calculus performed in this way. Boolean algebra {{is not sufficient to}} capture logic formulas using quantifiers, like those from first order logic. Although the development of mathematical logic did not follow Boole's program, the connection between his algebra and logic was later put on firm ground in the setting of algebraic logic, which also studies the algebraic systems of many other logics. The problem of determining whether the variables of a given Boolean (propositional) formula can be assigned {{in such a way as}} to make the formula evaluate to true is called the Boolean satisfiability problem (SAT), and is of importance to theoretical computer science, being the first problem shown to be NP-complete. The closely related model of computation known as a Boolean circuit relates time complexity (of an algorithm) to circuit complexity.|$|E
25|$|Boole's {{work and}} that of later logicians {{initially}} appeared to have no engineering uses. Claude Shannon attended a philosophy class at the University of Michigan which introduced him to Boole's studies. Shannon recognised that Boole's work could {{form the basis of}} mechanisms and processes in the real world and that it was therefore highly relevant. In 1937 Shannon went on to write a master's thesis, at the Massachusetts Institute of Technology, in which he showed how Boolean algebra could optimise the design of systems of electromechanical relays then used in telephone routing switches. He also proved that circuits with relays could solve Boolean algebra problems. Employing the properties of electrical switches to process logic is the basic concept that underlies all modern electronic digital computers. Victor Shestakov at Moscow State University (1907–1987) proposed a theory of electric switches based on <b>Boolean</b> <b>logic</b> even earlier than Claude Shannon in 1935 on the testimony of Soviet logicians and mathematicians Sofya Yanovskaya, Gaaze-Rapoport, Roland Dobrushin, Lupanov, Medvedev and Uspensky, though they presented their academic theses in the same year, 1938. But the first publication of Shestakov's result took place only in 1941 (in Russian). Hence, Boolean algebra became the foundation of practical digital circuit design; and Boole, via Shannon and Shestakov, provided the theoretical grounding for the Information Age.|$|E
40|$|Recently, multi-attribute {{negotiation}} {{has been}} extensively studied from a game-theoretic viewpoint. Since normal and extensive form games have the drawback of requiring an explicit representation of utility functions (listing the utility values for all combinations of strategies), logical preference languages have been proposed, which provide a convenient way to compactly specify multiattribute utility functions. Among these preference languages, there are also Boolean games. In this paper, towards automated multi-attribute negotiation in the Semantic Web, we introduce <b>Boolean</b> description <b>logic</b> games, which are a combination of Boolean games with ontological background knowledge, formulated in expressive description logics. We include and discuss several generalizations, and show how a travel and a service negotiation scenario can be formulated in <b>Boolean</b> description <b>logic</b> games, which shows their practical usefulness. </p...|$|R
50|$|The minimal PoS and SoP {{forms are}} very {{important}} for finding optimal implementations of <b>boolean</b> functionsand minimizing <b>logic</b> circuits.|$|R
40|$|We {{introduce}} the branching transitive closure operator on weighted monadic second-order logic formulas where the branching corresponds {{in a natural}} way to the branching inherent in trees. For arbitrary commutative semirings, we prove that weighted monadic second order logics on trees {{is equivalent to the}} definability by formulas which start with one of the following operators: (i) a branching transitive closure or (ii) an existential second-order quantifier followed by one universal first-order quantifier; in both cases the operator is applied to step-formulas over (a) <b>Boolean</b> first-order <b>logic</b> enriched by modulo counting or (b) <b>Boolean</b> monadic-second order <b>logic...</b>|$|R
500|$|The {{search engine}} allows {{selection}} logic both within fields and between fields. [...] Search terms in each field {{can be combined}} with OR, AND, simple logic or <b>Boolean</b> <b>logic,</b> and the user can specify which fields must be matched in the search results. [...] This allows complex searches to be built; for example, the user could search for papers concerning NGC 6543 OR NGC 7009, with the paper titles containing (radius OR velocity) AND NOT (abundance OR temperature).|$|E
500|$|In modular arithmetic, {{the set of}} {{integers}} modulo 12 has twelve elements; it inherits {{an addition}} operation from the integers that is central to musical set theory. The set of integers modulo2 has just two elements; the addition operation it inherits is known in <b>Boolean</b> <b>logic</b> as the [...] "exclusive or" [...] function. In geometry, the sum of two angle measures is often taken to be their sum as real numbers modulo2π. This amounts to an addition operation on the circle, which in turn generalizes to addition operations on many-dimensional tori.|$|E
2500|$|<b>Boolean</b> <b>logic</b> as {{fundamental}} to computer hardware: particularly, the system's section B.2 on Arithmetic and logic structures, relating to operatives AND, ...|$|E
40|$|Abstract. Recently, multi-attribute {{negotiation}} {{has been}} extensively studied from a game-theoretic viewpoint. Since normal and extensive form games have the drawback of requiring an explicit representation of utility functions (listing the utility values for all combinations of strategies), logical preference languages have been proposed, which provide a conve-nient way to compactly specify multi-attribute utility functions. Among these preference languages, there are also Boolean games. In this paper, towards automated multi-attribute negotiation in the Semantic Web, we introduce <b>Boolean</b> description <b>logic</b> games, which are a combination of Boolean games with ontological background knowledge, formulated in expressive description logics. We include and discuss several generalizations, and show how a travel and a service negotiation scenario can be formulated in <b>Boolean</b> description <b>logic</b> games, which gives evidence of their practical usefulness...|$|R
40|$|AbstractWe {{extend the}} earlier {{results on the}} {{equivalence}} between the Boolean and the multivalued dependencies in relational databases and fragments of the <b>Boolean</b> propositional <b>logic.</b> It is shown that these equivalences are still valid for the databases that store complex data elements obtained from the recursive nesting of record, list, set and multiset constructors. The major proof argument utilises properties of Brouwerian algebras. The equivalences have several consequences. Firstly, they provide new insights into databases {{that are not in}} first normal form. Secondly, they characterise the implication of data dependencies in nested databases in purely logical terms. The database designer can take advantage of these equivalences to reduce database design problems to well-studied problems in <b>Boolean</b> propositional <b>logic.</b> Furthermore, relational database design solutions can be reused to solve problems for nested databases...|$|R
40|$|In this paper, {{we apply}} {{possibilistic}} reasoning to information retrieval for documents endowed with similarity relations. On the one hand, {{it is used}} together with Boolean models for accommodating possibilistic uncertainty. The logical uncertainty principle is then interpreted in the possibilistic framework. On the other hand, possibilistic reasoning is integrated into description logic and applied to some information retrieval problems, such as query relaxation, query restriction, and exemplar-based retrieval. Key words: Possibilistic <b>logic,</b> <b>Boolean</b> models, Description <b>logic,</b> Similaritybased reasoning. ...|$|R
2500|$|<b>Boolean</b> <b>logic</b> may be {{considered}} as a choice. [...] The Church encoding of true and false are functions of two parameters: ...|$|E
2500|$|Search engine queries also employ <b>Boolean</b> <b>logic.</b> For this application, each {{web page}} on the Internet may be {{considered}} to be an [...] "element" [...] of a [...] "set". The following examples use a syntax supported by Google.|$|E
2500|$|An {{important}} landmark of the Vedic {{period was}} the work of Sanskrit grammarian, [...] (c. 520–460 BCE). His grammar includes early use of <b>Boolean</b> <b>logic,</b> of the null operator, and of context free grammars, and includes a precursor of the Backus–Naur form (used in the description programming languages).|$|E
50|$|A wired logic {{connection}} is a logic gate that implements <b>boolean</b> algebra (<b>logic)</b> using only passive components such as diodes and resistors. A wired logic connection can create an AND or an OR gate. The limitations are {{the inability to}} create a NOT gate {{and the lack of}} level restoration.|$|R
50|$|Digital circuits: Boolean algebra, {{minimization}} of <b>Boolean</b> functions; <b>logic</b> gates digital IC families (DTL, TTL, ECL, MOS, CMOS). Combinational circuits: arithmetic circuits, code converters, multiplexers and decoders. Sequential circuits: latches and flip-flops, {{counters and}} shift-registers. Sample and hold circuits, ADCs, DACs. Semiconductor memories. Microprocessor(8085): architecture, programming, memory and I/O interfacing.|$|R
40|$|<b>Boolean</b> {{retrieval}} <b>logic</b> is {{the basis}} of most operating information retrieval systems (IRSs). There are many reasons why this type of system has been so attractive. For example, it allows users to issue requests in which the topics Of interest and the relations between them are clearly and precisely stated; th...|$|R
