0|66|Public
50|$|Problems with sending {{challenges}} to forged e-mail addresses can be greatly reduced by not {{creating a new}} message that contains the challenge. Instead, the challenge can {{be placed in the}} <b>Bounce</b> <b>message</b> when the receiving mail system gives a rejection-code during the SMTP session. When the receiving mail system rejects an e-mail this way, it is the sending system that actually creates the <b>bounce</b> <b>message.</b> As a result, the <b>bounce</b> <b>message</b> will almost always be sent to the real sender, and it will be in a format and language that the sender will usually recognize.|$|R
50|$|While <b>bounce</b> <b>message</b> formats {{in general}} vary wildly, {{there is one}} aspect of a <b>bounce</b> <b>message</b> that is highly predictable: the address to which it will be sent. VERP takes full {{advantage}} of this. In a mailing list that uses VERP, a different sender address is used for each recipient.|$|R
50|$|Measures {{to reduce}} the problem include {{avoiding}} {{the need for a}} <b>bounce</b> <b>message</b> by doing most rejections at the initial SMTP connection stage; and for other cases, sending <b>bounce</b> <b>messages</b> only to addresses which can be reliably judged not to have been forged, and in those cases the sender cannot be verified, thus ignoring the message (i.e., dropping it).|$|R
5000|$|From this <b>bounce</b> <b>message</b> {{the mailing}} list manager can deduce that {{a message to}} [...] must have failed.|$|R
50|$|If {{any sort}} of <b>bounce</b> <b>message</b> or {{anti-virus}} warning gets sent to a forged email address, {{the result will be}} backscatter.|$|R
50|$|Mail servers sending email <b>bounce</b> <b>messages</b> {{can use a}} {{range of}} {{measures}} to judge whether a return address has been forged.|$|R
50|$|The {{mailing list}} manager {{knows that it}} sent a message from X to Y, so if a <b>bounce</b> <b>message</b> is {{received}} at address X, {{it can only be}} because address Y was undeliverable, because nothing was sent from X to any other destination. Thus the important information has been extracted from the <b>bounce</b> <b>message,</b> without any need to understand its contents, which means the person in charge of the list does not need to deal with it manually.|$|R
5000|$|A <b>bounce</b> <b>message</b> or just [...] "bounce" [...] is an {{automated}} e-mail message from a mail system, informing the sender {{of a previous}} message that that message had not been delivered (or some other delivery problem occurred). The original message {{is said to have}} [...] "bounced". More formal terms for <b>bounce</b> <b>message</b> include [...] "Non-Delivery Report" [...] or [...] "Non-Delivery Receipt" [...] (NDR), Failed [...] "Delivery Status Notification" [...] (DSN) message, or a [...] "Non-Delivery Notification" [...] (NDN).|$|R
50|$|For various reasons, {{particularly}} forged spam and email viruses, users {{may receive}} erroneous <b>bounce</b> <b>messages</b> sent {{in response to}} messages they never actually sent.|$|R
50|$|The library.example {{mail server}} then must send a <b>bounce</b> <b>message</b> to jack@store.example, informing Jack that his message to Jill's mailbox {{could not be}} delivered.|$|R
5000|$|Typically, a <b>bounce</b> <b>message</b> {{will contain}} several pieces of {{information}} to help the original sender in understanding the reason his message was not delivered: ...|$|R
50|$|When {{a message}} {{is sent to}} a mailing list, the mailing list {{software}} re-sends it {{to all of the}} addresses on the list. The presence of invalid addresses in the list results in <b>bounce</b> <b>messages</b> being sent to the owner of the list. If the mailing list is small, the owner can read the <b>bounce</b> <b>messages</b> and manually remove the invalid addresses from the list. With a larger mailing list, this is a tedious, unpleasant job, so it is desirable to automate the process.|$|R
50|$|Backscatter (also {{known as}} outscatter, {{misdirected}} bounces, blowback or collateral spam) is incorrectly automated <b>bounce</b> <b>messages</b> sent by mail servers, typically {{as a side}} effect of incoming spam.|$|R
50|$|The {{hard part}} of bounce {{handling}} is matching up a <b>bounce</b> <b>message</b> with the undeliverable address {{that caused the}} bounce. If the mailing list software can see that a bounce resulted from an attempt {{to send a message}} to user@example.com then it doesn't need to understand the rest of the information in the bounce. It can simply count how many messages were recently sent to user@example.com, and how many bounces resulted, and if the proportion of <b>bounced</b> <b>messages</b> is too high, the address is removed from the list.|$|R
5000|$|<b>Bounce</b> <b>messages</b> in SMTP {{are sent}} with the {{envelope}} sender address , {{known as the}} null sender address. They are frequently sent with a [...] header address of [...] at the recipient site.|$|R
50|$|RFC 5321, {{as well as}} RFC 2821, {{states that}} {{non-delivery}} reports (bounces) must {{be sent to the}} originator as indicated in the reverse path after an MTA accepted the responsibility for delivery. However, the <b>bounce</b> <b>message</b> may be suppressed when the original content is hostile (cf. spam or virus mail) or the message is forged (RFC 5321, Section 6). Note that all current forgery detection methods require the mailbox owner to supply information for them to work. Failing to supply the criteria should not make any <b>bounce</b> <b>message</b> classifiable as backscatter, although some people mistakenly think it should.|$|R
5000|$|... bounce address - When {{an email}} {{can not be}} delivered, the MTA will create a <b>bounce</b> <b>message</b> {{and send it to}} the address given by the MAIL FROM command. Used in RFC 4406.|$|R
50|$|Channel email {{is a new}} {{proposal}} for sending email that attempts to distribute anti-spam activities by forcing verification (probably using <b>bounce</b> <b>messages</b> so back-scatter doesn't occur) when the first email is sent for new contacts.|$|R
5000|$|While its {{original}} usage {{was to provide}} information about how to return <b>bounce</b> <b>messages,</b> since the late 1990s, other uses have come about. These typically take advantage of properties of the bounce address, such as: ...|$|R
50|$|Unfortunately, most <b>bounce</b> <b>messages</b> have {{historically}} been designed to be read by human users, not automatically handled by software. They all convey the same basic idea (the message from X to Y could not be delivered because of reason Z) but with so many variations {{that it would be}} nearly impossible to write a program to reliably interpret the meaning of every <b>bounce</b> <b>message.</b> RFC 1894 (obsoleted by RFC 3464) defines a standard format to fix this problem, but support for the standard is far from universal. However, there are several common formats (e.g., RFC 3464, qmail's qsbmf, and Microsoft's DSN format for Exchange) that cover large proportion of bounces.|$|R
5000|$|Bounce. A {{receiving}} server can initially {{accept the}} full message, but then determine {{that it is}} spam or to a non-existent recipient, and generate a <b>bounce</b> <b>message</b> back to the supposed sender indicating that message delivery failed.|$|R
50|$|Critics of C/R {{systems have}} raised several issues {{regarding}} their usefulness as an email defense. A {{number of these}} issues relate to all programs which auto-respond to E-mail, including mailing list managers, vacation programs and <b>bounce</b> <b>messages</b> from mail servers.|$|R
50|$|Backscatter is a side-effect of email spam, viruses, and worms. It {{happens when}} email servers are mis-configured {{to send a}} <b>bounce</b> <b>messages</b> to the {{envelope}} sender when rejecting or quarantining email (rather than simply rejecting the attempt to send the message).|$|R
50|$|Imagine that Jack (jack@store.example) sends {{a message}} to Jill (jill@library.example) at a {{different}} site. Once Jack's mail server has accepted the message, it must either pass it along to Jill's mail server, or else deposit a <b>bounce</b> <b>message</b> in Jack's mailbox.|$|R
50|$|If a {{receiving}} server initially fully accepts an email, {{and only}} later determines {{that the message}} is spam or to a non-existent recipient, it will generate a <b>bounce</b> <b>message</b> back to the supposed sender. However, if (as {{is often the case}} with spam), the sender information on the incoming email was forged to be that of an unrelated third party then this <b>bounce</b> <b>message</b> is backscatter spam. For this reason it is generally preferable for most rejection of incoming email to happen during the SMTP connection stage, with a 5xx error code, while the sending server is still connected. In this case then the sending server will report the problem to the real sender cleanly.|$|R
50|$|NDRs are a basic SMTP function. As soon as an MTA has {{accepted}} a mail for forwarding or delivery it cannot silently delete ("drop") it; {{it has to}} create and send a <b>bounce</b> <b>message</b> to the originator if forwarding or delivery failed.|$|R
50|$|In computing, Bounce Address Tag Validation (BATV) is a method, {{defined in}} an Internet Draft, for {{determining}} whether the bounce address specified in an E-mail message is valid. It {{is designed to}} reject backscatter, that is, <b>bounce</b> <b>messages</b> to forged return addresses.|$|R
50|$|However, {{problems}} arise if Jill's mail server receives a message with a forged Return-Path, e.g., if spammer@example.net sends an unsolicited bulk message {{claiming to be}} from jack@store.example. In this case, Jill's mail server would send the <b>bounce</b> <b>message</b> to Jack even though Jack never sent the original message to Jill. This is called backscatter.|$|R
50|$|A bounce {{address is}} an email address to which <b>bounce</b> <b>messages</b> are delivered. There are many {{variants}} of the name, {{none of them}} used universally, including return path, reverse path, envelope from, envelope sender, MAIL FROM, 5321-FROM, return address, From_, Errors-to, etc. It {{is not uncommon for}} a single document to use several of these names.|$|R
50|$|During {{the initial}} SMTP connection, mailservers {{can do a}} range of checks, and often reject email with a 5xx error code while the sending server is still connected. Rejecting a message at the connection-stage in this way will usually cause the sending MTA to {{generate}} a local <b>bounce</b> <b>message</b> or Non-Delivery Notification (NDN) to a local, authenticated user.|$|R
5000|$|Another {{possibility}} is {{to store the}} long rewritten address somewhere in the message header. The i= tag of a DKIM-Signature {{may be a good}} place, as such choice considerably improves the security. This technique has been just observed. [...] Unless there is a backup mechanism, it can only work if the <b>bounce</b> <b>message</b> is in a standard format.|$|R
5000|$|The first autoresponders {{were created}} within mail {{transfer}} agents that found {{they could not}} deliver an e-mail to a given address. These create <b>bounce</b> <b>messages</b> such as [...] "your e-mail could not be delivered because..." [...] type responses. Today's autoresponders {{need to be careful}} to not generate e-mail backscatter, which can result in the autoresponses being considered E-mail spam.|$|R
50|$|Besides the {{intermediate}} reply for DATA, each server's reply {{can be either}} positive (2xx reply codes) or negative. Negative replies can be permanent (5xx codes) or transient (4xx codes). A reject is a permanent failure and the client should send a <b>bounce</b> <b>message</b> to the server it received it from. A drop is a positive response followed by message discard rather than delivery.|$|R
5000|$|Last but {{not least}} {{forwarding}} to another address always worked by rewriting the address in the forward path also known as RCPT TO, {{if and only if}} the forwarding MTA accepted the responsibility for both forwarding the mail and returning potential <b>bounce</b> <b>messages</b> to the sender. RFC 821 and all later SMTP specifications offer two result codes for this situation: ...|$|R
50|$|A closely allied concept isofferedby the Exim mail {{transfer}} agent. When operating as a forwarder the onward connection {{can be made}} to the destination while the source connection is still open.This permits data-time rejection (due, for example, to content-scanning) by the target MTA to be notified to the source MTA within the SMTP connection,rather than the traditional <b>bounce</b> <b>message</b> necessitated by the more usual store-and-forward operation.|$|R
5000|$|ESMTP {{requires}} a single status {{for the entire}} message body. LMTP {{requires a}} response for each previously successful RCPT command. That is, in case of multiple recipients, after {{the body of the}} message has been transmitted, LMTP can still fail for some recipient while succeeding for the others. With this facility, LMTP can fail if a user is over quota without the burden of generating <b>Bounce</b> <b>messages.</b>|$|R
