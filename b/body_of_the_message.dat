90|10000|Public
2500|$|The prelude, introduction, or call-up of a {{transmission}} (from which stations' informal nicknames are often derived) includes {{some kind of}} identifier, for the station itself, the intended recipient, or both. This can {{take the form of}} numeric or radio-alphabet [...] "code names" [...] (e.g. [...] "Charlie India Oscar", [...] "250 250 250", [...] "Six-Niner-Zero-Oblique-Five-Four"), characteristic phrases (e.g. [...] "¡Atención!", [...] "Achtung!", [...] "Ready? Ready?", [...] "1234567890"), and sometimes musical or electronic sounds (e.g. [...] "The Lincolnshire Poacher", [...] "Magnetic Fields"). Sometimes, {{as in the case of}} an radio-alphabet stations, the prelude can also signify the nature or priority of the message to follow (e.g., it may indicate that no message follows). Often the prelude repeats for a period before the <b>body</b> <b>of</b> <b>the</b> <b>message</b> begins.|$|E
2500|$|First {{discovered}} in 2009, the HTTP POST attack sends a complete, legitimate HTTP POST header, {{which includes a}} 'Content-Length' field to specify {{the size of the}} message body to follow. However, the attacker then proceeds to send the actual message body at an extremely slow rate (e.g. 1 byte/110 seconds). Due to the entire message being correct and complete, the target server will attempt to obey the 'Content-Length' field in the header, and wait for the entire <b>body</b> <b>of</b> <b>the</b> <b>message</b> to be transmitted, which can take a very long time. The attacker establishes hundreds or even thousands of such connections, until all resources for incoming connections on the server (the victim) are used up, hence making any further (including legitimate) connections impossible until all data has been sent. It is notable that unlike many other (D)DoS attacks, which try to subdue the server by overloading its network or CPU, a HTTP POST attack targets the logical resources of the victim, which means the victim would still have enough network bandwidth and processing power to operate. Further combined with the fact that Apache will, by default, accept requests up to 2GB in size, this attack can be particularly powerful. HTTP POST attacks are difficult to differentiate from legitimate connections, and are therefore able to bypass some protection systems. OWASP, an open source web application security project, has released a [...] to test the security of servers against this type of attacks.|$|E
5000|$|... <-- send {{an email}} {{with the result}} of the last CLI command in the <b>body</b> <b>of</b> <b>the</b> <b>message</b> ...|$|E
50|$|It {{is normal}} {{practice}} to broadcast the Sécurité call itself on a distress and listening frequency such as VHF Channel 16 or MF 2182 kHz, and then change frequency to a working channel for <b>the</b> <b>body</b> <b>of</b> <b>the</b> <b>messages.</b> An equivalent Morse code signal is TTT, with each letter sent distinctly.|$|R
30|$|The application/lp-sip content-type {{has been}} defined to include a new type <b>of</b> content in <b>the</b> <b>body</b> <b>of</b> <b>the</b> SIP <b>messages.</b> This content is a message {{associated}} to some <b>of</b> <b>the</b> LP-SIP processes. These messages are defined in Abstract Syntax Notation One (ASN. 1) and we make use of some existing structures, defined as X. 509 certificates or the PKCS# 7 /CMS format, to convey cryptographic information. <b>The</b> <b>messages</b> should be encoded according to distinguished encoding rules and then converted to its Base 64 format {{in order to be}} conveyed in <b>the</b> <b>body</b> <b>of</b> <b>the</b> SIP <b>message.</b>|$|R
50|$|As {{part of a}} POST request, an {{arbitrary}} amount of data of any type {{can be sent to}} the server in <b>the</b> <b>body</b> <b>of</b> <b>the</b> request <b>message.</b> A header field in the POST request usually indicates <b>the</b> <b>message</b> body's Internet media type.|$|R
5000|$|... {{their real}} names, but not their email addresses, can be {{listed in the}} <b>body</b> <b>of</b> <b>the</b> <b>message,</b> or ...|$|E
50|$|It also {{accepted}} commands sent via email; {{any number}} of commands would {{be put in the}} <b>body</b> <b>of</b> <b>the</b> <b>message.</b>|$|E
5000|$|The {{content in}} the <b>body</b> <b>of</b> <b>the</b> <b>message</b> is {{specified}} by (tag 35, [...] ) message type defined in the header [...]|$|E
50|$|The script {{operates}} by iteratively {{reading all}} the form fields from the submitted form via the form ACTION tag. Next the script begins {{to build an}} e-mail <b>message</b> from <b>the</b> submitted fields, typically concatenating the name and value of each submitted form field in <b>the</b> <b>body</b> <b>of</b> <b>the</b> email <b>message.</b>|$|R
50|$|When a new mail <b>message</b> is delivered, <b>the</b> program biff alerts the {{recipient}} {{so they can}} read it immediately. The alert {{is sent to the}} tty where {{the recipient}} is logged in, and contains the Subject, From line, and first few lines <b>of</b> <b>the</b> <b>body</b> <b>of</b> <b>the</b> new <b>message.</b> <b>The</b> alert also includes terminal beeps to guarantee quick attention.|$|R
30|$|A payment {{protocol}} {{that supports}} making <b>the</b> payment <b>of</b> real-time services based on SIP should satisfy two main requirements. First, the protocol {{should be a}} micropayment protocol since these kind of protocols allow payments of (very) low value amounts [13, 17, 18] and are characterized because they try to reduce <b>the</b> number <b>of</b> asymmetric cryptographic operations, <b>the</b> number <b>of</b> exchanges and <b>the</b> participation <b>of</b> third parties [13, 17 – 20]. Thus, the protocol {{can be used to}} make payment of real-time services. Second, <b>the</b> incorporation <b>of</b> payment in SIP should be based on the extensibility mechanisms defined by this protocol [1, 12, 21] in order to avoid high costs of development and SIP overheads, that is, it should be based only on <b>the</b> introduction <b>of</b> new headers, contents for <b>the</b> <b>body</b> <b>of</b> <b>the</b> <b>messages</b> and tags [21].|$|R
5000|$|SOAP body : Contains the <b>body</b> <b>of</b> <b>the</b> <b>message</b> {{intended}} for the SOAP receiver. The interpretation and processing of SOAP body is defined by header blocks.|$|E
5000|$|... a {{meaningful}} {{substitute for the}} names can {{be placed in the}} <b>body</b> <b>of</b> <b>the</b> <b>message,</b> e.g. ‘General Manager and members of Remunerations Committee’, or ‘the whole Bloggs family’.|$|E
5000|$|Routing: Messages {{need to be}} routed {{efficiently}} {{from the}} sender to the receiver. Intermediate nodes may need to route the messages if the <b>body</b> <b>of</b> <b>the</b> <b>message</b> is encrypted.|$|E
50|$|In {{order to}} obtain even shorter SIP {{messages}} and make a very efficient use <b>of</b> <b>the</b> resources, the content indirection extension {{makes it possible to}} replace a MIME <b>body</b> part <b>of</b> <b>the</b> <b>message</b> with an external reference, typically an HTTP URI. This way <b>the</b> recipient <b>of</b> <b>the</b> <b>message</b> can {{decide whether or not to}} follow the reference to fetch the resource, depending on the bandwidth available.|$|R
50|$|In computing, POST is {{a request}} method {{supported}} by the HTTP protocol used by the World Wide Web. By design, the POST request method requests that a web server accept the data enclosed in <b>the</b> <b>body</b> <b>of</b> <b>the</b> request <b>message,</b> most likely for storing it. It is often used when uploading a file or when submitting a completed web form.|$|R
30|$|In this section, we {{describe}} methods used for identifying groups of similar 419 scam emails that {{are believed to}} be part <b>of</b> <b>the</b> campaigns and then present the results. We use two different metrics to evaluate the quality and consistency <b>of</b> <b>the</b> created clusters (campaigns). Finally, we extract the most repetitive keywords from <b>the</b> <b>body</b> <b>of</b> <b>the</b> scam <b>messages</b> in order to improve their topic categorization.|$|R
5000|$|Message body {{semantics}} [...] - [...] Message body semantics {{include the}} precise definition {{of all of}} the data elements in the <b>body</b> <b>of</b> <b>the</b> <b>message.</b> Message semantics can be aided by the use of a precise data dictionary that documents metadata.|$|E
50|$|An email {{is sent to}} a FTPmail server {{with the}} command to be performed, {{inserted}} as the <b>body</b> <b>of</b> <b>the</b> <b>message.</b> The server then processes the request by logging on to the remote site, retrieving the file, encoding it, and returning the result via email.|$|E
5000|$|The MIME {{multipart}} message {{contains a}} boundary in the [...] "Content-Type: [...] " [...] header; this boundary, which must {{not occur in}} any of the parts, is placed between the parts, and {{at the beginning and end}} of the <b>body</b> <b>of</b> <b>the</b> <b>message,</b> as follows: ...|$|E
5000|$|The [...] {{header field}} {{consists}} of a list of [...] parts. Tags are short, usually {{only one or two}} letters. The most relevant ones are b for the actual digital signature <b>of</b> <b>the</b> contents (headers and <b>body)</b> <b>of</b> <b>the</b> mail <b>message,</b> bh for <b>the</b> body hash, d for the signing domain, and s for the selector. The default parameters for the authentication mechanism are to use SHA-256 as the cryptographic hash and RSA as the public key encryption scheme, and encode the encrypted hash using Base64.|$|R
5000|$|Presence documents. The {{presence}} {{information is}} coded in XML documents, that are carried in <b>the</b> <b>bodies</b> <b>of</b> <b>the</b> respective SIP <b>messages.</b> RFC 3863 and RFC 4479 describe this procedure, RFC 4480 (RPID), RFC 4481, RFC 4482 (CPID) and various drafts describe contents and formats <b>of</b> <b>the</b> presence documents.|$|R
50|$|<b>The</b> journal <b>message</b> contains, at a minimum, the {{following}} information: a copy <b>of</b> <b>the</b> content <b>of</b> <b>the</b> actual <b>message,</b> any related metadata such as time, date, and individuals {{involved in the}} communication. More information may be included, such as a physical location <b>of</b> <b>the</b> <b>message</b> originator/recipient(s), a computer identifier <b>of</b> <b>the</b> <b>message</b> originator/recipient(s), or a class/category <b>of</b> <b>message.</b> <b>The</b> journal <b>message</b> should maintain <b>the</b> same transport format as <b>the</b> actual <b>message</b> so that existing communication infrastructure can be utilized. For example, an e-mail journaling message will, itself, be an e-mail <b>message</b> containing <b>the</b> journaling information as either attachments or in <b>the</b> <b>body</b> <b>of</b> <b>the</b> journaling <b>message</b> and {{may be in the}} MIME format.|$|R
50|$|All {{of these}} status codes require the URL of the {{redirect}} target {{to be given}} in the Location: header of the HTTP response. The 300 multiple choices will usually list all choices in the <b>body</b> <b>of</b> <b>the</b> <b>message</b> and show the default choice in the Location: header.|$|E
50|$|A newgroup {{message is}} issued {{to create a}} new Usenet newsgroup. The body of the Control field {{contains}} one mandatory argument, the name of the new group. The second argument is optional. If present it consists of the keyword moderated. The <b>body</b> <b>of</b> <b>the</b> <b>message</b> typically contains tagline, charter and rationale.|$|E
50|$|For each message, the {{operator}} would choose a three-letter message key to encrypt the <b>body</b> <b>of</b> <b>the</b> <b>message.</b> The intention was for this key to be random, {{and using a}} random key for each message was a good security practice. The message key needed to be communicated to the recipient so the recipient could decrypt the message.|$|E
30|$|This section {{describes}} the extensions we have defined in SIP {{to support the}} LP-SIP protocol. It is {{important to point out}} that our extensions are based on the extensibility mechanisms defined in SIP. Namely, our proposal is based on three kinds of elements. Firstly, on <b>the</b> definition <b>of</b> new options-tags for different headers of SIP messages: Required, Supported, and Accept. Second, <b>the</b> definition <b>of</b> a new header named LP-SIP for conveying information related to a payment transaction. Finally, we have defined a new type <b>of</b> content for <b>the</b> <b>body</b> <b>of</b> <b>the</b> SIP <b>messages.</b> This new content conveys <b>the</b> <b>messages</b> that we have defined for <b>the</b> different exchanges <b>of</b> LP-SIP. Next, we describe each of these elements in more detail.|$|R
50|$|The {{preconditions}} SIP extension affects both SIP, {{with a new}} option tag (precondition) {{and defined}} offer/answer exchanges, and Session Description Protocol (SDP), which is a format used to describe streaming media initialization parameters, carried in <b>the</b> <b>body</b> <b>of</b> SIP <b>messages.</b> <b>The</b> new SDP attributes are meant to describe <b>the</b> current status <b>of</b> <b>the</b> resource reservation, <b>the</b> desired status <b>of</b> <b>the</b> reservation to proceed with session establishment, and the confirmation status, to indicate when the reservation status should be confirmed.|$|R
40|$|Status of this Memo This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to <b>the</b> current edition <b>of</b> <b>the</b> "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2002). All Rights Reserved. HTTP/ 1. 1 defines a Content-MD 5 header that allows a server to include a digest <b>of</b> <b>the</b> response <b>body.</b> However, this is specifically defined to cover <b>the</b> <b>body</b> <b>of</b> <b>the</b> actual <b>message,</b> not <b>the</b> contents <b>of</b> <b>the</b> full file (which might be quite different, if the response is a Content-Range, or uses a delta encoding). Also, the Content-MD 5 is limited to one specific digest algorithm; other algorithms, such as SHA-...|$|R
5000|$|If a Transfer-Encoding {{field with}} a value of [...] "chunked" [...] is {{specified}} in an HTTP message (either a request sent by a client or the response from the server), the <b>body</b> <b>of</b> <b>the</b> <b>message</b> consists of an unspecified number of chunks, a terminating chunk, trailer, and a final CRLF sequence (i.e. carriage return followed by line feed).|$|E
5000|$|When HTML form data is sent in an HTTP GET request, it is {{included}} in the query component of the request URI using the same syntax described above. When sent in an HTTP POST request or via email, the data is placed in the <b>body</b> <b>of</b> <b>the</b> <b>message,</b> and [...] {{is included}} in the message's Content-Type header.|$|E
5000|$|Attaching non-text files {{was first}} done in 1980 by {{manually}} encoding 8-bit files using Mary Ann Horton's uuencode, and later using BinHex or xxencode and pasting the resulting text into the <b>body</b> <b>of</b> <b>the</b> <b>message.</b> When the [...] "Attachment" [...] user interface {{first appeared on}} PCs in cc:Mail around 1985, it used the uuencode format for SMTP transmission, as did Microsoft Mail later.|$|E
3000|$|... 419 scam.org[4], as {{mentioned}} before, categorizes the scam emails into 10 categories. We presented their {{shares in the}} dataset in Section 3. Since the provided categorization is rather general, we wanted to evaluate by ourselves the scam categories present in our dataset by measuring the word frequencies in <b>the</b> <b>body</b> <b>of</b> <b>the</b> scam <b>messages.</b> Hence, to extract some additional knowledge from the clustered data, we create a list <b>of</b> <b>the</b> most repetitive keywords (after removing all stop words) and group them into meaningful categories. Stop words are ‘words which are filtered out prior to, or after, processing of natural language data’ [34]. Examples of such words in English could be short function words as the following: a, which, this, was, etc. By removing such words from the text, we took into account only words containing some knowledge about the topic discussed in <b>the</b> <b>message.</b>|$|R
40|$|Thompson [1]. Importantly, SciFly {{does not}} just present pre-configured content, but {{dynamically}} adjusts {{the amount and}} detail of content based on <b>the</b> range <b>of</b> topics selected, <b>the</b> structure <b>of</b> <b>the</b> information to be presented and <b>the</b> constraints <b>of</b> <b>the</b> delivery medium. In particular, the rhetorical structure information allows SciFly {{to ensure that the}} information presented remains coherent and consistent even when adapted to the available space and different output devices. Results: SciFly simultaneously prints and emails the tailored flyer to the user, along with a condensed, plain text summary <b>of</b> <b>the</b> flyer in <b>the</b> <b>body</b> <b>of</b> <b>the</b> email <b>message.</b> Thus users receive information relevant to their interests, <b>the</b> presentation <b>of</b> which is adapted to suit the different output devices. Specifically, users can receive a: Double-sided paper flyer as a physical flyer for immediate perusal; PDF document for electronic delivery and later reference; and Plain text summary for mobile device...|$|R
40|$|E-mail {{has proven}} to be an {{important}} tool, but <b>the</b> sheer volume <b>of</b> e-mail <b>messages</b> and <b>the</b> emergence <b>of</b> unsolicited e-mail hamper e-mail use. Routing important or urgent e-mail quickly and efficiently can be difficult because common filtering decisions used to separate wanted e-mail from unwanted are based only on information contained in the e-mail, such as the To, From, Subject, and <b>Body</b> portions <b>of</b> <b>the</b> <b>message.</b> This investigation resulted in the design and development of a model, method, and apparatus to apply directory-held information and policies to e-mail filtering and routing decisions. The policies are expressed in Extensible Markup Language (XML) statements and expand filtering and routing decision sources to include information contained in the directory as well as information contained in the e-mail. The prototype apparatus developed, <b>the</b> <b>Message</b> Filtering and Routing Agent (MeFRA), does not replace existing filtering mechanisms but adds an additional means for handling messages. MeFRA policies are stored in a network directory in XML fragments that are assembled by the MeFRA system into a valid XML document. This XML document is then processed using standard XML Document Object Model mechanisms and executed by MeFRA. MeFRA uses the Microsoft Active Directory as the repository for directory information and MeFRA policies. MeFRA operates as an agent program working in conjunction with the Microsoft Outlook 2003 e-mail program and Microsoft Exchange Server 2003 e-mail system. MeFRAiswritteninMicrosoftVisualBasic. NET...|$|R
