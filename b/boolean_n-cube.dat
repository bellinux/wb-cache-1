10|4|Public
50|$|Thiel's first {{career was}} in product design, working at Hewlett-Packard Data Terminals Division. She later worked at Thinking Machines Corporation with Danny Hillis, Richard Feynman and Brewster Kahle, heading the design team {{that created the}} <b>boolean</b> <b>n-cube</b> {{hypercube}} chassis that defined the Connection Machine CM-1 and CM-2 supercomputers' appearance.|$|E
40|$|AbstractIn this paper, the {{well-known}} <b>Boolean</b> <b>n-cube</b> networks are {{extended to the}} generalized <b>Boolean</b> <b>n-cube</b> networks {{which are based on}} a mixed radix number system. Although a classic theorem—the matrix tree theorem—can compute the number of spanning trees of any graph, however, we derive a simple formula for this general structure...|$|E
40|$|Dedicated to the 80 th {{birthday}} of Professor Frank Harary Molecular shape equivalence classes defined {{with respect to}} equivalence of geometrical and topological properties are represented by logical models. Consequently, the factor space of molecular shapes is provided by a metric useful in shape comparisons. KEY WORDS: molecular shape, logical models, <b>Boolean</b> <b>n-cube,</b> pattern recognition 1...|$|E
40|$|A few {{concurrent}} algorithms for {{the basic}} conjugate gradient method is devised and discussed. Most of the algorithms have a topology that is naturally determined by characteristic dimensions {{of the system and}} the operations of each step of the conjugate gradient method. The topologies map well onto buildable structures of sparsely interconnected processors while preserving unit communication distance. The topology of the algorithms are: 1) A binary tree 2) A composition of a binary tree and a ring the nodes of which forms the leaves of the tree. 3) A linear array with some additional processing elements. It is also discussed how these algorithms maps onto <b>Boolean</b> <b>n-cubes.</b> The algorithms all have the property that a communication operation is associated with each computation. No claim is made as to the optimality from a space-time complexity point of the algorithms presented here. However, the processor utilization for some algorithms and topologies are close to 100 % and the space*time complexity of those algorithms are of the same order as the arithmetic complexity of common sequential machine algorithms...|$|R
40|$|In a {{hypercube}} multiprocessor with distributed memory, each {{data element}} has a street address and an apartment number (i. e. a hypercube node address {{and a local}} memory address). We describe an optimal algorithm for performing the all-to-some personalized communication (ASPC) on <b>Boolean</b> <b>n-cubes,</b> defined as (ijj) ! (i Σ 2 j jj), i 2 [0; 2 n Γ 1], j 2 [0; n Γ 1], where (ijj) denote the data element on node i and location j. The algorithm also gives an optimal schedule for emulating PM 2 I networks on hypercubes under the binary-reflected Gray code encoding. We also study an important class of parallel algorithms, called Σ 2 b -descend, which perform log M iterations on an M-element input a[0 : M Γ 1]. For b = log M Γ 1; :::; 0, iteration b computes new values of each a[i] {{as a function of}} a[i]; a[i + 2 b]; a[i Γ 2 b]. For large applications, the problem size M is typically much larger than the number of nodes N. We show that on hypercubes, [...] ...|$|R
40|$|In a {{hypercube}} multiprocessor with distributed memory, each {{data element}} has a street address and an apartment number (i. e. a hypercube node address {{and a local}} memory address). We describe an optimal algorithm for performing the all-to-somepersonalized communication (ASPC) on <b>Boolean</b> <b>n-cubes,</b> defined as (ijj) ! (i 2 jjj), i 2 [0; 2 n, 1], j 2 [0;n, 1], where(ijj) denote the data element on node i and location j. The algorithm also gives an optimal schedule for emulating PM 2 I networks on hypercubes under the binary-reflected Gray code encoding. We also study an important class of parallel algorithms, called 2 b-descend, which perform log M iterations on an M-element input a[0 : M, 1]. For b = log M, 1;:::; 0, iteration b computes new values of each a[i] {{as a function of}} a[i];a[i+ 2 b];a[i, 2 b]. For large applications, the problem size M is typically much larger than the number of nodes N. We show that on hypercubes, the optimal ASPC algorithm devised in this paper can be used in combination with pipelining communication and computation in 2 b-from 2 log N M N descend computations to reduce the communication steps M to 4 (log M +, 1). At one commu-N nication step, a hypercube node can send n elements along its n links, one per link. 1...|$|R
40|$|We {{consider}} {{the class of}} bases B of tropical Plücker functions on the <b>Boolean</b> <b>n-cube</b> such that B {{can be obtained by}} a series of flips from the basis formed by the intervals of the ordered set of n elements. We show that these bases are representable by special wiring diagrams and by certain arrangements generalizing rhombus tilings on a zonogon...|$|E
40|$|A {{coloring}} of the <b>Boolean</b> <b>n-cube</b> {{is called}} perfect if, for every vertex x, {{the collection of}} the colors of the neighbors of x depends only on the color of x. A Boolean function is called correlation-immune of degree n-m if it takes the value 1 the same number of times for each m-face of the <b>Boolean</b> <b>n-cube.</b> In the present paper it is proven that each Boolean function χ^S (S⊂ E^n) satisfies the inequality nei(S) + 2 (cor(S) + 1) (1 -ρ(S)) ≤ n, where cor(S) is the maximum degree of the correlation immunity of χ^S, nei (S) = 1 /|S|∑_x∈ S|B(x) ∩ S|- 1 is the average number of neighbors in the set S for vertices in S, and ρ(S) =|S|/ 2 ^n is the density of the set S. Moreover, the function χ^S is a perfect coloring if and only if we obtain an equality in the above formula. Keywords: hypercube, perfect coloring, perfect code, correlation-immune function. Comment: 5 page...|$|E
40|$|AbstractWe {{consider}} coverings of the <b>Boolean</b> <b>n-cube</b> Bn={ 0, 1 }n {{by families}} of its subsets {{of the special}} form which are called centered antichains. Each such subset consists of pairwise incomparable strings which {{have at least one}} common unit component; the collection of centered antichains also includes the one-element set containing the only string 0 ̃n consisting entirely of zeros. It is established that for each n⩾ 1 the minimum number of centered antichains, the union of which covers the n-cube, equals n⌊log 2 n⌋+ 2 (n− 2 ⌊log 2 n⌋) + 2. For each n, a minimal covering is constructed in an explicit form...|$|E
40|$|Weights of 1 or 0 are {{assigned}} to the vertices of the n-cube in n-dimensional Euclidean space. Such an n-cube is called balanced if its center of mass coincides precisely with its geometric center. The seldom-used n-variable form of P'olya's enumeration theorem is applied to express the number N n; 2 k of balanced configurations with 2 k vertices of vertices of weight 1 in terms of certain partitions of 2 k. A system of linear equations of Vandermonde type is obtained, from which recurrence relations are derived which are computationally efficient for fixed k. It is shown how the numbers N n; 2 k depend on the numbers A n; 2 k of specially restricted configurations. A table of values of N n; 2 k and A n; 2 k is provided for n = 3; 4; 5 and 6. The case in which arbitrary, non-negative, integral weights are allowed is also treated. Finally, alternative derivations of the main results are developed {{from the perspective of}} superposition. Key words. <b>n-cube,</b> <b>boolean</b> functions, P'olya enumeration, supe [...] ...|$|R
40|$|We {{propose a}} simple {{structure}} which provides optimal system-level fault diagnosis. Each unit {{of a system}} can diagnose itself using test outcomes generated within its associated structure. This property makes the structure suitable for systems in a distributed environment where no central processor exists for fault diagnosis. We present a simple diagnosis algorithm based on this structure. Furthermore, we show that the proposed structure always exists for every unit in a system whose graph connectiviq {{is not less than}} the number of faulty units. We provide some examples of applying this unit-diagnosis approach to such systems as <b>Boolean</b> <b>N-cube,</b> generalized hypercube and DeBrujin networks. Distributed diagnosis can, therefore, be efficiently done for these fault-tolerant systems with results superior to those previously obtained...|$|E
40|$|Many {{underlying}} {{structural and}} functional factors that determine the fault {{behavior of a}} combinational network, are not yet fully understood. In this paper, we show that there exists a large class of Boolean functions, called root functions, which can never appear as faulty response in irredundant two-level circuits even when any arbitrary multiple stuck-at faults are injected. Conversely, we show that any other Boolean function can appear as a faulty response from an irredundant realization of some root function under certain stuck-at faults. We characterize this new class of functions and show that for n variables, their number is exactly equal {{to the number of}} independent dominating sets (Harary and Livingston, Appl. Math. Lett., 1993) in a <b>Boolean</b> <b>n-cube.</b> We report some bounds and enumerate the total number of root functions up to 6 variables. Finally, we point out several open problems and possible applications of root functions in logic design and testing...|$|E
40|$|Abstract—A novel {{reconfigurable}} architecture {{based on}} a multiring multiprocessor network is described. The reconfigurability of the architecture is shown {{to result in a}} low network diameter and also a low degree of connectivity for each node in the network. The mathematical properties of the network topology and the hardware for the reconfiguration switch are described. Primitive parallel operations on the network topology are described and analyzed. The architecture is shown to contain 2 D mesh topologies of varying sizes and also a single one-factor of the Boolean hypercube in any given configuration. A large class of algorithms for the 2 D mesh and the <b>Boolean</b> <b>n-cube</b> are shown to map efficiently on the proposed architecture without loss of performance. The architecture is shown to be well suited for a number of problems in low- and intermediate-level computer vision such as the FFT, edge detection, template matching, and the Hough transform. Timing results for typical low- and intermediate-level vision algorithms on a transputerbased prototype are presented. Index Terms—Reconfigurable multiring network, reconfigurable architectures, scalable architectures, parallel processing, distributed processing, computer vision, image processing, parallel algorithms, distributed algorithms...|$|E
40|$|A {{homogeneous}} machine architecture, {{consisting of}} a regular interconnection of many identical elements, exploits the economic benefits of VLSI technology, A concurrent programming model is presented that is related to object oriented languages such as Simula and Smalltalk. Techniques are developed which permit the execution of general purpose object oriented programs on a homogeneous machine. Both the hardware architecture and the supporting software algorithms are demonstrated to scale their performance {{with the size of}} the system. The program objects communicate by passing messages. Objects may move about in the system and may have an arbitrary pointer topology, A distributed, on-the-fly garbage collection algorithm is presented which operates by message passing. Simulation of the algorithm demonstrates its ability to collect obsolete objects over the entire machine with acceptable overhead costs. Algorithms for maintaining the locality of object references and for implementing a virtual object capability are also presented. To insure the absence of hardware bottlenecks, a number of interconnection strategies are discussed and simulated for use in a homogeneous machine. Of those considered, the <b>Boolean</b> <b>N-cube</b> connection is demonstrated to provide the necessary characteristics. The object oriented machine will provide increased performance as its size is increased. It can execute a general purpose, concurrent, object oriented language where the size of the machine and its interconnection topology are transparent to the programmer...|$|E

