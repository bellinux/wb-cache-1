78|24|Public
25|$|Steinitz's {{original}} induction-based proof can {{be strengthened}} in this way. However, the integers {{that would result}} from this construction are doubly exponential {{in the number of}} vertices of the given polyhedral graph. Writing down numbers of this magnitude in <b>binary</b> <b>notation</b> would require an exponential number of bits.|$|E
25|$|<b>Binary</b> <b>notation</b> had not {{yet been}} standardized, so Napier used what he called {{location}} numerals to represent binary numbers. Napier's system uses sign-value notation to represent numbers; it uses successive letters from the Latin alphabet to represent successive powers of two: a = 20 = 1, b = 21 = 2, c = 22 = 4, d = 23 = 8, e = 24 = 16 and so on.|$|E
25|$|When {{considering}} computational problems, {{a problem}} instance is a string over an alphabet. Usually, the alphabet {{is taken to}} be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in <b>binary</b> <b>notation,</b> and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.|$|E
5|$|PHP stores {{integers}} in a platform-dependent range, {{either a}} 64-bit or 32-bit signed integer {{equivalent to the}} C-language long type. Unsigned integers are converted to signed values in certain situations; this behavior {{is different from that}} of other programming languages. Integer variables can be assigned using decimal (positive and negative), octal, hexadecimal, and <b>binary</b> <b>notations.</b>|$|R
50|$|Using <b>binary</b> {{scientific}} <b>notation,</b> {{this will}} place the binary point at 1B16.|$|R
25|$|The PowerShell {{scripting}} language supports <b>binary</b> prefix <b>notation</b> {{similar to the}} scientific notation supported by many programming languages in the C-family.|$|R
2500|$|The I Ching {{dates from}} the 9th century BC in China. The <b>binary</b> <b>notation</b> in the I Ching is used to {{interpret}} its quaternary [...] divination technique.|$|E
2500|$|The [...] "truncation" [...] method {{gradually}} waned. Capitalization of {{the letter}} K became the de facto standard for <b>binary</b> <b>notation,</b> although this could not be extended to higher powers, {{and use of the}} lowercase k did persist. Nevertheless, the practice of using the SI-inspired [...] "kilo" [...] to indicate 1024 was later extended to [...] "megabyte" [...] meaning 10242 (...) bytes, and later [...] "gigabyte" [...] for 10243 (...) bytes. For example, a [...] "512 megabyte" [...] RAM module is 512×10242 bytes (512 × , or [...] ), rather than [...]|$|E
2500|$|The {{reason that}} the dyadic {{transformation}} is also called the bit-shift map is that when [...] is written in <b>binary</b> <b>notation,</b> the map moves the binary point one place to the right (and if the bit {{to the left of}} the binary point has become a [...] "1", this [...] "1" [...] is changed to a [...] "0"). [...] A cycle of length 3, for example, occurs if an iterate has a 3-bit repeating sequence in its binary expansion (which is not also a one-bit repeating sequence): 001, 010, 100, 110, 101, or 011. The iterate 001001001... maps into 010010010..., which maps into 100100100..., which in turn maps into the original 001001001...; so this is a 3-cycle of the bit shift map. [...] And the other three binary-expansion repeating sequences give the 3-cycle 110110110... → 101101101... → 011011011... → 110110110.... Either of these 3-cycles can be converted to fraction form: for example, the first-given 3-cycle can be written as 1/7 → 2/7 → 4/7 → 1/7. [...] Using the above translation from the bit-shift map to the [...] logistic map gives the corresponding logistic cycle [...]611260467... → [...]950484434... → [...]188255099... → [...]611260467... We could similarly translate the other bit-shift 3-cycle into its corresponding logistic cycle. [...] Likewise, cycles of any length [...] can be found in the bit-shift map and then translated into the corresponding logistic cycles.|$|E
50|$|The {{semantic}} {{features of}} a word can be notated using a <b>binary</b> feature <b>notation</b> common to the framework of componential analysis. A semantic property is specified in square brackets and a plus or minus sign indicates the existence or non-existence of that property.|$|R
40|$|This paper compares two realisations of a self-timed ring {{arithmetic}} operator for division and square-root extraction. The operator receives its inputs and delivers its outputs in conventional <b>binary</b> <b>notations.</b> The first circuit design uses Differential Cascode Voltage Switch Logic. The second adds True Single Phase Clock latches in the ring. It is shown that this addition both reduces the {{minimum number of}} stages demanded by self-timed rings and decreases the "cycle time", which {{has an influence on}} the optimal number of stages and on the speed of the ring. The two chips have been generated at the CNET-CNS using a proprietary self-timed standard cell library in three-metal 0. 5 µm CMOS technology. 1. Introduction : The Self timed Rings Self timed logic has recently been used to eliminate the problems of clock skew when the frequency increases. When pipelining self-timed stages, only a local handshake is used between the stages. In an iterative algorithm, after the initialisation step, [...] ...|$|R
50|$|Just like decimal {{engineering}} notation can {{be viewed}} as a base-1000 scientific notation (103 = 1000), <b>binary</b> engineering <b>notation</b> relates to a base-1024 scientific notation (210 = 1024), where the exponent of two must be divisible by ten. This is closely related to the base-2 floating-point representation commonly used in computer arithmetic, and the usage of IEC binary prefixes (e.g. 1B10 for 1 × 210, 1B20 for 1 × 220, 1B30 for 1 × 230, 1B40 for 1 × 240 etc.).|$|R
5000|$|... #Caption: Conversion of (357)10 to <b>binary</b> <b>notation</b> {{results in}} (101100101) ...|$|E
5000|$|Represent {{the value}} in <b>binary</b> <b>notation</b> (e.g. 137 as 10001001) ...|$|E
5000|$|... #Subtitle level 3: Top-down {{automaton}} accepting multiples of 3 in <b>binary</b> <b>notation</b> ...|$|E
40|$|The paper {{presents}} {{results of}} investigations upon possible representations of architectural objects containing “architectural meaningi. Five groups of such existing representations are analyzed briefly: (1) structural EXPRESS-based definitions, (2) object EXPRESS- and IFC- based notations, (3) XML-based notations, (4) experimental ones, and (5) <b>binary</b> <b>notations.</b> The working taxonomy of the notations is presented and their shortcomings are mentioned. The potential of XML notations for CAD data {{has been recognized}} by software vendors and standard organizations all over the world. Many corporations and standardization bodies are developing XML-based notations of CAD data, focusing on interoperability problems. Some of these notations are becoming standards (aecXML, i-drop), influencing the development of all CAAD industry. There are some main groups of problems with the existing commercial standards: Lack of "open" data in its "open" context, lack of architectural meaning in commercial notations, problems with simpler intuitive standards for notation of conceptual design data in early design stages, too complex data semantics, too atomized data, and richness of the data structures. The problems are taken under consideration {{in order to discuss}} the present state of architectural standards. Nowadays architects are forced to work with semi-architectural notations, lacking their essence, i. e. lacking methods to describe elements of cultural heritage connected to geometry forms. Instead of language of architecture they deal with virtual cyber-slang...|$|R
50|$|Hexadecimal {{exponential}} notation {{is required}} by the IEEE 754-2008 <b>binary</b> floating-point standard.This <b>notation</b> {{can be used for}} floating-point literals in the C99 edition of the C programming language.Using the %a or %A conversion specifiers, this notation can be produced by implementations of the printf family of functions following the C99 specification andSingle Unix Specification(IEEE Std 1003.1)POSIXstandard.|$|R
40|$|The book "N-ary Groups" (in Russian) {{consists}} of two Parts. It is intended {{on the one hand}} as an initial introduction to the theory of n-ary groups, {{and on the other hand}} it contains the published results by the author on this subject. At present, the theory of n-ary groups developing but slowly from group theory. Nonetheless, ternary and n-ary structures have recently been applied to modern models of elementary particle physics. One of the author's goals in this book is to draw the attention of mathematicians and theoretical physicists to the theory of n-ary groups, to some of its distinguishing features, and to details relevant to its further development and application. Part I: Theorems of Post and Gluskin-Hosszu. 1. 1. Classical definitions of n-ary groups. Examples. 1. 2. Analogies of identity and inverse elements. 1. 3. Equivalent sequences. 1. 4. Post's coset theorem. 1. 5. Theorem of Gluskin-Hosszu. 1. 6. Connection between the Post's coset theorem and theorem of Gluskin-Hosszu. Addition and comments. Part II: n-ary Analogies of Some <b>Binary</b> <b>Notations.</b> 2. 1. n-ary subgroups. Cosets. 2. 2 Connection between n-ary subgroups of n-ary groups. 2. 3. Invariant and semiinvariant n-ary subgroups. 2. 4. Conjugate and semiconjugate n-ary subgroups. 2. 5. Cyclic and semicyclic n-ary groups. 2. 6. Abelian n-ary groups and their generalizations. 2. 7. Products of n-ary groups. 2. 8. Semiabelian n-ary groups with idempotents. Addition and comments. Notations. Index. References. Comment: Book (in Russian), Parts I & II, 524 pp. Published: Part I (Gomel State University, Gomel, 2003); Part II (Belorus State University, Minsk, 2007); Available also from [URL]...|$|R
5000|$|Short integer [...] - [...] 2 bytes, {{interpreted}} as an integer in two's complement <b>binary</b> <b>notation.</b>|$|E
5000|$|Integer or logical [...] - [...] 4 bytes, {{interpreted}} as an integer in two's complement <b>binary</b> <b>notation.</b>|$|E
50|$|In <b>binary</b> <b>notation,</b> 1024 is {{represented}} as 10000000000, {{making it a}} simple round number occurring frequently in computer applications.|$|E
30|$|February 1967. Guilloud and M. Dichampt used CDC (Control Data Corporation) 6600 in Paris to {{approximate}} π to 500, 000 decimal places. For this, they used Störmer’s and Gauss’ formulas (34) and (31). The computer that churned out {{half a million}} digits needed only 26 hours and 40 minutes (plus 1 hour and 30 minutes to convert that final result from <b>binary</b> to decimal <b>notation).</b>|$|R
40|$|The {{first section}} of this paper {{consists}} of a defense of the <b>binary</b> string <b>notation</b> for the formulation of weak theories of arithmetic which have computational significance. We defend that a stringlanguage is the most natural framework and that the usual arithmetic setting suffers from some troubles when dealing with very low complexity classes. Having introduced {{in the first section}} the theory Th − FO- associated with a rather robust uniform version of the class of problems that can be decided by constant depth,polynomial size circuit families (the so-called AC 0 -class) - we prove in the second section that the deletion of a crucial axiom from Th − FO results in a theory which is unsuitable from the computational point of view...|$|R
50|$|Also in September 1975 IBM {{announced}} the IBM 5100 Communications Adapter, {{that allowed the}} 5100 to transmit data to and receive data from a remote system. It made the 5100 appear the same as an IBM 2741 Communications Terminal and {{was designed to be}} able to communicate with IBM 2741 compatible machines in start-stop mode using the EBCD (Extended <b>Binary</b> Coded Decimal) <b>notation.</b> EBCD was similar to the more common IBM EBCDIC code, but not identical.|$|R
5000|$|First, it is {{required}} that the exponent [...] be converted to <b>binary</b> <b>notation.</b> That is, [...] can be written as: ...|$|E
5000|$|For instance, the affine {{transformation}} of the element [...] in big-endian <b>binary</b> <b>notation</b> = [...] in big-endian hexadecimal notation, is calculated as follows: ...|$|E
50|$|The I Ching {{dates from}} the 9th century BC in China. The <b>binary</b> <b>notation</b> in the I Ching is used to {{interpret}} its quaternary divination technique.|$|E
40|$|This module {{from the}} Space Place Web site allows {{students}} to learn the secret code spacecraft use to send images back from space. It introduces the language of computers and spacecraft. <b>Binary</b> and hexadecimal <b>notations</b> are explained. The Space Place is an educational NASA site {{for children and adults}} with activities and facts related to the exploration of space – past, current and future. Some activities are computer-interactive and many are real-world-interactive. Educational levels: Intermediate elementary, Middle school, High school, Informal education...|$|R
40|$|The present article {{concerns}} {{itself with}} the description of real numbers converter into basic positional <b>notations</b> (<b>binary,</b> denary, hexadecimal) with the controlled accuracy of fractional part of converted number formation. Here the converter functionality and the peculiarities of implementation of the used algorithms of converting long numbers from one numerical notation into the other without making use of the processor input/output are specified. Moreover, {{the analysis of the}} program action period while converting the numbers of different exponents has been carried out...|$|R
40|$|The {{clusters}} of binary patterns {{can be considered}} as Boolean functions of the (binary) features. Such a relationship between the linearly separable (LS) Boolean functions and LS {{clusters of}} binary patterns is examined. An algorithm is presented to answer the questions of the type: “Is the cluster formed by the subsets of the (binary) data set having certain features AND/NOT having certain other features, LS from the remaining set?” The algorithm uses the sequences of Numbered <b>Binary</b> Form (NBF) <b>notation</b> and some elementary (NPN) transformations of the binary data...|$|R
5000|$|Carry-save {{arithmetic}} {{works by}} abandoning the <b>binary</b> <b>notation</b> while still working to base 2. It computes the sum digit by digit, as 10111010101011011111000000001101 + 11011110101011011011111011101111 = 21122120202022022122111011102212 ...|$|E
5000|$|Because of {{the simple}} nature of the {{dynamics}} when the iterates are viewed in <b>binary</b> <b>notation,</b> {{it is easy to}} categorize the dynamics based on the initial condition: ...|$|E
50|$|A 16-bit number can {{distinguish}} 65536 different possibilities, {{such as the}} numbers 0..65535. In unsigned <b>binary</b> <b>notation,</b> 65536 is thus the smallest number {{that can not be}} represented by 16 bits.|$|E
40|$|We {{present a}} novel musical notation, {{generated}} by a formal grammar, which symbolizes musical rhythms as strings over a ternary alphabet. This notative system is shown to be an improvement over the conventional <b>binary</b> rhythm <b>notation,</b> because it uniquely encodes any rhythm given in classical, sheet music notation. We leverage this grammatical system to compute the number of distinct rhythms up to a specified timeunit. We then define a binary operation on the strings generated by the rhythm grammar {{to coincide with the}} musical notion of ”additive rhythm. ” We show that the set of musical rhythms with a given time-unit becomes a finite commutative monoid under this operation, and moreover that this operation imbues the set with an algebraic lattice structure. Finally, we use the algebraic properties of this representation of musical rhythms to define a number of similarity measures between rhythms, which we suggest to have applications in automated music transcription...|$|R
40|$|This {{newsletter}} for the Engineering Concepts Curriculum Project {{includes the}} educational objectives in the affective domain for the course. The major categories for these sixteen objectives are: (1) Interaction of science, technology and society; (2) Matching technology to people, {{society and the}} environm%int; and (3) Use of technological concepts. The activity approach, content, and format of the materials are described. The teacher's instructional materials, including a manual, are briefly summarized. Also included is a technical note entitled ',Man and His Numbers', which traces {{the historical development of}} several numeral systems from primitive counting to <b>Binary</b> Coded Decimal <b>notation.</b> (Author/TS...|$|R
40|$|Integer {{arithmetic}} is specified {{according to}} three views: unary, <b>binary,</b> and decimal <b>notation.</b> The <b>binary</b> and decimal view have as their characteristic that each normal form resembles common number notation, that is, either a digit, or {{a string of}} digits without leading zero, or the negated versions of the latter. The unary view comprises a specification of integer arithmetic based on 0, successor function $S$, and predecessor function, with negative normal forms $-S^i(0) $. Integer arithmetic in <b>binary</b> and decimal <b>notation</b> is based on (postfix) digit append functions. For each view we define a ground-confluent and terminating datatype defining rewrite system (DDRS), and in each case the resulting datatype is a canonical term algebra that extends a corresponding canonical term algebra for natural numbers. Then, for each view, we consider an alternative DDRS based on tree constructors that yield comparable normal forms, which for that binary and decimal view admits expressions that are algorithmically more involved. These DDRSes are incorporated because they are closer to existing literature. For these DDRSes we also provide ground-completeness results. Finally, we define a DDRS for the ring of Integers (comprising fifteen rewrite rules) and prove its ground-completeness. Comment: 33 pages; 19 tables. All DDRSes in S. 2 are proven ground-complete (gc). In S. 3, the DDRS for Z_{ut} contains 16 equations and is proven gc; the DDRS for Z_{bt} has one more equation ([bt 22]) and is proven gc; the DDRSes for N_{dt} (Table 14) and Z_{dt} (Table 16) are proven gc in [13]. In Appendix C, corrected versions of the DDRSes for N_{u'} and Z_{u'} are proven g...|$|R
