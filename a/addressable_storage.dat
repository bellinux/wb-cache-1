26|5|Public
5000|$|Security for cloud storage, object-based storage (OSD) and Content <b>Addressable</b> <b>Storage</b> (CAS) ...|$|E
50|$|SVS has 16MiB of <b>addressable</b> <b>storage</b> in {{a single}} address space, {{regardless}} {{of the size of}} physical memory. The nucleus and the FLPA are Virtual=Real (V=R), meaning that each virtual address in that area is mapped to the corresponding physical address.|$|E
50|$|He was a {{prolific}} inventor with 107 US patents among others logic circuits for arithmetic. He conceived the first read-only memory, which was {{widely used in}} early computers. He conceived and developed the selectively <b>addressable</b> <b>storage</b> tube, the ill-fated Selectron tube, and the core memory.|$|E
40|$|Hall-effect {{structures}} with submicrometre linewidths (< 0. 3 pm) {{have been}} fabricated in ferromagnetic thin films of Mn[sub 0. 60]Al[sub 0. 40] which are epitaxially grown on a GaAs substrate. The MnAl thin films exhibit a perpendicular remanent magnetisation and an extraordinary Hall effect with square hysteretic behaviour. The presence of two distinct stable readout states demonstrates {{the potential of}} using ultrasmall ferromagnetic volumes for electrically <b>addressable,</b> nonvolatile <b>storage</b> of digital information...|$|R
40|$|Magnetization {{reversal}} {{in a number}} of r. f. sputtered GdCo films with compositions in the range 20 - 46 at. % Gd has been studied using the polar Kerr effect at λ = 633 nm and drive fields up to ± 10 kOe. Room temperature observations show that some compositions other than that expected to achieve room temperatue magnetization compensation (~ 20 / 80) have unusually large coercivities, up to 6 kOe, and very square hysteresis loops indicative of significant inherent perpendicular anisotropy. The coercivity versus composition plot therefore shows some extremely sharp coercivity maxima which are thought to be associated with transitions in the magnetic dominance of the film subnetwork structure and also seem to relate to maxima in the saturation magnetization. Magnetic transitions at selected compositions are also easily produced by a change in film temperature. The temperature dependent coercivity of these films is well suited to that required by beam <b>addressable</b> magneto-optic <b>storage</b> media...|$|R
40|$|A {{number of}} IEEE 802. 15. 4 devices can be {{connected}} by a tree topology as proposed by ZigBee specification. Ad-dress configuration in tree-based ZigBee networks needs to assign every device a network address that uniquely iden-tifies it from others, and such addressing should also as-sist routing. The addressing method recommended by the specification forces a static assignment that is coupled with node’s location in the tree, resulting in an inflexibility in allocating addresses. This property may significantly de-crease the ratio of addressable devices and cause routing detour. To alleviate the problem, this paper considers three alternatives that manage address space with flexibility but require additional storage in ZigBee routers. Performance evaluations indicate that proposed approaches provide dif-ferent levels of tradeoff between the ratio of <b>addressable</b> de-vices and <b>storage</b> costs in ZigBee routers. 1...|$|R
50|$|As its {{customers}} have shifted resources into cloud computing platforms, Sensage announced software that supports clustering and configuration in a VMware environment with hypervisor for using CPU cores, memory and other virtualized hardware resources. The event data software includes support for storage virtualization, providing integration of SANs (storage area networks), NAS (network-attached storage) and CAS (content <b>addressable</b> <b>storage)</b> as online storage in a cloud-based or VMware environment.|$|E
50|$|Content <b>Addressable</b> <b>Storage</b> (CAS) and Fixed Content Storage (FCS) are {{different}} acronyms {{for the same}} type of technology. The CAS / FCS technology is intended to store data that does not change (fixed) in time. The difference is that typically CAS exposes a digest generated by a cryptographic hash function (such as SHA-1 or MD5) from the document it refers to. If the hash function is weak, this method could be subject to collisions in an adversarial environment (different documents returning the same hash). The main advantages of CAS / FCS technology is that the location of the actual data and the number of copies is unknown to the user.|$|E
5000|$|C's integer types come in {{different}} fixed sizes, capable of representing various ranges of numbers. The type char occupies exactly one byte (the smallest <b>addressable</b> <b>storage</b> unit), which is typically 8 bits wide. (Although char can represent any of C's [...] "basic" [...] characters, a wider type {{may be required}} for international character sets.) Most integer types have both signed and unsigned varieties, designated by the signed and unsigned keywords. Signed integer types may use a two's complement, ones' complement, or sign-and-magnitude representation. In many cases, there are multiple equivalent ways to designate the type; for example, signed short int and short are synonymous.|$|E
40|$|Holographic {{data storage}} o#ers the {{potential}} for simultaneous search of an entire database by performing multiple optical correlations between stored data pages and a search argument [1, 2]. This content [...] addressable retrieval produces one analog correlation score for each stored volume hologram. We have previously developed fuzzy encoding techniques for this fast parallel search, and holographically searched a small database with high fidelity [2]. We recently showed that such systems can be configured to produce true inner [...] products, and proposed an architecture in which massively [...] parallel searches could be implemented [3]. However, the speed advantage over conventional electronic search provided by parallelism [2] brings with it the possibility of erroneous search results, since these analog correlation scores are subject to various noise sources. We show that the fidelity of such an optical search depends {{not only on the}} usual holographic storage signal-to-noise factors (such as readout power, di#raction e#ciency, and readout speed), but also on the particular database query being made. In e#ect, the presence of non [...] matching database records with nearly the same correlation score as the targeted matching records reduces the speed advantage of the parallel search. Thus for any given fidelity target, the performance improvement o#ered by a content [...] <b>addressable</b> holographic <b>storage</b> can vary from query to query even within the same database...|$|R
40|$|Processor clock {{frequencies}} {{and the related}} performance improvements recently stagnated due to severe power and thermal dissipation barriers. As a result, the additional transistors provided by new technology generations are turned into more processing elements on a chip and used for their specialization towards power efficiency. For data parallel workloads the Single Instruction Multiple Data (SIMD) accelerators form a good example. SIMD processors, however, are notorious for turning performance programmers into low-level hardware experts. Moreover, legacy programs often require rework to follow (micro) architectural evolutions. This dissertation addresses the problems of SIMD accelerators programmability, code portability and performance efficient data management. The proposed Polymorphic Register File (PRF) provides a simple programming interface, allowing programmers to focus on algorithm optimizations rather than complex data transformations or low-level details. The overall PRF size is fixed, while the actual number, dimensions and sizes of its individual registers can be readjusted at runtime. Once the registers are defined, the microarchitecture {{takes care of the}} data management. We base our proposal on a 2 D <b>addressable</b> multi-banked parallel <b>storage,</b> simultaneously delivering multiple data elements for a set of predetermined access patterns. For each pattern, we declare a Module Assignment Function (MAF) and a customized addressing function. We propose four MAF sets fully covering practical access patterns and evaluate them in a technology independent way. Next, we study a multi-lane, multi-port design and its HDL implementation. Clock frequencies of 100 to 300 MHz for FPGA and 500 to 900 + MHz for ASIC synthesis strongly indicate our PRF practical usability. For representative matrix computation workloads, single-core experiments suggest that our approach outperforms the Cell SIMD engine by up to three times. Furthermore, the number of executed instructions is reduced by up to three orders of magnitude compared to the Cell scalar core, depending on the vector registers size. Finally, we vectorize a separable 2 D convolution algorithm for our PRF to fully avoid strided memory accesses, outperforming a state of the art NVIDIA GPU in throughput for mask sizes of 9 x 9 elements and bigger. Software and Computer TechnologyElectrical Engineering, Mathematics and Computer Scienc...|$|R
50|$|The {{organization}} of the partition table in the MBR limits the maximum <b>addressable</b> <b>storage</b> space of a disk to 2 TiB (232 × 512 bytes). Approaches to slightly raise this limit assuming 33-bit arithmetics or 4096-byte sectors are not officially supported as they fatally break compatibility with existing boot loaders and most MBR-compliant operating systems and system tools, and can cause serious data corruption when used outside of narrowly controlled system environments. Therefore, the MBR-based partitioning scheme {{is in the process}} of being superseded by the GUID Partition Table (GPT) scheme in new computers. A GPT can coexist with an MBR in order to provide some limited form of backward compatibility for older systems.|$|E
50|$|This {{means that}} unaligned PER data is {{essentially}} an ordered stream of bits, and not an ordered stream of bytes like with aligned PER, {{and that it will}} be a bit more complex to decode by software on usual processors because it will require additional contextual bit-shifting and masking and not direct byte addressing (but the same remark would be true with modern processors and memory/storage units whose minimum addressable unit is larger than 1 octet). However modern processors and signal processors include hardware support for fast internal decoding of bit streams with automatic handling of computing units that are crossing the boundaries of <b>addressable</b> <b>storage</b> units (this is needed for efficient processing in data codecs for compression/decompression or with some encryption/decryption algorithms).|$|E
5000|$|On April 3, 2014, {{with the}} {{beginning}} of alpha testing for World of Warcraft: Warlords of Draenor, Blizzard announced that they were testing a new proprietary file format dubbed CASC (Content <b>Addressable</b> <b>Storage</b> Container) to replace MPQ in World of Warcraft. Among the improvements touted for it include a reduction in file corruption by creating a self-maintaining system, improved in-game performance and faster patching. The CASC format was initially tested in the internal alpha for Heroes of the Storm, and later in the alpha and beta tests for Warlords of Draenor before it is implemented within the main game itself prior to the expansion's release. [...] Both StarCraft II and Diablo III were later changed to using CASC for their main data.|$|E
50|$|A digital computer's memory, more {{specifically}} main memory, consists of many memory locations, each having a physical address, a code, which the CPU (or other device) {{can use to}} access it. Generally only system software, i.e. the BIOS, operating systems, and some specialized utility programs (e.g., memory testers), address physical memory using machine code operands or processor registers, instructing the CPU to direct a hardware device, called the memory controller, to use the memory bus or system bus, or separate control, address and data busses, to execute the program's commands. The memory controllers' bus consists {{of a number of}} parallel lines, each represented by a binary digit (bit). The width of the bus, and thus the number of <b>addressable</b> <b>storage</b> units, and the number of bits in each unit, varies among computers.|$|E
50|$|IBM WebSphere eXtreme Scale is an IBM in-memory data grid product. It can be {{described}} as a fully elastic memory based storage grid. It virtualizes the free memory of a potentially large number of Java virtual machines and makes them behave like a single key <b>addressable</b> <b>storage</b> pool for application state. Applications can view this as a network attached storage medium. It is key addressable and applications can store a value at a key. Data within the grid can be replicated to achieve fault tolerance and protect against data loss. It can also be written to relational databases and any other persistence backend using write through or write behind technologies. Data can be automatically pulled from a backend such as a relational database or enterprise application if it isn't present in the grid.|$|E
50|$|Most modern {{computers}} are byte-addressable, with each address identifying a single eight bit byte of storage; data {{too large to}} be stored in a single byte may reside in multiple bytes occupying a sequence of consecutive addresses. There exist word-addressable computers, where the minimal <b>addressable</b> <b>storage</b> unit is exactly the processor's word. For example, the Data General Nova minicomputer, and the Texas Instruments TMS9900 and National Semiconductor IMP-16 microcomputers used 16 bit words, {{and there were many}} 36-bit mainframe computers (e.g., PDP-10) which used 18-bit word addressing, not byte addressing, giving an address space of 218 36-bit words, approximately 1 megabyte of storage. The efficiency of addressing of memory depends on the bit size of the bus used for addresses - the more bits used, the more addresses are available to the computer. For example, an 8-bit-byte-addressable machine with a 20-bit address bus (e.g. Intel 8086) can address 220 (1,048,576) memory locations, or one MiB of memory, while a 32-bit bus (e.g. Intel 80386) addresses 232 (4,294,967,296) locations, or a 4 GiB address space. In contrast, a 36-bit word-addressable machine with an 18-bit address bus addresses only 218 (262,144) 36-bit locations (9,437,184 bits), equivalent to 1,179,648 8-bit bytes, or 1152 KB, or 1.125 MiB—slightly more than the 8086.|$|E
40|$|Content <b>Addressable</b> <b>Storage</b> (CAS) is {{increasingly}} {{being used as}} a technique to provide for space savings when storing datasets. In this paper we analyze the performance of CAS on real-world applications and discuss the effects on space savings, savings in network bandwidth and on resultant error resilience of data. We find that a chunksize of 1 KB can provide up to 84 % space savings and even higher savings in network bandwidth whilst trading off error resilience. We also find that a chunksize of 1 KB or larger provides good file-system performance while incurring about 14 % overhead from use of a CAS based naming scheme...|$|E
40|$|Elimination of {{redundant}} {{data has}} become a critical concern {{in the design of}} storage architectures. Content <b>addressable</b> <b>storage</b> engines eliminate data at the block level by mapping data blocks with the same content to the same physical storage location. Intelligent object partitioning techniques leverage block level content addressing in order to improve duplicate elimination. In this paper, we propose a novel object partitioning technique – fingerdiff that is designed to improve storage consumption of existing object partitioning techniques {{while at the same time}} reducing associated costs. We present a detailed evaluation of fingerdiff and other existing object partitioning schemes, and we show that fingerdiff meets its design goals as it improves the effectiveness of block level duplicate elimination while reducing overhead costs. Categories and Subject Descriptors...|$|E
40|$|Efficiently {{managing}} {{storage is}} important for virtualized computing environments. Its importance is magnified by developments such as cloud computing which consolidate many thousands of virtual machines (and their associated storage). The nature of this storage is such {{that there is a}} large amount of duplication between otherwise discreet virtual machines. Building upon previous work in content <b>addressable</b> <b>storage,</b> we have built a prototype for consolidating virtual disk images using a service-oriented file system. It provides a hierarchical organization, manages historical snapshots of drive images, and takes steps to optimize encoding based on partition type and file system. In this paper we present our experiences with building this prototype and using it to store a variety of drive images for QEMU and the Linux Kernel Virtual Machine (KVM). ...|$|E
40|$|The fuzzy file block {{matching}} technique (fuzzy matching for short), {{was first}} proposed for opportunistic use of Content <b>Addressable</b> <b>Storage.</b> Fuzzy matching aims {{to increase the}} hit ratio in the content-addressable storage providers, and thus can improve the performance of underlying distributed file storage systems by potentially saving significant network bandwidth and reducing file transmission costs. Fuzzy matching employs shingling to represent the fuzzy hashing of file blocks for similarity detection, and error-correcting information to reconstruct the canonical content of a file block from some similar blocks. In this paper, we present the implementation details of fuzzy matching and a very basic evaluation of its performance. In particular, we show that fuzzy matching can recover new versions of GNU Emacs source from older versions. ...|$|E
40|$|This paper {{analyzes}} the usage {{data from a}} live deployment of an enterprise client management system based on virtual machine (VM) technology. Over a period of seven months, twenty-three volunteers used VM-based computing environments hosted by the system and created over 800 checkpoints of VM state, where each checkpoint included the virtual memory and disk states. Using this data, we study the design tradeoffs in applying content <b>addressable</b> <b>storage</b> (CAS) to such VM-based systems. In particular, we explore the impact on storage requirements and network load of different privacy properties and data granularities {{in the design of}} the underlying CAS system. The study clearly demonstrates that relaxing privacy can reduce the resource requirements of the system, and identifies designs that provide reasonable compromises between privacy and resource demands. ...|$|E
40|$|Recent trends {{have seen}} {{database}} clients use content <b>addressable</b> <b>storage</b> systems (CASs) for nearline storage. While CASs have many attractive properties such as storage space savings, data integrity, and low network bandwidth requirements, CASs {{are not well}} suited for databases, {{mainly because of the}} rigid structure of databases, and the way databases intersperse metadata with data. In this paper, we evaluate where current CAS techniques fail for databases and identify properties of database systems that can be leveraged for potential improvements to CAS techniques specific to databases. We propose fives ways in which CAS systems can be made “database aware, ” and evaluate the potential strengths and weakness of each approach. We find that our techniques improve memory savings, but at the expense of coupling the solution too closely to particular database vendors. ...|$|E
40|$|We {{report on}} the design, implementation, and {{evaluation}} of a system called Cedar that enables mobile database access with good performance over low-bandwidth networks. This is accomplished without degrading consistency. Cedar exploits the disk storage and processing power of a mobile client to compensate for weak connectivity. Its central organizing principle is that even a stale client replica {{can be used to}} reduce data transmission volume from a database server. The reduction is achieved by using content <b>addressable</b> <b>storage</b> to discover and elide commonality between client and server results. This organizing principle allows Cedar to use an optimistic approach to solving the difficult problem of database replica control. For laptop-class clients, our experiments show that Cedar improves the throughput of read-write workloads by 39 % to as much as 224 % while reducing response time by 28 % to as much as 79 %...|$|E
40|$|Motivated by the {{prospect}} of readily available Content <b>Addressable</b> <b>Storage</b> (CAS), we introduce the concept of file recipes. A file's recipe is a first-class file system object listing content hashes that describe the data blocks composing the file. File recipes provide applications with instructions for reconstructing the original file from available CAS data blocks. We describe one such application of recipes, the CASPER distributed file system. A CASPER client opportunistically fetches blocks from nearby CAS providers to improve its performance when the connection to a file server traverses a low-bandwidth path. We use measurements of our prototype to evaluate its performance under varying network conditions. Our results demonstrate significant improvements in execution times of applications that use a network file system. We conclude by describing fuzzy block matching, a promising technique for using approximately matching blocks on CAS providers to reconstitute the exact desired contents of a file at a client...|$|E
40|$|Abstract: In {{the past}} few years {{considerable}} demand has developed for oceanic data storage system that are able to store Petabytes data. Volume holographic recording has the potential to offer high density, fast data readout rate, and associative content <b>addressable</b> <b>storage</b> as compared with other conventional mass data storage technology. However, its total cost and size impedes to go into market. If the volume holographic device could join network and be shared by more and more customers, the average cost for each customer should be reduced. On the other hand, the growing network storage technologies shake off the traditional storage architecture (DAS) limit including physical topologies and access mode, and provide high scalability, availability and flexible for storage system, moreover are widely applied to many fields. Obviously, it is valuable for building network storage device based on volume holographic. In this paper, we design the architecture and relative software of volume holographic device to enable common storage network, which can support the SAN based on Fibre channel and iSCSI. Our experiment shows the HSD (Holographic Storage Device) has excellent performance for network storage...|$|E
40|$|A direct {{implication}} {{of both the}} industry and academia proclaiming the Age of Tera-(even the Peta) -scale computing, is that applications have become more data intensive than ever. The increased data volume from applications tackling larger and larger problems has fueled the need for efficient management of this data. In this thesis, we evaluate a technique called Content <b>Addressable</b> <b>Storage</b> or CAS, for managing large volumes of data. This evaluation focuses on the benefits and demerits of using CAS for, i) improved application performance via lockless and lightweight synchronization of accesses to shared storage data; ii) improved cache performance; iii) increase in storage capacity; and, iv) increased network bandwidth. We present {{the design of a}} CAS-based file store that significantly improves the storage performance providing lightweight and lock-less user-defined consistency semantics. As a result, our file-system shows a 28 % increase in read-bandwidth and a 13 % increase in write bandwidth, over a popular file-system in common use. We use the same experimental file-system to analyze CAS on data from real world application benchmarks. We also estimate the potential benefits of using CAS for a virtua...|$|E
40|$|Massively {{multicore}} processors, like, for example, Graphics Processing Units (GPUs), provide, at {{a comparable}} price, a one {{order of magnitude}} higher peak performance than traditional CPUs. This drop {{in the cost of}} computation, as any order-of-magnitude drop in the cost per unit of performance for a class of system components, triggers the opportunity to redesign systems and to explore new ways to engineer them to recalibrate the cost-to-performance relation. In this context, we focus on data storage: We explore the feasibility of harnessing the GPUs ’ computational power to improve the performance, reliability, or security of distributed storage systems. In this context we present the design of a storage system prototype that uses GPU offloading to accelerate a number of computationally intensive primitives based on hashing. We evaluate the performance of this prototype under two configurations: as a content <b>addressable</b> <b>storage</b> system that facilitates online similarity detection between successive versions of the same file and as a traditional system that uses hashing to preserve data integrity. Further, we evaluate the impact of offloading to the GPU on competing applications’ performance. Our results show that this technique can bring tangible performance gains without negatively impacting the performance of concurrently running applications. Further, this work sheds light on the use of heterogeneous multicore processors for enhancing low-level system primitives, and introduces techniques to efficiently leverage the processing power of GPUs...|$|E
40|$|Content <b>Addressable</b> <b>Storage</b> (CAS) is a data {{representation}} technique that operates by partitioning a given data-set into non-intersecting units called chunks and then employing techniques to efficiently recognize chunks occurring multiple times. This allows CAS to eliminate duplicate instances of such chunks, resulting in reduced storage space compared to conventional representations of data. CAS {{is an attractive}} technique for reducing the storage and network bandwidth needs of performance-sensitive, data-intensive applications {{in a variety of}} domains. These include enterprise applications, Web-based e-commerce or entertainment services and highly parallel scientific/engineering applications and simulations, to name a few. In this paper, we conduct an empirical evaluation of the benefits offered by CAS to a variety of real-world data-intensive applications. The savings offered by CAS depend crucially on (i) the nature of the data-set itself and (ii) the chunk-size that CAS employs. We investigate the impact of both these factors on disk space savings, savings in network bandwidth, and error resilience of data. We find that a chunk-size of 1 KB can provide up to 84 % savings in disk space and even higher savings in network bandwidth whilst trading off error resilience and incurring 14 % CAS related overheads. Drawing upon lessons learned from our study, we provide insights on (i) the choice of the chunk-size for effective space savings and (ii) the use of selective data replication to counter the loss of error resilience caused by CAS...|$|E
40|$|In {{this paper}} we present PLEDGE, an {{efficient}} and scalable security ProtocoL for protecting fixedcontent objects in contEnt <b>aDdressable</b> <b>storaGe</b> (CAS) architEctures. PLEDGE follows an end-to-end policy-driven security approach {{to secure the}} confidentiality, integrity, and authenticity of fixed-content entities over the enterprise network links and in the nodes of the CAS device. It utilizes a customizable and configurable extensible mark-up language (XML) security policy to provide flexible, multi-level, and fine-grained encryption and hashing methodologies to fixed content CAS entities. PLEDGE secures data objects based on their content and sensitivity and highly overcomes the performance of bulk and raw encryption protocols such as the Secure Socket Layer (SSL) and the Transport Layer Security (TLS) protocols. Moreover, PLEDGE transparently stores sensitive objects encrypted (partially or totally) in the CAS storage nodes without affecting the CAS storage system operation or performance and takes into consideration the processing load, computing power, and memory capabilities of the client devices which may be constrained by limited processing power, memory resources, or network connectivity. PLEDGE complies with regulations such as the Health Insurance Portability and Accountability Act (HIPAA) requirements and the SEC Rule 17 a- 4 financial standards. The protocol is implemented in a real CAS network using an EMC Centera backend storage device. The application secured by PLEDGE in the sample implementation is an X-Ray radiography scanning system in a healthcare network environment. The experimental test bed implementation conducted shows a speedup factor of three over raw encryption security mechanisms...|$|E
40|$|Although {{microfluidic}} chips {{have demonstrated}} basic functionality for single applications, performing varied and complex experiments {{on a single}} device is still technically challenging. While many groups have implemented control software to drive the pumps, valves, and electrodes used to manipulate fluids in microfluidic devices, {{a new level of}} programmability is needed for end users to orchestrate their own unique experiments on a given device. This paper presents an approach for programmable and scalable control of discrete fluid samples in a polydimethylsiloxane (PDMS) microfluidic system using multiphase flows. An immiscible fluid phase is utilized to separate aqueous samples from one another, and a novel ‘‘microfluidic latch’’ is used to precisely align a sample after it has been transported a long distance through the flow channels. To demonstrate the scalability of the approach, this paper introduces a ‘‘generalpurpose’’ microfluidic chip containing a rotary mixer and <b>addressable</b> <b>storage</b> cells. The system is general purpose in that all operations on the chip operate in terms of unit-sized aqueous samples; using the underlying mechanisms for sample transport and storage, additional sensors and actuators can be integrated in a scalable manner. A novel high-level software library allows users to specify experiments in terms of variables (i. e., fluids) and operations (i. e., mixes) without the need for detailed knowledge about the underlying device architecture. This research represents a first step to provide a programmable interface to the microfluidic realm, with the aim of enabling a new level of scalability and flexibility for lab-on-a-chip experiments...|$|E

