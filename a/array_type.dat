256|816|Public
2500|$|... real v2 [...] = (4,5,6); [...] # {{constant}} <b>array,</b> <b>type</b> {{equivalent to}} vector, bounds are implied [...] # ...|$|E
2500|$|Early {{versions}} of JSON (such as specified by [...] ) required that a valid JSON [...] "document" [...] must consist of only an object or an <b>array</b> <b>type,</b> which could contain other types within them.|$|E
2500|$|An <b>array</b> <b>type</b> is a {{reference}} type {{that refers to}} a space containing one or more elements of a certain type. All array types derive from a common base class, [...] Each element is referenced by its index just like in C++ and Java.|$|E
50|$|Depending on the language, <b>array</b> <b>types</b> may overlap (or be {{identified}} with) other data types that describe aggregates of values, such as lists and strings. <b>Array</b> <b>types</b> are often implemented by array data structures, but sometimes by other means, such as hash tables, linked lists, or search trees.|$|R
5000|$|A typedef {{can also}} be used to simplify the {{definition}} of <b>array</b> <b>types.</b> For example, ...|$|R
5000|$|On {{the other}} hand, other slicing {{operations}} are possible when <b>array</b> <b>types</b> are implemented in other ways.|$|R
50|$|S-Lang has an {{associative}} <b>array</b> <b>type.</b>|$|E
5000|$|SystemVerilog {{supports}} iteration {{over any}} vector or <b>array</b> <b>type</b> of any dimensionality using the [...] keyword.|$|E
5000|$|An <b>array</b> <b>type</b> [...] {{is valid}} S-ly if [...] is. (This is because C# has {{covariant}} arrays).|$|E
50|$|Other {{languages}} {{provide only}} one-based <b>array</b> <b>types,</b> where each index starts at 1; {{this is the}} traditional convention in mathematics for matrices and mathematical sequences. A few languages, such as Pascal, support n-based <b>array</b> <b>types,</b> whose minimum legal indices are chosen by the programmer. The relative merits of each choice {{have been the subject}} of heated debate. Zero-based indexing has a natural advantage to one-based indexing in avoiding off-by-one or fencepost errors.|$|R
5000|$|Therefore, both Java and C# treat <b>array</b> <b>types</b> covariantly.For instance, in Java [...] is a subtype of , and in C# [...] is a subtype of [...]|$|R
50|$|On {{the other}} hand, some {{programming}} languages provide more liberal <b>array</b> <b>types,</b> that allow indexing by arbitrary values, such as floating-point numbers, strings, objects, references, etc.. Such index values cannot {{be restricted to}} an interval, much less a fixed interval. So, these languages usually allow arbitrary new elements to be created at any time. This choice precludes the implementation of <b>array</b> <b>types</b> as <b>array</b> data structures. That is, those languages use array-like syntax to implement a more general associative array semantics, and must therefore be implemented by a hash table or some other search data structure.|$|R
50|$|In {{contexts}} where a vector or array {{was wanted}} an i-struct could be widened {{to the appropriate}} vector or <b>array</b> <b>type.</b>|$|E
5000|$|There {{is a new}} {{built-in}} multi-dimensional <b>array</b> <b>type.</b> Arrays can {{be passed}} to instruments and opcodes. Arithmetic may be performed directly on arrays.|$|E
50|$|In this example, Array_Type is {{constrained}} by both Index_Type and Element_Type. When instantiating the unit, the programmer must pass an actual <b>array</b> <b>type</b> that satisfies these constraints.|$|E
5000|$|<b>Array</b> data <b>types</b> {{are most}} often {{implemented}} as array structures: with the indices restricted to integer (or totally ordered) values, index ranges fixed at array creation time, and multilinear element addressing. This {{was the case in}} most [...] "third generation" [...] languages, and is still the case of most systems programming languages such as Ada, C, and C++. In some languages, however, <b>array</b> data <b>types</b> have the semantics of associative arrays, with indices of arbitrary type and dynamic element creation. This is the case in some scripting languages such as Awk and Lua, and of some <b>array</b> <b>types</b> provided by standard C++ libraries.|$|R
50|$|The term array {{is often}} used to mean <b>array</b> data <b>type,</b> a kind of data type {{provided}} by most high-level programming languages that consists of a collection of values or variables that can be selected by one or more indices computed at run-time. <b>Array</b> <b>types</b> are often implemented by array structures; however, in some languages they may be implemented by hash tables, linked lists, search trees, or other data structures.|$|R
50|$|Ada 83 {{supports}} slices for all <b>array</b> <b>types.</b> Like Fortran 77 such arrays {{could be}} passed {{by reference to}} another subroutine, the length would also be passed transparently to the subroutine {{as a kind of}} short dope vector.|$|R
5000|$|Early {{versions}} of JSON (such as specified by [...] ) required that a valid JSON [...] "document" [...] must consist of only an object or an <b>array</b> <b>type,</b> which could contain other types within them.|$|E
5000|$|The C99 Rationale {{describes}} [...] {{as being}} an <b>array</b> <b>type</b> for backward compatibility; existing code refers to [...] storage locations by name (without the [...] address-of operator), which is only possible for array types.|$|E
50|$|As Chinese {{capability}} in microelectronics matured, {{an updated}} version of passive phased <b>array</b> <b>Type</b> 373 radar is developed, designated as SLC-2. This is a fully solid-state, highly digitized version that adopts planar active phased array antenna.|$|E
40|$|The {{important}} {{features of the}} multiport (double entry) automatic placement and routing programs for standard cells are described. Measured performance and predicted performance were compared for seven CMOS/SOS <b>array</b> <b>types</b> and hybrids designed with the high speed CMOS/SOS cell family. The CMOS/SOS standard cell data sheets are listed and described...|$|R
5000|$|For {{one-dimensional}} arrays, {{this facility}} may be provided as an operation [...] "(A,x)" [...] {{that increases the}} size of the array A by one and then sets the value of the last element to x. Other <b>array</b> <b>types</b> (such as Pascal strings) provide a concatenation operator, which can be used together with slicing to achieve that effect and more. In some languages, assigning a value to an element of an array automatically extends the array, if necessary, to include that element. In other <b>array</b> <b>types,</b> a slice can be replaced by an array of different size" [...] with subsequent elements being renumbered accordingly â€” as in Python's list assignment [...] "A5:5 = 10,20,30", that inserts three new elements (10,20, and 30) before element [...] "A5". Resizable arrays are conceptually similar to lists, and the two concepts are synonymous in some languages.|$|R
5000|$|<b>Array</b> data <b>type</b> - {{multiple}} values {{stored in}} the same variable.|$|R
5000|$|BSON {{types are}} {{nominally}} a superset of JSON types (JSON {{does not have}} a date or a byte <b>array</b> <b>type,</b> for example), with one exception of not having a universal [...] "number" [...] type as JSON does.|$|E
5000|$|Here, arrType {{is the new}} alias for the [...] "char6" [...] type, {{which is}} an <b>array</b> <b>type</b> with 6 elements. For arrType *pArr;, pArr is a pointer {{pointing}} {{to the memory of}} the [...] "char6" [...] type.|$|E
50|$|Circuit underutilization also {{programmable}} circuit underutilization, gate underutilization, logic block underutilization {{refers to}} a physical incomplete utility of semiconductor grade silicon on a standarized mass-produced circuit programmable chip, such as a gate <b>array</b> <b>type</b> ASIC, an FPGA, or CPLD.|$|E
40|$|Abstract. Executable models allow precise {{description}} of software sys-tems {{at a higher}} level of abstraction and independently of a platform or a programming language. In this paper we explore the use of a Procedural Action Language based on OCL to specify executable UML components and we propose an extension that will include <b>array</b> <b>types</b> and correspond-ing operations. 1...|$|R
5000|$|Dynamic {{lists are}} also more common and easier to {{implement}} than dynamic <b>arrays.</b> <b>Array</b> <b>types</b> are distinguished from record types mainly because they allow the element indices to be computed at run time, as in the Pascal assignment [...] Among other things, this feature allows a single iterative statement to process arbitrarily many elements of an array variable.|$|R
40|$|Method Declarations................................. 189 9. 4. 1 Inheritance and Overriding............................ 189 9. 4. 2 Overloading........................................ 190 9. 4. 3 Examples of Abstract Method Declarations............... 190 9. 4. 3. 1 Example: Overriding........................ 190 9. 4. 3. 2 Example: Overloading....................... 191 10 Arrays............................................... 193 10. 1 <b>Array</b> <b>Types...............................................</b> 194 10. 2 Array Variables............................................. 194 xii 10. 3 Array Creation.............................................. 195 10. 4 Array Access [...] ...|$|R
5000|$|More recent {{versions}} of the radar are an active electronically scanned <b>array</b> <b>type</b> of radar. It was developed by Ferranti Defence Systems (Ferranti Radar Systems) in Edinburgh, overseen by Sir Donald McCallum. Adrian Hope, 4th Marquess of Linlithgow worked on the system.|$|E
5000|$|An <b>array</b> <b>type</b> is a {{reference}} type {{that refers to}} a space containing one or more elements of a certain type. All array types derive from a common base class, [...] Each element is referenced by its index just like in C++ and Java.|$|E
50|$|Except {{for some}} linear <b>array</b> <b>type</b> of cameras at the highest-end and simple web cams at the lowest-end, a digital memory device (usually a memory card; floppy disks and CD-RWs are less common) {{is used for}} storing images, which may be {{transferred}} to a computer later.|$|E
5000|$|C++03 {{offers two}} kinds of string literals. The first kind, {{contained}} within double quotes, produces a null-terminated <b>array</b> of <b>type</b> [...] The second kind, defined as , produces a null-terminated <b>array</b> of <b>type</b> , where [...] is a wide-character of undefined size and semantics. Neither literal type offers support for string literals with UTF-8, UTF-16, or {{any other kind of}} Unicode encodings.|$|R
40|$|A {{widely known}} problem of {{commercial}} database systems is {{their lack of}} support for "scientific" applications. This is in part derived from their inability {{to deal with some}} data <b>types</b> such as <b>arrays.</b> It is the purpose of this research to make possible the full manipulation of <b>array</b> <b>types</b> using the query language for an OODB. The proposal is to use the Monoid Comprehension Calculus (MCC) [11], properly augmented, to support <b>array</b> <b>types.</b> The approach is to define arrays as functions instead of specifying them directly as monoids. This overcomes significant disadvantages of previously reported approaches. We present some examples of queries involving intensive manipulation of arrays in the context of image processing. 1 Introduction Object oriented database technology has reduced the impedance between programming languages and databases. In large part, {{this is due to the}} introduction of collections, some of which are recognizable abstract data types frequently employed in scientific pro [...] ...|$|R
50|$|Arrays and structs can {{be viewed}} as {{predefined}} generic types. Every usage of an <b>array</b> or struct <b>type</b> instantiates a new concrete type, or reuses a previous instantiated <b>type.</b> <b>Array</b> element <b>types</b> and struct element types are parameterized types, which are used to instantiate the corresponding generic type. All this is usually built-in in the compiler and the syntax differs from other generic constructs. Some extensible programming languages try to unify built-in and user defined generic types.|$|R
