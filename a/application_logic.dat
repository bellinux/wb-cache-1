800|1701|Public
25|$|Qt Quick's markup {{language}} (available since Qt 4.7) uses JavaScript for its <b>application</b> <b>logic.</b> Its declarative syntax is also similar to JavaScript.|$|E
25|$|Mutated XSS happens, {{when the}} {{attacker}} injects {{something that is}} seemingly safe, but rewritten and modified by the browser, while parsing the markup. This makes it extremely hard to detect or sanitize within the websites <b>application</b> <b>logic.</b>|$|E
25|$|To gain {{performance}} and determinism, some systems place functions that {{would likely be}} viewed as <b>application</b> <b>logic,</b> rather than as device drivers, in kernel mode; security applications (access control, firewalls, etc.) and operating system monitors are cited as examples. At least one embedded database management system, eXtremeDB Kernel Mode, has been developed specifically for kernel mode deployment, to provide a local database for kernel-based application functions, and to eliminate the context switches that would otherwise occur when kernel functions interact with a database system running in user mode.|$|E
5000|$|... a {{run-time}} <b>application</b> <b>logics</b> {{expressed in}} the Cicode programming language.|$|R
50|$|The eXtremeDB Kernel Mode edition deploys the {{database}} system within an operating system kernel, to provide database functions to kernel-based <b>applications</b> <b>logic.</b>|$|R
50|$|Canig√≥'s {{architecture}} {{is based on}} Model-View-Controller. There is an abstraction process that allows {{the division of the}} <b>application</b> <b>logics</b> in three main components able to be developed by different rols of a team.|$|R
2500|$|... "Fat models, skinny {{controller}}s" [...] {{means that}} most of the <b>application</b> <b>logic</b> should be placed within the model while leaving the controller as light as possible.|$|E
2500|$|During this period, Apple {{completed}} numerous acquisitions {{to create}} a portfolio of digital production software for both professionals and consumers. In 1998, Apple purchased Macromedia's Key Grip software project, signaling an expansion into the digital video editing market. The sale was an outcome of Macromedia's decision to solely focus upon web development software. The product, still unfinished {{at the time of}} the sale, was renamed [...] "Final Cut Pro" [...] when it was launched on the retail market in April 1999. The development of Key Grip also led to Apple's release of the consumer video-editing product iMovie in October 1999. Next, Apple successfully acquired the German company Astarte, which had developed DVD authoring technology, as well as Astarte's corresponding products and engineering team in April 2000. Astarte's digital tool DVDirector was subsequently transformed into the professional-oriented DVD Studio Pro software product. Apple then employed the same technology to create iDVD for the consumer market. In 2002, Apple purchased Nothing Real for their advanced digital compositing application Shake, as well as Emagic for the music productivity <b>application</b> <b>Logic.</b> The purchase of Emagic made Apple the first computer manufacturer to own a music software company. The acquisition was followed by the development of Apple's consumer-level GarageBand application. The release of iPhoto in the same year completed the iLife suite.|$|E
5000|$|<b>Application</b> <b>logic</b> is an {{integral}} part of developed applications, implemented either by using controllers or as part of the route declarations. The syntax used to define <b>application</b> <b>logic</b> is similar to the one used by Sinatra framework.|$|E
50|$|Work on <b>applications</b> of {{mathematical}} <b>logic</b> has pervaded Mr. McGoveran's career (1971-present). He has done original research and {{published on the}} structure of paradoxes, <b>applications</b> of quantum <b>logic</b> to schizophrenia, linguistic logic and computational semantics (under James D. McCawley), fuzzy <b>logic,</b> and <b>applications</b> of <b>logic,</b> including multi-valued logics, to databases.|$|R
50|$|In essence, Crowcroft {{suggests}} {{that instead of}} using general-purpose computers to do packet switching, the required operations should be reduced to <b>application</b> specific <b>logic</b> and then that <b>application</b> specific <b>logic</b> should be implemented using optical components. The work is not actually based on Turing's research.|$|R
30|$|Programmable smart contract. As {{mentioned}} before, {{the smart}} contract in the Blockchain {{refer to a}} set of software codes that specify responsibilities of each contract participant and the execution conditions of the contract. Therefore, Blockchain provides a platform to program smart contracts based different <b>application</b> <b>logics.</b>|$|R
50|$|In the PIA, all <b>application</b> <b>logic</b> is {{deployed}} at {{the application}} server layer.|$|E
5000|$|The <b>Application</b> <b>Logic</b> of {{your client}} web {{application}} {{is written in}} JavaScript. For example: ...|$|E
5000|$|... server {{packages}} - {{a software}} library used by developers for writing <b>application</b> <b>logic</b> on the server.|$|E
30|$|Several {{management}} and control architectures have been proposed for virtualized networks. However, {{to the best of}} our knowledge, these proposals have not yet fully investigated a service-oriented hierarchical architecture, in which different types of functionalities that could be offered by a network resource (e.g., low level routing/transport functionalities, high level <b>application</b> <b>logics)</b> can be dynamically discovered, used and composed.|$|R
40|$|The present {{contribution}} describes {{approaches for}} visualizing building related data (temperature, energy use, etc.). A web based visualization framework is presented {{and a number}} of use cases are demonstrated (i. e. three-dimensional building browsing). Usability is optimized for diverse screen sizes, input methods (i. e. touch screen), and <b>application</b> <b>logics.</b> Finally, guidelines for further user interface development are presented...|$|R
5000|$|Decoupling of <b>application</b> {{business}} <b>logic</b> {{from the}} details of its invoked service calls ...|$|R
5000|$|... strong [...] "separating logic from presentation": it is {{impossible}} to embed <b>application</b> <b>logic</b> in the Mustache templates.|$|E
5000|$|... to {{decouple}} DOM manipulation from <b>application</b> <b>logic.</b> The difficulty {{of this is}} dramatically affected {{by the way the}} code is structured.|$|E
5000|$|The {{application}} tier {{is provided}} via an integrated communication server. This server supports {{the administration of}} sessions and the <b>application</b> <b>logic.</b>|$|E
40|$|We {{introduce}} a domain-theoretic foundation for disjunctive logic programming. This foundation {{is built on}} clausal logic, {{a representation of the}} Smyth powerdomain of any coherent algebraic dcpo. We establish the completeness of a resolution rule for inference in such a clausal logic; we {{introduce a}} natural declarative semantics and a fixed-point semantics for disjunctive logic programs, and prove their equivalence; finally, we apply our results to give both a syntax and semantics for default logic in any coherent algebraic dcpo. Key Words: Domain theory and <b>applications,</b> <b>logic</b> programming, logics in artificial intelligence. 1...|$|R
5000|$|Our {{community}} derives its {{solutions and}} advances progress primarily through the <b>application</b> of <b>logic</b> and best available knowledge.|$|R
5000|$|Rudiments of Public Speaking and Debate or, Hints on the <b>Application</b> of <b>Logic</b> (New York: McElrath & Barker, 1853) ...|$|R
5000|$|Qt Quick's markup {{language}} (available since Qt 4.7) uses JavaScript for its <b>application</b> <b>logic.</b> Its declarative syntax is also similar to JavaScript.|$|E
5000|$|SOP {{concepts}} {{provide a}} robust base for a semantic approach to programming integration and <b>application</b> <b>logic.</b> There are three significant benefits to this approach: ...|$|E
50|$|Due to {{the nature}} of their construction, it is {{possible}} to perform whole-system optimisation across device drivers and <b>application</b> <b>logic,</b> thus improving on the specialisation.|$|E
5000|$|... {{then to the}} IBM Thomas J. Watson Research Centerin Yorktown NY {{as manager}} of Principles and <b>Applications</b> of <b>Logic</b> Programming ...|$|R
5000|$|Construction {{of command}} {{languages}} and their translation {{into the program}} language of turing machines : <b>applications</b> of <b>logic</b> to advanced digital computer programming, 1957 ...|$|R
40|$|Recently, cloud systems {{composed}} of heterogeneous hardware have been increased to utilize progressed hardware power. However, to program applications for heterogeneous hardware to achieve high performance needs much technical skill and {{is difficult for}} users. Therefore, to achieve high performance easily, this paper proposes a PaaS which analyzes <b>application</b> <b>logics</b> and offloads computations to GPU and FPGA automatically when users deploy applications to clouds. Comment: 4 pages, 1 figure, 2016 6 th International Workshop on Computer Science and Engineering (WCSE 2016), June 201...|$|R
5000|$|... "Fat models, skinny {{controller}}s" [...] {{means that}} most of the <b>application</b> <b>logic</b> should be placed within the model while leaving the controller as light as possible.|$|E
5000|$|Since the {{templates}} {{are separated}} from the <b>application</b> <b>logic,</b> you need at least two files. The first one contains the presentation code as an XML template: ...|$|E
5000|$|Security - enables {{developers}} to decouple security from the <b>application</b> <b>logic</b> and shift security to a container (WebORB), where the application and its services are hosted.|$|E
40|$|In {{this paper}} we review the <b>application</b> of <b>logic</b> {{synthesis}} methods for uncovering minimal structures in observational/medical datasets. Traditionally used in digital circuit design, logic synthesis has taken major strides {{in the past}} few decades and forms the foundation of some of the most powerful concepts in computer science and data mining. Here we provide a review of current state of research in <b>application</b> of <b>logic</b> synthesis methods for data analysis and provide a demonstrative example for systematic application and reasoning based on these methods...|$|R
40|$|Available online 22 June 2015. This article reviews legal <b>applications</b> of <b>logic,</b> with a {{particularly}} marked concern for logical models of legal argument. We {{argue that the}} law is a rich test bed and important application field for logic-based AI research. First <b>applications</b> of <b>logic</b> to the representation of legal regulations are reviewed, where the main emphasis is on representation and where the legal conclusions follow from that representation as a matter of deduction. This includes the representation of deontic concepts, normative positions, legal ontologies, time and change. Then legal <b>applications</b> of <b>logic</b> are reviewed where legal rules are not just applied but are the object of reasoning and discourse. This includes arguing about applying statutory rules in unforeseen circumstances, interpretative reasoning in light of the facts of a case, and evidential reasoning to establish the facts of a case. This part of the review has special emphasis on argumentation-based approaches. This also holds for the final part, which discusses formal models of legal procedure and of multi-agent interaction in legal proceedings. The review concludes with identifying some of the main open research problems. The review shows that modern legal <b>applications</b> of <b>logic</b> confirm the recent trend of widening the scope of logic from deduction to information flow, argumentation and interaction...|$|R
40|$|This article reviews legal <b>applications</b> of <b>logic,</b> with a {{particularly}} marked concern for logical models of legal argument. We {{argue that the}} law is a rich test bed and important application field for logic-based AI research. First <b>applications</b> of <b>logic</b> to the representation of legal regulations are reviewed, where the main emphasis is on representation and where the legal conclusions follow from that representation as a matter of deduction. This includes the representation of deontic concepts, normative positions, legal ontologies, time and change. Then legal <b>applications</b> of <b>logic</b> are reviewed where legal rules are not just applied but are the object of reasoning and discourse. This includes arguing about applying statutory rules in unforeseen circumstances, interpretative reasoning in light of the facts of a case, and evidential reasoning to establish the facts of a case. This part of the review has special emphasis on argumentation-based approaches. This also holds for the final part, which discusses formal models of legal procedure and of multi-agent interaction in legal proceedings. The review concludes with identifying some of the main open research problems. The review shows that modern legal <b>applications</b> of <b>logic</b> confirm the recent trend of widening the scope of logic from deduction to information flow, argumentation and interaction...|$|R
