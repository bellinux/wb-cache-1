50|379|Public
25|$|A {{method to}} <b>attack</b> <b>signature</b> based online banking methods is to {{manipulate}} the used software in a way, that correct transactions are shown {{on the screen and}} faked transactions are signed in the background.|$|E
5000|$|Fragmentation: {{by sending}} {{fragmented}} packets, the attacker {{will be under}} the radar and can easily bypass the detection system's ability to detect the <b>attack</b> <b>signature.</b>|$|E
50|$|A {{method to}} <b>attack</b> <b>signature</b> based online banking methods is to {{manipulate}} the used software in a way, that correct transactions are shown {{on the screen and}} faked transactions are signed in the background.|$|E
40|$|This paper {{presents}} a new algorithm for generation of <b>attack</b> <b>signatures</b> based on sequence alignment. The algorithm {{is composed of}} two parts: a local alignment algorithm-GASBSLA (Generation of <b>Attack</b> <b>Signatures</b> Based on Sequence Local Alignment) and a multi-sequence alignment algorithm-TGMSA (Tri-stage Gradual Multi-Sequence Alignment). With the inspiration of sequence alignment used in Bioinformatics, GASBSLA replaces global alignment and constant weight penalty model by local alignment and affine penalty model to improve the generality of <b>attack</b> <b>signatures.</b> TGMSA {{presents a}} new pruning policy to make the algorithm more insensitive to noises in the generation of <b>attack</b> <b>signatures.</b> In this paper, GASBSLA and TGMSA are described in detail and validated by experiments...|$|R
40|$|Abstract: A {{main problem}} for the {{detection}} of security violations in misuse detection systems is the manner how <b>attack</b> scenarios (<b>signatures)</b> are described. <b>Attack</b> languages are used to specify attack scenarios for misuse detection systems. Usually not only the <b>attack</b> <b>signatures</b> are described also some details controlling the detection process have to be noted. This is disadvantageous because it makes signature development more complicated and prone to errors. In this paper we propose an attack language for describing signatures without caring about the used detection techniques. The language further provides means to simplify the description of <b>attack</b> <b>signatures...</b>|$|R
40|$|Intrusion {{detection}} systems (IDS) {{are special}} computer security tools which help detect intrusion attempts. Misuse based detection {{is one of}} the techniques which is used by IDS to recognize predefined <b>attack</b> <b>signatures.</b> <b>Attack</b> languages, also known as detection languages, are used to describe <b>attack</b> <b>signatures.</b> Detection languages should be simple, expressive and flexible enough to help encode event signature accurately and conveniently. This paper shows the effectiveness of constraint based Trend Template (TT) as an efficient detection language by encoding some attack scenarios and focusing on the Trend Detector which recognizes those signatures from intrusion data. </p...|$|R
5000|$|Throughout his career, Singer {{has used}} Pearl drums, {{hardware}} and pedals, Terry Bozzio <b>Attack</b> <b>signature</b> drumheads, Zildjian cymbals and Ddrum acoustic drum triggers. Singer {{has his own}} signature series snare drum and artist series drumsticks by Pearl, and Zildjian also makes its own [...] "Eric Singer Artist Series" [...] drumsticks.|$|E
5000|$|Pattern change evasion: IDSs {{generally}} rely on 'pattern matching' {{to detect}} an attack. By changing the data {{used in the}} attack slightly, {{it may be possible}} to evade detection. For example, an [...] (IMAP) server may be vulnerable to a buffer overflow, and an IDS is able to detect the <b>attack</b> <b>signature</b> of 10 common attack tools. By modifying the payload sent by the tool, so that it does not resemble the data that the IDS expects, {{it may be possible to}} evade detection.|$|E
50|$|Another evasion {{technique}} is {{to craft a}} series of packets with TCP sequence numbers configured to overlap. For example, the first packet will include 80 bytes of payload but the second packet's sequence number will be 76 bytes {{after the start of}} the first packet. When the target computer reassembles the TCP stream, they must decide how to handle the four overlapping bytes. Some operating systems will take the older data, and some will take the newer data. If the IDS doesn't reassemble the TCP {{in the same way as}} the target, it can manipulated into either missing a portion of the attack payload or seeing benign data inserted into the malicious payload, breaking the <b>attack</b> <b>signature.</b> This technique can also be used with IP fragmentation in a similar manner.|$|E
40|$|Abstract- This paper {{describes}} part of {{an ongoing}} project that specifies a new survivability architecture based on <b>attack</b> <b>signatures.</b> Specifically, it defines a process that attempts to generate accurate <b>attack</b> <b>signatures</b> at the lowest level, i. e. in the kernel, in a controlled operating system and network environment. These signatures are then used for two purposes, (1) to implement real-time attack recognition, and (2) to aid in a design process that uses methods of fault-tolerant systems design to achieve survivability. This research focuses on the first case...|$|R
40|$|Abstract — Intrusion {{detection}} systems (IDS) {{are special}} computer security tools which help detect intrusion attempts. Misuse based detection {{is one of}} the techniques which is used by IDS to recognize predefined <b>attack</b> <b>signatures.</b> <b>Attack</b> languages, also known as detection languages, are used to describe <b>attack</b> <b>signatures.</b> Detection languages should be simple, expressive and flexible enough to help encode event signature accurately and conveniently. This paper shows the effectiveness of constraint based Trend Template (TT) as an efficient detection language by encoding some attack scenarios and focusing on the Trend Detector which recognizes those signatures from intrusion data. Index Terms—Intrusion detection system (IDS), Tren...|$|R
40|$|Abstract — In {{this paper}} we {{address the problem of}} {{modeling}} different temporal relationships between events in multi-event <b>attack</b> <b>signatures.</b> In many existing signature representations encoding and interpreting such temporal properties can be difficult tasks. There is a growing need for a formalism which is both expressive and manageable, to support and simplify these tasks. To this end, we propose a new formal conceptual model based on Interval Temporal Logic (ITL). We show how temporal properties of multi-event <b>attack</b> <b>signatures</b> can be conveniently expressed in our model, giving a number of illustrative examples. I...|$|R
40|$|Hardening IT {{infrastructures}} of today’s web-centric society {{against any}} form of attacks is a critical factor {{for the success of}} internet services. The arising expenses in case of violations of confidentiality, integrity or availability (CIA) of provided data and services are hard to estimate, but usually substantial. In recent years lots of research about how to increase the security of IT infrastructures has been done. The emerging NoAH project focuses thereby on the field of automated <b>attack</b> <b>signature</b> generation. This survey is part of the NoAH project and helps in getting an overview about existing approaches in the field of automated <b>attack</b> <b>signature</b> generation. Criteria for analyzing and comparing existing methods are introduced. The goal of this survey is to lay a base for future work in the area of automated <b>attack</b> <b>signature</b> generation and related research fields...|$|E
40|$|In {{its most}} general form, an <b>attack</b> <b>signature</b> {{is a program}} that can {{correctly}} determine if an input network packet sequence can successfully attack a protected network application. Filter rules used in firewall and network intrusion prevention systems (NIPS) are an abstract form of <b>attack</b> <b>signature.</b> This paper presents the design, implementation, and evaluation of an automated <b>attack</b> <b>signature</b> generation system called Trag, that automatically generates an executable <b>attack</b> <b>signature</b> program from a victim program’s source and a given attack input. Trag leverages dynamic data and control dependencies to extract relevant code in the victim program, accurately identifies variable initialization statements that are not executed in the given attack, is able to generate attack signatures for multi-process network applications, and reduces the size of attack signatures by exploiting responses from victim programs. Experiments with a fully working Trag prototype show that Trag’s signatures can indeed prevent attacks against multiple production-grade vulnerable server/web applications, such as apache, wu-ftpd and MyBullentinBoard, with up to 65 % reduction in size {{when compared with the}} victim program. In terms of performance overhead, the additional latency as observed from the client-side is no more than 25 µsec for multi-process web applications, while the overall throughput remains unaffected. 1...|$|E
40|$|Adaptive {{system and}} method for {{responding}} to computer network security attacks A dynamic network security system (20) responds to a security attack (92) on a computer network (22) having a multiplicity of computer nodes (24). The security system (20) includes a plurality of security agents (36) that concurrently detect occurrences of security events (50) on associated computer nodes (24). A processor (40) processes the security events (50) that are received from the security agents (36) to form an <b>attack</b> <b>signature</b> (94) of the attack (92). A network status display (42) displays multi-dimensional attack status information representing the attack (92) in a two dimensional image to indicate the overall nature and severity of the attack (92). The network status display (42) also includes a list of recommended actions (112) for mitigating the attack. The security system (20) is adapted {{to respond to a}} subsequent attack that has a subsequent signature most closely resembling the <b>attack</b> <b>signature</b> (94) ...|$|E
40|$|Abstract — Intrusion {{detection}} system (IDS) i components of network security. IDS can abnormal behaviors to detect attacks. When ID {{in order to}} detect more attacks, we have to <b>attack</b> <b>signatures</b> on IDS. However, in re wireless sensor networks, it is not efficient to <b>attack</b> <b>signatures.</b> And {{it is hard to}} maintai database because it should be updated frequen of attacks appear. In this paper, we propose mechanism which reduces the usage of mem Analysis of our proposal shows that our pro memory. Keywords-Intrusion Detection System; Network; security; resource efficient; Bloom fil...|$|R
40|$|Abstract. To {{dynamically}} discover network attacks {{hidden in}} network data, an intelligent detection method for network security is proposed. Biological immune principles and mechanisms are adopted {{to judge whether}} network data contain illegal network packets. Signature library of network attacks and section library of <b>attack</b> <b>signatures</b> are constructed. They store <b>attack</b> <b>signatures</b> and signature sections, respectively. They are {{used to make the}} initial detection ability of proposed method. Detectors are defined to simulate immune cells. They evolve dynamically to adapt the network security. Signatures of network data are extracted from IP packets. Detectors match network data's signatures which mean some attacks. Warning information is formed and sent to network administrators according to recognized attacks...|$|R
40|$|Intrusion detection/prevention systems (IDSs/IPSs) heavily rely on {{signature}} {{databases and}} pattern matching (PM) techniques to identify network attacks. The engines of such systems often employ traditional PM algorithms {{to search for}} telltale patterns in network flows. The observations that real-world network traffic is largely legitimate and that telltales manifested by exploits rarely appear in network streams lead us to the proposal of Fingerprinter. This framework integrates fingerprinting and PM methods to rapidly distinguish well-behaved from malicious traffic. Fingerprinter produces concise digests or fingerprints for <b>attack</b> <b>signatures</b> during its programming phase. In its querying phase, the framework quickly identifies attack-free connections by transforming input traffic into its fingerprint space and matching its digest against those of <b>attack</b> <b>signatures.</b> If the legitimacy of a stream cannot be determined by fingerprints alone, our framework uses the Boyer–Moore algorithm to ascertain whether <b>attack</b> <b>signatures</b> appear in the stream. To reduce false matches, we resort to multiple fingerprinting techniques including Bloom–Filter and Rabin–Fingerprint. Experimentation with a prototype {{and a variety of}} traces has helped us establish that Fingerprinter significantly accelerates the attack detection process...|$|R
3000|$|... • Initially, the {{similarity}} between multiple executions of each attack step, at different time periods, was calculated {{with the use of}} an automated system that reduced the errors because of the human responsiveness. Then {{the similarity}} between an attack step and the respective time period of normal operation was derived. Ideally, this approach would facilitate the identification of specific system call patterns that will form the <b>attack</b> <b>signature.</b>|$|E
40|$|Abstract. Chosen-message {{attack on}} RSA is usually {{considered}} as an inherent property of its homomorphic structure. In this paper, {{we show that}} nonhomomorphic RSA-type cryptosystems are also susceptible to a chosen-message attack. In particular, we prove that only one message is needed to mount a successful chosen-message attack against the Lucas-based systems and Demytko’s elliptic curve system. Keywords. Chosen-message <b>attack,</b> <b>signature</b> forgery, RSA, Lucas-based systems, Demytko’s elliptic curve system...|$|E
40|$|Denial-of-Service (DoS) and Distributed DoS (DDoS) attacks {{can cause}} serious {{problems}} in wireless networks due to limited network and host resources. Attacker traceback is a promising solution {{to take a}} proper countermeasure near the attack origins, to discourage attackers from launching attacks, and for forensics. However, attacker traceback in Mobile Ad-hoc Networks (MANETs) is a challenging problem due to the dynamic topology, and limited network resources. It is especially difficult to trace back attacker(s) when they are moving to avoid traceback. In this paper, we introduce the ATTENTION protocol framework, which pays special attention to MAC layer abnormal activity under attack. ATTENTION consists of three classes, namely, coarse-grained traceback, fine-grained traceback and spatio-temporal fusion architecture. For energy-efficient attacker searching in MANETs, we also utilize small-world model. Our simulation analysis shows 79 % of success rate in DoS attacker traceback with coarse-grained <b>attack</b> <b>signature.</b> In addition, with fine-grained <b>attack</b> <b>signature,</b> it shows 97 % of success rate in DoS attacker traceback and 83 % of success rate in DDoS attacker traceback. We also show that ATTENTION has robustness against node collusion and mobility...|$|E
30|$|The {{most common}} {{technique}} used to inspect packets’ payloads for malicious threats is intrusion detection. Performing packet inspection requires matching <b>attack</b> <b>signatures</b> with each captured packet. The {{sheer volume of}} new <b>attack</b> <b>signatures</b> coupled with the rapid increase in links’ speeds poses a challenge in terms of processing time, area, and power. Aldwairi et al. stated that the signature matching operation is the most CPU-intensive task [2]. For example, Snort, {{the most commonly used}} open-source IDS, includes a large rule set containing more than 10, 000 signatures [3]. Consequently, providing an efficient matching algorithm to improve the IDS operations at low cost remains an open research problem.|$|R
30|$|Misuse-based IDSs {{consist of}} {{monitoring}} {{the network and}} matching the network activities against the expected behavior of an attack. The key component of such a system is the comprehensiveness of the <b>attack</b> <b>signatures.</b> Typically, the signatures fed to a misuse-IDS rely on expert knowledge [84]. The source of this knowledge can either be human experts, {{or it can be}} extracted from data. However, the huge volume of generated network traces renders manual inspection practically impossible. Furthermore, <b>attack</b> <b>signatures</b> extracted by sequentially scanning network traces will fail to capture advanced persistent threats or complex attacks with intermittent symptoms. Intruders can easily evade detection if the signatures rely on a stream of suspicious activities by simply inserting noise in the data.|$|R
40|$|Intrusion {{detection}} is {{the process}} of identifying activity that is malicious or unauthorized. The Intrusion Detection System (IDS) is designed to monitor for known <b>attack</b> <b>signatures</b> and sniff out suspicious behaviour. Today’s Security infrastructure are becoming extremely complex, it includes firewalls, identification and authentication systems, access control product, Virtual private networks, encryption products, virus scanners, and more. Failure of one of the above component of our Security infrastructure puts the system in risk which they are supposed to protect. Even if our perimeter systems are fully up to date, new <b>attacks</b> that <b>signature</b> files don'...|$|R
40|$|The {{increasing}} {{popularity of}} web service technology is attracting hackers and attackers to hack the web {{services and the}} servers on which they run. Organizations are therefore facing the challenge of implementing adequate security for Web Services. A major threat is that of intruders which may maliciously try to access the data or services. The automated methods of signature extraction extract the binary pattern blindly resulting in more false positives. In this paper a semi automated approach is proposed to analyze the attacks and generate signatures for web services. For data collection, apart from the conventional SOAP data loggers, honeypots are also used that collect small data which is of high value. To filter out the most suspicious part of the data, SVM based classifier is employed to aid the system administrator. By applying an <b>attack</b> <b>signature</b> algorithm on the filtered data, a more balanced <b>attack</b> <b>signature</b> is extracted that results in fewer false positives and negatives. It helps the Security Administrator to identify the web services that are vulnerable or are attacked more frequently...|$|E
40|$|Malware {{is one of}} the {{significant}} problems in the current Internet. Often security tool vendors develop an <b>attack</b> <b>signature</b> to deal with the attacks. However attack techniques such as polymorphism and metamorphism can be used by the attacker to generate multiple variants of the malware and complicate the signature identification. In this paper we present our analysis on sample set of malware and then discuss how MAEC’s taxonomy can help to address the malware problem. 6 page(s...|$|E
40|$|An {{enhanced}} authentication key exchange protocol was proposed to exchange multiple session keys between two participants at a time. This paper {{shows that this}} enhanced protocol is insecure under the known session key attack, known long-term private key <b>attack,</b> <b>signature</b> forgery attack, and replay attack. This paper also proposes an enhanced and secure key agreement protocol for exchanging multiple session keys in one run of the protocol. The protocol is secure against the attacks mentioned above. Besides, a formal proof is given to guarantee {{the security of the}} proposed protocol under other potential attacks. Keywords: Authentication, Diffie-Hellman key exchange, perfect forward secrecy, session key. 1...|$|E
40|$|In {{the era of}} {{information}} systems and internet there is more concern rising towards information security in day to day life, along withthe availability of the vulnerability assessment mechanisms to identifying the electronic attacks. Traditionally intrusion detection systems (IDS) are classified based on the style of detection they are Using. Ther are two main categories of intrusion detection (ID) those are misuse detection and anomaly detection. This paper mainly concerned about misuse detection system (MDS). In misuse detection, the IDS analyzes the information it gathers and compares it to large databases of <b>attack</b> <b>signatures.</b> Essentially, the IDS looks for a specific attack {{that has already been}} documented. Like a virus detection system, misuse detection software {{is only as good as}} the database of <b>attack</b> <b>signatures</b> that it uses to ompare packets against...|$|R
50|$|Panic <b>Attack's</b> <b>signature</b> {{move was}} to slip beneath a robot, using its forks {{to get a}} grip inside the opponent's armour, wheels or other openings, before driving into the pit release button and pushing it down the pit. It {{achieved}} this many times, against robots like Axe Awe, S.M.I.D.S.Y., Manta and Kat 3.|$|R
40|$|We {{describe}} {{how to build}} a network intrusion detection sensor by slightly modifying NASA's CLIPS source code introducing some new features. An overview of the system is presented emphasizing the strategies used to inter-operate between the packet capture engine written in C and CLIPS. Some extensions were developed in order to manipulate timestamps, multiple string pattern matching and certainty factors. Several Snort functions and plugins were adapted and used for packet decoding and preprocessing. A rule translator was also built to reuse most of the Snort's <b>attack</b> <b>signatures.</b> Despite some performance drawbacks, results prove that CLIPS can be used for real-time network intrusion detection under certain conditions. Several <b>attack</b> <b>signatures</b> using CLIPS rules are showed in the appendix. By mixing CLIPS with Snort features, it was possible to introduce flexibility and expressiveness to network intrusion detection...|$|R
40|$|Adequate system {{security}} {{is the first}} step towards data integrity and protection, however even with the most advanced protection, modern computer and communication infrastructures are susceptible to various types of attacks. With traditional signature based systems losing proficiency, the Hybrid Intrusion Detection System (HIDS) approach proves the vitality of detecting intrusions and anomalies, simultaneously, by automated data mining over network traffic and signature generation. This paper will focus on analyzing different anomaly detection techniques used to detect zero day attacks and an automatic <b>attack</b> <b>signature</b> generation mechanism that can be complemented with the former. This will serve to be an elemental analysis of a few techniques, their working, and their pros and cons put together in a concise form...|$|E
40|$|In this paper, we {{describe}} {{a new approach}} for the real-time detection of denial of service computer attacks using timedependent deterministic finite automata. Current networkbased intrusion detection systems employ state-transition based methods as a primary mean to detecting system penetrations and misuse as well. However, we utilize the time intervals between certain event occurrences [as defined in our automaton] to improve the accuracy of detecting specific denial of service attacks. Unlike some other detection systems, our design also lends itself to a distributed detection architecture, permitting non-obtrusive <b>attack</b> <b>signature</b> updating and operating system portability. This paper discusses the implementation of our prototype along with results from its test evaluation using publicly available data...|$|E
40|$|In this paper, {{we propose}} {{a simple but}} robust scheme to detect denial of service attacks (including {{distributed}} denial of service attacks) by monitoring the increase of new IP addresses. Unlike previous proposals for bandwidth attack detection schemes {{which are based on}} monitoring the traffic volume, our scheme is very effective for highly distributed denial of service attacks. Our scheme exploits an inherent feature of DDoS attacks, which makes it hard for the attacker to counter this detection scheme by changing their <b>attack</b> <b>signature.</b> Our scheme uses a sequential nonparametric change point detection method to improve the detection accuracy without requiring a detailed model of normal and attack traffic. We demonstrate that we can achieve high detection accuracy on a range of different network packet traces...|$|E
40|$|SYN {{flooding}} {{attacks are}} a common type of Distributed Denial-of-Service (DDoS) attack. Early detection is desirable but traditional passive detection methods are inaccurate {{in the early stages}} due to their reliance on passively sniffing an <b>attacking</b> <b>signature.</b> The method presented in this paper captures <b>attacking</b> <b>signatures</b> using an active probing scheme that ensures the efficient early detection. The active probing scheme–DARB obtains the delay of routers by sending packets containing special Time-to-Live set at the IP headers. The results of the probe are used to perform SYN flooding detection, which is reliable and with little overhead. This approach is more independent than other methods that require cooperation from network devices. Experiments show that this delay-probing approach distinguishes half-open connections caused by SYN flooding attacks from those arising from other causes accurately and at an early stage. ...|$|R
40|$|An {{approach}} to system survivability is presented that uses low level attack recognition and high level migratory autonomous agents {{as a mechanism}} for recognition, early warning, and response to malicious attacks. Attack recognition is based on <b>attack</b> <b>signatures</b> at the kernel level. Signature analysis triggers agents capable of propagating attack information and facilitating reactionary measures. The approach isintended to augment existing intrusion detection systems...|$|R
40|$|Abstract—Deep packet {{inspection}} (DPI) {{is often}} used in network intrusion detection and prevention systems (NIDPS), where incoming packet payloads are compared against known <b>attack</b> <b>signatures.</b> Processing every single byte in the incoming packet payload has a very stringent time constraint, e. g., 200 ps for a 40 -Gbps line. Traditional DPI systems either need a large memory space or use special memory such as ternary content addressable memory (TCAM), limiting parallelism, or yielding high cost/power consumption. In this paper, we present a highspeed, single-chip DPI scheme that is scalable and configurable through memory updates. The scheme {{is based on a}} novel data structure called TriBiCa (Trie Bitmap Content Analyzer), which provides minimal perfect hashing functionality. It uses a trie structure with a hash function performed at each layer. Branching is determined by the hashing results with an objective to evenly partition <b>attack</b> <b>signatures</b> into multiple groups at each layer. During a query, as an input traverses the trie, an address to a table in the memory that stores all <b>attack</b> <b>signatures</b> is formed and is used to access the signature for an exact match. Due to the small space required, multiple copies of TriBiCa can be implemented on a single chip to perform pipelining and parallelism simultaneously, thus achieving high throughput. We have designed the TriBiCa on a modest FPGA chip, Xilinx Virtex II Pro, achieving 10 -Gbps throughput without using any external memory. A proof-of-concept design is implemented and tested with 1 -Gbps packet streams. By using today’s state-of-the-art FPGAs, a throughput of 40 Gbps is believed to be achievable. Index Terms—TriBiCa, NIDPS, minimal perfect hashin...|$|R
