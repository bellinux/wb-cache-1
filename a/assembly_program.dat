165|737|Public
25|$|There is a freely {{available}} MIPS32 simulator (earlier versions simulated {{only the}} R2000/R3000) called SPIM {{for use in}} education. EduMIPS64 is a GPL graphical cross-platform MIPS64 CPU simulator, written in Java/Swing. It supports a wide subset of the MIPS64 ISA and allows the user to graphically see {{what happens in the}} pipeline when an <b>assembly</b> <b>program</b> is run by the CPU. It has educational purposes and is used in some computer architecture courses in universities around the world.|$|E
500|$|In {{arriving}} at its conclusion, {{the committee was}} advised by a Scientific Panel of four physicists from the Manhattan Project: Enrico Fermi and Arthur H. Compton of the Metallurgical Laboratory at the University of Chicago; Ernest O. Lawrence of the Radiation Laboratory at the University of California at Berkeley; and J. Robert Oppenheimer, who directed the bomb <b>assembly</b> <b>program</b> at Los Alamos. Reinforcing the decision arrived at on June 1, the scientists wrote in a formal report on June 16: ...|$|E
2500|$|Assembly languages, {{and the use}} of {{the word}} assembly, [...] date to the {{introduction}} of the stored-program computer. The first assembly language was developed in 1947 by Kathleen Booth for the ARC2 at Birkbeck, University of London following work with John von Neumann and Herman Goldstine at the Institute for Advanced Study. The Electronic Delay Storage Automatic Calculator (EDSAC) had an assembler called initial orders featuring one-letter mnemonics in 1949. SOAP (Symbolic Optimal <b>Assembly</b> <b>Program)</b> was an assembly language for the IBM 650 computer written by Stan Poley in 1955.|$|E
40|$|This paper {{introduces}} the VPC Assembler, a Windows 95 / 98 <b>assembly</b> <b>programming</b> environment that targets the Virtual PC, a simulator {{of a small}} computer system based on the Intel 8086 architecture [1]. The assembler provides an editor, a debugger, and views of the <b>assembly</b> <b>program’s</b> variables, the CPU’s registers, and the Virtual PC’s output. The VPC Assembler {{was designed as a}} learning tool for courses that introduce <b>assembly</b> <b>programming</b> or for courses, such as computer architecture or organization, that briefly cover the fundamentals of assembly. ...|$|R
5000|$|Jeff Arwadi - <b>assembly,</b> <b>programming,</b> manipulation, arrangements, mixing, {{mastering}} ...|$|R
50|$|For {{practical}} and didactical intentions the equivalent register machine {{can be used}} as a usual <b>assembly</b> <b>programming</b> language.|$|R
2500|$|IBM {{introduced}} a smaller, more affordable computer in 1954 that proved very popular. The IBM 650 weighed over 900kg, the attached power supply weighed around 1350kg {{and both were}} held in separate cabinets of roughly 1.5 meters by 0.9 meters by 1.8 meters. It cost US$500,000 ($ as of [...] ) or could be leased for US$3,500 a month ($ as of [...] ). Its drum memory was originally 2,000 ten-digit words, later expanded to 4,000 words. [...] Memory limitations such as this were to dominate programming for decades afterward. [...] The program instructions were fetched from the spinning drum as the code ran. [...] Efficient execution using drum memory was provided {{by a combination of}} hardware architecture: the instruction format included the address of the next instruction; and software: the Symbolic Optimal <b>Assembly</b> <b>Program,</b> SOAP, assigned instructions to the optimal addresses (to the extent possible by static analysis of the source program). Thus many instructions were, when needed, located in the next row of the drum to be read and additional wait time for drum rotation was not required.|$|E
50|$|The FORTRAN <b>Assembly</b> <b>Program</b> {{was first}} {{introduced}} for the 709.|$|E
5000|$|... #Caption: Students in Houston, Texas {{volunteering}} for the Yuck Game Show science <b>assembly</b> <b>program.</b>|$|E
50|$|ACE {{files are}} {{generated}} by various <b>assembly</b> <b>programs,</b> includingPhrap, CAP3, Newbler, Arachne, AMOS (sequence assembly) (more specifically Minimo) and Tigr Assembler v2.|$|R
50|$|The machine matched COBOL {{so closely}} that the COBOL {{compiler}} was simple and fast, and COBOL programmers found {{it easy to}} do <b>assembly</b> <b>programming</b> as well.|$|R
5000|$|... court forms: {{forms in}}structions, forms in plain language, forms in {{multiple}} languages, form document <b>assembly</b> <b>programs,</b> assistance with filling out forms, forms creation, writing of form instructions ...|$|R
50|$|OpenLisp {{includes}} an interpreter associated to a REPL, a Lisp <b>Assembly</b> <b>Program</b> (LAP) and a C backend compiler.|$|E
50|$|The Sunday morning {{service of}} a local Visalia church is also {{broadcast}} on the station. The Visalia First <b>Assembly</b> <b>program</b> runs 35-40 minutes beginning at 11 AM Sundays.|$|E
50|$|After the 2003 Kalapa <b>Assembly</b> <b>program,</b> it was {{announced}} that the study and practice of the Werma Sadhana was to be moved from the Shambhala Training to the Buddhist curriculum.|$|E
50|$|Consed is {{a program}} for viewing, editing, and {{finishing}} DNA sequence assemblies. Originally developed for sequence assemblies created with phrap, recent versions also support other sequence <b>assembly</b> <b>programs</b> like Newbler.|$|R
50|$|MARS (MIPS Assembler and Runtime Simulator) is a Java-based IDE for the MIPS <b>Assembly</b> <b>Programming</b> Language and an {{alternative}} to SPIM.Its initial release was in 2005 and is under active development.|$|R
25|$|Since macros {{can have}} 'short' names but expand to several or indeed many lines of code, {{they can be}} used to make <b>assembly</b> {{language}} <b>programs</b> appear to be far shorter, requiring fewer lines of source code, as with higher level languages. They can also be used to add higher levels of structure to <b>assembly</b> <b>programs,</b> optionally introduce embedded debugging code via parameters and other similar features.|$|R
50|$|According to Donald Knuth, Melvin Conway {{coined the}} term {{coroutine}} in 1958 when he applied it to construction of an <b>assembly</b> <b>program.</b> The first published explanation of the coroutine appeared later, in 1963.|$|E
5000|$|BMA Performance: Three Andys by Rich Espey, Directed by Genevieve de Mahy Fourth Annual Murder Ink {{reading by}} Anna Ditkoff, Directed by J. Buck Jabaily Rumpled by The Single Carrot Theatre <b>Assembly</b> <b>Program,</b> Directed by J. Buck Jabaily ...|$|E
50|$|STRETCH <b>Assembly</b> <b>Program</b> (STRAP) was the {{assembler}} for the IBM 7030 Stretch computer. The {{first version}} (STRAP-1) was a subset cross assembler that {{ran on the}} IBM 704, IBM 709, and IBM 7090 computers. The final version (STRAP-2) ran natively.|$|E
40|$|Includes bibliographical {{references}} (page 71) <b>Assembly</b> <b>programming</b> {{language is}} taught {{to the students}} with computer science major in COMP 122 Computer Architecture course. Since <b>assembly</b> <b>programming</b> languages are considered low level programming languages, it is pretty challenging to learn and use <b>Assembly</b> languages in <b>programming.</b> In an effort to better understand and use <b>assembly</b> <b>programming</b> languages, this project utilizes a web-based database tool, Database Assembly Edittor that enables the visualization of the result of executing each assembly instruction in the CPU and RAM. This software is further developed to extend its functionality in assisting both students and instructors in managing the course assignments (submitting and grading) via web through PHP application. The thesis starts with introducing this software system demonstraitning how it works followed by explaining basic features and structures used to create this Assembly Editor software. In the proceeding chapters, the available features to use by each user type are introduced in detail along with screenshots illustrating each discussed scenario. Having read this documentation and been provided with a login and password, a user can simply access this software through browser and use the tool features available to him based on his predefined user type...|$|R
50|$|The Replica 1 {{includes}} Apple I BASIC in ROM {{to allow}} {{quick and easy}} programming, {{as well as the}} KRUSADER Assembler that provides a powerful symbolic <b>assembly</b> <b>programming</b> environment, including a disassembler and a low-level debugger.|$|R
5000|$|Higher-order {{functions}} - {{except that}} <b>assembly</b> <b>programming</b> {{has always been}} able to compute with addresses of functions to call; IPL was an early attempt to generalize this property of assembly language and in a principled way ...|$|R
5000|$|Habeeb {{was born}} in Syracuse, New York and was raised in Christiansburg, Virginia. He {{attended}} Christiansburg High School and was an active member in the YMCA's Model General <b>Assembly</b> <b>Program.</b> He served as Youth Governor and remained interested in politics.|$|E
50|$|Centriolar coiled-coil protein of 110 kDa {{also known}} as centrosomal protein of 110 kDa or CP110 is a protein that in humans is encoded by the CCP110 gene. It is a cell cycle-dependent CDK {{substrate}} and regulates centrosome duplication. CP110 suppresses a cilia <b>assembly</b> <b>program.</b>|$|E
5000|$|Historically, BSS (from Block Started by Symbol) was a {{pseudo-operation}} in UA-SAP (United Aircraft Symbolic <b>Assembly</b> <b>Program),</b> the assembler {{developed in}} the mid-1950s for the IBM 704 by Roy Nutt, Walter Ramshaw, and others at United Aircraft Corporation. The BSS keyword was later incorporated into FAP (FORTRAN <b>Assembly</b> <b>Program),</b> IBM's standard assembler for its 709 and 7090/94 computers. It defined a label (i.e. symbol) and reserved a block of uninitialized space for a given number of words [...] In this situation BSS served as a shorthand in place of individually reserving a number of separate smaller data locations. Some assemblers support a complementary or alternative directive BES, for Block Ended by Symbol, where the specified symbol corresponds {{to the end of}} the reserved block.|$|E
50|$|Cemetech's {{many other}} {{past and present}} {{projects}} include web applications for trend aggregation and data mining, hardware and software projects for music visualization, many TI-BASIC and z80 <b>Assembly</b> <b>programs,</b> and research into parallelization, distributed computing, and image processing.|$|R
50|$|The {{computer}} science courses are considered math electives. Courses on Web Technologies, Object-Oriented <b>Programming,</b> <b>Assembly</b> Language <b>Programming,</b> Advanced Placement Computer Science, {{as well as}} various others are offered.|$|R
40|$|Despite {{the rapidly}} {{increasing}} number of sequenced and re-sequenced genomes, many issues regarding the computational assembly of large-scale sequencing data have remain unresolved. Computational assembly is crucial in large genome projects as well for the evolving high-throughput technologies and {{plays an important role}} in processing the information generated by these methods. Here, we provide a comprehensive overview of the current publicly available sequence <b>assembly</b> <b>programs.</b> We describe the basic principles of computational assembly along with the main concerns, such as repetitive sequences in genomic DNA, highly expressed genes and alternative transcripts in EST sequences. We summarize existing comparisons of different assemblers and provide a detailed descriptions and directions for download of <b>assembly</b> <b>programs</b> at...|$|R
50|$|As Buick's first {{two-seater}} and {{its first}} convertible since the 1985 Riviera, the Reatta was manufactured {{in a highly}} specialized <b>assembly</b> <b>program</b> at the Reatta Craft Centre (later known as the Lansing Craft Centre) in Lansing, Michigan - achieving production of over 21,000 units in four years.|$|E
50|$|The FORTRAN <b>Assembly</b> <b>Program</b> (FAP) is an {{assembler}} for the 709, 7090, and 7094 under IBM's makeshift FMS (Fortran Monitor System) operating system. An earlier assembler was SCAT (SHARE Compiler-Assembler-Translator). Macros {{were added}} to FAP by Bell Laboratories (BE-FAP), and the final 7090/7094 assembler was IBMAP, under IBSYS.|$|E
5000|$|Additional {{software}} was {{available from the}} XDS Users' Group Library, such as a string processing system, [...] "SYSPOPs" [...] (system programmed operators, which allow access to system services), CAL (Conversational Algebraic Language, a dialect of JOSS), QED (a text editor), TAP (Time-sharing <b>Assembly</b> <b>Program,</b> an assembler), and DDT, a debugging tool.|$|E
40|$|In {{embedded}} systems, {{the recent}} trend is to manufacture processors with application-specific extensions. This makes it often necessary to write <b>assembly</b> <b>programs</b> {{to take advantage}} of the added hardware facilities. In such situations, formal verification is technically difficult because the programs in question manipulate data in a bitwise fashion, using non-standard specialized instructions, and under strict constraints for memory usage. In this paper, we propose an encoding of Hoare logic in the Coq proof assistant for formal verification of <b>assembly</b> <b>programs</b> that manipulate machine integers and bounded memory. Using this encoding, we formally verify arithmetic functions used in cryptography and written in SmartMIPS, an extension of the MIPS instruction set for smartcards. ...|$|R
40|$|In {{industry}} many {{legacy systems}} exist which run mission or safety critical code {{which do not}} have adequate requirements documentation. This thesis demonstrates how {{the use of a}} functional programming language eases a flexible and modular approach to the construction of libraries and tool suites that allow the manipulation of <b>assembly</b> language <b>programs.</b> The tools and libraries created with this method are used in a larger project of reverse engineering requirements from legacy <b>assembly</b> <b>programs.</b> The modules presented operate from the assembled ". lst " format, which is the result of assembling the source files, and includes the calculated address in memory and the binary version of the given instructions. Our libraries provide representations of <b>assembly</b> <b>programs</b> in an abstract data type and as internal graph representations, and conversions to a GXL graph format and to other special-purpose XML represen-tations. The use of Haskell as an implementation language is explored {{in the context of a}} software engineering project, and some of the benefits and disadvantages of such...|$|R
50|$|In the x86 <b>assembly</b> <b>programming</b> language, MOVDDUP is {{the name}} for a {{specific}} action performable by modern x86 processors with 3rd-generation Streaming SIMD Extensions (SSE3). This action involves copying a number to temporary space in the processor for use in other computations.|$|R
