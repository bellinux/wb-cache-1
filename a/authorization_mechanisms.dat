106|112|Public
25|$|Provide an {{attacker}} {{with full}} access via a backdoor, permitting unauthorized access to, for example, steal or falsify documents. One {{of the ways}} to carry this out is to subvert the login mechanism, such as the /bin/login program on Unix-like systems or GINA on Windows. The replacement appears to function normally, but also accepts a secret login combination that allows an attacker direct access to the system with administrative privileges, bypassing standard authentication and <b>authorization</b> <b>mechanisms.</b>|$|E
5000|$|The WebSphere Application Server {{security}} {{model is}} based on the services provided in the operating system and the Java EE security model.WebSphere Application Server provides implementations of user authentication and <b>authorization</b> <b>mechanisms</b> providing support for various user registries: ...|$|E
50|$|Application level {{authentication}} and <b>authorization</b> <b>mechanisms</b> may {{be effective}} means of providing abstraction from the database layer. The primary benefit of abstraction {{is that of a}} single sign-on capability across multiple databases and platforms. A single sign-on system stores the database user's credentials and authenticates to the database on behalf of the user.|$|E
50|$|Additionally, {{access to}} the {{information}} storage can be controlled through user authentication and <b>authorizations</b> <b>mechanisms.</b>|$|R
5000|$|VisualSVN Server 2.6 was {{released}} on June 18, 2013. VisualSVN Server was updated to Subversion 1.8 in this release. VisualSVN Server Manager console received multiple improvements, VisualSVN Server got improved <b>authorization</b> <b>mechanism.</b>|$|R
40|$|Database {{security}} {{has become an}} essential issue in assuring the integrity, protection, and reliability of the data stored in a database management system (DBMS). The <b>authorization</b> <b>mechanism</b> is the component of the database security system which has the primary responsibility of safeguarding the previously defined data and access rules needed for database access control. The data and rules for authorization control assist in the enforcement of access controls regarding the list of authorized users, the data objects which the authorized users are allowed to manipulate, and the operations that these users can perform on these objects. As part of its tasks the <b>authorization</b> <b>mechanism</b> can grant or deny access to any user or group of users as appropriate...|$|R
50|$|Provide an {{attacker}} {{with full}} access via a backdoor, permitting unauthorized access to, for example, steal or falsify documents. One {{of the ways}} to carry this out is to subvert the login mechanism, such as the /bin/login program on Unix-like systems or GINA on Windows. The replacement appears to function normally, but also accepts a secret login combination that allows an attacker direct access to the system with administrative privileges, bypassing standard authentication and <b>authorization</b> <b>mechanisms.</b>|$|E
5000|$|WS-Federation Active Requestor Profile is a Web Services {{specification}} - {{intended to}} work with the WS-Federation specification - which defines how identity, authentication and <b>authorization</b> <b>mechanisms</b> work across trust realms. The specification deals specifically with how applications, such as SOAP-enabled applications, make requests using these mechanisms. By way of contrast, WS-Federation Passive Requestor Profile deals with [...] "passive requestors" [...] such as web-browsers. WS-Federation Active Requestor Profile was created by IBM, BEA Systems, Microsoft, VeriSign, and RSA Security.|$|E
5000|$|The UPnP protocol, as default, {{does not}} {{implement}} any authentication, so UPnP device implementations must implement the additional Device Protection service, or implement the Device Security Service. [...] There also exists a non-standard solution called UPnP-UP (Universal Plug and Play - User Profile) which proposes an extension to allow user authentication and <b>authorization</b> <b>mechanisms</b> for UPnP devices and applications. Unfortunately, many UPnP device implementations lack authentication mechanisms, and by default assume local systems and their users are completely trustworthy.|$|E
50|$|Facebook's Graph API only {{supports}} OAuth 2.0. Google supports OAuth 2.0 as {{the recommended}} <b>authorization</b> <b>mechanism</b> {{for all of}} its APIs. Microsoft also supports OAuth 2.0 for various APIs and its Azure Active Directory service, which is used to secure many Microsoft and third party APIs.|$|R
40|$|Model {{security}} for collaborative product {{development in a}} networked environment (or called networked manufacturing, grid manufacturing, and cloud manufacturing) is an important and also challenging research issue. An encryption based partial sharing approach for CAD models has been developed and presented in this paper. First, a random invertible decimal matrix to support the encryption approach is proposed, with which parts of a CAD model can be selected flexibly by the model owner for encrypting by different keys; Second, in order to guarantee the security, a dual-key mode and a key based <b>authorization</b> <b>mechanism</b> are proposed. Based on the model, different levels of security are achieved based on different key spaces, and the key based <b>authorization</b> <b>mechanism</b> {{is used for the}} model owner to control the partial access of the CAD model flexibly...|$|R
40|$|This paper {{describes}} the research conducted to develop Nedgty, the open source Web Services Firewall. Nedgty secures web services by applying business specific rules in a centralized manner. It {{has the ability}} to secure Web Services against Denial of Service, Buffer Overflow, and XML Denial of Service attacks; as well as having an <b>authorization</b> <b>mechanism.</b> 1...|$|R
5000|$|WS-Federation Passive Requestor Profile is a Web Services {{specification}} - {{intended to}} work with the WS-Federation specification - which defines how identity, authentication and <b>authorization</b> <b>mechanisms</b> work across trust realms. The specification deals specifically with how applications, such as web browsers, make requests using these mechanisms. In this context, the web-browser is known as a [...] "passive requestor." [...] By way of contrast, WS-Federation Active Requestor Profile deals with [...] "active requestors" [...] such as SOAP-enabled applications. WS-Federation Passive Requestor Profile was created by IBM, BEA Systems, Microsoft, VeriSign, and RSA Security.|$|E
50|$|A server running Active Directory Domain Services (AD DS) {{is called}} a domain controller. It authenticates and authorizes all users and {{computers}} in a Windows domain type network—assigning and enforcing security policies for all computers and installing or updating software. For example, when a user logs into a computer {{that is part of}} a Windows domain, Active Directory checks the submitted password and determines whether the user is a system administrator or normal user. Also, it allows management and storage of information, provides authentication and <b>authorization</b> <b>mechanisms,</b> and establishes a framework to deploy other related services: Certificate Services, Federated Services, Lightweight Directory Services and Rights Management Services.|$|E
50|$|Radiant Logic’s {{breakthrough}} came in 2000, when {{it introduced}} the first virtual directory. The new product category gained widespread attention throughout the software industry, garnering accolades and prominent customers like Compaq, who soon implemented RadiantOne for its NonStop Himalaya server. That same year Network World named Prompt “Networking MVP.” Industry insider Dave Kearns wrote, “By combining Lightweight Directory Access protocol, XML and SQL behind the scenes, Prompt enabled the typical browser to see personalized (via a directory protocol) database information at will while maintaining powerful security through the authentication and <b>authorization</b> <b>mechanisms</b> built in to any good directory system.” In 2004, RadiantOne VDS 4.0 was rated top virtual directory in an InfoWorld product review. In 2007, Radiant Logic {{was recognized by}} the Burton Group as the virtual directory market leader.|$|E
40|$|In this paper, we analyze {{requirements}} for institutional repositories {{from the viewpoint}} of the research cycle, and find that it is critical any existing repository system has little functions managing social relations of researchers. This leads us to a general model in which an SNS plat-form is an interface for researchers and an institutional repository is a backyard system. The SNS platform en-ables researchers to work together with co-workers. In addition to the interface, the SNS platform provides au-thentication and <b>authorization</b> <b>mechanism</b> for other back-yard systems. Due to the mechanism, we can use, for instance, a search engine with the access control. There-fore academic resources not available to the public, such as a manuscript of a paper, can be safely indexed. Man-aging the authentication and <b>authorization</b> <b>mechanism</b> is done in a sustainable manner, compared to other standard authentication or authorization systems, such as SSO or ACL (Access Control List). ...|$|R
40|$|In {{this paper}} we present an <b>authorization</b> <b>mechanism</b> for a {{relational}} database. It allows defining the user privileges exact {{to a table}} row. To implement that we used the INSTEAD triggers installed on views. This authorization system is an interesting application of such triggers. The user privileges are organized into parameterized roles that can be instantiated and/or inherited by other roles...|$|R
40|$|The large-scale, dynamic, and {{heterogeneous}} {{nature of}} cloud computing poses numerous security challenges. But the cloud 2 ̆ 7 s main {{challenge is to}} provide a robust <b>authorization</b> <b>mechanism</b> that incorporates multitenancy and virtualization aspects of resources. The authors present a distributed architecture that incorporates principles from security management and software engineering and propose key requirements and a design model for the architecture...|$|R
50|$|Data access {{services}} work {{hand in hand}} with the data transfer service to provide security, access controls and management of any data transfers within the data grid. Security services provide mechanisms for authentication of users to ensure they are properly identified. Common forms of security for authentication can include the use of passwords or Kerberos (protocol). Authorization services are the mechanisms that control what the user is able to access after being identified through authentication. Common forms of <b>authorization</b> <b>mechanisms</b> can be as simple as file permissions. However, need for more stringent controlled access to data is done using Access Control Lists (ACLs), Role-Based Access Control (RBAC) and Tasked-Based Authorization Controls (TBAC). These types of controls can be used to provide granular access to files to include limits on access times, duration of access to granular controls that determine which files can be read or written to. The final data access service that might be present to protect the confidentiality of the data transport is encryption. The most common form of encryption for this task has been the use of SSL while in transport. While all of these {{access services}} operate within the data grid, access services within the various administrative domains that host the datasets will still stay in place to enforce access rules. The data grid access services must be in step with the administrative domains access services for this to work.|$|E
40|$|Abstract. The {{characteristics}} of grid are outlined {{to point out}} that the traditional <b>authorization</b> <b>mechanisms</b> cannot satisfy the requirement of the grid security. Then the <b>authorization</b> <b>mechanisms</b> employed in five prevalent Grid Security Architectures are compared in terms of granularity assessment, flexibility of rights control, and achievement approach. Based on these, we propose several approaches that can enhance the authorization in grid. The strongpoint and possible problems of each approach are also put forward. ...|$|E
30|$|The Universal Plug and Play (UPnP) {{specification}} {{defines a}} set of protocols for promoting pervasive network connectivity of computers and intelligent devices or appliances. Nowadays, the UPnP technology is becoming popular due to its robustness to connect devices and {{the large number of}} developed applications. One of the major drawbacks of UPnP is the lack of user authentication and <b>authorization</b> <b>mechanisms.</b> Thus, control points, those devices acting as clients on behalf of a user, and UPnP devices cannot communicate based on user information. This paper introduces an extension of the UPnP specification called UPnP-UP, which allows user authentication and <b>authorization</b> <b>mechanisms</b> for UPnP devices and applications. These mechanisms provide the basis to develop customized and secure UPnP pervasive services, maintaining backward compatibility with previous versions of UPnP.|$|E
40|$|Third International Conference on Open Repositories 2008, 1 - 4 April 2008, Southampton, United KingdomIn this paper, we analyze {{requirements}} for institutional repositories {{from the viewpoint}} of the research cycle, and find that it is critical any existing repository system has little functions managing social relations of researchers. This leads us to a general model in which an SNS platform is an interface for researchers and an institutional repository is a backyard system. The SNS platform enables researchers to work together with co-workers. In addition to the interface, the SNS platform provides authentication and <b>authorization</b> <b>mechanism</b> for other backyard systems. Due to the mechanism, we can use, for instance, a search engine with the access control. Therefore academic resources not available to the public, such as a manuscript of a paper, can be safely indexed. Managing the authentication and <b>authorization</b> <b>mechanism</b> is done in a sustainable manner, compared to other standard authentication or authorization systems, such as SSO or ACL (Access Control List) ...|$|R
30|$|As shown above, many {{of these}} views may not be {{possible}} in practice. In fact, a system can be characterized by domain requirements and assumptions that determine which views of the world are plausible and which are not. The main problem {{lies in the fact that}} domain requirements and assumptions are typically defined outside the <b>authorization</b> <b>mechanism</b> and, thus, not available for policy evaluation.|$|R
40|$|In {{this paper}} we {{describe}} the addition of an access control list (ACL) extension and the installation of a Kerberos[1, 3] based <b>authorization</b> <b>mechanism</b> to the X 11 R 4 MIT sample server. We assume some familiarity with the X Window System and with Kerberos network authentication. The access control list (ACL) extension provides a mechanism for maintaining {{a list of names}} {{to be used in the}} authorization of client connections. Kerberos is used to authenticate the identity of a client attempting to make a connection to the X server, and the ACL is consulted to determine if the authenticated user is authorized to use the server. This scheme is known as the MCNC-KHERABEROS- 1 <b>authorization</b> <b>mechanism,</b> and operates in a similar manner as the XDM-AUTHORIZATION- 1 method. 1 Introduction In an attempt to make the use of the X Window System a bit more secure, we have made two modifications to the X server and created a new application program to control access to the server. This paper describes the [...] ...|$|R
40|$|Abstract. Existing <b>authorization</b> <b>mechanisms</b> fail {{to provide}} {{powerful}} and robust tools for handling {{security at the}} scale necessary for today’s Internet. These mechanisms are coming under increasing strain from the development and deployment of systems that increase the programmability of the Internet. Moreover, this “increased flexibility through programmability” trend seems to be accelerating {{with the advent of}} proposals such as Active Networking and Mobile Agents. The trust-management approach to distributed-system security was developed as an answer to the inadequacy of traditional <b>authorization</b> <b>mechanisms.</b> Trust-management engines avoid the need to resolve “identities” in an authorization decision. Instead, they express privileges and restrictions in a programming language. This allows for increased flexibility and expressibility, as well as standardization of modern, scalable security mechanisms. Further advantages of the trust-management approach include proofs that requested transactions comply with local policies and system architectures that encourage developers and administrators to consider an application’s security policy carefully and specify it explicitly. In this paper, we examine existing <b>authorization</b> <b>mechanisms</b> and their inadequacies. We introduce the concept of trust management, explain its basic principles, and describe some existing trust-management engines, including PolicyMaker and KeyNote. We also report on our experience using trust-management engines in several distributed-system applications. ...|$|E
40|$|Existing <b>authorization</b> <b>mechanisms</b> fail {{to provide}} {{powerful}} and robust tools for handling {{security at the}} scale necessary for today's Internet. These mechanisms are coming under increasing strain from the development and deployment of systems that increase the programmability of the Internet. Moreover, this "increased flexibility through programmability " trend seems to be accelerating {{with the advent of}} proposals such as Active Networking and Mobile Agents. The trust-management approach to distributed-system security was developed as an answer to the inadequacy of traditional <b>authorization</b> <b>mechanisms.</b> Trust-management engines avoid the need to resolve "identities " in an authorization decision. Instead, they express privileges and restrictions in a programming language. This allows for increased flexibility and expressibility, as well as standardization of modern, scalable security mechanisms. Further advantages of the trust-management approach include proofs that reque [...] ...|$|E
40|$|Approved {{client-server}} authentication {{mechanisms are}} described for the IVOA single-sign-on profile: No Authentication; HTTP Basic Authentication; TLS with passwords; TLS with client certificates; Cookies; Open Authentication; Security Assertion Markup Language; OpenID. Normative rules are {{given for the}} implementation of these mechanisms, mainly by reference to pre-existing standards. The <b>Authorization</b> <b>mechanisms</b> are out of the scope of this document...|$|E
40|$|This paper {{proposes a}} Radio Frequency Identification (RFID) access control scheme, which {{includes}} not only an authentication mechanism, but also an access right <b>authorization</b> <b>mechanism</b> designed for a low-cost RFID system. The scheme guarantees mutual authentication and location privacy and also resists the man-in-the-middle attack, the spoofed reader attack, and the spoofed tag attack. Our scheme is more suitable for meeting future RFID system demands. (C) 2010 Elsevier B. V. All rights reserved...|$|R
40|$|Security in {{collaborative}} {{groups is}} an active research topic and has been recognized by many organizations {{in the past few}} years. In this paper, we propose a fine-grained and attribute-based access control framework for our key project, CROWN grid. To avoid single point of failure and enhance scalability of the system, we employ a distributed delegation <b>authorization</b> <b>mechanism.</b> We successfully implement our proposed access control in CROWN grid, and evaluate this approach by comprehensive experiments. © 2005 IEEE...|$|R
40|$|Abstract. The Globus Toolkit {{makes it}} very easy and {{comfortable}} for grid users to develop and deploy grid service. As for the security mechanism, however, only static authentication and coarse-grained <b>authorization</b> <b>mechanism</b> is provided in current Globus Toolkit. In this paper we address the limitations of current security mechanism in the Globus Toolkit and propose a new architecture which provides fine-grained and flexible security mechanism. To implement this without modifying existing components, we {{make use of the}} Aspect-Oriented Programming technique. ...|$|R
40|$|International audienceCollaboration of {{organizations}} in professional context has become ubiquitous. However, the security issues still exist. In this paper, we propose a decentralised hybrid framework for managing identity and access control for collaborative platforms {{as a service}} PaaS. We propose an approach based on federations that ensure the interoperability within the platform while preserving organizations authentication and <b>authorization</b> <b>mechanisms...</b>|$|E
40|$|International audienceAndroid {{applications}} that manage sensitive data such as email and files downloaded from cloud storage services {{need to protect}} their data from malware installed on the phone. While prior security analyses have focused on protecting system data such as GPS locations from malware, not much {{attention has been given}} to the protection of application data. We show that many popular commercial applications incorrectly use Android <b>authorization</b> <b>mechanisms</b> leading to attacks that steal sensitive data. We argue that formal verification of application behaviors can reveal such errors and we present a formal model in ProVerif that accounts for a variety of Android <b>authorization</b> <b>mechanisms</b> and system services. We write models for four popular applications and analyze them with ProVerif to point out attacks. As a countermeasure, we propose Authzoid, a sample standalone application that lets applications define authorization policies and enforces them on their behalf...|$|E
30|$|Although ABAC {{provides}} a powerful paradigm for access control, ABAC systems require {{that all the}} information necessary for policy evaluation is available to the policy decision point, which might be difficult to achieve in modern systems. Recent years have seen the emergence of <b>authorization</b> <b>mechanisms</b> that go beyond the view of a centralized monitor with full knowledge of the system. <b>Authorization</b> <b>mechanisms</b> increasingly rely on external services to gather the information necessary for access decision making (e.g., Amazon Web Services rely on third-party identity providers and federated identity systems, the OAuth 2.0 protocol enables delegation of authorization). The use of external information sources for attribute retrieval {{makes it difficult to}} guarantee and, in some cases, even to check that all necessary information has been provided. Moreover, in some domains like IoT, it might be difficult and costly to gather (accurate) information needed for policy evaluation. Missing information can significantly influence query evaluation and pose significant risks to a large range of modern systems.|$|E
40|$|In {{this paper}} two {{different}} password databases are compared. Both {{of them had}} only Hungarian human-generated passwords. The first database contained user passwords relating to the <b>authorization</b> <b>mechanism</b> of online banking transactions, while the second one contained passwords relating to the authorization of opening newsletters. The first aim {{of this paper was}} to analyze both databases and find differences and similarities between them. The second aim was to develop a method of decrypting the most Hungarian hashed passwords in a given time unit...|$|R
40|$|The LPRng {{software}} is an enhanced, extended, and portable {{version of the}} Berkeley LPR software. While providing the same general functionality, the implementation is completely new and provides support for the following features: lightweight (no databases needed) lpr, lpc, and lprm programs; dynamic redirection of print queues; automatic job holding; highly verbose diagnostics; multiple printers serving a single queue; client programs {{do not need to}} run SUID root; greatly enhanced security checks; and a greatly improved permission and <b>authorization</b> <b>mechanism...</b>|$|R
30|$|From these {{examples}} {{it should be}} clear that cookie sharing across domain boundaries is a desirable feature in Web applications and middleware. For such sharing to be secure an <b>authorization</b> <b>mechanism</b> needs to be developed granting access only to those hosts that require it. As our last example indicates, even hosts within a single domain may benefit from a more fine-grained access control model than the one currently in use. In this paper we propose such a model and introduce modifications to the HTTP protocol necessary to support it.|$|R
