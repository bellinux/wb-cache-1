70|390|Public
50|$|MANTIS (1978), an <b>application</b> <b>generator.</b>|$|E
50|$|JHipster is a {{free and}} {{open-source}} <b>application</b> <b>generator</b> used to develop quickly a modern web application using AngularJS and the Spring Framework.|$|E
50|$|The GL Studio ARINC 661 Toolkit is a plug-in to GL Studio HMI Toolkit that {{delivers}} {{a set of}} pre-existing customizable widgets, a DF Generator, CDS, Communication Libraries, and a User <b>Application</b> <b>Generator.</b>|$|E
40|$|International audienceMeta-programming can {{be defined}} as {{creating}} application programs by writing programs that produce programs (<b>application</b> <b>generators).</b> Meta-programming is programming and meta-data management is data management. STEP is an ISO 10303 standard intended to data modelling and exchange. STEP standard defines very useful software tools, as EXPRESS an object-oriented modelling language, and STEP technology can be applied for the design and implementation of <b>application</b> <b>generators.</b> The position of the paper is that SQL-PL/SQL or EXPRESS declarative and iterative features are powerful enough to build <b>application</b> <b>generators...</b>|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedInformation systems executives within Department of Defense (DoD) activities are being challenged to build information systems faster, better and cheaper. A key step in developing information systems that {{will meet the}} future needs of DoD organizations is to explore innovative software development paradigms and exploit technological advances of <b>application</b> <b>generators</b> to produce information systems cost-effectively. This thesis examines the concepts, implementation strategies and issues relating to software development with <b>application</b> <b>generators</b> and illustrates, using {{a case study of}} the Naval Aviation Logistics Command Management Information System (NALCOMIS) prototyping development effort, the critical success factor required to implement prototyping with <b>application</b> <b>generators</b> in other areas of DoD. [URL] United States Nav...|$|R
50|$|TELON, later renamed CA-TELON, {{is one of}} {{the first}} commercially {{successful}} <b>application</b> <b>generators</b> for building business applications.|$|R
5000|$|Therefore, {{the more}} time a Clarion Developer spends time {{defining}} the data-dictionary, {{the more time}} they will save later on when the 4GL <b>application</b> <b>generator</b> produces output, typically lists of data with full CRUD capabilities, validation, automatic lookup from [...] "child" [...] table capabilities etc.|$|E
5000|$|IBM's Cross System Product (CSP) was an <b>application</b> <b>generator</b> {{intended}} to create online systems on IBM's mainframe platforms. Introduced in 1981, CSP {{consisted of a}} set of source code generators that allowed developers to interactively define, test, generate, and execute application programs. CSP was composed of two products: ...|$|E
5000|$|Magic Software Enterprises {{was founded}} in 1983 by David Assia and Yaki Dunietz as a {{spin-off}} from [...] "Mashov Computers", a publicly traded Israeli company that provided business solutions on microcomputers. The new company was originally named [...] "Mashov Software Export (MSE)", and developed software for the global market, specifically an <b>application</b> <b>generator</b> named Magic.|$|E
40|$|The promised {{productivity}} improvements {{resulting from}} using <b>application</b> <b>generators</b> {{have been described}} by several authors. Some experiments have also been conducted, but they differ substantially in their research settings and conduct of the experiments. This paper examines these differences by collating the main factors affecting {{the results of the}} experiments into an overall framework. Previous research efforts are then analyzed according to this framework. Using the developed framework, experiments were conducted to evaluate the combined effects of the use of <b>application</b> <b>generators</b> and of develop-ment strategy on productivity. The results of these laboratory cases showed that, compared with third generation languages, 30 to 1 productivity im-provements are possible in the development of medium-sized administrative systems, when <b>application</b> <b>generators</b> are used together with a prototyping strategy. In addition, programmers experienced more satisfaction in proto-typing projects than in linear projects...|$|R
40|$|Abstract- The {{scripting}} {{model of}} generators was originally developed for faster development of <b>application</b> <b>generators</b> in scripting languages. It was shown later that {{this model is}} not restricted only on scripting languages, so the appropriate library for generator development was developed in C++. For {{the purpose of this}} paper, the simple generator of PHP scripts for remote administration of database using web interface was developed. The <b>application</b> <b>generators</b> scripting model properties, like aspect orientation {{and the fact that the}} generators scripting model is typeless (which is the property of scripting languages like PHP) were important for this generator development...|$|R
40|$|Domain-specific {{automatic}} {{program synthesis}} tools, also called <b>application</b> <b>generators,</b> are playing an ever-increasing role in software development. However, high-performance <b>application</b> <b>generators</b> require difficult manual construction, {{and are very}} difficult to verify correct. This paper describes research and an implemented system that transforms program synthesis tools based on deductive synthesis into high-performance <b>application</b> <b>generators.</b> Deductive synthesis uses theorem-proving to construct solutions when given problem specifications. The verification condition for a deductive synthesis tool is essentially the soundness of the implemented inference rules. Theory Operationalization for Program Synthesis (TOPS) synergistically combines reformulation, automated mathematical classification, and compilation through partial deduction to decision procedures. It transforms general-purpose deductive synthesis, with exponential performance, into efficient special-purpose deductive synthesis, with near-linear performance. This paper describes our experience with and empirical results of PD(TH) theory-based partial deduction - in which partial deduction of a set of first-order formulae is performed {{within the context of a}} background theory. The implemented TOPS system currently performs a special variant of PD(TH) in which the compilation process results in the transformation of a set of first order formulae into the theory of an instantiated library decision procedure augmented by a compiled unit theory...|$|R
50|$|Synon Ltd {{was founded}} in London in 1984 by Simon Williams (CEO), Melinda Horton (COO) and Nick Knowles (CTO) with the {{objective}} of developing an <b>application</b> <b>generator</b> for the IBM System/38 platform. They were soon joined by Simon Haigh (VP Sales). Seed funding was provided by French Connection, a UK fashion house which later achieved notoriety for its FCUK advertising slogan.|$|E
5000|$|C7 {{is still}} a Win32 {{development}} environment, but a beta [...]NET version of the Clarion language, called Clarion#, is available. Both Clarion# and C7 share the same IDE, although at present they are shipped as separate products. Unlike C7, Clarion# does not yet have a dictionary editor or <b>application</b> <b>generator.</b> When Clarion# goes gold {{it is expected that}} a single IDE will support both Win32 and [...]NET development.|$|E
50|$|This is {{in direct}} {{contrast}} to the two main competitors of the time, Informatics' Mark V and IBM's <b>application</b> <b>generator.</b> Mark V was an add-on to Informatics' successful report generator Mark IV but it was unwieldy and didn't address {{as much of the}} development life cycle as TELON. IBM's solution required a run-time component for the generated applications to execute, putting the customer in a long-term bind with IBM. Both products were much more expensive than TELON and head-to-head trials proved TELON to be more productive.|$|E
40|$|Introduction When a {{programming}} {{activity is}} well-understood, {{it can be}} automated. Automation transforms software development from activities like rote coding and tedious debugging to that of specification, where the "what" of an application is declared and the "how" is left to a complex, but automatable mapping. Programs that perform such mappings are <b>application</b> <b>generators</b> (or just generators). In the technical sense, <b>application</b> <b>generators</b> are compilers for domain-specific programming languages (DSLs). There is no strict criterion for characterizing a language as "domain-specific" but the term is commonly used to describe programming languages for specialized tasks (as opposed to "general-purpose" programming languages). Examples are languages for implementing communication protocols, partial differential equation solvers, windowing software, etc. Although all compilers {{can be viewed as}} generators, generator research and prac...|$|R
5000|$|Comments: Designed for booster <b>applications.</b> Gas <b>generator,</b> pump-fed ...|$|R
5000|$|<b>Application</b> code <b>generators</b> for {{persistent}} layer, programming interface, web services: ...|$|R
50|$|Oracle Forms {{started as}} Interactive Application Facility (IAF), which had two main {{components:}} the compiler (Interactive <b>Application</b> <b>Generator</b> - IAG) and the runtime interpreter (Interactive Application Processor - IAP). Released with Oracle Database version 2, IAF provided a character mode interface to allow users {{to enter and}} query data from an Oracle database. It was renamed to FastForms with Oracle Database version 4 and added an additional tool to help generate a default form to edit with IAG, the standard tool. The product saw one more name change before gaining its current moniker, called SQL*Forms version 2 with the Oracle 5 database.|$|E
5000|$|Early in 1972, {{researchers}} from Xerox PARC {{were given a}} tour of the PLATO system at the University of Illinois. At this time they were shown parts of the system such as the Show Display <b>application</b> <b>generator</b> for pictures on PLATO (later translated into a graphics-draw program on the Xerox Star workstation), and the Charset Editor for [...] "painting" [...] new characters (later translated into a [...] "Doodle" [...] program at PARC), and the Term Talk and Monitor Mode communications program. Many of the new technologies they saw were adopted and improved upon when these researchers returned to Palo Alto, California. They subsequently transferred improved versions of this technology to Apple Inc..|$|E
50|$|Almost all of {{the early}} sales for TELON were {{generated}} through Phil Stymfal's contacts with other insurance companies. These contacts gave CSI a chance to give a demo at the companies which usually ended in a sale. Companies outside of Stymfal's circle were reluctant to look at TELON perhaps because it was much less expensive then its main competitors at the time, Informatics' Mark V and IBM's <b>application</b> <b>generator,</b> and was, therefore, not taken seriously. In 1982, TELON for IMS was being sold for $75,000 so CSI raised the price to $95,000 to give it more credibility. The price of the CICS offering was also increased. Two years later, after it was acquired by Pansophic, TELON would see another price increase for much the same reasons.|$|E
40|$|Object {{oriented}} frameworks (hereafter simply 'frameworks') are a co nerstone of mode n software engineering. Framework {{development is}} apidly gaining acceptance {{due to its}} ability to promote reuse of design and source code. Frameworks a e <b>application</b> <b>generators</b> that {{are directly related to}} a specific domain, i. e., a family of related problems...|$|R
40|$|Abstract. This paper {{describes}} {{how to use}} conventional compiler construction tools, and parser generators in particular, to build XML-driven <b>application</b> <b>generators.</b> In our approach, the document interface is provided by a standard stream-oriented XML processing framework (e. g., SAX or StAX). This framework is used to program a generic, customizable XML scanner that transforms documents into streams of suitable tokens (opening and closing tags, character data, etc.). The {{next step is to}} characterize the syntactic structure of these streams in terms of generation-specific context-free grammars. By adding suitable semantic attributes and semantic actions to these grammars, developers obtain generation-oriented translation schemes: high-level specifications of the generation tasks. These specifications are then turned into working <b>application</b> <b>generators</b> by using standard parser generation technology. We illustrate the approach with , an XML-driven generator of shortest-route search applications in subway networks...|$|R
40|$|A Domain-Speci#c Language #DSL# is a small, usually declarative, {{language}} expressiveover the distinguishing {{characteristics of}} a set of programs in a particular problem domain. Often they are used as input to <b>application</b> <b>generators</b> that create program instances possessing the distinguishing characteristics described in input speci#cations. When reasoning about the correctness of a generated application with respect to some criteria, it quite useful to be able to utilize the logic of the generator #the semantics# to prove that any generated application must satisfy the correctness criteria. This paper describes how classical techniques in language design and formal methods can be utilized {{in the development of a}} DSL that meets certain correctness criteria. Speci#cally,we take a small but real DSL, give it a semantics, and use the logic of the DSL semantics to prove that certain properties are true for any application produced by the <b>generator.</b> Keywords: <b>Application</b> <b>Generators,</b> Domain- [...] ...|$|R
5000|$|Sapiens {{grew out}} of an initiative, dubbed DB1, {{undertaken}} {{by a group of}} scientists from the Weizmann Institute of Science during the 1970s to develop a novel object-oriented <b>application</b> <b>generator</b> for use with mainframe computers. One of the driving forces behind the initiative was Tsvi Misinai, a graduate of the Technion who in 1972 went on to spearhead the project. He teamed up with Shai Sole, Shmuel Timor and Eli Raban. By the late 1970s and early 1980s, the Weizmann team, partnered with a local Israeli company, AAA-Advanced Automated Applications (founded by Tuvi Orbach), began marketing DB1 to domestic large organizations [...] Subsequently, the company started marketing its product overseas. One of the company's first overseas clients was a UK based international infrastructure firm in 1986. In 1984 the Weizmann team established its own company, to be later merged with AAA, and joined by entrepreneurs Ron Zuckerman and Shaul Shani. The company severed itself from the Weizmann Institute and was incorporated under its new name - Sapiens.|$|E
40|$|Software reuse through {{concrete}} component library has {{a strong}} support for component composition, refinement and specialization. Despite of the library’s support, scalability problem occur in its implementation. Amongst the problem being reported were feature combinatorics problem, vertical and also horizontal scaling of the components. Generative reuse is an approach in software reuse where it combines reusable part that are not only code but also generic architectures and variations of components for future customization. Generative reuse via <b>application</b> <b>generator</b> is cost effective to build when many similar software systems are written or when evolution of software requires the software to be written and rewritten many times during its lifetime. Software Product Line is a suitable field to implement <b>application</b> <b>generator</b> where it can help to generate similar systems and also customize variations needed to the systems functionalities. This paper briefly discusses the issues in generative reuse via <b>application</b> <b>generator</b> and software product line. The main contribution {{of this paper is}} in the explicit mapping between generative reuse specifically the development process of <b>application</b> <b>generator</b> with the Software Product Line systematic reuse process. This explicit mapping shows several points of synergistic process between both fields. This mapping can also help designer and organization who are interested in the development of <b>application</b> <b>generator</b> in software product line to know the underlying process and artifacts for both fields...|$|E
40|$|Abstract—This paper {{documents}} the domain engineering process {{for much of}} the conflation algorithms domain. Empirical data on the process and products of domain engineering were collected. Six conflation algorithms of four different types: three affix removal, one successor variety, one table lookup, and one n-gram were analyzed. Products of the analysis include a generic architecture, reusable components, a little language and an <b>application</b> <b>generator</b> that extends the scope of the domain analysis beyond previous generators. The <b>application</b> <b>generator</b> produces source code for not only affix removal type but also successor variety, table lookup, and n-gram stemmers. The performance of the stemmers generated automatically was compared with the stemmers developed manually in terms of stem similarity, source and executable sizes, and development and execution times. All five stemmers generated by the <b>application</b> <b>generator</b> produced more than 99. 9 % identical stems with the manually developed stemmers. Some of the generated stemmers were as efficient as their manual equivalents and some were not. Index Terms [...] Software reuse, domain analysis, conflation algorithms, stemmers, <b>application</b> <b>generator.</b> A. Conflation Algorithms Domai...|$|E
40|$|<b>Application</b> <b>generators</b> {{have been}} {{demonstrated}} as a successful approach to achieving software reuse and typically yields higher productivity gains than methods such as component-based reuse. Despite their advantages, industrial software developers are reluctant to adopt these methods {{due to the lack}} of tools for constructing generators. This paper presents a framework for the development of <b>application</b> <b>generators.</b> This framework provides a structured design approach and automatic tools for design. The framework consists of a two level design process: The first level is the identification of operations that expresses the fundamental computations of the application domain. The second level is the design of a domain-specific language which allows one to express variations within a family of applications. The domain-specific language is implemented in terms of the operations defined by the first level. We show that the uniform application of partial evaluation enables automatic applicati [...] ...|$|R
50|$|For {{cryptographic}} <b>applications,</b> only <b>generators</b> {{meeting the}} K3 or K4 standard are acceptable.|$|R
50|$|The {{process of}} {{identifying}} domains, bounding them, and discovering commonalities and variabilities among the {{systems in the}} domain is called domain analysis. This information is captured in models {{that are used in}} the domain implementation phase to create artifacts such as reusable components, a domain-specific language, or <b>application</b> <b>generators</b> {{that can be used to}} build new systems in the domain.|$|R
40|$|Suppose one COTS (Commercial Off the Shelf) {{software}} supplier {{provides an}} interpreter for a problem oriented language, another provides an <b>application</b> <b>generator</b> for producing numerical solvers {{for a class}} of partial differential equations, and a third produces a visualization package. A team of domain specialists writes scripts in the problem oriented language to define cases to be solved, uses the <b>application</b> <b>generator</b> to produce an appropriate solver, solves the generated PDE, and uses the visualization package to analyze the results and adjust the description of cases...|$|E
40|$|This paper {{documents}} the domain engineering process {{for much of}} the conflation algorithms domain. Empirical data on the process and products of domain engineering were collected. Six conflation algorithms of four different types: three affix removal, one successor variety, one table lookup, and one n-gram were analyzed. Products of the analysis include a generic architecture, reusable components, a little language and an <b>application</b> <b>generator</b> that extends the scope of the domain analysis beyond previous generators. The <b>application</b> <b>generator</b> produces source code for not only affix removal type but also successor variety, table lookup, and n-gram stemmers. The performance of the stemmers generated automatically was compared with the stemmers developed manually in terms of stem similarity, source and executable sizes, and development and execution times. All five stemmers generated by the <b>application</b> <b>generator</b> produced more than 99. 9 % identical stems with the manually developed stemmers. Some of the generated stemmers were as efficient as their manual equivalents and some were not...|$|E
40|$|In recent years, {{avionics}} {{systems development}} costs {{have become the}} driving factor {{in the development of}} space systems, military aircraft, and commercial aircraft. A method of reducing avionics development costs is to utilize state-of-the-art software <b>application</b> <b>generator</b> (autocode) tools and methods. The recent maturity of <b>application</b> <b>generator</b> technology has the potential to dramatically reduce development costs by eliminating software development steps that have historically introduced errors and the need for re-work. <b>Application</b> <b>generator</b> tools have been demonstrated to be an effective method for autocoding non-redundant, relatively low-rate input/output (I/O) applications on the Space Station Freedom (SSF) program; however, they have not been demonstrated for fault tolerant, high-rate I/O, flight critical environments. This contract will evaluate the use of application generators in these harsh environments. Using Boeing's quad-redundant avionics system controller as the target system, Space Shuttle Guidance, Navigation, and Control (GN&C) software will be autocoded, tested, and evaluated in the Johnson (Space Center) Avionics Engineering Laboratory (JAEL). The response of the autocoded system will be shown to match the response of the existing Shuttle General Purpose Computers (GPC's), thereby demonstrating the viability of using autocode techniques in the development of future avionics systems...|$|E
40|$|Applying design {{patterns}} to design of an application makes it robust against {{issues related to}} extensibility and maintainability. However, currently, a designer must ap-ply structures and constraints of {{design patterns}} to an ap-plication by hand, therefore mistakes can occur often. We have proposed a notation using SGML for describing de-sign patterns and a support system for design patterns. We aim at providing a source code generation support system based on the notation and system. There have been many researches on semi-automatic <b>application</b> <b>generators</b> using existing knowledge such as libraries based on algorithms and data structure, and classes packaged based on the object-oriented technology. When using design patterns for source code generation support, the same requirements for such semi-automatic <b>application</b> <b>generators</b> must be con-sidered. The requirements are lessening codes to be written by users, and satisfying constraints without directing users’ attention to them. In this paper, we consider the requirements and describe a design {{and implementation of the}} source code generation support system and results. 1...|$|R
40|$|The mobile {{application}} development scene {{is a difficult}} target for developers due to variation in development and distribution methods. Native development requires more effort, but has the best performance and a native look and feel for the user interface. Web-based solutions are easier to develop and distribute to several platforms, but suffer {{from the lack of}} access to device features. As a result, several tools have been created to bridge this gap. Mobile <b>application</b> <b>generators</b> offer a way to access functionality that is native to a device, while the development is done using common web technologies. Choosing the most suitable generator could be difficult, due to issues in mobile development and differences between the tools. The issues in {{mobile application}} development include the lack of asset portability between mobile operating systems and multiple development technologies being used. Therefore, a set of metrics and criteria were proposed to evaluate mobile <b>application</b> <b>generators,</b> based on previous research and identified characteristics of these tools. Information about the tools was hard to find. Nevertheless, many differences in provided functionality were noted, even within a single generator. Some mobile operating systems had better support, and differences in implementation could interfere with using the same assets for several target platforms. Three publicly available mobile <b>application</b> <b>generators</b> were evaluated using the proposed metrics and criteria. They turned out to be rather similar from the usage perspective, all capable of generating relatively simple multi-platform applications from user-created source code. Depending on whether faster multi-platform development or more efficient applications with a native look and feel are preferred, {{it is up to the}} developer to decide the development method. ...|$|R
40|$|This {{bachelor}} thesis {{deals with}} thermoelectric <b>generators</b> and their <b>applications.</b> The introduction {{is a list}} of the most used thermoelectric modules in each <b>applications</b> of <b>generators.</b> A description of individual <b>applications</b> thermoelectric <b>generators,</b> divided by different methods of obtaining the heat, followed by their comparison. In conclusion there is a description of the measurement and evaluation of power parameters of thermoelectric modules and thermoelectric generator tested at the Energy Institute BUT...|$|R
