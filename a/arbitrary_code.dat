267|416|Public
25|$|Google Android 4.2 enabled running RenderScript code on {{the mobile}} device GPU. Apple {{introduced}} a proprietary Metal API for iOS applications, able to execute <b>arbitrary</b> <b>code</b> through Apple's GPU compute shaders.|$|E
25|$|Executable space {{protection}} is {{an approach to}} buffer overflow protection which prevents execution of code on the stack or the heap. An attacker may use buffer overflows to insert <b>arbitrary</b> <b>code</b> into {{the memory of a}} program, but with executable space protection, any attempt to execute that code will cause an exception.|$|E
25|$|Self-extracting {{archives}} (including the executable installer of 7-Zip itself) {{are vulnerable}} to <b>arbitrary</b> <b>code</b> execution through DLL hijacking: they load and run a DLL named UXTheme.dll, {{if it is in}} the same folder as the executable file. 7-Zip 16.03 Release notes say that the installer and SFX modules have added protection against DLL preloading attack.|$|E
50|$|There are {{somewhere around}} {{six or seven}} {{thousand}} languages on Earth today. So those 17,029 codes are adequate to assign a unique code to each language, although some languages may end up with <b>arbitrary</b> <b>codes</b> that sound nothing like the traditional name(s) of that language.|$|R
40|$|We derive {{a general}} {{limit on the}} {{fidelity}} of a quantum channel conveying an ensemble of pure states. Unlike previous results, this limit applies to <b>arbitrary</b> <b>coding</b> and decoding schemes, including nonunitary decoding. This establishes the converse of the quantum noiseless coding theorem for all such schemes. Comment: 14 pages, RevTeX. Submittted to Physical Review...|$|R
5000|$|Similar to MapReduce, <b>arbitrary</b> user <b>code</b> is handed and {{executed}} by PACTs. However, PACT generalizes {{a couple of}} MapReduce's concepts: ...|$|R
25|$|QuickTime 7.5.5 {{and earlier}} {{are known to}} have a list of {{significant}} vulnerabilities that allow a remote attacker to execute <b>arbitrary</b> <b>code</b> or cause a denial of service (out-of-bounds memory access and application crash) on a targeted system. The list includes six types of buffer overflow, data conversion, signed vs unsigned integer mismatch, and uninitialized memory pointer.|$|E
25|$|Git version 2.6.1, {{released}} on 29 September 2015, contained a patch for a security vulnerability (CVE-2015-7545) which allowed <b>arbitrary</b> <b>code</b> execution. The vulnerability was exploitable if an attacker could convince a victim to clone a specific URL, as the arbitrary commands were {{embedded in the}} URL itself. An attacker could use the exploit via a man-in-the-middle attack if the connection was unencrypted, as they could redirect the user to a URL of their choice. Recursive clones were also vulnerable, since they allowed the controller of a repository to specify arbitrary URLs via the gitmodules file.|$|E
25|$|Manipulation of the buffer, {{which occurs}} {{before it is}} read or executed, {{may lead to the}} failure of an {{exploitation}} attempt. These manipulations can mitigate the threat of exploitation, but may not make it impossible. Manipulations could include conversion to upper or lower case, removal of metacharacters and filtering out of non-alphanumeric strings. However, techniques exist to bypass these filters and manipulations; alphanumeric code, polymorphic code, self-modifying code and return-to-libc attacks. The same methods can be used to avoid detection by intrusion detection systems. In some cases, including where code is converted into unicode, the threat of the vulnerability has been misrepresented by the disclosers as only Denial of Service when in fact the remote execution of <b>arbitrary</b> <b>code</b> is possible.|$|E
50|$|Paralinguistic information, {{because it}} is phenomenal, belongs to the {{external}} speech signal (Ferdinand de Saussure's parole) {{but not to the}} <b>arbitrary</b> conventional <b>code</b> of language (Saussure's langue).|$|R
40|$|Abstract—We {{consider}} multi-resolution {{streaming in}} fullyconnected peer-to-peer networks, where transmission rates are constrained by arbitrarily specified upload capacities {{of the source}} and peers. We fully characterize the capacity region of rate vectors achievable with <b>arbitrary</b> <b>coding,</b> where an achievable rate vector describes a vector of throughputs of the different resolutions that can be supported by the network. We then prove that all rate vectors in the capacity region can be achieved using pure routing strategies. This shows that coding has no capacity advantage over routing in this scenario. I...|$|R
40|$|The {{generalized}} {{word length}} pattern of an orthogonal array allows a ranking of orthogonal arrays {{in terms of}} the generalized minimum aberra-tion criterion (Xu and Wu [Ann. Statist. 29 (2001) 1066 – 1077]). We provide a statistical interpretation for the number of shortest words of an orthogonal array in terms of sums of R 2 values (based on orthogonal coding) or sums of squared canonical correlations (based on <b>arbitrary</b> <b>coding).</b> Directly related to these results, we derive two versions of generalized resolution for qualita-tive factors, both of which are generalizations of the generalized resolutio...|$|R
500|$|Jones, Pelham, Carvallo and Mirenberg {{investigated}} {{the influence of}} number preference on interpersonal attraction. In a lab study they showed US participants text profiles of people. The profiles came with a prominently displayed, seemingly <b>arbitrary</b> <b>code</b> that was explained as merely to help the researchers {{keep track of the}} profiles. One half of the participants were shown a code that matched their birthday (e.g. someone born on 8 September saw a partner profile with the code [...] "09-08"); the other half a non-matching code (e.g. [...] "03-23"). All participants were shown exactly the same profile. They had to rate how much they thought they would like the person in the profile. The results showed that participants liked the profiles significantly more when the code matched their own birthday numbers. Relative to participants in the control condition, participants in the birthday-association condition could {{at the end of the}} test more accurately recall the code, but only 5 of 110 participants mentioned the matching code as a potential influence. Jones et al. concluded that people’s preferences for their own birthday numbers are potent enough to influence people’s attraction to other people. Pelham and Carvallo subsequently looked at interpersonal attraction using field data. They used statewide marriage records to conclude that people disproportionately marry people who share their birthday numbers. They also found that brides disproportionately chose their own birthday numbers and birth months as wedding dates.|$|E
2500|$|... iOS 9.3.4 was {{released}} on August 4, 2016; the update fixed a memory corruption issue that could enable an app [...] "to execute <b>arbitrary</b> <b>code</b> with kernel privileges". The update consequently patched an iOS jailbreaking method used by the Chinese programming group Pangu Team.|$|E
2500|$|To {{avoid the}} many pitfalls caused by {{executing}} <b>arbitrary</b> <b>code</b> from the internet, a new function, [...] was first {{added to the}} fifth edition of ECMAScript, which as of 2017 is supported by all major browsers. For non-supported browsers, an [...] is provided by Douglas Crockford.|$|E
50|$|Modern {{standards}} contain both systematic {{names for}} cell types that give {{information on the}} composition and approximate size of the cells, as well as <b>arbitrary</b> numeric <b>codes</b> for cell size.|$|R
40|$|We {{consider}} {{codes in}} the Hamming association scheme Hn(q) with interesting metric properties. We describe how a uniformly packed linear code C determines {{a pair of}} dual subschemes. The existence of this pair of subschemes is used to establish restrictions on the possible distances between codewords in the dual code C⊥. These restrictions also apply to <b>arbitrary</b> <b>codes</b> with degree e + 1 and strength 2 e or 2 e + 1. An analogous result gives necessary conditions {{for the existence of}} non-linear uniformly packed codes. When q = 2 we determine the possible parameters of uniformly packed 2 -error-correcting linear codes...|$|R
5000|$|In coding theory, the Singleton bound, {{named after}} Richard Collom Singleton, is a {{relatively}} crude upper bound {{on the size of}} an <b>arbitrary</b> block <b>code</b> [...] with block length , size [...] and minimum distance [...]|$|R
2500|$|The {{first of}} these two letters is a {{mnemonic}} standing {{for the name of}} the broad area where the registration office is located. This is intended to make the registration more memorable than an <b>arbitrary</b> <b>code.</b> For example, A is used as the first character in all registrations issued by the three offices located in the vicinity of East Anglia; ...|$|E
2500|$|In September 2014, Stéphane Chazelas, a Unix/Linux, {{network and}} telecom {{specialist}} {{working in the}} UK, discovered a security bug in the program. The bug, first disclosed on September 24, was named Shellshock and assigned the numbers , CVE-2014-6277 and [...] The bug was regarded as severe, since CGI scripts using Bash could be vulnerable, enabling <b>arbitrary</b> <b>code</b> execution. [...] The bug was related to how Bash passes function definitions to subshells through environment variables.|$|E
2500|$|In computing, a shatter {{attack is}} a {{programming}} technique employed by crackers on Microsoft Windows operating systems to bypass security restrictions between processes in a session. [...] A shatter attack {{takes advantage of}} a design flaw in Windows's message-passing system whereby <b>arbitrary</b> <b>code</b> could be injected into any other running application or service in the same session, that makes use of a message loop. [...] This {{could result in a}} privilege escalation exploit.|$|E
5000|$|QNH and QFE are <b>arbitrary</b> Q <b>codes</b> {{rather than}} abbreviations, but the {{mnemonics}} [...] "nautical height" [...] (for QNH) and [...] "field elevation" [...] (for QFE) {{are often used}} by pilots to distinguish between them.|$|R
50|$|Myghty was {{the default}} Pylons {{templating}} language, {{but as of}} version 0.9.6 it {{has been replaced by}} Mako. Both templating languages are text-based (as opposed to XML-based), and support includes, inheritance and embedding <b>arbitrary</b> Python <b>code.</b>|$|R
30|$|Network coding (NC), {{initiated}} by Ahlswede, Cai, Li, and Yeung in their seminal paper [1], {{is a simple}} yet powerful technique to improve {{the performance of the}} communication systems significantly. The fundamental concept of NC is to perform <b>arbitrary</b> <b>coding</b> operations on the contents of packets rather than the direct replication and forwarding implemented in traditional store-and-forward networks. Such inter-network coding enables a high throughput [2], a fast recovery [3], and reliable communications over lossy channels [4]. The merits of NC are even more noticeable in broadcast wireless networks allowing it to be a graceful solution and a suitable technique for real-time applications [5, 6].|$|R
2500|$|On November 15, 2005, Felten and J. Alex Halderman {{showed that}} Sony's method for {{removing}} XCP copy protection software {{from the computer}} makes it more vulnerable to attack, as it essentially installed a rootkit, {{in the form of}} an Active X control used by the uninstaller, and left it on the user's machine and set so as to allow any web page visited by the user to execute <b>arbitrary</b> <b>code.</b> Felten and Halderman described the problem in a blog post: ...|$|E
2500|$|It is also {{possible}} to use solely the macro processing abilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in COBOL using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate <b>arbitrary</b> <b>code.</b> IBM OS/360 uses macros to perform system generation. The user specifies options by coding a series of assembler macros. [...] Assembling these macros generates a job stream to build the system, including job control language and utility control statements.|$|E
2500|$|... /NOEXECUTE={OPTIN|OPTOUT|ALWAYSON|ALWAYSOFF} [...] This {{option is}} only {{available}} on 32-bit versions of Windows when running on processors supporting Data Execution Prevention (DEP). It enables DEP, {{which results in}} the memory manager marking pages containing data as no-execute so that they cannot be executed as code. This can be useful for preventing malicious code from exploiting buffer overflow bugs with unexpected program input in order to execute <b>arbitrary</b> <b>code.</b> No-execute protection is always enabled on 64-bit versions of Windows on processors that support no-execute protection. There are several options the user can specify with this switch: ...|$|E
40|$|We {{present a}} general {{framework}} for Private Information Retrieval (PIR) from <b>arbitrary</b> <b>coded</b> databases, that {{allows one to}} adjust {{the rate of the}} scheme according to the suspected number of colluding servers. If the storage code is a generalized Reed-Solomon code of length n and dimension k, we design PIR schemes which simultaneously protect against t colluding servers and provide PIR rate 1 -(k+t- 1) /n, for all t between 1 and n-k. This interpolates between the previously studied cases of t= 1 and k= 1 and asymptotically achieves the known capacity bounds in both of these cases, as the size of the database grows...|$|R
40|$|In this paper, {{the error}} rate {{performance}} and diversity gain of amplify-and-forward (AF) wireless relay networks are studied. The distributed space-time block code (DSTBC) in a synchronous relay network with multiple relay nodes is considered. The distributed linear dispersion code is {{used at the}} relays. The symbol (or codeword) error rate is studied in terms of {{upper and lower bounds}} through rigorous derivations, and the diversity gain of the DSTBC is derived, for any number of relay nodes. As a corollary, a necessary and sufficient condition is obtained for achieving full cooperative diversity. <b>Arbitrary</b> <b>coding</b> matrices at the relays, path loss and general linear power allocation are considered...|$|R
50|$|Tools exist (e.g. SWIG, Ffidl) to {{automatically}} generate the necessary <b>code</b> to connect <b>arbitrary</b> C functions and the Tcl runtime, and Critcl does the reverse, allowing embedding of <b>arbitrary</b> C <b>code</b> inside a Tcl script and compiling it at runtime into a DLL.|$|R
2500|$|Shatter attacks {{became a}} topic of intense {{conversation}} in the security community in August 2002 {{after the publication of}} Chris Paget's paper titled, [...] "Exploiting design flaws in the Win32 API for privilege escalation". The paper, which coined the term [...] "shatter attack", explained the process by which an application could execute <b>arbitrary</b> <b>code</b> in another application. This could occur because Windows allows unprivileged applications to send messages to message loops of higher-privileged application - and some messages can have the address of a callback function in the application's address space as its parameter. If an attacker manages to put his own string into the memory of the higher-privileged application (say by pasting shellcode to an edit box) at a known location, they could then send WM_TIMER messages with callback function parameters set to point to the attacker's string.|$|E
2500|$|Most Unix-like {{systems have}} a [...] "search path" [...] specifying file system {{directories}} {{in which to}} look for dynamic libraries. Some systems specify the default path in a configuration file; others hard-code it into the dynamic loader. Some executable file formats can specify additional directories in which to search for libraries for a particular program. This can usually be overridden with an environment variable, although it is disabled for setuid and setgid programs, so that a user can't force such a program to run <b>arbitrary</b> <b>code</b> with root permissions. Developers of libraries are encouraged to place their dynamic libraries in places in the default search path. On the downside, this can make installation of new libraries problematic, and these [...] "known" [...] locations quickly become home to {{an increasing number of}} library files, making management more complex.|$|E
2500|$|On 17 December 2014, an exploit {{was found}} {{affecting}} the Windows and Mac {{versions of the}} Git client. An attacker could perform <b>arbitrary</b> <b>code</b> execution on a target computer with Git installed by creating a malicious Git tree (directory) named [...]git (a directory in Git repositories that stores all the data of the repository) in a different case (such as [...]GIT or [...]Git, needed because Git doesn't allow the all-lowercase version of [...]git to be created manually) with malicious files in the [...]git/hooks subdirectory (a folder with executable files that Git runs) on a repository that the attacker made or on a repository that the attacker can modify. If a Windows or Mac user pulls (downloads) {{a version of the}} repository with the malicious directory, then switches to that directory, the [...]git directory will be overwritten (due to the case-insensitive trait of the Windows and Mac filesystems) and the malicious executable files in [...]git/hooks may be run, which results in the attacker's commands being executed. An attacker could also modify the [...]git/config configuration file, which allows the attacker to create malicious Git aliases (aliases for Git commands or external commands) or modify extant aliases to execute malicious commands when run. The vulnerability was patched in version 2.2.1 of Git, released on 17 December 2014, and announced on the next day.|$|E
5000|$|In July 2013, {{according}} to Secunia, pluck had one unpatched security advisory (out of 7 total). The vulnerability allowed <b>arbitrary</b> PHP <b>code</b> {{to be executed}} and was rated highly critical. The code was patched in 4.7.1, and the current version is 4.7.3 ...|$|R
40|$|Abstract — The MacWilliams {{identity}} for linear time-invariant convolutional codes that {{has recently been}} found by Gluesing-Luerssen and Schneider is proved concisely, and generalized to <b>arbitrary</b> group <b>codes</b> on graphs. A similar development yields a short, transparent proof of the dual sum-product update rule. I...|$|R
40|$|Much animal {{communication}} {{takes place}} via symbolic codes, where each sym-bol’s meaning is fixed by convention only {{and not by}} intrinsic meaning. It is un-clear how understanding can arise among individuals utilizing such <b>arbitrary</b> <b>codes,</b> and specifically, whether evolution unaided by individual learning is suffi-cient to produce such understanding. Using a genetic algorithm implemented on a computer, I demonstrate that a significant though imperfect level of understanding {{can be achieved by}} organisms through evolution alone. The population as a whole settles on one particular scheme of coding/decoding information (there are no separate dialects). Several features of such evolving systems are explored and it is shown that the system as a whole is stable against perturbation along many differ-ent kinds of ecological parameters. - 1...|$|R
