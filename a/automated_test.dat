953|2906|Public
5|$|On 13 November 1962, Tsarapkin {{indicated}} that the Soviet Union would accept a proposal drafted by US and Soviet experts involving <b>automated</b> <b>test</b> detection stations ("black boxes") and {{a limited number of}} on-site inspections. The two sides disagreed over the number of black boxes, however, as the US sought 12–20 such stations and the Soviet Union rejected any more than three. On 28 December 1962, Kennedy lowered the US demand to 8–10 stations. On 19 February 1963, the number was lowered further to seven, as Khrushchev continued to insist on no more than three. Kennedy was willing to reduce the number to six, though this was not clearly communicated to the Soviet Union. On 20 April 1963, Khrushchev withdrew support for three inspections entirely.|$|E
2500|$|James Joseph Truchard (born June 25, 1943, in Austin County, Texas), PhD, is an American {{electrical}} engineer and a businessman {{who is the}} co-founder and current president and CEO of National Instruments, a company producing <b>automated</b> <b>test</b> equipment and virtual instrumentation software. [...] Truchard {{is a member of}} the National Academy of Engineering and the Royal Swedish Academy of Engineering Sciences.|$|E
2500|$|As {{demands for}} safety and {{mobility}} have grown and technological possibilities have multiplied, interest in automation has grown. Seeking to accelerate the development and introduction of fully automated vehicles and highways, the United States Congress authorized more than $650 million over six years for intelligent transport systems (ITS) and demonstration projects in the 1991 Intermodal Surface Transportation Efficiency Act (ISTEA). Congress legislated in ISTEA that [...] "the Secretary of Transportation shall develop an automated highway and vehicle prototype from which future fully automated intelligent vehicle-highway systems can be developed. Such development shall include research in human factors to ensure {{the success of the}} man-machine relationship. The goal of this program is to have the first fully automated highway roadway or an <b>automated</b> <b>test</b> track in operation by 1997. This system shall accommodate installation of equipment in new and existing motor vehicles." [...]|$|E
5000|$|<b>Automated</b> <b>Testing</b> tool {{actions to}} <b>automate</b> <b>tests</b> {{as part of}} a build process ...|$|R
40|$|The {{objective}} of this work is to design and implement a set of <b>automated</b> <b>tests</b> to verify the correct functioning of banking software features. The work introduces tools for <b>automated</b> <b>testing.</b> The output of work {{is a set of}} <b>automated</b> <b>tests,</b> which are created by using tools including SoapUI, IntelliJ IDEA and PL/SQL Developer. The benefit of this work is efficient and repeatable control of the required functionality and to create a design {{that can be used for}} creating <b>automated</b> <b>tests...</b>|$|R
40|$|Manual {{testing of}} web-based {{business}} applications causes delay in software delivery time {{because it is}} time-consuming, slow, error prone and less reliable. <b>Automated</b> <b>testing</b> is faster as compared to manual testing because it requires less human effort and thus reduces the error and maintenance cost. Based on the research findings from literature review, {{it was concluded that}} Selenium performs better as compared to other <b>automated</b> <b>testing</b> tools for testing a Single Page Application (SPA). This thesis focused on using Selenium as an <b>automated</b> <b>testing</b> tool for testing SPA. Furthermore, best practices of <b>automated</b> <b>testing</b> were utilized which resulted in faster software testing time. Interviews were conducted to assess the time taken per release during manual testing phase. Historical data from the past three years were also collected and analyzed to measure time difference in manual <b>testing</b> and <b>automated</b> <b>testing.</b> A significant effect was observed in testing time with the introduction of <b>automated</b> <b>testing</b> as compared to manual testing. Findings from the thesis conclude that <b>automated</b> <b>testing</b> leads to achieve shorter testing time and increased chances of detecting errors in a SPA web application...|$|R
5000|$|... <b>automated</b> <b>test</b> {{framework}} - Selenium-based library includes <b>automated</b> <b>test</b> {{framework that}} can be adopted to create application tests set. Effi has built-in mechanism that automatically generates primitives for <b>automated</b> <b>test</b> library.|$|E
5000|$|... #Subtitle level 3: Dependency Rules and <b>Automated</b> <b>Test</b> Case Generation ...|$|E
5000|$|This API {{also allows}} <b>automated</b> <b>test</b> scripts to {{interact}} with the UI.|$|E
50|$|<b>Automated</b> <b>testing</b> is {{advantageous}} for {{a number}} of reasons: tests may be executed continuously without the need for human intervention, they are easily repeatable, and often faster. <b>Automated</b> <b>tests</b> are useful in situations where the test is to be executed several times, for example as part of regression <b>testing.</b> <b>Automated</b> <b>tests</b> can be disadvantageous when poorly written, leading to incorrect testing or broken tests being carried out.|$|R
40|$|The {{subject of}} this thesis is web {{applications}} quality assurance using <b>automated</b> <b>testing</b> tools. The main goal of this thesis is design and implementation solution for <b>automated</b> regression <b>testing</b> of map web application. In the first chapter are described principles of software quality assurance focused to software testing. After that follows chapter {{about the possibility of}} automatic software testing based on analysis tools available to support <b>automated</b> <b>testing</b> of web applications. Next chapters of this thesis are devoted to choosing the ideal tool of <b>automated</b> <b>testing,</b> design and implementation of solutions for <b>automated</b> regression <b>testing</b> of web map application...|$|R
40|$|Aspect-oriented {{software}} development is gaining popularity with {{the adoption of}} aspect-oriented languages in writing programs. To reduce the manual effort in assuring the quality of aspect-oriented programs, we have developed a set of techniques and tools for <b>automated</b> <b>testing</b> of aspect-oriented programs. This position paper presents our perspectives on <b>automated</b> <b>testing</b> techniques from three dimensions: testing aspectual behavior or aspectual composition, unit tests or integration tests, and test-input generation or test oracles. We illustrate <b>automated</b> <b>testing</b> techniques primarily through the last dimension in the perspectives. By classifying these <b>automated</b> <b>testing</b> techniques in the perspectives, we provide better understanding of these techniques and identify future directions for <b>automated</b> <b>testing</b> of aspect-oriented programs. This position paper also presents a couple of new techniques that we propose based on the perspectives. Categories and Subject Descriptors: D. 2. 5 [Testing and Debugging]: Testing tool...|$|R
50|$|AAI also {{provides}} functional <b>automated</b> <b>test</b> equipment for satellite, electronic and other systems.|$|E
5000|$|... #Caption: The UltraFLEX, a {{state-of-the-art}} <b>automated</b> <b>test</b> equipment designed and manufactured by Teradyne.|$|E
5000|$|<b>Automated</b> <b>Test</b> Equipment (ATE) and Functional Test: High-density modular {{signal and}} I/O {{solutions}} ...|$|E
50|$|UIA {{can also}} be useful as a {{framework}} for programmatic access in <b>automated</b> <b>testing</b> scenarios. In addition to providing more refined solutions for accessibility, it is also specifically designed to provide robust functionality for <b>automated</b> <b>testing.</b>|$|R
40|$|Modern {{software}} {{is becoming more}} and more complex and manual testing cannot keep up with the need for high-quality reliable software: often due to the complexity of event-driven software, manual testing is done. This comes with many disadvantages in comparison with <b>automated</b> <b>testing.</b> The increased importance of having a secure, reliable online presence requires testing of JavaScript web applications. This thesis explores the current state of <b>Automated</b> <b>Testing</b> for JavaScript web applications, presents a new <b>Automated</b> <b>Testing</b> Framework and gives an outlook on future research. It intends to resolve some of the complexity issues to allow for <b>automated</b> <b>testing.</b> Electrical Engineering, Mathematics and Computer ScienceSoftware TechnologySoftware Technolog...|$|R
40|$|Idag arbetar allt fler företag inom agil systemutveckling vilket innebär att utvecklingsarbetet sker i korta iterationer. Att arbetet sker i korta iterationer innebär att det är mycket som ska göras på kort tid både inom utveckling och test. För att hinna med testarbetet krävs det därför att man arbetar med automatiserade tester. Automatiserade tester är en typ av {{automation}} som i sig är ett problematiskt område då människor misslyckas med att förlita sig på automation. Om människor inte litar på automatiserade tester leder det till att manuell testning ändå {{kommer att}} ske för att säkerställa resultaten av de automatiserade testerna vilket gör att värdet av att automatisera tester uteblir. Syftet med denna uppsats är att svara på hur tillit till automatiserade tester påverkas utifrån kunskap om automatiserade tester, tillit till personen som skapar automatiserade tester samt feedback från automatiserade tester. En kvalitativ undersökning i form av intervjuer har genomförts för att besvara frågeställningen. Undersökningen har genomförts på ett undersökningsföretag som levererar ekonomiprogram och internetlösningar till företag och redovisnings- och revisionsbyråer. Resultatet av den empiriska undersökningen visade att kunskap om automatiserade tester, tillit till personen som skapar automatiserade tester och feedback från automatiserade tester är aspekter som påverkar människors tillit till automatiserade tester. Brist på kunskap påverkar tillit då människor antingen skapar sig en övertro eller undertro till automatiserade tester. Har människor kunskap om automatiserade tester känner de också tillit till testerna. Att känna tillit till personen som skapar automatiserade tester påverkar tillit då människor känner mer tillit till automatiserade tester om de vet vem personen är, känner tro till personen samt dennes kunskap. Feedback från automatiserade tester påverkar människors tillit då utebliven feedback leder till att de inte vet vilka tester som finns och vad de gör. Detta gör att människor inte känner tillit till dem.  Today, {{an increasing number}} of companies’ uses agile system development which means that the development work is done in short iterations. Short iterations means that there is much to be done in a short time both in development and testing. To keep up with the testing it is required to use <b>automated</b> <b>testing.</b> <b>Automated</b> <b>tests</b> are a type of automation that in itself is a problematic area because people fail to rely on automation. If people have a lack of trust in <b>automated</b> <b>testing</b> it will cause them to still use manual testing, which will make the value of <b>automating</b> <b>tests</b> fail. The {{purpose of this paper is}} to respond to how people ́s trust in <b>automated</b> <b>testing</b> is affected based on knowledge of <b>automated</b> <b>testing,</b> trust in the person creating <b>automated</b> <b>tests</b> and feedback from <b>automated</b> <b>testing.</b> A qualitative study and interviews have been conducted to answer the question. The survey has been conducted on a research company that delivers finance software and internet solutions to companies and accountancy firms. The result of the empirical survey shows that knowledge of <b>automated</b> <b>testing,</b> trust in the person who creates <b>automated</b> <b>testing</b> and feedback from the <b>automated</b> <b>tests</b> are aspects that affect people's trust in <b>automated</b> <b>testing.</b> Lack of knowledge affects people ́s trust in <b>automated</b> <b>testing</b> in a way that leads to that people either create an overtrust or mistrust to the <b>automated</b> <b>tests.</b> People that have knowledge of <b>automated</b> <b>tests</b> feels trust in the tests. To have trust in the person that creates <b>automated</b> <b>tests</b> affects people's trust in that way that people feel more trust in <b>automated</b> <b>testing</b> if they know who the person is, feel the confidence to the person and his or her knowledge. Feedback from <b>automated</b> <b>testing</b> affects people's trust when no-feedback is taking place. This leads to that they do not know which tests there is and what they do. This means that people do not trust them. ...|$|R
50|$|Both {{lead to a}} {{reduction}} in hourly charges for <b>automated</b> <b>test</b> equipment (ATE) service.|$|E
50|$|Never write {{a single}} line of code {{unless you have a}} failing <b>automated</b> <b>test.</b>|$|E
5000|$|Creates <b>automated</b> <b>test</b> {{process for}} system features, where possible, and {{contributes}} to the build system.|$|E
40|$|Producing {{a better}} quality {{software}} system requires {{an understanding of the}} indicators of the software quality through defect detection, and <b>automated</b> <b>testing.</b> This paper aims to elevate the design and <b>automated</b> <b>testing</b> process in an engine water pump of a drinking water plant. This paper proposes how software developers can improve the maintainability and reliability of <b>automated</b> <b>testing</b> system and report the abnormal state when an error occurs on the machine. The method in this paper uses literature to explain best practices and case studies of a drinking water plant. Furthermore, this paper is expected to be able to provide insights into the efforts to better handle errors and perform <b>automated</b> <b>testing</b> and monitoring on a machine. </p...|$|R
40|$|The {{aim of this}} {{research}} paper is to evaluate and compare three <b>automated</b> software <b>testing</b> tools to determine their usability and effectiveness. Software testing is {{a crucial part of}} software development and the process of <b>automating</b> software <b>testing</b> is vital to its success. Currently, complex systems are being built and testing throughout the software development cycle is pertinent {{to the success of the}} software. To enable comparison of the <b>automated</b> <b>testing</b> tools, a multi-partitioned metric suite was developed to guide the tool evaluation process. A selected web application was first manually tested; then tested using the three <b>automated</b> <b>testing</b> tools. <b>Automated</b> <b>testing</b> included the development of scripts that not only saves time and resources when applications are updated, but also speeds up the process of testing when regression testing is necessary. An important contribution of {{this research}} is the development of the metric suite that facilitates comparison and selection of a desired <b>testing</b> tool for <b>automated</b> <b>testing...</b>|$|R
50|$|This {{technology}} reduces {{time and}} effort that testers spend on script maintenance and allows writing <b>automated</b> <b>tests</b> from unstable, lacking or partial specifications. It also enables testers to <b>automate</b> <b>tests</b> resilient to frequent application user interface changes, avoiding continuous reworking of the scripts.|$|R
5000|$|... eggPlant: A GUI-based <b>automated</b> <b>test</b> {{tool for}} mobile app across all {{operating}} systems and devices.|$|E
5000|$|As a schema for {{modeling}} and automatically exploring sentences {{of a language}} with applications to <b>automated</b> <b>test</b> synthesis ...|$|E
5000|$|A relay is an {{electronically}} operated switch. Three {{relay types}} {{are commonly used}} in <b>automated</b> <b>test</b> system switching: ...|$|E
40|$|This diploma thesis {{deals with}} <b>automated</b> <b>testing</b> of web applications. First of all, it {{introduces}} <b>automated</b> <b>testing</b> and compares it with manual testing, then classifies currently available testing tools and describes Selenium testing tools. In further chapter a methodology for automation of testing of web applications is described, providing a systematic manual, how to <b>automate</b> <b>testing,</b> which mistakes to avoid, and also {{tasks and responsibilities}} of involved roles. Appendix of this thesis consists of a user manual for Selenium WebDriver, {{one of the most}} popular tools for <b>automated</b> functional <b>testing</b> of web application. This manual guides reader from the basics of using Selenium WebDriver tool to its advanced features and provides complete information set needed for writing <b>automated</b> <b>tests.</b> This thesis represents a complex material that can be used for carrying out a process of test automation using a particular testing tool...|$|R
40|$|More {{and more}} {{companies}} are deciding to develop software using agile methods. Because of high demands and tight deadlines, <b>automating</b> the <b>testing</b> process {{at all levels}} is required to provide enough quality. Due to time consuming implementation and fragility of tests, automation of functional tests (for web applications) can be a challenge. Selenium WebDriver {{is one of the}} leading tools for <b>automating</b> <b>testing</b> web applications. In this thesis, the reader will become acquainted with the concept of the tool, its pros and cons and will learn how to use it. The second part of the thesis describes the actual solution of <b>automated</b> <b>testing.</b> It shows the reader how to <b>automate</b> <b>testing</b> of nightly builds and release candidate of a complex web application. The thesis also contains a short chapter, which is intended for comparison between manual and <b>automated</b> <b>testing</b> on the basis of the experiences gained...|$|R
40|$|Walder, F. The {{installment}} calendar simulator {{with features}} for <b>automated</b> <b>testing</b> of input parameters. Diploma thesis. Brno: Mendel University in Brno, 2015. The work {{deals with the}} design {{and implementation of the}} application that simu-lates an installment calendar for annuity loan payments redeeming <b>automated</b> <b>testing</b> of its input parameters...|$|R
5000|$|... 1986 The factory phases in <b>Automated</b> <b>Test</b> Equipment in {{production}} methodology, {{this is the}} first in switching power supply manufacturing in Taiwan.|$|E
5000|$|Constructing an <b>automated</b> <b>test</b> suite {{requires}} {{a considerable amount}} of work, including ongoing effort to cover new features and follow intentional code modifications.|$|E
5000|$|The {{sections}} are as follows:K1,K2,K8 DC/Electrical Standards Section K3,K4 Frequency/RF Section K5 Temperature/Humidity K6, Physical Dimensional Test Equipment K7, RADIAC K9 <b>Automated</b> <b>Test</b> Equipment ...|$|E
40|$|A {{software}} application {{is presented in}} this thesis {{that was designed to}} provide the framework for comprehensive <b>automated</b> <b>testing</b> of power system protection relays. This application was implemented using a model protection system that was designed to simulate actual relaying operations performed in the electric power system. The implemented application provided <b>automated</b> <b>testing</b> functionality that performed phase instantaneous over-current protection and phase distance protection testing. The modularity of the implemented {{software application}} provides the framework for the <b>automated</b> <b>testing</b> of a relay’s complete protection abilities. <b>Automated</b> <b>testing</b> using this application was performed by driving the outputs of an Omicron CMC 256 relay test set to provide input signals to a GE Multilin D 90 -Plus Distance Protection System; though the framework is applicable {{to a wide variety of}} protective relays...|$|R
5000|$|Delta Debugging a {{technique}} of <b>automating</b> <b>test</b> case simplification.|$|R
25|$|The {{core system}} {{packages}} receive <b>automated</b> <b>testing</b> via openQA. When <b>automated</b> <b>testing</b> is completed and the repo is in a consistent state, the repo is synced to the download mirrors and published as openSUSE Tumbleweed, which many developers and hackers from the openSUSE Project use {{as their primary}} operating system.|$|R
