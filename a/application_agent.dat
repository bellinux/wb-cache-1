17|2002|Public
30|$|The {{technique}} and {{rationale for the}} various procedures involved with delivering radioactive microspheres into the hepatic artery are well described elsewhere [19 – 22]. Apart from the change in <b>application</b> <b>agent</b> from sterile water to G 5 W for 90 Y resin microspheres, the process for the pretreatment review, angiography, dosimetry and treatment procedure for SIRT, and the clinical team were otherwise identical.|$|E
30|$|Agent Developing Framework [14] {{enables the}} user to build an interoperable, flexible, and {{scalable}} <b>application.</b> <b>Agent</b> Developing Framework uses Java EE technologies such as JNDI, JMS and JMX. Communication is done synchronously or asynchronously through JMS (Java Message Service). Although this framework uses the same technology as the Siebog, ADF is no longer maintained. Currently downloadable version is from the year 2005 and practically is not any more adjusted to the modern trends and technologies of development multi-agent systems.|$|E
40|$|Many peoples {{are using}} the Internet and many types of devices have emarged. In this situation, a single user wants to {{continue}} to work in anytime and anywhere. Current contents service targets specific devices, so that it cannot support many different types of devices. To realize continuous and transparent services, we propose a new model of ASP. In our proposed model, User Agent and <b>Application</b> <b>Agent</b> can work together to provide service continuity and device transparency. Then, we implemented a prototype based on this model and evaluated our model. As a conclution, our model could provide continuous and device transparent service. ...|$|E
40|$|Agent Tcl is {{a simple}} itinerant-agent system that runs on Unix {{workstations}} and allows the rapid development of complex agents [Gra 95, Gra 96]. Although Agent Tcl currently lacks the features of commercial systems such asTelescript [Whi 94], it is an e ective platform for experimentation with itinerant agents and {{for the development of}} small to medium-sized <b>applications.</b> <b>Agent</b> Tcl agent...|$|R
5000|$|Agent Design Patterns: Elements of <b>Agent</b> <b>Application</b> Design. Autonomous <b>Agents</b> '98, Minneapolis, Minnesota, USA, May 1998.|$|R
40|$|Ontologies {{and agents}} are two {{research}} {{areas that have}} become intertwined in recent years. Ontologies have started to be developed aiming at agent–based <b>applications.</b> <b>Agents</b> have benefited {{by the use of}} ontologies in heavily information– based processes. From the theory of ontology and agenthood to its application in practice, we have reviewed the available literature. Based on our research, we summarize the state–of–the–art in ontology–based <b>agent</b> <b>applications...</b>|$|R
40|$|Considering {{the higher}} {{requirements}} for data acquisition and information processing of process-trace in discrete manufacturing industry, {{the architecture of}} the process monitoring management system based on RFID is proposed. The implementation mechanism of the <b>application</b> <b>agent</b> structure is presented as well as the complex logic controlling method. The progress analysis model is also given. At last, the implementation of the intelligent terminal is given, which proves the feasibility and the effectiveness of the system in practical application. NE Univ, IEEE Ind Elect Singapore Chapter, Guilin Univ Elect Technol, IEEE Control Syst Soc, IEEE Ind Elect So...|$|E
40|$|Programming {{applications}} for highly dynamic environments such as mobile ad hoc networks (MANETs) is complex, since the working context of applications changes continuously. This paper presents "views" as abstractions for representing and maintaining context information, tailored to applications in MANETs. An <b>application</b> <b>agent</b> can define a view by declaratively describing the context information it is interested in. A supporting middleware platform, called ObjectPlaces, {{ensures that the}} information represented by a view continuously reflects the agent's context information, despite the dynamic situation in a MANET. We elaborate on the distributed protocol that ObjectPlaces uses to maintain the information of views, and give a thorough evaluation...|$|E
40|$|Software {{engineering}} for multi-agent systems iv: research {{issues and}} practical applicationsProgramming applications for highly dynamic environments such as mobile ad hoc networks (MANETs) is complex, since the working context of applications changes continuously. This paper presents "views" as abstractions for representing and maintaining context information, tailored to applications in MANETs. An <b>application</b> <b>agent</b> can define a view by declaratively describing the context information it is interested in. A supporting middleware platform, called ObjectPlaces, {{ensures that the}} information represented by a view continuously reflects the agent's context information, despite the dynamic situation in a MANET. We elaborate on the distributed protocol that ObjectPlaces uses to maintain the information of views, and give {{an evaluation of the}} protocol's correctness and overhead. status: publishe...|$|E
40|$|The {{increased}} {{pervasiveness of}} wireless mobile computing devices draws new {{attention to the}} need for coordination among small networked components. The very nature of the environment requires devices to interact opportunistically when resources are available. Such interactions occur unpredictably as mobile agents generally have no advance knowledge of other agents they will encounter over the lifetime of the application. In addition, as the ubiquity of communicating mobile devices increases, the number of <b>application</b> <b>agents</b> supported by the network grows drastically. Managing access control is crucial to such systems, and <b>application</b> <b>agents</b> must directly manipulate and examine access policies because the agents require full control over their data. However, because these networks are often decoupled from a fixed infrastructure, reliance on centralized servers for authentication and access policies is impractical. In this paper, we explore the essential features of general access control policies tailored to the needs of agent coordination in the presence of physical and logical mobility. This access mechanism derives much of its flexibility and expressiveness from its ability to take into account context information. We propose and evaluate novel constructs to support such policies, especially in the presence of large numbers of highly dynamic <b>application</b> <b>agents.</b> ...|$|R
40|$|Mobile {{agents are}} a useful {{paradigm}} [...] {{other than a}} useful technology [...] {{for the development of}} complex Internet applications. However, the effective development of mobile <b>agent</b> <b>applications</b> requires suitable models and infrastructures. This paper proposes an organizational approach to the high-level design of mobile <b>agent</b> <b>applications.</b> The idea is to models the Internet as a multiplicity of local and active organizational contexts, intended as the places where coordination activities of <b>application</b> <b>agents</b> occur and are ruled. The paper discusses the advantages and the generality of such an approach, also {{with the help of a}} case study in the area of tourist assistance...|$|R
40|$|Mobile {{agents are}} a useful {{paradigm}} {{for the development}} of complex Internet applications. However, the effective development of mobile <b>agent</b> <b>applications</b> requires suitable models and infrastructures. This paper proposes an organizational approach to the design and d evelopment of mobile <b>agent</b> <b>applications</b> and describes an infrastructure designed to support such approach. The approach models the Internet as a multiplicity of local and active organizational contexts, intended as the places where coordination activities of <b>application</b> <b>agents</b> occur and are ruled. The MARS coordination infrastructure supports the development of mobile <b>agent</b> <b>applications</b> by implementing organizational contexts in terms of programmable tuple spaces. An application example related to the use of mobile agents to access and organize tourist information is introduced and discussed through the paper to clarify our approach and to show its effectiveness...|$|R
40|$|We {{present a}} {{strategy}} for dynamically schedule communicating processes of a parallel application onto a loosely coupled distributed system. As we must manage two criteria to schedule processes (the workload of the differents sites {{and the cost of}} the communication between processes), the algorithm proposed uses two types of agents (system agents and application agents). A system agent manages the workload of its site, an <b>application</b> <b>agent</b> reduces the IPC costs within its application. Our two types of agents cooperate and negociate to make a trade-off between the two criteria. Therefore, we describe the different cooperations needed via a two-layer model. An implementation of this strategy is also described and experimental results analysed. The results obtained justify certain of our design choices and show that the improvement provided by our scheduling algorithm is satisfactory...|$|E
40|$|Using {{biological}} agent potencial as a pest control to Plutella xylostella at cabbage plant is entomopatogen nematode Steinernema carpocapsae (All Strain). This research designed to know influence combining <b>application</b> <b>agent</b> biological and using shallots saddle plant to population and attack level of Plutella xylostella The research using factorial complete randomized design have two factors and three replicationts. The first factor {{is kind of}} {{biological agent}} are without treatment only using water, all strain of entomopatogen nematode Steinernema carpocapsae. The second factor is kind of saddle plant are without treatment, shallots saddle plant. The result showed that aplicate of biological agent entomopatogen nematode Steinernema carpocapsae and shallots saddle plant have highest effectivity to Plutella xylostella population reduce at cabbage plant. Key words : Nematode entomopatogen, S. carpocapsae, Plutella xylostell...|$|E
40|$|We propose PET (Personal Elegant assistanT) agent model, {{an agent}} model {{suitable}} for information kiosk systems supporting mobile users, which provides cyberspace services in user-adaptive manner. PET agent model {{consists of four}} types of agents; Interface Agent (IA) which supports user interactions on the terminals, User Agent (UA) which manages user's profiles, Service Agent (SA) which generalizes network services, and <b>Application</b> <b>Agent</b> (AA) which controls application procedures. Since interaction functionality between users and the system is separately modeled as IA and UA, their combination efficiently enables user-adaptive information provision for multiple mobile users accessing multiple public kiosk terminals. AA {{makes it possible for}} application developers to implement practical applications quickly by controlling a procedural scenario to ask for many cyberspace services, which are generalized as SAs. Based on this idea, we implemented a prototype agent systems using Java to evaluate how our agent model is applicable...|$|E
5000|$|HP Operations Manager (OM) — monitor {{systems and}} <b>applications</b> using <b>agents</b> ...|$|R
40|$|There is an {{emerging}} {{consensus on the}} need to develop tool-kits for building distributed multi-agent systems. This paper outlines ZEUS, an advanced development tool-kit for constructing collaborative <b>agent</b> <b>applications.</b> ZEUS is a culmination of a careful synthesis of established agent technologies with the addition of some new ones, to provide an integrated environment for the rapid software engineering of collaborative <b>agent</b> <b>applications.</b> Keywords <b>Agent</b> architectures, distributed multi-agent systems, constructing collaborative <b>agent</b> <b>applications.</b> I. Introduction This paper describes ZEUS, an advanced tool-kit for building distributed multi-agent applications. The tool-kit facilitates the construction of collaborative <b>agent</b> <b>applications,</b> arguably one of the more complex of agent types because they can have rich, deliberative internal models and operate in open and time-constrained environments (Nwana 1996). The reasons for the development of ZEUS fall into two broad categories. First [...] ...|$|R
40|$|Organization-based agents {{dynamically}} create, manage, {{and participate}} in groups governed by common goals. In complex <b>applications,</b> <b>agents</b> may participate simultaneously in mul-tiple organizations, requiring agents to manage their asso-ciations and assignments in a consistent, unambiguous way. The Organization-Based Agent Architecture (OBAA++) ex-plicitly supportsmultigroup agents and {{is being used to}} eval-uate a holonic MAS for power quality control...|$|R
40|$|Recent {{measurements}} of network traffic {{have shown that}} self-similarity is a ubiquitous phenomenon present in both local area and wide area traffic traces. In this paper, we investigate the impact of scale-invariant burstiness on network performance including its effect on throughput, packet loss rate, response time, and buffer occupancy. This {{is done in the}} context of a client/server network model using transport and network layer simulations. First, we study the effect of self-similarity on performance when a UDP-based unreliable transport protocol is employed and network resources including bottleneck buffer capacity and bandwidth are varied. We find that as the degree of self-similarity is increased, all performance variables deteriorate superlinearly. The severity of the performance degradation is related to the greediness of the <b>application</b> <b>agent,</b> decreasing with the increased throttling of the average output rate. The degree of self-similarity is controlled by a novel mechanism b [...] ...|$|E
40|$|Currently, it {{is still}} unclear how to {{translate}} effectively programs validated in research for use in real-world contexts. Among the efforts being made to identify strategies which optimize the application of these programs in everyday practice are tests of the differential effectiveness of the programs depending on the <b>application</b> <b>agent.</b> Method: this study analyses the effects of two programs on alcohol use and its variables {{as a function of}} provider type. Two hundred students from the first year of secondary education were distributed among five experimental conditions: four treatment conditions, in which the two programs were applied by teachers at the school or external psychologists, and a control condition. Results: the results suggest that, for both programs, teachers obtain better outcomes in alcohol use and concern about addiction. Conclusions: it is concluded that teachers are the ideal application agents in terms of efficiency, and we discuss the implications for research and preventive practice...|$|E
40|$|Safety {{issues related}} to the use of silver {{fluoride}} in paediatric dentistry Theo Gotjamanos, BDS, MDS, PhD, FRACDS, FFOP(RCPA) * Due to its exceedingly high fluoride content, 40 % silver fluoride solution has the potential to cause fluorosis when used in young children. In vitro testing conducted in the present investigation indi-cates that application of 40 % silver fluoride to deep carious lesions or its use as a ‘spot ’ <b>application</b> <b>agent</b> could result in 3 to 4 mg of fluoride reaching the systemic circulation. As scientifically-based clinical trials on the safety of 40 % silver fluoride have not been conducted, it would be appropriate for it to be withdrawn from further clinical use until proper testing and evalua-tion have been carried out. In view of the possibility that lower strength solutions of silver fluoride (1 - 4 %) may be just as effective as 40 % in ‘arresting’ deep caries, testing should focus on such solutions, particularly as the potential for toxicity from their fluoride content would be reduced by a factor o...|$|E
40|$|Establishing and {{maintaining}} effective wireless communication networks {{is a major}} challenge for large-scale multi-agent applications in outdoor environments, such as future military operations and disaster response teams. In these <b>applications,</b> <b>agents</b> often {{do not have access}} to established communication infrastructure, and so must rely on an ad hoc network to meet their communication needs. Limited communication ranges...|$|R
40|$|It {{has been}} assumed that all <b>application</b> <b>agents</b> in a multi-agent system are pre-invoked and remain active {{regardless}} of whether they are actually used. This static agent invocation may cause the system overload and a waste of resources, especially in workflow management and on-line shopping systems where tens and even hundreds of <b>application</b> <b>agents</b> might exist. This paper proposes a scheme of dynamic agent invocation that selectively activates only agents that are actually requested and terminates them when they are no longer needed. The agent management system is implemented in Java, and the dynamic agent invocation is accomplished by using the Java Native Interface (JNI) that links two heterogeneous methods. We also constructed a KQML language interface that facilitates the communications between heterogeneous agents. This scheme of dynamic agent management provides efficient resource usage, easy extensibility, and dynamic adaptability to changes in the environment. Keywords: multi- [...] ...|$|R
5000|$|HP Operations Manager (OM) [...] - [...] monitor {{systems and}} <b>applications</b> using <b>agents</b> ...|$|R
40|$|International audienceIn {{order to}} address the {{performance}} problems that many business applications are experiencing, network vendors and Network Service Providers are reconsidering the integration of some form of application awareness in the way their networks forward user traffic. Their {{ultimate goal is to}} devise new network service models that are dedicated and customized to applications. This trend is mainly enabled by the emergence of software-Defined networking (SDN), which allows for flexible flow-based forwarding. This paper proposes an SDN-based Application Driven Network (ADN) that deploys customized data paths on an application basis, that the ADN is able to adapt to meet the, potentially, varying Quality of Service (QoS) needs of applications. These needs are, either, explicitly expressed and submitted by the middleware or by an <b>application</b> <b>agent,</b> or inferred by the proposed ADN with DPI (Deep Packet Inspection) based traffic classification techniques. This paper presents the general architecture of our proposed ADN by describing its main components, their requirements as well as their main algorithms. The proposed ADN has been implemented, evaluated and applied to the OMG Data Distribution Service (DDS) based distributed applications in an enterprise network context...|$|E
40|$|Recent {{advances}} in microsensor technology {{have led to}} the quick development and large-scale deployment of low cost and low power sensing devices with computational and wireless sensing and communication capabilities. Current works consider wireless sensor networks are focusing on specific application. But for such applications, wireless sensor networks (WSNs) can not operate as stand-alone networks; there must be an effective way for user {{to gain access to the}} data produced by the wireless sensor networks. At the same time, it is envisioned that WSN will to be pervasive and ubiquitous. It makes a lot of sense to integrate WSNs with Internet. Some crucial issues are discussed in the article. In the paper, a service-oriented model with <b>application</b> <b>agent,</b> resource manager, register agent, and multi-gateway is designed, and its components have been illustrated. With our architecture, it can put the required data as close as possible to the users and filter data as close as the source. From the simulation results about load balancing and delay time, we can get that it performs well in flexible and reliable for different applications and can easy connect with different protocols used for WSNs. ...|$|E
40|$|Application {{development}} {{platform is}} the most important environment in IT industry. There are a variety of platforms. Although the native development enables application to optimize, various languages and software development kits need to be acquired according to the device. The coexistence of smart devices and platforms has rendered the native development approach time and cost consuming. Cross-platform development emerged as a response to these issues. These platforms generate applications for multiple devices based on web languages. Nevertheless, development requires additional implementation based on a native language because of the coverage and functions of supported application programming interfaces (APIs). Wearable devices have recently attracted considerable attention. These devices only support Bluetooth-based interdevice communication, thereby making communication and device control impossible beyond a certain range. We propose Network <b>Application</b> <b>Agent</b> (NetApp-Agent) in order to overcome issues. NetApp-Agent based on the Cordova is a wearable device control platform for the development of network applications, controls input/output functions of smartphones and wearable/IoT through the Cordova and Native API, and enables device control and information exchange by external users by offering a self-defined API. We confirmed the efficiency of the proposed platform through experiments and a qualitative assessment of its implementation...|$|E
40|$|Mobile Agents {{are being}} {{proposed}} for an increasing variety of <b>applications.</b> <b>Agent</b> mobility can be exploited {{to implement a}} scalable system level solutions. Network routing is one such domain that can benefit from an agent-based approach. Shortest Path Routing algorithms enjoy a widespread use in most communication networks. However, large amounts of routing data exchanged in these algorithms consume substantial bandwidth, making conventional routing schemes less scalable...|$|R
40|$|Abstract. The {{increased}} pervasiveness mobile devices like cell phones, PDAs, and laptops {{draws attention}} to the need for coordination among these networked devices. The very nature of the environment requires devices to interact opportunistically when resources are available. Such interactions occur unpredictably as device users have no advance knowledge of others they will encounter. The openness of these environments also require users to protect themselves and their data from unwanted interactions while maintaining desired yet unscripted coordination. As the ubiquity of communicating mobile devices increases, the number of applications supported by the network grows drastically and managing access control is crucial to such systems. <b>Application</b> <b>agents</b> must directly manipulate and examine access policies because these networks are often decoupled from a fixed infrastructure, rendering reliance on centralized servers for authentication and access policies impractical. In this paper, we explore context-aware access control policies tailored to the needs of agent coordination in open environments that exhibit mobility. We propose and evaluate novel constructs to support such policies, especially in the presence of large numbers of highly dynamic <b>application</b> <b>agents.</b> ...|$|R
40|$|Abstract. The {{increasing}} {{ubiquity of}} mobile computing devices has made mobile ad hoc networks an everyday occurrence. Applications in these networks are commonly structured as a logical network of mobile agents that coordinate {{with each other}} to achieve their goals. In these highly dynamic multi-agent systems, the multitude of devices provides a varied and rapidly changing context in which agents must learn to operate. Successful end-user applications will not only learn to handle dynamic conditions, but will take advantage of the wide variety of available information and resources. Any environment that supports agents and their interactions must facilitate flexible communication mechanisms. Such protocols for enabling an <b>application</b> <b>agents</b> task of gathering contextual information must function in a timely and adaptive fashion. This paper presents a protocol for mediating these context-based interactions among mobile agents. We present an implementation and show how it facilitates information exchange among mobile <b>application</b> <b>agents.</b> We also provide an analysis of the tradeoffs between consistency and range of context definitions in highly dynamic ad hoc networks. ...|$|R
40|$|Abstract—For a {{semiconductor}} foundry fab, {{the satisfaction}} of customers is critical. In order to provide a better service for customers, the modeling and simulation of the order fulfillment process (OFP) {{is important for the}} foundry fab since supervisors can use them to find the bottleneck in the process. The scope {{of this paper is to}} (1) model the OFP of a foundry fab in the distributed environment using multi-agents; (2) provide the functionalities for each <b>application</b> (<b>agent)</b> in the OFP; and (3) provide a generic message-passing platform (GMPP) for the distributed environment. The OFP can be viewed as the enterprise-scale integration of applications. It is decomposed into four subprocesses: order management process, planning process, manufacturing execution system (MES), and event monitoring. Each application in the subprocess is regarded as an agent and performs its task based on its knowledge constrained by its objectives. Agents are located in the distributed environment in order to possess the properties of a distributed system. The message types in the GMPP are classified into application-to-application, application-to-person and person-to-application. The enabling communication protocols, such as COM+ event, NET-NET and a gateway, which is the protocol converter between applications and users, will be addressed. The entire OFP is built on the GMPP. Some useful information for decision support systems is shown in the simulation results. Index Terms—Distributed environment, event solution set (ESS), foundry fab, message passing, multi-agents, order fulfillment process (OFP). I...|$|E
40|$|Modern {{distributed}} computing {{developed from the}} traditional supercomputing community rooted firmly {{in the culture of}} batch management. Therefore, the field has been dominated by queuing-based resource managers and work flow based job submission environments where static resource demands needed be determined and reserved prior to launching executions. This has made it difficult to support resource environments (e. g. Grid, Cloud) where the available resources as well as the resource requirements of applications may be both dynamic and unpredictable. This thesis introduces a flexible execution model where the compute capacity can be adapted to fit the needs of applications as they change during execution. Resource provision in this model is based on a fine-grained, self-service approach instead of the traditional one-time, system-level model. The thesis introduces a middleware based <b>Application</b> <b>Agent</b> (AA) that provides a platform for the applications to dynamically interact and negotiate resources with the underlying resource infrastructure. We also consider the issue of transparency, i. e., hiding the provision and management of the distributed environment. This is the key to attracting public to use the technology. The AA not only replaces user-controlled process of preparing and executing an application with a transparent software-controlled process, it also hides the complexity of selecting right resources to ensure execution QoS. This service is provided by an On-line Feedback-based Automatic Resource Configuration (OAC) mechanism cooperating with the flexible execution model. The AA constantly monitors utility-based feedbacks from the application during execution and thus is able to learn its behaviour and resource characteristics. This allows it to automatically compose the most efficient execution environment on the fly and satisfy any execution requirements defined by users. Two policies are introduced to supervise the information learning and resource tuning in the OAC. The Utility Classification policy classifies hosts according to their historical performance contributions to the application. According to this classification, the AA chooses high utility hosts and withdraws low utility hosts to configure an optimum environment. The Desired Processing Power Estimation (DPPE) policy dynamically configures the execution environment according to the estimated desired total processing power needed to satisfy users’ execution requirements. Through the introducing of flexibility and transparency, a user is able to run a dynamic/normal distributed application anywhere with optimised execution performance, without managing distributed resources. Based on the standalone model, the thesis further introduces a federated resource negotiation framework as a step forward towards an autonomous multi-user {{distributed computing}} world. ...|$|E
50|$|More recently, Clark {{has been}} working on the April and Go! {{programming}} languages and their <b>application</b> to <b>agent</b> programming.|$|R
40|$|Objectives: The aim of {{this study}} was to examine changes in the dentinal fluid flow (DFF) during desensi-tizing <b>agent</b> <b>application</b> and to compare {{permeability}} after <b>application</b> among the <b>agents.</b> Materials and Methods: A Class 5 cavity was prepared to exposure cervical dentin on an extracted human premolar which was connected to a sub-nanoliter fluid flow measuring device (NFMD) under 20 cm water pressure. DFF was measured from before <b>application</b> of desensitizing <b>agent</b> (Seal&Protect, SP; SuperSeal...|$|R
40|$|SAPERE is {{a general}} multiagent {{framework}} to support the development of self-organizing pervasive computing services. One of the key aspects of the SAPERE approach is to have all interactions between agents take place in an indirect way, via a shared spatial environment. In such environment, a set of nature-inspired coordination laws have been defined to rule the coordination activities of the <b>application</b> <b>agents</b> and promote the provisioning of adaptive and self-organizing services...|$|R
40|$|Much of {{the current}} work on {{context-aware}} computing relies on information directly available to an application via context sensors on its local host, e. g., user profile, host location, time of day, resource availability, and quality of service measurements. We propose a new notion of context which includes in principle any information available in the ad hoc network infrastructure but is restricted in practice to specific views of the overall context. The context of each view is {{defined in terms of}} data, objects, or events exhibiting certain properties, associated with particular <b>application</b> <b>agents,</b> residing on particular hosts, and part of some restricted subnet. Location, distance, movement profiles, access rights, and much more can be used in view specifications. The underlying system infrastructure interprets the view specifications and continuously updates the contents of user-defined views despite dynamic changes in the specifications, state transitions at the application level, mobility of hosts in the physical space, and migration of code among hosts. In systems that are large-scale in terms of both space and numbers of agents, this local restriction will prove necessary for providing timely context information to <b>application</b> <b>agents...</b>|$|R
