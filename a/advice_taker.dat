11|1|Public
5|$|Logic was {{introduced}} into AI research {{as early as}} 1958, by John McCarthy in his <b>Advice</b> <b>Taker</b> proposal.|$|E
50|$|In 1958, he {{proposed}} the <b>advice</b> <b>taker,</b> which inspired later work on question-answering and logic programming.|$|E
5000|$|... "The main {{advantages}} {{we expect the}} <b>advice</b> <b>taker</b> to have is that its behaviour will be improvable merely by making statements to it, telling it about its symbolic environment and what is wanted from it. To make these statements will require little if any knowledge of the program or the previous knowledge of the <b>advice</b> <b>taker.</b> One {{will be able to}} assume that the <b>advice</b> <b>taker</b> will have available to it a fairly wide class of immediate logical consequences of anything it is told and its previous knowledge. This property is expected to have much in common with what makes us describe certain humans as having common sense. We shall therefore say that a program has common sense if it automatically deduces for itself a sufficiently wide class of immediate consequences of anything it is told and what it already knows." ...|$|E
40|$|The {{phenomenon}} of advice discounting in advice taking {{and the lack}} of motivational force in advice giving often hamper follow-up actions which are important to satisfy both advice seekers’ and advi-sors’ demands. This paper strives to diminish the well-known problem of advice discounting by invest-ing in a design study and creating a new information system supporting advisors. The prototype is mobile and provides multimedia interventions. These enable the advisors to activate <b>advice</b> <b>takers</b> on an emotional level with wow-factor episodes which strengthen advisors’ arguments. This study is af-fected by and evaluated in the practical field of home security advice. The evaluation points {{to the conclusion that the}} motivation to utilize given advice is higher in the IS-supported advisory service compared to the conventional approach of plain speech-based advice giving. The paper contributes general design implications facing advice discounting in mobile and collaborative advisory services. Furthermore, it supports home security provider in designing their mobile service encounter to in-crease the advice implementation...|$|R
5000|$|The <b>advice</b> <b>taker</b> was a {{hypothetical}} computer program, proposed by John McCarthy in his 1958 paper [...] "Programs with Common Sense". It {{was probably the}} first proposal to use logic to represent information in a computer and not just as {{the subject matter of}} another program. It may also have been the first paper to propose common sense reasoning ability as the key to artificial intelligence. In his paper, McCarthy advocated: ...|$|E
5000|$|Logic was {{introduced}} into AI research {{as early as}} 1958, by John McCarthy in his <b>Advice</b> <b>Taker</b> proposal.In 1963, J. Alan Robinson had discovered a simple method to implement deduction on computers, the resolution and unification algorithm. However, straightforward implementations, like those attempted by McCarthy and his students in the late 60s, were especially intractable: the programs required astronomical numbers of steps to prove simple theorems. A more fruitful approach to logic {{was developed in the}} 1970s by Robert Kowalski at the University of Edinburgh, and soon this led to the collaboration with French researchers Alain Colmerauer and Philippe Roussel who created the successful logic programming language Prolog.Prolog uses a subset of logic (Horn clauses, closely related to [...] "rules" [...] and [...] "production rules") that permit tractable computation. Rules would continue to be influential, providing a foundation for Edward Feigenbaum's expert systems and the continuing work by Allen Newell and Herbert A. Simon that would lead to Soar and their unified theories of cognition.|$|E
40|$|A {{programming}} system called LISP (for LISt Processor) {{has been developed}} for the IBM 704 computer by the Artificial Intelligence group at M. I. T. The system was designed to facilitate experiments with a proposed system called the <b>Advice</b> <b>Taker,</b> whereby a machine could be instructed to handle declarativ...|$|E
40|$|This {{paper is}} a reprint of {{a sketch of}} an electronic-circuit-designing program, {{submitted}} a a Ph. D. proposal. It describes the electronic design problem {{with respect to the}} classic trade-off between expertise and generality. The essence of the proposal is to approach the electronics domain indirectly, by writing an "advice-taking" program (in McCarthy's sense) which can be told about electronics, including heuristic knowledge about the use of specific electronics expertise. The core of this <b>advice</b> <b>taker</b> is a deductive program capable of deducing what its strategies should be. Work reported herein was conducted at the Artificial Intelligence Laboratory, a Massachusetts Institute of Technology research program supported in part by the Advanced Research Projects Agency of the Department of Defense and monitored by the Office of Naval Research under Contract Number N 00014 - 70 -A- 0362 - 0005. MIT Artificial Intelligence Laborator...|$|E
40|$|Fundamental {{concerns}} of relevance to programming are raised by Brian Smith in [19]. These {{focus on the}} relation that holds between a program and the world outside [...] the semantics of what is referred to by computer scientists as the semantics of the program. This paper explains how programming concepts developed by the author in collaboration with others may contribute to "a theoretical framework that does justice to practice" such as is discussed in [19]. Introduction The role of logic in AI {{is the subject of}} a longstanding controversy dating from McCarthy 's <b>Advice</b> <b>Taker</b> (1958). A rich context for the modern debate is provided by the commentaries on a celebrated paper by McDermott [15], in which he explains his reasons for renouncing "logicism". McDermott's paper can be seen as a challenge for programming language theory. It indicates that neither logic nor programming methods that are based upon conventional logical foundations can adequately meet the needs of AI. This sober [...] ...|$|E
40|$|Mathematical logicians had {{developed}} {{the art of}} formalizing declarative knowledge long {{before the advent of}} the computer age. But they were interested primarily in formalizing mathematics. Because of the important role of nonmathematical knowledge in AI, their emphasis was too narrow from the perspective of knowledge representation, their formal languages were not sufficiently expressive. On the other hand, most logicians were not concerned about the possibility of automated reasoning; from the perspective of knowledge representation, they were often too generous in the choice of syntactic constructs. In spite of these differences, classical mathematical logic has exerted significant influence on knowledge representation research, and it is appropriate to begin this Handbook with a discussion of the relationship between these fields. The language of classical logic that is most widely used in the theory of knowledge representation is the language of first-order (predicate) formulas. These are the formulas that John McCarthy proposed to use for representing declarative knowledge in his <b>Advice</b> <b>Taker</b> paper [171], and Alan Robinson proposed to prove automatically using resolution [230]. Propositional logic is, of course, the most important subse...|$|E
40|$|Prior {{literature}} has proposed two process {{explanations for the}} positive effect of source similarity (i. e., similarity between adviser and <b>advice</b> <b>taker)</b> on persuasion. One explanation is that similar others are perceived to have preferences that are correlated with one's own, and this makes their advice more diagnostic. The other is that similar others are liked more so people follow their advice to maintain connectedness with them. We propose a more general explanation that incorporates the advice taker's processing goals. To process any advice, advice takers activate a mentalizing goal, which is to understand the adviser's mental states. Similarity creates a perception of such an understanding and induces a feeling of certainty (i. e., a feeling of knowing) that validates the advice as a decision input and increases persuasion. A mentalizing explanation accounts for the effect even when similarity cannot lead to perceptions of correlated preferences or to interpersonal liking. Four studies show that the effect attenuates if advice takers are less likely to mentalize, are already primed to feel certain, or misattribute their feeling of certainty to a source other than the advice. Furthermore, the feeling of certainty emanating from similarity even influences decisions unrelated to the advice. status: publishe...|$|E
40|$|The {{purpose of}} our work is to {{investigate}} ways of making machines solve problems that are usually considered to require intelligence. Our procedure is to attack the problems by programming a computer to deal directly with the necessary abstractions, rather than by simulating hypothetical physiological structures. When a method for solving a problem is not known, searches over spaces of potential solutions of the prob-lem, or of parts of the problem, are necessary. The space of potential solutions of interesting problems is ordinarily so enormous {{that it is necessary}} to devise heuristic methods (1) to replace the searching of this space by a hierarchy of searches over sim-pler spaces. The major difficulty, at present, is the excessive length of time required for building machinery or even for writing programs to test heuristic procedures. For this reason, the major part of our effort is going into the development of ways of com-municating with a computer more effectively than we can now communicate. This work has two aspects: development of a system for instructing the computer in declarative, as well as imperative, sentences, called the <b>advice</b> <b>taker</b> (2), and development of a programming language called LISP (3) for manipulating symbolic expressions that wil...|$|E

