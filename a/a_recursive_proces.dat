0|10000|Public
40|$|Contents 1 Introduction 9 1. 1 Motivation..................................... 9 1. 2 Background..................................... 10 1. 2. 1 The {{original}} idea.............................. 10 1. 2. 2 The PRP system.............................. 10 1. 3 Chapter division.................................. 10 1. 4 To future {{readers of}} this thesis.......................... 11 2 Problem definition 13 2. 1 The concept of Parallel Recursive Procedures.................. 13 2. 1. 1 An example introducing the principal ideas............... 13 2. 1. 2 Fanout and {{the administration of the}} servers.............. 14 2. 1. 3 Breadth first versus depth first...................... 16 2. 1. 4 Returning from the <b>recursive</b> <b>proce...</b>|$|R
50|$|<b>A</b> <b>recursive</b> {{language}} is <b>a</b> <b>recursive</b> subset of <b>a</b> formal language.|$|R
5000|$|<b>A</b> <b>recursive</b> formal {{language}} is <b>a</b> <b>recursive</b> subset {{in the set}} of all possible words over the alphabet of the language.|$|R
50|$|Degree {{spectra of}} {{relations}} are introduced and first studied in Harizanov's dissertation: Degree Spectrum of <b>a</b> <b>Recursive</b> Relation on <b>a</b> <b>Recursive</b> Structure.|$|R
5000|$|The object-depending-on-object {{can also}} be {{declared}} as a constant as part of <b>a</b> <b>recursive</b> type. An example of <b>a</b> <b>recursive</b> type is: ...|$|R
50|$|A set <b>A</b> is <b>a</b> <b>recursive</b> set if {{and only}} if A and the {{complement}} of A are both recursively enumerable sets. The preimage of <b>a</b> <b>recursive</b> set under <b>a</b> total computable function is <b>a</b> <b>recursive</b> set. The image of a computable set under a total computable bijection is computable.|$|R
30|$|Some other results {{related to}} <b>a</b> <b>recursive</b> sequence, <b>a</b> <b>recursive</b> {{polynomial}} and their promotion forms {{can also be}} found in references [10 – 17]; here we no longer list them one by one.|$|R
40|$|Network {{discovery}} {{strategy in}} <b>a</b> <b>recursive</b> internet network architecture. <b>A</b> <b>recursive</b> internet network architecture consists of independent recursive layers together with inter process communication (IPC) between these layers. Network Architectures and ServicesTelecommunicationsElectrical Engineering, Mathematics and Computer Scienc...|$|R
40|$|AbstractWe {{construct}} <b>a</b> <b>recursive</b> model <b>A,</b> <b>a</b> <b>recursive</b> subset R of its domain, and a (nonzero) Turing degree x ⩽ 00 &#x 0301; {{satisfying the}} following condition. The nonrecursive images of R under all isomorphisms from <b>A</b> to other <b>recursive</b> models are of Turing degree x and cannot be recursively enumerable...|$|R
5000|$|If <b>A</b> is <b>recursive</b> in B this {{is written}} [...] By this {{definition}} <b>A</b> is <b>recursive</b> in [...] (the empty set) if {{and only if}} <b>A</b> is <b>recursive.</b> However <b>A</b> being <b>recursive</b> in B is not equivalent to A being [...]|$|R
50|$|<b>A</b> <b>recursive</b> letter {{complaining}} about plagiarism.|$|R
50|$|If <b>A</b> is <b>a</b> <b>recursive</b> set {{then the}} {{complement}} of <b>A</b> is <b>a</b> <b>recursive</b> set. If <b>A</b> and B are <b>recursive</b> sets then <b>A</b> ∩ B, A ∪ B {{and the image}} of A &times; B under the Cantor pairing function are recursive sets.|$|R
50|$|Below is <b>a</b> <b>recursive</b> {{presentation}} of VAS(p, M).|$|R
40|$|We {{begin by}} {{presenting}} some basic definitions from effective model theory. <b>A</b> <b>recursive</b> structure is one with <b>a</b> <b>recursive</b> domain and uniformly recursive atomic relations. Without lost of generality, {{we can always}} suppose that the domain of every recursive structure is the set of all naturall numbers ω an...|$|R
40|$|We obtain <b>a</b> <b>recursive</b> {{formulation}} for <b>a</b> general {{class of}} contracting problems involving incentive constraints. These constraints make the corresponding maximization (sup) problems non recursive. Our approach consists of studying <b>a</b> <b>recursive</b> Lagrangian. Under standard general conditions, there is <b>a</b> <b>recursive</b> saddle point (infsup) functional equation (analogous to Bellman's equation) {{that characterizes the}} solution. Our approach applies to a large class of contractual problems, as examples, we study the optimal policies in a model intertemporal participation (default) constraints and a model with competitive constraints (as in Ramsey problems) ...|$|R
40|$|We obtain <b>a</b> <b>recursive</b> {{formulation}} for <b>a</b> general {{class of}} contracting problems involving incentive constraints. These constraints make the corresponding maximization (sup) problems non recursive. Our approach consists of studying <b>a</b> <b>recursive</b> Lagrangian. Under standard general conditions, there is <b>a</b> <b>recursive</b> saddle-point (infsup) functional equation (analogous to a Bellman equation) {{that characterizes the}} recursive solution to the planner's problem and forward-looking constraints. Our approach {{has been applied to}} a large class of dynamic contractual problems, such as contracts with limited enforcement, optimal policy design with implementability constraints, and dynamic political economy models...|$|R
40|$|Two linear orderings are equimorphic if {{each can}} be {{embedded}} into the other. We prove that every hyperarithmetic linear ordering is equimorphic to <b>a</b> <b>recursive</b> one. On {{the way to}} our main result we prove that a linear ordering has Hausdorff rank less than ω CK 1 {{if and only if}} it is equimorphic to <b>a</b> <b>recursive</b> one. <b>As</b> a corollary of our proof we prove that given <b>a</b> <b>recursive</b> ordinal α, the partial ordering of equimorphism types of linear orderings of Hausdorff rank at most α ordered by embeddablity, is recursively presentable...|$|R
40|$|We present <b>a</b> <b>recursive</b> minimal {{polynomial}} theorem for finite sequences over a commutative integral domain D. This theorem {{is relative}} to any element of D. The ingredients are: the arithmetic of Laurent polynomials over D, <b>a</b> <b>recursive</b> 'index function' and simple mathematical induction. Taking reciprocals gives a 'Berlekamp-Massey theorem' i. e. <b>a</b> <b>recursive</b> {{construction of the}} polynomials arising in the Berlekamp-Massey algorithm, relative to any element of D. The recursive theorem readily yields the iterative minimal polynomial algorithm due to the author and a transparent derivation of the iterative Berlekamp-Massey algorithm. We give an upper bound for {{the sum of the}} linear complexities of s which is tight if s has a perfect linear complexity profile. This implies that over a field, both iterative algorithms require at most 2 n^ 2 / 4 multiplications. Comment: Major revision of earlier versions: Introduction expanded, main theorem is now <b>a</b> <b>recursive</b> construction using <b>a</b> recursively defined index function and is relative to any element of D. Includes some simpler proofs, <b>a</b> <b>recursive</b> Berlekamp-Massey 'theorem' and additional reference...|$|R
25|$|There exists <b>a</b> <b>recursive</b> isoperimetric {{function}} f(n) for (∗).|$|R
50|$|Below is <b>a</b> <b>recursive</b> {{presentation}} of VAG(p, (a, b)).|$|R
30|$|<b>A</b> <b>recursive</b> {{search is}} started from the pixel indicated.|$|R
50|$|There exists <b>a</b> <b>recursive</b> isoperimetric {{function}} f(n) for (∗).|$|R
5000|$|McCarthy 91 {{function}}, <b>a</b> <b>recursive</b> {{function in}} discrete mathematics ...|$|R
40|$|<b>A</b> <b>recursive</b> graph is <b>a</b> graph whose vertex and edges {{sets are}} <b>recursive.</b> <b>A</b> highly <b>recursive</b> graph is <b>a</b> <b>recursive</b> graph that {{also has the}} {{following}} property: one can recursively determine the neighbors of a vertex. Both of these have been studied in the literature. We consider an intermediary notion: Let A be a set. An Arecursive graph is <b>a</b> <b>recursive</b> graph that also has the following property: one can recursively-in-A determine the neighbors of a vertex. We show that, if A is r. e. and not recursive, then there exists A-recursive graphs that are 2 -colorable but not recursively k-colorable for any k. This is false for highly-recursive graphs but true for recursive graphs. Hence A-recursive graphs are closer in spirit to recursive graphs then to highly recursive graphs...|$|R
5000|$|Kalman filter, <b>a</b> <b>recursive</b> Bayesian filter for multivariate normal {{distributions}} ...|$|R
5000|$|This {{leads to}} <b>a</b> <b>recursive</b> {{relationship}} {{for the expansion}} coefficients: ...|$|R
5000|$|In SQL:1999 <b>a</b> <b>recursive</b> (CTE) query {{may appear}} {{anywhere}} a query is allowed. It's possible, for example, {{to name the}} result using [...] Using a CTE inside an , one can populate a table with data generated from <b>a</b> <b>recursive</b> query; random data generation is possible using this technique without using any procedural statements.|$|R
50|$|If the {{elements}} of M were to be coded onto the (standard) natural numbers {{in such a way}} that the addition and multiplication operations of the model were recursive functions on the codes, then every subset of the model defined by a first-order formula with finitely many parameters and bounded quantifiers is <b>a</b> <b>recursive</b> set of natural numbers. Moreover the injection mapping that takes a standard natural number to the code for that element in the model is also <b>a</b> <b>recursive</b> function -- to inject the number k simply take the code for the model's zero element and perform the model's successor operation on it k times. Therefore any <b>recursive</b> coding of <b>a</b> nonstandard model onto the natural numbers, along with <b>a</b> <b>recursive</b> definition (acting on codes) for the model's addition and multiplication operations will give <b>a</b> <b>recursive</b> separator, which cannot exist.|$|R
40|$|We obtain <b>a</b> <b>recursive</b> {{formulation}} for <b>a</b> general {{class of}} contracting problems involving incentive constraints. Under these constraints, the corresponding maximization (sup) problems fails to have <b>a</b> <b>recursive</b> solution. Our approach consists of studying the Lagrangian. We show that, under standard assumptions, {{the solution to}} the Lagrangian is characterized by <b>a</b> <b>recursive</b> saddle point (infsup) functional equation, analogous to Bellman's equation. Our approach applies to a large class of contractual problems. As examples, we study the optimal policy in a model with intertemporal participation constraints (which arise in models of default) and intertemporal competitive constraints (which arise in Ramsey equilibria) ...|$|R
40|$|Abstract. In general, the set {{of stable}} models of <b>a</b> <b>recursive</b> logic program can be quite complex. For example, it follows from results of Marek, Nerode, and Remme [17] that there exists finite {{predicate}} logic programs and recursive propositional logic programs which have stable models but no hyperarithmetic stable models. In this paper, we shall define several conditions which ensure that <b>a</b> <b>recursive</b> propositional logic program P has a stable model which is of low complexity, that is, <b>a</b> <b>recursive</b> stable model, <b>a</b> polynomial time stable model, or a stable model which lies in {{a low level of}} the polynomial time hierarchy...|$|R
25|$|Similarly we {{can apply}} other {{differencing}} formulas in <b>a</b> <b>recursive</b> manner.|$|R
5000|$|<b>A</b> <b>recursive</b> {{definition}} of well-founded hereditarily finite sets goes as follows: ...|$|R
5000|$|<b>A</b> <b>recursive</b> {{implementation}} of factorial in XLR {{looks like the}} following: ...|$|R
5000|$|So, rework the next-point-equation into <b>a</b> <b>recursive</b> one by substituting : ...|$|R
5000|$|... {{parboiled}} (Java) - <b>a</b> <b>recursive</b> descent PEG parsing {{library for}} Java ...|$|R
40|$|Strategic {{behaviors}} of players depend crucially on the coalition structures of <b>a</b> game. <b>A</b> <b>recursive</b> sequence identifying {{the number of}} embedded coalitions in a n-player game is derived. The paper also derives <b>a</b> <b>recursive</b> sequence identifying the number of embedded coalitions in a n-player game where {{the position of the}} individual player in <b>a</b> partition counts. <b>Recursive</b> sequence, embedded coalitions, cooperative games, 22 E 46, 53 C 35, 57 S 20...|$|R
