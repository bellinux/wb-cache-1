113|6|Public
25|$|The {{benefit of}} <b>alpha–beta</b> <b>pruning</b> {{lies in the}} fact that {{branches}} of the search tree can be eliminated. This way, the search time can be limited to the 'more promising' subtree, and a deeper search can be performed in the same time. Like its predecessor, it belongs to the branch and bound class of algorithms. The optimization reduces the effective depth to slightly more than half that of simple minimax if the nodes are evaluated in an optimal or near optimal order (best choice for side on move ordered first at each node).|$|E
25|$|<b>Alpha–beta</b> <b>pruning</b> is {{a search}} {{algorithm}} {{that seeks to}} decrease the number of nodes that are evaluated by the minimax algorithm in its search tree. It is an adversarial search algorithm used commonly for machine playing of two-player games (Tic-tac-toe, Chess, Go, etc.). It stops completely evaluating a move when at least one possibility {{has been found that}} proves the move to be worse than a previously examined move. Such moves need not be evaluated further. When applied to a standard minimax tree, it returns the same move as minimax would, but prunes away branches that cannot possibly influence the final decision.|$|E
2500|$|The pseudo-code for minimax with <b>alpha-beta</b> <b>pruning</b> is as follows: ...|$|E
40|$|This paper {{investigates the}} {{application}} of neural network techniques {{to the creation of}} a program that can play the game of Go with some degree of success. The combination of soft AI, such as neural networks, and hard AI methods, such as <b>alpha-beta</b> <b>pruned</b> minimax game tree searching, is attempted to assess the usefulness of blending these two different types of artificial intelligence and to investigate how the methods can be combined successfully...|$|R
40|$|Program transformations often {{involve the}} {{generalization}} of a function to take additional arguments. It is shown {{that in many}} cases such an additional variable arises as a representation of the continuation or global context in which the function is evaluated. By considering continuations, local transformation strategies can take advantage of global knowledge. The general results are followed by two examples: the <b>alpha-beta</b> tree <b>pruning</b> algorithm and an algorithm for the conversion of a propositional formula to conjunctive normal for...|$|R
40|$|We {{investigate}} some {{improvements and}} {{recent developments in}} the game-tree search techniques, which have influenced development of modern computer chess programs. We shall present an overview of various search heuristics to the basic <b>Alpha-Beta</b> (AB) <b>pruning</b> algorithm {{in order to achieve}} good move ordering (Iterative Deepening, Killer Heuristic, History Heuristic, Transposition Tables and Aspiration Windows), as well the improvements to the search algorithm itself (Scout, NegaScout, SSS*, MTD(f)). Finally, we take a brief glimpse into other directions of research (Conspiracy Numbers, Minmax approximations) ...|$|R
2500|$|Implementations of <b>alpha-beta</b> <b>pruning</b> {{can often}} be {{delineated}} by whether they are [...] "fail-soft," [...] or [...] "fail-hard." [...] The pseudo-code illustrates the fail-soft variation. With fail-soft alpha-beta, the alphabeta function may return values (v) that exceed (v < α or v > β) the α and β bounds set by its function call arguments. In comparison, fail-hard alpha-beta limits its function return value into the inclusive range of α and β.|$|E
2500|$|CGT has a {{different}} emphasis than [...] "traditional" [...] or [...] "economic" [...] game theory, which was initially developed to study games with simple combinatorial structure, but with elements of chance (although it also considers sequential moves, see extensive-form game). Essentially, CGT has contributed new methods for analyzing game trees, for example using surreal numbers, which are a subclass of all two-player perfect-information games. The type of games studied by CGT is also of interest in artificial intelligence, particularly for automated planning and scheduling. In CGT there has been less emphasis on refining practical search algorithms (such as the <b>alpha–beta</b> <b>pruning</b> heuristic included in most artificial intelligence textbooks), but more emphasis on descriptive theoretical results (such as measures of game complexity or proofs of optimal solution existence without necessarily specifying an algorithm, such as the strategy-stealing argument).|$|E
50|$|Principal {{variation}} search (sometimes {{equated with}} the practically identical NegaScout) is a negamax algorithm {{that can be}} faster than <b>alpha-beta</b> <b>pruning.</b> Like <b>alpha-beta</b> <b>pruning,</b> NegaScout is a directional search algorithm for computing the minimax value of a node in a tree. It dominates <b>alpha-beta</b> <b>pruning</b> {{in the sense that}} it will never examine a node that can be pruned by alpha-beta; however, it relies on accurate node ordering to capitalize on this advantage.|$|E
50|$|The {{performance}} of the naïve minimax algorithm may be improved dramatically, without affecting the result, {{by the use of}} <b>alpha-beta</b> pruning.Other heuristic <b>pruning</b> methods can also be used, but not all of them are guaranteed to give the same result as the un-pruned search.|$|R
40|$|We report our {{progress}} on computer chess last described at the Second Conference on Hypercubes. Our program follows {{the strategy of}} currently successful sequential chess programs: searching of an <b>alpha-beta</b> <b>pruned</b> game tree, iterative deepening, transposition and history tables, specialized endgame evaluators, and so on. The search tree is decomposed onto the hypercube (an NCUBE) using a recursive version of the principal-variation-splitting algorithm. Roughly speaking, subtrees are searched by teams of processors in a self-scheduled manner. A crucial feature {{of the program is}} the global hashtable. Hashtables are important in the sequential case, but are even more central for a parallel chess algorithm. The table not only stores knowledge but also makes the decision at each node of the chess tree whether to stay sequential or to split up the work in parallel. In the language of Knuth and Moore, the transposition table decides whether each node of the chess tree is a type 2 or a type 3 node and acts accordingly. For this data structure the hypercube is used as a shared-memory machine. Multiple writes to the same location are resolved using a priority system which decides which entry is of more value to the program. The hashtable is implemented as “smart” shared memory. Search times for related subtrees vary widely (up to a factor of 100) so dynamic reconfiguration of processors is necessary to concentrate on such “hot spots” in the tree. A first version of the program with dynamic load balancing has recently been completed and out-performs the non-load-balancing program by a factor of three. The current speedup of the program is 101 out of a possible 256 processors. The program has played in several tournaments, facing both computers and people. Most recently it scored 2 - 2 in the ACM North American Computer Chess Championship...|$|R
40|$|Previous work in pruning {{algorithms}} for max n multi-player game trees {{has produced}} shallow <b>pruning</b> and <b>alpha-beta</b> branch-and-bound <b>pruning.</b> The {{effectiveness of these}} algorithms is dependant as much on the range of terminal values found in the game tree as on the ordering of nodes. We introduce last-branch and speculative pruning techniques which can prune any constantsum multi-player game tree. Their effectiveness depends only on node-ordering within the game tree. As b grows large, these algorithms will, in the best case, reduce the branching factor of a nplayer game from b to b (n- 1) /n. In Chinese Checkers these methods reduce average expansions at depth 6 from 1. 2 million to 100 k nodes, and in Hearts and Spades they increase the average search depth by 1 - 3 ply. ...|$|R
5000|$|The {{pseudocode}} for depth-limited negamax search with <b>alpha-beta</b> <b>pruning</b> follows: ...|$|E
50|$|It {{should not}} be {{confused}} with negascout, an algorithm to compute the minimax or negamax value quickly by clever use of <b>alpha-beta</b> <b>pruning</b> discovered in the 1980s. Note that <b>alpha-beta</b> <b>pruning</b> is itself a way to compute the minimax or negamax value of a position quickly by avoiding the search of certain uninteresting positions.|$|E
5000|$|The pseudo-code for the fail-soft {{variation}} of <b>alpha-beta</b> <b>pruning</b> is as follows: ...|$|E
50|$|Brudno's work on <b>alpha-beta</b> <b>pruning</b> was {{published}} in 1963 in Russian and English.|$|E
50|$|In {{computer}} chess programs, the null-move heuristic is a heuristic technique {{used to enhance}} {{the speed of the}} <b>alpha-beta</b> <b>pruning</b> algorithm.|$|E
50|$|The main {{advantage}} of IDDFS in game tree searching {{is that the}} earlier searches tend to improve the commonly used heuristics, such as the killer heuristic and <b>alpha-beta</b> <b>pruning,</b> so that a more accurate estimate of the score of various nodes at the final depth search can occur, and the search completes more quickly since it is done in a better order. For example, <b>alpha-beta</b> <b>pruning</b> is most efficient if it searches the best moves first.|$|E
50|$|Alexander Reinefeld invented NegaScout {{several decades}} after the {{invention}} of <b>alpha-beta</b> <b>pruning.</b> He gives a proof of correctness of NegaScout in his book.|$|E
50|$|Furthermore, the {{usefulness}} of <b>alpha-beta</b> <b>pruning</b> is heavily dependent on {{the order in which}} moves are considered. Good moves must be considered before bad ones in order for the bad ones to be neglected. In particular, checking and capturing moves are key for pruning, because they are often much better than other moves. In Arimaa software the speedup provided by <b>alpha-beta</b> <b>pruning</b> is less, because captures are rarer. In rated games played on arimaa.com, only 3% of steps result in capture, compared to about 19% of chess moves that result in capture.|$|E
5000|$|Bridge is {{incrementally}} scoring; each played trick contributes irreversibly to {{the final}} [...] "score" [...] in terms of tricks won or lost. This {{is in contrast to}} games where the final outcome is more or less open until the game ends. In bridge, the already determined tricks provide natural lower and upper bounds for <b>alpha-beta</b> <b>pruning,</b> and the interval shrinks naturally as the search goes deeper. Other games typically need an artificial evaluation function to enable <b>alpha-beta</b> <b>pruning</b> at limited depth, or must search to a leaf node before pruning is possible.|$|E
50|$|In 1963 Brudno {{published}} {{his work on}} <b>alpha-beta</b> <b>pruning.</b> The key intuition was that a player could avoid evaluating certain moves that were clearly inferior to one already considered.|$|E
50|$|Using 10.000 {{games with}} <b>Alpha-beta</b> <b>pruning</b> players the game-tree {{complexity}} and state-space complexity can be computed. It {{turns out that}} Fanorona has a game-tree complexity of 1046 and a state-space complexity of 1021.|$|E
50|$|These changes {{reduced the}} role of the PDP-11 {{software}}. Now, the software controlled these three devices and ran the <b>alpha-beta</b> <b>pruning</b> algorithm. The second generation of Belle could search 5,000 positions per second.|$|E
50|$|Andrew Palay applied B* to chess. Endpoint {{evaluations}} {{were assigned}} by performing null-move searches. There is no report {{of how well}} this system performed compared to <b>alpha-beta</b> <b>pruning</b> search engines running on the same hardware.|$|E
50|$|Alexander L'vovich Brudno (Александр Львович Брудно) (January 10, 1918 - December 1, 2009) was a Russian {{computer}} scientist, {{best known}} for fully describing the <b>alpha-beta</b> <b>pruning</b> algorithm. From 1991 until his death he lived in Israel.|$|E
50|$|Strong play in Scrabble endgames is {{much harder}} than it looks. In theory, endgames are a game of perfect information, so the <b>Alpha-beta</b> <b>pruning</b> {{algorithm}} should work. But in practice Alpha Beta works badly on Scrabble.|$|E
50|$|Algorithm {{optimizations}} for minimax {{are also}} equally applicable for Negamax. <b>Alpha-beta</b> <b>pruning</b> can decrease {{the number of}} nodes the negamax algorithm evaluates in a search tree {{in a manner similar}} with its use with the minimax algorithm.|$|E
50|$|Multi-Prob Cut is a {{heuristic}} used in <b>Alpha-beta</b> <b>pruning</b> search. It is {{of particular}} interest in games such as Othello and Draughts in which the null-move heuristic would be problematic as it is quite often an advantage to pass.|$|E
50|$|Go is {{considered}} {{much more difficult}} for computers to win than other games such as chess, because its much larger branching factor makes it prohibitively difficult to use traditional AI methods such as <b>alpha-beta</b> <b>pruning,</b> tree traversal and heuristic search.|$|E
5000|$|... #Caption: An {{animated}} pedagogical example {{showing the}} negamax algorithm with <b>alpha-beta</b> <b>pruning.</b> The person performing the game tree search {{is considered to}} be the one that has to move first from {{the current state of the}} game (player in this case) ...|$|E
50|$|More {{sophisticated}} search {{techniques such}} as <b>alpha-beta</b> <b>pruning</b> are able to eliminate entire subtrees of the search tree from consideration. When these techniques are used, lookahead is not a precisely defined quantity, but instead either the maximum depth searched or some type of average.|$|E
5000|$|... #Caption: An {{animated}} pedagogical example {{showing the}} plain negamax algorithm (that is, without <b>alpha-beta</b> <b>pruning).</b> The person performing the game tree search {{is considered to}} be the one that has to move first from {{the current state of the}} game (player in this case) ...|$|E
50|$|Although it {{has been}} proved that the {{evaluation}} of moves in Monte Carlo tree search converges to minimax, the basic version of Monte Carlo tree search converges very slowly. However Monte Carlo tree search does offer significant advantages over <b>alpha-beta</b> <b>pruning</b> and similar algorithms that minimize the search space.|$|E
50|$|In {{its final}} incarnation, Belle used a LSI-11 general purpose {{computer}} to coordinate its chess hardware. There were three custom boards for move generation, four custom boards for position evaluation, and a microcode implementation of <b>alpha-beta</b> <b>pruning.</b> The computer also had one megabyte of commercial memory for storing transposition tables.|$|E
50|$|In {{competitive}} two-player games, {{the killer}} heuristic {{is a technique}} for improving the efficiency of <b>alpha-beta</b> <b>pruning,</b> which in turn improves {{the efficiency of the}} minimax algorithm. This algorithm has an exponential search time to find the optimal next move, so general methods for speeding it up are very useful.|$|E
