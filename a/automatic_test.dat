1069|1006|Public
5|$|In <b>automatic</b> <b>test</b> pattern generation, finding cliques {{can help}} to bound {{the size of a}} test set. In bioinformatics, clique-finding {{algorithms}} have been used to infer evolutionary trees, predict protein structures, and find closely interacting clusters of proteins. Listing the cliques in a dependency graph is an important step in the analysis of certain random processes. In mathematics, Keller's conjecture on face-to-face tiling of hypercubes was disproved by , who used a clique-finding algorithm on an associated graph to find a counterexample.|$|E
5|$|The {{avionics}} software {{incorporates the}} concept of open architecture. Instead of the military-optimised Ada programming language, the software is written using the popular C++ programming language, enabling {{the use of the}} numerous civilian programmers available. The aircraft also includes a health and usage monitoring system, and <b>automatic</b> <b>test</b> equipment. The flight control system (FCS) comprises conventional controls with stability augmentation in the yaw and roll axis and a digital fly-by-wire (FBW) system in the pitch axis. The leading edge slats/flaps and trailing edge flaps are automatically adjusted during manoeuvring to increase turning performance. The FCS of serial production aircraft reportedly have a digital quadruplex (quad-redundant) FBW system in the pitch axis and a duplex (dual-redundant) FBW system in the roll and yaw axis.|$|E
5|$|As expected, the Australian team's leaders Ian Johnson and Keith Miller, {{retired from}} cricket after the tour. Harvey {{replaced}} Johnson as Victorian captain {{and was the}} logical choice as successor to the Test captaincy, as the most experienced {{member of the team}} (48 Tests). Queensland's captain, the veteran paceman Ray Lindwall, was no longer an <b>automatic</b> <b>Test</b> selection. However, both Harvey and Benaud had been criticised for their attitude towards Johnson in an official report to the board about the 1956 tour. Harvey was surprisingly overlooked for the captaincy, which went to Ian Craig, who had replaced Miller as New South Wales skipper. Craig was only 22 and had played six Tests; he had yet to establish himself in the team. After several disappointing results against England, the selectors chose a youthful team. Harvey was named vice-captain to Craig for both the 1956–57 non-Test tour of New Zealand and the 1957–58 Test tour to South Africa.|$|E
40|$|Abstract: This paper {{introduces}} foreign airborne guiding ammunition <b>automatic</b> <b>testing</b> equipment development {{history and}} current situation, analyzed our Army airborne guiding ammunition <b>automatic</b> <b>testing</b> equipment development and existing problems, putting forward my Army Airborne guiding ammunition testing equipment development proposal. Foreign airborne guiding ammunition <b>automatic</b> <b>testing</b> equipment development The {{first generation of}} professional <b>automatic</b> <b>testing</b> equipment. Special type weapon equipment system is the early <b>automatic</b> <b>testing</b> equipment, {{some parts of the}} system still is used. This kind system is from the artificial <b>testing</b> to <b>automatic</b> <b>testing</b> an important step., it is superior to manual testing in the test function, performance, efficiency. The main disadvantages is single function, low standardization degree. The Second generation instrument block type <b>automatic</b> <b>testing</b> equipment. The second generation <b>automatic</b> <b>testing</b> equipment build up system based on standard interface bus, This system is convenient to set up, building characteristics make change, increase or decrease in testing contents become very flexible, equipment resources reuse. The main disadvantage is low bus transfer rate, it is difficult to form the basis for the bus speed, large data throughput automati...|$|R
40|$|Abstract. <b>Automatic</b> <b>testing</b> is very {{important}} for agile software development. There are some testing tasks can be finished by automatic tools, but most of them can not meet the actual needs of enterprises which is the direct reason of building an agile <b>automatic</b> <b>testing</b> framework named as Agilework. The structure, operation principle and building steps of the Agilework are descripted in details. The Agilework is a scalable framework which has high efficiency and flexibility. It can meet the requirements of the <b>automatic</b> <b>testing</b> in agile software development...|$|R
40|$|Software is an {{important}} component of Large Information Weapon (LIW). We propose a data-driven distributed <b>automatic</b> <b>testing</b> framework, which is based on the analysis of LIW testing requirements, and it supports the whole process of distributed software test. The main components of the framework consist of distributed test designing environment, execution and control environment and test results show environment. We present a set of GUI scripting language specification for <b>automatic</b> <b>testing,</b> the script language with object-oriented features. Unlike the previous GUI <b>automatic</b> <b>testing</b> scripting language, this specification records the information of the node where the test cases will be running. As an application of the framework, we develop an <b>automatic</b> <b>testing</b> system (DMATS). DMATS has been put into practices in XXX-business electronic system, and it is proved the feasibility of the framework...|$|R
50|$|<b>Automatic</b> <b>Test</b> Markup Language (ATML) is a {{collection}} of XML schemas that allows <b>automatic</b> <b>test</b> systems (ATS) to exchange test information in a common format adhering to the XML standard.|$|E
50|$|<b>Automatic</b> <b>test</b> equipment.|$|E
5000|$|<b>Automatic</b> <b>test</b> {{execution}} and evaluation (assessment) in a Test campaign ...|$|E
40|$|The {{approach}} {{suggested by}} a team engaged in augmentation of simulated circuit validation by <b>automatic</b> <b>testing</b> is explained with reference to a functional model and three automatic demonstration software packages: a tautology demonstrator, a Boyer & Moore theorem prover, and an OBJ 3 rewriting-rule-based system. The performances and fields of application of these tools for <b>automatic</b> <b>testing</b> of digital systems are assessed...|$|R
40|$|Conformance {{testing of}} {{graphics}} systems {{is a very}} complex and exhausting task. Years of practice with the GKS testing tools have shown a need for the <b>automatic</b> <b>testing</b> of visual output. Indeed, with regard to graphics systems which are more precisely specified than GKS like the Computer Graphics Interface (CGI), conformance testing is not manageable to all unless a major part can be automated. This paper discusses different strategies for the <b>automatic</b> <b>testing</b> of pictorial effect. It concentrates on the definition of lines and describes a strategy to answer the question put in the title by the <b>testing</b> system. Finally, <b>automatic</b> <b>testing</b> of simple graphical operations such as segment highlighting and visibility is discussed...|$|R
40|$|With the {{development}} of science and technology, the traditional artificial detection methods cannot {{meet the requirements of}} modern equipment testing and calibration. Combined with the actual demand, a kind of circuit boards calibration system are put forward. It can to realize <b>automatic</b> <b>testing</b> and calibration of the circuit boards. Many functions of the calibration system such as <b>automatic</b> <b>testing,</b> self-test and monitoring are summarized. The hardware is introduced which including the industrial computer system, calibration adapter and so on. Then, development platform, the thought of program design and the structure of the software are introduced in detail. The function of automatic calibration to specific circuit boards are realized. Because the system has good commonality and easy to extend to upgrade, {{the development}} ideas and experiences can be applied to similar circuit boards <b>automatic</b> <b>testing</b> system...|$|R
5000|$|Teradyne's {{principal}} {{competitors in}} the <b>automatic</b> <b>test</b> equipment business are: ...|$|E
5000|$|... 1967: Europe's first <b>automatic</b> <b>test</b> {{system for}} {{integrated}} circuits (IC).|$|E
5000|$|... 542d <b>Automatic</b> <b>Test</b> Sustainment Gp, 4 March 2005 - 28 April 2006 ...|$|E
40|$|The {{aim of this}} Master Thesis Frameworks for <b>automatic</b> <b>testing</b> is {{to compare}} {{frameworks}} of five most popular programming languages of today. The comparison {{is divided into two}} parts. The first one deals with comparing by using the test patterns and the second part deals with measuring of exact values while working with tools. The outcome of this thesis are criteria {{that can be used for}} comparison of other frameworks for <b>automatic</b> <b>testing</b> other than used in this work...|$|R
40|$|The {{dissertation}} {{covers the}} process of <b>automatic</b> software <b>testing.</b> It describes fundamental principles of tests creation and presents common tools for concurrent integration. The main objective of the dissertation is improvement of the <b>automatic</b> <b>testing</b> process in the Department Corporate Technology Development Center of the Company Siemens Ltd., which was realized through the plug-in module for the TeamCity tool that makes reporting of test results more transparent. At {{the end of the}} dissertation, there are designed extensions of the plug-in module that could have a further benefit for <b>automatic</b> <b>testing</b> process by means of the TeamCity tool. The dissertation also includes the manual for easy installation of the implemented solution...|$|R
50|$|FreeNATS (the Free Network <b>Automatic</b> <b>Testing</b> System) is an {{open source}} network {{monitoring}} software application developed by David Cutting {{under the banner of}} PurplePixie Systems.|$|R
5000|$|<b>Automatic</b> <b>test</b> generation: A {{use case}} driven {{approach}} IEEE Trans on Software Engineering, 2006 ...|$|E
50|$|Sometimes <b>automatic</b> <b>test</b> pattern {{generation}} {{is used to}} help design the series of tests.|$|E
5000|$|Data {{that will}} be {{utilized}} for the design, development, and utilization of <b>automatic</b> <b>test</b> equipment(ATE) ...|$|E
5000|$|... 2011-12 Atlanta Public School System {{adopted the}} use of GRS as a pre-qualitifiying process for <b>automatic</b> <b>testing</b> of {{students}} for the Gifted & Talented programs.|$|R
40|$|It is not {{possible}} to do <b>automatic</b> <b>testing</b> with step motors in Hardware-in-the-Loop (HIL) simulators because motors may be overheated if working for a long time. Furthermore, possibilities for fault injection are limited and physical interaction is needed to inject faults like a breakdown that can actually be mimicked. We present an emulator in an FPGA that allows to emulate a step motor for <b>automatic</b> <b>testing</b> as well as fault injection for a variety of faults, with the option of emulating more than one step motor in the same FPGA. 1...|$|R
40|$|This thesis {{describes}} {{a pilot study}} {{with the goal of}} enabling <b>automatic</b> <b>testing</b> in a large legacy system. The thesis contains a literature study comparing different types of testing, a description of the actual work of implementing the tests and a discussion of the experiences of running the <b>tests.</b> The <b>automatic</b> <b>tests</b> proved not to give the expected benefits, the complexity of the system and fragility of the chosen test method made the testing impractical. The maintenance of the tests exceeded the time saved by running the tests automatically instead of manually...|$|R
50|$|Indra is {{organized}} around three business areas: information technologies, simulation & <b>automatic</b> <b>test</b> equipment, and defense electronic equipment.|$|E
5000|$|<b>Automatic</b> <b>test</b> pattern generation, ATPG - generates pattern-data to {{systematically}} exercise as many logic-gates, and other components, as possible.|$|E
5000|$|... #Caption: A Functional Test Fixture is {{a complex}} device to {{interface}} the DUT to the <b>automatic</b> <b>test</b> equipment (ATE) ...|$|E
40|$|Mobile {{application}} is an application {{that runs on}} mobile devices. Mobile testing is more challenging compared with desktop or web based testing as it has smaller footprint in virtual machine as against desktop application. Manually testing mobile applications is tedious and time consuming. Therefore, {{the aim of this}} project is to implement an <b>automatic</b> <b>testing</b> approach in testing mobile applications. This project aims to achieve several objectives which are to search for existing mobile application testing tools or technique or frameworks, create test cases based on given specifications, implement and execute test cases using an <b>automatic</b> <b>testing</b> approach and also report the outcomes of the <b>test.</b> An <b>automatic</b> <b>testing</b> framework, JUnit is selected to be used in this project. There are three phases in order to achieve these objectives. Phases for this project are knowledge acquisition, plan and design test cases, and finally execute test cases. Test cases were design using several techniques such as exploratory testing and scenario testing. As it is impossible to conduct 100 % <b>automatic</b> <b>testing,</b> testing was executed both manually and automatically for both functional testing and white-box <b>testing.</b> The selected <b>automatic</b> approach which is JUnit was shown to be effective and basis for mobile testing and future tester can improve the result by integrate with other testing tools such as Selenium or Robotium Web Driver. This project reports the experiences of using automated testing approach for undergraduate final year project and {{can be used as a}} reference for other students and interested parties...|$|R
40|$|The aim {{with this}} {{preliminary}} {{study was to}} find a new work method for Argentum Group and {{to find a way to}} do more testing in the daily work. The primary aim was to examine if this could be thru <b>automatic</b> <b>testing</b> and if it would be profitable. Through interviews, a questionnaire and observations on Argentum I created my picture of what Argentum needed and then I examined agile work methods like Scrum, RUP, Kanban, Lean Software Development, extreme Programming (XP) etc. and found that Kanban, Scrum and XP would fit on Argentum. Argentum also had wished to get recommendations about how their testing could be improved of which I prepared a proposal on project priorities, and what requirements these priorities put on developers to be able to say that this code is done. When it comes to testing Argentum should begin to use test cases in all their projects. Argentum does not have any dedicated testers today but they use a test group. Therefore it’s one of my suggestions, that I consider as a must, that a dedicated tester is available in all projects. My assessment, when this is written, is that Argentum has chosen to not introduce all parts that are required in order to be able to start <b>automatic</b> <b>testing</b> but that they, with the condition that the implementation of the <b>automatic</b> <b>testing</b> and the upkeep is well handled, would not only save time but also increase quality. To wait with an automation of the tests is a deliberate choice from Argentum, but the goal is to expand their business and that will required <b>automatic</b> <b>testing.</b> Therefore, my recommendation is that <b>automatic</b> <b>testing</b> can become a reality one (1) year after the introduction of the new work method and the new procedures with testing. Validerat; 20110325 (anonymous...|$|R
50|$|Chroma ATE Inc., a Taiwan company, is an {{own brand}} {{supplier}} in electronic test and measurement equipment and systems, providing <b>testing</b> equipment, <b>automatic</b> <b>testing</b> equipment (ATE) and manufacturing execution systems (MES).|$|R
5000|$|... 1968 - Pickering Electronicshttp://www.applegate.co.uk/elec/company/co_6541.htm company {{formed to}} design and {{manufacture}} high reliability reed relays for the new <b>Automatic</b> <b>Test</b> Equipment market.|$|E
50|$|The United States Food and Drug Administration classifies {{these systems}} as medical devices, under the general {{instrumentation}} category of <b>automatic</b> <b>test</b> equipment.|$|E
50|$|SPEA is an Italian {{company that}} designs and {{manufactures}} <b>Automatic</b> <b>Test</b> Equipment (ATE) for testing MEMS, Sensors, microchips and Printed circuit board.|$|E
50|$|A {{lean and}} highly {{productive}} plant {{by virtue of}} its structure has the modern facilities for assembly & <b>automatic</b> <b>testing</b> with SMT Line, environmental test labs, PCB manufacturing and sophisticated Powder Coating Line.|$|R
40|$|The aim of {{this thesis}} was the {{establishment}} of an environment for <b>automatic</b> software <b>testing.</b> The process was split into several steps in where the following environment components had to be chosen: a tool for managing the programs and other applications, a concurrent version system, an application server to run web services, an approach for translation or assembly of the Java code and <b>automatic</b> <b>tests</b> which ensure correct operation. With every step a few potential software solutions had to be checked and compared using a set of criteria based on their strengths and weaknesses. Jenkins was selected for the management of programs and applications for its simplicity. For the concurrent version system GIT was the selected solution due to its advanced functions. Among application servers Wildfly was above the rest because of its abilities and accessibility. For the translation and assembly of the Java code the best solution was Gradle. Selenium, selected for its reliability, was used for <b>automatic</b> <b>testing,</b> and SOAP UI for its accurate results. This environment was described using a practical case for basic and advanced use as well. The environment was tested in practice where it performed admirably. However it could be still improved using a commercial and more reliable application server along with better <b>automatic</b> <b>testing</b> software. ...|$|R
5000|$|Quality Assurance: Building {{a modern}} {{architecture}} and decoupling the application {{from the data}} layer. The aim is to allow to extend the <b>automatic</b> <b>Testing</b> possibilities which are a prerequisite for shorter release cycles with extending functionality.|$|R
