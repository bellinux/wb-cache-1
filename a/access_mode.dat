359|507|Public
25|$|The primary {{features}} of HipChat are chat rooms, one-on-one messaging, searchable chat history, image sharing, 5 GB of file storage, and SMS messaging for one-on-one conversations. A premium version adds video calling, screen sharing, unlimited file storage, history retention controls, and a virtual machine version allows HipChat to run within corporate firewalls. A guest <b>access</b> <b>mode</b> allows users {{outside of the}} organization to join a group chat via a shareable URL. Inline GIF playback and custom emoticons are also available. The product is available as a mobile client, a web client and a downloadable native application.|$|E
2500|$|A system {{state is}} defined to be [...] "secure" [...] {{if the only}} {{permitted}} access modes of subjects to objects are in accordance with a security policy. To determine whether a specific <b>access</b> <b>mode</b> is allowed, the clearance of a subject is compared to the classification of the object (more precisely, to the combination of classification and set of compartments, making up the security level) {{to determine if the}} subject is authorized for the specific <b>access</b> <b>mode.</b> The clearance/classification scheme is expressed in terms of a lattice. The model defines two mandatory access control (MAC) rules and one discretionary access control (DAC) rule with three security properties: ...|$|E
50|$|In its online version, the Middle East Report is made {{available}} in a mixed <b>access</b> <b>mode,</b> with some open access articles and others requiring a paid subscription. The subscription covers both online and print editions.|$|E
3000|$|... [...]) as the {{expressions}} for macrocell throughput with closed and open <b>access</b> <b>modes,</b> respectively; then {{the expressions}} for total throughput with closed and open <b>access</b> <b>modes</b> are given by T [...]...|$|R
5000|$|... $ ls -ld shared_dir # show <b>access</b> <b>modes</b> before chmoddrwxr-xr-x 2 teamleader usguys 96 Apr 8 12:53 shared_dir$ chmod g+w shared_dir$ ls -ld shared_dir # show <b>access</b> <b>modes</b> after chmoddrwxrwxr-x 2 teamleader usguys 96 Apr 8 12:53 shared_dir ...|$|R
40|$|There {{is a broad}} {{consensus}} in the database research community that the traditional ACID properties are not suitable for certain application domains. Especially, long-lasting and information sharing transactions are not adequately supported. Several extended transaction models have been presented {{to deal with these}} shortcomings. Many of these models do this by relaxing the isolation property. Apotram, presented by Ole Jørgen Anfindsen, is one such model. It allows transactions to customize their degree of isolation. This is achieved by introducing two mechanisms, parameterized <b>access</b> <b>modes</b> and nested databases. Apotram requires transactions to be able to modify their degree of isolation dynamically. This is achieved by allowing transactions to modify their associated parameterized <b>access</b> <b>modes.</b> This thesis analyzes the consequences of this requirement and points out when these modifications introduce conflicts. First, parameter modification is analyzed in the context of parameterized <b>access</b> <b>modes</b> only, then the integration of <b>access</b> <b>modes</b> and nested databases is investigated. Furthermore, a set of strategies for resolving and avoiding conflicts are introduced and discussed...|$|R
5000|$|A system {{state is}} defined to be [...] "secure" [...] {{if the only}} {{permitted}} access modes of subjects to objects are in accordance with a security policy. To determine whether a specific <b>access</b> <b>mode</b> is allowed, the clearance of a subject is compared to the classification of the object (more precisely, to the combination of classification and set of compartments, making up the security level) {{to determine if the}} subject is authorized for the specific <b>access</b> <b>mode.</b> The clearance/classification scheme is expressed in terms of a lattice. The model defines two mandatory access control (MAC) rules and one discretionary access control (DAC) rule with three security properties: ...|$|E
50|$|AVSnap {{has many}} {{different}} modes of operation, including {{a system design}} mode, a presentation mode, a remote <b>access</b> <b>mode,</b> and a web server mode. The software {{is designed to provide}} a professional quality design environment for Audio Visual market.|$|E
5000|$|Drivers for Linux-based {{operating}} systems (Linux distributions such as Fedora, Ubuntu or Debian) are available {{only from the}} manufacturer. The Linux connection package does have a shared read and write <b>access</b> <b>mode.</b> However it must be used with a multi-client file system.|$|E
30|$|When some BSs {{are turned}} off, the {{remaining}} active BSs will expand coverage {{to maintain the}} overall coverage, while the influence of different sleep strategies for coverage are different. Moreover, femtocell <b>access</b> <b>modes</b> have impact on the choice of MUE, which directly influence coverage probability of MUE. Then, coverage probabilities of MUE and FUE with different sleep strategies and femtocell <b>access</b> <b>modes</b> are analyzed in this subsection.|$|R
2500|$|Add write {{permission}} (w) to the group's(g) <b>access</b> <b>modes</b> of a directory, allowing {{users in}} the same group to add files: ...|$|R
40|$|Abstract—We {{introduce}} a stochastic analytical framework {{to compare the}} performance of open and closed <b>access</b> <b>modes</b> in a two-tier femtocell network, with regard to uplink interference and outage at both the macrocell and femtocell levels. A stochastic geometric approach is employed {{as the basis for}} our analysis. We present numerical methods to characterize the distributions of uplink interference and the outage probabilities. We further derive sufficient conditions for open and closed <b>access</b> <b>modes</b> to outperform each other in terms of the outage probability at either the macrocell or femtocell level. This leads to closed-form expressions to upper and lower bound the difference in the tar-geted received power between the two <b>access</b> <b>modes.</b> Simulations are conducted to validate the accuracy of the analytical model and the correctness of the bounds. Index Terms—Femtocell, uplink interference, stochastic geom-etry, open access I...|$|R
50|$|The station {{includes}} park-and-ride facilities with 715 automobile {{parking spaces}} {{in two separate}} parking lots, 24 motorcycle spaces, 36 bike lockers, and bike rack spaces. <b>Access</b> <b>mode</b> shares (2002) were: 40% pedestrian, 38% automobile (park and ride), 9% automobile (kiss and ride), 8% bicycle, and 6% connecting transit.|$|E
50|$|The {{database}} {{owner and}} permitted users {{are allowed to}} create tables as they wish, within the database and may share access to these as they wish. Note that regardless of the database <b>access</b> <b>mode</b> (public/private), a table is private until {{the owner of the}} table grants other users some access to it.|$|E
50|$|A closed {{subscriber}} group (CSG) {{is a limited}} set of users with connectivity access to a femtocell. When a femtocell is configured in CSG mode, only those users included in the femtocell's access control list are allowed to use the femtocell resources.On the other hand, a femtocell can be also configured in Open <b>Access</b> <b>mode,</b> in which any user is allowed access to the femtocell.|$|E
40|$|To support non-trivial clients, such as data {{exploration}} and analysis environments, digital libraries {{must be able}} to describe the <b>access</b> <b>modes</b> that their contents support. We present a simple scheme that distinguishes four content accessibility classes: download (byte-stream retrieval), service (API), web interface (interactive), and offline. These <b>access</b> <b>modes</b> may recursively nest in alternative (semantically equivalent) or multipart (component) hierarchies. This scheme is simple enough to be easily supported by DL content providers, yet rich enough to allow programmatic clients to automatically identify appropriate access point(s) ...|$|R
5000|$|A system {{state is}} defined to be [...] "secure" [...] {{if the only}} {{permitted}} <b>access</b> <b>modes</b> of subjects to objects are in accordance with a security policy.|$|R
50|$|Like CP-V, CP-6 {{had five}} <b>access</b> <b>modes,</b> which {{operated}} concurrently: batch processing, remote batch, timesharing, transaction processing, and real-time processing. It included multiprogramming and operated on multiple CPUs.|$|R
50|$|The Pep/7's {{instruction}} set is simplistic, with only 32 possible opcodes. The instruction specifier {{consists of the}} opcode of 5 bits, a register selector (A or X) of 1 bit, and a memory <b>access</b> <b>mode</b> of 2 bits, with the opcode occupying the top 5 bits of a byte, the register selector in bit 2 and the address mode in bits 1 and 0.|$|E
50|$|Inodes store {{information}} about files and directories (folders), such as file ownership, <b>access</b> <b>mode</b> (read, write, execute permissions), and file type. On {{many types of}} file system implementations, {{the maximum number of}} inodes is fixed at file system creation, limiting the maximum number of files the file system can hold. A typical allocation heuristic for inodes in a file system is one percent of total size.|$|E
50|$|This method {{involves}} {{source code}} transformations that either modifies the data structure {{included in the}} source code or introduces new data structures or, possibly, modifies the <b>access</b> <b>mode</b> and the access paths. It is {{an effective way to}} cope with the requirement of lowering power consumption to uphold the increasing demands of applications. These are the following techniques that can be considered to perform such transformation.|$|E
30|$|A {{concrete}} {{analysis on}} the coverage extension problem is proposed. In particular, expressions for the coverage probabilities with different sleeping policies and <b>access</b> <b>modes</b> are derived in closed forms.|$|R
40|$|In this paper, we empirically studied passengers’ modal-choice {{behaviors}} to access an international hub airport from local areas. Through {{the data collected}} by using stated preference method and constructing binomial logit model, we found that passengers’ modal choices were affected by the level of service variables of <b>access</b> <b>modes,</b> such as travel time, travel cost, waiting time at hub airports and scheduled delay cost. Furthermore, an increase in frequency would reduce waiting time at hub airports. However, when passengers chose available <b>access</b> <b>modes</b> to hub airports in advance provided that the departure time was fixed, they especially considered the timing of departure from home and the timing of arrival at the airport (that is, convenience of schedule), as well as frequency of <b>access</b> <b>modes.</b> We also calculated the value of scheduled delay. Based {{on the results of}} the value of scheduled delay, we proposed the pricing methods to correspond to passengers’ various scheduling needs in the last section...|$|R
5000|$|The [...] {{field is}} a bit field. It {{combines}} the file <b>access</b> <b>modes</b> and also indicates any special file type. There are many macros {{to work with the}} different mode flags and file types.|$|R
5000|$|GCC's RTL {{is usually}} {{written in a}} form {{which looks like a}} Lisp S-expression:(set (reg:SI 140) (plus:SI (reg:SI 138) (reg:SI 139)))This [...] "side-effect expression" [...] says [...] "sum the {{contents}} of register 138 with the contents of register 139 and store the result in register 140". The SI specifies the <b>access</b> <b>mode</b> for each registers. In the example it is [...] "SImode", i.e. [...] "access the register as 32-bit integer".|$|E
50|$|In a capacities-based system, handles can {{be passed}} between processes, with {{associated}} access rights. Note that in these cases the handle must be {{something other than a}} small integer, otherwise it is forgeable. In non-capacities-based systems (as is more common), each process must acquire its own separate handle, by specifying the identity of the resource and the desired access rights (e.g., each process must open a file itself, by giving the filename and <b>access</b> <b>mode).</b>|$|E
50|$|In most conditions, even if {{the data}} is encrypted, the access pattern can be achieved, and this pattern can leak some {{important}} information such as encryption keys. And in the outsourcing of cloud data, this leakage of access pattern is still very serious. An access pattern is a specification of an <b>access</b> <b>mode</b> for every attribute of a relation schema. For example, the sequences of user read or write the data in the cloud are access patterns.|$|E
50|$|The {{simplest}} type of lock is {{a binary}} semaphore. It provides exclusive {{access to the}} locked data. Other schemes also provide shared access for reading data. Other widely implemented <b>access</b> <b>modes</b> are exclusive, intend-to-exclude and intend-to-upgrade.|$|R
40|$|Several propositions {{were done}} to provide adapted {{concurrency}} control to object-oriented databases. However, {{most of these}} proposals miss the fact that considering solely read and write <b>access</b> <b>modes</b> on instances may lead to less parallelism than in relational databases! This paper cope with that issue, and advantages are numerous: (1) commutativity of methods is determined a priori and automatically by the compiler, without measurable overhead, (2) run-time checking of commutativity is as efficient as for compatibility, (3) inverse operations need not be specified for recovery, (4) this scheme does not preclude more sophisticated approaches, and, last but not least, (5) relational and object-oriented concurrency control schemes with read and write <b>access</b> <b>modes</b> are subsumed under this proposition. 1...|$|R
40|$|AbstractA {{major problem}} in {{deriving}} a compiler from a formal definition is the production of correct and efficient object code. In this context, we propose {{a solution to the}} problem of code-generator generation. Our approach is based on a target machine description where the basic concepts used (storage classes, <b>access</b> <b>modes,</b> <b>access</b> classes and instructions) are hierarchically described by tree patterns. These tree patterns are terms of an abstract data type. The program intermediate representation (input to the code generator) is a term of the same abstract data type. The code generation process is based on <b>access</b> <b>modes</b> and instruction template-driven rewritings. The result is that each program instruction is reduced to a sequence of elementary machine instructions, each of them representing an instance of an instruction template. The axioms of the abstract data type are used to prove that the rewritings preserve the semantics of the intermediate representation...|$|R
50|$|An {{access matrix}} can be envisioned as a {{rectangular}} array of cells, with one row per subject and one column per object. The entry {{in a cell}} - that is, the entry for a particular subject-object pair - indicates the <b>access</b> <b>mode</b> that the subject is permitted to exercise on the object. Each column is equivalent to an access control list for the object; and each row is equivalent to an access profile for the subject.|$|E
5000|$|Arrays Declaration Sorting: The {{basic idea}} is to modify the local array {{declaration}} ordering, so that the arrays more frequently accessed are placed {{on top of the}} stack in such a way, the memory locations frequently used are accessed by exploiting direct <b>access</b> <b>mode.</b> The application of this transformation requires either a static estimation or a dynamic analysis of the local arrays access frequency, to achieve this, the array declarations are reorganized to place first the more frequently accessed arrays.|$|E
50|$|Within a micro {{instruction}} execution cycle, the CPU {{as well as}} an input / output controller is connected to an external 16 kByte huge random access memory device (RAM). Via the input-output controller device, communication with virtual input and output devices is supported by Direct Memory <b>Access</b> <b>mode</b> (DMA), Inter-Integrated Circuit Connection (I2C), and Interrupt request functionality (IRQ). A output port, a display, a timer, an event trigger, a digital-analog converter, a keyboard and data input / output channel is provided as virtual IC device for explaining didactically the communication with external devices.|$|E
40|$|The Internet has {{supported}} information archives for some time. These archives have traditionally allowed users to retrieve text and image data {{as well as}} software to their own computers for examination. As the Internet grows in scale and in performance and services, more sophisticated information archives and <b>access</b> <b>modes</b> are possible. This paper reviews {{the growth of the}} Internet with its current information archive services and proposes methods for providing interactive access to multimedia data. Various information types and their <b>access</b> <b>modes</b> are discussed in terms of their role in defining advanced digital library and network services. A prototype digital library system and user interface developed at the National Center for Supercomputing Applications is examined. published or submitted for publicatio...|$|R
40|$|Memory delays {{represent}} a major bottleneck in embedded systems performance. Newer memory modules exhibiting efficient <b>access</b> <b>modes</b> (e. g., page-, burst-mode) partly alleviate this bottleneck. However, such features {{can not be}} efficiently exploited in processor-based embedded systems without memory-aware compiler support. We describe a memory-aware compiler approach that exploits such efficient memory <b>access</b> <b>modes</b> by extracting accurate timing information, allowing the compiler's scheduler to perform global code reordering to better hide the latency of memory operations. Our memory-aware compiler scheduled several benchmarks on the TI C 6201 processor architecture interfaced with a 2 -bank synchronous DRAM and generated average improvements of 24 % over the best possible schedule using a traditional (memory-transparent) optimizing compiler, demonstrating the utility of our memory-aware compilation approach. 1 Introduction In recent SOC and processor architectures, memory is identified as [...] ...|$|R
30|$|In this section, we {{consider}} two different sleeping policies, namely, random sleeping strategy and activity-aware sleeping strategy, {{which is based}} on the network activity level (can be regarded as load or traffic demands). Specifically, the analysis on policies with different femtocell <b>access</b> <b>modes</b> are different. Details refer to the following.|$|R
