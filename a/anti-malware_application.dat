3|10|Public
5000|$|As of 2017, the {{software}} has about 500 million users worldwide. As of March 2017, Bitdefender ranks {{third in the}} global ranking of Windows <b>anti-malware</b> <b>application</b> vendors by revenue.|$|E
50|$|Many, if not all, of Mindspark's {{programs}} and toolbars were commonly classified as Potentially Unwanted Programs, or PUPs, {{which may be}} installed without the user's explicit knowledge or consent. Many of them exhibited malicious behaviors and could be considered malware. Malwarebytes {{is an example of}} a trusted <b>anti-malware</b> <b>application</b> that classifies Mindspark's toolbars and applications as PUPs. It should be noted that many self claims made by Mindspark should not necessarily be taken as direct truth.|$|E
40|$|Operating {{systems are}} the {{interface}} between hardware and end user. This software are under attack from malicious programs, so we need <b>anti-malware</b> <b>application</b> to make those operating systems save. However, most people use many anti-malwares to be protected, {{but they did not}} know when they install this application what this application can do inside their devices. In this paper, we conduct a test on an anti-malwares and investigate its effects inside the operating system. We exploit virtual box to create virtual machine and use windows XP as a target operating system with three anti-viruses: Kaspersky, AVG and Norton. We examine differences that happen after installing these anti-viruses (we mainly focus on files kernel, processes, sockets and registry keys) ...|$|E
50|$|Unlike other <b>anti-malware</b> <b>applications</b> {{available}} for Mac OS X (and other systems), MacScan scans exclusively for malware that affects Macs, {{as opposed to}} scanning for all forms of known threats, which would include Windows malware. Given that there is considerably less Mac-based malware than Windows-based malware, MacScan's definition files are smaller and more optimized.|$|R
40|$|The Android {{platform}} {{is that the}} quickest growing market in smart phone operating systems thus far. As such, {{it has become the}} most viable target of security threats. The dependence of the Android Market Security Model on its reactive anti-malware system gifts a chance for malware to be present within the Official Android Market and does not include applications outside the official market. This permits applications to masquerade as harmless applications which result in the loss of credentials if precautions are not taken. Most <b>anti-malware</b> <b>applications</b> within the Market use static analysis for detection as a result of it, they are quick and comparatively easy...|$|R
40|$|Abstract — The Android {{platform}} {{is that the}} quickest growing market in smart phone operating systems being the most viable target of security threats. Most <b>anti-malware</b> <b>applications</b> within the Market use static analysis for detection {{as a result of}} it, they are quick and comparatively easy. However, static analysis needs regular updates of threat databases {{and it is going to}} be circumvented by obfuscation techniques. As an answer to those issues, the study utilizes behavior analysis of applications as a basis for malware. As a primary step, features of non-benign and non-malicious applications are extracted for machine learning to provide baseline behavior datasets. The process of testing has been discussed in this paper...|$|R
40|$|The Android {{platform}} with its growing market in smart phone operative systems {{is the most}} viable target of security threats. The dependence of the Android Market Security Model on its reactive anti-malware system offers an opportunity for malware to be present within the Official Android Market and does not include applications outside the official market. This allows applications to mask as harmless applications which result {{in the loss of}} credentials if precautions are not taken. Most <b>anti-malware</b> <b>applications</b> within the Market use static analysis for detection as a result of it, they are fast and relatively easy. However, static analysis needs regular updates of threat databases {{and it is going to}} be circumvented by obfuscation techniques. As a response to those matters, the study utilizes behavior analysis of applications as a basis for malware. Keywords...|$|R
40|$|Mobile malware threats (e. g., on Android) have {{recently}} {{become a real}} concern. In this paper, we evaluate the state-of-the-art commercial mobile anti-malware products for Android and test how resistant they are against various common obfuscation techniques (even with known malware). Such an evaluation is important for not only measuring the available defense against mobile malware threats but also proposing effective, next-generation solutions. We developed DroidChameleon, a systematic framework with various transformation techniques, and used it for our study. Our results on ten popular commercial <b>anti-malware</b> <b>applications</b> for Android are worrisome: none of these tools is resistant against common malware transformation techniques. Moreover, a majority {{of them can be}} trivially defeated by applying slight transformation over known malware with little effort for malware authors. Finally, in the light of our results, we propose possible remedies for improving the current state of malware detection on mobile devices. ...|$|R
40|$|Abstract—Mobile malware threats (e. g., on Android) have {{recently}} {{become a real}} concern. In this paper, we evaluate the state-of-the-art commercial mobile anti-malware products for Android and test how resistant they are against various common obfuscation techniques (even with known malware). Such an evaluation is important for not only measuring the available defense against mobile malware threats but also proposing effec-tive, next-generation solutions. We developed DroidChameleon, a systematic framework with various transformation techniques, and used it for our study. Our results on ten popular commercial <b>anti-malware</b> <b>applications</b> for Android are worrisome: none of these tools is resistant against common malware transformation techniques. Moreover, a majority {{of them can be}} trivially defeated by applying slight transformation over known malware with little effort for malware authors. Finally, in the light of our results, we propose possible remedies for improving the current state of malware detection on mobile devices. Index Terms—Mobile, malware, anti-malware, Android. I...|$|R
40|$|Abstract — The Android {{platform}} {{is the fastest}} growing market in smartphone operating systems to date. As such, {{it has become the}} most viable target of security threats. The reliance of the Android Market Security Model on its reactive anti-malware system presents an opportunity for malware to be present in the Official Android Market and does not encompass applications outside the official market. This allows applications to masquerade as harmless applications which lead to the loss of credentials if precautions are not taken. Most <b>anti-malware</b> <b>applications</b> in the Market use static analysis for detection because it is fast and relatively simple. However, static analysis requires regular updates of threat databases and it may be circumvented by obfuscation techniques. As a solution to these problems, the study utilizes behavior analysis of applications as basis for malware. As a first step, features of known-benign and known-malicious applications are extracted for machine learning to provide baseline behavior datasets. Test applications are then passed through the behavior based module for identification of its being malware or benign. A classification scheme is provided for applications identified as malware by the system. Keywords—Android, Security, Behavior Analysis...|$|R
40|$|The Android {{platform}} {{is the fastest}} growing market in smartphone operating systems to date. As such, {{it has become the}} most viable target of security threats. The reliance of the Android Market Security Model on its reactive anti-malware system presents an opportunity for malware to be present in the Official Android Market and does not encompass applications outside the official market. This allows applications to masquerade as harmless applications which lead to the loss of credentials if precautions are not taken. Most <b>anti-malware</b> <b>applications</b> in the Market use static analysis for detection because it is fast and relatively simple. However, static analysis requires regular updates of threat databases and it may be circumvented by obfuscation techniques. As a solution to these problems, the study utilizes behavior analysis of applications as basis for malware. As a first step, features of known-benign and known-malicious applications are extracted for machine learning to provide baseline behavior datasets. Test applications are then passed through the behavior based module for identification of its being malware or benign. A classification scheme is provided for applications identified as malware by the system...|$|R
40|$|Classical {{ontology}} is {{not sufficient}} to deal with vague or imprecise knowledge for real world applications such as malware behavioral analysis. In addition, malware has grown into a pressing problem for governments and commercial organizations. <b>Anti-malware</b> <b>applications</b> represent {{one of the most important}} research topics in the area of information security threat. As a countermeasure, enhanced systems for analyzing the behavior of malware are needed in order to predict malicious actions and minimize computer damages. Many researchers use Virtual Machine (VM) systems to monitor malware behavior, but there are many Anti-VM techniques which are used to counteract the collection, analysis, and reverse engineering features of the VM based malware analysis platform. Therefore, malware researchers are likely to obtain inaccurate analysis from the VM based approach. For this reason, we have developed the Taiwan Malware Analysis Net (TWMAN) which uses a real operating system environment to improve the accuracy of malware behavior analysis and has integrated Type- 1 Fuzzy Set (T 1 FS), Ontology, and Fuzzy Markup Language (FML) on 2010. In this paper, we use Interval Type- 2 Fuzzy Set (IT 2 FS), eggdrop, and glftpd as a cloud service (software as a service) on the Google App Engine along with Python and Android. We believe this system can help improve the correctness of malware analysis results and reduce the rate of malware misdiagnosis. © 2012 IEEE...|$|R
40|$|Abstract. With {{the wide}} usage of {{smartphones}} {{in our daily}} life, new malware is emerging to compromise the mobile OS and steal the sensitive data from the mo-bile <b>applications.</b> <b>Anti-malware</b> tools should be continuously updated via static and dynamic malware analysis to detect and prevent the newest malware. Dy-namic malware analysis depends on a reliable memory acquisition of the OS and the applications running on the smartphones. In this paper, we develop a TrustZone-based memory acquisition mechanism called TrustDump that is capa-ble of reliably obtaining the RAM memory and CPU registers of the mobile OS even if the OS has crashed or has been compromised. The mobile OS is running in the TrustZone’s normal domain, and the memory acquisition tool is running in the TrustZone’s secure domain, which has the access privilege to the memory in the normal domain. Instead of using a hypervisor to ensure an isolation between the OS and the memory acquisition tool, we rely on ARM TrustZone to achieve a hardware-assisted isolation with a small trusted computing base (TCB) of about 450 lines of code. We build a TrustDump prototype on Freescale i. MX 53 QSB...|$|R

