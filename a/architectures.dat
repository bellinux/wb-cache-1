10000|10000|Public
5|$|FreeBSD {{has been}} ported {{to a variety}} of {{instruction}} set <b>architectures.</b> The FreeBSD project organizes <b>architectures</b> into tiers that characterize the level of support provided. Tier 1 <b>architectures</b> are mature and fully supported. Tier 2 <b>architectures</b> are undergoing major development. Tier 3 <b>architectures</b> are experimental or are no longer under active development and Tier 4 <b>architectures</b> have no support at all.|$|E
5|$|Akaros is {{designed}} for many-core <b>architectures</b> and large-scale SMP systems.|$|E
5|$|Compaq and Silicon Graphics {{decided to}} abandon further {{development}} of the Alpha and MIPS <b>architectures</b> respectively in favor of migrating to IA-64.|$|E
5000|$|... 2nd Millennium AD:20th {{century in}} <b>architecture</b> - 19th century in <b>architecture</b> - 18th century in <b>architecture</b> - 17th century in <b>architecture</b> - 16th century in architecture:15th century in <b>architecture</b> - 14th century in <b>architecture</b> - 13th century in <b>architecture</b> - 12th century in <b>architecture</b> - 11th century in architecture1st Millennium AD:10th century in <b>architecture</b> - 9th century in <b>architecture</b> - 8th century in <b>architecture</b> - 7th century in <b>architecture</b> - 6th century in architecture:5th century in <b>architecture</b> - 4th century in <b>architecture</b> - 3rd century in <b>architecture</b> - 2nd century in <b>architecture</b> - 1st century in architecture1st Millennium BC:1st century BC in <b>architecture</b> - 2nd century BC in <b>architecture</b> - 3rd century BC in <b>architecture</b> - 4th century BC in <b>architecture</b> - 5th century BC in architecture:6th century BC in <b>architecture</b> - 7th century BC in <b>architecture</b> - 8th century BC in <b>architecture</b> - 9th century BC in <b>architecture</b> - 10th century BC in architecture2nd Millennium BC:11th century BC in <b>architecture</b> - 12th century BC in <b>architecture</b> - 13th century BC in <b>architecture</b> - 14th century BC in <b>architecture</b> - 15th century BC in architecture:16th century BC in <b>architecture</b> - 17th century BC in <b>architecture</b> - 18th century BC in <b>architecture</b> - 19th century BC in <b>architecture</b> - 20th century BC in architecture3rd Millennium BC:21st century BC in <b>architecture</b> - 22nd century BC in <b>architecture</b> - 23rd century BC in <b>architecture</b> - 24th century BC in <b>architecture</b> - 25th century BC in architecture:26th century BC in <b>architecture</b> - 27th century BC in <b>architecture</b> - 28th century BC in <b>architecture</b> - 29th century BC in <b>architecture</b> - 30th century BC in architectureNeolithic:4th {{millennium}} BC in <b>architecture</b> ...|$|R
30|$|Enterprise <b>architecture</b> (EA): A {{blueprint}} {{that describes}} the overall social, structural, behavioral, technological, and facility elements of an enterprise’s operating environment that share common goals and principles. Enterprise <b>architecture</b> includes different <b>architecture</b> domains such as Application <b>architecture,</b> Platform <b>architecture,</b> Infrastructure <b>architecture,</b> Business <b>architecture,</b> Solution <b>architecture,</b> and Information <b>architecture.</b>|$|R
5000|$|According to TOGAF, Business <b>Architecture</b> [...] "defines the {{business}} strategy, governance, organization, and key business processes". TOGAF refers to Business <b>Architecture</b> {{as one of}} the four <b>architecture</b> domains, which represent the subsets of the overall enterprise <b>architecture</b> with the other three <b>architecture</b> domains being Application <b>Architecture,</b> Data <b>Architecture,</b> and Technology <b>Architecture.</b> The key element of TOGAF, <b>Architecture</b> Development Method, identifies development of Business <b>Architecture</b> as necessary prerequisite for developing other <b>architecture</b> domains and provides guidance in regard to development steps and common artifacts.|$|R
5|$|Installation {{images are}} hybrid on some <b>architectures</b> {{and can be}} used to create a {{bootable}} USB drive (Live USB).|$|E
5|$|State-of-the-art deep {{neural network}} <b>architectures</b> can {{sometimes}} even rival human accuracy in fields like computer vision, specifically on things like the MNIST database, and traffic sign recognition.|$|E
5|$|Debian {{releases}} live install {{images for}} CDs, DVDs and USB thumb drives, for IA-32 and x86-64 <b>architectures,</b> {{and with a}} choice of desktop environments. These Debian Live images allow users to boot from removable media and run Debian without affecting the contents of their computer.|$|E
50|$|Romanian <b>architecture</b> is diverse, {{including}} medieval <b>architecture,</b> {{modern era}} <b>architecture,</b> interwar <b>architecture,</b> communist <b>architecture,</b> and contemporary 21st century <b>architecture.</b> In Romania, {{there are also}} regional differences with regard to architectural styles.|$|R
50|$|The {{relationship}} between enterprise <b>architecture</b> and solution <b>architecture</b> is generally well understood. According to the 2013 paper {{published by the}} Federation of Enterprise <b>Architecture</b> Professional Organizations, solution <b>architecture</b> includes business <b>architecture,</b> information <b>architecture,</b> application <b>architecture,</b> and technology <b>architecture</b> operating at a tactical level and focusing on the scope and span of a selected business problem. In contrast, enterprise <b>architecture,</b> which also includes the aforementioned four types of <b>architecture,</b> operates at the strategic level and its scope and span is the enterprise rather than a specific business problem. Consequently, enterprise <b>architecture</b> provides strategic direction and guidance to solution <b>architecture.</b>|$|R
5000|$|Decentralized : Human {{resources}} <b>architecture,</b> Computer <b>architecture,</b> User-computing <b>architecture,</b> and Systems <b>architecture.</b>|$|R
5|$|During development, Intel, HP, and {{industry}} analysts predicted that IA-64 would dominate in servers, workstations, and high-end desktops, and eventually supplant RISC and complex instruction set computing (CISC) <b>architectures</b> for all general-purpose applications.|$|E
5|$|Historically, 4-bit {{microprocessors}} {{were replaced}} with 8-bit, then 16-bit, then 32-bit microprocessors. This trend generally {{came to an}} end with the introduction of 32-bit processors, which has been a standard in general-purpose computing for two decades. Not until the early 2000s, with the advent of x86-64 <b>architectures,</b> did 64-bit processors become commonplace.|$|E
5|$|Web is only {{released}} as source code or with Linux distributions and BSDs making binary packages. Thus {{the availability of}} Web depends on the distributor. Web can be run on many hardware platforms, including i386, amd64 and several other instruction set <b>architectures.</b>|$|E
50|$|ISO/IEC/IEEE 42010 organizes an <b>architecture</b> {{description}} into multiple <b>architecture</b> views. An <b>architecture</b> view addresses {{one or more}} concerns held by stakeholders of {{the system}} being described. An <b>architecture</b> view describes the <b>architecture</b> {{of the system of}} interest in accordance with the rules and conventions defined in its <b>architecture</b> viewpoint. Each <b>architecture</b> view must have an <b>architecture</b> viewpoint.|$|R
50|$|Performance {{engineering}} {{working practices}} {{are applied to}} the Requirements phase, and to the Business <b>Architecture,</b> Information System <b>Architecture,</b> and Technology <b>architecture</b> phases. Within Information System <b>Architecture,</b> it is applied to both the Data <b>Architecture</b> and Application <b>Architecture.</b>|$|R
50|$|<b>Architecture</b> {{descriptions}} (ADs) {{are also}} {{sometimes referred to}} as <b>architecture</b> representations, <b>architecture</b> specificationsor software <b>architecture</b> documentation.|$|R
25|$|Other <b>architectures</b> do {{not benefit}} from non-executable stack or heap; NetBSD does not by default use any {{software}} emulation to offer these features on those <b>architectures.</b>|$|E
25|$|ARMv7-M and ARMv7E-M <b>architectures</b> always include divide instructions.|$|E
25|$|The {{composite}} {{of the design}} <b>architectures</b> for products and their life-cycle processes.|$|E
50|$|In {{software}} engineering, multitier <b>architecture</b> (often {{referred to}} as n-tier <b>architecture)</b> or multilayered <b>architecture</b> is a client-server <b>architecture</b> in which presentation, application processing, and data management functions are physically separated. The most widespread use of multitier <b>architecture</b> is the three-tier <b>architecture.</b>|$|R
50|$|Enterprise {{information}} security <b>architecture</b> was first formally positioned by Gartner in their whitepaper called “Incorporating Security into the Enterprise <b>Architecture</b> Process”. This was published on 24 January 2006. Since this publication, security <b>architecture</b> {{has moved from}} being a silo based <b>architecture</b> to an enterprise focused solution that incorporates business, information and technology. The picture below represents a one-dimensional view of enterprise <b>architecture</b> as a service-oriented <b>architecture.</b> It also reflects the new addition to the enterprise <b>architecture</b> family called “Security”. Business <b>architecture,</b> information <b>architecture</b> and technology <b>architecture</b> {{used to be called}} BIT for short. Now with security as part of the <b>architecture</b> family it has become BITS.|$|R
40|$|Colonial <b>architecture</b> is an <b>architecture</b> {{that combine}} West and East culture. This <b>architecture</b> {{presents}} trough the Dutch’s architect works {{and it is}} {{for the benefit of the}} Dutches that live in Indonesia before the Independence period. The <b>architecture</b> that present in the early period of the Independence, more or less influenced by the colonial <b>architecture,</b> beside the desire from the architects to be different from the colonial <b>architecture</b> which already exist (the jengki <b>architecture).</b> The <b>architecture</b> that present in the Putroagung area has been known to the colonial <b>architecture,</b> which also has influence from the jengki <b>architecture.</b> The ‘colonial’ <b>architecture</b> characteristics are still stand until this moment...|$|R
25|$|AMD x86-64 and ARM-hfp are {{the primary}} <b>architectures</b> {{supported}} by Fedora. Pidora and FedBerry are specialized Fedora distributions for the Raspberry Pi. As of release 26, Fedora also supports ARM AArch64, IBM Power64, IBM Power64le, IBM Z, MIPS-64el, MIPS-el, RISC-V and Intel i686 as secondary <b>architectures</b> (with i686 being primary until release 25).|$|E
25|$|Warhead Electrical System – {{to develop}} <b>architectures</b> and {{technologies}} for warhead electrical systems.|$|E
25|$|In addition, Mono is {{available}} {{on a variety of}} operating systems and <b>architectures.</b>|$|E
40|$|Smart <b>architecture</b> is fast {{becoming}} a buzzword in <b>architecture</b> and related disciplines. However, it is not entirely clear what constitutes smart <b>architecture</b> and how relates to or differs from such closely related camps as responsive <b>architecture,</b> performative <b>architecture,</b> kinetic <b>architecture,</b> and adaptive <b>architecture.</b> This paper poses the essential and critical questions about smart <b>architecture</b> from a complex-adaptive systems point of view. The paper also illustrates the attributes of smart <b>architecture</b> {{with a number of}} seemingly disparate, yet conceptually connected design developments...|$|R
40|$|Enterprise <b>architecture</b> {{frameworks}} {{define the}} goals of enterprise <b>architecture</b> {{in order to make}} business processes and IT operations more effective, and {{to reduce the risk of}} future investments. These enterprise <b>architecture</b> frameworks offer different <b>architecture</b> development methods that help in building enterprise <b>architecture.</b> In practice, the larger organizations become, the larger their enterprise <b>architecture</b> and IT become. This leads to an increasingly complex system of enterprise <b>architecture</b> development and maintenance. Application software <b>architecture</b> is one type of <b>architecture</b> that, along with business <b>architecture,</b> data <b>architecture</b> and technology <b>architecture,</b> composes enterprise <b>architecture.</b> From the perspective of integration, enterprise <b>architecture</b> can be considered a system of interaction between multiple examples of application software. Therefore, effective software integration is a very important basis for the future success of the enterprise <b>architecture</b> in question. This article will provide interface-based integration practice in order to help simplify the process of building such a software integration system. The main goal of interface-based software integration is to solve problems that may arise with software integration requirements and developing software integration <b>architecture...</b>|$|R
50|$|The {{district}} is significant primarily for its <b>architecture.</b> It includes major collections of Queen Anne <b>architecture,</b> Shingle Style <b>architecture,</b> Colonial Revival <b>architecture,</b> and Tudor Revival <b>architecture.</b> Numerous other styles are also represented.|$|R
25|$|Most RISC <b>architectures</b> have fixed-length {{instructions}} (commonly 32 bits) and {{a simple}} encoding, which simplifies fetch, decode, and issue logic considerably. One drawback of 32-bit instructions is reduced code density, which is more adverse a characteristic in embedded computing {{than it is in}} the workstation and server markets RISC <b>architectures</b> were originally designed to serve. To address this problem, several <b>architectures,</b> such as ARM, Power ISA, MIPS, RISC-V, and the Adapteva Epiphany, have an optional short feature-reduced instruction format or instruction compression feature. The SH5 also follows this pattern, albeit having evolved in the opposite direction, having added longer media instructions to an original 16-bit encoding.|$|E
25|$|Firstly, {{hierarchical}} <b>architectures</b> best {{accomplish the}} goal of ‘parsing’ a complex visual scene with many objects consisting of many parts, whose relative position may greatly vary. In this case, different elements of the system must react to different objects and parts. In hierarchical <b>architectures,</b> representations of parts {{at different levels of}} embedding hierarchy can be stored at different layers of hierarchy.|$|E
25|$|Some CPU <b>architectures</b> have a {{built-in}} instruction for sine, including the Intel x87 FPUs since the 80387.|$|E
50|$|In practice, {{business}} <b>architecture</b> {{effort is}} conducted {{on its own}} {{or as part of}} an enterprise <b>architecture.</b> While an enterprise <b>architecture</b> practice in the past had focused primarily on the technological aspects of change, the practice is quickly evolving to use a rigorous business <b>architecture</b> approach to address the organizational and motivational aspects of change as well. The alignment between business <b>architecture</b> and enterprise <b>architecture</b> is a natural architectural alignment of two related disciplines. Business <b>architecture</b> represents a business {{in the absence of any}} IT <b>architecture</b> while enterprise <b>architecture</b> provides an overarching framework for business and IT <b>architecture.</b>|$|R
40|$|The {{causes of}} <b>architecture</b> changes can tell about why <b>architecture</b> changes, and this {{knowledge}} can be captured to prevent <b>architecture</b> knowledge vaporization and <b>architecture</b> degeneration. But the causes are not always known, especially in open source software (OSS) development. This makes {{it very hard to}} understand the underlying reasons for the <b>architecture</b> changes and design appropriate modifications. <b>Architecture</b> information is communicated in development mailing lists of OSS projects. To explore the possibility of identifying and understanding the causes of <b>architecture</b> changes, we conducted an empirical study to analyze <b>architecture</b> in-formation (i. e. architectural threads) communicated in the development mailing lists of two popular OSS projects: Hibernate and ArgoUML, verified <b>architecture</b> changes with source code, and identified the causes of <b>architecture</b> changes from the communicated <b>architecture</b> information. The main findings of this study are: (1) <b>architecture</b> information communicated in OSS mailing lists does lead to <b>architecture</b> changes in code; (2) the major cause for <b>architecture</b> changes in both Hibernate and ArgoUML is preventative changes, and the causes of <b>architecture</b> changes are further classified to functional requirement, external quality requirement, an can be captured to prevent <b>architecture</b> knowledge vaporization and <b>architecture</b> degeneration. But the causes are not always known, especially in open source software (OSS) development. This makes it very hard to understand the underlying reasons for the <b>architecture</b> changes and design appropriate modifications. <b>Architecture</b> information is communicated in development mailing lists of OSS projects. To explore the possibility of identifying and understanding the causes of <b>architecture</b> changes, we conducted an empirical study to analyze <b>architecture</b> information (i. e. architectural threads) communicated in the development mailing lists of two popular OSS projects: Hibernate and ArgoUML, verified <b>architecture</b> changes with source code, and identified the causes of <b>architecture</b> changes from the communicated <b>architecture</b> information. The main findings of this study are: (1) <b>architecture</b> information communicated in OSS mailing lists does lead to <b>architecture</b> changes in code; (2) the major cause for <b>architecture</b> changes in both Hibernate and ArgoUML is preventative changes, and the causes of <b>architecture</b> changes are further classified to functional requirement, external quality requirement, and internal quality requirement using the coding techniques of grounded theory; (3) more than 45 % of <b>architecture</b> changes in both projects happened before the first stable version was released...|$|R
5000|$|German-Jordanian University, School of <b>Architecture</b> and Built Environment, Department of <b>Architecture</b> and Interior <b>Architecture,</b> Bachelor of Science in Architecture/ Interior <b>Architecture</b> ...|$|R
