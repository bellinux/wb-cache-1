170|292|Public
2500|$|Storytellers have {{a number}} of writing tools at their disposal—for example, narration, <b>action,</b> <b>description,</b> and dialogue. [...] When {{considering}} how to pace a story, description and narration will move it along slowly, steadily, and easily, while action and dialogue will speed it up. [...] Of all the tools at a writer's disposal, dialogue is the one that most quickly puts the characters and the reader into the present moment, even more so than action. [...] There are times when a scene should move slowly, so it is not always best to use dialogue. [...] Reading slow-moving dialogue is preferable to reading lengthy passages of philosophical narrative.|$|E
5000|$|<b>Action</b> <b>description</b> {{languages}} elude {{the frame}} problem rather than solving it. An <b>action</b> <b>description</b> {{language is a}} formal language with a syntax that is specific for describing situations and actions. For example, that the action [...] makes the door open if not locked is expressed by: ...|$|E
50|$|The Yale {{shooting}} {{scenario is}} also correctly formalized by the Reiter {{version of the}} situation calculus, the fluent calculus, and the <b>action</b> <b>description</b> languages.|$|E
40|$|As a {{contribution}} to the metatheory of reasoning about actions, we present techniques for analyzing the consistency of <b>action</b> <b>descriptions.</b> Three levels of consistency are introduced for the evaluation of action descriptions: uniform consistency, - consistency of formulas and regional consistency. The first two provide an intuitive resolution of problems of explanation conflicts and fluent dependency. The concept of regional consistency provides for a measure of ramification. A particularly expressive form for <b>action</b> <b>descriptions,</b> the normal form, is introduced to facilitate this analysis. The relative satisfiability of the situation calculus is generalized to accomodate non-deterministic effects and ramifications. The approach of consistency analysis on <b>action</b> <b>descriptions</b> is applicable to other formalisms of actions since the expressions of <b>action</b> <b>descriptions</b> are often intertranslatable...|$|R
5000|$|... #Caption: Sample from a screenplay, showing {{dialogue}} and <b>action</b> <b>descriptions</b> ...|$|R
50|$|Long-form <b>action</b> <b>descriptions</b> are {{sometimes}} referred to using pseudo-keywords such as those listed in the table below.|$|R
50|$|The {{semantics}} of an <b>action</b> <b>description</b> language {{depends on}} what the language can express (concurrent actions, delayed effects, etc.) and is usually based on transition systems.|$|E
50|$|Since domains are {{expressed}} in these languages rather than directly in logic, the frame problem only arises when a specification given in an <b>action</b> <b>description</b> logic is to be translated into logic. Typically, however, a translation is given from these languages to answer set programming rather than first-order logic.|$|E
50|$|Action model {{learning}} (sometimes abbreviated action learning) {{is an area}} {{of machine}} learning concerned with creation and modification of software agent's knowledge about effects and preconditions of the actions that can be executed within its environment. This knowledge is usually represented in logic-based <b>action</b> <b>description</b> language and used as the input for automated planners.|$|E
50|$|Ratings of 515 <b>action</b> <b>descriptions</b> by American {{respondents}} yielded estimations of {{a statistical}} model consisting of nine impression-formation equations, predicting outcome Evaluation, Potency, and Activity of actor, behavior, and object from pre-event {{ratings of the}} evaluation, potency, and activity of actor, behavior, and object.|$|R
40|$|AbstractThis paper {{introduces}} {{an approach}} that allows an agent to exploit inherent patterns of interaction in its environment, so-called dynamics, to achieve its objectives. The approach extends the standard treatment of planning and (re) action in which part of the input to the plan generation algorithm {{is a set of}} basic actions and perhaps some domain axioms. Real world actions are typically difficult to categorize consistently and are highly context dependent. The approach presented here takes as input a procedural model of the agent's environment and produces as output a set of <b>action</b> <b>descriptions</b> that capture how the agent can exploit the dynamics in the environment. An agent constructed with this approach can utilize context sensitive actions, “servo” style actions, and other intuitively efficient ways to manipulate its environment. A process-algebra based representation, RS, is introduced to model the environment and the agent's reactions. The paper demonstrates how to analyze an RS environment model so as to automatically generate a set of potentially useful dynamics and convert these to <b>action</b> <b>descriptions.</b> The output <b>action</b> <b>descriptions</b> are designed to be input to an Interval Temporal Logic based planner. A series of examples of reaction construction drawn from the kitting robot domain is worked through, and the prototype implementation of the approach described...|$|R
40|$|Abstract. This paper {{introduces}} a formal theory for describing actions in terminological knowledge bases, {{closely related to}} description logics. It deals in particular {{with the problem of}} adapting the subsumption/specialization relations and the definition of inheritance from the well-formulated notions for static object concepts to dynamic <b>action</b> concepts. The <b>description</b> of <b>action</b> concepts integrates a formal notation of preconditions and effects similar to STRIPS planning systems. The approach suggested here anchors <b>action</b> <b>descriptions</b> in the object-concept part of the taxonomy. Object-concepts, their attributes, and relations are integrated as parameters in <b>action</b> <b>descriptions,</b> and are used in precondition and effect formulae, which specify changes in the object-concept part of the taxonomy. The definition of action concepts and their extensional semantics is based on the view of actions as transformers between world states, where preconditions and effects describe constraints on world states. This view allows a definition of inheritance and the subsumption/specialization relation for action concepts in parallel to the respective definitions for object concepts. ...|$|R
50|$|In {{artificial}} intelligence, <b>Action</b> <b>description</b> language (ADL) is {{an automated}} planning and scheduling system in particular for robots. It {{is considered an}} advancement of STRIPS. Edwin Pednault (a specialist {{in the field of}} Data abstraction and modelling who has been an IBM Research Staff Member in the Data Abstraction Research Group since 1996) proposed this language in 1987. It is an example of an action language.|$|E
50|$|The Counter-Terror Social Network Analysis and Intent Recognition (CT-SNAIR) project {{uses the}} Terrorist <b>Action</b> <b>Description</b> Language (TADL) to model and {{simulate}} terrorist networks and attacks. It also models links identified in communication patterns compiled from multimedia data, and terrorists’ activity patterns are compiled from databases of past terrorist threats. Unlike other proposed methods, CT-SNAIR constantly {{interacts with the}} user, who uses the system both to investigate and to refine hypotheses.|$|E
5000|$|Given a {{training}} set [...] consisting of examples , where [...] are observations {{of a world}} state from two consecutive time steps [...] and [...] is an action instance observed in time step , the goal of action model learning in general is to construct an action model , where [...] is a description of domain dynamics in <b>action</b> <b>description</b> formalism like STRIPS, ADL or PDDL and [...] is a probability function defined over the elements of [...]|$|E
40|$|In this paper, {{we propose}} a machine learning-based NLP system for {{automatically}} creating animated storyboards using the <b>action</b> <b>descriptions</b> of movie scripts. We focus {{particularly on the}} importance of verb semantics when generating graphics commands, and find that semantic role labelling boosts performance and is relatively robust to the effects of unseen verbs...|$|R
40|$|We {{provide a}} {{characterization}} of plan recognition {{in terms of}} a general framework of belief revision and non-monotonic reasoning. We adopt a generalization of classical belief revision to describe a competence model of plan recognition which supports dynamic change to all aspects of a plan recognition knowledge base, including background knowledge, <b>action</b> <b>descriptions</b> and their relationship to named plans, and accumulating sets of observations on agent actions. Our plan recognition model exploits the underlying belief revision model to assimilate observations, and answer queries about an agent's intended plans and actions. Supporting belief states are determined by observed actions and non-monotonic assumptions consistent with background knowledge and <b>action</b> <b>descriptions.</b> Our intent is to demonstrate the connections between a general plan recognition model and important concepts of belief revision and nonmonotonic reasoning, to help establish a basis for improving the specification a [...] ...|$|R
40|$|Our project aims at the {{automatic}} generation of multilingual text for product maintenance and documentation from a structured knowledge representation formalized {{by means of}} plans in a description logic. These plans consist {{of one or more}} actions or other plans. This language independent representation is also designed to support the qualitative simulation of the documentation steps and to support the generation of multilingual text by offering <b>action</b> <b>descriptions</b> at different levels of detail for verbalization. This requires a hierarchical organization of performable <b>action</b> <b>descriptions</b> capable to define actions by inheriting already existing actions. Prerequisite for inheritance of pre- and postconditions of actions in a KL-ONE system is the definition of a proper subsumption relation for this logical expressions, conform with the subsumption for ordinary KLONE constructs. We propose a framework for extending the Loom system with syntax and semantics for representing and reasoning wi [...] ...|$|R
50|$|The {{atoms of}} plans and {{behavior}} sequences are triplets of a (partial, hierarchical) situation description, forming a condition, an operator (a hierarchical <b>action</b> <b>description)</b> and an expected {{outcome of the}} operation as another (partial, hierarchical) situation description. Object descriptions (mainly declarative) {{are also part of}} long-term memory and the product of perceptual processes and affordances. Situations and operators in long-term memory may be associated with motivational relevance, which is instrumental in retrieval and reinforcement. Operations on memory content are subject to emotional modulation.|$|E
5000|$|Storytellers have {{a number}} of writing tools at their disposal—for example, narration, <b>action,</b> <b>description,</b> and dialogue. When {{considering}} how to pace a story, description and narration will move it along slowly, steadily, and easily, while action and dialogue will speed it up. [...] Of all the tools at a writer's disposal, dialogue is the one that most quickly puts the characters and the reader into the present moment, even more so than action. [...] There are times when a scene should move slowly, so it is not always best to use dialogue. [...] Reading slow-moving dialogue is preferable to reading lengthy passages of philosophical narrative.|$|E
50|$|Muscat Azzopardi was a {{powerful}} novelist. In his historical novels Toni Bajjada (1878), Mattew Callus (1878), Vicu Mason (1881), Susanna (1883), Ċejlu Tonna (1886), Ċensu Barbara (1893) and Nazju Ellul (1909), he uses the past in its historical application. In his romantic style, the story becomes {{an indication of the}} future, and the novelist mixes both elements of nationalism with an invented story. The binding of history (which requires research) with fiction (which requires imagination) strives to both teach and entertain. Muscat Azzopardi fills his stories with direct narration, since his stories are based on <b>action,</b> <b>description,</b> exhortation and explicit instruction. However, characters can be seen to lack psychological development, so the reader is bound to understand characters through their actions, and not through a developed sense of personality.|$|E
40|$|Useful and {{suitable}} action representations, with accompanying planning algorithms are {{crucial for the}} task performance of many agent systems, and thus a core issue of research on intelligent agents. An efficient and expressive representation of actions and plans can allow planning systems to retrieve relevant knowledge faster and to access and use suitable actions more effectively [18]. Two general approaches have been pursued in the past; STRIPS-based planners, which construct plans from scratch, based on primitive <b>action</b> <b>descriptions</b> and planners using pre-defined Plan Decompositions Hierarchies, also known as Hierarchical Task Networks. In our research, we integrated both an inheritance hierarchy of actions, using STRIPS-like <b>action</b> <b>descriptions,</b> with a plan decomposition hierarchy, which consists of pre-defined plan schemata. This combination is suitable for a richer action and plan representation, and thus an improved planning algorithm. We implemented and tested this approach for a prototypical example application: the travel planning domain. 1...|$|R
40|$|We {{present an}} {{approach}} using story scripts and <b>action</b> <b>descriptions</b> {{in a form}} similar to the content description of storyboards to predict specific personality and emotional states. By constructing a hierarchical fuzzy rule-based system we facilitate the personality and emotion control of the body language of dynamic story characters. Our {{ultimate goal is to}} facilitate the high-level control of synthetic characters...|$|R
40|$|Abstract. Towards {{a compact}} and elaboration-tolerant first-order {{representation}} of Markov games, we introduce relational Markov games, which combine standard Markov games with first-order <b>action</b> <b>descriptions</b> in a stochastic {{variant of the}} situation calculus. We focus on the zero-sum two-agent case, where we have two agents with diametrically opposed goals. We also present a symbolic value iteration algorithm for computing Nash policy pairs in this framework. ...|$|R
5000|$|Action {{languages}} {{fall into}} two classes: <b>action</b> <b>description</b> languages and action query languages. Examples of the former include STRIPS, PDDL, Language A (a generalization of STRIPS; the propositional part of Pednault's ADL), Language B (an extension of A adding indirect effects, distinguishing static and dynamic laws) and Language C (which adds indirect effects also, and does not assume that every fluent is automatically [...] "inertial"). There are also the Action Query Languages P, Q and R. Several different algorithms exist for converting action languages, and in particular, action language C, to answer set programs. Since modern answer-set solvers make use of boolean SAT algorithms to very rapidly ascertain satisfiability, this implies that action languages can also enjoy the progress being made {{in the domain of}} boolean SAT solving.|$|E
40|$|Abstract. We study resolving {{conflicts}} between an <b>action</b> <b>description</b> {{and a set}} of conditions (possibly obtained from observations), in the context of action languages. In this formal framework, the meaning of an <b>action</b> <b>description</b> can be represented by a transition diagram—a directed graph whose nodes correspond to states and whose edges correspond to transitions describing action occurrences. This allows us to characterize conflicts by means of states and transitions of the given <b>action</b> <b>description</b> that violate some given conditions. We introduce a basic method to resolve such conflicts by modifying the <b>action</b> <b>description,</b> and discuss how the user can be supported in obtaining more preferred solutions. For that, we identify helpful questions the user may ask (e. g., which specific parts of the <b>action</b> <b>description</b> cause a conflict with some given condition), and we provide answers to them using properties of action descriptions and transition diagrams. Finally, we discuss the computational complexity of these questions in terms of related decision problems. ...|$|E
40|$|A {{sound and}} {{complete}} approach for encoding the <b>action</b> <b>description</b> language developed by M. Gelfond and V. Lifschitz in an equational logic program is given. Our results allow {{the comparison of}} the resource-oriented equational logic based approach and various other methods designed for reasoning about actions, most of them based on variants of the situation calculus, which were also related to the <b>action</b> <b>description</b> language recently...|$|E
40|$|Abstract An {{attempt to}} combine {{reasoning}} about {{actions in the}} fluent calculus with description logics is described. It extends description logics in that concepts may be situation-dependent. In particular, an object may belong to a different concept {{before and after the}} execution of an action. It extends the fluent calculus by inheritance and overriding of <b>action</b> <b>descriptions</b> and, in particular, it generalizes the work reported in [5]...|$|R
40|$|Towards {{a compact}} and elaboration-tolerant first-order {{representation}} of Markov games, we introduce relational Markov games, which combine standard Markov games with first-order <b>action</b> <b>descriptions</b> in a stochastic {{variant of the}} situation calculus. We focus on the zero-sum two-agent case, where we have two agents with diametrically opposed goals. We also present a symbolic value iteration algorithm for computing Nash policy pairs in this framework. </p...|$|R
50|$|The playwrights of the Greek New Comedy genre {{built on}} a {{considerable}} legacy from their predecessors, drawing upon {{a vast array of}} dramatic devices, characters and situations their predecessors had developed. Prologues to shape the audience's understanding of events, messengers' speeches to announce offstage <b>action,</b> <b>descriptions</b> of feasts, sudden recognitions, ex machina endings were all established techniques which playwrights exploited and evoked in their comedies.|$|R
40|$|A {{sound and}} {{complete}} approach for encoding the <b>action</b> <b>description</b> language A developed by M. Gelfond and V. Lifschitz in an equational logic program is given. Our results allow {{the comparison of}} the resource-oriented equational logic based approach and various other methods designed for reasoning about actions, most of them based on variants of the situation calculus, which were also related to the <b>action</b> <b>description</b> language recently. A non-trivial extension of A is proposed which allows to handle uncertainty in form of non-deterministic action descriptions, i. e. where actions may have alternative randomized effects. It is described how the equational logic programming approach forms a sound and complete encoding of this extended <b>action</b> <b>description</b> language A ND as well...|$|E
40|$|We {{elaborate}} {{upon the}} usage of action language C for representing and reasoning about biological models. First, we provide a simple extension of C allowing for variables and show its usefulness in modeling biochemical reactions according to the well-known model of BIOCHAM. Second, we show how the biological <b>action</b> <b>description</b> language CTAID can be mapped onto C. Finally, we describe a toolbox for using action languages, including among them, a compiler mapping C and CTAID to logic programs under answer sets semantics along with a web-service integrating different front- and back-ends for addressing dynamical systems by means of <b>action</b> <b>description</b> languages via answer set programming. This is accompanied by an empirical evaluation with existing systems for processing <b>action</b> <b>description</b> languages. ...|$|E
40|$|This paper {{introduces}} an inference {{mechanism for}} reasoning with frame axioms and qualication axioms {{which are not}} included in the <b>action</b> <b>description</b> based on the extended propositional dynamic logic, introduced in a previous paper. Such a mechanism allows us to reason with an incomplete <b>action</b> <b>description.</b> Then we prove that for any particular query, the extra frame axioms and qualication axioms which are needed for answering the query could only involve the objects which are relevant to the query and <b>action</b> <b>description.</b> Therefore, the required extra axioms can be reduced by localization of description language, and we can postpone listing or generating other frame axioms and qualication axioms until needed by a query. In this sense, the frame problem is avoidable. Keywords: Representations of Action, Reasoning about Action, Frame problem 1 Introduction In knowledge representation and reasoning, the frame problem is a central issue in reasoning about actions. A common [...] ...|$|E
40|$|We {{provide both}} a {{semantic}} interpretation and logical (inferential) {{characterization of the}} Markov principle that underlies the main action theories in AI. This principle will be shown to constitute a nonmonotonic assumption that justifies the actual restrictions on <b>action</b> <b>descriptions</b> in these theories, as well as constraints on allowable queries. It will be shown also that the well-known regression principle {{is a consequence of}} the Markov assumption, and it is valid also for non-deterministic domains. ...|$|R
40|$|Abstract. Nonmonotonic causal logic {{became a}} basis for the {{semantics}} of several expressive action languages. Norman McCain and Paolo Ferraris showed how to embed propositional causal theories into logic programming, and this work paved the way to the use of answer set solvers for answering queries about actions described in causal logic. In this paper we generalize these embeddings to first-order causal logic—a system that has been used to simplify the semantics of variables in <b>action</b> <b>descriptions.</b> ...|$|R
40|$|Stimulus {{material}} for studying object-directed actions {{is needed in}} different research contexts, such as action observation, action memory, and imitation. Action items have been generated many times in individual laboratories across the world, but they are used in very few experiments. For future studies in the field, it would be worthwhile to have a larger set of action stimulus material available to a broader research community. Some smaller action databases have already been published, but those often focus on psycholinguistic parameters and static action stimuli. With this article, we introduce an action database with dynamic action stimuli. The database contains <b>action</b> <b>descriptions</b> of 1, 754 object-directed actions that have been rated for familiarity in Germany and in China. For 784 of these actions, action video clips are available. With the use of our database, {{it is possible to}} identify actions that differ in familiarity between Western and Eastern cultures. This variable may be of interest to some researchers in the field, since {{it has been shown that}} familiarity influences action information processing. <b>Action</b> <b>descriptions</b> are listed and categorized in tables that can be downloaded, along with the corresponding video clips, as supplemental material...|$|R
