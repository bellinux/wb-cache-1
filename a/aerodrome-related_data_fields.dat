0|10000|Public
40|$|AbstractData fields {{provide a}} {{flexible}} and highly general model for indexed collections of <b>data.</b> <b>Data</b> <b>Field</b> Haskell is a Haskell dialect that provides {{an instance of}} <b>data</b> <b>fields.</b> It {{can be used for}} very generic collection-oriented programming, with a special emphasis on multidimensional structures. We give {{a brief description of the}} <b>data</b> <b>field</b> model and its underlying theory. We then describe <b>Data</b> <b>Field</b> Haskell, and an implementation...|$|R
40|$|<b>Data</b> <b>fields</b> {{provide a}} {{flexible}} and highly general model for indexed collections of <b>data.</b> <b>Data</b> <b>Field</b> Haskell is a dialect of the functional language Haskell which provides {{an instance of}} <b>data</b> <b>fields.</b> We describe <b>Data</b> <b>Field</b> Haskell and exemplify {{how it can be}} used in the early phase of parallel program design. 1 Introduction Many computing applications require indexed data structures. The canonical indexed data structure is the array. However, for sparse, distributed applications, other, more dynamic indexed data structures are needed. It is desirable to develop such algorithms on a high level first, in order to get them right, since the low level data representations can be intricate. <b>Data</b> <b>Field</b> Haskell provides an instance of <b>data</b> <b>fields</b> [...] a <b>data</b> type for general indexed structures. This Haskell dialect can be used for rapid prototyping of parallel computational algorithms which may involve sparse structures. Various versions of the <b>data</b> <b>field</b> model have been described elsew [...] ...|$|R
40|$|Abstract. <b>Data</b> <b>field</b> {{clustering}} algorithm possesses {{dynamic characteristics}} {{compared with other}} clustering algorithms. By changing {{the parameters of the}} <b>data</b> <b>field</b> model, the results can be dynamically adjusted to meet the target of feature extraction and knowledge discovery in different scales, but the selection and construction of <b>data</b> <b>field</b> model can give rise to different clustering results. This paper presents the different effectiveness of clustering based on various of <b>data</b> <b>field</b> models and its parameters, provides with the scheme to chose the best <b>data</b> <b>field</b> model fitting to the characteristics of the data radiation, and verifies that the best clustering effectiveness can be achieved with the value of radial energy in the golden section...|$|R
40|$|<b>Data</b> <b>fields</b> are partial {{functions}} {{provided with}} explicit domain information. They provide a very general, formal model for collections of data. Algorithms computing data collections {{can be described}} in this formalism at various levels of abstraction: in particular, explicit data distributions are easy to model. Parallel versions of algorithms can then be formally verified against algorithm specifications in the model. Functions computing <b>data</b> <b>fields</b> can be directly programmed in the language <b>Data</b> <b>Field</b> Haskell. In this paper we give a brief introduction to the <b>data</b> <b>field</b> model. We then describe <b>Data</b> <b>Field</b> Haskell and make a small case study of how an algorithm and a parallel version of it both can be specified in the language. We then verify the correctness of the parallel version in the <b>data</b> <b>field</b> model. 1 Introduction Many computing applications require indexed data structures. In many applications the indexing capability provides {{an important part of the}} model. On the [...] ...|$|R
40|$|Nowadays, {{there are}} {{increasing}} amount of <b>data</b> <b>fields</b> of tide and tidal current gained from ocean dynamical environment real-time stereo monitoring platform, model calculation and numerical simulation. Collaborative visualization of these <b>data</b> <b>fields</b> {{on the internet}} is becoming increasingly important for the utility of data. In this paper, we summarize the characters of tide and tidal current <b>data</b> <b>fields</b> and introduce a data process and visualization system. We organize the original data follow a certain criterion, preprocess the data to improve the visualization effective, use snap-shot spatio-temporal data model to organize the <b>data</b> <b>fields</b> and display the changing process of tide and tidal current. Through a well-organized metadata database, <b>data</b> <b>fields</b> are well managed. By using web services we provide proper services {{to meet the needs of}} both the public and professionals on the internet...|$|R
5000|$|... "Rows" [...] {{in tables}} are {{represented}} as records that contain a key value and a <b>data</b> <b>field.</b> This <b>data</b> <b>field</b> may in turn be a tuple containing an Erlang data structure of any complexity.|$|R
40|$|<b>Data</b> <b>fields</b> {{provide a}} {{flexible}} and highly general model for indexed collections of <b>data.</b> <b>Data</b> <b>Field</b> Haskell is a Haskell dialect that provides {{an instance of}} <b>data</b> <b>fields.</b> It {{can be used for}} very generic collection-oriented programming, with a special emphasis on multidimensional structures. We give {{a brief description of the}} <b>data</b> <b>field</b> model and its underlying theory. We then describe <b>Data</b> <b>Field</b> Haskell, and an implementation. 1 Introduction Indexed data structures are important in many computing applications. The canonical indexed data structure is the array, but other indexed structures like hash tables and explicitly parallel entities are also common. In many applications the indexing capability provides an important part of the model: when solving partial differential equations, for instance, the index is often closely related to a physical coordinate, and explicitly parallel algorithms often use processor ID's as indices. Since the time of APL [5] it has been recognised [...] ...|$|R
5000|$|The {{next six}} bits contain {{information}} for specifying the Control Field. The initial two bits are fixed, while {{the last four}} are used to specify length <b>field</b> of the <b>Data</b> <b>Field.</b> The <b>Data</b> <b>Field</b> contains from zero to eight bytes of usable data. (Physical Layer.) ...|$|R
40|$|A {{statistical}} database {{is defined}} as a collection of N records used to produce summary information only. Each record contains confidential category and <b>data</b> <b>fields</b> of the same fixed length. Category fields are used to identify and select records, while <b>data</b> <b>fields</b> hold other information, mostly numerical...|$|R
50|$|T-trees do {{not keep}} {{copies of the}} indexed <b>data</b> <b>fields</b> within the index tree nodes themselves. Instead, they take {{advantage}} {{of the fact that the}} actual data is always in main memory together with the index so that they just contain pointers to the actual <b>data</b> <b>fields.</b>|$|R
40|$|DO: Do enter text only, with no {{formatting}} or styles added. Do use punctuation and capitalization {{as needed}} (except quotations). Do use {{more than one}} form if responses do not fit in the spaces provided. Do submit any formatted text or markups in a separate WORD file. DO NOT: Do not insert tabs or paragraph returns in any <b>data</b> <b>field.</b> Do not use numbering or bullets in any <b>data</b> <b>field.</b> Do not use quotation marks in any <b>data</b> <b>field.</b> Do not submit a response in an unprotected copy of this form. Name...|$|R
40|$|Abstract: This paper puts {{forward a}} new maximal margin {{classification}} algorithm based on general <b>data</b> <b>field</b> (MM-GDF). This method transforms the linear inseparable problem into finding the nearest {{points in the}} general <b>data</b> <b>field</b> (GDF). GDF is inspired by the physical field. Different dimensions represent the different properties. Not all attributes play a decisive role in the classification process. Therefore, how to find decisive data points and attributes is a critical is-sue. This research builds a general <b>data</b> <b>field</b> structure in high dimension data sets. The role of data point is expanded from local to global by GDF. We calculate the weights of data points and features by the potential value in <b>data</b> <b>field</b> space. We put it into practice. Experiments show that MM-GDF method {{is better than the}} exiting common methods...|$|R
25|$|Message {{length is}} Max 260Bytes. <b>Data</b> <b>field</b> MAX 255.|$|R
5000|$|A TFM file {{is broken}} down {{into a series of}} four-byte words, which can contain <b>data</b> <b>fields</b> of various lengths. Any <b>data</b> <b>fields</b> that are more than one byte long are held in big endian order. (The exact same file will be generated, {{regardless}} of architecture of the computer generating it.) ...|$|R
40|$|Set {{containment}} joins are {{a straightforward}} way of joining complex data: Given two relations both including a <b>field</b> with set <b>data,</b> those tuples shall be joined where each entry {{of the set}} of the first relation’s set <b>data</b> <b>field</b> is completely contained in {{the set of the}} second relation’s set <b>data</b> <b>field...</b>|$|R
40|$|Data {{parallelism}} means {{operating on}} distributed tables, <b>data</b> <b>fields,</b> in parallel. An abstract model of data parallelism treats <b>data</b> <b>fields</b> as functions explicitly restricted to a finite set. Data parallel functional languages {{based on this}} view vill reach {{a very high level}} of abstraction. In this report we consider two static analyses that, when successful, give information about the extent of a recursively defined <b>data</b> <b>field.</b> This information can be used to preallocate the <b>data</b> <b>fields</b> and map then efficiently to distributed memory, and to aid the static scheduling of operations. The analyses are cast in the framework of abstract interpretation: a forward analaysis propagates restrictions on inputs to restrictions on outputs, and a backward analysis propagates restrictions the other way. Fixpoint iteration can sometimes be used to solve the equations that arise, and we devise some cases where this is possible...|$|R
50|$|<b>Field</b> delimiters {{separate}} <b>data</b> <b>fields.</b> Record delimiters separate {{groups of}} fields.|$|R
5000|$|BatchSearch {{supports}} extract specific <b>data</b> <b>field</b> (like SMILES) {{for multiple}} queries.|$|R
30|$|Furthermore, {{there are}} {{qualitative}} approaches to describing the big <b>data</b> <b>field</b> in publications such as Chen et al. [13] and Tsai et al. [44]. Note that, although these works do not strive {{to deliver a}} formal definition, {{the description of the}} big <b>data</b> <b>field</b> in both these publications include the same aspects found in the definition themes.|$|R
50|$|PubChemSR {{supports}} a bulk download of selected <b>data</b> <b>fields</b> for multiple chemicals.|$|R
5000|$|ISO 15022: 1999 Securities—Scheme for {{messages}} (<b>Data</b> <b>Field</b> Dictionary) (replaces ISO 7775) ...|$|R
5000|$|Search for images {{based on}} <b>data</b> <b>fields</b> (keywords, country, subject, copyright, etc.).|$|R
5000|$|... the <b>data</b> (<b>Fields,</b> Objects, Managers, etc.) {{encapsulated}} by {{instances of}} the class.|$|R
5000|$|QualityBoth {{versions}} of IEEE 1588 attempt to quantify clock quality based on expected timing deviation, technology used {{to implement the}} clock or location in a stratum schema, although only V1 (IEEE 1588-2002) knows a <b>data</b> <b>field</b> stratum. PTP V2 (IEEE 1588-2008) defines {{the overall quality of}} a clock by using the <b>data</b> <b>fields</b> clockAccuracy and clockClass.|$|R
30|$|We {{calculated}} {{the proportion of}} completed <b>data</b> <b>fields</b> for individual ADE reporting forms by taking the number of <b>data</b> <b>fields</b> completed by the user and dividing this number by the twenty-seven <b>data</b> collection <b>fields</b> contained on the ADE form. An individual <b>data</b> collection <b>field</b> was defined as one unique question-response pair. A <b>data</b> <b>field</b> was marked as filled, if the user provided either a written response or checked off a tick-box. The form was divided into boxes labeled A to I. Boxes B, “Suspect drug”, and F, “Add new medication”, contain duplicate spaces to accommodate users entering more than one drug at a time. If only one culprit drug was suspected, the duplicate space was {{left out of the}} average <b>data</b> <b>field</b> completion rate calculations. If two culprit drugs were suspected, the duplicate space was included in calculations. To calculate the average <b>data</b> <b>field</b> completion rates across all users, we averaged the individual completion rates from all the collected forms. The average and standard deviation for the number of interruptions and time to complete the form were used to calculate the 95  % confidence intervals. We transcribed field notes and coded data using NVivo 10, a qualitative data analysis software {{that can be used to}} interrogate and analyze unstructured qualitative data. We combined inductive reasoning (moving from particular to general) and constant comparison (generalizing concepts and categories) to code the data for themes related to the ADE form, challenges in diagnosing and reporting ADEs, and workflow.|$|R
30|$|Tag: The <b>data</b> <b>field</b> of a tag is {{initialized}} {{to its own}} ID.|$|R
40|$|Abstract. Identification {{research}} on spatial object, such as action identification and validity identification, {{is a hot}} topic {{in recent years and}} much study has focused on it. In this paper, <b>data</b> <b>field</b> is proposed to describe spatial object as a metric and improve the accuracy of identification. Potential function, as a part of <b>data</b> <b>field,</b> is introduced to discover the power of each object. Two kinds of <b>data</b> <b>fields</b> are created to express the personality and common characteristic of each object respectively. Weighted Euclidean Distance (WED) classifier is utilized in final identification. An experiment on real-time person tracking is carried out, and accuracy analysis is also discussed...|$|R
50|$|Data type {{validation}} is customarily {{carried out}} on one or more simple <b>data</b> <b>fields.</b>|$|R
5000|$|Flexibility {{in meeting}} client {{requirements}} (custom screen views, client-defined <b>data</b> <b>fields,</b> special reports, etc.); ...|$|R
5000|$|Chunk data : General purpose <b>data</b> <b>field</b> whose {{definition}} {{varies with the}} chunk type.|$|R
5000|$|Means of {{researches}} {{and collections}} of <b>data</b> (<b>field</b> works, experiments in production lines, etc.) ...|$|R
50|$|Descriptive data (geometrical value) vary {{depending}} on the type of tool. The <b>data</b> <b>fields</b> are specified in the class list of characteristics. The meaning of the geometrical <b>data</b> <b>fields</b> is illustrated in diagrams and pictures. DIN 4000 recommends diagrams and pictures for their explanation. Varying graphics for different functions are stored either in the database, or with the components through data links.|$|R
40|$|This {{position}} paper describes the <b>data</b> <b>field</b> model, a general model for indexed data structures. The {{aim of this}} model is to {{capture the essence of}} the style of programming where computing on data structures is expressed by operations directly on the structures rather than operations on the individual elements. Array and and data parallel languages support this programming style, and functional languages often provide second order operations on lists and other data structures for the same purpose. The <b>data</b> <b>field</b> model is designed to be abstract enough to encompass a wide range of explicitly or implicitly indexed structures. Thus, algorithms which are expressed in terms of <b>data</b> <b>fields</b> and general operations on them will be independent of the choice of structure from this range [...] i. e., generic w. r. t. this choice. This means that the <b>data</b> <b>field</b> approach has some in common with polytypic programming and the theory of shapes...|$|R
40|$|Because of the {{complexity}} of the human structure, and the irregularity of the human tissues, and the discrepancy of human individuality, segmenting and rendering 3 D medical <b>data</b> <b>field</b> are great challenge jobs. Considering the fuzzy characteristics of medical <b>data</b> <b>field,</b> the paper presents a novel sorted cell block projection algorithm based on feature region segmentation and cells sorting of 3 D medical <b>data</b> <b>field.</b> Firstly the existence of the feature region [...] - edge transition region and the feasibility of the cell combining in the medical <b>data</b> <b>field</b> are demonstrated. Secondly, 3 D <b>data</b> <b>field</b> is pretreated to a integral field, and the paper extends the method of segmenting 2 D image and makes {{it can be used to}} segmenting 3 D <b>data</b> <b>field</b> to transform traditional hard segmentation to edge transitional region segmentation which decreases segmentation difficulties, improves segmentation accuracy, and satisfies the requirements of the follow-up visualization process. Thirdly, According to the results of segmentation and the interesting grade of users, cells in the edge transition regions and the non_edge transition regions are combined with different coefficient to guarantee rendering image quality and decrease the number of the cells to be processed. Then, a new volumetric data structure and its storage structure are designed to sort cells according to their feature value, which makes the algorithm can select projected cells to decrease the number of the cells to be processed further. Finally the realization and experiment results show that the algorithm can improve image quality of edge transition region and improve rendering speed effectively...|$|R
30|$|The <b>data</b> <b>fields</b> of a {{back-end}} database are initialized to HaID, ID, TD and DATA.|$|R
50|$|The team {{plays at}} First <b>Data</b> <b>Field.</b> Opened in 1988, the park seats 7,347 fans.|$|R
