280|2826|Public
2500|$|These {{types are}} both subtypes {{of the more}} general existential type T and {{correspond}} to concrete implementation types, so any value {{of one of these}} types is a value of type T. Given a value [...] "t" [...] of type [...] "T", we know that [...] "t.f(t.a)" [...] is well-typed, regardless of what the <b>abstract</b> <b>type</b> X is. This gives flexibility for choosing types suited to a particular implementation while clients that use only values of the interface typethe existential typeare isolated from these choices.|$|E
60|$|During a brief {{visit to}} England {{some years ago}} I had met Miss Haldane {{at the house of}} a relative, and the memory had haunted me during long winter evenings spent in dreamy {{meditation}} beside the twinkling stove and in many a lonely camp when the stars shone down on the waste of whitened grass through the blue transparency of the summer night. The interval had been a time of strenuous effort with me, but through all the stress and struggle, in stinging snowdrift and blinding dust of alkali, I had never lost the remembrance of the maiden who whiled away the sunny afternoons with me under the English elms. Indeed, the recollection of the serene, delicately cut face and the wealth of dusky hair grew sharper as the months went by, until it became an <b>abstract</b> <b>type</b> of all that was desirable in womanhood, rather than a prosaic reality. Now I was to meet its owner once more in the concrete flesh. It may have been merely a young man's fancy, born of a life bare of romance, but I think that idealization was good for me.|$|E
6000|$|There is here {{a quality}} in the {{narration}} more intimate and particular than is general with Hugo; {{but it must be}} owned, on the other hand, that the book is wordy, and even, now and then, a little wearisome. Ursus and his wolf are pleasant enough companions; but the former is nearly as much an <b>abstract</b> <b>type</b> as the latter. There is a beginning, also, of an abuse of conventional conversation, such as may be quite pardonable in the drama where needs must, but is without excuse in the romance. Lastly, I suppose one must say a word or two about the weak points of this not immaculate novel; and if so, it will be best to distinguish at once. The large family of English blunders, to which we have alluded already in speaking of [...] "Les Travailleurs," [...] are of a sort that is really indifferent in art. If Shakespeare makes his ships cast anchor by some seaport of Bohemia, if Hugo imagines Tom-Jim-Jack to be a likely nickname for an English sailor, or if either Shakespeare, or Hugo, or Scott, for that matter, be guilty of [...] "figments enough to confuse the march of a whole history--anachronisms enough to overset all chronology,"[2] the life of their creations, the artistic truth and accuracy of their work, is not so much as compromised. But when we come upon a passage like the sinking of the Ourque in this romance, we can do nothing but cover our face with our hands: the conscientious reader feels a sort of disgrace in the very reading. For such artistic falsehoods, springing from what I have called already an unprincipled avidity after effect, no amount of blame can be exaggerated; and above all, when the criminal is such a man as Victor Hugo. We cannot forgive in him what we might have passed over in a third-rate sensation novelist. Little as he seems to know of the sea and nautical affairs, he must have known very well that vessels do not go down as he makes the Ourque go down; he must have known that such a liberty with fact was against the laws of the game, and incompatible with all appearance of sincerity in conception or workmanship.|$|E
40|$|ABSTRACT: <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. <b>Type</b> the <b>abstract</b> here. KEY WORDS: heat engine, spark {{ignition}} engine, combustion analysis Flame,Electric Fields (A 1...|$|R
40|$|Abstract. A common {{approach}} to hiding implementation details {{is through the}} use of <b>abstract</b> <b>types.</b> In this paper, we present a simple theoretical account of <b>abstract</b> <b>types</b> that make use of a recently developed notion of conditional type equality. This is in contrast to most of the existing theoretical accounts of <b>abstract</b> <b>types,</b> which rely on existential types (or similar variants). In addition, we show that this new approach to <b>abstract</b> <b>types</b> opens a promising avenue to the design and implementation of module systems that can effectively support largescale programming. ...|$|R
50|$|<b>Abstract</b> <b>types</b> are an {{important}} feature in statically typed OOP languages. Many dynamically typed languages have no equivalent feature (although the use of duck <b>typing</b> makes <b>abstract</b> <b>types</b> unnecessary); however traits are found in some modern dynamically-typed languages.|$|R
6000|$|There is here {{a quality}} in the {{narration}} more intimate and particular than is general with Hugo; {{but it must be}} owned, on the other hand, that the book is wordy, and even, now and then, a little wearisome. Ursus and his wolf are pleasant enough companions; but the former is nearly as much an <b>abstract</b> <b>type</b> as the latter. There is a beginning, also, of an abuse of conventional conversation, such as may be quite pardonable in the drama where needs must, but is without excuse in the romance. Lastly, I suppose one must say a word or two about the weak points of this not immaculate novel; and if so, it will be best to distinguish at once. The large family of English blunders, to which we have alluded already in speaking of LES TRAVAILLEURS, are of a sort that is really indifferent in art. If Shakespeare makes his ships cast anchor by some seaport of Bohemia, if Hugo imagines Tom-Tim- Jack to be a likely nickname for an English sailor, or if either Shakespeare, or Hugo, or Scott, for that matter, be guilty of [...] "figments enough to confuse the march of a whole history - anachronisms enough to overset all, chronology," [...] (1) the life of their creations, the artistic truth and accuracy of their work, is not so much as compromised. But when we come upon a passage like the sinking of the [...] "Ourque" [...] in this romance, we can do nothing but cover our face with our hands: the conscientious reader feels a sort of disgrace in the very reading. For such artistic falsehoods, springing from what I have called already an unprincipled avidity after effect, no amount of blame can be exaggerated; and above all, when the criminal is such a man as Victor Hugo. We cannot forgive in him what we might have passed over in a third-rate sensation novelist. Little as he seems to know of the sea and nautical affairs, he must have known very well that vessels do not go down as he makes the [...] "Ourque" [...] go down; he must have known that such a liberty with fact was against the laws of the game, and incompatible with all appearance of sincerity in conception or workmanship.|$|E
60|$|A {{great many}} {{circumstances}} {{have led to}} the neglect in literature of these exuberant types which do actually exist in the ruder classes of society. Perhaps the principal cause is that since Dickens's time the study of the poor has ceased to be an art and become a sort of sham science. Dickens took the poor individually: all modern writing tends to take them collectively. It is said that the modern realist produces a photograph rather than a picture. But this is an inadequate objection. The real trouble with the realist is not that he produces a photograph, but that he produces a composite photograph. It is like all composite photographs, blurred; like all composite photographs, hideous; and like all composite photographs, unlike anything or anybody. The new sociological novels, which attempt to describe the <b>abstract</b> <b>type</b> of the working-classes, sin in practice against the first canon of literature, true when all others are subject to exception. Literature must always be a pointing out of what is interesting in life; but these books are duller than the life they represent. Even supposing that Dickens did exaggerate the degree to which one man differs from another--that was at least an exaggeration upon the side of literature; it was better than a mere attempt to reduce what is actually vivid and unmistakable to what is in comparison colourless or unnoticeable. Even the creditable and necessary efforts of our time in certain matters of social reform have discouraged the old distinctive Dickens treatment. People are so anxious to do something for the poor man that they have a sort of subconscious desire to think {{that there is only one}} kind of man to do it for. Thus while the old accounts were sometimes too steep and crazy, the new became too sweeping and flat. People write about the problem of drink, for instance, as if it were one problem. Dickens could have told them that there is the abyss between heaven and hell between the incongruous excesses of Mr. Pickwick and the fatalistic soaking of Mr. Wickfield. He could have shown that there was nothing in common between the brandy and water of Bob Sawyer and the rum and water of Mr. Stiggins. People talk of imprudent marriages among the poor, as if it were all one question. Dickens could have told them that it is one thing to marry without much money, like Stephen Blackpool, and quite another to marry without the smallest intention of ever trying to get any, like Harold Skimpole. People talk about husbands in the working-classes being kind or brutal to their wives, as if that was the one permanent problem and no other possibility need be considered. Dickens could have told them that there was the case (the by no means uncommon case) of the husband of Mrs. Gargery as well as of the wife of Mr. Quilp. In short, Dickens saw the problem of the poor not as a dead and definite business, but as a living and very complex one. In some ways he would be called much more conservative than the modern sociologists, in some ways much more revolutionary.|$|E
50|$|In {{programming}} languages, an <b>abstract</b> <b>type</b> {{is a type}} in a nominative type {{system that}} cannot be instantiated directly; a type that is not abstract - which can be instantiated - is called a concrete type. Every instance of an <b>abstract</b> <b>type</b> is an instance of some concrete subtype. Abstract types are also known as existential types.|$|E
50|$|Primitive types: Data {{types in}} GSM are {{classified}} into printable and <b>abstract</b> <b>types.</b>|$|R
5000|$|In 1977, Gordon Plotkin {{introduces}} Programming Computable Functions, an <b>abstract</b> <b>typed</b> functional language.|$|R
50|$|Often, <b>abstract</b> <b>types</b> {{will have}} one or more {{implementations}} provided separately, for example, {{in the form of}} concrete subtypes that can be instantiated. In object-oriented programming, an abstract class may include abstract methods or abstract properties that are shared by its subclasses. Other names for language features that are (or may be) used to implement <b>abstract</b> <b>types</b> include traits, mixins, flavors, roles, or type classes.|$|R
50|$|Object-oriented <b>Abstract</b> <b>Type</b> Hierarchy (OATH) is a {{class library}} for C++ from Texas Instruments.|$|E
5000|$|By inheriting from an <b>abstract</b> <b>type,</b> and not {{overriding}} all missing features {{necessary to}} complete the class definition.|$|E
50|$|This insulates client code from object {{creation}} by having clients ask a factory object {{to create an}} object of the desired <b>abstract</b> <b>type</b> and to return an abstract pointer to the object.|$|E
40|$|The {{concept of}} dynamic <b>abstract</b> data <b>types</b> was {{recently}} proposed {{by two of}} the authors as a dynamic extension of the well-known concept of <b>abstract</b> data <b>types,</b> motivated by several recent approaches in the area of algebraic specifications, object orientation, evolving algebras, and graph transformations. The basic idea of dynamic <b>abstract</b> data <b>types</b> is to extend <b>abstract</b> data <b>types</b> by dynamic operations which are tranformations between <b>abstract</b> data <b>types.</b> In this paper we consider a specific kind of dynamic <b>abstract</b> data <b>types</b> where the transformations are defined by rules in the sense of algebraic graph transformations. The concept of attributed graph transformations is used to define this new version of dynamic <b>abstract</b> data <b>types</b> and to show some important properties of the corresponding transition category. The constructions are illustrated by a small example from the area of data bases...|$|R
3000|$|... [...]. The quorum-based {{protocol}} for <b>abstract</b> <b>types</b> of operations on objects {{is discussed in}} the paper [5].|$|R
5000|$|The {{types of}} the {{inputs and outputs}} of an OWL-S atomic process {{correspond}} to WSDL <b>abstract</b> <b>types.</b>|$|R
5000|$|... "No two created {{beings are}} exactly alike. And their {{individuality}} is no imperfection. On the contrary, {{the perfection of}} each created thing is not merely its conformity to an <b>abstract</b> <b>type</b> but in its own individual identity with itself." ...|$|E
5000|$|Two-dimensional pictures, such as {{photographs}} and line drawings, {{are the most}} <b>abstract</b> <b>type</b> of tangible symbols. They are commonly used for both expressive and receptive communication, whereas the three-dimensional symbols are often used for receptive only communication (i.e. to cue the individual for upcoming events). http://www.pac6.org/images/upload/Tangible_Symbols_Tangible_Outcomes.pdf ...|$|E
50|$|Some phonetic palindromes must be {{mechanically}} reversed, {{involving the}} use of sound recording equipment or reverse tape effects. Another, more <b>abstract</b> <b>type,</b> are words that are {{identical to the original}} when separated into their phonetic components (according to a system such as the International Phonetic Alphabet) and reversed.|$|E
5000|$|Julia allows only subtyping of <b>abstract</b> <b>types</b> {{and uses}} {{composition}} {{as an alternative}} to inheritance. It however has multiple dispatch.|$|R
40|$|We {{present a}} variant of the Standard ML module system where {{parameterized}} <b>abstract</b> <b>types</b> (i. e. functors returning generarive types) map provably equal arguments to compatible <b>abstract</b> <b>types,</b> instead of generating distinct types at each application as in Standard ML. This extension solves the full transparency problem (how to give syntactic signatures for higher-order functors that express exactly their propagation of type equations), and also provides better sup- port for non-closed code fragments...|$|R
40|$|AbstractThe term-generated {{models of}} an <b>abstract</b> data <b>type</b> can be {{represented}} by congruence relations on the term algebra. Total and partial heterogeneous algebras are considered as models of hierarchical <b>abstract</b> data <b>types.</b> Particular classes of models are studied and it is investigated under which conditions they form a complete lattice. This theory allows also to describe programming languages (and their semantic models) by <b>abstract</b> <b>types.</b> As example we present a simple deterministic stream processing language...|$|R
50|$|Any {{type that}} does not specify an {{implementation}} is an abstract data type. For instance, a stack (which is an <b>abstract</b> <b>type)</b> can be implemented as an array (a contiguous block of memory containing multiple values), or as a linked list (a set of non-contiguous memory blocks linked by pointers).|$|E
50|$|The {{faceting}} is a noble polyhedron. With six six-sided faces {{around each}} vertex, it is topologically {{equivalent to a}} quotient space of the hyperbolic order-6 hexagonal tiling, {6,6} and is an <b>abstract</b> <b>type</b> {6,6}6. It is one of 10 abstract regular polyhedron of index two with vertices on one orbit.|$|E
5000|$|The client code has no {{knowledge}} whatsoever {{of the concrete}} type, not needing to include any header files or class declarations related to it. The client code deals only with the <b>abstract</b> <b>type.</b> Objects of a concrete type are indeed created by the factory, but the client code accesses such objects only through their abstract interface.|$|E
40|$|Applicative functors {{and fully}} {{transparent}} higher-order modules We present {{a variant of}} the Standard ML module system where parameterized <b>abstract</b> <b>types</b> (i. e. functors returning generative types) map provably equal arguments to compatible <b>abstract</b> <b>types,</b> instead of generating distinct types at each application as in Standard ML. This extension solves the full transparency problem (how to give syntactic signatures for higher-order functors that express exactly their propagation of type equations), and also provides better support for non-closed code fragments. ...|$|R
40|$|Software {{developers}} often structure {{programs in}} such a way that different pieces of code constitute distinct principals. Types help define the protocol by which these principals interact. In particular, <b>abstract</b> <b>types</b> allow a principal to make strong assumptions about how well-typed clients use the facilities that it provides. We show how the notions of principals and type abstraction can be formalized within a language. Different principals can know the implementation of different <b>abstract</b> <b>types.</b> We use additional syntax to track the flow of values with <b>abstract</b> <b>types</b> during the evaluation of a program and demonstrate how this framework supports syntactic proofs (in the style of subject reduction) for type-abstraction properties. Such properties have traditionally required semantic arguments; using syntax avoids the need to build a model for the language. We present various typed lambda calculi with principals, including versions that have mutable state and recursive types...|$|R
50|$|<b>Abstract</b> <b>types</b> {{are useful}} in {{that they can be}} used to define and enforce a protocol; a set of {{operations}} that all objects implementing the protocol must support.|$|R
50|$|CLU {{does not}} perform {{implicit}} type conversions. In a cluster, the explicit type conversions {{up and down}} change between the <b>abstract</b> <b>type</b> and the representation. There is a universal type any, and a procedure force to check that an object is a certain type. Objects may be mutable or immutable, the latter being base types such as integers, booleans, characters and strings.|$|E
5000|$|He {{stayed in}} Paris in 1952 and in 1954-1955 {{during which he}} met Benjamin Péret and {{associated}} with the Surrealists, although he soon parted with the group, joining instead the company of his friend the painter Simon Hantaï. Using the technique of scraping, he adopted a gestural style and created an <b>abstract</b> <b>type</b> of painting, still very colorful with an organic, aleatory design.|$|E
50|$|In {{object-oriented}} languages, {{the term}} interface {{is often used}} to define an <b>abstract</b> <b>type</b> that contains no data or code, but defines behaviors as method signatures. A class having code and data for all the methods corresponding to that interface is said to implement that interface. Furthermore, a class can implement multiple interfaces, and hence can be of different types at the same time.|$|E
5000|$|As an ADT, the <b>abstract</b> tree <b>type</b> T with {{values of}} some type E is defined, using the <b>abstract</b> forest <b>type</b> F (list of trees), by the functions: ...|$|R
40|$|We {{present an}} {{extension}} of XDuce, a programming language dedicated to the processing of XML documents, with polymorphism and <b>abstract</b> <b>types,</b> two crucial features for programming in the large. We show that this extension {{makes it possible to}} deal with first class functions and eases the interoperability with other languages. A key mechanism of XDuce is its powerful pattern matching construction and we mainly focus on this construction and its interaction with <b>abstract</b> <b>types.</b> Additionally, we present a novel type inference algorithm for XDuce patterns, which works directly on the syntax of patterns...|$|R
40|$|Abstract. The paper {{shows how}} the code {{generator}} of Isabelle/HOL supports data refinement, i. e., providing efficient code for operations on <b>abstract</b> <b>types,</b> e. g., sets or numbers. This allows all tools that employ code generation, e. g., Quickcheck or proof by evaluation, to compute with these <b>abstract</b> <b>types.</b> At the core {{is an extension of}} the code generator to deal with data type invariants. In order to automate the process of setting up specific data refinements, two packages for transferring definitions and theorems between types are exploited. ...|$|R
