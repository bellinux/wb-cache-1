370|95|Public
25|$|ClearType {{will not}} work as {{intended}} on displays that have no fixed pixel positions, such as CRT displays, however it will still have some <b>antialiasing</b> effect and may be preferable to some users as compared to non-anti-aliased type.|$|E
25|$|Dillo was {{originally}} {{written in the}} C programming language with the GTK+ GUI toolkit. The first versions were based on an earlier browser called Armadillo, hence the name. Dillo 2, written with both C and C++ components and the Fast Light Toolkit (FLTK), was released on October 14, 2008. Text <b>antialiasing,</b> support for character sets other than Latin-1, HTTP compression capability, and improved page rendering were all added. The move to FLTK from GTK+ also removed many of the project's dependencies and reduced Dillo's memory footprint by 50%.|$|E
25|$|Star Wars: Bounty Hunter began {{life when}} LucasArts {{was asked to}} make an Episode II-based game which {{featured}} Jango Fett. In March 2001 game design documents were presented, and development began shortly after. The PlayStation 2 and Nintendo GameCube versions of the game have different custom in-house graphics engines, each designed specifically {{to take advantage of}} the two platforms' unique strengths and work around their unique limitations, but the core game engine is identical. In the PS2 version they took advantage of both vector unit (VU) chips to drive the graphics to maximum performance. The DMA bandwidth was taken advantage of to use a high number of textures. There is full-screen <b>antialiasing</b> and texture mip mapping support. They used the second VU1 chip to handle all the character skinning and VU0 to handle all the skeletal animation transforms. Which enabled dozens of characters to be on-screen without bogging down the frame rate. They had 10 individually optimized rendering loops on VU1 to speed up the rendering process. Their PS2 graphics engine could move 10,000,000 triangles per second, and adding the gameplay, collision, logic, textures, sound would go down accordingly to around 30,000 to 50,000 triangles per frame, all at an average frame rate of 30 frames per second.|$|E
5000|$|High {{resolution}} <b>antialiased</b> snapshots {{for creating}} publication quality renderings ...|$|R
5000|$|... osgText — Quality <b>antialiased</b> fonts, TrueType and FreeType font support.|$|R
5000|$|... #Caption: xclockuses the render {{extension}} for rendering translucent and <b>antialiased</b> {{clock hands}} ...|$|R
2500|$|On vector {{machines}} {{the lines}} would be smooth but on raster devices Bresenham's algorithm is used (note the [...] "jaggies" [...] {{on some of}} the bonds, which can be largely removed with <b>antialiasing</b> software.) ...|$|E
5000|$|<b>Antialiasing</b> like FXAA, AGAA, MSAA, SSAA and SMAA {{and custom}} <b>antialiasing</b> methods ...|$|E
5000|$|IntelliSample 4.0 Technology - 16x Anisotropic Filtering, Rotating Grid <b>Antialiasing</b> and Transparency <b>Antialiasing</b> (see here) ...|$|E
40|$|Both texture {{maps and}} {{procedural}} shaders suffer from rendering artifacts during minification. Unlike texture maps, there exist no good automatic method to <b>antialias</b> procedural shaders. Given a procedural shader for a surface, {{we present a}} method that automatically creates an <b>antialiased</b> version of the procedural shader. The new procedural shader maintains the original shader’s details but reduces artifacts (aliasing or noise) due to minification. This new algorithm creates a pyramid similar to a MIP-Map in order to represent the shader. Instead of storing per-texel color, pyramid stores weighted sums of reflectance functions, allowing {{a wider range of}} effects to be <b>antialiased.</b> The stored reflectance functions are automatically selected based on an analysis of the different reflectances found over the surface. When the rendered surface is viewed at close range, the original shader is used, but as the texture footprint grows, the algorithm gradually replaces the shader’s result with an <b>antialiased</b> one...|$|R
40|$|The RealityEngine TM {{graphics}} {{system is}} the first {{of a new generation of}} systems designed primarily to render texture mapped, <b>antialiased</b> polygons. This paper describes the architecture of the RealityEngine graphics system, then justifies some of the decisions made during its design. The implementation is near-massively parallel, employing 353 independent processors in its fullest configuration, resulting in a measured fill rate of over 240 million <b>antialiased,</b> texture mapped pixels per second. Rendering performance exceeds 1 million <b>antialiased,</b> texture mapped triangles per second. In addition to supporting the functions required of a general purpose, high-end graphics workstation, the system enables realtime, “outthe-window” image generation and interactive image processing...|$|R
40|$|Rendering of {{high quality}} {{animation}} sequences is very computation intensive task. Traditional <b>antialiased</b> rendering image takes a few hours per frame and the sequence linearly takes a number of hours. Opposed to traditional rendering methods, Image-Based Rendering (IBR) derives an arbitrary view from other views. In this work, we propose fast rendering of <b>antialiased</b> animated sequences incorporating traditional ray tracing and IBR techniques...|$|R
50|$|Xiaolin Wu's line {{algorithm}} is an algorithm for line <b>antialiasing,</b> which {{was presented in}} the article An Efficient <b>Antialiasing</b> Technique in the July 1991 issue of Computer Graphics, {{as well as in}} the article Fast <b>Antialiasing</b> in the June 1992 issue of Dr. Dobb's Journal.|$|E
50|$|Upon {{launch of}} the GeForce 7 family of {{graphics}} processing units, IntelliSample 4.0 {{was considered to be}} an exclusive feature of the GeForce 7 series of GPUs. However, version 91.47 (and subsequent versions) of the Nvidia ForceWare drivers enable the features of IntelliSample 4.0 on the GeForce 6 GPUs. IntelliSample 4.0 introduces two new <b>antialiasing</b> modes, known as Transparency Supersampling <b>Antialiasing</b> and Transparency Multisampling <b>Antialiasing.</b> These new <b>antialiasing</b> modes enhance the image quality of thin-lined objects such as fences, trees, vegetation and grass in various games.|$|E
50|$|This is a {{standalone}} {{rendering mode}} that offers up {{to double the}} <b>antialiasing</b> performance by splitting the <b>antialiasing</b> workload between the two graphics cards, offering superior image quality. One GPU performs an <b>antialiasing</b> pattern which is slightly offset to the usual pattern (for example, slightly up and to the right), and the second GPU uses a pattern offset by an equal amount {{in the opposite direction}} (down and to the left). Compositing both the results gives higher image quality than is normally possible. This mode is not intended for higher frame rates, and can actually lower performance, but is instead intended for games which are not GPU-bound, offering a clearer image in place of better performance. When enabled, SLI <b>Antialiasing</b> offers advanced <b>antialiasing</b> options: SLI 8X, SLI 16X, and SLI 32x (for Quad SLI systems only).|$|E
50|$|The graphic {{quality is}} {{generally}} increased over GP4 through more {{extensive use of}} <b>antialiased</b> graphics and animated sequence.|$|R
5000|$|... polygon {{mode and}} <b>antialiased</b> polygon {{rendering}} are not supported, although rendering using multisample {{is still possible}} (rather than alpha border fragments), ...|$|R
40|$|Edit {{propagation}} on images/videos {{has become}} more and more popular in recent years due to simple and intuitive interaction. It propagates sparse user edits to the whole data following the policy that nearby regions with similar appearances receive similar edits. While it gives a friendly editing mode, it often produces aliasing artifacts on edge pixels. In this paper, we present a simple algorithm to resolve this artifact for edit propagation. The key in our method is a new representation called <b>Antialias</b> Map, in which we represent each <b>antialiased</b> edge pixel by a linear interpolation of neighboring pixels around the edge, and instead of considering the original edge pixels in solving edit propagation, we consider those neighboring pixels. We demonstrate that our work is effective in preserving <b>antialiased</b> edges for edit propagation and could be easily integrated with existing edit propagation methods such as [1, 2]...|$|R
50|$|Font Smoothing, {{system-wide}} <b>antialiasing</b> {{for type}} was also introduced.|$|E
5000|$|Pixel, {{line and}} polygon <b>antialiasing</b> with sub-pixel {{accuracy}} (combined with alpha blending) ...|$|E
50|$|Intellisample is {{the brand}} name for NVIDIA's <b>antialiasing</b> method in GeForce {{graphics}} cards.|$|E
5000|$|Robert McNamara, Joel McCormack, Norman P. Jouppi. Prefiltered <b>Antialiased</b> Lines Using Half-Plane Distance Functions, Research Report 98/2, Compaq Western Research Laboratory, August 2000. of Workshop paper listed {{immediately}} below.|$|R
5000|$|Robert McNamara, Joel McCormack, Norman P. Jouppi. Prefiltered <b>Antialiased</b> Lines Using Half-Plane Distance Functions, Proceedings of the 2000 EUROGRAPHICS/SIGGRAPH Workshop on Graphics Hardware, ACM Press, New York, August 2000, pp. 77-85.|$|R
50|$|Recent {{iterations}} of Olympus DSLR's (including the E-420, E-520, E-620, E-30, and E-3) {{have used}} a relatively strong <b>antialias</b> filter. This {{has the effect of}} eliminating moire and aliasing artifacts, but reduces the camera's ability to capture very fine detail when used with very sharp lenses. In the E-5, Olympus has chosen to use a much weaker <b>antialias</b> filter along with a new software demosaicing/sharpening algorithm that is claimed to preserve fine detail while eliminating moire. In principle this approach allows the E-5 to capture more fine detail than cameras with similar resolution (when used with sufficiently sharp lenses).|$|R
5000|$|Xiaolin Wu's line algorithm, a {{similarly}} fast method of drawing lines with <b>antialiasing</b> ...|$|E
50|$|Changing of OpenGL/Direct3D {{settings}} (<b>antialiasing</b> or anisotropic filtering, for example) {{separate from}} one another.|$|E
5000|$|... 2015. Thinning based <b>Antialiasing</b> Approach for Visual Saliency of Digital Images. SCITEPRESS Digital Library ...|$|E
5000|$|It {{provides}} several rendering {{operations and}} also does alpha blending. [...] it serves primarily to implement <b>antialiased</b> fonts, but for example KWin, KDE’s window manager {{uses it to}} draw drop shadows and translucency in case OpenGL is not available.|$|R
30|$|There is a {{delay of}} {{typically}} 58 samples between the transmitter and the receiver. This delay {{is due to}} digital <b>antialias</b> filters in the D/A and A/D converters and (but to a less extent) delays in the analog hardware. This delay is taken into account by letting the transmitting frames be scheduled 12 symbols (which correspond to 60 samples) before the corresponding receive frames. These delays lead to a nonnegligible overhead when switching between transmit and receive mode. The delay could be brought down to 4 symbols if the <b>antialias</b> filters of the D/A and A/D converters were removed. Unfortunately, {{we were not able}} to do this. However, in the throughput figures, we account for this delay as 4 symbols instead of 12, to show a result that better reflects the performance if this small practical issue could be resolved.|$|R
40|$|This article {{shows that}} the same ray tracing program {{can be used for}} {{performing}} a fast previewing during scene composition as well as for calculating the final <b>antialiased</b> high quality image. The described algorithm controls a strong undersampling so that a rough approximation can be shown within a few seconds. Then this approximating image will be adaptively refined improving its quality continuously until the final error-free <b>antialiased</b> image is reached. Small changes in the scene will be rendered quite fast because our algorithm additionally exploits similarities to a preceding image. It is based on a recursive image subdivision algorithm which uses a sophisticated heuristic priority calculation to detect nonhomogenous or changed regions and to prefer them in adaptive refinement. Other regions are preliminary treated by interpolation or copied from the preceding image until the priority schedule opens them for more accurate calculation. Our algorithm is very efficient concerning [...] ...|$|R
5000|$|... #Caption: Composite macro {{photograph}} of {{three types of}} rendering for e: monochrome, traditional <b>antialiasing,</b> subpixel rendering (from top) ...|$|E
5000|$|Support for multisample <b>antialiasing</b> (MSAA) (available on Windows v0.9.11 and later, and on OS X v0.9.9 and later) ...|$|E
5000|$|Built-in 5×8 pixel ASCII font. Support for {{rendering}} tilted characters, and scaling by integer factors (of course no <b>antialiasing)</b> ...|$|E
50|$|The user {{interface}} relies upon Xaw-based interface toolkits. However, XPaint can be compiled with the libxaw3dxft library, {{which is a}} variant of Athena widgets with a more modern look and feel. Libxaw3dxft makes use of UTF8 and <b>antialiased</b> fonts in the menus, and was originally developed as a subproject in order to modernize XPaint. It is now a separate project.|$|R
40|$|We {{demonstrated}} PM- 64 QAM, 20 x 124. 8 -Gb/s Nyquist-WDM over 1306 Km of PSCF in an EDFA-only submarine system configuration. The raw (net) SE was 10. 4 (8. 67) b/s/Hz, {{thanks to}} digital spectral shaping. The Tx DACs operated at a record-low 1. 15 sample/symb thanks to advanced <b>antialias</b> filters. The SEDP was 11, 327 (b km) /(s Hz), highest for PM- 64 QAM...|$|R
30|$|Decimating a uniformly {{sampled signal}} a factor D {{involves}} low-pass <b>antialias</b> filtering with normalized cutoff frequency 1 /D followed by picking out every D th sample. Alternatively, decimation {{can be done}} in the frequency domain using the fast Fourier transform (FFT) algorithm, after zero-padding the signal and truncating the FFT. We outline three approaches to decimate non-uniformly sampled signals, which are all based on interpolation. The interpolation is done in different domains, and the inter-sample behavior {{does not need to be}} known. The first one interpolates the signal to a uniformly sampling, after which standard decimation can be applied. The second one interpolates a continuous-time convolution integral, that implements the <b>antialias</b> filter, after which every D th sample can be picked out. The third frequency domain approach computes an approximate Fourier transform, after which truncation and IFFT give the desired result. Simulations indicate that the second approach is particularly useful. A thorough analysis is therefore performed for this case, using the assumption that the non-uniformly distributed sampling instants are generated by a stochastic process.|$|R
