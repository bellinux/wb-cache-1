10000|10000|Public
5|$|Blanche Lazzell (October 10, 1878 – June 1, 1956) was an American painter, {{printmaker}} and designer. Known {{especially for}} her white-line woodcuts, {{she was an}} early modernist American artist, bringing elements of Cubism and <b>abstraction</b> into her art.|$|E
5|$|Since then Rovio has self-published {{almost all}} of the later ports of the game, with the {{exception}} of the PSP version, which was produced under license by <b>Abstraction</b> Games.|$|E
5|$|The {{provision}} of {{water supply and}} sanitation is generally of good quality. Regional authorities provide water <b>abstraction,</b> treatment and distribution infrastructure to most developed areas.|$|E
40|$|<b>Abstractions</b> {{useful in}} {{fault-tolerant}} and distributed systems are described. The <b>abstractions</b> are specified as properties of protocols, hence {{they have a}} different flavor from <b>abstractions</b> prevalent in sequential and concurrent programming. Among the <b>abstractions</b> discussed are agreement, order, failure detection, and stable storage...|$|R
40|$|In {{the second}} report of this serie we have {{analyzed}} the properties {{that should have}} a model to be communicable. Models used in the software development express both <b>abstractions</b> and realizations of these <b>abstractions.</b> In this paper we analyze how two-level models (<b>abstractions</b> and realizations) require introducing new conditions for model communicabilityIn the second report of this serie we have analyzed the properties that should have a model to be communicable. Models used in the software development express both <b>abstractions</b> and realizations of these <b>abstractions.</b> In this paper we analyze how two-level models (<b>abstractions</b> and realizations) require introducing new conditions for model communicabilityPreprin...|$|R
50|$|B. <b>Abstractions</b> {{should not}} depend on details. Details should depend on <b>abstractions.</b>|$|R
5|$|When Lichtenstein had {{his first}} solo show at the Leo Castelli Gallery in February 1962, it sold out before opening. Golf Ball {{was one of the}} works that Lichtenstein exhibited. Later, Lichtenstein {{included}} Golf Ball in Still Life with Goldfish Bowl, 1972, and Go for Baroque, 1979. The painting exemplifies the novel superimposition of <b>abstraction</b> and figuration. The work also represents <b>abstraction</b> as a result of elimination of three-dimensionality, chiaroscuro and a landscape context.|$|E
5|$|Cobb has {{consistently}} opposed the splitting {{of education and}} knowledge into discrete and insulated disciplines and departments. He believes that the current university model encourages excessive <b>abstraction</b> because each specialized area of study defines its own frame of reference and then tends to ignore the others, discouraging interdisciplinary dialogue and inhibiting a broad understanding of the world.|$|E
5|$|Mains {{water and}} {{sewerage}} services {{are provided by}} Thames Water Utilities Limited, a private sector water supply company, whilst water <b>abstraction</b> and disposal is regulated by the Environment Agency. Reading's water supply is largely derived from underground aquifers, and as a consequence the water is hard.|$|E
40|$|We present {{mobile agent}} <b>abstractions</b> {{in terms of}} a few basic {{mobility}} and connec-tivity features. The features used in formulating the <b>abstractions</b> are identied as self-hopping, push by host, retraction by originator, push by originator, and mobility and disconnection of host machines. Combining these primitives leads to dierent agent <b>abstractions</b> with varying avors of mobility and interaction with hosts. Six such <b>abstractions</b> namely Autonomous Agent, Messenger Agent, Controlled Agent, Greedy Agent, Phoenix Agent and Disconnected Agent are presented. A unique feature of this work is that the <b>abstractions</b> themselves are described in the more general Ambient Calculus. Ambient descriptions bring out the subtle dierences between structural and behavioral properties of the agent <b>abstractions.</b> Guidelines for mapping the <b>abstractions</b> to an implementation over a mobility framework are also discussed...|$|R
40|$|Computing, like mathematics, is {{the study}} of {{reusable}} <b>abstractions.</b> <b>Abstractions</b> in computing include numbers, lists, channels, processes, protocols, and programming languages. These <b>abstractions</b> have algorithmic value in designing, representing, and reasoning about computational processes. Logic is the calculus of computing — it is used to delineate the precise meaning and scope of these <b>abstractions,</b> and to calculate at the abstract level...|$|R
40|$|Architectural {{objects are}} {{expressed}} {{through a variety}} of <b>abstractions,</b> each presenting a different aspect. In an architectural analysis, <b>abstractions</b> can be treated as individual entities, categorized, and hyperlinked within an organizational structure. However, such systems lack the possibility to distinguish individual components within the <b>abstractions</b> and to relate these within and between <b>abstractions.</b> Instead, by adopting a uniform language such as XML as a common syntax for representing these <b>abstractions,</b> these can be interpreted and broken up into components, these components related, and the relationships added to the representation. The result is a richer information structure: an integrated structure of components and relationships represented in a uniform way. This information structure can provide new views not inherent to the original structure of <b>abstractions,</b> offering new interpretations that can lead to new <b>abstractions.</b> This paper discusses a prototype application for representing <b>abstractions</b> using XML, and the strengths and limitations of XML for this task...|$|R
5|$|Ochre is {{reported}} from some early MSA sites, for example at Kapthurin and Twin Rivers, and is common after c. 100 ka. Barham argues {{that even if}} some of this ochre was used in a symbolic, color-related role then this <b>abstraction</b> could not have worked without language. Ochre, he suggests, could be one proxy for {{trying to find the}} emergence of language.|$|E
25|$|The {{tendency}} towards <b>abstraction</b> in art {{corresponded with}} <b>abstraction</b> in architecture. Publication of Concerning the Spiritual in Art in 1912 by Wassily Kandinsky, his first advocacy of <b>abstraction</b> while still {{involved in the}} Blau Reiter phaze, marks a beginning of <b>abstraction</b> in expressionism and <b>abstraction</b> in expressionist architecture. The conception of the Einstein Tower by Erich Mendelson was not far behind Kandinsky, in advancing <b>abstraction</b> in architecture. By the publication of Kandinsky's Point and Line to Plane in 1926 a rigorous and more geometric form of <b>abstraction</b> emerged, and Kandinsky's work took on clearer and drafted lines. The trends in architecture are not dissimilar, as the Bauhaus was gaining attention and expressionist architecture was giving way to the geometric abstractions of modern architecture.|$|E
25|$|Digital art, hard-edge painting, {{geometric}} <b>abstraction,</b> minimalism, lyrical <b>abstraction,</b> op art, abstract expressionism, color field painting, monochrome painting, assemblage, neo-Dada, shaped canvas painting, {{are a few}} continuing {{and current}} directions relating to <b>abstraction</b> {{at the beginning of}} the 21st century.|$|E
5000|$|A lambda lift {{transformation}} takes a {{lambda expression}} and lifts all lambda <b>abstractions</b> {{to the top}} of the expression. The <b>abstractions</b> are then translated into recursive functions, which eliminates the lambda <b>abstractions.</b> The result is a functional program in the form, ...|$|R
5000|$|Chains of <b>abstractions</b> can be construed, {{moving from}} neural impulses arising from sensory {{perception}} to basic <b>abstractions</b> such as color or shape, to experiential <b>abstractions</b> {{such as a}} specific cat, to semantic <b>abstractions</b> such as the [...] "idea" [...] of a CAT, to classes of objects such as [...] "mammals" [...] and even categories such as [...] "object" [...] as opposed to [...] "action".|$|R
40|$|The formal {{analysis}} {{and design of}} control systems is one of recent trends in control theory. In this area, {{in order to reduce}} the complexity and scale of control systems, finite <b>abstractions</b> of control systems are introduced and explored. In non-disturbance case, the controller of control systems is often generated from the controller of finite <b>abstractions.</b> Recently, Pola and Tabuada provide approximate finite <b>abstractions</b> for linear control systems with disturbance inputs. However, these finite <b>abstractions</b> and original linear systems do not always share the identical specifications, which obstructs designing controller (of linear systems) based on their finite <b>abstractions.</b> This paper tries to bridge such gap between linear systems and their finite <b>abstractions.</b> Comment: 32 pages, 4 figue...|$|R
25|$|Both {{geometric}} <b>abstraction</b> and lyrical <b>abstraction</b> {{are often}} totally abstract. Among the very numerous art movements that embody partial <b>abstraction</b> {{would be for}} instance fauvism in which color is conspicuously and deliberately altered vis-a-vis reality, and cubism, which blatantly alters the forms of the real life entities depicted.|$|E
25|$|Bracket <b>abstraction</b> induces a {{translation}} from lambda terms to combinator expressions, by interpreting lambda-abstractions using the bracket <b>abstraction</b> algorithm.|$|E
25|$|<b>Abstraction</b> {{indicates}} {{a departure from}} reality in depiction of imagery in art. This departure from accurate representation can be slight, partial, or complete. <b>Abstraction</b> exists along a continuum. Even art that aims for verisimilitude of the highest degree {{can be said to}} be abstract, at least theoretically, since perfect representation is likely to be exceedingly elusive. Artwork which takes liberties, altering for instance color and form in ways that are conspicuous, can be said to be partially abstract. Total <b>abstraction</b> bears no trace of any reference to anything recognizable. In geometric <b>abstraction,</b> for instance, one is unlikely to find references to naturalistic entities. Figurative art and total <b>abstraction</b> are almost mutually exclusive. But figurative and representational (or realistic) art often contains partial <b>abstraction.</b>|$|E
40|$|The use of {{hierarchical}} <b>abstractions</b> allows processing at {{an abstract}} level {{so that the}} complexity of low-level processing can be avoided or delayed. The idea of hierarchical <b>abstractions</b> is a simple but powerful one in intelligent engineering systems. It is commonly used {{in a wide range}} of applications, such as those for design, planning, learning, and natural language processing. It is also ubiquitous in many general paradigms for intelligent systems, such as heuristic search and blackboard architectures. Despite its usefulness and widespread use, the reduction in complexity achieved through hierarchical <b>abstractions</b> has been only informally understood. This can lead to suboptimal designs of hierarchical <b>abstractions.</b> In the present paper, we derive formulas to show how hierarchical <b>abstractions</b> reduce complexity in intelligent engineering systems. Formalizing the costs and benefits of hierarchical <b>abstractions</b> also allows us to see exactly when what kinds of <b>abstractions</b> are useful. We illustrate the practicality of this approach with IPDOS, a system for designing offshore structures. With an improved understanding of the power of hierarchical <b>abstractions,</b> we hope to stimulate even greater use of such <b>abstractions</b> in computing for engineering. link_to_subscribed_fulltex...|$|R
40|$|This paper {{describes}} two novel <b>abstractions</b> {{that help}} soft- ware engineers work in developing regions to align social and technical factors when building communication systems. The <b>abstractions</b> extend two concepts familiar to engineers of computer networks and applications: the Open Systems Interconnect stack for design, and Quality of Service for eval- uation. The novel {{nature of the}} <b>abstractions</b> lies in how they help cultivate awareness of socio-cultural and technical is- sues when designing and evaluating communication bridges in the eld. Advantages of the <b>abstractions</b> are {{that they can be}} understood easily by software engineers, they aid communication with bene ciaries, and can therefore facili- tate collaboration. The paper makes an argument for these socially aware <b>abstractions,</b> describes the <b>abstractions</b> in de- tail, provides examples of how we used the new <b>abstractions</b> in the eld and then gives practical guidelines for how to use them. The simple nature of the new <b>abstractions</b> can help software engineers and end-users to work together to produce useful information technology based communication systems for people in developing regions. Telkom, Cisco, THRIP, NRF, SANPADWeb of Scienc...|$|R
40|$|Encapsulated <b>abstractions</b> are {{fundamental}} in object-oriented programming. A single class may employ multiple <b>abstractions</b> {{to achieve its}} purpose. Such <b>abstractions</b> are often related and combined in disciplined ways. This paper explores ways to express, verify and rely on logical relationships between <b>abstractions.</b> It introduces two general specification mechanisms: export clauses for relating <b>abstractions</b> in individual classes, and axiom clauses for relating <b>abstractions</b> in a class and all its descendants. MultiStar, an automatic verification tool based on separation logic and abstract predicate families, implements these mechanisms in a multiple inheritance setting. Several verified examples illustrate MultiStar’s underlying logic. To demonstrate the flexibility of our approach, we also used MultiStar to verify the core iterator hierarchy of a popular data structure library...|$|R
25|$|Eventually {{abstract}} {{painting in}} America evolved into movements such as Neo-Dada, Color Field painting, Post painterly <b>abstraction,</b> Op art, hard-edge painting, Minimal art, shaped canvas painting, Lyrical <b>Abstraction,</b> Neo-expressionism and {{the continuation of}} Abstract expressionism. As {{a response to the}} tendency toward <b>abstraction</b> imagery emerged through various new movements, notably Pop art.|$|E
25|$|Zhang, J., Silvescu, A., and Honavar, V. (2002). Ontology-Driven Induction of Decision Trees at Multiple Levels of <b>Abstraction.</b> In: Proceedings of Symposium on <b>Abstraction,</b> Reformulation, and Approximation. Berlin: Springer-Verlag.|$|E
25|$|Color Field {{painting}} clearly {{pointed toward}} a new direction in American painting, away from abstract expressionism. Color Field painting is related to Post-painterly <b>abstraction,</b> Suprematism, Abstract Expressionism, Hard-edge painting and Lyrical <b>Abstraction.</b>|$|E
40|$|In {{this paper}} we show how <b>abstractions</b> can help UCT’s performance. Ideal <b>abstractions</b> are homomorphisms because they {{preserve}} optimal policies, but they rarely exist, and are computationally {{hard to find}} even when they do. We show how a combination of (i) finding local <b>abstractions</b> in the layered-DAG MDP induced {{by a set of}} UCT trajectories (rather than finding <b>abstractions</b> in the global MDP), and (ii) accepting approximate homomorphisms, leads to greater prevalence of good <b>abstractions</b> and makes them computationally easier to find. We propose an algorithm for finding <b>abstractions</b> in UCT planning and derive a lower bound on its performance. We show empirically that it improves performance on illustrative tasks, and on the game of Othello. Categories and Subject Descriptor...|$|R
50|$|FSMLs define framework-provided <b>abstractions</b> as FSML {{concepts}} and decompose the <b>abstractions</b> into features. The features represent implementation steps or choices.|$|R
50|$|Operating systems {{generally}} present hardware {{resources to}} applications through high-level <b>abstractions</b> such as (virtual) file systems. The idea behind exokernels is to force as few <b>abstractions</b> {{as possible on}} application developers, enabling them to make as many decisions as possible about hardware <b>abstractions.</b> Exokernels are tiny, since functionality is limited to ensuring protection and multiplexing of resources, which is considerably simpler than conventional microkernels' implementation of message passing and monolithic kernels' implementation of high-level <b>abstractions.</b>|$|R
25|$|Kang, D-K., Zhang, J., Silvescu, A., and Honavar, V. (2005) Multinomial Event Model Based <b>Abstraction</b> for Sequence and Text Classification. Proceedings of the Symposium on <b>Abstraction,</b> Reformulation, and Approximation (SARA 2005), Edinburgh, UK, Berlin: Springer-Verlag. Vol. 3607. pp.134–148.|$|E
25|$|In January 1937, at Thomas Agnew and Sons, 43 Old Bond Street, London, Bacon {{exhibited}} {{in a group}} show, Young British Painters, which included Graham Sutherland, Victor Pasmore and Roy de Maistre. Eric Hall, also a friend of Jerry Agnew, organised the show; Agnew's was then known for shows of Old Master paintings. Four works by Bacon were shown: Figures in a Garden (1936), purchased by Diana Watson; <b>Abstraction,</b> and <b>Abstraction</b> from the Human Form, known from magazine photographs. They prefigure Three Studies for Figures at the Base of a Crucifixion (1944) in alternatively representing a tripod structure (<b>Abstraction),</b> bared teeth (<b>Abstraction</b> from the Human Form), and both being biomorphic in form. Seated Figure is lost.|$|E
25|$|In {{abstract}} {{painting and}} sculpture during the 1950s and 1960s Geometric <b>abstraction</b> emerged as an important direction {{in the works of}} many sculptors and painters. In painting color field painting, minimalism, hard-edge painting and lyrical <b>abstraction</b> constituted radical new directions.|$|E
40|$|Programming sensor {{networks}} {{is currently}} a cumbersome and error-prone task since it requires programming individual sensor nodes, using low-level programming languages, interfacing to the hardware and the network, only supported by primitive operating system <b>abstractions.</b> There is a strong need for programming <b>abstractions</b> that simplify tasking sensor networks, and for middleware that supports such programming <b>abstractions.</b> We outline challenges {{in the design of}} such <b>abstractions</b> and middleware. Also, we present and discuss currently examined approaches to sensor network programmability...|$|R
40|$|Although {{conventional}} compilers {{implement a}} wide range of optimization techniques, they frequently miss opportunities to optimize the use of <b>abstractions,</b> largely because they are not designed to recognize and use the relevant semantic information about such <b>abstractions.</b> In this position paper, we propose a set of annotations to help communicate high-level semantic information about <b>abstractions</b> to the compiler, thereby enabling the large body of traditional compiler optimizations to be applied to the use of those <b>abstractions.</b> Our annotations explicitly describe properties of <b>abstractions</b> that are needed to guarantee the applicability and profitability of a broad variety of such optimizations, including memoization, reordering, data layout transformations, and inlining and specialization. ...|$|R
30|$|Hardware <b>abstractions.</b> To support {{advanced}} PHY modifications {{based on}} information acquired by SDN controllers, new hardware <b>abstractions</b> are needed. Devices that should be adjusted to provide sophisticated capabilities, e.g., dynamic bandwidth allocation and uplink-to-downlink modifications, have to be enhanced with additional hardware <b>abstractions</b> that SDN controllers may use and exploit.|$|R
