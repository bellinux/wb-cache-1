12|52|Public
5000|$|<b>Auxiliary</b> <b>View</b> Screen: {{displays}} {{information about}} the spaceship's status including a fuel gauge {{and the state of}} the weapons and defensive systems, ...|$|E
5000|$|An <b>auxiliary</b> <b>view</b> or pictorial, on {{the other}} hand, is an orthographic view that is {{projected}} into any plane other {{than one of the}} six primary views. [...] These views are typically used when an object contains some sort of inclined plane. Using the <b>auxiliary</b> <b>view</b> allows for that inclined plane (and any other significant features) to be projected in their true size and shape. The true size and shape of any feature in an engineering drawing can only be known when the Line of Sight (LOS) is perpendicular to the plane being referenced. Auxiliary views tend to make use of axonometric projection.|$|E
5000|$|An <b>auxiliary</b> <b>view</b> is an orthographic {{view that}} is {{projected}} into any plane other {{than one of}} the six primary views. [...] These views are typically used when an object contains some sort of inclined plane. Using the <b>auxiliary</b> <b>view</b> allows for that inclined plane (and any other significant features) to be projected in their true size and shape. The true size and shape of any feature in an engineering drawing can only be known when the Line of Sight (LOS) is perpendicular to the plane being referenced.It is shown like a three-dimensional object. Auxiliary views tend to make use of axonometric projection. When existing all by themselves, auxiliary views are sometimes known as pictorials.|$|E
40|$|A data {{warehouse}} {{is a large}} data repository {{for the purpose of}} analysis and decision making in organizations. To improve the query performance and to get fast access to the data, data is stored as materialized views (MV) in the {{data warehouse}}. When data at source gets updated, the materialized views also need to be updated. In this paper, we focus on the problem of maintenance of these materialized views and address the issue of finding such <b>auxiliary</b> <b>views</b> (AV) that together with the materialized views make the data self-maintainable and take minimal space. We propose an algorithm that uses key and referential constraints which reduces the total number of tuples in <b>auxiliary</b> <b>views</b> and uses idea of information sharing between these <b>auxiliary</b> <b>views</b> to further reduce number of <b>auxiliary</b> <b>views.</b> Comment: Journal based on thesi...|$|R
40|$|In {{this paper}} is {{proposed}} a method to reconstruct a solid from given two or three orthographic views along with any number of primary <b>auxiliary</b> <b>views</b> based on the combination of wire-frame and volumetric approaches. None of the existing works in automatic reconstruction of solids from two dimensional orthographic <b>views</b> have addressed <b>auxiliary</b> <b>views</b> in detail. Polyhedral approximation of cylindrical, conical, toroidal and spherical surfaces is considered. The algorithm presented, entails the constriction of the basic wire-frame from given standard views using the wire-frame approach. The projections in the <b>auxiliary</b> <b>views</b> on the basic orthographic views are swept along the projection lines to form the primitives. These primitives are glued to the basic wire-frame to construct the final solid. Numerous examples are {{presented in this paper}} to demonstrate the versatility of the proposed method which can handle partial standard and <b>auxiliary</b> <b>views</b> as well...|$|R
50|$|Axonometric {{projections}} {{are also}} sometimes known as <b>auxiliary</b> <b>views,</b> {{as opposed to}} the primary views of multiview projections.|$|R
50|$|Two {{modes of}} space travel are {{featured}} in the game: interstellar and interplanetary. Interstellar travel involves the player maneuvering the spaceship from one star to another, sometimes {{with the aid of}} continuum fluxes or jump pods, both of which provide a quick shortcut between two distant points in space. When the player maneuvers the spaceship towards a star, the interplanetary travel mode begins. A schematic showing the relative positions of the planets in that solar system appears in the <b>auxiliary</b> <b>view</b> screen, all of which may be orbited by the player's spaceship and scanned to reveal basic information including the planet's gravitational strength. Large planets with strong gravity, such as gas giants, will destroy the ship if a landing is attempted, but the ship may successfully land on many worlds. When the player is ready to land, the <b>auxiliary</b> <b>view</b> screen displays a planetary topographic map with a cursor allowing a specific location to be selected. Following a successful landing, the crew boards a terrain vehicle which the player is able to move about the planet to explore ruins for plot clues, harvest minerals and alien lifeforms, and travel to trading posts at which the player may buy or sell items through bartering. The main view screen shows the terrain vehicle in relation to its immediate surroundings. Potential hazards on planetary excursions include running out of fuel, dangerous weather conditions, and hostile alien lifeforms. The locations of uninhabited earth-like planets may be logged for recommendation to Interstel as potential colony worlds in return for a substantial monetary reward.|$|E
40|$|Graduation date: 2013 Data can be {{represented}} in multiple views. Traditional multi-view learning methods (i. e., co-training, multi-task learning) focus on improving learning performance using information from the <b>auxiliary</b> <b>view,</b> although information from the target view is sufficient for learning task. However, this work addresses a semi-supervised case of multi-view learning, the surrogate supervision multi-view learning, where labels are available on limited views and a classifier is obtained on the target view where labels are missing. In surrogate multi-view learning, one cannot obtain a classifier without information from the <b>auxiliary</b> <b>view.</b> To solve this challenging problem, we propose discriminative and generative approaches...|$|E
40|$|Abstract. We examine an under-explored visual {{recognition}} problem, {{where we}} have a main view along with an <b>auxiliary</b> <b>view</b> of visual infor-mation present in the training data, but merely the main view is avail-able in the test data. To effectively leverage the <b>auxiliary</b> <b>view</b> to train a stronger classifier, we propose a collaborative auxiliary learning frame-work based on a new discriminative canonical correlation analysis. This framework reveals a common semantic space shared across both views through enforcing a series of nonlinear projections. Such projections automatically embed the discriminative cues hidden in both views into the common space, and better visual recognition is thus achieved on the test data that stems from only the main view. The efficacy of our proposed auxiliary learning approach is demonstrated through three challenging visual recognition tasks with different kinds of auxiliary information. ...|$|E
50|$|Like oblique {{projection}}, axonometric projection {{is typically}} {{used to create}} pictorials. In the context of multiviews, axonometric pictorials are sometimes known as <b>auxiliary</b> <b>views.</b>|$|R
3000|$|Despite {{its value}} and significance, the feature {{selection}} problem for graph data using <b>auxiliary</b> <b>views</b> {{has not been}} studied in this context so far. There are two major difficulties in learning from multiple side views for graph classification, as follows: [...]...|$|R
40|$|A Data {{warehouse}} (DW) integrates data front multiple distributed heterogeneous data sources. A DW {{can be seen}} as a set of materialized views defined {{over the}} source relations. The materialized views are eventually updated upon changes of the source relations, For different reasons (e. g. reduction to the view maintenance cost, unavailability of the sources etc) it is desirable to make the DW self-maintainable. This means that the materialized views call be maintained, for every source relation change, without accessing the sources. In this paper we deal with the problem of selecting <b>auxiliary</b> <b>views</b> to materialize in the DW such that the original materialized <b>views</b> and the <b>auxiliary</b> <b>views</b> taken together are self-maintainable. A distinguishing feature of our approach is that we consider that a data source call store multiple source relations referenced by the materialized views. Further, the data sources are of cooperative type, that is, they call compute and transinit to the DW the changes for (complex) views defined over their own relations. We first formally model the problem by using all AND/OR. dag structure for multiple views that allows the representation of common subexpression sharing. We then provide a method for computing <b>auxiliary</b> <b>views</b> that fit in the space available for materialization and minimize the cost of computing the changes to be applied to the materialized views during the maintenance process...|$|R
40|$|The aim of my {{bachelor}} {{thesis is}} to give comprehensive information on emerging trends in international transport. The work adverts to international carriage of goods and transport services globally as the essential elements of the world economy. One part is devoted to new trends {{in the development of}} legal and institutional framework besides the technological advances in the various modes of freight transport. Another topic is the analysis of transport and storage devices with the <b>auxiliary</b> <b>view</b> on containerization which together with the multimodal transport represents the most important aspects within past fifty years. The last part of this work points to information technology utilization in order to maximize efficiency and safety of traffic...|$|E
40|$|This {{dissertation}} {{presents a}} study and experimental research on asymmetric coding of stereoscopic video. A review on 3 D technologies, video formats and coding is rst presented and then particular emphasis {{is given to}} asymmetric coding of 3 D content and performance evaluation methods, based on subjective measures, of methods using asymmetric coding. The research objective was de ned to be {{an extension of the}} current concept of asymmetric coding for stereo video. To achieve this objective the rst step consists in de ning regions in the spatial dimension of <b>auxiliary</b> <b>view</b> with di erent perceptual relevance within the stereo pair, which are identi ed by a binary mask. Then these regions are encoded with better quality (lower quantisation) for the most relevant ones and worse quality (higher quantisation) for the those with lower perceptual relevance. The actual estimation of the relevance of a given region is based on a measure of disparity according to the absolute di erence between views. To allow encoding of a stereo sequence using this method, a reference H. 264 /MVC encoder (JM) has been modi ed to allow additional con guration parameters and inputs. The nal encoder is still standard compliant. In order to show the viability of the method subjective assessment tests were performed over a wide range of objective qualities of the <b>auxiliary</b> <b>view.</b> The results of these tests allow us to prove 3 main goals. First, it is shown that the proposed method can be more e cient than traditional asymmetric coding when encoding stereo video at higher qualities/rates. The method {{can also be used to}} extend the threshold at which uniform asymmetric coding methods start to have an impact on the subjective quality perceived by the observers. Finally the issue of eye dominance is addressed. Results from stereo still images displayed over a short period of time showed it has little or no impact on the proposed method...|$|E
40|$|In {{my master}} Thesis I decided {{to deal with}} the first {{full-lenght}} opera from Giacomo Puccini Edgar, with the <b>auxiliary</b> <b>view</b> of the lead role Tigrana. In the first part of my work I´m describing the rise of verism and it´s top personators with the inclusion of their fundamental work. Then I consider about the childhood and music starts of Giacomo Puccini. In the next chapter I follow the first Puccini´s opera Le Villi. I mention here the factors, the storyline and the interpretation problems of this opera. After this, my work is only about the opera Edgar. I describe the storyline and the factors of it´s creation, I also compare opera Edgar with the other veristic operas. At the end of my work I describe my professional experience with the role of Tigrana and the introduction of this opera in the Theatre F. X. Šalda in Liberec...|$|E
50|$|The terms orthographic {{projection}} and orthogonal projection are sometimes reserved specifically for multiviews. However, orthographic and orthogonal more correctly {{refer to the}} right angle formed between the projection rays and the projection plane, versus the angle formed between {{the subject of the}} drawing and the projection plane. Thus, {{orthographic projection}}s include axonometric or <b>auxiliary</b> <b>views</b> in addition to multiviews.|$|R
40|$|A data {{warehouse}} stores materialized views over data {{from one or}} more sources {{in order to provide}} fast access to the integrated data, regardless of the availability of the data sources. Warehouse views need to be maintained in response to changes to the base data in the sources. Except for very simple views, maintaining a warehouse view requires access to data that is not available in the view itself. Hence, to maintain the view, one either has to query the data sources or store auxiliary data in the warehouse. We show that by using key and referential integrity constraints, we often can maintain a select-project-join view when there are insertions, deletions, and updates to the base relations without going to the data sources or replicating the base relations in their entirety in the warehouse. We derive a set of <b>auxiliary</b> <b>views</b> such that the warehouse <b>view</b> and the <b>auxiliary</b> <b>views</b> together are self-maintainable [...] -they can be maintained without going to the data sources or replicating [...] ...|$|R
40|$|Abstract. This paper {{presents}} {{a new approach}} to maintaining materialized views without accessing the underlying base relations. Views can be made self-maintainable using additional data together with the views. For instance, one can replicate <b>auxiliary</b> <b>views</b> of the base relations at the site where the views are materialized to ensure self-maintenance of the views. However, the previous approaches often lead to the replication of the entire base relations, which is not acceptable from the data protection point of view. We propose to represent the base data using tables with variables and to materialize <b>auxiliary</b> <b>views</b> of such tables in form of conditional tables. Modeling updates of the base data as changes of the assignment to the variables, we can compute the updated views by evaluating the conditional tables with respect to the new assignment of the variables. Our approach avoids the replication of the base data and allows active self-maintenance of views triggered by identified updates of the base data. ...|$|R
40|$|A data {{warehouse}} collects and maintains {{a large amount}} of data from several distributed and heterogeneous data sources. Often the data is stored in the form of materialized views in order to provide fast access to the integrated data, regardless of the availability of the data sources. In this paper we focus on the following problem: for a given set of materialized select-project-join (SPJ) views, how can we find and minimize the auxiliary data [URL] in a {{data warehouse}} in order to make all materialized views in the data warehouse self-maintainable? For this problem we first devise an algorithm for finding such an <b>auxiliary</b> <b>view</b> set by exploiting information sharing among the auxiliary views and materialized views themselves to reduce the total size of auxiliary views. We then consider how to make the data warehouse still self-maintainable by minor modifications when there is a view addition to or deletion from it by giving an algorithm for this incremental maintenance purpose...|$|E
40|$|As {{views in}} a data {{warehouse}} become more complex, the view maintenance process can become very complicated and potentially very inecient. Storing auxiliary {{views in the}} ware-house can reduce the complexity and improve the eciency of view maintenance, and the same auxiliary views can help in eciently answering lineage tracing queries over the ware-house views. In this paper, we study the problem of selecting auxiliary views to materialize {{in order to minimize}} the total view maintenance and lineage tracing cost. We consider relational views with arbitrary use of aggregation operators, and we dene an initial search space for our optimization problem based on a normal form for such view denitions. We present several <b>auxiliary</b> <b>view</b> selection algorithms, and to study their performance we conduct experiments using the TPC-D benchmark in addition to synthetic view denitions and statistics. The results of our experiments show: (1) the exhaustive algorithm that selects the optimal set of auxiliary views is far too expensive in many cases; (2) two heuristic algorithms that we present select good (often optimal) sets of auxiliary views in a much shorter time; (3) even auxiliary views selected by a very simple algorithm can signicantly reduce the overall view maintenance and lineage tracing cost. ...|$|E
40|$|Incremental View Maintenance (IVM) is {{the process}} of {{incrementally}} maintaining the view when the underlying data change. Given the high frequency of data modifications in many practical scenarios, it is imperative that an IVM approach is as efficient as possible. One technique commonly used to accelerate IVM is the materialization of a set of additional auxiliary views, which can be leveraged to speedup the maintenance of the original view. However, existing approaches assume that these auxiliary views are relational tables. We argue that this assumption creates both space and time inefficiencies by introducing redundancies that would have been avoided if the auxiliary views were stored in a non-relational format. Based on this observation, we propose a novel non- relational <b>auxiliary</b> <b>view,</b> referred to as the join graph, and a corresponding GraphIVM system, which leverages the join graph to accelerate incremental view maintenance. The join graph, which intuitively represents how tuples of the underlying database join with each other, is shown to be compact and non-redundant, leading to an efficient IVM approach. This approach also benefits from two additional optimizations, described in the thesis, that allow it to further speedup the IVM process. Experiments of the GraphIVM system against state of the art IVM approaches verify that in all cases, but extremely simple views, GraphIVM significantly outperforms state of the art IVM approaches. More importantly, its speedup over other approaches increases as the views become more complex (measured in terms of fanout and number of joins...|$|E
50|$|<b>Auxiliary</b> <b>views</b> utilize an {{additional}} projection plane {{other than the}} common planes in a multiview. Since the features of an object need to show the true shape {{and size of the}} object, the projection plane must be parallel to the object surface. Therefore, any surface that is not in line with the three major axis needs its own projection plane to show the features correctly.|$|R
5000|$|This {{software}} {{offers a}} marriage between the design tools of ViaCAD 2D {{and far more}} advanced 3D drafting tools. ViaCAD 2D/3D is designed to quickly toggle between 2D and 3D views to create files for 3D printers, 2D/3D architectural plans, mechanical plans, electrical schematics, furniture designs, and much more.ViaCAD2D/3D will automatically convert imported 3D models into 2D drawings and you can then quickly create detail, section, and <b>auxiliary</b> <b>views</b> - all while working in 2D ...|$|R
40|$|IDENTIFIERS Dimensioning (Mechanical Drawing) The {{second of}} a two-book course in drafting, this manual {{consists}} of 12 torics {{in the following}} units: sketching techniques, geometric constructions, orthographic views, dimisnsioning procedures, basic tolerancing, <b>auxiliary</b> <b>views,</b> sectional views, inking tools and techniques, axonometrics, oblique, perspective, and computer-aided drafting. Included in the individual instructional units are {{some or all of}} the following: performance objectives, suggested activities for teachers, information sheets, assignment sheets, job sheets, visual aids, tests, and test answers. Instructional materials in the publication are written in terms of student performance using measurable objectives and include the content necessary for employment in an entry-level drafting occupation. (MN) *****************************A***************************************** * Reproductions supplied by ZDRS are the best that can be made * * from the origin-I document. ...|$|R
40|$|A new and {{efficient}} approach {{to construct a}} 3 D wire-frame of an object from its orthographic projections is described. The input projections can be two or more and can include regular and complete <b>auxiliary</b> <b>views.</b> Each view may contain linear, circular and other conic sections. The output is a 3 D wire-frame {{that is consistent with}} the input views. The approach can handle <b>auxiliary</b> <b>views</b> containing curved edges. This generality derives from a new technique to construct 3 D vertices from the input 2 D vertices (as opposed to matching coordinates that is prevalent in current art). 3 D vertices are constructed by projecting the 2 D vertices in a pair of views on the common line of the two views. The construction of 3 D edges also does not require the addition of silhouette and tangential vertices and subsequently splitting edges in the views. The concepts of complete edges and n-tuples are introduced to obviate this need. Entities corresponding to the 3 D edge in each view are first identified and the 3 D edges are then constructed from the information available with the matching 2 D edges. This allows the algorithm to handle conic sections that are not parallel to any of the viewing directions. The localization of effort in constructing 3 D edges is the source of efficiency of the construction algorithm as it does not process all potential 3 D edges. Working of the algorithm on typical drawings is illustrated. (C) 2011 Elsevier Ltd. All rights reserved...|$|R
40|$|The universally applied Codd's {{relational}} model has two constructs: a stored relation, with stored attributes only and a view, {{only with the}} inherited ones. In 1992, we have proposed third construct, mixing both types of attributes. Examples showed the idea attractive. No one followed however. We now revisit our proposal. We show that a relational database scheme using also our construct may be more faithful to reality. It may spare the logical navigation or complex value expressions to queries. It may also avoid <b>auxiliary</b> <b>views,</b> often necessary in practice at present. Better late than never, existing DBSs should easily accommodate our proposal, with almost no storage and processing overhead. Comment: 25 pages, 5 figure...|$|R
40|$|This {{curriculum}} guide {{consists of}} materials for teaching {{a course in}} mechanical drawing and drafting. Addressed in the individual units of the guide are the following topics: the nature and scope of drawing and drafting, visualization and spatial relationships, drafting tools and materials, linework, freehand lettering, geometric construction, multiview projections, sectional <b>views,</b> <b>auxiliary</b> <b>views,</b> RXonometric projections, oblique projections, perspectives, and machine drafting. Each unit contains some or all h the following: series of duty and task statements, series of performance objectives, suggested learning activities, lists of suggested resources, lists of tools and equipment needed to complete the unit, evaluation criteria, and transparency masters. Concluding the guide is a [...] bibliography of works dealing with mechanical drawing and drafting. (MN...|$|R
5000|$|Not all {{views are}} {{necessarily}} used. Generally only as many views {{are used as}} are necessary to convey all needed information clearly and economically. The front, top, and right-side views are commonly considered the core group of views included by default, [...] but any combination of views may be used depending {{on the needs of}} the particular design. In addition to the six principal views (front, back, top, bottom, right side, left side), any <b>auxiliary</b> <b>views</b> or sections may be included as serve the purposes of part definition and its communication. View lines or section lines (lines with arrows marked [...] "A-A", [...] "B-B", etc.) define the direction and location of viewing or sectioning. Sometimes a note tells the reader in which zone(s) of the drawing to find the view or section.|$|R
50|$|Dental mirrors {{are used}} by the dentist or dental <b>auxiliary</b> to <b>view</b> {{a mirror image of}} the teeth in {{locations}} of the mouth where visibility is difficult or impossible. They also are used for reflecting light onto desired surfaces, indirect vision, and with retraction of soft tissues to improve access or vision.|$|R
40|$|Materialized views MV at {{the data}} {{warehouse}} DW can be {{kept up to date}} in response to changes in data sources without accessing data sources for additional information. This process is usually referred to as "self maintenance of views". A number of algorithms have been proposed for self maintenance of views where they keep some additional information in DW in the form of <b>auxiliary</b> <b>views</b> (AV). In this paper we propose an algorithm for self maintainability of multiple MVs using the above approach. Our algorithm generates a simple maintenance query to incrementally maintain an MV along with its AV at DW. The algorithm maintains these views by minimizing the number {{and the size of the}} AVs. Our approach provides better insight into view maintenance issues by exploiting the dependencies and constraints that might exist in the data sources and multiple MVs at DW. ...|$|R
40|$|We {{consider}} the view data lineage {{problem in a}} warehousing environment: For a given data item in a materialized warehouse view, we want toidentify the set of source data items that produced the view item. We formalize the problem, and we present a lineage tracing algorithm for relational views with aggregation. Based on our tracing algorithm, we proposeanumber of schemes for storing <b>auxiliary</b> <b>views</b> that enable consistent and e cient lineage tracing in a multisource data warehouse. We report on a performance study of the various schemes, identifying which schemes perform best in which settings. Based on our results, we have implemented a lineage tracing package in the WHIPS data warehousing system prototype at Stanford. With this package, users can select view tuples of interest, then e ciently through &quot; to examine the exact source tuples that produced the view tuples of interest. ...|$|R
5000|$|Fleet {{replenishment}} {{has been}} an expanding element in PLAN <b>auxiliaries.</b> The PLAN <b>view</b> the need of replenishment ships as vital for blue water fleet operations: ...|$|R
40|$|A Data Warehouse (DW) is a {{database}} that collects and stores data from multiple remote and heterogeneous information sources. When a query is posed, it is evaluated locally, without accessing the original information sources. In this paper {{we deal with}} the issue of designing a DW, {{in the context of the}} relational model, by selecting a set of views to materialize in the DW. First, we briefly present a theoretical framework for the DW design problem, which concerns the selection of a set of views that (a) fit in the space allocated to the DW, (b) answer all the queries of interest, and (c) minimize the total query evaluation and view maintenance cost. We then formalize the DW design problem as a state space search problem by taking into account multiquery optimization over the maintenance queries (i. e. queries that compute changes to the materialized views) and the use of <b>auxiliary</b> <b>views</b> for reducing the view maintenance cost. Finally, incremental algorithms and heuristics for pruning the [...] ...|$|R
40|$|ABSTRACT – Three-dimensional solid modeling, {{especially}} constraint-based modeling, {{has significantly}} {{changed the way}} engineering graphics programs are structured. Although traditional concepts such as orthographic projection, sectional <b>views,</b> <b>auxiliary</b> <b>views,</b> and dimensioning are still covered in many programs, they are couched {{within the context of}} a 3 D database centered engineering design process. The Graphic Communications Program at North Carolina State University has made course and programmatic changes over the last 10 years to adapt to changes in how 3 D modeling is used in industry. After completing a 3 course sequence in engineering graphics, students should be able to complete a wide variety of activities related to constraint-based modeling. To meet these objectives, students complete tutorial-based laboratory assignments, reverse engineering activities, and structured design activities. The way student work is evaluated has also changed. This paper presents the objectives for each course, gives examples of constraint-based CAD activities in each course, and discusses evaluation techniques for the activities and projects...|$|R
40|$|Abstract. Efficient and {{incremental}} {{maintenance of}} integrity constraints involving recursive views {{is a difficult}} issue that has received some attention in the past years, but for which no widely accepted solution exists yet. In this paper a technique is proposed for compiling such integrity constraints into incremental and optimized tests specialized for given update patterns. These tests may involve {{the introduction of new}} views, but for relevant cases of recursion, simplified integrity constraints are obtained that can be checked more efficiently than the original ones and without <b>auxiliary</b> <b>views.</b> Notably, these simplified tests are derived at design time and can be executed before the particular database update is made and without simulating the updated state. In this way all overhead due to optimization or execution of compensative actions at run time is avoided. It is argued that, in the recursive case, earlier approaches have not achieved comparable optimization with the same level of generality. ...|$|R
40|$|We {{consider}} the view data lineage {{problem in a}} warehousing environment: For a given data item in a materialized warehouse view, we want to identify the set of source data items that produced the view item. We formalize the problem and present a lineage tracing algorithm for relational views with aggregation. Based on our tracing algorithm, we propose a number of schemes for storing <b>auxiliary</b> <b>views</b> that enable consistent and efficient lineage tracing in a multisource data warehouse. We report on a performance study of the various schemes, identifying which schemes perform best in which settings. Based on our results, we have implemented a lineage tracing package in the WHIPS data warehousing system prototype at Stanford. With this package, users can select view tuples of interest, then efficiently "drill down" to examine the source data that produced them. 1 Introduction Data warehousing systems collect data from multiple distributed sources, integrate the information as materialized v [...] ...|$|R
