1|2557|Public
40|$|We {{design an}} {{effective}} multicast routing algorithm for distributing layered multicast video to heterogeneous receivers in networks with rate-based link schedulers. The multicast tree {{constructed by the}} algorithm fulfills the QoS requirements imposed by heterogeneous receivers {{both in terms of}} bandwidth and delay, and at the same time, consumes as little network resource as possible. For the purpose of scalability, the proposed multicast routing algorithm is decentralized and can adapt to network and membership change. To facilitate construction of such a multicast tree in a distributed manner, we equip each node with an <b>auxiliary</b> <b>routing</b> <b>table,</b> and propose procedures for updating/maintaining the <b>auxiliary</b> <b>routing</b> <b>table.</b> Simulation results indicate that the multicast tree constructed by the proposed algorithm is more resource efficient than those constructed by other existing algorithms, especially when there exist multiple alternative paths to multicast receivers in the network. 1 Int [...] ...|$|E
40|$|Measurements {{gathered}} by smart metres and collected through the automatic metering infrastructure of smart grids {{can be accessed}} by numerous external subjects for different purposes, ranging from billing to grid monitoring. Therefore, to prevent the disclosure of personal information through the analysis of energy consumption patterns, the metering data must be securely handled. Peer-to-peer networking is a promising approach for interconnecting communication nodes among the automatic metering infrastructure to efficiently perform data collection while ensuring privacy and confidentiality, {{but it is also}} prone to various security attacks. This paper discusses the impact of the most relevant peer-to-peer attack scenarios on the performance of a protocol for privacy preserving aggregation of metering data. The protocol relies on communication gateways located in the customers' households and interconnected by means of a variant of the Chord overlay. We also propose some countermeasures to mitigate the effects of such attacks: we integrate a verifiable secret sharing scheme based on Pedersen commitments in the aggregation protocol, which ensures data integrity, with compliance checks aimed at identifying the injection of altered measurements. Moreover, we introduce Chord <b>auxiliary</b> <b>routing</b> <b>tables</b> to counteract the routing pollution performed by dishonest nodes. The paper evaluates the computational complexity and effectiveness of the proposed solutions through analytical and numerical results...|$|R
50|$|Using the kernel {{protocol}} this internal <b>routing</b> <b>table</b> may {{be connected}} to the actual kernel <b>routing</b> <b>table.</b> This allows BIRD to export network routes from its internal <b>routing</b> <b>table</b> to the kernel <b>routing</b> <b>table</b> and optionally also learn about network routes from the kernel <b>routing</b> <b>table</b> (created externally by the administrator or by other means) and import these routes into its internal <b>routing</b> <b>table.</b>|$|R
50|$|BIRD also {{supports}} multiple internal <b>routing</b> <b>tables</b> and multiple instances of supported protocol types. Protocols may {{be connected to}} different internal <b>routing</b> <b>tables,</b> these internal <b>routing</b> <b>tables</b> may exchange information about network routes they contain (controlled by filters) and each of these internal <b>routing</b> <b>tables</b> may be connected to a different kernel <b>routing</b> <b>table</b> thus allowing for policy routing.|$|R
30|$|Table 1 is {{a common}} <b>routing</b> <b>table</b> with the same {{function}} as traditional routing methods. In practical scenarios, several UEs can appear near different cluster head of beacon cluster simultaneously. Obviously, this simple <b>routing</b> <b>table</b> cannot {{deal with the situation}} anymore. Some modification is necessary for the initialization <b>routing</b> <b>table.</b> Thus, we present a conversion algorithm for converting the rough <b>routing</b> <b>table</b> to a <b>routing</b> <b>table</b> based on beacon cluster combination.|$|R
40|$|In {{simulating}} large-scale networks, due to {{the limitation}} of available resources on computers, {{the size of the}} networks and the scale of simulation scenarios are often restricted. Especially, <b>routing</b> <b>tables,</b> which indicate the directions to forward packets, are considered to consume memory space. A simple <b>routing</b> <b>table</b> requires O(N 2) space where N is the number of nodes. An algorithmic routing recently proposed by Heung et al. only requires O(N) space for representing <b>routing</b> <b>tables,</b> however this can be applied in the case that all the routes between two nodes are contained in a spanning tree (i. e. very limited routing strategies are allowed). In this paper, we propose a new method to reduce a capacity of <b>routing</b> <b>tables</b> under any <b>routing</b> strategy. In our method, given a simple <b>routing</b> <b>table,</b> we can find a (near-optimal) algorithmic <b>routing</b> based <b>table</b> that can represent a part of the given <b>routing</b> <b>table</b> in a smaller size. Our experimental results have shown that our method could reduce about 90 % of the <b>routing</b> <b>table</b> size compared with a simple <b>routing</b> <b>table</b> in hierarchical networks. ...|$|R
30|$|<b>Routing</b> <b>table</b> (RT): <b>Routing</b> <b>table</b> {{includes}} the source routings from current node to other nodes in the network.|$|R
30|$|Traditional ad hoc routing {{protocols}} maintain <b>routing</b> <b>tables</b> {{in order to}} determine the paths for forwarding packets [9]. Each host proactively maintains its <b>routing</b> <b>table</b> to reflect its current view of the network topology. Each wireless host propagates the content of its <b>routing</b> <b>table</b> to others either periodically or upon content changes. A wireless host updates its own <b>routing</b> <b>table</b> based on the content of a <b>routing</b> <b>table</b> that is propagated by another host, such as the Destination-Sequenced Distance-Vector (DSDV) routing protocol [10]. Route maintenance is performed by each host even when there is no pending data transmissions.|$|R
40|$|In {{an attempt}} to slow the {{exhaustion}} of the Internet Protocol (IP) address space, Class-less Inter-Domain Routing (CIDR) was proposed and adopted. However, the decision to utilize CIDR also increases {{the size of the}} <b>routing</b> <b>table,</b> since it allows an arbitrary partitioning of the routing space. We propose a scheme {{to reduce the size of}} <b>routing</b> <b>table</b> in the CIDR context. Our approach utilizes a well-known and highly efficient heuristic to perform 2 -level logic minimization in order to compress the <b>routing</b> <b>table.</b> By considering the IP <b>routing</b> <b>table</b> as a set of completely specified logic functions, we demonstrate that our technique can achieve about 25 % reduction in the size of IP <b>routing</b> <b>tables,</b> while ensuring that our approach can handle <b>routing</b> <b>table</b> updates in real-time. The resulting <b>routing</b> <b>table</b> can be used with existing routers without needing any change in architecture. However, by realizing the IP <b>routing</b> <b>table</b> as proposed in this thesis, the implementation requires less complex hardware than Ternary CAM (TCAM) which are traditionally used to implement IP <b>routing</b> <b>tables.</b> The proposed architecture also reduces lookup latency by about 46 %, hardware area by 9 % and power consumed by 15 % in contrast to a TCAM based implementation...|$|R
40|$|The {{sizes of}} the BGP <b>routing</b> <b>tables</b> have {{increased}} by {{an order of}} magnitude over the last six years. This dramatic growth of the <b>routing</b> <b>table</b> can decrease the packet forwarding speed and demand more router memory space. In this paper, we explore the extent that various factors contribute to the <b>routing</b> <b>table</b> size and characterize the growth of each contribution. We begin with measurement study using <b>routing</b> <b>tables</b> of Oregon route views server to determine the contributions of multi-homing, load balancing, address fragmentation, and failure to aggregate to <b>routing</b> <b>table</b> size. We find that the contribution of address fragmentation is the greatest and is three times to that of multihoming or load balancing. The contribution of failure to aggregate is the least. Although multihoming and load balancing contribute less to <b>routing</b> <b>table</b> size than address fragmentation does, we observe that the contribution of multihoming and that of load balancing grow faster than the <b>routing</b> <b>table</b> does and that the load balancing has surpassed multihoming becoming the fastest growing contributor. Moreover, we find that both load balancing and multihoming contribute to <b>routing</b> <b>table</b> growth by introducing more prefixes of length greater than 17 but less than 25, which is the fastest growing prefixes. Next, we compare the growth of the <b>routing</b> <b>table</b> to the expanding of IP addresses that can be routed and conclude that the growth of routable IP addresses is much slower than that of <b>routing</b> <b>table</b> size. Last, we demonstrate that our findings based on the view derived from the Oregon server are accurate through the evaluation using additional 15 <b>routing</b> <b>tables</b> collected from different locations in the Internet...|$|R
50|$|BIRD {{implements}} {{an internal}} <b>routing</b> <b>table</b> {{to which the}} supported protocols connect. Most of these protocols import network routes to this internal <b>routing</b> <b>table</b> and also export network routes from this internal <b>routing</b> <b>table</b> to the given protocol. This way information about network routes is exchanged among different routing protocols.|$|R
50|$|In {{static routing}} (or non-dynamic routing), small {{networks}} may use manually configured <b>routing</b> <b>tables.</b> Larger networks have complex topologies {{that can change}} rapidly, making the manual construction of <b>routing</b> <b>tables</b> unfeasible. Nevertheless, most of the {{public switched telephone network}} (PSTN) uses pre-computed <b>routing</b> <b>tables,</b> with fallback routes if the most direct route becomes blocked (see routing in the PSTN).|$|R
50|$|Information in the {{topology}} table may {{be inserted}} into the router's <b>routing</b> <b>table</b> and can then be used to forward traffic. If the network changes, for example, a physical link fails or is disconnected, the path will become unavailable. EIGRP is designed to detect these changes and will attempt {{to find a new}} path to the destination. The old path that is no longer available is removed from the <b>routing</b> <b>table.</b> Unlike most distance vector routing protocols, EIGRP does not transmit all the data in the router's <b>routing</b> <b>table</b> when a change is made but will only transmit the changes that have been made since the <b>routing</b> <b>table</b> was last updated. EIGRP does not send its <b>routing</b> <b>table</b> periodically, but will only send <b>routing</b> <b>table</b> data when an actual change has occurred. This behavior is more inline with link-state routing protocols, thus EIGRP is mostly considered a hybrid protocol.|$|R
40|$|This thesis {{deals with}} issue of routing between Autonomous Systems. For routing between {{autonomous}} systems is used Border Gateway Protocol (BGP). The routers in Autonomous Systems modify their <b>routing</b> <b>tables</b> based on BGP messages.   <b>Routing</b> <b>tables</b> {{are used for}} forwarding information on Internet. Issue of this thesis is analysis of change <b>routing</b> <b>tables</b> for eventually optimizing of routing architecture. First part of thesis is focused on theory of routers, routing ang BGP. Second part of this thesis focuses on implementation and execution experiments with <b>routing</b> <b>tables.</b> In this part are also described reached results...|$|R
40|$|Abstract—In many {{structured}} overlays, nodes strictly {{maintain their}} <b>routing</b> <b>tables</b> using node identifiers. However, building <b>routing</b> <b>tables</b> while taking {{account of the}} physical network is difficult. We propose proximity-aware flexible <b>routing</b> <b>tables</b> (PFRT) in this paper as a method to systematically design proximityaware routing algorithms for structured overlays. PFRT was developed by extending the flexible <b>routing</b> <b>tables</b> (FRT) method such that network proximity is considered. <b>Routing</b> <b>tables</b> in FRTand PFRT-based algorithms are updated according {{to the order of}} the set of all <b>routing</b> <b>table</b> patterns. FRT-based algorithms define a total order based on node identifiers, whereas PFRTbased algorithms define two total orders based on node identifiers and network proximity. Because PFRT is a simple extension of FRT, PFRT-based algorithms also have many of the advantageous features of FRT. We extended Chord to design PFRT-Chord, which is a PFRT-based algorithm. Experimental results showed that PFRT-Chord preserves the expected FRT-derived properties and it could take account of network proximity. I...|$|R
5000|$|If {{there are}} {{matching}} entries but the hop count metric {{is lower than}} the one already in its <b>routing</b> <b>table,</b> then the <b>routing</b> <b>table</b> is updated with the new route.|$|R
40|$|Anecdotal {{evidence}} suggests that misconfiguration of backbone routers occasionally leads to an injection of large <b>routing</b> <b>tables</b> into the BGP routing system. In this paper, we investigate the detailed mechanics of router response to large BGP <b>routing</b> <b>tables.</b> We examine three commercial routers, and find that their responses vary significantly. Some routers exhibit table-size oscillations that {{have the potential to}} cause cascading failure. Others need operator intervention to recover from large <b>routing</b> <b>tables.</b> We also find that deployed resource control mechanisms, such as prefix limits and route flap damping, are only partially successful in mitigating the impact of large <b>routing</b> <b>tables...</b>|$|R
40|$|In this work, {{we propose}} a scheme of <b>routing</b> <b>table</b> {{compaction}} for IP forwarding engines based on ternary {{content addressable memory}} (TCAM). Our scheme transforms the original <b>routing</b> <b>table</b> into a form with only disjoint prefixes. The most prevalent next hop of the <b>routing</b> <b>table</b> is then calculated and the route prefixes corresponding to the next hop are replaced by one TCAM entry. In combination with Espresso-II logic minimization algorithm, the proposed scheme reduces the TCAM storage requirements by more than 75 % compared to the original <b>routing</b> <b>tables.</b> We also present an effective approach to support incremental updates...|$|R
5000|$|In {{computer}} networking a <b>routing</b> <b>table,</b> or <b>routing</b> information base (RIB), is a {{data table}} {{stored in a}} router or a networked computer that lists the routes to particular network destinations, and in some cases, metrics (distances) associated with those routes. The <b>routing</b> <b>table</b> contains information about the topology of the network immediately around it. The construction of <b>routing</b> <b>tables</b> is {{the primary goal of}} routing protocols. Static routes are entries made in a <b>routing</b> <b>table</b> by non-automatic means and which are fixed rather than being the result of some network topology [...] "discovery" [...] procedure.|$|R
40|$|Abstract—The paper {{presents}} the simulation in VPI of all-optical routing {{based on the}} pulse-position modulation header processing (PPM-HP) scheme in an ultrafast photonic packet switched core network. In this network, optical core router employing PPM-HP utilizes a dedicated multi-wavelength pulseposition <b>routing</b> <b>table</b> (MW-PPRT) which results in a significant reduction {{of the number of}} <b>routing</b> <b>table</b> entries thus reducing the header processing time compared to the existing sequential <b>routing</b> <b>table</b> looking-up schemes. The reduced <b>routing</b> <b>table</b> also offers embedding multiple transmitting modes (unicast, multicast and broadcast) in an optical layer and improves scalability of the core network where the number of core/edge nodes could be altered without changing the number of <b>routing</b> <b>table</b> entries. Details of simulation schematics and results of the router operating at 100 Gbit/s are presented. I...|$|R
3000|$|... {{following}} (21) {{with all}} the paths in a <b>routing</b> <b>table.</b> Then, compare {{the cost of the}} link in the <b>routing</b> <b>table</b> value to the nearest one to set a path list for traveler information.|$|R
5000|$|In computing, [...] is {{a command}} used to view and {{manipulate}} the IP <b>routing</b> <b>table</b> in both Unix-like and Microsoft Windows operating systems. Manual {{manipulation of the}} <b>routing</b> <b>table</b> is characteristic of static routing.|$|R
40|$|<b>Routing</b> <b>table</b> lookup is an {{important}} operation in packet forwarding. The speed at which this operation is performed has a great influence on the overall performance of the network processors. <b>Routing</b> <b>tables</b> are usually stored in main memory with a large access time. Consequently, small fast cache memories {{have been used to}} improve access time. In this paper, we propose a novel <b>routing</b> <b>table</b> compaction scheme {{to reduce the size of}} <b>routing</b> <b>table</b> stored in ternary content addressable memory (TCAM) and improve cache hit rate. Two or more routing entries are compacted into one using don’t care element in TCAM. A small compacted <b>routing</b> <b>table</b> helps to increase cache hit rate; this in turn provides fast address lookups. We have evaluated the compaction scheme through extensive simulations involving IPv 4 <b>routing</b> <b>tables</b> and traces. The original <b>routing</b> <b>tables</b> have been compacted over 60 %. The cache hit rate has improved by up to 20 % over the original tables depending on both cache size (number of cache entries) and traces. We have also analyzed the impact of port errors caused by caching technique, and chose sampling technique to alleviate this problem. The proposed scheme has been extended to IPv 6 with similar results...|$|R
30|$|Secure routing is {{divisible}} {{into three}} sub-problems [16]: secure identifier assignment, <b>routing</b> <b>table</b> maintenance, and message forwarding. Secure identifiers prevent attackers from misrepresenting or abusing their overlay positions to intercept {{more than their}} share of traffic. Secure <b>routing</b> <b>tables</b> maintain peers' connections to appropriate sets of neighbor peers. Finally, secure message forwarding delivers messages using the secure identifiers and <b>routing</b> <b>tables.</b> This last sub-problem {{is the focus of}} our work.|$|R
5000|$|When a RIP router comes online, {{it sends}} a {{broadcast}} Request Message on all of its RIP enabled interfaces. All the neighbouring routers which receive the Request message respond back with the Response Message containing their <b>Routing</b> <b>table.</b> The Response Message is also gratuitously sent when the Update timer expires. On receiving the <b>Routing</b> <b>table,</b> the router processes each entry of the <b>routing</b> <b>table</b> as per the following rules ...|$|R
5000|$|If {{there are}} no route entries {{matching}} the one received then the route entry {{is added to the}} <b>routing</b> <b>table</b> automatically, along with the information about the router from which it received the <b>routing</b> <b>table.</b>|$|R
40|$|Abstract — Exponentially growing <b>routing</b> <b>tables</b> {{create the}} need for {{increasingly}} storage-efficient lookup schemes that do not compromise on lookup performance and update rates. This paper evaluates the mechanisms that determine the storage efficiency of state-of-the-art IP lookup schemes. A novel scheme named BARTS (Balanced <b>Routing</b> <b>Table</b> Search) is proposed for searching large <b>routing</b> <b>tables</b> in wide embedded memory at OC- 192 and OC- 768 speeds, while also supporting fast incre-mental updates. BARTS supports a 38 K-entry <b>routing</b> <b>table</b> in 255 KB and a 72 K-entry table in 453 KB; a 500 K-entry table is estimated to fit into 3 MB. More sophisticated memory management can further reduce these figures to 215, 375 KB, and approx. 2. 5 MB, respectively. This is sufficient to handle the large <b>routing</b> <b>tables</b> towards which the Internet seems to be heading in the near future. I...|$|R
40|$|Abstract — Anecdotal {{evidence}} suggests that misconfiguration of backbone routers occasionally leads to an injection of large <b>routing</b> <b>tables</b> into the BGP routing system. In this paper, we investigate the detailed mechanics of router response to large BGP <b>routing</b> <b>tables.</b> We examine three commercial grade routers, and find that their responses vary significantly. Some routers exhibit table-size oscillations that {{have the potential to}} cause cascading failure. Others need operator intervention to recover from large <b>routing</b> <b>tables.</b> We also find that deployed resource control mechanisms, such as prefix limits and route flap damping, are only partially successful in mitigating the impact of large <b>routing</b> <b>tables.</b> ...|$|R
50|$|ZHLS-GF (Zone-Based Hierarchical Link State Routing Protocol with Gateway Flooding) is {{a hybrid}} routing {{protocol}} based on ZHLS. In ZHLS, all network nodes construct two <b>routing</b> <b>tables,</b> an intra-zone <b>routing</b> <b>table</b> and an inter-zone <b>routing</b> <b>table,</b> by flooding NodeLSPs within the zone and ZoneLSPs throughout the network. However, this incurs a large communication overhead in the network. In ZHLS-GF, the flooding scheme floods ZoneLSPs {{only to the}} gateway nodes of zones thus reduces the communication overhead significantly. Further, in ZHLS-GF only the gateway nodes store ZoneLSPs and construct inter-zone <b>routing</b> <b>tables</b> therefore the total storage capacity required in the network is less than ZHLS.|$|R
40|$|IP {{addresses}} are {{allocated to}} Internet service providers (ISPs) by four Regional Internet Registries (RIRs), in turn the ISPs further assign addresses to end users. To understand the relationship, if any exists, between the address allocation {{and the global}} <b>routing</b> <b>table</b> growth, we present a quantitative analysis of the IPv 4 address allocation and growth of the global BGP <b>routing</b> <b>table</b> {{over the last four}} and half years. Our findings show that (1) the distribution of the first-advertisement-delay, which is defined as the time period between the allocation of an IP prefix and its first BGP announcement has a heavy-tail distribution, and {{a small percentage of the}} allocated address prefixes have never been used; (2) although up to 50 % of the prefixes allocated between Jan. 1, 1998 and April 30, 2002 are advertised in the global <b>routing</b> <b>table</b> with the same prefix length as allocated, most of the rest of the prefixes are advertised as longer (more specific) prefixes; (3) the IP prefix set in the global <b>routing</b> <b>table</b> has been evolving over time. More than half of the prefixes existed in the BGP <b>routing</b> <b>table</b> In January 1998 disappeared by January 2002, while 87, 941 new prefixes were added. Among the prefixes that disappeared, 77 % of them were aggregated into shorter (less specific) prefixes; (4) the impact on <b>routing</b> <b>table</b> size is highly uneven among the allocations. If we take a snapshot of the global <b>routing</b> <b>table</b> dated on April 30, 2002, more than 70 % of the <b>routing</b> <b>table</b> prefixes came from 10 % of the allocated address blocks...|$|R
2500|$|Nodes can use {{mixtures}} of prefixes in their <b>routing</b> <b>table,</b> {{such as the}} Kad Network used by eMule. [...] The Kademlia network could even be heterogeneous in <b>routing</b> <b>table</b> implementations, {{at the expense of}} complicating the analysis of lookups.|$|R
30|$|Table driven method: According to the <b>routing</b> <b>table</b> {{in every}} sensor node, the sensed {{data can be}} {{transmitted}} by the default routing path in the <b>routing</b> <b>table</b> such as destination sequenced distance-vector (DSDV) [15], CGSR [16], and WRP [17].|$|R
5000|$|Nodes can use {{mixtures}} of prefixes in their <b>routing</b> <b>table,</b> {{such as the}} Kad Network used by eMule. [...] The Kademlia network could even be heterogeneous in <b>routing</b> <b>table</b> implementations, {{at the expense of}} complicating the analysis of lookups.|$|R
40|$|Structured P 2 P (DHT) {{networks}} {{based on}} consistent hashing functions have an inherent load balancing problem. The problem becomes more severe {{due to the}} heterogeneity of network nodes and the non-uniform and time-varying file popularity. Existing DHT load balancing algorithms are mainly focused on the issues caused by node heterogeneity. To deal with skewed lookups, this paper presents an elastic <b>routing</b> <b>table</b> (ERT) mechanism for query load balancing, based on the observation that high degree nodes tend to receive more traffic load. The mechanism allows each node to have a <b>routing</b> <b>table</b> of variable size corresponding to node capacities. The indegree and outdegree of the <b>routing</b> <b>table</b> are also adjusted dynamically {{in response to the}} change of file popularity and network churn. Theoretical analysis proves the <b>routing</b> <b>table</b> degree is bounded. The elastic <b>routing</b> <b>table</b> facilitates locality-aware randomized query forwarding to further improve lookup efficiency. By relating query forwarding to a supermarket customer service model, we prove a 2 -way randomized query forwarding policy leads to an exponential improvement in query processing time over random walking. Simulation results demonstrate the effectiveness of the elastic <b>routing</b> <b>table</b> mechanism and its related query forwarding policy for congestion and query load balancing. In comparison with the existing “virtual-server”-based load balancing algorithm and other <b>routing</b> <b>table</b> control approaches, the ERT-based congestion control protocol yields significant improvement in query lookup efficiency...|$|R
40|$|When {{a network}} failure is {{detected}} by an IP router, its <b>routing</b> <b>table</b> is updated for all affected routing entries. The packet loss resulting from this event {{depends on the}} network traffic associated with the updated <b>routing</b> <b>table</b> entries. In this paper, we model this process, define packet loss minimization heuristics relying on network traffic prediction models, and show by simulation that the resulting packet loss can be reduced compared to the default <b>routing</b> <b>table</b> update process...|$|R
30|$|After the convert process, each node in {{the sensor}} network can get its own <b>routing</b> <b>table</b> {{according}} to the beacon cluster. Thus, each sensor nodes have its pre-defined <b>routing</b> <b>table</b> with different network flow directions for different destination. Sensor nodes maintain in the idle mode, and only the cluster head beacons regularly {{for the purpose of}} minimizing power consumption. Using the conversion algorithm, <b>routing</b> <b>table</b> of node # 0 is calculated and shown in Figure 4. From the new <b>routing</b> <b>table,</b> each sensor node can decide the dissemination direction {{according to the}} priority and set of beacon cluster activated by the UE. This means each sensor nodes can make the routing decision independently.|$|R
