0|10000|Public
40|$|Capturing {{software}} requirements from clients {{often leads}} to error prone and vague requirements documents. To surmount this issue, requirements engineers often choose to use UML models to capture their requirements. In this paper we discuss the use of Essential <b>Use</b> <b>Cases</b> (EUCs) as an alternative, user-centric representation which was developed to ease the process of capturing and describing requirements. However, EUCs are not commonly used in practice because, to our knowledge, no suitable tool support has been developed. In addition, requirements engineers face difficulties in finding the correct “essential” requirements (abstract interactions) in a time efficient manner. In order to overcome these problems, we have developed a prototype tool for automated tracing of abstract interactions. We describe the tool and compare the performance and correctness of the results provided by it to that of manual essential <b>use</b> <b>case</b> <b>extraction</b> efforts {{by a group of}} requirements engineers. The results of an end user study of the tool’s usefulness <b>and</b> ease of <b>use</b> are also discussed...|$|R
40|$|A {{process of}} {{high-level}} run-time architecture extraction is described through {{a case study}} of an existing object-oriented system. The process uses detailed UML models such as <b>use</b> <b>cases,</b> sequence diagrams <b>and</b> component diagrams. A significant portion of the process deals with the problems of identification of high level roles from <b>use</b> <b>cases</b> <b>and</b> <b>extraction</b> of application -specific connectors from a set of sequence diagrams. The extracted high-level architecture is described through Component and Connector views...|$|R
40|$|Theme/Doc <b>and</b> <b>use</b> <b>cases</b> are two {{prominent}} approaches to aspect-oriented analysis. They {{have been developed}} independently and up to now, {{there have been no}} attempts to analyze how they are connected to each other. This paper explores the extent to what themes <b>and</b> <b>use</b> <b>cases</b> can be considered the same by developing a process of the transformation of themes into <b>use</b> <b>cases</b> <b>and</b> the reverse one. Extensive similarities have been revealed between themes <b>and</b> <b>use</b> <b>cases</b> with respect to expressing aspectoriented decomposition, relationship to functional decomposition, and generalization. Main differences lie in the way themes <b>and</b> <b>use</b> <b>cases</b> are described, naming convention, lack of actors in themes, and lower level character of some themes. Despite the differences, most of the themes can be transformed directly into <b>use</b> <b>cases</b> <b>and</b> vice versa with a quite straightforward derivation of the relationships among them...|$|R
5000|$|PSI 14 - JT Industrial Application Package, Format <b>and</b> <b>Use</b> <b>Cases</b> (JTIAP) ...|$|R
40|$|Goal <b>and</b> <b>use</b> <b>case</b> {{modeling}} {{has been}} recognized as a key approach for understanding and analyzing requirements. However, in practice, goals <b>and</b> <b>use</b> <b>cases</b> are often buried among other content in requirements specifications documents and written in unstructured styles. It is thus a time-consuming and error-prone process to identify such goals <b>and</b> <b>use</b> <b>cases.</b> In addition, having them embedded in natural language documents greatly limits the possibility of formally analyzing the requirements for problems. To address these issues, we have developed a novel rule-based approach to automatically extract goal <b>and</b> <b>use</b> <b>case</b> models from natural language requirements documents. Our approach is able to automatically categorize goals and ensure they are properly specified. We also provide automated semantic parameterization of artifact textual specifications to promote further analysis on the extracted goal-use case models. Our approach achieves 85 % precision and 82 % recall rates on average for model extraction and 88 % accuracy for the automated parameterization...|$|R
50|$|During {{this stage}} of the ICONIX process the domain model <b>and</b> <b>use</b> <b>case</b> text from {{milestone}} 2 are used to design the system being built. A class diagram is produced from the domain model <b>and</b> the <b>use</b> <b>case</b> text is <b>used</b> to make sequence diagrams.|$|R
5000|$|When in doubt, code or model it out (spikes, prototype, domain <b>and</b> <b>use</b> <b>case</b> models) ...|$|R
5000|$|<b>Use</b> <b>cases</b> can be over-emphasized. Bertrand Meyer {{discusses}} {{issues such}} as driving system design too literally from <b>use</b> <b>cases,</b> <b>and</b> <b>using</b> <b>use</b> <b>cases</b> {{to the exclusion of}} other potentially valuable requirements analysis techniques.|$|R
5000|$|... • Analytics Provide scalable, real-time, network-centric {{analytics}} {{that allow}} for adaptation to customer environments <b>and</b> <b>use</b> <b>cases.</b>|$|R
30|$|Yet, {{the results}} of RQ 1 define the {{requirements}} that should be met by a data analysis pipeline for manufacturing process data. They are agnostic to industry <b>and</b> <b>use</b> <b>case.</b> Thus, process data analysis pipeline should at the least meet these requirements {{and those that are}} specific to the industry <b>and</b> <b>use</b> <b>case.</b> Therefore, {{the results of}} RQ 1 are used to establish the context needed to explain the pipelines in RQ 2.|$|R
40|$|PP Restricted {{to other}} {{programme}} participants (including the Commission Services) RE Restricted {{to a group}} specified by the consortium (including the Commission Services) CO Confidential, only {{for members of the}} consortium (including the Commission Services) Executive Summary This deliverable describes the applications <b>and</b> <b>use</b> <b>case</b> scenarios selected by the partners that are active in WP 6 (<b>Use</b> <b>Cases,</b> Requirements <b>and</b> Evaluation). <b>Use</b> <b>case</b> selection <b>and</b> evaluation criteria are given. Some selected <b>and</b> proposed core <b>use</b> <b>cases</b> are detailed, organized by the application area of a respective project partner. Further requirements, targeted hardware, <b>and</b> expected <b>use</b> <b>case</b> results are specified. Also, potential {{for the use of the}} generic patterns (deliverable D 2. 1) and application specific patterns (deliverable D 2. 3) are mentioned. The annex gives information about further <b>use</b> <b>cases</b> potentially relevant further on in the project or as dissemination and exploitation opportunities. The parallel patterns <b>and</b> the <b>use</b> <b>cases</b> are expected to evolve together and mu-tually depend on each other, during the duration of the ParaPhrase project. Thus...|$|R
40|$|Introduction [...] . 2 End-to-end QoS Architectures [...] 3 Design issues <b>and</b> <b>use</b> <b>cases</b> [...] 4 QoS-aware {{application}} server architecture [...] . 5 Concluding remarks [...] . Reference...|$|R
5000|$|In {{an article}} {{published}} in issue 164/2014 of Linux Magazine, the editor Erik Bärwaldt reviewed GCStar, discussing usability <b>and</b> <b>use</b> <b>cases</b> as well as viability.He concluded: ...|$|R
30|$|Functional design, impact analysis, mock-up, {{technical}} design, technical documentation, technical requirement, technical roadmap, <b>and</b> <b>use</b> <b>case</b> {{are several}} types of design that are used for communication purposes.|$|R
5000|$|Trimmer, K., Parker, K. R., Schou, C. (2009). Functional Requirements for Secure Code: The Reference Monitor <b>and</b> <b>Use</b> <b>Case.</b> Academy of Information and Management Sciences Journal, 12(2), 113-119.|$|R
50|$|In January 2015, GENBAND {{introduced}} the Real Time Communication Tour via the KandyMobile, a tour bus equipped with Kandy product demonstrations <b>and</b> <b>use</b> <b>cases</b> that travelled across North America.|$|R
40|$|Most CBR systems {{rely on a}} fixed {{library of}} cases, where each case {{consists}} {{of a set of}} facts specified in advance. This paper describes techniques for dynamically extracting cases for analogical reasoning from general-purpose knowledge bases, and dynamically expanding them during the course of analogical reasoning. These techniques have several advantages: (1) Knowledge authoring is simplified, since facts can be added without regard to which case(s) they will be used in. (2) Reasoning is more efficient, since task constraints can be <b>used</b> during <b>case</b> <b>extraction</b> to focus on facts likely to be relevant. (3) Larger problems can be tackled, since cases can be dynamically expanded with more details during the matching process itself, rather than starting with completely detailed cases. We describe algorithms for <b>case</b> <b>extraction</b> and <b>case</b> expansion, including how a version of the Structure-Mapping Engine (SME) has been modified to incorporate this new matching technique. The utility of this technique is illustrated by results obtained with two large knowledge bases, created by other groups, <b>and</b> <b>used</b> to answer questions in the DARPA High...|$|R
40|$|The {{purposes}} of this study were to identify the functional requirements of and to build the data model for a PDA-DSS. Through <b>Use</b> <b>Case</b> Analysis <b>and</b> UML modeling, seven <b>Use</b> <b>Cases</b> were documented, <b>and</b> <b>Use</b> <b>Case</b> Diagrams, Activity Diagrams, and Sequence Diagrams related to the management of were developed...|$|R
40|$|The {{support for}} {{traceability}} between requirement specifications has been recognised {{as an important}} task in the development life-cycle of software systems. In this paper, we present a rule-based approach to support the automatic generation of traceability relations between documents which specify requirement statements <b>and</b> <b>use</b> <b>cases</b> (expressed in structured forms of natural language), and analysis object models for software systems. The generation of such relations is based on traceability rules of {{two different types of}} traceability rules. More specifically, we use requirement-to-object-model rules to trace the requirements <b>and</b> <b>use</b> <b>case</b> specification documents to an analysis object model, and inter-requirements traceability rules to trace requirement <b>and</b> <b>use</b> <b>case</b> specification documents to each other. By deploying such rules, our approach can generate four different types of traceability relations. To implement and demonstrate our approach, we have implemented a traceability prototype system. This system assumes requirement <b>and</b> <b>use</b> <b>case</b> specification documents <b>and</b> analysis object models represented in XML. It also uses traceability rules are also represented in an XML-based rule mark-up language that we have developed for this purpose. This XML-based representation framework makes it easier to deploy our prototype in settings characterised by the use of heterogeneous software engineering and requirements management tools. The developed prototype has been used in a series of experiments that we have conducted to evaluate our approach. The results of thes...|$|R
5000|$|... #Caption: UML <b>use</b> <b>case</b> diagram {{with two}} actors <b>and</b> several <b>use</b> <b>cases.</b>|$|R
40|$|<b>Use</b> <b>case</b> modeling, {{including}} <b>use</b> <b>case</b> diagrams <b>and</b> <b>use</b> <b>case</b> specifications, {{is commonly}} applied to structure <b>and</b> document requirements. <b>Use</b> <b>case</b> specifications are usually structured, textual documents complying {{with a certain}} <b>use</b> <b>case</b> template. However, because <b>use</b> <b>case</b> specifications remain essentially textual, ambiguity is inevitably introduced. In this paper, we propose a <b>use</b> <b>case</b> modeling approach, which is composed {{of a set of}} well-defined restriction rules <b>and</b> a <b>use</b> <b>case</b> template. The goal is two-fold: (1) restrict the way users can document <b>use</b> <b>case</b> specifications in order to reduce ambiguity and (2) facilitate automated analysis in order to provide tool support to derive initial analysis models, which in UML are typically composed of class diagrams, interaction diagrams, and possibly other types of diagrams and constraints. Though the proposed restriction rules and template are based on a clear rationale, two main questions need to be investigated. Do users find them too restrictive or impractical in certain situations? Second, do the rules and template have a positive, significant impact {{on the quality of the}} resulting analysis models? To investigate these questions, we performed and report on a controlled experiment, which evaluates the restriction rules <b>and</b> <b>use</b> <b>case</b> template in terms of whether they are easy to apply while developing <b>use</b> <b>case</b> models <b>and</b> whether they help obtain higher quality analysis models in terms of correctness, completeness, redundancy, and understandability. Results show that, the restriction rules are overall easy to apply <b>and</b> that our <b>use</b> <b>case</b> modeling approach result in significant improvements regarding the correctness of derived class diagrams and the understandability of <b>use</b> <b>case</b> specifications...|$|R
40|$|Abstract. <b>Use</b> <b>case</b> {{diagrams}} appear early {{within a}} UML-based development, structured over {{the concepts of}} actors <b>and</b> <b>use</b> <b>cases</b> to capture the users requirements of an application. Good modeling practices suggest that <b>use</b> <b>case</b> diagrams need to be simple and easy-to-read, two goal {{that can be achieved}} by introducing relevant generalizations of actors <b>and</b> <b>use</b> <b>cases.</b> <b>Using</b> this method, the approach presented in this paper allows, using Formal Concept Analysis and one of its variant, Relational Concept Analysis, to refactor a <b>use</b> <b>case</b> diagram as a whole {{in order to make it}} clearer while keeping in mind to respect the semantic of the original diagram. The relevancy of this approach has been confirmed by its implementation as a tool and the results obtained from its application on several signicant diagrams...|$|R
40|$|International audienceUse case {{diagrams}} appear early {{within a}} UML-based development, structured over {{the concepts of}} actors <b>and</b> <b>use</b> <b>cases</b> to capture user requirements of an application. Good modeling practices suggest that <b>use</b> <b>case</b> diagrams should be simple and easy-to-read, two goals {{that can be achieved}} by introducing relevant generalizations of actors <b>and</b> <b>use</b> <b>cases.</b> The approach presented in this paper allows, using Formal Concept Analysis and one of its variants, Relational Concept Analysis, to refactor a <b>use</b> <b>case</b> diagram as a whole {{in order to make it}} clearer while respecting the semantics of the original diagram. The relevancy of this approach has been confirmed by its implementation as a tool and the results obtained from its application on several representative diagrams...|$|R
40|$|<b>Use</b> <b>case</b> point (UCP) {{method has}} been {{proposed}} to estimate software development effort in early phase of software project <b>and</b> <b>used</b> {{in a lot of}} software organizations. Intuitively, UCP is measured by counting the number of actors and transactions included in <b>use</b> <b>case</b> models. Several tools to support calculating UCP have been developed. However, they only extract actors <b>and</b> <b>use</b> <b>cases</b> <b>and</b> the complexity classification of them are conducted manually. We have been introducing UCP method to software projects in Hitachi Systems & Services, Ltd. To effective introduction of UCP method, we have developed an automatic <b>use</b> <b>case</b> measurement tool, called U-EST. This paper describes the idea to automatically classify the complexity of actors <b>and</b> <b>use</b> <b>cases</b> from <b>use</b> <b>case</b> model. We have also applied the U-EST to actual <b>use</b> <b>case</b> models <b>and</b> examined the difference between the value by the tool and one by the specialist. As the results, UCPs measured by the U-EST are similar to ones by the specialist. ...|$|R
40|$|The JISC-funded LADIE project aims {{to produce}} <b>use</b> <b>cases</b> of {{learning}} activities {{through a series}} of workshops with practitioners (www. elframework. org. uk/refmodels/ladie). From these an e-learning framework identifying the services needed to support learning activities will be produced. This review provides part of the background to this work by considering the pedagogical aspects which inform the development of the <b>use</b> <b>cases.</b> The report begins by identifying two gaps; one between the potential of e-learning tools and current usage, the second between the potential of recent learning theories and the current predominance of didactic modes of delivery, considering the factors which contribute to these. The role of learning activities <b>and</b> <b>use</b> <b>cases</b> in (partially) filling these gaps is explored, supported by a review of the learning theories and models that underpin learning activity development and the taxonomies that allow planning, sharing and sourcing. After discussing how <b>use</b> <b>cases</b> can allow mapping of interactions and support services we finish by noting influential learning theories that learning activities <b>and</b> <b>use</b> <b>cases</b> do not address. The purpose of the review is: •	To provide a background {{to the development of the}} learning activity <b>use</b> <b>cases</b> •	To introduce the concepts of learning design, learning activities <b>and</b> <b>use</b> <b>cases</b> •	To provide clear definitions of the terminology •	To communicate the role of <b>use</b> <b>cases</b> developing reusable learning activities...|$|R
5000|$|ISA-62443-1-4 (IEC/TS 62443-1-4) {{defines the}} IACS {{security}} life cycle <b>and</b> <b>use</b> <b>case.</b> This work product {{has been proposed}} {{as part of the}} series, but as of January 2013 development had not yet started.|$|R
50|$|Templates for SDD and UCS (Software Design Document <b>and</b> <b>Use</b> <b>Case</b> Specification), {{architectural}} templates: <b>use</b> <b>case</b> report, structural report, behavioral report, implementation report, environment report, Model Extension, Data Dictionary, Business Process Modeling Notation, Web publisher with collaboration {{ability for}} commenting on and editing report data through a web browser.|$|R
5000|$|The first type of diagram in UML {{that can}} be {{generated}} from an OPM diagram is the <b>Use</b> <b>Case</b> Diagram which is intended for modeling the usage of a system. The main elements comprising the <b>Use</b> <b>Case</b> Diagram are actors <b>and</b> <b>use</b> <b>cases</b> (the entities) along with the relationships (links) among them. Generation of a <b>Use</b> <b>Case</b> Diagram from OPM is therefore based on environmental objects (the actors) and the processes (the <b>use</b> <b>cases)</b> linked to them. Figure 1 {{is an example of}} <b>Use</b> <b>Case</b> Diagram generation of SD0. The figure shows the root OPM diagram (a), the corresponding OPL text (b), <b>and</b> the created <b>Use</b> <b>Case</b> Diagram (c). Figure 2 shows a SD1 level of OPD from the same OPM model (a), <b>and</b> the generated <b>Use</b> <b>Case</b> Diagram (b).|$|R
40|$|<b>Use</b> <b>Cases</b> that {{describe}} possible interactions involving a {{system and its}} environment are increasingly being accepted as effective means for requirements elicitation and analysis. In the current practice, informal definitions of <b>use</b> <b>cases</b> are <b>used</b> <b>and</b> the analysis process is manual. We present UCEd an environment for <b>use</b> <b>cases</b> based requirements engineering. UCEd includes tools for <b>use</b> <b>cases</b> edition {{in conjunction with a}} domain model, <b>use</b> <b>cases</b> integration <b>and</b> <b>use</b> <b>cases</b> simulation. 1...|$|R
5000|$|Since the {{publication}} of the white paper, the group has produced several more in-depth materials, including a standard terminology definition <b>and</b> <b>use</b> <b>cases</b> for NFV that act as references for vendors and operators considering [...]|$|R
40|$|<b>Use</b> <b>case</b> {{model is}} subject to changes {{throughout}} the software development life cycle. Impacts of these changes affect directly the requirements and consequently the resulted system. Scrapping <b>and</b> replacing <b>use</b> <b>case</b> is expensive; {{in this paper we}} proposed a solution that integrates changes in <b>use</b> <b>case</b> in requirement phase. This solution combines independent enhancements to some version of a <b>use</b> <b>case</b> into a new version that include the enhancements <b>and</b> the old <b>use</b> <b>case.</b> CASE tool implementation and experimental evaluation of the proposed approach showed promising results in terms of software development time saving <b>and</b> better <b>use</b> <b>case</b> models integrity...|$|R
40|$|This {{document}} {{presents a}} number of user scenarios <b>and</b> <b>use</b> <b>cases</b> developed to support the wider community’s use of palaeoclimate simulation and historical data, including the arts and humanities and the sciences. The <b>use</b> <b>cases</b> presented are <b>used</b> {{as a source of}} functional requirements for PEG‐BOARD metadata and API developments...|$|R
5000|$|A <b>use</b> <b>case</b> {{has been}} {{described}} as [...] "a generalized description of a set of interactions between the system and one or more actors, where an actor is either a user or another system." [...] While user stories <b>and</b> <b>use</b> <b>cases</b> have some similarities, there are several differences between them.|$|R
40|$|<b>Use</b> <b>case</b> models {{describe}} {{the behavior of}} a software system from the user's perspective. This paper presents a reverse engineering approach for recovering a <b>use</b> <b>case</b> model from object-oriented code. The approach identifies <b>use</b> <b>cases</b> by analyzing class method activation sequences triggered by input events and terminated by output events. The approach produces a structured <b>use</b> <b>case</b> model including diagrams at various levels of abstraction, comprising actors, <b>use</b> <b>cases,</b> associations between actors <b>and</b> <b>use</b> <b>cases,</b> <b>and</b> relationships among <b>use</b> <b>cases.</b> A case study carried out to validate the approach on a C++ small-sized system, produced encouraging results, showing the approach feasibility and highlighting aspects of the approach requiring further investigatio...|$|R
5000|$|Providing a {{framework}} for testing primary <b>and</b> secondary <b>use</b> <b>cases</b> ...|$|R
40|$|A {{survey of}} {{different}} types of prototypes and current prototyping methods and tools is presented. Especially the usage of prototypes with <b>use</b> <b>cases</b> <b>and</b> scenarios is investigated, and an approach to requirements engineering combining the systematic <b>use</b> of prototyping <b>and</b> <b>use</b> <b>cases</b> is described. The approach consists of repeated prototype demonstration sessions with stakeholders in which <b>use</b> <b>cases</b> represented by prototypes are demonstrated...|$|R
