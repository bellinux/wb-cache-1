4|0|Public
50|$|In telecommunication, an <b>automatic</b> <b>callback</b> is a {{computer}} telephony calling feature that permits a user, when encountering a busy condition or other condition where the called individual is unavailable, to instruct the system to retain the called number and to establish the call {{when there is an}} available line or when the called number is no longer busy. <b>Automatic</b> <b>callback</b> may be implemented in the terminal, in the telephone exchange, or shared between them. <b>Automatic</b> <b>callback</b> {{is not the same as}} camp-on.|$|E
50|$|In the United States Army on post wide {{communications}} networks this {{is referred}} to as Callback or <b>Automatic</b> <b>Callback.</b>|$|E
40|$|Obtaining {{valid data}} on {{customer}} needs and translating it into optimum product functionality {{is always a}} challenge, but especially so when the customers are geographically, culturally, and functionally diverse. Digital's Corporate Telecommunications Software Engineering (CTSE) used groupware techniques supported by the distributed use of Quality Function Deployment (QFD) to identify product features that meet customer needs. By linking engineers, customers, and product personnel from across the globe, CTSE redesigned the QFD model to optimize the use of local and global groups in defining product requirements. During one year, three software products, including <b>Automatic</b> <b>Callback</b> version 2. 1, were defined using the Distributed Quality Function Deployment (DQFD) technique. Lessons learned from each interactive session were applied to continuously refine th...|$|E
40|$|We outline a {{methodology}} for the modular specification of telephone services within first-order linear-time temporal logic. Typically, the services {{offered by a}} telephone system consist of a basic service and several optional additional services, such as <b>automatic</b> <b>callback,</b> redirection, etc. We argue informally that temporal logic provides a flexible formalism for the specification of individual services, and for the composition of different services. We present a style of specification, in which the expected behavior of each additional service can be specified independently of other services. In this style, it is straight-forward to compose noninteracting services. We outline, by means of examples, how certain interactions between services that prescribe conflicting behavior can manifest themselves as inconsistencies when the services are composed. We then outline how the resolution of such interactions {{can be described in}} the formalism. 1 Introduction The difficulty of designing [...] ...|$|E

