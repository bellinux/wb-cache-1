42|29|Public
50|$|D has {{built-in}} support for documentation comments, allowing <b>automatic</b> <b>documentation</b> generation.|$|E
5000|$|Ciao {{includes}} lpdoc, an <b>automatic</b> <b>documentation</b> generator. Itprocesses programs {{adorned with}} (Ciao) assertions and machine-readablecomments and generates manuals in many formats including HTML, pdf,texinfo, info, man, etc., {{as well as}} on-line help, ascii READMEfiles, entries for indices of manuals (info, WWW, ...), and maintainsWWW distribution sites.|$|E
50|$|Colectica was {{originally}} funded {{in part by}} the NIH National Institute on Aging to explore <b>automatic</b> <b>documentation</b> of computer assisted surveys. This grant saw the creation of metadata extraction and flowchart creation tools for CASES, Blaise, and CSPro survey instrument source code. The grant also partially funded the creation of a questionnaire specification content area in the Data Documentation Initiative's DDI Lifecycle metadata standard. The functionality of these tools, originally named SurveyViz, is now bundled with the Colectica Designer and based on the DDI standard.|$|E
50|$|<b>Automatic</b> HTML {{workshop}} <b>documentation.</b>|$|R
50|$|As an {{object-oriented}} programming language, Logtalk's major features include support for both classes (with optional metaclasses) and prototypes, parametric objects, protocols (interfaces), categories (components, aspects, hot patching), multiple inheritance, public/protected/private inheritance, event-driven programming, high-level multi-threading programming, reflection, and <b>automatic</b> generation of <b>documentation.</b>|$|R
50|$|All project stakeholdersâ€˜ {{requirements}} and changes are documented {{by use of}} forms, analyzed and prioritized with the tool. Converted into tasks they are visible in the project plan. in-STEP BLUE provides graphic requirements modeling with the UML and standardized <b>documentation.</b> <b>Automatic</b> document versioning guarantees requirements traceability from documentation to test cases to implementation.|$|R
40|$|Consideration {{is given}} to {{software}} development to support NASA flight research. The Multipurpose User-Oriented Software Technology (MUST) program, designed to integrate digital systems into flight research, is discussed. Particular attention {{is given to}} the program's special interactive user interface, subroutine library, assemblers, compiler, <b>automatic</b> <b>documentation</b> tools, and test and simulation subsystems...|$|E
40|$|We {{investigate}} {{the current state}} of open-source (or at least free proprietary) tool-chains that enable cross developments for different architectures of embedded systems and the ability to integrate them on an Eclipse based development environment. We provide a proof of concept of a possible solution that, in addition to the basic features, includes hardware debugging and productivity enhancement tools such as <b>automatic</b> <b>documentation,</b> version control, and serial console management...|$|E
40|$|The test-beam {{software}} classes {{describing the}} mapping of data acquisition channel numbers to detector strip positions are described. The local detector and global test-beam co-ordinate systems are given. A {{description of the}} detector geometry of the Hamamatsu and Micron prototype detectors as implemented in the test-beam software is provided. If you require up-to-date information on the features in the current code, please use the <b>automatic</b> <b>documentation</b> class reference guide at [URL]...|$|E
40|$|<b>Automatic</b> cloud <b>documentation</b> {{from the}} ground {{is one of the}} basic tools to set up cloud climatologies with high {{resolution}} in space and time. Ground-based cloud data are of specific importance to study the role of clouds on the radiation balance of the earth's surface and the lower atmosphere. They can also provide ground-truth information for satellite-retrieved cloud parameters. A new version of the Whole Sky Imager (WSI) was designed and developed at the University of California, San Diego (UCSD) for Deutscher Wetterdienst (DWD), and installed at the Meteorological Observatory Potsdam of DWD in December 1999. The new WSI design will be discussed, and first results of measure-ments be presented. 1...|$|R
40|$|Distributed {{collaboration}} systems use {{cloud computing}} services to support synchronous and asynchronous distributed collaboration. We are investigating how {{the benefits of}} these remote collaboration technologies {{can be applied to}} collocated creative teams. We are building Dazzle, a collaboration system to support product design teams during face-to-face user research and brainstorming meetings. Product designers share information on a common display that is driven by file and screen sharing services. The principal benefit over current display sharing techniques is that the team automatically builds a real-time archive of all viewed files that can be revisited. By applying distributed collaboration technologies to face-to-face meetings, Dazzle facilitates information sharing and provides <b>automatic</b> meeting <b>documentation...</b>|$|R
40|$|This paper {{describes}} {{a case study}} where SofTrack - a Software Defect Report and Tracking System - was implemented using internet technology in a geographically distributed organization. Four medium to large size information systems with different levels of maturity are being analyzed {{within the scope of}} this project. They belong to the Portuguese Navy's Information Systems Infrastructure andwere developed using typical legacy systems technology: COBOL with embedded SQL for queries in a Relational Database environment. This pilot project of Empirical Software Engineering has allowed the development of techniques to help software managers to better understand, control and ultimately improve the software process. Among them are the introduction of <b>automatic</b> system <b>documentation,</b> module's complexity assessment and effort estimation for maintenance activities in the organization. 1. Introduction Software process improvement (SPI) is currently viewed as a means to achieve a higher quality [...] ...|$|R
40|$|The track fit {{algorithm}} and {{its implementation}} in the vertex locator software is presented. The algorithm {{is based on}} a linearised least squares fit, where the solution is obtained by matrix inversion. A simple pattern recognition algorithm using reference tables, useful for high multiplicity events, is described. If you require up-to-date information on the features in the current code, please use the <b>automatic</b> <b>documentation</b> class reference guide at [URL]...|$|E
40|$|Considerable {{advances}} {{have been made}} in the last few years in the development of hardware structures useful for the implementation of real-time document processing systems and on-line information retrieval. At the same time, relatively little is known about the software packages most appropriate for the new technology. Following certain proposals for the creation of national and international registries of software packages, a sample catalog of software routines is developed for use in modern <b>automatic</b> <b>documentation</b> systems...|$|E
40|$|Abstract: In {{the paper}} a model-based {{automated}} approach to procedural process control software is presented. A domain-specific modelling language specialised for analysis {{and design of}} procedural process control software is described. A formal description of the language syntax is {{necessary in order to}} define a mapping function from models to pro-gramme code. Furthermore, a software modelling tool is described that supports editing of software models and automatic source code generation for programmable logic con-trollers as well as <b>automatic</b> <b>documentation</b> generation...|$|E
40|$|The Alida Java {{software}} library implements a concept for designing libraries and toolkits in data analysis. It supports and simplifies integrated algorithm development by inherently joining algorithm implementation, <b>automatic</b> analysis process <b>documentation</b> and fully generic generation of user interfaces. In Alida each data analysis or manipulation action is realized {{in terms of}} an operator that acts on given data to produce desired output data. As all operators implement a common interface definition, their input and output parameters are accessible in a standardized manner, and they can also be invoked in a predefined way. Alida's concept is well-suited to ease algorithm development and their application to real-world problems by non-expert users. Due to the operator interface definition and the unified handling of operators it is for example possible to automatically generate user interfaces for operators, i. e. graphical frontends or commandline interfaces. The Java implementation of the Alida concept provides a mature framework for implementing and running operators. It also includes <b>automatic</b> process <b>documentation</b> and automatically generated command line and graphical user interfaces. Calls to operators not only produce data analysis results, but are at the same time registered within the framework together with all input and output objects as well as parameters settings of the various operators. These data acquired during an analysis process and the order of operator calls form a directed graph datastructure containing all relevant information for later reconstruction or verification of the analysis procedure. The implementation allows to make the directed graph datastructure explicit in terms of XML representations which can be visually explored with appropriate graphical frontends like Chipory, or might be stored in data bases for archival purposes...|$|R
40|$|PL 360 is a phrase-structured {{programming}} language which provides the facilities of a symbolic machine language for the IBM 360 computers. An <b>automatic</b> process, syntax-directed <b>documentation,</b> is described which acquires programming documentation through the syntactical {{analysis of a}} program, followed by the interrogation of the originating programmer. This documentation can be dispensed through reports of file query replies when other programmers later {{need to know the}} program structure and its details. A key principle of the programming documentation process is that it is managed {{solely on the basis of}} the syntax of programs...|$|R
40|$|Abstract. This paper {{presents}} how the platform-specific {{development environment}} of time-triggered (TT) {{systems can be}} integrated with a visual design toolkit based on UML. The modeling extensions introduced by us enable the unification of the advantages provided by both the embedded development environment and the UML CASE tools. UML offers visual design, <b>automatic</b> code and <b>documentation</b> generation, while the underlying TT development tools offer platform-specific task and communication scheduling and fault tolerance middleware construction. This results in an integrated environment that supports the entire development {{within the framework of}} the UML CASE tool. ...|$|R
40|$|Unified Modeling Language (UML) {{has been}} widely {{accepted}} as an object-oriented analysis/design methodology in the software engineering community, {{and is in the}} process of revised standardization at OMG (Object Management Group). One of the current major enhancements is SMIF (Stream-based Model Interchange Format) specification, which aims to interchange UML models in a standard based way. It is expected to be based on XML (eXtensible Markup language) standard and used in various development tools such as CASE tools, <b>automatic</b> <b>documentation</b> tools and repositories...|$|E
40|$|The paper {{describes}} {{techniques for}} testing and validating {{software for the}} TCV (Terminal Configured Vehicle) program which is intended to solve problems associated with operating a commercial transport aircraft in the terminal area. The TCV research test bed is a Boeing 737 specially configured with digital computer systems to carry out automatic navigation, guidance, flight controls, and electronic displays research. The techniques developed for time and cost reduction include <b>automatic</b> <b>documentation</b> aids, an automatic software configuration, and an all software generation and validation system...|$|E
40|$|We {{propose a}} small {{extension}} of the Erlang language that allows programmers to specify contracts with type information {{at the level of}} individual functions. Such contracts are optional and they document the intended uses of functions. Contracts allow <b>automatic</b> <b>documentation</b> tools such as Edoc to generate better documentation and defect detection tools such as Dialyzer to detect more type clashes. Since the Erlang/OTP system already contains components which perform automatic type inference of success typings, we also describe how contracts interact with success typings and can often provide some key information to the inference process. Copyright Â© 2007 ACM...|$|E
50|$|In 1966 the 1352 Photographic Group {{based at}} Lookout Mountain Air Force Station {{took on a}} new role, documenting the {{expanding}} Vietnam War. On 8 February 1966, Det. 5, 1352 Photographic Group at Tan Son Nhut Air Base, South Vietnam became the 600th Photo Squadron charged with the increased responsibility of all USAF photographic services in Southeast Asia except reconnaissance photography. This responsibility grew {{over the years to}} include combat <b>documentation,</b> <b>automatic</b> gun-camera and high-speed pod and blister photography of ordnance deliveries, still photography, and photographic support of the Vietnamese Air Force (VNAF).|$|R
40|$|An {{online survey}} was {{conducted}} (June 2001) of attitudes of distance education (DE) learners/teachers to online collaborative tools. The respondents {{in the study were}} 135 graduate students and faculty members of Athabasca Universityâ€™s Centre for Distance Education (CDE). They demonstrated particular interest in tools that offer the following features: file sharing, <b>automatic</b> synchronisation of <b>documentation</b> for the group, audio conferencing, text chat, and privacy. They also expressed useful opinions on topics including their willingness to upgrade their computer systems, and to pay to avoid online product advertising. These results will be useful in the selection of appropriate new methods for online instruction...|$|R
40|$|This paper {{describes}} {{a system that}} is currently being implemented to generate test data for programs written in ANSI FORTRAN. Given a path, the system symbolically executes the program and creates a set of constraints on the programâ€™s input variables. If the set of constrains is linear, linear programming techniques are employed to solve the system of inequalities. A solution to the system of constrains is then a set of test data that will drive execution down the given path. If it can be determined that the set of constraints is inconsistent then the given path is shown to be nonexecutable. To increase the chance of detecting some of the more common programming errors, artificial constraints are temporarily created that simulate the error condition and an attempt is made to solve the augmented set of constraints. A symbolic representation of the programâ€™s output variables in terms of the programâ€™s input variables is also created. The symbolic representation is in a human readable form that facilitates error detection as well as being a possible aid in allegation generation and <b>automatic</b> program <b>documentation.</b> ...|$|R
40|$|It {{is pointed}} out that in {{large-scale}} computer software systems, program documents are too often fraught with errors, out of date, poorly written, and sometimes nonexistent {{in whole or in}} part. The means are described by which many of these typical system documentation problems were overcome in a large and dynamic software project. A systems approach was employed which encompassed such items as: (1) configuration management; (2) standards and conventions; (3) collection of program information into central data banks; (4) interaction among executive, compiler, central data banks, and configuration management; and (5) <b>automatic</b> <b>documentation.</b> A complete description of the overall system is given...|$|E
40|$|Contents 1 Introduction 1 1. 1 Motivations............................ 1 1. 2 Objectives............................. 2 2 Planning system {{framework}} 5 2. 1 A view on planning activities.................. 5 2. 2 Requirements........................... 6 2. 3 The applied network model................... 7 2. 3. 1 Logical {{structure of}} layers................ 9 2. 3. 2 Relations between layers................. 9 2. 3. 3 Layer types........................ 10 2. 3. 4 Di#erent {{representations of the}} model.......... 11 2. 4 Visual representation of models................. 12 2. 5 <b>Automatic</b> <b>documentation....................</b> 14 3 Evolution of the mobile network concept 16 3. 1 Review of GSM/GPRS architecture............... 17 3. 1. 1 Routing procedure............ ...|$|E
40|$|The {{objectives}} of NASA's MUST (Multipurpose User-oriented Software Technology) program at Langley Research Center are {{to cut the}} cost of producing software which effectively utilizes digital systems for flight research. These objectives will be accomplished by providing an integrated system of support software tools for use throughout the research flight software development process. A description of the overall MUST program and its progress toward {{the release of a}} first MUST system will be presented. This release includes: a special interactive user interface, a library of subroutines, assemblers, a compiler, <b>automatic</b> <b>documentation</b> tools, and a test and simulation system...|$|E
40|$|Abstract. In {{this system}} {{demonstration}} we present CurryDoc, {{a tool for}} the <b>automatic</b> generation of <b>documentation</b> manuals in HTML format from programs written in the declarative multi-paradigm language Curry. The documentation is generated by combining comments in the source program with information extracted from the program. It extends other tools with a similar goal (e. g., javadoc, lpdoc) by the inclusion of information in the generated documents which has been computed by analyzing the structure and approximating the run-time behavior of the program. CurryDoc is completely implemented in Curry and is used to generate the documentation of the libraries included in PAKCS, a freely available implementation of Curry. ...|$|R
30|$|This {{electronic}} workshop {{system has}} been designed to enhance group effectiveness, efficiency and satisfaction. It delivers increased interactivity and participation by parallelization, increased openness and less personal prejudice through anonymity, more sophisticated analysis by voting and analysis in real time, {{and by the end of}} the day <b>automatic,</b> comprehensive, neutral <b>documentation</b> retrievable from the computer [13, 14]. Contributions were directly entered by the participants and immediately visible on screen to everyone in anonymous format. By sidestepping social barriers (anonymity) and overcoming limitations of process (parallelization) more ideas were generated and shared with less conformity than in a traditional brainstorming or brainwriting session. The benefits of electronic brainstorming increase with group size [15].|$|R
40|$|The {{previous}} report summarised {{the findings of}} an online survey concerning Masterâ€™s of Distance Education studentsâ€™ attitudes to online collaborative tools. The respondents {{in the study were}} 135 graduate students and faculty members of Athabasca Universityâ€™s Centre for Distance Education (CDE). They demonstrated particular interest in tools that offer the following features: file sharing; <b>automatic</b> synchronisation of <b>documentation</b> for the group; audio conferencing; text chat; and privacy. In the effort to respond to this interest, the Centre conducted a series of trials of conferencing and other file-sharing products. This report discusses the merits and disadvantages of current collaborative methods, and problems faced by distance educators and their students in seeking to adopt them...|$|R
40|$|Experience in {{maintaining}} up-to-date documentation for one module of the large-scale Medical Literature Analysis and Retrieval System 2 (MEDLARS 2) is described. Several innovative techniques were explored {{in the development}} of this system's data management environment, particularly those that use PL/I as an automatic documenter. The PL/I data description section can provide <b>automatic</b> <b>documentation</b> by means of a master description of data elements that has long and highly meaningful mnemonic names and a formalized technique for the production of descriptive commentary. The techniques discussed are practical methods that employ the computer during system development in a manner that assists system implementation, provides interim documentation for customer review, and satisfies some of the deliverable documentation requirements...|$|E
40|$|Data {{analysis}} procedures {{can often}} be modeled {{as a set of}} manipulation operations applied to input data and resulting in transformed intermediate and result data. The Java library Alida is providing an advanced development framework to support programmers in developing data analysis applications adhering to such a scheme. The main intention of Alida is to foster re-usability by offering well-defined, unified, modular APIs and execution procedures for operators, and to ease development by releasing developers from tedious tasks. Alida features automatic generation of handy graphical and command line user interfaces, a built-in graphical editor for workflow design, and an <b>automatic</b> <b>documentation</b> of analysis pipelines. Alida is available from its project webpage [URL], on Github and via our Maven server...|$|E
40|$|This paper {{discusses}} {{an integrated}} software program management environment, ScmEngine, being {{built at the}} University of Minnesota. Industrial software is usually large, has many versions, undergoes frequent changes, and is developed concurrently by multiple programmers. In ScmEngine all information needed for program management is stored using an uniform representation in a distributed repository built on top of X. 500, and the various documentation and views of the software artifacts can be generated automatically using the tool repository. The innovative capabilities of this tool are 1) Uniform software artifacts representation 2) Inter-relation and traceability maintenance among software artifacts 3) Tools repository and integration using tool composition scenarios 4) <b>Automatic</b> <b>documentation</b> and versioning control. 1...|$|E
50|$|In 1966 the 1352 Photographic Group {{took on a}} new role, the {{documentation}} of the growing war in Vietnam. On the 8th of February 1966, Det. 5, 1352 Photographic Group at Tan Son Nhut Air Base, South Vietnam became the 600th Photo Squadron charged with the increased responsibility of all USAF photographic services in Southeast Asia except reconnaissance photography. This responsibility grew {{over the years to}} include combat <b>documentation,</b> <b>automatic</b> gun-camera and high-speed pod and blister photography of ordnance deliveries, still photography, and photographic support of the Vietnamese Air Force (VNAF). Between 1966 and 1976, the 600th Photo Squadron lost 11 combat cameramen killed-in-action. Four were killed in 1968 at the height of U.S. combat operations in Vietnam.|$|R
40|$|Imagers are an {{increasingly}} {{significant source of}} sensory observations about human activity and the urban environment. ImageScape is a software tool for processing, clustering, and browsing large sets of images. Implemented {{as a set of}} web services with an Adobe Flash-based user interface, it supports clustering by both image features and context tags, as well as re-tagging of images in the user interface. Though expected to be useful in many applications, ImageScape was designed as an analysis component of DietSense, a software system under development at UCLA to support (1) the use of mobile devices for <b>automatic</b> multimedia <b>documentation</b> of dietary choices with just-in-time annotation, (2) efficient post facto review of captured media by participants and researchers, and (3) easy authoring and dissemination of the automatic data collection protocols. A pilot study, in which participants ran software that enabled their phones to autonomously capture images of their plates during mealtime, was conducted using an early prototype of the DietSense system, and the resulting image set used in the creation of ImageScape. ImageScape will support two kinds of users within the DietSense application: The participants in dietary studies will have the ability to easily audit their images, while the recipients of the images, health care professionals managing studies and performing analysis, will be able to rapidly browse and annotate large sets of images...|$|R
40|$|Software {{evolution}}, <b>automatic</b> {{evolution and}} <b>documentation,</b> design and code coherence, UML The urgency that characterizes many requests for evolution forces the system administrators/developers of directly adapting the system without {{passing through the}} adaptation of its design. This creates {{a gap between the}} design information and the system it describes. The existing design models provide a static and often outdated snapshot of the system unrespectful of the system changes. Software developers {{spend a lot of time}} on evolving the system and then on updating the design information according to the evolution of the system. To this respect, we present an approach to automatically keep the design information (UML diagrams in our case) updated when the system evolves. The UML diagrams are bound to the application and all the changes to it are reflected to the diagrams as well. ...|$|R
