1|7|Public
40|$|The {{following}} registers are CPU and a subsection of SIU control registers implemented {{within the}} MPC 860. Access to these special registers occurs via the instructions mtspr and mfspr. Special purpose registers must access memory indirectly via the general purpose registers. General purpose registers may be written as ‘rN ’ or simply as ‘N. ’ An <b>assembler</b> <b>directive</b> for accessing these registers is as follows: mtspr 8, r 0 / * MOVE TO THE LINK REGISTER */ mfspr 3, 638 / * MOVES FROM THE IMMR REGISTER TO REGISTER 3 */ NOTE The IMMR register (special purpose register # 638) setting determines the base address for all on-chip 860 modules {{which are not}} dedicated to core (CPU) operation. During HRESET, the internal base address is initially set to one of four addresses determined by the ISB field in the HARD RESET CONFIGURATION WORD. If during HRESET the RSTCONF pin is not driven low and the HARD RESET CONFIGURATION WORD is not placed on the data bus, the initial base address is $ 00000000. After the reset process is finished, the internal base address may be moved to any value by writing to the IMMR register. ...|$|E
50|$|GAS uses <b>assembler</b> <b>directives</b> (also {{known as}} pseudo ops), which are {{keywords}} {{beginning with a}} period that behave similarly to preprocessor directives in the C programming language. While most of the available <b>assembler</b> <b>directives</b> are valid regardless of the target architecture, some directives are machine dependent.|$|R
5000|$|<b>Assembler</b> <b>directives</b> (e.g. START, CSECT, DC, LTORG, EQU, AIF, END) ...|$|R
50|$|The {{third way}} is to include a {{corresponding}} number of NOP <b>assembler</b> <b>directives</b> directly in the program code.|$|R
5000|$|Minimalistic {{support for}} three <b>assembler</b> <b>{{directives}}</b> (.equ, [...]db, [...]ds) to control data locations, there exist no directives to directly control code locations ...|$|R
50|$|GAS {{supports}} a general syntax {{that works for}} all of the supported architectures. The general syntax includes <b>assembler</b> <b>directives</b> and a method for commenting.|$|R
5000|$|Jubin Mitra's 8085 Simulator - Open source (under GNU license) software. Supports many <b>assembler</b> <b>directives,</b> timing {{diagrams}} and {{a virtual}} emulation kit. The specialty of this software {{is that it}} can traverse a given program backwards in most cases.|$|R
40|$|Includes bibliographical {{references}} (page 84) This project {{presents a}} tagged {{model of the}} dataflow computer. The first part contains {{a detailed description of}} the architecture, and the computer operation of the dataflow computer. In the second part, a dataflow computer assembler with limited <b>assembler</b> <b>directives</b> and program structuring statements is written to conclude this project...|$|R

