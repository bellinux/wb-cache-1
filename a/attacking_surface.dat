7|1111|Public
50|$|As noted above, {{these ships}} were {{optimized}} for anti-air warfare, {{but they also}} have weapons on-board capable of <b>attacking</b> <b>surface</b> and submarine targets, for example: the RGM-84F Harpoon missile and Mk. 46 torpedoes.|$|E
5000|$|In {{addition}} to their ASW and SAR capabilities, most P-3Cs have been modified to carry Harpoon and Maverick missiles for <b>attacking</b> <b>surface</b> ships. American P-3s were formerly armed with the Lulu nuclear depth charge for ASW, but those {{were removed from the}} arsenal and scrapped decades ago.|$|E
5000|$|While under {{command of}} Rogowsky, on 16 March, [...] {{acquired}} U-866 on sonar and commenced a hedgehog attack. This attack missed the U-boat, which then {{settled on the}} ocean floor, attempting {{to hide from the}} <b>attacking</b> <b>surface</b> ships. Unfortunately for the U-boat, the seabed in the area was ideal for the surface ship's sonar and USS Lowe, , , and , all destroyer escorts, continued to attack with depth charges, until the U-boat was judged destroyed.|$|E
40|$|This thesis {{endeavors to}} {{determine}} the feasibility of design metrics {{as a predictor of}} <b>attack</b> <b>surface</b> size by finding a positive correlation between one or more design metrics and an application’s <b>attack</b> <b>surface</b> measurement. An <b>attack</b> <b>surface</b> is the set of ways in which an adversary can enter a system and potentially cause damage. For an experimental setting, six open-source java-based projects were analyzed. For each project, the <b>attack</b> <b>surface</b> is assessed using Microsoft’s <b>Attack</b> <b>Surface</b> Analyzer, which takes a snapshot of a system state before and after the installation of product(s) and displays the changes to a number of key elements of the Windows <b>attack</b> <b>surface.</b> A collection of design metrics was collected from each open-source project as well. The goal is to find a metric or set of metrics that predicted the <b>attack</b> <b>surface</b> changes identified by the <b>Attack</b> <b>Surface</b> Analyzer. Department of Computer ScienceThesis (M. S. ...|$|R
5000|$|The AtomicEye <b>Attack</b> <b>Surface</b> Manager (ASM) aids IT {{management}} by reduces an organization’s <b>attack</b> <b>surface</b> through endpoint scans.|$|R
40|$|Practical {{software}} security measurements and metrics {{are critical to}} the improvement of {{software security}}. We propose a metric to determine whether one software system is more secure than another similar system {{with respect to their}} <b>attack</b> <b>surface.</b> We use a system’s <b>attack</b> <b>surface</b> measurement as an indicator of the system’s security; the larger the <b>attack</b> <b>surface,</b> the more insecure the system. We measure a system’s <b>attack</b> <b>surface</b> in terms of three kinds of resources used in attacks on the system: methods, channels, and data. We demonstrate the use of our <b>attack</b> <b>surface</b> metric by measuring the <b>attack</b> <b>surfaces</b> of two open source IMAP servers and two FTP daemons. We validated the <b>attack</b> <b>surface</b> metric by conducting an expert user survey and by performing statistical analysis of Microsoft Security Bulletins. Our metric {{can be used as a}} tool by software developers in the software development process and by software consumers in their decision making process. ...|$|R
50|$|Upon water entry, FIDO {{performed}} a circular search at a predetermined depth {{controlled by a}} bellows and pendulum system. This continued until the potential target's 24 kHz acoustic signal detected by the hydrophones exceeded a predetermined threshold level, at which point control was then shifted to the passive acoustic proportional homing system. Initially the torpedoes were set {{to search for a}} target at a depth of 50 feet (15 m), this was later changed to 150 feet (45 m). To prevent the torpedo accidentally <b>attacking</b> <b>surface</b> ships, it resumed its circling search if it rose above a depth of 40 feet (12 m).|$|E
50|$|BrahMos {{claims it}} has the {{capability}} of <b>attacking</b> <b>surface</b> targets by flying as low as 5 meters in altitude and the maximum altitude it can fly is 14000 meters. It has a diameter of 70 cm and a wingspan of 1.7 m. It can gain a speed of Mach 2.8, and has a maximum range of 290 km. The ship-launched and land-based missiles can carry a 200 kg warhead, whereas the aircraft-launched variant (BrahMos A) can carry a 300 kg warhead. It has a two-stage propulsion system, with a solid-propellant rocket for initial acceleration and a liquid-fuelled ramjet responsible for sustained supersonic cruise. Air-breathing ramjet propulsion is much more fuel-efficient than rocket propulsion, giving the BrahMos a longer range than a pure rocket-powered missile would achieve.|$|E
40|$|Given {{the nature}} of mobile devices and unlock procedures, unlock {{authentication}} is a prime target for credential leaking via shoulder surfing, a form of an observation attack. While the research community has investigated solutions to minimize or prevent the threat of shoulder surfing, {{our understanding of how}} the attack performs on current systems is less well studied. In this paper, we describe a large online experiment (n= 1173) that works towards establishing a baseline of shoulder surfing vulnerability for current unlock authentication systems. Using controlled video recordings of a victim entering in a set of 4 - and 6 -length PINs and Android unlock patterns on different phones from different angles, we asked participants to act as attackers, trying to determine the authentication input based on the observation. We find that 6 -digit PINs are the most elusive <b>attacking</b> <b>surface</b> where a single observation leads to just 10. 8...|$|E
40|$|Practical {{software}} security metrics and measurements {{are essential to}} the development of secure software [18]. In this paper, we propose to use a software system’s <b>attack</b> <b>surface</b> measurement as an indicator of the system’s security; the larger the <b>attack</b> <b>surface,</b> the more insecure the system. We formalize the notion of a system’s <b>attack</b> <b>surface</b> using an I/O automata model of the system [15] and define a quantitative measure of the <b>attack</b> <b>surface</b> in terms of three kinds of resources used in attacks on the system: methods, channels, and data. We demonstrate the feasibility of our approach by measuring the <b>attack</b> <b>surfaces</b> of two open source FTP daemons and two IMAP servers. Software developers can use our <b>attack</b> <b>surface</b> measurement method in the software development process and software consumers can use the method in their decision making process...|$|R
40|$|We {{propose a}} metric to {{determine}} whether one version of a software system is more secure than another {{with respect to the}} system’s <b>attack</b> <b>surface.</b> Rather than count bugs at the code level or count vulnerability reports at system level, we measure a system’s attackability, i. e., how likely the system will be successfully attacked. We define the <b>attack</b> <b>surface</b> of a system in terms of the system’s attackability along three abstract dimensions: method, data, and channel. Intuitively, the larger the <b>attack</b> <b>surface,</b> the more likely the system will be attacked, and hence the more insecure it is. We demonstrate the use of the <b>attack</b> <b>surface</b> metric by measuring and comparing the <b>attack</b> <b>surface</b> of two versions of a hypothetical IMAP server...|$|R
40|$|Software {{security}} failures {{are common}} {{and a long}} standing challenge to the research community. We can conceptualize the vulnerability of an application through its <b>attack</b> <b>surface</b> size. A system's <b>attack</b> <b>surface</b> is {{an indicator of the}} system’s security. Unfortunately predicting software’s future <b>attack</b> <b>surface</b> size during design phase in earlier stage of software development life cycle (SDLC) is largely missing...|$|R
40|$|This {{paper was}} {{published}} in the journal Physical Chemistry Chemical Physics and the definitive published version is available at [URL] H 2 O splitting mechanism is a very attractive alternative used in electrochemistry for the formation of O 3. The most efficient catalysts employed for this reaction at room temperature are SnO 2 -based, in particular the Ni/Sb-SnO 2 catalyst. In order to investigate the H 2 O splitting mechanism Density Functional Theory (DFT) was performed on a Ni/Sb-SnO 2 surface with oxygen vacancies. By calculating different SnO 2 facets, the (110) facet was deemed most stable, and further doped with Sb and Ni. On this surface, the H 2 O splitting mechanism was modelled paying particular attention to the final two steps, the formation of O 2 and O 3. Previous studies on β-PbO 2 have shown that the final step in the reaction (the formation of O 3) occurs via an Eley-Rideal style interaction where surface O 2 desorbs before <b>attacking</b> <b>surface</b> O to form O 3. It is revealed that for Ni/Sb-SnO 2, although the overall reaction is the same the surface mechanism is different. The formation of O 3 is found to occur through a Langmuir-Hinshelwood mechanism as opposed to Eley-Rideal. In addition to this the relevant adsorption energies (Eads), Gibb’s free energy (ΔGrxn) and activation barriers (Eact) for the final two steps modelled in the gas phase have been shown; providing the basis for a tool to develop new materials with higher current efficiencies...|$|E
40|$|Abstract—Measurement of {{software}} {{security is a}} long standing challenge to the research community. At the same time, practical security metrics and measurements are essential for secure software development. Hence the need for metrics is more pressing now due to a growing demand for secure software. In this paper, we propose to use a software system’s <b>attack</b> <b>surface</b> measurement {{as an indicator of}} the system’s security. We formalize the notion of a system’s <b>attack</b> <b>surface</b> and introduce an <b>attack</b> <b>surface</b> metric to measure the <b>attack</b> <b>surface</b> in a systematic manner. Our measurement method is agnostic to a software system’s implementation language and is applicable to systems of all sizes; we demonstrate our method by measuring the <b>attack</b> <b>surfaces</b> of small desktop applications and large enterprise systems implemented in C and Java. We conducted three exploratory empirical studies to validate our method. Software developers can mitigate their software’s security risk by measuring and reducing their software’s <b>attack</b> <b>surfaces.</b> Our <b>attack</b> <b>surface</b> reduction approach complements software industry’s traditional code quality improvement approach for security risk mitigation and is useful in multiple phases of the software development lifecycle. Our collaboration with SAP demonstrates the use of our metric in the software development process...|$|R
40|$|Software {{consumers}} {{often need}} {{to choose between}} different software that provide the same functionality. Today, security is a quality that many consumers, especially system administrators, care about and will use in choosing one software system over another. An <b>attack</b> <b>surface</b> metric is a security metric for comparing the relative security of similar software systems [8]. The measure of a system's <b>attack</b> <b>surface</b> is {{an indicator of the}} system's security: given two systems, we compare their <b>attack</b> <b>surface</b> measurements to decide whether one is more secure than another along each of the following three dimensions: methods, channels, and data. In this paper, we use the <b>attack</b> <b>surface</b> metric to measure the <b>attack</b> <b>surfaces</b> of two open source FTP daemons: ProFTPD 1. 2. 10 and Wu-FTPD 2. 6. 2. Our measurements show that ProFTPD is more secure along the method dimension, ProFTPD is as secure as Wu-FTPD along the channel dimension, and Wu-FTPD is more secure along the data dimension. We also demonstrate how software consumers can use the <b>attack</b> <b>surface</b> metric in making a choice between the two FTP daemons...|$|R
5000|$|<b>Attack</b> <b>Surface</b> Analyzer {{works on}} the Windows 6.X series of Operating Systems but report {{generation}} can only be done on 6.1 version Operating Systems. Following are the system requirements of <b>Attack</b> <b>Surface</b> Analyzer (from the official download page): ...|$|R
40|$|Abstract. Software {{vendors are}} {{increasingly}} concerned about mitigating the security risk of their software. Code quality improvement {{is a traditional}} approach to mitigate security risk; measuring and reducing the <b>attack</b> <b>surface</b> of software is a complementary approach. In this paper, we apply a method for measuring <b>attack</b> <b>surfaces</b> to enterprise software written in Java. We implement a tool as an Eclipse plugin to measure an SAP software system’s <b>attack</b> <b>surface</b> in an automated manner. We demonstrate the feasibility of our approach by measuring the <b>attack</b> <b>surfaces</b> of three versions of an SAP software system. We envision our measurement method and tool to be useful to software developers for improving software security and quality. ...|$|R
40|$|The <b>attack</b> <b>surface</b> concept {{provides}} a means of discussing the susceptibility of software to as-yet-unknown attacks. A system’s <b>attack</b> <b>surface</b> encompasses the methods the system makes available to an attacker, and the system resources {{which can be used}} to further an attack. A measurement {{of the size of the}} <b>attack</b> <b>surface</b> could be used to compare the security of multiple systems which perform the same function. The Internet Message Access Protocol (IMAP) has been in existence for over a decade. Relative to HTTP or SMTP, IMAP is a niche protocol, but IMAP servers are widely deployed nonetheless. There are three popular open source UNIX IMAP servers – UW-IMAP, Cyrus, and Courier-IMAP – and there has not been a formal security comparison between them. In this paper, I use <b>attack</b> <b>surfaces</b> to compare the relative security risks posed by these three products. I undertake this evaluation in service of two complementary goals: to provide an honest examination of the security postures and risks of the three servers, and to advance the study of <b>attack</b> <b>surfaces</b> by performing an automated <b>attack</b> <b>surface</b> measurement using a methodology based on counting entry and exit points in the code...|$|R
40|$|Abstract. Package {{dependency}} {{has been}} considered in many vulner-ability assessment systems. However, existing approaches are either coarse-grained and do not accurately reveal the influence and severity of vulnerabilities, or do not provide comprehensive (both incoming and outgoing) analysis of <b>attack</b> <b>surface</b> through package dependency. We propose a systematic approach of measuring <b>attack</b> <b>surface</b> exposed by individual vulnerabilities through component level dependency analysis. The metric could potentially extended to calculate <b>attack</b> <b>surfaces</b> at component, package, and system levels. It {{could also be used}} to calcu-late both incoming and outgoing <b>attack</b> <b>surfaces,</b> which enables system administrators to accurately evaluate how much risk that a vulnerabil-ity, a component or a package to the complete system, and the risk that is injected to a component or package by packages it depends on in a given system. To our best knowledge, our approach is the first to quanti-tatively assess <b>attack</b> <b>surfaces</b> of vulnerabilities, components, packages, and systems through component level dependency. ...|$|R
50|$|<b>Attack</b> <b>Surface</b> Analyzer {{is a tool}} {{created for}} the {{analysis}} of changes made to the <b>attack</b> <b>surface</b> of the operating systems since Windows Vista and beyond. It is a tool recommended by Microsoft in its SDL guidelines in the verification stage of the development.|$|R
30|$|After static instrumentation, Sensor Guardian adds {{new code}} into the {{instrumented}} app. If the inserted code is not handled properly, it may introduce new <b>attack</b> <b>surfaces</b> and cause new security problems to the app. Here, we discuss those potential <b>attack</b> <b>surfaces</b> and our mitigation.|$|R
5000|$|The <b>attack</b> <b>surface</b> of a {{software}} environment {{is the sum}} of the different points (the [...] "attack vectors") where an unauthorized user (the [...] "attacker") can try to enter data to or extract data from an environment. Keeping the <b>attack</b> <b>surface</b> as small as possible is a basic security measure.|$|R
50|$|According to the Microsoft SDL Team, {{they did}} not have an all in one tool for {{checking}} the changes made to the <b>attack</b> <b>surface</b> of Windows Operating System before <b>Attack</b> <b>Surface</b> Analyzer was developed. It was a problem to check and verify the effects of various software installations on the system way back since Windows Server 2003 was being developed. Back then they had to use multiple tools for every type of change made to the <b>attack</b> <b>surface.</b> It was a painful process when they had to check for everything again and again and using multiple tools.|$|R
5000|$|The basic {{strategies}} of <b>attack</b> <b>surface</b> reduction include the following: {{reduce the amount}} of code running, reduce entry points available to untrusted users, and eliminate services requested by relatively few users. One approach to improving information security is to reduce the <b>attack</b> <b>surface</b> of a system or software. By turning off unnecessary functionality, there are fewer security risks. By having less code available to unauthorized actors, there will tend to be fewer failures. Although <b>attack</b> <b>surface</b> reduction helps prevent security failures, it does not mitigate the amount of damage an attacker could inflict once a vulnerability is found.|$|R
5000|$|... #Subtitle level 3: Organization of Changes {{made to the}} <b>Attack</b> <b>Surface</b> ...|$|R
50|$|G: Ground. Applies to {{vehicles}} {{designed to}} <b>attack</b> <b>surface</b> targets, including vehicles.|$|R
50|$|It {{was this}} problem which made Microsoft create an {{application}} with which developers could analyze the changes {{made to the}} Windows <b>Attack</b> <b>Surface.</b> It has at first {{been used by the}} developers at Microsoft. Later, on January 18, 2011, a beta version (version 5.1.3.0) of a tool named <b>Attack</b> <b>Surface</b> Analyzer was released in public for the testers and IT administrators. <b>Attack</b> <b>Surface</b> Analyzer can compare two scan data of a system called the baseline scan and product scan. Both 32-bit and 64-bit versions of software are available for Windows Vista and Windows 7 (and respective Server editions). There is no news about a Windows XP version being released.|$|R
50|$|With {{the idea}} of the Moving <b>Attack</b> <b>Surface,</b> (MAS), the CMD system can be {{regarded}} as a kind of proactive defense system which deploys the multi-dimensional <b>attack</b> <b>surface</b> in an unpredictable way under the condition of visually-unchanged functions. Due to multiple-heterogeneity of structures and environments from each executive entity, it enables resources exploited by attackers (including lurkers) to have uncertainty in temporal and spatial dimensions. At the macro level, it appears that the <b>attack</b> <b>surface</b> is always making irregular movements. Especially for those attack missions which need multiple steps to transmit data to achieve attack goals, the premise of achievability can hardly be guaranteed.|$|R
40|$|Abstract—Security will be {{critical}} for the wireless interface offered by soon-to-be-ubiquitous smart meters — since if not secure, this technology will provide an remotely accessible <b>attack</b> <b>surface</b> distributed throughout many homes and businesses. However, history shows that new network interfaces remained brittle and vulnerable (although believed otherwise) until security researchers could thoroughly explore their <b>attack</b> <b>surface.</b> Unfortunately, {{for the majority of}} currently available smart meter wireless networking solutions, we are still in that pre-exploration phase; “closed ” radio stacks with proprietary features impede exploration by posing multiple hardware and software obstacles to standard network <b>attack</b> <b>surface</b> exploration techniques. In this paper, we address this problem by presenting open and extensible software tools for 802. 15. 4 based proprietary stacks that work on commodity digital radio platforms. We hope this contribution advances {{the state of the art}} beyond the pre-exploration tipping point, and toward real security. Keywords- 802. 15. 4, ZigBee, <b>attack</b> <b>surface</b> exploration I...|$|R
40|$|We {{propose a}} metric to {{determine}} whether one version of a system is relatively more secure than another {{with respect to the}} system's <b>attack</b> <b>surface.</b> Intuitively, the more exposed the <b>attack</b> <b>surface,</b> the more likely the system could be successfully attacked, and hence the more insecure it is. We define an <b>attack</b> <b>surface</b> in terms of the system's actions that are externally visible to its users and the system's resources that each action accesses or modifies. To apply our metric in practice, rather than consider all possible system resources, we narrow our focus on a "relevant" subset of resource types, which we call attack classes; these reflect the types of system resources that {{are more likely to be}} targets of attack. We assign payo#s to attack classes to represent likelihoods of attack; resources in an attack class with a high payoff value are more likely to be targets or enablers of an attack than resources in an attack class with a low payoff value. We outline a method to identify attack classes and to measure a system's <b>attack</b> <b>surface.</b> We demonstrate and validate our method by measuring the relative <b>attack</b> <b>surface</b> of four di#erent versions of the Linux operating system...|$|R
50|$|As {{with the}} browser contest, the <b>attack</b> <b>surface</b> {{available}} to contestants expanded over three days.|$|R
50|$|<b>Attack</b> <b>Surface</b> of Windows Operating System {{concerns}} {{various parts}} of the Operating System. It would have been difficult for anyone to understand the report if all of the changes were listed in serial order. <b>Attack</b> <b>Surface</b> Analyzer makes it easy for the user to browse through the report by listing the threats in categories and providing a Table of contents in an HTML page.|$|R
50|$|<b>Attack</b> <b>Surface</b> Analyzer {{can compare}} two scan data (generated by itself on two {{different}} scans) and generate a report which can then be viewed in the HTML format. It is also possible to run the scans on one system and then generate on another system using the same tool. This is good for Windows Vista Clients {{because it is not}} possible to generate report using the current version of <b>Attack</b> <b>Surface</b> Analyzer on Windows Vista. In such a case, <b>Attack</b> <b>Surface</b> Analyzer can be used to run scans on the Windows Vista Client, transfer the scan result files to a computer running Windows 7 and then generate and browse the report on the Windows 7 based computer.|$|R
5000|$|Collection of <b>Attack</b> <b>Surface</b> Data: Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2 ...|$|R
40|$|Adding new {{programs}} or configuration options {{to a system}} often leads to new exploits because it provides adversaries with new ways to access possible vulnerabilities. As a result, application developers often must react to exploits as they are found. One proactive defense is to protect programs at their <b>attack</b> <b>surfaces,</b> the program entry points (e. g., system calls) accessible to adversaries. However, experience has shown that developers often fail to defend these entry points {{because they do not}} locate all such system calls where programs access system resources controlled by attackers. In this paper, we develop a runtime analysis method to compute program <b>attack</b> <b>surfaces</b> in system deployments, which uses a novel approach to computing program adversaries to determine which program entry points access adversarycontrolled objects. We implemented our design as a Linux kernel mechanism capable of identifying entry points for both binary and interpreted programs. Using this mechanism, we computed the <b>attack</b> <b>surfaces</b> for all the programs in the Ubuntu Linux 10. 04 Desktop distribution automatically. On examining located <b>attack</b> <b>surfaces,</b> we discovered previously unknown vulnerabilities in an X Windows startup script available since 2006 and the GNU Icecat web browser. Our tools enable developers to find <b>attack</b> <b>surfaces</b> for their programs quickly and to produce defenses prior to the emergence of attacks, potentially moving us away from the penetrate-and-patch rut. 1...|$|R
40|$|Abstract: 2 ̆ 2 We {{propose a}} metric to {{determine}} whether one version of a system is relatively more secure than another {{with respect to the}} system 2 ̆ 7 s <b>attack</b> <b>surface.</b> Intuitively, the more exposed the <b>attack</b> <b>surface,</b> the more likely the system could be successfully attacked, and hence the more insecure it is. We define an <b>attack</b> <b>surface</b> in terms of the system 2 ̆ 7 s actions that are externally visible to its users and the system 2 ̆ 7 s resources that each action accesses or modifies. To apply our metric in practice, rather than consider all possible system resources, we narrow our focus on a 2 ̆ 7 relevant 2 ̆ 7 subset of resource types, which we call attack classes; these reflect the types of system resources that {{are more likely to be}} targets of attack. We assign payoffs to attack classes to represent likelihoods of attack; resources in an attack class with a high payoff value are more likely to be targets or enablers of an attack than resources in an attack class with a low payoff value. We outline a method to identify attack classes and to measure a system 2 ̆ 7 s <b>attack</b> <b>surface.</b> We demonstrate and validate our method by measuring the relative <b>attack</b> <b>surface</b> of four different versions of the Linux operating system. 2 ̆...|$|R
