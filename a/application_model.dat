673|10000|Public
25|$|Launched in 1984, the Macintosh and its {{operating}} system were designed {{from the beginning}} as a single-user, single-tasking machine, which allowed the hardware development to be greatly simplified. As {{a side effect of}} this single <b>application</b> <b>model,</b> the original Mac developers were {{able to take advantage of}} a number of compromising simplifications that allowed great improvements in performance, running even faster than the much more expensive Lisa. But this design also led to several problems for future expansion.|$|E
25|$|The Internet {{standards}} {{describe a}} framework {{known as the}} Internet protocol suite. This is a model architecture that divides methods into a layered system of protocols, originally documented in RFC 1122 and RFC 1123. The layers correspond to the environment or scope in which their services operate. At the top is the application layer, space for the application-specific networking methods used in software applications. For example, a web browser program uses the client-server <b>application</b> <b>model</b> and a specific protocol of interaction between servers and clients, while many file-sharing systems use a peer-to-peer paradigm. Below this top layer, the transport layer connects applications on different hosts with a logical channel through the network with appropriate data exchange methods.|$|E
5000|$|<b>Application</b> <b>model</b> (commands {{and data}} the {{application}} provides) ...|$|E
40|$|Abstract—Smartphones are now {{capable of}} {{supporting}} {{a wide range}} of applications, many of which demand an ever increasing computational power. This poses a challenge because smartphones are resource-constrained devices with limited computation power, memory, storage, and energy. Fortunately, the cloud computing technology offers virtually unlimited dynamic resources for computation, storage, and service provision. Therefore, researchers envision extending cloud computing services to mobile devices to overcome the smartphones constraints. The challenge in doing so is that the traditional smartphone <b>application</b> <b>models</b> do not support the development of applications that can incorporate cloud computing features and requires specialized mobile cloud <b>application</b> <b>models.</b> This article presents mobile cloud architecture, offloading decision affecting entities, <b>application</b> <b>models</b> classification, the latest mobile cloud <b>application</b> <b>models,</b> their critical analysis and future research directions...|$|R
5000|$|... #Subtitle level 2: Compared {{with other}} web <b>application</b> <b>models</b> ...|$|R
2500|$|Terms of {{the form}} [...] are called <b>applications.</b> <b>Applications</b> <b>model</b> ...|$|R
5000|$|Windows Runtime, an <b>application</b> <b>model,</b> evolved {{version of}} COM {{targeting}} Windows 8 ...|$|E
50|$|Objects {{described}} in the <b>application</b> <b>model</b> are reused by components. Developers embed objects from the model on the component by drawing them on the layout canvas (for presentation components), or inserting them into a tree view of the component structure. They can also add component-level objects {{that are not in}} the <b>application</b> <b>model,</b> such as control fields, menus, and component variables.|$|E
5000|$|... 1996 Won the Gold Prize for the Enterprise EDI <b>Application</b> <b>Model</b> Business {{from the}} Taiwan Ministry of Economic Affairs.|$|E
5000|$|Generators: Create Padrino <b>applications,</b> <b>models,</b> {{controllers}} i.e.: padrino g project.|$|R
5000|$|Several {{languages}} and notations {{have been devised}} for Web <b>application</b> <b>modeling.</b> Among them, we can cite: ...|$|R
30|$|The PaaSage {{professional}} networking platform aims {{to support}} users that wish to explore, deploy, and optimize <b>application</b> <b>models</b> and components.|$|R
5000|$|Process model: This model {{implements}} {{the functions}} (combined finally into applications - see <b>application</b> <b>model)</b> of the OpenTMS, e.g. a converter or a translation memory search.|$|E
50|$|Each entity (table) {{is first}} {{defined in the}} <b>Application</b> <b>Model</b> from {{where it can be}} {{exported}} to the physical database in the form of CREATE TABLE scripts.|$|E
50|$|The {{properties}} and triggers {{defined in the}} <b>application</b> <b>model</b> are inherited by being copied into the component. The definitions can be changed at the component level to provide specific functionality. This breaks {{the link between the}} <b>application</b> <b>model</b> and the component (although it is possible to restore the link to the model). If the model code or properties are changed at the model level, all components holding that object need only be recompiled to collect the new definitions. This provides benefits in maintenance and ensures that the rules associated with the object are available wherever it is used.|$|E
30|$|All plugins share {{a common}} {{structure}} of folders and php files. Folder actions includes the actions applied on <b>application</b> <b>models</b> (delete, save, or search). The views folder contains the php forms applied on <b>application</b> <b>models</b> and river events (live feeds). Pages overrides elements of core Elgg pages. The js and lib folder provides javascript and php library functions. Finally, the vendors folders include third-party frameworks such as Twitter’s bootstrap front-end [73], which lends its responsiveness, look and feel, and portability across Web browsers to the PaaSage professional network..|$|R
30|$|The {{empirical}} <b>application</b> <b>models</b> {{the current}} share of non-performing loans (NPLs) {{as a main}} component of γ _t^U, in turn, a predictor of future losses and of future negative additions to capital.|$|R
30|$|Conducting {{pilot of}} using e-schoolbag. The ECNU team is invited by Minhang {{district}} to design <b>application</b> <b>models</b> of using e-schoolbags in 67 schools since 2012, about seven {{thousands of students}} are involved.|$|R
50|$|The {{data access}} tier {{contains}} physical database structures {{captured in the}} Uniface <b>application</b> <b>model.</b> Uniface ensures physical data access by encapsulating SQL in its DBMS connectors. Network and middleware access are encapsulated by the middleware drivers and the Uniface Router.|$|E
50|$|Conceptual schema—definition of all {{the data}} items and {{relationships}} between them. There is only one conceptual schema per database. Uniface implements the conceptual schema as the <b>Application</b> <b>Model</b> (in various Uniface versions known as the Business Object Model and the Application Object Model).|$|E
50|$|The <b>application</b> <b>model</b> defines {{entities}} (tables), fields, keys (indexes) {{and relationships}} together with referential integrity. Each entity and {{field in the}} model has properties {{and a set of}} triggers. Business rules are added to the model declaratively by setting properties and procedurally by adding Proc code (Uniface's procedural language) in triggers.|$|E
40|$|We present design {{technology}} for the structured design and programming of embedded multi-processor systems. It comprises a task-level interface {{that can be used}} both for developing parallel <b>application</b> <b>models</b> and as a platform interface for implementing applications on multi-processor architectures. Associated mapping technology supports refinement of <b>application</b> <b>models</b> towards implementation. By linking application development and implementation aspects, the technology integrates the specification and design phases in the MPSoC design process. Two design cases demonstrate the efficient implementation of the platform interface on different architectures. Industry-wide standardization of a task-level interface can facilitate reuse of function-specific hardware / software modules across companies...|$|R
50|$|Because <b>application</b> <b>models</b> in UML {{describe}} few {{aspects of}} user interfaces, {{and because the}} model-based user interface development environments (MB-UIDE) lack ability for <b>modeling</b> <b>applications,</b> the University of Manchester started the research project UMLi in 1998.UMLi aims {{to address this problem}} of designing and implementing user interfaces using a combination of UML and MB-UIDE.|$|R
40|$|Data {{modeling}} is {{an essential}} part of the software development process, and together with <b>application</b> <b>modeling</b> forms the core of the model-driven approach to software engineering. While UML is considered the standard for <b>application</b> <b>modeling,</b> there is really no corresponding open standard for data modeling. In this paper, we propose an approach and a tool to help bridge the gap between <b>application</b> and data <b>modeling</b> based on source transformation technology. In this paper we introduce SQL 2 XMI, a tool that automatically transforms an SQL schema into a UML-ER model expressed in XML Meta Interchange (XMI) 2. 1, which is specifically designed to support interchange of UML models. By bringing the data model to the UML world, our tool enables the manipulation and integration of both data and <b>application</b> <b>models</b> using the same UML-based tools in an interoperable way. While SQL 2 XMI was initially created to support our work in software comprehension, the approach we have used can be generalized to recover a rich UML-ER model from any SQL schema to any XMI 2. x format, and can easily be extended to support code engineering by automatically generating SQL schemas from an XMI 2. x file. ...|$|R
50|$|Uniface {{applications}} {{development is}} model-driven and component-based. The data structure, business rules, and default {{behavior of the}} application are captured in the <b>Application</b> <b>Model.</b> Model definitions can be reused and inherited by components, which can override inherited definitions and provide component-specific behavior and characteristics. Templates improve productivity and enforce consistency when defining models.|$|E
5000|$|Retail {{loans and}} {{mortgages}} are typically highly competitive products that may not offer a large margin to their providers, but through high volume sales can be highly profitable. The business model of the individual financial institution and the products they offer therefore affect the decision of which <b>application</b> <b>model</b> they will offer ...|$|E
5000|$|In ASP, a {{form and}} its POST action {{have to be}} created as two {{separate}} pages, resulting in {{the need for an}} intermediate page and a redirect if one simply wants to perform a postback. This problem was addressed in ASP.NET with the [...] function and an <b>application</b> <b>model</b> that allows a page to perform validation and processing on its own form data.|$|E
50|$|Often a telecom {{software}} developer's primary access point, the service creation environment (SCE, also application creation environment or integrated development environment) {{is used by}} the developer to create software, scripts, and resources representing the services to be exposed. These can range in complexity from basic Eclipse plug-ins to completely abstracted, metadata-driven telecom <b>application</b> <b>modeling</b> <b>applications</b> (like Avaya's discontinued CRM Central product).|$|R
50|$|Rational Software has a {{long history}} in <b>application</b> <b>modeling,</b> {{beginning}} in the early 1990s with the work of Grady Booch, James Rumbaugh and Ivar Jacobson. They combined competing modeling approaches to form what eventually became the Unified Modeling Language.|$|R
30|$|In this section, we also {{discuss the}} {{applicability}} of DVC in WSNs and how well it fits under its constrained environment. Almost all of the video coding applications fall within the two classes of <b>application</b> <b>models,</b> namely downlink and uplink models.|$|R
50|$|Uniface Six (1994):Uniface Six {{completed}} {{the move to}} fully graphical development environments. It included the graphical form painter and <b>application</b> <b>model</b> editor; improved deployment through Dynamic Object Libraries; added support for Microsoft Object Linking and Embedding (OLE); included support for Apple Macintosh; added permissions control; integrated version control; added Personal Series reporting tools (although these were later removed when the 3rd party decided not to enhance its product); wider platform support.|$|E
50|$|On top {{of those}} models the <b>application</b> <b>model</b> organises real {{applications}} (like the GUI model).openTMS uses a data {{source in the}} data model which organises the access to databases or {{any other kind of}} devices which allows to store (TM, terminology, even machine translation) data. Currently the following data sources are supported: TMX files, XLIFF file, SQL databases. Data sources have to implement a set of methods based on the data source interface.|$|E
50|$|Comet is a web <b>application</b> <b>model</b> {{in which}} a long-held HTTP request allows a web server to push data to a browser, without the browser {{explicitly}} requesting it. Comet is an umbrella term, encompassing multiple techniques for achieving this interaction. All these methods rely on features included by default in browsers, such as JavaScript, rather than on non-default plugins. The Comet approach differs from the original model of the web, {{in which a}} browser requests a complete web page at a time.|$|E
5000|$|PRODML Standards support {{automated}} {{production data}} acquisition, operations monitoring, optimization, reporting, and configuration management business processes. PRODML-based interactions {{are used by}} production software components, including field data historians, surveillance <b>applications,</b> <b>model</b> analysis and management applications, optimization applications, simulation applications, etc.|$|R
40|$|In {{this paper}} an {{approach}} for VoiceXML web <b>application</b> <b>modeling</b> is presented with which a voice <b>application</b> can be <b>modeled</b> {{as a call}} flow diagram that can be further transferred to be deployable Java code by an automated code generator implemented in the same study. This paper focuses on the modeling work while the brief discussion on code generation is given as well. 1...|$|R
40|$|We {{present a}} {{methodology}} for {{the exploration of}} signal processing architectures at the system level. The methodology, named SPADE, provides a means to quickly build models of architectures at an abstract level, to easily map <b>applications,</b> <b>modeled</b> as Kahn Process Networks, onto these architecture models, and to analyze {{the performance of the}} resulting system by simulation. The methodology distinguishes between applications and architectures, and uses a trace-driven simulation technique for co-simulation of <b>application</b> <b>models</b> and architecture models. As a consequence, architecture models need not be functionally complete to be used for performance analysis while data dependent behavior is still handled correctly. We have used the methodology for the exploration of architectures and mappings of an MPEG- 2 decoder application...|$|R
