598|10000|Public
25|$|Git {{does not}} provide <b>access</b> <b>control</b> <b>mechanisms,</b> but was {{designed}} for operation with other tools that specialize in access control.|$|E
25|$|Access to {{protected}} information must {{be restricted}} {{to people who are}} authorized to access the information. The computer programs, and in many cases the computers that process the information, must also be authorized. This requires that mechanisms be in place to control the access to protected information. The sophistication of the <b>access</b> <b>control</b> <b>mechanisms</b> should be in parity with the value of the information being protected – the more sensitive or valuable the information the stronger the control mechanisms need to be. The foundation on which <b>access</b> <b>control</b> <b>mechanisms</b> are built start with identification and authentication.|$|E
25|$|Because of {{the nature}} of the {{information}} passing through continuous auditing systems, security and privacy issues are also being addressed. Data assurance techniques, as well as <b>access</b> <b>control</b> <b>mechanisms</b> and policies are being implemented into CA systems to prevent unauthorized access and manipulation, and CCM can help test these controls.|$|E
5000|$|The user authenticates to an <b>access</b> <b>control</b> <b>mechanism</b> {{external}} to Shibboleth.|$|R
40|$|We survey {{recent work}} on the {{specification}} of an <b>access</b> <b>control</b> <b>mechanism</b> in a collaborative environment. The work {{is presented in the}} context of the WebdamLog language, an extension of datalog to a distributed context. We discuss a fine-grained <b>access</b> <b>control</b> <b>mechanism</b> for intentional data based on provenance as well as a <b>control</b> <b>mechanism</b> for delegation, i. e., for deploying rules at remote peers. 1...|$|R
40|$|Cloud {{computing}} {{is one of}} {{the emerging}} technologies. The cloud environment is a large open distributed system. It is important to preserve the data, as well as, privacy of users. <b>Access</b> <b>Control</b> methods ensure that authorized user’s access the data and the system. This paper discusses various features of attribute based <b>access</b> <b>control</b> <b>mechanism,</b> suitable for cloud computing environment. It leads to the design of attribute based <b>access</b> <b>control</b> <b>mechanism</b> for cloud computing...|$|R
25|$|After a person, {{program or}} {{computer}} has successfully been identified and authenticated {{then it must}} be determined what informational resources they are permitted to access and what actions they {{will be allowed to}} perform (run, view, create, delete, or change). This is called authorization. Authorization to access information and other computing services begins with administrative policies and procedures. The policies prescribe what information and computing services can be accessed, by whom, and under what conditions. The <b>access</b> <b>control</b> <b>mechanisms</b> are then configured to enforce these policies. Different computing systems are equipped with different kinds of access control mechanisms—some may even offer a choice of different <b>access</b> <b>control</b> <b>mechanisms.</b> The access control mechanism a system offers will be based upon one of three approaches to access control or it may be derived from a combination of the three approaches.|$|E
25|$|Examples {{of common}} <b>access</b> <b>control</b> <b>mechanisms</b> {{in use today}} include role-based access control {{available}} in many advanced database management systems—simple file permissions provided in the UNIX and Windows operating systems, Group Policy Objects provided in Windows network systems, Kerberos, RADIUS, TACACS, and the simple access lists used in many firewalls and routers.|$|E
2500|$|... "Literary works, {{including}} {{computer programs}} and databases, protected by <b>access</b> <b>control</b> <b>mechanisms</b> {{that fail to}} permit access because of malfunction, damage, or obsoleteness." [...] (revised and limited in 2003 and again in 2006).|$|E
40|$|This paper {{introduces}} a novel <b>access</b> <b>control</b> architecture for publicly accessible, wireless networks. The architecture {{was designed to}} address the requirements obtained from {{a case study of}} ubiquitous Internet service provisioning within the city of Lancaster. The proposed <b>access</b> <b>control</b> <b>mechanism</b> is. based on the concepts of secure user authentication, packet marking, and packet filtering at the access routers. The paper demonstrates to what extent this token-based, soft-state <b>access</b> <b>control</b> <b>mechanism</b> improves security and robustness, and offers improved performance over that provided by existing approaches within roaming networks. Early indications show the <b>access</b> <b>control</b> <b>mechanism</b> can better be implemented through the use of active routers, in order to facilitate dynamic rollout and configuration of the system. In addition, extensions to Mobile IPv 6 are proposed, which provide support for roaming users at a fundamental level...|$|R
40|$|Internet servers {{are always}} {{in danger of being}} "hijacked " by various attacks like the buffer {{overflow}} attack. We propose the process cleaning technique for making an <b>access</b> <b>control</b> <b>mechanism</b> secure against hijacking. To minimize damages in cases where the full control of the servers is stolen, access restrictions must be imposed on the servers. However, designing a secure <b>access</b> <b>control</b> <b>mechanism</b> is not easy because that mechanism itself can be a security hole. Process cleaning prevents malicious code injected by a cracker from illegally removing access restrictions from a hijacked server. In this paper, we describe the <b>access</b> <b>control</b> <b>mechanism</b> of our Compacto operating system using process cleaning. According to the results of our experiments, process cleaning can be implemented with acceptable performance overheads. 1...|$|R
40|$|Fine-grained <b>access</b> <b>controls</b> for XML define access {{privileges}} at the granularity {{of individual}} XML nodes. In this paper, {{we present a}} fine-grained <b>access</b> <b>control</b> <b>mechanism</b> for XML data. This mechanism exploits the structural locality of access rights as well as correlations among the access rights of different users to produce a compact physical encoding of the <b>access</b> <b>control</b> data. This encoding can be constructed using a single pass over a labeled XML database. It is block-oriented and suitable for use in secondary storage. We show how this <b>access</b> <b>control</b> <b>mechanism</b> can be integrated with a next-of-kin (NoK) XML query processor to provide efficient, secure query evaluation. The key {{idea is that the}} structural information of the nodes and their encoded <b>access</b> <b>controls</b> are stored together so the access privileges can be checked efficiently. Our evaluation shows that the <b>access</b> <b>control</b> <b>mechanism</b> introduces little overhead into the query evaluation process. ...|$|R
2500|$|TFTP {{includes}} no login or <b>access</b> <b>control</b> <b>mechanisms.</b> [...] Care must {{be taken}} when using TFTP for file transfers where authentication, access control, confidentiality, or integrity checking are needed. [...] Note that those security services could be supplied above or below the layer at which TFTP runs. Care {{must also be taken}} in the rights granted to a TFTP server process so as not to violate the security of the server's file system. [...] TFTP is often installed with controls such that only files that have public read access are available via TFTP. Also listing, deleting, renaming, and writing files via TFTP are typically disallowed. TFTP file transfers are not recommended where the inherent protocol limitations could raise insurmountable liability concerns.|$|E
50|$|Git {{does not}} provide <b>access</b> <b>control</b> <b>mechanisms,</b> but was {{designed}} for operation with other tools that specialize in access control.|$|E
50|$|The {{most common}} way of {{ensuring}} computer security is <b>access</b> <b>control</b> <b>mechanisms</b> provided by operating {{systems such as}} UNIX, Linux, Windows, Mac OS, etc.|$|E
40|$|Abstract]: WFMSs {{are widely}} used by modern {{business}} processes. But so far {{it is still a}} challenge to have a simple and effective <b>access</b> <b>control</b> <b>mechanism</b> for WFMSs. This paper contributes an effective and simply <b>access</b> <b>control</b> <b>mechanism,</b> called neighbourhood-trust dependency <b>access</b> <b>control</b> (NETDEPAL), for WFMSs. This new notion combines the workflow mechanism and RBAC into NETDEPAL for WFMSs. The secure access for WFMSs can be efficiently implemented by NETDEPAL from system dependency and task dependency via their neighbourhood relationship...|$|R
40|$|The {{architecture}} of an <b>access</b> <b>control</b> <b>mechanism</b> for {{the resources of}} an OS 1360 or VSl 370 computer system is presented. The use of this operating system component for data base se-curity and integrity in a research and engineering environment is described. The techniques described make possible <b>controlled</b> <b>access</b> to the system’s processing power, <b>controlled</b> <b>access</b> to the database, decentralized authorization responsibility, measuring dataset usage. and event recording for automatic dataset migration, archiving, and staging. An <b>access</b> <b>control</b> <b>mechanism</b> for computing resource...|$|R
40|$|Abstract. This paper {{introduces}} a novel <b>access</b> <b>control</b> architecture for publicly accessible, wireless networks. The architecture {{was designed to}} address the requirements obtained from {{a case study of}} ubiquitous Internet service provisioning within the city of Lancaster. The proposed <b>access</b> <b>control</b> <b>mechanism</b> is based on the concepts of secure user authentication, packet marking, and packet filtering at the access routers. The paper demonstrates to what extent this tokenbased, soft-state <b>access</b> <b>control</b> <b>mechanism</b> improves security and robustness, and offers improved performance over that provided by existing approaches within roaming networks. Early indications show the <b>access</b> <b>control</b> <b>mechanism</b> can better be implemented through the use of active routers, in order to facilitate dynamic rollout and configuration of the system. In addition, extensions to Mobile IPv 6 are proposed, which provide support for roaming users at a fundamental level. ...|$|R
50|$|An {{important}} {{capability is}} the use of X.509 Certificate Attributes, which permits it to utilize complex <b>access</b> <b>control</b> <b>mechanisms</b> on the basis of group memberships.|$|E
5000|$|There {{are five}} {{standard}} <b>access</b> <b>control</b> <b>mechanisms</b> that control whether a client application can connect to an X display server. They can be grouped in three categories: ...|$|E
50|$|Access to {{protected}} information must {{be restricted}} {{to people who are}} authorized to access the information. The computer programs, and in many cases the computers that process the information, must also be authorized. This requires that mechanisms be in place to control the access to protected information. The sophistication of the <b>access</b> <b>control</b> <b>mechanisms</b> should be in parity with the value of the information being protected - the more sensitive or valuable the information the stronger the control mechanisms need to be. The foundation on which <b>access</b> <b>control</b> <b>mechanisms</b> are built start with identification and authentication.|$|E
30|$|One more {{mechanism}} {{to give an}} end to end privacy and security guarantee can be to implement DP with <b>access</b> <b>control</b> <b>mechanism</b> such as mandatory <b>access</b> <b>control</b> (MAC) [22].|$|R
30|$|R 7 - An <b>access</b> <b>control</b> <b>mechanism</b> {{to manage}} and use virtual {{resources}} as per SLA between InPs, SePs and cloud users.|$|R
40|$|Abstract — For {{research}} purposes, it {{is observed}} {{to analyze the data}} that provide better services to users for further processing. There are various privacy measures like k-anonymity, l-diversity, t-closeness to protect the individual's data. So anonymization concept is introduced that implement <b>access</b> <b>control</b> <b>mechanism.</b> However, privacy is achieved at the cost of precision of authorized information. <b>Access</b> <b>control</b> <b>mechanism</b> for efficient anonymization of micro-data to preserve the privacy is done. The <b>access</b> <b>control</b> policies are given to roles while the privacy requirement is used to satisfy the k-anonymity or l-diversity that defines selection predicates...|$|R
50|$|Information flow {{analysis}} {{can be described}} as a set of tools used to analyze the information flow control in a program, in order to preserve confidentiality and integrity where regular <b>access</b> <b>control</b> <b>mechanisms</b> come short.|$|E
5000|$|... (3) VO Management. Virtual {{organization}} in VegaGOS, called Agora, supplies distributed resources, users and {{access control policy}} management, and has the characteristic of single sign-on and single system image. Agora, as a common trusted third-party super-organization, achieves the unified cross-domain <b>access</b> <b>control</b> <b>mechanisms</b> while keeping autonomy.|$|E
50|$|Because of {{the nature}} of the {{information}} passing through continuous auditing systems, security and privacy issues are also being addressed. Data assurance techniques, as well as <b>access</b> <b>control</b> <b>mechanisms</b> and policies are being implemented into CA systems to prevent unauthorized access and manipulation, and CCM can help test these controls.|$|E
30|$|R 6 - An <b>access</b> <b>control</b> <b>mechanism</b> to create, destroy virtual {{resources}} out {{of physical}} resources after the negotiation between InPs, SePs and cloud users.|$|R
40|$|Abstract. Shared workspaces and Web 2. 0 {{platforms}} provide lots {{of services}} for sharing various objects. Most current shared workspaces and Web 2. 0 platforms provide role-based, coarse-grained <b>access</b> <b>control</b> poli-cies which undermine the utility of them in some cases. In this paper, we present Annotation-Based <b>Access</b> <b>Control,</b> an approach towards <b>access</b> <b>control</b> which benefits from user annotations to annotate people using various fixed and desired open vocabulary (tags) and helps to build a more flexible <b>access</b> <b>control</b> <b>mechanism</b> based on relationships among dif-ferent types of users. We also present a prototype, a gadget called Uncle-Share, which we have developed to enable this <b>access</b> <b>control</b> <b>mechanism</b> and evaluate it...|$|R
40|$|Collaborative Working Environments (CWE) provide shared workspaces {{that enable}} eProfessionals to work {{together}} and share resources that they own. Most current shared workspaces provide coarse-grained role-based <b>access</b> <b>control</b> policies which bring the functionalities of shared workspaces under question. In this paper, we present Annotation- Based <b>Access</b> <b>Control,</b> an approach towards <b>access</b> <b>control</b> which benefits from user annotations to annotate eProfessionals using various fixed and desired open vocabularies (tags) and helps to build a more flexible <b>access</b> <b>control</b> <b>mechanism</b> based on relationships among eProfessionals (or people). We also present our prototype, a gadget, which we have developed to enable this <b>access</b> <b>control</b> <b>mechanism</b> and evaluate it...|$|R
5000|$|... xinetd {{features}} <b>access</b> <b>control</b> <b>mechanisms</b> such as TCP Wrapper ACLs, extensive logging capabilities, and {{the ability}} to make services available based on time. It can place limits on the number of servers that the system can start, and has deployable defense mechanisms to protect against port scanners, among other things.|$|E
50|$|Examples {{of common}} <b>access</b> <b>control</b> <b>mechanisms</b> {{in use today}} include role-based access control {{available}} in many advanced database management systems—simple file permissions provided in the UNIX and Windows operating systems, Group Policy Objects provided in Windows network systems, Kerberos, RADIUS, TACACS, and the simple access lists used in many firewalls and routers.|$|E
50|$|Access control, {{usually in}} the form of an Access control list (ACL), is often {{required}} to restrict access to documents based on individual user identities. There are many types of <b>access</b> <b>control</b> <b>mechanisms</b> for different content sources making this a complex task to address comprehensively in an enterprise search environment (see below).|$|E
40|$|Trust and {{authority}} are essential components {{that must be}} factored in designing and implementing a distributed <b>access</b> <b>control</b> <b>mechanism</b> for open environments. This paper presents a role-based approach to modeling trust {{and authority}} for open and distributed computing environments. Specifically, our approach centers on the extension of role-based capability delegation from local domains to trusted domains. A formal specification based on the fixpoint semantics is presented {{in order to better}} understand and design a distributed <b>access</b> <b>control</b> <b>mechanism</b> that can be built on our approach...|$|R
40|$|The e ectiveness of an <b>access</b> <b>control</b> <b>mechanism</b> in {{implementing}} a security policy in a centralised operating system is often weakened {{because of the}} large number of possible access rights involved, informal speci cation of security policy and a lack of tools for assisting systems administrators. Herein we present a logical foundation for automated tools that assist in determining which access rights should be granted by reasoning about the e ects of an <b>access</b> <b>control</b> <b>mechanism</b> on the computations performed by an operating system. We demonstrate the practicality and utility of our logical approach byshowing how itallows us to construct a deductive database capable of answering questions about the security oftwo real-world operating systems. We illustrate the application of our techniques by presenting the results of an experiment designed to assess how accurately the con guration of an <b>access</b> <b>control</b> <b>mechanism</b> implements a given security policy. ...|$|R
30|$|Impersonation: To prevent {{identity}} theft in the PKI MANET system, an effective <b>access</b> <b>control</b> <b>mechanism</b> {{is provided by}} hybrid trust, by which stronger authentication and authorization is achieved.|$|R
