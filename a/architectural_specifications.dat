113|169|Public
5000|$|... <b>architectural</b> <b>specifications,</b> for the {{prescription}} {{of the structure}} of implementations, ...|$|E
50|$|Configuration {{auditing}} - Ensuring that configurations contain {{all their}} intended parts and are sound {{with respect to}} their specifying documents, including requirements, <b>architectural</b> <b>specifications</b> and user manuals.|$|E
50|$|Red Storm is a {{supercomputer}} architecture {{designed for}} the US Department of Energy’s National Nuclear Security Administration Advanced Simulation and Computing Program. Cray, Inc developed it based on the contracted <b>architectural</b> <b>specifications</b> provided by Sandia National Laboratories. The architecture was later commercially produced as theCray XT3.|$|E
30|$|Cross {{reference}} between modules {{was important}} to avoid errors and also {{to speed up the}} <b>architectural</b> <b>specification</b> process.|$|R
30|$|Decoupling: the modeled {{specification}} {{is completely}} decoupled {{from the target}} project, which promotes reuse and evolution of the <b>architectural</b> <b>specification.</b>|$|R
30|$|Monolithic: the <b>architectural</b> <b>specification</b> {{is created}} in a {{monolithic}} manner and hence difficult to maintain, especially in larger and modularized systems.|$|R
50|$|The {{four levels}} are {{orthogonal}} to each other. In particular, {{it is possible}} to use CASL structured and <b>architectural</b> <b>specifications</b> and libraries with logics other than CASL. For this purpose, the logic has to be formalized as an institution. This feature is also used by the CASL extensions.|$|E
50|$|Modular {{buildings}} are built {{with all the}} same materials and to the same building codes and <b>architectural</b> <b>specifications</b> as onsite construction, just completed in an offsite, quality controlled environment. Modular {{buildings are}} also built {{to be able to}} withstand travel and installation requirements, creating a building that can be more durable than structures built onsite.|$|E
50|$|Graded {{began this}} visionary project in 2010 by {{developing}} a plan to modernize its facilities in conjunction with H2L2, a company specializing in international school design. This plan was then used by Zanettini, a São Paulo-based architecture firm famous for its green architecture, to develop detailed <b>architectural</b> <b>specifications</b> based on the overall master educational plan. In conjunction with Hochtief, {{one of the leading}} construction companies in Brazil, Graded established a strategically phased approach for implementation.|$|E
30|$|Coupling: the DCL <b>architectural</b> <b>{{specification}}</b> {{is stored}} in a text file placed in the target project structure, which complicates reuse of the specification to other projects.|$|R
50|$|In (hardware, software, or enterprise) systems development, an <b>architectural</b> <b>specification</b> is {{the set of}} {{documentation}} that describes the structure, behavior, and more views of that system.|$|R
50|$|GreenCE {{was founded}} by Ron Blank in 2006. Ron Blank also owns Ron Blank & Associates, a {{firm that specializes in}} <b>architectural</b> <b>specification</b> for {{building}} product manufacturers.|$|R
50|$|According to Eigtved’s {{master plans}} for Frederikstad and the Amalienborg Palaces, the four palaces {{surrounding}} the plaza were {{conceived of as}} town mansions {{for the families of}} chosen nobility. Their exteriors were identical, but interiors differed. The site on which the aristocrats could build was given to them free of charge, and they were further exempted from taxes and duties. The only conditions were that the palaces should comply exactly to the Frederikstad <b>architectural</b> <b>specifications,</b> and that they should be built within a specified time framework.|$|E
50|$|In 1986, Newark's {{city council}} {{authorized}} {{an application for}} a state of Delaware Bicentennial Improvement Fund grant for the acquisition and redevelopment of the Newark station, and on March 27, 1987, Amtrak deeded the station building to the city. By September, the city had hired John Milner Associates of West Chester, Pa., to develop <b>architectural</b> <b>specifications</b> for restoration. Restoration work encompassed the first floor ticket booths, the ladies' and men's waiting rooms, modernized upstairs offices, and rebuilt canopies on the exterior. SEPTA has now been to Newark Delaware since 1997.|$|E
50|$|Kapetanovo Castle is {{an example}} of neogothic architecture. It has two entrances, and around it there was a spacious park (now defunct) with a fountain. One of the most {{specific}} <b>architectural</b> <b>specifications</b> is a crow-stepped gable stretching along three sides of castle. With simple white façade and an elevated entrance, the building's harmonious proportions are pointed out with high square towers with crenellation. All the windows have sharp gothic arches, and with false arrow loops on top of the tower, the architect's idea of creating a pseudo-medieval castle is clearly visible.|$|E
30|$|The new {{visualizations}} {{provided by}} DCL 2.0 (architectural and log visualization), and the functionality of validation when {{the project is}} built (build feedback verification option presented in the “Architectural verification” section) were important to the <b>architectural</b> <b>specification</b> process. Moreover, the tool editor provided cross-reference, error verification, and auto-complete new features to facilitate the task of <b>architectural</b> <b>specification.</b> We also integrated our tool with Maven to better distribute and control {{different versions of the}} modeled architecture. Finally, the tool was incorporated and used in a real architectural verification process.|$|R
30|$|In the {{previous}} step (architectural formalization), the hierarchical restrictions were already defined because the <b>architectural</b> <b>specification</b> implicitly imposes restrictions to insert components to the structure. Therefore, code artifacts {{that do not}} fit into a hierarchical model represent violations.|$|R
40|$|The {{recently}} started EU FP 7 -funded project Optique will develop an end-to-end OBDA system providing scalable end-user access to industrial Big Data stores. This paper presents an initial <b>architectural</b> <b>specification</b> for the Optique system {{along with the}} individual system components. © Springer-Verlag 2013...|$|R
5000|$|In March 1930, The Belden-Stark Brick Company of Detroit was {{incorporated}} as {{a joint venture}} of The Belden Brick Company and Stark Ceramics Inc. {{for the purpose of}} promoting and distributing Belden Brick and Stark Ceramic products in the Detroit area. This was followed in June 1930 by the incorporation of The Belden-Stark Brick Corporation of New York {{to do the same thing}} in the New York metropolitan area. These two subsidiary companies were to play a large part in the promotion of clay products and in obtaining <b>architectural</b> <b>specifications</b> for The Belden Brick Company.|$|E
5000|$|The {{concept of}} an architecture, {{distinct}} from {{the design of a}} specific machine, was developed by Fred Brooks at IBM during the design phase of System/360. [...] Prior to NPL System/360, the company's computer designers had been free to honor cost objectives not only by selecting technologies but also by fashioning functional and architectural refinements. The SPREAD compatibility objective, in contrast, postulated a single architecture for a series of five processors spanning a wide range of cost and performance. None of the five engineering design teams could count on being able to bring about adjustments in <b>architectural</b> <b>specifications</b> as a way of easing difficulties in achieving cost and performance objectives.|$|E
5000|$|Between his two wives, Moltke {{was said}} to have had 22 sons, five of whom became cabinet ministers, four who became ambassadors, two who became generals, and all of whom when into public service. [...] According to Eigtved’s master plans for Frederikstad and the Amalienborg Palaces, the four palaces {{surrounding}} the plaza were conceived of as town mansions for the families of chosen nobility. Their exteriors were identical, but interiors differed. The site on which the aristocrats could build was given to them free of charge, and they were further exempted from taxes and duties. The only conditions were that the palaces should comply exactly to the Frederikstad <b>architectural</b> <b>specifications,</b> and that they should be built within a specified time framework.|$|E
40|$|Abstract. The {{problem of}} testing modular systems against {{algebraic}} specifications is discussed. In particular, {{we focus on}} systems where the decomposition into parts is specified by a Casl-style <b>architectural</b> <b>specification</b> and the parts (units) are developed separately, perhaps by an independent supplier. One problem in testing from the unit supplier’s {{point of view is}} how to test units independently of the context of use. This is most acute for generic units where the particular instantiation cannot be predicted. On the other hand, users of units are concerned with the particular context of use – dictated by the <b>architectural</b> <b>specification</b> at hand – where one concern is how {{to take advantage of the}} testing that has already been done by the supplier. Ideas for tackling these problems are presented...|$|R
30|$|Once we {{have the}} DCL <b>architectural</b> <b>{{specification}},</b> we can use tools to read such specification and verify the source code for architectural violations. Basically, the specification is created by modules and the constraints between a pair of modules. A module {{is a set of}} classes, as shown in Listing 1.|$|R
30|$|The system {{showed a}} high number of {{violations}} of two types: unknown component and unknown reference. For this reason, the architects followed two major actions: (i) alter and adapt the <b>architectural</b> <b>specification</b> in DCL 2.0; and (ii) adjust the source artifacts by refactoring the artifacts that do not fit the architectural components.|$|R
40|$|One of {{the novel}} {{features}} of Casl, the Common Algebraic Specification Language, is the provision of so-called <b>architectural</b> <b>specifications</b> for describing the modular structure of software systems. A discussion of refinement of Casl specifications provides the setting for a presentation of the rationale behind <b>architectural</b> <b>specifications.</b> This is followed by details of the features provided in Casl for <b>architectural</b> <b>specifications,</b> hints concerning their semantics, and simple results justifying their usefulness in the development process...|$|E
40|$|One of {{the most}} novel {{features}} of Casl, the Common Algebraic Specification Language, is the provision of so-called <b>architectural</b> <b>specifications</b> for describing the modular structure of software systems. A brief discussion of refinement of Casl specifications provides the setting for a presentation of the rationale behind <b>architectural</b> <b>specifications.</b> This i...|$|E
40|$|We {{discuss the}} {{application}} of structured and <b>architectural</b> <b>specifications</b> of the Casl specification language in development of concurrent systems. In order to apply specification mechanisms of Casl we propose an institution for concurrent systems, based on first-order linear-time temporal logic. We then study example structured and <b>architectural</b> <b>specifications</b> and observe that final-semantics approach allows us to express properties of concurrent systems that cannot be stated directly in the logic we use. We exploit this fact by defining a new specification-building operation specific for our institution. We also modify the semantics of <b>architectural</b> <b>specifications</b> to make them suitable for development of concurrent systems...|$|E
30|$|Decoupling {{between the}} system and {{architecture}} specification provided an easier architectural evolution. More specifically, the decoupling allowed the development team to employ configuration management techniques to the <b>architectural</b> <b>specification.</b> This characteristic is important to control the architectural evolution, especially because each architectural module had eight versions (on average) during the study period.|$|R
30|$|DCL 2 Check is {{publicly}} {{available as a}} plug-in for Eclipse. We created a specific DCL 2.0 project in the Eclipse platform to use the tool. This project is needed to store the <b>architectural</b> <b>specification</b> using the DCL 2.0 language. Once created, the specification project should be exported in JAR (Java ARchive) format. The system we want to perform architectural conformance adds the DCL 2.0 specification JAR file to its project dependencies. The tool identifies the <b>architectural</b> <b>specification</b> among the project system dependencies and employs it to perform the architectural compliance task. It is important to highlight, {{that even though the}} specification is exported as a JAR file, it can be used for software projects written in any programming language and not just Java. Since our tool is integrated with Eclipse, it can work with any language supported by the Eclipse platform.|$|R
40|$|One of {{the most}} {{difficult}} and time-consuming steps in the creation of an FPGA is its transistor-level design and physical layout. Modern commercial FPGAs typically consume anywhere from 50 to 200 man-years simply in the layout step. To date, automated tools have only been employed in small parts of the periphery and programming circuitry. The core tiles, which are repeated many times, are subject to painstaking manual design and layout. In this paper we present a new system (called GILES, for Good Instant Layout of Erasable Semiconductors) that automatically generates a transistor-level schematic from a high-level <b>architectural</b> <b>specification</b> of an FPGA. It also generates a cell-level netlist that is placed and routed automatically. The <b>architectural</b> <b>specification</b> is the one used as input to the VPR [3] architectural exploration tool. The output is the mask-level layout of a single tile that ca...|$|R
40|$|A {{challenging}} {{problem for}} software engineering practitioners is moving from high-level system architectures produced by system engineers to deployable software produced by software engineers. In this paper we describe our {{experience working with}} NASA engineers to develop an approach and toolset for automating the generation of space systems software from <b>architectural</b> <b>specifications.</b> Our experience shows {{that it is possible}} to leverage the space systems domain, formal <b>architectural</b> <b>specifications,</b> and component technology to provide retargetable code generators for this class of software. 1...|$|E
40|$|One of {{the most}} novel {{features}} of Casl, the Common Algebraic Specification Language, is the provision of so-called <b>architectural</b> <b>specifications</b> for describing the modular structure of software systems. A brief discussion of refinement of Casl specifications provides the setting for a presentation of the rationale behind <b>architectural</b> <b>specifications.</b> This is followed by some details of the features provided in Casl for <b>architectural</b> <b>specifications,</b> hints concerning their semantics, and simple results justifying their usefulness in the development process. 1 Introduction A common feature of present-day algebraic specification languages (see e. g. [SW 83], [EM 85], [GH 93], [CoFI 96], [SW 98]) is the provision of specificationbuilding operations [BG 77] for building large specifications in a structured fashion from smaller and simpler ones. Less usual in specification languages are features for describing the modular structure of software systems under development. This paper is about the fac [...] ...|$|E
30|$|CLACS [28] {{uses the}} {{concepts}} of component-based software development to model the <b>architectural</b> <b>specifications.</b> CLACS was specifically designed to tackle the lack of reuse faced by most ADLs.|$|E
40|$|An FMS is {{a typical}} {{real-time}} concurrent system composed {{of a number of}} computer-controlled machine tools, automated material handling and storage systems that operate as an integrated system under the control of host computer(s). #The growing demand for higher performance and flexibility in these systems and the interlocking factors of concurrency, deadline-driven activities, and real-time decision making pose a significant challenge to FMS design, especially in terms of control and scheduling. A formal engineering approach that helps handle the complexity and dynamics of FMS modeling, design and analysis is needed. A Real-time <b>Architectural</b> <b>Specification</b> (RAS) model and its application in the modeling of flexible manufacturing system (FMS) are presented. RAS combines mature operational and descriptive formal methods, in particular Time Petri nets (TPN) and Real-Time Computational Tree Logic (RTCTL), to form an integrated system model for <b>architectural</b> <b>specification</b> and analysis of rea [...] ...|$|R
40|$|An {{alternative}} approach to developing reusable components from scratch is to recover them from existing systems. Although numerous techniques {{have been proposed}} to recover reusable components from existing systems, most have focused on implementation code, rather than software architecture. In this paper, we apply architectural slicing to extract reusable architectural elements (i. e., components and connectors) from the existing <b>architectural</b> <b>specification</b> of a software system. Unlike traditional program slicing, which operates on the source code of a program to provide the low-level implementation details of the program, architectural slicing directly operates on the <b>architectural</b> <b>specification</b> of a software system, and therefore can provide useful knowledge about the high-level architecture of the system. 1 Introduction Software reusability is widely accepted {{as the key to}} improving both the quality of software and the productivity of software engineers. Software reuse can take man [...] ...|$|R
40|$|For complex {{software}} systems, a centr al design {{concern is}} system archite cture. The systematic treatment of ar chite ctural specification and refinement is a proper basis for an engineering approach to system design. However, conventional Petri nets models {{do not provide}} adequate abstr actions for <b>architectural</b> <b>specification,</b> because their primary concern is behavior modeling and analysis. As an attempt to address this problem, we present a formal model called NOAM (Netbased and Object-based Architectural Model) for <b>architectural</b> <b>specification</b> and prototyping of real-time distributed systems. Building on the existing contributions from Petri nets, NOAM not only supports precise specification of real-time behavior embodie d in a system architecture, but also provides a framework for systematic archite ctural refinement and exploration. Special focus is placed on using the formal model, and our support environment to prototyping NOAM specifications, andtomeet real-time constraints...|$|R
