47|242|Public
50|$|Rhinoceros {{supports}} two scripting languages, Rhinoscript (based on VBScript) and Python (V5.0+ and Mac). It {{also has}} an SDK, and a complete plug-in system. One McNeel plug-in, a parametric modeling/visual programming tool called Grasshopper, has attracted many architects to Rhinoceros due to its ease of use and ability to create complex <b>algorithmic</b> <b>structures.</b>|$|E
50|$|Les LeVeque is {{an artist}} based in New York who works with digital and analog {{electronic}} technology. His work includes single and multi-channel videos and video/computer-based installations. LeVeque's work uses <b>algorithmic</b> <b>structures,</b> statistically distributed elements, experimentation with the boundaries of interfaces, and provides new views of existing narratives. In 2014 {{he is a member}} of the faculty and co-chair of Film and Video at the Milton Avery Graduate School of the Arts, Bard College.|$|E
5000|$|In {{mathematical}} folklore, the no {{free lunch}} theorem (sometimes pluralized) of David Wolpert and William G. Macready {{appears in the}} 1997 [...] "No Free Lunch Theorems for Optimization."This mathematical result states {{the need for a}} specific effort in the design of a new algorithm, tailored to the engineering problem to be optimized. Kimeme handles the design and experimentation of new optimization algorithms through the new paradigm of memetic computing, which is a subject of computational intelligence which studies <b>algorithmic</b> <b>structures</b> composed of multiple interacting and evolving modules (memes).|$|E
40|$|In {{this paper}} we {{introduce}} and analyse a new Schur complement approximation based on incomplete Gaussian elimination. The approximate Schur complement {{is used to}} develop a multigrid method. This multigrid method has an <b>algorithmic</b> <b>structure</b> that {{is very similar to}} the <b>algorithmic</b> <b>structure</b> of classical multigrid methods. The resulting method is almost purely algebraic and has interesting properties with respect to variation in problem parameters...|$|R
40|$|Irregular {{algorithms}} {{are organized}} around pointer-based data {{structures such as}} graphs and trees, and they are ubiquitous in applications. Recent work by the Galois project has provided a systematic approach for parallelizing irregular applications {{based on the idea}} of optimistic or speculative execution of programs. However, the overhead of optimistic parallel execution can be substantial. In this paper, we show that many irregular algorithms have structure that can be exploited and present three key optimizations that take advantage of <b>algorithmic</b> <b>structure</b> to reduce speculative overheads. We describe the implementation of these optimizations in the Galois system and present experimental results to demonstrate their benefits. To the best of our knowledge, this is the first system to exploit <b>algorithmic</b> <b>structure</b> to optimize the execution of irregular programs...|$|R
40|$|International audienceCausal {{consistency}} is {{the strongest}} consistency model under which low-latency and high-availability can be achieved. In the past few years, many causally consistent storage systems have been developed. The long-term goal of this initial work is to perform a deep study and comparison of the different implementations of causal consistency. We identify that protocols that provide causal consistency share the well-known DUR (deferred update replication) <b>algorithmic</b> <b>structure</b> and observe that existing implementations of causal consistency fall into a sub-category of DUR that we name A-DUR (Asynchronous-DUR). In this work, we present the A-DUR <b>algorithmic</b> <b>structure,</b> the pseudocode for the instanti-ation of two causally consistent protocols under the G-DUR framework, and describe the empirical study we intend to perform on causal consistency...|$|R
40|$|In {{this paper}} we study new <b>algorithmic</b> <b>structures</b> with Douglas- Rachford (DR) {{operators}} to solve convex feasibility problems. We propose to embed the basic two-set-DR algorithmic operator into the String-Averaging Projections (SAP) {{and into the}} Block-Iterative Pro- jection (BIP) <b>algorithmic</b> <b>structures,</b> thereby creating new DR algo- rithmic schemes that include the recently proposed cyclic Douglas- Rachford algorithm and the averaged DR algorithm as special cases. We further propose and investigate a new multiple-set-DR algorithmic operator. Convergence of all these algorithmic schemes is studied by using properties of strongly quasi-nonexpansive operators and firmly nonexpansive operators. Comment: SIAM Journal on Optimization, accepted for publicatio...|$|E
40|$|The basic {{organizational}} {{approach to}} achieve high speed computations {{has been to}} execute several instructions concurrently. Various <b>algorithmic</b> <b>structures</b> and related computer organizations have been identified and used for this purpose. Each of them is better suited for some classes of applications, provides a potential speed-up {{with respect to the}} sequential computer, and suffers from degradation factors that reduce the effective speed-up obtained. The basic <b>algorithmic</b> <b>structures</b> are presented, the corresponding computer organizations described and the potential degradation factors identified. Also included are considerations related to the cost of the system and to the corresponding programming methodology...|$|E
40|$|The {{goal of the}} {{theoretical}} part of this Bachelor's thesis is to introduce basics of learning psychology, principles of programming and algorithms and creating of graphical user interface to reader. Practical part is about creating program which demonstrates principles of basic <b>algorithmic</b> <b>structures</b> by adding graphical objects...|$|E
50|$|A {{disadvantage}} {{is that it}} may {{be difficult}} for software developers to go from graphic-oriented representation of software design to implementation. Therefore, it is necessary to provide little insight into the <b>algorithmic</b> <b>structure</b> describing procedural steps to facilitate the early stages of software development (generally using PDLs).|$|R
40|$|AbstractAn {{arithmetic}} {{version of}} continuous wavelet analysis is described. Starting from a square-integrable {{representation of the}} affine group of Zp (or Z) it is shown how wavelet decompositions of ℓ 2 (Zp) can be obtained. Moreover, a redefinition of the dilation operator on ℓ 2 (Zp) directly yields an <b>algorithmic</b> <b>structure</b> similar to that appearing with multiresolution analyses...|$|R
40|$|International audienceAn {{arithmetic}} {{version of}} continuous wavelet analysis is described. Starting from a square-integrable {{representation of the}} affine group of Z Z p (or Z Z) it is shown how wavelet decom-positions of ℓ 2 (Z Z p) can be obtained. Moreover, a redefinition of the dilation operator on ℓ 2 (Z Z p) directly yields an <b>algorithmic</b> <b>structure</b> similar to that appearing with multiresolution analyses...|$|R
40|$|Developing e cient {{programs}} for distributed systems is di cult because computations must be e ciently distributed and managed on multiple processors. In particular, the programmer must partition functions and data {{in an attempt}} to nd a reasonable balance between parallelism and overhead. Furthermore, it is very expensive to code an algorithm only to nd out that the implementation is not e cient. As a result, it is often necessary to determine and examine those characteristics of an algorithm {{that can be used to}} predict its suitability for a distributed computing system. In earlier work [7, 8], we presented a framework for the study of synchronization and communication e ects on the theoretical performance of common homogeneous <b>algorithmic</b> <b>structures.</b> In particular, we examined the synchronous, asynchronous, nearest-neighbor, and asynchronous master-slave structures in terms of expected execution times. In this paper, we examine the e ects of synchronization and communication on the expected execution times of heterogeneous <b>algorithmic</b> <b>structures.</b> Speci cally, we consider structures containing two di erent types of tasks, where the execution times of the tasks follow one of two di erent uniform distributions or one of two di erent normal distributions. Furthermore, we compare the expected execution times of the heterogeneous <b>algorithmic</b> <b>structures</b> with times for corresponding homogeneous structures. Finally, wedevelop bounds for the expected execution times of the heterogeneous structures and compare those bounds to simulated execution times...|$|E
40|$|Computer {{architecture}} is investigated {{in conjunction with}} the <b>algorithmic</b> <b>structures</b> of nonlinear finite-element analysis. To help set the stage for this goal, the development is undertaken by considering the wide-ranging needs associated with the analysis of rolling tires which possess the full range of kinematic, material and boundary condition induced nonlinearity in addition to gross and local cord-matrix material properties...|$|E
40|$|Several {{studies have}} engaged in {{understanding}} how the internet and online platforms increase political engagement through various forms of online participation and leverage social collective action. This article advances this line of research by exploring how social network sites in general and Facebook in particular are fuelled by algorithms that affect and become entangled with social practices on these sites. The article is empirically grounded {{in an analysis of}} 66 self-reflexive diaries on Facebook use and studies <b>algorithmic</b> <b>structures</b> on Facebook by exploring how personalized social feeds affect the experienced relationship between self and others as well as the readiness to share information to a network of peers. In contrast to studies that position online platforms as strengthening participatory political action, this article argues {{that it is necessary to}} take into account how <b>algorithmic</b> <b>structures</b> affect interpersonal relationships and the experienced ability to engage in participatory practices. © 2014, Masaryk University. All rights reserved...|$|E
30|$|In our EAF-MR {{optimization}} method, we {{applied the}} primary <b>algorithmic</b> <b>structure</b> of the multi-resolution optimization, and we utilized the calculated SINR {{in order to}} reduce the number of configurations to be simulated. When the SINR calculation of the configurations does not meet the pre-defined SINR threshold, the configurations are trimmed out in the list of configurations to be simulated. The pseudocode of the multi-resolution algorithm is given in Algorithm 4 (Appendix).|$|R
40|$|We review {{sharpening}} {{methods for}} finite volume schemes, {{with an emphasis}} on the basic structure of sharpening methods. It covers high order methods and non linear techniques for linear advection, Glimm's method, anti-diffusion techniques, the interaction of these techniques with the PDE structures. Additional approaches like level sets, interface reconstruction and Vofire are also discussed. We also present the <b>algorithmic</b> <b>structure</b> of the downwind method for a simple two components problem...|$|R
40|$|We {{describe}} {{a framework for}} the ecient mod-eling and performance evaluation of large networks consisting of a mixture of strategic and tactical com-ponents. The method emphasizes hierarchical, lay-ered techniques that are fed parametric models at the lower level. In addition to the <b>algorithmic</b> <b>structure,</b> and some initial algorithms we {{describe a}}n object ori-ented software architecture that is under development to support these algorithmic methods in a distributed environment. ...|$|R
40|$|Developing {{efficient}} {{programs for}} distributed systems {{is difficult because}} computations must be efficiently distributed and managed on multiple processors. In particular, the program-mer must partition functions and data {{in an attempt to}} find a reasonable balance between parallelism and overhead. Furthermore, it is very expensive to code an algorithm only to find out that the implementation is not efficient. As a result, it is often necessary to determine and examine those characteristics of an algorithm {{that can be used to}} predict its suitability for a distributed computing system. In earlier work [7, 8], we presented a framework for the study of synchronization and communication effects on the theoretical performance of common homogeneous <b>algorithmic</b> <b>structures.</b> In particular, we examined the synchronous, asynchronous, nearest-neighbor, and asynchronous master-slave structures in terms of expected execution times. In this pa-per, we examine the effects of synchronization and communication on the expected execution times of heterogeneous <b>algorithmic</b> <b>structures.</b> Specifically, we consider structures containing two different types of tasks, where the execution times of the tasks follow one of two differen...|$|E
40|$|Abstract. The split {{feasibility}} {{problem has}} many applications in various fields {{of science and}} technology (for example solving systems of linear equalities and/or inequalities). The class of methods, generally called projection methods, has witnessed great progress in recent years and the algorithms have been applied with success in different areas. The paper reviews <b>algorithmic</b> <b>structures</b> and specific algorithms for the split feasibility problem. 2010 Mathematics Subject Classification. Primary 65 F 10; Secondary 65 K 05. Key words and phrases. split feasibility problem, projection algorithm...|$|E
40|$|Mathematical and {{philosophical}} approaches are presented for evaluation {{and implementation of}} ground and air transportation systems. Basic decision processes are examined that are used for cost analyses and planning (i. e, statistical decision theory, linear and dynamic programming, optimization, game theory). The effects {{on the environment and}} the community that a transportation system may have are discussed and modelled. <b>Algorithmic</b> <b>structures</b> are examined and selected bibliographic annotations are included. Transportation dynamic models were developed. Citizen participation in transportation projects (i. e, in Maryland and Massachusetts) is discussed. The relevance of the modelling and evaluation approaches to air transportation (i. e, airport planning) is examined in a case study in St. Louis, Missouri...|$|E
40|$|Abstract. Computability {{concerns}} {{information with}} a causal – typically <b>algorithmic</b> – <b>structure.</b> As such, {{it provides a}} schematic analysis of many naturally occurring situations. We look at ways in which computabilitytheoretic structure emerges in natural contexts. We will look at how <b>algorithmic</b> <b>structure</b> does not just emerge mathematically from information, but how that emergent structure can model the emergence of very basic aspects of the real world. The adequacy of the classical Turing model of computation — as first presented in [18] — is in question in many contexts. There is widespread doubt concerning the reducibility to this model of {{a broad spectrum of}} real-world processes and natural phenomena, from basic quantum mechanics to aspects of evolutionary development, or human mental activity. In 1939 Turing [19] described an extended model providing mathematical form to the <b>algorithmic</b> content of <b>structures</b> which are presented in terms of real numbers. Most scientific laws with a computational content can be frame...|$|R
40|$|A {{comprehensive}} {{description of the}} technique used to obtain a time series of the quasi-instantaneous transverse vorticity from a four wire array of probes is presented. The <b>algorithmic</b> <b>structure</b> which supports the technique is described in detail and demonstration data, from a large plane shear layer, are presented to provide a specific utilization of the technique. Sensitivity calculations are provided which allow one contribution to the inherent uncertainty of the technique to be evaluated...|$|R
40|$|Parallelization of {{irregular}} applications (which manipulate pointer-based data structures) is challenging. My contributions towards solving {{this problem}} were a) characterization of certain <b>algorithmic</b> <b>structure</b> that results {{on a more}} efficient parallelization; b) implementation of a parallel points-to analysis, which is 6 {{times faster than the}} sequential version. Tags: concurrency, graph algorithms, lock-free data structures, bytecode instrumentation, CMP/GPU. Ph. D. in CS: Sharing analysis of Java bytecode U. of New Mexico (USA), 2004 - 200...|$|R
40|$|The {{formulation}} {{and interpretation}} of written procedures should be of central interest to many subject areas in education, especially those involving computing. This paper concerns the significance of students' written solutions to problems. It will describe an experiment with 12 to 13 year old (Year 8) students involving the description in natural language (English) {{of the construction of}} simple geometric models from unit cubes. Several conclusions can be drawn about the students' ability to express the solution to a problem requiring general <b>algorithmic</b> <b>structures.</b> The findings have implications for what can be expected of students at this level as well as indicating the need for deliberately teaching the use of some algorithmic constructions...|$|E
40|$|Neural systems {{found in}} the brains of even very simple animals are amazingly {{effective}} at performing computations on information arising in the natural world. Neural structures expend less than a millionth of the power required by our most advanced digital signal processing technology for a similar task. At {{the level of a}} single device, however, our silicon technology can much more closely approach the energy requirements of structures in the brain. The nervous system achieves its remarkable effectiveness by using the fundamental device physics to define its computational primitives. In addition, <b>algorithmic</b> <b>structures</b> that emphasize spatial locality make best use of limited wiring resources. A deeper understanding of the design approach used by neural systems may make possible a new, and very powerful, engineering discipline...|$|E
40|$|The Event-B {{formalism}} allows program specifications to be modelled at {{an abstract}} level and refined towards a concrete model. However, Event-B lacks explicit control flow structure and ordering is implicitly encoded in event guards. This {{makes it difficult}} to identify and apply rules for transformation of Event-B models to sequential code. This paper introduces a scheduling language to support the incremental derivation of algorithmic control structure for events as part of the Event-B refinement process. We provide intermediate control structures for non-deterministic iteration and choice that ease the transition from abstract specifications to sequential implementations. We present rules for transforming <b>algorithmic</b> <b>structures</b> to more concrete refinements. We illustrate our approach by applying our method to the Schorr-Waite graph marking algorithm. <br/...|$|E
40|$|In {{this paper}} we present two {{parallel}} Monte Carlo based algorithms for pricing multi [...] dimensional Bermudan/American options. First approach relies on computation of the optimal exercise boundary {{while the second}} relies on classification of continuation and exercise values. We also evaluate the performance of both the algorithms in a desktop grid environment. We show {{the effectiveness of the}} proposed approaches in a heterogeneous computing environment, and identify scalability constraints due to the <b>algorithmic</b> <b>structure...</b>|$|R
40|$|The {{correlation}} {{function of the}} trajectory exactly at the Feigenbaum point of the logistic map is investigated and checked by numerical experiments. Taking advantage of recent closed analytical results on the symbol-to-symbol {{correlation function}} of the generating partition, we are in position to justify the deep <b>algorithmic</b> <b>structure</b> of the correlation function apart from numerical constants. A generalization is given for arbitrary m· 2 ^∞ Feigenbaum attractors. Comment: 15 pages, 4 figure...|$|R
40|$|A unijed {{implementation}} of jixed-delay soft-output algorithms is considered {{in this paper}} By minor modifications with lower numerical requirements, the Optimum Soft-output Algorithm (OSA) and its suboptimal approximations can be integrated into a common <b>algorithmic</b> <b>structure.</b> Also, by applying {{the principle of the}} Soft-Output Viterbi Algorithm (SOVA), the number of addcompare operations in the Sub-optimal Soft-output Algorithm (SSA) can be further reduced with only small petiormance degradations. The petiormance degradations and the complexity reductions are illustrated by computer simulations...|$|R
40|$|The {{mathematical}} model for optimal {{control of the}} well trajectory, efficiency index complex of the well trajectory control efficiency and also the functional and <b>algorithmic</b> <b>structures</b> of software for the well trajectory control system have been developed. The application software complex of the IBM-compatible controlling computer {{as a part of}} the operational control system of well trajectory has been developed. The algorithmic support and software for the perspective control system of the oil well trajectory has been introduced in the State Oil Production Enterprise "Pilot" (c. Ufa). The operational control accuracy of well trajectory has been increased 1, 5 time, the drilling process productivity has been increased by 10 - 20 %Available from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|E
40|$|Deriving {{parallelism}} automatically from functional {{programs is}} simple in theory {{but very few}} practical implementations have been realised. Programs may contain too little or too much parallelism causing a degradation in performance. Such parallelism could be more efficiently controlled if parallel <b>algorithmic</b> <b>structures</b> (or skeletons) {{are used in the}} design of algorithms. A structure captures the behaviour of a parallel programming paradigm and acts as a template in the design of an algorithm. This paper presents some important parallel programming paradigms and defines a structure for each of these paradigms. The iterative transformation paradigm (or geometric parallelism) is discussed in detail and a framework under which programs can be developed and transformed into efficient and portable implementations is presented. In recent years, there has been a st [...] ...|$|E
40|$|This paper {{describes}} {{the basic elements}} (data, actions, tunings, voids, mixtures, [...] .) and principles of programming (stratification, implicit knowledge, limited freedom, [...] .), directed to amalgamating of different programming paradigms (imperative, object-oriented, functional, constraint, [...] .) in a unified process of generating computer system models. Compositions of elements and their projections on axes of representation (visual, audio, tactile, and linguistic) {{make it possible to}} construct different <b>algorithmic</b> <b>structures,</b> which have their own syntactic form and operating semantics. Development of compositions is a goal-oriented activity controlled by constraints (resource, domain, coexistence, [...] .). This action creates both stratification system of concepts and operations on them (generalization, specialization, mapping, transformation, [...] .). A proposed approach is principally evolutionary one. It is devoted to clarify the fundamental basis of forms and principles of a het [...] ...|$|E
40|$|International audienceIn {{this paper}} we present two {{parallel}} Monte Carlo based algorithms for pricing multi [...] dimensional Bermudan/American options. First approach relies on computation of the optimal exercise boundary {{while the second}} relies on classification of continuation and exercise values. We also evaluate the performance of both the algorithms in a desktop grid environment. We show {{the effectiveness of the}} proposed approaches in a heterogeneous computing environment, and identify scalability constraints due to the <b>algorithmic</b> <b>structure...</b>|$|R
40|$|It {{has been}} {{experimentally}} verified that {{most commonly used}} subspace methods for identification of linear state-space systems with exogenous inputs may, in certain experimental conditions, run into ill-conditioning and lead to ambiguous results. An analysis of the critical situations has lead us to propose a new <b>algorithmic</b> <b>structure</b> {{which could be used}} either to test difficult cases and/or to implement a suitable combination of new and old algorithms presented in the literature to help fixing the problem...|$|R
40|$|While some {{simulations}} whose computational work {{requirements are}} superlinear in memory requirements have executed at 1 Teraflop/s, simulations of PDE-based systems remain “mired ” {{in the hundreds}} of Gigaflop/s on the same machines. We briefly review the <b>algorithmic</b> <b>structure</b> of typical PDE-based CFD codes that is responsible for this situation and consider possible architectural and algorithmic sources for performance improvement towards the achievement of the remaining four orders of magnitude required to reach 1 Petaflop/s. 1...|$|R
