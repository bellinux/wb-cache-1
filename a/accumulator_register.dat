29|40|Public
5000|$|A (0): Used {{for basic}} {{arithmetic}} operations; {{known as the}} <b>accumulator</b> <b>register.</b>|$|E
5000|$|F (6): Floating point <b>accumulator</b> <b>{{register}}</b> (This register is 48-bits {{instead of}} 24).|$|E
50|$|There is one 16-bit <b>accumulator</b> <b>register,</b> and single-bit {{registers}} (latches) for addition {{carry and}} system halt.|$|E
50|$|Group 1 {{instructions}} perform arithmetic, logical, {{exchange and}} shifting functionson the <b>accumulator</b> <b>registers.</b> This includes hardware multiply and divide instructions.Bit 4 is set if the K register is affected. Bit 5 is set if the J register is affected.Both bits are set of both registers are affected.|$|R
50|$|The ICT 1900 {{was a word}} {{addressing}} machine using a register to memory architecture with eight <b>accumulator</b> <b>registers.</b> Three of the accumulators {{could be used as}} modifier (Index) registers. The word length was 24 bits, which could be used as four 6 bit characters. Two instructions were provided for copying single characters to and from memory.|$|R
2500|$|Reduced RAM, RASP: { Increment (r), Decrement (r), Clear-to-zero (r), Load-immediate-constant k, Add (r1,r2), proper-Subtract (r1,r2), Increment accumulator, Decrement accumulator, Clear accumulator, Add to <b>accumulator</b> {{contents}} of <b>register</b> r, proper-Subtract from <b>accumulator</b> {{contents of}} <b>register</b> r, } ...|$|R
5000|$|MU5 and ICL 2900 Series. Hybrid stack and {{accumulator}} machines. The <b>accumulator</b> <b>register</b> buffered {{the memory}} stack's top data value. Variants of load and store opcodes controlled when that register was spilled {{to the memory}} stack or reloaded from there.|$|E
5000|$|... #Caption: A Walther WSR160 arithmometer from 1960. Each turn of {{the crank}} handle adds (up) or subtracts (down) the operand set to the top {{register}} from the value in the <b>accumulator</b> <b>register</b> at the bottom. Shifting the adder left or right multiplies the effect by ten.|$|E
50|$|International Computers Limited {{launches}} the ICL 2900 Series with 32-bit, 64-bit, and 128-bit two's complement integers; 64-bit and 128-bit floating point; 32-bit, 64-bit, and 128-bit {{packed decimal}} and a 128-bit <b>accumulator</b> <b>register.</b> The architecture has survived through {{a succession of}} ICL and Fujitsu machines. The latest is the Fujitsu Supernova, which emulates the original environment on 64-bit Intel processors.|$|E
5000|$|Boolean {{processor}} with 17 instructions, 1-bit <b>accumulator,</b> 32 <b>registers</b> (4 bit-addressable 8-bit) {{and up to}} 144 special 1 bit-addressable RAM variables (18 bit-addressable 8-bit) ...|$|R
40|$|In {{this paper}} {{we present a}} novel {{reseeding}} technique for accumulator-based Test Pattern Generation suitable for circuits with hard-to-detect faults. Storing the seeds is not necessary since the seeds are generated on-the-fly by inverting the logic value {{of some of the}} bits of the <b>accumulator's</b> <b>register.</b> The proposed technique achieves complete fault coverage with shorter test sequences and requires less hardware for its implementation than the corresponding already-known techniques. Furthermore, our technique does not affect the system performance since the logic required for its implementation is not inserted in the critical path. 1...|$|R
5000|$|The {{next step}} to {{reducing}} the memory traffic {{is to make}} ib as large as possible. It needs to be larger than the [...] "balance" [...] number reported by streams. In the case of one particular 2.8 GHz Pentium 4 system used for this example, the balance number is 16.5. The second code example above cannot be extended directly, since that would require many more <b>accumulator</b> <b>registers.</b> Instead, the loop is blocked over i. (Technically, this is actually {{the second time i}} is blocked, as the first time was the factor of 2.) ...|$|R
50|$|The Mano {{machine is}} similar in many respects to the PDP-8, such as the same address space, only one <b>accumulator</b> <b>register,</b> and many similar instructions. The Mano machine has a 4096x16 shared data/program memory segment {{requiring}} a 12-bit address bus. The data bus is 16 bits. There are 8-bit input/output buses for external communication, and associated interrupt flags.|$|E
50|$|In the B4900 {{and later}} machines, integer {{operations}} of 10 digits or less were now handled {{in a parallel}} way; only longer operands continued to use the serial method. And all floating point operations were limited to 17 digits of precision. Later Medium Systems machines added an <b>accumulator</b> <b>register</b> and accumulator/memory instructions using 32-bit, 7-digit integers and 48-bit or 80-bit floating point values, all aligned on 16-bit word boundaries.|$|E
5000|$|NAR 1 {{processor}} has a 5-bit {{address bus}} (32 bytes of addressable memory) and 8-bit data bus. Machine instructions were single-byte with three most significant bits specifying the opcode and 5 least significant bits the parameter - memory address. A single 8-bit <b>accumulator</b> <b>register</b> was available {{and there were}} no flags or flag registers. Only absolute addressing mode was available and all others were achieved by self-modifying code.|$|E
50|$|The <b>accumulator</b> {{and index}} <b>registers</b> operate in sign-and-magnitude format.|$|R
50|$|The <b>accumulator</b> (and multiplier-quotient) <b>registers</b> {{operate in}} signed {{magnitude}} format.|$|R
5000|$|... (0xE0) <b>accumulator</b> A. This <b>register</b> {{is used by}} most instructions.|$|R
50|$|The Mano {{machine is}} a {{computer}} theoretically described by M. Morris Mano. It contains a central processing unit, random access memory, and an input-output bus. Its limited instruction set and small address space limit it {{to use as a}} Microcontroller. But it can easily be expanded to have a 32-bit <b>accumulator</b> <b>register,</b> and 28-bit addressing using a HDL language like Verilog or VHDL; And at the same time, make room for new instructions.|$|E
50|$|A {{half-carry}} flag (also {{known as}} an auxiliary flag or decimal adjust flag) is a condition flag bit in the status register of many CPU families, such as the Intel 8080, Zilog Z80, the x86, and the Motorola 68000 series, among others. It indicates when a carry or borrow has been generated out of the least significant four bits of the <b>accumulator</b> <b>register</b> following the execution of an arithmetic instruction. It is primarily used in decimal (BCD) arithmetic instructions.|$|E
50|$|Peripheral {{processor}} (PP or PPU) {{instructions are}} {{completely different from}} CPU instructions. Peripheral processor hardware is simpler; it has an 18-bit A (<b>accumulator</b> <b>register,</b> a 12-bit Program Address register, a 12-bit Q register (not programmer-visible), and a 22-bit R register (used to accomplish address relocation during central memory read and write instructions on Cyber 180 systems). No special job validation was required to assemble peripheral processor programs, but to be executed, such programs were required to installed into the operating system via special system editing commands.|$|E
5000|$|LDAN (i/d) = CPY (i/d, N, d, A); LoaD <b>Accumulator</b> via iNdirection <b>register</b> ...|$|R
5000|$|... 8-bit {{arithmetic}} {{logic unit}} (ALU) and <b>accumulator,</b> 8-bit <b>registers</b> (one 16-bit register with special move instructions), 8-bit data bus and 2Ã—16-bit address bus/program counter/data pointer and related 8/11/16-bit operations; hence it is mainly an 8-bit microcontroller ...|$|R
50|$|The {{front panel}} had three rows of red LEDs, {{displaying}} {{the contents of}} the <b>accumulator,</b> instruction <b>register,</b> and program counter (PC). A group of twenty switches and buttons were used to read or modify any selected register.|$|R
50|$|The main <b>accumulator</b> <b>register,</b> A, {{can be set}} to be 1, 2, 3 or 4 bytes in length, {{using the}} SETL instructions. This {{controls}} how many bytes are loaded (or stored) in a memory-access instruction. The JIL instruction performs a Jump Indirect, like the JI instruction, but saves the value in the program counter, S, into the link register, L. This allows very simple non-recursive subroutine calls to be achieved. More complex subroutine calls involve {{the use of the}} PREP instruction, which saves the return information in the first bytes of the current memory segment. Such calls, too, cannot be recursive.|$|E
50|$|Modern {{computers}} {{may contain}} a dedicated MAC, {{consisting of a}} multiplier implemented in combinational logic followed by an adder and an <b>accumulator</b> <b>register</b> that stores the result. The output of the register is fed back to one input of the adder, so that on each clock cycle, {{the output of the}} multiplier is added to the register. Combinational multipliers require a large amount of logic, but can compute a product much more quickly than the method of shifting and adding typical of earlier computers. The first processors to be equipped with MAC units were digital signal processors, but the technique is now also common in general-purpose processors.|$|E
50|$|There are {{a number}} of registers, each {{designed}} for a special purpose. An <b>accumulator</b> <b>register</b> (ACC) is available for general-purpose use, and may be 32, 64, or 128 bits in size. The B register is used for indexing into arrays; the LNB (Local Name Base) register points {{to the base of the}} current stack frame, with the SF (Stack Front) register pointing to the movable 'top' of the stack; the DR register is used for holding descriptors for addressing into the heap, and so on. There are also two 32 bit pointers to off-stack data; XNB (eXtra Name Base) and LTB (Linkage Table Base).|$|E
5000|$|... #Caption: Front {{panel of}} an IBM 701 {{computer}} with lights displaying the <b>accumulator</b> and other <b>registers</b> ...|$|R
5000|$|In a computer's central {{processing}} unit (CPU), an <b>accumulator</b> is a <b>register</b> in which intermediate arithmetic and logic results are stored.|$|R
5000|$|Special {{register}}s: counter register (CTR), link register (LR), {{time base}} (TBU, TBL), alternate time base (ATBU, ATBL), <b>accumulator</b> (ACC), status <b>registers</b> (XER, FPSCR, VSCR, SPEFSCR).|$|R
50|$|The 6502's {{registers}} {{include one}} 8-bit <b>accumulator</b> <b>register</b> (A), two 8-bit index registers (X and Y), 7 processor status flag bits (P), an 8-bit stack pointer (S), and a 16-bit program counter (PC). The stack's address space is hardwired to memory page $01, i.e. the address range $0100 - $01FF (256 - 511). Software {{access to the}} stack is done via four implied addressing mode instructions, whose functions are to push or pop (pull) the accumulator or the processor status register. The same stack is also used for subroutine calls via the JSR (Jump to Subroutine) and RTS (Return from Subroutine) instructions and for interrupt handling.|$|E
50|$|The CPU {{operated}} on 36-bit words, and addresses were 18 bits. The <b>Accumulator</b> <b>Register</b> (AQ) was 72 bits, {{or could be}} accessed separately as two 36-bit reqisters (A and Q) or four 18-bit registers (AU,AL,QU,QL). An eight-bit Exponent Register contained the exponent for floating point operations (the mantissa was in AQ). There were eight eighteen-bit index registers X0 through X7. The 18-bit Base Address Register (BAR) contained the base address and number of 1024-word blocks assigned to the program (the 6180 used segmentation rather than the BAR). The system also included several special-purpose registers: an 18-bit Instruction Counter (IC) and a 27-bit Timer Register (TR) with a resolution of 2 Î¼s. Sets of special registers were used for fault detection and debugging.|$|E
50|$|The {{peripheral}} processor subsystem used a technique known as barrel and slot {{to share the}} execution unit; each PP had its own memory and registers, but the processor (the slot) itself executed one instruction from each PP in turn (the barrel). This is a crude form of hardware multiprogramming. The {{peripheral processor}}s had 4096 bytes of 12-bit memory words and an 18-bit <b>accumulator</b> <b>register.</b> Each PP had access to all I/O channels {{and all of the}} system's central memory (CM) in addition to the PP's own memory. The PP instruction set lacked, for example, extensive arithmetic capabilities and did not run user code; the peripheral processor subsystem's purpose was to process I/O and thereby free the more powerful central processor unit(s) to running user computations.|$|E
5000|$|No {{convention}} exists {{regarding the}} names for operations from <b>registers</b> to <b>accumulator</b> and from <b>accumulator</b> to <b>registers.</b> Tradition (e.g. Donald Knuth's (1973) hypothetical MIX computer), for example, uses two instructions called load accumulator from register/memory (e.g. [...] "LDA r") and store accumulator to register/memory (e.g. [...] "STA r"). Knuth's model has many other instructions as well.|$|R
50|$|Where Î”x causes y to {{be added}} to (or {{subtracted}} from) S, Î”y causes y to be incremented (or decremented), and Î”S is caused by an overflow (or underflow) of the S <b>accumulator.</b> Both <b>registers</b> and the three Î” signals are signed values. Initial conditions for the problem can be loaded into both y and S prior to beginning integration.|$|R
5000|$|... (Divide): The {{contents}} of <b>Accumulator</b> A and <b>Register</b> Q that form a dividend are {{divided by the}} {{contents of}} memory. The quotient is placed in Accumulator A and rounded unless the rounding would cause overflow.|$|R
