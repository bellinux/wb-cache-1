0|146|Public
25|$|Living trusts {{generally}} do not shelter assets from the U.S. federal estate tax. Married couples may, however, effectively double the estate tax exemption amount by setting up the trust with a <b>formula</b> <b>clause.</b>|$|R
50|$|Offer and {{acceptance}} analysis {{is a traditional}} approach in contract law. The offer and <b>acceptance</b> <b>formula,</b> developed in the 19th century, identifies a moment of formation when the parties are of one mind. This classical approach to contract formation has been weakened by developments in the law of estoppel, misleading conduct, misrepresentation and unjust enrichment.|$|R
40|$|The marital {{deduction}} formula bequest exists principally as a {{means of}} minimizing federal estate taxes. Considerations apart from the estate tax, however, have had a substantial effect upon the form of such clauses, and a 1964 pronouncement by the Internal Revenue Service has circumscribed their continued utility. The author examines the basic <b>formula</b> <b>clauses,</b> setting out the characteristics of each, the respects in which they differ, the objectives each is designed to secure, and the factors to be weighed by the draftsman who wishes to utilize a formula bequest to achieve a maximum federal estate tax marital deduction...|$|R
50|$|A ground <b>formula</b> {{or ground}} <b>clause</b> is a <b>formula</b> without free variables.|$|R
40|$|A simple nonconstructive {{argument}} {{shows that}} most 3 CNF <b>formulas</b> with cn <b>clauses</b> (where c {{is a large}} enough constant) are not satisfiable. It {{is an open question}} whether there is an efficient refutation algorithm that for most <b>formulas</b> with cn <b>clauses</b> proves that they are not satisfiable. We present a polynomial time algorithm that for most 3 CNF <b>formulas</b> with cn <b>clauses</b> (where c is a large enough constant) finds a subformula with O(c n) clauses and then proves that this subformula is not satisfiable (and hence that the original formula is not satisfiable). Previously, it was only known how to efficiently certify the unsatisfiability of random 3 CNF formulas with at least poly(log(n)) clauses...|$|R
40|$|Abstract. We give {{an exact}} {{deterministic}} algorithm for MAX-SAT. On input CNF <b>formulas</b> with constant <b>clause</b> density (the {{ratio of the}} number of clauses to the number of variables is a constant), this algorithm runs in O(c n) time where c < 2 and n is the number of variables. Worst-case upper bounds for MAX-SAT less than O(2 n) were previously known only for k-CNF formulas and for CNF <b>formulas</b> with small <b>clause</b> density. ...|$|R
40|$|AbstractA propositional {{formula is}} in 2 -CNF (2 -conjunctive normalform) iff {{it is the}} {{conjunction}} of clauses {{each of which has}} exactly two literals. We show: IfC= 1 +ε, whereε> 0 is fixed andq(n) ⩾C·n, then almost all formulas in 2 -CNF withq(n) different clauses, wherenis the number of variables, are unsatisfiable. IfC= 1 −εandq(n) ⩽C·n, then almost all <b>formulas</b> withq(n) <b>clauses</b> are satisfiable. By “almost all” we mean that the probability of the set of unsatisfiable or satisfiable formulas among all <b>formulas</b> withq(n) <b>clauses</b> approaches 1 asn→∞. SoC= 1 gives us a threshold separating satisfiability and unsatisfiability of formulas in 2 -CNF in a probabilistic, asymptotic sense. To prove our result we translate the satisfiability problem for formulas in 2 -CNF into a graph theoretical question. Then we apply techniques from the theory of random graphs...|$|R
40|$|WC {{study the}} {{complexity}} of proving unsatisfiability for random k-CNP <b>formulas</b> with <b>clause</b> density A = m/n where 111 is number of clauses and n {{is the number of}} variables. We prove the first nontrivial general upper bound, giving algorithmo that, in particular, for k = 3 produce refutations almost certainly in time 20 t”iA). This is polynomial when m z n 2 / logn. We ohow that our upper bounds are tight for certain natural classes of Davis-Putnam algorithms. We show fur-ther that random 3 -C!W <b>formulas</b> of <b>clause</b> density A al-most certainly have no resolution refutation of size smaller than 2 ntnlA 4 t”), which implies the same lower bound on any Davis-Putnam algorithm. We also give a much simpler ar-gument based on a novel form of self-reduction that yields a slightly weaker 2 *t”lA 5 te) lower bound. ...|$|R
40|$|J. A. Harland y D. J. Pym z University of Melbourne University of Edinburgh Australia Scotland, U. K. Abstract We {{present a}} proof-theoretic {{foundation}} for logic programming in Girard's linear logic. We exploit the permutability properties of two-sided linear sequent calculus to identify appropriate notions of uniform proof, definite <b>formula,</b> goal <b>formula,</b> <b>clause</b> and resolution proof for fragments of linear logic. The {{analysis of this}} paper extends earlier work by the present authors to include negative occurrences of z (par) and positive occurrences of ! (of course !) and ? (why not ?). These connectives introduce considerable difficulty. We consider briefly {{some of the issues}} related to the mechanical implementation of our resolution proofs. 1 Introduction An interesting recent development in logic of some significance for theoretical computer science is linear logic [3], [4], a relevance logic lacking the both structural rules of weakening and contraction, except via the expo [...] ...|$|R
500|$|Features from COMTRAN {{incorporated}} into COBOL included <b>formulas,</b> the [...] <b>clause,</b> an improved IF statement, which obviated {{the need for}} GO TOs, and a more robust file management system.|$|R
40|$|MUltlog is {{a system}} which takes as input the {{specification}} of a finitely-valued first-order logic and produces a sequent calculus, a natural deduction system, and a calculus for transforming a many-valued <b>formula</b> to <b>clauses</b> suitable for many-valued resolution. All generated rules are optimized regarding their branching degree. The output {{is in the form}} of a scientific paper, written in L A T E X...|$|R
50|$|In {{recognition}} of the global <b>acceptance</b> of the <b>formula</b> it was briefly renamed Formula Mondial in 1983, but its peak of international popularity was some years past.|$|R
40|$|Input Distance (denoted by Delta) is {{introduced}} as a metric for difficulty of propositional resolution derivations. If F = Ci is the input CNF <b>formula,</b> and <b>clauses</b> {{are regarded as}} sets of literals, then the input distance of a clause D from F, denoted by Delta(D, F), {{is defined as the}} minimum over i of —D- Ci—. The Delta for a derivation is the maximum Delta of any clause in the derivation. Input Distance provides a refinement of the clause-width metric analyzed by Ben-Sasson and Wigderson (JACM 2001) {{in the sense that it}} applies to families of <b>formulas</b> whose <b>clause</b> width grows with formula size, such as pigeon-hole formulas. They showed that if formula F has a tree-like refutation of length ST, then it has (possibly another) refutation with maximum clause-width W, where (W- width(F)) ¡ = lg(ST). They also showed that if formula F has a refutation of length S, then it has (possibly another) refutation with maximum clause-width W, where (W- width(F)) squared ¡ = c * N * ln(S). Note that ln denotes the natural log, lg denotes binary log, c is a constant independent of F, and N is the number of variables in F. It is shown here that both bounds apply with (W- width(F)) replaced by Delta. For families of <b>formulas</b> whose <b>clause</b> width is bounded by a constant, the two metrics provide essentially the same bounds. It is shown that for pigeon-hole formulas PHP(n+ 1, n), the minimum Delta for any refutation is Omega(n). A similar result is conjectured for the GT(n) family analyzed by Bonet an...|$|R
25|$|In the {{simplest}} {{case in which}} H, B1, …, Bn are all atomic <b>formulae,</b> these <b>clauses</b> are called definite clauses or Horn clauses. However, there exist many extensions of this simple case, {{the most important one}} being the case in which conditions in the body of a clause can also be negations of atomic formulae. Logic programming languages that include this extension have the knowledge representation capabilities of a non-monotonic logic.|$|R
40|$|A linear-time algorithm, {{with respect}} {{to the size of the}} {{instance}} Boolean formula, is presented for the #SAT problem restricted to formulae of the form # 2; 2 -CF, i. e. <b>formulae</b> whose <b>clauses</b> have just two literals and in which each variable appears at most twice. Keyword: Satisfiability, #SAT problem, counting problem, linear-time algorithm. 1 Introduction 1. 1. The satisfiability problem for Boolean formulae, SAT, is NP-complete, as was shown by Cook [2]. Its restriction, 2 -SAT, to <b>formulae</b> whose <b>clauses</b> have just two literals can be solved in linear time [5], but the corresponding "optimization" and "counting" problems Max 2 SAT (given a 2 -formula find an assignment which maximizes the number of satisfied clauses), and # 2 -SAT (given a 2 -formula count the number of assignments satisfying all the clauses), are NP-hard. 1. 2. From the standpoint of NP-completeness, one basic approach to compare the problem classes P and NP is to consider for a NP-complete problem a restriction of it in P, a [...] ...|$|R
40|$|We {{study the}} {{complexity}} of proving unsatisfiability for random k-CNF <b>formulas</b> with <b>clause</b> density D = m=n where m is number of clauses and n {{is the number of}} variables. We prove the first nontrivial general upper bound, giving algorithms that, in particular, for k = 3 produce refutations almost certainly in time 2 O(n=D). This is polynomial when m n 2 =logn. We show that our upper bounds are tight for certain natural classes of Davis-Putnam algorithms. We show further that random 3 -CNF <b>formulas</b> of <b>clause</b> density D almost certainly have no resolution refutation of size smaller than 2 W(n=D 4 +e), which implies the same lower bound on any Davis-Putnam algorithm. We also give a much simpler argument based on a novel form of self-reduction that yields a slightly weaker 2 W(n=D 5 +e) lower bound. 1 Introduction The random k-CNF model has been widely studied for several good reasons. First, it is an intrinsically natural model, analogous to the random graph model, that shed [...] ...|$|R
40|$|Abstract. Input Cover Number (denoted by) is {{introduced}} as a met-ric for diÆculty of propositional resolution derivations. If F = fC i g is the input CNF <b>formula,</b> and <b>clauses</b> {{are regarded as}} sets of literals, then the input cover number of a clause D based on F, denoted by (D; F), is dened as the minimum number of clauses C i needed to form a super-set of (i. e., cover) D. The for a derivation is the maximum of any clause in the derivation. Input Cover Number provides a renement of the clause-width metric analyzed by Ben-Sasson and Wigderson {{in the sense that}} it applies to families of <b>formulas</b> whose <b>clause</b> width grows with for-mula size, such as pigeon-hole formulas and the family GT(n) introduced by Krishnamurthy (Acta Informatica 1985). Ben-Sasson and Wigderson (JACM 2001) showed that if formula F has the property that every res-olution refutation of F contains a clause of width W, then certain lower bounds can be expressed in terms of (W width(F)) for the shortest tree-like refutation and for the shortest refutation. It is shown here that both bounds apply with (W width(F)) replaced by. For families of <b>formulas</b> whose <b>clause</b> width is bounded by a constant, the two metrics provide essentially the same bounds. Evidence is presented that may be a sharper metric than clause width for distinguishing polynomial fam-ilies from super-polynomial families. Ben-Sasson and Wigderson showed that pigeon-hole formulas PHP(m;n) formulas require clause-width to be (n), and it is well known that pigeon-hole formulas require refutation length to be exponential in n. Bonet and Galesi (Computational Com-plexity 2001) showed that GT(n) formulas also require clause-width to be (n), although the GT(n) family has polynomial-length refutations. It is shown here that is (n) for pigeon-hole formulas and is O(1) for GT(n) formulas and variants of GT(n). ...|$|R
50|$|Until the 1980s, the fog {{index was}} {{calculated}} differently. The original <b>formula</b> counted each <b>clause</b> as a sentence. Because the index {{was meant to}} measure clarity of expression within sentences, it assumed people saw each clause as a complete thought.|$|R
40|$|A near-propositional CNF {{formula is}} a first-order <b>formula</b> (in <b>clause</b> normal form) with a finite Herbrand universe. For {{this class of}} problems, the {{validity}} problem can be decided {{by a combination of}} grounding and propositional reasoning. However, naive approaches to grounding can generate extremely large ground formulae. We investigate various means {{to reduce the number of}} ground instances generated and show that we can increase the number of problems that can be handled with reasonable resources...|$|R
40|$|This paper {{talks about}} {{difference}} between P and NP by using topological space that mean resolution principle. I {{pay attention to}} restrictions of antecedent and consequent in resolution, and show what kind of influence the restrictions have for difference of structure between P and NP regarding relations of relation. First, I show the restrictions of antecedent and consequent in resolution principle. Antecedents connect each other, and consequent become a linkage between these antecedents. And we can make consequent as antecedents product by using some resolutions which have same joint variable. We can determine these consequents reducible and irreducible. Second, I introduce RCNF that mean topology of resolution principle in CNF. RCNF is HornCNF and that variable values are presence of restrictions of CNF <b>formula</b> <b>clauses.</b> RCNF is P-Complete. Last, I introduce TCNF that have 3 CNF's character which relate 2 variables relations with 1 variable. I show CNF complexity by using CCNF that combine some TCNF. TCNF is NP-Complete and product irreducible. I introduce CCNF that connect TCNF like Moore graph. We cannot reduce CCNF to RCNF with polynomial size. Therefore, TCNF is not in P. Comment: 7 pages, English and Japanese (see Other formats - Source...|$|R
40|$|OTTER (Organized Techniques for Theorem-proving and Effective Research) is a resolution-style theorem-proving {{program for}} first-order logic with equality. OTTER {{includes}} the inference rules binary resolution, hyperresolution, UR-resolution, and binary paramodulation. Some of its other abilities and features are conversion from first-order <b>formulas</b> to <b>clauses,</b> {{forward and back}} subsumption, factoring, weighting, answer literals, term ordering, forward and back demodulation, evaluable functions and predicates, and Knuth-Bendix completion. OTTER is coded in C, is free, and is portable to {{many different kinds of}} computer...|$|R
40|$|Theorem prover for first-order logic usually {{operate on}} a set of clauses. Since it is more natural and {{adequate}} to code problems in full first-order logic, the problem of translating a <b>formula</b> into <b>clause</b> normal form is an important one in this field. From experience we know that a theorem prover can find a proof more easily with a compact clause normal form than with a huge set of clauses. In this thesis we present powerful methods to obtain compact clause normal forms...|$|R
40|$|We {{construct}} unsatisfiable k-CNF <b>formulas</b> {{where every}} <b>clause</b> has k distinct literals and every variable appears in at most (2 e +o(1)) 2 k k clauses. The Lopsided Local Lemma, applied with assignement of random values according to counterintuitive probabilities, shows that our result is asymptotically best possible. The determination of this extremal function {{is particularly important}} as it represents the value where the k-SAT problem exhibits its complexity hardness jump: from having every instance being a YES-instance it becomes NP-hard just by allowing each variable to occur in one more clause. The asymptotics of other related extremal functions are also determined. Let l(k) denote the maximum number, such that every k-CNF <b>formula</b> with each <b>clause</b> containing k distinct literals and each clause having a commo...|$|R
40|$|Abstract. We {{establish}} the satisfiability threshold for random k-sat for all k ě k 0. That is, {{there exists a}} limiting density αspkq such that a random k-sat <b>formula</b> of <b>clause</b> density α is with high probability satisfiable for α ă αs, and unsatisfiable for α ą αs. The satisfiability threshold αspkq is given explicitly by the one-step replica symmetry breaking prediction from statistical physics. We believe that our methods may apply {{to a range of}} random csps in the 1 rsb universality class. 1...|$|R
40|$|Abstract. We {{consider}} {{a model for}} generating random k-SAT formulas, in which each literal occurs approximately {{the same number of}} times in the <b>formula</b> <b>clauses</b> (regular random k-SAT). Our experimental results show that such regular random k-SAT instances are much harder than the usual uniform random k-SAT problems. This is in agreement with other results that show that more balanced instances of random combinatorial problems are often much more difficult to solve than uniformly random instances, even at phase transition boundaries. There are almost no formal results known for such problem distributions. The balancing constraints add a dependency between variables that complicates a standard analysis. Regular random 3 -SAT exhibits a phase transition {{as a function of the}} ratio α of clauses to variables. The transition takes place at approximately α = 3. 5. We will show that for α> 3. 78 w. h. p. 1 random Regular 3 -SAT formulas are unsatisfiable. We will also show that the analysis of a greedy algorithm proposed in Kaporis et al (KKL 02) for the uniform 3 -SAT model can be adapted for regular random 3 -SAT. In particular, we show that for formulas with ratio α< 2. 46, a greedy algorithm finds a satisfying assignment with positive probability. 1...|$|R
50|$|He combatted {{not only}} the Calvinists but the Schwenkfeldians and Anabaptists, who were still active at Strasbourg; and {{introduced}} the Lutheran catechism (1554). He instituted private confession in the Church of St. Nicholas, and kept up the rite of confirmation when it began to fall into disuse in other Strasbourg churches. Marbach also took {{an active part in}} bringing about the <b>acceptance</b> of the <b>Formula</b> of Concord; and prevailed on the Strasbourg theologians to sign the Zerbst Formula (1571), while the official <b>acceptance</b> of the <b>Formula</b> of Concord was opposed by the town council. In the Palatinate he assisted Louis VI in 1576 to restore Lutheranism after the death of Frederick III. He died at Strasbourg.|$|R
50|$|The {{limiting}} value s∞ of {{the sequence}} of numbers sk is at most equal to sCNF, where sCNF is the infimum of the numbers δ such that satisfiability of conjunctive normal form <b>formulas</b> without <b>clause</b> length limits can be solved in time O(2δn). Therefore, if the strong exponential time hypothesis is true, {{then there would be}} no algorithm for general CNF satisfiability that is significantly faster than testing all possible truth assignments. However, if the strong exponential time hypothesis fails, it would still be possible for sCNF to equal one.|$|R
40|$|International audienceWe {{consider}} {{a model for}} generating random k-SAT formulas, in which each literal occurs approximately {{the same number of}} times in the <b>formula</b> <b>clauses</b> (regular random and k-SAT). Our experimental results show that such regular random k-SAT instances are much harder than the usual uniform random k-SAT problems. This is in agreement with other results that show that more balanced instances of random combinatorial problems are often much more difficult to solve than uniformly random instances, even at phase transition boundaries. There are almost no formal results known for such problem distributions. The balancing constraints add a dependency between variables that complicates a standard analysis. Regular random 3 -SAT exhibits a phase transition {{as a function of the}} ratio α of clauses to variables. The transition takes place at approximately α = 3. 5. We show that for α > 3. 78 with high probability (w. h. p.) random regular 3 -SAT formulas are unsatisfiable. Specifically, the events 1 E_n hold with high probability if Pr (1 E_n) → 1 when n → ∞. We also show that the analysis of a greedy algorithm proposed by Kaporis et al. for the uniform 3 -SAT model can be adapted for regular random 3 -SAT. In particular, we show that for formulas with ratio α < 2. 46, a greedy algorithm finds a satisfying assignment with positive probability...|$|R
40|$|Abstract. A simple nonconstructive {{argument}} {{shows that}} most 3 CNF <b>formulas</b> with cn <b>clauses</b> (where c {{is a large}} enough constant) are not satisfiable. It {{is an open question}} whether there is an efficient refutation algorithm that for most <b>formulas</b> with cn <b>clauses</b> proves that they are not satisfiable. We present a polynomial time algorithm that for most 3 CNF formulas with cn 3 / 2 clauses (where c is a large enough constant) finds a subformula with O(c 2 n) clauses and then proves that this subformula is not satisfiable (and hence that the original formula is not satisfiable). Previously, it was only known how to efficiently certify the unsatisfiability of random 3 CNF formulas with at least poly(log(n)) · n 3 / 2 clauses. Our algorithm is simple enough to run in practice. We present some preliminary experimental results. ...|$|R
5000|$|A {{motion was}} {{moved in the}} Lok Sabha on 20 December 1968, adopted {{on the same day}} and concurred in by the Rajya Sabha on 28 December 1968, to refer the Bill was to a Joint Committee of the Houses of Parliament. The Report of the Joint Committee on the Bill was {{presented}} to the Lok Sabha on 12 March 1969 [...] The Committee suggested certain amendments in the Enacting <b>Formula</b> and <b>clauses</b> 1 and 3 of the Bill. The Bill, as reported by the Joint Committee, was withdrawn on 2 April 1969, by leave of the House.|$|R
40|$|We {{establish}} the satisfiability threshold for random k-SAT for all k> k_ 0, with k_ 0 an absolute constant. That is, {{there exists a}} limiting density α_*(k) such that a random k-SAT <b>formula</b> of <b>clause</b> density α is with high probability satisfiable for αα_*. We show that the threshold α_*(k) is given explicitly by the one-step replica symmetry breaking prediction from statistical physics. The proof develops a new analytic method for moment calculations on random graphs, mapping a high-dimensional optimization problem to a more tractable problem of analyzing tree recursions. We believe that our method may apply {{to a range of}} random CSPs in the 1 -RSB universality class...|$|R
40|$|An unsatisfiable {{formula is}} called minimal {{if it becomes}} satisfiable {{whenever}} any of its clauses are removed. We construct minimal unsatisfiable k-SAT <b>formulas</b> with Ω(n^k) <b>clauses</b> for k ≥ 3, thereby negatively answering a question of Rosenfeld. This should {{be compared to the}} result of Lovász which asserts that a critically 3 -chromatic k-uniform hypergraph can have at most nk- 1 edges. Comment: 4 page...|$|R
40|$|In this paper, we {{investigate}} the computational efficiency of gene rearrangement operations found in ciliates, {{a type of}} unicellular organisms. We show how the so-called guided recombination systems, which model this gene rearrangement, {{can be used as}} problem solvers. Specifically, we prove that these systems can uniformly solve SAT in time O(n · m) for a boolean <b>formula</b> of m <b>clauses</b> over n variables. ...|$|R
40|$|Abstract. Autarkies are partial truth {{assignments}} that satisfy all clauses having literals in {{the assigned}} variables. Autarkies provide important {{information in the}} analysis of unsatisfiable <b>formulas.</b> In-deed, <b>clauses</b> satisfied by autarkies cannot be included in minimal explanations or in minimal corrections of unsatisfiability. Comput-ing the maximum autarky allows identifying all such clauses. In re-cent years, a number of alternative approaches have been proposed for computing a maximum autarky. This paper develops new mod-els for representing autarkies, and proposes new algorithms for com-puting the maximum autarky. Experimental results, obtained on a large number of problem instances, show orders of magnitude per-formance improvements over existing approaches, and solving in-stances that could not otherwise be solved. ...|$|R
40|$|The use of clauses and clause-like normal forms [...] . In {{this paper}} I present a non-clausal {{stochastic}} local search satisfiability procedure for classical propositional logic that avoids {{the translation of}} an input <b>formula</b> into <b>clauses.</b> This new procedure, called polWSAT, resembles clausal Walksat solver of Selman, Kautz, and Cohen ([4]). polWSAT and Walksat coincide {{in the domain of}} formulas in conjunctive normal form and, hence, their performance on clausal instances of SAT is similar. On free-form formulas, however, polWSAT can significantly outperform Walksat solver augmented with a structure preserving CNF-translation. The empirical results reported in this paper, that concern the relative efficiency of polWSAT and Walksat, provide some evidence in support of this clai...|$|R
500|$|Krom {{writes that}} a formula is {{consistent}} if repeated {{application of this}} inference rule cannot generate both the clauses [...] and , for any variable [...] As he proves, a 2-CNF formula is satisfiable {{if and only if}} it is consistent. For, if a formula is not consistent, {{it is not possible to}} satisfy both of the two clauses [...] and [...] simultaneously. And, if it is consistent, then the formula can be extended by repeatedly adding one clause of the form [...] or [...] at a time, preserving consistency at each step, until it includes such a clause for every variable. At each of these extension steps, one of these two clauses may always be added while preserving consistency, for if not then the other clause could be generated using the inference rule. Once all variables have a clause of this form in the formula, a satisfying assignment of all of the variables may be generated by setting a variable [...] to true if the <b>formula</b> contains the <b>clause</b> [...] and setting it to false if the <b>formula</b> contains the <b>clause</b> [...]|$|R
