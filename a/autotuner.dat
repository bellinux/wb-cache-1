45|19|Public
2500|$|Also {{borrowed}} from US contemporary R {{is the use}} of [...] "vocal science", the technique of digitally altering vocal samples with devices such as the <b>Autotuner.</b> What results is a posthuman mix between person and technology.|$|E
5000|$|CK <b>autotuner</b> - universal, {{customizable}} and multi-objective compiler <b>autotuner.</b>|$|E
5000|$|Also {{borrowed}} from US contemporary R&B {{is the use}} of [...] "vocal science", the technique of digitally altering vocal samples with devices such as the <b>Autotuner.</b> What results is a posthuman mix between person and technology.|$|E
40|$|Program {{autotuning}} {{has been}} shown to achieve better or more portable performance in a number of domains. How-ever, <b>autotuners</b> themselves are rarely portable between projects, for a number of reasons: using a domain-informed search space representation is critical to achieving good re-sults; search spaces can be intractably large and require ad-vanced machine learning techniques; and the landscape of search spaces can vary greatly between different problems, sometimes requiring domain specific search techniques to explore efficiently. This paper introduces OpenTuner, a new open source framework for building domain-specific multi-objective pro-gram <b>autotuners.</b> OpenTuner supports fully-customizable configuration representations, an extensible technique rep-resentation to allow for domain-specific techniques, and an easy to use interface for communicating with the program to be autotuned. A key capability inside OpenTuner is the use of ensembles of disparate search techniques simultaneously; techniques that perform well will dynamically be allocated a larger proportion of tests. We demonstrate the efficacy and generality of OpenTuner by building <b>autotuners</b> for 6 dis-tinct projects and 14 total benchmarks, showing speedups over prior techniques of these projects of up to 2. 8 Ã— with little programmer effort. OpenTuner can be downloaded from...|$|R
40|$|AbstractEmpirical {{performance}} optimization {{of computer}} codes using <b>autotuners</b> has received significant attention in recent years. Given the increased complexity of computer architectures and scientific codes, evaluating all possible code variants is prohibitively expensive {{for all but}} the simplest kernels. One way for <b>autotuners</b> to overcome this hurdle is through use of a search algorithm that finds high-performing code variants while examining relatively few variants. In this paper we examine the search problem in autotuning from a mathematical optimization perspective. As an illustration of the power and limitations of this optimization, we conduct an experimental study of several optimization algorithms on a number of linear algebra kernel codes. We find that the algorithms considered obtain performance gains similar to the optimal ones found by complete enumeration or by large random searches but in {{a tiny fraction of the}} computation time...|$|R
40|$|This paper {{presents}} {{a set of}} <b>autotuners</b> for single input-output systems with time delay. <b>Autotuners</b> represent a combination of relay feedback identification and some control design method. In this contribution, models with up to three parameters are estimated {{by means of a}} single asymmetrical relay experiment. Then a stable low order transfer function with a time delay term is identified. Controller parameters are analytically derived from a general solution of Diophantine equations in the ring of proper and stable rational functions RPS. This approach covers a generalization of PID controllers and it enables to define a scalar positive parameter for further tuning of the control performance. The Smith predictor scheme is applied for systems with a time delay term. The simulations are performed in the Matlab environment and a toolbox for automatic design and simulation was developed...|$|R
50|$|The CCECPSCO has two {{repeaters}} on Mackinaw {{to provide}} communications coverage throughout the Straits of Mackinac. These repeaters, {{operating under the}} call-sign W8AGB to match the ship's WAGB-83 designation, are on a radio frequency of 145.110 MHz with 103.5 Hz PL tone and 444.375 MHz with 107.2 Hz PL tone. The organization is also actively assisting the museum with restoration and operation of various communications, navigation, and power systems. Included with the radios on board the ship are two Sunair RT-9000 HF transceivers with matching antenna couplers and vertical antennas. Scheduled for spring 2010 is the installation of a third RT-9000 paired with an LPA-9600 solid-state kilowatt amplifier and CU-9100 kilowatt <b>autotuner</b> along with a Sunair F-9800 automatic pre/post filter for each radio to permit simultaneous operation of all three stations, and Sunair RCU-9310 remote control panels.|$|E
5000|$|The {{song was}} written by Danielle Brisebois, Wayne Rodrigues and {{produced}} by Oliver Leiber, who had a role producing Abdul's debut album Forever Your Girl. Incidentally, the song entered the Billboard Hot 100 twenty years, to the week, after [...] "Forever Your Girl" [...] was #1 on that chart. The song uses an <b>autotuner</b> and electronic synthesizers over an uptempo electronic beat. The song was originally an unreleased song cut from Kylie Minogue's ninth album Body Language. Minogue's original version can be heard on the YouTube network. This {{is not the first}} time that Minogue and Adbul have exchanged tracks. In 2000, Minogue added the Abdul penned single Spinning Around to her 2000 album Light Years which was a worldwide hit single outside of the United States peaking at #1 in Australia and the United Kingdom respectively. Abdul also covered the Kylie track Boombox which appeared on Minogue's compilation of the same name, though Abduls version of Boombox remains unreleased, it can be heard in snippet form on the YouTube network.|$|E
5000|$|There {{were two}} four-and-a-half-out-of-five's of a nine-out-of-a-ten that were {{garnered}} by the album from The Christian Manifesto, Louder Than the Music and Cross Rhythms. To This, The Christian Manifesto's Lydia Akinola wrote that [...] "I Choose Jesus is a packed full with insightful, thoughtful messages that a listener {{of any age}} could learn from. That makes it a debut {{that we should all}} choose." [...] Likewise, Jono Davies of Louder Than the Music wrote that [...] "I wouldn't describe Moriah as bubblegum pop, that would be unfair. Yet she does have a very pop-feel to her music. I would describe her as sounding a bit like fellow female vocalists Kari Jobie sic and Audrey Assad." [...] Furthermore, Davies said that [...] "The whole album is actually full of very pleasant songs, sung with Moriah's mellifluous voice that you can not help but like. Even if you're a rock lover or a dance raver, this is music that doesn't offend. The album has a mix of songs directly about Jesus and His love, to songs that have very positive messages about living a good life. It's taken me a whole review to work out who I think she sounds like, and it's Philippa Hanna who as you may know, I think very highly of as an artist. They both have rich and wonderful harmonious voices that you could just listen to all day." [...] Davies called it a [...] "Great album." [...] Lastly, Cross Rhythms's Tony Cummings said [...] "With Moriah rising to prominence on the US Christian scene through her vocals in the Veggie Tales DVD 'The Princess And The Popstar' I understandably expected some rather vacuous tweenie pop music on the singer's debut. In fact, there's not an <b>autotuner</b> or a predictable synth riff in earshot and thanks to the sure hand of producer Ed Cash (Chris Tomlin, Bebo Norman) the sound here is organic enough so that one has to take seriously the 19 year old's album." ...|$|E
40|$|This paper {{presents}} a method which, {{on the basis}} of a parametric model of a stable process and of a record of the process response to a convenient input signal, provides a nonparametric overbound of the model error magnitude. The results obtained in no sense depend on the model complexity. Simulation examples are reported to show the method's effectiveness in improving the performance of model-based <b>autotuners...</b>|$|R
40|$|Some {{approaches}} to the autotuning of cascade controls are comparatively analyzed {{on the basis of}} a conveniently characterized test batch. The reported analysis results provide some remarks and possible guidelines for the design of cascade <b>autotuners.</b> Peculiar to the presented simulation study is that the "identification experiment" is considered as an integral part of the autotuning proceduresan aspect of the overall matter that is seldom addressed in the literature...|$|R
40|$|This paper {{presents}} {{a set of}} single input - output (SISO) principles for tuning of continuous-time controllers used in autotuning schemes. The emphasis of designed <b>autotuners</b> is laid to SISO systems with time delay. <b>Autotuners</b> represent a combination of relay feedback identification and some control design method. In this contribution, models with up to three parameters are estimated {{by means of a}} single asymmetrical relay experiment. Then a stable low order transfer function with a time delay term is identified by a relay experiment. Controller parameters are analytically derived from general solutions of Diophantine equations in the ring of proper and stable rational functions RPS. The generalization for a two degree of freedom (2 DOF) control structure is performed. This approach covers a generalization of PID controllers and enables to define a scalar positive parameter for further tuning of the control performance. The analytical simple rule is derived for aperiodic control response and the scalar tuning parameter m 7 gt; 0. Autotuning principles of this contribution are applied to SISO systems with delays. Moreover, the Smith predictor scheme is applied for systems with a time delay term. The simulations are performed in the Matlab environment and a toolbox for automatic design and simulation was developed...|$|R
40|$|This thesis {{presents}} an improved {{version of the}} classic relay <b>autotuner.</b> The pro-posed <b>autotuner</b> uses an asymmetric relay function to better excite the process in the experiment phase. The improved excitation provides the possibility to obtain better models and hence better tuning, without making the <b>autotuner</b> more compli-cated or time consuming. Some processes demand more accurate modeling and tuning to obtain con-trollers of sufficient performance. The proposed <b>autotuner</b> can classify these pro-cesses from the experiment. In an advanced version of the <b>autotuner</b> an additional experiment could be designed for these processes, {{in order to further}} increase the possibilities in modeling and tuning. The experiment design would then rely on information from the relay experiment. A simple version of the <b>autotuner</b> could in-stead make a somewhat better model estimation immediately, or suggest that some extra effort may be put in modeling if the control performance of the loop is crucial. The main focus in this thesis is on the simple version of the <b>autotuner...</b>|$|E
40|$|The relay <b>autotuner</b> {{provides}} {{a simple way}} of finding PID controller parameters. Even though relay autotuning is much investigated in the literature, the practical aspects are not that well-documented. In this paper an asymmetric relay <b>autotuner</b> with features such as a startup procedure and adaptive relay amplitudes is proposed. Parameter choices and handling of noise, disturbances, start in non-steady state and other possible error sources are discussed. The <b>autotuner</b> is implemented and tested in an industrial air handling unit to show its use in practice. The experiments show good results, and prove that the proposed simple <b>autotuner</b> is well-suited for industrial use. But the experiments also enlighten possible error sources and remaining problems...|$|E
40|$|A {{computer}} {{model of the}} JPL hydrogen maser frequency standard was developed. This model allows frequency stability data to be generated, {{as a function of}} various maser parameters, many orders of magnitude faster than these data can be obtained by experimental test. In particular, the maser performance {{as a function of the}} various automatic tuning servo parameters may be readily determined. Areas of discussion include noise sources, first-order <b>autotuner</b> loop, second-order <b>autotuner</b> loop, and a comparison of the loops...|$|E
40|$|In model-based PI/PID tuning regulators, {{the same}} set of I/O data and the same tuning rule can produce very {{different}} results, depending just on the procedure used to parametrise the process model. The problem is seldom addressed, but extremely relevant for the acceptability of model-based <b>autotuners</b> in the applications. This manuscript proposes a methodology to treat the model parametrisation and regulator tuning phases jointly, so as to circumvent said problem with affordable process stimulation and computational effort. The methodology can be generalised to different regulator structures, and even employed to devise new tuning rules...|$|R
40|$|Abstract:- Although a {{wide range}} of control {{algorithms}} are available, PID controllers are still the most widely used type. Even control engineers who have a good knowledge of advanced control algorithms prefer PID controllers when they are asked to design the control circuit for a new device. This is because of their price and because of the simplicity and reliability of the control algorithm. The PID control algorithm enables anyone with a basic knowledge of mathematics to gain some idea of what happens inside the controller during the control process, how the manipulated value is computed and its dependence on the control error. The main disadvantage of standard PID type controllers is the absence of autotuning features. Implementation of such controllers requires time-consuming tuning, and very often the presence of expensive experts. Therefore, there is quite strong pressure to equip new PID controllers with simple <b>autotuners.</b> Recently, tuners based on relay experiments have become popular. However, the use of <b>autotuners</b> of this kind requires the control process to be stopped temporarily during the relay experiment. For these reasons, even controllers equipped with these autotuning facilities are used without any tuning, sometimes even with the factory presetting. This unsatisfactory situation has motivated us to develop a new frequency response based autotuning algorithm that does not use any model of the controlled plant and enables the controller parameters to be changed without the necessity to break the control process...|$|R
40|$|Key Words-Predictive control; {{generalized}} predictive control; single-input/single-output systems; performance analysis; <b>autotuners.</b> Abstract-Several tuning {{guidelines for}} model predictive con-trol proposed in literature have {{been converted into}} suitable tuning rules and investigated {{with the help of}} simulations of two typical transfer functions and a nonlinear unstable chemical reactor as well as a real-time laboratory turbogenerator control application. A modified version of a supervisory performance tuning procedure has also been applied to explore the possibility of application of auto-tuning in model predictive control. A new tuning procedure is finally presented {{on the basis of the}} results obtained using several previously existing tuning guidelines. 0 1997 Elsevier Science Ltd. 1...|$|R
40|$|PID {{regulators}} are {{the backbone of}} most industrial control systems. The problem of determining their parameters, then, is of great importance in the professional control domain. To simplify this task and reduce the time required for it, many PID regulators nowadays incorporate autotuning capabilities, i. e. they are equipped with a mechanism capable of computing the â€˜correct â€™ parameters automatically when the regulator {{is connected to the}} field. Due to the importance of the problem, a very wide variety of PID autotuners have been developed and are currently available on the market. This monograph is aimed at control professionals who want to approach the problem of choosing and applying a PID <b>autotuner</b> in a knowledgeable and effective way. This goal is pursued by inducing an understanding of the theory of <b>autotuner</b> operation rather than by presenting an exhaustive menu of techniques and commercial products. As a consequence, this volume does not lead to a mere selection guide but to a set of concepts that, once mastered, allows the reader {{to evaluate the effectiveness of}} a specific industrial <b>autotuner</b> for a particular application. A significant space is also devoted to the review of PID control principles...|$|E
40|$|Proportional-integral-derivative (PID) {{controllers}} {{are very}} common in the process industry. In a regular factory there may be {{hundreds or thousands of}} them in use. Each of these controllers needs to be tuned, and even though the PID controller is simple, tuning the controllers still requires several hours of work and adequate knowledge in order to achieve a desired performance. Because of that, many of the operating PID controllers today are poorly tuned or even running in manual mode. Methods for tuning the controllers in an automated fashion are therefore highly beneficial, and the relay <b>autotuner,</b> that was introduced on the market in the 1980 â€™s, has been listed {{as one of the great}} success stories of control. The technology development since the 1980 â€™s, both concerning PID control and available computing power, gives opportunities for improvements of the <b>autotuner.</b> In this thesis three new autotuners are presented. They are all based on asymmetric relay feedback tests, providing process excitation at the frequency intervals relevant for PID control. One of the proposed autotuners is similar to the classic relay <b>autotuner,</b> but provides low-order models from which the controllers are tuned by simple formulas. The second <b>autotuner</b> uses the data from a very short relay test as input to an optimization method. This method provides more accurate model estimations, but to the cost of more omputing. The controller is then tuned by another optimization method, using the estimated model as input. The principle of the third <b>autotuner</b> is similar to the second one, but it is used to tune multivariable PID controllers for interacting processes. In this case a relay feedback experiment is performed on all loops simultaneously, and the data is used to identify the process transfer function matrix. All of the proposed autotuners strive to be user-friendly and practically applicable. Evaluation of the three autotuning strategies are done both through simulation examples and on experimental processes. The developed autotuners are also compared to commercially available ones, and the study shows that an upgrade of the industry standard to the newly available autotuners will yield a significant performance improvement...|$|E
40|$|Control {{applications}} contain both logic, sequencing, {{and control}} algorithms. A holistic {{view of this}} is seldom presented in teaching and papers. One reason is the separation of communities [...] automation groups typically come from the Programmable Logic Controller (PLC) world while control engineers primarily come from the Distributed Control System (DCS) world. Both logic, sequencing, and control algorithms are, however, well integrated in today's control systems since DCS systems now contain logic and sequencing and PLCs now contain control algorithms. This paper shows that both logic, sequencing, and control algorithms can be integrated seamlessly in a sequential control language. The particular application considered is a PID controller with a relay <b>autotuner.</b> The presented <b>autotuner</b> implementation yields good controller parameters and is freely available...|$|E
50|$|Multi-Front Attack on Multicore Programmingâ€”UPCRC Illinois {{is taking}} an {{integrated}} broad-based attack on parallelism {{at all levels}} of the system stack from applications down to hardware, using every weapon in the arsenal to enable performance, scalability, and programmability. This includes investigating disciplined parallel languages, metaprogramming and <b>autotuners,</b> and domain-specific environments; developing a powerful translation environment to exploit information from multiple sources at different times in the life of a program; developing an adaptive runtime to handle heterogeneity and automate resource management; developing new hardware mechanisms to enhance performance, scalability and programmability; and rethinking the customary division of labor among the layers of the system stack. Refactoring tools will help move existing code to new environments and formal methods-based techniques and tools will help ensure correctness.|$|R
40|$|Accelerator {{architectures}} {{specialize in}} executing SIMD (single instruction, multiple data) in lockstep. Because {{the majority of}} CUDA applications are parallelized loops, control flow information can provide an in-depth characterization of a kernel. CUDAflow is a tool that statically separates CUDA binaries into basic block regions and dynamically measures instruction and basic block frequencies. CUDAflow captures this information in a control flow graph (CFG) and performs subgraph matching across various kernel's CFGs to gain insights to an application's resource requirements, based on the shape and traversal of the graph, instruction operations executed and registers allocated, among other information. The utility of CUDAflow is demonstrated with SHOC and Rodinia application case studies {{on a variety of}} GPU architectures, revealing novel thread divergence characteristics that facilitates end users, <b>autotuners</b> and compilers in generating high performing code...|$|R
40|$|The {{paper is}} focused on <b>autotuners</b> tuning a class of PID like controllers. The {{autotuning}} principle combines relay feedback identification and an algebraic control design method for stable systems. The estimation of the stable controlled process is performed through asymmetrical limit cycle data. Then a second order transfer function with a double real pole is identified. The controller is derived through parameterized solutions of diophantine equations in the ring of proper and stable rational functions. Controller parameters can be simply tuned by a pole-placement problem as a desired multiple root of the characteristic closed loop equation. This scalar tuning parameter m(0) > 0 can be adjusted by various principles, e. g. by an equalization method. The proposed methodology is illustrated by examples and analysis which demonstrates the restriction of the aperiodicity of estimated transfer function...|$|R
40|$|Some of {{the design}} {{features}} of NASA hydrogen masers are discussed including the large hydrogen source bulb, the palladium purified, the state selector, the replaceable pumps, the small entrance stem, magnetic shields, the elongated storage bulb, the aluminum cavity, the electronics package, and the <b>autotuner.</b> Attention is also given to the reliability and operating life of these hydrogen atomic standards...|$|E
40|$|We present {{two recent}} {{parallel}} programming languages, PetaBricks and Julia, and demonstrate {{how we can}} use these two languages to re-examine classic numerical algorithms in new approaches for high-performance computing. PetaBricks is an implicitly parallel language that allows programmers to naturally express algorithmic choice explicitly at the language level. The PetaBricks compiler and <b>autotuner</b> is not only able to compose a complex program using fine-grained algorithmic choices but also find the right choice for many other parameters including data distribution, parallelization and blocking. We re-examine classic numerical algorithms with PetaBricks, and show that the PetaBricks <b>autotuner</b> produces nontrivial optimal algorithms {{that are difficult to}} reproduce otherwise. We also introduce the notion of variable accuracy algorithms, in which accuracy measures and requirements are supplied by the programmer and incorporated by the PetaBricks compiler and <b>autotuner</b> in the search of optimal algorithms. We demonstrate the accuracy/performance trade-offs by benchmark problems, and show how nontrivial algorithmic choice can change with different user accuracy requirements. Julia is a new high-level programming language that aims at achieving performance comparable to traditional compiled languages, while remaining easy to program and offering flexible parallelism without extensive effort. We describe a problem in large-scale terrain data analysis which motivates the use of Julia. We perform classical filtering techniques to study the terrain profiles and propose a measure based on Singular Value Decomposition (SVD) to quantify terrain surface roughness. We then give a brief tutorial of Julia and present results of our serial blocked SVD algorithm implementation in Julia. We also describe the parallel implementation of our SVD algorithm and discuss how flexible parallelism can be further explored using Julia. by Yee Lok Wong. Thesis (Ph. D.) [...] Massachusetts Institute of Technology, Dept. of Mathematics, 2011. Cataloged from PDF version of thesis. Includes bibliographical references (p. 163 - 170) ...|$|E
40|$|Abstract. Autotuning is an {{established}} technique for adjusting perfor-mance-critical parameters of applications to their specific run-time envi-ronment. In this paper, we investigate {{the potential of}} online autotuning for general purpose computation on GPUs. Our application-independent <b>autotuner</b> AtuneRT optimizes GPU-specific parameters such as block size and loop-unrolling degree. We also discuss the peculiarities of auto-tuning on GPUs. We demonstrate tuning potential using CUDA and by instrumenting the parallel algorithms library Thrust. We evaluate our online autotuning approach with various GPUs and sample applications...|$|E
40|$|Optimizing the {{performance}} of GPU kernels is challenging for both human programmers and code generators. For example, CUDA programmers must set thread and block parameters for a kernel, but might not have the intuition {{to make a good}} choice. Similarly, compilers can generate working code, but may miss tuning opportunities by not targeting GPU models or performing code transformations. Although empirical autotuning addresses some of these challenges, it requires extensive experimentation and search for optimal code variants. This research presents an approach for tuning CUDA kernels based on static analysis that considers fine-grained code structure and the specific GPU architecture features. Notably, our approach does not require any program runs in order to discover near-optimal parameter settings. We demonstrate the applicability of our approach in enabling code <b>autotuners</b> such as Orio to produce competitive code variants comparable with empirical-based methods, without the high cost of experiments...|$|R
40|$|Abstract: The {{accuracy}} of the Ziegler-Nichols tuning formula is reviewed {{in the context of}} PID and PI autotuning. For PID autotuning, it will be shown that, for excessive overshoot in the set-point response, set-point weighting can reduce the overshoot to specified values, and the original Ziegler-Nichols tuning formula can be retained. It will also be shown that set-point weighting is superior to the conventional solution of reducing large overshoot by gain detuning or set-point fil-tering. However, for excessive set-point under-shoot, the tuning formula will have to be modified. For PI autotuning, it will be shown that the Ziegler-Nichols tuning formula is inadequate and has to be completely revised. The application of set-point weighting and the modification of the tuning formula can be based simply on the know-ledge of the normalised gain or normalised dead-time of the process. These heuristic refinements, when incorporated, will give appreciable improve-ment in the performance of <b>autotuners.</b> ...|$|R
40|$|Electron Repulsion Integrals (ERIs) are {{a common}} {{bottleneck}} in ab initio computational chemistry. It is known that sorted/reordered execution of ERIs results in efficient SIMD/vector processing. This paper shows that reconfigurable computing and heterogeneous processor architectures can also benefit from a deliberate ordering of ERI tasks. However, realizing these benefits as net speedup requires a very rapid sorting mechanism. This paper presents two such mechanisms. Included {{in this study are}} analytical, simulation-based, and experimental benchmarking approaches to consider five use cases for ERI sorting, i. e. SIMD processing, reconfigurable computing, limited address spaces, instruction cache exploitation, and data cache exploitation. Specific consideration is given to existing cache-based processors, FPGAs, and the Cell Broadband Engine processor. It is proposed that the analyses conducted in this work should be built upon to aid the development of software <b>autotuners</b> which will produce efficient ab initio computational chemistry codes for a variety of computer architectures...|$|R
40|$|This paper {{presents}} a methodology for implementing fuzzy logic controllers {{based on a}} S 7 - 300 PLC using the programming language SCL(Structured Control Language) in STEP 7. We present {{the design of the}} fuzzy function, variable declarations, and the evaluation design of membership functions and rules of the fuzzy system. Since this scheme can be implemented more complex fuzzy models, such as adaptive or <b>Autotuner.</b> We present an application example for a discrete time simulated in the PLC using a PI fuzzy controller...|$|E
40|$|Abstract: The relay <b>autotuner</b> for PID {{control is}} based on the simple idea of {{investigating}} process dynamics by the oscillation obtained when the PID controller is replaced by a relay function. In this paper an asymmetric relay function is used, which provides an equation for the static gain of the process. A method to find the normalized time delay is proposed and the benefits of this is discussed. Ways to find low-order models from the experiment are described. Considerations of how to choose the relay parameters are made and some examples are given...|$|E
40|$|A new fast <b>autotuner</b> for the {{hydrogen}} maser was implemented. By modulating the cavity, a phase {{shift in the}} maser output signal is induced which {{is proportional to the}} cavity tuning error. The phase shift is detected and fed back to a varactor tuner to stabilize the cavity against long-term drifts. Also, a PIN-diode cavity modulator which gives no incidental frequency shift over a very wide range of operation was developed. Modulated at over 200 Hz, it allows variations in maser cavity frequency to be compensated with a loop gain greater than 1000. Compensation of incidental amplitude modulation of the output was demonstrated...|$|E
40|$|This paper {{presents}} a new simple principle for aperiodic tuning of SISO controllers used in autotuning schemes. <b>Autotuners</b> represent {{a combination of}} relay feedback identification and some control design method. In this contribution, models with up to three parameters are estimated {{by means of a}} single asymmetrical relay experiment. Then a stable low order transfer function is identified. Subsequently, the controller is analytically derived from general solutions of Diophantine equations in the ring of proper and stable rational functions RPS. This approach enables to define a scalar positive parameter through a poleplacement root of the characteristic closed loop equation. A first order identification yields a PI-like controllers while a second order identification generates PID ones. The analytical simple rule is derived for aperiodic control response and the scalar tuning parameter m> 0 is then tuned according to identified time constant of an approximated transfer function...|$|R
40|$|The paper {{presents}} a relay method for {{the identification of}} completely unknown processes for autotune purposes. It {{is an extension of}} a previous technique (ATV; Li, W.; et al. Ind. Eng. Chem. Res. 1991, 30, 1530), which assumed the delay of the process to be known. By means of a maximum of three relay tests, with additional delay, models with up to five parameters can be built. The proposed procedure does not present any convergence problem and is equivalent to the original one in terms of relative accuracy and duration of tests. The application of the identification procedure to a much wider set than in the original paper shows that the model obtained from the identification presents good accuracy in the high-frequency region, while some discrepancies of different nature may be present in the low frequency. When a suitable tuning method, which exploits this characteristic, is adopted, reasonably good closed-loop performance can be achieved for proportional-integral control in all cases. The low sensitivity to experimental errors and the simple implementation make the method interesting for application in industrial <b>autotuners.</b> The paper {{presents a}} relay method for the identification of completely unknown processes for autotune purposes. It is an extension of a previous technique, which assumed the delay of the process to be known. By means of a maximum of three relay tests, with additional delay, models with up to five parameters can be built. The proposed procedure does not present any convergence problem and is equivalent to the original one in terms of relative accuracy and duration of tests. The application of the identification procedure to a much wider set than in the original paper shows that the model obtained from the identification presents good accuracy in the high-frequency region, while some discrepancies of different nature may be present in the low frequency. When a suitable tuning method, which exploits this characteristic, is adopted, reasonably good closed-loop performance can be achieved for proportional-integral control in all cases. The low sensitivity to experimental errors and the simple implementation make the method interesting for application in industrial <b>autotuners...</b>|$|R
40|$|PetaBricks [4, 21, 7, 3, 5] is an implicitly {{parallel}} programming language which, {{through the process}} of autotuning, can automatically optimize programs for fast QoS-aware execution on any hardware. In this thesis we develop and evaluate two PetaBricks autotuners: INCREA and SiblingRivalry. INCREA, based on a novel bottom-up evolutionary algorithm, optimizes programs offline at compile time. SiblingRivalry improves on INCREA by optimizing online during a program's execution, dynamically adapting to changes in hardware and the operating system. Continuous adaptation is achieved through racing, where half of available resources are devoted to always-on learning. We evaluate INCREA and SiblingRivalry on a large number of real-world benchmarks, and show that our <b>autotuners</b> can significantly speed up PetaBricks programs with respect to many non-tuned and mis-tuned baselines. Our results indicate the need for a continuous learning loop that can optimize efficiently by exploiting online knowledge of a program's performance. The results leave open {{the question of how to}} solve the online optimization problem on all cores, i. e. without racing. by Maciej Pacula. Thesis (M. Eng.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2011. This electronic version was submitted by the student author. The certified thesis is available in the Institute Archives and Special Collections. Cataloged from student submitted PDF version of thesis. Includes bibliographical references (p. 116 - 122) ...|$|R
