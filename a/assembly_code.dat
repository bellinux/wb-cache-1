585|288|Public
5|$|Much of the <b>assembly</b> <b>code</b> {{that was}} {{allegedly}} copied {{has also been}} replaced as a natural progression in ReactOS development, with developers having reimplemented the functionality in C for portability reasons.|$|E
25|$|Some compilers {{translate}} high-level languages into assembly {{first before}} fully compiling, allowing the <b>assembly</b> <b>code</b> {{to be viewed}} for debugging and optimization purposes.|$|E
25|$|Much code written {{today is}} {{intended}} to run on as many machines as possible. As a consequence, programmers and compilers don't always {{take advantage of the}} more efficient instructions provided by newer CPUs or quirks of older models. Additionally, <b>assembly</b> <b>code</b> tuned for a particular processor without using such instructions might still be suboptimal on a different processor, expecting a different tuning of the code.|$|E
5000|$|The RapiDev tools suite {{delivers}} a fast, predictable path to optimized results, eliminating {{the complexities of}} <b>assembly</b> <b>coding</b> or manual cache management ...|$|R
5000|$|... 28 November 2014: Northern Ireland Assembly Committee on Standards and Privileges {{concludes that}} Mrs. Robinson {{committed}} a [...] "serious breach" [...] of the <b>Assembly's</b> <b>code</b> of conduct, but that Mr. Robinson did not.|$|R
50|$|<b>Assembly</b> Date <b>Code</b> Stamping - can be stamped anywhere...|$|R
25|$|In {{the final}} phase, the machine code is built by calling a small snippet of code, {{associated}} with each pattern, to generate the real instructions from the target's instruction set, using the final registers, offsets, and addresses chosen during the reload phase. The assembly-generation snippet may be just a string, in which case a simple string substitution of the registers, offsets, and/or addresses into the string is performed. The assembly-generation snippet {{may also be a}} short block of C code, performing some additional work, but ultimately returning a string containing the valid <b>assembly</b> <b>code.</b>|$|E
25|$|Some {{assemblers}} {{have incorporated}} structured programming elements to encode execution flow. The earliest {{example of this}} approach was in the Concept-14 macro set, originally proposed by Dr. Harlan Mills (March 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which extended the S/360 macro assembler with IF/ELSE/ENDIF and similar control flow blocks. This {{was a way to}} reduce or eliminate the use of GOTO operations in <b>assembly</b> <b>code,</b> one of the main factors causing spaghetti code in assembly language. This approach was widely accepted in the early '80s (the latter days of large-scale assembly language use).|$|E
500|$|An early {{difficulty}} was {{the implementation}} of texture mapping. Neurath had experimented unsuccessfully with the concept on an Apple II computer in the late 1980s, but {{he believed that the}} more powerful IBM PCs of the time might be able to process it. He contacted Lerner Research programmer Chris Green—an acquaintance from his past work with Ned Lerner—who created a working algorithm. Using the Space Rogue engine, Green's algorithm, <b>assembly</b> <b>code</b> from Lerner Research's Car and Driver and original programming, the Blue Sky team completed a prototype of Underworld after roughly a month of work. Neurath described the prototype as [...] "fast, smooth, and [...] true texture mapped walls, though the ceiling and floor were flat shaded and the corridors and rooms were all 10' [...] high—it looked a lot like Wolfenstein-3D in fact." [...] The team demonstrated it at the June 1990 Consumer Electronics Show (CES) and impressed Origin Systems. Origin producer Warren Spector later said, [...] "I remember Paul showing me that demo [...] at CES and being totally floored by it. None of us had ever seen anything like it." [...] The two companies reached a publishing agreement that summer, and Origin suggested that the game be reworked to fit into the Ultima universe. The team agreed, and the game was renamed Ultima Underworld. While Spector had hoped to produce the game, he was not assigned to the role; and he later said that he [...] "sort of watched [...] jealously from the sidelines." ...|$|E
40|$|Numerous {{experimental}} {{data suggest that}} simultaneously or sequentially activated assemblies of neurons {{play a key role}} in the storage and computational use of long-term memory in the brain. However, a model that elucidates how these memory traces could emerge through spike-timing-dependent plasticity (STDP) has beenmissing. We showhere that stimulus-specific assemblies of neurons emerge automatically throughSTDP in a simple corticalmicrocircuitmodel. Themodel thatwe consider is a randomly connectednetworkofwell knownmicrocircuit motifs: pyramidal cells with lateral inhibition. We show that the emergent <b>assembly</b> <b>codes</b> for repeatedly occurring spatiotemporal input patterns tend to fire in some loose, sequentialmanner that is reminiscent of experimentally observed stereotypical trajectories of network states. We also show that the emergent <b>assembly</b> <b>codes</b> add an important computational capability to standard models for online computations in cortical microcircuits: the capability to integrate information from long-termmemory with informa-tion from novel spike inputs...|$|R
50|$|An {{extensively}} documented <b>assembly</b> source <b>code</b> of Star Raiders, reverse-engineered {{from the}} ROM cartridge binary file, became available on GitHub in September 2015. The original, commented <b>assembly</b> source <b>code</b> of Star Raiders became available in October 2015 in the Internet Archive as scan. The community typed in the source code double checked in a github project, too.|$|R
5000|$|A similar {{example in}} X86 <b>assembly</b> language:loop: <b>Code</b> to loop here jmp loop ...|$|R
2500|$|There is a {{wide variety}} of {{representations}} possible and one can express a given Turing machine program as a sequence of machine tables (see more at finite-state machine, state transition table and control table), as flowcharts and drakon-charts (see more at state diagram), or as a form of rudimentary machine code or <b>assembly</b> <b>code</b> called [...] "sets of quadruples" [...] (see more at Turing machine).|$|E
2500|$|... is ARM's first {{open-source}} project (from its inception). The Ne10 {{library is}} a set of common, useful functions written in both NEON and C (for compatibility). The library was created to allow developers to use NEON optimisations without learning NEON, but it also serves as a set of highly optimised NEON intrinsic and <b>assembly</b> <b>code</b> examples for common DSP, arithmetic, and image processing routines. The source code is available on GitHub ...|$|E
2500|$|In diff's early years, common uses {{included}} comparing {{changes in}} the source of software code and markup for technical documents, verifying program debugging output, comparing filesystem listings and analyzing computer <b>assembly</b> <b>code.</b> [...] The output targeted for ed was motivated to provide compression for a sequence of modifications made to a file. [...] The Source Code Control System (SCCS) {{and its ability to}} archive revisions emerged in the late 1970s as a consequence of storing edit scripts from diff.|$|E
5000|$|Assembly window - the <b>assembly</b> (machine <b>code)</b> was displayed, {{allowing}} for single-stepping through functions.|$|R
5000|$|GNU {{lightning}} [...] - [...] A library {{that generates}} <b>assembly</b> language <b>code</b> at run-time ...|$|R
5000|$|The {{embedding}} of <b>assembly</b> language <b>code</b> {{is usually}} done {{for one of}} three reasons: ...|$|R
2500|$|X# is a {{low-level}} programming language {{developed for the}} x86 processor architecture {{as a part of}} Cosmos operating system to make operating system development easier. X# is designed to bring some of C-like language syntax to assembly language. At the beginning, X# was an aid for debugging services of Cosmos. The X# compiler is an open source console interface program with an atypical architecture. It parses lines of code into tokens and compares them with patterns. Finally, matched X# code patterns are translated to intel syntax x86 assembly, usually for the NASM compiler. In first versions, X# operation was mostly 1:1 with <b>assembly</b> <b>code,</b> but hasn't been the reason why the X# compiler was written.|$|E
5000|$|<b>Assembly</b> <b>code</b> {{files for}} TI's MSP430 series of microcontrollers.|$|E
50|$|Output {{productions}} {{produced a}} form of <b>assembly</b> <b>code</b> directly from a syntax rule.|$|E
5000|$|Highly {{optimized}} <b>assembly</b> language <b>code</b> for {{the most}} important inner loops, specialized for different processors.|$|R
40|$|International audienceNeural network-based {{classifiers}} usually encode {{the class}} labels of input data via a completely disjoint code, i. e. a binary vector {{with only one}} bit associated with each category. We use coding theory to propose <b>assembly</b> <b>codes</b> where each element is associated with several classes, making for better target vectors. These codes emulate the combination of several classifiers, which is a well-known method to improve decision accuracy. Our experiments on data-sets such as MNIST with a multi-layer neural network show that <b>assembly</b> output <b>codes,</b> which are characterized by a higher minimum Hamming distance, result in better classification performance. These codes are also well suited {{to the use of}} clustered clique-based networks in category representation...|$|R
50|$|Author Bob Pollin {{released}} the <b>assembly</b> source <b>code</b> of Blue Max in 2016 to the game's community.|$|R
5000|$|Note {{that the}} above <b>assembly</b> <b>code</b> is shorter because [...] is loaded once.|$|E
50|$|The code may be source code, <b>assembly</b> <b>code</b> or {{some other}} {{sequence}} of instructions.|$|E
50|$|This {{is called}} Gosper's hack;corresponding <b>assembly</b> <b>code</b> was {{described}} as item 175 in HAKMEM.|$|E
50|$|Currently, experix is only {{available}} for Linux and, due to <b>assembly</b> language <b>code,</b> {{only on the}} x86 architecture.|$|R
50|$|Notable for {{containing}} PDP-10 <b>assembly</b> language <b>code</b> nearly 22 {{years after}} the manufacturer ceased production of the PDP-10.|$|R
50|$|The first C compiler, {{written by}} Dennis Ritchie, used a {{recursive}} descent parser, incorporated specific {{knowledge about the}} PDP-11, and relied on an optional machine-specific optimizer to improve the <b>assembly</b> language <b>code</b> it generated. In contrast, Johnson's pccm {{was based on a}} yacc-generated parser and used a more general target machine model. Both compilers produced target-specific <b>assembly</b> language <b>code</b> which they then assembled to produce linkable object modules.|$|R
5000|$|High level code {{is easier}} to learn, program, read, and {{maintain}} than <b>assembly</b> <b>code.</b>|$|E
5000|$|Source view: Sampling {{results are}} {{displayed}} {{line by line}} on the source / <b>assembly</b> <b>code.</b>|$|E
5000|$|... x264 has SIMD <b>assembly</b> <b>code</b> {{acceleration}} on x86, PowerPC (using AltiVec), and ARMv7 (using NEON) platforms.|$|E
50|$|In 1999 a game enthusiast {{started the}} Tempest Code Project to {{reconstruct}} and document an <b>assembly</b> source <b>code</b> version.|$|R
50|$|With the {{introduction}} of anti-sidetone circuits in 1930, Western Electric began assigning <b>assembly</b> <b>codes</b> to telephones based on the electrical configuration. Until then, telephones were primarily referred to by the part numbers used to construct them. The B1 and the D1 type base without anti-sidetone circuitry became the 102 type hand telephone, while the same external components with a new induction coil and wiring for anti-sidetone operation {{became known as the}} 202-type hand telephone.|$|R
40|$|International audienceProcedures {{developed}} to allow generation of radio nuclide inventory data depend on fluxes and cross sections calculated by <b>assembly</b> spectrum <b>codes.</b> Their accuracy {{depends on the}} <b>assembly</b> spectrum <b>code</b> capacity to generate correct prediction data; otherwise corrections {{have to be made}} to eliminate the residual calculation/experiment discrepancies. In this work we present the effect of taking into account the temperature and boron history on predicted isotopic compositions (uranium and plutonium) of a 40 GWd/t UO 2 fuel...|$|R
