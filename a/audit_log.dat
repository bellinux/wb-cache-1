79|224|Public
5|$|The {{project has}} also ported the NSA's FLASK/TE {{implementation}} from SELinux to FreeBSD. Other work includes {{the development of}} OpenBSM, an open source implementation of Sun's Basic Security Module (BSM) API and <b>audit</b> <b>log</b> file format, which supports an extensive security audit system. This was shipped as part of FreeBSD 6.2. Other infrastructure work in FreeBSD performed {{as part of the}} TrustedBSD Project has included GEOM and OpenPAM.|$|E
25|$|In {{addition}} to the aforementioned three components, the black box <b>audit</b> <b>log</b> file {{is also an important}} part of continuous auditing. This file can be viewed {{as an extension of the}} existing practice of documenting audit activities in manual or automated work papers. A black box log file is a read-only, third-party controlled record of the actions of auditors. The objective of black box logging is to protect a continuous auditing system against auditor and management manipulations.|$|E
5000|$|Supports MySQL Enterprise {{features}} (<b>Audit</b> <b>Log,</b> Firewall, and Enterprise Backup) ...|$|E
40|$|Most RIS and PACS systems include {{extensive}} {{auditing capabilities}} {{as part of}} their security model, but inspecting those <b>audit</b> <b>logs</b> to obtain useful information can be a daunting task. Manual analysis of audit trails, though cumbersome, is often resorted to because of the difficulty to construct queries to extract complex information from the <b>audit</b> <b>logs.</b> The approach proposed by the authors uses standard off-the-shelf multidimensional analysis software tools to assist the PACS/RIS administrator and/or security officer in analyzing those <b>audit</b> <b>logs</b> to identify and scrutinize suspicious events. Large amounts of data can be quickly reviewed and graphical analysis tools help explore system utilization. While additional efforts are required to fully satisfy the demands of the ever-increasing security and confidentiality pressures, multidimensional analysis tools are a practical step toward actually using the information that is already being captured in the systems’ <b>audit</b> <b>logs.</b> In addition, once the work is performed to capture and manipulate the <b>audit</b> <b>logs</b> into a viable format for the multidimensional analysis tool, it is relatively easy to extend the system to incorporate other pertinent data, thereby enabling the ongoing analysis of other aspects of the department’s workflow...|$|R
40|$|The voting <b>audit</b> <b>logs</b> {{produced}} by electronic voting systems contain data {{that could be}} useful for uncovering procedural errors and election anomalies, but they are currently unwieldy and difficult for election officials to use in post-election audits. In this work, we develop new methods to analyze these <b>audit</b> <b>logs</b> {{for the detection of}} both procedural errors and system deficiencies. Our methods can be used to detect votes that {{were not included in the}} final tally, machines that may have experienced hardware problems during the election, and polling locations that exhibited long lines. We tested our analyses on data from the South Carolina 2010 elections and were able to uncover, solely through the analysis of <b>audit</b> <b>logs,</b> a variety of problems, including vote miscounts. We created a public web application that applies these methods to uploaded <b>audit</b> <b>logs</b> and generates useful feedback on any detected issues. ...|$|R
5000|$|It should handle {{unexpected}} {{errors and}} continue processing {{and maintain the}} appropriate <b>audit</b> <b>logs</b> ...|$|R
5000|$|... #Caption: An iVotronic [...] with a Real-Time <b>Audit</b> <b>Log</b> printer, {{a type of}} [...]|$|E
5000|$|It {{should have}} an {{extensive}} <b>audit</b> <b>log</b> to track files and records status - received, processing, duplicate, loading, error etc.|$|E
50|$|The Snare Server is an appliance, or software-only solution, that {{provides}} a variety of analysis tools and to facilitate the collection, analysis, reporting, and archival of <b>audit</b> <b>log</b> data.|$|E
5000|$|Transaction journaling, redo logs, access logs, error <b>logs</b> and <b>audit</b> <b>logs</b> enabled {{by default}} ...|$|R
40|$|Secure {{perimeter}} schemes (e. g. DRM) and tracing traitor schemes (e. g. watermarking, <b>audit</b> <b>logging)</b> {{strive to}} mitigate the problems of content escaping {{the control of the}} rights holder. Secure <b>audit</b> <b>logging</b> records the user's actions on content and enables detection of some forms of tampering with the logs. We implement Schneier and Kelsey's secure <b>audit</b> <b>logging</b> protocol [1], strengthening the protocol by using tamper-resistant hardware (an iButton) in two ways: Firstly our implementation of the protocol works offine as well as online. Secondly, we use unforgeable time stamps to increase the possibilities of fraud detection. We provide a performance assessment of our implementation to show under which circumstances the protocol is practical to use...|$|R
40|$|We {{design an}} {{encryption}} scheme called Multi-dimensional Range Query over Encrypted Data (MRQED), {{to address the}} privacy concerns related to the sharing of network <b>audit</b> <b>logs</b> and various other applications. Our scheme allows a network gateway to encrypt summaries of network flows before submitting them to an untrusted repository. When network intrusions are suspected, an authority can release a key to an auditor, allowing the auditor to decrypt flows whose attributes (e. g., source and destination addresses, port numbers, etc.) fall within specific ranges. However, the privacy of all irrelevant flows are still preserved. We formally define the security for MRQED and prove the security of our construction under the decision bilinear Diffie-Hellman and decision linear assumptions in certain bilinear groups. We study the practical performance of our construction {{in the context of}} network <b>audit</b> <b>logs.</b> Apart from network <b>audit</b> <b>logs,</b> our scheme also has interesting applications for financial <b>audit</b> <b>logs,</b> medical privacy, untrusted remote storage, etc. In particular, we show that MRQED implies a solution to its dual problem, which enables investors to trade stocks through a broker in a privacypreserving manner. ...|$|R
50|$|The Snare {{agents have}} been {{designed}} to collect <b>audit</b> <b>log</b> data from a host system, and push the data as quickly as possible, to a central server (or servers), for archive, analysis, and reporting.|$|E
50|$|In 2009 OpenDNS {{launched}} OpenDNS Enterprise, a {{first foray}} into enterprise-grade network security. OpenDNS Enterprise included the ability to share management of the product across a team, along with an <b>audit</b> <b>log,</b> expanded malware protection, daily network statistic reports, and a custom block page URL.|$|E
50|$|Account admins can set custom company settings, receive alerts when an {{employee}} has clocked in late or is approaching overtime, and review/approve employee time cards from any location and any device. All time, location, and job data is stored securely in the cloud, allowing users to export that data to their preferred accounting or payroll program or reference it as needed. TSheets maintains an <b>audit</b> <b>log</b> {{of each and}} every action.|$|E
40|$|This paper {{describes}} {{the design and}} implementation of the Visual Audit Browser (VAB) Toolkit, which provides a visual interface for browsing Sun BSM <b>audit</b> <b>logs.</b> Applications of the VAB Toolkit include investigating security violations and more routine system admincistration tasks. The low level of abstraction in the logs, the large size of the logs, and the lack of association indication in the logs are some of the difficulties in manually analyzing <b>audit</b> <b>logs,</b> particularly system-level <b>audit</b> <b>logs.</b> The tools employ several audit visualization techniques including graphing, replay of audit events (movies), hypertext organization, and slicing. As a result of highlighting relevant associations between objects and events, the VAB Toolkit allows easier access to related data than textual browsing. This allows the user to mor...|$|R
5000|$|Detailed <b>audit</b> <b>logging</b> and log rolling. Syslog or DB logging for a {{secondary}} server with replicated <b>log</b> data (<b>audit</b> purposes) ...|$|R
5000|$|Email Delivery {{contains}} certain {{features such}} as template design, template modifications, list management, distribution, reply management, analytics, and <b>audit</b> <b>logs.</b>|$|R
50|$|An {{audit trail}} (also called <b>audit</b> <b>log)</b> is a security-relevant chronological record, set of records, and/or {{destination}} and source of records that provide documentary {{evidence of the}} sequence of activities that have affected at any time a specific operation, procedure, or event. Audit records typically result from activities such as financial transactions, scientific research and health care data transactions, or communications by individual people, systems, accounts, or other entities.|$|E
50|$|The {{project has}} also ported the NSA's FLASK/TE {{implementation}} from SELinux to FreeBSD. Other work includes {{the development of}} OpenBSM, an open source implementation of Sun's Basic Security Module (BSM) API and <b>audit</b> <b>log</b> file format, which supports an extensive security audit system. This was shipped as part of FreeBSD 6.2. Other infrastructure work in FreeBSD performed {{as part of the}} TrustedBSD Project has included GEOM and OpenPAM.|$|E
50|$|The Perforce Helix server stores file {{content in}} a master {{repository}} that, when properly installed, is inaccessible to users.User access to files {{is controlled by}} one or more Perforce superusers. A range of file access protection levels can be granted.Protections can be set for repository file paths, users, groups, and IP address subnets. The server can maintain an <b>audit</b> <b>log</b> of client access events for Sarbanes-Oxley Act (SOX) and other compliance requirements.|$|E
50|$|Software tools {{can be used}} to {{manipulate}} and analyse data. These tools also provide <b>audit</b> <b>logging</b> capabilities which provide documented proof of what tasks or analysis a forensic examiner performed on the database.|$|R
40|$|<b>Audit</b> <b>logs</b> are an {{important}} tool for post-election investigations, {{in the event of}} an election dispute or problem. We propose a new approach to logging that is designed to provide a record of all interactions between each voter and the voting machine. Our <b>audit</b> <b>logs</b> provide a comprehensive, trustworthy, replayable record of essentially everything the voter saw and did in the voting booth, providing investigators a tool for reconstructing voter intent and diagnosing election problems. We show how our design preserves voter anonymity and protects against vote-buying and coercion. We implement a prototype logging subsystem, built on the Pvote voting platform, and demonstrate that the approach is feasible. ...|$|R
40|$|Abstract. Due to the {{forensic}} value of <b>audit</b> <b>logs,</b> {{it is vital}} to provide compromise resiliency and append-only properties in a logging system to prevent active attackers. Unfortunately, existing symmetric secure logging schemes are not publicly verifiable and cannot address applications that require public auditing (e. g., public financial auditing), besides being vulnerable to certain attacks and dependent on continuous trusted server support. Moreover, Public Key Cryptography (PKC) -based secure logging schemes require Expensive Operations (ExpOps) that are costly for both loggers and verifiers, and thus are impractical for computation-intensive environments. In this paper, we propose a new class of secure <b>audit</b> <b>logging</b> scheme called Log Forward-secure and Append-only Signature (LogFAS). LogFAS achieves the most desirable properties of both symmetric and PKC-based schemes. LogFAS can produce publicly verifiable forward-secure and append-only signatures without requiring any online trusted server support or time factor. Most notably, Log-FAS is the only PKC-based secure <b>audit</b> <b>logging</b> scheme that achieves the high verifier computational and storage efficiency. That is, LogFAS can verify L log entries with always a small-constant number of ExpOps regardless of the value of L. Moreover, each verifier stores only a small and constant-size public key regardless of the number of log entries to be verified or the number of loggers in the system. In addition, a LogFAS variation allows fine-grained verification of any subset of log entries and fast detection of corrupted log entries. All these properties make LogFAS an ideal scheme for secure <b>audit</b> <b>logging</b> in computationintensive applications...|$|R
50|$|In {{addition}} to the aforementioned three components, the black box <b>audit</b> <b>log</b> file {{is also an important}} part of continuous auditing. This file can be viewed {{as an extension of the}} existing practice of documenting audit activities in manual or automated work papers. A black box log file is a read-only, third-party controlled record of the actions of auditors. The objective of black box logging is to protect a continuous auditing system against auditor and management manipulations.|$|E
50|$|The {{fundamental}} problem with such free-form event records {{is that each}} application developer individually determines what information {{should be included in}} an audit event record, and the overall format in which that record should be presented to the <b>audit</b> <b>log.</b> This variation in format among thousands of instrumented applications makes the job of parsing audit event records by analysis tools (such as the Novell Sentinel product, for example) difficult and error-prone. Such domain and application specific parsing code included in analysis tools is also difficult to maintain, as changes to event formats inevitably work their way into newer versions of the applications over time.|$|E
50|$|Snare (sometimes {{also written}} as SNARE, {{an acronym for}} System iNtrusion Analysis and Reporting Environment) is a {{collection}} of software tools that collect <b>audit</b> <b>log</b> data from a variety of operating systems and applications to facilitate centralised log analysis. Enterprise Agents are available for Linux, OSX, Windows, Solaris, Microsoft SQL Server, a variety of browsers, and more. Snare Enterprise Epilog for Windows facilitates the central collection and processing of Windows text-based log files such as ISA/IIS. Snare Enterprise Epilog for Unix provides a method to collect any text based log files on the Linux and Solaris operating systems. Opensource Agents are available for Irix and AIX.|$|E
5000|$|Built-in design privacy protections, such as user authentication, “investigative {{purposes}} only” disclosures upon log-in, articulated investigative {{reason for}} accessing the system, clearly stated “for official law enforcement use only” warning before system access, and <b>audit</b> <b>logs</b> for capturing search transactions.|$|R
40|$|As {{antivirus}} {{and network}} intrusion detection systems have increasingly proven insufficient to detect advanced threats, large security operations centers {{have moved to}} deploy endpoint-based sensors that provide deeper visibility into low-level events across their enterprises. Unfortunately, for many organizations in government and industry, the installation, maintenance, and resource requirements of these newer solutions pose barriers to adoption and are perceived as risks to organizations' missions. To mitigate this problem we investigated the utility of agentless detection of malicious endpoint behavior, using only the standard build-in Windows <b>audit</b> <b>logging</b> facility as our signal. We found that Windows <b>audit</b> <b>logs,</b> while emitting manageable sized data streams on the endpoints, provide enough information to allow robust detection of malicious behavior. <b>Audit</b> <b>logs</b> provide an effective, low-cost alternative to deploying additional expensive agent-based breach detection systems in many government and industrial settings, {{and can be used}} to detect, in our tests, 83 % percent of malware samples with a 0. 1 % false positive rate. They can also supplement already existing host signature-based antivirus solutions, like Kaspersky, Symantec, and McAfee, detecting, in our testing environment, 78 % of malware missed by those antivirus systems...|$|R
40|$|The problem {{addressed}} by {{this work was}} to reduce the time taken to train system administrators in detecting computer security problems in system <b>audit</b> <b>logs.</b> The approach taken {{was to develop a}} simulator which generates realistic <b>audit</b> <b>logs</b> that illustrate both non-malicious and malicious behavior. These logs can be used to train system administrators. The simulator was written in Prolog and used means-ends analysis to simulate seventeen combinations of general system functions which includes the following: logins, editing, file deletions, file copying, changing file access rights, obtaining superuser privileges, sending mail and logouts. The simulation manipulates virtual system files analogously to what real users do. This creates realistic <b>audit</b> file <b>logs</b> that include a mixture of normal and malicious activity. More impressive is that the entire source program requires only 19. 1 kbytes of space, making it small enough to be compatible with a personal computer. NANAU. S. Naval Reserve (U. S. N. R.) author...|$|R
40|$|Audit logs are {{considered}} good practice for business systems, and {{are required by}} federal regulations for secure systems, drug approval data, medical information disclosure, financial records, and electronic voting. Given {{the central role of}} audit logs, it is critical that they are correct and inalterable. It is not su#- cient to say, "our data is correct, because we store all interactions in a separate <b>audit</b> <b>log.</b> " The integrity of the <b>audit</b> <b>log</b> itself must also be guaranteed. This paper proposes mechanisms within a database management system (DBMS), based on cryptographically strong one-way hash functions, that prevent an intruder, including an auditor or an employee or even an unknown bug within the DBMS itself, from silently corrupting the <b>audit</b> <b>log.</b> We propose that the DBMS store additional information in the database to enable a separate <b>audit</b> <b>log</b> validator to examine the database along with this extra information and state conclusively whether the <b>audit</b> <b>log</b> has been compromised...|$|E
40|$|Tamperproof {{audit logs}} are an {{essential}} tool for computer forensics. Building {{on the work}} in [SK 98,SK 99], we show {{how to build a}} tamperproof <b>audit</b> <b>log</b> where the amount of information exchange required to verify the entries in the <b>audit</b> <b>log</b> is greatly reduced. By making audit-log veri cation more ecient, this system is more suitable for implementation in low-bandwidth environments...|$|E
40|$|Special {{care should}} be taken to verify the {{integrity}} and to ensure that sensitive data is adequately protected. One of the key activities for data loss prevention is anaudit. And {{in order to be able}} to audit a system, it is important to have reliable records of its activities. Systems that store critical data, whether financial or productive, must have features such as <b>audit</b> <b>log,</b> also called audit trail, which records all activities on critical data. This allows to identify harmful actions that can be internal or external, intentionally or unintentionally caused. Therefore, this paper presents major studies in security audit trail (<b>audit</b> <b>log),</b> especially records of logs, and it presents what is available in terms of commercial tools and what they offer...|$|E
40|$|Logging is a {{well-established}} technique to record dynamic information during system execution. It has two important capabilities: (1) investigating cyber attacks {{to identify the}} root cause of an attack, and to determine the ramification of an attack for recovery from it; and (2) reproducing software failures to understand and fix them. However, there are many long-running processes such as server programs and user interactive (UI) programs that receive a large volume of inputs and produce many outputs, where each output may be causally related to all the preceding inputs, making attack investigation almost infeasible. Another key challenge to applying a logging technique in attack investigation is the size of the <b>logs.</b> <b>Audit</b> <b>logs</b> generated by the traditional logging techniques can grow at a rate of gigabytes per day, incurring excessive storage and processing overhead. Logging and replaying long-running programs can be problematic because they may produce large replay logs that entail long replay time. The developer may have to wait for hours or days before a failure is reproduced. ^ In this dissertation, we present selective logging techniques for (1) highly accurate forensic analysis, (2) a space efficient <b>audit</b> <b>logging</b> system, and (3) reducible execution replay. We make three contributions. Our first contribution is a highly accurate attack provenance tracing technique enabled by a selective fine-grained logging method, called BEEP. It automatically partitions a long-running process into multiple autonomous units that handle independent input data. We show that BEEP effectively captures the minimal causal graph for every attack case we have studied. Our second contribution is a garbage collection enabled <b>audit</b> <b>logging</b> system, called LogGC. It automatically removes unreachable objects in <b>audit</b> <b>logs</b> that record history {{over a long period of}} time. With LogGC, space consumption of <b>audit</b> <b>logs</b> can be reduced by an order of magnitude without affecting the accuracy of forensic analysis. Our third contribution is a compiler-based technique that generates a reducible replay log. The technique divides an execution into units and instruments programs to collect minimal additional information into the replay log, and then reduction can be achieved through analyzing just the log. ...|$|R
25|$|Chakra Max is a {{data-centric}} audit {{and protection}} (DCAP) firewall for relational database activity monitoring, auditing and protection (DAM/DAP). Chakra Max uses defined policies to monitor, block, and control login access and SQL activity, perform dynamic data masking, and create secure, granular, query- and report-ready <b>audit</b> <b>logs.</b>|$|R
50|$|IBM Tivoli Storage Productivity Center is {{designed}} to provide the foundation for storage service level management by offering storage system and SAN performance and availability management. This includes connectivity reporting between file systems and physical disk as well as SAN and disk subsystem failure and <b>audit</b> <b>logging.</b>|$|R
