594|10000|Public
25|$|After a person, {{program or}} {{computer}} has successfully been identified and authenticated {{then it must}} be determined what informational resources they are permitted to access and what actions they {{will be allowed to}} perform (run, view, create, delete, or change). This is called authorization. Authorization to access information and other computing services begins with administrative policies and procedures. The policies prescribe what information and computing services can be accessed, by whom, and under what conditions. The access control mechanisms are then configured to enforce these policies. Different computing systems are equipped with different kinds of access control mechanisms—some may even offer a choice of different access control mechanisms. The <b>access</b> <b>control</b> <b>mechanism</b> a system offers will be based upon one of three approaches to access control or it may be derived from a combination of the three approaches.|$|E
5000|$|The user authenticates to an <b>access</b> <b>control</b> <b>mechanism</b> {{external}} to Shibboleth.|$|E
5000|$|The basic <b>access</b> <b>control</b> <b>mechanism</b> {{has been}} criticized as {{offering}} too little protection from unauthorized interception. Researchers claim [...] that because there are only limited numbers of passport issued, many theoretically possible passport numbers {{will not be in}} use in practice. The limited range of human age ranges further reduce the space of possibilities.|$|E
40|$|Traditionally, <b>access</b> <b>control</b> <b>mechanisms</b> {{have been}} static in nature, {{requiring}} explicit intervention {{in order to}} change their behavior. However, since security requirements {{can be expected to}} change frequently and rapidly in ubiquitous computing environments, <b>access</b> <b>control</b> <b>mechanisms</b> that can react to the context in which they are applied are desirable. With this in mind, we have created <b>ACCESS</b> (<b>Access</b> <b>Controls</b> for Cooperatively Enabled Smart Spaces); a framework for enabling dynamic, role-based and context-aware <b>access</b> <b>control</b> <b>mechanisms</b> in ubiquitous computing applications...|$|R
40|$|Author(s) key words: <b>Access</b> <b>control</b> <b>mechanisms,</b> {{statistical}} <b>access</b> <b>control,</b> value-dependent <b>access</b> <b>control,</b> concurrency <b>control</b> <b>mechanisms,</b> monolithic {{consistency of}} a partitioned database, permutable requests, compatible requests, incompletely-specified transactions, simulation models, {{a measure of}} performance, performance under various conditionsPrepared for: Naval Postgraduate School[URL]...|$|R
40|$|<b>Access</b> <b>control</b> <b>mechanisms</b> are {{a widely}} adopted {{technology}} for information security. Since access decisions (i. e., permit or deny) on requests {{are dependent on}} <b>access</b> <b>control</b> policies, ensuring the correct modeling and implementation of <b>access</b> <b>control</b> policies is crucial for adopting <b>access</b> <b>control</b> <b>mechanisms.</b> To address this issue, we develop a tool, called ACPT (<b>Access</b> <b>Control</b> Policy Testing), that helps to model and implement policies correctly during policy modeling, implementation, and verification. ...|$|R
50|$|The SMTP-AUTH {{extension}} {{provides an}} <b>access</b> <b>control</b> <b>mechanism.</b> It {{consists of an}} authentication step through which the client effectively logs into the mail server {{during the process of}} sending mail. Servers that support SMTP-AUTH can usually be configured to require clients to use this extension, ensuring the true identity of the sender is known. The SMTP-AUTH extension is defined in RFC 4954.|$|E
5000|$|The {{previously}} 9-digit, all-numeric, sequentially assigned {{serial number}} {{was replaced with}} a new alphanumeric pseudorandomly assigned higher-entropy serial number, to increase the entropy of the serial number from the previous 35 digits to 45 bits. This improves the cryptographic key strength of the Basic <b>Access</b> <b>Control</b> <b>mechanism</b> of the RFID chip by 10 bits, which makes a brute force attack approximately 1000 times more expensive.|$|E
5000|$|A 2012 survey paper stated, [...] "S3QL {{supports}} a permission control mechanism that {{allows users to}} specify contextual minutiae such as provenance and access control on the semantic level. The effectiveness of S3QL was illustrated through use cases of IB, such as genomic characterization of cancer and molecular epidemiology of infectious diseases. We expect S3QL or its variations to be accepted as the standard <b>access</b> <b>control</b> <b>mechanism</b> by the SW community".|$|E
25|$|Git {{does not}} provide <b>access</b> <b>control</b> <b>mechanisms,</b> but was {{designed}} for operation with other tools that specialize in <b>access</b> <b>control.</b>|$|R
40|$|In {{this paper}} we analyze the {{requirements}} <b>access</b> <b>control</b> <b>mechanisms</b> must fulfill {{in the context}} of group communication and define a framework for supporting fine-grained <b>access</b> <b>control</b> in client-server group communication systems. Our framework combines rolebased <b>access</b> <b>control</b> <b>mechanisms</b> with environment parameters (time, IP address, etc.) to provide support {{for a wide range of}} applications with very different requirements. While the <b>access</b> <b>control</b> policy is defined by the application, its efficient enforcement is performed by the group communication system. ...|$|R
40|$|Abstract To date, current <b>access</b> <b>control</b> <b>mechanisms</b> {{have been}} shown to be {{insufficient}} for preventing intrusive activity in computer systems. The frequent media reports, and now our own research, have shown the widespread proliferation of intrusive behavior on the world's computer systems. With the recognition of the failure of <b>access</b> <b>control</b> <b>mechanisms,</b> a number of institutions have begun to research methods to detect the intrusive activity...|$|R
50|$|In computing, a {{blacklist}} or block list {{is a basic}} <b>access</b> <b>control</b> <b>mechanism</b> {{that allows}} through all elements (email addresses, users, passwords, URLs, IP addresses, domain names, file hashes, etc.), except those explicitly mentioned. Those items on the list are denied access. The opposite is a whitelist, which means only items on the list are let through whatever gate is being used. A greylist contains items that are temporarily blocked (or temporarily allowed) until an additional step is performed.|$|E
50|$|The German {{passport}} serial-number format (previously 10-digit, all-numeric, sequentially assigned) {{was modified}} on 1 November 2007, {{in response to}} concerns about the low entropy of BAC session keys. The new 10-character serial number is alphanumeric and generated {{with the help of}} a specially-designed block cipher, to avoid a recognizable relationship with the expiry date and increase entropy. In addition, a public-key based extended <b>access</b> <b>control</b> <b>mechanism</b> is now used to protect any information in the RFID chip that goes beyond the minimum ICAO requirements, in particular fingerprint images.|$|E
5000|$|Sun's Trusted Solaris uses a {{mandatory}} and system-enforced <b>access</b> <b>control</b> <b>mechanism</b> (MAC), where clearances and labels {{are used to}} enforce a security policy. However note that the capability to manage labels does not imply the kernel strength to operate in Multi-Level Security mode. Access to the labels and control mechanisms are not robustly protected from corruption in protected domain maintained by a kernel. The applications a user runs are combined with the security label at which the user works in the session. Access to information, programs and devices are only weakly controlled.|$|E
40|$|Traditionally, <b>access</b> <b>control</b> <b>mechanisms</b> {{have been}} static in nature, {{requiring}} explicit intervention {{in order to}} change their behavior. However, since security requirements {{can be expected to}} change frequently and rapidly in ubiquitous computing environments, <b>access</b> <b>control</b> <b>mechanisms</b> that can react to the context in which they are applied are desirable. With this in mind, we have created <b>ACCESS</b> (<b>Access</b> <b>Controls</b> for Cooperatively Enabled Smart Spaces); a framework for enabling dynamic, role-based and context-aware <b>access</b> <b>control</b> <b>mechanisms</b> in ubiquitous computing applications. by Buddhika Kottahachchi. Thesis (M. Eng.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2005. This electronic version was submitted by the student author. The certified thesis is available in the Institute Archives and Special Collections. Includes bibliographical references (leaves 75 - 79) ...|$|R
40|$|The Internet enables global {{sharing of}} data across {{organizational}} boundaries. Distributed file systems facilitate data {{sharing in the}} form of remote file access. However, traditional <b>access</b> <b>control</b> <b>mechanisms</b> used in distributed file systems are intended for machines under common administrative control, and rely on maintaining a centralized database of user identities. They fail to scale to a large user base distributed across multiple organizations. We provide a survey of decentralized <b>access</b> <b>control</b> <b>mechanisms</b> in distributed file systems intended for large scale, in both administrative domains and users. We identify essential properties of such <b>access</b> <b>control</b> <b>mechanisms.</b> We analyze both popular production and experimental distributed file systems in the context of our survey...|$|R
40|$|Location-Based Social Network Systems (LBSNSs) are {{becoming}} increasingly popular. In LBSNSs, users can check in at various places, connect with their friends and share their check-ins (including users' locations and timestamps) with their friends and even the public. However, most LBSNSs pay on more attention to attracting users to join and actively use their systems rather than protecting users' privacy preferences for their check-ins. In this paper, we analyze <b>access</b> <b>control</b> <b>mechanisms</b> for users' check-ins {{in four of the}} most popular existing LBSNSs: Facebook Places, Foursquare, Google Latitude and Yelp. We first generalize a model for users' check-ins based on these LBSNSs. Considering users' check-ins as the protection objects, we then generalize an <b>access</b> <b>control</b> policy model for them. We use these two models as criteria to analyze these <b>access</b> <b>control</b> <b>mechanisms</b> for users' check-ins and compare them in these LBSNSs. Additionally, we identify the common vulnerabilities in these <b>access</b> <b>control</b> <b>mechanisms.</b> Understanding the <b>access</b> <b>control</b> <b>mechanisms</b> for users' check-ins and their limitations can help users who care more about their privacy to choose a LBSNS where their location privacy is better protected. © 2012 IEEE...|$|R
5000|$|Smack (full name: Simplified Mandatory Access Control Kernel) is a Linux kernel {{security}} module {{that protects}} data and process interaction from malicious manipulation using {{a set of}} custom mandatory access control (MAC) rules, with simplicity as its main design goal. It has been officially merged since the Linux 2.6.25 release, [...] it was the main <b>access</b> <b>control</b> <b>mechanism</b> for the MeeGo mobile Operating System. It {{is also used to}} sandbox HTML5 web applications in the Tizen architecture, in the commercial Wind River Linux solutions for embedded device development, in Philips Digital TV products., and in Intel's Ostro OS for IoT devices.|$|E
50|$|IGMP-AC is an {{extended}} version of Internet Group Management Protocol. It provides a generic client-server authentication protocol, where the receiver or end user {{will act as}} a client, the AAA server will act as a server and the access router (one-hop router of the receiver) will perform the forwarding task. Thus, any suitable authentication protocol (e.g., Extensible Authentication Protocol (EAP)) having client-server entities can be encapsulated over the IGMP-AC architecture. The IGMP-AC will not disrupt the usual function of the IGMPv3 (to be used for classical multicast group), and the <b>access</b> <b>control</b> <b>mechanism</b> of IGMP-AC will take place to join/leave a secured or restricted multicast group only.|$|E
50|$|The channel {{access control}} {{mechanisms}} provided by the MAC layer are {{also known as a}} multiple access protocol. This makes it possible for several stations connected to the same physical medium to share it. Examples of shared physical media are bus networks, ring networks, hub networks, wireless networks and half-duplex point-to-point links. The multiple access protocol may detect or avoid data packet collisions if a packet mode contention based channel access method is used, or reserve resources to establish a logical channel if a circuit-switched or channelization-based channel access method is used. The channel <b>access</b> <b>control</b> <b>mechanism</b> relies on a physical layer multiplex scheme.|$|E
40|$|Abstract. With {{increasing}} {{interests in}} efficient energy management fol-lows a rapid development of smart grid. With {{the help of}} information technology in smart grid, many smart grid subjects such as a user, a ser-vice provider, or even a service component, can access to another smart grid system components freely and frequently. Such highly occurring ac-cess controls between smart grid components may raise the possibilities of security breaches such as an unauthorized access to a resource or a system breakdown. To address these security issues, {{we need to develop}} proper <b>access</b> <b>control</b> <b>mechanisms</b> for smart grid system. Therefore, we propose <b>access</b> <b>control</b> <b>mechanisms</b> optimized for smart grid. We first defined security requirements of smart grid and analyzed existing <b>access</b> <b>control</b> models whether existing <b>access</b> <b>control</b> models can be applied for smart grid applications. Next we proposed an improved <b>access</b> <b>control</b> framework which satisfies the security requirements we have defined. Fi-nally, based on our proposed <b>access</b> <b>control</b> <b>mechanisms,</b> we have defined <b>access</b> <b>control</b> policies for each smart grid domains...|$|R
30|$|As {{previously}} mentioned, access {{decisions in}} OpenStack are computed at two different PDPs when processing a user request. This {{is the main}} characteristic of OpenStack authorisation mechanisms, and has prompted us to conduct {{an analysis of the}} <b>access</b> <b>control</b> <b>mechanisms</b> in OpenStack in order to identify how self-adaptive capabilities can be incorporated to deal with insider threats. In the following, we present an example of insider threat scenario, followed by a threat model analysis of OpenStack <b>access</b> <b>control</b> <b>mechanisms.</b>|$|R
50|$|The {{most common}} way of {{ensuring}} computer security is <b>access</b> <b>control</b> <b>mechanisms</b> provided by operating {{systems such as}} UNIX, Linux, Windows, Mac OS, etc.|$|R
50|$|Role-based-access-control (RBAC) is {{a policy}} neutral <b>access</b> <b>control</b> <b>mechanism</b> defined around roles and privileges. The {{components}} of RBAC such as role-permissions, user-role and role-role relationships make it simple to perform user assignments. A study by NIST has demonstrated that RBAC addresses many needs of commercial and government organizations. RBAC {{can be used to}} facilitate administration of security in large organizations with hundreds of users and thousands of permissions. Although RBAC is different from MAC and DAC access control frameworks, it can enforce these policies without any complication. Its popularity is evident from the fact that many products and businesses are using it directly or indirectly.|$|E
5000|$|RPA tools {{therefore}} lean towards [...] "light" [...] IT {{requirements and}} do not, for example, disturb underlying computer systems. The robots access end user computer systems exactly {{as a human}} does - via the user interface with an established <b>access</b> <b>control</b> <b>mechanism</b> (e.g. logon ID and password) - so no underlying systems programming need be required. This is an important point because, from a security, quality and data integrity perspective, the UI of many applications encapsulates many years of requirements and testing for error prevention, data integrity and security access control. To bypass a UI by creating a new API is a risky undertaking and requires extensive testing in order that the same levels of functionality and protection are maintained.|$|E
50|$|One novel {{approach}} to solving this problem {{involves the use}} of an orthogonally persistent operating system. (This was realised in the Flex machine. See Ten15). In such a system, {{there is no need for}} entities to be discarded and their capabilities be invalidated, and hence require an ACL-like mechanism to restore those capabilities at a later time. The operating system maintains the integrity and security of the capabilities contained within all storage, both volatile and nonvolatile, at all times; in part by performing all serialization tasks by itself, rather than requiring user programs to do so, as is the case in most operating systems. Because user programs are relieved of this responsibility, there is no need to trust them to reproduce only legal capabilities, nor to validate requests for access using an <b>access</b> <b>control</b> <b>mechanism.</b>|$|E
40|$|Abstract. Semantic {{technology}} powered <b>access</b> <b>control</b> schemes {{have been}} recently proposed {{to enhance the}} flexibility of role-based <b>access</b> <b>control</b> (RBAC) and its variants. These <b>access</b> <b>control</b> <b>mechanisms</b> depend heavily on rich, contextual data sourced from an identity attribute store. Unfortunately, most identity stores in use today use the Lightweight Directory Access Protocol (LDAP) representational schema which has several deficiencies as a knowledge representation, particularly when applied to fine-grained, contextual access decision policies. This paper reviews some of these gaps and shows how the same semantic infrastructure used for the <b>access</b> <b>control</b> <b>mechanisms</b> can be employed to mitigate LDAP assumptions...|$|R
50|$|An {{important}} {{capability is}} the use of X.509 Certificate Attributes, which permits it to utilize complex <b>access</b> <b>control</b> <b>mechanisms</b> on the basis of group memberships.|$|R
30|$|In this section, {{we first}} briefly provide a {{tutorial}} about the channel <b>access</b> <b>control</b> <b>mechanisms</b> in WiFi, GPRS and WiMAX, then specify the protocol <b>control</b> <b>mechanisms</b> {{to enable the}} coexistence of heterogeneous wireless systems.|$|R
50|$|After a person, {{program or}} {{computer}} has successfully been identified and authenticated {{then it must}} be determined what informational resources they are permitted to access and what actions they {{will be allowed to}} perform (run, view, create, delete, or change). This is called authorization. Authorization to access information and other computing services begins with administrative policies and procedures. The policies prescribe what information and computing services can be accessed, by whom, and under what conditions. The access control mechanisms are then configured to enforce these policies. Different computing systems are equipped with different kinds of access control mechanisms—some may even offer a choice of different access control mechanisms. The <b>access</b> <b>control</b> <b>mechanism</b> a system offers will be based upon one of three approaches to access control or it may be derived from a combination of the three approaches.|$|E
50|$|In {{computer}} security, mandatory {{access control}} (MAC) refers to a type of access control by which the operating system constrains {{the ability of a}} subject or initiator to access or generally perform some sort of operation on an object or target. In practice, a subject is usually a process or thread; objects are constructs such as files, directories, TCP/UDP ports, shared memory segments, IO devices, etc. Subjects and objects each have a set of security attributes. Whenever a subject attempts to access an object, an authorization rule enforced by the operating system kernel examines these security attributes and decides whether the access can take place. Any operation by any subject on any object is tested against the set of authorization rules (aka policy) to determine if the operation is allowed. A database management system, in its <b>access</b> <b>control</b> <b>mechanism,</b> can also apply {{mandatory access control}}; in this case, the objects are tables, views, procedures, etc.|$|E
50|$|Computer {{security}} inference {{control is}} {{the attempt to}} prevent users to infer classified information from rightfully accessible chunks of information with lower classification. Computer security professionals install protocols into databases to prevent inference attacks by software. Techniques to detect and remove inference channels can be organized into two categories. The ﬁrst category includes techniques that detect inference channels during database design time.Inference channels are removed by modifying the database design or by increasing the classiﬁcation levels {{of some of the}} data items. Techniques in the second category seek to eliminate inference channel violations during query processing time. If an inference channel is detected, the query is either refused or modiﬁed to avoid security violations. While design-time is easier to manage and implement, query-time approach allows more availability of data than in design-time approach because more information (past and present queries/answers) can be used for disclosure inference. Disclosure Monitor (DiMon) detects and eliminates inference channels based on database constraints. A Disclosure Inference Engine (DiIE) is proposed, that generates all information that can be disclosed based on a user’s previous query results, the current query results, and a set of Horn-clause constraints. Dynamic Disclosure Monitor (D2Mon) guarantees data confidentiality and maximal availability even in the presence of inferences and updates.It is our intention to complement an existing <b>access</b> <b>control</b> <b>mechanism</b> (e.g., DAC, MAC, RBAC) to address the inference problem.|$|E
40|$|<b>Access</b> <b>control</b> <b>mechanisms</b> {{have been}} {{designed}} and implemented to limit the access, authenticate and authorize single users, either in fixed networks, or in mobile environments. With the recent advances in network mobility support in IPv 6 (NEMO), access networks will soon be deployed in public transportation such as buses or trains and will in turn provide access to mobile nodes and even mobile networks. However, <b>access</b> <b>control</b> <b>mechanisms</b> have not been designed for users located in such nested mobile environments, that is, when the access network in which they get access to is itself mobile. An actual deployment scenario comprising a bus offering both Internet and local services to its passengers is used to illustrate the needs and the issues from a security and authentication point of view. An authentication architecture based on the latest <b>access</b> <b>control</b> <b>mechanisms</b> and protocols is then proposed to offer basic authentication in nested mobile environments...|$|R
5000|$|There {{are five}} {{standard}} <b>access</b> <b>control</b> <b>mechanisms</b> that <b>control</b> whether a client application can connect to an X display server. They can be grouped in three categories: ...|$|R
25|$|Access to {{protected}} information must {{be restricted}} {{to people who are}} authorized to access the information. The computer programs, and in many cases the computers that process the information, must also be authorized. This requires that mechanisms be in place to <b>control</b> the <b>access</b> to protected information. The sophistication of the <b>access</b> <b>control</b> <b>mechanisms</b> should be in parity with the value of the information being protected – the more sensitive or valuable the information the stronger the <b>control</b> <b>mechanisms</b> need to be. The foundation on which <b>access</b> <b>control</b> <b>mechanisms</b> are built start with identification and authentication.|$|R
