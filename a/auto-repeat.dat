5|3|Public
5000|$|One of {{the most}} notable {{improvements}} of the Apple IIe is {{the addition of a}} full ASCII character set and keyboard. The most important addition is the ability to input and display lower-case letters. Other keyboard improvements include four-way cursor control and standard editing keys (Delete and Tab), two special Apple modifier keys (Open and Solid Apple), and a safe off-to-side relocation of the [...] "Reset" [...] key. The <b>auto-repeat</b> function (any key held down to repeat same character continuously) is now automatic, no longer requiring the [...] "REPT" [...] key found on the previous model's keyboard.|$|E
50|$|Rather {{than the}} fast-paced action of Wolfenstein 3D, Nitemare 3D has a {{slightly}} slower, more puzzle-oriented style of gameplay. The four weapons (plasma gun, magic wand, pistol, and <b>auto-repeat</b> plasma gun) have different usages—for example, magic blasts are especially useful against magical creatures such as witches, whereas robots are practically immune to them. Meanwhile, vampires take heavy damage from silver bullets, while shrugging off {{the effects of the}} plasma gun. Each level in the game has numerous secret panels, some of which were purely for bonuses, but others are essential to completing the level. To make this task easier, the player can collect magic eyes, which enable the player to activate a mini-map in the game's HUD and give hints as to the locations of panels, and crystal balls for displaying the location of enemies.|$|E
50|$|To {{differentiate}} from general keyboard input, most keyboard shortcuts require {{the user to}} press and hold several keys simultaneously or a sequence of keys one after the other. Unmodified key presses are sometimes accepted when the keyboard is not used for general input - such as with graphics packages e.g. Adobe Photoshop or IBM Lotus Freelance Graphics. Other keyboard shortcuts use function keys that are dedicated for use in shortcuts and may only require a single keypress. For simultaneous keyboard shortcuts, one usually first holds down the modifier key(s), then quickly presses and releases the regular (non-modifier) key, and finally releases the modifier key(s). This distinction is important, as trying to press all the keys simultaneously will frequently either miss some of the modifier keys, or cause unwanted <b>auto-repeat.</b> Sequential shortcuts usually involve pressing and releasing a dedicated prefix key, such as the Esc key, followed {{by one or more}} keystrokes.|$|E
5000|$|Modern CISC/RISC {{implementations}} (e.g., x86 designs) decode instructions into dynamically buffered micro-operations with instruction encodings {{similar to}} traditional fixed microcode. Ordinary static microcode {{is used as}} hardware assistance for complex multistep operations such as <b>auto-repeating</b> instructions and for transcendental functions in the floating point unit; it is also used for special purpose instructions (such as CPUID) and internal control and configuration purposes.|$|R
25|$|The {{microcode}} can employ both pipelines {{to enable}} <b>auto-repeating</b> instructions such as rep movsw perform one iteration every clock cycle, while the 80486 needed three clocks per iteration (and the earliest x86-chips {{significantly more than}} the 486). Also, optimization of the access to the first microcode words during the decode stages helps in making several frequent instructions execute significantly more quickly, especially in their most common forms, and in typical cases. Some examples are (486→Pentium, in clock cycles): CALL (3→1), RET (5→2), shifts/rotates (2~3→1), etc.|$|R
50|$|Made {{of silver}} grey plastic {{it had a}} black matte area around the {{keyboard}} area. Most of the 63 rubber chicklet keys were grey, with some (the more important) keys in marine blue, and with white control and break keys. Each of the grey keys could produce any of five inputs: Upper and lower-case letters (or numbers and symbols), two graphic characters (similar to the graphic symbols of PETSCII), and a BASIC keyword. Two keys, ALPHA and GRAPH, are used to switch {{back and forth between}} character and graphics modes. Holding down the CONTROL key while pressing any grey key produced a Basic keyword. In total the JR-200 had 253 built-in characters. 96 letters, numbers and symbols, 5 Greek letters, 63 graphical symbols, 79 Japanese (katakana) symbols and 10 music and other symbols. All symbols formed in an 8x8 pixel matrix, and the JR-200 could display 32 characters per line and 24 lines. All relevant keys would <b>auto-repeat</b> when pressed continuously. The JR-200 used a very unusual 8-bit CPU, the MN1800A, which was compatible with the Motorola MC6802, a slightly improved version of the Motorola 6800. It ran at a slow 0.89 MHz (according to unconfirmed information). There is also a second processor, the 4-bit MN1544CJR, which is used for I/O and contains 128 bytes of RAM plus four kilobytes of ROM.|$|E
40|$|Six {{techniques}} for three-key text entry are described. The techniques use Left- and Right-arrow keys to maneuver a cursor over a linear sequence of characters, and a Select key to select characters. The keystrokes per character (KSPC) for the methods varies from 10. 66 to 4. 23. Two techniques {{were chosen for}} formal evaluation. Method # 2 positions characters in alphabetical order, while Method # 6 uses linguistic enhancement to reorder characters following each entry to minimize the cursor distance to the next character. Both methods position SPACE {{on the left and}} use a snap-to-home cursor mode, whereby the cursor snaps to SPACE after each entry. Entry rates were about 9 - 10 wpm for both techniques, as measured in an experiment with ten participants. Interaction issues are examined, such as the challenges in using linguistic knowledge to accelerate input, and the opportunity for using typamatic (viz. <b>auto-repeat)</b> keying strategies {{to reduce the number of}} physical keypresses. Keywords Mobile text entry, linguistically enhanced text entry, text entry performance evaluations, typamatic keyin...|$|E

