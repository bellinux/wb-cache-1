0|1067|Public
5000|$|OpenPuff is used {{primarily}} for anonymous <b>asynchronous</b> <b>data</b> sharing: ...|$|R
40|$|According to the <b>asynchronous</b> {{transmission}} of <b>data</b> for the SINS/WSN integrated positioning system, this paper proposes a novel <b>asynchronous</b> <b>data</b> fusion method using Unscented Kalman Filter for SINS/WSN integrated positioning {{system based on}} indoor mobile target. The state equation of the integrated system is built with the motion characteristic of mobile target. The pseudo measurement equation {{is built based on}} the time sequence of SINS/WSN measured value through detecting the measurement of WSN in every fusion period. Considering that the improved state-space model, comprised of the state equation and pseudo measurement equation, is the nonlinear equations, the Unscented Kalman Filter is applied to estimate the state value of the state-space model. Hence the <b>asynchronous</b> <b>data</b> fusion method for SINS/WSN integrated positioning system can be achieved. Simulation results and experimental tests show that the positioning system with proposed <b>asynchronous</b> <b>data</b> fusion algorithm performs feasibility and stability under circumstances of the asynchronous time, and it is superior to the traditional <b>asynchronous</b> <b>data</b> fusion and synchronous data fusion methods...|$|R
5000|$|IEC 62056-42:2002 Physical layer {{services}} {{and procedures for}} connection-oriented <b>asynchronous</b> <b>data</b> exchange ...|$|R
50|$|Commutated frames {{may also}} contain <b>asynchronous</b> <b>data,</b> which require further {{processing}} to extract.|$|R
5000|$|... <b>Asynchronous</b> <b>data</b> {{streaming}} in a {{peer to peer}} network. Issued March 1, 2012 ...|$|R
50|$|Data Space, when present, carries application-specific {{information}} such as isochronous, and <b>asynchronous</b> <b>data</b> streams.|$|R
40|$|In {{the first}} step of the bisection {{algorithm}} for lossless compression of a <b>data</b> <b>string</b> of length a power of two, one recursively performs bisections of substrings of the <b>data</b> <b>string</b> obtained from previous bisections, starting with the bisection of the entire <b>data</b> <b>string</b> into two substrings. We consider a compression method which is a modification of the bisection algorithm, applicable to <b>data</b> <b>strings</b> of general length. Define an approximate bisection of a string to consist of the partitioning of the string into two substrings whose lengths differ by at most one. Then, {{the first step}} of the modified compression method consists of recursive "approximate bisection" of substrings of the <b>data</b> <b>string,</b> starting with the approximate bisection of the entire <b>data</b> <b>string.</b> The modified compression method requires that one specify in advance which of the at most two ways in which every approximate bisection must take place; this is called guided approximate bisection. It is shown that the modified [...] ...|$|R
40|$|Each <b>data</b> <b>string</b> over {{a finite}} {{alphabet}} of length {{a power of}} two is represented via a binary tree called a bisection tree. The nodes of the bisection tree correspond {{to the members of}} the smallest class of substrings of the <b>data</b> <b>string</b> which contains the <b>data</b> <b>string</b> and is closed with respect to bisection. A <b>data</b> <b>string</b> can be perfectly reconstructed from its bisection tree. A lossless data compression algorithm is presented which compresses the <b>data</b> <b>string</b> by compressing its bisection tree. This algorithm is shown to be a universal algorithm in the sense that it yields a compression performance at least as good as the compression performance provided by any finite-state sequential lossless data compression algorithm, asymptotically as the length of the <b>data</b> <b>string</b> goes to infinity. Index Terms: lossless data compression, arithmetic coding, entropy, universal algorithms I Introduction Throughout this paper, let A be a generic symbol denoting a finite alphabet containing at least tw [...] ...|$|R
40|$|Till now {{communication}} is possible of 7 bit information <b>data</b> <b>string</b> by transmitting 11 bit <b>data</b> <b>string</b> in single frame {{due to this}} speed of communication system is very slow. And we can transmit very minimum number of configuration of <b>data</b> <b>string.</b> To increase the speed of communication system and increase the numbers of configuration <b>data</b> <b>string</b> author design some communication system by different methodologies of Hamming code. About all these communication systems all methodologies are discuss here. First, author design communication system to make communication by even parity check method for 25 bit information <b>data</b> <b>string.</b> In second paper, author design communication system to make communication by odd parity check method for 25 bit information data. In third paper, author again design communication system for 25 bit information <b>data</b> <b>string</b> by even parity and odd parity check method by using VHDL by single system. Till now, for 25 bit information <b>data</b> <b>string</b> {{communication is}} possible only in simplex mode. So that now author, design 25 bit hamming code transceiver to make communication possible in full duplex mode. Key word Hamming code, VHDL code, Xilinx ISE 10. 1 simulator, even parity check, odd parity check, transmitter, receiver, transceiver...|$|R
30|$|Communication mechanisms: Novel {{approaches}} must be devised for facing network unreliability [7] {{and network}} latency, for example by expressing <b>asynchronous</b> <b>data</b> communications and locality-based data exchange/sharing.|$|R
40|$|We {{introduce}} streaming <b>data</b> <b>string</b> transducers that map input <b>data</b> <b>strings</b> {{to output}} <b>data</b> <b>strings</b> {{in a single}} left-to-right pass in linear time. <b>Data</b> <b>strings</b> are (unbounded) sequences of data values, tagged with symbols from a finite set, over a potentially infinite data domain that supports only the operations of equality and ordering. The transducer uses a finite set of states, a finite set of variables ranging over the data domain, and a finite set of variables ranging over <b>data</b> <b>strings.</b> At every step, it can {{make decisions based on}} the next input symbol, updating its state, remembering the input data value in its data variables, and updating data-string variables by concatenating data-string variables and new symbols formed from data variables, while avoiding duplication. We establish that the problems of checking functional equivalence of two streaming transducers, and of checking whether a streaming transducer satisfies pre/pos...|$|R
40|$|A {{method used}} preferably with LZSS-based {{compression}} methods for compressing {{a stream of}} digital data. The method uses a run-length encoding scheme especially suited for <b>data</b> <b>strings</b> of identical <b>data</b> bytes having large run-lengths, such as data representing scanned images. The method reads an input data stream to determine {{the length of the}} <b>data</b> <b>strings.</b> Longer <b>data</b> <b>strings</b> are then encoded {{in one of two ways}} depending on the length of the <b>string.</b> For <b>data</b> <b>strings</b> having run-lengths less than 18 bytes, a cleared offset and the actual run-length are written to an output buffer and then a run byte is written to the output buffer. For <b>data</b> <b>strings</b> of 18 bytes or longer, a set offset and an encoded run-length are written to the output buffer and then a run byte is written to the output buffer. The encoded run-length is written in two parts obtained by dividing the run length by a factor of 255. The first of two parts of the encoded run-length is the quotient; the second part is the remainder. Data bytes that are not part of <b>data</b> <b>strings</b> of sufficient length are written directly to the output buffer...|$|R
50|$|The {{overhead}} {{of moving}} single {{and groups of}} pages between Central and Expanded Storage was reduced {{with the introduction of}} the MVPG (Move Page) instruction and the ADMF (<b>Asynchronous</b> <b>Data</b> Mover Facility) capability.|$|R
5000|$|<b>Asynchronous</b> <b>data</b> {{communication}} {{services such as}} web access are characterised by short communication bursts at high data rate. Few users in a base station cell are transferring data simultaneously at low constant data rate.|$|R
40|$|Network algebra (NA) is {{proposed}} as a uniform algebraic {{framework for the}} description (and analysis) of data ow networks. The core of this algebraic setting is provided by an equational theory called Basic Network Algebra (BNA). It constitutes a selection of primitives and identities from the algebra of flownomials due to [Ste 86] and [CaS 88 & 89]. Both synchronous and <b>asynchronous</b> <b>data</b> ow networks are then investigated {{from the viewpoint of}} network algebra. To this end the NA primitives are defined such that the identities of BNA hold. These axioms are particularly strict {{about the role of the}} connections, which will be called flows of data. We describe three interpretations of the connections that satisfy the BNA identities: minimal stream delayers, stream delayers and stream retimers. Each of the above possibilities leads to a class of data ow networks: synchronous <b>data</b> ow networks, <b>asynchronous</b> <b>data</b> ow networks and fully <b>asynchronous</b> <b>data</b> ow networks, respectively. For each case stream transformer and process algebra models are introduced and compared...|$|R
50|$|Circuit {{emulation}} service (CES) is a telecommunication {{technology used}} to send information over <b>asynchronous</b> <b>data</b> networks like ATM, ethernet or MPLS, {{so that it is}} received error-free with constant delay, similar to a leased line.|$|R
50|$|HTTP {{server push}} (also known as HTTP streaming) is a {{mechanism}} for sending unsolicited (<b>asynchronous)</b> <b>data</b> from a web server to a web browser. HTTP server push can be achieved through any of several mechanisms.|$|R
50|$|Many of the {{technical}} features (<b>asynchronous</b> <b>data</b> bus, distributed bus arbitration, large board size) are shared with IEEE standard FASTBUS.FASTBUS {{was used as a}} data acquisition system in many high-energy physics experiments in the 1980s and 1990s.|$|R
5000|$|ADMF (<b>Asynchronous</b> <b>Data</b> Mover Facility), {{which was}} {{introduced}} in 1992, goes beyond {{the capabilities of the}} MVPG (Move Page) instruction, which is limited to a single page, [...] and can move groups of pages between Central and Expanded Storage.|$|R
40|$|Compared {{with the}} {{traditional}} ones the scheme improves the efficiency of Web application, it can increase responsiveness and interactivity of web pages, customized and extended, and make <b>asynchronous</b> <b>data</b> exchange between the server and browser. Index Terms—Ajax, Information exchange, heterogeneous informatio...|$|R
40|$|Mechanisms for {{operating}} a prover device and a verifier device {{so that the}} verifier device can verify {{the authenticity of the}} prover device. The prover device generates a <b>data</b> <b>string</b> by: (a) submitting a challenge to a physical unclonable function (PUF) to obtain a response string, (b) selecting a substring from the response string, (c) injecting the selected substring into the <b>data</b> <b>string,</b> and (d) injecting random bits into bit positions of the <b>data</b> <b>string</b> not assigned to the selected substring. The verifier: (e) generates an estimated response string by evaluating a computational model of the PUF based on the challenge; (f) performs a search process to identify the selected substring within the <b>data</b> <b>string</b> using the estimated response string; and (g) determines whether the prover device is authentic based on a measure of similarity between the identified substring and a corresponding substring of the estimated response string...|$|R
40|$|A new <b>asynchronous</b> <b>data</b> {{transfer}} scheme using multiple-valued 2 -color 1 -phase coding, called a bidi-rectional data {{transfer scheme}}, is proposed for a high-performance and low-power VLSI system. Valid data sig-nals of ” 0 ” or ” 1 ” {{are represented by}} binary dual-rail complementary codes, (0, 1) and (1, 0), and ”ODD ” and ”EVEN ” colors are represented by binary dual-rail codes, (0, 0) and (1, 1), respectively. Control signals from both a transmitter and a receiver are represented by dual-rail multiple-valued coding with superposition of data and color signals. The use of dual-rail coding {{makes it easy to}} de-tect EVEN and ODD information by calculating the sum of dual-rail codes, even when data and color informa-tion are mixed on the same wires in <b>asynchronous</b> <b>data</b> transfer. Since a linear-summation can be implemented by wiring without active devices in multiple-valued bidi-rectional current-mode circuitry, the proposed circuit for asynchronous control becomes simple. It is evaluated in a 0. 18 -µm CMOS technology that the switching speed of the proposed <b>asynchronous</b> <b>data</b> transfer scheme is about 1. 6 -times faster than that of the corresponding binary CMOS implementation under the normalized power dissipation. ...|$|R
40|$|International Telemetering Conference Proceedings / October 27 - 30, 1997 / Riviera Hotel and Convention Center, Las Vegas, NevadaIn {{recent years}} we have seen an {{increase}} in the use of MIL-STD- 1553 buses and other <b>asynchronous</b> <b>data</b> sources used in new missile and launcher designs. The application of multiplexed asynchronous buses in missiles and launchers is very common today. With increasing application of <b>asynchronous</b> <b>data</b> sources into very complex systems the need to acquire, analyze, and present one hundred percent of the bus traffic in real time or near real time has become especially important during testing and diagnostic operations. This paper discusses ways of converting <b>asynchronous</b> <b>data,</b> including MIL-STD- 1553, into a telemetry format that is suitable for encryption, telemetering, recording, and presenting with Inter Range Instrumentation Group (IRIG) compatible off-the-shelf hardware. The importance of these designs is to provide the capability to conserve data bandwidth and to maximize the use of existing hardware. In addition, this paper will discuss a unique decode and time tagging design that conserves data storage when compared to the methods in IRIG Standard 106 - 96 and still maintains a very accurate time tag...|$|R
5000|$|... resource: Resource <b>data</b> <b>string</b> being transmitted, e.g., an IP address or email address.|$|R
50|$|FireWire {{is capable}} of safely {{operating}} critical systems due to the way multiple devices interact with the bus and how the bus allocates bandwidth to the devices. FireWire {{is capable of}} both asynchronous and isochronous transfer methods at once. Isochronous data transfers are transfers for devices that require continuous, guaranteed bandwidth. In an aircraft, for instance, Isochronous devices include control of the rudder, mouse operations and data from pressure sensors outside the aircraft. All these elements require constant, uninterrupted bandwidth. To support both elements, FireWire dedicates a certain percentage to isochronous data and the rest to <b>asynchronous</b> <b>data.</b> In IEEE 1394, 80% of the bus is reserved for isochronous cycles, leaving <b>asynchronous</b> <b>data</b> {{with a minimum of}} 20% of the bus.|$|R
40|$|Data {{compression}} {{is required}} to compress given data {{in order to save}} space on storage devices and remove unnecessary redundancies in given data. Data mainly consists of strings of characters and digits. Data compression algorithms are mainly lossless or lossy. In lossless algorithms no data is lost during operation and in lossy algorithm data is lost during operation but compression is more. Data can be compressed by exploiting factors like : repetition of characters, using dictionary, prediction etc. This paper is about compression of <b>Data</b> <b>Strings</b> used in various programming languages using the technique of K-Nets which is lossless technique. A K-Net can be an Ndimensional geometrical figure which is generally a square or a rectangle for N= 2 or in two dimensional plane. In this papaer we will firstly represent a <b>Data</b> <b>string</b> of characters using a points in the K-Net plane and then later calculate the space saved by the technique to represent <b>data</b> <b>string's</b> for long <b>data</b> <b>string's.</b> The programming language used in this paper for performance analysis and calculating results is JAVA. </p...|$|R
40|$|International Telemetering Conference Proceedings / October 29 -November 02, 1990 / Riviera Hotel and Convention Center, Las Vegas, NevadaAsynchronous {{data sources}} such as those {{associated}} with Space Based Radar create a unique problem for Time Division Multiplexed (TDM) Pulse Code Modulation (PCM) frame formats. The problem consists of data arrival based on external occurrences such as target tracking, and not due to sampling polls from internal sequencers. Reserved time slots for <b>asynchronous</b> <b>data</b> must be provided within the synchronous TDM telemetry stream. This increases the required bandwidth to transfer collected data to ground sites proportional to the worst case arrival rate of <b>asynchronous</b> <b>data</b> and the maximum latency allowed for the application. <b>Asynchronous</b> <b>data</b> is readily handled by the Consultative Committee for Space Data Systems (CCSDS) recommended formats without the need to increase the bandwidth disproportionately. The recommendation maintains the ability to provide synchronous telemetry data collection and transmission provided by the TDM PCM frame formats. This paper provides an implementation of CCSDS recommendations and addresses the methodology of merging <b>asynchronous</b> and synchronous <b>data</b> sources without the prerequisite increase in bandwidth associated with purely synchronous TDM approaches. Additional implementation details are provided {{for the implementation of}} a Telemetry Operation Procedure (TOP) to downlink error free telemetry frames. The TOP is not currently supported within the CCSDS recommendation. The implementation is provided through the Micro Packaged Data Acquisition and Control Systems developed by SCI Technology in Huntsville, Alabama...|$|R
40|$|In {{this paper}} {{we present a}} novel {{parallel}} sorting algorithm, highly suited for VLSI implementation, which works through a cascade of elementary sorting units and leads to a scalable architecture. The paper describes the applications of such device to the <b>asynchronous</b> <b>data</b> acquisition for a gamma ray telescope...|$|R
40|$|Variable-rate, <b>asynchronous</b> <b>data</b> {{signals from}} {{up to four}} {{measuring}} instruments or other sources combined in first-in/first-out (FIFO) buffer for transmission on single channel. Constructed in complementary metal-oxide-semiconductor (CMOS) logic, buffer consumes low power (only 125 mW at 5 V) and conforms to aerospace standards of reliability and maintainability...|$|R
40|$|International Telemetering Conference Proceedings / November 04 - 07, 1991 / Riviera Hotel and Convention Center, Las Vegas, NevadaThe use of {{embedded}} <b>asynchronous</b> <b>data</b> streams {{is becoming}} a popular means of expanding existing telemetry systems and acquiring subsystem data. In such systems, synchronization between the primary and secondary system(s) clocks is usually considered a prerequisite. The Phillips Laboratory has developed a software/hardware approach {{to the problem of}} decommutating an embedded <b>asynchronous</b> <b>data</b> stream without primary and secondary frame and clock synchronization. The methodology employed is easily implemented and adapted to many system configurations, and represents a low-cost option in the acquisition of subsystem data. More importantly, the use of such a system greatly reduces the amount of systems integration effort required to incorporate multiple subsystems into a host telemetry system...|$|R
40|$|Power {{consumption}} and energy efficiency {{is a major}} role in sequential circuit design. Power gating is a technique that is used to reduce the static power consumption of idle modules. Usage of Dual Edge Triggered Flip-flop (DETFF) is an efficient technique since it consumes the clock frequency and less power than Double Edge Triggered Flip-flops (DETFF’s). Integrating power gating technique with DETFF reduces the power {{consumption and}} leakage power further, but it leads to <b>asynchronous</b> <b>data</b> sampling problem. In this paper, two methods have been used to eradicate the <b>asynchronous</b> <b>data</b> sampling problem and their power analysis has been estimated. In order to reduce the leakage power consumption further, a new design has proposed for a DETFF. Based on his new design, the two methods have been implemented using 130 ìm Tanner EDA tool...|$|R
40|$|Many {{real world}} data {{naturally}} arrive as rapid paced and virtually unbounded streams. Examples of such streams include network traffic at a router, events observed by a sensor network, accesses to a web server and transactional updates {{to a large}} database. Such streaming data need to be monitored online to collect traffic statistics, detect trends and anomalies, tune system performance and help make business decisions. However, {{because of the large}} size and rapid pace of the data, as well as the online processing requirement, conventional data processing methods, such as storing the data in a database and issuing offline SQL queries thereafter, are not feasible. Data stream processing is a new diagram of massive data set processing and creates new challenges in the algorithm design and implementation. In this thesis, we consider time-decayed data aggregation for data streams, where the importance or contribution of each data element decays over time, since recent data are usually considered of more importance in applications, and therefore are given heavier weights. We design small space data structures and algorithms for maintaining fundamental aggregates of the streams if it is possible and otherwise show large space lower bounds. We consider the data aggregation over a robust data stream model called <b>asynchronous</b> <b>data</b> stream, motivated by the streaming data transmitted in distributed systems, including computer networks, where the asynchrony in the data transmission is inevitable. In <b>asynchronous</b> <b>data</b> stream, the arrival order of the data elements at the receiver side is not necessarily the same as the order in which the data elements were generated. <b>Asynchronous</b> <b>data</b> stream is a robuster and generalized model of the previous synchronous data stream model. In summary, this thesis presents the following results: 1. We formalize the model of <b>asynchronous</b> <b>data</b> stream and the notion of timestamp sliding window. We propose the first small space sketch for summarizing the data elements over timestamp sliding windows of multiple geographically distributed <b>asynchronous</b> <b>data</b> streams. The sketch can return accuracy guaranteed estimates for basic aggregates, such as: Sum, Median and Quantiles. 2. We design the first small space sketch for general purpose network streaming data aggregation. The sketch has the following properties that make it useful in communication-efficient aggregation in distributed streaming scenarios: (1) The sketch can handle multiple geographically distributed <b>asynchronous</b> <b>data</b> streams. (2) The sketch is duplicate-insensitive, i. e. reinsertions of the same data will not affect the sketch, and hence the estimates of aggregates. (3) The sketch is also time-decaying, so that the weight of each data element summarized in the sketch decreases over time. (4) The sketch returns accuracy guaranteed estimates for a variety of core aggregates, including the sum, median, quantiles, frequent elements and selectivity. 3. We conduct a comprehensive study on the time-decayed correlated <b>data</b> aggregation over <b>asynchronous</b> <b>data</b> streams. For each class of time decay function, we either propose space efficient algorithms or show large space lower bounds. We not only closes the open problem of correlated data aggregation under sliding windows decay, but also presents negative results for the case of exponential decay, which however is highly used in the non-correlated scenarios. 4. We propose the forward decay model to simplify the time-decayed data stream aggregation and sampling. Forward decay captures a variety of usual decay functions (or called backward decay), such as exponential decay. We design efficient algorithms for data aggregation and sampling under the forward decay model, and show that they are easy to implement scalably...|$|R
50|$|After system {{start-up}} is finished, the Real-Time domain {{is operating}} under Real-Time conditions. The scheduling {{of the basic}} cycle {{is controlled by the}} Managing Node (MN). The overall cycle time depends on the amount of isochronous <b>data,</b> <b>asynchronous</b> <b>data</b> and the number of nodes to be polled during each cycle.|$|R
5000|$|A Stretched Cluster that {{maintains}} an additional synchronous or <b>asynchronous</b> <b>data</b> copy on an independent Stretched Cluster or SVC or Storwize device at geo distances. The Golden Copy {{is a disaster}} protection against metro-scale outages impacting the Stretched Cluster as a whole. It relies on licensed Metro- or Global Mirror functionality.|$|R
50|$|If, on {{the other}} hand, the symbol in the string was a 1, the rule {{separator}} changes into a new structure which admits the incoming production rule. Although the new structure is again destroyed when it encounters the next rule separator, it first allows a series of structures to pass through towards the left. These structures are then made to append themselves {{to the end of}} the cyclic tag system's <b>data</b> <b>string.</b> This final transformation is accomplished by means of a series of infinitely repeating, right-moving clock pulses, in the right-moving pattern shown above. The clock pulses transform incoming left-moving 1 symbols from a production rule into stationary 1 symbols of the <b>data</b> <b>string,</b> and incoming 0 symbols from a production rule into stationary 0 symbols of the <b>data</b> <b>string.</b>|$|R
25|$|Another {{possibility}} to access <b>data</b> <b>STRING</b> {{is to use}} the application programming interface (API) by constructing a URL that contain the request.|$|R
