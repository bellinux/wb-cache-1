1|17|Public
5000|$|DoubleClick for Publishers (DFP), {{formerly}} called Google Dart, [...] is an <b>advertisement</b> <b>software</b> as {{a service}} application run by Google. It {{can be used as}} an ad server but it also provides a variety of features for managing the sales process of online ads using a publisher's dedicated sales team. Should a publisher not sell out all their available ad inventory, it can choose to run either other ad networks or AdSense ads as remnant inventory in DoubleClick for Publishers.|$|E
5000|$|... #Caption: Peachtree <b>Software</b> <b>advertisement</b> in the November 29, 1982 {{issue of}} InfoWorld ...|$|R
30|$|Of the 100 test {{software}}, 85 {{pieces of}} software will send the IMEI to the advertising service provider {{and the remaining}} 15 will send the IMEI to the respective software developers. The user’s privacy information that the software sends to the advertising service provider, mostly due to software developers {{for the purpose of}} profit, is from embedded <b>advertisements</b> in the <b>software.</b> Inserting <b>advertisements</b> in the <b>software</b> is accomplished by inserting corresponding advertising of the third party in software code.|$|R
50|$|In {{computer}} software licenses, attribution of credit {{is sometimes a}} condition of licensing. For example, original versions of the BSD license controversially required credit to be provided in the <b>advertisement</b> for <b>software</b> that used licensed code, but only if features or use of the licensed software was mentioned in the advertisement.|$|R
2500|$|A {{series called}} [...] "Junk Yard Training" [...] was {{released}} on yardbarker.com and youtube.com that featured LaDainian Tomlinson, running back for the San Diego Chargers, training in Kimbo's backyard. In 2009, Kimbo starred in an antivirus <b>software</b> <b>advertisement</b> called Caterpillar vs. Kimbo.|$|R
40|$|Abstract. The present {{paper has}} two parts. The first part {{is a trend}} {{analysis}} from the period 1990 – 2004 {{and the second part}} is a cross-sectional analysis from the year 2004. In both parts, the purpose was to find the most common technical skills sought in American job <b>advertisements</b> for <b>software</b> developer positions. Unlike in previous researches, also distributed technology skills were analyzed thoroughly because as a consequence of World Wide Web technology, these skills are required now more often than ten years ago. According to the trend analysis, the mean of the number of required technical skills increased from 3. 6 to 7. 7, and the technical requirements have changed as more versatile. The proportion of distributed technology skills increased very strongly: from 0 % in 1990 to 65. 1 % in 2004. According to the cross-sectional analysis, the top five skills sought in 2004 were Windows, Java, C++, SQL, and Unix. In addition, implications to computer science education are considered. Key words: content analysis of job <b>advertisements,</b> need assessment, <b>software</b> developer, technical skills. 1...|$|R
40|$|Teaching {{tools are}} {{necessary}} to promote learning and encourage the understanding of course content. Among those tools, televoting is one by which students can answer anonymously on a question presented by an instructor. Here, we present ivote, a small application {{that can be used}} to that end. ivote is free and does not require registration from the professor nor the students, and does not present <b>advertisements.</b> This <b>software</b> can be used in conjunction with PowerPoint with minimal programming; the votes can also be exported to SPSS, Excel, Mathematica or R easily. Students can express their vote as long as they have an internet access either by entering a URL or by scanning a QR code...|$|R
5000|$|In February 1996, {{seeking to}} expand its {{operations}} into the field of interactive entertainment, CUC approached software companies Sierra On-Line Inc. and Davidson & Associates Inc. They bought Sierra for $1.5 billion and Davidson for $1.6 billion, both in stock. These acquisitions allowed CUC, as a larger outlet, to streamline its distribution network. In addition, product placements and <b>advertisements</b> in these <b>software</b> companies’ products allowed CUC to find new customers in demographics it had not reached before.|$|R
40|$|This paper {{proposes a}} {{cryptographic}} mechanism for metering the duration and/or {{the number of}} instances of running a data process. This mechanism has the following property: knowing a secret, one can validate a piece of metering evidence in constant units of time while without the secret the job of generating a valid piece of evidence requires time indicated by a value in the evidence. Because the mechanism utilises a well-known computational complexity problem, the meter based on it can be implemented in software yet is tamper-resistant. We will address {{the use of this}} mechanism in building an auditable metering scheme for finding the popularity of web sites. The scheme is suitable for rapidly increasing web advertisement applications. We will also discuss the related security issues and mention some other applications, which can benefit by using the mechanism. Keywords: Auditable metering, Web <b>advertisement,</b> Tamper-resistant <b>software,</b> Lightweight security. ...|$|R
5000|$|We set up Superior Software {{with just}} £100 — John and I each put £50 into a company bank account; and we placed a small {{black-and-white}} advertisement {{in one of}} the early home computer magazines ... £100 was the most money that we would lose from the Superior Software venture if it had not worked out. Anyway we received a very good response to our first <b>advertisement,</b> and the <b>software</b> sales which it generated covered the cost of the advertisement several times over. We started to place larger advertisements in a few magazines, and invited other programmers to send their software to us for evaluation and possible marketing by us.|$|R
40|$|Title: Needs {{assessment}} of Software Systems graduates The research {{problem of the}} present thesis was: What technical skills do graduates from specialization in Software Systems need? Triangulation; that is, several research methods and data sources were used to solve this problem. The largest part of the thesis consisted of three questionnaires where Finnish software developers (N = 11), professors and lecturers (N = 19), and Master’s students (N = 24) evaluated the importance of 42 subjects and skills such as discrete mathematics and object-oriented programming. The second largest part of the thesis comprised two content analyses of job <b>advertisements</b> targeted at <b>software</b> developers. A trend analysis for the years 1990 – 2004 and a cross-sectional analysis of the year 2004 were conducted. In both analyses, {{the purpose was to}} find the most common technical skills sought in American job advertisements. In addition, four smaller content analyses were conducted. Documents for these content analyses wer...|$|R
5000|$|A novel {{approach}} to giving credit to its developers {{was one of}} EA's trademarks in its early days. This characterization was even further reinforced with EA's packaging of most of their games in the [...] "album cover" [...] pioneered by EA because Hawkins thought that a record album style would both save costs and convey an artistic feeling. EA routinely referred to their developers as [...] "artists" [...] and gave them photo credits in their games and numerous full-page magazine ads. Their first such ad, accompanied by the slogan [...] "We see farther," [...] was the first video game <b>advertisement</b> to feature <b>software</b> designers. EA also shared lavish profits with their developers, which added to their industry appeal. The square [...] "album cover" [...] boxes (such as the covers for 1983's M.U.L.E. and Pinball Construction Set) were a popular packaging concept by Electronic Arts, which wanted to represent their developers as [...] "rock stars".|$|R
40|$|Abstract. Various online {{studies on}} the {{prevalence}} of spyware attest overwhelming numbers (up to 80 %) of infected home computers. However, the term spyware is ambiguous and can refer to anything from plug-ins that display <b>advertisements</b> to <b>software</b> that records and leaks user input. To {{shed light on the}} true nature of the spyware problem, a recent measurement paper attempted to quantify the extent of spyware on the Internet. More precisely, the authors crawled the web and analyzed the executables that were downloaded. For this analysis, only a single anti-spyware tool was used. Unfortunately, this is a major shortcoming as the results from this single tool neither capture the actual amount of the threat, nor appropriately classify the functionality of suspicious executables in many cases. For our analysis, we developed a fully-automated infrastructure to collect and install executables from the web. We use three different techniques to analyze these programs: an online database of spyware-related identifiers, signature-based scanners, and a behavior-based malware detection technique. We present the results of a measurement study that lasted about ten months. During this time, we crawled over 15 million URLs and downloaded 35, 853 executables. Almost half of the spyware samples we found were not recognized by the tool used in previous work. Moreover, a significant fraction of the analyzed programs (more than 80 %) was incorrectly classified. This underlines that our measurement results are more comprehensive and precise than those of previous approaches, allowing us to draw a more accurate picture of the spyware threat. ...|$|R
5000|$|An {{important}} aspect of defensive computing is for users to be skeptical of the data {{to which they have}} access via the Internet. Malicious software can exist in a multitude of different forms and many are misleading to general computer users and even some anti-malware software. Defensive users think critically about the information they can access, to reduce their chances of downloading and spreading malicious software. Strategies include scanning email attachments prior to opening them and manually filtering suspicious emails from inboxes. Users should be aware of persuasive subject lines and headings in emails from any address, as they may actually contain malicious software or spam, which can mislead users into false advertisement resulting in identity theft.Defensive users can scan files they download prior to opening them and can also configure their computers to show file extensions, revealing potentially dangerous files that appear harmless.Skepticism can also be applied to the websites visited by users. As with emails, users can be led to false <b>advertisements.</b> Also, malicious <b>software</b> can unknowingly be downloaded and infect a computer, just by visiting a certain website.|$|R
40|$|While {{web pages}} sent over HTTP have no {{integrity}} guarantees, {{it is commonly}} assumed that such pages are not modified in transit. In this paper, we provide evidence of surprisingly widespread and diverse changes made to web pages between the server and client. Over 1 % of web clients in our study received altered pages, and we show that these changes often have undesirable consequences for web publishers or end users. Such changes include popup blocking scripts inserted by client <b>software,</b> <b>advertisements</b> injected by ISPs, and even malicious code likely inserted by malware using ARP poisoning. Additionally, we find that changes introduced by client software can inadvertently cause harm, such as introducing cross-site scripting vulnerabilities into most pages a client visits. To help publishers understand and react appropriately to such changes, we introduce web tripwires—client-side JavaScript code that can detect most in-flight modifications to a web page. We discuss several web tripwire designs intended to provide basic integrity checks for web servers. We {{show that they are}} more flexible and less expensive than switching to HTTPS and do not require changes to current browsers. ...|$|R
40|$|In codifying {{intellectual}} property rights, Russian legislators {{have left the}} issue of what standards of originality and creativity form the criteria for copyrightability amatter of debate. Nevertheless, this issue is crucial to answering questions about where the lower threashold for the copyrightability of a work lies. Indeed, it is essential to determining which intellectual works with an insignificant creative component but of high economic importance (e. g., databases, computer <b>software,</b> <b>advertisement</b> slogans or design work) are to be copyrightable. Analyses of debates in legal literature and court rulings issued {{over the past few years}} warrant the conclusion that there is a trend in favor of setting more relaxed standards of originality and creativity and granting copyright protection to works of low authorship. This article addresses the problem of identifying criteria for copyrightability and noncopyrightability in the Russian legal system. It models various types of demarcation criteria, and analyzes their strengths and weaknesses. It also describes the trend in Russian judicial practice of granting copyright protection to works of low authorship, whilst outlining some of the problems and contradictions that this entails. The article compares principles that have evolved under Russian law with similar principles used abroad, mainly in Germany...|$|R
40|$|The {{research}} {{problem of the}} present thesis was: What technical skills do graduates from specialization in Software Systems need? Triangulation; that is, several research methods and data sources were used to solve this problem. The largest part of the thesis consisted of three questionnaires where Finnish software developers (N =  11), professors and lecturers (N =  19), and Master's students (N =  24) evaluated the importance of 42 subjects and skills such as discrete mathematics and object-oriented programming. The second largest part of the thesis comprised two content analyses of job <b>advertisements</b> targeted at <b>software</b> developers. A trend analysis for the years 1990 - 2004 and a cross-sectional analysis of the year 2004 were conducted. In both analyses, {{the purpose was to}} find the most common technical skills sought in American job advertisements. In addition, four smaller content analyses were conducted. Documents for these content analyses were the degree requirements of 31 top-level American research universities, and the internship reports, course catalog, and Master's theses of the Helsinki University of Technology. A concept analysis of the concept "software systems" was also carried out. The main contributions of the present thesis are as follows: The thesis is so far the most versatile triangulation in the area in question. In particular, the content analysis of American degree requirements and the concept analysis of "software systems" were novel approaches. The thesis provided findings that the requirements for software developers have required greater versatility during the past 15 years. Todd, McKeen, and Gallupe reported similar change in 1995 for the 1970 - 1990 period. However, it was interesting to know if this trend had continued after 1990. According to the summarized results, the following technical subjects or skills were evaluated as being important: compilers, concurrent programming, data structures and algorithms, database management systems, distributed systems, object-oriented programming, operating systems, procedural programming, and software architectures. Most of these subjects or skills had already been reported as being important for software developers, for example, in the survey conducted by Lethbridge in 1998. The importance of physics and continuous mathematics was evaluated as being low. Previously, Lethbridge reported similar findings. In the job advertisement analyses of the present thesis, technical skills were analyzed in a more detailed manner than in the previous analyses on average. In particular, some results concerning distributed technology skills were new and more detailed than previously published. reviewe...|$|R

