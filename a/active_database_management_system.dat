14|10000|Public
40|$|This report {{presents}} syntax, semantics {{and implementation}} of rule definitions in an Object Relational <b>Active</b> <b>Database</b> <b>Management</b> <b>System,</b> AMOS. Both, event-based and condition-based rules are considered. However, the main {{focus is on the}} event component of rules. The definition, the deletion, and the management of rule events are investigated. Events can be simple or composite and might be specified as updates on stored or derived functions. The rules are implemented based on the concept of function monitoring; events are compiled to active functions and an incremental change monitoring technique is used to detect changes...|$|E
40|$|The {{proliferation}} of the Internet in accessing {{data and information}} has created many concerns associated with the ownership of these materials. As a consequence organizations are actively seeking means of authenticating digital documents and protecting intellectual or artistic property. We propose a novel approach that combines the reactive rule-based scheme of an <b>active</b> <b>database</b> <b>management</b> <b>system</b> (ADBMS) with the technology of digital watermarking to automatically address these issues of ownership. The integration of these two technologies is a powerful means of protecting digital in a consistent and formal manner for use in e-business...|$|E
40|$|An <b>active</b> <b>database</b> <b>management</b> <b>system</b> {{can react}} to {{predefined}} {{events in the}} database, resulting in performing some appropriate action. ECA-rules are used to capture these predefined events and to express the appropriate action in the <b>active</b> <b>database</b> <b>management</b> <b>system.</b> An event {{is said to be}} an atomic occurrence and is either primitive or composite. D-SNOOP and O-SNOOP are two ways to describe the semantics of composite events. D-SNOOP is detection-based (an event is considered to be instantaneous) and O-SNOOP occurrence-based (an event is considered to occur over a time interval). Some problems concerning the detection of composite events using D-SNOOP semantics have been highlighted by Galton and Augusto (2001), who have created the O-SNOOP semantics to rectify some of the shortcomings of D-SNOOP. It is, however, not known what practical consequences O-SNOOP has on applications. To find some of these practical consequences, an advanced application that uses composite events must be used. In this work, the advanced application is a cooperative information system. A cooperative information system is a system in which several agents work together to solve some common problem. The agents can take on a role as either manager (service requester) or agent (problem solver). In this dissertation an investigation of the differences between O-SNOOP and D-SNOOP in applications handling cooperation protocols is presented. Our first objective has been to model a cooperation protocol using in turn the D-SNOOP and the O-SNOOP semantics. A further objective has been to compare the models of the cooperation protocols to identify any differences between using D-SNOOP and O-SNOOP semantics in applications handling cooperation protocols...|$|E
40|$|<b>Active</b> <b>database</b> <b>management</b> <b>systems</b> (ADBMSs) {{support the}} {{specification}} of reactive {{behavior in the}} form of event-condition-action rules. The capability to modify the definition of reactive behavior is a crucial part of the ADBMS-functionality. Rulebase evolution is however a complex problem in systems that support composite events, particularly when event occurrences should be taken into account that have occurred prior to the modification. We describe which kinds of rulebase modifications are meaningful and should thus be supported by an ADBMS. We investigate syntactic and semantic aspects of rulebase evolution, and present an algorithm for rulebase evolution for the object-oriented ADBMS SAMOS. Keywords: <b>active</b> <b>database</b> systems, ECA-rules, rulebase evolution, object-oriented database systems 1 Introduction and Motivation <b>Active</b> <b>database</b> <b>management</b> <b>systems</b> (ADBMSs) allow the specification and implementation of reactive behavior {{in the form of}} event-condition-action rules (ECA-rules [...] ...|$|R
40|$|<b>Active</b> <b>database</b> <b>management</b> <b>systems</b> {{have been}} {{developed}} for applications requiring an automatic reaction in response to certain events. Events can be simple in nature or complex. Complex events consist of simpler ones. Their semantics is usually described with the help of operators on an event algebra. There are quit...|$|R
40|$|This paper {{presents}} the first comparative performance study of object-oriented <b>active</b> <b>database</b> <b>management</b> <b>systems</b> {{by using the}} BEAST benchmark. BEAST stresses the performance -critical components of active systems: event detection, event composition, rule retrieval, and rule firing. For event detection both method invocation events and transactional events are taken into account; this also shows some performance contributions of the passive part of an ADBMS. Four systems, namely ACOOD, Ode, REACH, and SAMOS, have passed the benchmark tests of BEAST. The interpretation of the performance measurements shows several achievements {{in the area of}} <b>active</b> <b>database</b> technology, but also indicates tradeoffs (e. g. between performance and functionality). Finally, it helps to identify possible optimizations and open issues in designing and implementing <b>active</b> <b>database</b> systems. Keywords: <b>active</b> <b>database</b> systems, database benchmarks 1 Introduction In recent years, <b>active</b> <b>database</b> <b>management</b> <b>systems</b> ( [...] ...|$|R
40|$|While {{the area}} of process {{automation}} in semiconductor manufacturing has many issues in common with process automation and enactment in business processes, {{the nature of the}} semiconductor manufacturing process introduces a number of challenging new issues. Among these issues is the need to not only automate the process but also to continuously control and optimize it. Furthermore the semantics of success/failure for a semiconductor manufacturing process are quite different from the typical binary success/failure of business processes. In this paper, the issues in process automation in semiconductor manufacturing are presented, and compared and contrasted with the issues in traditional workflow technology. We then describe a system, based on an <b>active</b> <b>database</b> <b>management</b> <b>system,</b> that we have developed for process automation in semiconductor manufacturing. We also discuss the approach of this system towards addressing the different issues in the automation of semiconductor manufacturing [...] ...|$|E
40|$|The {{powerful}} functionality that active mechanisms add to {{database management}} systems presents, besides many advantages, {{a number of}} problems related to the control of their behavior. This paper deals with one of these problems: the termination of rule execution. We explain the termination aspect and the aim of termination analysis. Then, we present our approach for investigating the termination of rule execution. In contrast to others, this approach also addresses expressive rule languages as they have been proposed for various recent <b>active</b> <b>database</b> <b>management</b> <b>system</b> prototypes. 1 Introduction Many applications from areas like workflow management, network management, finance, medicine and transportation show some sort of active behavior and are thus well-suited for support by active database management systems (active DBMS). Accordingly, much research has been done in the area so far, e. g., towards the integration of active mechanisms into relational and object-oriented database man [...] ...|$|E
40|$|Research {{area and}} method 1. 1 Predictable {{rule-based}} applications Event-triggered real-time systems respond to occurrences of events by executing actions {{associated with the}} event occurrence. This behavior is convenient to implement as event condition action (ECA) rules [1]. In the ECA rule paradigm, actions are executed {{as a response to}} event occurrences if their associated conditions are true. ECA rules are used to specify the behavior of active databases, where the reactive capability is managed inside the <b>active</b> <b>database</b> <b>management</b> <b>system</b> instead of being spread among several applications [2]. Besides the benefit that applications can react to external events in a timely manner, the use of an ARTDBS adds facilities such as backward recovery, transaction processing, concurrency control and persistent storage of data about the controlled environment. In addition to specifying applications for active database applications, the ECA rule paradigm can be used to specify reactive applications independently of platform used...|$|E
40|$|Current <b>active</b> <b>database</b> <b>management</b> <b>systems</b> (ADBMS) are {{typically}} realized as monolithic, tightly integrated software systems. Separating the <b>active</b> <b>database</b> mechanisms from the DBMS, {{would open the}} opportunity to use them {{in a variety of}} ways and environments. In order to build the respective decoupled <b>active</b> <b>database</b> facilities, construction systems are required. The realization of such a construction system is investigated in the FRAMBOISE project. FRAMBOISE is used to build a "ready-to-run" software system that allows the definition and execution of <b>active</b> <b>database</b> mechanisms in the context of specific DBMSs. It comprises specification mechanisms, construction tools and an object-oriented framework that provides implemented components realizing specific ADBMS tasks. This paper outlines the general approach of FRAMBOISE and discusses the first steps of the realization. 1 Introduction and Motivation <b>Active</b> <b>database</b> <b>management</b> <b>systems</b> (ADBMS) support, beyond the traditional functional [...] ...|$|R
40|$|A {{benchmark}} for <b>active</b> <b>database</b> <b>management</b> <b>systems</b> is described. We are {{particularly interested in}} performance tests that help to identify performant and inefficient components. Active functionality that is relevant with respect to performance is identified, {{and a series of}} tests is designed that measure the efficiency of the performance-critical components. Results obtained from running the {{benchmark for}} a concrete system are presented. Keywords: <b>active</b> <b>database</b> systems, benchmarks, object-oriented database <b>systems</b> 1 Introduction <b>Active</b> <b>database</b> <b>management</b> <b>systems</b> (ADBMSs) [e. g., 2, 9] have recently found great interest as a topic of database research, and restricted ADBMS-functionality is already offered by some products [e. g., 19]. An ADBMS implements "reactive behavior" since it is able to detect situations in the database and beyond and to perform corresponding actions specified by the user. Applications using reactive behavior are freed from performing "polling" in order to [...] ...|$|R
40|$|This paper {{proposes a}} {{strategy}} for parallel composite event detection in <b>active</b> <b>database</b> <b>management</b> <b>systems.</b> Up to now, event detection is sequential and totally synchronized, and thus preserves the timely order of events during the detection process. However, in distributed and extensible applications events may occur simultaneously in parallel unsynchronized streams. In order to adapt composite event detection to those new requirements we relax the timely order of events to a partial order and process parallel event streams. As a consequence, composite event detection must deal with unsynchronized and parallel event compositions. Our approach introduces a hybrid parallelization strategy for composite event detection in <b>Active</b> <b>Database</b> <b>Management</b> <b>Systems</b> that respects the timely order of events. 1 Introduction This paper discusses basic approaches to parallel detection of event compositions. Although it characterizes several techniques {{by means of a}} simple cost model, i [...] ...|$|R
40|$|Active {{database}} {{systems have}} been a hot research topic for quite some years now. However, while "active functionality" has been claimed for many systems, and notions such as "active objects" or "events" are used in many research areas (even beyond database technology), {{it is not yet}} clear which functionality a database management system must support in order to be legitimately considered as an active system. In this paper, we attempt to clarify the notion of "active database management system" as well as the functionality it has to support. We thereby distinguish mandatory features that are needed to qualify as an active database system, and desired features which are nice to have. Finally, we perform a classification of applications of active database systems and identify the requirements for an <b>active</b> <b>database</b> <b>management</b> <b>system</b> in order to be applicable in these application areas. 1 Introduction Active database management systems (ADBMSs) [e. g., 4, 6, 15] have recently become a ve [...] ...|$|E
40|$|Active Database with ECA {{rule has}} been found {{suitable}} to provide a framework to capture database events. Processing a long duration transaction in active database is a complex affair as in case of aborts, {{a large amount of}} the work has to be undone. These transactions are also more vulnerable to failures. The long duration activities can be modeled as long duration transaction where a transaction may be viewed as collection of sub transactions. Saga, a long duration transaction model, can be expressed as a series of sub transactions and provides high degree of concurrency by releasing the locks as early as possible. Transaction Processing System serving cooperative and long duration transaction in <b>Active</b> <b>Database</b> <b>Management</b> <b>System</b> exploits the semantics of transaction to achieve better processor utilization and throughput. Our simulation studies shows quantitative analysis of transaction processing with various degree of cooperation at full and partial aborts in active database. 1...|$|E
40|$|Active {{databases}} {{are usually}} {{centered around the}} notion of Event-Condition-Action (ECA) rules. An ECA rule's action is executed upon detection of an event whenever the rule's condition is true. Events are traditionally described using an event algebra. Virtually every proposed <b>active</b> <b>database</b> <b>management</b> <b>system</b> (ADBMS) brings about a different event algebra. This makes {{it very difficult to}} analyze these proposals in a uniform way by spelling out what they may have in common, or how they may differ. Typically, logic might act as a framework for dealing with these issues. This paper treats events as (somewhat constrained) formulas of the situation calculus, a (second order) logic for reasoning about actions in general, and database updates and transactions in particular. We provide a framework for devising the semantics of complex events in this logic. Such semantics, formulated as theories of a special kind, are used for reasoning about the occurrence and consumption modes, which are an important dimension of events...|$|E
40|$|Abstract: A {{benchmark}} for <b>active</b> <b>database</b> <b>management</b> <b>systems</b> is described. We are {{particularly interested in}} performance tests that help to identify performant and inefficient components. Active functionality that is relevant with respect to performance is identified, {{and a series of}} tests is designed that measure the efficiency of the performance-critical components. Results obtained from running the {{benchmark for}} a concrete system are presented...|$|R
40|$|Although {{much work}} {{in the area of}} <b>Active</b> <b>Database</b> <b>Management</b> <b>Systems</b> (ADBMSs) has been done, it is not yet clear how the {{performance}} of an active DBMS can be evaluated systematically. In this paper, we describe the OBJECTIVE Benchmark for objectoriented ADBMSs, and present experimental results from its implementation in an <b>active</b> <b>database</b> system prototype. OBJECTIVE can be used to identify performance bottlenecks and active functionalities of an ADBMS, and to compare the performance o...|$|R
40|$|We {{describe}} SAMOS, an <b>active</b> object-oriented <b>database</b> <b>management</b> <b>system</b> prototype. SAMOS {{offers a}} powerful rule definition language, including a small yet powerful set of event definition facilities. It {{is able to}} detect primitive and composite events automatically and efficiently. Upon event detection, SAMOS executes rules attached to the occurred events. 1 Introduction <b>Active</b> <b>database</b> <b>management</b> <b>systems</b> (aDBMSs) [1] have recently found great interest as a topic of database research, and restricted aDBMS-functionality is even offered by some commercial relational systems. An aDBMS implements "reactive behavior" {{in that it is}} able to detect situations in the database and to perform corresponding actions specified by the user. Applications that require such reactive behavior are thus freed from performing "polling" in order to detect interesting situations and from encoding reactions (possibly redundantly) in applications. SAMOS 2 [2, 3] is our home-grown active object-oriented datab [...] ...|$|R
40|$|An <b>active</b> <b>database</b> <b>management</b> <b>system</b> (ADBMS) augments a {{conventional}} DBMS with {{the capability to}} automatically react to stimuli occurring within and outside a database. Intuitively, this requires a DBMS to possess some degree of "knowledge". Such knowledge can be provided by incorporating a DBMS {{with a set of}} rules which determine the actions a DBMS should automatically execute when certain events and conditions arise. The advantages of ADBMSs have been well documented. ADBMSs can be used to enforce and manage integrity constraints, provide security in databases, and act as alerters or triggers. However, it has also been noted that determining the effect of interaction between groups of rules is difficult at best. For example, one would like {{to be sure that the}} execution of some chain of rules is guaranteed to terminate; or that a set of rules interacts in a manner that is consistent with the intended semantics conceived by their designer. The purpose of this paper is to [...] ...|$|E
40|$|In {{the past}} decade, the {{business}} community has embraced {{the capabilities of the}} Internet for a multitude of services that involve access to data and information. Of particular concern to these businesses have been the protection and authentication of digital data as it is distributed electronically. This paper proposes a novel approach that combines the reactive rule-based scheme of an <b>active</b> <b>database</b> <b>management</b> <b>system</b> (ADBMS) with the technology of digital watermarking to automatically protect digital data. The ADMBS technology facilitates the establishment of Event-Condition-Action (ECA) rules that define the actions to be triggered by events under certain conditions. These actions consist of the generation of unique watermarks and the tagging of digital data with unique signatures. Watermarking is a technology that embeds, within the digital data’s context, information identifying its owner and/or creator. The integration of these two technologies is a powerful mechanism for protecting digital data in a consistent and formal manner with applications in e-business in establishing and authenticat-ing the ownership of images, audio, video, and other digital materials...|$|E
40|$|Today {{there are}} commercially {{available}} databases with active features, i. e. active mechanisms {{are available for}} development of information systems. But the usage of active mechanisms is low in practice. This {{is due to the}} insufficient methodological support in analysis and design for developing ECA rule based software. It has been proposed {{that one of the most}} suitable ways to tackle this problem is not to develop new methods but to extend existing methodologies. In this thesis an extension of the Object Modeling Technique (OMT) is developed, called OMT-A, which is able to model active rules. The <b>Active</b> <b>Database</b> <b>Management</b> <b>System</b> Manifesto is used as a base for the refinements. OMT-A also supports an extensive set of event operators. Although the refined notation and the new, recommended steps, it is still possible to use OMT-A as if it is the original OMT. OMT-A is compared with OMT and two other extensions of OMT. The comparison revealed some interesting differences, e. g. to what extent OMT has been changed. It also turned out that OMT-A is the only one of the three refined versions having an explicit focus on the dynamic modeling, which is an interesting contribution of this wor...|$|E
40|$|Cataloged from PDF {{version of}} article. Although much {{work in the}} area of <b>Active</b> <b>Database</b> <b>Management</b> <b>Systems</b> (ADBMSs) has been done, it is not yet clear how the {{performance}} of an active DBMS can be evaluated systematically. In this paper, we describe the OBJECTIVE Benchmark for object-oriented ADBMSs, and present experimental results from its implementation in an <b>active</b> <b>database</b> system prototype. OBJECTIVE can be used to identify performance bottlenecks and active functionalities of an ADBMS, and to compare the performance of multiple ADBMSs. (C) 1999 Published by Elsevier Science Inc. All rights reserved...|$|R
40|$|Advances in {{the area}} of <b>active</b> <b>database</b> <b>management</b> <b>systems</b> require the {{development}} of a trigger design theory, which guides the user in the definition off wellbehaving trigger based applications. The development of such a theory requires a formal definition of trigger semantics. This paper describes a framework for such a formalisation of triggers. That is, the parameters of trigger execution and the options for setting them are identified and discussed. Furthermore, the development of a trigger design theory is initiated with the formulation of a sufficient condition for trigger independence...|$|R
40|$|A key {{facility}} of <b>active</b> <b>database</b> <b>management</b> <b>systems</b> {{is their}} ability to detect and react to the occurrence of events. Such events can be either atomic in nature, or specified using an event algebra to form complex events. An important role of an event algebra is to define the semantics of when events become invalid (event consumption). In this paper, we examine a simple event algebra and provide a logical framework for specification of various consumption policies. We then study the problems of equivalence and implication, identifying a powerful class of complex events for which equivalence is decidable. We then demonstrate how extensions of this class lead to undecidability. ...|$|R
40|$|Ankara : Department of Computer Engineering and Information Science and the Institute of Engineering and Science of Bilkent University, 1996. Thesis (Master's) [...] Bilkent University, 1996. Includes bibliographical {{references}} leaves 53 - 56. (Jonventional, passive datal) ases, ex('cute transcictions or queries {{in response}} to the requests from a user or an application program. In contrcist, an <b>Active</b> <b>Database</b> <b>Management</b> <b>System</b> (ADI 3 MS) allows users to specify actions to be executed when some specific evcMits are signaled. ADBMSs ¿ichieve tliis feciture by mecins of rules. Execution of ruh's {{is an important part of}} an ADBMS which may affect the overall performanc'e of the system. Nested transactions are proposed as a rule execution model for ADBMSs. The nested trcinsciction model, in contrast to flat transactions, allows transactions to be started inside some other trcinsactions forming a transaction hierarchy. In this thesis, implementation issues of pcirallel nested transactions, wluM’e all the transactions in the hierarchy may run in pcirallel, aix' discussed for parallel rule execution in ADBMSs. Implementation of nested transactions ha. s I^een performed by extending the flat trcuisaction semantics of OpenOODB using Solaris threads. A formal specification of the proposed (xxec. ution model using ACTA framework is also provided. Saygın, YücelM. S...|$|E
40|$|Event-triggered {{real-time}} {{systems are}} desirable {{to use in}} environments where the arrival of events are hard to predict. The semantics of an event-triggered system is well mapped to the behaviour of an <b>active</b> <b>database</b> <b>management</b> <b>system</b> (ADBMS), specified using event-condition-action (ECA) rules. The benefits of using an active database, such as persistent data storage, concurrency control, timely response to event occurrences etc. highlights {{the need for a}} development method for event-triggered real-time systems using active databases. However, there are problems left to be solved before an ADBMS can be used with confidence in real-time environments. The behaviour of a real-time system must be predictable, which implies a thorough analysed specification with e. g. specified worst case execution times. The predictability requirement is an obstacle for specifying real-time systems as ECA rules, since the rules may affect each other in many intricate ways which makes them hard to analyse. The interaction between the rules implies that {{it is not enough to}} verify the correctness of single rules; an analysis must consider the behaviour of the entire rule set. In this dissertation, an approach for developing active applications is presented. A method is examined which starts with an analysed high-level timed automaton specification and transforms the specified behaviour into an implicitly analysed rule set. For this method to be useful, the transformation from timed automata to rules must preserve the exact behaviour of the high level specification. Hence, the aim of this dissertation is to verify transformations between timed automaton specifications and ECA rules. The contribution of this project is a structured set of general transformations between timed automata specifications and ECA rules. The transformations include both transformations of small timed automata constructs for deterministic environments and formally verified timed automata patterns specifying the behaviour of composite events in recent and chronicle context...|$|E
40|$|Abstract—We propose an {{activity}} {{service as a}} component in cloud computing with the particular novelty that we base this service on the well-defined and proven semantics of <b>Active</b> <b>Database</b> <b>Management</b> <b>Systems</b> (<b>Active</b> DBMS). In addition, we utilize well-known principles of service oriented architectures. Furthermore we aim to provide an integration with a cloud service mediation component to automatically react to changes occurring in the cloud environment {{and in this way}} to imple-ment agility and self management of cloud applications. As contribution of this paper we provide the high-level design of this activity service. This includes architecture, core interfaces and a semantically well-defined rule and execution model, based on extended Active DBMS semantics...|$|R
40|$|This paper {{focuses on}} {{dimensions}} characterizing {{the execution of}} global ECA rules within multi-database systems (MDBS). The MDBS speci cities that a ect rule execution are identi ed and integrated in the dimensions currently used to characterize the active rule behavior. Asaresult, we propose a rule execution taxonomy for global rules. It is composed of dimensions structured inthree levels that concern one rule execution, the execution of modules (sets) of rules and the coordination of distributed rule execution. The dimensions {{should be seen as}} a framework for designing and developing execution engines managing global rules in MDBS. Such an approach is the result of both unbundling <b>active</b> <b>database</b> <b>management</b> <b>systems</b> and using rules in a distributed environment. ...|$|R
40|$|This paper {{uses the}} BEAST {{benchmark}} {{to present the}} first comprehensive performance study of object-oriented <b>active</b> <b>database</b> <b>management</b> <b>systems</b> (ADBMS). BEAST stresses the performance-critical components of active systems: event detection, event composition, rule retrieval, and rule firing. Method invocation events and transactional events are taken into account. Four systems, namely ACOOD, NAOS, Ode, and SAMOS, have been tested with the benchmark tests of BEAST. The performance measurements demonstrate achievements {{in the area of}} <b>active</b> <b>database</b> technology, but also indicate trade-offs (e. g., between performance and functionality). Finally, the benchmark identifies optimizations and provides hints to ADBMS designers about producing systems with adequate performance and functionality — as well as some open issues. © 1998 John Wiley & Sons, Inc. 1...|$|R
40|$|Recent {{work has}} {{suggested}} abductive logic programming as a suitable formalism to represent <b>active</b> <b>databases</b> and intelligent agents. In particular, abducibles and integrity constaints in abductive logic {{programs can be}} used respectively to represent actions and active/reactive rules. One would expect that, in this approach, abductive proof procedures could provide the engine underlying <b>active</b> <b>database</b> <b>management</b> <b>systems</b> and agents. We analyse existing abductive proof procedures and argue that they are inadequate in handling these applications. The inadequacy {{is due to the}} "incorrect" treatment of negative literals in integrity constraints. We propose a new abductive proof procedure and give examples of how this proof procedure can be used to achieve active behaviour in (deductive) databases and proactivity and reactivity in agents...|$|R
40|$|Active {{systems are}} {{emerging}} in many fields, being particularly interesting those like <b>Active</b> <b>Database</b> <b>Management</b> <b>Systems</b> which always provide {{some kind of}} reactive capabilities. <b>Active</b> <b>database</b> systems support mechanisms {{that enable them to}} respond automatically to events that are taking place either inside or outside the <b>database</b> system itself. <b>Active</b> <b>Database</b> Systems (ADBSs) provides a good infrastructure to define and execute active rules. One of the most important current trend concerns the support of detached active rules, i. e., of rules which are executed as separate transactions, running outside of the scope of the transaction which generates the triggering event. Detached rules have important applications in workflow management and global integrity maintenance across transactions. One of the main issues in designing the rule engine for detached rules is determining their scheduling...|$|R
40|$|Current {{activities}} in the Database Technology Research Group at the University of Zurich explore object-oriented and <b>active</b> <b>database</b> <b>management</b> <b>systems</b> as well as architectural issues of DBMS in general. The overall driving force behind our efforts is to better support new and demanding application areas like e. g. CIM or scientific data processing. This paper gives a motivation and brief overview of the various ongoing projects. D G B T Page 2 1 Background and Motivation <b>Database</b> <b>management</b> <b>systems</b> (DBMSs) are off-the-shelf software tools for the secure, reliable and long-term management and convenient use of large integrated multi-user data sets. They {{have come a long}} way of research and development, are widely used today, and have meanwhile proven successful in numerous administrative and business data processing applications. A large variety of high quality products are offered in the marketplace. They provide for application-specific data structuring, retrieval and manipulatio [...] ...|$|R
40|$|Introduction There is a {{great need}} for {{building}} research prototypes of real-time database systems, because existing techniques are often ad hoc or concealed in internal solutions, and few, if any, commercial offerings exist. As real-time applications inherently use reactive mechanisms, and a wealth of results now exists on <b>active</b> <b>database</b> <b>management</b> <b>systems</b> [5], we decided to build DeeDS, a [D]istributed Activ[e], Real-Tim[e] [D]atabase [S]ystem prototype. This research effort is challenging due to the unique combination of reactive mechanisms, distributed technology, dynamic scheduling, and integrated monitoring, under a mixture of soft and hard real-time constraints. To make all this feasible with {{a limited amount of}} man-power, we have taken a deliberate approach of building with existing components where possible, and including only those features absolutely necessary to obtain the benefit of each of the architectural dimensions. At the same time, features...|$|R
40|$|Traditional {{database}} systems {{provide a}} user {{with the ability}} to query and manipulate one database state, namely the current database state. However, in several emerging applications, the ability to analyze "what-if" scenarios in order to reason about the impact of an update (before committing that update) is of paramount importance. Example applications include hypothetical <b>database</b> access, <b>active</b> <b>database</b> <b>management</b> <b>systems,</b> and version <b>management,</b> to name a few. The central thesis of the Heraclitus paradigm is to provide flexible support for applications such as these by elevating deltas, which represent updates proposed against the current database state, to be first-class citizens. Heraclitus[Alg,C] is a database programming language that extends C to incorporate the relational algebra and deltas. Operators are provided that enable the programmer to explicitly construct, combine, and access deltas. Most interesting is the when operator, that supports hypothetical access [...] ...|$|R
40|$|<b>Active</b> <b>Database</b> <b>Management</b> <b>Systems</b> (ADBMSs) {{have been}} {{developed}} to support applications with detecting changes in databases. This includes support for specifying active rules that monitor changes to data and rules that perform some control tasks for the applications. Active rules can also be used for specifying constraints that must be met to maintain the integrity of the data, for maintaining long-running transactions, and for authorization control. This thesis begins with presenting case studies on using ADBMSs for monitoring and control. The areas of Computer Integrated Manufacturing (CIM) and Telecommunication Networks have been studied as possible applications that can use <b>active</b> <b>database</b> technology. These case studies have served as requirements on the functionality that has later been developed in an ADBMS. After an introduction to the area of <b>active</b> <b>database</b> systems it is exemplified how active rules can be used by the applications studied. Several requirements are identified s [...] ...|$|R
40|$|The {{need for}} {{user-defined}} execution orders (or control structures) for rules is well recognized by researchers of <b>active</b> <b>database</b> <b>management</b> <b>systems.</b> Priority-based approaches (e. g., numeric priorities) {{have been used}} to specify a desired control structure among rules. However, {{due to the fact that}} fixed priorities are assigned to rules, independent of different contexts in which they may be triggered, the existing approaches are not able to allow rules to be executed following different control structures when they are triggered by different events. More flexible and expressive control mechanisms are often needed for rules in advanced database applications such as CAD/CAM, CASE, CIM and flexible manufacturing systems. Since rules in database environments are executed in a transaction framework, an expressive transaction model is needed to model complex control structures among rules uniformly. In this work, we separate the event part from the condition-action parts of a rule and assoc [...] ...|$|R
