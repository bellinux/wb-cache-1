47|62|Public
25|$|The FAT {{file system}} {{itself does not}} impose any limits on the depth of a {{subdirectory}} tree {{for as long as}} there are free clusters available to allocate the subdirectories, however, the internal Current Directory Structure (CDS) under MS-DOS/PCDOS limits the <b>absolute</b> <b>path</b> of a directory to 66 characters (including the drive letter, but excluding the NUL byte delimiter), thereby limiting the maximum supported depth of subdirectories to 32, whatever occurs earlier. Concurrent DOS, MultiuserDOS and DRDOS3.31 to 6.0 (up to including the 1992-11 updates) do not store absolute paths to working directories internally and therefore do not show this limitation. The same applies to Atari GEMDOS, but the Atari Desktop does not support more than 8 sub-directory levels. Most applications aware of this extension support paths up to at least 127bytes. FlexOS, 4680OS and 4690OS support a length of up to 127bytes as well, allowing depths down to 60 levels. PalmDOS, DRDOS6.0 (since BDOS7.1) and higher, NovellDOS, and OpenDOS sport a MS-DOS-compatible CDS and therefore have the same length limits as MS-DOS/PCDOS.|$|E
5000|$|... and the <b>absolute</b> <b>path</b> for the {{directory}} as: /users/mark/bobapples ...|$|E
50|$|The {{argument}} to the manifest attribute {{is a relative}} or <b>absolute</b> <b>path</b> to the manifest file.|$|E
50|$|An {{ordinary}} template uses no template modifier in the declaration. These templates {{may contain}} anypan statement, but statements must operate only on <b>absolute</b> <b>paths.</b>|$|R
5000|$|...r (--relative-only): Only output {{information}} about source files with a relative pathname (after source prefix elision). <b>Absolute</b> <b>paths</b> are usually system header files and coverage of any inline functions therein is normally uninteresting.|$|R
5000|$|A related {{problem is}} the use of <b>absolute</b> <b>paths</b> or parent {{directory}} references when creating tar files. Files extracted from such archives will often be created in unusual locations outside the working directory and, like a tarbomb, have the potential to overwrite existing files. However, modern versions of FreeBSD and GNU tar do not create or extract <b>absolute</b> <b>paths</b> and parent-directory references by default, unless it is explicitly allowed with the flag [...] or the option [...] The bsdtar program, which is also available on many operating systems and is the default tar utility on Mac OS X v10.6, also does not follow parent-directory references or symbolic links.|$|R
5000|$|... target_path is the {{relative}} or <b>absolute</b> <b>path</b> {{to which the}} symbolic link should point. Usually the target will exist, although symbolic links may be created to non-existent targets. link_path is {{the path of the}} symbolic link.|$|E
50|$|By contrast, a {{relative}} path starts from some given working directory, avoiding {{the need to}} provide the full <b>absolute</b> <b>path.</b> A filename can be considered as {{a relative}} path based at the current working directory. If the working directory is not the file's parent directory, a file not found error will result if the file is addressed by its name.|$|E
5000|$|Descriptive file structure: Operating {{system files}} are divided up into clearly {{labelled}} drawers (folders). For example, all libraries {{are stored in}} [...] "Libs:" [...] standard virtual device and <b>absolute</b> <b>path</b> finder for [...] "Libs" [...] directory, Fonts are all in [...] "Fonts:" [...] absolute locator, the files for language localization are all stored in [...] "Locale:" [...] and so on.|$|E
5000|$|Linked {{tables in}} Access use <b>absolute</b> <b>paths</b> rather than {{relative}} paths, so the development environment either {{has to have}} the same path as the production environment or a [...] "dynamic-linker" [...] routine can be written in VBA.|$|R
50|$|Limits AutoPlay's {{content search}} to only those folders listed, and their subfolders. The folder names are always taken as <b>absolute</b> <b>paths</b> (a {{path from the}} root {{directory}} of the media) {{whether or not a}} leading slash is used.|$|R
40|$|This release: adds testing {{using the}} testthat package removed the {{dependency}} on doMC {{so that it}} should install on Windows now (where doMC is not available) added the tutorial PDF {{so that it is}} part of the distribution now allows <b>absolute</b> <b>paths</b> now to point to the data adds additional parameter value checkin...|$|R
5000|$|... 4+ bytes {{optional}} extra data strings = short integer type + short unsigned string length (types are Extended Info End = -1; Directory Name = 0; Directory IDs = 1; <b>Absolute</b> <b>Path</b> = 2; AppleShare Zone Name = 3; AppleShare Server Name = 4; AppleShare User Name = 5; Driver Name = 6; Revised AppleShare info = 9; AppleRemoteAccess dialup info = 10) ...|$|E
5000|$|Microsoft Windows shortcuts {{normally}} {{refer to}} a destination by an <b>absolute</b> <b>path</b> (starting from the root directory), whereas POSIX symbolic links can refer to destinations via either an absolute or a relative path. The latter is useful if both the location and destination of the symbolic link share a common path prefix, but that prefix is not yet known when the symbolic link is created (e.g., in an archive file that can be unpacked anywhere).|$|E
50|$|Guglielmini's {{experimental}} {{skill and}} laborious precautions, however, served his followers, Johann Friedrich Benzenberg (1802 and 1804) and Ferdinand Reich (1831), as models, {{and the inner}} agreement of his results was never surpassed. Guglielmini's theory was right, in considering the <b>absolute</b> <b>path</b> of the falling body (apart from {{the resistance of the}} air) as elliptical, or approximately parabolic, and the orbital plane as passing a little north of the vertical, through the center of attraction, while the errors in his formul√¶, afterwards repeated by Olbers, served to incite C. F. Gauss and Laplace to develop the correct theory of relative motion.|$|E
50|$|In Unix-like {{operating}} systems absolute and relative file paths differ from Windows, {{because there are}} no drive letters, Environment variables differ and / (forward slashes) are used as directory separators instead of \ (backslashes). Therefore playlists pointing to <b>absolute</b> <b>paths</b> or media files outside of the folder containing the playlist will only work for one type of operating system - either Windows or Unix-like. URLs work the same for all types.|$|R
50|$|Shebangs must specify <b>absolute</b> <b>paths</b> (or paths {{relative}} to current working directory) to system executables; this can cause problems on {{systems that have}} a non-standard file system layout. Even when systems have fairly standard paths, {{it is quite possible}} for variants of the same operating system to have different locations for the desired interpreter. Python, for example, might be in /usr/bin/python, /usr/local/bin/python, or even something like /home/username/bin/python if installed by an ordinary user.|$|R
40|$|Linguistic {{phenomena}} like pronouns, control constructions, or co-reference {{give rise}} to co-indexed variables in meaning representations. We review three different methods for dealing with co-indexed variables in the output of neural semantic parsing of abstract meaning representations: (a) copying concepts during training and restoring co-indexation in a post-processing step; (b) explicit indexing of co-indexation; and (c) using <b>absolute</b> <b>paths</b> to designate co-indexing. The second method gives the best results and outperforms the baseline by 2. 9 F-score points...|$|R
5000|$|The Windows NT {{family of}} {{operating}} systems {{set up the}} [...] "My Documents" [...] folder in the user's profile folder. In Windows XP and earlier, the path is [...] (alias [...] ) on boot volume. A user can later change the physical location of [...] "My Documents". However, [...] "My Documents" [...] in Windows Explorer (and file dialog boxes) doesn't appear as an <b>absolute</b> <b>path.</b> In addition to translation, the display name of the folder might change depending on owner of the folder. For example, if a user who has logged on to Windows XP and later with user account A look at the personal folders of user account B via Windows Explorer, instead of [...] "My Documents", he sees [...] "B's Documents". This customization is achieved using [...] file.|$|E
5000|$|The {{argument}} separator processing of [...] {{is not the}} only problem with using the [...] program in its default mode. Most Unix tools which are often used to manipulate filenames (for example , , , etc.) are text processing tools. However, Unix path names are not really text. Consider a path name /aaa/bbb/ccc. The /aaa directory and its bbb subdirectory can in general be created by different users with different environments. That means these users could have a different locale setup, and that means that aaa and bbb do not even necessarily have to have the same character encoding. For example, aaa could be in UTF-8 and bbb in Shift JIS. As a result, an <b>absolute</b> <b>path</b> name in a Unix system may not be correctly processable as text under a single character encoding. Tools which rely on their input being text may fail on such strings.|$|E
5000|$|Using {{a similar}} feature, Concurrent DOS, Multiuser DOS, System Manager and REAL/32 will {{dynamically}} assign a floating drive L: to the load {{path of a}} loaded application, thereby allowing applications to refer to files residing in their load directory under a standardized drive letter instead of under a fixed <b>absolute</b> <b>path.</b> This load drive feature makes {{it much easier to}} move software installations on and across disks without having to adapt paths to overlays, configuration files or user data stored in the load directory or subsequent directories. (For similar reasons, the appendage to the environment block associated with loaded applications under MS-DOS/PC DOS 3.0 (and higher) contains a reference to the load path of the executable, however, this consumes more resident memory, and to take advantage of it, support for it must be coded into the executable, whereas DRI's solutions transparently works with any kind of application.) ...|$|E
50|$|This {{can create}} a non-explicit (unobvious) tarbomb, which {{technically}} does not contain files with <b>absolute</b> <b>paths</b> or referring parent directories, but still causes overwriting files outside current directory (for example, archive may contain two files with the same path and filename, first {{of which is a}} symlink to some location outside current directory, and second of which is a regular file; then extracting such archive on some tar implementations may cause writing to the location pointed to by the symlink).|$|R
50|$|Windows {{symbolic}} {{links to}} files are distinct from Windows symbolic links to directories. Unlike an NTFS junction point, an NTFS 3.1 symbolic link can {{also point to}} a file or remote SMB network path. While NTFS junction points support only <b>absolute</b> <b>paths</b> on local drives, the NTFS symbolic links allow linking using relative paths. Additionally, the NTFS symbolic link implementation provides full support for cross-filesystem links. However, the functionality enabling cross-host symbolic links requires that the remote system also support them, which effectively limits their support to Windows Vista and later Windows operating systems.|$|R
25|$|This {{makes an}} <b>absolute</b> or {{relative}} <b>path</b> {{composed of a}} sequence of filenames.|$|R
50|$|The {{form of a}} shebang {{interpreter}} directive is as follows: #!interpreter optional-argin which interpreter is an <b>absolute</b> <b>path</b> to an executable program. The optional argument is a string representing a single argument. White space after #! is optional. In Linux, the file specified by interpreter can be executed if it has the execute right and contains code which the kernel can execute directly, {{if it has a}} wrapper defined for it via sysctl (such as for executing Microsoft EXE binaries using wine), or if it contains a shebang. On Linux and Minix, an interpreter can also be a script. A chain of shebangs and wrappers yields a directly executable file that gets the encountered scripts as parameters in reverse order. For example, if file /bin/A is an executable file in ELF format, file /bin/B contains the shebang #!/bin/A optparam, and file /bin/C contains the shebang #!/bin/B, then executing file /bin/C resolves to /bin/B /bin/C, which finally resolves to /bin/A optparam /bin/B /bin/C.|$|E
5000|$|In {{a similar}} feature, Concurrent DOS, Multiuser DOS, System Manager and REAL/32 will {{dynamically}} assign a drive letter L: to the load {{path of a}} loaded application, thereby allowing applications to refer to files residing in their load directory under a standardized drive letter instead of under an <b>absolute</b> <b>path.</b> This load drive feature {{makes it easier to}} move software installations on and across disks without having to adapt paths to overlays, configuration files or user data stored in the load directory or subsequent directories. (For similar reasons, the appendage to the environment block associated with loaded applications under DOS 3.0 (and higher) contains a reference to the load path of the executable as well, however, this consumes more resident memory, and to take advantage of it, support for it must be coded into the executable, whereas DRI's solution works with any kind of applications and is fully transparent for users as well.) ...|$|E
5000|$|Some {{websites}} {{report a}} [...] "not found" [...] error by returning a standard web page with a [...] "200 OK" [...] response code, falsely {{reporting that the}} page loaded properly; {{this is known as}} a soft 404. Soft 404s are problematic for automated methods of discovering whether a link is broken. Some search engines, like Yahoo, use automated processes to detect soft 404s. Soft 404s can occur as a result of configuration errors when using certain HTTP server software, for example with the Apache software, when an Error Document 404 (specified in a [...]htaccess file) is specified as an <b>absolute</b> <b>path</b> (e.g. [...] ) rather than a relative path (/error.html). This can also be done on purpose to force some browsers (like Internet Explorer) to display a customized 404 error message rather than replacing what is served with a browser-specific [...] "friendly" [...] error message (in Internet Explorer, this behavior is triggered when a 404 is served and the received HTML is shorter than a certain length, and can be manually disabled by the user).|$|E
40|$|A pair of macros was {{developed}} to enhance user analytic process management in interactive SAS sessions. %_mStart(), the preprocessing macro, creates a relative path system independent from hard-coded <b>absolute</b> <b>paths</b> and is executable without program modifications when copied to a different location. In addition, %_mStart() can back up SAS source code automatically while the program is submitted for executing. The backed-up SAS program will have date and time stamp added to the original file name, serving the purpose of version control which is not directly available in a typical analytical SAS environment. Following the end of execution of the program, a post-processing macro %_mEnd() detects error and warning messages in a SAS log window and displays them in a pop-up window...|$|R
50|$|An <b>absolute</b> or full <b>path</b> {{points to}} the same {{location}} in a file system, regardless of the current working directory. To do that, it must include the root directory.|$|R
40|$|Described {{an optical}} hexapod {{metrology}} concept: a) Can {{work together with}} edge sensors; b) Can measure M 1 - M 2 distance and M 1 global curvature. Swept-frequency laser metrology system: a) <b>Absolute</b> optical <b>path</b> length measurement (approx. 1 micron); b) Relative optical path length measurement (approx. nm) Air turbulence is a concern for ground-based telescopes and needs further study...|$|R
50|$|The FAT {{file system}} {{itself does not}} impose any limits on the depth of a {{subdirectory}} tree {{for as long as}} there are free clusters available to allocate the subdirectories, however, the internal Current Directory Structure (CDS) under MS-DOS/PC DOS limits the <b>absolute</b> <b>path</b> of a directory to 66 characters (including the drive letter, but excluding the NUL byte delimiter), thereby limiting the maximum supported depth of subdirectories to 32, whatever occurs earlier. Concurrent DOS, Multiuser DOS and DR DOS 3.31 to 6.0 (up to including the 1992-11 updates) do not store absolute paths to working directories internally and therefore do not show this limitation. The same applies to Atari GEMDOS, but the Atari Desktop does not support more than 8 sub-directory levels. Most applications aware of this extension support paths up to at least 127 bytes. FlexOS, 4680 OS and 4690 OS support a length of up to 127 bytes as well, allowing depths down to 60 levels. PalmDOS, DR DOS 6.0 (since BDOS 7.1) and higher, Novell DOS, and OpenDOS sport a MS-DOS-compatible CDS and therefore have the same length limits as MS-DOS/PC DOS.|$|E
40|$|The present {{consideration}} of optimal windshear-penetration flight trajectories in a vertical plane gives {{attention to the}} cases of either mere angle-of-attack control, with predetermined power setting, or both angle-of-attack and power setting controls. Inequality constraints are imposed on the angle-of-attack, the power setting, and their time derivatives. The performance index being minimized measures flight trajectory deviation from a nominal trajectory. Time is free, <b>absolute</b> <b>path</b> inclination at touchdown is specified, and touchdown velocity and distance are subject to upper and lower bounds. Three power settings are investigated...|$|E
40|$|Abstract: This paper {{describes}} a channel sounder based on correlation of a maximum-length sequence. The sounder {{is designed for}} the evaluation of the <b>absolute</b> <b>path</b> loss and multipath delay spread of a fixed wireless local loop channel at 5. 5 GHz. The sounder uses two stage down conversion with the second stage and subsequent processing being done in software, resulting in relatively simple hardware. Following explanation of the motivation for the work, a brief review of channel sounding techniques is given. The maximum-length sequence method is explained and the sounding system described. The method used for amplitude distortion correction. is summarised. Finally, some example results are presented. 1. MOTIVATION FOR TH...|$|E
25|$|Support of UNIX-style {{symbolic}} links. Previous Windows versions had {{support for}} a type of cross-volume reparse points known as junction points and hard links. However, junction points could be created only for directories and stored <b>absolute</b> <b>paths,</b> whereas hardlinks could be created for files but were not cross-volume. NTFS symbolic links can be created for any object and are cross-volume, cross-host (work over UNC paths), and store relative paths. However, the cross-host functionality of symbolic links does not work over the network with previous versions of Windows or other operating systems, only with computers running Windows Vista or a later Windows operating system. Symbolic links can be created, modified and deleted using the Mklink utility which is included with Windows Vista. Microsoft has published some developer documentation on symbolic links in the MSDN documentation. In addition, Windows Explorer is now symbolic link-aware and deleting a symbolic link from Explorer just deletes the link itself and not the target object. Explorer also shows the symbolic link target in the object's properties and shows a shortcut icon overlay on a junction point.|$|R
40|$|AbstractIn this note, {{we define}} an {{abstract}} file {{system as a}} partial function from (<b>absolute)</b> <b>paths</b> to data. Such a file system determines the set of valid paths. It allows the file system to be read and written at a valid path, and it allows the system to be modified by the Unix operations for removal (rm), making of directories (mkdir), and moving (mv). We present abstract definitions (axioms) for these operations. This specification is refined towards a pointer implementation. To mitigate the problems attached to partial functions, we do this in two steps. First a refinement towards a pointer implementation with total functions, followed by one that allows partial functions. These two refinements are proved correct {{by means of a}} number of invariants. Indeed, the insight gained mainly consists of the invariants of the pointer implementation that are needed for the refinement functions. Finally, each of the three specification levels is enriched with a permission system for reading, writing, or executing, and the refinement relations between these permission systems are explored...|$|R
5000|$|Support of UNIX-style {{symbolic}} links. Previous Windows versions had {{support for}} a type of cross-volume reparse points known as junction points and hard links. However, junction points could be created only for directories and stored <b>absolute</b> <b>paths,</b> whereas hardlinks could be created for files but were not cross-volume. NTFS symbolic links can be created for any object and are cross-volume, cross-host (work over UNC paths), and store relative paths. However, the cross-host functionality of symbolic links does not work over the network with previous versions of Windows or other operating systems, only with computers running Windows Vista or a later Windows operating system. Symbolic links can be created, modified and deleted using the Mklink utility which is included with Windows Vista. Microsoft has published some developer documentation on symbolic links in the MSDN documentation. In addition, Windows Explorer is now symbolic link-aware and deleting a symbolic link from Explorer just deletes the link itself and not the target object. Explorer also shows the symbolic link target in the object's properties and shows a shortcut icon overlay on a junction point.|$|R
