0|10000|Public
5000|$|The SPICE project {{developed}} an extended <b>Use</b> <b>Case</b> <b>named</b> [...] "split terminal" [...] where a user on a PC can authenticate with their mobile phone: http://www.ist-spice.org/demos/demo3.htm. The NAF was developed on SimpleSAMLPhP and a Firefox extension {{was developed to}} process the GBA digest authencation request from the BSF. Bluetooth SIM Access Profile was used between the Firefox browser and the mobile phone. Later a partner developed a [...] "zero installation" [...] concept.|$|R
30|$|In {{the next}} section, taking <b>as</b> <b>use</b> <b>case</b> the H. 264 application, the energy {{consumption}} of the OS services will be determined following the approach described previously.|$|R
50|$|The US National Highway Traffic Safety Administration’s (NHTSA) report “Vehicle-to-Vehicle Communications: Readiness of V2V Technology for Application“ {{lists the}} initial <b>use</b> <b>cases</b> envisioned for the US. European {{standardisation}} body ETSI and SAE published standards {{on what they}} see <b>as</b> <b>use</b> <b>cases.</b> Early <b>use</b> <b>cases</b> focus on road safety and efficiency.|$|R
30|$|Statistical {{analyses}} were {{run in the}} group of students <b>as</b> a whole <b>using</b> the metrics defined above. Furthermore, the interactions of students that performed similarly to the calculated GTS metrics were individually analyzed <b>as</b> <b>use</b> <b>cases.</b>|$|R
30|$|Advice use case: The <b>use</b> <b>case</b> {{template}} {{describes the}} variabilities <b>as</b> advice <b>use</b> <b>cases.</b> The advice <b>use</b> <b>cases</b> capture crosscutting requirements and are {{defined in the}} same form <b>as</b> normal <b>use</b> <b>cases,</b> but they may only {{have some of the}} <b>use</b> <b>case</b> sections. The linking of advice <b>use</b> <b>cases</b> with affected base <b>use</b> <b>cases</b> is based on syntactical matching of joinpoints and pointcut expressions.|$|R
40|$|Agile teams {{commonly}} use User Stories, {{conversations with}} Customers, and Test Cases to gather requirements. Some agile teams {{like to add}} other artifacts, such <b>as</b> <b>Use</b> <b>Cases</b> to provide more detail to the agile requirements. This paper {{presents the results of}} a controlled experiment aimed to find evidence that <b>Use</b> <b>Cases</b> could help agile requirements, and, indirectly, to find if agile requirements techniques are sufficient. In the study, subjects were given requirements for three maintenance tasks <b>as</b> <b>Use</b> <b>Cases,</b> <b>as</b> agile requirements, or both. We found that subjects <b>using</b> <b>Use</b> <b>Cases</b> spent less time understanding requirements in contrast to subjects not <b>using</b> <b>Use</b> <b>Cases.</b> In addition the presence of the <b>Use</b> <b>Cases</b> helped subjects to ask better questions to the On-site Customer. However, we could not determine if subjects <b>using</b> <b>Use</b> <b>Cases</b> understood the requirements better. We conclude that the inclusion of <b>Use</b> <b>Cases</b> in agile requirements could benefit agile teams. 1...|$|R
5000|$|Pragmatic Aspect : This aspect {{concerns}} {{itself with}} the actors, their role, the organization {{and the distribution of}} responsibilities in the processes. Praxeme recommends describing the elementary work situations <b>as</b> <b>use</b> <b>cases,</b> this form of representation providing the link with the IT design.|$|R
50|$|The {{quality of}} VCA in the {{commercial}} setting is difficult to determine. It depends on many variables such <b>as</b> <b>use</b> <b>case,</b> implementation, system configuration and computing platform. Typical methods to get an objective idea of the quality in commercial settings include independent benchmarking and designated test locations.|$|R
40|$|The main {{objective}} of Object Oriented Analysis (OOA) is {{to capture a}} Complete, Unambiguous and Consistent picture of the requirement of system and what system must do to satisfy the user requirement and needs. This is accomplished by constructing several models of system such <b>as</b> <b>use</b> <b>case</b> model, class model. To take out the basic building blocks such <b>as</b> actor, <b>use</b> <b>cases,</b> candidate classes, their attributes and relationships to construct OOA models from the unstructured textual requirement specification document expressed in English like natural language {{is not an easy}} task. There are plenty Nouns (Real Time Entities or Classes), Noun...|$|R
40|$|<b>Use</b> <b>cases</b> defined <b>as</b> a tabular text are {{a widely}} used {{technique}} {{in the early}} phases of system development. However, {{there is a lack}} of approaches to derive test objectives and test <b>cases</b> from these <b>use</b> <b>cases.</b> This paper introduces a set of processes that allow the generation of test objectives <b>as</b> <b>use</b> <b>case</b> scenarios and operational vari-ables. Although <b>use</b> <b>cases</b> are expressed in a narrative style, the process has been automated with two supporting tools...|$|R
40|$|The Requirements <b>Use</b> <b>case</b> Tool (RUT) {{provides}} {{assistance to}} managers, customers, and developers {{in assessing the}} quality of <b>use</b> <b>cases.</b> In addition, RUT serves as a database repository for requirements developed <b>as</b> <b>use</b> <b>cases.</b> To ensure consistency, the tool provides a standard <b>use</b> <b>case</b> template {{to be used for}} all <b>use</b> <b>case</b> entry into the repository. Furthermore, RUT provides integration with Rational Rose, the industry-standard tool for developing UML diagrams. The tool also provides a series of metrics useful for calculating information about the relationships among the captured <b>use</b> <b>cases.</b> RUT performs <b>use</b> <b>case</b> evaluation by searching text and identifying risk indicators such as incomplete or weak phrases. The Requirements <b>Use</b> <b>case</b> Tool is a valuable resource for collecting, evaluating, and maintaining software requirements gathered <b>as</b> <b>use</b> <b>cases.</b> RUT is a web-based, multi-user application that provides project team members with the ability to create, view, and modify <b>use</b> <b>cases</b> and related information for a particular project. The “dashboard ” view provided by the tool gives managers and others the ability to quickly ascertain the status of a project by viewing various <b>use</b> <b>case</b> metrics. The tool was developed using multiplatform, open source technologies (PHP and MySQL). All features of the Requirements <b>Use</b> <b>case</b> Tool described above will be demonstrated at the conference...|$|R
40|$|Abstract: Within the {{requirements}} phase of many projects, functional requirements are often documented <b>as</b> <b>Use</b> <b>Cases.</b> Within SOA projects, however, these <b>Use</b> <b>Cases</b> {{are not sufficient}} since they do not represent a global control flow resembling the one of a business process- an integral aspect of a SOA. Instead they are written {{from the point of}} view of a single actor. This makes an additional step necessary: Converting the <b>Use</b> <b>Cases</b> to business processes, which is – if done manually – a tremendous task. To reduce this effort wasted on conversion, this paper proposes a method for generating business processes – expressed as EPC – <b>as</b> from <b>Use</b> <b>Cases.</b> Thereby, the need for extensive business process modelling after gathering {{the requirements}} is eliminated. ...|$|R
5000|$|The {{other way}} of {{describing}} a misuse <b>case,</b> is by <b>using</b> a separate template for this purpose only. It is suggested to inherit some of the field from <b>use</b> <b>case</b> description (<b>Name,</b> Summary, Author and Date). It also adapts the fields Basic path and Alternative path, where they now describe the paths of the misuse cases instead of the <b>use</b> <b>cases.</b> In addition to there, it is proposed to use several other fields too: ...|$|R
5000|$|Note {{that the}} {{theoretical}} limit for a conventional furnace's instantaneous efficiency is 100%, whereas a heat pump used for building heating may exceed 100%. For example, a COP of 1.5 {{is equivalent to}} 150%. Heat pumps are readily available for electric and gas sources. So from a theoretical perspective, in some <b>use</b> <b>cases</b> the <b>name</b> [...] "efficiency" [...] may be misleading.|$|R
40|$|Abstract. <b>Use</b> <b>case</b> {{modeling}} {{is commonly}} applied to document requirements. <b>Use</b> <b>case</b> specifications (UCSs) are usually structured, unrestricted textual documents complying {{with a certain}} template. However, because they remain essentially textual, ambiguities are inevitable. In our previous work, we proposed a new <b>use</b> <b>case</b> modeling approach, <b>named</b> <b>as</b> Restricted <b>Use</b> <b>Case</b> Modeling (RUCM), which is composed {{of a set of}} well-defined restriction rules and a new template. The goal was to reduce ambiguity and facilitate automated analysis. In our works, RUCM has been systematically and empirically evaluated through case studies to be easy to apply and leads to higher quality of UML analysis models. In this paper, we modeled the Crisis Management System (CMS) <b>case</b> study <b>using</b> RUCM and our experience proved that RUCM is easy to apply and sufficient to capture the requirements provided for the case study...|$|R
40|$|Software Defined Networking (SDN) {{is based}} {{basically}} on three features: centralization {{of the control}} plane, programmability of network functions and traffic engineering. The network function migration poses interesting problems {{that we try to}} expose and solve in this paper. Content Distribution Network virtualization is presented <b>as</b> <b>use</b> <b>case.</b> Comment: 6 pages, 8 figure...|$|R
40|$|The {{target of}} the project is to explore spatial {{awareness}} in situated agents. The concepts are tested with exhibition layout <b>as</b> <b>use</b> <b>case</b> and subsumption architecture as cognitive model. The agents in the implementation control the location and orientation of exhibits in a collaborative environment. The paper describes the implementation details and discusses the outcome. ...|$|R
50|$|While Chef was {{primarily}} {{created as a}} means to assist with IT Automation/Configuration Management/Infrastructure <b>as</b> Code <b>use</b> <b>cases,</b> it has expanded to serve additional <b>use</b> <b>cases</b> <b>as</b> well.|$|R
40|$|Abstract. The {{target of}} the project is to explore spatial {{awareness}} in situated agents. The concepts are tested with exhibition layout <b>as</b> <b>use</b> <b>case</b> and subsumption architecture as cognitive model. The agents in the implementation control the location and orientation of exhibits in a collaborative environment. The paper describes the implementation details and discusses the outcome. 1...|$|R
50|$|These initial {{versions}} {{combined the}} Rational Software organisation's extensive field experience building object-oriented systems (referred to by Rational field staff as the Rational Approach) with Objectory's guidance on practices such <b>as</b> <b>use</b> <b>cases,</b> and incorporated extensive content from Jim Rumbaugh's Object Modeling Technology (OMT) approach to modeling, Grady Booch's Booch method, {{and the newly}} released UML 0.8.|$|R
40|$|A {{process of}} {{high-level}} run-time architecture extraction is described through {{a case study}} of an existing object-oriented system. The process uses detailed UML models such <b>as</b> <b>use</b> <b>cases,</b> sequence diagrams and component diagrams. A significant portion of the process deals with the problems of identification of high level roles from <b>use</b> <b>cases</b> and extraction of application -specific connectors from a set of sequence diagrams. The extracted high-level architecture is described through Component and Connector views...|$|R
40|$|In {{this paper}} we {{describe}} <b>use</b> <b>cases</b> and user requirements for ambient intelligence applications on personal mobile devices. Wireless connections to tags and sensors provide mobile applications with different identification, measurement and context data. Mobile applications that utilise local connectivity share many common patterns. We have identified these common patterns and describe them <b>as</b> <b>use</b> <b>cases</b> related to physical selection, activating applications, sensing and context-awareness. Based on user and expert evaluations of usage scenarios we also present user {{requirements for the}} <b>use</b> <b>cases.</b> 1...|$|R
40|$|The {{purpose of}} this {{document}} is to specify {{the requirements of the}} University Unified Inventory System, of the UIfA. The Team of Analysts used a Feedback Waterfall approach to collect the requirements. UML diagrams, such <b>as</b> <b>Use</b> <b>case</b> diagrams, Block Diagrams, Domain Models, and interface prototypes are some of the tools employed to develop the present document. Comment: 86 pages, 24 figure...|$|R
40|$|As one of {{the most}} {{fundamental}} security mechanisms of resources, Access Control Policies (ACP) specify which principals such as users or processes have access to which resources. Ensuring the correct specification and enforcement of ACPs is crucial to prevent security vulnerabilities. However, in practice, ACPs are commonly written in Natural Language (NL) and buried in large documents such as requirements documents, not directly checkable for correctness. It is very tedious and error-prone to manually identify and extract ACPs from these NL documents, and validate NL functional requirements such <b>as</b> <b>use</b> <b>cases</b> against ACPs for detecting inconsistencies. To address these issues, we propose a novel approach, called Text 2 Policy, that automatically extractsACPsfrom NLdocumentsandextractsaction steps from NL scenario-based functional requirements (such <b>as</b> <b>use</b> <b>cases).</b> From the extracted ACPs, Text 2 Policy automatically generates checkable ACPs in specification languages such as XACML. From the extracted action steps, Text 2 Policy automatically derives access control requests that can be validated against specified or extracted ACPs to detectinconsistencies. ToassesstheeffectivenessofText 2 Policy, we conductthreeevaluationsonthecollected ACP sentences from 18 sources and 37 <b>use</b> <b>cases</b> from anopensource project called iTrust (including 448 use-case sentences). The results show that Text 2 Policy effectively extracts ACPs from NL documents and action steps from <b>use</b> <b>cases</b> for detecting issues in the <b>use</b> <b>cases.</b> 1...|$|R
40|$|Abstract: This {{research}} proposes {{an automated}} OWL product domain ontology (PDO) evolution by enhancing an existing ontology evolution concept. Its manual activities are eliminated by formulating an adaptation {{strategy for the}} conceptual aspects of an automated PDO evolution and establishing a feedback cycle. The adaptation strategy was validated / firstly “instantiated ” by applying it to a realworld conversational content-based e-commerce recommender <b>as</b> <b>use</b> <b>case.</b> ...|$|R
40|$|In the paper, {{using of}} UML {{behavioural}} diagrams such <b>as</b> <b>use</b> <b>cases,</b> state machines, activity diagrams and interactions during Information system development is analyzed. The methodology of using these diagrams for creation of class diagrams and other specifications needed for generating code is proposed. The importance of state machines is highlighted in this methodology. MagicDraw UML tool {{is used for}} modeling and code generation...|$|R
40|$|The Telecommunications industry's demand hás grown immensely for {{cost-effective}} {{methods for}} software validation & verification of mobile products. Semi-formal methods such <b>as</b> <b>Use</b> <b>Case</b> Maps and formal {{methods such as}} SDL are starting to be widely used. In this paper we show how to integrate these two techniques in terms ofquickly validating high levei designs in SDL against desired abstract behaviours in UCM notation...|$|R
30|$|The {{concept of}} crowd {{management}} <b>as</b> a <b>use</b> <b>case</b> for participatory smart city technology including a requirements analysis based on several real life deployments of different prototypes.|$|R
50|$|All of {{the above}} can be {{summarized}} <b>as</b> Enterprise Optimization <b>use</b> <b>cases.</b>|$|R
50|$|Once the {{previous}} four elements have been calculated, the final size estimate can be calculated. This final number is known <b>as</b> the <b>Use</b> <b>Case</b> Points or UCP for a software development project.|$|R
40|$|Abstract. The testing {{stage for}} a product {{belonging}} to a family is a crucial and expensive part of development. Yet the derivation of test cases for product families has so far received little attention. We focus here on test planning, {{that is the most}} critical part of testing. We outline a simple methodology we are developing for this purpose, called PLUTO, relying on the early requirements specification expressed <b>as</b> <b>Use</b> <b>Cases.</b> We also overview the related literature. ...|$|R
40|$|Abstract. The {{transition}} from requirements expressed in natural language (NL) to a structured, formalized specification {{is an important}} issue to support requirements analysis and to generate an (initial) analysis model. <b>Use</b> <b>case</b> diagrams are commonly used to capture system requirements <b>as</b> <b>use</b> <b>cases,</b> relationships among them and interactions with actors. Using template and restriction rules is a common feature of NL analysis for reducing imprecision and incompleteness in <b>use</b> <b>case</b> specifications. <b>Use</b> <b>case</b> diagrams, together with template and restriction rules, form a <b>use</b> <b>case</b> modeling approach, which helps achieve better understandability of <b>use</b> <b>cases</b> and improved quality of derived analysis models. In this paper, we extend a general <b>use</b> <b>case</b> approach (RUCM) for Cyber-Physical Systems (CPSs) with specific characteristics of being network-based, distributed and real-time embedded (NDRTE), which usually contains redundant/crosscutting properties. Two RUCM extensions are proposed to achieve this objective: RUCM-NDRTE and AO-RUCM (for modeling crosscutting behaviors). ...|$|R
40|$|The <b>Use</b> <b>Case</b> Model {{work product}} {{describes}} the functional {{requirements of the}} system under development. The model uses graphical symbols (see Figure 3) and text to specify how users in specific roles will use the system (i. e., <b>use</b> <b>cases).</b> The textual descriptions describing the <b>use</b> <b>cases</b> are from a user’s point of view; they do not describe how the system works internally or its internal structure or mechanisms. The <b>Use</b> <b>Case</b> Model is described by the following constructs (see Figure 1) : Actors (name, description, status, subclass, superclass, and associations) <b>Use</b> <b>cases</b> (number, subject area, business event, name, overview, preconditions, description, associations, inputs, outputs, traceable to, usability index, and notes) Communication-associations between actors and <b>uses</b> <b>cases</b> Relationships between <b>use</b> <b>cases</b> (same <b>as</b> <b>use</b> <b>case</b> associations) Termination outcomes Conditions affecting termination outcomes Termination outcomes decision table <b>Use</b> <b>case</b> scenarios (number, termination outcome, description, and notes) Problem domain concept definitions System steps decision table Flow of events table System sequence diagram Number: Subject Area...|$|R
30|$|Managing a Social Detection System {{requires}} {{interaction between}} different external agents (people or systems), represented in Fig. 2 <b>as</b> UML <b>use</b> <b>cases.</b> Here, interacting agents are called actors and {{are represented by}} the “stick man” icon, whereas functionalities available to actors are represented by an oval shape. An actor can communicate with the system through an association to a functionality, represented <b>as</b> a link. <b>Use</b> <b>cases</b> have been related to other <b>use</b> <b>cases</b> by the extend and include relationships, allowing to increment a <b>use</b> <b>case</b> and to specify {{a piece of the}} <b>use</b> <b>case</b> in a modular way, respectively. A relationship is represented as a dashed directed arrow, whose direction denotes dependency.|$|R
40|$|Identification of {{cross-cutting}} concerns (Aspects) in {{the earliest}} phases of software development has gained in popularity over recent years. Many approaches have been suggested for identifying and representing Aspects in abstraction and design structures. Since these approaches are still relatively immature, shortcomings such as overlooking or not properly locating Aspects have been noted in almost all of these approaches. This paper discusses some of these methods and suggested approaches, and provides a constructive critique on Aspects <b>as</b> <b>Use</b> <b>Cases,</b> View-Point based system of identifying Aspects, and <b>Use</b> <b>Cases</b> <b>as</b> Concerns. This paper also suggests a model-oriented approach for identifying and representing Aspects throughout the development life cycle...|$|R
40|$|Requirements {{traceability}} is {{a challenge}} for modern software projects where task dependencies and technical expertise are spread across system developers, abstract model representations such <b>as</b> <b>use</b> <b>cases,</b> and a myriad of code artefacts. This paper presents an approach that monitors the navigation trails left by developers when building code artefacts to realise project <b>use</b> <b>cases.</b> These trails are analysed to generate a relevance ranking of entities that constitute a traceability link between <b>uses</b> <b>cases</b> and code artefacts and the developers responsible for them. Investigation in a software development scenario shows that a range of <b>use</b> <b>case</b> traceability questions can be answered through visualisations which present ordered relevance lists of the entities associated with <b>use</b> <b>cases</b> and {{by the use of}} trace graphs where the size of nodes show the importance, or ’information centrality’, of system entities. 1...|$|R
