15|17|Public
25|$|Hindi {{was first}} {{recommended}} {{to be an}} <b>apt</b> <b>language</b> for official purposes in India by a committee headed by Motilal Nehru in 1928. This move was opposed by people and politicians of Tamil Nadu, since they considered {{that it would make}} them second class citizens when compared to that of native Hindi speaking North Indians.|$|E
60|$|More learned than soundly wise--better {{acquainted with}} men's minds {{than with the}} moral {{principles}} that ought to regulate them, he had still powers of conversation which I have rarely seen equalled, never excelled. Of this his manner implied some consciousness; at least, it appeared {{to me that he}} had studied hard to improve his natural advantages of a melodious voice, fluent and happy expression, <b>apt</b> <b>language,</b> and fervid imagination. He was never loud, never overbearing, never so much occupied with his own thoughts as to outrun either the patience or the comprehension of those he conversed with. His ideas succeeded each other with the gentle but unintermitting flow of a plentiful and bounteous spring; while I have heard those of others, who aimed at distinction in conversation, rush along like the turbid gush from the sluice of a mill-pond, as hurried, and as easily exhausted. It was late at night ere I could part from a companion so fascinating; and, when I gained my own apartment, it cost me no small effort to recall to my mind the character of Rashleigh, such as I had pictured him previous to this tete-a-tete.|$|E
6000|$|One {{of these}} examples, {{that of the}} sale of poisons, opens a new question; the proper limits {{of what may be}} called the {{functions}} of police; how far liberty may legitimately be invaded for the prevention of crime, or of accident. It is one of the undisputed functions of government to take precautions against crime before it has been committed, as well as to detect and punish it afterwards. The preventive function of government, however, is far more liable to be abused, to the prejudice of liberty, than the punitory function; for there is hardly any part of the legitimate freedom of action of a human being which would not admit of being represented, and fairly too, as increasing the facilities for some form or other of delinquency. Nevertheless, if a public authority, or even a private person, sees any one evidently preparing to commit a crime, they are not bound to look on inactive until the crime is committed, but may interfere to prevent it. If poisons were never bought or used for any purpose except the commission of murder, it would be right to prohibit their manufacture and sale. They may, however, be wanted not only for innocent but for useful purposes, and restrictions cannot be imposed in the one case without operating in the other. Again, it is a proper office of public authority to guard against accidents. If either a public officer or any one else saw a person attempting to cross a bridge which had been ascertained to be unsafe, and there were no time to warn him of his danger, they might seize him and turn him back, without any real infringement of his liberty; for liberty consists in doing what one desires, and he does not desire to fall into the river. Nevertheless, when there is not a certainty, but only a danger of mischief, no one but the person himself can judge of the sufficiency of the motive which may prompt him to incur the risk: in this case, therefore (unless he is a child, or delirious, or in some state of excitement or absorption incompatible with the full use of the reflecting faculty), he ought, I conceive, to be only warned of the danger; not forcibly prevented from exposing himself to it. Similar considerations, applied to such a question as the sale of poisons, may enable us to decide which among the possible modes of regulation are or are not contrary to principle. Such a precaution, for example, as that of labelling the drug with some word expressive of its dangerous character, may be enforced without violation of liberty: the buyer cannot wish not to know that the thing he possesses has poisonous qualities. But to require in all cases the certificate of a medical practitioner, would make it sometimes impossible, always expensive, to obtain the article for legitimate uses. The only mode apparent to me, in which difficulties may be thrown in the way of crime committed through this means, without any infringement, worth taking into account, upon the liberty of those who desire the poisonous substance for other purposes, consists in providing what, in the <b>apt</b> <b>language</b> of Bentham, is called [...] "preappointed evidence." [...] This provision is familiar to every one in the case of contracts. It is usual and right that the law, when a contract is entered into, should require as the condition of its enforcing performance, that certain formalities should be observed, such as signatures, attestation of witnesses, and the like, in order that in case of subsequent dispute, there may be evidence to prove that the contract was really entered into, and that {{there was nothing in the}} circumstances to render it legally invalid: the effect being, to throw great obstacles in the way of fictitious contracts, or contracts made in circumstances which, if known, would destroy their validity. Precautions of a similar nature might be enforced in the sale of articles adapted to be instruments of crime. The seller, for example, might be required to enter into a register the exact time of the transaction, the name and address of the buyer, the precise quality and quantity sold; to ask the purpose for which it was wanted, and record the answer he received. When there was no medical prescription, the presence of some third person might be required, to bring home the fact to the purchaser, in case there should afterwards be reason to believe that the article had been applied to criminal purposes. Such regulations would in general be no material impediment to obtaining the article, but a very considerable one to making an improper use of it without detection.|$|E
50|$|Douglas T Ross, 77, American {{who created}} <b>APT</b> (programming <b>language)</b> and led MIT CAD project.|$|R
5000|$|Douglas Taylor [...] "Doug" [...] Ross (21 December 1929 - 31 January 2007) was an American {{computer}} scientist pioneer, and Chairman of SofTech, Inc. [...] He is most famous for originating the term CAD for computer-aided design, {{and is considered}} to be the father of Automatically Programmed Tools (<b>APT)</b> a <b>language</b> to drive numerically controlled manufacturing.|$|R
40|$|Software {{produces}} cutter location {{files for}} numerically-controlled machine tools. APT, acronym for Automatically Programed Tools, is among {{most widely used}} software systems for computerized machine tools. APT developed for explicit purpose of providing effective software system for programing NC machine tools. APT system includes specification of <b>APT</b> programing <b>language</b> and language processor, which executes APT statements and generates NC machine-tool motions specified by APT statements...|$|R
5000|$|Students {{encouraged}} {{to use the}} <b>apt</b> <b>language</b> and terminologies of the subject, improving their knowledge on the discipline.|$|E
5000|$|... 1978. [...] " [...] Origins of the <b>APT</b> <b>Language</b> for Automatically Programmed Tools". In: ACM SIGPLAN Notices, Vol. 13, No. 8, August 1978 ...|$|E
50|$|NC Graphics {{focused on}} {{developing}} a surface modelling software product that used polynomial mathematics and {{was driven by}} human-readable input commands based on the <b>APT</b> <b>language.</b> The initial product was called Polyapt and was sold initially to manufacturing companies that specialised in producing lost wax dies for aerofoil and turbine engine blades.|$|E
50|$|Starting in September, Ross and Pople {{outlined}} a language for machine control {{that was based}} on points and lines, developing this over several years into the <b>APT</b> programming <b>language.</b> In 1957 the Aircraft Industries Association (AIA) and Air Material Command at Wright-Patterson Air Force Base joined with MIT to standardize this work and produce a fully computer-controlled NC system. On 25 February 1959 the combined team held a press conference showing the results, including a 3D machined aluminum ash tray that was handed out in the press kit.|$|R
60|$|I find my <b>language</b> <b>apt</b> to fail me; {{but this}} is very like to be fancy, and I must be {{cautious}} of giving way to it. This cautions me against public exertion much more than Cadell's prognostications, which my blood rises against, and which are ill calculated to keep me in restraint. We dozed through a gloomy day, being the dullest of all possible thaws.|$|R
5000|$|The film {{opened to}} {{positive}} reviews from critics, with the critic from The Hindu citing that Crazy Mohan's dialogue was [...] "the mainstay", describing {{the film as}} [...] "completely entertaining". The reviewer also praised the film's performances claiming that [...] "with suitable slapstick, <b>apt</b> body <b>language</b> and timing and modulation that tickle, the veteran (Kamal Haasan) makes a mark yet again." [...] Furthermore, reviewers from Screen magazine dubbed the film as a [...] "clean comic-entertainer", adding that [...] "director KS Ravikumar deserves a pat for weaving out a good screenplay based on Kamal Haasan’s story idea and creating a laugh riot". Tulika of Rediff labelled the film as [...] "a barrel of laughs".|$|R
50|$|Hindi {{was first}} {{recommended}} {{to be an}} <b>apt</b> <b>language</b> for official purposes in India by a committee headed by Motilal Nehru in 1928. This move was opposed by people and politicians of Tamil Nadu, since they considered {{that it would make}} them second class citizens when compared to that of native Hindi speaking North Indians.|$|E
50|$|Dating {{from the}} 1970s, medical professionals, sociologists, anthropologists and other {{commentators}} noted the increasing visibility {{of a wide}} variety of health practices that had neither derived directly from nor been verified by biomedical science. Since that time, those who have analyzed this trend have deliberated over the most <b>apt</b> <b>language</b> with which to describe this emergent health field. A variety of terms have been used, including heterodox, irregular, fringe and alternative medicine while others, particularly medical commentators, have been satisfied to label them as instances of quackery. The most persistent term has been alternative medicine but its use is problematic as it assumes a value-laden dichotomy between a medical fringe, implicitly of borderline acceptability at best, and a privileged medical orthodoxy, associated with validated medico-scientific norms. The use of the category of alternative medicine has also been criticized as it cannot be studied as an independent entity but must be understood in terms of a regionally and temporally specific medical orthodoxy. Its use can also be misleading as it may erroneously imply that a real medical alternative exists. As with near-synonymous expressions, such as unorthodox, complementary, marginal, or quackery, these linguistic devices have served, in the context of processes of professionalisation and market competition, to establish the authority of official medicine and police the boundary between it and its unconventional rivals.|$|E
50|$|ICAM {{sought to}} develop {{procedures}} (IDEF) processes (Group Technology) and software (CAD/CAM) that would integrate all operations in Aerospace manufacturing and thus greatly reduce costs. Earlier the USAF Manufacturing Technology Program had funded the Automatically Programmed Tools (<b>APT)</b> <b>language</b> for programming Numerically Controlled (NC) machine tools. To close the data gap between parts design and manufacturing, {{one of the}} ICAM goals was to develop CAD software that would automatically generate numerical control programs for the very complex Computer Numerically Controlled (CNC) machine tools used throughout the Aerospace industry. A serious issue was the incompatibility of data produced by the many CAD systems in use at the time. USAF/ICAM called {{a meeting at the}} National Bureau of Standards (now known as National Institute of Standards and Technology or NIST) in 1978 to address this issue. Boeing offered to sell its CAD translation software to USAF for one United States dollar. USAF accepted this offer and contracted NIST to bring together a group of users and vendors, including Boeing, General Electric, Xerox, Computervision, Applicon and others to further develop and test this software. Though it was the practice to begin the name of ICAM developments with the word integrated (for example the IDEFs) believing that there would be rapid development of graphical exchange software, USAF decided that the IGES would be the Initial Graphics Exchange Specification not the Integrated Graphics Exchange Specification.|$|E
50|$|Once digitized, {{additional}} software {{could be}} used to convert the lines into a 3D shape. This was groundbreaking research at the time, and generated a flurry of research papers. Once converted, the diagrams could be output into the <b>APT</b> numerical control <b>language</b> for direct output on milling machines. This would allow a design team to sketch out their ideas, put them into the system and clean them up, and then have the milling systems produce a physical model.|$|R
5000|$|APT or Automatically Programmed Tool [...] is a {{high-level}} computer programming language {{most commonly used}} to generate instructions for numerically controlled machine tools. Douglas T. Ross {{is considered by many}} to be the father of APT: as head of the newly created Computer Applications Group of the Servomechanisms Laboratory at MIT in 1956 he led its technical effort. <b>APT</b> is a <b>language</b> and system that makes numerically controlled manufacturing possible. This early language was used widely into the 1970s and is still a standard internationally. Derivatives of APT were later developed.|$|R
40|$|Security policy {{enforcement}} {{and control over}} user programs traditionally operate by guarding {{the lowest level of}} the services provided by an operating system. While arguably secure and complete, these sandboxing engines have a room for improvement. In this work, we discuss the design, implementation, performance, and ease-of-use aspects of a framework known as SecModule. This framework allows arbitrary {{policy enforcement}}s on the user’s ability to invoke protected functions held securely inside a module. In other words, SecModule allows the level of protection provided by a sandbox to the library level. SecModule gives the ability to place arbitrary policy level control over the rights to invoke arbitrarily complex functions held in libraries. An <b>apt</b> programming <b>language</b> analogy here is that existing sandboxes protect the primitive “assembly level ” of possible operations provided by an Operating System. As software grows bigger and more complex, more useful evaluations and protection strategies are made possible by raising the protective shield to arbitrary compositions of such primitives, the same way that higher level programming languages allow programmers to be more productive in comparison to coding at the lowest level. The prototype framework described herein can be used to build, use, and distribute such protected libraries. Discussions pertaining to SecModule’s system security guarantees, performance issues, as well as ease-of-use factors follow. ...|$|R
40|$|This manual {{provides}} a reference for the Austin Protocol Compiler, the <b>APT</b> <b>language,</b> and the runtime system. It describes the basic {{usage of the}} compiler, the fundamentals of {{the execution of the}} <b>APT</b> <b>language,</b> the syntax and semantics of the language, and the C interface provided by the runtime system and the generated code. Content...|$|E
40|$|A NASA-developed {{software}} package {{has played a}} part in technical education of students who major in Mechanical Engineering Technology at William Rainey Harper College. Professor Hack has been using (APT) Automatically Programmed Tool Software since 1969 in his CAD/CAM Computer Aided Design and Manufacturing curriculum. Professor Hack teaches the use of APT programming languages for control of metal cutting machines. Machine tool instructions are geometry definitions written in <b>APT</b> <b>Language</b> to constitute a "part program. " The part program is processed by the machine tool. CAD/CAM students go from writing a program to cutting steel {{in the course of a}} semester...|$|E
40|$|This paper {{describes}} {{the development of}} an 2 D simulation software for APT CNC coding. This software controls a desktop CNC lathe Unit enabling users to graphically visualise machine operation using the parameters given. CNC M & G codes and <b>APT</b> <b>language</b> are briefly discussed then issues on developing in house simulation software are presented. (The Paper is in Turkish) Unver E., Koc E., 1992, A Study of developing an APT simulation program and its execution on a bench type lathe, 5 th International Machine Design and Manufacturing Congress, p. 83 - 91. Middle East Technical University, METU. Turke...|$|E
40|$|A {{large number}} of {{adjectives}} of Castilian origin, products of internal derivation processes within Castilian, were borrowed into Portuguese. They can be found especially in the writings by Portuguese bilinguals and in translations of Castilian originals. Such lexical incorporation was driven by intense contact with written and spoken Castilian during the 16 th and 17 th centuries. The present study, which examines this phenomenon between 1488 and 1728, identifies around 380 adjectives of this kind. This coincides with the period of greatest lexical influence of Castilian on Portuguese. On the other hand, use of Portuguese adjectival creations in Castilian has always been residual. It must nevertheless be stressed that Portuguese lexical borrowing {{was by no means}} linked to any political subordination to Castile, and might even be envisioned as part of a Portuguese project of peninsular hegemony which, consciously or not, assumed a <b>language</b> <b>apt</b> for use across Iberia...|$|R
40|$|Preface The aim of {{this paper}} is to lead (in most {{elementary}} terms) an undergraduate student of Mathematics or Physics from the historical Newtonian-d’Alembertian dynamics up to the border with the modern (geometrical) Lagrangian-Hamiltonian dynamics, without making any use of the traditional (analytical) formulation of the latter. Our expository method will in principle adopt a rigorously coordinate-free <b>language,</b> <b>apt</b> to gain – from the very historical formulation – the ‘consciousness’ (at an early stage) of the geometric structures that are ‘intrinsic’ to the very nature of classical dynamics. The coordinate formalism will be confined to the ancillary role of providing simple proofs for some geometric results (which would otherwise require more advanced geometry), as well as re-obtaining the local analytical formulation of the theory from the global geometrical one. The main conceptual tool of our approach will be the simple and general notion of differential equation in implicit form, which, treating an equation just as a subset extracted from the tangent bundle of some manifold through a geometric or algebraic property, will directly allow us to capture the structural core underlying the evolution law of classical dynamics...|$|R
30|$|The {{field of}} second {{language}} acquisition is developing {{interest in the}} utilization of games as second language (L 2) learning tools (e.g., Rankin et al. 2006; Rankin et al. 2008; Ranalli, 2008). The use of L 2 testing games, however, is nascent. It is critical, {{at this early stage}} of research and development, for those interested in game-based assessments (GBA) to consider some fundamental interaction and contextual concepts that drive how we pursue our assessments. The type of interaction and role of context have long been debated in the field of language assessment (Bachman 1990; Bachman and Palmer 1996; Chalhoub-Deville 2003; Chalhoub-Deville and Deville 2006; Chalhoub-Deville 2009, Deville and Chalhoub-Deville 2006; Purpura 2008). These same issues are beginning to spark discussion within the general area of GBAs (DiCerbo 2014; DiCerbo et al. 2016; Mislevy et al. 2012; Mislevy et al. 2015), which we position within a broader category of dynamic assessment. Traditionally, context and interaction have been portrayed with a cognitive orientation. We contend, however, that ability-in language user-in context, introduced by Chalhoub-Deville (2003), offers a more <b>apt</b> orientation. Ability-in <b>language</b> user-in context lays the groundwork for a new framework for use in language testing and GBAs by shifting the conversation of interaction and context to a level of entanglement not yet considered in the field.|$|R
40|$|The APT code {{is one of}} {{the most}} widely used {{software}} tools for complex numerically controlled (N/C) machining. APT is an acronym for Automatically Programmed Tool and is used to denote the programming language. Development of the <b>APT</b> <b>language</b> and software system was begun in the late 1950 's as a U. S. government sponsored industry and university research effort. APT is a "problem oriented" language that was developed for the explicit purpose of aiding the N/C machine tools. The original APT program contained undocumented nonstandard FORTRAN, thus making porting of the processor to different operating systems difficult. P-APT (Portable APT) is a revised version of APT that was written to conform to the FORTRAN 77 standard. All machine-dependent code has either been replaced or isolated and documented. Machine-tool instructions and geometry definitions are written in the <b>APT</b> <b>language</b> to constitute a "part program". The APT part program is processed by the P-APT software to produce a cutter location (CL) file. This CL file may then be processed by user supplied post processors to convert the CL data into a form suitable for a particular N/C machine tool. This current offering of the P-APT system represents an adaptation, with enhancements, of the public domain version of APT IV/SSX 8. Enhancements include the super pocket feature that allows concave pockets with curved sides and islands. The P-APT system software is organized into two separate programs: the load complex and the APT processor. The load complex handles the table initiation phase and is usually only run when changes to the P-APT processor capabilities are made. This phase initializes character recognition and syntax tables for the P-APT processor by creating FORTRAN block data programs. The P-APT processor consists of four components: the translator, the execution complex, the subroutine library, and the CL editor. The translator examines each APT statement in the part program for recognizable structure and generates a new statement, or series of statements, in an intermediate language. The execution complex processes all of the definition, motion, and related statements to generate cutter location coordinates. The subroutine library contains routines defining the algorithms required to process the sequenced list of intermediate language commands generated by the translator. The CL editor re-processes the cutter location coordinates according to user supplied commands to generate a final CL file. The <b>APT</b> <b>language</b> is a statement oriented, sequence dependent language. With the exception of such programming techniques as looping and macros, statements in an APT program are executed in a strict first-to-last sequence. In order to provide programming capability for the broadest possible range of parts and machine tools, APT input (and output) is generalized, as represented by 3 -dimensional geometry and tools, and is arbitrarily uniform, as represented by the moving tool concept and output data in absolute coordinates. P-APT is written in FORTRAN 77 for execution on Sun 4 series computers running SunOS. Although P-APT is written in standard FORTRAN 77 and was designed to be readily portable code, it has only been fully tested on a Sun 4 series computer running SunOs. By making documented modifications to the source code, it may also be ported to a DEC VAX series computer running VMS. P-APT required 3. 1 Mb of RAM for execution. A minimum of 16 Mb of RAM and 32 Mb of disk space used for swap space is recommended. The standard distribution medium for this program is a. 25 inch streaming magnetic tape cartridge in UNIX tar format. P-APT is available by license for a period of ten (10) years to approved licensees. The licensed program product includes the P-APT source code, makefiles, examples, and one set of supporting documentation. Additional copies of the documentation may be purchased at the price indicated below. P-APT was developed in 1992...|$|E
40|$|Intelligent Tutoring Systems are {{recognized}} as valuable aids in education. We investigate the possibilities of rule-based design and in particular relation algebra as means to generate feedback for students. The rule-based approach is compatible with constraint-based tutors: {{as long as the}} student’s product does not reach a state that is known to be wrong, the student is on the right track. It will help recognize errors and with that stimulate the internalization of knowledge. Relation algebra has already been proven to be an <b>apt</b> <b>language</b> to define business rules and our research question is: How can relation algebra be applied to create feedback for students on submitted work? The research is designed as an exploratory case study in which a feedback system is simulated using an already existing system for business rules formulated in relation algebraic expressions. This case study leads to the conclusion it is possible to define rules to compare the student model with a reference model. Both checks on literal details of a model as checks on more general patterns can be performed. There are some limitations to relation algebra that makes it less suitable for a learning system than a programming language, the most important being that rules and messages cannot be applied conditionally to build up the feedback from hint to direct instruction...|$|E
40|$|The APT code {{is one of}} {{the most}} widely used {{software}} tools for complex numerically controlled (N/C) machining. APT is an acronym for Automatically Programmed Tools and is used to denote both a language and the computer software that processes that language. Development of the <b>APT</b> <b>language</b> and software system was begun over twenty years ago as a U. S. government sponsored industry and university research effort. APT is a "problem oriented" language that was developed for the explicit purpose of aiding the N/C machine tools. Machine-tool instructions and geometry definitions are written in the <b>APT</b> <b>language</b> to constitute a "part program. " The APT part program is processed by the APT software to produce a cutter location (CL) file. This CL file may then be processed by user supplied post processors to convert the CL data into a form suitable for a particular N/C machine tool. This June, 1989 offering of the APT system represents an adaptation, with enhancements, of the public domain version of APT IV/SSX 8 to the DEC VAX- 11 / 780 for use by the Engineering Services Division of the NASA Goddard Space Flight Center. Enhancements include the super pocket feature which allows concave and convex polygon shapes of up to 40 points including shapes that overlap, that leave islands of material within the pocket, and that have one or more arcs as part of the pocket boundary. Recent modifications to APT include a rework of the POCKET subroutine and correction of an error that prevented the use within a macro of a macro variable cutter move statement combined with macro variable double check surfaces. Former modifications included the expansion of array and buffer sizes to accommodate larger part programs, and the insertion of a few user friendly error messages. The APT system software on the DEC VAX- 11 / 780 is organized into two separate programs: the load complex and the APT processor. The load complex handles the table initiation phase and is usually only run when changes to the APT processor capabilities are made. This phase initializes character recognition and syntax tables for the APT processor by creating FORTRAN block data programs. The APT processor consists of four components: the translator, the execution complex, the subroutine library, and the CL editor. The translator examines each APT statement in the part program for recognizable structure and generates a new statement, or series of statements, in an intermediate language. The execution complex processes all of the definition, motion, and related statements to generate cutter location coordinates. The subroutine library contains routines defining the algorithms required to process the sequenced list of intermediate language commands generated by the translator. The CL editor re-processes the cutter location coordinates according to user supplied commands to generate a final CL file. A sample post processor is also included which translates a CL file into a form for use with a Wales Strippit Fabramatic Model 30 / 30 sheet metal punch. The user should be able to readily develop post processors for other N/C machine tools. The <b>APT</b> <b>language</b> is a statement oriented, sequence dependent language. With the exception of such programming techniques as looping and macros, statements in an APT program are executed in a strict first-to-last sequence. In order to provide programming capability for the broadest possible range of parts and of machine tools, APT input (and output) is generalized, as represented by 3 -dimensional geometry and tools, and arbitrarily uniform, as represented by the moving tool concept and output data in absolute coordinates. A command procedure allows the user to select the desired part program, ask for a graphics file of cutter motions in IGES format, and submit the procedure as a batch job, if desired. The APT system software is written in FORTRAN 77 for batch and interactive execution and has been implemented on a DEC VAX series computer under VMS 4. 4. The enhancements for this version of APT were last updated in June, 1989. The NASA adaptation, with enhancements, of the public domain version of the APT IV/SSX 8 software to the DEC VAX- 11 / 780 is available by license for a period of ten (10) years to approved licensees. The licensed program product delivered includes the APT IV/SSX 8 system source code, object code, executable images, and command procedures and one set of supporting documentation. Additional copies of the supporting documentation may be purchased at any time at the price indicated below...|$|E
40|$|Semantic Web {{technologies}} {{have been applied}} in educational settings for different purposes in recent years, {{with the type of}} application being mainly defined by the way in which knowledge is represented and exploited. The basic technology for knowledge representation in Semantic Web settings is the ontology, which represents a common, shareable and reusable view of a particular application domain. Ontologies can support different activities in educational settings such as organizing course contents, classifying learning objects or assessing learning levels. Consequently, ontologies can become a very useful tool from a pedagogical perspective. This paper focuses on two different experiences where Semantic Web technologies are used in educational settings, the difference between them lying in how knowledge is obtained and represented. On the one hand, the OeLE platform uses ontologies as a support for assessment processes. Such ontologies have to be designed and implemented in semantic <b>languages</b> <b>apt</b> to be used by OeLE. On the other hand, the ENSEMBLE project pursues the development of semantic web applications by creating specific knowledge representations drawn from user needs. Our paper is consequently going to offer an in-depth analysis of the role played by ontologies, showing how they can be used in different ways drawing a comparison between model patterns and examining {{the ways in which they}} can complement each other as well as their practical implications</p...|$|R
2500|$|His {{next film}} was Nikhil Advani's action movie D-Day, co-starring Rishi Kapoor, Irrfan Khan, Shruti Haasan and Huma Qureshi. He portrayed Rudra Pratap Singh, a RAW agent. In order {{to prepare for}} his role, Rampal met real RAW agents. He earned {{critical}} acclaim for his performance. Mohar Basu of Koimoi wrote: [...] "Arjun Rampal has evolved for the better as an actor. His infallible personality and his portrayal that has hints of both anguish and strength is what makes him stand out {{despite the presence of}} more powerful actors. He acted like a dream and that is commendable, to say the least." [...] Rummana Ahmed of Yahoo! Movies wrote: [...] "As a former army officer and now an undercover agent, Arjun is intense and sharp, his body <b>language</b> <b>apt</b> and his performance precise." [...] Shubha Shetty of Mid Day wrote: [...] "It is Arjun Rampal as Rudra who amazes with a performance that is undoubtedly his best till date. Rampal, apart from looking as gorgeous as he does, comfortably displays a range of emotions with surprising deft." [...] Mansha Rastogi of Now Running. com wrote: [...] "Arjun Rampal has excelled himself by leaps and bound and makes a commendable effort of an ex-army man turned RAW Agent delightfully." [...] Rajeev Masand wrote: [...] "Arjun Rampal does some of his best work here as the rebellious agent simmering with pent-up anger." [...] Sarit Ray of Hindustan Times wrote: [...] "Arjun Rampal (agent Rudra Pratap Singh) brings to the role what he brings to every film — good looks and a standard brooding expression." ...|$|R
40|$|An {{appropriate}} or ‘proper’ {{option in}} everyday life according to the folk account {{is a matter of}} knowing just how far will not be going too far, and acting {{in a manner that is}} ‘fitting’, ‘spot on’ or ‘hits the mark’. It is argued here, with reference to sociological studies of food culture and food practices, that discernments of appropriate consumption are blends, in which structure mapping regards the alignment of relations between grades of things (e. g. foods and beverages) and grades of feelings, resources, events or people as well as other beings. These meaning constructions are largely non-discursive, tend to remain implicit, and are communicated performatively and analogically by appropriate uses of consumer goods, as distinct from <b>apt</b> usage of <b>language.</b> The character of menus, meals and food preferences as constituted by ‘gradient blends’ enables us to understand both the coherence and mutability of any given food culture as well as the creativity of its construction. It would seem likely that this account might fruitfully be applied to other fields of human practice, including the production of ritual, art and non-verbal play. Meanwhile, blending theory presents a profound challenge to current sociological and anthropological accounts of consumer culture. Note: this article is addressed to a readership of cognitive linguists, in particular researchers in the field of ‘conceptual blending theory’. The theory presented here does not address the issue of consumer preference for organic foods, but is currently being employed for this purpose (DARCOF II, Project VII. 13.) For a more popular Danish language version of the argument see: K O’Doherty Jensen (2003) ‘Hvad er “rigtig” mad?...|$|R
40|$|The project {{consists}} of a live performance taking the 2005 IKEA riot {{as the starting point}} for a speculative history of a fictional future, culminating in a choreographed re-enactment of the original event. It is accompanied by a film series explores the possibility of collective action emerging from the capitalist relations inherent in the consumer riot. The performance, staged at the Berlin Biennale, continues this research into re-enactment and post- 1989 politics, using a stage set made of flatpack furniture. Using the aesthetics of Modernism and the avant garde, the project transposes early twentieth century utopian ideology to a present day setting where mass uprisings are motivated by cheap commodities. By re-evaluating biomechanics and Bauhaus theatre theory, these explorations of consumerism and revolution propose that the mechanized movement developed in conjunction with industrial labour survives as a historical re-enactment in the wake of manufacturing work in the west. In the absence of a visual <b>language</b> <b>apt</b> to the contemporary, No Haus Like Bau uses re-enactment as a retrogarde tactic. Its purpose on the one hand is to invoke trajectories for alternate futures that never materialized at an originary moment. On the other hand, the clash of past forms with present content serves to accentuate the historical changes that have thrown into question these forms. Rather than reflecting the present, the projection of the past into a fictional future aims to destabilize the dominant narrative that suggests the current configuration of art, politics and human nature has always been this way. The project has been widely exhibited internationally and supported by Film London and Arts Council England. A theoretical essay on re-enactment as a strategy for performance has been published in Art Papers and in Memory [MIT]. The project also formed the basis of a solo exhibition at Te Tuhi Art Centre, Auckland...|$|R

