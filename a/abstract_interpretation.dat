2063|305|Public
25|$|Since the 1990s, {{particularly}} {{following the}} Ariane 5 Flight 501 disaster, interest in automated aids to debugging rose, such as static code analysis by <b>abstract</b> <b>interpretation.</b>|$|E
25|$|The {{problem of}} finding convex hulls finds its {{practical}} applications in pattern recognition, image processing, statistics, geographic information system, game theory, construction of phase diagrams, and static code analysis by <b>abstract</b> <b>interpretation.</b> It {{also serves as}} a tool, a building block for a number of other computational-geometric algorithms such as the rotating calipers method for computing the width and diameter of a point set.|$|E
25|$|For efficiency, Prolog code is {{typically}} compiled to abstract machine code, often {{influenced by the}} register-based Warren Abstract Machine (WAM) instruction set. Some implementations employ <b>abstract</b> <b>interpretation</b> to derive type and mode information of predicates at compile time, or compile to real machine code for high performance. Devising efficient implementation methods for Prolog code is a field of active research in the logic programming community, and various other execution methods are employed in some implementations. These include clause binarization and stack-based virtual machines.|$|E
40|$|Completeness is a desirable, {{although}} uncommon, {{property of}} <b>abstract</b> <b>interpretations,</b> formalizing the intuition that, relatively {{to the underlying}} abstract domains, the abstract semantics is as precise as possible. We consider here the most general form of completeness, where concrete semantic functions can have different domains and ranges, a case particularly relevant in functional programming. In this setting, our main contributions are as follows. (i) Under the weak and reasonable hypothesis of dealing with continuous semantic functions, a constructive characterization of complete <b>abstract</b> <b>interpretations</b> is given. (ii) It turns out that completeness is an abstract domain property. By exploiting (i), we therefore provide explicit constructive characterizations for the least complete extension and the greatest complete restriction of abstract domains. This considerably extends previous work by the first two authors, who recently proved results of mere existence for more restricted forms of least complete extension and greatest complete restriction. (iii) Our results permit to generalize, from a natural perspective of completeness, the notion of quotient of <b>abstract</b> <b>interpretations,</b> a tool introduced by Cortesi et al, for comparing the expressive power of <b>abstract</b> <b>interpretations.</b> Fairly severe hypotheses are required for Cortesi et al. 's quotients to exist. We prove instead that continuity of the semantic functions guarantees the existence of our generalized quotients...|$|R
40|$|Completeness is an ideal, {{although}} uncommon, {{feature of}} <b>abstract</b> <b>interpretations,</b> formalizing the intuition that, relatively to the properties encoded by the underlying abstract domains, {{there is no}} loss of information accumulated in abstract computations. Thus, complete <b>abstract</b> <b>interpretations</b> can be rightly understood as optimal. We deal with both pointwise completeness, involving generic semantic operations, and (least) fixpoint completeness. Completeness and fixpoint completeness are shown to be properties that depend on the underlying abstract domains only. Our primary goal is then {{to solve the problem}} of making <b>abstract</b> <b>interpretations</b> complete by minimally extending or restricting the underlying abstract domains. Under the weak and reasonable hypothesis of dealing with continuous semantic operations, we provide constructive characterizations; for the least complete extensions and the greatest complete restrictions of abstract domains. As far as fixpoint completeness is concerned, for merely monotone semantic operators, the greatest restrictions of abstract domains are constructively characterized, while it is shown that the existence of least extensions of abstract domains cannot be, in general, guaranteed, even under strong hypotheses. These methodologies, which in finite settings give rise to effective algorithms, provide advanced formal tools for manipulating and comparing <b>abstract</b> <b>interpretations,</b> useful both in static program analysis and in semantics design. A number of examples illustrating these techniques are given...|$|R
50|$|The 12 portraits are {{tales of}} love, family, sexuality, religion, bullying, angst, freedom, lust, and <b>abstract</b> <b>interpretations</b> of modern teenage {{challenges}} concerning insecurities, rebellion, acceptance, {{and the ultimate}} path to adulthood.|$|R
2500|$|... 1 May – Radhia Cousot, 67, French {{computer}} scientist, co-inventor of <b>abstract</b> <b>interpretation</b> ...|$|E
5000|$|Together {{with her}} husband Patrick, Radhia Cousot is the {{originator}} of <b>abstract</b> <b>interpretation,</b> an influential technique in formal methods. <b>Abstract</b> <b>interpretation</b> is based on three main ideas.|$|E
5000|$|Cousot and Cousot have {{introduced}} {{a notion of}} widening while defining the framework of <b>abstract</b> <b>interpretation.</b> An example for the widening of an abstract domain that appears in <b>abstract</b> <b>interpretation</b> would be replacing the upper bound of an interval by [...]|$|E
50|$|Eve Mosher {{initially}} {{worked as}} a studio artist, creating <b>abstract</b> <b>interpretations</b> of the natural and built environments through drawings, sculptures and installations. Then, in 2006, she felt a {{need to do something}} in response to climate change, and began to brainstorm ideas.|$|R
40|$|In {{this paper}} we define the {{functional}} language POLYREC with polymorphic and recursive types, and develop concrete and <b>abstract</b> <b>interpretations</b> for this language. These semantics, based on complete partial orderings and complete lattices, are subsequently used for definition {{and analysis of}} strictness...|$|R
40|$|Starting from a denotational {{semantics}} of the eager untyped lambda-calculus with explicit runtime errors, the standard collecting semantics {{is defined as}} specifying the strongest program properties. By a first abstraction, a new sound type collecting semantics is derived in compositional fixpoint form. Then by successive (semi-dual) Galois connection based abstractions, type systems and/or type inference algorithms are designed as abstract semantics or abstract interpreters approximating the type collecting semantics. This leads to a hierarchy of type systems, {{which is part of}} the lattice of <b>abstract</b> <b>interpretations</b> of the untyped lambda-calculus. This hierarchy includes two new à la Church/Curry polytype systems. Abstractions of this polytype semantics lead to classical Milner/Mycroft and Damas/Milner polymorphic type schemes, Church/Curry monotypes and Hindley principal typing algorithm. This shows that types are <b>abstract</b> <b>interpretations.</b> ...|$|R
5000|$|Verification, Model Checking and <b>Abstract</b> <b>Interpretation</b> (VMCAI) ...|$|E
5000|$|... #Subtitle level 2: <b>Abstract</b> <b>interpretation</b> of {{computer}} programs ...|$|E
50|$|This section {{illustrates}} <b>abstract</b> <b>interpretation</b> {{by means}} of real-world, non-computing examples.|$|E
40|$|<b>Abstract.</b> <b>Interpretations</b> for the q-binomial {{coefficient}} evaluated at −q are discussed. A (q, t) -version is established, {{including an}} instance of a cyclic sieving phenomenon involving unitary spaces. 1. The q-binomial The q-binomial coefficient is defined for integers k and n, with 0 ≤ k ≤ n, and an indeterminate q b...|$|R
5000|$|Christopher Oywecha is an {{abstract}} expressionist artist whose works portray [...] "his {{perception of the}} human condition" [...] as <b>abstract</b> <b>interpretations</b> of daily life. He works mainly in oil and acrylic with vibrant, earthy paintings typical of his style. He portrays peoples' faces and emotions, and the events affecting them and their environment.|$|R
40|$|It is {{well known}} that for a given {{concrete}} domain $C$ which is a complete lattice, the abstract domains of $C$ form the so-called lattice of <b>abstract</b> <b>interpretations</b> of $C$. In general lattice-theoretic terms, this reads as Ward's [1942] theorem stating that closure operators on a complete lattice, ordered pointwise, give rise to a complete lattice. This result {{plays an important role in}} the general field of semantic domain theory. We strengthen Ward's theorem by showing that closure operators on any directed-complete partial order (CPO) still form a complete lattice. This result therefore applies straight to the lattice of <b>abstract</b> <b>interpretations.</b> Furthermore, we exploit it in order to significantly extend the operation of abstract domain complementation, so that, e. g., it can be applied to any abstract domain which is a mere poset satisfying the ascending chain condition...|$|R
5000|$|... #Caption: Set {{constraints}} {{obtained from}} <b>abstract</b> <b>interpretation</b> of the Collatz algorithm ...|$|E
50|$|The theorem has {{applications}} in <b>abstract</b> <b>interpretation,</b> {{a form of}} static program analysis.|$|E
5000|$|<b>Abstract</b> <b>interpretation,</b> {{to model}} the effect that every {{statement}} has {{on the state of}} an abstract machine (i.e., it 'executes' the software based on the mathematical properties of each statement and declaration). This abstract machine over-approximates the behaviours of the system: the abstract system is thus made simpler to analyze, at the expense of incompleteness (not every property true of the original system is true of the abstract system). If properly done, though, <b>abstract</b> <b>interpretation</b> is sound (every property true of the abstract system can be mapped to a true property of the original system). The Frama-C value analysis plugin and Polyspace heavily rely on <b>abstract</b> <b>interpretation.</b>|$|E
50|$|Ian H. Boyden (born February 16, 1971) is a {{contemporary}} American painter, sculptor, and book artist, {{known for the}} paints and inks he makes from materials such as meteorites, shark teeth, and freshwater pearls. His paintings are often <b>abstract</b> <b>interpretations</b> of how the pigment materials are understood according to historical, literary, and psychological contexts.|$|R
40|$|AbstractWe study <b>abstract</b> <b>interpretations</b> of a {{fixpoint}} protoderivation semantics {{defining the}} maximal derivations of a transitional semantics of context-free grammars akin to pushdown automata. The {{result is a}} hierarchy of bottom-up or top-down semantics refining the classical equational and derivational language semantics and including Knuth grammar problems, classical grammar flow analysis algorithms and parsing algorithms...|$|R
50|$|She {{produced}} and directed The Truth About You (2014) and created artwork for the movie, which {{was included in}} a solo art exhibit “Hollywood Love Letters” at the ArcLight in Hollywood, California. The exhibit included several of her earlier works, as well as commissioned pieces in which she did <b>abstract</b> <b>interpretations</b> of movies that influence her.|$|R
50|$|The theorem has {{important}} applications in formal semantics of programming languages and <b>abstract</b> <b>interpretation.</b>|$|E
50|$|The name AbsInt {{is derived}} from <b>abstract</b> <b>interpretation,</b> a semantics-based {{methodology}} for static program analysis.|$|E
50|$|Techniques such as <b>abstract</b> <b>interpretation,</b> {{constraint}} solving, {{and type}} systems {{may be used}} for control-flow analysis.|$|E
40|$|We {{present a}} {{construction}} technique for <b>abstract</b> <b>interpretations</b> which is generic {{in the choice}} of data abstractions. The technique is specialised on C/C++ code, internally represented by the GIMPLE control flow graph as generated by the gcc compiler. The generic interpreter handles program transitions in a symbolic way, while recording a history of symbolic memory valuations. An abstract interpreter is instantiated by selecting appropriate lattices for the data types under consideration. This selection induces an instance of the generic transition relation. All resulting <b>abstract</b> <b>interpretations</b> can handle pointer arithmetic, type casts, unions and the aliasing problems involved. It is illustrated how switching between abstractions can improve the efficiency of the verification process. The concepts described in this paper are implemented in the test automation and static analysis tool RT-Tester which is used for the verification of embedded systems in the fields of avionics, railways and automotive control...|$|R
40|$|We {{introduce}} filters, an abstract-interpretation variant, to incrementally refine a naively generated {{state space}} and help validate path {{properties of the}} space via model checking. Filters can be represented equivalently as (i) state-transition-based <b>abstract</b> <b>interpretations,</b> (ii) "property automata," or (iii) path formulas in a CTL*- variant. We give examples of filters and show their application in the FLAVERS static analysis system. It {{is no accident that}} a compiler uses a control flow graph (cfg) as its "abstract interpretation of choice" for a sequential program: A program's cfg possesses a manageable state space, and a variety of code improvements are enacted by conducting additional flow analyses on top of the cfg. Of course, such analyses are <b>abstract</b> <b>interpretations</b> (ai s) themselves, but what is noteworthy here is that the cfg is used as the base structure upon which another analysis is placed: one ai (the flow analysis) "filters" the other (the cfg). Unfortunately, this [...] ...|$|R
50|$|His {{subject matter}} {{included}} pure abstracts, landscapes, still lifes {{and the male}} and female head and figure. As many artists have done, he explored variations of each subject, experimenting with changes in medium, technique, light and color. His paintings of the female head and form quickly developed into a vehicle for his <b>abstract</b> <b>interpretations.</b> He used very quick brushwork and often labored over several pieces at the same time.|$|R
50|$|It is also {{possible}} to relate multiple semantics through abstractions via the theory of <b>abstract</b> <b>interpretation.</b>|$|E
5000|$|... {{state space}} enumeration, {{symbolic}} state space enumeration, <b>abstract</b> <b>interpretation,</b> symbolic simulation, symbolic trajectory evaluation, symbolic execution ...|$|E
5000|$|Static program {{analysis}} [...] - [...] {{overview of}} analysis methods, including, but not restricted to, <b>abstract</b> <b>interpretation</b> ...|$|E
40|$|This study {{identifies}} creative principles {{within the}} Taoist philosophy and examines instances where these principles have influenced {{historical and contemporary}} abstract painting practices. It also explores ways in which these principles may influence changes within a personal creative practice. The creation of painted <b>abstract</b> <b>interpretations</b> of the chapters of the I Ching provides a context for exploring the relationships between these principles {{and the development of}} a particular creative process...|$|R
40|$|A program {{analysis}} is compositional when {{the analysis result}} for a particular program fragment is obtained solely from the results for its immediate subfragments via some composition operator. This means the subfragments can be analyzed independently in any order. Many commonly used program analysis techniques (in particular, most <b>abstract</b> <b>interpretations</b> and most uses of the Hindley/Milner type system) are not compositional and require the entire text of a program for sound and complete analysis...|$|R
40|$|AbstractWe {{construct}} {{a hierarchy of}} semantics by successive <b>abstract</b> <b>interpretations.</b> Starting from a maximal trace semantics of a transition system, we derive a big-step semantics, termination and nontermination semantics, natural, demoniac and angelic relational semantics and equivalent nondeterministic denotational semantics, D. Scott's deterministic denotational semantics, generalized/conservative/liberal predicate transformer semantics, generalized/total/partial correctness axiomatic semantics and corresponding proof methods. All semantics are presented in uniform fixpoint form and the correspondence between these semantics are established through composable Galois connection...|$|R
