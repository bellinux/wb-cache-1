12|10000|Public
5000|$|... #Caption: Science of Cambridge MK14 (1978) - Sinclair's first computer, sold in kit {{form and}} <b>assembled</b> <b>by</b> <b>the</b> <b>user.</b>|$|E
50|$|The MCP is <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> {{installation}} from {{a set of}} macros {{supplied by}} IBM. These macros define the lines and terminals comprising the system, the datasets required, and the procedures used to process received and transmitted messages.|$|E
5000|$|It was a fin-stabilized field {{artillery}} rocket that followed a ballistic trajectory to ground targets. The rocket XM51 {{consisted of a}} warhead, a rocket motor assembly, and an igniter assembly. The components were shipped in separate containers and <b>assembled</b> <b>by</b> <b>the</b> <b>user.</b>|$|E
50|$|The {{display screen}} was a CRT about 5 inches square which was {{actually}} a standard Tektronix oscilloscope with special plug-in amplifiers. The special plug-ins could be replaced with standard oscilloscope plug-ins for use in diagnostic maintenance of the computer. Many LINCs were supplied as kits to be <b>assembled</b> <b>by</b> <b>the</b> end <b>user,</b> so <b>the</b> oscilloscope came in handy.|$|R
50|$|The PuzzlePhone is a modular {{smartphone}} project <b>by</b> Circular Devices. <b>The</b> device's design {{would allow}} main parts, {{which would be}} specific modules, to be <b>assembled</b> and replaced <b>by</b> <b>the</b> <b>user</b> in easy way.|$|R
50|$|The {{telecommunications}} network at the physical layer also consists of many interconnected wireline network elements (NEs). These NEs can be stand-alone systems or {{products that are}} either supplied by a single manufacturer or are <b>assembled</b> <b>by</b> <b>the</b> service provider (<b>user)</b> or system integrator with parts from several different manufacturers.|$|R
50|$|From 1940 to 1970, the {{progress}} of stereophonic sound was paced by the technical difficulties of recording and reproducing two or more channels in synchronization {{with one another and}} by the economic and marketing issues of introducing new audio media and equipment. A stereo system cost roughly twice as much as a monophonic system, since a stereo system had to be <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> after purchasing two preamplifiers, two amplifiers, and two speaker systems in addition to purchasing a twin-tuner radio, upgrading their tape recorder to a stereo model and having their phonograph fitted with a stereo cartridge. In the early days it was not clear whether consumers would think the sound was so much better as to be worth twice the price.|$|E
5000|$|The first {{microcomputer}} was the Japanese Sord Computer Corporation's SMP80/08 (1972), {{which was}} followed by the SMP80/x (1974). The French developers of the Micral N (1973) filed their patents with the term [...] "Micro-ordinateur", a literal equivalent of [...] "Microcomputer", to designate a solid state machine designed with a microprocessor.In the USA, the earliest models such as the Altair 8800 were often sold as kits to be <b>assembled</b> <b>by</b> <b>the</b> <b>user,</b> and came with as little as 256 bytes of RAM, and no input/output devices other than indicator lights and switches, useful as a proof of concept to demonstrate what such a simple device could do. However, as microprocessors and semiconductor memory became less expensive, microcomputers in turn grew cheaper and easier to use: ...|$|E
40|$|The {{development}} of software for dynamically reconfigurable sensor-based control systems {{is a complicated}} and tedious process, requiring specialization in real-time systems programming and {{an amount of time}} which may not be available, for instance, in a space laboratory. The total development time can be reduced by automatically integrating reusable software modules to create applications. The integration of these modules can be further simplified by the use of a high-level programming interface which can integrate modules developed at different sites. We have developed Onika, an iconically programmed human-machine interface, to interact with a reconfigurable software framework to create reusable code. Onika presents appropriate work environments for both application engineers and endusers. For engineers, icons representing real-time software modules can be combined to form real-time jobs. For the end-user, icons representing these jobs are <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> into applications. Onika [...] ...|$|E
5000|$|Following {{the first}} {{generation}} of simple Foldscopes, twelve medical diagnostic Foldscope variants are in development with each type being designed specifically to aid in the identification of a particular disease-causing organism. Included with each Foldscope, a picture is provided of the particular microbe to look for on each disease-specific variant. To enable several people to use them at once, each microscope is able to project images with a built-in projector. [...] The Foldscope is designed to be <b>assembled</b> <b>by</b> <b>the</b> end <b>user,</b> and hence is color-coded to help with the assembly. [...] Each unit costs less than one US dollar to build, with estimates varying from 50 cents to 97 cents.|$|R
40|$|In {{this paper}} we explore the design of "Do-It-Yourself" RAIDs: RAID systems that can <b>assembled</b> <b>by</b> <b>the</b> end <b>user</b> from commercially {{available}} disks, enclosures, cables, racks, computers, and networks. We quantitatively evaluate the tradeoffs in cost, performance, and reliability of these DIY-RAID systems. Our principal result is an architecture that scales from 10 s to 1000 s of disks; we demonstrate that a 1995 implementation would have much lower cost, better and more scalable performance, and roughly the same reliability as commercially available hardware RAID systems. Furthermore, if current trends continue, these DIY-RAIDs will replace near-line tape libraries within a few years. 1. Introduction Recently, a number of applications have emerged that require active use of very large storage systems. Examples include multimedia digital libraries, video on demand, and enterprise-wide decision support. To address this opportunity, {{a number of researchers}} are designing systems software to t [...] ...|$|R
40|$|Abstract. Visualization {{is often}} {{invaluable}} {{to understand the}} behavior of optimization algorithms, identify their bottlenecks or pathological behaviors, and suggest remedial techniques. Yet developing visualizations is often a tedious activity requiring significant time and expertise. This paper presents a framework for the visualization of constraint-based local search (CBLS) algorithms. Given a high-level model and a declarative visualization specification, the CBLS visualizer systematically produces animations to visualize constraints and objectives, violations, and conflicts, {{as well as the}} temporal behavior of these measures. The visualization specification is declarative and typically composed of a triple (what,where,how) indicating what to display, where, and with which graphical objects. The visualizer architecture is compositional and extensible. It provides building blocks which can be <b>assembled</b> freely <b>by</b> <b>the</b> <b>user</b> and focuses almost exclusively on static aspects, the dynamic aspects being automated <b>by</b> <b>the</b> use of invariants. The paper highlights various functionalities of the visualizer and describes a blueprint for its implementation. ...|$|R
40|$|The {{development}} of software for reconfigurable sensor-based realtime systems {{is a complicated}} and tedious process, requiring highly specialized skills in real-time systems programming. The total development time can be reduced by automatically integrating reusable software modules to create applications. The integration of these modules can be further simplified {{by the use of}} a high-level programming interface. We have developed Onika, an iconically programmed human-machine interface, to interact with a reconfigurable software framework to create reusable code. Onika presents appropriate work environments for both application engineers and end-users. For engineers, icons representing real-time software modules can be combined to form real-time jobs. For the end-user, icons representing these jobs are <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> into applications. Onika verifies that all jobs and applications are syntactically correct, non-ambiguous, and complete. They can then be executed from within Onika, [...] ...|$|E
40|$|The Integrated Biomass Supply & Logistics (IBSAL) {{model is}} a dynamic (time dependent) model of {{operations}} that involve collection, harvest, storage, preprocessing, and transportation of feedstock for use at a biorefinery. The model uses mathematical equations to represent individual unit operations. These unit operations can be <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> to represent the working rate of equipment and queues to represent storage at facilities. The model calculates itemized costs, energy input, and carbon emissions. It estimates resource requirements and operational characteristics of the entire supply infrastructure. Weather {{plays an important role}} in biomass management and thus in IBSAL, dictating the moisture content of biomass and whether or not it can be harvested on a given day. The model calculates net biomass yield based on a soil conservation allowance (for crop residue) and dry matter losses during harvest and storage. This publication outlines the development of the model and provides examples of corn stover harvest and logistics...|$|E
40|$|The {{development}} of software for dynamically reconfigurable sensor-based control systems {{is a complicated}} and tedious process, requiring specialization in real-time systems programming and {{an amount of time}} which may not be available, for instance, in a space laboratory. The total development time can be reduced by automatically integrating reusable software modules to create applications. The integration of these modules can be further simplified by the use of a high-level programming interface which can integrate modules developed at different sites. We have developed Onika, an iconically programmed human-machine interface, to interact with a reconfigurable software framework to create reusable code. Onika presents appropriate work environments for both application engineers and endusers. For engineers, icons representing real-time software modules can be combined to form real-time jobs. For the end-user, icons representing these jobs are <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> into applications. Onika verifies that all jobs and applications are syntactically correct, non-ambiguous, and complete. They can then be executed from within Onika, or can be saved as a stand-alone program which can be executed independently on the underlying real-time operating system. Onika can retrieve and use software modules created at other sites with modules created locally. While Onika has been fully integrated with the Chimera real-time operating system in order to control several different robotic systems in the Advanced Manipulators Laboratory at Carnegie Mellon University, it can also function independently of Chimera. Onika will be used in connection with NASA Langley Research Center’s Intravehicular Autonomous Robot (IVAR) space manipulator laboratory. 1...|$|E
40|$|Editor’s Note: This {{draft of}} the paper has been {{submitted}} to a conference. As we will revise the paper, please beware this is a working document and the information content will change. Given that you have requested {{a copy of this}} draft, we would be delighted to get your reactions and comments on how to improve the paper. (In fact, by asking for his early draft we hope you feel an obligation to send comments!) Please send them via email, fax, or US mail via the address above. In this paper we explore the design of “Do-It-Yourself ” RAIDs: RAID systems that can <b>assembled</b> <b>by</b> <b>the</b> end <b>user</b> from commercially available disks, enclosures, cables, racks, computers, and networks. We quantitatively evaluate the tradeoffs in cost, performance, and reliability of these DIY-RAID systems. Our principal result is an architecture that scales from 10 s to 1000 s of disks; we demonstrate that a 1995 implementation would have much lower cost, better and more scalable performance, and roughly the same reliability as commercially available hardware RAID systems. Furthermore, if current trends continue, these DIY-RAIDs will replace near-line tape libraries within a few years. 1...|$|R
40|$|The aim of {{this article}} is to {{identify}} the key factors that are associated with the adoption of a commercial robot in the home. This article is based on the development of the robot product Cybot <b>by</b> <b>the</b> University of Reading in conjunction with a publisher (Eaglemoss International Ltd.). The robots were distributed through a new part-work magazine series (Ultimate Real Robots) that had long-term customer usage and retention. A part-work is a serial publication that is issued periodically (e. g., every two weeks), usually in magazine format, and builds into a complete collection. This magazine focused on robotics and was accompanied by cover-mounted component parts that could be <b>assembled,</b> with instructions, <b>by</b> <b>the</b> <b>user</b> to build a working robot over the series. In total, the product contributed over half a million operational domestic robots to the world market, selling over 20 million robot part-work magazines across 18 countries, thereby providing a unique breadth of insight. Gaining a better understanding of the overall attitudes that customers of this product had toward robots in the home, their perception of what such devices could deliver and how they would wish to interact with them should provide results applicable to the domestic appliance, assistance/care, entertainment, and educational markets...|$|R
50|$|The Duke 200 is {{manufactured}} at Bajaj Autos Chakan Plant in India. In Colombia, it {{is being}} <b>assembled</b> <b>by</b> <b>the</b> company Auteco S.A. In Argentina, is being <b>assembled</b> <b>by</b> <b>the</b> company Simpa S.A. since March 2014.|$|R
40|$|Tabula Vigilans (= "vigilant table") is, {{from the}} user's point of view, {{a library of}} {{functions}} that can be assembled in a 'script ' to define {{a set of rules}} for a musical composition. These rules may be understood as algorithmic in character, and therefore Tabula Vigilans may be described as an algorithmic composition system. Since it is a real-time system by design, the execution of the rule-set results in a musical performance which incorporates continuous monitoring of its internal data. (This comprises the 'vigilant ' aspect of the program.) However, some of this data may be determined not only from the algorithmic content of the script, but also from the outside world- data derived from the activity of musical performers- and to this extent the system can also be described as a 'performance manager'. Many design models may be explored in an algorithmic environment such as Tabula Vigilans. One that looks promising for further investigation is the model derived from the distribution of energies in a complex system; a design which emulates some aspects of physical musical instruments. Let us take as an example the tam-tam. This instrument can be understood to have a complex internal energy distribution, and limited interfaces to the outside world: its input and output interfaces. The input interface is restricted to the application of percussive energy, imparted suddenly. This sets up complex modes of internal energy distribution which result in the excitation of air molecules in contact with the instrument's surface- the output interface. Such a model may one day be approached by a Tabula Vigilans script. For the moment, however, we restrict ourselves to somewhat less ambitious compositional models. The primitive rules which may be <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> into a script currently number seventy. These may be divided fo...|$|E
40|$|Post-silicon {{validation}} {{has become}} a critical stage in the system-on-chip (SoC) development cycle, driven by increasing design complexity, higher level of integration and decreasing time-to-market. According to recent reports, post-silicon validation effort comprises more than 50 % of the overall development effort of an 65 nm SoC. Though post-silicon validation covers many aspects ranging from electronic properties of hardware to performance and power consumption of whole systems, a central task remains validating functional correctness of both hardware and its integration with software. There are several key challenges to achieving accelerated and low-cost post-silicon functional validation. First, there is only limited silicon observability and controllability; second, {{there is no good}} test coverage estimation over a silicon device; third, it is difficult to generate good post-silicon tests before a silicon device is available; fourth, there is no effective software robustness testing approaches to ensure the quality of hardware/software integration. We propose a systematic approach to accelerating post-silicon functional validation with virtual prototypes. Post-silicon test coverage is estimated in the pre-silicon stage by evaluating the test cases on the virtual prototypes. Such analysis is first conducted on the initial test suite <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> and subsequently on the expanded test suite which includes test cases that are automatically generated. Based on the coverage statistics of the initial test suite on the virtual prototypes, test cases are automatically generated to improve the test coverage. In the post-silicon stage, our approach supports coverage evaluation of test cases on silicon devices to ensure fidelity of early coverage evaluation. The generated test cases are issued to silicon devices to detect inconsistencies between virtual prototypes and silicon devices using conformance checking. We further extend the test case generation framework to generate and inject fault scenario with virtual prototypes for driver robustness testing. Besides virtual prototype-based fault injection, an automatic driver fault injection approach is developed to support runtime fault generation and injection for driver robustness testing. Since virtual prototype enables early driver development, our automatic driver fault injection approach can be applied to driver testing in both pre-silicon and post-silicon stages. For preliminary evaluation, we have applied our coverage evaluation and test generation to several network adapters and their virtual prototypes. We have conducted coverage analysis for a suite of common tests on both the virtual prototypes and silicon devices. The results show that our approach can estimate the test coverage with high fidelity. Based on the coverage estimation, we have employed our automatic test generation approach to generate additional tests. When the generated test cases were issued to both virtual prototypes and silicon devices, we observed significant coverage improvement. And we detected 20 inconsistencies between virtual prototypes and silicon devices, each of which reveals a virtual prototype or silicon device defect. After we applied virtual prototype-based fault injection approach to virtual prototypes for three widely-used network adapters, we generated and injected thousands of fault scenarios and found 2 driver bugs. For automatic driver fault injection, we have applied our approach to 12 widely used drivers with either virtual prototypes or silicon devices. After testing all these drivers, we found 28 distinct bugs...|$|E
40|$|The {{creators of}} “Let's-Improvise-Together” {{adhere to the}} idea that while there is a {{multitude}} of online games now available in cyberspace, it appears that relatively few are focused on providing a positive, friendly and productive experience for the user. Producing this kind of experience is one the goals of our Amusement Project. To this end, the creation of “Let's Improvise Together” has been guided by dedication to the importance of three themes:* the importance of cooperation,* the importance of creativity, and* the importance of emotion. Description of the GameThe avatar arrives in a certain area where there are many sound-blocks/objects. Or he may add sound “propertyi to existing ones. He can add new objects at will. Each object may represents a different sound, {{they do not have to}} though. The avatar walks around and chooses which objects he likes. Makes copies of these and add sounds or change the sounds on existing ones, then with all of the sound-blocks combined make his personalized “instrument”. Now any player can make sounds on the instrument by approaching or bumping into a sound-block. The way that the avatar makes sounds on the instrument can vary.   At the end of the improvising session, the “composition” will be saved on the instrument site, along with the personalized instrument. In this way, each user of the Amusement Center will leave behind him a unique instrumental creation, that others who visit the Center later will be able to play on and listen to. The fully creative experience of making a new instrument can be obtained connecting to Active Worlds world “Amuse” and “Amuse 2 i. Animated colorful sounding objects can be <b>assembled</b> <b>by</b> <b>the</b> <b>user</b> in the Virtual Environment as a sort of sounding instrument. We refrain here deliberately from using the word musical instrument, because the level of control we have on the sound in terms of rythm and melody, among other parameters, is very limited. It resembles instead, very closely, to the primitive instruments used by humans in some civilizations or to the experience made by children making sound out of ordinary objects. The dimension of cooperation is of paramount importance in the process of building and using the virtual sounding instrument. The instrument can be built on ones own effort but preferably by a team of cooperating users. The cooperation has as an important corolary: the sharing of the experience. The shared experience finds its permanence in the collective memory of the sounding instruments built. The sounding instrument can be seen also as a virtual sculpture, indeed this sculpture is a multimedial one. The objects have properties that ranges from video animation to sound to virtual physical properties like solidity. The role of the user representation in the Virtual World, called avatar, is important because it conveys, among other things, the useris emotions. It is worth pointing out that the Avatar has no emotions on its own but it simply expresses the emotions of the user behind it. In a way it could be considered a sort of actor performing the script that the user gives it in real-time while playing. The other important element of the integration is related to the memory of the experience left by the user into the Virtual World. The new layout is explored and experienced. The layout is a permanent editable memory. The generative aspects of Let's improvise together are the following. The multi-media virtual sculpture left behind any participating avatar is not the creation of a single author/artist. The outcome of the sinergic interaction of various authors is not deterministic, nor predictable. The authors can indeed use generative algorythm in order to create the texture to be used on the objects. Usually, in our experience, the visitors of the Amuse worlds use shareware programs in order to generate their texture. In most cases the shareware programs are simple fractals generators. In principle, it is possible to generate also the shape of the object in a generative way. Taking into account the usual audience of our world, we expected visitors to use very simple algorythm that could generate shapes as. rwx files. Indeed, noone has attempted to do so insofar. As far as the music is concerned, the availability of shareware programs that allow simple generation of sounds sequences has made possible, for some users, to generate sounds sequences to be put in our world. In conclusion, the Let's improvise section of the Amuse worlds could be open for experimentation on generative art as a very simple entry point platform. We will be very happy to help anybody that for educational purposes would try to use our platform in order to create and exhibit generative forms of art...|$|E
5000|$|GIAD - <b>assembled</b> <b>by</b> <b>the</b> Giad Automotive Industry Co in Sudan.|$|R
50|$|Mamajuana is a Dominican band <b>assembled</b> <b>by</b> <b>the</b> Dominican composer/arranger Eddi González.|$|R
50|$|A {{search and}} rescue team was {{immediately}} <b>assembled</b> <b>by</b> <b>the</b> National Search and Rescue Agency.|$|R
5000|$|Awarded monthly to <b>the</b> player chosen <b>by</b> a panel <b>assembled</b> <b>by</b> <b>the</b> Premier League's sponsor ...|$|R
50|$|Meadows {{has signed}} the Contract from America, {{a list of}} ten {{policies}} <b>assembled</b> <b>by</b> <b>the</b> Tea Party movement.|$|R
5000|$|The Adam Boltoro was a 4x4 {{off-road}} vehicle <b>assembled</b> <b>by</b> <b>the</b> now defunct Adam Motor Company in Pakistan.|$|R
50|$|A {{collection}} of materials <b>assembled</b> <b>by</b> <b>the</b> ICTJ covering the years 1981-2008 is housed at the Duke University library.|$|R
5000|$|Awarded monthly to {{the player}} and manager that were chosen <b>by</b> a panel <b>assembled</b> <b>by</b> <b>the</b> Premier League's sponsor ...|$|R
5000|$|Awarded to the {{outstanding}} {{player of the}} season as judged <b>by</b> a panel <b>assembled</b> <b>by</b> <b>the</b> Premier League's sponsor ...|$|R
50|$|Red Hat Linux, <b>assembled</b> <b>by</b> <b>the</b> company Red Hat, was {{a widely}} used Linux {{distribution}} until its discontinuation in 2004.|$|R
5000|$|The {{following}} {{is based on}} a list <b>assembled</b> <b>by</b> <b>the</b> Savannah Film Commission http://www.SavannahFilm.org/, as well as the IMDb http://www.imdb.com/List?endings=on&&locations=Savannah,%20Georgia,%20USA&&heading=18;with+locations+including;Savannah,%20Georgia,%20USA ...|$|R
50|$|Double-deck {{passenger}} cars for the Tehran-Karaj commuter line are supplied <b>by</b> CNTIC and <b>assembled</b> <b>by</b> <b>the</b> Wagon Pars factory in Arak.|$|R
5000|$|... 1999 The Greatest Female Tennis Player of <b>the</b> 20th century, <b>by</b> a {{panel of}} tennis experts <b>assembled</b> <b>by</b> <b>the</b> Associated Press ...|$|R
50|$|The Philippi Collection is {{a private}} {{collection}} <b>assembled</b> <b>by</b> <b>the</b> entrepreneur Dieter Philippi, CEO of a German telecommunication distributor, located in Kirkel.|$|R
50|$|In 2002, McHugh was {{appointed}} to a lay panel <b>assembled</b> <b>by</b> <b>the</b> Roman Catholic Church to look into sexual abuse by priests.|$|R
