38|131|Public
2500|$|Synchronous {{dynamic random-access memory}} (SDRAM) is any dynamic random-access memory (DRAM) {{where the}} {{operation}} of its external pin interface is coordinated by an externally supplied clock signal. DRAM integrated circuits (ICs) produced from the early 1970s to mid-1990s used an <b>asynchronous</b> <b>interface,</b> in which input control signals have a direct effect on internal functions only delayed by the trip across its semiconductor pathways. SDRAM has a synchronous interface, whereby changes on control inputs are recognised after a rising edge of its clock input. [...] In SDRAM families standardized by JEDEC, the clock signal controls the stepping of an internal finite state machine that responds to incoming commands. These commands can be pipelined to improve performance, with previously started operations completing while new commands are received. The memory is divided into several equally sized but independent sections called banks, allowing the device to operate on a memory access commands in each bank simultaneously and speed access in an interleaved fashion. [...] This allows SDRAMs to achieve greater concurrency and higher data transfer rates than asynchronous DRAMs could.|$|E
5000|$|... with <b>asynchronous</b> <b>interface,</b> {{such as the}} {{ubiquitous}} 28-pin 8K × 8 and 32K × 8 chips (often but not always named {{something along the lines}} of 6264 and 62C256 respectively), as well as similar products up to 16 Mbit per chip ...|$|E
50|$|Each IRC {{computer}} was configured with 208 ports {{and so was}} able to support 200 simultaneous Prestel users, the remaining 8 ports being used for test and control functions. Access for the ordinary user was provided via the duplex <b>asynchronous</b> <b>interface</b> provided by banks of GEC 16-port multi-channel asynchronous control units (MCACCU) known more simply as multiplexers. These devices in turn were accessed via banks of standard Post Office Modems No. 20 operating at 1200/75 bit/s, which were connected directly to the {{public switched telephone network}} (PSTN).|$|E
5000|$|... #Caption: W65C51S <b>Asynchronous</b> Communications <b>Interface</b> Adapter (ACIA) ...|$|R
40|$|VLSI {{systems are}} often {{constructed}} from {{a multitude of}} independently clocked synchronous IP blocks. Unfortunately, while a synchronous design style may produce efficient block level implementations it does little to support their composition. The addition of <b>asynchronous</b> <b>interfaces</b> to each synchronous block {{is one way to}} simplify and strengthen their integration. <b>Asynchronous</b> <b>interfaces</b> allow blocks to be composed without the need to consider synchronisation failure rates, permit data-driven operation and provide greater freedom when designing on-chip buses and networks. This paper surveys the significant body of published work in this area. We highlight similarities between schemes that are often concealed by differences in specification or circuit style. We also present new local clock implementations and provide solutions to mitigate the effect of clock-tree insertion delays. The ultimate goal of this work is to permit multi-clock synchronous systems to be composed simply, robustly and efficiently. ...|$|R
5000|$|... 8551 [...] - [...] ACIA <b>Asynchronous</b> Communications <b>Interface</b> Adapter, HMOS-II {{variant of}} the 6551 ...|$|R
50|$|Synchronous {{dynamic random-access memory}} (SDRAM) is any dynamic random-access memory (DRAM) {{where the}} {{operation}} of its external pin interface is coordinated by an externally supplied clock signal. DRAM integrated circuits (ICs) produced from the early 1970s to mid-1990s used an <b>asynchronous</b> <b>interface,</b> in which input control signals have a direct effect on internal functions only delayed by the trip across its semiconductor pathways. SDRAM has a synchronous interface, whereby changes on control inputs are recognised after a rising edge of its clock input. In SDRAM families standardized by JEDEC, the clock signal controls the stepping of an internal finite state machine that responds to incoming commands. These commands can be pipelined to improve performance, with previously started operations completing while new commands are received. The memory is divided into several equally sized but independent sections called banks, allowing the device to operate on a memory access commands in each bank simultaneously and speed access in an interleaved fashion. This allows SDRAMs to achieve greater concurrency and higher data transfer rates than asynchronous DRAMs could.|$|E
40|$|MCS+ is a {{generalization}} of hierarchical message sequence charts (hMCSs) having [...] . In this paper, we shall illustrate the applications of MSC+ to the specification of reactive systems through {{the example of}} an Automatic Teller Machine (ATM). We shall bring out the additional advantage {{of the possibility of}} integrating <b>asynchronous</b> <b>interface</b> requirements in the realization of prototypes from MSC+ specifications...|$|E
40|$|Camera guided {{teleoperation}} {{has long}} been the preferred mode for controlling remote robots with other modes such as asynchronous control only used when unavoidable. Because controlling multiple robots places additional demands on the operator we hypothesized that removing the forced pace for reviewing camera video might reduce workload and improve performance. In an earlier experiment participants operated four teams performing a simulated urban search and rescue (USAR) task using a conventional streaming video plus map interface or an experimental interface without streaming video but with the ability to store panoramic images on the map to be viewed at leisure. Search performance was somewhat better using the conventional interface; however, ancillary measures suggested that the <b>asynchronous</b> <b>interface</b> succeeded in reducing temporal demands for switching between robots. This raised the possibility that the <b>asynchronous</b> <b>interface</b> might perform better if teams were larger. In this experiment we evaluate the usefulness of asynchronous video for teams of 4, 8, or 12 robots. As in our earlier study we found a slight advantage in accuracy in marking victim locations for streaming video but overall performance was very similar...|$|E
5000|$|Performance. The path {{taken by}} data from disk to network. Proper <b>asynchronous</b> zero-copy <b>interfaces</b> {{would make this}} {{available}} from user-space.|$|R
40|$|A {{high level}} {{overview}} of a supercomputer-on-chip (SCoC) architecture is given which is particularly {{well suited to}} common bioinformatic computing tasks. The architecture uses <b>asynchronous</b> bus <b>interfaces</b> to create an {{application specific integrated circuit}} design methodology allowing for scaling of SCoCs with very little design effort. Standard processors and standard system buses are employed along with the pre-designed bus interface to allow quick generation of massively parallel SCoCs which can be as large as integrated circuit manufacturing technology will allow. A key aspect of this design methodology {{is that it is not}} necessary to expend significant design resources and chip area on the clock tree. An analysis of the Smith-Waterman alignment algorithm running on this architecture shows that the performance penalty due to increased bus latency compared to a fully synchronous architecture is negligible. Keywords- bioinformatics, Smith-Waterman, multiprocessing, <b>asynchronous</b> <b>interfaces.</b> 1...|$|R
5000|$|Two channel <b>Asynchronous</b> Serial Communication <b>Interface</b> (ASCI) ...|$|R
40|$|MSC is a {{generalization}} of hierarchical message sequence charts (hMSCs) having {{the capability to}} specify preemptive features such as watchdogs, generalized coregion and forbidden scenarios. In this paper, we shall illustrate the applications of MSC to the specification of reactive systems through the example of an Automatic Teller Machine (ATM). We shall bring out the additional advantage {{of the possibility of}} integrating <b>asynchronous</b> <b>interface</b> requirements in the realization of prototypes from MSC specifications...|$|E
40|$|Contents 1 Introduction 1 2 A Little Simple Math 2 2. 1 Propositional Logic.................................. 2 2. 2 Sets.......................................... 4 2. 3 Predicate Logic.................................... 4 3 Specifying a Simple Clock 6 3. 1 Behaviors....................................... 6 3. 2 An Hour Clock.................................... 6 3. 3 A Closer Look at the Hour-Clock Specification.................. 8 3. 4 The Hour-Clock Specification in TLA +....................... 8 3. 5 Another Way to Specify the Hour Clock...................... 10 4 An <b>Asynchronous</b> <b>Interface</b> 11 4. 1 The First Specification.............................. ...|$|E
40|$|Abstract. Solvers for {{propositional logic}} formulas, so called SAT solvers, {{are used in}} many {{practical}} applications. As multi-core and multi-processor hard-ware has become widely available, parallelizations of such solvers are actively researched. Such research typically ignores the incremental problem specifica-tion feature that modern SAT solvers possess. This feature is, however, crucial {{for many of the}} real-life applications of SAT solvers. Such applications include formal verification, equivalence checking, and typical artificial intelligence tasks such as scheduling, planning and reasoning. We have developed a multi-core SAT solver called Tarmo, which provides an in-terface that is compatible with conventional incremental solvers. It enables sub-stantial performance improvements for many applications, without requiring code modifications. We present the <b>asynchronous</b> <b>interface,</b> a natural extension to the conventional solver interface that allows the construction of efficient application specific parallelizations. Through the <b>asynchronous</b> <b>interface</b> multiple problems can be given to the solver simultaneously. This enables conceptually simple but efficient parallelization of the solving process. Moreover, an asynchronous solver is easier to run in parallel with other independent tasks, simplifying the con-struction of so called coarse grained parallelizations. We provide an extensive experimental evaluation to illustrate the performance of the proposed techniques. ...|$|E
50|$|SDRAM {{significantly}} revises the <b>asynchronous</b> memory <b>interface,</b> {{adding a}} clock (and a clock enable) line. All other signals are received on the rising {{edge of the}} clock.|$|R
40|$|Presented work covers main web modelis: {{classic and}} {{asynchronous}} (AJAX) and their working schemes. The author pays great attention to <b>asynchronous</b> <b>interfaces</b> – their working principles, existing software solutions and problems which may occure when developer tries to adopt them. The research work describes {{the range of}} implementation possibilities: branches of technology, usable formats, their pros and cons. Prototype model for creating asynchronous web systems and it‘s features are provided. Author introduces what problems may occur in implementation phase and what influence this technology may have on users‘, developers‘ and whole web‘s security...|$|R
5000|$|Queued, <b>asynchronous</b> {{communication}} architecture <b>interface</b> US Patent Application: 20060104295 ...|$|R
30|$|The Testbed- 12 Results Engineering Report [11] {{discusses}} the three approaches considered in Testbed- 12 to implement asynchronous communication: WPS façades, service-specific extensions, and OGC PubSub. The first {{builds on the}} capabilities of the WPS, which offers asynchronous communication patterns and therefore can be used as façade to any other service. The second develops an individual solution per each OWS interface (in fact, the WPS <b>asynchronous</b> <b>interface</b> is such a solution, for the WPS), and the third option builds on the PubSub Standard, which defines publish/subscribe functionality independently of the binding technology.|$|E
40|$|Technical Aspects of Data Communication, Third Edition {{provides}} information {{pertinent to the}} technical aspects of data communication. This book discusses a simple <b>asynchronous</b> <b>interface</b> implemented with a specialized integrated circuit called a UART. Organized into 28 chapters, this edition begins with an overview of the interface standards ranging from the classic EIA- 232 -D to the EIA- 530. This text then describes modems and modem control, with material on high-speed modems and error-correcting modems. Other chapters discuss hardware and software methods. This book discusses as well digital t...|$|E
40|$|A low-latency <b>asynchronous</b> <b>interface</b> {{for use in}} globally-asynchronous locally-synchronous (GALS) {{integrated}} circuits is presented. The interface is compact and does not alter the local clocks of the interfaced local clock domains in any way (unlike many existing GALS interfaces). Two applications of the interface to GALS systems are shown. The first is a single-chip shared-memory multiprocessor for generic supercomputing use. The second is an application-specific coprocessor for hardware acceleration of the Smith-Waterman algorithm. This is a bioinformatics algorithm used for sequence alignment (similarity searching) between DNA or amino acid (protein) sequences and sequence databases such as the recently completed human genome database...|$|E
50|$|The SENT {{protocol}} is a one-way, <b>asynchronous</b> voltage <b>interface</b> {{which requires}} three wires: {{a signal line}} (low state < 0.5V, high state > 4.1V), a supply voltage line (5V) and a ground line.|$|R
40|$|Modern {{multicore}} {{systems have}} {{a large number of}} components operating in different clock domains and communicating through <b>asynchronous</b> <b>interfaces.</b> These interfaces use synchronizer circuits, which guard against metastability failures but introduce latency in processing the asynchronous input. We propose a speculative method that hides synchronization latency by overlapping it with computation cycles. We verify the correctness of our approach through a field programmable gate array implementation and apply it to a number of synthesized benchmarks. Synthesis results reveal that our approach achieves average savings of 135 % and 204 % in area costs and nearly 100 % in power costs compared to two similar speculative technique...|$|R
40|$|Abstract: A {{verification}} approach {{which allows}} the verification of functional and timing behavior of circuits at transistor level is presented. It is aimed at the verification of <b>asynchronous</b> <b>interfaces</b> and standard-cell library modules. In contrast to other approaches, timing is explicitly considered, allowing to verify timing-dependent effects {{with a high degree}} of accuracy. To conveniently specify desired properties, a specification language based on Linear Quantized Temporal Logic (QLTL) is provided. For an efficient verification, input constraints, necessary for a proper circuit functioning, are converted into input constraining automata, reducing the reachable state space and providing a model linearisation, necessary to prove linear QLTL formulas by branching CTL model checking. ...|$|R
40|$|Abstract—A low-latency <b>asynchronous</b> <b>interface</b> {{for use in}} globally-asynchronous locally-synchronous (GALS) {{integrated}} circuits is presented. The interface is compact and does not alter the local clocks of the interfaced local clock domains in any way (unlike many existing GALS interfaces). Two applications of the interface to GALS systems are shown. The first is a single-chip shared-memory multiprocessor for generic supercomputing use. The second is an application-specific coprocessor for hardware acceleration of the Smith-Waterman algorithm. This is a bioinformatics algorithm used for sequence alignment (similarity searching) between DNA or amino acid (protein) sequences and sequence databases such as the recently completed human genome database. Keywords-interface; multiprocessor; globally-asynchronous locally-synchronous; bioinformatics; coprocessor I...|$|E
40|$|The GALS (Globally Asynchronous Locally Synchronous) {{approach}} is highly suitable for implementation of communication systems. In this paper we describe an efficient design flow for GALS design based on commercial tools. As design example we have selected a digital FIR filter. It is a nontrivial task {{to develop an}} efficient design flow for GALS based systems because of the asynchronous parts. Both simulation and implementation tools typically have problems handling the asynchronous part of the GALS system. We have therefore developed a set of <b>asynchronous</b> <b>interface</b> circuits to increase the design efficiency by allowing standard design tools to better support GALS based designs. 1...|$|E
40|$|Abstract — Camera guided {{teleoperation}} {{has long}} been the preferred mode for controlling remote robots with other modes such as asynchronous control only used when unavoidable. Because controlling multiple robots places additional demands on the operator we hypothesized that removing the forced pace for reviewing camera video might reduce workload and improve performance. In an earlier experiment participants operated four teams performing a simulated urban search and rescue (USAR) task using a conventional streaming video plus map interface or an experimental interface without streaming video but with the ability to store panoramic images on the map to be viewed at leisure. Operators were more accurate in marking victims on maps using the conventional interface; however, ancillary measures suggested that the <b>asynchronous</b> <b>interface</b> succeeded in reducing temporal demands for switching between robots. This raised the possibility that the <b>asynchronous</b> <b>interface</b> might perform better if teams were larger. In this experiment we evaluate the usefulness of asynchronous video for teams of 4, 8, or 12 robots. Operators in the two conditions were equally successful in finding victims, however, the streaming video maintained its advantage for accuracy in locating victims. usually justified in terms of “naturalness ” or “presence” afforded by control relying on teleoperation. Fong and Thorpe [1] observe that direct control while watching a video feed from vehicle mounted cameras remains {{the most common form of}} interaction. The ability to leverage experience with controls for traditionally piloted vehicles appears to heavily influence the appeal for this interaction style. P I...|$|E
40|$|The {{capacity}} of on-chip trace buffers employed for embedded logic analysis limits the observation {{window of a}} debug ex-periment. To increase the debug observation window, we pro-pose a novel architecture for embedded logic analysis based on lossless compression. The proposed architecture is particu-larly useful for in-field debugging of custom circuits that have sources of nondeterministic behavior such as <b>asynchronous</b> <b>interfaces.</b> In order to measure the tradeoff between the area overhead {{and the increase in}} the observation window, we also introduce a new compression ratio metric. We use this metric to quantify the performance gain of three lossless compression algorithms suitable for embedded logic analysis. ...|$|R
50|$|<b>Asynchronous</b> Serial <b>Interface,</b> or ASI, is a {{physical}} (connector and electrical) definition for serial data over 75-ohm coaxial cable at rates at or less than 270 megabits per second. Electrically, the signal is typically around 1 volt.|$|R
50|$|Another {{new feature}} was the NetWare <b>Asynchronous</b> Services <b>Interface</b> (NASI). It allowed network sharing of {{multiple}} serial devices, such as modems. Client port redirection occurred via an MS-DOS or Microsoft Windows driver allowing companies to consolidate modems and analog phone lines.|$|R
40|$|In this paper, a low-cost, {{low-power}} {{and high}} performance micro control unit (MCU) core is proposed for wireless {{body sensor networks}} (WBSNs). It consists of an <b>asynchronous</b> <b>interface,</b> a register bank, a reconfigurable filter, a slop-feature forecast, a lossless data encoder, an error correct coding (ECC) encoder, a UART interface, a power management (PWM), and a multi-sensor controller. To improve the system performance and expansion abilities, the <b>asynchronous</b> <b>interface</b> is added for handling signal exchanges between different clock domains. To eliminate the noise of various bio-signals, the reconfigurable filter is created to provide the functions of average, binomial and sharpen filters. The slop-feature forecast and the lossless data encoder is proposed to reduce the data of various biomedical signals for transmission. Furthermore, the ECC encoder is added to improve the reliability for the wireless transmission and the UART interface is employed the proposed design to be compatible with wireless devices. For long-term healthcare monitoring application, a power management technique is developed for reducing the power consumption of the WBSN system. In addition, the proposed design can be operated with four different bio-sensors simultaneously. The proposed design was successfully tested with a FPGA verification board. The VLSI architecture of this work contains 7. 67 -K gate counts and consumes the power of 5. 8 mW or 1. 9 mW at 100 MHz or 133 MHz processing rate using a TSMC 0. 18 μm or 0. 13 μm CMOS process. Compared with previous techniques, this design achieves higher performance, more functions, more flexibility and higher compatibility than other micro controller designs...|$|E
40|$|Practical safety-critical {{distributed}} systems must integrate safety critical and non-critical {{data in a}} common platform. Safety critical systems almost always consist of isochronous components that have synchronous or <b>asynchronous</b> <b>interface</b> with other components. Many of these systems also support a mix of synchronous and asynchronous interfaces. This report presents {{a study on the}} modeling and analysis of asynchronous, synchronous, and mixed synchronous/asynchronous systems. We build on the SAE Architecture Analysis and Design Language (AADL) to capture architectures for analysis. We present preliminary work targeted to capture mixed low- and high-criticality data, as well as real-time properties in a common Model of Computation (MoC). An abstract, but representative, test specimen system was created as the system to be modeled...|$|E
40|$|We {{present an}} {{automated}} design approach that leverages the commonly available digital design tools {{in order to}} rapidly synthesize asynchronous event-based interface circuits from behavioral VHDL code. As part of the proposed design approach, we describe a verification methodology that is able to reveal early in the design process potential timing failures in the generated circuits. Due to the fast design cycle, the approach presented allows designers to quickly explore different architectures for asynchronous circuits and compare them using quantitative metrics based for example on power consumption or silicon area. We validated the proposed design method by synthesizing <b>asynchronous</b> <b>interface</b> circuits for a neuromorphic multi-neuron architecture, and fabricating the VLSI device. We present data from silicon that demonstrates the correct operation of the automatically generated circuits...|$|E
50|$|Playout {{will usually}} involve an airchain of devices which begin with content, {{typically}} stored on video server, and ultimately an output, either as an (<b>Asynchronous</b> serial <b>interface)</b> (ASI) / IP or (Serial Digital Interface) (SDI) for on pass to a distribution company.|$|R
50|$|The CMOS W65C51N <b>Asynchronous</b> Communications <b>Interface</b> Adapter (ACIA) {{provides}} an easily implemented, program controlled interface between microprocessor based systems and serial communication data sets and modems. It {{is produced by}} Western Design Center (WDC) and is a drop-in replacement for the MOS Technology 6551.|$|R
50|$|The 6551 <b>Asynchronous</b> Communications <b>Interface</b> Adapter (ACIA) was an {{integrated}} circuit made by MOS Technology. It {{served as a}} companion UART chip for the widely popular 6502 microprocessor. Intended to implement RS-232, its specifications called for a maximum speed of 19,200 bits per second.|$|R
