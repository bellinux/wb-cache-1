358|74|Public
5|$|In 2015, between Steam-based game inventories, trading cards, {{and other}} virtual goods {{attached}} to a user's account, Valve stated that the potential monetary value had drawn hackers to try to access user accounts for financial benefit, and continue to encourage users to secure accounts with Steam Guard; when trading was introduced in 2011. Valve reported that in December 2015, around 77,000 accounts per month were hijacked, enabling the hijackers to empty out the user's inventory of items through the trading features. To improve security, the company announced that new restrictions would be added in March 2016, under which 15-day holds are placed on traded items unless they activate, and authenticate with Steam Guard Mobile <b>Authenticator.</b>|$|E
5|$|Valve added Steam Guard {{functionality}} to the Steam {{client in}} March 2011 {{to protect against}} the hijacking of accounts via phishing schemes, one of the largest support issues Valve had at the time. Steam Guard was advertised {{to take advantage of the}} identity protection provided by Intel's second-generation Core processors and compatible motherboard hardware, which allows users to lock their account to a specific computer. Once locked, activity by that account on other computers must first be approved by the user on the locked computer. Support APIs for Steam Guard are available to third-party developers through Steamworks. Steam Guard also offers two-factor, risk-based authentication that uses a one-time verification code sent to a verified email address associated with the Steam account; this was later expanded to include two-factor authentication through the Steam mobile application, known as Steam Guard Mobile <b>Authenticator.</b> If Steam Guard is enabled, the verification code is sent each time the account is used from an unknown machine.|$|E
25|$|These {{security}} breaches led to {{a class-action}} lawsuit against Blizzard in November 2012, claiming {{that the company was}} making a profit from the sale of <b>Authenticator</b> devices rather than using the money to enhance the security of their own servers, and that they failed to notify affected users about the August data breach in a timely manner. Most of the claims in the suit were summarily dismissed in favor of Blizzard in July 2013, primarily as the plaintiffs could not show any harm they suffered from these breaches, and the remaining claims related to Battle.net <b>Authenticator</b> promotional claims were resolved through mediation. The case was ultimately closed in February 2014.|$|E
40|$|A {{family of}} <b>authenticators</b> based on static shared keys is {{identified}} and proven secure. The <b>authenticators</b> {{can be used}} in a variety of settings, including identity-based ones. Application of the <b>authenticators</b> to Di#e-Hellman variants in appropriate groups leads to authenticated key agreement protocols which have attractive properties in comparison with other proven-secure protocols. We explore two key agreement protocols that result...|$|R
40|$|Security of {{authentication}} protocols heavily {{relies on}} the confidentiality of credentials (or <b>authenticators)</b> like passwords and session IDs. However, unlike browser-based web applications for which highly evolved browsers manage the <b>authenticators,</b> Android apps have to construct their own management. We find that most apps simply locate their <b>authenticators</b> into the persistent storage and entrust underlying Android OS for mediation. Consequently, these <b>authenticators</b> can be leaked through compromised backup channels. In this work, we conduct the first systematic investigation on this previously overlooked attack vector. We find that nearly all backup apps on Google Play inadvertently expose backup data to any app with internet and SD card permissions. With this exposure, the malicious apps can steal other apps' <b>authenticators</b> and obtain complete control over the authenticated sessions. We show {{that this can be}} stealthily and efficiently done by building a proof-of-concept app named AuthSniffer. We find that 80 (68. 4 %) out of the 117 tested top-ranked apps which have implemented authentication schemes are subject to this threat. Our study should raise the awareness of app developers and protocol analysts about this attack vector. No Full Tex...|$|R
50|$|Relying {{parties may}} have the {{capability}} to set policies to use biometric <b>authenticators.</b>|$|R
25|$|Fukuda, a seal <b>authenticator,</b> is {{bedridden}} {{by a car}} accident. Because of this, {{he offers}} his coworker Tanno 300,000yen {{to take care of}} the girl in his apartment. When Tanno discovers that she is a sex slave immobilized due to foot binding, he suffocates Fukuda to become her ninth master.|$|E
25|$|Once enabled, {{users are}} {{required}} to verify their identity using a second method after entering their username and password when logging in on a new device. Common methods include entering a code sent to a user's mobile phone through a text message, entering a code using the Google <b>Authenticator</b> smartphone app, or by inserting a physical security key into the computer's USB port.|$|E
500|$|Shortly after Gretzky's 1991 purchase, {{previously}} ignored {{allegations that}} the card had once been subject to alteration flared up again. This is when Gretzky approached the Professional Sports <b>Authenticator</b> (PSA) company to grade the card, resulting in the aforementioned PSA 8 NM-MT grading. Despite PSA company president David Hall's personal statement that the card was [...] "superb" [...] and a [...] "fantastic card in every way," [...] {{a number of people}} in the memorabilia industry were not convinced that the card had not been altered at some point.|$|E
5000|$|<b>Authenticators</b> are {{commonly}} based {{on at least}} one of the following four factors: ...|$|R
5000|$|... the <b>authenticators</b> section with {{settings}} for SMTP AUTH, a rule per auth mechanism.|$|R
50|$|Users {{may have}} the option to choose the {{biometric}} <b>authenticators</b> they would like to utilize.|$|R
500|$|In 1991, National Hockey League player Wayne Gretzky {{purchased}} a mint condition 1909 T206 Honus Wagner baseball card, with a [...] Piedmont cigarette brand back, at a Sotheby's auction. The card {{became known as}} the [...] "Gretzky T206 Wagner" [...] to the public. [...] The Professional Sports <b>Authenticator</b> (PSA) company graded this card a PSA 8 Near Mint-Mint (NM-MT) on their 10-point scale, the highest grade given to a T206 Honus Wagner card. Bill Hughes was the official grader of the card, working for PSA at the time. Hughes admitted to knowing that the card had been altered when he graded it.|$|E
5000|$|An <b>authenticator</b> app, such as Google <b>Authenticator,</b> or an SMS code.|$|E
5000|$|... #Caption: EAP data {{is first}} {{encapsulated}} in EAPOL frames between the Supplicant and <b>Authenticator,</b> then re-encapsulated between the <b>Authenticator</b> and the Authentication server using RADIUS or Diameter.|$|E
5000|$|In INFOSEC, <b>authenticators</b> are means used {{to confirm}} the {{identity}} or eligibility of a station, originator, or individual.|$|R
5000|$|Processes: their hierarchy, PIDs, {{user and}} group <b>authenticators</b> (UID, GID, SID, etc.), system capabilities, threads, and running and stopped states ...|$|R
40|$|The Twelfth International Workshop on Collaborative Editing Systems, CSCW' 12 International audienceIn {{recent years}} {{collaborative}} editing {{systems such as}} wikis, GoogleDocs and version control systems became very popular. In order to improve reliability, fault-tolerance and availability shared data is replicated in these systems. User misbehaviors can make the system inconsistent or bring corrupted updates to replicated data. Solutions to secure data history of state-based replication exist, however they are hardly applied to operation-based replication. In this paper we propose an approach to secure log in operation-based optimistic replication system. <b>authenticators</b> based on hash values and digital signatures are generated each time a site shares or receives new updates on replicas. <b>authenticators</b> secure logs with security properties of integrity and authenticity. We present in detail algorithms to construct and verify <b>authenticators</b> and we analyse their complexities...|$|R
5000|$|The <b>authenticator</b> {{checks the}} {{response}} against its own {{calculation of the}} expected hash value. If the values match, the <b>authenticator</b> acknowledges the authentication; otherwise it should terminate the connection.|$|E
5000|$|In IEEE 802.1X, an <b>authenticator</b> is {{an entity}} {{at one end}} of a {{point-to-point}} LAN segment that facilitates authentication of the entity attached {{to the other end of}} that link. In practice, the <b>authenticator</b> is usually a network switch or wireless access point that serves as the point of connection for computers joining the network. The <b>authenticator</b> receives connection requests from a supplicant on the connecting computer.|$|E
5000|$|... 802.1X {{authentication}} involves three parties: a supplicant, an <b>authenticator,</b> and an authentication server. The supplicant is {{a client}} device (such as a laptop) that wishes to {{attach to the}} LAN/WLAN. The term 'supplicant' is also used interchangeably {{to refer to the}} software running on the client that provides credentials to the <b>authenticator.</b> The <b>authenticator</b> is a network device, such as an Ethernet switch or wireless access point; and the authentication server is typically a host running software supporting the RADIUS and EAP protocols. In some cases, the authentication server software may be running on the <b>authenticator</b> hardware.|$|E
40|$|Client {{authentication}} {{has been}} a continuous source of problems on the Web. Although many well-studied techniques exist for authentication, Web sites continue to use extremely weak authentication schemes, especially in non-enterprise environments such as store fronts. These weaknesses often result from careless use of <b>authenticators</b> within Web cookies. Of the twenty-seven sites we investigated, we weakened the client authentication on two systems, gained unauthorized access on eight, and extracted the secret key used to mint <b>authenticators</b> from one...|$|R
40|$|Data {{integrity}} {{is extremely important}} for cloud based storage services, where cloud users no longer have physical possession of their outsourced files. A number of data auditing mechanisms have been proposed to solve this problem. However, how to update a cloud user 2 ̆ 7 s private auditing key (as well as the <b>authenticators</b> those keys are associated with) without the user 2 ̆ 7 s re-possession of the data remains an open problem. In this paper, we propose a key-updating and authenticator-evolving mechanism with zero-knowledge privacy of the stored files for secure cloud data auditing, which incorporates zero knowledge proof systems, proxy re-signatures and homomorphic linear <b>authenticators.</b> We instantiate our proposal with the state-of-the-art Shacham-Waters auditing scheme. When the cloud user needs to update his key, instead of downloading the entire file and re-generating all the <b>authenticators,</b> the user can just download and update the <b>authenticators.</b> This approach dramatically reduces the communication and computation cost while maintaining the desirable security. We formalize the security model of zero knowledge data privacy for auditing schemes in the key-updating context and prove the soundness and zero-knowledge privacy of the proposed construction. Finally, we analyze the complexity of communication, computation and storage costs of the improved protocol which demonstrates the practicality of the proposal...|$|R
5000|$|Life-cycle {{maintenance}} - the CSP {{is charged}} {{with the task of}} maintaining the user’s credential of the course of its lifetime, while the subscriber is responsible for maintaining his or her <b>authenticator(s).</b>|$|R
50|$|The <b>authenticator</b> {{acts like}} a {{security}} guard to a protected network. The supplicant (i.e., client device) is not allowed access through the <b>authenticator</b> to the protected side of the network until the supplicant’s identity has been validated and authorized. An analogy to this is providing a valid visa at the airport's arrival immigration before being allowed to enter the country. With 802.1X port-based authentication, the supplicant provides credentials, such as user name/password or digital certificate, to the <b>authenticator,</b> and the <b>authenticator</b> forwards the credentials to the authentication server for verification. If the authentication server determines the credentials are valid, the supplicant (client device) is allowed to access resources located on the protected side of the network.|$|E
5000|$|Authentication If the {{authentication}} server and supplicant agree on an EAP Method, EAP Requests and Responses are sent between the supplicant and the {{authentication server}} (translated by the <b>authenticator)</b> until the authentication server responds with either an EAP-Success message (encapsulated in a RADIUS Access-Accept packet), or an EAP-Failure message (encapsulated in a RADIUS Access-Reject packet). If authentication is successful, the <b>authenticator</b> sets the port to the [...] "authorized" [...] state and normal traffic is allowed, {{if it is}} unsuccessful the port remains in the [...] "unauthorized" [...] state. When the supplicant logs off, it sends an EAPOL-logoff message to the <b>authenticator,</b> the <b>authenticator</b> then sets the port to the [...] "unauthorized" [...] state, once again blocking all non-EAP traffic.|$|E
5000|$|Windows Phone 7.5/8/8.1/10: Microsoft <b>Authenticator</b> Virtual TokenFactor ...|$|E
40|$|International audienceWithin {{last years}} multi-synchronous {{collaborative}} editing systems became widely used. Multi-synchronous collaboration maintains multiple, simultaneous streams of activity which continually diverge and synchronized. These streams of activity {{are represented by}} means of logs of operations, i. e. user modifications. A malicious user might tamper his log of operations. At the moment of synchronization with other streams, the tampered log might generate wrong results. In this paper, we propose a solution relying on hash-chain based <b>authenticators</b> for authenticating logs that ensure the authenticity, the integrity of logs, and the user accountability. We present algorithms to construct <b>authenticators</b> and verify logs. We prove their correctness and provide theoretical and practical evaluations...|$|R
30|$|When a MT moves between {{different}} <b>authenticators,</b> {{it is desirable}} to avoid a full EAP authentication to support fast handover. Therefore, the HOKEY group proposed a new method for the EAP known as EAP Re-authentication protocol (ERP) [23].|$|R
40|$|Within {{last years}} multi-synchronous {{collaborative}} editing systems became widely used. Multi-synchronous collaboration maintains multiple, simultaneous streams of activity which continually diverge and synchronized. These streams of activity {{are represented by}} means of logs of operations, i. e. user modifications. A malicious user might tamper his log of operations. At the moment of synchro-nization with other streams, the tampered log might generate wrong results. In this paper, we propose a solution relying on hash-chain based <b>authenticators</b> for authenticating logs that ensure the authen-ticity, the integrity of logs, and the user accountability. We present algorithms to construct <b>authenticators</b> and verify logs. We prove their correctness and provide theoretical and practical evaluations. Categories and Subject Descriptor...|$|R
5000|$|Google <b>Authenticator</b> (OATH/HOTP or OATH/TOTP, base32 seed, QRcode provisioning) ...|$|E
5000|$|Initiation To {{initiate}} authentication the <b>authenticator</b> will periodically transmit EAP-Request Identity frames to {{a special}} Layer 2 address (01:80:C2:00:00:03) on the local network segment. The supplicant listens on this address, and on receipt of the EAP-Request Identity frame it responds with an EAP-Response Identity frame containing an identifier for the supplicant such as a User ID. The <b>authenticator</b> then encapsulates this Identity response in a RADIUS Access-Request packet and forwards {{it on to the}} authentication server. The supplicant may also initiate or restart authentication by sending an EAPOL-Start frame to the <b>authenticator,</b> which will then reply with an EAP-Request Identity frame.|$|E
50|$|<b>Authenticator</b> {{provides}} a six- to eight-digit one-time password which users must provide {{in addition to}} their username and password to log into Google services or other sites. The <b>Authenticator</b> can also generate codes for third-party applications, such as password managers or file hosting services. Previous versions of the software were open-sourced but subsequent releases are proprietary.|$|E
50|$|Following similar dissolutions of {{authentication}} {{boards for}} Keith Harring, Jackson Pollock, Pablo Picasso and Jean-Michel Basquiat, the New York State Legislature {{passed a bill}} in May, 2014, that will 'make lawsuits against art <b>authenticators</b> more difficult to win and to punish “nuisance” lawsuits'.|$|R
30|$|To achieve {{previously}} mentioned requirements, the <b>authenticators</b> {{and the final}} session key in the proposed protocol rely on different random numbers. In this way, the <b>authenticators</b> between the client and the server will leak no information of the password to the gateway, and the session key established between the client and the gateway is private to the server. Furthermore, standard techniques in threshold-based cryptography {{can also be used}} to achieve threshold version of the proposed protocol. It is worth pointing out that our protocol does not require public parameters. The client and the server only need to establish a shared password in advance and do not need to establish other common parameters such as generators of a finite cyclic group. This is appealing in environments where clients have insufficient resources to authenticate public parameters.|$|R
40|$|Part 13 : Short PapersInternational audienceIn {{an on-line}} transaction, a client usually have to present some <b>authenticators</b> (password, user {{certificate}} or both) to the server. However, those <b>authenticators</b> {{are exposed to}} client-side malware such that the malware is able to obtain the server-client messages, or impersonate the user to build another “secure” channel with the server. The present paper aims to patch this client-side security flaw with a novel password-input method. Specifically, it enables a user to input a password by clicking an on-screen CAPTCHA keyboard, rather than a keyboard typing. The CAPTCHA keyboard is designed to greatly increase the difficulty of password eavesdropping and phishing in a malicious environment given that the malware can not monitor the browser secret memory space. Our implementation shows that Firwfox browser incorporated with CAPTCHA Keyboard and smartcard is viable and transparent over HTTPS protocol...|$|R
