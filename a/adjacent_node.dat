89|1003|Public
5000|$|If {{its left}} or right <b>adjacent</b> <b>node</b> is light loaded, the node will {{transfer}} some data to the <b>adjacent</b> <b>node</b> to lower its load ...|$|E
5000|$|If sibling (<b>adjacent</b> <b>node</b> with same parent as L) is {{more than}} half-full, re-distribute, {{borrowing}} an entry from it.|$|E
50|$|Multiple pathing behaves {{exactly like}} {{tactical}} pathing, but will path entities to any <b>adjacent</b> <b>node</b> {{with an expression}} evaluating to true.|$|E
3000|$|... nodes are uniformly {{distributed}} {{over the}} circle with a constant distance between <b>adjacent</b> <b>nodes.</b> Without loss of generality, let {{the distance between}} two <b>adjacent</b> <b>nodes</b> be a unit distance. Each transmission is over only one unit distance (i.e., a node only transmits to its two <b>adjacent</b> <b>nodes).</b> Consider the receiver of a link. We assume that simultaneous transmission by another link whose transmitter is two or more hops away from the receiver of the first link will not cause a collision to the first link. In our model, [...]...|$|R
30|$|Edges: Walls {{existing}} {{between two}} <b>adjacent</b> <b>nodes,</b> all the edges in BLG are undirected.|$|R
5000|$|... #Caption: A 2D compact stencil {{using all}} 8 <b>adjacent</b> <b>nodes,</b> plus the center node (in red).|$|R
50|$|When a node x {{accepts a}} joining node y as its child and detects that the tree balance is violated, it initiates the {{restructuring}} process. Without loss of generality, suppose that this restructuring is towards the right. Assume that y joins as x's left child. To rebalance thesystem, x notifies y to replace its position, and notifies its right <b>adjacent</b> <b>node</b> z that x will replace z's position. z then checks its right <b>adjacent</b> <b>node</b> t {{to see if}} its left child is empty. If it is, and adding a child to t {{does not affect the}} tree balance, z takes the position of t's left child as its new position and the restructuring process stops. If t's left child is full or t cannot accept x as its left child without violating the balance property, z occupies t's position while t needs to find a new position for itself by continuing to its right <b>adjacent</b> <b>node.</b>|$|E
50|$|Tactical pathing {{allows the}} {{programmer}} to use C# predicates {{to determine the}} pathing of an entity to each <b>adjacent</b> <b>node.</b> If more than one expression evaluates to true, the entity will follow the first path with a true expression.|$|E
5000|$|In {{order to}} {{describe}} the connection between adjacent nodes by a mesh of series nodes, look at the figure on the right. As the incident pulse in timestep k+1 on a node is the scattered pulse from an <b>adjacent</b> <b>node</b> in timestep k, the following connection equations are derived: ...|$|E
5000|$|Let's {{say that}} we take in {{consideration}} just 2 <b>adjacent</b> <b>nodes</b> (from, in general, n of them): ...|$|R
30|$|The {{simultaneous}} signals {{received from}} the two <b>adjacent</b> <b>nodes</b> do not interfere {{due to the nature}} of PNC.|$|R
40|$|Abstract—Consider {{a network}} in which <b>adjacent</b> <b>nodes</b> {{exchange}} messages via multiple communication channels. Multiple channels between <b>adjacent</b> <b>nodes</b> are desirable {{due to their}} cost effectiveness and improved fault-tolerance. We consider the problem of providing deterministic quality of service guarantees in this network. We show that any scheduling protocol designed for a single channel can be converted into a multiplechannel scheduling protocol without significantly increasing the delay at the scheduling node. However, because there are multiple channels between <b>adjacent</b> <b>nodes,</b> the packets of a flow may be reordered. This in turn significantly increases the upper bound on the end-to-end delay of the flow. We show how this increase in delay can be avoided {{through the use of}} efficient sorting techniques. I...|$|R
50|$|Within TIS-100, {{the player}} {{is said to}} have come across a {{malfunctioning}} TIS-100 computer ("Tessellated Intelligence System") and its manual, based on early computers of the 1980s. The computer is presented to the player as twelve separate processing nodes laid out in a four-by-three grid. Each node has a single processor register to store a numerical value as well as a backup register. Nodes also hold their own assembly language program as entered by the user. The assembly language, a simplified version of real-world assembly languages, allows the node to accept external input or a numerical value sent from an <b>adjacent</b> <b>node,</b> perform basic math and logic operations, store and backup the current data value, and then send results to an <b>adjacent</b> <b>node</b> or to the program's output. Later puzzles introduce nodes that have the ability to manipulate a simple 4-color graphics display.|$|E
50|$|The {{algorithm}} {{has a few}} {{special features}} to cope with cases that are common in radio networks, such as unidirectional links, and looped-transmission caused by out-of-date routing tables. In particular, it reroutes all transmissions to nearby nodes whenever it loses a link to an <b>adjacent</b> <b>node.</b> It also retransmits its adjacency when this occurs. This is useful precisely because the most valuable, long-distance links are also the least reliable in a radio network.|$|E
50|$|Now we {{show that}} P1 always wins when Pe wins. If Pe wins, ψ is true. If ψ is true, every clause in {{the right side of}} the graph {{contains}} a true literal. P2 can choose any clause. Then P1 chooses the literal that is true. And because it is true, its <b>adjacent</b> <b>node</b> in the left vertical node has already been selected, so P2 has no moves to make and loses.|$|E
3000|$|... {{range for}} two <b>adjacent</b> <b>nodes</b> will overlap somewhat, or (equivalently) that some {{projection}} {{data will be}} sent to more than one node.|$|R
5000|$|In {{the central}} {{difference}} scheme we replace the value {{at the face}} with {{the average of the}} values at the <b>adjacent</b> <b>nodes,</b> ...|$|R
3000|$|Note that in crisp graph, {{for every}} two <b>adjacent</b> <b>nodes</b> u and v, |d(u,x) - d(v,x)| ≤ 1. In Figure 2, u [...]...|$|R
5000|$|The player {{controls}} the Cosmic Wartoad as {{he attempts to}} rescue the queen. To achieve this he must travel across the Rygellian Timevoid, an 8x8 grid of [...] "nodes", by entering a node, successfully completing the minigame within, and then entering an <b>adjacent</b> <b>node,</b> all the while collecting the eight pieces of the Cosmic Toolkit that will shut down the Sludge Saw. Each node contains one of several repeating minigames, which typically involve the Cosmic Wartoad fighting one or more enemies on a pseudo-isometric screen.|$|E
50|$|PTSE {{information}} is passed between nodes using PNNI topology state packets (PTSPs). These packets utilize the routing control channel (RCC; VPI = 0 and VCI = 18) between adjacent nodes. The RCC {{is also used}} for Hello packets and other PNNI messages. If the switch is unable to establish the RCC with the <b>adjacent</b> <b>node,</b> then PTSE {{information is}} not exchanged. Once a node receives PTSE information, the node stores the contents, or element information, in the database. This information is used to generate precomputed routing tables that identify routes to other network devices. PNNI uses the Dijkstra's algorithm for shortest path first (SPF) calculation. The PNNI database {{is also used to}} perform on-demand routing when the appropriate routing table does not contain a viable path.|$|E
50|$|There are innumerable {{possible}} {{variants of}} pursuit-evasion, though {{they tend to}} share many elements. A typical, basic example is as follows (cops and robber games): Pursuers and evaders occupy nodes of a graph. The two sides take alternate turns, which consist of each member either staying put or moving along an edge to an <b>adjacent</b> <b>node.</b> If a pursuer occupies the same node as an evader the evader is captured and removed from the graph. The question usually posed is how many pursuers are necessary to ensure the eventual capture of all the evaders. If one pursuer suffices, the graph is called a cop-win graph. In this case, a single evader can always be captured in time linear {{to the number of}} n nodes of the graph. Capturing r evaders with k pursuers can take in the order of rn time as well, but the exact bounds for more than one pursuer are still unknown.|$|E
5000|$|... #Caption: An {{example to}} {{illustrate}} the principle of MACAW. It is assumed that only <b>adjacent</b> <b>nodes</b> are in transmission range of each other.|$|R
3000|$|... {{does not}} change its sign between two {{different}} <b>adjacent</b> <b>nodes.</b> The existence of nodes is guaranteed through the orthogonality properties of the whole polynomial sequence [...]...|$|R
30|$|Because the {{readings}} collected by <b>adjacent</b> <b>nodes</b> are highly correlated, data aggregation (fusion) {{can be used}} [19]. Data aggregation also consumes EDA (nJ/bit/signal) amount of energy.|$|R
5000|$|In this case, {{the quantum}} network {{consists}} of many short distance links of perhaps tens {{or hundreds of}} kilometres. In the simplest case of a single repeater, two pairs of entangled qubits are established: [...] and [...] located at the sender and the repeater, and a second pair [...] and [...] located at the repeater and the receiver. These initial entangled qubits can be easily created, for example through parametric down conversion, with one qubit physically transmitted to an <b>adjacent</b> <b>node.</b> At this point, the repeater can perform a bell measurement on the qubits [...] and [...] thus teleporting the quantum state of [...] onto [...] This {{has the effect of}} [...] "swapping" [...] the entanglement such that [...] and [...] are now entangled at a distance twice that of the initial entangled pairs. It can be seen that a network of such repeaters can be used linearly or in a hierarchical fashion to establish entanglement over great distances.|$|E
50|$|In {{the finite}} element method, the {{behavior}} (stresses, strains and displacements resulting from load conditions) of large-scale structures is approximated by a FE model consisting of structural elements (members) connected at structural node points. Calculations on traditional computers are performed at each node point and results communicated to <b>adjacent</b> <b>node</b> points until {{the behavior of}} the entire structure is computed. On the Finite Element Machine, microprocessors located at each node point perform these nodal computations in parallel. If there are more node points (N) than microprocessors (P), then each microprocessor performs N/P computations. The Finite Element Machine contained 32 processor boards each with a Texas Instruments TMS9900 processor, 32 Input/Output (IO) boards and a TMS99/4 controller. The FEM was conceived, designed and fabricated at NASA Langley Research Center. The TI 9900 processor chip was selected by the NASA team as it was the first 16-bit processor available on the market which until then was limited to less powerful 8-bit processors. The FEM concept was first successfully tested to solve beam bending equations on a Langley FEM prototype (4 IMSAI 8080s). This led to full-scale FEM fabrication & testing by the FEM hardware-software-applications team led by Dr. Olaf Storaasli formerly of NASA Langley Research Center and Oak Ridge National Laboratory (currently at USEC).The first significant Finite Element Machine results are documented in: The Finite Element Machine: An experiment in parallel processing (NASA TM 84514).|$|E
5000|$|This {{method is}} a based on rules and {{concepts}} adopted from the Selfhealing Network protocol. The {{idea behind the}} (DCPC) is as follows: each spare link has a state associated with it called a statelet {{with a number of}} states. The node sees each logical link with an incoming state and an outgoing state. The incoming state from the link to the node originates from an <b>adjacent</b> <b>node</b> that is connected by that link. Also each outbound state from a link has an incoming state which forms its precursor. Based on this idea, a number of statelets is sent throughout the network (broadcast) and forms a tree of states. [...] "Each node in the tree, is rooted at the precursor port from which the outgoing statelets are propagated." [...] This is called a state route. There are two node options in the algorithm namely Cycler and the Tandem, each having it specific role. The Cycler is a sender/chooser role, in this mode the Cycler sends and receives parts of a state it initiated. All of the nodes adopt this behavior and this is accomplished in a round-robin scheme. The other role is the Tandem, which works by mediating the state broadcasts competition with new rules and criteria not found in Selfhealing networks. Simply put, each node is allowed to explore the network and discover possible p-cycles. The Tandem role also dictates allowed discovery of p-cycles by the Cycler node type. Based on the DCPC, the p-cycles are self-organized in the spare capacity of the network and are found in a distributed way. The algorithm can be re-run each time a network change occurs to create an optimum use of spare capacity. For more information the reader is encouraged to read 9.|$|E
50|$|This {{defines the}} number of {{immediately}} <b>adjacent</b> <b>nodes</b> to a particular node. These nodes should be immediate neighbors. In case of a hypercube the degree is n.|$|R
5000|$|The {{general idea}} is to compute the {{impedance}} [...] at a terminal node of the Y circuit with impedances , [...] to <b>adjacent</b> <b>nodes</b> in the Δ circuit by ...|$|R
40|$|We {{consider}} sparse random intersection graphs {{with the}} property that the clustering coefficient does not vanish {{as the number}} of nodes tends to infinity. We find explicit asymptotic expressions for the correlation coefficient of degrees of <b>adjacent</b> <b>nodes</b> (called the assortativity coefficient), the expected number of common neighbours of <b>adjacent</b> <b>nodes,</b> and the expected degree of a neighbour of a node of a given degree k. These expressions are written in terms of the asymptotic degree distribution and, alternatively, in terms of the parameters defining the underlying random graph model...|$|R
3000|$|... by overhearing {{the packet}} from a {{transmission}} of its <b>adjacent</b> <b>node.</b> For the network coding operation, node n [...]...|$|E
3000|$|..., on {{the circle}} as the start {{point of the}} linear network. The <b>adjacent</b> <b>node</b> of the {{selected}} source node in the counterclockwise direction in the circle, labeled [...]...|$|E
30|$|The server agent {{chooses the}} <b>adjacent</b> <b>node</b> with the longest life time (the {{ability of the}} nodes to stay {{connected}} with the destination node) using the details collected from the ID, Such as nodes position, direction of motion and speed of the node.|$|E
50|$|Probabilistic pathing {{allows the}} {{programmer}} to specify a percentage chance for an entity {{to be moved}} <b>adjacent</b> <b>nodes</b> by inputting the exact probabilities, summing to one hundred, for each node.|$|R
50|$|The AMPRNet is {{composed}} {{of a series of}} subnets throughout the world. Portions of the network have point to point radio links to <b>adjacent</b> <b>nodes,</b> while others are completely isolated.|$|R
3000|$|... {{transmitting}} nodes {{in a time}} slot. In general, each transmitting node {{can transmit}} to at most two of its <b>adjacent</b> <b>nodes</b> simultaneously. Hence, in total, there can be at most [...]...|$|R
