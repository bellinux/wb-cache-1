31|187|Public
50|$|Physical and {{behavioral}} properties {{were attached to}} nodes and arcs {{in the form of}} attributes. The <b>attribute</b> <b>definition</b> language allowed the computation of attributes from ancestor attributes and global values.|$|E
50|$|Each {{attribute}} has {{an attribute}} type (a fixed-size integer mapping to an <b>attribute</b> <b>definition</b> in file $AttrDef), an optional attribute name (for example, {{used as the}} name for an alternate data stream), and a value, represented in a sequence of bytes. For NTFS, the standard data of files, the alternate data streams, or the index data for directories are stored as attributes.|$|E
5000|$|A Microsoft Help 2.x file has a [...] ".hxs" [...] extension. A {{compressed}} [...]HxS help file (help title) is {{compiled from}} {{a set of}} topic pages written in a subset of HTML, a [...]HxC main project file, an [...]HxF include file, a [...]HxT table of contents, a [...]HxA <b>attribute</b> <b>definition</b> file, {{and a number of}} [...]HxK indexes (keyword Index, NamedURL index, optional associated and context links indexes).|$|E
5000|$|The {{attribute}} or parameter: typically implemented as {{a foreign}} key into a table of <b>attribute</b> <b>definitions.</b> The <b>attribute</b> <b>definitions</b> table might contain the following columns: an attribute ID, attribute name, description, data type, and columns assisting input validation, e.g., maximum string length and regular expression, set of permissible values, etc.|$|R
40|$|National audienceIn this {{technical}} report, {{we present}} the EB 3 formal language for <b>attribute</b> <b>definitions.</b> <b>Attributes,</b> linked to entities and associations of an IS, are computed in EB 3 by recursive functions on the valid {{traces of the}} system. The syntax and the main properties of the language are introduced. Then, we show how to synthesize imperative programs that correspond to EB 3 <b>attribute</b> <b>definitions.</b> Our algorithms are illustrated by {{an example of a}} library management system...|$|R
5000|$|The {{attribute}} or parameter: {{a foreign}} key into {{a table of}} <b>attribute</b> <b>definitions</b> (in this example, definitions of clinical findings). At the very least, the <b>attribute</b> <b>definitions</b> table would contain the following columns: an attribute ID, attribute name, description, data type, units of measurement, and columns assisting input validation, e.g., maximum string length and regular expression, maximum and minimum permissible values, set of permissible values, etc.|$|R
40|$|New in v 1. 1. 0 Modifications to prinComp {{interface}} Minor bug fix {{in setting}} climatology output attributes Add support to bindGrid. time {{for dealing with}} multiGrids New function climatologyVariogram for empirical variogram calculation Prepare bindGrid. {{time to deal with}} multigrids Bug fix in <b>attribute</b> <b>definition</b> in subsetVar interna...|$|E
40|$|To meet {{external}} reporting requirements, agencies need data {{at a level}} below the 6 -digit USSGL account. Agencies ’ systems must capture this information at the transaction level by recording transactions using USSGL 6 -digit accounts plus attributes. This section provides an <b>Attribute</b> <b>Definition</b> Report and an Attribute Table for both proprietary and budgetary USSGL account...|$|E
40|$|This paper derives policy {{implications}} from agent-specific data {{with respect to}} the implementation of policy changes in the case of urban freight transport. In particular, the research, based on the case of Rome's Limited Traffic Zone, discusses alternative policy scenarios. After describing <b>attribute</b> <b>definition</b> and selection, questionnaire administration, data collection and treatment, willingness to pay estimates are calculated. The papertests,fromapolicy-maker'sperspective,theimplicationsderivingfromthepresenceof inter-agentheterogeneityandthespecific policycompositionofanimprovingandequallyimpacting interventionsonallagent-types'utility. Thepapershowshowanagent-specific approachmightincrease decision makers'awarenessandhelptakingbetterdecision...|$|E
40|$|EB 3 is a trace-based formal {{language}} {{created for the}} specification of information systems (IS). Attributes, linked to entities and associations of an IS, are computed in EB 3 by recursive functions on the valid traces of the system. We aim at synthesizing relational database transactions that correspond to EB 3 <b>attribute</b> <b>definitions.</b> Each EB 3 action is translated into a transaction. EB 3 <b>attribute</b> <b>definitions</b> are analysed to determine the key values affected by each action. Some key values are retrieved from SELECT statements that correspond to first-order predicates in EB 3 <b>attribute</b> <b>definitions.</b> To avoid problems with the sequencing of SQL statements in the transactions, temporary variables and/or tables are introduced for these key values. Generation of DELETE statements is straightforward, but distinguishing updates from insertions of tuples requires more analysis. 1...|$|R
50|$|As {{manufacturers}} do {{not necessarily}} agree on precise <b>attribute</b> <b>definitions</b> and measurement units, the following list of attributes is a general guide only.|$|R
50|$|IIM's file {{structure}} {{technology has}} largely been overtaken by the Extensible Metadata Platform (XMP), but the IIM <b>attribute</b> <b>definitions</b> are {{the basis for the}} IPTC Core schema for XMP.|$|R
40|$|National audienceIn this {{technical}} report, we {{show how}} to synthesize B substitutions from EB 3 attribute definitions. The substitutions are obtained by {{an analysis of}} CAML-like patterns used in the recursive functions that define the attributes in EB 3. We present two ways to generate B substitutions. Either we generate substitution formulas, that take all the B substitutions for each <b>attribute</b> <b>definition</b> into account, and then usual B substitutions are derived from them; or B substitutions are directly synthesized from EB 3 attribute definitions by analysing binary trees. The two techniques are illustrated by {{an example of a}} library management system...|$|E
40|$|Web {{applications}} are becoming important for {{small and large}} companies since they are integrated with their business strategies. Cascading Style Sheets (CSS) however {{are an integral part}} of contemporary Web applications that are perceived as complex by users and this result in hampering its widespread adoption. The factors responsible for CSS complexity include size, variety in its rule block structures, rule block reuse, cohesion and <b>attribute</b> <b>definition</b> in rule blocks. In this paper, we have proposed relevant metric for each of the complexity factors. The proposed metrics are validated through a practical framework. The outcome shows that the proposed metrics satisfy most of the parameters required by the practical framework hence establishing them as well structured...|$|E
40|$|Abstract. Advancements in {{engineering}} modeling {{have changed the}} work of en-gineers {{during the last two}} decades. Sophisticated descriptions store information about shape oriented engineering objects and their relationships. Boundary repre-sentations of form features constitute shape models. Rules and checks have replaced simple data form of shape model entity attributes. This change of modeling facili-tates a next step towards application of computer intelligence at engineering object related decisions. The authors propose a method of intelligent <b>attribute</b> <b>definition</b> for integrated decision assistance environments of modeling systems. This method provides quick and comprehensive assessment of situations for decisions on modi-fication of modeled objects in very complex information environments. The paper starts with an outline of the approach to intelligent decision assistance by the au-thors. Next, an Internet portal communicated scenario of the proposed modelin...|$|E
5000|$|The {{statements}} {{containing a}} [...] are defined in ECL as <b>attribute</b> <b>definitions.</b> They do not denote an action; rather {{a definition of}} a term. Thus, logically, an ECL program can be read: [...] "bottom to top" ...|$|R
40|$|Abstract. EB 3 is a trace-based formal {{language}} {{created for the}} specification of information systems (IS). Attributes, linked to entities and associations of an IS, are computed in EB 3 by recursive functions on the valid traces of the system. In this paper, we show how to synthesize relational database transactions that correspond to EB 3 <b>attribute</b> <b>definitions.</b> Thus, each EB 3 action is translated into a transaction. EB 3 <b>attribute</b> <b>definitions</b> are analysed to determine the key values affected by each action. To avoid problems with the sequencing of SQL statements in the transactions, temporary variables and/or tables are introduced for these key values. ...|$|R
50|$|In the EAV table itself, {{this is just}} an {{attribute}} ID, a foreign key into an <b>Attribute</b> <b>Definitions</b> table, as stated above. However, there are usually multiple metadata tables that contain attribute-related information, and these are discussed shortly.|$|R
40|$|The current {{metadata}} modeling {{techniques can}} not {{meet the needs of}} knowledge conception expression, knowledge organization, and metadata semantic consistency in geological domain. This paper introduces ontology and integrates this theory to geological domain metadata modeling. It adopts the first order logic equivalent algorithm and defines the metadata extended model as a quaternion group which is consists of geological term set, geological term definition set, <b>attribute</b> <b>definition</b> set and instance set. It also provides the formal description of each set. Finally the five steps for building geological domain metadata extended model are given. The result presents that this model not only provides the content standards for geological domain knowledge representation and knowledge organization, but also provides the basis for geological domain multi-source data and historical data integration and application in semantic consistency...|$|E
40|$|In {{this article}} we {{introduce}} a metric model {{as one of the}} building blocks for a repository of metrics. Particularly, starting from a conceptual model for metrics, we thoroughly discuss a catalogue template for product metrics instantiating it with some Web metrics. A catalogue of metrics basically allows tools, evaluators and other stakeholders to have a service and a consultation mechanism, which starts from a sound specification of the entity type, the <b>attribute</b> <b>definition</b> and motivation, the metric formula, criteria and protocols, among other template items. The metrics repository and the cataloguing tool can be appropriately used to support different quality assurance processes such as non-functional requirements specification, quality testing definition, etc. in different phases of the software life cycle. Effective and full-fledged quality assurance processes require not only strategic but also technological support as well...|$|E
40|$|This {{paper is}} a {{contribution}} to the ongoing quest for modular descriptions of language processors, with the specific aim of rapidly prototyping domain-specific languages [21]. Some might argue that this problem was solved in the eighties, with the development of a proliferation of language processors based on attribute grammars [11, 15, 22]. Others might argue that functional programming languages such as ML are adequate for the purpose, without any further extensions. We believe that functional programming languages do not o#er enough specialised support for implementing compilers. However, attribute grammars are not in widespread use, despite their many advantages. This may be due to restrictions imposed by <b>attribute</b> <b>definition</b> languages, which are often less flexible than general purpose functional programming languages. Such general languages tend to yield descriptions that are compact, but they lack the dedicated structuring mechanisms of attribute grammars...|$|E
50|$|The Definitions (Ὅροι Horoi; Definitiones) is a {{dictionary}} of 184 philosophical terms sometimes {{included in the}} corpus of Plato's works. Plato is generally not regarded as the editor of all of Definitions. Some ancient scholars <b>attributed</b> <b>Definitions</b> to Speusippus.|$|R
40|$|Forwarding is a {{technique}} for providing default <b>attribute</b> <b>definitions</b> in <b>attribute</b> grammars that is helpful in the modular implementation of programming languages. It complements existing techniques such as default copy rules. This paper introduces forwarding, and shows how it is but a small extension of standard higher-order attribute grammars...|$|R
5000|$|As {{discussed}} shortly, an EAV database {{is essentially}} unmaintainable without numerous supporting tables that contain supporting metadata. The metadata tables, which typically outnumber the EAV tables {{by a factor}} of at least three or more, are typically standard relational tables. An example of a metadata table is the <b>Attribute</b> <b>Definitions</b> table mentioned above.|$|R
40|$|The concept " [...] rochiad meter " was, {{taught to}} 180 college Ss {{by means of}} eight {{treatment}} conditions. The independent variables involved presenting a definition (D) or insta:ices (E) or both combined with <b>attribute</b> <b>definition</b> (A) and/or atrribute prompting (P), Dependent variables were corrected classification and specified classification errors. Hypotheses consisted of prediction of particular errors for each treatment. Six of the eight hypotheses were supported at significant levels. The most effective condition for promoting correct classificatioh consisted of D + E + A + P. The last effective condition consisted of D or E alone. (Author) Documents acquired by ERIC include many informal unpublished * materials not available from other sources. ERIC makes every effort * to obtain the best copy available. Nevertheless, items of marginal * * reproducibility are often encountered and this affects the quality...|$|E
40|$|In this work, {{we propose}} a {{cooperative}} multi-thread parallel tabu search heuristic for the circuit partitioning problem. This procedure {{is based on}} the cooperation of multiple search threads. Each thread implements a different variant of a sequential tabu search algorithm, using a different combination of initial solution algorithm and move <b>attribute</b> <b>definition.</b> These threads communicate by exchanging elite solutions. PVM and Linda are used in the implementation of the parallel tabu search procedure. Numerical results reported for a set of ISCAS benchmark circuits illustrate the effectiveness of the parallel tabu search procedure. Comparative results illustrating the efficiency of the implementations in PVM and Linda are also assessed. 1 Introduction The logical test of integrated VLSI circuits {{is one of the main}} phases of their design and fabrication. Testing a circuit amounts to submitting it to different input patterns and checking whether the observed outputs are exactly those e [...] ...|$|E
40|$|Lifelike {{animated}} agents {{present a}} challenging ongoing agenda for research. Such agent metaphors {{will only be}} widely applicable to on-line applications {{when there is a}} standardised way to map underlying engines with the visual presentation of the agents. This paper delineates functions and specifications of two mark-up languages for scripting the animation of virtual characters. These languages are: Character Mark-up Language (CML) which is an XML-based embodied agent character <b>attribute</b> <b>definition</b> and animation scripting language designed to aid in the rapid incorporation of lifelike agents into online applications or virtual reality worlds. CML is constructed based jointly on motion and multi-modal capabilities of virtual human figures. The other is Avatar Mark-up Language (AML) which is also an XML-based multimodal scripting language designed to be easily understandable by human animators and easily generated by a software process such as an agent. We illustrate the constructs of the language and delineate two real-time execution architectures for using these languages in online applications...|$|E
40|$|National audienceEB 3 is {{a formal}} {{language}} dedicated to information systems specification. Entity type and association attributes are evaluated by recursive functions defined on valid traces of systems. In this paper, a tool called EB 3 TG is presented. It allows Java/SQL programs to be automatically generated. These programs execute relational database transactions {{that correspond to}} EB 3 <b>attribute</b> <b>definitions...</b>|$|R
40|$|The paper {{focuses on}} {{discovery}} of knowledge needed {{to establish the}} shared meaning of attributes in a network of distributed autonomous databases. In this paper we concentrate {{on the role of}} equations as <b>definitions</b> of <b>attribute</b> values. We briefly describe various applications of such definitions, including predictions, knowledge verification, intelligent query answering and several others. We present an interface between a Distributed Autonomous Knowledge System DAKS and a discovery system 49 er. To find knowledge useful in de ning attributes missing in one database, the discovery mechanism of 49 er can be applied to other databases. DAKS makes requests for definitions and then manages the discovered definitions, veri es their consistency and applies them in its query-answering mechanism. To put a system of equation-based <b>attribute</b> <b>definitions</b> on a firm theoretical foundation we introduce semantics which justifies empirical equations in their de nitional role. This semantics augments the earlier developed semantics for rules used as <b>attribute</b> <b>definitions...</b>|$|R
50|$|While {{creation}} of new tables and columns to represent a new category of data is not especially labor-intensive, the programming of Web-based interfaces that support browsing or basic editing with type- and range-based validation is. In such a case, a more maintainable long-term solution {{is to create a}} framework where the class and <b>attribute</b> <b>definitions</b> are stored in metadata, and the software generates a basic user interface from this metadata dynamically.|$|R
40|$|This report {{presents}} a survey on quality assurance of Web applications. Starting from {{the introduction of}} Web application architecture, it discusses the quality factors of Web applications. First, the basic software measurement concepts are introduced. A quality model specifies which properties are important to a Web application and how these properties are to be determined. Based on the specification of the entity type, the <b>attribute</b> <b>definition,</b> metric formula, and application procedures, a catalog of metrics {{can be used to}} support different quality assurance processes. Quality control and assurance are widely applied in today's Web-based system development processes. User-centered quality engineering is introduced in the context of Web application development processes, which results in increasing of software quality and end-user satisfaction. Tools and measurement methods are developed and applied in the Web applications quality assessment procedures [...] SUMI is a method to evaluate the software system usability and a Web-centered Function Points measure gives the estimation of the maintenance cost of Web system...|$|E
40|$|Sections 1 and 2 {{reports on}} two {{research}} studies {{carried out by}} the authors, section 3 is a series of abstracts of other research studies stimulated by the authors and section 4 is an appendix containing the instructional materials, tests, raw data, and other items of interest. In the first study the concept "trochaic meter " was taught to 180 college students by means of eight treatment conditions. The independent variables involved presenting a definition or iLstances or both combined with <b>attribute</b> <b>definition</b> and/or attribute prompting. Dependent variables were errors in correct classification and specified classification. Hypotheses consisted of prediction of particular errors for each treatment and six of the eiabt hypotheses were supported. In the second study, 100 education ps- llogy students were used in an investigation of four instructic i 1 1 tegies for promoting the acquisition of an infinite concept cla lie independent variables were 1) probability level o...|$|E
40|$|Attributes {{definition}} is a crucial, yet neglected topic of critical inquiry {{in the choice}} modelling literature. In a policy context, attributes should reflect public interests. However, guidance on {{how to go about}} achieving this criterion is lacking. To address this concern, we offer a novel approach to <b>attribute</b> <b>definition</b> – the knowledge base approach. A knowledge base is the particular ‘lens’ through which a shared understanding of a topic is gained (i. e. different groups of people view the world in different ways). Knowledge bases have been used in evidence-based policy to account for different sources of information and perspectives in complex policy settings, with the intention of improving policy and program development. The knowledge base approach was applied to the design of a choice experiment, specifically looking at conservation priorities for the waterways and wetlands in the Kimberley region of Western Australia. We conclude that the approach is both comprehensive and expedient, and could improve the selection of attributes for choice experiments that value policy or program change. Environmental Economics and Policy,...|$|E
40|$|Abstract: EB 3 is {{a formal}} {{language}} for specifying information systems (IS). In EB 3, the sequences of events {{accepted by the}} system are described with a process algebra; they represent the valid traces of the IS. Entity type and association attributes are computed by means of recursive functions defined on the valid traces of the system. In this paper, we present EB 3 TG, a tool that synthesizes Java programs that execute relational database transactions which correspond to EB 3 <b>attribute</b> <b>definitions.</b> ...|$|R
40|$|Corp oration Abstract. Forwar ding is a tec hnique for pro viding default <b>attribute</b> <b>definitions</b> in <b>attribute</b> grammars that {{is helpful}} in the mo dular {{implementation}} of programming languages. It complemen ts existing tec hniques suc h as default cop y rules. This pap er in tro duces forw arding, and sho ws ho w it {{is but a}} small extension of standard higher-order attribute grammars. The usual to ols for manipulating higher-order attribute grammars, including the circularit y che...|$|R
40|$|There {{are several}} {{different}} problem domains {{in the implementation}} of language processing tools. The manipulation of textual data when generating code, creation and inspection of environments during type checking, and analysis of dependency graphs during program optimization and parallelization are but a few. The use of domain specific languages to solve these sub problems can reduce the complexity of a tools specification. We argue this point in the realm of attribute grammars and use domain specific meta languages to write <b>attribute</b> <b>definitions...</b>|$|R
