10|11|Public
50|$|As a Java developer, it is a {{preferred}} option for running Java applets {{that do not}} involve {{the use of a}} web browser. Even though the <b>applet</b> <b>viewer</b> logically takes the place of a web browser, it functions very differently from a web browser. The <b>applet</b> <b>viewer</b> operates on HTML documents, but all it looks for is embedded applet tags; any other HTML code in the document is ignored. Each time the <b>applet</b> <b>viewer</b> encounters an applet tag in an HTML document, it launches a separate <b>applet</b> <b>viewer</b> window containing the respective applet. The only drawback to using the <b>applet</b> <b>viewer</b> is that it will not show how an applet will run within the confines of a real web setting. Because the <b>applet</b> <b>viewer</b> ignores all HTML codes except applet tags, it does not even attempt to display any other information contained in the HTML document.|$|E
5000|$|An <b>Applet</b> <b>viewer</b> {{creates an}} {{environment}} that mocks {{the look and feel}} of a stand-alone program with no interaction with a web browser, even though it does involve a browser to run an applet.|$|E
50|$|A {{complete}} {{implementation of}} the Java platform also needs a compiler that translates Java source code into bytecodes, a program that manages JAR files, a debugger, and an <b>applet</b> <b>viewer</b> and web browser plugin, to name a few. Harmony currently has the compiler, appletviewer, jarsigner, javah, javap, keytool, policytool, and unpack200.|$|E
5000|$|... #Caption: 21 Lutetias orbit, and its {{position}} on 01 Jan 2009 (NASA Orbit <b>Viewer</b> <b>applet).</b>|$|R
40|$|We are {{developing}} a web site with photorealistic animations and virtual reality walk throughs of architecture and artifacts at an archaeological site in El Salvador. The goal of the site is to support research and teaching about household anthropology in sixthcentury Meso-America. To counter the false sense of realism and truth these experiences often convey we have developed Image Arguments, a scheme for integrating with images the arguments and data that they are based on. We provide this contextual information using a server side database and client side Java <b>applets,</b> enabling <b>viewers</b> to examine the assumptions and the data behind the images. 1...|$|R
5000|$|... x11vnc has {{security}} features {{that allows the}} user to set an access password or to use Unix usernames and passwords. It also has options for connection via a secure SSL link. An SSL Java VNC <b>viewer</b> <b>applet</b> is provided that enables secure connections from a web browser. The VeNCrypt SSL/TLS VNC security type is also supported.|$|R
40|$|Edge {{detection}} is {{a fundamentally}} important operation in image processing. It {{is the foundation}} of feature extraction and image information interpretation. It gives a description of the curvature of objects in an image. In this work, a tool has been developed for accurate edge detection. The tool has been developed in Java language which is applet based; it can run within a web browser or an <b>applet</b> <b>viewer.</b> To reduce the noise and produce sharp edges, series of preprocessing operations are performed initially on the image viz. blurring, grayscale conversion and histogram equalization. We basically focus on the canny edge detection technique...|$|E
40|$|We have {{developed}} a method to predict ligand-binding sites in a new protein structure by searching for similar binding sites in the Protein Data Bank (PDB). The similarities are measured according to {{the shapes of the}} molecular surfaces and their electrostatic potentials. A new web server, eF-seek, provides an interface to our search method. It simply requires a coordinate file in the PDB format, and generates a prediction result as a virtual complex structure, with the putative ligands in a PDB format file as the output. In addition, the predicted interacting interface is displayed to facilitate the examination of the virtual complex structure on our own <b>applet</b> <b>viewer</b> with the web browser (URL: [URL]...|$|E
40|$|The Health Resources Allocation Model (HRAM) is a {{computer}} based approach enabling health planners to discuss and design health care delivery services and to adjust the health plans based on the generated outcome. Since 1990 {{a lot of experience}} with {{a computer}} based version of the HRAM could be collected in different courses (MSc, post-graduate Diploma level) and seminars in the universities of Bangkok, Basel, Brisbane, Heidelberg, London, New Haven and Toronto. The aim of the work described below is to adapt the HRAM towards an interactive World Wide Web based course module on the management of health systems for postgraduate students and health planners. A combination of HTML and Java is proposed for the adaptation. Two Java approaches are implemented to demonstrate the capabilities of that combination. The applet version is a compact Java object that can be downloaded and launched within a Web browser or an <b>applet</b> <b>viewer.</b> The applet is designed {{in a way that the}} user can try out dif [...] ...|$|E
40|$|A {{panorama}} <b>viewer</b> <b>applet</b> for interactive {{viewing of}} highlatitude panoramic images has been developed. The basic functionality of ordinary VR-viewers has been implemented together with manual and optional automatic brightness adjustment. Fast and accurate rendering {{is achieved by}} using lookup tables for linearization and dynamic range compression. A highly compressed image format suitable for internet applications is used, which typically requires 25 % more space than JPEGcompressed low dynamic range images. ...|$|R
50|$|JChemPaint is {{computer}} software, an molecule {{editor and}} file viewer for chemical structures using 2D computer graphics.It {{is free and}} open-source software, released under a GNU Lesser General Public License (LGPL). It is written in Java and so can run on the operating systems Windows, macOS, Linux, and Unix. There is a standalone application (editor), and two varieties of <b>applet</b> (editor and <b>viewer)</b> that can be integrated into web pages.|$|R
40|$|Hase is {{a design}} and {{simulation}} environment {{that allows for}} rapid development and exploration of computer architectures at multiple levels of abstraction. The great ßexibility of the graphical display has enabled the creation of models (Tomasulo’s algorithm, DLX architecture, etc.) which {{have proved to be}} useful in their own right, particularly for teaching and demonstration purposes. In order to make the models widely accessible, two different ways of exporting them via the WWW have been investigated, WebHase and JavaHase. WebHase uses a <b>viewer</b> <b>applet</b> to visualise pre-run Hase simulations whilst JavaHase allows existing simulation models to be translated into fully interactive simulation applets...|$|R
40|$|JOTSA is a Java {{package for}} {{animation}} {{that is based}} on the path-transition paradigm [1]. JOTSA uses a JotsaAnimationApplet class that extends the Java Applet class. To write a simple JOTSA animation, you create an instance of a class that extends the class JotsaAnimationApplet. The resulting applet can be run using an <b>applet</b> <b>viewer</b> or a browser. You must specify what will remain fixed on the display and what will move. The fixed part is put into a Java Image called JotsaBackGround and each moving part is specified by an instance of the JOTSA class JotsaAnimationObject. In the simplest case a JotsaAnimationObject consists of an image to display, a path along which the image is to move, a speed of movement, a level number and a key. The level number determines the order in which the moving objects are displayed and therefore which objects hide others from view. The key is used to remove the object. JOTSA manages the collection of JotsaAnimationObjects in a list sorted by increasing level number. To display moving objects, you need to perform the following steps for each object...|$|E
40|$|In {{this paper}} a {{conception}} is presented {{how to improve}} the skills of students to be educated for hardware and SOC design in test related topics. We present a learning method based on using so-called living pictures [1]. The method deals with the goal, to put interactive teaching modules to the Internet {{that can be used}} in a lecture as well as for individual self-studies. The core of the teaching concept presented are JAVA-applets (interactive modules) running on any browser connected to the Internet. We call this type of applet "Living Pictures". The program for representing “living pictures ” for teaching Digital Test is written in Java 1. 3 [2]. It can be run over network, using standard browsers like Netscape and Internet Explorer with Java 1. 3 runtime plug-in, or with Java 1. 3 <b>applet</b> <b>viewer.</b> The program can be used for teaching the basics of testing digital systems, test generation, fault simulation and fault diagnosis. The work window of the applet consists of three main parts: vector insertion panel, view panel for design schematics, view panel for displaying information. The vector insertion panel has two subpanels for inserting single input tes...|$|E
40|$|The {{development}} of high-level synoptic views for {{supervision of the}} technical infrastructure at CERN is becoming increasingly important. Synoptic views are traditionally used by the control room {{as a means of}} supervising remote equipment but are also becoming of increasing interest to the equipment owners themselves as the computing power and network connectivity available in offices and homes permit the use of these views. The use of common synoptic views facilitates communication between control room operators and equipment specialists and helps to limit the amount of development required. In addition, the {{development of}} synoptic views is better done by the control room operators and equipment specialist than by a computer scientist. The Technical Supervision Interface (TSI) is built to meet the new requirements of users. It will provide a Java <b>applet</b> <b>viewer</b> that can download synoptic view files from a web server and connect to any data source through a standardized protocol. The client-server communication will be done via a standardized event driven data acquisition protocol implemented on each data source type. This document describes the requirements, the design and the implementation of the Technical Supervision Interface. ...|$|E
40|$|Probalign computes maximal {{expected}} accuracy multiple sequence alignments from partition function posterior probabilities. To date, Probalign {{is among}} the very best scoring methods on the BAliBASE, HOMSTRAD and OXBENCH benchmarks. Here, we introduce eProbalign, which is an online implementation of the approach. Moreover, the eProbalign web server doubles as an online platform for post-alignment analysis. The heart-and-soul of the post-alignment functionality is the Probalign Alignment <b>Viewer</b> <b>applet,</b> which provides users a convenient means to manipulate the alignments by posterior probabilities. The viewer {{can also be used}} to produce graphical and text versions of the output. The eProbalign web server and underlying Probalign source code is freely accessible at [URL]...|$|R
40|$|Alignment-based {{programs}} are valuable tools for finding potential homologs in genome sequences. Previously, {{it has been}} shown that partition function posterior probabilities attuned to local alignment achieve a high accuracy in identifying distantly similar non-coding RNA sequences that are hidden in a large genome. Here, we present an online implementation of that alignment algorithm based on such probabilities. Our server takes as input a query RNA sequence and a large genome sequence, and outputs a list of hits that are above a mean posterior probability threshold. The output is presented in a format suited to local alignment. It can also be viewed within the PLAST alignment <b>viewer</b> <b>applet</b> that provides a list of all hits found and highlights regions of high posterior probability within each local alignment. The server is freely available a...|$|R
40|$|Introduction Several viewing {{applications}} for the Visible Human dataset are currently available. Some applications provide access to annotated slices, either online or from a CD-ROM. Other applications provide services for extracting slices. The first Web application to allow extraction of slices perpendicular to the main axes was the NPAC Visible Human <b>viewer</b> <b>applet</b> (www. npac. syr. edu/projects/vishuman/VisibleHuman. html). The more recent Visible Human Slice and Surface Server from EPFL ([URL] provides access to arbitrarily oriented and positioned slices and surfaces. A new highly optimized application, the Real-time Visible Human Navigator, provides the possibility to extract arbitrarily oriented and positioned slices from the Visible Human dataset in real-time on a standard PC. A continuous sequence of slices is displayed in real-time in response to navigation commands from the user. They reflect current position and orientation variations within the 3...|$|R
40|$|Windowing Toolkit and Swing, {{deal with}} Graphical User Interfaces. Others The {{material}} {{in this section}} and in Annex A is based on [Bro 97]. Further information on Java {{may be found in}} [Fl 97], [AG 96], and [GJS 96]. support specialized areas including distributed component development, security, and database connectivity. There is nothing intrinsic about the Java language that prevents a compiler from translating a source program into a native object module for the target environment, just like a compiler for a traditional language. However, it is more typical for a Java compiler to generate a so-called class file instead: a sequence of instructions, known as "bytecodes", which are executed by a Java Virtual Machine. This facility is especially important for downloading and running applets over the Internet, since the client machine running a Web browser might be different from the server machine from which the applet is retrieved. Obviously security is an issue, which is addressed through several mechanisms, including:. Restrictions in the Java language that prevent potentially insecure operations such as pointer arithmetic and unchecked deallocation. The implementation of the JVM, which performs a load-time analysis of the class file to ensure that it has not been compromised. The implementation of the browser or <b>applet</b> <b>viewer,</b> which checks that a downloaded applet does not invoke methods that directly access the client machine. Security-related classes in the API 2 Criteria for a Foundation Language Very few programming languages have been designed specifically for teaching; fewer have achieved widespread acceptance. Pascal is perhaps an exception, but several omissions have led to its decreasing significance over the years. It lacks, among other things, a modul [...] ...|$|E
40|$|Abstract Background Small loop-shaped motifs {{are common}} {{constituents}} of the three-dimensional structure of proteins. Typically they comprise {{between three and}} seven amino acid residues, and are defined {{by a combination of}} dihedral angles and hydrogen bonding partners. The most abundant of these are αβ-motifs, asx-motifs, asx-turns, β-bulges, β-bulge loops, β-turns, nests, niches, Schellmann loops, ST-motifs, ST-staples and ST-turns. We have constructed a database of such motifs from a range of high-quality protein structures and built a web application as a visual interface to this. Description The web application, Motivated Proteins, provides access to these 12 motifs (with 48 sub-categories) in a database of over 400 representative proteins. Queries can be made for specific categories or sub-categories of motif, motifs in the vicinity of ligands, motifs which include part of an enzyme active site, overlapping motifs, or motifs which include a particular amino acid sequence. Individual proteins can be specified, or, where appropriate, motifs for all proteins listed. The results of queries are presented in textual form as an (X) HTML table, and may be saved as parsable plain text or XML. Motifs can be viewed and manipulated either individually or {{in the context of the}} protein in the Jmol <b>applet</b> structural <b>viewer.</b> Cartoons of the motifs imposed on a linear representation of protein secondary structure are also provided. Summary information for the motifs is available, as are histograms of amino acid distribution, and graphs of dihedral angles at individual positions in the motifs. Conclusion Motivated Proteins is a publicly and freely accessible web application that enables protein scientists to study small three-dimensional motifs without requiring knowledge of either Structured Query Language or the underlying database schema. </p...|$|R

