2|3361|Public
5000|$|... 1942: Training for the disabledIBM {{launches}} {{a program to}} train and employ disabled people in Topeka, Kansas. The next year classes begin in New York City, and soon the company is asked to join the President's Committee for Employment of the Handicapped.1943: First female vice presidentIBM appoints its first female vice president.1944: ASCCIBM introduces the world's first large-scale calculating computer, the <b>Automatic</b> <b>Sequence</b> <b>Control</b> Calculator (ASCC). Designed in collaboration with Harvard University, the ASCC, {{also known as the}} Mark I, uses electromechanical relays to solve addition problems in less than a second, multiplication in six seconds, and division in 12 seconds.1944: United Negro College FundIBM President Thomas J. Watson, Sr., joins the Advisory Committee of the United Negro College Fund (UNCF), and IBM contributes to the UNCF's fund-raising efforts.1945: IBM's first research labIBM's first research facility, the Watson Scientific Computing Laboratory, opens in a renovated fraternity house near Columbia University in Manhattan. In 1961, IBM moves its research headquarters to the T.J. Watson Research Center in Yorktown Heights, New York.|$|E
40|$|A {{programmable}} controller (PC) system <b>automatic</b> <b>sequence</b> <b>control,</b> which {{acts as a}} supervisory controller for the servos, selects the proper drives, and automatically sequences the vanes, was developed {{for use in a}} subsonic wind tunnel. Tunnel modifications include a new second test section (80 ft x 100 ft with a maximum air speed capability of 110 knots) and an increase in maximum velocity flow from 200 knots to 300 knots. A completely <b>automatic</b> <b>sequence</b> <b>control</b> is necessary in order to allow intricate motion of the 14 triangularly arranged vanes which can be as large as 70 ft high x 35 ft wide and which require precise acceleration and deceleration control. Rate servos on each drive aid in this control, and servo cost was minimized by using four silicon controlled rectifier controllers to control the 20 dc drives. The PC has a programming capacity which facilitated the implementation of extensive logic design. A series of diagrams sequencing the vanes and a block diagram of the system are included...|$|E
5000|$|... "The <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator" [...] (July 16, 1946) ...|$|R
50|$|The IBM <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator (ASCC), called Mark I by Harvard University’s staff, was {{a general}} purpose {{electromechanical}} computer {{that was used in}} the war effort during the last part of World War II.|$|R
50|$|Some early computers, {{such as the}} 1944 IBM <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator (Harvard Mark I) {{received}} {{program instructions}} from a paper tape punched with holes, similar to Jacquard's string of cards. Later computers executed programs from higher-speed memory, though cards were commonly used to load the programs into memory. Punched cards remained in use in computing up until the mid 1980s.|$|R
50|$|Allied {{military}} forces widely utilized IBM's tabulating equipment for mobile records units, ballistics, accounting and logistics, and other war-related purposes. There was {{extensive use of}} IBM punched card machines for calculations made at Los Alamos during the Manhattan Project for developing the first atomic bombs. During the War, IBM also built the <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator, {{also known as the}} Harvard Mark I for the U.S. Navy - the first large-scale electro-mechanical calculator in the U.S..|$|R
50|$|During World War II, International Business Machines Corporation (IBM) {{funded and}} built an <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator (ASCC) for Howard H. Aiken at Harvard University. The machine, {{formally}} dedicated in August 1944, was widely {{known as the}} Harvard Mark I. The President of IBM, Thomas J. Watson, Sr., did not like Aiken's press release that gave no credit to IBM for its funding and engineering effort. Watson and Aiken decided to go their separate ways, and IBM began work on a project {{to build their own}} larger and more visible machine.|$|R
50|$|Time clocks used {{punched cards}} to record workers {{in and out}} times. Subtracting these two gave hours worked on each day, and adding them all up gave total work time. This was easily {{automated}} by mechanical machines. However, to compute wages, the hours must be multiplied by salary per hour. Bryce invented {{one of the first}} electromechanical multipliers using relays for this application, and became IBM's chief engineer. In 1937 Bryce was approached by Howard Aiken of Harvard University, who persuaded IBM to fund a programmable calculator which became the <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator (ASCC), better known as the Harvard Mark I.|$|R
50|$|Data were {{represented}} by {{the presence or absence}} of a hole at a particular location. Tapes originally had five rows of holes for data. Later tapes had six, seven and eight rows. An early electro-mechanical calculating machine, the <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator or Harvard Mark I, used paper tape with twenty-four rows. A row of smaller sprocket holes that were always punched served to feed the tape, originally using a wheel with radial teeth called a sprocket wheel. Later optical readers used the sprocket holes to generate timing pulses. The sprocket holes are slightly to one side, making it clear which way to orient the tape in the reader and dividing the tape into unequal sides. The bits on the narrower side of the tape are generally the least significant bits, when the code is represented as numbers in a digital system.|$|R
50|$|Aiken {{studied at}} the University of Wisconsin-Madison and later {{obtained}} his PhD in physics at Harvard University in 1939. During this time, he encountered differential equations that he could only solve numerically. He envisioned an electro-mechanical computing device that could do much of the tedious work for him. This computer was originally called the ASCC (<b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator) and later renamed Harvard Mark I. With engineering, construction, and funding from IBM, the machine was completed and installed at Harvard in February, 1944. Richard Milton Bloch, Robert Campbell and Grace Hopper joined the project later as programmers. In 1947, Aiken completed {{his work on the}} Harvard Mark II computer. He continued his work on the Mark III and the Harvard Mark IV. The Mark III used some electronic components and the Mark IV was all-electronic. The Mark III and Mark IV used magnetic drum memory and the Mark IV also had magnetic core memory.|$|R
5000|$|The ASCC {{was built}} from switches, relays, {{rotating}} shafts, and clutches. It used 765,000 electromechanical components {{and hundreds of}} miles of wire, comprising a volume of [...] - 51 ft in length, 8 ft in height, and 2 ft deep. It weighed about 10,000 lb. The basic calculating units had to be synchronized and powered mechanically, so they were run by a 50 ft shaft driven by a [...] electric motor, which served as the main power source and system clock. From the IBM Archives: The <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator (Harvard Mark I) was the first operating machine that could execute long computations automatically. A project conceived by Harvard University’s Dr. Howard Aiken, the Mark I was built by IBM engineers in Endicott, N.Y. A steel frame 51 ft long and eight feet high held the calculator, which consisted of an interlocking panel of small gears, counters, switches and control circuits, all only a few inches in depth. The ASCC used 500 mi of wire with three million connections, 3,500 multipole relays with 35,000 contacts, 2,225 counters, 1,464 tenpole switches and tiers of 72 adding machines, each with 23 significant numbers. It was the industry’s largest electromechanical calculator.|$|R
40|$|Mariner 10 in {{its mission}} to Venus and Mercury used an onboard control {{computer}} with a 512 -word memory. An outline is presented of the general philosophy adopted {{with respect to the}} utilization of the available memory and a description is given of the actual in-flight operation of the machine. The onboard computer system provided <b>automatic</b> stored-program <b>sequence</b> <b>control</b> of all spacecraft scientific, engineering, and propulsive maneuver operations. The system consisted of the special purpose digital computer and a fixed hard-wired sequencer. Attention is given to the programming architecture, aspects of mission design, and computer performance...|$|R
40|$|The NASA/Marshall Space Flight Center's solar vector magnetograph {{system allows}} {{measurements}} of all {{components of the}} Sun's photospheric magnetic field over a 5 x 5 or 2. 5 x 2. 5 arc min square field of view with an optimum time resolution of approximately 100 sec and an optimum signal-to-noise of approximately 1000. The basic system components are described, including the optics, detector, digital system, and associated electronics. <b>Automatic</b> <b>sequencing</b> and <b>control</b> functions are outlined as well as manual selections of system parameters which afford unique system flexibility. Results of system calibration and performance are presented, including linearity, dynamic range, uniformity, spatial and spectral resolutions, signal-to-noise, electro-optical retardation and polarization calibration...|$|R
50|$|Hopper {{had tried}} to enlist in the Navy early in the war. She was at age 34, too old to enlist, and her weight to height ratio was too low. She was also denied {{on the basis that}} her job as a {{mathematician}} and mathematics professor at Vassar College was valuable to the war effort. During World War II in 1943, Hopper obtained a leave of absence from Vassar and was sworn into the United States Navy Reserve, one of many women to volunteer to serve in the WAVES. She had to get an exemption to enlist; she was 15 lb below the Navy minimum weight of 120 lb. She reported in December and trained at the Naval Reserve Midshipmen's School at Smith College in Northampton, Massachusetts. Hopper graduated first in her class in 1944, and was assigned to the Bureau of Ships Computation Project at Harvard University as a lieutenant, junior grade. She served on the Mark I computer programming staff headed by Howard H. Aiken. Hopper and Aiken co-authored three papers on the Mark I, also known as the <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator. Hopper's request to transfer to the regular Navy {{at the end of the}} war was declined due to her advanced age of 38. She continued to serve in the Navy Reserve. Hopper remained at the Harvard Computation Lab until 1949, turning down a full professorship at Vassar in favor of working as a research fellow under a Navy contract at Harvard.|$|R
2500|$|Hopper {{had tried}} to enlist in the Navy early in World War II. She was {{rejected}} for multiple reasons. At age 34, she {{was too old to}} enlist, and her weight to height ratio was too low. She was also denied on the basis that her job as a mathematician and mathematics professor at Vassar College was valuable to the war effort. During the war in 1943, Hopper obtained a leave of absence from Vassar and was sworn into the United States Navy Reserve; she was one of many women who volunteered to serve in the WAVES. She had to get an exemption to enlist; she was [...] below the Navy minimum weight of [...] She reported in December and trained at the Naval Reserve Midshipmen's School at Smith College in Northampton, Massachusetts. Hopper graduated first in her class in 1944, and was assigned to the Bureau of Ships Computation Project at Harvard University as a lieutenant, junior grade. She served on the Mark I computer programming staff headed by Howard H. Aiken. Hopper and Aiken co-authored three papers on the Mark I, also known as the <b>Automatic</b> <b>Sequence</b> <b>Controlled</b> Calculator. Hopper's request to transfer to the regular Navy {{at the end of the}} war was declined due to her advanced age of 38. She continued to serve in the Navy Reserve. Hopper remained at the Harvard Computation Lab until 1949, turning down a full professorship at Vassar in favor of working as a research fellow under a Navy contract at Harvard.|$|R
50|$|The Multilift MPH (Military Pivoting Hooklift) {{range is}} based around commercially proven technologies, the overall system {{performance}} being improved by enhancing below ground {{pick up and}} the ability to load misaligned flatracks, both important military operational requirements. The complete system is designed to be used in all operational conditions, including darkness or while wearing nuclear, biological and chemical (NBC) protective equipment. An <b>automatic,</b> fully <b>sequenced</b> <b>control</b> system mounted in the cab aids operational safety and maximises speed, even under battle conditions. The MPH range was designed and optimised to load, transport and unload flatracks conforming to the NATO standard (STANAG 2413). Flatracks can be pre-loaded at base with any military payload ready for dispersal to the required location. Payloads such as MLRS rockets, light armoured vehicles and command/control shelters can also be transported by using purpose-built flatracks with the correct locking systems built in.|$|R
40|$|A model-based user {{interface}} environment {{refers to a}} runtime environment which contains meta-knowledge about an application and its connection to the interface presented to the user. We capture in our application model actions which can be invoked by users, their operational constraints, and data objects on which these actions operate. We capture in our interface model interface components, actions which users apply to these interface components, and operational constraints on these actions. We then capture the mappings from the application model to the interface model {{as a way to}} construct an interface to an application. The modeling components used in the application and interface models are active at runtime, and are the key which drives the runtime architecture to support intelligent behavior such as partially <b>automatic</b> <b>control</b> <b>sequencing,</b> <b>automatic</b> generation of textual and animated help, and recordings of statistical and chronological command usage history. Also, the modeling components used are task-oriented; specifying an interface through these components eliminates the low-level programming from the {{user interface}} creation process...|$|R
40|$|Abstract. Streams are omnipresent in both {{mathematics}} and theoretical computer science. <b>Automatic</b> <b>sequences</b> form a particularly interesting class of streams {{that live in}} both worlds at the same time: they are {{defined in terms of}} finite automata, which are basic computational structures in computer science; and they appear in mathematics in many different ways, for instance in number theory. Examples of <b>automatic</b> <b>sequences</b> include the celebrated Thue-Morse sequence and the Rudin-Shapiro sequence. In this paper, we apply the coalgebraic perspective on streams to <b>automatic</b> <b>sequences.</b> We show that the set of <b>automatic</b> <b>sequences</b> carries a final coalgebra structure, consisting of the operations of head, even, and odd. This will allow us to show that <b>automatic</b> <b>sequences</b> are to (general) streams what rational languages are to (arbitrary) languages. ...|$|R
40|$|We {{present in}} this paper a new method to deal with <b>automatic</b> <b>sequences.</b> This method allows us to prove a Möbius-randomness-principle for <b>automatic</b> <b>sequences</b> from which we deduce the Sarnak {{conjecture}} for this class of sequences. Furthermore, we can show a Prime Number Theorem for <b>automatic</b> <b>sequences</b> that are generated by strongly connected automata where the initial state is fixed by the transition corresponding to 0. Comment: 55 page...|$|R
40|$|We study {{correlation}} {{estimates of}} <b>automatic</b> <b>sequences</b> (that is, sequences computable by finite automata) with polynomial phases. As a consequence, we provide {{a new class}} of good weights for classical and polynomial ergodic theorems, not coming themselves from dynamical systems. We show that <b>automatic</b> <b>sequences</b> are good weights in $L^ 2 $ for polynomial averages and totally ergodic systems. For totally balanced <b>automatic</b> <b>sequences</b> (i. e., sequences converging to zero in mean along arithmetic progressions) the pointwise weighted ergodic theorem in $L^ 1 $ holds. Moreover, invertible <b>automatic</b> <b>sequences</b> are good weights for the pointwise polynomial ergodic theorem in $L^r$, $r> 1 $. Comment: 28 page...|$|R
30|$|The {{main goal}} {{of this article is}} to {{indicate}} a new relation between self-similar groups and another classical notion of automaticity: <b>automatic</b> <b>sequences</b> and matrices. See the monographs [2, 50] for theory of <b>automatic</b> <b>sequences</b> and applications.|$|R
40|$|We {{show that}} <b>automatic</b> <b>sequences</b> are {{asymptotically}} orthogonal to periodic exponentials of type e_q(f(n)), where f is a rational fraction, in the Pólya-Vinogradov range. This applies to Kloosterman sums, {{and may be}} used to study solubility of congruence equations over <b>automatic</b> <b>sequences.</b> We obtain this as consequence of a general result, stating that sums over <b>automatic</b> <b>sequences</b> can be bounded effectively in terms of two-point correlation sums over intervals. Comment: 14 page...|$|R
30|$|There {{are several}} ways to define <b>automatic</b> <b>sequences</b> and matrices. One can use Moore automata, {{substitution}}s (e.g., Morse–Thue substitution leading to the famous Morse–Thue sequence), or Christol’s characterization of <b>automatic</b> <b>sequences</b> in terms of algebraicity of the generating power series over a suitable finite field [2, Theorem  12.2. 5]. The theory of <b>automatic</b> <b>sequences</b> is rich and is related to many topics in dynamical systems, ergodic theory, spectral theory of Schrödinger operators, number theory etc., see [2, 50].|$|R
50|$|Every <b>automatic</b> <b>sequence</b> is morphic.|$|R
50|$|After {{a company}} decided on manual or <b>automatic</b> <b>sequence,</b> {{production}} of that title generally {{stayed in the}} same configuration indefinitely. Notable examples of albums using <b>automatic</b> <b>sequence</b> include the 1968 Reprise Records release, Electric Ladyland, by The Jimi Hendrix Experience which was still sold in <b>automatic</b> <b>sequence</b> well into the late 1980s. Other common examples include Frampton Comes Alive! by Peter Frampton, Songs in the Key of Life by Stevie Wonder, Quadrophenia by The Who, and Bad Girls by Donna Summer.|$|R
40|$|<b>Automatic</b> <b>{{sequences}}</b> are sequences {{which are}} produced by a finite automaton. Although they are not random they may look as being random. They are complicated, {{in the sense of}} not being not ultimately periodic, they may look rather complicated, {{in the sense that it}} may not be easy to name the rule by which the sequence is generated, however there exists a rule which generates the <b>sequence.</b> The concept <b>automatic</b> <b>sequences</b> has special applications in algebra, number theory, finite automata and formal languages, combinatorics on words. The text deals with different aspects of <b>automatic</b> <b>sequences,</b> in particular:· a general introduction to automatic sequences· the basic (combinatorial) properties of automatic sequences· the algebraic approach to automatic sequences· geometric objects related to <b>automatic</b> <b>sequences...</b>|$|R
50|$|Every <b>automatic</b> <b>sequence</b> is a morphic word.|$|R
50|$|Automatic Duck started {{offering}} interchange between Final Cut Pro and Avid in July 2002 with <b>Automatic</b> <b>Sequence</b> Export Pro, a plug-in {{that could}} export an OMF composition for import into an Avid editing system. In February 2003 MacWorld magazine awarded <b>Automatic</b> <b>Sequence</b> Export PRO 4.5 stars.|$|R
5000|$|<b>Automatic</b> <b>sequences</b> were {{introduced}} by Büchi in 1960, although his paper {{took a more}} logico-theoretic approach to the matter and {{did not use the}} terminology found in this article. The notion of <b>automatic</b> <b>sequences</b> was further studied by Cobham in 1972, who called these sequences [...] "uniform tag sequences".|$|R
40|$|The paper {{presents}} a generic conceptual interface to visualise <b>automatic</b> <b>sequences</b> in process industry applications exemplified by a feed water sub- system. The design {{is based on}} operators’ information need during use of <b>automatic</b> <b>sequences.</b> The information need was elicited using interviews with nuclear power, thermal power and pulp and paper plant operators. By integrating process mimics, time line and logical conditions, the observability of <b>automatic</b> <b>sequences</b> was improved. The interface {{has the potential to}} enhance operators’ ability to observe automatic system activity, avoid black box automation and thus reduce the possibility of out-of-the-loop effects...|$|R
40|$|The <b>automatic</b> <b>sequence</b> is {{the central}} concept at the {{intersection}} of formal language theory and number theory. It was introduced by Cobham, and has been extensively studied by Christol, Kamae, Mendes France and Rauzy, and other writers. Since the range of <b>automatic</b> <b>sequences</b> is nite, however, their descriptive power is severely limited...|$|R
40|$|We {{estimate}} Gowers uniformity {{norms for}} some classical <b>automatic</b> <b>sequences,</b> {{such as the}} Thue-Morse and Rudin-Shapiro sequences. The methods can also be extended to other <b>automatic</b> <b>sequences.</b> As an application, we asymptotically count arithmetic progressions in the set of integers ≤ N where the Thue-Morse (resp. Rudin-Shapiro) sequence takes the value + 1. Comment: 12 page...|$|R
5000|$|Reissued as Vox album 173 (Vox 12014, 12015, 12016, <b>automatic</b> <b>sequence).</b> New York: Vox, 1947.|$|R
40|$|AbstractWe {{give some}} {{sufficient}} {{criteria for the}} existence of certain averages (mean, correlation functions) of generalized higher-dimensional <b>automatic</b> <b>sequences</b> and show how to calculate these averages. Then follows an exploration of the nature of necessary and sufficient conditions {{for the existence of}} averages. Some of these criteria are applied to averages which {{play a central role in}} the determination of the correlation function of an <b>automatic</b> <b>sequence...</b>|$|R
5000|$|The {{domain of}} an <b>automatic</b> <b>sequence</b> can be {{extended}} from the natural numbers to the integers via two-sided <b>automatic</b> <b>sequences.</b> This {{stems from the fact}} that, given k ≥ 2, every integer can be represented uniquely in the form [...] where [...] Then a two-sided infinite sequence a(n)n [...] is (−k)-automatic if and only if its subsequences a(n)n ≥ 0 and a(−n)n ≥ 0 are k-automatic.|$|R
50|$|<b>Automatic</b> <b>sequences</b> {{exhibit a}} number of {{interesting}} properties. A non-exhaustive list of these properties is presented below.|$|R
