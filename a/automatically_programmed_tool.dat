7|5856|Public
50|$|Aside {{from what}} ever {{economic}} inefficiencies the first attempts at NC displayed, {{the time and}} effort required {{in the creation of the}} tapes also introduced possibilities for production errors. This would be a motivation for Air Force contracts ongoing in 1958 like the <b>Automatically</b> <b>Programmed</b> <b>Tool</b> project and the report, then later project, Computer-Aided Design: A Statement of Objectives 1960 of Douglas T. Ross.|$|E
5000|$|APT or <b>Automatically</b> <b>Programmed</b> <b>Tool</b> [...] is a {{high-level}} computer programming language {{most commonly used}} to generate instructions for numerically controlled machine tools. Douglas T. Ross {{is considered by many}} to be the father of APT: as head of the newly created Computer Applications Group of the Servomechanisms Laboratory at MIT in 1956 he led its technical effort. APT is a language and system that makes numerically controlled manufacturing possible. This early language was used widely into the 1970s and is still a standard internationally. Derivatives of APT were later developed.|$|E
40|$|ESDAPT {{computer}} program provides graphical programming environment for developing APT (<b>Automatically</b> <b>Programmed</b> <b>Tool)</b> programs for controlling {{numerically controlled machine}} tools. Establishes graphical user interface providing user with APT syntax-sensitive text-editing subprogram and windows for displaying geometry and tool paths. APT geometry statements also created by use of menus and screen picks. Written in C language, yacc, lex, and XView for use on Sun 4 -series computers running SunOS...|$|E
5000|$|Douglas Taylor [...] "Doug" [...] Ross (21 December 1929 - 31 January 2007) was an American {{computer}} scientist pioneer, and Chairman of SofTech, Inc. [...] He is most famous for originating the term CAD for computer-aided design, {{and is considered}} to be the father of <b>Automatically</b> <b>Programmed</b> <b>Tools</b> (APT) a language to drive numerically controlled manufacturing.|$|R
40|$|In 3 -axis NC (Numerical Control) machining, various cutters {{are used}} and the offset {{compensation}} for these cutters is important for a gouge free tool path generation. This paper introduces triangular mesh offset method for a generalized cutter defined based on the APT (<b>Automatically</b> <b>Programmed</b> <b>Tools)</b> definition or parametric curve. An offset vector is computed according to the geometry of a cutter and the normal vector of a part surface. A triangular mesh is offset to the CL (Cutter Location) surface by multiple normal vectors of a vertex and the offset vector computation method. A tool path for a generalized cutter is generated on the CL surface, and the machining test shows that the proposed offset method is useful for the NC machining...|$|R
40|$|The {{purpose of}} this paper is to {{describe}} a comprehensive approach to representing and machining complex surface shapes in an APT programming system. The APT (<b>Automatically</b> <b>Programmed</b> <b>Tools)</b> user language was extended to permit the definition of a hierarchy of curves and surfaces. Much of the logic has been implemented using matrix canonical forms which are closed under the full family of projective transformations, permitting family of parts storage and retrieval and part compensation. The area of numerical control machining was addressed, but the solutions for tool positioning were only partially successful due to the complexity of the algorithmic problem. This paper first outlines some of the mathematical methods adopted and then illustrates how these have been implemented with an APT part programming exampl...|$|R
40|$|A NASA-developed {{software}} package {{has played a}} part in technical education of students who major in Mechanical Engineering Technology at William Rainey Harper College. Professor Hack has been using (APT) <b>Automatically</b> <b>Programmed</b> <b>Tool</b> Software since 1969 in his CAD/CAM Computer Aided Design and Manufacturing curriculum. Professor Hack teaches the use of APT programming languages for control of metal cutting machines. Machine tool instructions are geometry definitions written in APT Language to constitute a "part program. " The part program is processed by the machine tool. CAD/CAM students go from writing a program to cutting steel {{in the course of a}} semester...|$|E
40|$|AbstractThis paper shows {{a general}} review, from the authorsâ€™ point of view, on how Product Lifecycle Management (PLM) {{impacted}} in Europe and United States Aerospace Industry development. The review {{focuses on the}} most relevant companies that have shaped the aerospace Industry at {{both sides of the}} Atlantic. The review is performed following a set of representative key topics, not intending to be exhaustive. PLM is a business solution that aims to streamline the flow of information about the product and related processes throughout the product's lifecycle. PLM facilitates the availability of the right information in the right context at the right time can be made available. The initial concept of PLM appeared {{at the end of the}} 90 's, in a context where <b>Automatically</b> <b>Programmed</b> <b>Tool</b> (APT) and Computer Aided Design (CAD) software solutions were already in use since the 60 's and 80 's decades respectively. PLM started to integrate information generated with such CAX (Computer Aided Technologies) solutions. Critical requirements in the aerospace industry, market changes and arising technical solutions have forced leader companies to adapt their way of working to secure their leadership. PLM evolution has taken a fundamental role in these transformations...|$|E
40|$|ESDAPT is a {{graphical}} {{programming environment}} for developing APT (<b>Automatically</b> <b>Programmed</b> <b>Tool)</b> programs for controlling {{numerically controlled machine}} tools. ESDAPT has a graphical user interface that provides the user with an APT syntax sensitive text editor and windows for displaying geometry and tool paths. APT geometry statement can also be created using menus and screen picks. ESDAPT interprets APT geometry statements and displays the results in its view windows. Tool paths are generated by batching the APT source to an APT processor (COSMIC P-APT recommended). The tool paths are then displayed in the view windows. Hardcopy output of the view windows is in color PostScript format. ESDAPT is written in C-language, yacc, lex, and XView for use on Sun 4 series computers running SunOS. ESDAPT requires 4 Mb of disk space, 7 Mb of RAM, and MIT's X Window System, Version 11 Release 4, or OpenWindows version 3 for execution. Program documentation in PostScript format and an executable for OpenWindows version 3 are provided on the distribution media. The standard distribution medium for ESDAPT is a. 25 inch streaming magnetic tape cartridge (Sun QIC- 24) in UNIX tar format. This program was developed in 1992...|$|E
40|$|Transcript, 37 pp. Ross {{begins with}} a {{discussion}} of his early involvement with John Ward on the Cape Cod project and his early experimentation in gestalt programming with Air Force and Emerson Electric Company programmers on the 1103 at Eglin Air Force Base. He then talks about the work he directed for the Air Force under Frank Reintjes at the MIT laboratories. He discusses the APT (<b>Automatically</b> <b>Programmed</b> <b>Tools)</b> and AED (Automated Engineering Design) projects which were early precursors of the languages and systems of modern CAD and CAM systems. Although these projects were not supported directly by DARPA, they were run in close connection with the WHIRLWIND, TX- 0, TX- 2, Project MAC, and CTSS projects that were running simultaneously at MIT. Ross discusses his use of programmers from industry in these projects. He also mentions the distribution of APT through the Fortran Monitor System and discusses the relationship between AED and PL- 1...|$|R
50|$|ICAM {{sought to}} develop {{procedures}} (IDEF) processes (Group Technology) and software (CAD/CAM) that would integrate all operations in Aerospace manufacturing and thus greatly reduce costs. Earlier the USAF Manufacturing Technology Program had funded the <b>Automatically</b> <b>Programmed</b> <b>Tools</b> (APT) language for programming Numerically Controlled (NC) machine tools. To close the data gap between parts design and manufacturing, {{one of the}} ICAM goals was to develop CAD software that would automatically generate numerical control programs for the very complex Computer Numerically Controlled (CNC) machine tools used throughout the Aerospace industry. A serious issue was the incompatibility of data produced by the many CAD systems in use at the time. USAF/ICAM called {{a meeting at the}} National Bureau of Standards (now known as National Institute of Standards and Technology or NIST) in 1978 to address this issue. Boeing offered to sell its CAD translation software to USAF for one United States dollar. USAF accepted this offer and contracted NIST to bring together a group of users and vendors, including Boeing, General Electric, Xerox, Computervision, Applicon and others to further develop and test this software. Though it was the practice to begin the name of ICAM developments with the word integrated (for example the IDEFs) believing that there would be rapid development of graphical exchange software, USAF decided that the IGES would be the Initial Graphics Exchange Specification not the Integrated Graphics Exchange Specification.|$|R
40|$|SMILE is a {{multi-user}} {{software engineering}} environment that behaves as an intelligent assistant. SMILE presents a `fileless environment', derives and transforms data to shelter users from entering redundant information, <b>automatically</b> invokes <b>programming</b> <b>tools,</b> and actively {{participates in the}} software development and maintenance process. Unlike other intelligent assistants, SMILE is not a rule-based environment: its knowledge of software objects and the programming process is hardcoded into the environment. We describe SMILE's functionality and explain how we achieved this functionality without reliance on artificial intelligence technology. The development and maintenance of SMILE is {{supported in part by}} the United States Army, Software Technology Development Division of CECOM COMM/ADP, Fort Monmouth, NJ and in part by ZTI-SOF of Siemens AG, Munich, Germany. This paper was written while Dr. Kaiser was a Visiting Computer Scientist at the Software Engineering Institute, Carnegie-Mello [...] ...|$|R
40|$|The APT code {{is one of}} {{the most}} widely used {{software}} tools for complex numerically controlled (N/C) machining. APT is an acronym for <b>Automatically</b> <b>Programmed</b> <b>Tool</b> and is used to denote the programming language. Development of the APT language and software system was begun in the late 1950 's as a U. S. government sponsored industry and university research effort. APT is a "problem oriented" language that was developed for the explicit purpose of aiding the N/C machine tools. The original APT program contained undocumented nonstandard FORTRAN, thus making porting of the processor to different operating systems difficult. P-APT (Portable APT) is a revised version of APT that was written to conform to the FORTRAN 77 standard. All machine-dependent code has either been replaced or isolated and documented. Machine-tool instructions and geometry definitions are written in the APT language to constitute a "part program". The APT part program is processed by the P-APT software to produce a cutter location (CL) file. This CL file may then be processed by user supplied post processors to convert the CL data into a form suitable for a particular N/C machine tool. This current offering of the P-APT system represents an adaptation, with enhancements, of the public domain version of APT IV/SSX 8. Enhancements include the super pocket feature that allows concave pockets with curved sides and islands. The P-APT system software is organized into two separate programs: the load complex and the APT processor. The load complex handles the table initiation phase and is usually only run when changes to the P-APT processor capabilities are made. This phase initializes character recognition and syntax tables for the P-APT processor by creating FORTRAN block data programs. The P-APT processor consists of four components: the translator, the execution complex, the subroutine library, and the CL editor. The translator examines each APT statement in the part program for recognizable structure and generates a new statement, or series of statements, in an intermediate language. The execution complex processes all of the definition, motion, and related statements to generate cutter location coordinates. The subroutine library contains routines defining the algorithms required to process the sequenced list of intermediate language commands generated by the translator. The CL editor re-processes the cutter location coordinates according to user supplied commands to generate a final CL file. The APT language is a statement oriented, sequence dependent language. With the exception of such programming techniques as looping and macros, statements in an APT program are executed in a strict first-to-last sequence. In order to provide programming capability for the broadest possible range of parts and machine tools, APT input (and output) is generalized, as represented by 3 -dimensional geometry and tools, and is arbitrarily uniform, as represented by the moving tool concept and output data in absolute coordinates. P-APT is written in FORTRAN 77 for execution on Sun 4 series computers running SunOS. Although P-APT is written in standard FORTRAN 77 and was designed to be readily portable code, it has only been fully tested on a Sun 4 series computer running SunOs. By making documented modifications to the source code, it may also be ported to a DEC VAX series computer running VMS. P-APT required 3. 1 Mb of RAM for execution. A minimum of 16 Mb of RAM and 32 Mb of disk space used for swap space is recommended. The standard distribution medium for this program is a. 25 inch streaming magnetic tape cartridge in UNIX tar format. P-APT is available by license for a period of ten (10) years to approved licensees. The licensed program product includes the P-APT source code, makefiles, examples, and one set of supporting documentation. Additional copies of the documentation may be purchased at the price indicated below. P-APT was developed in 1992...|$|E
5000|$|Flocking {{behaviour}} {{has been}} used for other interesting applications. It has been applied to <b>automatically</b> <b>program</b> Internet multi-channel radio stations ...|$|R
5000|$|... 1978. [...] " [...] Origins of the APT Language for <b>Automatically</b> <b>Programmed</b> Tools". In: ACM SIGPLAN Notices, Vol. 13, No. 8, August 1978 ...|$|R
40|$|A {{new test}} <b>program</b> {{generation}} <b>tool,</b> mVpGen, is developed for verifying pipeline design of microprocessors. The only inputs mVpGen requires are pipeline-behavior specifications; it automatically generates test cases at first from pipeline-behavior specifications and then <b>automatically</b> generates test <b>programs</b> {{corresponding to the}} test cases...|$|R
40|$|A real-time-distributed image {{processing}} system requires data transfer, synchronization and error recovery. However, {{it is difficult}} for a programmer to describe these mechanisms. To solve this problem, we are developing a <b>programming</b> <b>tool</b> for real-time {{image processing}} on a distributed system. Using the <b>programming</b> <b>tool,</b> a programmer indicates only data flow between computers and image processing algorithms on each computer. In this paper, we outline specifications of the <b>programming</b> <b>tool</b> and show sample programs on the <b>programming</b> <b>tool...</b>|$|R
40|$|A {{real-time}} distributed {{image processing}} system requires data transfer, synchronization and error recovery. However, {{it is difficult}} for a programmer to describe these mechanisms. To solve this problem, we are developing a <b>programming</b> <b>tool</b> for real-time image processing on a distributed system. Using the <b>programming</b> <b>tool,</b> a programmer indicates only data flow between computers and image processing algorithms on each computer. In this paper, we outline specifications of the <b>programming</b> <b>tool</b> and show sample programs on the <b>programming</b> <b>tool.</b> We also outline a prototypical application of the system, a real-time motion capture system...|$|R
40|$|Parallel and Distributed Processing: 15 IPDPS 2000 Workshops, Cancun, Mexico, May 2000. ProceedingsA {{real-time}} distributed {{image processing}} system requires data transfer, synchronization and error recovery. However, {{it is difficult}} for a programmer to describe these mechanisms. To solve this problem, we are developing a <b>programming</b> <b>tool</b> for real-time image processing on a distributed system. Using the <b>programming</b> <b>tool,</b> a programmer indicates only data flow between computers and image processing algorithms on each computer. In this paper, we outline specifications of the <b>programming</b> <b>tool</b> and show sample programs on the <b>programming</b> <b>tool...</b>|$|R
50|$|The boids {{model has}} been used for other {{interesting}} applications. It has been applied to <b>automatically</b> <b>program</b> Internet multi-channel radio stations.It has also been used for visualizing informationand for optimization tasks.|$|R
40|$|Program-development time {{decreased}} while program quality increased. FORTRAN <b>Programming</b> <b>Tools</b> are {{series of}} <b>programming</b> <b>tools</b> {{used to support}} development and maintenance of FORTRAN 77 source codes. Included are debugging aid, central-processing-unit time-monitoring program, source-code maintenance aids, print utilities, and library of useful, well-documented <b>programs.</b> <b>Tools</b> assist in reducing development time and encouraging high-quality programming. Although intended primarily for FORTRAN programmers, some tools used on data files and other programming languages. Written in FORTRAN 77...|$|R
40|$|Abstract â€” While the {{computational}} {{power of}} Field Programmable Gate Arrays (FPGA) makes them attractive as code accelerators, {{the lack of}} high-level language <b>programming</b> <b>tools</b> is a major obstacle to their wider use. Graphics Processing Units (GPUs), on the other hand, have benefitted from advanced and widely used high-level <b>programming</b> <b>tools.</b> This paper evaluates the performance, throughput and energy of both FPGAs and GPUs on image processing codes using high-level language <b>programming</b> <b>tools</b> for both. I...|$|R
40|$|This chapter {{argues that}} in order to extract {{significant}} knowledge from masses of technical texts, it is necessary to provide the field specialists with <b>programming</b> <b>tools</b> with which they themselves may use to program their text analysis <b>tools.</b> These <b>programming</b> <b>tools,</b> besides helping the programming effort of the field specialists, must also help them to gather the field knowledge necessary for defining and retrieving what they define as significant knowledge. This necessary field knowledge must be included in a well-structured and easy to use part of the <b>programming</b> <b>tool.</b> In this chapter, we present CorTag, a <b>programming</b> <b>tool</b> which is designed to correct existing tags in a text and to assist the field specialist to retrieve the knowledge and/or information he or she is looking for...|$|R
5000|$|Software (<b>programming</b> <b>tools,</b> {{implementation}} and diagnostic tools, simulation) ...|$|R
5000|$|Integration with AspectJ and JAssist aspect-oriented <b>programming</b> <b>tools</b> ...|$|R
40|$|Graphical {{processing}} {{units have}} been gaining rising attention {{because of their}} high performance processing capabilities for many scientific and engineering applications. However, programming such highly parallel devices requires adequate <b>programming</b> <b>tools.</b> Many such <b>programming</b> <b>tools</b> have emerged and hold the promise for high levels of performance. Some of such tools may require specialized parallel programming skills, while others attempt to target the domain scientist. The costs versus the benefits out of such tools are often unclear. In this work we examine the use of several of these <b>programming</b> <b>tools</b> such as Comput...|$|R
40|$|This {{bachelor}} {{thesis is}} going to explore the supply of <b>programming</b> <b>tools</b> for creation expert system and compare these tools by established criteria. This document is divided into theoretical and practical part. The first one is trying to describe expert system topic including division of <b>programming</b> <b>tools</b> into general <b>programming</b> language, programming language for artificial intelligence and development toolkits for expert system. The reader can imagine general model, which will be compared by practical applications. In the practical part I have written something about established criteria. The study describes <b>programming</b> <b>tools.</b> Information about them I have found in the manuals, tutorials, information from manufacturer, testing these tools. In conclusion I have compared them in tables. I have chosen only few examples of <b>programming</b> <b>tools,</b> because the offer on now day market is too wide...|$|R
5000|$|High school {{students}} use AgentSheets as introduction to <b>programming</b> <b>tool</b> ...|$|R
5000|$|Second prize: 2 {{is a fine}} <b>programming</b> <b>tool</b> {{for many}} applications.|$|R
5000|$|Tools A set of <b>programming</b> <b>tools</b> {{including}} a coverage analyzer etc.|$|R
40|$|Abstract: The paper {{contains}} {{the description of}} developed <b>program</b> <b>tool</b> Burgers 2. This <b>program</b> <b>tool</b> is intended to optimize the computational properties of hybrid finite-difference schemes applied to Burgers equation. The tool is based on combining of optimization problem solution and visual data presentation. The examples of test calculations are included. Note: Publication language:russia...|$|R
40|$|The {{cluster of}} {{workstations}} (COW) {{is becoming an}} important platform for parallel processing applications. COWs offer the benefits of cost and accessibility over other platforms. In order to develop applications which exploit parallelism on a COW, a <b>programming</b> <b>tool,</b> <b>programming</b> language, distributed shared memory, or a parallelising compiler should be used. Each of these approaches is discussed within, and tools and languages {{become the focus of}} this report. Additionally, an approach based on <b>programming</b> <b>tools</b> and distributed shared memory, supported by distributed operating systems is proposed. Tools and Languages for Developing Parallel Applications for Clusters of Workstations Page ii 1 Introduction............................................................... 1 2 The Development of Parallel Applications for Clusters of Workstations............... 1 2. 1 Parallel <b>Programming</b> <b>Tools...........</b> [...] ...|$|R
5000|$|First prize: 1 is the <b>programming</b> <b>tool</b> {{of choice}} for discriminating hackers.|$|R
5000|$|Kodu, {{a visual}} <b>programming</b> <b>tool</b> which builds on ideas begun with Logo ...|$|R
40|$|The APT code {{is one of}} {{the most}} widely used {{software}} tools for complex numerically controlled (N/C) machining. APT is an acronym for <b>Automatically</b> <b>Programmed</b> <b>Tools</b> and is used to denote both a language and the computer software that processes that language. Development of the APT language and software system was begun over twenty years ago as a U. S. government sponsored industry and university research effort. APT is a "problem oriented" language that was developed for the explicit purpose of aiding the N/C machine tools. Machine-tool instructions and geometry definitions are written in the APT language to constitute a "part program. " The APT part program is processed by the APT software to produce a cutter location (CL) file. This CL file may then be processed by user supplied post processors to convert the CL data into a form suitable for a particular N/C machine tool. This June, 1989 offering of the APT system represents an adaptation, with enhancements, of the public domain version of APT IV/SSX 8 to the DEC VAX- 11 / 780 for use by the Engineering Services Division of the NASA Goddard Space Flight Center. Enhancements include the super pocket feature which allows concave and convex polygon shapes of up to 40 points including shapes that overlap, that leave islands of material within the pocket, and that have one or more arcs as part of the pocket boundary. Recent modifications to APT include a rework of the POCKET subroutine and correction of an error that prevented the use within a macro of a macro variable cutter move statement combined with macro variable double check surfaces. Former modifications included the expansion of array and buffer sizes to accommodate larger part programs, and the insertion of a few user friendly error messages. The APT system software on the DEC VAX- 11 / 780 is organized into two separate programs: the load complex and the APT processor. The load complex handles the table initiation phase and is usually only run when changes to the APT processor capabilities are made. This phase initializes character recognition and syntax tables for the APT processor by creating FORTRAN block data programs. The APT processor consists of four components: the translator, the execution complex, the subroutine library, and the CL editor. The translator examines each APT statement in the part program for recognizable structure and generates a new statement, or series of statements, in an intermediate language. The execution complex processes all of the definition, motion, and related statements to generate cutter location coordinates. The subroutine library contains routines defining the algorithms required to process the sequenced list of intermediate language commands generated by the translator. The CL editor re-processes the cutter location coordinates according to user supplied commands to generate a final CL file. A sample post processor is also included which translates a CL file into a form for use with a Wales Strippit Fabramatic Model 30 / 30 sheet metal punch. The user should be able to readily develop post processors for other N/C machine tools. The APT language is a statement oriented, sequence dependent language. With the exception of such programming techniques as looping and macros, statements in an APT program are executed in a strict first-to-last sequence. In order to provide programming capability for the broadest possible range of parts and of machine tools, APT input (and output) is generalized, as represented by 3 -dimensional geometry and tools, and arbitrarily uniform, as represented by the moving tool concept and output data in absolute coordinates. A command procedure allows the user to select the desired part program, ask for a graphics file of cutter motions in IGES format, and submit the procedure as a batch job, if desired. The APT system software is written in FORTRAN 77 for batch and interactive execution and has been implemented on a DEC VAX series computer under VMS 4. 4. The enhancements for this version of APT were last updated in June, 1989. The NASA adaptation, with enhancements, of the public domain version of the APT IV/SSX 8 software to the DEC VAX- 11 / 780 is available by license for a period of ten (10) years to approved licensees. The licensed program product delivered includes the APT IV/SSX 8 system source code, object code, executable images, and command procedures and one set of supporting documentation. Additional copies of the supporting documentation may be purchased at any time at the price indicated below...|$|R
5000|$|Flok, a {{provider}} of customer loyalty <b>programs</b> <b>tools,</b> was acquired in January 2017.|$|R
