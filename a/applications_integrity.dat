3|160|Public
40|$|Through real-life experiments, it {{has been}} proved that {{spoofing}} is a practical threat to applications using the free civil service provided by Global Navigation Satellite Systems (GNSS). In this paper, we demonstrate a prototype that can verify the integrity of GNSS civil signals. By integrity we intuitively mean that civil signals originate from a GNSS satellite without having been artificially interfered with. Our prototype provides interfaces that can incorporate existing spoofing detection methods whose results are then combined into an overall evaluation of the signal’s integrity, which we call integrity level. Considering the various security requirements from different <b>applications,</b> <b>integrity</b> levels can be calculated in many ways determined by their users. We also present an application scenario that deploys our prototype and offers a public central service – localisation assurance certification. Through experiments, we successfully show that our prototype is not only effective but also efficient in practice...|$|E
40|$|In {{order to}} get {{continuous}} dynamic localization of a mobile robot, dead reckoning and absolute sensors are usually merged. The models used for this fusion are non linear and, therefore, classical tools (such as Kalman filter) cannot guarantee a maximum error estimation. In some <b>applications,</b> <b>integrity</b> is essential {{and the ability to}} guaranty the result is a crucial point. There are ensemblist approaches that are insensitive to non linearity. In this context, the random errors are only modeled by their maximum bound. This paper presents a new technique to merge the data of redundant sensors with a guaranteed result based on constraints propagation techniques on intervals. We have thus developed an approach for the fusion of the 4 ABS wheel encoders, a measure of the angle of the driving wheel and a differential GPS receiver. Experimental results show that the precision that one can obtain is very good with a guaranteed result. Moreover, constraints propagation techniques are well adapted to a real time implementation. I...|$|E
40|$|Computer {{security}} attacks {{take place}} {{due to the}} presence of vulnerabilities and bugs in software applications. Bugs and vulnerabilities are the result of weak software architecture and lack of standard software development practices. Despite the fact that software companies are investing millions of dollars in the research and development of software designs security risks are still at large. In some cases software applications are found to carry vulnerabilities for many years before being identified. A recent such example is the popular Heart Bleed Bug in the Open SSL/TSL. In today’s world, where new software application are continuously being developed for a varied community of users; it’s highly unlikely to have software applications running without flaws. Attackers on computer system securities exploit these vulnerabilities and bugs and cause threat to privacy without leaving any trace. The most critical vulnerabilities are those which are related to the integrity of the software applications. Because integrity is directly linked to the credibility of software application and data it contains. Here I am giving solution of maintaining web <b>applications</b> <b>integrity</b> running on RADIUM by using daikon. Daikon generates invariants, these invariants are used to maintain the integrity of the web application and also check the correct behavior of web application at run time on RADIUM architecture in case of any attack or malware. I used data invariants and program flow invariants in my solution to maintain the integrity of web-application against such attack or malware. I check the behavior of my proposed invariants at run-time using Lib-VMI/Volatility memory introspection tool. This is a novel approach and proof of concept toward maintaining web application integrity on RADIUM...|$|E
5000|$|Info Security Products Guide 2014 Winner for Best New Product: Mobile <b>Application</b> <b>Integrity</b> Protection™ Suite v 5.0 ...|$|R
40|$|Smart Environments, such {{as smart}} offices, must support {{multiple}} applications that are deployed and managed by different parties. Smart Environments are ‘always on’ and application software {{must therefore be}} deployed, configured and reconfigured while the system is running. Re-configurable component models provide the basic mechanisms necessary to achieve runtime reconfiguration. However, in cases with shared component instances, ensuring <b>application</b> <b>integrity</b> during 3 rd party reconfiguration leads to high developer effort and disruption. This paper addresses this problem through Composition-Swapping, an extension of re-configurable component models wherein state management delegation and extended component meta-data are used to support component-sharing and ensure <b>application</b> <b>integrity.</b> We demonstrate that Composition-Swapping reduces reconfiguration effort and disruption for four concurrently running applications on a real-world smart office environment. status: accepte...|$|R
40|$|The rise of Internet-scale geo-replicated {{services}} {{has led to}} upheaval {{in the design of}} modern data management systems. Given the availability, latency, and throughput penalties associated with classic mechanisms such as serializable transactions, a broad class of systems (e. g., "NoSQL") has sought weaker alternatives that reduce the use of expensive coordination during system operation, often at the cost of <b>application</b> <b>integrity.</b> When can we safely forego the cost of this expensive coordination, and when must we pay the price?In this thesis, we investigate the potential for coordination avoidance [...] -the use of as little coordination as possible while ensuring <b>application</b> <b>integrity</b> [...] -in several modern data-intensive domains. We demonstrate how to leverage the semantic requirements of applications in data serving, transaction processing, and web services to enable more efficient distributed algorithms and system designs. The resulting prototype systems demonstrate regular order-of-magnitude speedups compared to their traditional, coordinated counterparts on a variety of tasks, including referential integrity and index maintenance, transaction execution under common isolation models, and database constraint enforcement. A range of open source applications and systems exhibit similar results...|$|R
50|$|SPARC M7 {{processors}} (and higher) implement dynamic tainting in hardware. This {{is called}} Silicon Secured Memory (SSM) or <b>Application</b> Data <b>Integrity</b> (ADI).|$|R
30|$|The MCDM method can {{estimate}} multiple criteria simultaneously and {{can help}} decision-makers identify the most suitable decision plan among limited options. In this study, the DEMATEL approach was initially used to verify the effect of each rule and examine various relationships among service parameters. Subsequently, the DANP method, {{which is based on}} Saaty’s theories and is a unique aggregate of the DEMATEL and ANP methods [17], was used to calculate the role of each of the key factors affecting the VIKOR method evaluation of cloud service <b>application</b> <b>integrity.</b>|$|R
5000|$|<b>Integrity</b> <b>Applications</b> Inc., {{a privately}} held {{information}} assurance and security company.|$|R
40|$|The {{development}} of the Semantic web, understood as a shared space for exchange of structured data, {{has led to a}} renewed interest in traditional controlled vocabularies. This study presents an evaluation methodology that enables a systematic analysis of thesauri management tools applying a set of criteria that takes into account the purpose, functionalities of the <b>application,</b> <b>integrity</b> and consistency of vocabulary and other crucial issues related to interoperability, with particular attention to compatibility with Semantic web standards (RDF/SKOS). Integrability of these tools in other information systems, information interoperability, merging of thesauri between different information systems, or the ability to combine thesauri from different sources have are also part of the criteria proposed...|$|R
30|$|The {{third class}} of {{security}} challenges concerns the data integrity between services and <b>applications.</b> Data <b>integrity</b> problems emerge when spoofing attacks or noise affect an IoT system. DoS, DDoS, and probe attacks are arbitrary attacks that can harm IoT applications and services.|$|R
5000|$|Security {{is part of}} {{software}} development process, is an ongoing process involving people and practices, and ensures <b>application</b> confidentiality, <b>integrity,</b> and availability. Secure software {{is the result of}} security aware software development processes where security is built in and thus software is developed with security in mind.https://www.owasp.org/images/8/83/Securing_Enterprise_Web_Applications_at_the_Source.pdf ...|$|R
40|$|New in SAS 9, stored {{processes}} are SAS {{programs that are}} stored centrally on a server {{so that they can}} be accessed from anywhere in the organization. The advantage of stored processes over other approaches is in the ability to centrally maintain and manage code. They can provide better control over changes, enhance security and <b>application</b> <b>integrity,</b> and ensure that every client executes the latest version of code. SAS Stored Processes can be used in many different client applications, including SAS Enterprise Guide and the SAS Stored Process Web Application. This paper will cover creating and managing SAS Stored Processes using Enterprise Guide and the SAS Management Console, including the following topics: A brief overview of using SAS ® Management Console to set up and manage Metadata, Workspace an...|$|R
40|$|The HTTP and HTTPS {{protocols}} are {{the corner}} {{stones of the}} modern web. From a security point of view, they offer an all-ornothing choice to web applications: either no security guarantees with HTTP or both confidentiality and integrity with HTTPS. However, in many scenarios confidentiality is not necessary and even undesired, while integrity is essential to prevent attackers from compromising the data stream. We propose GlassTube, a lightweight approach to web <b>application</b> <b>integrity.</b> GlassTube guarantees <b>integrity</b> at <b>application</b> level, without resorting to the heavyweight HTTPS protocol. GlassTube prevents man-in-the-middle attacks and provides a general method for <b>integrity</b> in web <b>applications</b> and smartphone apps. GlassTube is easily deployed {{in the form of}} a library on the server side, and offers flexible deployment options on the client side: from dynamic code distribution, which requires no modification of the browser, to browser plugin and smartphone app, which allow smooth key predistribution. The results of a case study with a web-based chat indicate a boost in the performance compared to HTTPS, achieved with no optimization efforts. Categories and Subject Descriptors application security General Terms [Security and privacy]: Web Security, integrity, man-in-the-middle-attacks Keywords web <b>application</b> security, data <b>integrity,</b> lightweight enforcement, application-level security policies 1...|$|R
40|$|Hash {{functions}} have a {{long history}} in computer science. Their earliest application was that of mapping a large sparsely filled file into a much smaller one. In cryptography they are a fundamental building block for many security <b>applications</b> like <b>integrity</b> protection, message authentication, digital signature schemes, password storage and protection, confirmation o...|$|R
40|$|In this paper, we {{describe}} RAMSES, {{a system for}} immunizing COTS applications from exploitation of common security vulnerabilities. RAMSES defends applications from many classes of attacks prevalent today. These attacks either {{have no effect on}} a RAMSES-protected application, or at worst, they cause an application crash. For attacks that do cause a crash, RAMSES learns from attack instances to generate improved responses that can then be deployed to protect <b>application</b> <b>integrity</b> as well as availability. Unlike many previous efforts in this area that required heavy-weight taint analysis, RAMSES achieves these benefits using light-weight techniques that typically introduce less than 5 % overhead. Our experiments demonstrate that RAMSES is very effective for protecting a range of applications on the Microsoft Windows operating system. Thus, our techniques provide some of the benefits typically associated with vendor patches, while mitigating their drawback of timeliness. ...|$|R
5000|$|Advanced Design System (ADS) - RF, {{microwave}} and high speed digital EDA software for wireless communications and networking, aerospace and defense, and signal <b>integrity</b> <b>applications</b> ...|$|R
40|$|Gas-cluster ion-beam (GCIB) {{processing}} of surfaces provides individual atoms within an accelerated gas cluster (~ 1, 500 atoms per cluster), an energy approximately {{equal to the}} individual bond energy of the target surface atoms. The gas-cluster beam is thus capable of providing smoothing and etching of the extreme surface of numerous semiconductors, metals, insula-tors, and magnetic materials. For semiconductor material systems, the gas-cluster processing effect {{on the surface and}} subsurface material is of critical interest for device and circuitry <b>application</b> <b>integrity.</b> In the case of III-V GaSb, chemo-mechanical or touch polishing is the final step in the semiconductor-wafer manufacturing process, often leaving scratches of vari-ous depths or damage on the polished surface. In this paper, we report the GCIB etching and smoothing of chemical-mechanical polished GaSb(100) wafers. Using a dual-energy, dual gas-cluster source process, ∼ 100 nm of material was removed from a GaSb(100) surface. Atomic-force microscopy (AFM) imaging and power spectral-density (PSD) analysis shows significan...|$|R
40|$|In this paper, we firstly {{review the}} {{concerned}} issues on dynamic reconfiguration of non-stop dataflow systems with QoS requirement {{and what the}} related work have been done on these issues. Then we present our research by focusing on reconfiguration automation – automated reconfiguration planning and automated execution scheduling with taking the concerned issues on board. Significantly the automated planning removes the reliance of reconfiguration correctness on change administrators. Structures, such as Version-Visibility, Restrict-Segment and Route-Map, along with planning and scheduling algorithms, are proposed in this paper as the fundamentals to automate reconfiguration for maintaining the system’s QoS and preserving the <b>application</b> <b>integrity.</b> All the proposed structures and algorithms have been fully implemented as an architectural meta-model called the RDF (Reconfigurable Dataflow) model. In this paper a dataflow system: the DEDSS (Data Encryption & Digital Signature System) is studied as a typical case on the RDF to demonstrate the effectiveness of our approaches to automating seamless and QoS-ensured reconfiguration of non-stop dataflow systems...|$|R
40|$|Abstract. Web {{augmentation}} {{alters the}} rendering of existing Web applications {{at the back}} of these applications. Changing the layout, adding/removing content or providing additional hyperlinks/widgets are examples of Web augmentation that account for a more personalized user experience. Crowdsourced Web augmentation considers end users not only the beneficiaries but also the contributors of augmentation scripts. The fundamental problem with so augmented Web applications is that code from numerous and possibly untrusted users are placed into the same security domain, hence, raising security and integrity concerns. Current solutions either coexist with the danger (e. g. Greasemonkey, where scripts work on the same security domain that the hosting application) or limit augmentation possibilities (e. g. virtual iframes in Google’s Caja, where the widget is prevented from accessing the application space). This work introduces Modding Interfaces: application-specific interfaces that regulate inflow and outflow communication between the hosting code and the user code. The paper shows how the combined use of sandboxed iframes and “modding-interface ” HTML 5 channels ensures <b>application</b> <b>integrity</b> while permitting controlled augmentation on the hosting application...|$|R
40|$|The thesis studies a {{model of}} {{resource}} allocation for Cloud applications that allows using multiple clouds {{at the same time}} for a large set of applications. The model allows resource allocation to be cast as a Mixed/Integer Linear Programming problem, where optimal solutions can be computed subject to various types of platform constraints (e. g. <b>application</b> <b>integrity</b> when mapped across Clouds, resource capacity, application budget) and according to platform parameters (resource and migration costs). The objective functions takes then into account application cost as well as penalties for rejecting/migrating applications. The model is encoded in the MathProg language, and a software prototype has been built. It exploits standard MILP optimizers GLPK and CBC and a set of ad-hoc tools in Java that allow to focus the optimization on a subset of the available resources and applications. The model and the prototype are evaluated with respect to their effectiveness and running time using a real life dataset made available by Google, tracing the execution of {{a very large number of}} Cloud jobs for more than 6 hours...|$|R
5000|$|The recent (post-World War II) strict <b>application</b> of {{territorial}} <b>integrity</b> {{has given rise}} to a number of problems and, when faced with reality [...] "on the ground", can be seen as too artificial a construct.|$|R
50|$|Ivan LaHaie {{from the}} <b>Integrity</b> <b>Applications</b> Inc., Ann Arbor, MI was named Fellow of the Institute of Electrical and Electronics Engineers (IEEE) in 2014 for {{contributions}} to near-to-far field radar signature transformations and radar measurement error mitigation.|$|R
40|$|Fault {{tolerant}} systems {{require the}} ability to detect and recover from physical damage caused by the hardware s environment, faulty connectors, and system degradation over time. This ability applies to military, space, and industrial computing <b>applications.</b> The <b>integrity</b> of Point-to-Point (P 2 P) communication, between two microcontrollers for example, {{is an essential part}} of fault tolerant computing systems. In this paper, different methods of fault detection and recovery are presented and analyzed...|$|R
50|$|Martyn Thomas {{founded the}} {{software}} engineering company Praxis in 1983, based in Bath, southern England. He {{has a special}} interest in safety-critical systems and other high <b>integrity</b> <b>applications.</b> He has acted as an expert witness involving complex software engineering issues.|$|R
40|$|For most Web-based applications, {{contents}} {{are created}} dynamically {{based on the}} current state of a business, such as product prices and inventory, stored in database systems. These applications demand personalized content and track user behavior while maintaining <b>application</b> <b>integrity.</b> Many of such practices are not compatible with Web acceleration solutions. Consequently, although many web acceleration solutions have shown promising performance improvement and scalability, architecting and engineering distributed enterprise Web applications to utilize available content delivery networks remain a challenge. In this paper, we examine the challenge to accelerate J 2 EE-based enterprise web applications. We list obstacles and recommend some practices to transform typical database-driven J 2 EE applications to cache friendly Web applications where Web acceleration solutions can be applied. Furthermore, such transformation should be done without modification to the underlying application business logic and without sacrificing functions that are essential to e-commerce. We take the J 2 EE reference software, the Java PetStore, as a case study. By using the proposed guideline, we are able to cache more than 90 % of the content in the PetStore and scale up the Web site more than 20 times...|$|R
50|$|SIEM, IDS/IPS, Compliance Automation and Assurance, Network Configuration Management Tools, Advanced Threat Intelligence, Network Access Control, End Point Management, <b>Application</b> Security, File <b>Integrity</b> Monitoring, Forensic Investigation, and Vulnerability Scanning and Management, are all {{examples}} of cyber security solutions that co-managed service providers support.|$|R
40|$|The {{importance}} of hash functions {{for protecting the}} authenticity of information is demonstrated. <b>Applications</b> include <b>integrity</b> protection, conventional message authentication and digital signatures. An overview is given {{of the study of}} basic building blocks of cryptographic hash functions leads {{to the study of the}} cryptographic properties of Boolean functions and the information theoretic approach to authentication is described. An overview is given of the complexity theoretic definitions and constructions. New criteria are defined and functions satisfying new and existing criteria are studied. 1...|$|R
40|$|Abstract. An {{integrity}} policy defines the situations when modification {{of information is}} authorized and is enforced by the security mechanisms of the system. However, in a complex application system {{it is possible that}} an {{integrity policy}} may have been incorrectly specified and, as a result, a user may be authorized to modify information that can lead to an unexpected system compromise. In this paper we propose a scalable and quantitative technique that uses constraint solving to model and analyze the effectiveness of <b>application</b> system <b>integrity</b> policies. ...|$|R
5000|$|Even {{though all}} data are shared, {{everything}} is not equally accessible. WinFS uses the Windows authentication system to provide two data protection mechanisms. First, there is share-level security that controls {{access to your}} WinFS share. Second, there is item level security that supports NT compatible security descriptors. The process accessing the item must have enough privileges to access it. Also in Vista there {{is the concept of}} [...] "integrity level" [...] for an <b>application.</b> Higher <b>integrity</b> data cannot be accessed by a lower integrity process.|$|R
40|$|Modern {{computer}} systems {{are built on}} a foundation of software components {{from a variety of}} vendors. While critical applications may undergo extensive testing and evaluation procedures, the heterogeneity of software sources threatens the integrity of the execution environment for these trusted programs. For instance, if an attacker can combine an application exploit with a privilege escalation vulnerability, the operating system (OS) can become corrupted. Alternatively, a malicious or faulty device driver running with kernel privileges could threaten the application. While the importance of ensuring <b>application</b> <b>integrity</b> has been studied in prior work, proposed solutions immediately terminate the application once corruption is detected. Although, this approach is sufficient for some cases, it is undesirable for many critical applications. In order to overcome this shortcoming, we have explored techniques for leveraging a trusted virtual machine monitor (VMM) to observe the application and potentially repair damage that occurs. In this paper, we describe our system design, which leverages efficient coding and authentication schemes, and we present the details of our prototype implementation to quantify the overhead of our approach. Our work shows that it is feasible to build a resilient execution environment, even {{in the presence of a}} corrupted OS kernel, with a reasonable amount of storage and performance overhead...|$|R
5000|$|Service Data Unit (SDU). The {{amount of}} data passed across the (N)-DIF {{interface}} {{to be transferred to}} the destination <b>application</b> process. The <b>integrity</b> of an SDU is maintained by the (N)-DIF. An SDU may be fragmented or combined with other SDUs for sending as one or more PDUs.|$|R
40|$|AbstractIn {{the present}} study, surface {{integrity}} {{in the face}} milling of open-cell aluminum metal foams was studied at full-volume using micro-computed tomography. Morphological damage to the pore-strut network of the foam was characterized {{as a function of}} machining parameters. Post-mortem surface integrity characteristics including effective pore size, foam porosity, and depth of the deformation-affected zone were characterized using the voxel-based data. The machined surface exhibits spatially-graded characteristics, featuring distinct regions of foam-strut bending/buckling and fracture. Implications of these observations for understanding effects on performance relative to structural bio-medical <b>applications</b> and <b>integrity</b> optimization strategies are described...|$|R
40|$|Abstract In many {{heterogeneous}} networked <b>applications</b> the <b>integrity</b> {{of multimedia}} data plays an essential role, {{but is not}} directly supported by the application. In this paper, we propose a method which enables an individual user to detect tamper-ing with a multimedia file without changing the software application provided by the third party. Our method {{is based on a}} combination of cryptographic signa-tures and fragile watermarks, i. e., watermarks that are destroyed by illegitimate tampering. We show that the proposed system is provably secure under standard cryptographic assumptions. 1...|$|R
40|$|The current {{generation}} of Wireless Sensor and Actuator Networks (WSANs) must support multiple applications that are deployed and managed by different parties. As these WSANs are typically long-lived and always-on, application software must therefore be deployed, configured and reconfigured over time while the system is running. Re-configurable component models assist in this context by providing the basic mechanisms necessary to achieve reconfiguration at runtime. However, in scenarios where resource constrained environments are shared between multiple applications, todays generation of re-configurable component models provide a poor fit in terms of preserving <b>application</b> <b>integrity</b> during the deployment of new applications or their respective co-execution. Ensuring <b>application</b> <b>integrity</b> through existing component models typically results in increased developer efforts, less efficient resource usage, longer disruptions, or even faults. A second problem with contemporary component models is that they commonly only support specification of complete software compositions in terms of individual component instances and their interconnections. In addition, deployment of these compositions requires the listing of all low-level reconfiguration commands related with deployment, configuration, instantiation and interconnection of these individual component instances. Specifying applications in terms of only these lower level abstractions {{is known to be}} complex and error prone. This dissertation addresses these two problems through the use of middleware extensions to re-configurable component models. Our first contribution, the Resource Sharing Framework (RSF), proposes Composition-Swapping to ensure <b>application</b> <b>integrity</b> during the deployment of new applications and during their respective co-execution. Composition-Swapping is an extension to reconfigurable component models in which state management delegation, extended component meta-data and admission control are used to ensure <b>application</b> <b>integrity,</b> improve resource efficiency and reduce deployment efforts. Secondly, to reduce the effort incurred during the specification of applications we propose the Application Composition Service (ACS). The ACS offers the Sense-Process-React (SPR) specification and its supporting middleware. The SPR specification offers a data-flow driven declarative specification, allowing developers to specify applications in terms of logical application flows. Its supporting middleware automates the application assembly process, therefore reducing the effort incurred during the assembly of applications. Finally, additional to the two aforementioned contributions, this dissertation addresses a tangential issue. Due to the lack of appropriate test-bed infrastructure for evaluation and experimentation, we designed and built the DistriNet smart office test-bed. This in-house test-bed has been deployed inside two offices of our research facility and entails a fully functional approximation environment targeting future smart office scenarios. The test-bed infrastructure allowed us to perform in-depth research and experimentation with our solutions. We validated our solutions through a series of prototype implementations using embedded C and Java programming languages, targeting different embedded sensing platforms. We evaluated our middleware solutions through a series of reconfiguration cases, during which eight applications were incrementally deployed and reconfigured on the DistriNet smart office test-bed. Evaluation results demonstrate that our middleware reduce the human efforts incurred and the cost of reconfiguration during the specification and assembly of applications. Furthermore, our middleware eliminates disruption and faults, while demonstrating a more efficient use of resources. Abstract iii Contents [...] . vii List of Figures [...] . xv List of Tables [...] . xxiii 1 Introduction [...] . 1 1. 1 Resource constrained, shared and always-on Wireless Sensor and Actuator networks......................... 2 1. 2 Background............................. 3 1. 2. 1 Re-configurable component models and their runtime support........................... 3 1. 2. 2 The application life-cycle in shared, always-on WSANs. 4 1. 3 Research goal and challenges addressed............. 5 1. 3. 1 Deploying new applications without compromising existing ones, while maintaining resource efficiency...... 6 1. 3. 2 Specifying applications using only the low level abstractions provided by existing component models....... 7 1. 3. 3 Lack of appropriate test-bed infrastructure....... 8 1. 4 Requirements for the proposed solution............. 9 1. 5 Our approach: extending re-configurable component models.. 10 1. 6 Contribution summary........................ 11 1. 7 Overview of the disseration.................... 12 2 Related work 15 2. 1 Sharing WSAN resources..................... 15 2. 1. 1 Sharing strategies for WSANs............... 16 2. 1. 2 Sharing of sensors and RAM............... 29 2. 2 Component based development.................. 33 2. 2. 1 Runtime re-configurable component models....... 33 2. 2. 2 Integrity of component based applications......... 41 2. 3 Specification of WSAN applications................ 45 2. 3. 1 Specification based on monolithic approaches...... 46 2. 3. 2 Specifications based on dynamic approaches....... 49 2. 4 Chapter summary......................... 56 3 Improving resource efficiency and <b>application</b> <b>integrity</b> through the Resource Sharing Framework 59 3. 1 Deploying new applications without compromising existing ones while maintaining resource efficiency............... 60 3. 1. 1 The requirement on resource efficiency.......... 60 3. 1. 2 The requirement on <b>application</b> <b>integrity.........</b> 63 3. 1. 3 The manifestation of this challenge in the context of our smart office......................... 69 3. 1. 4 The causes that make deploying new applications lead to resource inefficiency, disruption, faults and increased assembly effort....................... 74 3. 2 RSF: Addressing resource efficiency and <b>application</b> <b>integrity.</b> 75 3. 2. 1 State management delegation: Isolation and management of component configuration and coordination...... 78 3. 2. 2 Extending component meta-data: Performance information and application constraints.............. 79 3. 2. 3 RAM admission control................... 81 3. 3 The RSF in the application life-cycle............... 83 3. 3. 1 Component development phase: Implementing RSF compliant components................... 83 3. 3. 2 Specification phase: Specifying sensing applications... 90 3. 3. 3 Assembly phase: Deploying new applications...... 97 3. 3. 4 Runtime phase: Composition-Swapping supports concurrent applications...................... 100 3. 4 RSF’s architecture......................... 105 3. 4. 1 RSF’s component based design.............. 106 3. 4. 2 Major design choices.................... 110 3. 5 Chapter summary......................... 113 4 Raising the abstraction level with the Application Composition Service 115 4. 1 Specifying applications using only the low level abstractions provided by existing component models.............. 116 4. 1. 1 The requirement on fine grained control......... 116 4. 1. 2 The requirement on human effort............. 119 4. 1. 3 Why is component level specification inadequate?.... 123 4. 2 Raising the abstraction level and retaining fine-grained control 123 4. 2. 1 Data-flow driven specification with Sense-Process-React flows............................. 124 4. 2. 2 The automated assembly of applications......... 126 4. 3 The ACS in the application life-cycle............... 127 4. 3. 1 Development phase: Implementing ACS compliant components......................... 127 4. 3. 2 Specification phase: Specifying sensing applications... 132 4. 3. 3 Assembly phase: Deploying new applications...... 145 4. 3. 4 Runtime phase: Modifying running applications.... 149 4. 4 ACS’ design............................. 150 4. 5 Chapter summary......................... 153 5 The smart office, a representative shared and always-on WSAN 155 5. 1 A working approximation of future smart offices........ 156 5. 1. 1 Expected characteristics of smart offices......... 158 5. 2 The test-bed infrastructure.................... 159 5. 2. 1 The hardware infrastructure................ 159 5. 2. 2 The Software infrastructure................ 162 5. 3 Prototype applications deployed on the test-bed......... 177 5. 3. 1 HVAC: Lighting and ventilation control......... 177 5. 3. 2 Workplace safety...................... 179 5. 3. 3 Office comfort........................ 180 5. 3. 4 Security............................ 181 5. 3. 5 Employee notification................... 182 5. 3. 6 Occupancy......................... 183 5. 3. 7 Working hours....................... 184 5. 3. 8 Air quality......................... 185 5. 4 The added value of the smart office................ 186 5. 4. 1 The smart office as an evaluation infrastructure..... 187 5. 4. 2 The smart office as an asset for the research group... 190 5. 5 Chapter summary......................... 193 6 Evaluation 195 6. 1 The evaluation procedure..................... 196 6. 1. 1 The four criteria used for evaluation........... 198 6. 1. 2 The reconfiguration cases used for the evaluation.... 199 6. 1. 3 The evaluation environment................. 201 6. 2 Benefits achieved by the RSF and ACS.............. 206 6. 2. 1 Reduced human effort during the specification and assembly of applications.................. 206 6. 2. 2 Reduced cost of reconfiguration.............. 212 6. 2. 3 Ensuring application integrity: the elimination of disruption and faults....................... 215 6. 2. 4 Efficient use of resources.................. 217 6. 2. 5 Case per case breakdown of cost, effort and disruption. 220 6. 3 Overhead imposed by the RSF/ACS............... 224 6. 3. 1 Increased programming effort: LOC in component implementation....................... 224 6. 3. 2 Increased RAM and FLASH footprint, and processing overhead........................... 232 6. 4 Chapter summary......................... 236 7 Conclusion 241 7. 1 Contributions............................. 241 7. 2 Impact and limitations....................... 242 7. 3 Observations............................ 244 7. 4 Future work............................. 245 7. 5 Outlook............................... 246 A Supplementary documents for the smart office test-bed 249 A. 1 Non functional requirements for the smart office test-bed.... 249 A. 1. 1 Design qualities, define how applications are designed and maintained......................... 250 A. 1. 2 Runtime qualities, define how applications should behave at runtime.......................... 253 A. 2 Practical details and initial setup of the test-bed........ 260 B Supplementary documents for the evaluation 262 B. 1 A model to quantify reconfiguration activities.......... 262 B. 1. 1 Introspection commands.................. 263 B. 1. 2 Configuration commands................. 264 B. 1. 3 Decisions required..................... 264 B. 1. 4 Time incurred during reconfiguration........... 267 B. 2 Architectural views for each of the evaluated reconfiguration cases 268 B. 2. 1 Case 0 : HVAC ventilation control (partial coverage).. 269 B. 2. 2 Case 1 : HVAC ventilation control............ 270 B. 2. 3 Case 2 : HVAC illumination control............ 272 B. 2. 4 Case 3 : Workplace safety................. 273 B. 2. 5 Case 4 : Office comfort................... 276 B. 2. 6 Case 5 : Security...................... 279 B. 2. 7 Case 6 : Employee notification................ 281 B. 2. 8 Case 7 : Occupancy..................... 283 B. 2. 9 Case 8 : Working hours................... 285 B. 2. 10 Case 9 : Air quality..................... 287 B. 3 Description of each reconfiguration case followed during the evaluation.............................. 289 B. 3. 1 Case 0 : HVAC ventilation control (partial coverage).. 289 B. 3. 2 Case 1 : HVAC ventilation control............ 290 B. 3. 3 Case 2 : HVAC illumination control............ 290 B. 3. 4 Case 3 : Workplace safety................. 290 B. 3. 5 Case 4 : Office comfort.................... 291 B. 3. 6 Case 5 : Security....................... 291 B. 3. 7 Case 6 : Employee notification............... 292 B. 3. 8 Case 7 : Office occupancy................. 292 B. 3. 9 Case 8 : Working hours................... 293 B. 3. 10 Case 9 : Air quality..................... 293 B. 4 Detailed description of the per case break down included in the evaluation.............................. 293 Bibliography 299 List of publications 319 nrpages: 321 status: publishe...|$|R
30|$|Furthermore, web {{services}} {{are the largest}} implementation technology in cloud environments. However, {{web services}} also lead to several challenges {{that need to be}} addressed. Security web services standards describe how to secure communication between <b>applications</b> through <b>integrity,</b> confidentiality, authentication and authorization. There are several security standard specifications [79] such as Security Assertion Markup Language (SAML), WS-Security, Extensible Access Control Markup (XACML), XML Digital Signature, XML Encryption, Key Management Specification (XKMS), WS-Federation, WS-Secure Conversation, WS-Security Policy and WS-Trust. The NIST Cloud Computing Standards Roadmap Working Group has gathered high level standards that are relevant for Cloud Computing.|$|R
