3|20|Public
5000|$|... a {{variable}} length (up to 12 digits) individual <b>account</b> <b>identifier</b> ...|$|E
50|$|In {{conjunction}} with the IIN, card issuers assign an account number to a card holder. The account number is variable in length with a maximum of 12 digits when used in {{conjunction with}} a six digit IIN. When using an eight digit IIN, the maximum total length of the Primary Account Number (PAN) remains at 19 digits. The PAN comprises the IIN, the individual <b>account</b> <b>identifier,</b> and the check digit, so when using an eight digit IIN, the maximum length of an individual <b>account</b> <b>identifier</b> would only be 10 digits.|$|E
40|$|This paper {{describes}} an access control method of the XML repository system, SAXOPHONE, which was implemented at Tokyo Metropolitan University. The main feature {{of our research}} is a novel <b>account</b> <b>identifier</b> {{that is based on}} the prefix-labeling scheme to realize a hierarchical authorization. SAXOPHONE uses relational databases for XML document storage. Using it, any valid or well-formed XML document is decomposed into events of the SAX parser and is then stored into relational tables using a fixed scheme. Consequently, users can handle the system as a normal SAX parser. This study also illustrates how to realize an access control method of XML documents on relational databases using the <b>account</b> <b>identifier...</b>|$|E
50|$|Twitter's {{privacy policy}} states that {{information}} is collected through their different web sites, application, SMS, services, APIs, and other third parties. When the user uses Twitter's service they consent to the collection, transfer, storage, manipulation, disclosure, and other uses of this information. In {{order to create a}} Twitter account, one must give a name, username, password, and email address. Any other information added to one's profile is completely voluntary. Twitter's servers automatically record data such as IP address, browser type, the referring domain, pages visited, mobile carrier, device and application IDS, and search terms. Any common <b>account</b> <b>identifiers</b> such as full IP address or username will be removed or deleted after 18 months.|$|R
25|$|We provide {{customer}} data {{only when}} we receive a legally binding order or subpoena to do so, and never on a voluntary basis. In addition we only ever comply with orders for requests about specific <b>accounts</b> or <b>identifiers.</b> If {{the government has a}} broader voluntary national security program to gather customer data, we don't participate in it.|$|R
50|$|Accounts are {{typically}} defined by an <b>identifier</b> (<b>account</b> number) and a caption or header and are coded by account type. In computerized accounting systems with computable quantity accounting, the accounts {{can have a}} quantity measure definition.|$|R
25|$|The BBAN must be of a {{fixed length}} {{for the country}} and {{comprise}} case-insensitive alphanumeric characters. It includes the domestic bank <b>account</b> number, branch <b>identifier,</b> and potential routing information. Each country can have a different national routing/account numbering system, up to a maximum of 30 alphanumeric characters.|$|R
25|$|The IBAN {{consists}} {{of up to}} 34 alphanumeric characters comprising: a country code; two check digits; and a number that includes the domestic bank <b>account</b> number, branch <b>identifier,</b> and potential routing information. The check digits enable a sanity check of the bank account number to confirm its integrity before submitting a transaction.|$|R
30|$|Policy enforcement. This layer {{allows a}} {{fine-grained}} access policy execution [7] {{that takes into}} <b>account</b> three parameters (<b>identifier</b> of the invoker, operation and arguments, and the current tuples stored in the space) to decide if an operation is approved or denied. These policies are defined by the users and are loaded at the servers during the system setup.|$|R
5000|$|A common {{practice}} in developing applications (and web applications in particular) {{is the use of}} fat database accounts (common schema) and pooled connections to enhance application performance. Using this approach raises a problem with full end-to-end user tracking in the database layer. The database is unable to see end-user details like username and IP address, only seeing the application server IP and the common schema <b>account.</b> Hedgehog <b>IDentifier</b> solves this problem by providing an application server plug-in that captures end-user information and transparently propagates it to the database tier by using standard database APIs. No application changes are required. IDentifier supports custom Java and [...]NET applications as well as all the major business applications. Some technical details are available in this blog entry.|$|R
50|$|Electronic cards (known {{as smart}} cards) are another common {{platform}} in smart city contexts. These cards possess a unique encrypted identifier {{that allows the}} owner to log into a range of government provided services (or e-services) without setting up multiple <b>accounts.</b> The single <b>identifier</b> allows governments to aggregate data about citizens and their preferences to improve the provision of services and to determine common interests of groups. This technology has been implemented in Southampton.|$|R
40|$|This project explores a {{security}} framework, called the Persona Concept, aimed at giving the user {{greater control over}} their private data in cyberspace, in particular, their electronic credentials. The background for the Persona Concept, along with the requirements identified {{can be found in}} three (3) technical publications produced by Kal Toth and myself in 2003 (see list of references [1], [2] and [3]). The Persona Concept uses a Persona Server as the secure storehouse for persona data such as credit card and bank <b>account</b> <b>identifiers</b> as well electronic credentials such as X. 509 certificates. The data is secured using public key encryption. The server component interacts with the user via a Persona Client which obtains X- 509 Certificates on behalf of the user from a Certification Authority (CA) service. Interaction among the various components (Persona Server, Persona Client and Certification Authority) is enabled by the use of Web Services. This project focused on managing the user data across these components including the creation, secure storage and retrieval of Persona data to and from the Persona Server using Simple Object Application Protocol (SOAP) and under the control of public key encryption schemes. SOAP is an open XML-based application-level Internet protocol for implementing distributed access to object-oriented services deployed on the Web. SOAP is designed to allow applications running on a range of platforms to access remote objects and applications on servers across a TCP/IP network. In addition to this, the project built upon the work by Ike Chen (OSU M. S. graduate project in 2004) [4] by enabling X- 509 Certificate file transfer between the client and Certification Authority using SOAP (improvements were made to the mechanisms for transferring files, particularly in support of X. 509 certificates). A Java-based prototype client called the Persona Client (PC) was created and used in conjunction with a small local password-based security scheme to protect the private key data on the user device. My project first implemented the upgrade to the Certification Authority services and detailed the various policies surrounding storage of data. I then implemented the Persona Client which enabled me to test the persona services in place. I then implemented the encryption schemes and the server components enabling the secure storage and transfer of Persona Data. Components to create, edit and delete data were packaged and published as services to be used by the Persona Client. Future extensions of this project could include exploring custom credential generation based on Security Assertion Markup Language (SAML) and Extensible Access Control Markup Language (XACML) which together can be used to specify XML-based credentials and access control policies for an enterprise. Other extensions include the implementation of discretionary and mandatory security policies using XACML to allow users to conduct transactions across various domains...|$|R
40|$|Deductive {{database}} languages exhibit an evident Adychotomy in the {{way they}} support queries and transactions. Query. answering is based ondeclarative semantics and fixpoint based (bottom-up) evaluation. Transactions are based on procedural semantics and topdown evaluation, as for instance in the logic database language LDL [NT 88]. This paper presents a technique t. o compile updates onto standard logic programs to be evaluated with the usual bottom-up evaluation mechanism. The compilation is based on the concept of XY- e stratification [AOZ 93, AOTZ 93] which is a syntactic property of non-monotonic recursive programs. XY?stratified programs use stage arguments to integrate control on state transition within the deduction process. The proposed compilation is then extended to update on operations on deductive object-oriented databases, by providing natural declarative <b>accounts</b> of object <b>identifiers,</b> classes, ISA hierarchies, multiple inheritance, and dynamic bindin...|$|R
40|$|Abstract. Abstract {{interpretation}} {{has been}} widely applied to approx-imate data structures and (usually numerical) value information. One needs to combine them to effectively apply static analysis to real software. Nevertheless, they have been studied mainly as orthogonal problems so far. In this context, we introduce a generic framework that, given a heap and a value analysis, combines them, and we formally prove its soundness. The heap analysis approximates concrete locations with heap identifiers, that can be materialized or merged. Meanwhile, the value analysis tracks information both on variable and heap <b>identifiers,</b> taking into <b>account</b> when heap <b>identifiers</b> are merged or materialized. We show how existing pointer and shape analyses, as well as numerical domains, can be plugged in our framework. As far as we know, {{this is the first}} sound generic automatic framework combining heap and value analyses that allows to freely manage heap identifiers. ...|$|R
40|$|Abstract:- To {{participate}} in IP networking, a host {{needs to be}} configured with IP addresses for its interfaces, either manually by the user or automatically from a source on the network such as a Dynamic Host Configuration Protocol (DHCP) server. Many common TCP/IP protocols [1] such as DHCP [2], DNS [3][4], MADCAP [5], and LDAP [6] must be configured and maintained by an administrative staff. Other times, administrative staff won’t be necessary, however we’ll need the help of central servers to configure the network. This is unacceptable for emerging networks such as home networks, automobile networks, airplane networks, or ad hoc networks at conferences, emergency relief stations, and many others. Such networks may {{be nothing more than}} two isolated laptop PCs connected via a wireless LAN. For all these networks, neither will exist an administrative staff nor possibly will exist central servers that help to configure this data, then the users of these networks neither have the time nor inclination to learn network administration skills. Instead, these networks need protocols that require zero user configuration and administration. Spontaneous networks are an example of these networks, in which central servers don’t usually exist, for this reason, the nodes will be in charge of both forming the network and configuring their IP address. In this article we deal with the problematic of IP addresses configuration in a particular case: spontaneous networks, we’ll have into <b>account</b> the <b>identifier</b> ownership problems...|$|R
40|$|Three {{studies were}} {{conducted}} to {{examine the effect of}} group identification and normative content of social identities on healthy eating intentions and behaviour. In Study 1 (N = 87) Australian participants were shown images that portrayed a norm of healthy vs. unhealthy behaviour among Australians. Participants' choices from an online restaurant menu were used to calculate energy content as the dependent variable. In Study 2 (N = 117), female participants were assigned to a healthy or unhealthy norm condition. The dependent variable was the amount of food eaten in a taste test. Social group identification was measured in both studies. In Study 3 (N = 117), both American identification and healthiness norm were experimentally manipulated, and participants' choices from an online restaurant menu constituted the dependent variable. In all three studies, the healthiness norm presented interacted with participants' group identification to predict eating behaviour. Contrary to what would be predicted under the traditional normative social influence <b>account,</b> higher <b>identifiers</b> chose higher energy food from an online menu and ate more food in a taste test when presented with information about their in-group members behaving healthily. The exact psychological mechanism responsible for these results remains unclear, but the pattern of means can be interpreted as evidence of vicarious licensing, whereby participants feel less motivated to make healthy food choices after being presented with content suggesting that other in-group members are engaging in healthy behaviour. These results suggest a more complex interplay between group membership and norms than has previously been proposed...|$|R
5000|$|Notice: The NAI {{principles}} require [...] "clear, {{meaningful and}} prominent" [...] notice on the member’s website that describes its data collection, including what behavioral or multi-site advertising the ad network engages in, {{what types of}} data they collect for what purposes and for what length of time, data transfer, and use practices for Interest-Based Advertising and/or Ad Delivery and Reporting. Since ads are commonly shown on web sites not controlled by the ad network, members must also require that partnering web sites that display their ads also provide [...] "prominent" [...] notice that behavioral advertising is taking place {{as well as what}} data is being collected, for what purposes and with whom it will be shared. Typically, these notices are presented in each web site's privacy policy. [...] "Robust" [...] notice — where the notice is presented before personal information is collected — is required when personally-identifiable information ("name, address, telephone number, email address, financial <b>account</b> number, government-issued <b>identifier</b> and any other data used to identify, contact or precisely locate a person") will be merged with other non-identifiable information (like demographics or interests).|$|R
40|$|Automated {{verification}} of dynamic multi-threaded computing systems is severely affected by problems relating to dynamic process creation. In this paper, we describe an abstraction technique aimed at generating reduced state space representations for such systems. To make the new technique applicable {{to a wide}} range of different system models, we express it in terms of general labelled transition systems. At the heart of our technique is an equivalence relation on system states based on a suitable isomorphism between their component parts and relationships between component process identifiers. In addition, the equivalence takes into <b>account</b> new process <b>identifiers</b> which can be derived from those present in the states being compared, in effect performing a limited lookahead. Applying state space reduction based on such a state equivalence may produce a finite representation of an infinite state system while still allowing to validate essential behavioural properties, e. g., freedom from deadlocks. We evaluate the feasibility of the proposed method through extensive experiments. The results clearly demonstrate that the new state space reduction technique can be implemented in an efficient way. We also describe how the new state equivalence relation can be implemented for a class of high-level Petri nets supporting dynamic thread creation...|$|R

