38|52|Public
25|$|Checksum – Each note has {{a unique}} serial number. The {{remainder}} from dividing the serial number by 9 gives checksum corresponding to the initial letter indicated on the note. Using {{a variation of the}} divisibility rule shortcut, the remainder from division by 9 can easily be found by adding the constituent digits and, if the sum still does not make the remainder obvious, adding the digits of the sum. Alternatively, substituting the letter with its <b>ASCII</b> <b>value</b> makes the resulting number exactly divisible by 9. Taking the same example, Z10708476264, the ASCII code for Z is 90, so the resulting number is 9010708476264. Dividing by 9 yields a remainder of 0. Using the divisibility rule again, the result can be checked speedily since the addition of all digits gives 54; 5 + 4 = 9—so the number is divisible by 9, or 9010708476264 modulo 9 is 0.|$|E
5000|$|X = 32 x (high X {{character}} <b>ASCII</b> <b>value</b> - 32) + (low X character <b>ASCII</b> <b>value</b> - 64) Y = 32 x (high Y character <b>ASCII</b> <b>value</b> - 32) + (low Y character <b>ASCII</b> <b>value</b> - 96) ...|$|E
5000|$|The number 48 in ASCII is {{what you}} add to any single digit integer to convert to its <b>ASCII</b> <b>value</b> ...|$|E
40|$|In {{this study}} we explore the {{features}} of Genetic Algorithm with poly substitution methods to generate <b>ASCII</b> <b>values</b> of the given text and then applying conversion, transposition with the features of Cryptography. In PS ciphers the plaintext letters are enciphered differently depending upon their placement in the text. As the name polyalphabetic suggests this is achieved by using several two, three keys and random keys combinations instead of just one, {{as is the case}} in most of the simpler crypto systems. Using two keys, we take 2 keys e 1,e 2 and let the <b>ASCII</b> <b>values</b> of e 1 be 1 and e 2 be 2 and take the text, add <b>ASCII</b> <b>values</b> of e 1 to first character and <b>ASCII</b> <b>values</b> of e 2 to second character. Alternatively add the value of e 1 and e 2 to consecutive characters...|$|R
5000|$|Table to {{translate}} raw <b>ASCII</b> <b>values</b> (A,D,M,S) to new subroutine index (1,4,3,2) in constant time using one-dimensional array ...|$|R
40|$|This paper {{shows the}} {{possibility}} of exploiting the features of Genetic Algorithm with poly substitution methods in a linear way, to generate <b>ASCII</b> <b>values</b> of the given text and then applying conversion, transposition with the features of Cryptography. In polyalphabetic substitution ciphers the plaintext letters are enciphered differently depending upon their placement in the text. As the name polyalphabetic suggests this is achieved by using several two, three keys and random keys combinations instead of just one, {{as is the case}} in most of the simpler crypto systems. Using two keys, we take 2 keys e 1,e 2 and let the <b>ASCII</b> <b>values</b> of e 1 be 1 and e 2 be 2 and take the text, add <b>ASCII</b> <b>values</b> of e 1 to first character and <b>ASCII</b> <b>values</b> of e 2 to second character. Alternatively add the value of e 1 and e 2 to consecutive characters. We can use Poly substitution method combining the features of cryptography for text encryption by 2 keys and 3 keys and even more then 3 keys to make the decryption process more complicated. Key word...|$|R
5000|$|Here is the {{definition}} of a word [...] which when executed emits the single character : : EMIT-Q 81 ( [...] the <b>ASCII</b> <b>value</b> for the character 'Q' [...] ) EMITThis definition was written to use the <b>ASCII</b> <b>value</b> of the [...] character (81) directly. The text between the parentheses is a comment and is ignored by the compiler. The word [...] takes a value from the data stack and displays the corresponding character.|$|E
5000|$|... uses [...] "\x" [...] to {{indicate}} the following two characters are hexadecimal digits, [...] "22" [...] being the <b>ASCII</b> <b>value</b> for a doublequote in hexadecimal.|$|E
5000|$|... 01011001 is {{the seventh}} studio album by Arjen Anthony Lucassens long-running Ayreon project. [...] "01011001" [...] is the binary {{representation}} of the <b>ASCII</b> <b>value</b> of the letter Y.|$|E
50|$|The {{basic data}} unit of L33t is the {{unsigned}} byte (big-endian), which can represent <b>ASCII</b> <b>values</b> and {{numbers in the}} range 0-255.|$|R
50|$|Only 64 {{characters}} {{are needed to}} represent all possible combinations of 6 dot Braille (including space), so not all <b>ASCII</b> <b>values</b> are needed for Braille ASCII.|$|R
5000|$|The [...] and [...] {{fields were}} simply the {{character}} {{values of the}} [...] "erase" [...] and [...] "kill" [...] characters, respectively, defaulting to the (<b>ASCII)</b> <b>values</b> for '#' and '@' respectively.|$|R
50|$|This is an {{optional}} column. If present, the <b>ASCII</b> <b>value</b> {{of the character}} minus 33 gives the mapping Phred quality {{of each of the}} bases in the previous column 5. This is similar to quality encoding in the FASTQ format.|$|E
5000|$|In Unicode, the {{character}} is encoded at [...] The <b>ASCII</b> <b>value</b> of this character is 95. On the standard US or UK 101/102 computer keyboard it shares a key with the hyphen-minus (-) on the top row, {{to the right of}} the 0 key.|$|E
5000|$|When using TeX to typeset text, the backtick {{character}} represents curly opening quotes. For example, [...] {{is rendered}} as single opening curly quote (...) and [...] {{is a double}} curly opening quote (...) [...] It also supplies the numeric <b>ASCII</b> <b>value</b> of an ASCII character wherever a number is expected.|$|E
50|$|Theoretically, {{there exist}} other {{algorithms}} {{that could provide}} convenient recomputation, e.g. multiplying together <b>ASCII</b> <b>values</b> of all characters so that shifting substring would only entail dividing by the first character and multiplying by the last. The limitation, however, is the limited size of the integer data type {{and the necessity of}} using modular arithmetic to scale down the hash results, (see hash function article). Meanwhile, naive hash functions do not produce large numbers quickly, but, just like adding <b>ASCII</b> <b>values,</b> are likely to cause many hash collisions and hence slow down the algorithm. Hence the described hash function is typically the preferred one in the Rabin-Karp algorithm.|$|R
50|$|Braille ASCII {{is merely}} {{a subset of the}} ASCII table {{that can be used to}} {{represent}} all possible combinations of 6-dot Braille. It is not to be confused with the Computer Braille Code, which can represent all <b>ASCII</b> <b>values</b> in Braille.|$|R
5000|$|Many game {{walkthrough}} guides come {{as part of}} a basic [...]txt file; this file often {{contains the}} name of the game in ASCII art. Such as below, word art is created using backslashes and other <b>ASCII</b> <b>values</b> in order to create the illusion of 3D.|$|R
50|$|Description: this {{command is}} similar to the GETC command. This command is more user-friendly, though this command is more time consuming. It tells the user to input a {{character}} and that single character is echoed back to the screen and is also stored into R0 as an <b>ASCII</b> <b>value</b> in the GPRs.|$|E
50|$|A one byte offset, {{such as the}} {{hexadecimal}} <b>ASCII</b> <b>value</b> of {{a character}} (e.g. X'29') {{can be used to}} point to an alternative integer value (or index) in an array (e.g. X'01'). In this way, characters can be very efficiently translated from 'raw data' to a usable sequential index and then to an absolute address without a lookup table.|$|E
5000|$|A CTCP {{message is}} {{implemented}} as a [...] or [...] {{where the first}} and last characters of the message are <b>ASCII</b> <b>value</b> 0x01. Additionally, characters which would not be allowed in the IRC protocol are escaped. Since a [...] as the standard should not generate a reply, CTCP messages are sent as [...] and the reply is implemented with a [...] instead of a [...]|$|E
40|$|Abstract — Encryption is {{the process}} of {{encoding}} messages or information {{in such a way that}} only authorized users can read it. In an encryption algorithm the original message or information called plaintext is given as input to form ciphertext. Decryption {{is the process}} of transforming ciphertext into plaintext. Here ciphertext is the input to the decryption algorithm and it generates plaintext as output. Cryptographic algorithms are classified as symmetric and asymmetric. This paper presents a symmetric cryptographic algorithm for data encryption and decryption based on <b>ASCII</b> <b>values</b> of characters in the plaintext. This algorithm encrypts the plaintext using their <b>ASCII</b> <b>values.</b> The secret key is converted to another string and that string is used as a key to encrypt or decrypt the data...|$|R
40|$|AbstractElliptic Curve Cryptography {{has been}} a recent {{research}} area {{in the field of}} Cryptography. It provides higher level of security with lesser key size compared to other Cryptographic techniques. A new technique has been proposed in this paper where the classic technique of mapping the characters to affine points in the elliptic curve has been removed. The corresponding <b>ASCII</b> <b>values</b> of the plain text are paired up. The paired values serve as input for the Elliptic curve cryptography. This new technique avoids the costly operation of mapping and the need to share the common lookup table between the sender and the receiver. The algorithm is designed {{in such a way that}} it can be used to encrypt or decrypt any type of script with defined <b>ASCII</b> <b>values...</b>|$|R
5000|$|An {{intermediate}} order — readily implemented — converts uppercase {{letters to}} lowercase before comparing <b>ASCII</b> <b>values.</b> Naïve number sorting can be averted by zero-filling all numbers (e.g. [...] "02" [...] will sort before [...] "10" [...] as expected), {{although this is}} an external fix and {{has nothing to do}} with the ordering itself.|$|R
50|$|In the ASCII {{character}} set, the okina {{is typically}} {{represented by the}} apostrophe character ('), <b>ASCII</b> <b>value</b> 39 in decimal and 27 in hexadecimal. This character is typically rendered as a straight typewriter apostrophe, lacking {{the curve of the}} okina proper. In some fonts, the ASCII apostrophe is rendered as a right single quotation mark, which is an even less satisfactory glyph for the okina—essentially a 180° rotation of the correct shape.|$|E
5000|$|The {{following}} {{redefinition of}} [...] uses the words [...] (left-bracket), [...] (right-bracket), [...] and [...] to temporarily switch to interpreter state, calculate the <b>ASCII</b> <b>value</b> of the [...] character, return to compilation state and append the calculated {{value to the}} current colon definition: : EMIT-Q CHAR Q [...] LITERAL EMITThe parsing word [...] takes a space-delimited word as parameter and places {{the value of its}} first character on the data stack. The word [...] is an immediate version of [...] Using , the example definition for [...] could be rewritten like this: : EMIT-Q CHAR Q EMIT \ Emit the single character 'Q'This definition used [...] (backslash) for the describing comment.|$|E
5000|$|The special symbol FNC4 ("Function 4"), present only in code sets A and B, {{can be used}} {{to encode}} all the Latin-1 (ISO-8859-1) {{characters}} in a Code 128 barcode. [...] The feature is not widely supported and is not used in GS128. [...] When a single FNC4 is present in a string, the following symbol is converted to ASCII as usual, and then 128 is added to the <b>ASCII</b> <b>value.</b> (If the following symbol is a shift, then a second symbol will be used to obtain the character.) If two FNC4s are used consecutively then all following characters will be treated as such, up {{to the end of the}} string or another pair of FNC4s. Between the double FNC4s, a single FNC4 will be used to denote that the following character will be standard ASCII.|$|E
40|$|Encryption is {{the process}} of {{transforming}} plaintext into the ciphertext where plaintext is the input to the encryption process and ciphertext is the output of the encryption process. Decryption isthe process of transforming ciphertext into the plaintext where ciphertext is the input to the decryption process and plaintext is the output of the decryption process. There are various encryption algorithms exist classified as symmetric and asymmetric encryption algorithms. Here, I present an algorithm for data encryption and decryption which is based on <b>ASCII</b> <b>values</b> of characters in the plaintext. This algorithm is used to encrypt data by using <b>ASCII</b> <b>values</b> of the data to be encrypted. The secret used will be modifying o another string and that string is used as a key to encrypt or decrypt the data. So, {{it can be said that}} it is a kind of symmetric encryption algorithm because it uses same key for encryption anddecryption but by slightly modifying it. This algorithm operates when the length of input and the length of key are same...|$|R
30|$|To enable secure mode during upload of file, a {{sequence}} of steps has been proposed. Since, the complete process is executed at the client side, channel security has also {{been included in the}} process. The whole operation is based on encrypting characters. The following algorithm has been designed for characters with <b>ASCII</b> <b>values</b> in the range of 0 to 255. In case a particular character falls out of the range, it is left unchanged.|$|R
40|$|We {{propose a}} method for {{constructing}} a vector for a document image to represent its content to facilitate text retrieval. The method {{is based on an}} N-Gram algorithm for text similarity measure based on the frequency of occurrence of n-character strings appearing in the electronic text. Instead of using <b>ASCII</b> <b>values,</b> the present study investigates the use of character images to obtain the document vector and has found promising results for use in our news article retrieval project...|$|R
5000|$|This {{left the}} problem of sending the ASCII data to the printer. While a serial port does so with the minimum of pins and wires, it {{requires}} the device to buffer up the data as it arrives bit by bit and turn it back into multi-bit values. A parallel port makes this simpler, the entire <b>ASCII</b> <b>value</b> is presented on the pins in complete form. In addition to the seven data pins, the system also needed various control pins as well as electrical grounds. Wang happened to have a surplus stock of 20,000 Amphenol 36-pin micro ribbon connectors that were originally used for one of their early calculators. The interface only required 21 of these pins, the rest were grounded or not connected. The connector has become so closely associated with Centronics {{that it is now}} popularly known as the [...] "Centronics connector".|$|E
5000|$|Checksum - Each note has {{a unique}} serial number. The {{remainder}} from dividing the serial number by 9 gives checksum corresponding to the initial letter indicated on the note. Using {{a variation of the}} divisibility rule shortcut, the remainder from division by 9 can easily be found by adding the constituent digits and, if the sum still does not make the remainder obvious, adding the digits of the sum. Alternatively, substituting the letter with its <b>ASCII</b> <b>value</b> makes the resulting number exactly divisible by 9. Taking the same example, Z10708476264, the ASCII code for Z is 90, so the resulting number is 9010708476264. Dividing by 9 yields a remainder of 0. Using the divisibility rule again, the result can be checked speedily since the addition of all digits gives 54; 5 + 4 = 9—so the number is divisible by 9, or 9010708476264 modulo 9 is 0.|$|E
5000|$|... 1) The Computer Braille Code {{as defined}} by the Braille Authority of North America. However, since January 2016 it is no longer {{official}} in the USA and replaced by Unified English Braille (UEB). It employs only the 6-dot braille patterns to represent all code points of ASCII as well as many technical characters and commands. It is virtually identical to the Braille ASCII, a system of representation of braille with ASCII characters, which goal is mirrored to the Computer Braille Code. To represent ASCII code points 0x60, 0x7B, 0x7C, 0x7D, 0x7E as well as capital letters the 4-5-6 character is used as the shift indicator or modifier. Thus, [...] (grave accent, 0x60) is represented by , where [...] is assigned to [...] (at sign, 0x40). In other words, [...] either adds or subtracts 32 to or from the <b>ASCII</b> <b>value</b> of the following character. Unlike Braille ASCII [...] (underscore, 0x40) is represented by [...]|$|E
50|$|X and Y {{locations}} {{were sent}} as 10-bit decimal numbers, encoded as ASCII characters, with 5 bits per character. This means that any number within the 1024 number space (2) {{can be stored}} as a string of two characters. To ensure the characters can be transmitted over 7-bit links, the pattern 01 is {{placed in front of}} both 5-bit numbers, producing 7-bit <b>ASCII</b> <b>values</b> that are always within the printable range. This results in a somewhat complex encoding algorithm.|$|R
40|$|Now-a-days {{web based}} attacks {{is an issue}} in the {{internet}} data transmission. Many cryptographic algorithms are developed to secure the data over the communication. The existing algorithm uses alphabets only. In this paper, we proposed an algorithm which uses an innovative Cryptographic Digraph Substitution method to provide a stronger cipher for the network security. The proposed method uses 10 x 10 matrices that extended to lowercase, symbols and <b>ASCII</b> <b>values.</b> Hence our algorithm is more secure where the intruders could not able to suspect the data...|$|R
40|$|Portability {{increases}} the probability for a wireless device to be stolen or lost. These devices usually carry sensitive business or private information. Government Employees store classified documents on their mobile devices. Corporate users save confidential files, PINs, Passwords on their devices. So {{the content of}} such devices should be protected from unauthorized access. However, the protection provided should not be heavy for a mobile phone because it would minimize the computing power, storage space, battery lifetime. To prevent this from happening, we are providing an algorithm which would ensure data privacy for the end users. <b>ASCII</b> <b>values</b> of plain text {{will be used to}} generate a secret key and same key would be used for decryption. It can be said to be a symmetric encryption algorithm because same key is used to encrypt and decrypt the data. A Secret key will be randomly generated from the <b>ASCII</b> <b>values</b> of plain text which when encrypted with the plain text will provide a cipher text which will be sent back to the Application with the key. For Decryption, cipher text and key will be fetched from Application and decryption process will occur at server. By this method this application will not be heavy for a mobile phone and this would be an efficient method for data security...|$|R
