4|10000|Public
5000|$|Returning to {{the example}} above, when the {{covariance}} is zero it is trivial {{to determine the}} location of the object after it moves according to an arbitrary nonlinear function : just <b>apply</b> <b>the</b> <b>function</b> <b>to</b> the mean vector. When the covariance is not zero the transformed mean will not generally be equal to [...] and it is not even possible to determine the mean of the transformed probability distribution from only its prior mean and covariance. Given this indeterminacy, the nonlinearly transformed mean and covariance can only be approximated. The earliest approximation was to linearize the nonlinear function and apply the resulting Jacobian matrix to the given mean and covariance. This is the basis of the extended Kalman Filter (EKF), and although it was known to yield poor results in many circumstances, there was no practical alternative for many decades.|$|E
40|$|In {{the present}} document, an {{extension}} of the statistical depth notion is introduced with the aim to allow for measuring proximities between pairs of points. In particular, we will extend the simplicial depth function, which measures how central is a point by using random simplices (triangles in the two-dimensional space). The paper is structured as follows: In first place, there is a brief introduction to statistical depth functions. Next, the simplicial similarity function will be defined and its properties studied. Finally, we will present a few graphical examples in order to show its behavior with symmetric and asymmetric distributions, and <b>apply</b> <b>the</b> <b>function</b> <b>to</b> hierarchical clustering. Statistical depth, Similarity measures, Hierarchical clustering...|$|E
40|$|We {{address the}} problem of {{automatic}} analysis of geo-metrically proximate nets in VLSI layout by presenting a framework (named FASCL) which supports pairwise analy-sis of nets based on a geometric kernel. The exact form of the analysis function can be specified to the kernel, which assumes a coupling function based on pairwise interaction between geometrically proximate nets. The user can also attach these functions to conditions and FASCL will auto-matically <b>apply</b> <b>the</b> <b>function</b> <b>to</b> all pairs of nets which sat-isfy a condition. Our method runs with sub-quadratic time complexity, O N 1 k, where N is the number of nets and we have proved that k 1. We have successfully used the program to analyze circuits for bridging faults, coupling capacitance extraction, crosstalk analysis, signal integrity analysis and delay fault testing. ...|$|E
2500|$|The range {{corresponding}} to the interval [...] can be calculated by <b>applying</b> <b>the</b> <b>function</b> <b>to</b> <b>the</b> endpoints [...] and : ...|$|R
40|$|Rpackage FME (Soetaert and Petzoldt 2010) {{contains}} {{functions for}} model calibration, sensitivity, identifiability, and Monte Carlo analysis of nonlinear models. This vignette (vignette("FMEdyna")) <b>applies</b> <b>the</b> <b>functions</b> <b>to</b> a dynamic simulation model, solved with integration routines from package deSolve. A similar vignette, (vignette("FMEsteady")), applies FME to a partial differential equation, solved with a steady-state solver from package rootSolve. A third vignette (vignette("FMEother")), <b>applies</b> <b>the</b> <b>functions</b> <b>to</b> a simple nonlinear model. vignette("FMEmcmc") tests the Markov chain Monte Carlo (MCMC) implementation...|$|R
2500|$|... <b>applies</b> <b>the</b> <b>function</b> E <b>to</b> it; this is extensionally {{equal to}} the ...|$|R
40|$|Content sharing {{is among}} the most {{important}} features of personal cloud storage. It allows users to easily send files to each other, as well as to perform collaborative work in almost real-time. Content sharing seems to attract users to cloud storage, but it comes with a cost: files need to be spread to many user devices, posing extra workload to servers in the cloud. Which pricing model should providers adopt to offer content sharing while remaining profitable? Answering this question is challenging as many factors affect users' and providers' interests. In this paper we take a first step towards answering it. We propose a payoff function that captures costs and benefits of content sharing for both users and providers. We then <b>apply</b> <b>the</b> <b>function</b> <b>to</b> analyze the feasibility of a new pricing model for content sharing. In this new model, users receive credits if they offer upstream bandwidth for providers. Our preliminary results show that this pricing model is advantageous, leading to an increase on payoff of more than 4 % for users and providers...|$|E
5000|$|In the {{following}} examples, <b>the</b> higher-order <b>function</b> [...] takes a <b>function,</b> and <b>applies</b> <b>the</b> <b>function</b> <b>to</b> some value twice. If [...] {{has to be}} applied several times for the same [...] it preferably should return a function rather than a value. This {{is in line with}} the [...] "don't repeat yourself" [...] principle.|$|R
50|$|Higher-order {{functions}} are rarely used in older imperative programming. A traditional imperative program might use a loop to traverse and modify a list. A functional program, {{on the other}} hand, would probably use a higher-order “map” function that takes a function and a list, generating and returning a new list by <b>applying</b> <b>the</b> <b>function</b> <b>to</b> each list item.|$|R
40|$|Rpackage FME (Soetaert and Petzoldt 2010) {{contains}} {{functions for}} model calibration, sensitivity, identifiability, and Monte Carlo analysis of nonlinear models. This vignette, (vignette("FMEsteady")), applies FME to a partial differential equation, solved with a steady-state solver from package rootSolve A similar vignette (vignette("FMEdyna")), <b>applies</b> <b>the</b> <b>functions</b> <b>to</b> a dynamic similation model, solved with integration routines from package deSolve A third vignette (vignette("FMEother")), <b>applies</b> <b>the</b> <b>functions</b> <b>to</b> a simple nonlinear model vignette("FMEmcmc") tests the Markov chain Monte Carlo (MCMC) implementation Keywords:˜steady-state models, differential equations, fitting, sensitivity, Monte Carlo, identifiability, R. 1. A steady-state model of oxygen in a marine sediment This {{is a simple}} model of oxygen in a marine (submersed) sediment, diffusing along a spatial gradient, with imposed upper boundary concentration oxygen is consumed at maximal fixed rate, and including a monod limitation. See (Soetaert and Herman 2009) for a description of reaction-transport models. The constitutive equations are:> par(mfrow=c(2, 2)) > require(FME) ∂O 2 ∂t First the model parameters are defined [...] . lu...|$|R
2500|$|This <b>applies</b> <b>the</b> [...] <b>function</b> <b>to</b> each {{corresponding}} pair of list elements, yielding {{the result}} [...]|$|R
50|$|First-class {{functions}} are {{a necessity for}} the functional programming style, in which the use of higher-order functions is a standard practice. A simple example of a higher-ordered <b>function</b> is <b>the</b> map <b>function,</b> which takes, as its arguments, a function and a list, and returns the list formed by <b>applying</b> <b>the</b> <b>function</b> <b>to</b> {{each member of the}} list. For a language to support map, it must support passing a function as an argument.|$|R
3000|$|For the {{convolution}} {{results of}} each feature number, add the bias unit b and <b>apply</b> <b>the</b> sigmoid <b>function</b> <b>to</b> get <b>the</b> hidden activation.|$|R
5000|$|By <b>applying</b> <b>the</b> {{exponential}} <b>function</b> <b>to</b> {{both sides}} and observing that as a strictly increasing <b>function</b> it preserves <b>the</b> sign of the inequality, we get ...|$|R
5000|$|Description: this {{function}} takes in a boolean function and 2 or more attribute values or bags. <b>The</b> higher-order <b>function</b> <b>applies</b> <b>the</b> boolean <b>function</b> <b>to</b> <b>the</b> remaining parameters.|$|R
2500|$|<b>The</b> [...] <b>function</b> evaluates <b>the</b> data, {{returning}} zero or more other Lisp data as a result. Evaluation {{does not}} have to mean interpretation; some Lisp systems compile every expression to native machine code. It is simple, however, to describe evaluation as interpretation: To evaluate a list whose car names a function, [...] first evaluates each of the arguments given in its cdr, then <b>applies</b> <b>the</b> <b>function</b> <b>to</b> <b>the</b> arguments. In this case, <b>the</b> <b>function</b> is addition, and <b>applying</b> it to <b>the</b> argument list [...] yields the answer [...] This {{is the result of the}} evaluation.|$|R
50|$|Internal {{iterators}} {{are higher}} order functions (often taking anonymous functions) such as map, reduce etc., implementing the traversal across a container, <b>applying</b> <b>the</b> given <b>function</b> <b>to</b> every element in turn.|$|R
5000|$|<b>Applying</b> <b>the</b> {{transformation}} <b>function</b> [...] <b>to</b> each of {{the above}} points gives: ...|$|R
5000|$|... f:x {{represents}} {{the value that}} results from <b>applying</b> <b>the</b> <b>function</b> f [...] <b>to</b> <b>the</b> value x ...|$|R
5000|$|... which yields , {{demonstrating that}} [...] {{has gone through}} the entire list and <b>applied</b> <b>the</b> <b>function</b> [...] <b>to</b> each element. The [...] is {{provided}} {{as part of the}} Haskell's base prelude (i.e. [...] "standard library") and is implemented as: ...|$|R
5000|$|This <b>function,</b> again applied <b>to</b> any valid input, will {{generate}} a call tree which is non-linear. In the example on the right, the call tree generated by <b>applying</b> <b>the</b> [...] <b>function</b> <b>to</b> <b>the</b> input [...]|$|R
5000|$|... can {{be solved}} with respect to [...] by <b>applying</b> <b>the</b> {{implicit}} <b>function</b> theorem <b>to</b> <b>the</b> operator ...|$|R
50|$|Squashing {{functions}} are <b>functions</b> used <b>to</b> reduce <b>the</b> size of domain of constraint languages. A squashing function {{is defined in}} terms of a partition of the domain and a representative element for each set in the partition. <b>The</b> squashing <b>function</b> maps all elements of a set in the partition to the representative element of that set. For such a function being a squashing function it is also necessary that <b>applying</b> <b>the</b> <b>function</b> <b>to</b> all elements of a tuple of a relation in the language produces another tuple in the relation. The partition is assumed to contain at least a set of size greater than one.|$|R
40|$|A {{segregated}} {{finite element}} algorithm for {{the solution of}} the SUPG formulation of the incompressible steady-state Navier-Stokes equations for non-isothermal flow is presented in this paper. The method features equal order interpolation for all the flow variables. The SIMPLER and SIMPLEST algorithms are employed and the sets of nonsymmetric linear equations are solved by means of the preconditioned conjugate gradient squared solver, whilst the preconditioned conjugate gradient solver is used to solve the sets of symmetric linear equations. The e#ect {{of the value of the}} Euclidian norm to test for the convergence of the solution is investigated. It is shown that the Euclidian norm is grid dependent. Also <b>the</b> effect of <b>applying</b> <b>the</b> SUPG weighting <b>functions</b> <b>to</b> all <b>the</b> terms in the momentum and energy equations is compared with <b>the</b> effect of <b>applying</b> <b>the</b> <b>functions</b> <b>to</b> <b>the</b> convective terms only. Three cases are investigated, i. e. the flow in a square cavity, the flow between parallel plates an [...] ...|$|R
30|$|Context {{aggregation}} — <b>Applies</b> <b>the</b> aggregability <b>function</b> <b>to</b> every incoming context message, providing {{both the}} sender and recipient’s contexts. It also manages {{the list of}} retained messages and the thresholds at which messages are no longer retained and start being propagated.|$|R
2500|$|A {{good example}} is a {{function}} which in Scheme is called [...] and in Common Lisp is called [...] Given a function and one or more lists, [...] <b>applies</b> <b>the</b> <b>function</b> successively <b>to</b> <b>the</b> lists' elements in order, collecting the results in a new list: ...|$|R
30|$|In this paper, {{the authors}} {{consider}} infinite sums {{derived from the}} reciprocals of the Fibonacci polynomials and Lucas polynomials. Then <b>applying</b> <b>the</b> floor <b>function</b> <b>to</b> <b>the</b> reciprocals of these sums, the authors obtain several new identities involving the Fibonacci polynomials and Lucas polynomials.|$|R
50|$|No {{explicit}} representation of natural numbers is given. However natural numbers may be constructed by <b>applying</b> <b>the</b> successor <b>function</b> <b>to</b> 0, and then applying other arithmetic functions. A distribution of natural numbers is implied by this, {{based on the}} complexity of constructing each number.|$|R
40|$|In {{this paper}} we <b>apply</b> <b>the</b> entropy <b>function</b> {{formalism}} <b>to</b> <b>the</b> two-dimensional black hole which {{come from the}} compactification of the heterotic string theory with <b>the</b> dilaton coupling <b>function.</b> We find <b>the</b> Bekenstein-Hawking entropy from the value of <b>the</b> entropy <b>function</b> at its saddle point. Also we consider higher derivative terms. After that we <b>apply</b> <b>the</b> entropy <b>function</b> formalism <b>to</b> <b>the</b> Jackiw-Teitelboim (JT) model where we consider the effect of string-loop to this model. Comment: 6 pages, no figure...|$|R
30|$|Now, by Lemma  2.2, we can <b>apply</b> <b>the</b> {{implicit}} <b>function</b> theorem <b>to</b> obtain <b>the</b> nonexistence {{result for}} the case of large d.|$|R
5000|$|The {{statement}} {{that this is}} the only quadratic pairing function is known as the Fueter-Pólya theorem. Whether this is the only polynomial pairing function is still an open question.When we <b>apply</b> <b>the</b> pairing <b>function</b> <b>to</b> [...] and [...] we often denote the resulting number as [...]|$|R
5000|$|... map {{a key to}} a {{subarray}} of {{the destination}} array A2, by <b>applying</b> <b>the</b> map key <b>function</b> <b>to</b> each array item ...|$|R
40|$|In {{this article}} we {{consider}} the infinite sums of reciprocal generalized Fibonacci numbers and the infinite sums of reciprocal generalized Fibonacci sums. <b>Applying</b> <b>the</b> floor <b>function</b> <b>to</b> <b>the</b> reciprocals of these sums, our results generalize some identities of Holliday and Komatsu and extend some results of Liu and Zhao. ...|$|R
40|$|In {{designing}} dynamic situations such as cyberworlds, {{we consider}} the Incrementally Modular Abstraction Hierarchy (IMAH) to be an appropriate mathematical background to model dynamically changing cyberworlds by descending from the most abstract homotopy level to the most specific view level, while retaining invariants. One of the distinctive features of IMAH is to define an adjunction space (an attaching space) level. Cyberspaces are then attached by an equivalence relation, where the attached areas of the spaces are equivalent. The cellular data system (CDS) we developed based on IMAH is equipped with an automatic attaching <b>function</b> defined on <b>the</b> adjunction space level, and {{in this paper we}} have <b>applied</b> <b>the</b> <b>function</b> <b>to</b> organizational file permission information management. <b>The</b> <b>function</b> helps a user to search for the data he/she wants from data storage attaching spaces automatically...|$|R
25|$|Despite {{the large}} values {{occurring}} in this early {{section of the}} table, some even larger numbers have been defined, such as Graham's number, which cannot be written with any small number of Knuth arrows. This number is constructed with a technique similar <b>to</b> <b>applying</b> <b>the</b> Ackermann <b>function</b> <b>to</b> itself recursively.|$|R
40|$|Understanding why {{and where}} {{optimization}} occurs in engineering and scientific problem solving • Recognizing {{the difference between}} one-dimensional and multi-dimensional optimization • Distinguishing between global and local optima • Knowing how to recast a maximization problem {{so that it can}} be solved with a minimizing algorithm • Being able to define the golden ratio and understand why it makes one-dimensional optimization efficient NM – Berlin Chen 2 Chapter Objectives (2 / 2) • Locating the optimum of a single-variable <b>function</b> with <b>the</b> golden-section search • Locating the optimum of a single-variable function with parabolic interpolation • Knowing how <b>to</b> <b>apply</b> <b>the</b> fminbnd <b>function</b> <b>to</b> determine <b>the</b> minimum of a one-dimensional function • Being able to develop MATLAB contours and surface plots <b>to</b> visualize two-dimensional <b>functions</b> • Knowing how <b>to</b> <b>apply</b> <b>the</b> fminsearch <b>function</b> <b>to</b> determine <b>the</b> minimum of a multidimensional functio...|$|R
