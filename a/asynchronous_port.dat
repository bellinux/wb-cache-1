5|32|Public
50|$|DECserver 500/550The DECserver 500 series server was an Ethernet Communications Server for Ethernet Local Area Networks (LANs), {{configurable}} {{to provide}} 128 EIA-423-A or 64 RS-232 <b>asynchronous</b> <b>port</b> connections to DEC asynchronous terminals. Both RS-232, via the 8 port CXY08 Q-Bus communication option card, and EIA-423-A, via the 16 port CXA16 communication option card and EIA-422 16 port CXB16 communication option card could be mixed together in any combination {{from two to}} eight cards in one server. The DECserver 510 and 550 would also support CXM04 IBM 3270 Terminal option cards, but on VMS only. The DECserver 500 series server provided a convenient method to connect logically up to 128 Digital asynchronous terminals {{to one or more}} service nodes (hosts) on an Ethernet. The DECserver 500 series server also allowed for ULTRIX host-initiated connections to asynchronous printers. The DECserver 500 series server implemented the LAT protocol for communication with service nodes that implemented this protocol on the same Ethernet. The 500 series differed from other DECservers in that the configuration was not stored in nonvolatile storage locally on the server itself, but rather downline loaded from a file on a MOP host. Configuration changes which needed to remain permanently had to be changed locally on the DECserver and also updated on the MOP host using the OpenVMS Terminal Server Configurator utility (SYS$COMMON:DECSERVERDS5CFG on VMS or /usr/lib/dnet/tsc on Ultrix) so that it would return the next reboot. The 500 and 550 models are based on the PDP-11/53 chipset with 512kb or 1.5mb of on-board ram and can be reverted to a full PDP-11/53 system with a PROM swap and console port re-wire.|$|E
40|$|In {{this paper}} we propose a method to {{generate}} pausible clock based GALS wrapper circuits from the synchronous moduleâ€™s Verilog specification code automatically. We first parse the input module specification and produce wrapper circuit components based on the specification of entered synchronous module. Existing methods for generation of the wrapper circuit waste the die size because they instantiate one <b>asynchronous</b> <b>port</b> controller for each data vector. In our improved method, we reduced the number of <b>asynchronous</b> <b>port</b> controllers to simultaneous data communication links. This method will be suitable for stream based communication systems. In order to validate the proposed algorithm, we employed the wrapper circuit in Viterbi error detection and correction circuit. The results show that our improved method will reduce the area of the wrapper circuits in contrast to the previous suggested implementations...|$|E
40|$|Locally generated, arbitrated clocks for GALS SoCs [1] {{face the}} risk of {{synchronization}} failures if clock delays are not accounted for. The problem is analyzed based on clock delays, cycle times, {{and complexity of the}} <b>asynchronous</b> <b>port</b> controllers. A number of methods are presented. In some cases, it is sufficient to extract all the delays and verify whether the system is susceptible to metastability. In other cases, when high data bandwidth is not required, asynchronous synchronizers or matched-delay asynchronous ports may be employed. Arbitrated clocks may be traded off for locally delayed input and output ports, facilitating high data rates. The latter circuits have been simulated, to verify their performance. 1...|$|E
40|$|Control {{intensive}} ICs pose {{a significant}} {{challenge to the}} users of formal methods in designing hardware. These ICs have to support {{a wide variety of}} requirements including synchronous and asynchronous operations, polling and interrupt-driven modes of operation, multiple concurrent threads of execution, non-trivial computational requirements, and programmability. In this paper, we illustrate the use of formal methods in the design of a control intensive IC called the "Intel 8251 " Universal Synchronous/Asynchronous Receiver/Transmitter (USART), using our hardware description language `hopCP'. A feature of hopCP is that it supports communication via <b>asynchronous</b> <b>ports</b> in addition to synchronous message passing. <b>Asynchronous</b> <b>ports</b> are distributed shared variables writable by exactly one process. We show the usefulness of this combination of communication constructs. We outline algorithms to determine safe usages of <b>asynchronous</b> <b>ports,</b> and also to discover other static properties of the s [...] ...|$|R
50|$|In another {{strategic}} move, NetSys {{decided in}} 2001 to supply commercial {{off the shelf}} (COTS) hardware for its system solutions - Cisco Systems for synchronous connections and Wide Area Network interfaces, 3Com for Local Area Network connections, Digi for <b>asynchronous</b> <b>ports,</b> Hewlett-Packard and Dell for server hardware are given preference when proposing new deals.|$|R
50|$|In 1993 Merit started {{what would}} become an eight-year phase out of its aging PCP and SCP technology. By 1998 the only PCPs still in service were {{supporting}} Wayne State University's MTS mainframe host. During their remarkably long twenty-year life cycle the number of PCPs and SCPs in service reached a high of roughly 290 in 1991, supporting {{a total of about}} 13,000 <b>asynchronous</b> <b>ports</b> and numerous LAN and WAN gateways.|$|R
40|$|Abstract: Locally generated, arbitrated clocks for GALS SoCs [1] {{face the}} risk of {{synchronization}} failures if clock delays are not accounted for. The problem is analyzed based on clock delays, cycle times, {{and complexity of the}} <b>asynchronous</b> <b>port</b> controllers. A number of methods are presented. In some cases, it is sufficient to extract all the delays and verify whether the system is susceptible to metastability. In other cases, when high data bandwidth is not required, asynchronous synchronizers or matched-delay asynchronous ports may be employed. Arbitrated clocks may be traded off for locally delayed input and output ports, facilitating high data rates. The latter circuits have been simulated, to verify their performance. Index Terms: Globally Asynchronous Locally Synchronous, clocks, synchronization failures. 1...|$|E
40|$|Despite the availability, {{inherent}} parallelism, {{and potential}} fault tolerance of networked workstations and microcomputers, most programmers do not write distributed code. Those that do are often {{overwhelmed by the}} asynchrony, concurrency, and tricky failure behaviour inherent in such systems. In this thesis, we describe the design and implementation of a new programming language called Distributed ML. Distributed ML provides a programming construct called a port group that hides the sources of complexity listed above and can be implemented efficiently. Port groups are intermachine multicast channels which provide membership and failure information to application programmers. Although inherently <b>asynchronous,</b> <b>port</b> groups guarantee the delivery of data sent through them and can order such data in several different ways, thereby providing many of the assurances of synchronous communication. Port groups are general-purpose communication abstractions {{that can be used}} to transfer information between machines, between processes on the same machine, and between threads within the same process. In this thesis, we demonstrate that efficient distributed programs-even highly available and fault-tolerant distributed programs-can be quickly developed, easily reasoned about, and properly coded in a well-designed high level programming language. First, we provide an implementation and description of port groups in the context of the Concurrent ML concurrent programming language, which is a superset of the Standard ML general-purpose programming language. Second, we introduce a formal theory for relating the membership and ordering properties of port groups. Finally, we argue that our implementation matches the formal specification...|$|E
50|$|It could {{function}} on a {{wide variety}} of different link layers, including Ethernet, X.25, HDLC, Bisync, and <b>asynchronous</b> serial <b>ports.</b>|$|R
50|$|The first network {{connections}} were host to host interactive connections {{which allowed}} person to remote computer or local computer to remote computer interactions. To this, terminal to host connections, batch connections (remote job submission, remote printing, batch file transfer), and interactive file copy were added. And, {{in addition to}} connecting to host computers over custom hardware interfaces, the ability to connect to hosts or other networks over groups of <b>asynchronous</b> <b>ports</b> and via X.25 were added.|$|R
5000|$|Communication: USB port (using the Kermit or XModem protocols), IrDA (infrared), 4-pin <b>asynchronous</b> serial <b>port</b> (not RS-232 voltage levels) using {{a serial}} cable with a 4-pin mini-USB connector.|$|R
50|$|The <b>asynchronous</b> serial <b>port</b> {{is not a}} true RS-232 port as it uses {{different}} voltage {{levels and}} a non-standard connector. An external converter/adapter is required to interface with RS-232 equipment.|$|R
40|$|International audienceSynchronization using {{flip-flop}} chains {{imposes a}} latency {{of a few}} clock cycles when transferring data and control signals between clock domains. We propose a design scheme that avoids this latency by performing synchronization as part of state/data computations while guaranteeing that metastability is contained and its effects tolerated (with an acceptable failure probability). We present a theoretical framework for modeling synchronous state machines {{in the presence of}} metastability and use it to prove properties that guarantee some form of reliability. Specifically, we show that the inevitable state/data corruption resulting from propagating metastable states can be confined to a subset of computations. Applications that can tolerate certain failures can exploit this property to leverage low-latency and quasi-reliable operation simultaneously. We demonstrate the approach by designing a Network-on-Chip router with zero-latency <b>asynchronous</b> <b>ports</b> and show via simulation that it outperforms a variant with two flip-flop synchronizers at a negligible cost in packet transfer reliability...|$|R
40|$|GALS SoCs may be {{prone to}} {{synchronization}} failures if the delay of their locally-generated clock tree is not considered. This paper presents an in-depth analysis {{of the problem and}} proposes a novel solution. The problem is analyzed considering the magnitude of clock tree delays, the cycle times of the GALS module and the complexity of the asynchronous interface controllers using a timed STG approach. In some cases, the problem can be solved by extracting all the delays and verifying whether the system is susceptible to metastability. In other cases, when high data bandwidth is not required, matched-delay <b>asynchronous</b> <b>ports</b> may be employed. A novel architecture for synchronizing inter-modular communications in GALS, based on locally delayed latching (LDL), is described. LDL synchronization does not require pausable clocking, is insensitive to clock tree delays, and supports high data rates. It replaces complex global timing constraints with simpler localized ones. Three different LDL ports are presented. The risk of metastability in the synchronizer is analyzed in a technology-independent manner. 1...|$|R
50|$|BLAST (BLocked ASynchronous Transmission), like XMODEM, is a {{communications}} protocol designed for file transfer over <b>asynchronous</b> communication <b>ports</b> and dial-up modems that achieved {{a significant degree}} of popularity during the 1980s. Reflecting {{its status as a}} de facto standard for such transfers, BLAST, along with XMODEM, was briefly under official consideration by ANSI in the mid-80s as part of that organization's ultimately futile attempt to establish a single de jure standard.|$|R
50|$|One major {{difference}} between Mach and Spring was the IPC system. In Mach, the system was arranged {{as a set of}} one-way <b>asynchronous</b> pipes (<b>ports)</b> between programs, a concept derived from Unix pipes. In programming, however, the most common method of communications is the procedure call, or call/return, which Mach did not support directly. Call/return semantics could only be supported via additional code in higher-level libraries based on the underlying ports mechanism, thereby adding complexity.|$|R
40|$|Abstractâ€”Globally a{{synchronous}}, locally synchronous (GALS) systems-on-chip (SoCs) may be {{prone to}} synchronization failures if the delay of their locally-generated clock tree is not considered. This paper presents an in-depth analysis {{of the problem and}} proposes a novel solution. The problem is analyzed considering the magnitude of clock tree delays, the cycle times of the GALS module, and the complexity of the asynchronous interface controllers using a timed signal transition graph (STG) approach. In some cases, the problem can be solved by extracting all the delays and verifying whether the system is susceptible to metastability. In other cases, when high data bandwidth is not required, matched-delay <b>asynchronous</b> <b>ports</b> may be employed. A novel architecture for synchronizing inter-modular communications in GALS, based on locally delayed latching (LDL), is described. LDL synchronization does not require pausable clocking, is insensitive to clock tree delays, and supports high data rates. It replaces complex global timing constraints with simpler localized ones. Three different LDL ports are presented. The risk of metastability in the synchronizer is analyzed in a technology-independent manner. Index Termsâ€”Asynchronous circuits, globally asynchronous, locally synchronous (GALS), synchronization, system-on-chip (SoC) ...|$|R
5000|$|The eBUS 2-wire {{interface}} is an <b>asynchronous</b> serial <b>port</b> with active-low voltage that exchanges 8-bit bytes with {{start and}} (single) stop bits (no parity bit), at a symbol rate of 2400 baud, {{and can be}} implemented with a standard UART plus a voltage converter. It differs from the RS-232 interface, from which it is derived, in that the voltage levels were chosen to allow the bus also to supply power to bus participants, who can use a voltage stabilizer to derive an internal 5 V supply: ...|$|R
40|$|A multitasking, data {{acquisition}} system was written to simultaneously collect meteorological radar and telemetry data from two sources. This system {{is based on the}} personal computer architecture. Data is collected via two <b>asynchronous</b> serial <b>ports</b> and is deposited to disk. The system is written in both the C programming language and assembler. It consists of three parts: a multitasking kernel for data collection, a shell with pull down windows as user interface, and a graphics processor for editing data and creating coded messages. An explanation of both system principles and program structure is presented...|$|R
40|$|Microprocessor-based {{interface}} simplifies interconnection of {{peripheral device}} with common memory of network of minicomputers. Interface consists of microprocessor, bidirectional port that connects to common memory, bidirectional port that connects to user-selected peripheral, and <b>asynchronous</b> serial communications <b>port.</b> Programable interface is based around 6800 microprocessor. It is assembled from 90 integrated circuits...|$|R
40|$|In {{this paper}} we propose an {{asynchronous}} wrapper with new <b>asynchronous</b> communication <b>port</b> controllers and reliable clock generation scheme for locally synchronous modules. This is achieved by utilizing clock gating idea within GALS wrappers which makes the use of reliable and robust off-chip clock generator possible for locally synchronous modules. In addition to clock robustness, the clock generator part becomes totally synchronous. To validate the proposed solution, we employed the wrapper circuit in Viterbi error detection and correction circuit. The synthesis results show that our GALS approach gains 44 %~ 48 % performance improvement in contrast to pausible clock GALS wrappers. 1...|$|R
50|$|The C&DH system {{consists}} of a custom-modified MIP405-3X single board computer which included (i) 133 MHz PowerPC processor; (ii) 128 MB ECC; (iii) 4 RS-232 asynchronous serial ports; (iv) 1 Ethernet Port; (v) a PC/104 bus; (vi) a PC/104+ bus; and, (vi) a 202-D384-X Disc on Chip providing 384 MB of secondary storage. The computer board is supported by an ESCC-104 Synchronous Serial Card with 2 synchronous serial ports, and an EMM-8M-XT Serial Expansion Card with 8 RS-232/422/485 <b>asynchronous</b> serial <b>ports</b> and 8 digital I/O channels. A modified I0485 data acquisition board provides 22 analog telemetry channels and 32 digital I/O channels.|$|R
50|$|One of the 90x's biggest {{advantages}} over {{the competition was}} its <b>asynchronous</b> serial <b>port</b> controller (the ITS or Intelligent Terminal Server) based on a 16-bit bit-slice processor. The ITS interfaced to 16 serial ports, and it could run them at very high speeds, using DMA to feed from daisy-chained output data blocks. A machine could have many ITSs installed, each one with its own I/O processor. Other machines at the time (including the 11/780) required CPU intervention every few bytes for interactive users, which added significantly to the system component of the CPU load. As a result, the 90x scored very well on benchmarks with a realistic amount of serial I/O.|$|R
50|$|The first DECtalk {{units were}} seen in 1984. They were {{standalone}} units that connected to any device with an <b>asynchronous</b> serial <b>port.</b> These units were also able to connect to the telephone system by having two telephone jacks. One connected to a phone line, the other to a telephone. The DECtalk units could recognize and generate any telephone touch tone. With that capability the units {{could be used to}} automate various telephone-related tasks by handling both incoming and outgoing calls. This included acting as an interface to an email system and the capability to function as an alerting system by utilizing the ability to place calls and interact via touch tones with the person answering the phone.|$|R
5000|$|The PDT series were desktop systems {{marketed as}} [...] "smart {{terminal}}s". The /110 and /130 were {{housed in a}} VT100 terminal enclosure. The /150 was housed in a table-top unit which included two 8-inch floppy drives, three <b>asynchronous</b> serial <b>ports,</b> one printer port, one modem port and one synchronous serial port and required an external terminal. All three employed the same chipset as used on the LSI-11/03 and LSI-11/2 in four [...] "microm"s. There is an option which combines two of the microms into one dual carrier, freeing one socket for an EIS/FIS chip. The /150 in combination with a VT105 terminal was also sold as MiniMINC, a budget version of the MINC-11.|$|R
50|$|The {{form and}} size of the {{calculator}} shell is identical to the 49g+ series, but four AAA batteries are used as opposed to three in previous models. In addition to all the features of the 49g+, the 50g also includes the full equation library found in the HP 48G series (also available for the 49g+ with firmware 2.06 and above), as well as the periodic table library originally available as a plug-in card for the 48S series, as of firmware 2.15/2.16 (the latest, as of 2015), and has an 3.3V TTL-level <b>asynchronous</b> serial <b>port</b> in addition to IrDA and USB ports of the 49g+. Like the 49g+, the range of the infrared port has been limited to about 10 cm (4 inches).|$|R
40|$|This paper {{described}} the principle, application {{and implementation of}} serial communication between PC and a Digital Signal Processor (DSP). The TMS 320 F 28031 which {{is a type of}} DSPs made by Texas Instruments (TI) is used in this implementation. This DSP processor has serial communication interface (SCI) module for serial communication. The SCI is a two âˆ’ wire <b>asynchronous</b> serial <b>port,</b> commonly known as a UART (Universal Asynchronous Receiver/Transmitter). The standard of Modbus protocol is implemented for this serial communication. The Modbus protocol provides an industrial standard method that Modbus devices use for parsing messages. PC (Personal Computer) can read/write one or more registers of DSP processor using Modbus communication. This paper highlights the basics of Modbus protocol and also explains the software detail of Modbus implementation...|$|R
40|$|A {{computer-based}} Data Acquisition and Control System (DACS) {{capable of}} monitoring the temperature, pH and gas production {{as well as}} maintaining a pre-determined temperature profile and feeding regime in anaerobic reactors was developed and tested. The hardware for the DACS was a series-based system consisting of a host processor which drives three modules-a digital input mode (MODULE 255), an analog input node (MODULE 254) and a digital output node (MODULE 253) -through a Serial Communication Adaptor connected to the serial <b>asynchronous</b> communication <b>port</b> of the host processor. The system was tested using two sets of laboratory model reactors maintained under two diurnally cyclic temperature ranges of 20 - 40 &# 176;C and 15 - 25 &# 176;C. Hydraulic retention time was varied from 10 to 25 days using the control system. The temperature and pH of the reactors were monitored at 30 sec interval. Results showed that the system was able to maintain the desired temperature to within &# 177; 2. 5 &# 176;C for the 20 - 40 &# 176;C and &# 177; 1. 0 &# 176;C for the 15 - 25 &# 176;C cycle. It was also able to maintain the desired feeding regime and to monitor and record the temperature, pH and gas production at the desired interval of time...|$|R
40|$|Ethernet is a Branching Broadcast Communication {{system for}} {{carrying}} digital data [packets among locally distributed computing stations. The packet transport mechanism provided by Ethernet {{has been used}} to build systems which can be viewed as either local computer networks or loosely coupled multiprocessors. An Ethernetâ€™s shared communication facility, its Ether, is a passive broadcast medium with no central control. Coordination of access to the Ether for packet broadcasts is distributed among the contending transmitting stations using controlled statistical arbitration. Switching of packets to their destinations on the Ether is distributed among the receiving stations using packet address recognition. According to the Complex demand of communication between computer and variety of components which monitored by data links for UAV ground control station, this paper develops a new type of gateway for data inverting from serial port to Ethernet based on Embedded system. In the hardware design ARM 7 microprocessor, LPC 2388, from NXP is used and its parallel port is expanded eight <b>asynchronous</b> serial <b>ports</b> by SC 28 L 198, aiming at communication for serial ports data. In this paper hardware and software design of gateway are described in detailed, a way employ Real-Time library (RL-ARM) to achieve Ethernet communication is depicted and data flow is analyzed last. This method not only resolves practical project but also provides a low-cost resolution for traditional serial devices connecting Internet through a standard TCP/IP protocol...|$|R
5000|$|Another problem {{faced by}} early [...] "packeteers" [...] {{was the issue}} of {{asynchronous}} versus synchronous data transfer. At the time, most personal computers had <b>asynchronous</b> RS-232 serial <b>ports</b> for data communications between the computer and devices such as modems. The RS-232 standard specifies an asynchronous, start-stop mode of data transmission where data is sent in groups (characters) of 7 or 8 bits. Unfortunately, the simple AFSK modems typically used to provide no timing signal to indicate {{the start of a}} packet frame. That led to the need for a mechanism to enable the receiver to know when to start assembling each packet frame. The method used is called asynchronous framing. The receiver looks for the [...] "frame boundary octet," [...] then begins decoding the packet data that follows it. Another frame boundary octet marks the end of the packet frame.|$|R
40|$|International audienceThe new {{open-source}} quadrotor platform called X 4 -MaG {{presented here}} {{was developed for}} aca-demic and research applications. X 4 -MaG is a small, low-cost open quadrotor of only 307 -grammeswhich oers two levels of controllers providing a manual mode and an automatic mode thanks to apowerful Linux-based controller embedded onboard. The controllers and estimators are highly cus-tomizable and are designed in the Matlab/Simulink environment and directly implemented onboardthe tiny Linux-based autopilot board using a custom made toolbox (RT-MaG toolbox). The new open-source Matlab/Simulink toolbox called RT-MaG toolbox (see [1]) generates reliablestandalone robotic applications running on real-time embedded Linux targets such as tiny ComputersOn Module (e. g., Gumstix boards). This toolbox gives direct access from Simulink to the maincommunication drivers classically used in robotics: network interfaces (via UDP), <b>asynchronous</b> andsynchronous serial <b>port</b> interfaces (RS 232, SPI, I 2 C), Pulse-width-modulation (PWM), etc. [1] A. Manecy, N. Marchand, S. Viollet, Rt-mag: An open-source simulink toolbox for linux-based real-time robotic applications, in: Robotics and Biomimetics (ROBIO), 2014 IEEE International Confer-ence on, 2014, pp. 173 { 180. doi: 10. 1109 /ROBIO. 2014. 7090326...|$|R
40|$|This paper {{presents}} the results of the optical packet switched network (OPSnet) project, which investigated the design of an asynchronous optical packet switch suitable for the core of an optical transport network (OTN). The requirements for the switch were to control and route variable-length packets transmitted at bit rates beyond 100 Gbit/s. The subsystems and techniques used are analyzed and presented. Fast header encoding and passive decoding is based on the differential phase-shift keying (DPSK) method. The dual-pump four-wave mixing (d-p FWM) wavelength-conversion technique, in combination with an arrayed waveguide grating (AWG), is utilized for packet switching. An advanced and fully controllable mechanism for the packet-switch control is presented, which is implemented on field programmable gate array (FPGA) technology. The control wavelength is generated using a tunable laser, the actual wavelength and new header values are provided utilizing fast header recognition and look-up tables. The integration of the subsystems is discussed, and the results of a four-output <b>port</b> <b>asynchronous</b> packet-switch demonstrator operating at 40 Gbit/s are presented. Finally, the switch limitations are examined and design issues are discussed. Â© 2005 IEEE...|$|R
40|$|A {{vacuum control}} {{system has been}} {{developed}} for use Ethernet Multi Serial Device Severs (EMSDS) on the Pohang Accelerator Laboratory (PAL) storage ring. There are 124 Sputter ion vacuum pumps at the storage ring. It {{was a very important}} problem to solve the problem how to control such a large number of vacuum pumps distributed around the ring. The cost of interfaces is also a large problem. After discussions, we decided to develop a serial to Ethernet interface device sever that will be mounted in the control System Rack. It has a 32 -bits microprocessor; Embedded Linux, 16 ports RS 485 (or RS 232) Slave interface, one channel 10 / 100 BaseT Ethernet Host port, one channel UART Host port, and 8 Mbytes large Memory buffer. Evacuation of gases in the storage ring is done by control the current in the titanium filaments in the vacuum pump. These vacuum pumps are connected to Ion-Pump Serial Controllers, which chop the AC current so as to control the current in the pumps. The EMSDS connect either 100 BaseTx or 10 BaseT Ethernet networks to <b>asynchronous</b> serial <b>ports</b> for communication with serial device. It can simultaneously control up to 12 Ion-Pump serial controllers. 12 EMSDS are connected to a personal computer (PC) through the network. The PC can automatically control the EMSDS by sending a set of commands through the TCP/IP network. Upon receiving a command from a PC running under Windows 2000 through the network, the EMSDS communicate through the slave serial interface ports to Ion-Pump Controller. We added some software components on the top of EPICS (Experimental Physics and Industrial Control Sys-tem) toolkit. The design of the vacuum-pump control system is discusse...|$|R
40|$|Projecte final de carrera fet en col. laboraciÃ³ amb l'Institut de RobÃ²tica i InformÃ tica IndustrialThe {{concept of}} {{household}} robotic servants {{has been in}} our mind for ages, and domestic appliances are far more robotised {{than they used to}} be. At present, manufacturers are starting to introduce small, household human-interactive robots to the market. Any human-interactive device has safety, endurability and simplicity constraints, which are especially strict when it comes to robots. Indeed, we are still far from a multi-purpose intelligent household robot, but human-interactive robots and arti cial intelligence research has evolved considerably, demonstration prototypes are a proof of what can be done. This project contributes to the research in humaninteractive robots, as the robotic arm and hand used are specially designed for human-interactive applications. The present study provides a distributed framework for an arm and a hand devices based on the robotics YARP protocol using the WAMTM arm and the BarrettHandTM as well as a basic modular client application complemented with vision. Firstly, two device drivers and a network interface are designed and implemented to control the WAMTM arm and the BarrettHandTM from the network. The drivers allow abstract access to each device, providing three ports: command requests port, state requests <b>port</b> and <b>asynchronous</b> replies <b>port.</b> Secondly, each driver is then encapsulated by YARP devices publishing realtime monitoring feedback and motion control to the network through what is called a Network wrapper. In particular, the network wrapper for the WAMTM arm and BarrettHandTM provides a state port, command port, Remote Procedure Call (RPC) <b>port</b> and an <b>asynchronous</b> noti cations <b>port.</b> The state port provides the WAMTM position and orientation feedback at 50 Hz, which represents a maximum blindness of one centimetre. This rst part of the project sets the foundations of a distributed, complete robot, whose design enables processing and power payload to be shared by di erent workstations. Moreover, users are able to work with the robot remotely over Ethernet and Wireless through a clear, understandable local interface within YARP. In addition to the distributed robotic framework provided, a client software framework with vision is also supplied. The client framework establishes a general software shell for further development and is organized in the basic, separate robotic branches: control, vision and plani cation. The vision module supports distributed image grabbing on mobile robotics, and shared-memory for xed, local vision. In order to incorporate environment interaction and robot autonomy with the planner, hand-eye transformation matrices have been obtained to perform object grasping and manipulation. The image processing is based on OpenCV libraries and provides object recognition with Scale Invariant Feature Transform (SIFT) features matching, Hough transform and polygon approximation algorithms. Grasping and path planning use pre-de ned grasps which take into account the size, shape and orientation of the target objects. The proof-of-concept applications feature a household robotic arm with the ability to tidy randomly distributed common kitchen objects to speci ed locations, with robot real-time monitoring and basic control. The device modularity introduced in this project philosophy of decoupling communication, device local access and the components, was successful. Thanks to the abstract access and decoupling, the demonstration applications provided were easily deployed to test the arm's performance and its remote control and monitorization. Moreover, both resultant frameworks are arm-independent and the design is currently being adopted by other projects' devices within the IRI...|$|R
40|$|Research aims: Evaluate {{the role}} and {{educational}} value of web-based technology for the delivery and assessment of a post-graduate nuclear medicine programme. Develop a blended learning approach and <b>asynchronous</b> peer sup- <b>port</b> methods for students, promoting critical evaluation and cognitive thinking skills. Methods: A scoping team was created to evaluate traditional learning and assessment approaches utilised within the nuclear medicine programme. Consultation with professional bodies and industry representatives {{was included in the}} evaluation. Strategic planning and student representation identified core web-based learn- ing resources available to support educational delivery, communication and assessments. Results: Initial evaluations indicate a shift in delivery methodologies, with greater focus on clinical scenarios and experiential/enquiry based learning. New delivery models demonstrate the value of relating learning to â€˜realâ€™ clinical situations. Student feedback indicated a willingness to interact with an asynchronous learning environment and engage with web-based resources. Web- based assessments also offers advantages for students who are places a large geographical distance from the academic institute. Conclusion: Mapping students learning outcomes has become more intrinsically linked with professional roles and responsibilities. The use of web-based resources has enabled academic staff to further develop learning and assessment approaches, enhancing students application of knowledge and practice skills to clinical practice...|$|R
40|$|Differential Global Positioning System (DGPS) is {{emerging}} as a crucial technology within the resource and communications sector, allowing {{for the development of}} autonomous control in hazardous environments. This thesis is concerned with the design, construction and evaluation of a low cost and high performance DGPS which can be embedded into robotic systems. The principle behind this thesis is to prove that a DGPS can be designed to meet the same performance of an industrial grade system, while using low end components. The thesis is composed of five major stages: research, design, construction, evaluation and documentation. This thesis is to provide documentation of the development and evaluation of the DGPS. The final product is a fully documented and highly functional DGPS system, for the Murdoch University School of Engineering & Energy to integrate into future projects. Standard GPS systems are based on a single Global Navigation Satellite System (GNSS) signal receiver to process position co-ordinates and relevant data. These GNSS signals containing pseudoranges, travel through the atmosphere and are susceptible to distortion, which is the predominate cause of error in GPS positioning. The atmospheric distortion and hence positioning error can be significantly reduced through the use of DGPS as it assumes that the signals have travelled the same atmospheric path and hence induced with the same distortion. By adopting this concept, highly accurate relative positioning between receivers can be produced through a series of calculations. DGPS can be extended further to produce corrected positioning based on fixed receiver locations which can compare the error of the fixed position to those received, and then apply the same error to other mobile receiver positions. Currently a large scale network of DGPS base stations exists and can be used for correcting commercial and industrial grade systems, however these can be expensive. The expense of these systems is largely dependent on the accuracy and functionality that the system can produce, and therefore highlights the need for this thesis as a means of a cost effective solution. The prototype produced in this thesis was the product of thorough engineering design and evaluation of the three major components; communications, hardware and software. Each of these components had sub-objectives allow the main objective of a low cost, high performance system to be achieved. Evaluation of proposed communication wireless transceivers was undertaken to find characteristics of reliability, suitable bandwidth and a sufficient operating distance. The wireless communications is used for the transmission of the base station positioning data to the mobile station for processing. Comparative testing methods of the APPCON APC 200 found it to be a suitable alternative to the University proposed HopeRF HM-TR transceivers. The APPCON provides reliable data transmission, with error correction capabilities while exceeding an operational distances of 850 meters. Processing the incoming simultaneous stream of pseudoranges from both GPS receiver modules requires a minimum of two hardware universal <b>asynchronous</b> receiver/transmitter (UART) <b>ports,</b> while meeting the system memory and processing requirements. The initial open-source Arduino Duemilanove microcontroller chosen for the project was deemed to be unsuitable after evaluation of two software based UART. The Arduino Mega, having met these requirements, has been used as the prototype microcontroller as it provides four hardware UART ports and largely redundant memory and processing capabilities. Arduino is based on the open-source software environment called â€˜wiringâ€™ which is a derivative of the C++ software language. The strong online support community for the Arduino has developed an expansive range of open-source software libraries which can be adapted to user projects. Implementing these software libraries, developed as community based projects, means that advanced capabilities and extensively tested code is integrated into the system software code. The outcome of combining these components has completed the sub objectives of this project and has resulted in a high functioning, reliable, accurate and low cost system. Thorough evaluation of the DGPS prototype has yielded results that substantially exceed the manufacturer rated specifications and prove the benefits of DGPS relative positioning. The average accuracy of the system in an open environment has achieved 0. 216 meter averaged distance and an operation range of 882 meters. Testing of the system has been undertaken in a number of environments to evaluate the accuracy and reliability of the system. The finalized hardware value of the prototype was 467. 28, developing an accurate positioning system at a budget price...|$|R
