342|36|Public
5|$|Kaspersky's {{interest}} in IT security began in 1989, when his PC was infected by the Cascade virus, {{while working for}} the Ministry of Defense. He studied how the virus worked and developed a program to remove it. Afterwards he continually found new viruses and developed software to remove them, as a hobby. Early on Kaspersky's <b>anti-virus</b> <b>software</b> had just 40 virus definitions and was distributed mostly to friends.|$|E
25|$|The {{functionality}} {{of a few}} {{computer programs}} can be hampered by active <b>anti-virus</b> <b>software.</b> For example, TrueCrypt, a disk encryption program, states on its troubleshooting page that anti-virus programs can conflict with TrueCrypt and cause it to malfunction or operate very slowly. <b>Anti-virus</b> <b>software</b> can impair the performance and stability of games running in the Steam platform.|$|E
25|$|Many {{third-party}} <b>anti-virus</b> <b>software</b> vendors {{have released}} detection updates to their products and {{claim to be}} able to remove the worm.|$|E
50|$|Also, Kaspersky, {{like the}} {{majority}} of its competitors, is incompatible with many other <b>anti-virus</b> and anti-spyware <b>software.</b>|$|R
50|$|Active Virus Shield {{includes}} numerous features {{found in}} Kaspersky <b>Anti-Virus.</b> The <b>software's</b> main feature is malware scanning, which uses Kaspersky's underlying engine and detects {{a variety of}} malware such as viruses, spyware, and even joke programs. It also offers real-time file and e-mail scanning and protection.|$|R
50|$|<b>Anti-virus</b> and {{anti-spyware}} <b>software</b> are helpful, {{but must}} be kept up-to-date with new pattern files at least every few days. The use of a firewall is also recommended.|$|R
25|$|Antivirus or <b>anti-virus</b> <b>software</b> (often {{abbreviated}} as AV), sometimes {{known as}} anti-malware software, is computer software used to prevent, detect and remove malicious software.|$|E
25|$|Kaspersky {{has passed}} most of Virus Bulletin {{comparative}} tests since August 2003 (failing 8 of 54 tests). In 2005, according to PC World magazine, Kaspersky <b>anti-virus</b> <b>software</b> provided the fastest updates for new virus and security threats in the industry.|$|E
25|$|<b>Anti-virus</b> <b>{{software}}</b> makers {{responded to}} the threat of FakeSysdef by adding checks for it in their products. Simple removal of the software enabled by this is sometimes not enough to reverse the damage to configuration files that FakeSysdef was known to edit.|$|E
50|$|A {{computer}} {{that does not}} have a reasonably up-to-date webcam <b>software</b> or any <b>anti-virus</b> (or firewall) <b>software</b> installed and operational may be at increased risk for Camfecting. Softcams may nominally increase this risk, if not maintained or configured properly.|$|R
25|$|Such {{programs}} {{inspect the}} contents of the Windows registry, operating system files, and installed programs, and remove files and entries which match a list of known spyware. Real-time protection from spyware works identically to real-time <b>anti-virus</b> protection: the <b>software</b> scans disk files at download time, and blocks the activity of components known to represent spyware.|$|R
40|$|Recent {{investigations}} {{have determined that}} many Android applications in both official and non-official online markets expose details of the user 2 ̆ 7 s mobile phone without user consent. In this paper, {{for the first time}} in the research literature, we provide a full investigation of why such applications leak, how they leak and where the data is leaked to. In order to achieve this, we employ a combination of static and dynamic analysis based on examination of Java classes and application behaviour for a data set of 123 samples, all pre-determined as being free from malicious software. Despite the fact that <b>anti-virus</b> vendor <b>software</b> did not flag any of these samples as malware, approximately 10...|$|R
25|$|A {{proof of}} concept virus has used the Graphics Processing Unit (GPU) to avoid {{detection}} from <b>anti-virus</b> <b>software.</b> The potential success of this involves bypassing the CPU {{in order to make}} it much harder for security researchers to analyse the inner workings of such malware.|$|E
25|$|If a file {{has been}} {{infected}} {{by a computer}} virus, <b>anti-virus</b> <b>software</b> will attempt to remove the virus code from the file during disinfection, {{but it is not}} always able to restore the file to its undamaged state. In such circumstances, damaged files can only be restored from existing backups or shadow copies (this is also true for ransomware); installed software that is damaged requires re-installation (however, see System File Checker).|$|E
25|$|Security and Maintenance (formerly Action Center {{and before}} that, Security Center) is a {{monitoring}} {{component of the}} Windows NT family of operating system. It monitors the security and maintenance status of the computer. Its monitoring criteria includes optimal operation of personal firewalls, <b>anti-virus</b> <b>software</b> and anti-spyware software, {{as well as the}} working status of Network Access Protection, Windows Update, User Account Control, Windows Error Reporting and Backup and Restore. It notifies the user of any problem with the monitored criteria, e.g. when an antivirus program is not up-to-date or is offline.|$|E
2500|$|A related amendment, {{making up}} article 14 ter A, {{mandated}} that Internet users should [...] "secure" [...] their Internet connection {{so that it}} is not used for transmitting copyrighted works illegally; Internet service providers are supposed to provide users with the suitable technology. This measure may be targeted at peer-to-peer users claiming that their WiFi connection was hijacked, but it may also result in forcing all users to install <b>anti-virus</b> and filtering <b>software</b> on their machines.|$|R
25|$|SuperFetch caches frequently-used {{applications}} and documents in memory, and {{keeps track of}} when commonly used applications are usually loaded, {{so that they can}} be pre-cached and it also prioritizes the programs currently used over background tasks. SuperFetch aims to negate the negative performance effect of having <b>anti-virus</b> or backup <b>software</b> run when the user is not at the computer. Superfetch is able to learn at what time of a given day an application is used and so it can be pre-cached.|$|R
50|$|An anti-keylogger (or anti-keystroke logger) {{is a type}} of {{software}} specifically designed for the detection of keystroke logger software; often, such software will also incorporate the ability to delete or at least immobilize hidden keystroke logger software on a computer. In comparison to most <b>anti-virus</b> or anti-spyware <b>software,</b> the primary difference is that an anti-keylogger does not make a distinction between a legitimate keystroke-logging program and an illegitimate keystroke-logging program (such as malware); all keystroke-logging programs are flagged and optionally removed, whether they appear to be legitimate keystroke-logging software or not.|$|R
25|$|Microsoft {{learned from}} discussions with {{customers}} {{that there was}} confusion as to whether users were taking appropriate steps to protect their systems, or if the steps they were taking were effective. From this research, Microsoft {{made the decision to}} include a visible control panel with Windows XP Service Pack 2 that would provide a consolidated view of the most important security features. Service Pack 2, released in August 2004, includes the first version of Windows Security Center (WSC). This version monitors Windows Update, Windows Firewall, and the availability of an anti-virus program. Third-party providers of personal firewall and <b>anti-virus</b> <b>software</b> packages were encouraged to use WSC API to register their products with WSC.|$|E
25|$|Chromebooks {{ship with}} Google Chrome OS, an {{operating}} system {{that uses the}} Linux kernel and the Google Chrome web-browser with an integrated media-player. Enabling developer mode allows the installation of Linux distributions on Chromebooks. Crouton is a script that allows the installation of Linux distributions from Chrome OS, and running both operating systems simultaneously. Some Chromebooks include SeaBIOS, which can be turned on to install and boot Linux distributions directly. With limited offline capability and a fast boot-time, Chromebooks are primarily designed for use while connected to the Internet. Instead of installing traditional applications such as word processing and instant messaging, users add web apps from the Chrome Web Store. Google claims that a multi-layer security architecture {{eliminates the need for}} <b>anti-virus</b> <b>software.</b>|$|E
2500|$|Antivirus {{software}} itself usually runs at {{the highly}} trusted kernel {{level of the}} operating system to allow it {{access to all the}} potential malicious process and files, creating a potential avenue of attack. The UK and US intelligence agencies, GCHQ and the National Security Agency (NSA), respectively, have been exploiting <b>anti-virus</b> <b>software</b> to spy on users. <b>Anti-virus</b> <b>software</b> has highly privileged and trusted access to the underlying operating system, which makes it a much more appealing target for remote attacks. Additionally <b>anti-virus</b> <b>software</b> is [...] "years behind security-conscious client-side applications like browsers or document readers", according to Joxean Koret, a researcher with Coseinc, a Singapore-based information security consultancy.|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedIn {{order to ensure}} the confidentially, integrity, and availability of networked resources operating on the Global Information Grid, the Department of Defense has incorporated a "Defense-in-Depth" posture. This posture includes the use of network security mechanisms and does not rely on a single defense for protection. Firewalls, Intrusion Detection Systems (IDS's), <b>Anti-Virus</b> (AV) <b>software,</b> and routers are such tools used. In recent years, computer security discussion groups have included IDS's {{as one of their}} most relevant issues. These systems help identify intruders that exploit vulnerabilities associated with operating systems, application software, and computing hardware. When IDS's are utilized on a host computer or network, there are two primary approaches to detecting and / or preventing attacks. Traditional IDS's, like most AV software, rely on known "signatures" to detect attacks. This thesis will focus on the secondary approach: Anomaly or "behavioral based" IDS's look for abnormal patterns of activity on a network to identify suspicious behavior. Major, United States Marine Corp...|$|R
40|$|An {{integrated}} {{modeling and}} simulation tool called Component-based System Modeler and Simulator (CoSMoS) is developed. It supports visual development of families of models that have well-defined logical specifications. The logical component-based models persist in relational databases and may be automatically translated into specific target simulation and markup programming languages. The underlying system-theoretic modeling framework of CoSMoS lends itself for the well-known discrete-time, continuous, and discrete-event modeling approaches. Currently, CoSMoS supports developing parallel DEVS-compliant models which can be executed using the DEVS-Suite simulator. The underlying process lifecycle of the CoSMoS enables systematic transitioning from visual model development and design of experiments to simulation execution and experimentation. Simulation data {{can be used for}} run-time animation and viewing of time-based trajectories or exported for post processing. This tool helps to simplify simulation-based system design, verification, and validation. The core capabilities of the CoSMoS are exemplified with a conceptual model of an <b>anti-virus</b> network <b>software</b> system...|$|R
5000|$|The macro viruses can, in some cases, {{interact}} between them. If two viruses are executed at {{the same}} time, both of them can modify the source code of each other.So, it results a new virus which can't be recognize by the <b>anti-viruses</b> <b>software.</b> But, the result is totally random : the macro virus can be more infectious or less infectious, it depends to {{what part of the}} virus has been changed.However, when the 'mating' is unintentional, the macro virus in result has more chances to be less infectious.Indeed, in order to replicate itself, it has to know the commands in the source code, but, if it's changed with a random scheme, the macro can't replicate itself.Nevertheless, it is possible to do such macros intentionally (it is different from polymorphic macros viruses which have to use another macro to change their contents) in order to increase the infectivity of the two viruses.In the example of the article, the macro virus Colors infected a document, but another infected the user's system before : the macro virus Concept.Both of these viruses use the command AutoOpen, so, at first, the macro virus Colors was detected but the command AutoOpen in it was the command of the macro virus Concept.Morever, when Concept duplicate itself, it is unencrypted, but the command in the virus Colors was encrypted (Colors encrypt its commands).So, the replicate of the macro virus Concept result of the hybridation of this macro virus (which infected the user's system first) and Colors.The [...] "hybrid" [...] could replicate itself only if AutoOpen wasn't executed, indeed this command comes from Concept, but the body of the hybrid is Colors, so that create some conflicts.This example shows the potential of mating macro viruses : if a couple of mating macro viruses is created, it will make more difficult to detect both of the macro virus (in hypothesis, there is only two which mate) by the virus-specificscanners and may reinforce the virility of the viruses.Fortunately, this type of macro virus is very rare (more than the polymorphic macro viruses, there may not exist one), indeed, create two (or more) which can interact with each other and not reduce the virlity (rather reinforce it) is complicated.|$|R
2500|$|Active <b>anti-virus</b> <b>software</b> can {{interfere}} with a firmware update process. [...] Any writeable firmware in the computer can be infected by malicious code. [...] This is a major concern, as an infected BIOS could require the actual BIOS chip to be replaced to ensure the malicious code is completely removed. [...] <b>Anti-virus</b> <b>software</b> is not effective at protecting firmware and the motherboard BIOS from infection. In 2014, security researchers discovered that USB devices contain writeable firmware which can be modified with malicious code (dubbed [...] "BadUSB"), which <b>anti-virus</b> <b>software</b> cannot detect or prevent. [...] The malicious code can run undetected on the computer and could even infect the operating system prior to it booting up.|$|E
2500|$|It is {{sometimes}} necessary to temporarily disable virus protection when installing major updates such as Windows Service Packs or updating graphics card drivers. Active antivirus protection may partially or completely prevent {{the installation of}} a major update. [...] <b>Anti-virus</b> <b>software</b> can cause problems during the installation of an operating system upgrade, e.g. when upgrading to a newer version of Windows [...] "in place" [...] — without erasing the previous version of Windows. [...] Microsoft recommends that <b>anti-virus</b> <b>software</b> be disabled to avoid conflicts with the upgrade installation process.|$|E
2500|$|Devices {{like the}} Huawei E220 HSDPA modem validly use this method to autoinstall drivers for the modem itself. However, {{plugging}} {{in a flash}} drive from an unknown source is an unwise move. [...] and similar tools have made U3 flash drive attacks trivial. Given the ease of writing script based attacks, <b>anti-virus</b> <b>software</b> may be ineffective in preventing data and password stealing.|$|E
40|$|In {{this paper}} we {{introduce}} {{the idea of}} model inference assisted fuzzing aimed to cost effectively improve software security. We experimented with several model inference techniques and applied fuzzing to the inferred models in order to generate robustness attacks. We proved our prototypes against real life <b>software,</b> namely <b>anti-virus</b> and archival <b>software</b> solutions. Several critical vulnerabilities were found in multiple file formats in multiple products. Based on the discovered vulnerabilities and the {{positive impact on the}} security we argue that our approach strikes a practical balance between completely random and manually designed model-based test case generation techniques. ...|$|R
50|$|Such {{programs}} {{inspect the}} contents of the Windows registry, operating system files, and installed programs, and remove files and entries which match a list of known spyware. Real-time protection from spyware works identically to real-time <b>anti-virus</b> protection: the <b>software</b> scans disk files at download time, and blocks the activity of components known to represent spyware.In some cases, it may also intercept attempts to install start-up items or to modify browser settings. Earlier versions of anti-spyware programs focused chiefly on detection and removal. Javacool Software's SpywareBlaster, {{one of the first to}} offer real-time protection, blocked the installation of ActiveX-based spyware.|$|R
40|$|Policy Summary: This policy {{provides}} {{requirements for}} the use of a centralized anti-virus and management program. Purpose: The University of Oklahoma Health Sciences Center (OUHSC) relies on antivirus to protect its computing devices from malicious software, commonly known as “malware”. Anti-virus protection includes prevention, remediation and control. The primary purpose is to ensure that University faculty, staff and students are aware of and take responsibility for complying with supported virus protection and management <b>software.</b> <b>Anti-Virus</b> is intended to ensure: � The integrity and reliability of information systems; � Faculty, staff and students are operating under a minimum safe practice when connected to the network...|$|R
2500|$|Like most <b>anti-virus</b> <b>software,</b> many anti-spyware/adware tools {{require a}} {{frequently}} updated database of threats. As new spyware programs are released, anti-spyware developers discover and evaluate them, {{adding to the}} list of known spyware, which allows the software to detect and remove new spyware. As a result, anti-spyware software is of limited usefulness without regular updates. [...] Updates may be installed automatically or manually.|$|E
2500|$|<b>Anti-virus</b> <b>software</b> can {{attempt to}} scan for rootkits. [...] A rootkit {{is a type}} of malware {{designed}} to gain administrative-level control over a computer system without being detected. Rootkits can change how the operating system functions and in some cases can tamper with the anti-virus program and render it ineffective. Rootkits are also difficult to remove, in some cases requiring a complete re-installation of the operating system.|$|E
2500|$|The <b>anti-virus</b> <b>software</b> testing group AV-Comparatives {{gave the}} Windows XP version of Kaspersky AV an [...] "Advanced+" [...] rating (its highest) in both its February 2008 on-demand {{detection}} test (with the fourth highest detection rate among 16 products tested). However, in the Retrospective/Proactive Test May 2008, Kaspersky received the [...] "Standard" [...] rating, detecting 21% of new malware with 1-month old signatures and receiving {{a substantial amount}} of false positives.|$|E
40|$|Abstract: The paper {{introduces}} a new <b>anti-virus</b> idea of <b>Software</b> Vaccine technique. It can apply the security technique inside the software itself. By inserting the software vaccine into the application software and reconstructing it, {{we can make}} the application software have immune ability from malicious attack. Besides, it can also help to find and trace the new viruses and their makers in very early stage. In this paper we will introduce the principle of software vaccine technique, give some samples of encryption algorithms to be used in software vaccine technique, and describe its application in early virus finding and tracing. We believe that the software vaccine technique will be a powerful anti-virus weapon to catch those virus makers...|$|R
40|$|This study {{looks into}} the {{attributes}} of common viral infections, how these viral transmissions happen {{and its effects on}} Personal Computer systems in an academic environment and working atmosphere. Both student and staff respondents were asked about their experiences with computer viruses, along with their localized and internet-related activities that they do in a routine format. Data were also extracted from a storage scanning module designed for this study over a definite period of eighteen (18) days. This module contained <b>anti-virus</b> scanning <b>software</b> that was up-dated daily to capture definitions that identify and quarantine malicious codes and programs stored in drives from the respondents. Complimentary data from person’s in-charge of the IT support teams assigned to heavy computer-related usage were also used to validate machine breakdowns arising from viral activities. Findings were collated and used as a basis for a policy framework designed to address the transmission of infection in a broader scope. The policies gen-erated were then distributed to IT-related businesses (Internet/Surfing and LAN gaming cafes) in Cagayan de Oro City, which were then subjected to another study on the effect of contamination on users outside the academic environment as reminders and cues prior to computer use...|$|R
40|$|Abstract. Virtual Private Networks are {{a popular}} {{mechanism}} for building complex network infrastructures. Such infrastructures are usually accompanied by strict administrative restrictions on all VPN endpoints {{to protect the}} perimeter of the VPN. However, enforcement of such restrictions becomes difficult if these endpoints are personal computers used for remote VPN access. Commonly employed measures like <b>anti-virus</b> or <b>software</b> agents fail to defend against unanticipated attacks. The Trusted Computing Group invested significant work into platforms that are capable of secure integrity reporting. However, trusted boot and remote attestation also require a redesign of critical software components to achieve their full potential. In this work, we design and implement a VPN architecture for trusted platforms. We solve the conflict between security and flexibility by implementing a selfcontained VPN service that resides in an isolated area, outside the operating system environment visible to the user. We develop a hardened version of the IPsec architecture and protocols by addressing known security issues and reducing the overall complexity of IPsec and IKEv 2. The resulting prototype provides access control and secure channels for arbitrary local compartments and is also compatible with typical IPsec configurations. We expect our focus on security and reduced complexity to result in much more stable and thus also more trustworthy software. ...|$|R
