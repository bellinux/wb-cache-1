0|283|Public
50|$|Mike Elliott, 68, British comedian and <b>actor</b> (<b>Goal!,</b> Billy Elliot), cancer.|$|R
5000|$|Goal Schedule Interference. One actor delays {{the other}} <b>actor's</b> <b>goal</b> achievement.|$|R
3000|$|... <b>actors</b> <b>goals</b> are unstable, {{they change}} over time, they are {{discovered}} in the process, therefore {{it is difficult to}} attribute to them steady positions; [...]...|$|R
50|$|Novice misunderstandings. Each step of a well-written {{use case}} should present <b>actor</b> <b>goals</b> or {{intentions}} (the essence of functional requirements), and normally {{it should not}} contain any user interface details, e.g. naming of labels and buttons, UI operations etc., which is a bad practice and will unnecessarily complicate the use case writing and limit its implementation.|$|R
5000|$|In an {{industry}} {{it is important}} to describe a system's behavior when it responds to a request that originates from outside : the use cases [...] have become popular for requirements [...] between the engineers thanks to its features like the visual modeling technique, they describe a system from an actor's viewpoint and its format explicitly conveys each <b>actor's</b> <b>goals</b> and the flows the system must implement to accomplish them.|$|R
40|$|We {{propose a}} {{software}} development methodology which {{is founded on}} concepts used to model early requirements. Our proposal adopts the i* modeling framework [21], which offers the notions of <b>actor,</b> <b>goal</b> and (<b>actor)</b> dependency, and uses these as a foundation to model early and late requirements, architectural and detailed design. The paper outlines the methodology, named Tropos, through an example, and sketches a formal language which underlies the methodology and is intended to support formal analysis. The methodology seems to complement well proposals for agent-oriented programming platforms...|$|R
40|$|When {{learning}} about the functions of novel tools, {{it is possible that}} infants may use associative and motoric processes. This study investigated the ability of 16 -month-olds to associate the orientation in which an actor held a dual-function tool with the actor's prior demonstrated interest in one of two target objects, and their use of the tool on that target. The actors' hand posture did not differ between conditions. The infants were shown stimuli in which two actors acted upon novel objects with a novel tool, each actor employing a different function of the tool. Using an eye-tracker, infants' looking time at images depicting the actors holding the tool in an orientation congruent or incongruent with the <b>actor's</b> <b>goal</b> was measured. Infants preferred to look at the specific part of the tool that was incongruent with the <b>actor's</b> <b>goal.</b> Results show that the association formed involves the specific part of the tool, the actor, and the object the actor acted upon, but not the orientation of the tool. The capacity to form such associations is demonstrated in this study in the absence of motor information that would allow 16 -month-olds to generate a specific representation of how the tool should be held for each action via mirroring processes...|$|R
40|$|We {{describe}} a software development methodology called Tropos for agent-oriented software systems. The methodology adopts the i* modeling framework [29], which offers {{the notions of}} <b>actor,</b> <b>goal</b> and (<b>actor)</b> dependency, and uses these as a foundation to model early and late requirements, architectural and detailed design. The paper outlines the methodology, and shows how the concepts of Tropos can be accommodated within UML. In addition, we also adopt recent proposals for extensions of UML to support design specifications for agent software. Finally the paper compares Tropos to other research on agent-oriented software development. ...|$|R
40|$|Tropos is a {{software}} development methodology {{founded on the}} key concepts of agent-oriented software development. Specifically, Tropos emphasizes concepts for modelling and analysis during the early requirements phase. This phase precedes the prescriptive requirements specification of the system-to-be. In this paper, we present the Tropos metamodel starting from the basic concepts of <b>actor,</b> <b>goal,</b> plan, resource and social dependency and then we illustrate its use by introducing an extension intended to in-troduce concepts for modelling security concerns. We also sketch the Tropos modelling environment and compare with the metamodels of other software development method-ologies. ...|$|R
40|$|Tropos, a novel agent-oriented {{software}} engineering methodology, {{is characterized by}} three key points: (i) it pays {{much attention to the}} activities that precede the specification of the prescriptive requirements, such as understanding how the intended system would meet the organizational goals; (ii) it uses the same mentalistic notions of <b>actors,</b> <b>goals,</b> plans, and actors' intentional dependencies, along all the phases of requirement analysis and system design; (iii) it foresees a process of requirement and system modeling that is incremental and iterative, based on a set of progressive transformational steps. As a result...|$|R
5000|$|Dissipation of Effort. One <b>actor</b> threatens <b>goals</b> {{of another}} <b>actor,</b> causing the other actor to apply {{its effort to}} fixing the {{disrupted}} goals rather than achieving the mutually exclusive goal.|$|R
5000|$|Mutual Goal Abandonment. If {{preventing}} the other actor from achieving its goal {{is more important}} than achieving the <b>actor’s</b> own <b>goal,</b> one may convince the other to abandon its goal.|$|R
5000|$|One {{must also}} account for counterplanning {{techniques}} applied by other <b>actors.</b> A <b>goal</b> conflict counterplanning technique called [...] "Expected Blocking" [...] involves preventing another actor from applying the techniques described above.|$|R
40|$|A Multi-Agent System (MAS) {{architecture}} {{is an organization}} of coordinated autonomous agents that interact {{in order to achieve}} particular, possibly common goals. Considering real-world organizations as an analogy, this paper proposes MAS architectural patterns for information systems which adopt concepts from organizational theories. The patterns are modeled using the i* framework which offers the notions of <b>actor,</b> <b>goal</b> and <b>actor</b> dependency, specified in Formal Tropos and evaluated with respect to a set of software quality attributes, such as predictability or adaptability. We conduct a comparison of organizational and conventional architectures using an e-business information system case study...|$|R
40|$|Abstract. A Socio-Technical System (STS) is an {{interplay of}} humans, {{organizations}} and technical systems. STSs consist of interacting actors, which depend {{on one another}} to achieve their objectives. In previous work, we have proposed STS-ml, a security requirements modelling language (using i*-like primitives such as <b>actor,</b> <b>goal,</b> delegation) {{for the design of}} secure STSs. STS-ml represents security requirements as constraints over the interactions (goal delegation and document exchange) among actors in the STS. In this work, we present the current version of STS-ml, which introduces further modelling primitives as well as sophisticated reasoning mechanisms to detect conflicts in security requirements. ...|$|R
40|$|Abstract: A Multi-Agent System (MAS) {{architecture}} {{is an organization}} of coordinated autonomous agents that interact {{in order to achieve}} particular, possibly common goals. Considering real-world organizations as an analogy, this paper proposes MAS architectural patterns for information systems which adopt concepts from organizational theories. The patterns are modeled using the i * framework which offers the notions of <b>actor,</b> <b>goal</b> and <b>actor</b> dependency, specified in Formal Tropos and evaluated with respect to a set of software quality attributes, such as predictability or adaptability. We conduct a comparison of organizational and conventional architectures using an e-business information system case study...|$|R
5000|$|<b>Goal</b> Substitution. One <b>actor</b> {{changes its}} <b>goal</b> to a non-mutually {{exclusive}} goal.|$|R
40|$|Multi-Agent Systems, Organizational Styles, System Design, Architectural Patterns A Multi-Agent System (MAS) {{architecture}} {{is an organization}} of coordinated autonomous agents that interact {{in order to achieve}} particular, possibly common goals. Considering real-world organizations as an analogy, this paper proposes MAS architectural patterns for information systems which adopt concepts from organizational theories. The patterns are modeled using the i* framework which offers the notions of <b>actor,</b> <b>goal</b> and <b>actor</b> dependency, specified in Formal Tropos and evaluated with respect to a set of software quality attributes, such as predictability or adaptability. We conduct a comparison of organizational and conventional architectures using an e-business information system case study...|$|R
40|$|This paper {{describes}} {{an attempt to}} bridge the gap between early requirements specification and formal methods. In particular, we propose a new specification language, called Formal Tropos, that is founded on the primitive concepts of early requirements frameworks (<b>actor,</b> <b>goal,</b> strategic dependency) [15], but supplements them with a rich temporal specification language. We also extend existing formal analysis techniques, in particular model checking, to allow for an automatic verification of relevant properties for an early requirements specification. Our preliminary experiments demonstrate that formal analysis reveals gaps and inconsistencies in early requirements that are by no means trivial to discover without the help of formal analysis tools. 1...|$|R
40|$|A Multi-Agent System is an {{organization}} of coordinated autonomous agents that interact {{in order to achieve}} common goals. Considering real world organizations as an analogy, this paper proposes architectural styles for MAS which adopt concepts from organizational theories. The styles are modeled using the i* framework which o#ers the notions of <b>actor,</b> <b>goal</b> and <b>actor</b> dependency and specified in Formal Tropos. They are evaluated with respect to a set of software quality attributes, such as predictability and adaptability. In addition, we conduct a comparative study of organizational and conventional software architectures using the mobile robot control example from the Software Engineering literature. The research is conducted in the context of Tropos, a comprehensive software system development methodology...|$|R
40|$|Information {{systems of}} the future will have to better match their {{operational}} organizational environment. Unfortunately, development methodologies have traditionally been inspired by programming concepts, not organizational ones, leading to a semantic gap between the system and its environment. To reduce as much as possible this gap, this paper proposes a development methodology named Tropos which is founded on concepts used to model early requirements. Our proposal adopts the i* organizational modeling framework [18], which offers the notions of <b>actor,</b> <b>goal</b> and (<b>actor)</b> dependency, and uses these as a foundation to model early and late requirements, architectural and detailed design. The paper outlines Tropos phases through an e-business example. The methodology seems to complement well proposals for agent-oriented programming platforms. ...|$|R
40|$|Software {{systems of}} the future will have to perform well within ever-changing {{organizational}} environments. Unfortunately, existing software development methodologies (object-oriented, structured or otherwise) have traditionally been inspired by programming concepts, rather than organizational ones, leading to a semantic gap between system and its operational environment. To reduce this gap, we propose a software development methodology named Tropos which is founded on the i * organizational modeling framework. i * offers the notions of <b>actor,</b> <b>goal</b> and (<b>actor)</b> dependency. Tropos uses these concepts as a basis to model early and late requirements, architectural and detailed design for a software system. The paper outlines Tropos phases through an e-business example. The methodology complements well proposals for agent-oriented programming platforms. ...|$|R
40|$|A Multi-Agent System (MAS) is an {{organization}} of coordinated au-tonomous agents that interact {{in order to achieve}} common goals. Consid-ering real world social organizations as an analogy, this paper proposes architectural styles and design patterns for MAS which adopt concepts from social theories. The styles are intended to represent a macro-level architecture of a MAS in terms of <b>actor,</b> <b>goal</b> and <b>actor</b> dependency and are evaluated with respect to software quality attributes. At a micro-level, social patterns give a finer-grain description of the MAS architecture and define how goals assigned to agents will be fulfilled. They are mod-eled within a conceptual framework analyzing them from five points of view: social, intentional, structural, communicational and dynamic. An e-business example illustrates our purpose...|$|R
40|$|A Multi-Agent System (MAS) is an {{organization}} of coordinated autonomous agents that interact {{in order to achieve}} particular, possible common goals. Considering real world organizations as an analogy, this paper proposes architectural styles for MAS which adopt concepts from organizational theories. The styles are modeled using the i* framework which o#ers the notions of <b>actor,</b> <b>goal</b> and <b>actor</b> dependency and specified in Formal Tropos. They are evaluated with respect to a set of software quality attributes, such as predictability or adaptability. In addition, we conduct a comparative study of organizational and conventional software architectures using the mobile robot control example from the Software Engineering literature. The research is conducted in the context of Tropos, a comprehensive software system development methodology...|$|R
40|$|The Subject Field of {{this project}} is {{prostitution}} and how politicians legislate on the area. The project revolves around how former and current legislation of prostitution is. Which legal strategies are at the politicians’ disposal when they are making legislation on the area of prostitution and how the authorities in Germany, The Netherlands and Sweden have handled the process? Which experiences has the authorities in these countries had with legalization and criminalization. The base for answering these questions is {{in the analysis of}} the decisionmakingprocess revolving the change of the criminal law chapter 24. The policyanalasys of this process identifies central <b>actors,</b> <b>goals</b> and course of action as well as an analysis of why the legislative amendment turned out the way it did...|$|R
40|$|Security {{assurance}} in {{cloud computing}} {{is one of}} the main barriers for wider cloud adoption. Potential cloud computing consumers like to know whether the controls in cloud environments can adequately protect critical assets migrated into the cloud. We present a cloud security audit approach to enable users' evaluate cloud service provider offerings before migration, as well as monitoring of events after migration. Our approach entails a set of concepts such as <b>actor,</b> <b>goals,</b> monitoring, conditions, evidence and assurance to support security audit activities. These concepts are considered as a language for describing the properties necessary for cloud security audit both before and after migration. Finally, a real cloud migration use case is given to demonstrate the applicability of the security audit approach...|$|R
5000|$|Priority Scheduling. One actor places time {{priority}} on its goal, achieving {{it before the}} other <b>actor</b> realizes its <b>goal.</b>|$|R
50|$|One {{of their}} most notable players was James Robertson Justice, better known as an <b>actor,</b> who tended <b>goal</b> for a season.|$|R
30|$|The second {{category}} is called action “transitive”. The verbs belonging to this category indicate an action which associates to one <b>actor</b> and one <b>goal.</b>|$|R
30|$|In the Control Theory {{approach}} to system behavior analysis, states, or {{the distinction between}} intentions and whether they have been executed and goals, or short-term components of intention, are central. For instance, feedback control mechanisms are components of systems constructed {{for the purpose of}} reducing the difference between an <b>actor’s</b> <b>goal</b> and their current state, and these systems tend to exhibit some form of efficiency or consistency, such as the consistent rational behavior we attribute to intentionality in humans [19 – 21]. The important distinction between goal and present systemic state is traceable to the type of applied rationality, i.e., in selecting strategies. “Feedback control reacts to sensory observations with actions designed to correct errors between observed and desired states,” while “feed-forward uses a model of the world to predict what actions are required to achieve the goal” [22].|$|R
40|$|We {{investigated}} whether top-down {{expectations about}} an actor's intentions affect action perception in a representational momentum (RM) paradigm. Participants heard an actor declare an intention to either take or leave an object and then saw him either reach for or withdraw from it, such that action and intention were either congruent or incongruent. Observers generally misperceived the hand's disappearance point further along the trajectory {{than it actually}} was, {{in line with the}} idea that action perception incorporates predictions of the action's future course. Importantly, this RM effect was larger for actions congruent with the <b>actor's</b> <b>goals</b> than for incongruent actions. These results demonstrate that action prediction integrates both current motion and top-down knowledge about the actor's intention. They support recent theories that emphasise the role of prior expectancies and prediction errors in social (and non-social) cognitive processing...|$|R
40|$|We {{present a}} {{framework}} that supports the formal verification of early requirements specifications. The framework is based on Formal Tropos, a specification language that adopts primitive concepts for modeling early requirements (such as <b>actor,</b> <b>goal,</b> and strategic dependency), along with a rich temporal specification language. We show how existing formal analysis techniques, and in particular model checking, can be adapted for the automatic verification of Formal Tropos specifications. These techniques have been implemented in a tool, called the T-Tool, that maps Formal Tropos specifications into a language that can be handled by the NUSMV model checker. Finally, we evaluate our methodology on a course-exam management case study. Our experiments show that formal analysis reveals gaps and inconsistencies in early requirements specifications that {{are by no means}} trivial to discover without the help of formal analysis tools...|$|R
40|$|Abstract. STS-Tool is the {{modelling}} {{and analysis}} support tool for STSml, our proposed actor- and goal-oriented security requirements modelling language for Socio-Technical Systems (STSs). STS-Tool allows designers to model an STS through high-level primitives, to express security constraints over {{the interactions between}} the actors in the STS, {{as well as to}} derive security requirements once the modelling is completed. The tool features a set of automated reasoning techniques for (i) checking if a given STS-ml model is well-formed, and (ii) determining if the specification of security requirements is consistent, that is, there are no conflicts among security requirements. We have implemented these techniques using disjuntive datalog programs. 1 The Socio-Technical Security modelling language The Socio-Technical Security modelling language (STS-ml) [1] is an i * based security requirements modelling language. STS-ml includes high-level organisational primivites such as <b>actor,</b> <b>goal,</b> delegation, etc. A distinguishing featur...|$|R
40|$|AbstractWe {{investigated}} whether top-down {{expectations about}} an actor’s intentions affect action perception in a representational momentum (RM) paradigm. Participants heard an actor declare an intention to either take or leave an object and then saw him either reach for or withdraw from it, such that action and intention were either congruent or incongruent. Observers generally misperceived the hand’s disappearance point further along the trajectory {{than it actually}} was, {{in line with the}} idea that action perception incorporates predictions of the action’s future course. Importantly, this RM effect was larger for actions congruent with the <b>actor’s</b> <b>goals</b> than for incongruent actions. These results demonstrate that action prediction integrates both current motion and top-down knowledge about the actor’s intention. They support recent theories that emphasise the role of prior expectancies and prediction errors in social (and non-social) cognitive processing...|$|R
40|$|Early {{requirements}} analysis {{is concerned with}} modeling and understanding the organizational context within which a software system will operate. Such organizational models can describe either the status quo or a desired new status. It is convenient to build such models by deploying organizational patterns which describe oftenused organizational structures. The paper proposes a catalogue of patterns which adopt concepts from organization theory and strategic alliances literature. The patterns are modeled using the i * framework which offers the notions of <b>actor,</b> <b>goal</b> and <b>actor</b> dependency and specified in Telos. Each proposed pattern is evaluated {{with respect to a}} set of quality attributes, such as predictability, adaptability and openness. We illustrate the use of our proposed patterns with a business-tobusiness example modeling alternative organizational settings. This research has been conducted {{within the context of a}} comprehensive software development methodology called Tropos. 1...|$|R
5000|$|A {{different}} form of legal impossibility (Known as [...] "hybrid legal impossibility") {{comes into play}} when an <b>actor's</b> <b>goal</b> is illegal, but commission of the crime is impossible due to a factual mistake regarding {{the legal status of}} one of the attendant circumstances of one of the elements of the crime. For example, a man attempting to bribe someone whom he mistakenly believes is a juror is not liable for attempted bribery of a juror. On the other hand, some jurisdictions may find the actor guilty of attempt. For example, under the Model Penal Code, the defendant can be guilty of the attempted crime if the facts being the way she thought they were would indeed make it a crime; however, she would not be guilty of the completed crime, because the crime was never completed.|$|R
