201|10000|Public
2500|$|With {{only two}} {{mountain}} howitzers in support, Harding proceeded with the attack of 19 November {{on the eastern}} flank. The attacks were met with intense fire from the Japanese defenders and quickly faltered with no gain. The early movements of battalions blurred the <b>assignment</b> <b>of</b> <b>tasks</b> against the eastern and western flanks {{on the basis of}} regimental commands. [...] The force attacking the Japanese western flank was designated Urbana Force. The concentration to the east, around Cape Endaiadere and the two strips, was called Warren Force. The next day, a further attack was pressed with support from bombers and the mountain howitzers. About [...] was gained on the coastal strip but the III/128th was still held {{up in front of the}} bridge.|$|E
50|$|Organizing, in {{companies}} point of view, is the management function that usually follows after planning. And {{it involves the}} <b>assignment</b> <b>of</b> <b>tasks,</b> the grouping of tasks into departments and the assignment of authority with adequate responsibility and allocation of resources across the organization to achieve common goals.|$|E
50|$|The {{project manager}} needs to {{communicate}} project plans and to distribute task assignments to team members. The <b>assignment</b> <b>of</b> <b>tasks</b> can {{be distributed to}} team member home pages in PWA. They need to communicate status and changes to keep the project manager up to date. Project Server supports electronic communication over the web via PWA. Team members can update their tasks' status via PWA and the My Tasks list or via a Time Sheet.|$|E
50|$|Käch was {{a member}} of the Swiss Olympic Association and of the Commission for <b>Assignments</b> <b>of</b> <b>Tasks</b> between Federation and Cantons. After 1983 he was guest of honor at the yearly {{international}} SAS competitions of pentathlon. He died in Calgary.|$|R
5000|$|Microsoft Project 2010 adds ribbons to its user interface. Ribbons are {{available}} in other Office products, such as Microsoft Project and PWA. Other features include Project Portfolio Server, {{the inclusion of a}} [...] "Timeline" [...] view, which graphically represents key tasks and milestones. Another view that helps with resource management is the Team Planner, which provides a graphical view <b>of</b> <b>assignments</b> <b>of</b> <b>tasks</b> to resources. The Team Planner also shows unscheduled and unassigned tasks.|$|R
40|$|A graph {{matching}} {{approach to}} optimal <b>assignment</b> <b>of</b> <b>task</b> modules with varying lengths and precedence relationship in a distributed computing system is proposed. Inclusion f module precedence into the optimal solution {{is made possible}} by the use of topological module orderings. Two graphs are defined to represent the processor structure and the module precedence r lationship, respectively. <b>Assignment</b> <b>of</b> the <b>task</b> modules to the system processors i transformed into a type of graph matching. The search of optimal graph matching corresponding to optimal task assignment is formulated as a state-space s arch problem which is then solved by the A * algorithm in artificial intelligence. Illustrative xamples and experimental results are included to show the effectiveness of the proposed approach. C. R. Cate#ories: D. 4. 1, 1. 2. 8. Index Terms. " Task assignment, distributed processing, raph matching, topological tree, minima...|$|R
50|$|The SAFplus Platform adheres {{very closely}} to the {{architecture}} defined in the SA Forum documents. SAFplus essentially {{is a set of}} server programs that run on each node on the cluster and a client library that applications link against. This infrastructure provides services to applications such as startup/shutdown, failure detection, <b>assignment</b> <b>of</b> <b>tasks</b> and active/standby roles, inter-node and inter-process messaging, group membership, logs, events, distributed hash tables (checkpointing), integration with hardware events (such as over-temperature alarms), and more.|$|E
50|$|Several other highly cited {{papers of}} Bokhari concern the {{partitioning}} and load balancing problems in distributed computing, the topic mentioned in his ACM Fellow award citation. As with the Mapping Problem, this concerns <b>assignment</b> <b>of</b> <b>tasks</b> to processors, {{but in a}} more general setting in which a processor may handle multiple tasks; the problem is to perform this assignment {{in such a way}} that heavily communicating pairs of tasks are assigned to the same processor, while keeping the amount of work assigned to processors relatively even.|$|E
5000|$|The quasi-opportunistic {{paradigm}} aims {{to overcome}} this by achieving {{more control over the}} <b>assignment</b> <b>of</b> <b>tasks</b> to distributed resources and the use of pre-negotiated scenarios for the availability of systems within the network. Quasi-opportunistic distributed execution of demanding parallel computing software in grids focuses on the implementation of grid-wise allocation agreements, co-allocation subsystems, communication topology-aware allocation mechanisms, fault tolerant message passing libraries and data pre-conditioning. In this approach, fault tolerant message passing is essential to abstractly shield against the failures of the underlying resources.|$|E
40|$|In this paper, {{we provide}} an optimal {{algorithm}} and a fully polynomial time approximation algorithm {{for the problem}} <b>of</b> scheduling independent <b>tasks</b> onto a fixed number of heterogeneous unrelated resources with heterogeneous reconfiguration costs. The notion of solution dominance is used to consider all or approximately all possible <b>assignments</b> <b>of</b> <b>tasks</b> to resources. To demonstrate {{the utility of the}} approximation algorithm, it is used to schedule blocks of data that are to be encrypted using the Rijndael encryption algorithm on a generalpurpose processor and an FPGA. The results confirm the theoretical conclusions. 1...|$|R
40|$|AbstractThe chinese {{mining company}} SDIC Xinji {{currently}} develops {{in the province}} of Anhui, south of Beijing, the coal mine Banji, pursuing the aim to realize an exemplary high-performance mine with the highest degree of production efficiency and a high safety standard, using state of the art technology. Remarkable with this <b>assignment</b> <b>of</b> <b>task</b> is the fact, that power supply technology, high voltage switch technology, automation and communication were being projected from one supplier, as an integrated complete system, based on a three- dimensional mine layout model...|$|R
40|$|This paper {{deals with}} the <b>assignment</b> <b>of</b> <b>task</b> to the members if the multi-functional staff (each worker is able to perform a given subset <b>of</b> types <b>of</b> <b>tasks)</b> <b>of</b> a work centre, during each period (e. g. one hour) into which the {{planning}} horizon (e. g. one shift or one week) can be divided. For each type <b>of</b> <b>task</b> to perform, all workers who can perform the task do so at equal worker efficiencies. There are constraints that, if possible, should be respected. The objective is {{that the percentage of}} working time dedicated by each worker to each type <b>of</b> <b>task</b> be {{as close as possible to}} reference values. The problem is modelled as a sequence <b>of</b> <b>assignments,</b> in which appropriate values for the cost matrix depend on the results <b>of</b> the previous <b>assignment...</b>|$|R
50|$|Quasi-opportunistic {{supercomputing}} {{is a form}} of {{distributed computing}} whereby the “super virtual computer” of many networked geographically disperse computers performs computing tasks that demand huge processing power. Quasi-opportunistic supercomputing aims to provide a higher quality of service than opportunistic grid computing by achieving more control over the <b>assignment</b> <b>of</b> <b>tasks</b> to distributed resources and the use of intelligence about the availability and reliability of individual systems within the supercomputing network. However, quasi-opportunistic distributed execution of demanding parallel computing software in grids should be achieved through implementation of grid-wise allocation agreements, co-allocation subsystems, communication topology-aware allocation mechanisms, fault tolerant message passing libraries and data pre-conditioning.|$|E
50|$|Sensory {{processing}} and behavior generation are both hierarchical processes, {{and both are}} embedded in the nodes that form the 4D/RCS organizational hierarchy. However, the SP and BG hierarchies are quite different in nature and are not directly coupled. Behavior generation is a hierarchy based on the decomposition of tasks and the <b>assignment</b> <b>of</b> <b>tasks</b> to operational units. Sensory processing is a hierarchy based on the grouping of signals and pixels into entities and events. In 4D/RCS, the hierarchies of sensory {{processing and}} behavior generation are separated by a hierarchy of world modeling processes. The WM hierarchy provides a buffer between the SP and BG hierarchies with interfaces to both.|$|E
5000|$|Tuleap is a {{software}} platform for project management that enables managers and developers to utilize diverse development methodologies including Agile, traditional, or hybrid or custom processes. It helps organizations meet industry standards like Capability Maturity Model Integration (CMMI) and ITIL. Tuleap facilitates {{the planning of}} software releases, the prioritization of business requirements, the <b>assignment</b> <b>of</b> <b>tasks</b> to project members, the monitoring of project progress, {{and the creation of}} reports. It features site-wide trackers and real-time reports on risks, requirements, tasks, bugs, change requests, support requests, user stories. It supports Kanban, Scrum, and hybrid methodologies in project management. Tuleap has a built-in risk management system.|$|E
40|$|We {{propose a}} new {{conceptual}} approach to system-level autonomy that exploits in a synergistic way recent breakthroughs in three specific areas: automatic generation of embeddable planning and validation software, integration of telecommunications forecaster and planning tools, and fault-tolerant <b>assignment</b> <b>of</b> computing <b>tasks</b> to multiple processors...|$|R
40|$|In {{this paper}} we {{consider}} the problem <b>of</b> reassigning <b>tasks</b> that were running on a failed processor of a multiprocessor system to the remaining fault-free processors. The new <b>assignment</b> <b>of</b> the <b>tasks</b> to the fault-free processors should 1) preserve the capacity constraints of the processors, 2) balance the load on the processors, 3) assign tasks to processors for which the...|$|R
50|$|The {{basis for}} the {{application}} of the team management system is a standard profile profile with 60 questions, which must be answered by every team member. The responses are used to draw up a report on the workspaces of each person, which should allow a better <b>assignment</b> <b>of</b> the <b>tasks</b> in a team.|$|R
50|$|With {{only two}} {{mountain}} howitzers in support, Harding proceeded with the attack of 19 November {{on the eastern}} flank. The attacks were met with intense fire from the Japanese defenders and quickly faltered with no gain. The early movements of battalions blurred the <b>assignment</b> <b>of</b> <b>tasks</b> against the eastern and western flanks {{on the basis of}} regimental commands. The force attacking the Japanese western flank was designated Urbana Force. The concentration to the east, around Cape Endaiadere and the two strips, was called Warren Force. The next day, a further attack was pressed with support from bombers and the mountain howitzers. About 100 yd was gained on the coastal strip but the III/128th was still held {{up in front of the}} bridge.|$|E
5000|$|Most of the 93 {{members of}} the [...] live in the [...] on Hiller street. The boys are {{separated}} in [...] and not school classes or groups. One [...] {{is not only a}} sleeping room, but also an administrative entity with a closed hierarchy and a clear <b>assignment</b> <b>of</b> <b>tasks.</b> There's always an older choir boy with younger ones in each [...] {{in order to create a}} hierarchy and didactic relationship. Hence, the education on the Thomanerchor is enforced by the older members and the teachers don't really play a big role. Therefore, it is possible that only 5 teachers look after 90 children. Every year the [...] are distributed again, the ages of the children are considered for the changes and the possibility to influence the social order on the [...]|$|E
30|$|Third step: Initial <b>assignment</b> <b>of</b> <b>tasks</b> to {{stations}} {{according to}} the cycle time and precedence {{from the beginning of}} the list.|$|E
40|$|Since {{the strict}} {{separation}} of working spaces {{of humans and}} robots has experienced a softening due to recent robotics research achievements, close interaction of humans and robots comes rapidly into reach. In this context, physical human-robot interaction raises {{a number of questions}} regarding a desired intuitive robot behavior. The continuous bilateral information and energy exchange requires an appropriate continuous robot feedback. Investigating a cooperative manipulation task, the desired behavior is a combination of an urge to fulfill the task, a smooth instant reactive behavior to human force inputs and an <b>assignment</b> <b>of</b> the <b>task</b> effort to the cooperating agents. In this paper, a formal analysis of human-robot cooperative load transport is presented. Three different possibilities for the <b>assignment</b> <b>of</b> <b>task</b> effort are proposed. Two proposed dynamic role exchange mechanisms adjust the robots urge to complete the task based on the human feedback. For comparison, a static role allocation strategy not relying on the human agreement feedback is investigated as well. All three role allocation mechanisms are evaluated in a user study that involves large-scale kinesthetic interaction and full-body human motion. Results show tradeoffs between subjective and objective performance measures stating a clear objective advantage of the proposed dynamic role allocation scheme. © The Author(s) 2012...|$|R
40|$|Abstract. Computational Grids lend {{themselves}} well to parameter sweep applications, in which independent tasks calculate results for {{points in a}} parameter space. It is possible for a parameter space to become so large as to pose prohibitive system requirements. In these cases, user-directed steering promises to reduce overall computation time. In this paper, we address an interesting challenge posed by these user-directed searches: how should compute resources be allocated to application tasks as the overall computation is being steered by the user? We present a model for user-directed searches, and then propose a number of resource allocation strategies and evaluate them in simulation. We find that prioritizing the <b>assignments</b> <b>of</b> <b>tasks</b> to compute resources throughout the search can lead to substantial performance improvements. ...|$|R
40|$|Abstract. One {{driver of}} {{business}} process management {{is the opportunity}} to reduce costs by outsourcing certain tasks to third-party organizations. At the same time, it is undesirable that delicate information (e. g., trade secrets) “leak ” to the involved third parties, be it for legal or economic reasons. The absence of such leaks — called noninterference — can be checked automatically. Such a check requires an <b>assignment</b> <b>of</b> each <b>task</b> <b>of</b> the business process as either confidential or public. Drawbacks of this method are that (1) this <b>assignment</b> <b>of</b> every <b>task</b> is cumbersome, (2) an unsuccessful check requires a corrected confidentiality assignment although (3) the diagnosis and correction of information leaks is a nontrivial task. This paper presents a modeling prototype that integrates the noninterference check into the early design phase of an interorganizational business process. It not only allows for instant feedback on confidentiality assignments, but also for an automated completion <b>of</b> partial <b>assignments</b> toward guaranteed noninterference. ...|$|R
30|$|Schedule A {{schedule}} {{determines the}} {{spatial and temporal}} <b>assignment</b> <b>of</b> <b>tasks</b> in a DAG to processors. A schedule is usually generated by a specific scheduling algorithm on a specific number of processors.|$|E
40|$|Algorithms {{sought to}} {{minimize}} time {{and cost of}} computation. Report describes research on scheduling of computations tasks in system of multiple identical data processors operating in parallel. Computational intractability requires use of suboptimal heuristic algorithms. First algorithm called "list heuristic", variation of classical list scheduling. Second algorithm called "cluster heuristic" applied to tightly coupled tasks and consists of four phases. Third algorithm called "exchange heuristic", iterative-improvement algorithm beginning with initial feasible <b>assignment</b> <b>of</b> <b>tasks</b> to processors and periods of time. Fourth algorithm is iterative one for optimal <b>assignment</b> <b>of</b> <b>tasks</b> and based on concept called "simulated annealing" because of mathematical resemblance to aspects of physical annealing processes...|$|E
40|$|Invited keynote {{paper for}} a special sessionInternational audienceThis {{bibliography}} reviews the solution methods developed for the design and balancing problems of production lines such as assembly and disassembly lines. The line design problem aims in determining the number of workstations along with the corresponding <b>assignment</b> <b>of</b> <b>tasks</b> to each workstation, while the line balancing problem seeks an <b>assignment</b> <b>of</b> <b>tasks,</b> to the existing workstations of the line, which ensures that the workloads are as equal as possible among the workstations. These two optimisation problems can be also integrated and treated as a multi-objective optimisation problem. This review considers both deterministic and stochastic formulations for disassembly lines and is limited to assembly line design and balancing under uncertainty. This bibliography covers more than 90 publications since 1976 for assembly and 1999 for disassembly...|$|E
30|$|In this paper, we {{introduce}} a model <b>of</b> <b>task</b> scheduling for a cloud-computing data center to analyze energy-efficient task scheduling. We formulate the <b>assignments</b> <b>of</b> <b>tasks</b> to servers as an integer-programming {{problem with the}} objective of minimizing the energy consumed by the servers of the data center. We prove that the use <b>of</b> a greedy <b>task</b> scheduler bounds the constraint service time whilst minimizing the number of active servers. As a practical approach, we propose the most-efficient-server-first task-scheduling scheme to minimize energy consumption of servers in a data center. Most-efficient-server-first schedules tasks to a minimum number of servers while keeping the data-center response time within a maximum constraint. We also prove the stability of most-efficient-server-first scheme for tasks with exponentially distributed, independent, and identically distributed arrivals. Simulation results show that the server energy consumption of the proposed most-efficient-server-first scheduling scheme is 70 times lower than that of a random-based task-scheduling scheme.|$|R
30|$|Tiny {{differences}} in the wall clock times are mainly due to variations in the dynamic scheduling of tasks: for example, even a slight difference in the execution time <b>of</b> a sole <b>task</b> (e.g. due to a cache hit vs. miss) can influence numerous subsequent scheduling decisions, like the <b>assignment</b> <b>of</b> individual <b>tasks</b> to particular cores, which can in turn cause changes in the memory access times <b>of</b> these <b>tasks,</b> due {{to the use of}} differing NoC routes.|$|R
40|$|In {{this paper}} we shall {{deal with a}} {{paradigmatic}} construction problem concerning the geometry of circle. By analysing the class processes raised by the <b>assignment</b> <b>of</b> this <b>task,</b> we shall touch some relevant issues, such as {{the management of the}} delicate relationship between concrete practices and theoretical thinking, and we shall analyse how the shift from each other was intentionally provoked during class interaction...|$|R
40|$|We {{evaluated}} {{the effects of}} choice versus the <b>assignment</b> <b>of</b> <b>tasks</b> of varying preferences on the work engagement of adults with severe disabilities. The combined results of two experiments suggests that the relative preference for a task {{may be an important}} variable in the effectiveness of choice for some individuals...|$|E
40|$|A {{fundamental}} issue affecting {{the performance of}} a parallel application running on message-passing parallel systems is the <b>assignment</b> <b>of</b> <b>tasks</b> to processors {{in order to get the}} minimum completion time. In SEPP and HPCTI, tools for static and dynamic task assignment are considered complementary: static mapping tools compute and initial <b>assignment</b> <b>of</b> <b>tasks</b> on processors while dynamic load balancing tools are used at execution time. Static task assignment is known to be NP-complete and, therefore, the obvious approach is to develop polynomial time algorithms that provide fast and near optimal solutions. In this paper, we present a compilation-time two stage mapping strategy (denoted as CREMA: Clustering and Reassignment-based Mapping Algorithm) used for mapping efficiently arbitrary programs (modelled as TIGs: Task Interaction Graph) onto message-passing parallel systems with any architecture. Moreover, we present also a new fully distributed dynamic load balancing algorithm (denoted as D [...] ...|$|E
40|$|Abstract. The <b>assignment</b> <b>of</b> <b>tasks</b> {{to human}} {{performers}} {{is a critical}} component in people-centric business process management systems. Workflow management systems typically assign work items using strategies that only consider qualified resources. There are, however, situations, where this approach falls short. For instance, in emergency response situations, tasks need {{to be carried out}} by resources that are available immediately, even if they do not match all skill requirements. This paper compares the performance of a set of six task assignment mechanisms for workflow applications using a scenario from the emergency management domain. In particular, we develop and simulate assignment strategies inspired by stimulus/response models derived from swarm intelligence, and benchmark these strategies against conventional task assignment strategies. Our findings show that swarm intelligence-based approaches outperform the traditional <b>assignment</b> <b>of</b> <b>tasks</b> in ad-hoc organizations, and that workflow-based emergency management systems could benefit significantly from these novel task assignment strategies...|$|E
40|$|Computational Grids lend {{themselves}} well to parameter sweep applications, in which independent tasks calculate results for {{points in a}} parameter space. However, {{it is possible for}} a parameter space to become so large as to pose prohibitive system requirements. In these cases, user-guided searches promise to reduce overall computation time. In this paper, we address an interesting challenge posed by these user-directed searches: how should computing resources be allocated to application tasks as the overall computation is being guided by the user? We present a model for user-guided searches, and then propose a number of resource allocation strategies and evaluate them in simulation. We find that prioritizing the <b>assignments</b> <b>of</b> <b>tasks</b> to computing resources throughout the search can lead to substantial performance improvements. Key Words: resource allocation, scheduling, priorities, parallel computing, time sharing, parametric studies, guide...|$|R
40|$|A hybrid Mixed-Integer Linear Programming (MILP) /Constraint Programming (CP) {{decomposition}} {{algorithm is}} proposed for the short-term scheduling of batch plants that rely on the State Task Network representation. The decisions about the type and number <b>of</b> <b>tasks</b> performed, {{as well as the}} <b>assignment</b> <b>of</b> units to <b>tasks</b> are made by the MILP master problem. The C...|$|R
3000|$|... (2) Offline {{scheduling}} phase: {{during this}} phase, {{we make sure}} that the additional workload added to each core concerning the <b>assignment</b> <b>of</b> the migrating <b>tasks</b> does not jeopardize the schedulability of the core. Specifically, for each migrating task, say τ [...]...|$|R
