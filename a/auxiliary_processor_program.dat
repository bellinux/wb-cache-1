0|615|Public
50|$|This {{reduction}} in processor requirements {{comes at the}} expense of liveness; if too many main processors fail in a short time, the system must halt until the <b>auxiliary</b> <b>processors</b> can reconfigure the system. During stable periods, the <b>auxiliary</b> <b>processors</b> take no part in the protocol.|$|R
50|$|Cheap Paxos extends Basic Paxos to {{tolerate}} F failures with F+1 main <b>processors</b> and F <b>auxiliary</b> <b>processors</b> by dynamically reconfiguring after each failure.|$|R
40|$|Smart cards {{have opened}} up {{possibilities}} for many exciting applications. However, one problem with conventional smart cards is that they only have very limited computational power. As a result, it takes too long for a smart card to perform a single RSA signature operation in real time applications. Server-aided RSA signature computation protocols offer feasible solutions for this problem. The basic idea is to distribute most of the computation to an <b>auxiliary</b> <b>processor</b> which is capable of performing fast multi-precision modular exponentiation. However, the smart card has to guard against the <b>auxiliary</b> <b>processor</b> since it may attempt to obtain information about the secret exponent or to obtain the smart card’s signature on a message of its own choosing by supplying the smart card with incorrect values. The only way to defeat these attacks is for the smart card to have some means of verifying the data provided by the <b>auxiliary</b> <b>processor.</b> In this paper, we propose such a secure protocol...|$|R
40|$|Asynchronous {{algorithms}} {{for implementing}} a faulttolerant distributed system, {{which can make}} progress despite the failure of any F processors, require 2 F + 1 processors. Cheap Paxos, {{a variant of the}} Paxos algorithm, guarantees liveness under the additional assumption that the set of nonfaulty processors does not "jump around" too fast, but uses only F + 1 main processors that actually execute the system and F <b>auxiliary</b> <b>processors</b> that are used only to handle the failure of a main <b>processor.</b> The <b>auxiliary</b> <b>processors</b> take part in reconfiguring the system to remove the failed processor, after which they can remain idle until another main processor fails...|$|R
50|$|An {{additional}} 256 MB chip (using a 2 Gbit DDR3 SDRAM chip in the 2013 release) is fitted, {{thought to}} be used by the <b>auxiliary</b> <b>processor.</b> An additional 32 MB (256 Mbit) flash memory chip is also fitted.|$|R
40|$|The {{design of}} an <b>auxiliary</b> signal <b>processor</b> for a multiparameter radar is {{described}} {{with emphasis on}} low cost, quick development, and minimum disruption of radar operations. The processor is based around a low-cost digital signal processor card and personal computer controller. With {{the use of such}} a concept, an <b>auxiliary</b> <b>processor</b> was implemented for the NCAR CP- 2 radar during a 1991 summer field campaign and allowed measurement of additional polarimetric parameters, namely, the differential phase and the copolar cross correlation. Sample data are presented from both the auxiliary and existing radar signal processors...|$|R
50|$|Statistical {{sampling}} is {{the periodic}} recording of a <b>processor's</b> <b>program</b> counter or instruction pointer.|$|R
50|$|The {{details of}} the system {{architecture}} are covered in Unisys publication 3850 7802 Instruction <b>Processor</b> <b>Programming</b> Reference Manual. Also see UNIVAC 1100/2200 series.|$|R
40|$|This work {{describes}} how grammatical evolution may {{be applied to}} the domain of automatic composition. Our goal is to test this technique as an alternate tool for automatic composition. The AP 440 <b>auxiliary</b> <b>processor</b> will be used to play music, thus we shall use a grammar that generates AP 440 melodies. Grammar evolution will use fitness functions defined from several well-known single melodies to automatically generate AP 440 compositions that are expected to sound like those compose...|$|R
50|$|For example: a user might first {{instruct}} {{the operating system}} to load a word <b>processor</b> <b>program</b> from one file, and then edit a document stored in another file with the word <b>processor</b> <b>program.</b> In this example, the document would be considered data. If the word processor also features a spell checker, then the dictionary (word list) for the spell checker would also be considered data. The algorithms used by the spell checker to suggest corrections would be either machine code data or text in some interpretable programming language.|$|R
40|$|Software Design and Documentation Language (SDDL) {{provides}} {{effective communication}} medium to support design and documentation of complex software applications. SDDL supports communication among {{all members of}} software design team and provides for production of informative documentation on design effort. Use of SDDL-generated document to analyze design {{makes it possible to}} eliminate many errors not detected until coding and testing attempted. SDDL <b>processor</b> <b>program</b> translates designer's creative thinking into effective document for communication. Processor performs as many automatic functions as possible, freeing designer's energy for creative effort. SDDL <b>processor</b> <b>program</b> written in PASCAL...|$|R
30|$|The {{embedded}} <b>processor</b> <b>programming</b> {{passes through}} three phases: Simulation, testing, and verification. We will discuss 1024 -point DFT, 8 × 8 DCT and 64 tap FIR as case studies.|$|R
40|$|This {{application}} note describes how {{to implement a}} Virtex™- 4 FX PowerPC ™ 405 system with the Xilinx floating point unit (FPU) coprocessor. An FPU connected to the PowerPC <b>auxiliary</b> <b>processor</b> unit (APU) interface can accelerate software applications from anywhere between three to twenty times. The reference design provided includes a completed design created using the Xilinx Embedded Development Kit (EDK). Source code for a finite impulse response (FIR) filter is provided along with a graphics utility for display output on a Windows-based PC...|$|R
40|$|Beginning with a {{variation}} of the sequencing problem in a mixed-products line (MMSP-W: Mixed-Model Sequencing Problem with Workload Minimization), we propose two new models that incorporate a set of working conditions in regard with human resources of workstations on the line. These conditions come from collective agreements and therefore must be respected by both company and labor unions. The first model takes into account the saturation limit of the workstations, and the second model also includes the activation of the operators throughout the working day. Two computational experiments were carried out using a case study of the Nissan motor plant in Barcelona with two main objectives: (1) to study the repercussions of the saturation limit on the decrease in productivity on the line and (2) to evaluate the recovery of productivity on the line via both activation of operators, while maintaining the same quality in working conditions achieved by limiting the saturation, and <b>auxiliary</b> <b>processors.</b> By results we state that saturation limitation leads an important increase of work overload, which means average economic losses of 28, 731. 8 Euros/day. However, the productivity reduction may be counteracted by the work pace factor increase, at certain moments of workday, and/or by the incorporation of <b>auxiliary</b> <b>processors</b> into the line. Postprint (author's final draft...|$|R
40|$|Postprint ESWA Volume 42, Issue 22, 1 December 2015, Pages 8896 – 8910 Beginning with a {{variation}} of the sequencing problem in a mixed-products line (MMSP-W: Mixed-Model Sequencing Problem with Workload Minimization), we propose two new models that incorporate a set of working conditions in regard with human resources of workstations on the line. These conditions come from collective agreements and therefore must be respected by both company and labor unions. The first model takes into account the saturation limit of the workstations, and the second model also includes the activation of the operators throughout the working day. Two computational experiments were carried out using a case study of the Nissan motor plant in Barcelona with two main objectives: (1) to study the repercussions of the saturation limit on the decrease in productivity on the line and (2) to evaluate the recovery of productivity on the line via both activation of operators, while maintaining the same quality in working conditions achieved by limiting the saturation, and <b>auxiliary</b> <b>processors.</b> By results we state that saturation limitation leads an important increase of work overload, which means average economic losses of 28, 731. 8 Euros/day. However, the productivity reduction may be counteracted by the work pace factor increase, at certain moments of workday, and/or by the incorporation of <b>auxiliary</b> <b>processors</b> into the line. Postprint (published version...|$|R
50|$|Internally, COS {{was divided}} into a very small message-passing EXEC, {{and a number of}} System Task Processors (STP tasks). Each STP task was similar in nature to the {{peripheral}} <b>processor</b> <b>programs</b> in earlier Control Data operating systems.|$|R
5000|$|The T-11, {{also known}} as DC310, is a {{microprocessor}} that implements the PDP-11 instruction set architecture (ISA) developed by Digital Equipment Corporation. The T-11 was code-named [...] "Tiny". It was developed for embedded systems {{and was the first}} single-chip microprocessor developed by DEC. It was sold openly and was used by DEC in disk controllers, <b>auxiliary</b> <b>processors</b> and in the Atari System 2 arcade game system. It operated at 2.5 MHz, used a 5 V power supply and dissipated less than 1.2 W. It contains 13,000 transistors, uses NMOS logic, and was fabricated in a NMOS process.|$|R
50|$|Zarnegar (Persian: , zarnegār, meaning gold-depicting) is a commercial, {{stand-alone}} Persian/Arabic word <b>processor</b> <b>program</b> {{developed by}} SinaSoft Corporation for MS-DOS and Windows. The {{first version of}} Zarnegar (for DOS), was released in April-May 1991, and Windows versions have been available since 2000.|$|R
40|$|Portions {{of certain}} {{software}} applications that are implemented in software can run faster {{by moving the}} implementation into hardware. For example, in a Virtex™- 4 FX FPGA, the embedded PowerPC ™ 405 (PPC 405) processor can run software and offload computations to hardware modules in the FPGA. In such a system, a coprocessor interface known as the <b>Auxiliary</b> <b>Processor</b> Unit (APU) is used to transfer data between the processor and XtremeDSP ™ (DSP 48) slices in the FPGA. Because certain computations can be done more efficiently in software, and others in hardware, an APU-enhanced system results in a faster overall solution for many digital signal processing (DSP) applications...|$|R
40|$|Security in {{embedded}} systems is limited due to resource constraints. Security in {{embedded systems}} {{have to be}} adapted to these limitations. We provide a brief {{look at some of}} the limitations, such as the battery- and processor-gap. We also discuss some solutions to the limitations. In most systems the solutions are based on specialized cryptographic <b>auxiliary</b> <b>processors.</b> However there are other solutions that are more efficient but not as widely used. Two of the other solutions are the instruction-and data-driver approaches which requires hardware support. We also look at the impact of the faster growth rate of the Shannon-Hartley theorem compared to Moore's law. 1...|$|R
50|$|A {{primary goal}} of {{computer}} scientists is the development (and validation) of models—often mathematical in nature—for estimating the properties of computer-based systems (<b>processors,</b> <b>programs,</b> computers interaction with people, computers interacting with other computers, etc.) with an overarching objective of discovering designs that admit for improved performance (faster, better, cheaper, etc.).|$|R
40|$|The post <b>processor</b> <b>program</b> was {{developed}} to view Large Angle Transient Dynamics (LATDYN) output data in predefined, predetermined formats. The post processor is used for plotting data, creating and maintaining a data base of plotting requests, comparing and manipulating data sets in the data base, and the preparing plots for documentation...|$|R
40|$|System of <b>processor</b> <b>programs</b> {{performs}} stress, buckling, and {{vibrational analysis}} of large linear finite element systems {{in excess of}} 50, 000 degrees of freedom, while minimizing processing cost, execution time, central memory storage, and secondary data storage requirements. Programs use sparse matrix solution techniques and other computational and data management procedures...|$|R
40|$|The {{objectives}} of the research are to describe (1) the planning process of teaching writing using word <b>processor</b> computer-based <b>program</b> at Muhammadiyah University of Kendari, (2) the implementation process of teaching writing using word <b>processor</b> computer-based <b>program</b> at Muhammadiyah University of Kendari, and (3) the evaluation process of teaching writing using word <b>processor</b> computer-based <b>program</b> at Muhammadiyah University of Kendari. This is a qualitative research with case study design. This research is conducted at Muhammadiyah University of Kendari. The informants of the research are Head of English Study Program, lecturers of Writing III Course, and students of English Study Program of UMK. The techniques of data collection are through deep interview, observation, and documentation. The techniques of data analysis are by reducing the data, displaying the data, and then drawing conclusions. The data validation is conducted through triangulation of the data. The results of the research show that (1) the planning of teaching writing using word <b>processor</b> computer-based <b>program</b> starts from the arrangement of course outline by the writing course coordinator before the lecturer follows {{it up with the}} preparation of infrastructures to conduct the learning. However, the lecturer does not provide the teaching’s equipment in RPP that makes the planning of teaching writing III in class C word <b>processor</b> computer-based <b>program</b> is no ideal; (2) Implementation of teaching writing using word <b>processor</b> computer-based <b>program</b> consists of three phases namely opening, core, and close activities, where the techniques of exploration, elaboration, and confirmation have been run very well by the lecturer; and (3) Evaluation conducted by the lecturer in teaching writing using word <b>processor</b> computer-based <b>program</b> is conducted stage by stage for both test and non-test during the class, weekly assignments, and the result of mid and final test. Evaluation has been transparent and fair. ...|$|R
40|$|Platform-FPGA {{software}} applications are significantly faster when critical functions are {{moved to the}} hardware domain and a high bandwidth data transfer mechanism is used to exchange data between the hardware and software. This application note describes how C-to-HDL tools can easily create a hardware coprocessor from a critical function in the software system. These tools enable software engineers with cursory hardware knowledge to leverage the advantages of hardware-software co-design. The <b>Auxiliary</b> <b>Processor</b> Unit (APU) controller closely couples the embedded PowerPC ™ processor and the Fabric Coprocessor Module (FCM), and provides a low-latency, high-bandwidth communication path. This application note demonstrates an accelerated Mandelbrot image generation application by moving computation-intensive functions to the hardware domain and attaching it to the PowerPC processor using the Virtex™- 4 FX APU controller...|$|R
40|$|The {{main purpose}} of server-aided RSA {{signature}} computation protocols is {{to make use of}} an <b>auxiliary</b> <b>processor</b> to speed up the RSA signature computations to be performed by a device with limited processing power. However, all server-aided secret computation protocols are vulnerable to active attacks. A malicious server can manipulate the data provided to the client, and try to derive useful information about the secret exponent from the result released by the client. Most of the active attacks can be defeated if the client verifies the correctness of the final result before releasing it. In this paper, we propose a powerful active attack which can make the server-aided protocols insecure even if the client verifies the final signature. (C) 1998 Elsevier Science B. V...|$|R
40|$|The aim of {{this work}} was to design the multi-effect unit {{containing}} many additional features with the smallest dimensions possible. The main problems solved during the design were: signal <b>processor</b> <b>programming,</b> C language library for graphical OLED RGB display, system control using ATmega, EMC, wireless transmission of the sound, proper maintenance selection for dimension minimization, battery charging, and audio preamplifier...|$|R
40|$|This paper {{summarizes}} {{current research}} {{for increasing the}} efficiency of traffic flow at hub airports by application of four dimensional (4 D) guidance techniques. A method for generating 4 D guidance commands to control the landing time of aircraft that are not equipped with on-board 4 D guidance systems is described. In one possible implementation the commands are generated in an <b>auxiliary</b> <b>processor</b> linked to the ATC host computer and displayed on a controller's monitor {{in the form of}} profile descent advisories. Accurate time control is achieved by generating air traffic controller advisories in a ground-based algorithm that combines aerodynamic, thrust and atmospheric models with an efficient numerical integration method. The time accuracy and fuel efficiency achieved when the pilot responds to these advisories were evaluated in a piloted simulation of a transport aircraft...|$|R
5000|$|CINT2006 ("SPECint"), testing integer arithmetic, with {{programs}} such as compilers, interpreters, word <b>processors,</b> chess <b>programs</b> etc.|$|R
40|$|A {{debugger}} {{containing a}} set of virtual assemblers and a virtual machine are used as teaching tools in order to teach students differences and similarities between architectural styles of computer <b>processors.</b> <b>Programs</b> written by the stu-dents in the virtual assemblers are compiled and executed in this environment so that the students can follow the exe-cution of the programs step by step or at full speed...|$|R
30|$|A platform-independent {{approach}} {{is to use a}} virtual machine like Maté [26]. Applications running in Maté use instructions that are interpreted by virtual <b>processors</b> <b>programmed</b> onto network nodes. The performance penalty of the interpretation of the instructions can be alleviated by adding application-specific instructions to the virtual machine [27]. These instructions implement functionality that is often used by the application and execute more efficiently.|$|R
40|$|A set {{of virtual}} {{assemblers}} and a virtual machine {{are used as}} a teaching tool in order to teach students differences and similarities between architectural styles of computer <b>processors.</b> <b>Programs</b> written by {{the students in the}} virtual assemblers are compiled using the corresponding virtual assembler and then executed on the virtual machine so that the students can follow the execution of the programs step by step or at full speed...|$|R
5000|$|Alan Ashton said that, “Bruce Bastian {{did all of}} the {{formatting}} of the Word <b>Processor</b> <b>Program,</b> {{the main}} part of the Program that makes it work so well." [...] That Format was expressed in that 1989 WordPerfect Users Manual as, [...] "If you want to compose the Rules to process all of the words in a language, you must start with the Rules to process the most-used words." ...|$|R
40|$|For adjoint calculations, debugging, {{interactive}} control, {{and similar}} purposes one {{may need to}} reverse the execution of a computer program. The simplest option of recording a complete execution log and then reading it backwards requires massive amounts of storage. Instead one may generate the execution log piecewise by restarting the " calculation repeatedly from suitably placed checkpoints. Our goal is to minimize the temporal and spatial complexity {{as measured by the}} number of evaluation repeats and the number of checkpoints, respectively. We present optimal checkpointing schedules for one-step and multi-step evolutions. These might arise for example as discretizations of ODEs by Euler's methods or multi-step schemes, respectively. Furthermore, we present parallel extensions, where <b>auxiliary</b> <b>processors</b> perform the repeated forward evaluations such that one processor can run backward without any interruption. For either case the length of the evolution that can be [...] ...|$|R
50|$|During the 1980s and 1990s, {{engineering}} {{was focused}} on a multilingual word <b>processor</b> and <b>programs</b> for searching the Bible.|$|R
50|$|The five {{red lights}} on the System/36 were as follows:(1) Power check.(2) <b>Processor</b> check.(3) <b>Program</b> check.(4) Console check.(5) Temperature check.|$|R
