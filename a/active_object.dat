269|740|Public
5|$|With over 400 active volcanos, Io is {{the most}} geologically <b>active</b> <b>object</b> in the Solar System. Its surface is dotted with more than 100 mountains, {{some of which are}} taller than Earth's Mount Everest. Unlike most {{satellites}} in the outer Solar System (which have a thick coating of ice), Io is primarily composed of silicate rock surrounding a molten iron or iron sulfide core.|$|E
25|$|Jupiter's moon Io is {{the most}} volcanically <b>active</b> <b>object</b> {{in the solar system}} because of tidal {{interaction}} with Jupiter. It is covered with volcanoes that erupt sulfur, sulfur dioxide and silicate rock, and as a result, Io is constantly being resurfaced. Its lavas are the hottest known anywhere in the solar system, with temperatures exceeding 1,800 K (1,500°C). In February 2001, the largest recorded volcanic eruptions in the solar system occurred on Io. Europa, the smallest of Jupiter's Galilean moons, also appears to have an active volcanic system, except that its volcanic activity is entirely in the form of water, which freezes into ice on the frigid surface. This process is known as cryovolcanism, and is apparently most common on the moons of the outer planets of the solar system.|$|E
500|$|With over 400 active volcanoes, Io is {{the most}} {{geologic}}ally <b>active</b> <b>object</b> in the Solar System. This extreme geologic activity {{is the result of}} tidal heating from friction generated within Io's interior as it is pulled between Jupiter and the other Galilean satellites—Europa, Ganymede and Callisto. Several volcanoes produce plumes of sulfur and sulfur dioxide that climb as high as [...] above the surface. Io's surface is also dotted with more than 100 mountains that have been uplifted by extensive compression at the base of Io's silicate crust. Some of these peaks are taller than Mount Everest. Unlike most satellites in the outer Solar System, which are mostly composed of water ice, Io is primarily composed of silicate rock surrounding a molten iron or iron-sulfide core. Most of Io's surface is composed of extensive plains coated with sulfur and sulfur-dioxide frost.|$|E
40|$|This thesis {{examines}} a programming {{construct of}} Symbian OS called <b>active</b> <b>objects.</b> <b>Active</b> <b>objects</b> encapsulate {{a request to}} an asynchronous service and the completion of that request. They {{can be used to}} implement cooperative multitasking inside one thread. <b>Active</b> <b>objects</b> are widely used throughout Symbian OS, and the Symbian documentation encourages their usage instead of multithreading. In this thesis <b>active</b> <b>objects</b> are compared to threads by implementing a solution to classic producer/consumer problem using both programming methods. The performance of the solutions is then compared. The test results show that the active-object based solution performs the operation more quickly and uses significantly less memory than the thread-based solution. Key words and phrases: Symbian, <b>active</b> <b>objects,</b> cooperative multitasking, asynchronous processin...|$|R
40|$|Abstract—In this paper, {{we provide}} a formal {{framework}} {{for the security of}} distributed <b>active</b> <b>objects.</b> <b>Active</b> <b>objects</b> communicate asynchronously implementing method calls via futures. We base the formal framework on a security model that uses a semi-lattice to enable multi-lateral security crucial for distributed architectures. We further provide a security type system for the programming model ASPfun of functional <b>active</b> <b>objects.</b> Type safety and a confinement property are presented. ASPfun thus realizes secure down calls. Index Terms—Distributed <b>active</b> <b>objects,</b> formalization, secu-rity type systems I...|$|R
40|$|We {{present a}} {{concurrent}} compiler for Active Oberon built itself with <b>active</b> <b>objects.</b> We describe the experience made on parallelizing the Oberon compiler, in particular explaining how concurrency and synchronization are achieved by using <b>active</b> <b>objects,</b> and showing how we achieved ensured deadlock freedom. Based on the implementation, we discuss why we consider <b>active</b> <b>objects</b> beneficial {{for the implementation}} of software frameworks and where their limitations are...|$|R
2500|$|An object can be {{classified}} as either an <b>active</b> <b>object</b> like a ship navigating through a waterway or a passive object like a liferaft, drifting debris, or {{a person in the}} water (PIW) (Figure 3). [...] A passive object will experience the greatest leeway drift and it is this drift that is of utmost importance to those involved in search and rescue (SAR) upon inland waterways and open oceans.|$|E
50|$|An <b>active</b> <b>object</b> is {{composed}} of two objects: a body, and a standard Java object. The body is not visible from {{the outside of the}} <b>active</b> <b>object.</b>|$|E
50|$|Active {{objects are}} the basic units of {{activity}} and distribution used for building concurrent applications using ProActive. An <b>active</b> <b>object</b> runs with its own thread. This thread only executes the methods invoked on this <b>active</b> <b>object</b> by other active objects, {{and those of the}} passive objects of the subsystem that belongs to this <b>active</b> <b>object.</b> With ProActive, the programmer does not have to explicitly manipulate Thread objects, unlike in standard Java.|$|E
50|$|A {{paper by}} C. Ellis and S. Gibbs distinguishes between <b>active</b> <b>objects</b> and passive objects. Passive objects {{comprise}} information and behaviour, as stated above, but they cannot determine {{the timing of}} this behaviour. <b>Active</b> <b>objects</b> on the other hand can do this. In their article Ellis and Gibbs state that <b>active</b> <b>objects</b> have much more potential for the development of maintainable systems than do passive objects. An FBP application {{can be viewed as a}} combination of these two types of object, where FBP processes would correspond to <b>active</b> <b>objects,</b> while IPs would correspond to passive objects.|$|R
40|$|Abstract. We {{present a}} {{concurrent}} compiler for Active Oberon built itself with <b>active</b> <b>objects.</b> We describe the experience made on parallelizing the Oberon compiler, in particular explaining how concurrency and synchronization are achieved by using <b>active</b> <b>objects,</b> and showing how we achieved ensured deadlock freedom. Based on the implementation, we discuss why we consider <b>active</b> <b>objects</b> beneficial {{for the implementation}} of software frameworks and where their limitations are. ...|$|R
40|$|Many Web browsers {{now offer}} {{some form of}} <b>active</b> <b>objects,</b> written {{in a variety of}} languages, and the number and types of <b>active</b> <b>objects</b> are growing daily in {{interesting}} and innovative ways. This report describes our work on Oblets, <b>active</b> <b>objects</b> that are distributed over multiple machines. Oblets are written in Obliq, an object-oriented scripting language for distributed computation. The high-level support provided by Oblets makes it easy to write collaborative and distributed applications...|$|R
5000|$|In this model, the {{application}} is structured in subsystems. There is one <b>active</b> <b>object</b> (and therefore one thread) for each subsystem, and one subsystem for each <b>active</b> <b>object</b> (or thread). Each subsystem is thus composed of one <b>active</b> <b>object</b> and {{any number of}} passive objects—possibly no passive objects. The thread of one subsystem only executes methods in the objects of this subsystem. There are no [...] "shared passive objects" [...] between subsystems.|$|E
50|$|Another {{example of}} <b>active</b> <b>object</b> pattern in Java.|$|E
5000|$|... object table {{identifies}} the system's collection of <b>active</b> <b>object</b> descriptors ...|$|E
40|$|In this paper, {{we provide}} a formal {{framework}} {{for the security of}} distributed <b>active</b> <b>objects.</b> <b>Active</b> <b>objects</b> communicate asynchronously implementing method calls via futures. We base the formal framework on a security model that uses a semi-lattice to enable multi-lateral security crucial for distributed architectures. We further provide a security type system for the programming model ASPfun of functional <b>active</b> <b>objects.</b> Type safety and a confinement property are presented. ASPfun thus realizes secure down calls...|$|R
40|$|The {{development}} of parallel programs is {{primarily concerned with}} application speed. This {{has led to the}} {{development of}} parallel applications in which software engineering aspects play only subordinate roles. In order to increase software quality in parallel applications, we motivate the construction of parallel programs by composing <b>active</b> <b>objects</b> which interact by means of an object [...] oriented coordination model. This paper presents a formalism for specifying the behaviour of parallel <b>active</b> <b>objects</b> and a corresponding notion of behavioural types which can be used for verifying whether certain <b>active</b> <b>objects</b> conform to a specified behaviour. Our approach is based on high [...] level Petri nets which enable (besides other benefits) automated analysis, in particular for automated type checking of <b>active</b> <b>objects.</b> We illustrate the usefulness of our approach by presenting reusable <b>active</b> <b>objects</b> for a manager/worker architecture. Their correct interaction is shown by automated checking of behav [...] ...|$|R
50|$|In {{practice}} {{there may}} be many <b>active</b> <b>objects</b> in a thread, each doing its own task. They can interact by requesting things of each other, and of <b>active</b> <b>objects</b> in other threads. They may even request things of themselves.|$|R
5000|$|An {{interface}} which {{defines the}} method request on an <b>active</b> <b>object.</b>|$|E
5000|$|... 1998 Demonstration Prize. <b>Active</b> <b>object</b> {{recognition}} in parametric eigenspace. M. Prantl.|$|E
50|$|On {{the side}} of the {{subsystem}} that sends a call to an <b>active</b> <b>object,</b> the <b>active</b> <b>object</b> is represented by a proxy. The proxy generates future objects for representing future values, transforms calls into Request objects (in terms of metaobject, this is a reification) and performs deep copies of passive objects passed as parameters.|$|E
40|$|We extend and {{implement}} a modeling language based on concurrent <b>active</b> <b>objects</b> with application-level scheduling policies. The language allows a programmer to assign pri-orities at the application level, for example, to method def-initions and method invocations, and assign corresponding policies to the individual <b>active</b> <b>objects</b> for scheduling the messages. Thus, we leverage scheduling and performance related issues, which are becoming increasingly important in multi-core and cloud applications, from the underlying operating system to the application level. We describe a tool-set to transform models of <b>active</b> <b>objects</b> extended with application-level scheduling policies into Java. This tool-set allows a direct use of Java class libraries; thus, we obtain a full-fledged programming language based on <b>active</b> <b>objects</b> which allows for high-level control of deployment related is-sues...|$|R
40|$|Abstract—Functional <b>active</b> <b>objects</b> {{are a new}} {{paradigm}} {{for the implementation of}} services. They offer safe distributed evaluation with futures and immutable objects guaranteeing efficient implementation of privacy while offering verified quality assurance based on the functional paradigm and a development in an interactive theorem prover. In this paper, we present a novel and highly performant implementation of functional <b>active</b> <b>objects</b> in Erlang. Besides outlining the guid-ing principles of the interpreter, we show how secure services can be realized based on the classical service triangle and prove its security based on a formal definition of information flow security for functional <b>active</b> <b>objects.</b> Keywords-Active object, future, Erlang, privacy, service com-puting I...|$|R
5000|$|<b>Active</b> <b>objects</b> {{inherently}} {{support and}} automatically enforce the following best practices of concurrent programming: ...|$|R
50|$|Active objects can {{be created}} {{on any of the}} hosts {{involved}} in the computation. Once an <b>active</b> <b>object</b> is created, its activity (the fact that it runs with its own thread) and its location (local or remote) are perfectly transparent. Any <b>active</b> <b>object</b> can be manipulated {{as if it were a}} passive instance of the same class.|$|E
5000|$|... #Caption: A call onto an <b>active</b> <b>object,</b> {{as opposed}} to a call onto passive one ...|$|E
50|$|These {{features}} {{impact the}} application's topology. Of all the objects {{that make up}} a subsystem—the <b>active</b> <b>object</b> and the passive objects—only the <b>active</b> <b>object</b> is known to objects outside of the subsystem. All objects, both active and passive, may have references onto active objects. If an object o1 has a reference onto a passive object o2, then o1 and o2 are part of the same subsystem.|$|E
40|$|In this paper, {{we present}} a new {{security}} model for distributed <b>active</b> <b>objects.</b> This model emphasizes the aspects of decentralisation and private data of objects. We consider principals as <b>active</b> <b>objects</b> thereby amalgamating subjects and objects into one concept providing a simple uniform security model based on visibility of objects and object local security specification of method accessibility. Decentralized security policies are possible in which every principal has some data that is inaccessible to others. We introduce this new security model algebraically as a semi-lattice contrasting it to the foundations of lattice-based security models similar to Denning’s work. As a proof of concept we show how the model can be naturally interpreted for a calculus of <b>active</b> <b>objects...</b>|$|R
50|$|Underlying Open Cobalt is an {{object-oriented}} semantics {{based on}} <b>active</b> <b>objects</b> {{that have the}} capability of temporal reflection.|$|R
40|$|Distributed {{applications}} can {{be designed}} and structured with respect to different communication paradigms. Here we investigate a transformation from message-based and imperative communication style to decoupled communication. We refer to the Object Space approach as a platform for distributed computation which integrates decoupled communication with object-oriented essentials. Relying on Object Space we develop classes which provide constructs for message-based and imperative communication. As aside effect these classes enhance the first two communication styles with new aspects such as dynamic reconfiguration and load balancing. We dev elop a generic channel class which provides message-based communication through member functions send and receive to the programmer. Typed communication channels may be defined as subclasses derived fromchannel. The concept of <b>active</b> <b>objects</b> is a means to combine concurrent and object-oriented programming. We show how <b>active</b> <b>objects</b> in C++ may be implemented on top of Object Space. Wedev elop the class Concurrency as a base class for <b>active</b> <b>objects.</b> Communication between clients and servers as implemented by <b>active</b> <b>objects</b> follows the imperative paradigm. Thus we demonstrate how imperative communication may be mapped onto decoupled communication...|$|R
5000|$|Actor is an <b>active</b> <b>object</b> {{that carries}} out actions {{to achieve the}} goal. In GRL {{notation}} actor is represented as a circle with the actor name inside.|$|E
5000|$|... public class AnotherActiveObject { private double val; [...] // {{container}} for tasks // decides which request to execute next [...] // asyncMode=true means our worker thread processes its local task queue in the FIFO order [...] // only single thread may modify internal state private final ForkJoinPool fj = new ForkJoinPool(1, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true); [...] // implementation of <b>active</b> <b>object</b> method public void doSomething (...) throws InterruptedException { fj.execute( [...] (...) -> {val = 1.0;}); } [...] // implementation of <b>active</b> <b>object</b> method public void doSomethingElse (...) throws InterruptedException { fj.execute( [...] (...) -> {val = 2.0;}); }} ...|$|E
50|$|An <b>active</b> <b>object</b> {{framework}} is a callback-based form of multitasking for computer systems. Specifically, it {{is a form}} of cooperative multitasking and is an important feature of the Symbian operating system.|$|E
50|$|<b>Active</b> <b>objects</b> {{dramatically}} {{improve your}} ability to reason about the concurrent software. In contrast, using raw RTOS tasks directly is trouble {{for a number of}} reasons, particularly because raw tasks let you do anything and offer you no help or automation for the best practices. As with all good patterns, <b>active</b> <b>objects</b> raise the level of abstraction above the naked threads and let you express your intent more directly thus improving your productivity.|$|R
40|$|Correlate is a {{concurrent}} object-oriented language, {{which supports}} <b>active</b> <b>objects</b> {{as a unit}} of concurrency. In this paper, we discuss the migration of <b>active</b> <b>objects</b> in Correlate. First, we will show that {{the architecture of the}} run-time system simplifies the realisation of a migration mechanism that supports <b>active</b> <b>objects,</b> because this particular run-time system has complete control over all scheduling aspects. Secondly, we will show that object migration in Correlate can be exploited by a broad range of (e. g. load balancing) subsystems, mainly because policies can be designated on a per object basis. 1. Introduction Object migration is a well known mechanism. However, special care must be taken when <b>objects</b> become <b>active</b> (i. e. they can autonomously perform calculations, thus changing their state, and invoke operations on other objects). In this paper, we describe how migration of <b>active</b> Correlate <b>objects</b> is achieved. We start by introducing the Correlate language in section 2. The [...] ...|$|R
25|$|Gravitation from {{supermassive black}} {{holes in the}} center of many galaxies is thought to power <b>active</b> <b>objects</b> such as Seyfert galaxies and quasars.|$|R
