556|2580|Public
25|$|Depending on the <b>application</b> <b>architecture</b> and the {{third-party}} components used (such as external libraries or frameworks), custom checks {{should be}} defined {{along the lines}} drawn by the above list of best practices to ensure a better assessment of {{the reliability of the}} delivered software.|$|E
25|$|The structure, {{classification}} and terminology of {{attributes and}} metrics applicable to software quality management have been derived or {{extracted from the}} ISO 9126-3 and the subsequent ISO/IEC 25000:2005 quality model. The main focus is on internal structural quality. Subcategories have been created to handle specific areas like business <b>application</b> <b>architecture</b> and technical characteristics such as data access and manipulation or the notion of transactions.|$|E
25|$|The {{application}} layer is the scope within which applications create user data and communicate this data to other applications on another {{or the same}} host. The applications, or processes, {{make use of the}} services provided by the underlying, lower layers, especially the Transport Layer which provides reliable or unreliable pipes to other processes. The communications partners are characterized by the <b>application</b> <b>architecture,</b> such as the client-server model and peer-to-peer networking. This is the layer in which all higher level protocols, such as SMTP, FTP, SSH, HTTP, operate. Processes are addressed via ports which essentially represent services.|$|E
5000|$|<b>Applications</b> <b>Architecture</b> : The <b>Applications</b> <b>Architecture</b> {{describes}} the major types of applications that manage data {{to produce the}} information needed to support {{the activities of the}} Corporation. The <b>Applications</b> <b>Architecture</b> provides a framework that enables the migration from the current applications catalog and software development environment to the target integrated applications, development and engineering environments. The target architecture promotes the use of commercial and government off-the-shelf products, consolidating applications, where applicable, and the use of emerging technologies where appropriate.|$|R
5000|$|<b>Applications</b> <b>architecture</b> {{strategy}} involves {{ensuring the}} applications and the integrations align {{with the growth}} strategy of the organization. If an organization is a manufacturing organization with fast growth plans through acquisitions, the <b>applications</b> <b>architecture</b> should be nimble enough to encompass inherited legacy systems {{as well as other}} large competing [...]|$|R
5000|$|... #Subtitle level 2: Comparison with Traditional Object/Relational Web <b>Application</b> <b>Architectures</b> ...|$|R
5000|$|... #Subtitle level 3: Runtime <b>application</b> <b>architecture</b> (secondary) ...|$|E
5000|$|... #Subtitle level 3: IBM Insurance <b>Application</b> <b>Architecture</b> (IAA) ...|$|E
5000|$|The IBM Insurance <b>Application</b> <b>Architecture</b> is a {{reference}} architecture for the Insurance domain.|$|E
5000|$|Applications {{typically}} follow one of {{the following}} industry-standard <b>applications</b> <b>architecture</b> patterns: ...|$|R
50|$|Optimizing code {{generators}} and cross-debuggers provided support for several popular <b>application</b> <b>architectures.</b>|$|R
40|$|Special Issue This {{research}} {{examines the}} impacts of the assimilation and use of IT on the financial performance of hospitals. We identify two dimensions of IT assimilation and use. They are the IT <b>applications</b> <b>architecture</b> spread, which is {{the adoption of a}} broad array of IT solutions, and IT <b>applications</b> <b>architecture</b> longevity, which is the length of experience with use of specific IT solutions. We examine {{the extent to which these}} dimensions of assimilation within the business and clinical work processes impact hospital performance. Compared with the effects of IT <b>applications</b> <b>architecture</b> spread, we find that the IT <b>applications</b> <b>architecture</b> longevity has a more significant effect on financial performance. In addition, the effects of assimilation manifest differently across the business and clinical process domains. Our results enhance understanding about the manner in which the assimilation and use of IT contributes to the financial performance of hospitals...|$|R
5000|$|... 2002 - Patterns of Enterprise <b>Application</b> <b>Architecture,</b> by Martin Fowler. Addison-Wesley Longman, Inc.|$|E
5000|$|Peer-to-peer, a {{computing}} or networking distributed <b>application</b> <b>architecture</b> that partitions tasks or workloads among peers ...|$|E
50|$|In {{addition}} to the client-server model, distributed computing applications often use the peer-to-peer (P2P) <b>application</b> <b>architecture.</b>|$|E
50|$|Applications can be {{classified}} in various types depending on the <b>applications</b> <b>architecture</b> pattern they follow.|$|R
50|$|Solution architects {{in large}} {{organizations}} often {{act as the}} bridge between <b>architecture</b> and <b>applications</b> <b>architecture.</b>|$|R
50|$|Rapid {{prototyping}} {{is commonly}} applied in software engineering {{to try out}} new business models and <b>application</b> <b>architectures.</b>|$|R
5000|$|... 2002. Patterns of Enterprise <b>Application</b> <b>Architecture.</b> With David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, and Randy Stafford. Addison-Wesley[...]|$|E
50|$|Uniface has {{a variety}} of {{component}} types that are intended for use in different layers of a multi-tier <b>application</b> <b>architecture.</b>|$|E
50|$|Another {{benefits}} of the XRX Web <b>application</b> <b>architecture</b> is that it avoids {{most of the problems}} around the object-relational impedance mismatch.|$|E
5000|$|<b>Applications</b> <b>Architecture</b> - Definition of {{the major}} kinds of {{applications}} needed to manage that data and support the business functions.|$|R
50|$|<b>Applications</b> <b>architecture</b> {{tries to}} ensure the suite of {{applications}} being used by an organization to create the composite architecture is scalable, reliable, available and manageable.|$|R
50|$|Internet Research Task Force (IRTF): Promotes {{research}} {{of the evolution of}} the Internet by creating focused, long-term research groups working on Internet protocols, <b>applications,</b> <b>architecture,</b> and technology.|$|R
5000|$|... 2003. [...] "Aligning <b>application</b> <b>architecture</b> to the {{business}} context." [...] With others in: Advanced Information Systems Engineering. Springer Berlin Heidelberg, 2003.|$|E
50|$|In {{information}} systems, applications architecture or <b>application</b> <b>architecture</b> is one {{of several}} architecture domains that form the pillars of an enterprise architecture (EA).|$|E
50|$|Hypermedia as the Engine of Application State (HATEOAS) is a {{constraint}} of the REST <b>application</b> <b>architecture</b> {{that distinguishes}} it from other network application architectures.|$|E
50|$|<b>Applications</b> <b>architecture</b> means {{managing}} how {{multiple applications}} {{are poised to}} work together. It is different from software architecture, which deals with technical designs of how a system is built.|$|R
5000|$|Level 3 - {{the vision}} of {{where we want to}} be : The arrows {{delineate}} the basic definition process flow: data <b>architecture,</b> <b>applications</b> <b>architecture,</b> and technology architecture. It consists of: ...|$|R
50|$|Computer Telephone Integration (CTI) Essentials - {{introduces}} {{the dynamics of}} connecting a computer to a telephone system for routing calls through switches. This program also teaches the technology of <b>applications,</b> <b>architecture</b> and system development.|$|R
5000|$|Al Shalloway, Corollary to Conway's Law. When {{development}} groups {{change how}} their development staff are organized, their current <b>application</b> <b>architecture</b> will work against them.|$|E
50|$|Note {{that the}} {{applications}} architecture {{is about the}} application portfolio, not the internal architecture of a single application - which is often called the <b>application</b> <b>architecture.</b>|$|E
5000|$|In {{information}} technology, {{high availability}} <b>application</b> <b>architecture</b> {{is a process}} followed when implementing a new application into an existing business-wide computer system or ERP while minimizing downtime.|$|E
50|$|Uniface has {{continuously}} {{evolved to}} handle {{new technologies and}} <b>application</b> <b>architectures.</b> This has been critical to its success, because applications built with Uniface can be migrated, updated and modernized without losing the original development investment.|$|R
5000|$|Adheres to {{principles}} such as fine-grained interfaces (to independently deployable services), business-driven development (e.g. domain-driven design), IDEAL cloud <b>application</b> <b>architectures,</b> polyglot {{programming and}} persistence, lightweight container deployment, decentralized continuous delivery, and DevOps with holistic service monitoring.|$|R
40|$|In the {{long-term}} {{evolution of a}} Software Product Line (SPL), how to ensure the alignment between the reference and <b>application</b> <b>architectures</b> is a critical problem. Existing ad-hoc methods for architecture synchronization cannot ensure the completeness. In this paper, we propose a model-driven method for synchronized SPL architecture evolution using bidirectional transformation, a well-developed technique with solid mathematical foundation. Based on the model-based architecture representation, we capture the variability-intensive consistency relations between reference and <b>application</b> <b>architectures</b> and specify them with Beanbag [1], a declarative language supporting operation-based synchronization. Then, with the generated synchronizer and additional mechanisms, we can achieve coordinated architecture evolution through periodic synchronizations...|$|R
