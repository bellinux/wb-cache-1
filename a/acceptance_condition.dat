161|241|Public
5000|$|Similarly, the Rabin {{conditions}} [...] can be emulated by {{constructing the}} acceptance {{set in the}} Muller automata as all sets in [...] which satisfy , for some j. Note that this covers the case of Parity automaton too, as the Parity <b>acceptance</b> <b>condition</b> can be expressed as Rabin <b>acceptance</b> <b>condition</b> easily.|$|E
5000|$|The Büchi <b>acceptance</b> <b>condition</b> is the {{complement}} of the co-Büchi acceptance condition: ...|$|E
5000|$|... {F1,...,Fn} is the <b>acceptance</b> <b>condition,</b> {{where for}} each 1≤i≤n, Fi ⊆ Q [...]|$|E
50|$|<b>Acceptance</b> <b>conditions</b> may be {{infinite}} sets of omega words. However, people mostly study <b>acceptance</b> <b>conditions</b> {{that are}} finitely representable. The following lists {{a variety of}} popular <b>acceptance</b> <b>conditions.</b>|$|R
40|$|In {{this paper}} we {{investigate}} the affect of various <b>acceptance</b> <b>conditions</b> on recogniser membrane systems without dissolution. We demonstrate that two particular <b>acceptance</b> <b>conditions</b> (one easier to program, the other easier to prove correctness) both characterise the same complexity class, NL. We also find that by restricting the <b>acceptance</b> <b>conditions</b> we obtain a characterisation of L. We obtain these results by investigating the connectivity properties of dependency graphs that model membrane system computations. ...|$|R
40|$|In {{this paper}} we revisit Safra's determinization constructions for automata on {{infinite}} words. We show how to construct deterministic automata with fewer states and, most importantly, parity <b>acceptance</b> <b>conditions.</b> Determinization {{is used in}} numerous applications, such as reasoning about tree automata, satisfiability of CTL*, and realizability and synthesis of logical specifications. The upper bounds for all these applications are reduced by using the smaller deterministic automata produced by our construction. In addition, the parity <b>acceptance</b> <b>conditions</b> allows to use more efficient algorithms (when compared to handling Rabin or Streett <b>acceptance</b> <b>conditions).</b> Comment: 21 pages. To appear in Logical Methods in Computer Science (LMCS...|$|R
5000|$|A Büchi {{automaton}} is an ω-automaton A {{that uses}} the following <b>acceptance</b> <b>condition,</b> for some subset F of Q: ...|$|E
50|$|In automata theory, a Muller {{automaton}} {{is a type}} of an ω-automaton. The <b>acceptance</b> <b>condition</b> separates a Muller automaton {{from other}} ω-automata.The Muller automata is defined using Muller <b>acceptance</b> <b>condition,</b> i.e. the set of all states visited infinitely often must be an element of the acceptance set. Both deterministic and non-deterministic Muller automata recognize the ω-regular languages. They are named after David E. Muller an American mathematician and computer scientist, who invented them in 1963.|$|E
5000|$|A [...] is an ω-automaton A {{that uses}} the {{following}} <b>acceptance</b> <b>condition,</b> for some set Ω of pairs (Ei,Fi) of sets of states: ...|$|E
25|$|For each single pushdown {{automaton}} {{these two}} languages {{need to have}} no relation: they may be equal but usually {{this is not the}} case. A specification of the automaton should also include the intended mode of acceptance. Taken over all pushdown automata both <b>acceptance</b> <b>conditions</b> define the same family of languages.|$|R
50|$|In automata theory, {{a branch}} of {{theoretical}} computer science, an ω-automaton (or stream automaton) is a variation of finite automatons that runs on infinite, rather than finite, strings as input. Since ω-automata do not stop, they {{have a variety of}} <b>acceptance</b> <b>conditions</b> rather than simply a set of accepting states.|$|R
40|$|International audienceThis paper investigates <b>acceptance</b> <b>conditions</b> for nite au-tomata {{recognizing}} ω-regular languages. Their expressive {{power and}} their position w. r. t. the Borel hierarchy is also studied. The full characterization for the conditions (ninf,), (ninf, ⊆) and (ninf, =) is given. The nal section provides a partial characterization of (f in, =) ...|$|R
5000|$|A Muller {{automaton}} is an ω-automaton A {{that uses}} the following <b>acceptance</b> <b>condition,</b> for a subset F of P(Q) (the power set of Q): ...|$|E
5000|$|A Streett {{automaton}} is an ω-automaton A {{that uses}} the following <b>acceptance</b> <b>condition,</b> for some set Ω of pairs (Ei,Fi) of sets of states: ...|$|E
5000|$|F⊆Q is the <b>acceptance</b> <b>condition.</b> A accepts exactly those runs {{in which}} {{at least one of}} the {{infinitely}} often occurring states is in F.|$|E
40|$|We {{consider}} {{the problem of}} minimization of generalized Buchi automata. We extend fair-simulation minimization and delayed-simulation minimization to the case where the Buchi automaton has multiple <b>acceptance</b> <b>conditions.</b> For fair simulation, we show how to efficiently compute the fair-simulation relation while maintaining {{the structure of the}} automaton. We then use the fair-simulation relation to merge states and remove transitions. Our fair-simulation algorithm works in time O(mn(3) k(2)) where Tn is the number of transitions, n is the number of states, and k is the number of acceptance sets. For delayed simulation, we extend the existing definition to the case of multiple <b>acceptance</b> <b>conditions.</b> We show that our definition can indeed be used for minimization and give an algorithm that computes the delayed-simulation relation. Our delayed-simulation algorithm works in time O(mn(3) k). We implemented the two algorithms and report on experimental results...|$|R
40|$|Alternating timed automata on {{infinite}} {{words are}} considered. The main {{result is a}} characterization of <b>acceptance</b> <b>conditions</b> for which the emptiness problem for these automata is decidable. This result implies new decidability results for fragments of timed temporal logics. It is also shown that, unlike for MITL, the characterisation remains the same even if no punctual constraints are allowed...|$|R
40|$|Abstract. We {{consider}} {{the problem of}} minimization of generalized Büchi automata. We extend fair-simulation minimization and delayed-simulation minimization to the case where the Büchi automaton has multiple <b>acceptance</b> <b>conditions.</b> For fair simulation, we show how to efficiently compute the fair-simulation relation while maintaining {{the structure of the}} automaton. We then use the fairsimulation relation to merge states and remove transitions. Our fair-simulation algorithm works in time O(mn 3 k 2) where m is the number of transitions, n is the number of states, and k is the number of acceptance sets. For delayed simulation, we extend the existing definition to the case of multiple <b>acceptance</b> <b>conditions.</b> We show that our definition can indeed be used for minimization and give an algorithm that computes the delayed-simulation relation. Our delayed-simulation algorithm works in time O(mn 3 k). We implemented the two algorithms and report on experimental results. ...|$|R
50|$|The above {{description}} of a full machine {{can be viewed as}} a large deterministic automaton. Now, it is left to define the Muller <b>acceptance</b> <b>condition.</b> In this large automaton, we define μn to be the set of states in which the green light flashes and the red light does not flash corresponding to nth Aβ* machine. Let νn be the set of states in which the red light does not flash corresponding to nth Aβ* machine. So, Muller <b>acceptance</b> <b>condition</b> F = { S | ∃n μn ⊆ S ⊆ νn }. This finishes the construction of the desired Muller automaton. Q.E.D.|$|E
50|$|Alternation: This idea {{is quite}} similar to tree {{automaton}}, but orthogonal. The automaton may run its multiple copies on the same next read symbol. Such automata are called alternating automata. <b>Acceptance</b> <b>condition</b> must satisfy all runs of such copies to accept the input.|$|E
5000|$|F {{is a set}} of sets of states. Formally, F ⊆ P(Q) where P(Q) is powerset of Q. F {{defines the}} <b>acceptance</b> <b>condition.</b> A accepts exactly those runs in which the set of {{infinitely}} often occurring states is an element of F ...|$|E
40|$|Abstract. Alternating timed automata on {{infinite}} {{words are}} considered. The main {{result is a}} characterization of <b>acceptance</b> <b>conditions</b> for which the emptiness problem for the automata is decidable. This result implies new decidability results for fragments of timed temporal logics. It is also shown that, unlike for MITL, the characterisation remains the same even if no punctual constraints are allowed. ...|$|R
40|$|We {{describe}} {{a model of}} iterated belief revision that extends the AGM theory of revision {{to account for the}} effect of a revision on the conditional beliefs of an agent. In particular, this model ensures that an agent makes as few changes as possible to the conditional component of its belief set. Adopting the Ramsey test, minimal conditional revision provides <b>acceptance</b> <b>conditions</b> for arbitrary right-nested conditionals. We show that problem of determining acceptance of any such nested conditional can be reduced to acceptance tests for unnested conditionals. Thus, iterated revision can be accomplished in a "virtual" manner, using uniterated revision. 1 Introduction The <b>acceptance</b> <b>conditions</b> for subjunctive conditionals have been widely studied, but no criterion has drawn more attention recently than the Ramsey test. Supposing an agent to possess some belief set K, it is instructed by Stalnaker to accept the conditional A ? B iff it satisfies the following test: First add the anteceden [...] ...|$|R
40|$|Generalized Verification Diagrams combine {{deductive}} and algorithmic verification {{to establish}} general temporal properties of finite and infinite-state reactive systems. The diagram {{serves as an}} abstraction of the system. This abstraction is deductively justified and algorithmically model checked. We present a new simple class of verification diagrams, using Müller <b>acceptance</b> <b>conditions,</b> and show {{how they can be}} used to verify general temporal properties of reactive systems...|$|R
50|$|An {{alternative}} {{characterization of}} PP is {{the set of}} problems that can be solved by a nondeterministic Turing machine in polynomial time where the <b>acceptance</b> <b>condition</b> is that a majority (more than half) of computation paths accept. Because of this some authors have suggested the alternative name Majority-P.|$|E
5000|$|Multiple sets {{of states}} in <b>acceptance</b> <b>condition</b> can be {{translated}} into one set of states by an automata construction, which is known as [...] "counting construction". Lets say A = (Q,Σ,∆,q0,{F1,...,Fn}) is a GBA, where F1,...,Fn are sets of accepting states then the equivalent Büchi automaton is A = (Q, Σ, ∆,q0,F), where ...|$|E
50|$|We {{can then}} formalize this by {{examining}} the formal language associated with each <b>acceptance</b> <b>condition.</b> We assume that the tree is ordered, and read the accept/reject strings off {{the leaves of the}} computation tree. For example, the nondeterministic machine will accept iff the leaf string is in the language {0, 1}*1{0, 1}*, and will reject iff the leaf string is in the language 0*.|$|E
40|$|Finite tree automata on in finite trees which {{move from}} the root {{infinitely}} are investigated through six types of <b>acceptance</b> <b>conditions.</b> Each condition {{is an extension of}} the one used for finite automata on $ omega $-words. We relate the six classes of infinite tree languages with the corresponding classes of $ omega $-languages defined by finite automata, and the relationship among these six classes is established...|$|R
40|$|Over {{the last}} decades the theory of finite automata on {{infinite}} objects {{has been an important}} source of tools for the specification and the verification of computer programs. Trees are more suitable than words to model nondeterminism and thus concurrency. In the literature, there are several examples of <b>acceptance</b> <b>conditions</b> that have been proposed for automata on infinite words and then have been fruitfully extended to infinite trees (Buchi, Rabin, and Muller conditions) ...|$|R
40|$|In {{this paper}} we settle the {{complexity}} of some basic constructions of omega-automata theory, concerning transformations of automata characterizing the set of omega-regular languages. In particular we consider Safra's construction (for the conversion of nondeterministic Büchi automata into deterministic Rabin automata) and the appearance record constructions (for the transformation between different models of deterministic automata with various <b>acceptance</b> <b>conditions).</b> Extending results of Michel (1988) and Dziembowski, Jurdzi'nski, and Walukiewicz (1997), we obtain sharp lower bounds {{on the size of}} the constructed automata...|$|R
5000|$|In {{computational}} complexity theory, {{the complexity}} class ⊕P (pronounced [...] "parity P") is {{the class of}} decision problems solvable by a nondeterministic Turing machine in polynomial time, where the <b>acceptance</b> <b>condition</b> is {{that the number of}} accepting computation paths is odd. An example of a ⊕P problem is [...] "does a given graph have an odd number of perfect matchings?" [...] The class was defined by Papadimitriou and Zachos in 1983.|$|E
50|$|Classes of ω-automata {{include the}} Büchi automata, Rabin automata, Streett automata, parity automata and Muller automata, each {{deterministic}} or non-deterministic. These classes of ω-automata differ {{only in terms}} of <b>acceptance</b> <b>condition.</b> They all recognize precisely the regular ω-languages except for the deterministic Büchi automata, which is strictly weaker than all the others. Although all these types of automata recognize the same set of ω-languages, they nonetheless differ in succinctness of representation for a given ω-language.|$|E
50|$|The Muller automata {{are equally}} {{expressive}} as parity automata, Rabin Automata, Streett automata, and non-deterministic Büchi automata, to mention some, and strictly more expressive than the deterministic Büchi automata. The equivalence {{of the above}} automata and non-deterministic Muller automata can be shown very easily as the accepting conditions of these automata can be emulated using the <b>acceptance</b> <b>condition</b> of Muller automata. McNaughton's Theorem demonstrates the equivalence of non-deterministic Büchi automaton and deterministic Muller automaton. Thus, deterministic and non-deterministic Muller automaton are equivalent {{in terms of the}} languages they can accept.|$|E
40|$|This paper {{proposes a}} {{specific}} model of business intelligence in relation with SMEs practices, culture and competitive environment. This model {{is based on}} the mobilization of corporate tacit knowledge and informal information, aiming at interpreting anticipatory environmental information and assist strategic decision making. An empirical survey assessing the existing business intelligence practices in 20 French SMEs has identified seven necessary <b>acceptance</b> <b>conditions</b> of a business intelligence project as well as a managerial tool allowing tacit knowledge traceability. business intelligence; tacit knowledge; SMEs; sense-making...|$|R
3000|$|... —corresponding to a monostatic imager and an {{extremely}} forward-peaked phase function, respectively- and infinitesimal angle of <b>acceptance</b> (This <b>condition</b> can be imposed by initially setting [...]...|$|R
40|$|Abstract. This paper {{presents}} {{a novel approach}} to modelling embedded agent dialogues. It proposes a specific structure for the supporting information accompanying the arguments that agents exchange during a dialogue, it defines formally how this information relates to the agent theory, and assigns to it semantics that is associated {{to each of the}} atomic dialogue types of the Walton-Krabbe typology. This allows the formal definition of necessary and sufficient initiation and <b>acceptance</b> <b>conditions</b> of licit dialectical shifts that are necessary for the modelling of embedded agent dialogues. ...|$|R
