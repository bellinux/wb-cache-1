0|14|Public
5000|$|Cache manifests {{can also}} use {{relative}} paths or even <b>absolute</b> <b>URLs</b> as shown below. Example 2: CACHE MANIFEST /main/features.js /main/settings/index.css ...|$|R
50|$|However, if {{they are}} <b>absolute</b> <b>URLs,</b> they only work when your network can reach them. Relying on remote {{resources}} makes XML processing susceptible to both planned and unplanned network downtime.|$|R
50|$|Most {{languages}} employ (double) square or angular brackets {{to surround}} links, but hardly any two languages are completely compatible. Many can automatically recognize and parse <b>absolute</b> <b>URLs</b> inside the text without further markup.|$|R
5000|$|<b>Absolute</b> <b>URLs</b> are URLs {{that start}} with a scheme (e.g., [...] ) and conform to scheme-specific syntax and {{semantics}}. For example, the HTTP scheme-specific syntax and semantics for HTTP URLs requires a [...] "host" [...] (web server address) and [...] "absolute path", with optional components of [...] "port" [...] and [...] "query".|$|R
5000|$|In December 1994, [...] {{formally}} defined relative and <b>absolute</b> <b>URLs,</b> refined {{the general}} URL syntax, defined how to resolve relative <b>URLs</b> to <b>absolute</b> form, and better enumerated the URL schemes then in use. The agreed definition and syntax of URNs {{had to wait}} until the publication of [...] in May 1997.|$|R
5000|$|If {{addressed}} in CDNI speciﬁcations, support of HTTP adaptive streaming (HAS) [...] is particularly realised. Large objects are broken into {{a sequence of}} small, independent chunks, e.g. videos, that are perceived {{as if there were}} no relationship between the chunks. As a result, content acquisition and chunk purging are performed on a per-chunk basis. In order to reduce the CDNI load, speciﬁcations either allow relative Uniform Resource Locators (<b>URLs)</b> or modify <b>absolute</b> <b>URLs</b> in the manifest ﬁle of a resource distributed via HAS.|$|R
50|$|Moreover, if an XML {{document}} {{is transferred from}} computer to computer, the line terminator may be changed from CR to LF to CR LF, etc. A program that digests and validates an XML document may later render the XML document in a different way, e.g. adding excess space between attribute definitions with an element definition, or using relative (vs. <b>absolute)</b> <b>URLs,</b> or by reordering namespace definitions. Canonical XML is especially important when an XML Signature refers to a remote document, which may be rendered in time-varying ways by an errant remote server.|$|R
50|$|HTTP Live Streaming (HLS) is an HTTP-based media {{streaming}} {{communications protocol}} implemented by Apple Inc. {{as part of}} QuickTime X and iOS. HLS supports both live and Video on demand content. It works by breaking down streams or video assets into several small MPEG2-TS files (video chunks) of varying bit rates and set duration using a stream or file segmenter. One such segmenter implementation is provided by Apple. The segmenter is also responsible for producing a set of index files in the M3U8 format which acts as a playlist file for the video chunks. Each playlist pertains to a given bitrate level, and contains the relative or <b>absolute</b> <b>URLs</b> to the chunks with the relevant bitrate. The client is then responsible for requesting the appropriate playlist depending on the available bandwidth.|$|R
40|$|This paper {{presents}} {{the design and}} implementation of a network-level support mechanism that enables transparent proxy caching of web objects using standard non-transparent proxy caches. There are commercial caching products available for transparent proxy caching [1, 2, 3, 4]. These solutions require that proxy caches be aware that they are receiving web requests transparent to the clients. These proxy caches are required to receive redirected client requests possibly using promiscuous TCP, construct <b>absolute</b> <b>URLs</b> to determine {{the name of the}} requested object and also masquerade as the origin server before sending the reply back to the client. In our implementation, we perform all these functions at the network level at the switch that redirects client requests to the proxy caches. This way, the proxy cache is not made aware that requests are transparently redirected to it. Requests appear to the proxy cache as if they come from a client whose browser has been congured to redirect req [...] ...|$|R
25|$|Fields: This {{collection}} contains {{a set of}} Field objects. The collection {{can be used in}} either a Recordset object or in a Record object. In a Recordset object, each of the Field objects that make up the Fields collection corresponds to a column in that Recordset object. In a Record object, a Field can be an <b>absolute</b> or relative <b>URL</b> that points into a tree-structured namespace (used for semi-structured data providers like the Microsoft OLE DB Provider for Internet Publishing) or as a reference to the default Stream object associated with that Record object.|$|R
40|$|Traditional {{approaches}} to ranking in web search follow {{the paradigm of}} rank-by-score: a learned function gives each query-URL combination an <b>absolute</b> score and <b>URLs</b> are ranked according to this score. This paradigm ensures that if the score of one URL is better than another then one will always be ranked higher than the other. Scoring contradicts prior work in behavioral economics that showed that users' preferences between two items depend {{not only on the}} items but also on the presented alternatives. Thus, for the same query, users' preference between items A and B depends on the presence/absence of item C. We propose a new model of ranking, the Random Shopper Model, that allows and explains such behavior. In this model, each feature is viewed as a Markov chain over the items to be ranked, and the goal is to find a weighting of the features that best reflects their importance. We show that our model can be learned under the empirical risk minimization framework, and give an efficient learning algorithm. Experiments on commerce search logs demonstrate that our algorithm outperforms scoring-based approaches including regression and listwise ranking. Comment: Appears in Proceedings of the 29 th International Conference on Machine Learning (ICML 2012...|$|R

