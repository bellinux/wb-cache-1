0|13|Public
50|$|Arrays {{can contain}} mixed {{elements}} of any type, including resources, objects. Multi-dimensional arrays {{are created by}} assigning arrays as <b>array</b> elements. <b>PHP</b> has no true <b>array</b> type. <b>PHP</b> <b>arrays</b> are natively sparse and associative. Indexed arrays are simply hashes using integers as keys. Objects can syntactically be used as Arrays.|$|R
5000|$|JSON {{is another}} simple outline {{language}} (which {{is also the}} base of similar associative <b>array</b> initializers in <b>PHP).</b>|$|R
50|$|Tables are {{the most}} {{important}} data structures (and, by design, the only built-in composite data type) in Lua and are the foundation of all user-created types. They are conceptually similar to associative <b>arrays</b> in <b>PHP,</b> dictionaries in Python and hashes in Ruby or Perl.|$|R
5000|$|<b>PHP</b> <b>arrays</b> are {{natively}} autovivificious.$arr = array (...)$arr"express"3 = [...] "stand and deliver";However, {{this only}} applies to assignment, and not array access.|$|R
5000|$|... blogPosts is a <b>PHP</b> <b>array,</b> {{which is}} passed to fluid from {{external}} PHP code (the ViewHelper). The template iterates over this array and prints {{the title of}} each post object.|$|R
5000|$|TypoScript is {{a purely}} {{declarative}} configuration language. In Typoscript, configuration values are defined, which are parsed into a system-wide <b>PHP</b> <b>array.</b> TypoScript is object-based and organized in a tree-like structure.|$|R
50|$|Internally, TYPO3 {{is managed}} by various <b>PHP</b> <b>arrays.</b> They contain all the {{information}} necessary to generate HTML code from the content stored in the database. This is achieved by a unique configuration language called TypoScript.|$|R
5000|$|Pootle itself works {{directly}} on Gettext PO and XLIFF files, {{as well as}} Qt [...]ts, TBX and TMX (since version 2.0.3). Since Pootle 2.1.0 there is also native support for several other formats, such as Java [...]properties files, <b>PHP</b> <b>array</b> files, Mac OS X strings and several subtitle formats.|$|R
40|$|Abstract—XSS {{attacks have}} become very common nowadays, due to bad-written PHP web applications. In order to provide users with {{rudimentary}} protection against XSS attacks most web browser vendors have developed built-in protection mechanisms, called XSS filters. In this paper, we analyze two attacks that take advantage of poorly written PHP code to bypass the XSS filter of WebKit engine named XSS Auditor and perform XSS attacks. In particular, the first attack is called <b>PHP</b> <b>Array</b> Injection, while the second attack is {{a variant of the}} first one and it is named as PHP Array-like Injection. Both attacks take advantage of improper management of variables and <b>arrays</b> in <b>PHP</b> code to bypass the XSS Auditor. We elaborate on these attacks by presenting concrete examples of poorly written PHP code and constructing attack vectors to bypass the XSS Auditor. To defend against the identified attacks, we provide proper code writing rules for developers, in order to build secure web applications. Additionally, we have managed to patch the XSS Auditor, so that it can detect our identified XSS attacks...|$|R
5000|$|Unusually for a {{dynamically}} typed language, PHP supports type declarations on function parameters, {{which are}} enforced at runtime. This {{has been supported}} for classes and interfaces since <b>PHP</b> 5.0, for <b>arrays</b> since <b>PHP</b> 5.1, for [...] "callables" [...] since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP 7.0. PHP 7.0 also has type declarations for function return types, expressed by placing the type name after the list of parameters, preceded by a colon. For example, the [...] function from the earlier example could be annotated with types like so in PHP 7: ...|$|R
40|$|This report {{describes}} how {{to extend a}} functional mediator system Amos II for allowing access from web servers through PHP. Several possibilities are analysed to combine the Amos II external interface with PHP. Based on this discussions, new functionality {{has been added to}} the PHP language by implementing a PHP external module. A basic API between PHP and Amos II is proposed in this workout. The interface was illustrated by implementing a web interface to a simple database. Further studies and experiences from this illustration resulted in a simplified and more dynamic interface definition based on <b>PHP</b> <b>arrays...</b>|$|R
40|$|International audienceIn {{previous}} works, we {{have proposed}} Praspel, {{a framework for}} contract-based testing in PHP. Among others, it includes a specification language and a unit test generator which automatically generates test data from formal preconditions. The generator sometimes rejects data, {{when they do not}} satisfy parts of the preconditions. In many cases, generation with rejection is not efficient enough. Thus we investigate practical contexts where more efficient generation algorithms can be designed and we extend Praspel with their implementation. After strings, that we have already considered, the most frequent data type in <b>PHP</b> is <b>arrays.</b> They cover most of the needs for collections, because they can store key-value pairs of any kind, {{they do not have a}} specific length or depth, and they are efficiently implemented. In this paper, we report on a study to know what are the most popular constraints on <b>PHP</b> <b>arrays.</b> Then we formalize these constraints and we present an implementation in PHP of a constraint solver for these constraints. In this context, the constraint-based approach removes all the rejections...|$|R
5000|$|Near 2003 a {{group of}} {{enthusiastic}} people started writing on mailing lists and forums presenting {{the idea of a}} PHP extension that wrapped the wxWidgets library in a similar way that PHP-GTK does for GTK+. A SourceForge project was created and many people joined in an effort to move the cause forward and make it a reality. Despite the will of project members, the same wasn't going anywhere [...] until Mário Soares decided to join in. After the join, the first commits were done to the CVS repository on sourceforge. The first commits consisted of wrapping the wxApp class, wxFrame and some other basic controls, this is when wxPHP first saw the light. Inspired on wrapper generators like SWIG, development was started for a simple code generator that read the output of GCCXML ran over wxWidgets and transformed into a serialized <b>PHP</b> <b>array.</b> This helped save {{a lot of time on}} the monotonous task of writing the same code again and again for each class and its methods. After having some basic functionality and controls, an application was written using wxPHP itself, to assist the code generator on the selection of class methods that it could handle correctly.|$|R

