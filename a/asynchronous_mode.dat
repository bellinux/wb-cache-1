182|1555|Public
25|$|It is {{expressed}} near {{most of the}} serotoninergic terminal rich areas, including neocortex (mainly prefrontal, parietal, and somatosensory cortex) and the olfactory tubercle. Especially high concentrations of this receptor on the apical dendrites of pyramidal cells in layer V of the cortex may modulate cognitive processes, working memory, and attention receptors, increases EPSCs in layer V pyramidal cells of prefrontal cortex by an <b>asynchronous</b> <b>mode</b> of glutamate release | journal = Brain Research | volume = 825 | issue = 1–2 | pages = 161–71 | date = April 1999 | pmid = 10216183 | doi = 10.1016/S0006-8993(99)01224-X }} by enhancing glutamate release followed by a complex range of interactions with the 5-HT1A, GABAA, adenosine A1, AMPA, mGluR2/3, mGlu5, and OX2 receptors. In the rat cerebellum, the protein has also {{been found in the}} Golgi cells of the granular layer,, 5-HT3, 5-HT5A and 5-HT7 receptor-like immunoreactivity in the rat cerebellum | journal = Journal of Chemical Neuroanatomy | volume = 24 | issue = 1 | pages = 65–74 | date = June 2002 | pmid = 12084412 | doi = 10.1016/S0891-0618(02)00020-0 }} and in the Purkinje cells.|$|E
50|$|A session may {{operate in}} one of two modes: <b>asynchronous</b> <b>mode</b> and demand mode. In <b>asynchronous</b> <b>mode,</b> both {{endpoints}} periodically send Hello packets to each other. If a number of those packets are not received, the session is considered down.|$|E
50|$|Parallel SCSI {{specifications}} {{include several}} synchronous transfer modes for the parallel cable, and an <b>asynchronous</b> <b>mode.</b> The <b>asynchronous</b> <b>mode</b> {{is a classic}} request/acknowledge protocol, which allows systems with a slow bus or simple systems to also use SCSI devices. Faster synchronous modes are used more frequently.|$|E
5000|$|ADCCP has 3 main modes - NRM (Normal Response mode akin to SDLC), ABM (<b>Asynchronous</b> Balanced <b>mode</b> - akin to HDLC) and ARM (<b>Asynchronous</b> Response <b>mode)</b> ...|$|R
50|$|HDLC can be {{used for}} point to {{multipoint}} connections, but is now used almost exclusively to connect one device to another, using what is known as <b>Asynchronous</b> Balanced <b>Mode</b> (ABM). The original master-slave modes Normal Response <b>Mode</b> (NRM) and <b>Asynchronous</b> Response <b>Mode</b> (ARM) are rarely used.|$|R
40|$|In {{this paper}} we showhow {{it might be}} {{possible}} to adapt <b>asynchronous</b> transfer <b>mode</b> technology to satellite links. <b>Asynchronous</b> transfer <b>mode</b> is a high-speed protocol designed with optic fiber as the intended transmission media. Several problems arise when satellite channels are used. We propose to move the error recovery and detection from one layer of the <b>asynchronous</b> transfer <b>mode</b> protocol to a higher layer. Academic Part Time, email: murphy@systems. caltech. edu y Member of Technical Staff, email: edward chow@isd. jpl. nasa. gov z Technical Manager, email: markley@isd. jpl. nasa. gov 1 We base the retransmission straegy on the service carried, which utilises the ability of <b>asynchronous</b> transfer <b>mode</b> protocol to differentiate services. Our simulation results show that we not only increase the raw data throughput for satellite channels to almost the theoretical limit, but wehave improved the data transfer efficiency of the <b>asynchronous</b> transfer <b>mode</b> protocol by 7. 5 percent. Our results also show that it is possible to guarantee data services with no loss of data under certain conditions...|$|R
50|$|Synchronous and {{asynchronous}} update propagation: The {{updates on}} cache table shall be propagated to target database in two modes. Synchronous mode {{makes sure that}} after the database operation completes the updates are applied at the target database as well. In case of <b>Asynchronous</b> <b>mode</b> the updates are delayed to the target database. Synchronous mode gives high cache consistency and is suited for real time applications. <b>Asynchronous</b> <b>mode</b> gives high throughput and is suited for near real time applications.|$|E
50|$|Multiple {{variable}} {{bit rate}} digital bit streams may be transferred efficiently over a single fixed bandwidth channel by means of statistical multiplexing. This is an <b>asynchronous</b> <b>mode</b> time-domain multiplexing which {{is a form of}} time-division multiplexing.|$|E
50|$|Tools to {{validate}} the coherence of cache: In case of <b>asynchronous</b> <b>mode</b> of update propagation, cache at different cache nodes and target database may diverge. This {{needs to be resolved}} manually, with mismatches identified and corrective measures taken if required.|$|E
5000|$|... 176 - Standardized Profile For <b>Asynchronous</b> Transfer <b>Mode</b> (ATM) ...|$|R
50|$|<b>Asynchronous</b> Balanced <b>Mode</b> (ABM) is a {{balanced}} configuration in which either station initialize, supervise, recover from errors, and send frames at any time. There is no master/slave relationship. The DTE (Data Terminal Equipment) and DCE (Data circuit-terminating equipment) {{are treated as}} equals. The initiator for <b>Asynchronous</b> Balanced <b>Mode</b> sends an SABM.|$|R
2500|$|... 176 [...] - Standardized Profile For <b>Asynchronous</b> Transfer <b>Mode</b> (ATM) ...|$|R
5000|$|... 8-N-1 is {{a common}} {{shorthand}} notation for a serial port parameter setting or configuration in <b>asynchronous</b> <b>mode,</b> {{in which there are}} eight (8) data bits, no (N) parity bit, and one (1) stop bit. [...] As such, 8-N-1 is the most common configuration for PC serial communications today.|$|E
50|$|Real-time XTI {{end user}} {{application}} will use XTI interface asynchronously (otherwise {{there are no}} guarantees about how long a call waiting for data will block). The set of functions is the same as synchronous calls but when initializing transport endpoint, O_NONBLOCK parameter is provided. XTI <b>asynchronous</b> <b>mode</b> permits end user application be notified about various events of file handles: connections indications requests, new data, time outs.|$|E
5000|$|The [...] Dynamic Invocation Interface (DII) [...] is an API {{which allows}} dynamic {{construction}} of CORBA object invocations. It is used at compile {{time when a}} client does not have knowledge about the object it wants to invoke. With this interface an argument list is marshalled, a function is named, and a request for service {{is sent to the}} object server. DII will usually have an <b>asynchronous</b> <b>mode</b> of operation.|$|E
50|$|The {{number of}} bytes in an <b>Asynchronous</b> Transfer <b>Mode</b> packet.|$|R
5000|$|AES47 - {{professional}} AES3-style {{digital audio}} over <b>Asynchronous</b> Transfer <b>Mode</b> networks ...|$|R
5000|$|Voice over <b>Asynchronous</b> Transfer <b>Mode</b> (VoATM) is a data {{protocol}} used {{to transport}} packetized voice signals over an <b>Asynchronous</b> Transfer <b>Mode</b> (ATM) network. [...] In ATM, the voice traffic is encapsulated using AAL1/AAL2 ATM packets. VoATM over DSL {{is a similar}} service, {{which is used to}} carry packetized voice signals over a DSL connection.|$|R
5000|$|Activity along a synfire chain propagates in a {{synchronous}} or an [...] mode. In the <b>asynchronous</b> <b>mode,</b> {{an elevated}} firing rate in one pool will accumulate, {{and increase the}} firing rate in the next layer. In the synchronous mode, a volley of spikes in one layer will elicit a synchronous volley in the other, after one synaptic delay. It {{has been argued that}} the only stable mode of transmission is the synchronous mode.|$|E
50|$|As {{the picture}} illustrates, the <b>asynchronous</b> <b>mode</b> allows the non-Java program {{to get control}} and do other processing. That implies {{checking}} for a response at some future point. BBOA1RCL is used for that purpose. In this example BBOA1RCL is issued synchronously (parameter async=0). If a response is available BBOA1RCL will provide the length and program control returns to the program. If no response is available BBOA1RCL holds program control until one is available. BBOA1RCL with async=1 will return x'FFFFFFFF' if no response is available; program control is returned immediately.|$|E
5000|$|Since CMC doesn't require {{copresence}} the way FtF communication does, {{members can}} {{take part in}} activities at their own convenience, taking advantaged of disentrained communication channels. Walther cites a relaxation of time constraints in CMC, often allowing for an <b>asynchronous</b> <b>mode</b> of communication. For example, with group communication, [...] "...Making temporal commitments becomes discretionary. Group members may attend to the group process independently in time. When partners may attend their groups at their convenience, limitations {{on the amount of}} partners' mutual time available for meetings are less problematic." ...|$|E
5000|$|The BTS {{is always}} able to enter <b>asynchronous</b> {{balanced}} <b>mode</b> when requested.|$|R
40|$|The paper {{presents}} an EEG-based wireless brain-computer interface (BCI) with which subjects can mind-spell text {{on a computer}} screen. The application is based on detecting steady-state visually evoked potentials (SSVEP) in EEG signals recorded on the scalp of the subject. The performance of the BCI is compared for two different classification paradigms: synchronous and <b>asynchronous</b> <b>modes.</b> status: publishe...|$|R
40|$|Nonlocal {{vibration}} of a double-nanoplate-system is considered. Eringen’s nonlocal elasticity is {{utilized for}} modelling the coupled nano-system. The nonlocal theory {{accounts for the}} small-scale effects arising at the nanoscale. The two nanoplates {{are assumed to be}} elastically connected by an enclosing elastic medium. The study highlights that the small-scale effects considerably influence the transverse vibration of double-nanoplate-system. The nonlocal frequencies are lower than the classical frequencies. The small-scale effects in double-nanoplate-system are higher with the increasing values of nonlocal parameter for the case of synchronous modes of vibration than in the <b>asynchronous</b> <b>modes.</b> The increase of the stiffness of the coupling springs in double-nanoplate-system reduces the small-scale effects during the <b>asynchronous</b> <b>modes</b> of vibration. Present work may provide an analytical scale-based nonlocal approach which could serve as the starting point for further investigation of more complex n-nanoplates systems arising in future generation graphene based nanocomposites...|$|R
50|$|MPI library {{functions}} include, but are {{not limited}} to, point-to-point rendezvous-type send/receive operations, choosing between a Cartesian or graph-like logical process topology, exchanging data between process pairs (send/receive operations), combining partial results of computations (gather and reduce operations), synchronizing nodes (barrier operation) as well as obtaining network-related information such as the number of processes in the computing session, current processor identity that a process is mapped to, neighboring processes accessible in a logical topology, and so on. Point-to-point operations come in synchronous, asynchronous, buffered, and ready forms, to allow both relatively stronger and weaker semantics for the synchronization aspects of a rendezvous-send. Many outstanding operations are possible in <b>asynchronous</b> <b>mode,</b> in most implementations.|$|E
5000|$|Note: When {{communicating}} in <b>asynchronous</b> <b>mode</b> with an ISO/IEC 7816-3 contact Smart Card using {{a serial}} interface device operating per direct convention (such {{as a standard}} UART), it can be set to 8 bits, 1 even parity bit, 2 stop bits (sometime negotiable to 1, see TC1); during the ATR, the baud rate should be 1/372 of the clock frequency received by the card (corresponding to an ETU of 372 clock cycles). There will normally be no parity error or framing error. The first byte received is [...] if the card operates in direct convention, [...] if the cards operates in inverse convention, {{in which case the}} polarity and order of all 8 bits of each byte going through the serial interface device should be reversed, which in particular will change the first byte [...] to [...]|$|E
3000|$|..., {{it will be}} {{attended}} in <b>asynchronous</b> <b>mode</b> to {{be saved}} into its reception circular buffer. Once it is saved, the m [...]...|$|E
25|$|<b>Asynchronous</b> Transfer <b>Mode,</b> Scalable Coherent Interface, Fibre Channel, Ethernet, and IEEE 1355 (SpaceWire).|$|R
5000|$|<b>Asynchronous</b> Transfer <b>Mode</b> (ATM), {{switched}} virtual connections only, {{as part of}} an NSAP address ...|$|R
30|$|On {{the other}} hand, there are studies which {{reported}} results contradicting the above results regarding learners’ {{higher number of}} feedback in terms of focus areas. For instance, Ho (2015) reported {{that the number of}} global feedback that focused on content, organization and purpose in the FFPR mode was higher than that of global feedback in the CAPR mode. Chang (2012) found also differences in the number of feedback not only between FFPR and CAPR modes, but also between synchronous and <b>asynchronous</b> <b>modes.</b> The researcher found that in both FFPR and synchronous CAPR modes, the learners produced a higher number of global feedback than they did in the <b>asynchronous</b> CAPR <b>mode.</b> This was attributed to the delayed time in the <b>asynchronous</b> CAPR <b>mode.</b> In other words, when learners engaged in asynchronous CAPR, they had time to delay their responses, which made their peers shift the focus of their feedback from global issues to local issues.|$|R
30|$|A new {{reception}} module must be implemented. It {{must include}} a circular buffer into the RAM memory to save all the incoming messages. Each time a packet is {{received from the}} transceiver (in <b>asynchronous</b> <b>mode),</b> it will be saved in this buffer.|$|E
40|$|System interrogates and {{maintains}} user-definable data files from remote terminals, using English-like, free-form query language easily learned by persons not proficient in computer programming. System operates in <b>asynchronous</b> <b>mode,</b> allowing {{any number of}} inquiries within limitation of available core to be active concurrently...|$|E
30|$|When a new message {{event is}} {{received}} by moteC, {{it gets the}} message from the transceiver and sends it to QueuedReceiverC through the QReceive interface. Everything in this chain is working in <b>asynchronous</b> <b>mode</b> so all these operations will {{be done with the}} highest priority.|$|E
5000|$|AES47, AES51 and AES53 {{for sending}} AES3 digital audio data over <b>Asynchronous</b> Transfer <b>Mode</b> {{networks}} ...|$|R
5000|$|Centillion Networks, Inc. (May, 1995) - Provided <b>Asynchronous</b> Transfer <b>Mode</b> {{switching}} and Token Ring technology.|$|R
5000|$|... {{supports}} <b>asynchronous</b> io <b>mode</b> for dns, ssl and http {{using the}} asio and stream library ...|$|R
