125|178|Public
5|$|In {{high-speed}} territorial {{battles between}} male Australian emperors (Hemianax papuensis), the fighting dragonflies adjust their flight paths to appear stationary to their rivals, minimizing {{the chance of}} being detected as they approach. To achieve the effect, the attacking dragonfly flies towards his rival, choosing his path to remain on a line between the rival {{and the start of}} his <b>attack</b> <b>path.</b> The attacker thus looms larger as he closes on the rival, but does not otherwise appear to move. Researchers found that six of 15 encounters involved motion camouflage.|$|E
50|$|Hal Burch and William Cheswick {{propose a}} {{controlled}} flooding of links {{to determine how}} this flooding affects the attack stream. Flooding a link will cause all packets, including packets from the attacker, to be dropped with the same probability. We can conclude from this that if a given link were flooded, and packets from the attacker slowed, then this link {{must be part of}} the <b>attack</b> <b>path.</b> Then recursively upstream routers are “coerced” into performing this test until the <b>attack</b> <b>path</b> is discovered.|$|E
5000|$|Makes precise {{recommendations}} for threat mitigation, including {{the ability to}} visualize the <b>attack</b> <b>path</b> and identify {{the source of the}} threat with detailed topological graphs that simplify security response at Layer 2 and Layer 3 ...|$|E
40|$|Attack graphs {{present a}} visual {{representation}} {{of all the}} potential vulnerabilities and <b>attack</b> <b>paths</b> in a network. They act as a vital security tool in finding the critical <b>attack</b> <b>paths</b> in the enterprise wide networks. Generated attack graphs for complex networks present thousands of <b>attack</b> <b>paths</b> to visualize and represent to the end user. Enhancing the visualization of attack graphs by adding user interactivity will greatly improve in analyzing attack graphs and identifying the critical <b>attack</b> <b>paths</b> in the enterprise network. The layout of the attack graph can be adjusted to represent {{the layout of the}} real world enterprise network. Adding user interactivity to attack graphs is done using Prefuse, a software framework written in Java for information visualization. Prefuse is flexible and got the ability to render large amounts of data in an efficient manner. The visualization framework for the attack graphs provides a GUI tool for interacting with attack graph. The framework is a layered architecture with two important layers, the static layer and the dynamic layer. The static layer translates the attack graph trace generated from MuLVAL into a standard graphviz dot language descriptive file. The dynamic layer translates the graphviz do...|$|R
50|$|Comodo Penetration Testing - Comodo Penetration Tests will {{identify}} critical <b>attack</b> <b>paths</b> present in network infrastructure manually and provide advice to eliminate threats.|$|R
40|$|Abstract-Attack graphs {{are used}} to compute {{potential}} <b>attack</b> <b>paths</b> from a system configuration and known vulnerabilities of a system. Attack graphs {{can be used to}} determine known vulnerability sequences that were exploited to launch the attacks and help forensic examiners in identifying many potential <b>attack</b> <b>paths.</b> After an <b>attack</b> happens, forensic analysis, including linking evidence with attacks, helps further understand and refine the attack scenario that was launched. Given that there are anti-forensic tools that can obfuscate, minimize or eliminate attack footprints, forensic analysis becomes harder. As a solution, we propose to apply attack graph to forensic analysis. We do so by including anti-forensic capabilities into attack graphs, so that the missing evidence can be explained by using longer <b>attack</b> <b>paths</b> that erase potential evidence. We show this capability in an explicit case study involving a Database attack...|$|R
50|$|In {{this type}} of solution, an {{observer}} tracks an existing attack flow by examining incoming and outgoing ports on routers starting from the host under attack. Thus, such a solution requires having privileged access to routers along the <b>attack</b> <b>path.</b>|$|E
50|$|For {{the first}} alternative, marking packets with the router's IP address, {{analysis}} {{shows that in}} order to gain the correct <b>attack</b> <b>path</b> with 95% accuracy as many as 294,000 packets are required. The second approach, edge marking, requires that the two nodes that make up an edge mark the path with their IP addresses along with the distance between them. This approach would require more state information in each packet than simple node marking but would converge much faster. They suggest three ways to reduce the state information of these approaches into something more manageable.|$|E
50|$|In {{high-speed}} territorial {{battles between}} male Australian emperors (Hemianax papuensis), the fighting dragonflies adjust their flight paths to appear stationary to their rivals, minimizing {{the chance of}} being detected as they approach. To achieve the effect, the attacking dragonfly flies towards his rival, choosing his path to remain on a line between the rival {{and the start of}} his <b>attack</b> <b>path.</b> The attacker thus looms larger as he closes on the rival, but does not otherwise appear to move. Researchers found that six of 15 encounters involved motion camouflage.|$|E
40|$|Master of ScienceDepartment of Computing and Information SciencesXinming OuAttack graphs {{present a}} visual {{representation}} {{of all the}} potential vulnerabilities and <b>attack</b> <b>paths</b> in a network. They act as a vital security tool in finding the critical <b>attack</b> <b>paths</b> in the enterprise wide networks. Generated attack graphs for complex networks present thousands of <b>attack</b> <b>paths</b> to visualize and represent to the end user. Enhancing the visualization of attack graphs by adding user interactivity will greatly improve in analyzing attack graphs and identifying the critical <b>attack</b> <b>paths</b> in the enterprise network. The layout of the attack graph can be adjusted to represent {{the layout of the}} real world enterprise network. Adding user interactivity to attack graphs is done using Prefuse, a software framework written in Java for information visualization. Prefuse is flexible and got the ability to render large amounts of data in an efficient manner. The visualization framework for the attack graphs provides a GUI tool for interacting with attack graph. The framework is a layered architecture with two important layers, the static layer and the dynamic layer. The static layer translates the attack graph trace generated from MuLVAL into a standard graphviz dot language descriptive file. The dynamic layer translates the graphviz dot file into a graph object that can be interpreted and visualized using the prefuse software framework. Preliminary result in this work has been published in [19]...|$|R
40|$|IP traceback is {{a defense}} method {{to help a}} victim to {{identifying}} the sources of attacking packets. In this paper, we propose an IP traceback method based on the Chinese Remainder Theorem to require routers to probabilistically mark packets with partial path information when packets traverse routers through the Internet. The routers with the proposed IP traceback method can interoperate seamlessly with legacy routers and be incrementally deployable. The simulation reveals that our method requires fewer numbers of marked packets and takes less time to reconstruct the <b>attacking</b> <b>paths,</b> and has lower false combination rate {{in comparison with the}} previous works [10, 13, 15]. Furthermore, by our method, a victim does not need to maintain the network topology while it reconstructs <b>attacking</b> <b>paths...</b>|$|R
40|$|Currently, network administrators {{must rely}} on labor-intensive {{processes}} for tracking network configurations and vulnerabilities, which requires {{a great deal of}} expertise and is error prone. The organization of networks and the interdependencies of vulnerabilities are so complex as to make traditional vulnerability analysis inadequate. We describe a Topological Vulnerability Analysis (TVA) approach that analyzes vulnerability dependencies and shows all possible <b>attack</b> <b>paths</b> into a network. From models of the network vulnerabilities and potential attacker exploits, we discover <b>attack</b> <b>paths</b> (organized as graphs) that convey the impact of individual and combined vulnerabilities on overall security. We provide sophisticated attack graph visualizations, with high-level overviews and detail drilldown. Decision support capabilities let analysts make optimal tradeoffs between safety and availability, and show how to best apply limited security resources. We employ efficient algorithms that scale well to larger networks. 1...|$|R
5000|$|Robb's ability {{was put to}} use in Operation Bertram, the {{large-scale}} camouflage and deception operation for the battle of El Alamein. Barkas put Tony Ayrton and Robb {{in charge of the}} enormous and complex task of camouflaging Eighth Army's preparations and movements on the genuine <b>attack</b> <b>path</b> in the north, near the coast road, while creating a complete dummy armoured division in the south, near El Munassib in the desert. The dummy stores dump in the south was codenamed [...] "Brian" [...] after Robb. The dump contained 700 false piles of stores, simulating everything from ammunition and petrol to food and engineering tools.|$|E
50|$|On February 4, 2005, {{on their}} 50th flight, the two X-45As took {{off into a}} patrol pattern and were then alerted to the {{presence}} of a target. The X-45As then autonomously determined which vehicle held the optimum position, weapons (notional), and fuel load to properly attack the target. After making that decision, one of the X-45As changed course and the ground-based pilot authorized the consent to attack the simulated antiaircraft emplacement. Following a successful strike, another simulated threat, this time disguised, emerged and was subsequently destroyed by the second X-45A. This demonstrated the ability of these vehicles to work autonomously as a team and manage their resources, as well as to engage previously-undetected targets, which is significantly harder than following a predetermined <b>attack</b> <b>path.</b>|$|E
50|$|Players can {{manipulate}} their character by using either a dance pad, a keyboard, or a gamepad. Unlike traditional roguelikes, the player {{can only have}} their character move or attack if they perform the action on {{the beat of the}} music. As with many rhythm games, each successful beat match boosts a coin scoring multiplier. Failure to match the beat does not directly harm the character in most situations, but does reset the scoring multiplier and may cause the character to be harmed by a nearby monster if he/she is in their <b>attack</b> <b>path.</b> The character can also be harmed by moving into a monster's attack. When the character's health meter empties, the game is over. Monsters move according to predetermined patterns which the player must learn in order to attack and avoid damage.|$|E
50|$|Endpoint {{security}} or endpoint protection is {{an approach to}} the protection of computer networks that are remotely bridged to client devices. The connection of laptops, tablets, mobile phones and other wireless devices to corporate networks creates <b>attack</b> <b>paths</b> for security threats. Endpoint security attempts to ensure that such devices follow a definite level of compliance to standards.|$|R
40|$|In-depth {{analysis}} of network security vulnerability must consider attacker exploits {{not just in}} isolation, but also in combination. The general approach to this problem is to compute <b>attack</b> <b>paths</b> (combinations of exploits), from which one can decide whether a given set of network hardening measures guarantees the safety of given critical resources. We go beyond <b>attack</b> <b>paths</b> to compute actual sets of hardening measures (assignments of initial network conditions) that guarantee the safety of given critical resources. Moreover, for given costs associated with individual hardening measures, we compute assignments that minimize overall cost. By doing our minimization {{at the level of}} initial conditions rather than exploits, we resolve hardening irrelevancies and redundancies in a way that cannot be done through previously proposed exploit-level approaches. Also, we use an efficient exploit-dependency representation based on monotonic logic that has polynomial complexity, as opposed to many previous attack graph representations having exponential complexity. 1...|$|R
40|$|Risk {{assessment}} determines {{threats to}} critical {{resources and the}} corresponding loss expectancy. Bayesian network is used to model potential <b>attack</b> <b>paths</b> in a system. Knowledge of attackers and attack mechanisms are used to fetch the subset of <b>attack</b> <b>paths.</b> Security risk assessment and mitigation are two vital processes. Models such as attack graphs and attack trees are {{used to assess the}} cause-consequence relationships between various network states. Different decision problems are considered to identify the minimum-cost hardening measures. Common Vulnerability Scoring System (CVSS) is used to estimate thesecurity risk and vulnerability levels. Genetic algorithm is used to select solutions for risk mitigation stage. The system performs static and dynamic analysis of risks in networked systems. Single objective and multi objective optimization models are used for solution selection process. The Single Objective Optimization Problem (SOOP) and Multi Objective Optimization Problem (MOOP) solution are prepared with minimum time complexity. www. techscripts. or...|$|R
5000|$|Blade {{appears in}} the fourth of four anime series of the Marvel Anime project. In {{addition}} to all his above skills and powers, Blade's swordsmanship in particular is shown to be especially advanced. Blade's sword-style revolves mainly around his mastery of Yagu Shinkage-ryu, a kenjutsu art that can unleash powerful shockwaves or transparent wind blades from his sword swings, allowing him to blast or slice respectively his opponents from a distance. The Yagu Shinkage-ryu also has three principle Yagyu techniques. The first technique, [...] "The First Blade: Residual Moon", draws a small circle {{with the tip of}} his sword, producing a perfectly tangible after-image of himself for diversions. The second technique [...] "The Second Blade: Phantom Moon", involves a high-speed spin, allowing Blade to launch an omni-directional slash in rapid succession with such intensity, it sets his strike ablaze. The final technique, [...] "The Third Blade: Chaotic Moon", launches several shadow blades around the opponent, hiding the user's <b>attack</b> <b>path</b> with little chance of being noticed.|$|E
40|$|Abstract. The {{difficulty}} {{associated with}} breaching an enterprise network is {{commensurate with the}} security of that network. A security breach, or a security policy violation, {{occurs as a result}} of an attacker successfully executing some <b>attack</b> <b>path.</b> The difficulty associated with this <b>attack</b> <b>path,</b> then, is critical to understanding how secure a given network is. Currently, however, there are no consistent methods for measuring <b>attack</b> <b>path</b> complexity that make the assumptions of a modeler explicit while providing flexibility in how the modeler models the <b>attack</b> <b>path.</b> To provide these desirable attributes, we propose a regularexpressions-inspired language whose rationale for <b>attack</b> <b>path</b> complexity measurement is based on Kolmogorov Complexity. After detailing our Kolmogorov Complexity-based method, we demonstrate how it can be applied to a novel security metric: the K-step Capability Accumulation metric–a metric that defines the security of a network in terms of the network assets attainable for attack effort exerted...|$|E
40|$|Part 8 : Risk Analysis and Security MetricsInternational audienceThe {{difficulty}} {{associated with}} breaching an enterprise network is {{commensurate with the}} security of that network. A security breach, or a security policy violation, {{occurs as a result}} of an attacker successfully executing some <b>attack</b> <b>path.</b> The difficulty associated with this <b>attack</b> <b>path,</b> then, is critical to understanding how secure a given network is. Currently, however, there are no consistent methods for measuring <b>attack</b> <b>path</b> complexity that make the assumptions of a modeler explicit while providing flexibility in how the modeler models the <b>attack</b> <b>path.</b> To provide these desirable attributes, we propose a regular-expressions-inspired language whose rationale for <b>attack</b> <b>path</b> complexity measurement is based on Kolmogorov Complexity. After detailing our Kolmogorov Complexity-based method, we demonstrate how it can be applied to a novel security metric: the K-step Capability Accumulation metric–a metric that defines the security of a network in terms of the network assets attainable for attack effort exerted...|$|E
40|$|We {{describe}} {{our model}} for the behaviour of an attacker. In the model, the attacker has uncertain knowledge about a computer system. Moreover, the attacker tries different <b>attack</b> <b>paths</b> if initially selected ones cannot be completed. The model allows finer-grained analysis of the security of computer systems. The model is based on Markov Decision Processes theory for predicting possible attacker?s decisions...|$|R
40|$|Internet of Things (IoT) is {{characterized}} by various of heterogeneous devices and facing numerous threats. Modeling security of IoT is still a certain challenge. This paper defines a Stochastic Colored Petri Net (SCPN) for IoT-based smart environment and then proposes a Markov Game model for security situational awareness (SSA) in the defined SCPN. All possible <b>attack</b> <b>paths</b> are computed by the SCPN, and antagonistic behavior of both attackers and defenders are taken into consideration dynamically according to Game Theory. Two attack scenarios in smart home environment are taken into consideration to demonstrate {{the effectiveness of the}} proposed model. The proposed model can form a macroscopic trend curve of security situation. Analysis of the results shows the capabilities of the proposed model in finding vulnerable devices and potential <b>attack</b> <b>paths,</b> and even mitigating the impact of attacks. To our knowledge, this is the first attempt to establish a dynamic SSA model for a complex IoT-based smart environment...|$|R
40|$|This paper {{presents}} the Threat Modeling method based on <b>Attacking</b> <b>Path</b> Analysis (T-MAP) which quantifies security threats by calculating the total severity weights of relevant <b>attacking</b> <b>paths</b> for Commercial Off The Shelf (COTS) based systems. Compared to existing approaches, T-MAP {{is sensitive to}} an organization’s business value priorities and IT environment. It distills the technical details of thousands of relevant software vulnerabilities into management-friendly numbers at a high-level, and systematically establishes the traceability and consistency from management-level organizational value propositions to technical-level security threats and corresponding mitigation strategies. In its initial usage in a large IT organization, T-MAP has demonstrated promising strength in prioritizing and estimating security investment effectiveness, {{as well as in}} evaluating the security performance of COTS systems. In the case study, we demonstrate the steps of using T-MAP to analyze the cost-effectiveness of how system patching, user account control and firewall can improve security. In addition, we introduce a software tool that automates the T-MAP...|$|R
40|$|Probabilistic Packet Marking {{algorithm}} {{suggests a}} methodology to identify all the participated routers of the <b>attack</b> <b>path</b> by probabilistically marking the packets. In this approach, these marked packets contain partial {{information regarding the}} routers of the <b>attack</b> <b>path.</b> At receiver, to get the complete information of every router, it requires more number of marked packets and hence more combinations and more false positives. To overcome this drawback we have presented a novel idea in finding the exact IP address of the routers in the <b>attack</b> <b>path</b> by applying Chinese Remainder Theorem. The result of our implementation reveals that our idea requires less number of marked packets and takes no time in constructing the <b>attack</b> <b>path.</b> The same idea is true even {{in the case of}} multiple attackers...|$|E
30|$|So far, several {{variations}} of PPM {{have been proposed}} [8, 15, 17]. For example, to counter with ‘awareness of the <b>attack</b> <b>path</b> length in advance’ problem, there are some works [9, 23, 24] to set d {{as the number of}} AS, rather than the number of routers, between the current network and the victim. However, this solution cannot reconstruct the <b>attack</b> <b>path</b> accurately, which is the main goal of the PPM approach.|$|E
30|$|From the {{perspective}} of the classification by locations, existing traceback methods are divided into two types: those that send traceback information by the edge routers closest to the source (source group) and in the network by some or all routers in the <b>attack</b> <b>path</b> (network group), respectively. Most of the current traceback methods belong to the network group [11 – 14]. The purpose of these methods is to identify the <b>attack</b> <b>path</b> entirely or partially [9, 15 – 17]. The drawbacks of these methods are the involvement of the routers along the paths and the cost of their processing times and memories for this purpose [4, 21, 23]. While the goal of source group methods is to identify the attack source, they do not identify the <b>attack</b> <b>path</b> [18, 20, 22].|$|E
50|$|Path of the Berserker {{archetype}} heightens a barbarians rage {{allowing for}} more savage <b>attacks.</b> <b>Path</b> of the Totem Warrior archetype pairs a barbarian with a beast, imbuing the barbarian {{with some of}} the beast's attributes (for example a bear gets added strength and toughness). The Sword Coast Adventurer's Guide added the Battlerager, exclusive to Dwarves, allowing you to wear spiked armor and use it as another weapon.|$|R
40|$|Attack graphs {{have been}} used to show {{multiple}} <b>attack</b> <b>paths</b> in large scale networks. They have been proved to be useful utilities for network hardening and penetration testing. However, the basic concept of using graphs to represent <b>attack</b> <b>paths</b> has limitations. In this paper, we propose a new approach, the attack grammar, to model and analyze network attack sequences. Attack grammars are superior in the following areas: First, attack grammars express the interdependency of vulnerabilities better than attack graphs. They are especially suitable for the IDS alerts correlation. Second, the attack grammar can serve as a compact representation of attack graphs and can be converted to the latter easily. Third, the attack grammar is a context-free grammar. Its logical formality makes it better comprehended and more easily analyzed. Finally, the algorithmic complexity of our attack grammar approach is quartic with respect to the number of host clusters, and analyses based on the attack grammar have a run time linear to the length of the grammar, which is quadratic to the number of host clusters. ...|$|R
40|$|Abstract—Distributed denial-of-service (DDoS) attacks {{continue}} to pose an important challenge to current networks. DDoS attacks can cause victim resource consumption and link congestion. A filter-based DDoS defense is considered {{as an effective}} approach, since it can defend against both attacks: victim resource consumption and link congestion. However, existing filter-based approaches do not address necessary properties for viable DDoS solutions: how to practically identify <b>attack</b> <b>paths,</b> how to propagate filters to the best locations (filter routers), and how to manage many filters to maximize the defense effectiveness. We propose a novel mechanism, termed PFS (Probabilistic Filter Scheduling), to efficiently defeat DDoS attacks and to satisfy the necessary properties. In PFS, filter routers identify <b>attack</b> <b>paths</b> using probabilistic packet marking, and maintain filters using aschedulingpolicytomaximizethedefenseeffectiveness. Our experiments show that PFS achieves 44 % higher effectiveness than other filter-based approaches. Furthermore, we vary PFS parameters {{in terms of the}} marking probability and deployment ratio, and find that 30 % marking probability and 30 % deployment rate maximize the attack blocking rate of PFS. Index Terms—Network security; DDoS attack defense; routerbased filtering; filter scheduling. I...|$|R
30|$|PPM {{has a high}} {{false-positive}} rate in {{the face}} of DDoS attacks. This problem is originated from the basis of the reconstruction algorithm. In this case, the victim should perform two processes; first of all, it should gain the IP addresses of all routers in the <b>attack</b> <b>path</b> and secondly, using the router’s IP addresses, reconstructs the <b>attack</b> <b>path.</b> In PPM, eight packets marked by the same router need to be identified and combined to resume the IP address of that router [9]. Since there is no more sign in the dist field, in a situation when there are several attack paths, it is difficult for the victim to identify which marked packets belong to which router because there are lots of routers in the same distance to the victim. This issue may prevent the <b>attack</b> <b>path</b> reconstruction process.|$|E
30|$|Unlike PPM, {{the process}} of {{trackback}} in DFM approach does not need the path length; therefore, awareness of the <b>attack</b> <b>path</b> length is not an issue.|$|E
30|$|DPM {{assumes that}} a mark remains {{unchanged}} {{for as long}} as the packet traverses the network. As DPM does not have any mechanism to authenticate the packet marking, this assumption automatically increases the issue of mark spoofing by subverted routers in the <b>attack</b> <b>path.</b> Thus, in an untrusted network such as the Internet and in the case of a compromised router on the <b>attack</b> <b>path,</b> the marking information could be changed and the destination would be unable to identify the origin of the traffic.|$|E
30|$|In {{the absence}} of {{security}} compromise, operators review the security status of the monitored system (SCADA and ICT environment). Security status indicators may note the presence {{of one or more}} system vulnerabilities due to known software security flaws as posted by publicly available vulnerability advisory services. <b>Attack</b> <b>paths</b> from hypothetical <b>attack</b> sources to known mission critical systems are analyzed, and the impact on critical business functions (e.g., energy distribution) is assessed resulting in a quantified risk assessment.|$|R
40|$|Assessing network {{security}} is a complex and difficult task. Attack graphs have been proposed {{as a tool to}} help network administrators understand the potential weaknesses of their network. However, a problem has not yet been addressed by previous work on this subject; namely, how to actually execute and validate the <b>attack</b> <b>paths</b> resulting from the analysis of the attack graph. In this paper we present a complete PDDL representation of an attack model, and an implementation that integrates a planner into a penetration testing tool. This allows to automatically generate <b>attack</b> <b>paths</b> for penetration testing scenarios, and to validate these attacks by executing the corresponding actions -including exploits- against the real target network. We present an algorithm for transforming the information present in the penetration testing tool to the planning domain, and show how the scalability issues of attack graphs can be solved using current planners. We include an analysis of the performance of our solution, showing how our model scales to medium-sized networks and the number of actions available in current penetration testing tools. Comment: SecArt' 2010 at AAAI 2010, Atlanta, USA. July 12, 201...|$|R
40|$|Abstract: To {{understand}} overall {{vulnerability to}} network attack, one must consider attacker exploits {{not just in}} isolation, but also in combination. That is, one must analyze how low-level vulnerabilities can be combined to achieve highlevel attack goals. In this chapter, we describe a tool that implements an integrated, topological approach to network vulnerability analysis. Our Topological Vulnerability Analysis (TVA) tool automates the labor-intensive type of analysis usually performed by penetration-testing experts. It is ideal for inexpensive what-if analyses {{of the impact of}} various network configurations on overall network security. The TVA tool includes modeling of network security conditions and attack techniques (exploits), automatic population of models via the Nessus vulnerability scanner, and analysis of exploit sequences (<b>attack</b> <b>paths)</b> leading to specific attack goals. Moreover, the tool generates a graph of dependencies among exploits that represents all possible <b>attack</b> <b>paths</b> without having to enumerate them. This representation enables highly scalable methods of vulnerability analysis, such as computing network configurations that guarantee the security of given network resources. Finally, this chapter describes some of the open technical challenges for the TVA approach. Key words: Network vulnerability analysis, network attack modeling, network hardening 1...|$|R
