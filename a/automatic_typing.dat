7|268|Public
500|$|Some New York skyscrapers complemented traditional, cubicle offices {{linked by}} corridors, with larger, more open-plan spaces called [...] "general offices". These maximised {{the number of}} workers that could fitted into a given space and {{provided}} for greater flexibility. Expensive corporate suites were also created during the 1930s, especially on Wall Street, typically on {{the highest levels of the}} buildings. These were used by the corporate executives and were usually lavishly outfitted in a range of traditional and exotic styles. The lobbies of these skyscrapers remained grand affairs, although some banks now eschewed renting out space to shops and restaurants in favour of a more exclusive atmosphere. The largest skyscrapers held up to 16,000 workers, although between 5,000 and 10,000 was more common, and the buildings held a wide range of services to support them, including beauty salons, private luncheon clubs, chiropodists and gymnasiums. A skyscraper such as the Cities Service Building directly employed over 200 staff to manage and protect the property. The technology within the offices also grew still more sophisticated, with dictating, <b>automatic</b> <b>typing</b> and tabulating machines being used by teams of ever more specialised office workers.|$|E
5000|$|J. Li, K. Ouazzane, H. Kazemian, Y. Jing, R. Boyd (2011) ‘ A neural Network Based Solution for <b>Automatic</b> <b>Typing</b> Errors Correction’, Journal of Neural Computing Applications; DOI: 10.1007/s00521-010-0492-3 ...|$|E
50|$|The browser {{was officially}} {{submitted}} {{five months later}} 14 May 2013. with two new features introduced: <b>automatic</b> <b>typing</b> aid and bypassing DNS blocking. To date, the developer group has published 6 additional features.|$|E
5000|$|SA3 coupler - an <b>automatic</b> <b>type</b> used in {{the former}} Soviet Union.|$|R
5000|$|AAR coupler - an <b>automatic</b> <b>type</b> used {{throughout}} the contiguous Southern African network.|$|R
30|$|<b>Automatic</b> <b>type</b> and {{property}} suggestions that the user may {{use in the}} query construction process.|$|R
50|$|Cốc Cốc {{is among}} the five most popular browsers in Vietnam, {{according}} to data from StatCounter. A majority of the features found in Cốc Cốc, as well as its quality and stability, are similar to Google Chrome's. Significantly, Cốc Cốc also contains functionality that is useful to Vietnamese users: <b>automatic</b> <b>typing</b> aid, faster downloads, ability to bypass DNS blocking and to download audio and video from popular sites, and integrated English-Vietnamese dictionary and spell-checking. Another included feature, less common in popular browsers, is the support for the BitTorrent protocol via the download user interface. According to Vn Review, a software technical review website, these tailored features add more value that put Cốc Cốc on the map and differentiate Cốc Cốc from other Chromium-based browsers.|$|E
5000|$|Some New York skyscrapers complemented traditional, cubicle offices {{linked by}} corridors, with larger, more open-plan spaces called [...] "general offices". These maximised {{the number of}} workers that could fitted into a given space, and {{provided}} for greater flexibility. Expensive corporate suites were also created during the 1930s, especially on Wall Street, typically on {{the highest levels of the}} buildings. These were used by the corporate executives and were usually lavishly outfitted in a range of traditional and exotic styles. The lobbies of these skyscrapers remained grand affairs, although some banks now eschewed renting out space to shops and restaurants in favour of a more exclusive atmosphere. The largest skyscrapers held up to 16,000 workers, although between 5,000 and 10,000 was more common, and the buildings held a wide range of services to support them, including beauty salons, private luncheon clubs, chiropodists and gymnasiums. A skyscraper such as the Cities Service Building directly employed over 200 staff to manage and protect the property. The technology within the offices also grew still more sophisticated, with dictating, <b>automatic</b> <b>typing</b> and tabulating machines being used by teams of ever more specialised office workers.|$|E
40|$|ZBM {{has been}} the leader {{in a variety of}} word {{processing}} innovations since the introduction of the Magnetic Tapel SELECTRZC Typewriter in 1 % 4 by the Ofice Products Division (OPD). Since then the basic approach of combining quality printed output and magnetic storage with new functions has been followed by OPD, while other IBM divisions have concentrated on new applications with data processing systems and shared-logic word processing systems. This article summarizes the major technical contributions by ZBM that have supported the growth of an area of business that today is widely recognized as one of great potential for increased productivity in the modern ofice environment. introduction The history of <b>automatic</b> <b>typing</b> in IBM dates from 1933, when IBM purchased Electromatic Typewriter, Inc. and introduced the “latest additions to IBM’s line of business machines ” [l]. These products were the Electromatic Typewriter, a Master Perforator (which punched a paper roll) and an Automatic Letter Writer (which printed from the paper roll). For almost the next thirty years, a series of typewriter products evolved with primary emphasis o...|$|E
5000|$|FN P90, a {{personal}} defense weapon (PDW) designed and manufactured by FN Herstal (also called PS-90, non <b>automatic</b> <b>type)</b> ...|$|R
50|$|Use of the keyword “auto” in {{this case}} {{is only part of the}} syntax and doesn't perform <b>automatic</b> <b>type</b> deduction.|$|R
5000|$|JavaScript {{provides}} a Boolean data type with [...] and [...] literals. The typeof operator returns the string [...] for these primitive types. When {{used in a}} logical context, , , , , , and the empty string (...) evaluate as [...] due to <b>automatic</b> <b>type</b> coercion. All other values (the complement of the previous list) evaluate as , including the strings , [...] and any object. <b>Automatic</b> <b>type</b> coercion by the equality comparison operators ( [...] and [...] ) can be avoided by using the type checked comparison operators, ( [...] and [...] ).|$|R
40|$|This {{report is}} {{preliminary}} {{and has not}} been reviewed for conformity with U. S. Geological Survey editorial standards. Any use of trade names is for descriptive purposes only and does not constitute endorsement by the USGS. Preface In order to create a complete document for programmers involved with program modification and maintenance as well as a documentation for general users, it is necessary to include the technical description and details of implimentation. However * the user documentation, along with appendix A, can be extracted and distributed as a complete manual. ii A FORTRAN IV program for the Hewlett-Packard 1000 series computer provides for <b>automatic</b> <b>typing</b> operations and can, when employed with manufacturer's text editor, provide a system to greatly facilitate preparation of reports, letters and other text. The input text and imbedded control data can perform nearly all of the functions of a typist. A few of the features available are centering, titles,, footnotes, indentation, page numbering (including Roman numerals), automatic paragraphing, and two forms of tab operations. This documentation contains both user and technical description of the program. i...|$|E
50|$|Implicit type {{conversion}}, {{also known}} as coercion, is an <b>automatic</b> <b>type</b> conversion by the compiler. Some programming languages allow compilers to provide coercion; others require it.|$|R
40|$|The ML {{programming}} language restricts type polymorphism to occur {{only in the}} "let-in" construct and requires every occurrence of a formal parameter of a function (a lambda abstraction) {{to have the same}} type. Milner in 1978 refers to this restriction (which was adopted to help ML achieve <b>automatic</b> <b>type</b> inference) as a serious limitation. We show that this restriction can be relaxed enough to allow universal polymorphic abstraction without losing <b>automatic</b> <b>type</b> inference. This extension is equivalent to the rank- 2 fragment of system F. We precisely characterize the additional program phrases (lambda terms) that can be typed with this extension and we describe typing anomalies {{both before and after the}} extension. We discuss how macros may be used to gain some of the power of rank- 3 <b>types</b> without losing <b>automatic</b> <b>type</b> inference. We also discuss user-interface problems in how to inform the programmer of the possible types a program phrase may have. National Science Foundation (CCR- 9113196...|$|R
50|$|The level {{crossing}} was an <b>automatic</b> <b>type</b> using flashing warning lights (an AOCR - Automatic Open Crossing, Remotely Monitored), {{which had been}} installed in 1985/86 replacing lifting barriers operated from the adjacent signal box.|$|R
50|$|In Lua version 5.2 and earlier, all {{arithmetic}} is done using double-precision floating-point arithmetic (explicit {{support for}} single-precision was added in version 5.3). Also, <b>automatic</b> <b>type</b> conversions between doubles and strings are provided (and also between floating-point values and integers since version 5.3).|$|R
50|$|<b>Automatic</b> opening <b>type</b> Holland & Holland.|$|R
40|$|System E is a {{recently}} designed type {{system for the}} #- calculus with intersection types and expansion variables. During <b>automatic</b> <b>type</b> inference, expansion variables allow postponing decisions about which non-syntax-driven typing rules to use until the right information is available and allow implementing the choices via substitution...|$|R
25|$|Passenger {{cars are}} as almost {{as old as}} railroading itself, and their {{development}} paralleled that of freight cars. Early two axle cars gave way to conventional two truck construction with {{the floor of the}} car riding above the wheels; link and pin couplers gave way to <b>automatic</b> <b>types.</b>|$|R
40|$|The ML {{programming}} language restricts type polymorphism to occur {{only in the}} "let-in" construct and requires every occurrence of a formal parameter of a function (a -abstraction) {{to have the same}} type. Milner in 1978 [Mil 78] refers to this restriction, which was adopted to help ML achieve <b>automatic</b> <b>type</b> inference, as a serious limitation. We show that this restriction can be relaxed enough to allow universal polymorphic abstraction without losing <b>automatic</b> <b>type</b> inference. In other words, the language may allow occurrences of a formal parameter to have types that are substitution instances of a generic type. This extension is equivalent to the rank- 2 fragment of system F. We precisely characterize the additional program phrases (-terms) that can be typed with this extension and we desc [...] ...|$|R
2500|$|The [...]458 SOCOM (11.63×40mm) is a {{moderately}} large round {{designed for a}} specialized upper receiver that can be mounted on any AR-15 pattern lower receiver. The [...] round offers a supersonic muzzle velocity of [...] and , similar to [...]45-70 but with a much smaller case suited to an <b>automatic</b> <b>type</b> action.|$|R
50|$|Algol 68's many little-used {{language}} features (for example, concurrent {{and parallel}} blocks) and its complex system of syntactic shortcuts and <b>automatic</b> <b>type</b> coercions made it unpopular with implementers and gained it {{a reputation of}} being difficult. Niklaus Wirth actually {{walked out of the}} design committee to create the simpler Pascal language.|$|R
40|$|This {{article is}} investigates {{the issues of}} legal {{regulation}} of budgetary compensation of VAT in Ukraine. Common and definitive features of general and <b>automatic</b> <b>types</b> of budgetary compensation are defined, definitive features between the mechanism of budgetary compensation and entering in accounts sums of money to decrease VAT commitments are defined. ?????? ?????? ????????? ???????????? ???????? ????????? ????????????? ?????????? ?????????? ??? ? ???????. ?????????? ????? ? ????????????? ????? ????? ????? ?????????? ?????????? ??? ????? ? ??????????????; ?????????? ????????????? ????? ????? ?????????? ?????????? ?????????? ??? ? ??????? ???? ??????? ? ?????????? ????????? ???????????? ?? ???...|$|R
5000|$|The [...]458 SOCOM (11.63×40mm) is a {{moderately}} large round {{designed for a}} specialized upper receiver that can be mounted on any AR-15 pattern lower receiver. The [...] round offers a supersonic muzzle velocity of 1900 ft/s and , similar to [...]45-70 but with a much smaller case suited to an <b>automatic</b> <b>type</b> action.|$|R
40|$|System E is a {{recently}} designed type {{system for the}} λ-calculus with intersection types and expansion variables. During <b>automatic</b> <b>type</b> inference, expansion variables allow postponing decisions about which non-syntax-driven typing rules to use until the right information is available and allow implementing the choices via substitution. This paper uses expansion variables in a unification-based <b>automatic</b> <b>type</b> inference algorithm for System E that succeeds for every β-normalizable λ-term. We have implemented and tested our algorithm and released our implementation publicly. Each step of our unification algorithm corresponds to exactly one β-reduction step, and vice versa. This formally verifies and makes precise a step-for-step correspondence between type inference and β-reduction. This also shows that type inference with intersection types and expansion variables can, in effect, carry out an arbitrary amount of partial evaluation of the program being analyzed...|$|R
5000|$|... section between Kabe Station and Kake Station: Special <b>automatic</b> closure <b>type</b> ...|$|R
5000|$|Flap sluice gate: A fully <b>automatic</b> <b>type,</b> {{controlled}} by the pressure head across it; operation {{is similar to that}} of a check valve. It is a gate hinged at the top. When pressure is from one side, the gate is kept closed; a pressure from the other side opens the sluice when a threshold pressure is surpassed.|$|R
5000|$|Air {{conditioning}} system <b>automatic</b> mini-split <b>type</b> for control room, administration, sales and boardroom ...|$|R
40|$|This paper {{proposes a}} lonely island {{detection}} method based on <b>automatic</b> <b>type</b> phase displacement. Different form the traditional island detection methods, this method {{solve the problem}} of its some kind of detection under the condition of failure, improving active island detection technology of slip <b>type</b> <b>automatic</b> frequency quadratic displacement method. This method only need to change the output current of the initial angle without changing its frequency to detect whether the grid failure, compared with the traditional island detection methods, improve the accuracy of the grid fault detection.   </p...|$|R
40|$|We {{present an}} {{algorithm}} for <b>automatic</b> <b>type</b> checking of logic programs {{with respect to}} directional types that describe both the structure of terms and the directionality of predicates. The type checking problem is reduced to a decidable problem on systems of inclusion constraints over set expressions. We discuss some properties of the reduction algorithm, complexity, and present a proof of correctness. 1...|$|R
40|$|Revised (revised date) Communicated by Editor's name ABSTRACT This work {{is about}} an {{experimental}} paradigmatic functional language for programming with P-TIME functions. The language is designed from Intuitionistic Light Affine Logic. It can be typed automatically by a type inference algorithm that deduces polymorphic types `a la ML. Keywords: Functional programming languages, P-TIME computations, Light Affine Logic, <b>Automatic</b> <b>type</b> inference...|$|R
40|$|The paper {{considers}} {{the problem of}} an <b>automatic</b> <b>type</b> analysis {{in the context of}} the object-oriented Petri nets (OOPNs) associated with the PNtalk language. We describe the skeleton of one of the possible approaches to deriving the types of tokens that may get into particular places of OOPN-based models. We briefly discuss advantages and disadvantages and also possible alternatives to the described approach...|$|R
40|$|We {{describe}} and document the techniques used in TYPER, a fully <b>automatic</b> <b>type</b> annotator for E RLANG programs based on constraint-based type inference of success typings(a notion {{closely related to}} principal typings). The inferred typings are fine -grained and the type system currently includes subtyping and subtype poly- morphism but not parametric polymorphism. In particular, we de- scribe and illustrat...|$|R
40|$|We {{examine the}} problem of type {{inference}} {{for a family of}} polymorphic type systems containing the power of Core- ML. This family comprises the levels of the stratification of the second-order -calculus (system F) by "rank" of types. We show that typability is an undecidable problem at every rank k 3. While it was already known that typability is decidable at rank 2, no direct and easy-to-implement algorithm was available. We develop a new notion of -term reduction and use it to prove that {{the problem of}} typability at rank 2 is reducible to the problem of acyclic semiunification. We also describe a simple procedure for solving acyclic semi-unification. Issues related to principal types are discussed. 1 Introduction Background and Motivation. Many modern functional programming languages use polymorphic type systems that support <b>automatic</b> <b>type</b> inference. <b>Automatic</b> <b>type</b> inference for untyped or partially typed programs saves the programmer the work of specifying the type of every identi [...] ...|$|R
25|$|The {{process of}} verifying and {{enforcing}} {{the constraints of}} types—type checking—may occur either at compile-time (a static check) or at run-time. If a language specification requires its typing rules strongly (i.e., more or less allowing only those <b>automatic</b> <b>type</b> conversions that do not lose information), one can refer to the process as strongly typed, if not, as weakly typed. The terms are not usually used in a strict sense.|$|R
