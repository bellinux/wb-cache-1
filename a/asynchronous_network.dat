180|705|Public
25|$|Whenever {{the laptop}} is powered on it can {{participate}} in a mobile ad hoc network (MANET) with each node operating in a peer-to-peer fashion with other laptops it can hear, forwarding packets across the cloud. If a computer in the cloud {{has access to the}} Internet—either directly or indirectly—then all computers in the cloud are able to share that access. The data rate across this network will not be high; however, similar networks, such as the store and forward Motoman project have supported email services to 1000 schoolchildren in Cambodia, according to Negroponte. The data rate should be sufficient for <b>asynchronous</b> <b>network</b> applications (such as email) to communicate outside the cloud; interactive uses, such as web browsing, or high-bandwidth applications, such as video streaming should be possible inside the cloud. The IP assignment for the meshed network is intended to be automatically configured, so no server administrator or an administration of IP addresses is needed.|$|E
50|$|DECserver 900MCThe DECserver 900MC is an <b>asynchronous</b> <b>network</b> {{access server}} with eight {{on-board}} V.34 modems.|$|E
50|$|Besides {{being an}} <b>asynchronous</b> <b>network</b> {{application}} framework, Netty also includes built-in HTTP, HTTP2, DNS and more protocols support, including {{the ability to}} run inside a servlet container, support for WebSockets, integration with Google Protocol Buffers, SSL/TLS support, support for SPDY protocol and support for message compression. Netty has been actively developed since 2004.|$|E
40|$|Abstract: : The paper {{addresses}} {{the idea of}} utilization of Erlang formulas in asynchronous ATM and IP networks. Based on the common properties of synchronous and <b>asynchronous</b> <b>networks</b> we have proposed the utilization of Erlang formulas not only for synchronous networks, but also for <b>asynchronous</b> <b>networks.</b> It is possible to describe traffic in <b>asynchronous</b> <b>networks</b> by calculation of following parameters – loss, link utilization and bandwidth. We present some simulation results from Matlab...|$|R
40|$|Abstract—In this paper, {{we present}} new {{theoretical}} {{results on the}} convergence of max-consensus protocols for <b>asynchronous</b> <b>networks.</b> The analysis is carried out exploiting well-established concepts {{in the field of}} partially asynchronous iterative algo-rithms and of analytic synchronization. As a main result, we propose a theoretical setting to prove the convergence of the asynchronous max-consensus protocol. Moreover, we provide an upper bound on the convergence time of the max-consensus protocol in <b>asynchronous</b> <b>networks.</b> I...|$|R
40|$|Building on {{the first}} part of this paper, we develop the theory of {{functional}} <b>asynchronous</b> <b>networks.</b> We show that a large class of functional <b>asynchronous</b> <b>networks</b> can be (uniquely) rep- resented as feedforward networks connecting events or dynamical modules. For these networks we can give a complete description of the network function in terms of the function of the events com- prising the network: the Modularization of Dynamics Theorem. We give examples to illustrate the main results...|$|R
50|$|The Paxos {{family of}} {{protocols}} includes {{a spectrum of}} trade-offs {{between the number of}} processors, number of message delays before learning the agreed value, the activity level of individual participants, number of messages sent, and types of failures. Although no deterministic fault-tolerant consensus protocol can guarantee progress in an <b>asynchronous</b> <b>network</b> (a result proven in a paper by Fischer, Lynch and Paterson), Paxos guarantees safety (consistency), and the conditions that could prevent it from making progress are difficult to provoke.|$|E
50|$|The time of nettime is {{a social}} time, it is {{subjective}} and intensive, with condensation and extractions, segmented by social events like conferences and little meetings, and text gatherings for export into the paper world. Most people still like to read a text printed on wooden paper, more than transmitted via waves of light. Nettime {{is not the same}} time like geotime, or the time clocks go. Everyone who programs or often sits in front of a screen knows about the phenomena of being out of time, time on the net consists of different speeds, computers, humans, software, bandwidth, the only way to see a continuity of time on the net is to see it as a <b>asynchronous</b> <b>network</b> of synchronized time zones.|$|E
50|$|Whenever {{the laptop}} is powered on it can {{participate}} in a mobile ad hoc network (MANET) with each node operating in a peer-to-peer fashion with other laptops it can hear, forwarding packets across the cloud. If a computer in the cloud {{has access to the}} Internet—either directly or indirectly—then all computers in the cloud are able to share that access. The data rate across this network will not be high; however, similar networks, such as the store and forward Motoman project have supported email services to 1000 schoolchildren in Cambodia, according to Negroponte. The data rate should be sufficient for <b>asynchronous</b> <b>network</b> applications (such as email) to communicate outside the cloud; interactive uses, such as web browsing, or high-bandwidth applications, such as video streaming should be possible inside the cloud. The IP assignment for the meshed network is intended to be automatically configured, so no server administrator or an administration of IP addresses is needed.|$|E
40|$|In {{this note}} we {{describe}} the theory of functional <b>asynchronous</b> <b>networks</b> {{and one of the}} main results, the Modularization of Dynamics Theorem, which for a large class of functional <b>asynchronous</b> <b>networks</b> gives a factorization of dynamics in terms of constituent subnetworks. For these networks we can give a complete description of the network function in terms of the function of the events comprising the network and thereby answer a question originally raised by Alon in the context of biological networks...|$|R
50|$|It also {{defines a}} serial data format, {{consisting}} of a start bit, 7 bit ASCII (least significant bit first), a parity bit (even for <b>asynchronous</b> <b>networks,</b> odd for synchronous networks), and a stop bit.|$|R
40|$|Abstract—Time-based {{localization}} approaches {{attract a}} lot of interest due to their high accuracy and potentially low cost for wireless sensor networks (WSNs). However, time-based local-ization is tightly coupled with clock synchronization. Thus, the reliability of timestamps in time-based localization becomes an important yet challenging task to deal with. In this paper, we propose robust time-based localization strategies to locate a target node with the help of anchors (nodes with known positions) in <b>asynchronous</b> <b>networks.</b> Two kinds of <b>asynchronous</b> <b>networks</b> are considered: one only with clock offsets, labeled quasi-synchronous networks, whereas the other with not only clock offsets but also clock skews, labeled fully <b>asynchronous</b> <b>networks.</b> A novel ranging protocol is developed for both networks, namely asymmetric trip ranging (ATR), to reduce the communication load and explore the broadcast property of WSNs. Regardless of the reliability of the timestamp report from the target node, closed-form least-squares (LS) estimators are derived to accurately estimate the target node position. As a result, we counter the uncertainties caused by the target node by ignoring the timestamps from this node. Further-more, in order to simplify the estimator in fully <b>asynchronous</b> <b>networks,</b> localization and synchronization are decoupled. A simple yet efficient method is proposed to first Calibrate the Clock Skews of the anchors, and then Estimate the Node Position (CCS-ENP). Finally, Cramér-Rao bounds (CRBs) and simulation results corroborate the efficiency of our localization schemes. Index Terms—Clock offset, clock skew, least-squares, localiza-tion, synchronization, two-way ranging. I...|$|R
40|$|Networked {{information}} technology systems {{can be found in}} many physical, natural or social processes, which include processes implemented by an information system. Software confederations and global software systems connect many concurrent processes into <b>asynchronous</b> <b>network</b> models, e. g. via service-oriented architecture. Unfortunately, the complexity of distributed systems can be a hindrance to the rapid development. The work described in this paper applies techniques of software frameworks to the problem of <b>asynchronous</b> <b>network</b> model of concurrent processes to give an abstract object-oriented model of a distributed system and reduce time and effort involved in its implementation. The paper presents a reusable objectoriented software framework for systems of asynchronous concurrent processes over modified <b>asynchronous</b> <b>network</b> model. Keywords...|$|E
40|$|We {{address the}} problem of electing a leader in an anonymous, <b>asynchronous</b> <b>network</b> of {{arbitrary}} topology. Our algorithms are considerably simpler than known algorithms and have equal or improved communication complexity. 1 Introduction Consider the problem of electing a leader in an anonymous, <b>asynchronous</b> <b>network</b> of arbitrary topology. Angluin (1980) showed that from symmetry considerations, there is no deterministic algorithm to elect a leader (i. e., to break the symmetry) in a general anonymous network. Following (Angluin, 1980) many probabilistic algorithms for electing a leader, and/or breaking the symmetry were proposed (Abrahamson et al., 1986; Attiya et al., 1988; Cole and Vishkin, 1989; Itai and Rodeh, 1990; Frederickson and Santoro, 1986; Schieber and Snir, 1989). However, only Schieber and Snir (1989) have considered the leader election problem for an arbitrary topology <b>asynchronous</b> <b>network.</b> When discussing election algorithms for anonymous networks one has to consider the f [...] ...|$|E
40|$|Abstract. This {{paper is}} {{motivated}} by a need of practical <b>asynchronous</b> <b>network</b> systems, i. e., a wait-free distributed mutual exclusion algorithm (WDME). The WDME algorithm is very appealing when a process runs on <b>asynchronous</b> <b>network</b> systems and its timing constraint is so restricted that the process cannot perform a local-spin in a wait-queue, which forces it to abort whenever it cannot access the critical region immediately. The WDME algorithm proposed in this paper is devised to {{eliminate the need for}} processes to send messages to determine whether the critical region has been entered by another process, an unfavorable drawback of a naive transformation of the shared-memory mutual exclusion algorithm to an <b>asynchronous</b> <b>network</b> model. This drawback leads to an unbounded message explosion, and it is very critical in real network systems. Design of the WDME algorithm is simple, and the algorithm is practical enough to be used in current distributed systems. The algorithm has O(1) message complexity which is suboptimal between two consecutive runs of critical section. ...|$|E
40|$|A {{model and}} a sound and {{complete}} proof system for networks of processes in which component processes communicate exclusively through messages is given. The model, {{an extension of}} the trace model, can desribe both synchronous and <b>asynchronous</b> <b>networks.</b> The proof system uses temporal-logic assertions on sequences of observations - a generalization of traces. The use of observations (traces) makes the proof system simple, compositional and modular, since internal details can be hidden. The expressive power of temporal logic makes it possible to prove temporal properties (safety, liveness, precedence, etc.) in the system. The proof system is language-independent and works for both synchronous and <b>asynchronous</b> <b>networks...</b>|$|R
40|$|This {{paper is}} {{concerned}} with the problem of find- ing sufficient conditions to guarantee convergence of nonlinear discrete-time and <b>asynchronous</b> systems and <b>networks.</b> Con- traction analysis is extended to this class of dynamical systems and then applied to investigate strategies to achieve cluster synchronization in discrete-time and <b>asynchronous</b> <b>networks.</b> The theoretical results are illustrated via a set of representative examples...|$|R
40|$|In {{this work}} and the {{supporting}} Parts II [2] and III [3], we provide a rather {{detailed analysis of the}} stability and performance of asynchronous strategies for solving distributed optimization and adaptation problems over <b>networks.</b> We examine <b>asynchronous</b> <b>networks</b> that are subject to fairly general sources of uncertainties, such as changing topologies, random link failures, random data arrival times, and agents turning on and off randomly. Under this model, agents in the network may stop updating their solutions or may stop sending or receiving information in a random manner and without coordination with other agents. We establish in Part I conditions on the first and second-order moments of the relevant parameter distributions to ensure mean-square stable behavior. We derive in Part II expressions that reveal how the various parameters of the <b>asynchronous</b> behavior influence <b>network</b> performance. We compare in Part III the performance of <b>asynchronous</b> <b>networks</b> to the performance of both centralized solutions and synchronous networks. One notable conclusion is that the mean-square-error performance of <b>asynchronous</b> <b>networks</b> shows a degradation only of the order of O(ν), where ν is a small step-size parameter, while the convergence rate remains largely unaltered. The results provide a solid justification for the remarkable resilience of cooperative networks in the face of random failures at multiple levels: agents, links, data arrivals, and topology. Comment: 40 pages, 6 figure...|$|R
40|$|This paper {{gives an}} {{efficient}} simulation {{to show that}} dynamic networks are as fast as static ones up to a constant multiplicative factor. That is, any task can be performed in a dynamic <b>asynchronous</b> <b>network</b> essentially as fast as in a static synchronous network. The simulation protocol {{is based on a}} new approach, perceiving "locality " as the key to fast adaptation to changes in network topology. The heart of our simulation is a new technique, called a dynamic synchronizer which achieves "local" simulation of a global "clock" in a dynamic <b>asynchronous</b> <b>network.</b> Using this result we obtain improved solutions to a number of well known problems on dynamic networks. It {{can also be used to}} improve the solution to certain static network problems. 1 Introduction The Dynamic <b>Asynchronous</b> <b>network,</b> where links may repeatedly fail and recover, is a realistic model of existing commercial communication networks, such the ARPANET [23]. Design and analysis of protocols for such networks is much more [...] ...|$|E
30|$|The {{results of}} {{numerical}} calculations are presented next. These calculations {{were carried out}} in order to estimate the effectiveness of solving nonlinear equations using the above methods for the <b>asynchronous</b> <b>network.</b>|$|E
30|$|Synchronization. IA {{scheduler}} {{as described}} in this paper clearly assumes a synchronized network. The related signaling would require substantial modifications to operate in an <b>asynchronous</b> <b>network</b> {{and in this case}} interference management capability would be limited.|$|E
40|$|We {{present a}} {{rigorous}} model for secure reactive systems in <b>asynchronous</b> <b>networks.</b> It captures both computational aspects of security as needed for cryptography, and abstractions as needed in typical theorem provers and model checkers, with clear refinement relations {{within and between}} the layers of abstraction...|$|R
50|$|AES11 Annex D (in the November 2005 {{or later}} {{printing}} or version) shows an example method to provide isochronous timing relationships for distributed AES3 structures over <b>asynchronous</b> <b>networks</b> such as AES47 where reference signals may be locked to common timing {{sources such as}} GPS.|$|R
40|$|Simulating {{synchronism}} on <b>asynchronous</b> <b>networks</b> allows {{to design}} synchronous distributed algorithms. This design relies upon a language {{with a clear}} operationnal semantic and an assertional proof system, consistent and complete. As an illustration, a synchronous election algorithm on an arbitrary topology network is formally derived and proved...|$|R
40|$|When {{designing}} distributed web services, {{there are}} three properties that are commonly desired: consistency, availability, and partition tolerance. It is impossible to achieve all three. In this note, we prove this conjecture in the <b>asynchronous</b> <b>network</b> model, and then discuss solutions to this dilemma in the partially synchronous model. ...|$|E
40|$|This letter proposes {{an exact}} and simple method to {{optimize}} the fiber lengths of fiber delay line buffers in an <b>asynchronous</b> <b>network</b> with variable packet length. Existing algorithms required considerable calculation, which can be avoided by using the closed-form loss probability expressions we obtained, valid for general traffic conditions...|$|E
40|$|Abstract—Power {{consumption}} of on-chip interconnects {{is a primary}} concern for many embedded system-on-chip (SoC) applications. In this paper, we compare energy and performance characteristics of asynchronous (clockless) and synchronous networkon-chip implementations, optimized {{for a number of}} SoC designs. We adapted the COSI- 2. 0 framework with ORION 2. 0 router and wire models for synchronous network generation. Our own tool, ANetGen, specifies the <b>asynchronous</b> <b>network</b> by determining the topology with simulated-annealing and router locations with force-directed placement. It uses energy and delay models from our 65 nm bundled-data router design. SystemC simulations varied traffic burstiness using the self-similar b-model. Results show that the <b>asynchronous</b> <b>network</b> provided lower median and maximum message latency, especially under bursty traffic, and used far less router energy with a slight overhead for the interrouter wires. I...|$|E
40|$|DWP, a new {{interconnect}} {{structure for}} <b>asynchronous</b> <b>networks</b> on chip in multiprocessing SoCS, yields higher throughput, consumes less power, suffers less from crosstalk noise, and requires less area than traditional interconnect structures. Its advantages stem from techniques including wave pipelining, double-data-rate transmission, interleaved lines, misaligned repeaters, and clock gating...|$|R
40|$|Verifiable {{secret sharing}} is an {{important}} primitive in distributed cryptography. With the growing interest in the deployment of threshold cryptosystems in practice, the traditional assumption of a synchronous network has to be reconsidered and generalized to an asynchronous model. This paper proposes the first practical verifiable secret sharing protocol for <b>asynchronous</b> <b>networks.</b> The protocol creates a discrete logarithm-based sharing and uses only a quadratic number of messages {{in the number of}} participating servers. It yields the first asynchronous Byzantine agreement protocol in the standard model whose efficiency makes it suitable for use in practice. Proactive cryptosystems are another important application of verifiable secret sharing. The second part of this paper introduces proactive cryptosystems in <b>asynchronous</b> <b>networks</b> and presents an efficient protocol for refreshing the shares of a secret key for discrete logarithm-based sharings. ...|$|R
40|$|The paper {{deals with}} the {{possibility}} of the Erlang B and Erlang C formula utilization in Next Generation Networks (NGN). Based on the common properties of synchronous and <b>asynchronous</b> <b>networks</b> it is possible the utilization of Erlang formulas also for <b>asynchronous</b> <b>networks.</b> It is possible to describe traffic in NGN networks by calculation of following parameters – loss, link utilization and bandwidth. The second part of this paper {{deals with the}} possibility of application of Erlang B formula in contact center. Contact center {{is one of the many}} examples of the NGN networks. By application of Erlang B formula in contact center environment it is possible to monitor following important parameters - number of agents, probability of call blocking, utilization of agents and mean number of calls in the system...|$|R
40|$|The {{distributed}} bit {{complexity of}} an <b>asynchronous</b> <b>network</b> of processors is a lower bound on {{the worst case}} bit complexity of computing any non-constant function of the inputs to the processors [MW]. This concept attempts to capture the amount of communication required for any "useful" computation on the network. The ai...|$|E
40|$|Abstract. Inthispaper, we studythe {{communication}} complexityof Reliable Message Transmission (RMT) and Secure Message Transmission (SMT) protocols in asynchronous settings. We consider two {{variants of}} the problem, namely perfect (where no error is {{allowed in the}} protocol outcome) and statistical (where the protocol may output a wrong outcome with negligible probability). RMT and SMT protocols have been investigated rigorously in synchronous settings. But not too much {{attention has been paid}} to the asynchronous version of the problem. In a significant work, Choudhury et al. (ICDCN 2009 and JPDC 2011) have studied the network connectivity requirement for asynchronous perfect and statistical SMT protocols. Their investigation reveals the following two important facts: 1. perfect SMT protocols require more network connectivity in <b>asynchronous</b> <b>network</b> than synchronous network. 2. Connectivity requirement of statistical SMT protocols is same for both synchronous and <b>asynchronous</b> <b>network.</b> Unfortunately, nothing is known about the communication complexity of RMT and SMT protocols in asynchronous settings. In this paper, we derive tight bounds on the communication complexity of the above problems and compare our results with the existing bounds for synchronous protocols. The interesting conclusions derived from our results are: 1. RMT: Asynchronyincreases the communication complexity of perfect RMTprotocols. However, asynchrony has no impact on the communication complexity of statistical RMT protocols. 2. SMT: Communication complexity of SMT protocols is more in <b>asynchronous</b> <b>network,</b> for both perfect as well as statistical case...|$|E
40|$|Abstract—We {{consider}} a high density of sensors randomly {{placed in a}} geographical area for event monitoring. The monitoring regions of the sensors may have significant overlap, and {{a subset of the}} sensors can be turned off to conserve energy, thereby increasing the lifetime of the monitoring network. Prior work in this area does not consider the event dynamics. In this paper, we show that knowledge about the event dynamics can be exploited for significant energy savings, by putting the sensors on a periodic on/off schedule. We discuss energy-aware optimization of the periodic schedule for the cases of a synchronous and an <b>asynchronous</b> <b>network.</b> To reduce the overhead of global synchronization, we further {{consider a}} spectrum of regionally synchronous networks where the size of the synchronization region is specifiable. Under the periodic scheduling, coordinated sleep by the sensors can be applied orthogonally to minimize the redundancy of coverage and further improve the energy efficiency. We consider the interactions between the periodic scheduling and coordinated sleep. We show that the <b>asynchronous</b> <b>network</b> exceeds any regionally synchronous network in the coverage intensity, thereby increasing the effectiveness of the event capture, though the opportunities for coordinated sleep decreases as the synchronization region gets smaller. When the sensor density is high, the <b>asynchronous</b> <b>network</b> with coordinated sleep can achieve extremely good event capture performance while being highly energy-efficient...|$|E
40|$|This chapter {{gives an}} {{introduction}} to protocols for state-machine replication in groups that are connected by <b>asynchronous</b> <b>networks</b> and whose members are subject to arbitrary or “Byzantine ” faults. It explains the principles of such protocols and covers the following topics: broadcast primitives, distributed cryptosystems, randomized Byzantine agreement protocols, and atomic broadcast protocols. ...|$|R
40|$|We {{present a}} {{rigorous}} model for secure reactive systems in <b>asynchronous</b> <b>networks</b> {{with a sound}} cryptographic semantics, supporting abstract specifications and the composition of secure systems. This enables modular proofs of security, which is essential in bridging {{the gap between the}} rigorous proof techniques of cryptography and tool-supported formal proof techniques. The model follows the general [...] ...|$|R
40|$|We {{consider}} <b>asynchronous</b> <b>networks</b> of finite-state systems communicating via {{a combination}} of reliable and lossy fifo channels. Depending on the topology, the reachability problem for such networks may be decidable. We provide a complete classification of network topologies according to whether they lead to a decidable reachability problem. Furthermore, this classification can be decided in polynomial-time...|$|R
