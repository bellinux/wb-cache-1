46|379|Public
50|$|C++ is a multiparadigm {{programming}} language with backward compatibility with the {{programming language}} C. This article focuses not on C features like pointer <b>arithmetic,</b> <b>operator</b> precedence or preprocessor macros, but on pure C++ {{features that are}} often criticized.|$|E
5000|$|Several major GIS systems use map algebra concepts, {{including}} ERDAS Imagine and ArcGIS. ArcGIS 10 implements Map Algebra in Python; {{functions are}} imported Python methods and Python's overloading capability {{is used for}} operators. For example, rasters can be multiplied using the [...] "*" [...] <b>arithmetic</b> <b>operator.</b>|$|E
5000|$|For example, {{the program}} below connects to a Rinda service and listens for any tuple {{composed}} an <b>arithmetic</b> <b>operator</b> followed two numbers (such as the sequence [...] "+ 2 4") When such a tuple is discovered the program computes {{the result of}} the mathematical operation (for example, processing [...] "+ 2 4" [...] into [...] "6") and stores it in tuplespace.|$|E
50|$|Cg {{supports}} {{a wide range}} of operators, including the common <b>arithmetic</b> <b>operators</b> from C, the equivalent <b>arithmetic</b> <b>operators</b> for vector and matrix data types, and the common logical operators.|$|R
50|$|The X1 <b>arithmetic</b> <b>operators</b> used binary ones' {{complement}} arithmetic.|$|R
40|$|Fast <b>arithmetic</b> <b>operators</b> {{have always}} been an {{important}} topic in computer design. There {{are two kinds of}} arithmetic operators: fixed-time and variable-time ones. While fixed-time <b>arithmetic</b> <b>operators</b> have been widely studied, variable-time operators seem to be more and more interesting for low-power design and very high performance computing. Self-timed <b>arithmetic</b> <b>operators</b> are able to deliver their result in an average computation time less than the worst case time. We present an architecture, which is a variant of the carry select adder, for the addition of n-bit numbers with a O(p log 2 n) average computation time...|$|R
50|$|Reals and {{function}} symbols can be combined, leading to {{terms that are}} expressions over reals {{and function}} symbols applied to other terms. Formally, variables and real constants are expressions, as any <b>arithmetic</b> <b>operator</b> over other expressions. Variables, constants (zero-arity-function symbols), and expressions are terms, as any function symbol applied to terms. In other words, terms are built over expressions, while expressions are built over numbers and variables. In this case, variables ranges over real numbers and terms. In other words, a variable can take a real number as a value, while another takes a term.|$|E
40|$|High {{performance}} asynchronous <b>arithmetic</b> <b>operator</b> design {{techniques are}} proposed, which adopt {{some of the}} techniques commonly used in synchronous systems such as fast precharged logic and efficient latch design, while maintaining the features of localized and elastic pipelining control inherent in asynchronous design. A pipelined sixteen bit multiplier designed using these techniques is presented and its performance compared with several previously reported asynchronous and synchronous designs...|$|E
40|$|This short {{paper is}} devoted to the study of {{effective}} hardware architectures for the RC 6 block cipher using Virtex-E and Virtex-II FPGA devices. The key point of the implementation is the design of an <b>arithmetic</b> <b>operator</b> computing f(X) =(X(2 X+ 1)) 2 ^w. Significant speed and area improvements are obtained by taking full advantage of the small multiplier blocks available in Virtex-II devices...|$|E
5000|$|Naturals: Defines the Natural numbers {{along with}} {{inequality}} and <b>arithmetic</b> <b>operators.</b>|$|R
40|$|International audienceThis paper {{presents}} the first {{results of a}} young collaboration between ERMETIS and LIRMM on hardware <b>arithmetic</b> <b>operators</b> for digital control and digital signal processing. It presents on-line <b>arithmetic</b> <b>operators</b> for the polynomial approximation of some functions (e. g., reciprocal, square-root, sine, cosine, exponential, logarithm). The proposed method is based on polynomial approximations with sparse coefficients well suited for FPGA implementation...|$|R
40|$|Calculation {{operators}} and order of operations Operators specify {{the type of}} calculation {{that you want to}} perform on the elements of a formula. Excel performs calculations in a standard order, but you can also control the order of calculations. <b>Arithmetic</b> <b>operators</b> To perform basic mathematical operations (such as addition, subtraction, or multiplication), combine numbers, and produce numeric results, use the following <b>arithmetic</b> <b>operators...</b>|$|R
40|$|International audienceThe {{increased}} {{capacity and}} enhanced features of modern FPGAs opens {{new opportunities for}} their use as application accelerators. However, for FPGAs to be accepted as mainstream acceleration solutions, long design cycles must be shortened by using high-level synthesis tools in the design process. Current HLS tools targeting FPGAs have several limitations including the inefficient use of deeply pipelined arithmetic operators, commonly encountered in high-throughput FPGA designs. We focus here on the efficient generation of FPGA-specific hardware accelerators for regular codes with perfect loop nests where inner statements are implemented as a pipelined <b>arithmetic</b> <b>operator,</b> which {{is often the case}} of scientific codes using floating-point arithmetic. We propose a semi-automatic code generation process where the <b>arithmetic</b> <b>operator</b> is identified and generated. Its pipeline information is used to reschedule the initial program execution {{in order to keep the}} operator's pipeline as "busy" as possible, while minimizing memory access. Next, we show how our method can be used as a tool to generate control FSMs for multiple parallel computing cores. Finally, we show that accounting for the application's accuracy needs allows designing smaller and faster operators...|$|E
40|$|ISBN: 0818673044 Parity {{prediction}} <b>arithmetic</b> <b>operator</b> schemes {{have been}} widely studied in the past. Recently, it has been demonstrated that this prediction scheme can achieve Fault-Secureness in arithmetic circuits for stuck-at and stuck-open faults. In this paper it is shown that the detection capability improves if a current monitoring technique is {{used in conjunction with}} the parity prediction scheme. With this scheme the fault-secure property extends to bridging faults. The technique is validated by the topological design and SPICE simulation of a multiplier circuit...|$|E
40|$|ISBN: 0818674237 Parity {{prediction}} <b>arithmetic</b> <b>operator</b> schemes {{have the}} advantage that they are compatible with data paths and memory systems checked by parity codes. Nevertheless, the basic drawback of these schemes is {{that they may not}} be fault secure for single faults, since they propagate multiple output errors that are undetectable by the parity code. In this paper we derive necessary and sufficient conditions for parity prediction arithmetic operators to achieve the fault secure property. From these conditions, various fault secure designs for arithmetic operators are reported...|$|E
5000|$|<b>Arithmetic</b> <b>operators</b> [...] "+", [...] "-", [...] "*", [...] "div" [...] (divide), and [...] "mod" ...|$|R
5000|$|The usual <b>arithmetic</b> <b>operators</b> are {{available}} — [...] (given here in increasing order of precedence).|$|R
5000|$|To support {{new data}} types and functions, {{you can add}} new {{capabilities}} to existing SQL comparison and <b>arithmetic</b> <b>operators.</b>|$|R
40|$|Abstract—Simulation {{technology}} {{suitable for}} extracting correlated and uncorrelated distortion in communication sys-tems is presented. This is achieved {{through a new}} frequency-indexing scheme with the <b>Arithmetic</b> <b>Operator</b> Method that separately tracks correlated and uncorrelated intermodu-lation products when multi-tone signals with uncorrelated phase are amplified through a nonlinear system. The indexing scheme is illustrated with a three-tone example and results from a fifth-order nonlinear amplifier excited by fifteen independent tones are considered. In the example it is shown that undesirable uncorrelated in-band distortion {{is lower than the}} innocuous correlated in-band distortion. Index Terms—Multi-tone signals, uncorrelated phase, non-linear amplifiers, computer-aided analysis, co-channel distor-tion, in-band distortion I...|$|E
40|$|AbstractLicense plate {{location}} {{as one of}} the key {{steps in}} license plate recognition system, the positioning accuracy is direct impact on the effect of license plate recognition. In this paper, for the plate image that is under different backgrounds and lighting conditions,a license plate location method based on an improved prewitt <b>arithmetic</b> <b>operator</b> was proposed. Firstly,do improved prewitt operation on the preprocessed plate image. Then, use the characteristics of vehicle license, adopt the horizontal and vertical projection method to determine the location of the upper and lower edge around the edge position, in order to achieve the positioning of vehicle license. The experiments results show that the algorithm with high accuracy, positioning speed and have good practical value...|$|E
40|$|GENERATE (Digital Generation of Complex Waveforms) {{computer}} program is flexible and reliable software tool for advanced generation of waveforms. User employs standard <b>arithmetic</b> <b>operator</b> (+, -, x, /, and parentheses) to simulate {{any combination of}} eight commonly used basic waveforms at desired amplitude and frequency. Creates data file based on user's selections from menu. Provides necessary equations describing eight basic waveforms and enables user to combine them arithmetically. Basic waveforms offered as building blocks; sine, ramp, exponential, logarithmic, step, clipped sine, square, and sawtooth. Also contains routine for plotting output waveform data on terminal with Tektronics (or equivalent) emulator, providing visual confirmation of desirability of waveform. Developed by use of VMS FORTRAN on DEC VAX 3600 computer...|$|E
50|$|The {{precedence}} of the bitwise logical operators {{has been}} criticized. Conceptually, & and | are <b>arithmetic</b> <b>operators</b> like * and +.|$|R
5000|$|... evaluates to 42. Unlike {{functions}} in Erlang, <b>arithmetic</b> <b>operators</b> in scheme are variadic (or n-ary), {{able to take}} any number of arguments.|$|R
40|$|In {{this paper}} we {{investigate}} additive generators in Atanassov's intuitionistic fuzzy and interval-valued fuzzy set theory. Starting from generalized <b>arithmetic</b> <b>operators</b> satisfying some axioms we define additive generators and we characterize continuous generators which map exact elements to exact elements {{in terms of}} generators on the unit interval. We give necessary and sufficient condition under which a generator actually generates a t-nporm and we show that the generated t-norm belongs to particular classes of t-norms depending on the <b>arithmetic</b> <b>operators</b> involved in the defintion of the generator...|$|R
40|$|This paper compares two realisations of a self-timed ring <b>arithmetic</b> <b>operator</b> for {{division}} and square-root extraction. The operator receives its inputs and delivers its outputs in conventional binary notation. The first circuit design uses differential cascode voltage switch logic. The second adds true single phase clock latches in the ring. It is shown that this addition both reduces the {{minimum number of}} stages demanded by self-timed rings and decreases the "cycle time", which {{has an influence on}} the optimal number of stages and on the speed of the ring. The two chips have been generated at the CNET-CNS using a proprietary self-timed standard cell library in three-metal 0. 5 mu m CMOS technology...|$|E
40|$|The testing {{problem in}} {{electronic}} circuit design {{does not include}} just DFT techniques on chip. In the laboratory environment {{it is also important}} to provide an efficient and inexpensive test set-up which does not require large industry testing equipment. This paper presents such a set-up and testing procedure for digital part of the mixed-signal ASIC dedicated for power-metering. The testing procedure consists of 2 levels: one during the normal operating mode and the second dedicated for particular testing of each <b>arithmetic</b> <b>operator</b> block. Control signals as well as the acquisition are performed through NI-DAQ PC-DIO- 96 PnP card. All IC samples passed tests and are currently given for further industry implementation. 1...|$|E
40|$|International audienceSince their {{introduction}} in constructive cryptographic applications, pairings over (hyper) elliptic curves are at {{the heart}} of an ever increasing number of protocols. Software implementations being rather slow, the study of hardware architectures became an active research area. In this paper, we first study an accelerator for the eta_T pairing over F_ 3 [x]/(x^ 97 + x^ 12 + 2). Our architecture is based on a unified <b>arithmetic</b> <b>operator</b> which performs addition, multiplication, and cubing over F_ 3 ^ 97. This design methodology allows us to design a compact coprocessor (1888 slices on a Virtex-II Pro 4 FPGA) which compares favorably with other solutions described in the open literature. We then describe ways to extend our approach to any characteristic and any extension field...|$|E
50|$|In general, in {{languages}} offering this feature, most operators {{that can}} take a variable {{as one of their}} arguments and return a result of the same type have an augmented assignment equivalent that assigns the result back to the variable in place, including <b>arithmetic</b> <b>operators,</b> bitshift operators, and bitwise operators.|$|R
50|$|Gosum {{is similar}} to Numble. Users place {{sequences}} of numbers and equations, using the four main <b>arithmetic</b> <b>operators</b> (addition, subtraction, division, multiplication) and the equal sign in a Scrabble-like placement.|$|R
50|$|ACSL is an equation-oriented {{language}} {{consisting of}} a set of <b>arithmetic</b> <b>operators,</b> standard functions, a set of special ACSL statements, and a MACRO capability which allows extension of the special ACSL statements.|$|R
40|$|For {{applications}} {{requiring a}} large dynamic range, real numbers may be represented either in floating-point (FP), {{or in the}} logarithm number system (LNS). Which system is best for a given application {{is difficult to know}} in advance, because the cost and performance of LNS operators depend on the target accuracy in a highly non linear way. In doubt, designers will choose floating-point. This article demonstrates a methodology for a better informed choice thanks to FPLibrary, a freely available, dual FP/LNS <b>arithmetic</b> <b>operator</b> library. FPLibrary may be used in the prototype phase of an application to obtain, with low design effort, accurate measures of performance, cost and accuracy of both LNS and FP approaches. Two case studies demonstrate the benefits of this methodology. ...|$|E
40|$|Since their {{introduction}} in constructive cryptographic applications, pairings over (hyper) elliptic curves are at {{the heart}} of an ever increasing number of protocols. Software implementations being rather slow, the study of hardware architectures became an active research area. In this paper, we first study an accelerator for the ηT pairing over F 3 [x]/(x 97 + x 12 + 2). Our architecture is based on a unified <b>arithmetic</b> <b>operator</b> which performs addition, multiplication, and cubing over F 3 97. This design methodology allows us to design a compact coprocessor (1888 slices on a Virtex-II Pro 4 FPGA) which compares favorably with other solutions described in the open literature. We then describe ways to extend our approach to any characteristic and any extension field...|$|E
40|$|A mutant of {{a program}} P ls a program M whlch ls derived from P by making same weII-defined siropIe change In P. SOme 1 nltial lnvestigatlons {{in the area of}} autoroatically {{detecting}} equlvalent mutants {{of a program}} are presented. The idea ls based on the observation that compiler optlmlzation can be considered a process of alterlng a program to an equlvalent but more efficient mutant of the program. Thus, the inverse of compller optimization techniques can be seen as, in essence, equivalent mutatulon detectors. A mutant of a program P 15 defined as a program pl derived from P by making one ot a set of carefully defined syntactic changes in P. Typical changes include replacing one <b>arithmetic</b> <b>operator</b> by another, one statement by another, and sa forth. Program mutation has been used b...|$|E
40|$|A summary on the {{symbolic}} basic <b>arithmetic</b> <b>operators</b> and aggregation operators of linguistic information {{developed by the}} authors is presented. In particular, label addition, label difference, product of a label by a positive real number, and convex combination of labels are shown as {{the symbolic}} basic <b>arithmetic</b> <b>operators,</b> and two aggregation operators of linguistic information built using those tools are described. The first one, called the Linguistic Ordered Weighted Averaging operator, is used to deal with linguistic information with equal importance, and the second one, called the Linguistic Weighted Averaging operator, is used to deal with weighted linguistic information...|$|R
40|$|This paper {{presents}} FloPoCo, {{a framework}} for easily designing custom arithmetic datapaths for FPGAs. Its main features are: an important basis of highly optimized <b>arithmetic</b> <b>operators,</b> a unique methodology for frequency-directed pipelining the designed circuits and a flexible test-bench generation suite for numerically validating the designs. The framework was tested for designing several complex <b>arithmetic</b> <b>operators,</b> this paper presenting the architecture and results for the exponential operator. Synthesis results capture the designed operator’s flexibility: automatically optimized for several Altera and Xilinx FPGAs, wide range of target frequencies and several precisions ranging from single to quadruple precision...|$|R
5000|$|Since {{the simple}} <b>{{arithmetic}}</b> <b>operators</b> are all binary (at least, in arithmetic contexts), any prefix representation thereof is unambiguous, and bracketing the prefix expression is unnecessary. As such, the previous expression {{can be further}} simplified to ...|$|R
