5|697|Public
30|$|<b>Adding</b> <b>operation</b> which {{translates}} the movement represents {{the set of}} permutations {{to be applied to}} the position x to getting a new position x’.|$|E
30|$|The {{coexistence}} of both self-sizing and Dvfs managers can improve resource optimization. While using the self-sizing manager {{to optimize the}} number of active machines allocated to a replication-based system, Dvfs managers can be deployed on each active machine to perform local optimization by adjusting the CPU frequency. However their coexistence has to be coordinated to avoid incoherent management decisions. Indeed when each machine hosting a replicated server {{is equipped with a}} Dvfs manager, their CPU-frequency might not be maximal all the time. The Dvfs managers can lower the frequency of the CPU of the machines which makes the latter work slower. In higher frequency a CPU can handle more instructions per time unit than in lower Frequency. A workload which can overload a CPU in lower frequency can possibly be supported by the CPU in higher frequency. So when self-sizing detects an overload in lower CPU frequency, the <b>adding</b> <b>operation</b> it performs can be unnecessary if increasing the CPU frequency of the active machines before the <b>adding</b> <b>operation</b> is sufficient to support the workload. More when an overload occurs in lower frequency and is detected by self-sizing and Dvfs, the <b>adding</b> <b>operation</b> and the CPU increase operations performed by the managers can cause a decrease of the CPU utilization under the minimum threshold leading to removal and CPU decrease operations. When an underload occurs in higher frequency, the removal operations and CPU decrease operations performed by the managers can cause an increase of the CPU utilization over the maximum threshold leading to adding and CPU increase operations.|$|E
30|$|To {{fill the}} device {{repository}} with data and to manage its contents, basically two operations are needed: adding devices to the device repository and deleting devices from the device repository. Both operations are {{very easy to}} realize as triple store. The <b>adding</b> <b>operation</b> simply loads one or more ODDs, parses them into RDF triples, and sends all triples to the database, which stores them in the triples table. If the database {{has not yet been}} initialized also the ontologies from Layers 1, 2, and 3 need to be added initially.|$|E
5000|$|The <b>add</b> <b>operation</b> {{depends on}} the size of the output of the hash function. As this size is fixed we can {{consider}} the <b>add</b> <b>operation</b> to be [...] in time.|$|R
50|$|In a {{register}} memory approach {{one of the}} operands for <b>ADD</b> <b>operation</b> may be in memory, while the other is in {{a register}}. This differs from a load/store architecture (used by RISC designs such as MIPS) in which both operands for an <b>ADD</b> <b>operation</b> must be in registers before the ADD.|$|R
50|$|For instance, in a load/store {{approach}} both operands and {{destination for}} an <b>ADD</b> <b>operation</b> {{must be in}} registers. This differs from a register memory architecture (used by CISC designs such as x86) in {{which one of the}} operands for the <b>ADD</b> <b>operation</b> may be in memory, while the other is in a register.|$|R
40|$|Abstract. A new slip {{field of}} slope method based on {{finite element mesh}} {{generated}} by abaqus is introduced. In this method the weight of soil mass beyond the slip surface is calculated by summing the weight of every finite element mesh beyond the slip surface, which are generated by abaqus software. Similarly, the sliding resistance force on the slip surface is calculated by summing the resistance force of every finite element mesh on the slip surface, which are generated by abaqus software. By this way, the difficult work to identify whether a soil mass is beyond or on the slip surface in traditional slip field method is changed to simple <b>adding</b> <b>operation</b> in this new method. Thus, the new slip field of slope method {{can be used to}} analyze the complex geological slope...|$|E
30|$|Comparing to thresholds-based scheme, the {{proposed}} scheme has a maximum operation of M more XOR operation and (2 M - 1) <b>adding</b> <b>operation.</b> Cross-correlation operations are only {{implemented in the}} first step of timing, which are also need in other thresholds based estimations. The second and third steps introduce M more XOR operations, (M - 1) adding operations, and M adding operations, respectively. The third step is not needed sometimes, so M adding operations are not always needed. In situations of appropriate thresholds and/or not very low SNR, M is only a small number (e.g., when threshold = 35, SNR = 0 dB, CM 1 TFC 1, M = 23.06 in average; when threshold = 45, CM 2 TFC 3, M = 10.48 in average). Although we have defined two steps, which seems to be of high complexity, but in fact we only introduce 10 to 20 times XOR and adding operations. Meanwhile, performances improvement (esp. synchronization probabilities in low SNR) achieved by our approach is really valuable, which are demonstrated in Figures 16 and 17. We could get 100 % improvement over literature at most. Therefore, our approach introduces a not high complexity in implementation, but achieves a most 100 % total synchronization probabilities improvement.|$|E
5000|$|... add - The <b>add</b> <b>operation</b> {{enables a}} {{requestor}} {{to create a}} new object on a target.|$|R
5000|$|Two {{instructions}} that perform multiply and <b>add</b> <b>operations</b> and {{speed up the}} evaluation of dot products.|$|R
5000|$|Since {{the costly}} modular {{reduction}} over k is multiply and <b>add</b> <b>operations</b> increasing k should decrease the speed.|$|R
50|$|In 1986, APASCO <b>added</b> <b>operations</b> in the US {{under the}} name TACTICS (an acronym for The Australian Customer Target Information Company).|$|R
25|$|The Integral type class <b>adds</b> <b>operations</b> for Euclidean {{division}} to the required Real and Enum classes, corresponding to a Euclidean ring, {{which is an}} integral ring.|$|R
40|$|AbstractWe {{consider}} {{the problem of}} maintaining minimum length paths in a directed graph G=(V,E) with n nodes while inserting new arcs. A data structure which supports the following operations is presented: an <b>add</b> <b>operation,</b> which inserts an arc in the digraph, and a minpath operation, which returns a minimal length path between a pair of nodes. The data structure supports each minpath operation in O(k) worst case time, where k<n is {{the length of the}} returned path; moreover, if we assume that the weights of the arcs are integer numbers in the range [1 …W], then the expected cost of any sequence of <b>add</b> <b>operations</b> is O(min(n 4, n 3 max(W, logn))) time. The space complexity is O(n 2). The same algorithm can be used for solving the problem of maintaining maximum length paths when the digraph is acyclic and <b>add</b> <b>operations</b> preserve acyclicity...|$|R
3000|$|... 8 : Audit this <b>add</b> <b>operation</b> in the datastore, e.g. using user’s IP address as the identity. {This is {{a typical}} insider threat in the cloud.} [...]...|$|R
50|$|Some {{machines}} combine multiple fused multiply <b>add</b> <b>operations</b> into {{a single}} step, e.g. performing a four-element dot-product on two 128-bit SIMD registers a0×b0+a1×b1+a2×b2+a3×b3 with single cycle throughput.|$|R
40|$|Abstract—Turing-computable {{issue is}} {{important}} in research of Turing Machine and has significant value in both theory and practice. The paper analyzes Turing-computable issue of non-negative numbers by relational operations(includes greater than, less than and equal) and arithmetic operations(includes <b>add</b> <b>operation,</b> subtract, multiply, divide and modulo). The regulation of computing 1 -bit binary number and the carry set(or borrow set) are defined to compute multi-bit binary numbers. Algorithms are described through multi-tape Turing machine. For some operations, the discussion is extended to base-N number system(3 ≤N≤ 10). Turing regulation for <b>add</b> <b>operation</b> is used to implement the Turing counter for counting {{the length of the}} string on the input tape of the Turing machine. Index Terms—Turing machine, Turing computable, binary...|$|R
40|$|Turing-computable {{issue is}} {{important}} in research of Turing Machine and has significant value in both theory and practice. The paper analyzes Turing-computable issue of non-negative numbers by relational operations(includes greater than, less than and equal) and arithmetic operations(includes <b>add</b> <b>operation,</b> subtract, multiply, divide and modulo). The regulation of computing 1 -bit binary number and the carry set(or borrow set) are defined to compute multi-bit binary numbers. Algorithms are described through multi-tape Turing machine. For some operations, the discussion is extended to base-N number system(3 ≤N≤ 10). Turing regulation for <b>add</b> <b>operation</b> is used to implement the Turing counter for counting {{the length of the}} string on the input tape of the Turing machine...|$|R
30|$|Here, {{we focus}} on {{verification}} of drop and cut-through operations and the reconfigurability of the proposed ROADM because insertion of wavelength channels and time slots for <b>add</b> <b>operation</b> can be also achieved by setting up almost the same optical system for drop and cut-through operations.|$|R
50|$|Between 2007 and 2012, American Tower’s {{international}} growth {{continued with}} operations in India, Peru, Chile, Colombia, South Africa, Ghana and Uganda. In 2013, American Tower acquired Global Tower Partners. This acquisition added sites to their U.S. portfolio and <b>added</b> <b>operations</b> in Costa Rica and Panama.|$|R
40|$|Welding {{is the key}} {{technology}} for fabrication and assembly of metal structures. In some industries, most notably automotive, welding is done primarily by robots or automated machinery. In many industries such as shipbuilding, heavy equipment production, and small parts fabrication, welding is a value <b>added</b> <b>operation</b> that i...|$|R
5000|$|The <b>ADD</b> <b>operation</b> inserts a {{new entry}} into the directory-server database. If the {{distinguished}} name in the add request already exists in the directory, then the server will not add a duplicate entry but will set the result code in the add result to decimal 68, [...] "entryAlreadyExists".|$|R
5000|$|Armoured {{formations}} <b>added</b> for <b>Operation</b> Uranus: 13th Mechanized Corps ...|$|R
40|$|Priority queues are {{fundamental}} abstract data structures, {{often used to}} manage limited resources in parallel programming. Several proposed parallel priority queue implementations are based on skiplists, harnessing the potential for parallelism of the <b>add()</b> <b>operations.</b> In addition, methods such as Flat Combining have been proposed to reduce contention by batching together multiple operations to be executed by a single thread. While this technique can decrease lock-switching overhead {{and the number of}} pointer changes required by the removeMin() operations in the priority queue, it can also create a sequential bottleneck and limit parallelism, especially for non-conflicting <b>add()</b> <b>operations.</b> In this paper, we describe a novel priority queue design, harnessing the scalability of parallel insertions in conjunction with the efficiency of batched removals. Moreover, we present a new elimination algorithm suitable for a priority queue, which further increases concurrency on balanced workloads with similar numbers of <b>add()</b> and removeMin() <b>operations.</b> We implement and evaluate our design using a variety of techniques including locking, atomic operations, hardware transactional memory, as well as employing adaptive heuristics given the workload. ...|$|R
3000|$|Consider a query vertex [...] v (in SPARQL query [...] Q [...]) and a data vertex u (in RDF graph [...] G [...]), if [...] vSig(v) & vSig(u) [...] vSig(v), where [...] “&” {{represents}} the bitwise <b>ADD</b> <b>operation,</b> vertex [...] u cannot match [...] v; otherwise, [...] u {{is a candidate}} to match [...] v.|$|R
40|$|In this paper, an {{improved}} parallel elliptic curve processor is designed and modeled. We adjusted the Jacobian coordinates system by interacting point double and point <b>add</b> <b>operations.</b> This modified coordinates is parallelized using four multipliers similar to older parallel architectures. We implemented {{the components of}} the proposed design using FPGA with parametric features, i...|$|R
50|$|On November 29, 2013 WNWF {{was granted}} a U.S. Federal Communications Commission (FCC) {{construction}} permit to move to 1140 kHz, increase day power to 3,000 watts, <b>add</b> critical hours <b>operation</b> with 2,400 watts and <b>add</b> night <b>operation</b> with 12 watts.|$|R
5000|$|Armoured {{formations}} <b>added</b> for <b>Operation</b> Uranus: 4th Mechanised Corps, 4th Cavalry Corps ...|$|R
3000|$|The {{strategy}} {{consists in}} preventing the self-sizing manager from {{adding a new}} replicated server when the machines hosting the current active servers are not in maximum CPU frequency. This means that the <b>adding</b> <b>operations</b> are inhibited when the Dvfs managers can increase the CPU frequency of their managed machines. To this end, the invariant is defined as follows: [...]...|$|R
40|$|To execute high-value <b>added</b> <b>operations,</b> such as fine {{motion control}} and force control in assembly, {{deburring}} {{and many other}} manufacture tasks, one needs to design control strategies which would provide accurate and stable motion. One of the natural solutions of those tasks is to incorporate into the control strategy inputs whose number {{is larger than the}} neede...|$|R
5000|$|Armoured {{formations}} <b>added</b> for <b>Operation</b> Uranus: 4th Tank Corps, 3rd Guards Cavalry Corps ...|$|R
5000|$|... 2006 - Smartface Platform is {{selected}} by operators for their value <b>added</b> services <b>operations.</b>|$|R
40|$|We {{propose a}} CORDIC–like {{algorithm}} for computing the feed–forward {{phase of a}} Support Vector Machine (SVM) in fixed–point arithmetic, using only shift and <b>add</b> <b>operations</b> and avoiding resource–consuming multiplications. This result is obtained thanks to a hardware–friendly kernel, which greatly simplifies the SVM feed–forward phase computation and, at the same time, maintains good classification performance respect to the conventional gaussian kernel...|$|R
50|$|AVX <b>added</b> <b>operations</b> in Europe, {{but moving}} into Japan proved more difficult. The company's license {{would not let}} it sell in Japan, but Kyocera Corporation could sell its {{products}} in the United States. Kyocera CEO Kazuo Inamori agreed with Butler that the situation needed to be changed, and Kyocera ended the unfair provision. In 1979 AVX started a Japanese subsidiary.|$|R
40|$|In {{the last}} lecture we {{discussed}} the unified property and the unified structure. We started {{to prove that the}} unified structure has the unified property, by describing how the search and the <b>add</b> <b>operations</b> work. In this lecture we will re-iterate the main properties of the unified structure and we will finish analyzing the <b>add</b> <b>operation</b> in this data structure. Next, we will cover key-independent optimality, Wilbur’s second lower bound, and Munro’s offline binary search tree. 2 Unified Structure We begin by re-iterating the main characteristics of the unified structure. 2. 1 Description The unified structure is a collection of k trees and k queues, where k ∼ lg lg n and n is the number of elements in the data structure. The trees are doubly exponentially increasing in size, except for the last tree which contains all n elements. Each queue stores the “childless ” nodes of the corresponding tree. A graphical representation of the unified structure can be found in Figure 1...|$|R
40|$|Several {{different}} {{techniques and}} softwares intend {{to improve the}} accuracy of results computed in a fixed finite precision. Here we focus on a method to improve {{the accuracy of the}} polynomial evaluation. It is well known that the use of the Fused Multiply and <b>Add</b> <b>operation</b> available on some microprocessors like Intel Itanium improves slightly the accuracy of the Horner scheme. In this paper, we compare two accurate compensated Horner schemes specially designed {{to take advantage of the}} Fused Multiply and Add. These improvements are similar to the approach applied to the summation and the dot product by Ogita, Rump and Oishi. We also use a recent algorithm by Boldo and Muller that computes the exact result of a Fused Multiply and <b>Add</b> <b>operation</b> as the unevaluated sum of three floating point numbers. Such an Error-Free Transformation is an interesting tool to introduce more accuracy efficiently. We prove that the computed results are as accurate as if computed in twice th...|$|R
