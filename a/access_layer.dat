337|1398|Public
25|$|Several {{authors have}} {{attempted}} to incorporate the OSI model's layers 1 and 2 into the TCP/IP model, since these are commonly referred to in modern standards (for example, by IEEE and ITU). This often results in a model with five layers, where the link layer or network <b>access</b> <b>layer</b> is split into the OSI model's layers 1 and 2.|$|E
2500|$|The {{latest version}} of MDAC (2.8) {{consists}} of several interacting components, {{all of which are}} Windows specific except for ODBC (which is available on several platforms). MDAC architecture may be viewed as three layers: a programming interface layer, consisting of ADO and ADO.NET, a database <b>access</b> <b>layer</b> developed by database vendors such as Oracle and Microsoft (OLE DB, [...]NET managed providers and ODBC drivers), and the database itself. These component layers are all made available to applications through the MDAC API. The Microsoft SQL Server Network Library, a proprietary access method specific to Microsoft SQL Server, is also included in the MDAC. Developers of Windows applications are encouraged to use ADO or ADO.NET for data access, the benefit being that users of the application program are not constrained in their choice of database architecture except that it should be supported by MDAC. Naturally, developers still have the choice of writing applications which directly access OLE DB and ODBC.|$|E
5000|$|In {{physical}} environments, the <b>access</b> <b>layer</b> of {{the network}} was the physical edge switch. With server virtualization, the <b>access</b> <b>layer</b> moved into the server via embedded Ethernet switches in software (known as “softswitches”) inside the virtualization hypervisor. The migration of the <b>access</b> <b>layer</b> into the server has created challenges for scalability, security, management, and reliability. Today the edge {{of the network}} extends past the physical <b>access</b> <b>layer</b> switch and now includes hypervisor-hosted softswitches, virtualization-capable adapters, the physical <b>access</b> <b>layer</b> switch, and optionally a bladed server switch. In virtualized environments, this approach impacts simplicity and performance and exposes the network to a much larger attack “surface.” ...|$|E
5000|$|Huawei: Telecommunication {{equipment}} provider, from <b>access</b> <b>layers</b> to core transmissions.|$|R
50|$|For the core, distribution, and <b>access</b> <b>layers</b> of {{a network}} topology, see router.|$|R
40|$|Mapping Objects to Tables is {{a problem}} that has {{occurred}} as long as people want to program in an object oriented language but have to use relational instead of object oriented databases for some reasons. Mapping Objects to Tables is only one family of problems that occurs in object/relational <b>access</b> <b>layers.</b> The whole context of object/relational <b>access</b> <b>layers</b> has been described by many authors (see [Bro+ 96, Col+ 96]) and is subject of our own future work...|$|R
50|$|End-stations and servers {{connect to}} the {{enterprise}} at the <b>access</b> <b>layer.</b> <b>Access</b> <b>layer</b> devices are usually commodity switchingplatforms, and {{may or may not}} provide layer 3 switching services. The traditional focus at the <b>access</b> <b>layer</b> is minimizing"cost-per-port": the amount of investment the enterprise must make for each provisioned Ethernet port. This layer is also called the desktop layer because it focuses on connecting client nodes, such as workstations to the network.|$|E
50|$|Applications using a data <b>access</b> <b>layer</b> can {{be either}} {{database}} server dependent or independent. If the data <b>access</b> <b>layer</b> supports multiple database types, the application becomes able to use whatever databases the DAL can talk to. In either circumstance, having a data <b>access</b> <b>layer</b> provides a centralized location for all calls into the database, and thus {{makes it easier to}} port the application to other database systems (assuming that 100% of the database interaction is done in the DAL for a given application).|$|E
50|$|This {{requires}} virtualization of {{the network}} <b>access</b> <b>layer,</b> so that network administrators can provide consistent enforcement of network access control and security policies—and integrate them with configuration templates for VMs inside the physical server. The data center networking challenge today is how to simplify, optimize, and manage the virtual <b>access</b> <b>layer.</b>|$|E
3000|$|... ● Cheap {{commodity}} {{network and}} IT hardware are deployed for the experiment.•Physical hosts are connected in 3 -layered hierarchical network topology (Figure 8) comprising aggregation, edge, and <b>access</b> <b>layers.</b>|$|R
30|$|The so-far {{described}} related contributions {{focus on}} local, distributed or collaborative schemes for attack detection at higher network layers (e.g. IP, TCP), whereas this work focuses on detecting jammers at {{the physical and}} medium <b>access</b> <b>layers.</b>|$|R
40|$|Data <b>access</b> <b>layers</b> are an {{ubiquitous}} {{issue in}} enterprise applications. In {{a great number}} of companies a relational database coexists with an object oriented middleware and the applications have to deal with that. The impedance mismatch between both models is very well known among the software development community. In order to cope with i...|$|R
5000|$|The {{requirements}} for the virtual <b>access</b> <b>layer</b> are as follows: ...|$|E
5000|$|The data <b>access</b> <b>layer,</b> {{also known}} as the {{syntactic}} layer, handles data reading.|$|E
5000|$|Data <b>access</b> <b>layer</b> (a.k.a. {{persistence}} layer, logging, networking, {{and other}} services which are required to support a particular business layer) ...|$|E
40|$|This poster {{reports on}} the {{outcomes}} of and lessons learned from a pilot project to test core components of a national research data management infrastructure service. A software stack consisting of Archivematica and Globus Publishing was used to pass datasets from an established domain repository through an archival processing pipeline and establish discovery and <b>access</b> <b>layers</b> from the output...|$|R
40|$|Mapping Objects to Tables is {{a problem}} that has {{occurred}} as long as people want to program in an object oriented language but have to use relational instead of object oriented databases for some reasons. Mapping Objects to Tables is only one family of problems that occurs in object/relational <b>access</b> <b>layers.</b> The whole context of object/relational <b>access</b> <b>layers</b> has been described by many authors (see [Bro+ 96, Col+ 96]) and is subject of our own future work. Introduction Object-orientation and the relational model are different paradigms of programming. When objects need to be stored in relational databases, the gap between the two different sights needs to be bridged. If only data abstraction modules have to be mapped to a relational database, life is comparably easy [Kel+ 97]. With full blown object models the concepts of object oriented programming have to be mapped to relational table structures. These are:. Aggregation,. inheritance and polymorphism,. associations between class [...] ...|$|R
40|$|Designing {{software}} to connect an object-oriented business {{system with a}} relational database is a tedious task. Object-orientation and the relational paradigm differ quite a bit. An application that maps between the two paradigms needs to be designed with respect to performance, maintainability and cost {{to name just a}} few requirements. Luckily there are numerous patterns of object/relational <b>access</b> <b>layers,</b> but looking at the body of pattern literature you will find that some patterns are still to be mined, while there's no generative "one stop" pattern language for the problem domain. This paper provides a systematic roadmap of the patterns in the field, and fills some pot holes on the road towards a full pattern language for object/relational <b>access</b> <b>layers</b> by providing some missing patterns and links. Introduction Most large scale business systems follow a three layer architecture. They provide a user interface layer on top of a business object layer. The business objects need to be [...] ...|$|R
5000|$|... {{persistent}} is {{the name}} of the database <b>access</b> <b>layer</b> with templates for generating types for entities and keys as well as schema initialization.|$|E
50|$|The data {{management}} services provide a data abstraction layer, {{similar to a}} data <b>access</b> <b>layer,</b> that separates the physical data from applications that use the data.|$|E
5000|$|Close Haul: (or the <b>Access</b> <b>Layer)</b> are PMP {{networks}} with wireless links {{operating from}} a few feet {{to a couple of}} miles to transport VVDS data.|$|E
25|$|AirPort Extreme cards, {{using the}} Broadcom chipset, have the Media <b>Access</b> Control <b>layer</b> in software. The driver is closed source.|$|R
30|$|The <b>access</b> control <b>layer</b> {{corresponds}} to the microgrid access control system. It gets microgrid information through the coordination control layer, gets power distribution network information from the distribution network management system and can realize microgrid operation monitoring and control. The information exchange between the coordination control <b>layer</b> and the <b>access</b> control <b>layer</b> adopts the manufacturing messages specification (MMS) mapping defined in IEC 61850 - 8 - 1, and supports control services such as “GetMSVCBValues/ SetMSVCBValue”.|$|R
50|$|The DECT media <b>access</b> control <b>layer</b> {{controls}} the physical layer and provides connection oriented, connectionless and broadcast {{services to the}} higher layers.|$|R
50|$|The Hierarchical {{internetworking}} {{model is}} a three-layer model for network design first proposed by Cisco. It divides enterprise networks into three layers: core, distribution, and <b>access</b> <b>layer.</b>|$|E
50|$|Model refers {{either to}} a domain model, which {{represents}} real state content (an object-oriented approach), {{or to the}} data <b>access</b> <b>layer,</b> which represents content (a data-centric approach).|$|E
5000|$|Ming (Model) - {{provides}} the data <b>access</b> <b>layer</b> for MongoDB, much like SQLAlchemy defines how to link MongoDB collections to Python objects the user's controller can interact with.|$|E
50|$|Recent VTCs {{have been}} {{attended}} by about 600-700 people. The conference focuses {{mainly on the}} physical <b>layer</b> and medium <b>access</b> control <b>layer</b> (PHY and MAC) of wireless systems.|$|R
30|$|There {{are several}} {{significant}} contributions {{made by the}} research community {{in the area of}} the intrusion detection in communication networks. The work presented in [8] evaluates two types of algorithms for the detection of SYN attacks. The evaluation shows that the simple detection algorithm has satisfactory performance for the high intensity attacks but it deteriorates for the low intensity attacks. The Cusum algorithm, on the other hand, has robust performance for different types of attacks. This is consistent with the findings of this work; however, we perform measurements at the physical and medium <b>access</b> <b>layers.</b>|$|R
40|$|In this paper, {{we present}} the main {{objectives}} and {{components of the}} OMS Java data management framework. We argue that developers of modern information systems require high-level application programming interfaces, storage platform independence and support for universal client access. We describe how the OMS Java framework provides three level of abstractions [...] storage, information and access in order to realise these objectives. We then present each of these layers in turn [...] starting with the information abstractions which lie {{at the core of}} the system and then going on to the storage and <b>access</b> <b>layers...</b>|$|R
50|$|The virtual <b>access</b> <b>layer</b> (VAL) {{refers to}} the {{virtualization}} of the <b>access</b> <b>layer</b> that connects servers to the network in the data center. Server virtualization is now aggressively deployed in data centers for consolidation of applications hosted on x86 servers. However, the underlying limitations in current networks prevent organizations from meeting the performance, availability, security, and mobility requirements of server virtualization. VAL is a product strategy that delivers features to address the unintended consequences of server virtualization. It focuses on issues in the server and virtual server I/O, addressing the operational challenges for server, application, and network administrators.|$|E
5000|$|As {{opposed to}} {{enterprise}} historians, the data <b>access</b> <b>layer</b> in the operational historian {{is designed to}} offer sophisticated data fetching modes without complex information analysis facilities. The following settings are typically available for data access operations: ...|$|E
5000|$|The data tier {{includes}} the data persistence mechanisms (database servers, file shares, etc.) {{and the data}} <b>access</b> <b>layer</b> that encapsulates the persistence mechanisms and exposes the data. The data <b>access</b> <b>layer</b> should provide an API to the application tier that exposes methods of managing the stored data without exposing or creating dependencies on the data storage mechanisms. Avoiding dependencies on the storage mechanisms allows for updates or changes without the application tier clients being affected by or even aware of the change. As with the separation of any tier, there are costs for implementation and often costs to performance in exchange for improved scalability and maintainability.|$|E
5000|$|So a {{vertical}} slice {{can be defined}} as [...] "the sum of the work {{that has to be done}} in every layer that is involved in getting a specific feature working." [...] A vertical slice doesn't necessarily affect every component in the software. For example, if the solution contains a web service, it would live in the same [...] "floor" [...] as the UI, and a feature like [...] "supporting login/logout in webservice" [...] that involves only the web service doesn't require a change in the UI, but the business and database <b>access</b> <b>layers.</b>|$|R
40|$|The most {{important}} standard in wireless local area networks is IEEE 802. 11. This is why {{much of the}} research work for the enhancement of wireless network is usually based on the behavior of IEEE 802. 11 protocol. However, some {{of the ways in which}} IEEE 802. 11 medium <b>access</b> control <b>layer</b> behaves is still unreliable to guarantee quality of service. For instance, medium <b>access</b> control <b>layer</b> packet delay, jitter and packet loss rate still remain a challenge. The main objective of this research is to propose an accurate estimation of the medium <b>access</b> control <b>layer</b> packet delay distribution for IEEE 802. 11. This estimation considers the differences between busy probability and collision probability. These differences are employed to achieve a more accurate estimation. Finally, the proposed model and simulation are implemented and validated - using MATLAB program for the purpose of simulation, and Maple program to undertake the calculation of the equations. Comment: 10 pages, 4 figures, journal publicatio...|$|R
50|$|TSCH {{is used by}} Low-Power {{devices to}} {{communicate}} using a wireless link. It is designed for low-power and lossy networks (LLNs) and aims at providing a reliable Media <b>access</b> control <b>layer.</b>|$|R
