1154|887|Public
5|$|The {{paradigm}} gave researchers {{license to}} study isolated problems and find solutions that were both verifiable and useful. It provided {{a common language}} to describe problems and share their solutions with each other, and with other fields that also used concepts of abstract agents, like economics and control theory. It was hoped that a complete <b>agent</b> <b>architecture</b> (like Newell's SOAR) would one day allow researchers to build more versatile and intelligent systems out of interacting intelligent agents.|$|E
500|$|Throughout the 1980s, SRI {{developed}} Zylon, stealth technologies, {{improvements to}} ultrasound imaging, two-dimensional laser fluorescence imaging, and order-sorted algebra. In computing and software, SRI developed a {{multimedia electronic mail}} system, a theory of non-interference in computer security, a multilevel secure (MLS) relational database system called Seaview, LaTeX, Open <b>Agent</b> <b>Architecture</b> (OAA), a network intrusion detection system, the Maude system, a declarative software language, and PacketHop, a peer-to-peer wireless technology to create scalable ad hoc networks. [...] SRI's research in network intrusion detection led to the patent infringement case SRI International, Inc. v. Internet Security Systems, Inc. The AI center's robotics research led to Shakey's successor, Flakey the robot, which focused on fuzzy logic.|$|E
50|$|Cougaar (acronym of Cognitive <b>Agent</b> <b>Architecture)</b> is a Java <b>agent</b> <b>architecture.</b>|$|E
40|$|Introduction Affective states (such as emotions, motivations, desires, pleasures, pains, attitudes, preferences, moods, values, etc.) {{and their}} {{relations}} to <b>agent</b> <b>architectures</b> have been receiving increasing attention in AI and Cognitive Science. Detailed analyses of these subspecies of affect should include descriptions of their functional roles in contributing to useful capabilities within <b>agent</b> <b>architectures,</b> complemented by empirical research on affect in biological organisms and concrete experiments with synthetic <b>agent</b> <b>architectures,</b> {{to confirm that}} the proposed architectures have the claimed properties. Our approach contrasts with most evolutionary AI research, which attempts to discover what can evolve from given inital states. Instead, we explore "neighbourhoods" and "mini-trajectories" in design space, by starting with examples of <b>agent</b> <b>architectures,</b> then explicitly provide possible extensions with evolutionary operators that can s...|$|R
5000|$|Well-recognized <b>agent</b> <b>architectures</b> that {{describe}} how an agent is internally structured are: ...|$|R
40|$|Programmers use commercially {{available}} agent systems, such as Voyager and Concordia, to tailor specific agent applications. The reusability of these architectures {{comes from the}} generic nature in which a programmer can define or describe an <b>agent.</b> These <b>architectures</b> differ in how they allow a user to create and program an agent. We describe {{how easy it is}} to build <b>agent</b> <b>architectures</b> by using a few simple concepts. Our goal is to enhance <b>agent</b> <b>architectures</b> by concentrating on a critical data structure called the itinerary. We claim that a flexible, generic, itinerary data structure allows greater expressive power to define application-specific agents. Looking at Agents and Itineraries The concept of itineraries is popular among many successful <b>agent</b> <b>architectures.</b> <b>Agent</b> <b>architectures</b> like IBM-Aglets, Voyager, and Oddessey use this approach. These architectures describe an itinerary as an enumeration or a list of tasks that an agent performs. We take a different approach and describe an itinerary as a meta-program: a way of programming an agent and, consequently, its goal. Overviewing a Finite State Itinerary Our concept of an agent itinerary borrows ideas from the Finite State machineÑa fundamental computin...|$|R
50|$|In AI, an ASM is also {{sometimes}} either {{referred to as}} an <b>agent</b> <b>architecture</b> or {{thought of as a}} substantial part of one.|$|E
5000|$|The JobScheduler {{implements}} {{a master}} / <b>agent</b> <b>architecture</b> to run jobs on the master and on agents that are deployed to remote computers.|$|E
50|$|BDI {{was also}} {{extended}} with an obligations component, {{giving rise to}} the BOID <b>agent</b> <b>architecture</b> to incorporate obligations, norms and commitments of agents that act within a social environment.|$|E
40|$|Abstract: <b>Agent</b> <b>architectures</b> {{are gaining}} {{popularity}} for building open, distributed, and evolving software required by e-commerce applications. Unfortunately, despite considerable work in software architecture {{during the last}} decade, few research efforts have aimed at truly defining patterns and languages for agent architectural design. This paper proposes a modern approach based on organizational structures and architectural description languages to define and specify <b>agent</b> <b>architectures</b> notably {{in the case of}} e-commerce system design. ...|$|R
40|$|Abstract. Agent-based {{software}} applications need to incorporate <b>agents</b> having heterogeneous <b>architectures</b> {{in order for}} each agent to optimally perform its task. HEMASL is a simple meta-language used to specify intelligent agents and multi-agent systems when different and heterogeneous <b>agent</b> <b>architectures</b> must be used. HEMASL specifications are based on an agent model that abstracts several existing <b>agent</b> <b>architectures.</b> The paper describes some {{of the features of}} the language, presents examples of its use and outlines its operational semantics. We argue that adding HEMASL to CaseLP, a specification and prototyping environment for MASs, can enhance its flexibility and usability. ...|$|R
40|$|A {{class of}} <b>agent</b> <b>architectures</b> is {{analyzed}} for reliability and logical consistency. Formal analysis {{can help to}} uncover unaccounted for corners or cases where the agent based system can potentially fail to perform as implied by the theory. The agents perform modelling, controller optimization, implementation and also monitor performance. The global convergence of performance of the agent system is proven under mild assumptions. The formerly introduced cautiously optimistic family of control <b>agent</b> <b>architectures</b> is analyzed in this paper by formal and simulation method...|$|R
50|$|<b>Agent</b> <b>architecture</b> in {{computer}} science is a blueprint for software agents and intelligent control systems, depicting the arrangement of components. The architectures implemented by intelligent agents {{are referred to as}} cognitive architectures.|$|E
50|$|Open <b>Agent</b> <b>Architecture</b> or OAA {{for short}} is a {{framework}} for integrating a community of heterogeneous software agents in a distributed environment. It is also a research project of the SRI International Artificial Intelligence Center.|$|E
50|$|Forest Informatics, Inc. has {{developed}} a postgresql template, a set of software agents, {{and a collection of}} reports, maps, anddata feeds. The application uses an intelligent <b>agent</b> <b>architecture</b> to preemptively generate possible strategic, tactical, and operational solutions for forest managers.|$|E
40|$|In {{this paper}} we {{introduce}} agent concepts to implement control algorithms and application architectures for flexible control in manufacturing. We list {{requirements for the}} implementation of the agent itself, assess existing concepts of <b>agent</b> <b>architectures,</b> and give a more detailed overview about the building blocks of an adequate <b>agent</b> system <b>architecture</b> by describing the "manAge" agent system implementation...|$|R
40|$|Affective <b>agent</b> <b>architectures</b> are an {{important}} field of research {{for a wide range}} of disciplines. Software or robotic agents that can reproduce some of the (human) phenomena that are labelled as emotional have a range of applications in entertainment, pedagogy and human computer interaction in general. In addition, the topic is relevant to cognitive science, and the processes underlying affective phenomena are important, if not essential, for the problems of action selection and behaviour coordination in control architectures of entities situated in open environments. In this thesis, based on previous experience in modelling emotion, the method of scenario-based analysis for the comparison and design of affective <b>agent</b> <b>architectures</b> as well as a new approach towards incremental modelling of emotional phenomena are introduced. The approach uses concurrent processes, resources, and explicitly modelled related limitations as building blocks for affective <b>agent</b> <b>architectures.</b> Rather than presupposing a complex framework...|$|R
40|$|Over {{the past}} four years, this column {{has focused on the}} uses and {{behaviors}} of Internet agents but ignored their implementation and internal appearance. Multiagentsystem platforms 1 aid in creating agent-based systems, but to use them effectively we must understand an <b>agent’s</b> <b>architecture.</b> When we discuss agent-based-system construction with software developers or ask students to implement common <b>agent</b> <b>architectures</b> using object-oriented techniques, we find that it is not trivial for them to create an elegant system design from the standard presentation of these architectures in textbooks or research papers. To better communicate our interpretation o...|$|R
50|$|SNePS {{may be used}} as a {{stand-alone}} KRR system. It has also been used, along with its integrated acting component, to implement the mind of intelligent agents (cognitive robots), in accord with the GLAIR <b>agent</b> <b>architecture</b> (a layered cognitive architecture). The SNePS Research Group often calls its agents Cassie.|$|E
50|$|Georgeff was {{instrumental}} in at least the following contributions {{to the field of}} Intelligent Software Agents: Procedural Reasoning System: An intelligent <b>agent</b> <b>architecture</b> and framework and seminal example of the BDI software model; and Belief-Desire-Intention software model: An intentional software framework for programming intelligent agents based on the BDI cognitive model.|$|E
50|$|Microsoft has rebuilt Release Management for Visual Studio Team Services and {{on-premises}} {{version of}} Team Foundation Server {{with the new}} changes in 2015 Update 2. The new version of Release Management leverages the web browser as the client, and relies on the same <b>agent</b> <b>architecture</b> as Team Foundation Build. Release Management enables DevOps capabilities for Team Foundation Server.|$|E
40|$|Abstract. Automated {{negotiation}} {{is gaining}} interest, but {{issues relating to}} the construction of negotiating <b>agent</b> <b>architectures</b> have not been addressed sufficiently. Towards this end, we present a novel agent construction model that enables the development of a range of <b>agent</b> <b>architectures</b> based on a common set of building blocks. In this paper we identify the fundamental components needed for two generic classes of negotiating agents: simple negotiators and argumentative negotiators, and use our model to describe them. We demonstrate how the model allows us to reuse fundamental components across these negotiation architectures. ...|$|R
40|$|The {{objective}} {{of this paper is}} to provide some rational, structured access to an analysis of cognitive and <b>agent</b> <b>architectures.</b> [4, 5] Some familiar architectures have been considered for this preliminary analysis representing a wide range of current architectures in artificial intelligence (AI) [15]. The aim of the paper is to facilitate both an understanding of current architectures and provide insight to the development of future, improved intelligent <b>agent</b> <b>architectures.</b> The main focus is on discussing about various capabilities these architectures possess, various environments upon which these architectures act, and their memory, knowledge representation they use...|$|R
40|$|International audienceAgents {{interactions}} {{which are}} inspired from generic protocols require a special approach for modelling, designing and execution. They raise up {{issues related to}} their reusability, configuration and instantiation. Agent-oriented design methodologies do not separate the protocols from the private part of <b>agents</b> <b>architecture.</b> Thus, none of these parts (public and private) are reusable. Furthermore, these methodologies do not provide any guidelines to configure interactions from generic protocols. Hence inconsistencies are hard to anticipate and solve. In this paper, we propose a method {{to address these issues}} by automatically deriving agents coordination mechanisms from generic protocols. This method decouples the protocols from the remainder of <b>agents</b> <b>architecture.</b> It also reduces inconsistencies during interactions...|$|R
50|$|Cougaar Software Inc. {{was formed}} in 2001 to make the {{transition}} of a powerful set of advanced military research for the commercial market. Investment in this project dates back to 1996 when DARPA decided that the cognitive <b>agent</b> <b>architecture</b> was the best solution to the difficult problems facing the military logistics. Since no existing <b>agent</b> <b>architecture</b> can meet those needs, DARPA began funding projects to develop what became Cougaar Open Source. They developed a technological approach that suits domains beyond logistics. The work expands and tests this technology in various safe operating environments, where time is critical.The resulting solutions represent some of the more advanced reasoning and intelligent automation capabilities available and has been shown for example in DoD (Departament of Defense) applications. Has spent the last two years refining these solutions as a business platform for the rapid creation and deployment of intelligent applications as robust as the military applications, but for business needs and with the economy in mind.|$|E
5000|$|... 4D/RCS is a {{reference}} model architecture {{that provides a}} theoretical foundation for designing, engineering, integrating intelligent systems software for unmanned ground vehicles. According to Balakirsky (2003) 4D/RCS {{is an example of}} deliberative <b>agent</b> <b>architecture.</b> These architectures [...] "include all systems that plan to meet future goal or deadline. In general, these systems plan on a model of the world rather than planning directly on processed sensor output. This may be accomplished by real-time sensors, a priori information, or {{a combination of the two}} in order to create a picture or snapshot of the world that is used to update a world model". The course of action of a deliberative <b>agent</b> <b>architecture</b> is based on the world model and the commanded mission goal, see image. This goal [...] "may be a given system state or physical location. To meet the goal systems of this kind attempts to compute a path through a multi-dimensional space contained in the real world".|$|E
50|$|The {{paradigm}} gave researchers {{license to}} study isolated problems and find solutions that were both verifiable and useful. It provided {{a common language}} to describe problems and share their solutions with each other, and with other fields that also used concepts of abstract agents, like economics and control theory. It was hoped that a complete <b>agent</b> <b>architecture</b> (like Newell's SOAR) would one day allow researchers to build more versatile and intelligent systems out of interacting intelligent agents.|$|E
40|$|Agent-based {{software}} applications need to incorporate <b>agents</b> having heterogeneous <b>architectures</b> {{in order for}} each agent to optimally perform its task. HEMASL is a simple meta-language used to specify intelligent agents and multi-agent systems when different and heterogeneous <b>agent</b> <b>architectures</b> must be used. HEMASL specifications are based on an agent model that abstracts several existing <b>agent</b> <b>architectures.</b> The paper describes some {{of the features of}} the language, presents examples of its use and outlines its operational semantics. We argue that adding HEMASL to CaseLP, a specification and prototyping environment for MAS, can enhance its flexibility and usability. 1 Introduction Intelligent agents and multi-agent systems (MAS) are increasingly being acknowledged as the "new" modelling techniques to be used to engineer complex and distributed {{software applications}} [17, 9]. Agent-based software development is concerned with the realization of software applications modelled [...] ...|$|R
40|$|Declarative {{programming}} using rules has {{advantages in}} certain application domains {{and has been}} successfully applied in many real world software projects. Besides building rule-based applications, rule concepts also provide a proven basis {{for the development of}} higher-level architectures, which enrich the existing production rule metaphor with further abstractions. One especially interesting application domain for this technology is the behavior specification of autonomous software agents, because rule bases help fulfilling key characteristics of agents such as reactivity and proactivity. In this chapter it will be detailed, which motivations promote the usage of rule bases for agent behavior control and what kinds of approaches exist. Concretely, these approaches will be explained in the context of four existing <b>agent</b> <b>architectures</b> (pure rule-based, AOP, Soar, BDI) and their implementations (Rule Responder, Agent- 0 and successors, Soar, and Jadex). In particular, it will be emphasized in which respect these <b>agent</b> <b>architectures</b> make use of rules and with what mechanisms they extend the base functionality. Finally, the approaches will be generalized by summarizing their core assumptions and extension mechanisms and possible further application domains besides <b>agent</b> <b>architectures</b> will be presented...|$|R
40|$|There {{are many}} models of mind, and many {{different}} exemplars of <b>agent</b> <b>architectures.</b> Some models of mind map onto computational designs and some <b>agent</b> <b>architectures</b> {{are capable of}} supporting different models of mind. Many <b>agent</b> <b>architectures</b> are competency-based designs related to tasks in specific domains (e. g. COG). The more general frameworks (e. g. ACT-R, AIS, SOAR) map across tasks and domains. A number of models for synthetic minds are based on analyses and observations of human minds. These types of <b>agent</b> <b>architectures</b> are capable of performing certain behaviour and cognitive competencies associated with a functioning mind. There {{is a problem with}} many of these approaches when they are applied to the design of a mind analogous in type to the human mind – there is no core to mind in any of these theories or designs other than an information processing architecture. As any specific architecture is applied to different domains, the information processing content (knowledge and behaviors) of the architecture changes wholesale. From the perspective of developing intelligent computational systems this is more than acceptable. From the perspective of developing functioning (human-like) minds this is problematic – these models are in effect emotionally autistic. If mind is an ongoing characteristic of an entity of a certain level of complexity and a mind is capable of moving through many different control states, from where do the control patterns that stabilize a mind as an ongoing (developing) personality emanate? Our current work on this theme presents an emotion-based core for mind. This work draws on evidence from neuroscience, philosophy and psychology. As an agent monitors its interactions within itself and relates these to tasks in it...|$|R
5000|$|Cougaar <b>agent</b> <b>architecture</b> {{is an open}} source, which {{includes}} infrastructure and core services. Agents are autonomous software entities that communicate with other agents or external services for a specific domain functionality. Computing agents {{are based on a}} programming methodology that facilitates direct decomposition of complex tasks.The agents manage application behavior and environment handles systemic adaptation. The agents and the environment can develop, test and configure independently, but run together.Cougaar agent abstraction includes several integrated advanced services, such as: ...|$|E
50|$|After {{working on}} {{qualitative}} decision theory, Leon van der Torre turned towards cognitive science and agent theory. He developed the BOID <b>agent</b> <b>architecture</b> (with colleagues from the Vrije Universiteit), created {{the area of}} input/output logics (with David Makinson), and the game-theoretic approach to normative multi-agent systems (with Guido Boella from the University of Turin). He initiated the workshops on coordination and organization (CoOrg), on interdisciplinary perspectives on roles (ROLES), and on normative multi-agent systems (NORMAS). He became an ECCAI Fellow in 2015.|$|E
50|$|RCS (real-time control system) is {{developed}} into an intelligent <b>agent</b> <b>architecture</b> designed to enable {{any level of}} intelligent behavior, {{up to and including}} human levels of performance. RCS was inspired by a theoretical model of the cerebellum, the portion of the brain responsible for fine motor coordination and control of conscious motions. It was originally designed for sensory-interactive goal-directed control of laboratory manipulators. Over three decades, it has evolved into a real-time control architecture for intelligent machine tools, factory automation systems, and intelligent autonomous vehicles.|$|E
40|$|Teamwork in complex, dynamic, multi-agent domains man-dates highly {{flexible}} coordination and communication. Sim-ply fitting individual agents with precomputed coordination plans will not do, for their inflexibility can cause severe failures in teamwork, and their domain-specificity hinders reusability. Our central {{hypothesis is that}} the key to such flexibility and reusability is <b>agent</b> <b>architectures</b> with inte-grated teamwork capabilities. This fundamental shift in <b>agent</b> <b>architectures</b> i illustrated via an implemented can-didate: STEAM. While STEAM is founded on the j&t intentions theory, practical operationalization has required it to integrate several key novel concepts: (i) team synchro-nization to establish joint intentions; (ii) constructs for moni-toring joint intentions and repair; and (iii) decision-theoretic communication selectivity (to pragmatically extend the joint intentions theory). Applications in three different complex domains, with empirical results, are presented. ...|$|R
40|$|Creating usable {{systems to}} protect online privacy is an {{inherently}} difficult problem. Privacy critics are semiautonomous agents that help people protect their online privacy by offering suggestions and warnings. Two sample critics are presented. KEYWORDS: privacy, World Wide Web, critics, <b>agent</b> <b>architectures,</b> CSCW, collaboration, P 3 P...|$|R
40|$|Current {{business}} trends, policy markets, production requirements, etc., {{have created}} the need for integrating pre-existing Multi Agent Systems (MAS). In the agent-specialized literature, we have not found <b>agent</b> <b>architectures</b> neither methodologies {{that allow us to}} carry out recursive and dynamic analysis, design, and implementation of MASs...|$|R
