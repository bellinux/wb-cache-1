55|69|Public
25|$|In 2011, the LLVM {{compiler}} introduced <b>Automatic</b> <b>Reference</b> Counting (ARC), which {{replaces the}} conventional garbage collector by performing static analysis of Objective-C source code and inserting retain and release messages as necessary.|$|E
2500|$|On 2 October 2014 the Royal Mail {{agreed to}} remove Humberside from its {{databases}} following residents continued protests {{taken up by}} Graham Stuart. Royal Mail's CEO Moya Greene stated [...] "Royal Mail can confirm the technical change required to suppress the <b>automatic</b> <b>reference</b> to North and South Humberside as a Former Postal County on postcode address file products supplied to customers was implemented from July {{as part of a}} pilot scheme. [...] "This now means no former postal county details will be shown for all postcodes previously tagged with a Humberside reference.|$|E
2500|$|Starting with Objective-C 2.0, the Objective-C runtime {{implemented}} {{an optional}} garbage collector, {{which is now}} obsolete and deprecated in favor of <b>Automatic</b> <b>Reference</b> Counting (ARC). In this model, the runtime turned Cocoa reference counting operations such as [...] "retain" [...] and [...] "release" [...] into no-ops. [...] The garbage collector does not exist on the iOS implementation of Objective-C 2.0. Garbage collection in Objective-C ran on a low-priority background thread, and can halt on Cocoa's user events, {{with the intention of}} keeping the user experience responsive. [...] The legacy garbage collector is still available on Mac OS X version 10.13, but no Apple-provided applications use it.|$|E
40|$|In {{order to}} {{adequately}} process satellite and radar information, {{it is necessary}} to find the exact correspondence between different types of images and between these images and the existing maps. In other words, we need to reference these images. In this paper, we propose new methods for <b>automatic</b> <b>referencing</b> of satellite and radar images. 1...|$|R
5000|$|... #Caption: <b>Automatic</b> {{metadata}} and <b>reference</b> extraction (Mendeley Desktop) ...|$|R
40|$|The main {{characteristics}} of conventional language-oriented indexing systems are itemized and {{compared to the}} characteristics of citation indexes. The advantages and disadvantages arc discussed {{in relation to the}} capability of the computer automatically to simulate human critical proccaws reflected in the act of citation. It is shown that a considerable standardization of document presentations will be necessary and probably not achievable for many years if we are to achieve <b>automatic</b> <b>referencing.</b> On the other hand, many citations, now fortuitously or otherwise omitted, might be supplied by computer analyses of text...|$|R
2500|$|Swift uses <b>Automatic</b> <b>Reference</b> Counting (ARC) {{to manage}} memory. Apple used to require manual memory {{management}} in Objective-C, but introduced ARC in 2011 {{to allow for}} easier memory allocation and deallocation. One problem with ARC {{is the possibility of}} creating a strong reference cycle, where objects reference each other in a way that you can reach the object you started from by following references (e.g. A references B, B references A). This causes them to become leaked into memory as they are never released. [...] Swift provides the keywords weak and unowned to prevent strong reference cycles. Typically a parent-child relationship would use a strong reference while a child-parent would use either weak reference, where parents and children can be unrelated, or unowned where a child always has a parent, but parent may not have a child. Weak references must be optional variables, since they can change and become nil.|$|E
5000|$|<b>Automatic</b> <b>Reference</b> Counting (ARC) is {{a memory}} {{management}} {{feature of the}} Clang compiler providing <b>automatic</b> <b>reference</b> counting for the Objective-C and Swift programming languages. At compile time, it inserts into the object code messages [...] and [...] which increase and decrease the reference count at run time, marking for deallocation those objects {{when the number of}} references to them reaches zero.|$|E
50|$|Objective-C uses ARC (<b>Automatic</b> <b>Reference</b> Counting) for deallocating unused objects. In Objective-J, {{objects are}} {{automatically}} deallocated by JavaScript's Garbage Collector.|$|E
5000|$|Lexical {{search and}} <b>automatic</b> coding of <b>references</b> (with context) ...|$|R
2500|$|... 1951 {{article on}} the basics of the <b>automatic</b> furnace thermostats—this <b>reference</b> has good {{drawings}} and illustrations.|$|R
50|$|Reimbursement {{is limited}} to the reasons agreed and stated in the Annexure to the contract, where however the {{extension}} is a result of a delay caused by the Principal, the Superintendent or the Principal’s employees, consultants, etc., then the reimbursement becomes <b>automatic</b> without <b>reference</b> to the Annexure. Proof of extra costs for reimbursement is required.|$|R
50|$|PACFA's {{mission is}} to be the leading {{professional}} body for counselling and psychotherapy and an <b>automatic</b> <b>reference</b> point for anyone seeking information on counselling and psychotherapy in the Australia.|$|E
50|$|In 2011, the LLVM {{compiler}} introduced ARC (<b>Automatic</b> <b>Reference</b> Counting), which {{replaces the}} conventional garbage collector by performing static analysis of Objective-C source code and inserting retain and release messages as necessary.|$|E
50|$|The steps during {{finalization}} vary significantly {{depending on}} memory management: in manual memory management (as in C++, or manual reference counting), references {{need to be}} explicitly destroyed by the programmer (references cleared, reference counts decremented); in <b>automatic</b> <b>reference</b> counting, this also happens during finalization, but is automated (as in Python, when it occurs after programmer-specified finalizers have been called); and in tracing garbage collection this is not necessary. Thus in <b>automatic</b> <b>reference</b> counting, programmer-specified finalizers are often short or absent, but significant work may still be done, while in tracing garbage collectors finalization is often unnecessary.|$|E
40|$|The aim was {{to develop}} a fully {{automatic}} QT interval measurement algorithm for the 2006 PhysioNet/ Computers in Cardiology Challenge. The algorithm determined the Q onset and T offset points from the average beat in each lead. The QT interval measurement was calculated from the median Q onset and T offset points. Manual measurements were also made. The mean (sd) difference between <b>automatic</b> and <b>reference</b> measurements was- 49 (38) ms and between manual and reference measurements was- 6 (48) ms. 1...|$|R
25|$|Synesthetes {{are very}} likely to {{participate}} in creative activities. It {{has been suggested that}} individual development of perceptual and cognitive skills, in addition to one's cultural environment, produces the variety in awareness and practical use of synesthetic phenomena. Synesthesia may also give a memory advantage. In one study conducted by Julia Simner of the University of Edinburgh it was found that spatial sequence synesthetes have a built-in and <b>automatic</b> mnemonic <b>reference.</b> So the nonsynesthete will need to create a mnemonic device to remember a sequence (like dates in a diary), but the synesthete can simply reference their spatial visualizations.|$|R
40|$|As part of {{a larger}} project to {{automatically}} reference link the online scholarly literature, an attempt to analyze PDF documents was undertaken. The ACM Digital Library was used as the corpus for these experiments. With the current PDF and HTML analysis tools, better then 80 % accuracy was obtained in the <b>automatic</b> extraction of <b>reference</b> linking information. ...|$|R
5000|$|Export {{of texts}} into Microsoft Word with <b>automatic</b> <b>reference</b> as RTF file, a profile matrix as CSV file {{as well as}} the export of the entire project as MAXQDA (*.mx4) file (Windows only) ...|$|E
5000|$|Objective-C 2.0 {{will put}} resurrected objects into a [...] "zombie" [...] state, where they log all {{messages}} sent to them, but do nothing else. See also <b>Automatic</b> <b>Reference</b> Counting: Zeroing Weak References for handling of weak references.|$|E
5000|$|Garbage {{collection}} was deprecated in OS X v10.8 {{in favor of}} <b>Automatic</b> <b>Reference</b> Counting (ARC). [...] Objective-C on iOS 7 running on ARM64 uses 19 bits out of a 64-bit word to store the reference count, {{as a form of}} tagged pointers.|$|E
40|$|In {{this paper}} we discuss our {{participation}} to the 2013 Semeval Semantic Textual Similarity task. Our core features include (i) a set of metrics borrowed from automatic machine translation, originally intended to evaluate <b>automatic</b> against <b>reference</b> translations and (ii) an instance of explicit semantic analysis, built upon opening paragraphs of Wikipedia 2010 articles. Our similarity estimator relies on a support vector regressor with RBF kernel. Our best approach required 13 machine translation metrics + explicit semantic analysis and ranked 65 in the competition. Our postcompetition analysis shows that the features have a good expression level, but overfitting and —mainly — normalization issues caused our correlation values to decrease...|$|R
40|$|There {{are many}} {{available}} tools for converting PostScript and PDF files into text and HTML files. This report {{has been written}} following the testing {{of some of the}} most commonly available tools, and gives details of the results of this testing for each tool. A particular focus is given to the suitability of the output for the <b>automatic</b> extraction of <b>reference</b> information from full-text documents at CERN...|$|R
30|$|During each fire, {{wind speed}} (m s− 1), air {{temperature}} (°C), and relative humidity (%) were recorded every five minutes, similar to methods of Kidnie and Wotton (2015), using an in situ <b>automatic</b> weather station (<b>reference</b> number SM 55 PRO; Inovalley, Pontoise, France) placed at 2  m aboveground, {{in the fire}} break between two adjacent plots. The recorded values were averaged over the period of fire propagation for each plot.|$|R
5000|$|Sierra removes {{support for}} garbage {{collection}} from the Objective-C runtime, a memory-management {{system that was}} added in Mac OS X Leopard (version 10.5) and declared deprecated in favor of <b>Automatic</b> <b>Reference</b> Counting in OS X Mountain Lion (version 10.8). [...] Applications that have been compiled with garbage collection will no longer run.|$|E
50|$|Compile-time garbage {{collection}} {{is a form}} of static analysis allowing memory to be reused and reclaimed based on invariants known during compilation. This form of {{garbage collection}} has been studied in the Mercury programming language, and it saw greater usage with the introduction of LLVM's <b>automatic</b> <b>reference</b> counter (ARC) into Apple's ecosystem (iOS and OS X) in 2011.|$|E
50|$|Finalization is {{primarily}} used for cleanup, to release memory or other resources: to deallocate memory allocated via manual memory management; to clear references if reference counting is used (decrement reference counts); to release resources, {{particularly in the}} Resource Acquisition Is Initialization (RAII) idiom; or to unregister an object. The amount of finalization varies significantly between languages, from extensive finalization in C++, which has manual memory management, reference counting, and deterministic object lifetimes; to often no finalization in Java, which has non-deterministic object lifetimes and is often implemented with a tracing garbage collector. It is also possible {{for there to be}} little or no explicit (user-specified) finalization, but significant implicit finalization, performed by the compiler, interpreter, or runtime; this is common in case of <b>automatic</b> <b>reference</b> counting, as in the CPython reference implementation of Python, or in <b>Automatic</b> <b>Reference</b> Counting in Apple's implementation of Objective-C, which both automatically break references during finalization.|$|E
40|$|The test-beam {{software}} classes {{describing the}} mapping of data acquisition channel numbers to detector strip positions are described. The local detector and global test-beam co-ordinate systems are given. A {{description of the}} detector geometry of the Hamamatsu and Micron prototype detectors as implemented in the test-beam software is provided. If you require up-to-date information on the features in the current code, please use the <b>automatic</b> documentation class <b>reference</b> guide at [URL]...|$|R
40|$|The track fit {{algorithm}} and {{its implementation}} in the vertex locator software is presented. The algorithm {{is based on}} a linearised least squares fit, where the solution is obtained by matrix inversion. A simple pattern recognition algorithm using reference tables, useful for high multiplicity events, is described. If you require up-to-date information on the features in the current code, please use the <b>automatic</b> documentation class <b>reference</b> guide at [URL]...|$|R
40|$|Estimations of the {{activities}} of various enzymes in clinical samples are routine tasks for clinical chemists. Most of this work is done by <b>automatic</b> analysis. The <b>reference</b> ranges against which patients' results are interpreted, however, have generally been {{defined in terms of}} manual methods and the conditions of a manual method cannot be reproduced in automated systems. This paper describes the possibility of translating the results of enzyme analysis into a common currency through the use of enzyme reference materials as calibrators...|$|R
5000|$|On October 12, 2011, Xcode 4.2 was {{released}} concurrently {{with the release}} of iOS 5.0, and it included many more and improved features, such as storyboarding and <b>automatic</b> <b>reference</b> counting (ARC). Xcode 4.2 is the last version to support Mac OS X 10.6 [...] "Snow Leopard", but is only available to registered developers with paid accounts; without a paid account, 3.2.6 is the latest download that appears for Snow Leopard.|$|E
50|$|More {{modifications}} in 1976 greatly reduced the launch time. The sequential launch adapter (SLA) was an automatic switching device mounted in a 10 ton trailer {{that allowed the}} PTS to remain connected to all three launchers allowing all three missile to stay hot. The <b>automatic</b> <b>reference</b> system (ARS) eliminated the theodolites previously used to lay and orient the missile. It included a north seeking gyro and a laser link to the ST-120 that more quickly oriented the missile.|$|E
5000|$|<b>Automatic</b> <b>Reference</b> Counting (ARC) is a compile-time {{feature that}} {{eliminates}} the need for programmers to manually manage retain counts using [...] and [...] [...] Unlike garbage collection, which occurs at run time, ARC eliminates the overhead of a separate process managing retain counts. ARC and manual memory management are not mutually exclusive; programmers can continue to use non-ARC code in ARC-enabled projects by disabling ARC for individual code files. XCode can also attempt to automatically upgrade a project to ARC.|$|E
40|$|ABSTRACT. In this paper, {{we propose}} a {{computational}} framework for 3 D volume reconstruction from 2 D histological slices using registration algorithms in feature space. To {{improve the quality}} of reconstructed 3 D volume, first, intensity variations in images are corrected by an intensity standardization process which maps image intensity scale to a standard scale where similar intensities correspond to similar tissues. Second, a subvolume approach is proposed for 3 D reconstruction by dividing standardized slices into groups. Third, in order to {{improve the quality of}} the reconstruction process, an <b>automatic</b> best <b>reference</b> slice selection algorithm is developed based on an iterative assessment of image entropy and mean square error of the registration process. Finally, we demonstrate that the choice of the reference slice has a significant impact on registration quality and subsequent 3 D reconstruction. 1...|$|R
40|$|In this paper, {{we develop}} a {{compiler}} algorithm for detecting references to stale data in shared-memory multiprocessors. The algorithm {{consists of two}} key analysis techniques, stale reference detection and locality preserving analysis. While the stale reference detection finds the memory reference patterns that may violate cache coherence, the locality preserving analysis minimizes {{the number of such}} stale references by analyzing both temporal and spatial reuses. By computing the regions referenced by arrays inside loops, we extend the previous scalar algorithms [7, 9] for more precise analysis. We have implemented the algorithm on the Polaris parallelizing compiler [19], and using execution-driven simulations on Perfect Perfect benchmarks we demonstrate how unnecessary cache misses can be eliminatedby the <b>automatic</b> stale <b>reference</b> detection. 1. Introduction Directory-based hardware coherence protocols have been studied to enforce the cache coherence in several large-scale research mac [...] ...|$|R
40|$|In this paper, {{we propose}} a {{computational}} framework for 3 D volume reconstruction from 2 D histological slices using registration algorithms in feature space. To {{improve the quality}} of reconstructed 3 D volume, first, intensity variations in images are corrected by an intensity standardization process which maps image intensity scale to a standard scale where similar intensities correspond to similar tissues. Second, a subvolume approach is proposed for 3 D reconstruction by dividing standardized slices into groups. Third, in order to {{improve the quality of}} the reconstruction process, an <b>automatic</b> best <b>reference</b> slice selection algorithm is developed based on an iterative assessment of image entropy and mean square error of the registration process. Finally, we demonstrate that the choice of the reference slice has a significant impact on registration quality and subsequent 3 D reconstruction. Comment: IEEE ISBI- 08 Submissio...|$|R
