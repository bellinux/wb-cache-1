2|123|Public
40|$|A {{partition}} relation for successors {{of large}} cardinals. (English summary) Math. Ann. 325 (2003), no. 3, 583 – 623. Summary: “We <b>address</b> <b>partition</b> problems of Erdős and Hajnal {{by showing that}} κ + → (κ 2 + 1, α) for all α < κ +, if κ <κ = κ and κ carries a κ-dense ideal. If κ is measurable we show that κ + → (α) 2 n for n < ω, α < Ω, where Ω {{is a very large}} ordinal less than κ + that is closed under all primitive recursive ordinal operations. ” Reviewed by J. M. Henle References 1. Baumgartner, J., Hajnal, A. : A proof (involving Martin’s axiom) of a partition relation. Fund...|$|E
40|$|For {{well over}} 125 years, many Americans {{have lost their}} tenancy-in-common {{property}} involuntarily in various legal proceedings. For example, courts throughout this country have often resolved partition actions, a legal proceeding in which a tenant in common seeks to exit a tenancy in common, by ordering a forced, partition sale of the property even when these courts could have ordered a remedy that would have preserved the property rights of the tenants in common. Though partition sales have negatively impacted a broad cross section {{of people in this}} country, the sales have particularly impacted poor and disadvantaged African-Americans, Hispanics, white Americans, and in some instances, Native Americans. The Uniform Partition of Heirs Property Act (UPHPA), a project that the American Bar Association 2 ̆ 7 s Section of Real Property, Trust, and Estate Law helped convince the Uniform Law Commission to undertake in 2007, seeks to <b>address</b> <b>partition</b> action abuses that have led to significant property loss. Thomas W. Mitchell, the Reporter for the Uniform Partition of Heirs Property Act, explains the UPHPA and the history of its enactment by states over the last five years...|$|E
40|$|Recent {{research}} suggests that DSM clusters can benefit from parallel coherence controllers. Parallel controllers require <b>address</b> <b>partitioning</b> and synchronization to avoid handling multiple coherence events for the same memory address simultaneously. This paper evaluates a spectrum of <b>address</b> <b>partitioning</b> schemes that vary in performance, hardware complexity, and cost. Dynamic partitioning minimizes load imbalance in controllers by using hardware address synchronizers to distribute the load among multiple protocol engines at runtime. Static partitioning obviates the need for hardware synchronization and assigns memory addresses to protocol engines at design time, but may lead to load imbalance among engines. We present simulation results indicating that: (i) dynamic partitioning performs best speeding up application execution on an 8 8 -way cluster on average by 62 % using four-engine as compared to single-engine controllers, (ii) block-interleaved static partitioning using loworder addr [...] ...|$|R
50|$|Reconfigurable state {{machines}} have {{strong ties to}} prior work on reliable group multicast protocols that support dynamic group membership, for example Birman's work in 1985 and 1987 on the virtually synchronous gbcast protocol. However, {{it should be noted}} that gbcast is unusual in supporting durability and <b>addressing</b> <b>partitioning</b> failures.Most reliable multicast protocols lack these properties, which are required for implementations of the state machine replication model.This point is elaborated in a paper by Lamport, Malkhi and Zhou.|$|R
30|$|The static energy {{consumed}} in the two-bank SPM, having the <b>address</b> space <b>partitioned</b> as above, {{is the sum of}} the static energies in each bank: E_ 2 ^st(0,k,N)=E_ 1 ^st(0,k)+E_ 1 ^st(k,N-k). Neither term depends on the number of memory accesses.|$|R
40|$|The {{development}} of techniques for interpreting {{the structure of}} three-dimensional images, f(x,y,z), is useful in many applications. A key initial stage in the signal to symbol conversion process, essential for {{the interpretation of the}} data, is three-dimensional image segmentation involving the processes of partitioning and identification. Most segmentation and grouping research in computer vision has <b>addressed</b> <b>partitioning</b> of 2 D images, f(x,y). In this paper, we present a parallel 3 D image segmentation algorithm which, through the use of [alpha]-partitioning and volume filtering, segments 3 D images such that the greylevel variation within each volume can be described by a regression model. Experimental results demonstrate the effectiveness of this algorithm on several real-World 3 D images...|$|R
5000|$|... {{in other}} words: Starting sector = LBA address of next EBR minus LBA <b>address</b> of {{extended}} <b>partitions</b> first EBR ...|$|R
40|$|This report <b>addresses</b> Strainrange <b>Partitioning,</b> an {{advanced}} life prediction analysis procedure, {{as applied to}} CA- 101 (cast IN 792 + Hf), an alloy proposed for turbine disks in automotive gas turbine engines. The methodology was successful in predicting specimen life under thermal-mechanical cycling, to within a factor of + or - 2...|$|R
40|$|Abstract—Many {{previous}} studies {{have pointed out that}} in the directory based cache coherent multiprocessors protocol processing happens to be a bottleneck and having multiple protocol engines per memory controller increases the throughput of the machines sometimes almost linearly. In this project we modeled a distributed shared memory (DSM) multiprocessor with multiple protocol engines and run memory intensive micro benchmarks on it to see if protocol processing is actually a bottleneck. We implemented a dynamic <b>address</b> <b>partitioning</b> scheme for selecting protocol engines. We wanted to check the claims about the increased throughputs due to multiple protocol processors. Also we wanted to check the levels of load balancing achieved. The simulation results showed almost no improvement in execution times. Also, the time spent in protocol handling was very less which suggested that there is no bottleneck in protocol processing...|$|R
40|$|An {{architecture}} and associated protocols are presented for managing multicast addresses and performing connection control for applications that use multicast communication facilities. A scheme to <b>partition</b> the multicast <b>address</b> {{space on the}} basis of the network number is proposed (an underlying IP-based internetworking environment is assumed), and its performance and scaling characteristics are discussed. A protocol is then developed to provide for dynamic allocation and release of multicast addresses, as well as maintaining state information for a connection. The protocol is independent of the <b>address</b> <b>partitioning</b> scheme, and hence is essentially applicable to any network layer; it is also shown to be robust and efficient. Finally, we describe two different mechanisms, namely address-based filtering and virtual port numbers, which enable the use of a common port number by all session participants. Keywords: multicast communications, multicast address management, connection control, mu [...] ...|$|R
30|$|In this study, we {{investigated}} the colloidal stability of surfactant-dispersed SWCNTs {{in the presence}} of low concentrations (0 – 25  mM) of solutes, including neutral salts and urea. We characterized the effects of anions through absorption spectra, Raman spectra, the degree of partitioning in aqueous two-phase (ATP) systems, and the amount of adsorption on hydrogels [10, 12, 33, 35]. The experimental results showed that NaSCN strongly alters Raman intensities, the partitioning in ATP systems, and the adsorbability onto hydrogel surfaces, which demonstrates that thiocyanate ions thermodynamically destabilize SDS-dispersed SWCNTs; such destabilization was accounted for by the preferential exclusion of thiocyanate ions from SDS assemblies on SWCNT surfaces but not by the chaotropic effect. Importantly, previous research <b>addressing</b> <b>partitioning</b> in ATP systems has suggested that SWCNTs would be stabilized by thiocyanate ions [10]. The present approach thus revealed the anionic dependence of the colloidal stabilities of surfactant-dispersed SWCNTs. This information is useful not only for understanding the basic properties of SWCNT colloids in electrolytes but also for manipulating SWCNTs in aqueous solutions, e.g., SWCNT separation processes.|$|R
40|$|Abstract—Coarse-grained {{reconfigurable}} arrays (CGRAs) are {{a promising}} class of architectures conjugating flexibility and efficiency. Devising effective methodologies to map applications onto CGRAs is a challenging task, {{due to their}} parallel execution paradigm and constrained hardware resources. In order to handle complex applications, {{it is important to}} devise efficient strategies to partition a kernel into pieces that obey resource constraint and methodologies to schedule them on the underlying hardware. In this paper, we tackle these problems by proposing algorithms to <b>address</b> <b>partitioning</b> based on recursive searches over abstract trees. A novel scheduling strategy is also described that, leveraging differences in delays of various operations, is able to efficiently map operations on CGRA architectures. Experimental evidence on kernels derived from a diverse set of data flow graphs and EEMBC benchmarks demonstrate the efficacy of the described methods, which, when combined, achieve a higher runtime performance on a given mesh size than stateof-the-art approaches (as much as 38 % for the benchmark applications considered). Index Terms—Coarse-grained reconfigurable architectures, partitioning, scheduling. I...|$|R
5000|$|Since the hard-disk BIOS only <b>addressed</b> four hard-disk <b>partitions,</b> an Eagle IV with a File 10 {{attached}} would <b>address</b> the two <b>partitions</b> of the File 10 as A and B, {{and the two}} in the Eagle as C and D. With a [...] "File 20" [...] attached, {{the external}} partitions would be A, B, and C, the 8 MB internal partition would be D, and the other internal partition couldn't be used at all. Similarly, with a File 40 attached, no partitions of a hard disk in the Eagle could be read from or written to, because all available hard-disk partitions {{were assigned to the}} File 40.|$|R
30|$|The {{reconfiguration}} latency of dynamically reconfigurable devices {{represents a}} major problem that must not be neglected. Several references can be found <b>addressing</b> temporal <b>partitioning</b> for reconfiguration latency minimization [15]. Moreover, configuration prefetching techniques are used to minimize reconfiguration overhead. A similar technique to lighten this overhead is developed in [16] and is integrated into an existing design environment. A prefetch and replacement unit modifies the schedule and significantly reduces the latency even for highly dynamic tasks.|$|R
40|$|Abstract—We have {{developed}} a high-level language, called Kanor, for declaratively specifying communication in parallel programs. Designed {{as an extension of}} C++, it serves to coordinate <b>partitioned</b> <b>address</b> space programs written in the bulk synchronous parallel (BSP) style. Kanor’s declarative semantics enable the programmers to write correct and maintainable parallel applications. The communication abstraction has been carefully designed to be amenable to compiler optimizations. While <b>partitioned</b> <b>address</b> space programming has several advantages, it needs special compiler optimizations to effectively leverage the shared memory hardware when running on multicore machines. In this paper, we introduce such sharedmemory optimizations in the context of Kanor. One major way we achieve these optimizations is by selectively moving some of the variables into a globally shared address space—a proces...|$|R
40|$|Abstract Existing {{partitioning}} algorithms provide limited {{support for}} load balancing simulations thatare performed on heterogeneous parallel computing platforms. On such architectures, effective load balancing {{can only be}} achieved if the graph is distributed so that it properly takes intoaccount the available resources (CPU speed, network bandwidth). With heterogeneous technologies becoming more popular, the need for suitable graph partitioning algorithms is criti-cal. We developed such algorithms that can <b>address</b> the <b>partitioning</b> requirements of scientific computations, and can correctly model the architectural characteristics of emerging hardwareplatforms...|$|R
40|$|Internet address {{allocation}} schemes have a {{huge impact}} on the size of routing tables. Due to the imminent deployment of IPv 6 and the rapidly growing number of users worldwide, it is very urgent that we have a good address allocation algorithm for IPv 6. Addresses are allocated by registries to users in the form of prefixes. Such an allocation dovetails nicely with the Longest Matching Prefix algorithm employed by routers to keep the address lookup problem scalable. However, some users inevitably grow in size and need more addresses. The additional allocations often end up creating new prefixes, causing undesirable “address fragmentation. ” We further develop a simple algorithm, called Growthbased <b>Address</b> <b>Partitioning</b> (GAP), proposed in Wang (2005). GAP allocates addresses taking into account the possibility that users may grow in the future. However, it makes the unrealistic assumption that this growth rate is known {{at the time of the}} initial request. In this paper, we develop an online version of the GAP algorithm and use theory, simulations and real data from the Asia Pacific and the Chinese registries to show that the online version yields an order of magnitude less address fragmentation compared to existing allocation schemes. This is significant for reducing routing table size, increasing scalability and improving the performance of the Internet...|$|R
40|$|Abstract—MapReduce {{is by far}} one of {{the most}} {{successful}} realizations of large-scale data-intensive cloud computing platforms. MapReduce automatically parallelizes computation by running multiple map and/or reduce tasks over distributed data across multiple machines. Hadoop is an open source implementation of MapReduce. When Hadoop schedules reduce tasks, it neither exploits data locality nor <b>addresses</b> <b>partitioning</b> skew present in some MapReduce applications. This might lead to increased cluster network traffic. In this paper we investigate the problems of data locality and partitioning skew in Hadoop. We propose Center-of-Gravity Reduce Scheduler (CoGRS), a locality-aware skew-aware reduce task scheduler for saving MapReduce network traffic. In an attempt to exploit data locality, CoGRS schedules each reduce task at its center-ofgravity node, which is computed after considering partitioning skew as well. We implemented CoGRS in Hadoop- 0. 20. 2 and tested it on a private cloud as well as on Amazon EC 2. As compared to native Hadoop, our results show that CoGRS minimizes off-rack network traffic by averages of 9. 6 % and 38. 6 % on our private cloud and on an Amazon EC 2 cluster, respectively. This reflects on job execution times and provides an improvement of up to 23. 8 %. I...|$|R
40|$|We have {{investigated}} the production of secondary organic aerosol (SOA) from pinanediol (PD), a precursor chosen as a semi-volatile surrogate for first-generation oxidation products of monoterpenes. Observations at the CLOUD facility at CERN have shown that oxidation of organic compounds such as PD {{can be an important}} contributor to new-particle formation. Here we focus on SOA mass yields and chemical composition from PD photo-oxidation in the CMU smog chamber. To determine the SOA mass yields from this semi-volatile precursor, we had to <b>address</b> <b>partitioning</b> of both the PD and its oxidation products to the chamber walls. After correcting for these losses, we found OA loading dependent SOA mass yields from PD oxidation that ranged between 0. 1 and 0. 9 for SOA concentrations between 0. 02 and 20  µg m − 3, these mass yields are 2 – 3 times larger than typical of much more volatile monoterpenes. The average carbon oxidation state measured with an Aerosol Mass Spectrometer was around − 0. 7. We modeled the chamber data using a dynamical two-dimensional volatility basis set and found that a significant fraction of the SOA comprises low volatility organic compounds that could drive new-particle formation and growth, which is consistent with the CLOUD observations...|$|R
40|$|The {{partitioning}} {{and transport}} of solutes within porous matrices is of importance {{in a variety}} of processes including gel permeation chromatography and membrane separations. The majority of the materials used in these devices possess extremely disordered microstructures, which presents a major challenge in the modeling of the above phenomena. ^ The present thesis <b>addresses</b> <b>partitioning</b> into disordered porous media by examining several model random media, which can be described statistically in terms of only a few parameters. Particular attention is paid to fibrous, sintered-type and sponge-like structures. A statistical mechanical and thermodynamic approach is taken, in which the methods of equilibrium Monte Carlo simulation, density functional and integral equation theories are developed and implemented. The effects of pore geometry and solute concentration on the partition coefficient are investigated in depth. The issue of pore accessibility is also considered by introducing some percolation concepts. The ability of these materials to permit the macroscopic transport of solutes is assessed by computing a newly defined quantity: the filtration percolation threshold. ^ Results of these studies show that the degree of partitioning is highly dependent upon the specific details of the pore geometry. There appears to be no universal parameter capable of characterizing the partitioning of solutes into disordered materials. Indications are that an accurate description of the pore space, {{in the form of a}} model random medium, is beneficial. ...|$|R
30|$|The first {{question}} addresses practical {{aspects of the}} use of BETA. The second and third questions <b>address</b> input space <b>partitioning</b> criteria and logical coverage criteria individually (only making comparisons between criteria from the same family). The last question addresses comparisons between the two families of coverage criteria (input space partitioning and logical coverage).|$|R
40|$|In this paper, {{we present}} Disjoint Code Layouts (DCL), a {{technique}} that complements Multi-Variant Execution and WX protection to effectively immunize programs against control flow hijacking exploits such as Return Oriented Programming (ROP) and return-to-libc attacks. DCL improves upon <b>Address</b> Space <b>Partitioning</b> (ASP), an earlier technique presented to defeat memory exploits. Unlike ASP, our solution keeps the full virtual address space available to the protected program. Additionally, our combination of DCL with Multi-Variant Execution is transparent to both the user and the programmer and incurs much less overhead than other ROP defense tools, {{both in terms of}} run time and memory footprint...|$|R
40|$|Graph {{partitioning}} is {{an important}} tool for dividing work amongst processors of a parallel machine, but it is unsuitable for some important applications. Specifically, graph partitioning requires the work per processor to be a simple sum of vertex weights. For many applications, this assumption is not true — the work (or memory) is a complex function of the partition. In this paper we describe a general framework for <b>addressing</b> such <b>partitioning</b> problems and investigate its utility on two applications — partitioning so that overlapped subdomains are balanced and partitioning to minimize the sum of computation plus communication time. ...|$|R
40|$|We {{describe}} {{the rationale behind}} the design of key features of Titanium—an explicitly parallel dialect of Java for high-performance scientific programming—and our experiences in building applications with the language. Specifically, we <b>address</b> Titanium’s <b>partitioned</b> global <b>address</b> space model, single program multiple data parallelism support, multi-dimensional arrays and array-index calculus, memory management, immutable classes (class-like types that are value types rather than reference types), operator overloading, and generic programming. We {{provide an overview of}} the Titanium compiler implementation, covering various parallel analyses and optimizations, Titanium runtime technology and the GASNet network communication layer. We summarize results and lessons learned fro...|$|R
40|$|This paper <b>addresses</b> {{automatic}} <b>partitioning</b> {{in complex}} reinforcement learning tasks with multiple agents, without a priori domain knowledge regarding task structures. Partitioning a state/input space into multiple regions helps to exploit differential characteristics of regions and differential characteristics of agents, thus facilitating learning {{and reducing the}} complexity of agents especially when function approximators are used. We develop a method for optimizing the partitioning of the space through experience {{without the use of}} a priori domain knowledge. The method is experimentally tested and compared to a number of other algorithms. As expected, we found that the multi-agent method with automatic partitioning outperformed single-agent learning...|$|R
40|$|We {{discuss some}} {{techniques}} for preserving locality of reference in index spaces when mapped to memory units in a distributed memory architecture. In particular, {{we discuss the}} use of multidimensional address spaces instead of linearized <b>address</b> spaces, <b>partitioning</b> of irregular grids, and placement of partitions among nodes. We also discuss a set of communication primitives we have found very useful on the Connection Machine systems in implementing scientific and engineering applications. We briefly review some of the techniques used to fully utilize the bandwidth of the binary cube network of the CM [...] 2 and CM [...] 200, and give some performance data from implementations of communication primitives...|$|R
25|$|On non-partitioned devices, such as floppy disks, the Boot Sector (VBR) is {{the first}} sector (logical sector 0 with {{physical}} CHS address 0/0/1 or LBA <b>address</b> 0). For <b>partitioned</b> devices such as hard drives, the first sector is the Master Boot Record defining partitions, while the first sector of partitions formatted with a FAT file system is again the Boot Sector.|$|R
40|$|Network {{processor}} cache maintains {{results of}} previous packet lookup or classification computation for subsequent reuse. Earlier research {{had shown that}} unlike standard CPU cache, one can significantly improve the effective coverage of a network processor cache by caching based on ranges of lookup/classification keys rather than individual keys. However, the earlier work focused specifically on reducing the capacity misses and did not address two other important aspects - (a) reducing the conflict miss and (b) the cache consistency issue due to frequent routing table updates. We propose two techniques to minimize the conflict miss. One aims to reduce the deviation {{in the number of}} cacheable entries mapped to each cache set, and the other allows different number of cache sets to be associated with different IP <b>address</b> <b>partitions.</b> We present simulation results based upon a large routing table view constructed from several Internet backbone routers and IP packet traces collected from a major edge router in Taiwan. The results shows that the two optimization techniques can individually reduce the cache miss ratio by up to 76 % and 45. 2 %, respectively. We also propose a selective route cache invalidation technique to minimize the performance overhead due to frequent route updates. This technique can reduce the cache miss ratio by up to 79. 6 % compared to a naive wholecache invalidation scheme when there is a routing table update every ten thousand packet lookups. Our results are promising for network processors used at Internet edge and make a strong case for further research into caching dynamics at the Internet core...|$|R
40|$|International audienceGreen Fluorescent Protein (GFP) -tagging and {{time-lapse}} {{fluorescence microscopy}} enable to observe molecular dynamics and interactions in live cells. Original image analysis methods are then required to process challenging 2 D or 3 D image sequences. To address the tracking problem of several hundreds of objects, we propose an original framework that provides general information about molecule transport, {{that is about}} traffic flows between origin and destination regions detected in the image sequence. Traffic estimation {{can be accomplished by}} adapting the recent advances in Network Tomography commonly used in network communications. In this paper, we <b>address</b> image <b>partition</b> given vesicle stocking areas and multipaths routing for vesicle transport. This approach has been developed for real image sequences and Rab proteins...|$|R
40|$|Agbiotechnology uses genetic {{engineering}} {{to improve the}} output and value of crops. Altering {{the expression of the}} plant Type I Proton-pumping Pyrophosphatase (H+-PPase) has already proven to be a useful tool to enhance crop productivity. Despite the effective use of this gene in translational research, information regarding the intracellular localization and functional plasticity of the pump remain largely enigmatic. Using computer modeling several putative phosphorylation, ubiquitination and sumoylation target sites were identified that may regulate Arabidopsis H+-PPase (AVP 1 - Arabidopsis Vacuolar Proton-pump 1) subcellular trafficking and activity. These putative regulatory sites will direct future research that specifically <b>addresses</b> the <b>partitioning</b> and transport characteristics of this pump. We posit that fine-tuning H+-PPases activity and cellular distribution will facilitate rationale strategies for further genetic improvements in crop productivity...|$|R
40|$|The Kernighan/Lin graph {{partitioning}} heuristic, {{also known}} as min-cut, has been enhanced over decades and successfully adopted for circuit partitioning. During last years extended versions {{have been developed to}} <b>address</b> functional <b>partitioning</b> as it is needed to solve the much investigated co-design problem of partitioning a system's coarse-grained functions among hardware and software components. In combination with advanced code parsing on system level to derive reliable metrics for execution time and hardware size, the heuristic is immediately applicable in an automatic way to achieve a partitioning decision {{in the early stages of}} a design process. In this paper we demonstrate a consistent design methodology combining advanced code analysis and an extended Kernighan/Lin heuristic for functional partitioning applied to an industry-designed UMTS receiver component at highest abstraction level...|$|R
50|$|Since block {{addresses}} and sizes {{are stored in}} the partition table of an MBR using 32 bits, the maximum size {{as well as the}} highest start <b>address</b> of a <b>partition</b> using drives that have 512-byte sectors (actual or emulated) cannot exceed 2 TiB−512 bytes (2,199,023,255,040 bytes or 4,294,967,295 (232−1) sectors × 512 (29) bytes per sector). Alleviating this capacity limitation was one of the prime motivations {{for the development of the}} GPT.|$|R
40|$|Abstract. The {{proportion}} and {{origin of}} groundwater contri-bution to streamflow from agricultural catchments {{is relevant to}} estimation {{of the effects of}} nitrate leached from the soil on the quality of surface waters. This study <b>addresses</b> the <b>partitioning</b> of streamflow contributions from near-surface runoff and from groundwater, each with different contribut-ing land area, on a steep pastoral hillslope in a humid climate. The 3 ha headwater catchment of the perennial Pukemanga Stream, in the North Island of New Zealand, was instru-mented for continuous observation of climatic data, stream-flow and groundwater level. The dynamics of groundwater levels and groundwater contribution to streamflow were anal-ysed by means of a one-parameter, eigenvalue-eigenfunction description of a 1 -D aquifer model. Model results for seven years of daily data predict that 36 – 44 % of the topographi...|$|R
40|$|Green Fluorescent Protein (GFP) -tagging and {{time-lapse}} {{fluorescence microscopy}} enable to observe molecular dynamics and interactions in live cells. Original image analysis methods are then required to process challenging 2 D or 3 D image sequences. To address the tracking problem of several hundreds of objects, we propose an original framework that provides general information about vesicle transport, that is traffic flows between {{origin and destination}} regions detected in the image sequence. Traffic estimation {{can be accomplished by}} adapting the advances in Network Tomography commonly used in network communications. In this paper, we <b>address</b> image <b>partition</b> given vesicle stocking areas and multipaths routing for vesicle transport. This approach has been developed for real fluorescence image sequences and Rab proteins. Index Terms — Traffic control (transportation), microscopy, fluorescence, proteins, video, routing, tracking...|$|R
40|$|The {{success of}} {{large-scale}} parallel architectures {{is limited by}} the difficulty of developing machineindependent parallel programs. We have developed Fortran D, a version of Fortran extended with data decomposition specifications, to provide a portable data-parallel programming model. This paper presents the design of two key components of the Fortran D programming system: a prototype compiler and an environment to assist automatic data decomposition. The Fortran D compiler <b>addresses</b> program <b>partitioning,</b> communication generation and optimization, data decomposition analysis, run-time support for unstructured computations, and storage management. The Fortran D programming environment provides a static performance estimator and an automatic data partitioner. We believe that the Fortran D programming system will significantly ease the task of writing machine-independent data-parallel programs. 1 Introduction It is widely recognized that parallel computing represents the only plausible w [...] ...|$|R
50|$|Prior to 1995, {{versions}} of DOS accessed the disk via CHS addressing only. When MS-DOS 7.0 / Windows 95 introduced LBA disk access, partitions could start being physically located outside the first ca. 8 GiB of this disk and thereby {{out of the}} reach of the traditional CHS <b>addressing</b> scheme. <b>Partitions</b> partially or fully located beyond the CHS barrier therefore had to be hidden from non-LBA-enabled operating systems by using the new partition type 0x0E in the partition table instead. FAT16 partitions using this partition type are also named FAT16X. The only difference, compared to previous FAT16 partitions, is the fact that some CHS-related geometry entries in the BPB record, namely the number of sectors per track and the number of heads, may contain no or misleading values and should not be used.|$|R
