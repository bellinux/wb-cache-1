691|2556|Public
5000|$|<b>Application</b> <b>components,</b> such as spreadsheet, pivot table, and calendar.|$|E
5000|$|Support for video, <b>application</b> <b>components,</b> shared libraries, and {{accessibility}} ...|$|E
5000|$|Uniface Runtime Engine—a platform-specific {{process that}} interprets and executes {{compiled}} <b>application</b> <b>components</b> and libraries.|$|E
3000|$|Proof of {{broadcast}} intent delivery to every <b>application</b> <b>component</b> (“Proof {{of broadcast}} resolution” section), and [...]...|$|R
40|$|We {{present a}} method to add {{dependability}} features to component-based software systems. The method is applicable if the dependability features add new behavior to the system, but do not change its basic functionality. The idea is {{to start with a}} software architecture whose central <b>component</b> is an <b>application</b> <b>component</b> that implements the behavior of the system in the normal case. The <b>application</b> <b>component</b> is connected to other components, possibly through adapters. It is then possible to enhance the system by adding dependability features {{in such a way that}} the central <b>application</b> <b>component</b> remains untouched. Adding dependability features necessitates to evolve the overall system architecture by replacing or newly introducing hardware or software components. The adapters contained in the initial software architecture have to be modified, whereas the other software components need not to be changed. Thus, the dependability of a component-based system can be enhanced in an incremental way. ...|$|R
30|$|This {{paper has}} {{reviewed}} the basic requirements for providing dynamic service-level agreements, {{and developed a}} draft plan for implementing and evaluating such dynamic SLAs in OpenStack. This SLA architecture does require that applications understand what their own resource requirements are. For some existing applications, this information {{may be difficult to}} acquire. When an application is deployed on dedicated hardware, there may have been no provision for determining the actual requirements of each <b>application</b> <b>component.</b> As long as an <b>application</b> <b>component</b> never became an egregious bottleneck, everything was fine.|$|R
5000|$|Polyglot. <b>Application</b> <b>components</b> can {{be written}} in Java, JavaScript, Groovy, Ruby, Scala, Kotlin and Ceylon.|$|E
5000|$|A {{wide variety}} of <b>application</b> <b>components</b> were {{developed}} and {{released to the public}} during the DSPlayer® development. These include: ...|$|E
5000|$|Inversion {{of control}} container: {{configuration}} of <b>application</b> <b>components</b> and lifecycle management of Java objects, done mainly via dependency injection ...|$|E
30|$|A {{set of four}} tenants (T 1, T 2, T 3, and T 4) are {{configured}} {{to access}} an <b>application</b> <b>component</b> deployed using three different types of multitenancy patterns (i.e., shared component, tenant-isolated component, and dedicated component). Each pattern {{is regarded as a}} group in this experiment. Treatment was created for configuring T 1 so that it will experience a high workload. For each experimental run, one of the four tenants (i.e., T 1) is configured to experience a demanding deployment condition (e.g., large instant loads) while accessing the <b>application</b> <b>component.</b> The performance metrics (e.g., response times) and systems resource consumption (e.g., CPU) of each tenant are measured before the treatment (pre-test) and after the treatment (post-test) was introduced. The hypothesis of the experiment is that the performance and system’s resource utilisation experienced by tenants accessing an <b>application</b> <b>component</b> deployed using each multitenancy pattern changes significantly from the pre-test to the post-test.|$|R
5000|$|Rational Asset Manager handles {{any kind}} of asset, such as <b>applications,</b> <b>components,</b> patterns, {{software}} that runs systems and products, services, frameworks, templates, etc. Rational Asset Manager includes the following functionality: ...|$|R
3000|$|Use of {{advanced}} {{features such as}} pointers to structured descriptions of <b>applications,</b> <b>components,</b> executions, etc., and mined knowledge (statistics, cost-benefit analyses) to improve the level of technical discussion between DevOps users [...]...|$|R
50|$|Colony {{framework}} {{includes a}} set of <b>application</b> <b>components</b> for various functions, from domain-specific sub-frameworks to providers for common protocols and services.|$|E
50|$|SAP NetWeaver Visual Composer is SAP’s web-based {{software}} modelling tool. It enables {{business process}} specialis and developers to create business <b>application</b> <b>components,</b> without coding.|$|E
50|$|A {{software}} experience {{model may}} represent the relationship of one application to another, an application in relationship to various navigation mechanisms and other system or <b>application</b> <b>components.</b>|$|E
5000|$|Applications : The <b>Applications</b> <b>component</b> identifies, defines, and organizes the {{activities}} that capture, manipulate, and manage the business information to support mission operations. It also describes the logical dependencies and relationships among business activities.|$|R
30|$|Assuming {{that the}} {{document}} generation service is deployed on each PaaS platform of the multi-cloud environment (see Listing ??), then a tenant can constrain (via policies) which instance of this <b>application</b> <b>component</b> {{will be used}} for processing his requests. Such a tenant policy specifies the required properties of a certain <b>application</b> <b>component.</b> For example, the policy in Figure ?? specifies that, for a confidential document type, the document generation service must provide encrypted storage and secure communicaton, or must run in a private cloud. Tenants can further define other document types (that are mapped to message types in the middleware) and specify constraints for each type.|$|R
5000|$|A new dimension, Application discovery, tracing and {{diagnostics}} (ADTD), combines three formerly separate dimensions (Application topology architecture {{discovery and}} visualization, User-defined transaction profiling, and <b>Application</b> <b>component</b> deep-dive), since {{all three are}} primarily focused on problem remediation and are interlinked; ...|$|R
50|$|The runtime engine executes the <b>application</b> <b>components.</b> It {{displays}} presentation components {{using the}} appropriate user interface connector (either GUI or character-based), and sends and receives data via a DBMS connector.|$|E
50|$|JBoss Fuse is an {{open source}} {{integration}} platform based on Apache ServiceMix. It is a service-oriented architecture (SOA) infrastructure that provides a standardized methodology, server, and tools to integrate <b>application</b> <b>components.</b>|$|E
5000|$|Authorizer - {{provides}} authentication and authorization facilities. Authentication {{is being}} performed {{not only for}} user login, but also on <b>application</b> <b>components</b> inter-communication. Access rights are being verified on each method call.|$|E
25|$|Except for spreadsheets, {{these tools}} are {{provided}} as standalone applications, suites of <b>applications,</b> <b>components</b> of Enterprise resource planning systems, application programming interfaces or as components of software targeted {{to a specific}} industry. The tools are sometimes packaged into data warehouse appliances.|$|R
30|$|Juju is a cloud configuration, {{deployment}} {{and monitoring}} environment that deploy services across multiple cloud or physical servers and orchestrate those services [74]. Activities within a service deployed by Juju are orchestrated by a Juju charm, {{which is a}} deployable service or <b>application</b> <b>component</b> [75].|$|R
3000|$|... (2) Throughput: The paired sample {{test result}} {{showed that the}} {{throughput}} changed significantly, implying a low degree of isolation. In this situation, the shared component is not recommended for avoiding a situation where requests are struggling {{to gain access to}} the same <b>application</b> <b>component,</b> thereby resulting in some request either being delayed or rejected. For a tenant-isolated component and dedicated component, there would not be much change in throughput because requests are not concentrated on one <b>application</b> <b>component</b> but instead are directed to the separate components reserved for different tenants. Throughput can be likened to bandwidth, and so it means that the bandwidth was not sufficiently large to cope with the size, number and frequency of requests sent to the CI system.|$|R
5000|$|Project {{distribution}} {{also contains}} a variety of so-called NodeKits. These are solutions of common problems and frequently used more advanced 3D <b>application</b> <b>components</b> and graphics algorithms. Among the most significant are ...|$|E
50|$|HP SiteScope is {{agentless}} monitoring software {{focused on}} monitoring {{the availability and}} performance of distributed IT infrastructures, including Servers, Network devices and services, Applications and <b>application</b> <b>components,</b> operating systems and various IT enterprise components.|$|E
50|$|Connection {{management}}: Connection management enables {{an application}} server to pool {{connections to the}} underlying EIS and enables <b>application</b> <b>components</b> to connect. This leads to a scalable application environment that can support {{a large number of}} clients.|$|E
5000|$|XPCOM Mozilla <b>applications</b> {{cross-platform}} <b>Component</b> Object Model ...|$|R
40|$|As event-based {{middleware}} {{is currently}} being applied for <b>application</b> <b>component</b> integration {{in a range of}} application areas, a variety of event services have been proposed to address different application requirements. The emergence of ubiquitous computing systems has given rise to application integration across multiple areas and as a result, has led to systems comprising several, independently operating event services. Even though event services are based on the same communication pattern, <b>application</b> <b>component</b> integration across heterogeneous services is typically prevented by the constraints imposed by their respective event models. This paper presents the design and implementation of the Federated Event Service (FES). The FES enables heterogeneous event services to cooperate and to operate as a single logical service. It therefore facilitates building event-based systems in which the application requirements cannot be met by a single event service...|$|R
40|$|Abstract—Elasticity in cloud {{computing}} {{is a complex}} problem, regarding not only resource elasticity but also quality and cost elasticity, and most importantly, the relations among the three. Therefore, existing support for controlling elasticity in complex applications, focusing solely on resource scaling, is not adequate. In this paper we present SYBL – a novel language for controlling elasticity in cloud applications – and its runtime system. SYBL allows specifying in detail elasticity monitoring, constraints, and strategies {{at different levels of}} cloud applications, including the whole <b>application,</b> <b>application</b> <b>component,</b> and within <b>application</b> <b>component</b> code. Based on simple SYBL elasticity directives, our runtime system will perform complex elasticity controls for the client, by leveraging underlying cloud monitoring and resource management APIs. We also present a prototype implementation and experiments illustrating how SYBL can be used in real-world scenarios. Keywords- elasticity, {{cloud computing}}, elasticity specification I...|$|R
50|$|Spoon {{works by}} materializing a virtual {{environment}} on the endpoint device, transferring <b>application</b> <b>components</b> required for execution, capturing application {{interactions with the}} storage system into a sandbox, and synchronizing the sandbox contents back to the cloud.|$|E
5000|$|A {{point of}} delivery, or PoD, is [...] "a module of network, compute, storage, and <b>application</b> <b>components</b> that work {{together}} to deliver networking services. The PoD is a repeatable design pattern, and its components maximize the modularity, scalability, and manageability of data centers." ...|$|E
5000|$|Application Virtualization: SOP {{promotes}} built-in micro {{control over}} location transparency {{of the service}} constituents of any service module. This results in automatic and granular virtualization of <b>application</b> <b>components</b> (versus an entire application process) across a cluster or grid of SOP runtime platforms.|$|E
40|$|Engineering a {{closed-loop}} control system for an electron beam welder for space-based additive manufacturing is challenging. For earth and space based <b>applications,</b> <b>components</b> must work in a vacuum and optical components become occluded with metal vapor deposition. For extraterrestrial <b>applications</b> added <b>components</b> increase launch weight, increase complexity, and increase space flight certification efforts. Here we present a software tool that closely couples path planning and E-beam parameter controls into the build process to increase flexibility. In an environment where data collection hinders real-time control, another approach is considered that will still yield a high quality build...|$|R
5000|$|Application Layer: <b>application</b> {{software}} <b>components</b> that {{interact with}} the runtime environment.|$|R
50|$|Wired: The used {{memory for}} the system and <b>application</b> core <b>components.</b>|$|R
