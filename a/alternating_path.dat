48|802|Public
25|$|Kempe {{also showed}} {{correctly}} that G {{can have no}} vertex of degree 4. As before we remove the vertex v and four-color the remaining vertices. If all four neighbors of v are different colors, say red, green, blue, and yellow in clockwise order, we look for an <b>alternating</b> <b>path</b> of vertices colored red and blue joining the red and blue neighbors. Such a path is called a Kempe chain. There may be a Kempe chain joining the red and blue neighbors, {{and there may be}} a Kempe chain joining the green and yellow neighbors, but not both, since these two paths would necessarily intersect, and the vertex where they intersect cannot be colored. Suppose it is the red and blue neighbors that are not chained together. Explore all vertices attached to the red neighbor by red-blue alternating paths, and then reverse the colors red and blue on all these vertices. The result is still a valid four-coloring, and v can now be added back and colored red.|$|E
2500|$|... an {{augmenting path}} is an <b>alternating</b> <b>path</b> that starts from and ends on free (unmatched) vertices.|$|E
2500|$|Skew-symmetric graph, {{a type of}} graph {{that can}} be used to model <b>alternating</b> <b>path</b> {{searches}} for matchings ...|$|E
40|$|<b>Alternate</b> <b>path</b> routing {{has been}} well-explored in {{telecommunication}} networks {{as a means}} of decreasing the call blocking rate and increasing network utility. However, aside from some work applying these concepts to unicast flows, <b>alternate</b> <b>path</b> routing has received little attention in the Internet community. We describe and evaluate an architecture for <b>alternate</b> <b>path</b> routing for multicast flows. For path installation, we design a receiver-oriented <b>alternate</b> <b>path</b> protocol and prove that it reconfigures multicast trees without introducing loops. For path computation, we propose a scalable local search heuristic that allows receivers to find <b>alternate</b> <b>paths</b> using only partial network information. We use a simulation study to demonstrate the ability of local search to find <b>alternate</b> <b>paths</b> approximately as well as a link-state protocol, with much lower overhead. I...|$|R
40|$|Abstract-In an Open Shortest Path First (OSPF) based {{best effort}} network, when a packet {{experiences}} congestion, the routing subsystem cannot send it through an <b>alternate</b> <b>path.</b> Thus, {{it fails to}} provide desired Quality of Service (QoS) during congestion. A Load Sensitive Routing algorithm (LSR) has been reported which finds <b>alternate</b> <b>path</b> based on ospf property. The operating parameter (or coefficient) of LSR was chosen such that total number of <b>alternate</b> <b>paths</b> in the network is maximized. In this paper, we argue that a better operating parameter would be one that maximizes total number of <b>alternate</b> <b>paths</b> subject to the constraint that maximum number of nodes {{have at least one}} <b>alternate</b> <b>path.</b> Using simulation, we show that this new algorithm, called Efficient LSR (E-LSR) performs better than OSPF and LSR in terms of delay and packet loss. Besides, this paper presents more efficient algorithm for determining the optimal operational E-LSR coefficient by pruning the search space and using a simple objective function. In E-LSR algorithm, the number of <b>alternate</b> <b>paths</b> depend on the topology and costs assigned to the links. Hence, this paper provides a topology guideline that may be followed by the implementers to make E-LSR more effective. I...|$|R
40|$|The Internet {{provides}} physical {{path diversity}} between {{a large number}} of hosts, making it possible for networks to use alternative paths when one path fails to deliver the required Quality of Service. However, for various reasons, many established protocols (e. g. de facto Internet inter-domain routing protocol, Border-Gateway Protocol - BGP) do not fully exploit such <b>alternate</b> <b>paths.</b> This paper surveys research into techniques for discovering end-to-end <b>alternate</b> <b>paths,</b> including those based on monitoring path performance, choosing paths that are maximally disjoint, and in routing across multiple paths. It surveys proposals for making BGP better able to exploit multiple paths and how multi-homing can create <b>alternate</b> <b>paths.</b> It also describes how <b>alternate</b> <b>paths</b> can be realized through detour routing (application layer mechanisms) and routing deflections (network layer mechanisms). It also discusses Fast Re-Route techniques for construction of backup routes. It concludes by surveying open research issues into the discovery and use of <b>alternate</b> <b>paths</b> in the Internet. Comment: 13 pages, 10 figure...|$|R
2500|$|As [...] showed, an <b>alternating</b> <b>path</b> or {{cycle in}} an un{{directed}} graph may be modeled {{as a regular}} path or cycle in a skew-symmetric directed graph. To create a skew-symmetric graph from an undirected graph G with a specified matching M, view G as a switch graph in which the edges at each vertex are partitioned into matched and unmatched edges; an <b>alternating</b> <b>path</b> in G is then a regular path in this switch graph and an alternating cycle in G is a regular cycle in the switch graph.|$|E
2500|$|... an <b>alternating</b> <b>path</b> is a {{path that}} begins with an {{unmatched}} vertex and is a [...] path in which the edges belong alternatively to the matching {{and not to the}} matching.|$|E
2500|$|... {{generalized}} <b>alternating</b> <b>path</b> algorithms to {{show that}} the existence of a regular path between any two vertices of a skew-symmetric graph may be tested in linear time. Given additionally a non-negative length function on the edges of the graph that assigns the same length to any edge e and to σ(e), the shortest regular path connecting a given pair of nodes in a skew-symmetric graph with m edges and n vertices may be tested in time O(mlogn). If the length function is allowed to have negative lengths, the existence of a negative regular cycle may be tested in polynomial time.|$|E
40|$|Abstract — In an Open Shortest Path First (OSPF) based {{best effort}} network, when a packet {{experiences}} congestion, the routing subsystem cannot send it through an <b>alternate</b> <b>path.</b> Thus, {{it fails to}} provide desired Quality of Service (QoS) during congestion. A Load Sensitive Routing algorithm (LSR) has been reported which finds <b>alternate</b> <b>path</b> based on ospf property. The operating parameter (or coefficient) of LSR was chosen such that total number of <b>alternate</b> <b>paths</b> in the network is maximized. In this paper, we argue that a better operating parameter would be one that maximizes total number of <b>alternate</b> <b>paths</b> subject to the constraint that maximum number of nodes {{have at least one}} <b>alternate</b> <b>path.</b> Using simulation, we show that this new algorithm, called Efficient LSR (E-LSR) performs better than OSPF and LSR in terms of delay and packet loss. Besides, this paper presents more efficient algorithm for determining the optimal operational E-LSR coefficient by pruning the search space and using a simple objective function. In E-LSR algorithm, the number of <b>alternate</b> <b>paths</b> depend on the topology and costs assigned to the links. Hence, this paper provides a topology guideline that may be followed by the implementers to make E-LSR more effective. I...|$|R
40|$|This paper {{presents}} WiSE, a transport-layer protocol that modifies {{the standard}} SCTP protocol. WiSE aims at exploiting SCTP's multihoming capabilities by selecting {{in real time}} the best choice among available, <b>alternate</b> <b>paths</b> to the same destination. Through the use of bandwidth estimation techniques, WiSE tries to infer whether losses are due to congestion or radio channel errors. At the same time, the available bandwidth on the current path used for transmission is matched to that of an <b>alternate</b> <b>path,</b> also probed for available bandwidth; if the current path is severely congested, and the <b>alternate</b> <b>path</b> is lightly loaded, WiSE switches the transmission onto the <b>alternate</b> <b>path,</b> using SCTP's flexible path management capabilities. Extensive simulations under different scenarios highlight {{the superiority of the}} proposed solution with respect to the standard SCTP implementation...|$|R
40|$|The {{respiration}} {{of fresh}} slices of preclimacteric avocado (Persea americana Mill. var. Hass) and banana (Musa cavendishii var. Valery) fruits is stimulated by cyanide and antimycin. The respiration {{is sensitive to}} m-chlorobenzhydroxamic acid {{in the presence of}} cyanide but much less so in the presence of antimycin. In the absence of cyanide the contribution of the cyanide-resistant pathway to the coupled preclimacteric respiration is zero. In uncoupled slices, by contrast, the <b>alternate</b> <b>path</b> is engaged and utilized fully in avocado, and extensively in banana. Midclimacteric and peak climacteric slices are also cyanide-resistant and, in the presence of cyanide, sensitive to m-chlorobenzhydroxamic acid. In the absence of uncoupler there is no contribution by the <b>alternate</b> <b>path</b> in either tissue. In uncoupled midclimacteric avocado slices the <b>alternate</b> <b>path</b> is fully engaged. Midclimacteric banana slices, however, do not respond to uncouplers, and the <b>alternate</b> <b>path</b> is not engaged. Avocado and banana slices at the climacteric peak neither respond to uncouplers nor utilize the <b>alternate</b> <b>path</b> in {{the presence or absence of}} uncoupler...|$|R
5000|$|To {{construct}} such a cover, let [...] be {{the set of}} unmatched vertices in [...] (possibly empty), and let [...] be the set of vertices {{that are}} either in [...] or are connected to [...] by alternating paths (paths that alternate between edges {{that are in the}} matching and edges that are not in the matching).LetEvery edge [...] in [...] either belongs to an <b>alternating</b> <b>path</b> (and has a right endpoint in [...] ), or it has a left endpoint in [...] For, if [...] is matched but not in an <b>alternating</b> <b>path,</b> then its left endpoint cannot be in an <b>alternating</b> <b>path</b> (for such a path would have had to have included [...] ) and thus belongs to [...] Alternatively, if [...] is unmatched but not in an <b>alternating</b> <b>path,</b> then its left endpoint cannot be in an <b>alternating</b> <b>path,</b> for such a path could be extended by adding [...] to it. Thus, [...] forms a vertex cover.|$|E
5000|$|... an {{augmenting path}} is an <b>alternating</b> <b>path</b> that starts from and ends on free (unmatched) vertices.|$|E
5000|$|Skew-symmetric graph, {{a type of}} graph {{that can}} be used to model <b>alternating</b> <b>path</b> {{searches}} for matchings ...|$|E
40|$|In {{the context}} of mobile ad hoc {{networks}} (MANETs), we consider the problem of identifying (a) an optimal primary path which satisfies the required QoS constraints, and (b) a set of <b>alternate</b> <b>paths</b> {{that may be used}} in case a link or a node on the primary <b>path</b> fails. The <b>alternate</b> <b>paths</b> are also required to satisfy the same set of QoS constraints {{as is the case with}} the primary path. In the paper, we have proposed that the traffic be re-routed along a subpath that bypasses a segment of the primary path that contains the failed link or node. The segments are determined based on (a) availability of <b>alternate</b> <b>paths,</b> so that (b) QoS constraints are met. This flexibility in identifying the segments can also be used to ensure that the delay in switching traffic over to an <b>alternate</b> <b>path,</b> and the resulting packet loss, are bounded. This paper is focused on proving that for a given (a) source–destination pair of nodes in a network, and (b) any primary path between them, the nodes on the primary path can be divided into a collection of segments such that for each segment there exists an <b>alternate</b> <b>path</b> which completely bypasses the segment if and only if there exist two or more node-disjoint paths between the source and destination nodes. This implies that if there exists a solution consisting of a set of <b>alternate</b> backup <b>paths</b> for a given primary path then such a solution can always be found for any primary path. We describe an algorithm to identify (a) a primary path, (b) the collections of segments, and (c) the corresponding set of <b>alternate</b> <b>paths,</b> one for each segment, each of which satisfies specified QoS constraints, so that the delay in switching traffic over to an <b>alternate</b> <b>path</b> is bounded. Keywords: Ad hoc networks, path protection, segment-backup paths, QoS-routes. 1...|$|R
5000|$|... create <b>alternate</b> <b>paths</b> to {{certification}} {{based on}} concepts of CITBOK; ...|$|R
30|$|Addressing {{wormhole}} attacks is {{a crucial}} issue to ensure security in a wireless mesh network. In this paper, we proposed a novel wormhole-resistant secure routing (WRSR) protocol that relies on shorter <b>alternate</b> <b>paths</b> to detect a wormhole link. During route discovery, WRSR monitors for <b>alternate</b> <b>paths</b> for a cached RREQ and quarantines such RREQ that fails to meet the necessary and sufficient condition. The necessary and sufficient condition to differentiate a normal path from wormhole link is derived using unit disk graphs. The probability of finding such <b>alternate</b> <b>paths</b> has been analytically computed and shown to be high in a uniformly distributed network.|$|R
5000|$|... an <b>alternating</b> <b>path</b> is a {{path that}} begins with an {{unmatched}} vertex and is a [...] path in which the edges belong alternatively to the matching {{and not to the}} matching.|$|E
5000|$|Given G = (V, E) and a {{matching}} M of G, a vertex v is exposed if no edge of M is incident with v. A path in G is an <b>alternating</b> <b>path,</b> if its edges are alternately not in M and in M (or in M {{and not in}} M). An augmenting path P is an <b>alternating</b> <b>path</b> that starts and ends at two distinct exposed vertices. Note that number of unmatched edges in an augmenting path is greater by one {{than the number of}} matched edges, and hence the total number of edges in an augmenting path is odd. A matching augmentation along an augmenting path P is the operation of replacing M with a new matching [...]|$|E
50|$|Given G = (V, E) and a {{matching}} M of G, a blossom B is a cycle in G consisting of 2k + 1 edges of which exactly k belong to M, and {{where one of}} the vertices v of the cycle (the base) is such that there exists an <b>alternating</b> <b>path</b> of even length (the stem) from v to an exposed vertex w.|$|E
40|$|Abstract—This paper {{introduces}} WiSE, a sender-side, transport-layer protocol that modifies {{the standard}} SCTP protocol. WiSE aims at exploiting SCTP’s multihoming capabilities by selecting {{in real time}} the best choice among available, <b>alternate</b> <b>paths</b> to the same destination. Through the use of bandwidth estimation techniques, WiSE tries to infer whether losses are due to congestion or to radio channel errors. At the same time, the available bandwidth of the current path used for transmission is matched to that of an <b>alternate</b> <b>path,</b> also probed for available bandwidth. If the current path is severely congested and the <b>alternate</b> <b>path</b> is lightly loaded, WiSE switches the transmission onto the <b>alternate</b> <b>path</b> using SCTP’s flexible path management capabilities. Extensive simulations under different scenarios highlight {{the superiority of the}} proposed solution with respect to TCP and the standard SCTP implementation. Index Terms—SCTP, wireless networks, bandwidth estimation, multihoming, congestion control. ...|$|R
5000|$|... #Subtitle level 2: Criticism of {{the theory}} from <b>alternate</b> <b>paths</b> to {{alphabetic}} script ...|$|R
40|$|A {{recent study}} characterizing {{failures}} in computer networks shows that transient single element (node/link) failures are the dominant failures in large communication networks like the Internet. Thus, having the routing paths globally recomputed on a failure {{does not pay}} off since the failed element recovers fairly quickly, and the recomputed routing paths need to be discarded. In this paper, we present the first distributed algorithm that computes the <b>alternate</b> <b>paths</b> required by some "proactive recovery schemes" for handling transient failures. Our algorithm computes paths that avoid a failed node, and provides an <b>alternate</b> <b>path</b> to a particular destination from an upstream neighbor of the failed node. With minor modifications, we can have the algorithm compute <b>alternate</b> <b>paths</b> that avoid a failed link as well. To {{the best of our}} knowledge all previous algorithms proposed for computing <b>alternate</b> <b>paths</b> are centralized, and need complete information of the network graph as input to the algorithm. Comment: 8 pages, 2 columns, 1 figur...|$|R
50|$|Assume for {{contradiction that}} G(X,Y) is a bipartite graph {{that has no}} {{matching}} that saturates all vertices of X.Let M be a maximum matching, and u a vertex not saturated by M. Consider all alternating paths (i.e., paths in G alternately using edges outside and inside M) starting from u. Let the set of all points in Y connected to u by these alternating paths be T, and the set of all points in X connected to u by these alternating paths (including u itself) be W.No maximal <b>alternating</b> <b>path</b> can end in a vertex in Y, lest {{it would be an}} augmenting path, so that we could augment M to a strictly larger matching by toggling the status (belongs to M or not) of all the edges of the path. Thus every vertex in T is matched by M to a vertex in W \ {u}. Conversely, every vertex v in W \ {u} is matched by M to a vertex in T (namely, the vertex preceding v on an <b>alternating</b> <b>path</b> ending at v). Thus, M provides a bijection of W \ {u} and T, which implies |W| = |T| + 1. On the other hand, NG(W) ⊆ T: let v in Y be connected to a vertex w in W. If the edge (w,v) is in M, then v is in T by the previous part of the proof, otherwise we can take an <b>alternating</b> <b>path</b> ending in w and extend it with v, getting an augmenting path and showing that v is in T. Hence, |NG(W)| = |T| = |W| − 1, a contradiction.|$|E
5000|$|In {{constructing}} matchings in undirected graphs, it {{is important}} to find alternating paths, paths of vertices that start and end at unmatched vertices, in which the edges at odd positions in the path are not part of a given partial matching and in which the edges at even positions in the path are part of the matching. By removing the matched edges of such a path from a matching, and adding the unmatched edges, one can increase the size of the matching. Similarly, cycles that alternate between matched and unmatched edges are of importance in weighted matching problems.As [...] showed, an <b>alternating</b> <b>path</b> or cycle in an undirected graph may be modeled as a regular path or cycle in a skew-symmetric directed graph. To create a skew-symmetric graph from an undirected graph G with a specified matching M, view G as a switch graph in which the edges at each vertex are partitioned into matched and unmatched edges; an <b>alternating</b> <b>path</b> in G is then a regular path in this switch graph and an alternating cycle in G is a regular cycle in the switch graph.|$|E
5000|$|... {{generalized}} <b>alternating</b> <b>path</b> algorithms to {{show that}} the existence of a regular path between any two vertices of a skew-symmetric graph may be tested in linear time. Given additionally a non-negative length function on the edges of the graph that assigns the same length to any edge e and to σ(e), the shortest regular path connecting a given pair of nodes in a skew-symmetric graph with m edges and n vertices may be tested in time O(m log n). If the length function is allowed to have negative lengths, the existence of a negative regular cycle may be tested in polynomial time.|$|E
40|$|Abstract—A {{recent study}} characterizing {{failures}} in computer networks shows that transient single element (node/link) failures are the dominant failures in large communication networks like the Internet. Thus, having the routing paths globally recomputed on a failure {{does not pay}} off since the failed element recovers fairly quickly, and the recomputed routing paths need to be discarded. In this paper, we present the first distributed algorithm that computes the <b>alternate</b> <b>paths</b> required by some proactive recovery schemes for handling transient failures. Our algorithm computes paths that avoid a failed node, and provides an <b>alternate</b> <b>path</b> to a particular destination from an upstream neighbor of the failed node. With minor modifications, we can have the algorithm compute <b>alternate</b> <b>paths</b> that avoid a failed link as well. To {{the best of our}} knowledge all previous algorithms proposed for computing <b>alternate</b> <b>paths</b> are centralized, and need complete information of the network graph as input to the algorithm...|$|R
50|$|Bradwen has two <b>alternate</b> <b>paths</b> {{that can}} be played through in Arthur's Knights: Tales of Chivalry.|$|R
5000|$|Alternate - An <b>alternate</b> <b>path</b> to {{the root}} bridge. This path is {{different}} from using the root port ...|$|R
5000|$|Additionally, every vertex in [...] is an {{endpoint}} of a matched edge.For, every vertex in [...] {{is matched}} because Z is a superset of U, {{the set of}} unmatched left vertices.And every vertex in [...] must also be matched, for if there existed an <b>alternating</b> <b>path</b> to an unmatched vertex then changing the matching by removing the matched edges from this path and adding the unmatched edges in their place would {{increase the size of}} the matching. However, no matched edge can have both of its endpoints in [...] Thus, [...] is a vertex cover of cardinality equal to , and must be a minimum vertex cover.|$|E
5000|$|An edge is {{considered}} [...] "free" [...] if {{it belongs to}} a maximum matching but {{does not belong to}} all maximum matchings. An edge e is free if and only if, in an arbitrary maximum matching M, edge e belongs to an even <b>alternating</b> <b>path</b> starting at an unmatched vertex or to an alternating cycle. By the first corollary, if edge e is part of such an alternating chain, then a new maximum matching, M&prime;, must exist and e would exist either in M or M&prime;, and therefore be free. Conversely, if edge e is free, then e is in some maximum matching M but not in M&prime;. Since e is not part of both M and M&prime;, it must still exist after taking the symmetric difference of M and M&prime;. The symmetric difference of M and M&prime; results in a graph consisting of isolated vertices, even alternating cycles, and alternating paths. Suppose to the contrary that e belongs to some odd-length path component. But then one of M and M&prime; must have one fewer edge than the other in this component, meaning that the component as a whole is an augmenting path with respect to that matching. By the original lemma, then, that matching (whether M or M&prime;) cannot be a maximum matching, which contradicts the assumption that both M and M&prime; are maximum. So, since e cannot belong to any odd-length path component, it must either be in an alternating cycle or an even-length <b>alternating</b> <b>path.</b>|$|E
50|$|The {{characterization}} of Tutte and Berge proves {{that this is}} the only obstacle to creating a large matching: the size of the optimal matching will be determined by the subset U with the biggest difference between its numbers of odd components outside U and vertices inside U. That is, there always exists a subset U such that deleting U creates the correct number of odd components needed to make the formula true. One way to find such a set U is to choose any maximum matching M, and to let X be the set of vertices that are either unmatched in M, or that can be reached from an unmatched vertex by an <b>alternating</b> <b>path</b> that ends with a matched edge. Then, let U be the set of vertices that are matched by M to vertices in X. No two vertices in X can be adjacent, for if they were then their alternating paths could be concatenated to give a path by which the matching could be increased, contradicting the maximality of M. Every neighbor of a vertex x in X must belong to U, for otherwise we could extend an <b>alternating</b> <b>path</b> to x by one more pair of edges, through the neighbor, causing the neighbor to become part of U. Therefore, in G &minus; U, every vertex of X forms a single-vertex component, which is odd. There can be no other odd components, because all other vertices remain matched after deleting U. So with this construction the size of U and the number of odd components created by deleting U are what they need to be to make the formula be true.|$|E
30|$|As of {{the widest}} {{shortest}} path (WSP) algorithm using Dijkstra algorithm in the unicast routing algorithm, the selection rule that decides which particular {{path from the}} set of feasible paths is to be picked is rather simplified. Also, the WSP algorithm used in multicast routing algorithm often causes various sorts of resource waste phenomena such as <b>alternate</b> <b>path</b> blocking (an extensively utilized <b>alternate</b> <b>path</b> of a session starves another one).|$|R
40|$|AbstractLet G be a {{balanced}} bipartite graph with partite sets X and Y, {{which has a}} perfect matching, and let x∈X and y∈Y. Let k be a positive integer. Then we prove that if G has k internally disjoint <b>alternating</b> <b>paths</b> between x and y with respect to some perfect matching, then G has k internally disjoint <b>alternating</b> <b>paths</b> between x and y with respect to every perfect matching...|$|R
40|$|This paper {{presents}} a secure <b>alternate</b> <b>path</b> routing in sensor networks. Our <b>alternate</b> <b>path</b> scheme makes the routing protocol resilient {{in the presence}} of malicious nodes that launch selective forwarding attacks. SeRINS (a Secure <b>alternate</b> <b>path</b> Routing IN Sensor networks) detects and isolates the compromised nodes, which try to inject inconsistent routing information, from the network by neighbor report system. In neighbor report system, a node’s route advertisement is verified by its surrounding neighbor nodes so that the suspect node is reported to the base station and is excluded from the network. Simulation experiments show that SeRINS is resilient {{in the presence of}} several compromised nodes which launch selective forwarding attacks, and robust by excluding the compromised nodes which inject inconsistent routing information from the network...|$|R
