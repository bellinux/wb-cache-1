22|10|Public
50|$|Introduced <b>auto-fill.</b>|$|E
5000|$|<b>Auto-fill</b> options, {{in which}} a {{computer}} or program [...] "remembers" [...] a user's personal information and HTTP [...] "cookies" ...|$|E
5000|$|Password Manager to save {{user login}} {{information}} for websites and Windows applications, and subsequently <b>auto-fill</b> those passwords on their respective sites and applications ...|$|E
5000|$|On November 14, 2005, version 8.5 was {{introduced}}. This version introduced {{password management}} and form <b>auto-filling</b> functionality, added some more languages for localized versions, {{and made some}} improvements to stability and reduced-screen rendering quality.|$|R
50|$|SuperPaint had {{the ability}} to capture images from {{standard}} video input or combine them with preexisting digital data. SuperPaint was also the first program to use now-ubiquitous features in common computer graphics programs such as changing hue, saturation and value of graphical data, choosing from a preset color palette, custom polygons and lines, virtual paintbrushes and pencils, and <b>auto-filling</b> of images. SuperPaint {{was also one of the}} first graphics programs to use a graphical user interface and was one of the earliest to feature anti-aliasing.|$|R
5000|$|Version {{tracking}}: Version {{tracking systems}} help the user find and install updates to software systems. For example: Software Catalog stores version {{and other information}} for each software package installed on a local system. One click of a button launches a browser window to the upgrade web page for the application, including <b>auto-filling</b> of the user name and password for sites that require a login. On Linux, Android and iOS this process is even easier because a standardised process for version tracking (for software packages installed in the officially supported way) {{is built into the}} operating system, so no separate login, download and execute steps are required so the process can be configured to be fully automated. Some third-party software also supports automated version tracking and upgrading for certain Windows software packages.|$|R
5000|$|... 2. Valves {{to prevent}} cement {{backflow}} did not close. Weatherford’s <b>Auto-Fill</b> float collar, which includes two flapper-type check valves, was installed at Macondo 180 ft above the reamer shoe at casing bottom. The valves are held open by a 2-inch diameter <b>auto-fill</b> tube {{to allow the}} casing to fill with mud while it is lowered down the well. BP’s casing installation procedure stated: [...] "slowly increase (mud) pump rates greater than 8 bpm to convert the float equipment (~ 500 - 700 psi) per Weatherford recommendation". As the flow rate drag force during circulation and cementing was only around 30% of that required, the <b>auto-fill</b> tube was almost certainly not ejected and the flapper valves never closed. Some evidence suggests that personnel on the Deepwater Horizon mistakenly believed that the high pressure needed to establish mud circulation had converted the float collar.|$|E
50|$|Products include ID {{capture and}} <b>auto-fill</b> software, ID authentication, {{biometric}} facial recognition, facial image matching, and CHIP/RFID reading. Partners include start-ups, Fortune 500 and FTSE 350 organizations.|$|E
50|$|SpyEye {{emanated from}} Russia in 2009 and {{was sold in}} {{underground}} forums for $500+ in which SpyEye advertised features such as keyloggers, <b>auto-fill</b> credit card modules, email backups, config files (encrypted), Zeus killer, http access, Pop3 grabbers and FTP grabbers.|$|E
40|$|Version 0. 8. 0 Issues {{closed by}} this release here. Important additions: 	Items can be shuffled (in and between blocks) now. 	Timed submit buttons {{allow you to}} specify a minimum time in which to submit. 	Item tables can be {{imported}} straight from Google Docs, reducing the edit-download-upload-cycle previously necessary. Makes collaboration easier. 	A proper test mode 	 		you can now create test codes for runs. They're special in that they enable a bar with specific features (<b>auto-filling</b> forms, skipping {{to the next step}} in the run/ending a pause). 		you can now share test codes for runs before releasing the run to the public 		test codes have names like zanyElephant, which allow you to find them again if you're looking for a specific test case 	 	 	the first semblance of an OAuth 2. 0 API (manual activation needed) 	users can turn off emails from your study for a week or forever if you allow them to...|$|R
40|$|Abstract. In {{order to}} improve the {{productivity}} of the filing form materials continuously and automatically packaged line, the control methods for the manipulator and the mechanism which has the capacity of weight self-measuring and <b>auto–filling</b> to the packaged material were studied. The manipulator is a pneumatic control system, it is consists of three pneumatic cylinder circuits to implement the horizontal movements, vertical movements and the activities of picking up or putting down the materials on line. The material {{to be picked up}} by manipulator was weighed and displayed by a single chip microcomputer. The general control function of the system was carried out by a PLC unit. The structure changeable type of simulating human being intelligence control methods resulting in the real observing at the objective changes were studied and implemented to achieve the plant high in positioning accuracy and fast in response speed. The experiments were realized and the results showed that the working period time is less than 5. 8 s，the weight variation measured by single chip microcomputer is not more than 2 grams in 300 grams...|$|R
50|$|The game {{is shown}} at a {{slightly}} zoomed out perspective, allowing less dangerous {{use of the}} jetpack, and uses the <b>auto-filling</b> power meter from Sparkster: Rocket Knight Adventures 2, which powers both the jetpack and sword attacks featured in Rocket Knight Adventures (neither Rocket Knight Adventures nor the SNES Sparkster game have an auto-power meter). Sparkster can't perform consecutive boosts, but can temporarily hover in midair. There are other tweaks, such as Sparkster only bouncing off walls when he hits them at a 45 degree angle. He is also able to shoot short range projectiles and perform a drill attack which allows him to break through certain surfaces. Sparkster's attack range is also complete, allowing him to deflect certain projectiles with his sword. Like previous entries, there will be side-scrolling shooting segments, where Sparkster can charge his shots and use his jetpack to quickly avoid obstacles. There are several items and power ups along the way, with point and life bonuses earned for collecting all of a certain item in a level.|$|R
50|$|The Motorola Xoom was {{the first}} device to run Google's tablet {{specific}} OS, Android 3.0 Honeycomb.Both the Wi-Fi and Verizon branded Xoom ran Google's Android 3.2 Honeycomb, which introduced new features including a redesigned, tablet-optimized user interface, a 3D desktop purportedly taken from BumpTop (which Google acquired in April 2010), improved task-switching, a newly redesigned notification system, Google Maps 5 in 3D and browser enhancements including tabbed browsing, form <b>auto-fill</b> and bookmark syncing.|$|E
50|$|It {{functions}} as a secure database that allows information including a user's website login passwords, Wi-Fi network passwords, credit/debit card management (though without CVV), and other account data, to be securely stored for quick access and <b>auto-fill</b> on webpages and elsewhere when the user needs instant access to them. They are always stored encrypted using 256-bit AES encryption, are stored on device and pushed from iCloud between devices, and only available on a user's trusted devices.|$|E
50|$|Excel {{became the}} first {{spreadsheet}} to allow the user to define the appearance of spreadsheets (fonts, character attributes and cell appearance). It also introduced intelligent cell recomputation, where only cells dependent on the cell being modified are updated (previous spreadsheet programs recomputed everything all the time or waited for a specific user command). Excel introduced <b>auto-fill,</b> the ability to drag and expand the selection box to automatically copy cell or row contents to adjacent cells or rows, adjusting the copies intelligently by automatically incrementing cell references or contents. Excel also introduced extensive graphing capabilities.|$|E
40|$|Password {{managers}} {{address the}} usability challenge of authentication, i. e., {{to manage the}} effort in creating, memorising, and entering complex passwords for an end-user. Offering features such as creating strong passwords, managing increasing number of complex passwords, and <b>auto-filling</b> of passwords for variable contexts, their security is as critical as the assets being protected by the passwords. Previous security risk analyses have focused primarily on cloud- and browser-based password managers, whilst {{the security risks of}} local password managers were left under-explored. Taking a systematic forensic analysis approach, this paper reports on a case study of three popular local password managers: KeePass (v 2. 28), Password Safe (v 3. 35. 1) and RoboForm (v 7. 9. 12). It revealed risks that either the master password or the content of the password database could be found unencrypted in Temp folders, Page files or Recycle bin, even after applications had been closed. As a consequence, an attacker or a malware with access to the computer on which the password managers were running may be able to steal sensitive information, even though these password managers are meant to keep the databases encrypted and protected at all times. These findings point to directions to mitigate the identified risks...|$|R
40|$|AbstractMost {{of the job}} {{matching}} engine today only takes into consideration with the information directly extracted from the resumes and vacancies. The two set of information match against each other based on some predefined rules. This paper presents the methodologies to perform {{job matching}} with user provided information, from now on referred to as parameters. A few common parameters for job matching includes domain of job, job title, position, knowledge, experience, location, salary and etc. Predefined rules assigning weighting factor to each parameter and defining how matching results could be filter and rank to produce job matching result. Besides, this paper also explained the methodologies used to <b>auto-filling</b> in places where a candidate has missed out certain important information in their resume. The auto-filing utilized the self-learning engine to collect information, analysis the data and auto generates standard template for different categories group. The standard template is categorized based on some parameters such as qualification, education background and job experience. The self-learning engine uses the advantage of ontology to make inference from data in order to discover missing parameters {{as well as new}} relationship among the parameters. The inference techniques also improve the possible inconsistencies of various parameters. The system then performs a final job matching based on direct parameters extracted from user input and dynamically populated parameters from matched standard template...|$|R
40|$|The general aim of {{the present}} study was to compare the system of values in HP/HE {{conveyed}} in courses in the area of health, pre-school teaching, basic teaching and social service, in order to understand the relation between the conceptions to be taught and the taught conceptions. For this purpose, we first carried out a content analysis of HP/HE models in national and international publications and developed a descriptive, comparative and cross-sectional study. For the latter an <b>auto-filling</b> questionnaire was applied to a sample of 709 students of seven university courses. The mental representation of the health concept by the total of the students’ sample was expressed in five key words (by decreasing order) : Well-being, Hospital, Disease, Doctors and Nurses. The predominance of these key words is connected to a reductionist vision of the health determinants, centred in the system of health, excluding the other ones. When looking at the evolution of the concept of health from the 1 st to the 4 th year of university training, the Braga Nursing course (BR-N) was the one with higher decrease in the key words associated to the reductionist vision of the term and, similarly, the course of Basic Teaching Teachers (BTT) was the one with more increases associated to the wide concept of health. In contrast, the VR-N course did not show substantial changes on the perspective of health, keeping the technical-centric view of health along training. Fundação para a Ciência e a Tecnologia (FCT) - LIBEC/CIFPEC unidade de investigação 16 / 64...|$|R
50|$|Form {{grabbing}} {{is a form}} of malware {{that works}} by retrieving authorization and log-in credentials from a web data form before it is passed over the Internet to a secure server. This allows the malware to avoid HTTPS encryption. This method is more effective than keylogger software because it will acquire the user’s credentials even if they are input using virtual keyboard, <b>auto-fill,</b> or copy and paste. It can then sort the information based on its variable names, such as email, account name, and password. Additionally, the form grabber will log the URL and title of the website the data was gathered from.|$|E
5000|$|However, in 2007, {{there was}} a {{movement}} by Glendale residents to obtain their own ZIP code since sharing a zip code with Ridgewood has caused many problems due to <b>auto-fill</b> features programmed into most computer databases. As a result, most Glendale residents receive mail addressed [...] "Ridgewood" [...] and have difficulties when arranging deliveries or hiring plumbers, electricians or contractors. The incorrect, misleading Ridgewood address causes many of {{them to go to}} the wrong location. This is because identically numbered streets in Queens are often broken into separate segments by barriers like railroad tracks, highways and cemeteries.|$|E
5000|$|The Cricut Expression® {{offers several}} {{advantages}} {{over the previous}} model. [...] First, it allows users to cut shapes and fonts in a range from ¼" [...] to 23½", and comes with a 12" [...] x 12" [...] cutting matting with adjustable slides so that users {{no longer need to}} trim their media down to 6" [...] x 12". It cuts a wider range of materials, including vellum, fabric, chipboard, vinyl, and thin foils. It also features an LCD Screen to preview the work, and has features such Quantity and <b>Auto-Fill.</b> A [...] "Paper Saver" [...] mode and choice of Portrait or Landscape Orientation have also been added. The basic model has two cartridges included in the purchase, Plantin SchoolBook and Accent Essentials.|$|E
40|$|International audienceWeb {{forms are}} massively {{used as a}} very {{effective}} way for user interaction with information systems. Notwithstanding, filling in forms with personal data can be tedious and repetitive. Due to legal and technical constraints, full interoperability of information systems is not a straightforward solution. So that several client-side techniques have been developed {{in the last years}} to automate the task of filling in forms; for example, <b>auto-filling</b> and auto-complete are very well-known techniques that employ contextual information to fill in automatically Web forms. However, the accuracy of these techniques is limited by the contextual information available on the Web browser. Some information systems can record users' personal information on the server side and use them to provide pre-filled forms to returning users. The problem with such as an approach is that users must keep updated records of personal information in remote servers; legal and technical issues prevent from sharing personal data among different applications, thus users must maintain multiple accounts. Interestingly enough, the analysis of data requested in forms reveal a pattern in the set of pieces of personal information that are often required (e. g. names, affiliations, billing address, home address, bank account, etc). In this paper we propose a new approach for automating filling in form that relies on these patterns of personal information. Our ultimate goal is to provide means for supporting the exchange of data between user's Personal Information Management Systems (PIMS) and Web forms. The approach is supported by a tool called PIAFF (which stands for Personal Information Assistant for Filling Forms) and illustrated by a case study concerning forms used for student applications...|$|R
40|$|Abstract Electronic health records serve {{multiple}} purposes, including clinical communication, legal documentation, {{financial transaction}} capture, research and analytics. Electronic signatures attached to entries in EHRs have different logical and legal meanings for different users. Some {{of these are}} vestiges from historic paper formats that require reconsideration. Traditionally accepted functions of signatures, such as identity verification, attestation, consent, authorization and non-repudiation can become ambiguous {{in the context of}} computer-assisted workflow processes that incorporate functions like logins, <b>auto-fill</b> and audit trails. This article exposes the incompatibility of expectations among typical users of electronically signed information. </p...|$|E
40|$|On the desktop, {{users are}} {{accustomed}} to having visible handles to objects that they can organize, share, and manipulate. Web applications today feature many loosely defined classes of such objects, like flight itineraries, products for sale, people, recipes, and restaurants, {{but there are no}} interoperable handles for these high-level semantic objects. On the web, users need visible handles that can represent an evolving set of semantically rich objects. Such handles would enable a simple, direct, and consistent interface for data representation and transfer. This thesis proposes Clui, a platform for exploring a new data type, called a Webit, that provides uniform handles to objects. Users drag and drop Webits be-tween sites to transfer data, <b>auto-fill</b> search forms, map associated locations, o...|$|E
40|$|Put Britney Spears into a YouTube {{search and}} the third <b>auto-fill</b> {{on the list is}} “Britney Spears without Autotune”. Auto-Tune has become the music {{industry}} equivalent of doping in the Tour de France circa 2005; we know everyone’s doing it, but we still have a sense of surprise and outrage when it becomes public. In {{the last week or so}} a video has surfaced of the pop singer Britney Spears – with examples of her vocal before and after processing. Whether or not the “before” version is actually the raw material for the “after” version is difficult to say. What’s not difficult to say is that the “before” vocal is distinctly lacking in a demonstrable ability to sing in tune. ...|$|E
40|$|On the desktop, {{users are}} {{accustomed}} to having visible handles to objects {{that they want to}} organize, share, or manipulate. Web applications today feature many classes of such objects, like flight itineraries, products for sale, people, recipes, and businesses, but there are no interoperable handles for high-level semantic objects that users can grab. This paper proposes Clui, a platform for exploring a new data type, called a Webit, that provides uniform handles to rich objects. Clui uses plugins to 1) create Webits on existing pages by extracting semantic data from those pages, and 2) augmenting existing sites with drag and drop targets that accept and interpret Webits. Users drag and drop Webits between sites to transfer data, <b>auto-fill</b> search forms, map associated locations, or share Webits with others. Clui enables experimentation with handles to semantic objects and the standards that underlie them. Author Keywords Cloud; handles; semantic we...|$|E
40|$|Password {{managers}} {{have been developed}} to address the human challenges associated with password security, i. e., to solve usability issues in a secure way. They offer, e. g., features to create strong passwords, to manage the increasing number of passwords a typical user has, and to <b>auto-fill</b> passwords, sparing users the hassle of not only remembering but also typing them. Previous studies have focused mainly on the security analysis of cloud-based and browser-based password managers; security of local password managers remains mostly under-explored. This paper takes a forensic approach and reports on a case study of three popular local password managers: KeePass (v 2. 28), Password Safe (v 3. 35. 1) and RoboForm (v 7. 9. 12). Results revealed that either the master password or the content of the password database could be found unencrypted in Temp folders, Page files or Recycle bin, even after the applications had been closed. Therefore, an attacker or malware with temporary access to the computer on which the password managers were running may be able to steal sensitive information, even though these password managers are meant to keep the databases encrypted and protected at all times...|$|E
40|$|Genetically {{modified}} animal {{models are}} useful for understanding mechanisms of human disease and for development of new therapeutics. Maintaining animal colonies and performing genetic experiments requires careful record keeping. Many commercial or publicly available data management tools exist for animal recordkeeping, however they are rather complicated and may require technical expertise to install and maintain [1, 2]. Consequently, biologists often use spreadsheets or database tools that are tied to a single computer, which limits accessibility by multiple users at different locations. Here, we have developed a user-friendly tool called ColonyTrak, designed for the biologist, to enable data management from any remote computer using a web browser. Figure 1 ColonyTrak workflow. Materials and methods ColonyTrak was developed using a MySQL database, HTML (for GUI), CSS (for style sheets), PHP (server side scripting language), AJAX (for autofilling and auto increment features), and Javascript (for displaying alert messages or data validation) {{in a manner that}} is transparent to the end user. Registered users have administrator rights and, through a simple interface, are able to manage projects, users and read/write privileges (Figure 1). Users are able to enter a variety of animal data such as date of birth, genotype, lineage information, mating schemes from any location using a web browser. Several features such as <b>auto-fill</b> and auto-increment are implemented to make data entry easier...|$|E
40|$|On the desktop, {{users are}} {{accustomed}} to having visible handles to objects that they can organize, share, and manipulate. Web applications today feature many loosely defined classes of such objects, like flight itineraries, products for sale, people, recipes, and restaurants, {{but there are no}} interoperable handles for these high-level semantic objects. On the web, users need visible handles that can represent an evolving set of semantically rich objects. Such handles would enable a simple, direct, and consistent interface for data representation and transfer. This thesis proposes Clui, a platform for exploring a new data type, called a Webit, that provides uniform handles to objects. Users drag and drop Webits between sites to transfer data, <b>auto-fill</b> search forms, map associated locations, or share Webits with others. While Clui offers a developer API to add Webit support to web sites, Clui plugins allow users to use Webits immediately. Plugins create Webits by extracting semantic data from existing web pages, and they augment sites with drag and drop targets that accept and interpret Webits, all without requiring the cooperation of site developers. Contributions of this thesis include design principles, derived from experimentation, that guide the functionality and behavior of handles for web objects; a system design that provides an adoption path for such handles; and a scalable approach for realizing handles that enforce access controls. To evaluate the usability of Webits, we conducted two in-laboratory studies and collected qualitative observations and feedback. The results suggest that the system is usable and effective in improving user efficiency. While using the system, participants expressed enthusiasm and delight, and believed that Webits would be useful for their daily web activities. by Hubert Pham. Thesis (Ph. D.) [...] Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, 2013. Cataloged from PDF version of thesis. Includes bibliographical references (pages 153 - 158) ...|$|E
40|$|MIT {{policies}} {{set forth}} by the Department of Environment, Health, and Safety (EHS) require that all laboratories maintain a chemical inventory to properly document the use of hazardous chemicals. While EHS has provided a chemical inventory management tool called ChemTracker to help labs to do so, {{it is estimated that}} less than 20 % of laboratories utilize the software. As a result, an EHS committee has been formed to re-evaluate ChemTracker and explore other options for inventory management. RFPs have been sent to potential vendors to determine if alternatives can better satisfy the goals of EHS and attain the benefits of effective chemical management. To analyze the problem of low usage rates of ChemTracker, interviews were conducted with research groups within the Department of Materials Science & Engineering (DMSE). These revealed that the largest variables were the number of chemicals used by the lab and the user-friendliness of the software. The initial time investment to switch from current, simpler methods to ChemTracker discouraged many smaller labs from pursuing that option. Current users of ChemTracker also expressed frustration with <b>auto-fill</b> features that weren't comprehensive and thus hindered the process of entering and updating inventory. Future work should expand into other departments to observe usage behavior and concerns and compare to those within DMSE. Any chemical inventory management software should be user-tested prior to full Institute implementation to ensure adoption by a larger proportion of groups around campus. While compulsory software would also ensure adoption, a one-size-fits-all approach is not appropriate for chemical tracking due to the hassle it could create and the potential impact on productivity of research itself. Thus, further analysis of user concerns and better marketing of the tools to address those concerns are required for a successful solution to the problem. by Valerie Jing-chi Chia. Thesis (S. B.) [...] Massachusetts Institute of Technology, Dept. of Materials Science and Engineering, 2013. Cataloged from PDF version of thesis. Includes bibliographical references (p. 29) ...|$|E
40|$|Background: Myfood 24 {{is a new}} online 24 h dietary {{assessment}} tool developed for use among the UK population. Limited information {{is available on the}} usability and acceptability of such tools. Hence this study aims to determine the usability and acceptability of myfood 24 among British adolescents (11 - 18 y) before and after making the improvements. Methods: A total of 84 adolescents were involved in two stages. In stage-I (beta-version of myfood 24), 14 adolescents were recruited, 7 of whom (group- 1) were asked to enter standardized tasks in a testing room with screen capture software. The remaining 7 -adolescents (group- 2) were asked to report their previous food intake using myfood 24 at home. All participants then completed a usability and acceptability questionnaire. Stage-II was carried out after making amendments to the live-version of myfood 24 in which 70 adolescents were asked to enter their food intake for two days and then complete the same questionnaire. Thematic analysis was conducted of observer comments and open-ended questions. Results: Navigation, presentation errors and failure to find functions were the main usability issues identified in the beta-version. Significant improvements were found in the usability and acceptability of most functions after implementing certain features like a spell checker, <b>auto-fill</b> option, and adding ‘mouse hover’ to help with the use of some functions. Adolescents’ perceptions of searching food items, selecting food portion sizes and making a list function were significantly improved in the live-version. The mean completion time of myfood 24 reduced from 31 (SD[*]=[*] 6) minutes in the beta-version to 16 (SD[*]=[*] 5) minutes in the live-version. The mean system usability score (SUS) of myfood 24 improved from 66 / 100 (95 % CI 60, 73) in the beta-version to 74 / 100 (95 % CI 71, 77) in the live-version, which is considered as ‘good’. Of the adolescents in stage-II, 41 % preferred using myfood 24 to the interviewer-administered 24 h recall because myfood 24 was quicker, easier to use and provided the adolescents with privacy when reporting dietary intake. Conclusion: Considering adolescents’ feedback has helped in improving the usability and acceptability of the final-version of myfood 24. myfood 24 appears to support adolescents’ need in reporting their dietary intake, which may potentially improve the overall quality of adolescents’ self-reported dietary information...|$|E

