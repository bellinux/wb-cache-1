234|0|Public
50|$|The Service Availability Forum defines {{standards}} for <b>application-aware</b> High Availability.|$|E
5000|$|... #Subtitle level 3: Third Generation - Transparent, <b>Application-aware</b> Network Content Inspection, or Deep Content Inspection ...|$|E
5000|$|... "Strong Value" [...] by the Enterprise Management Associates (EMA) Radar™ Report for <b>Application-Aware</b> Network Performance Management (ANPM) Q3 2010.|$|E
5000|$|... “Best Use of Cloud Delivery” by the Enterprise Management Associates (EMA) Radar™ Report for <b>Application-Aware</b> Network Performance Management (ANPM) Q3 2010.|$|E
5000|$|Integrated {{with the}} industry's top storage arrays to {{automate}} {{the creation of}} indexed, <b>application-aware</b> hardware snapshot copies across multi-vendor storage environments.|$|E
50|$|Bigfoot Networks - an Austin, Texas-based company {{acquired}} in September 2011, with <b>application-aware</b> networking {{technologies that are}} being marketed under the trademarked brand-name of StreamBoost.|$|E
5000|$|... • (NAM)Provides deep <b>application-aware</b> network {{visibility}} and granular performance analytics that empower network administrators to rapidly isolate and remediate problems {{and improve the}} user experience.|$|E
5000|$|MPC8572E - Uses dual e500 cores {{with speed}} up to 1.5 GHz. Used in high end <b>application-aware</b> {{networking}} equipment like firewalls and antivirus devices (from Kaspersky Lab).|$|E
50|$|In 2006, Sun {{introduced}} the Sun StorageTek 5800 System, the first <b>application-aware</b> programmable storage solution. In 2008, Sun contributed the source {{code of the}} StorageTek 5800 System under the BSD license.|$|E
50|$|WACA is a {{clustering}} algorithm for dynamic networks. WACA (Weighted <b>Application-aware</b> Clustering Algorithm) uses a heuristic {{weight function}} for self-organized cluster creation. The election of clusterheads {{is based on}} local network information only.|$|E
50|$|CAS for Windows is an <b>application-aware</b> {{file-based}} cache, {{which can}} be tuned by system administrators. Additionally, it integrates with the operating system's buffer cache, creating a multi-tier cache architecture. CAS is also aware of some virtualization technologies like vMotion, maintaining a hot SSD cache during a VM migration.|$|E
50|$|Snorts {{open source}} network-based {{intrusion}} detection system (NIDS) {{has the ability to}} perform real-time traffic analysis and packet logging on Internet Protocol (IP) networks. Snort performs protocol analysis, content searching and matching. These basic services have many purposes including <b>application-aware</b> triggered quality of service (AATQoS), to de-prioritize bulk traffic when latency-sensitive applications are in use.|$|E
5000|$|In August 2010, SevOne {{was awarded}} [...] "Most Innovative Architecture" [...] by the Enterprise Management Associates in the EMA for <b>Application-Aware</b> Network Performance Management (ANPM) 2010. In the same report, SevOne was also {{ranked in the}} [...] "Strong Value" [...] {{category}} for being loaded with ANPM capabilities, ease of deployment and administration, and cost efficiency.|$|E
50|$|A {{context-aware}} {{network is}} {{a network that}} tries to overcome {{the limitations of the}} dumb and intelligent network models and to create a synthesis which combines the best of both network models. It is designed to allow for customization and application creation {{while at the same time}} ensuring that application operation is compatible not just with the preferences of the individual user but with the expressed preferences of the enterprise or other collectivity which owns the network. The Semantic Web is an example of a context-aware network. Grid networks, pervasive networks, autonomic networks, <b>application-aware</b> networks, service-oriented networks all contain elements of the context-aware model.|$|E
50|$|Application layer {{firewalls}} {{are generally}} slower than stateful inspection. Application-layer firewalls are sometimes implemented using application proxies. Two TCP connections are established: one between the packet source and the firewall, another between the firewall and the packet destination. Application proxies intercept arriving packets {{on behalf of}} the destination, examine application payload, and then relay permitted packets to the destination. Suspicious data is dropped and the client and server never communicate directly with each other.Proxies necessarily involve more protocol stack overhead than inspecting packets at the network layer. Furthermore, because a unique proxy is required for each application, proxy firewalls can be less flexible and slower to upgrade than stateful inspection firewalls. Nevertheless, because application-level proxies are <b>application-aware,</b> the proxies can more easily handle complex protocols like H.323 or SIP, which are used for videoconferencing and VoIP (Voice over IP).|$|E
5000|$|Iyer’s {{research}} contributions {{have led}} to major advances {{in the design and}} validation of dependable computing systems. [...] He has authored or co-authored close to three hundred refereed publications, graduated over 35 PhD students and many Masters students. His students and postdoctoral associates have gone on to successful leadership positions at major industrial laboratories, faculty positions at major universities world-wide and founded several successful startups acquired by major vendors. He has led several large successful projects including the NASA’s Center for Excellence in Aerospace Computing, DARPA multi-university program in advanced reliable computing and the creation of the Information Trust Institute. During his tenure as Director of CSL the research expenditures in the laboratory went from $6.5M to nearly $18M. He currently leads the Trusted Illiac project at Illinois. Funded by both industry and government, the project is developing adaptive, <b>application-aware</b> architectures supporting a wide range of dependability and security requirements.|$|E
40|$|In this paper, we {{implement}} an <b>application-aware</b> scheduler that differentiates users running real-time {{applications and}} delay-tolerant applications while allocating resources. This approach {{ensures that the}} priority is given to real-time applications over delay-tolerant applications. In our system model, we include realistic channel effects of Long Term Evolution (LTE) system. Our <b>application-aware</b> scheduler runs in two stages, the first stage is resource block allocation and the second stage is power allocation. In the optimal solution of resource block allocation problem, each user is inherently guaranteed a minimum Quality of Experience (QoE) while ensuring priority given to users with real-time applications. In the power allocation problem, a new power allocation method is proposed which utilizes the optimal solution of the <b>application-aware</b> resource block scheduling problem. As a proof of concept, we run a simulation comparison between a conventional proportional fairness scheduler and the <b>application-aware</b> scheduler. The simulation results show better QoE with the <b>application-aware</b> scheduler. Comment: 5 pages, 2 figure...|$|E
40|$|The {{networking}} doma in is {{witnessing a}} shift from traditional ‘protocol layer-aware ’ processing to operating across these layers. Current network devices are being designed to inspect and even process packet contents. Thus the network is beginning to be <b>application-aware.</b> In this paper the evolution of <b>application-aware</b> networks is analyzed. Given the current trend, {{it is observed that}} <b>application-aware</b> networks would soon face certain challenges, one of them being lack of coordination among the <b>application-aware</b> services. As a solution, a grid-based framework that facilitates the provisioning and coordination of application-awareness in the network is provided. The service architecture and mode of operation of this framework are presented. A case study is then presented to demonstrate the use of this grid to support multimedia data transfers, and the performance is analyzed using network processor-based devices are as grid nodes. The analysis shows that (a) network processor-like devices, with their rich set of packet processing resources, can handle additional load to support <b>application-aware</b> processing, and (b) with minimal overheads, end-to-end performance can be enhanced {{with the help of the}} grid...|$|E
40|$|Abstract—Byzantine fault {{tolerance}} has been intensively stud-ied {{over the past}} decade as a way to enhance the intrusion resilience of computer systems. However, state-machine-based Byzantine {{fault tolerance}} algorithms require deterministic ap-plication processing and sequential execution of totally ordered requests. One way of increasing the practicality of Byzantine fault tolerance is to exploit the application semantics, which we refer to as <b>application-aware</b> Byzantine fault tolerance. <b>Application-aware</b> Byzantine fault tolerance makes it possible to facilitate concurrent processing of requests, to minimize the use of Byzantine agreement, and to identify and control replica nondeterminism. In this paper, we provide an overview of recent works on <b>application-aware</b> Byzantine fault tolerance techniques. We elaborate the need for exploiting application semantics for Byzantine fault tolerance and the benefits of doing so, provide a classification of various approaches to <b>application-aware</b> Byzan-tine fault tolerance, and outline the mechanisms used in achieving application- aware Byzantine fault tolerance according to our classification...|$|E
40|$|There are {{at least}} two {{competing}} visions for the future National Information Infrastructure. One model is based on the application-blind architecture of the Internet; the other is based on the <b>application-aware</b> architecture of cable television systems and online services. Among <b>application-aware</b> architectures, some are content-aware and some are content-blind. In this paper we examine some consequences of these different network architectures for content provision. ...|$|E
40|$|Many {{real-time}} distributed collaborative {{applications are}} emerging that require exchange of critical sensor data among geographically distant end users under resource-constrained network conditions. The QoS requirements, e. g., required bandwidth, latency, acceptable data quality, and reliability are interdependent, and {{critical to the}} operation of these applications. This paper presents an AWON (<b>Application-aWare</b> Overlay Networks) architecture for deploying <b>application-aware</b> services in an overlay network to best meet the application requirements over the available overlay networking infrastructure. An application programming interface (API) is presented to facilitate development of applications within the AWON architectural framework. The API supports the configuration of overlay nodes for in-network, <b>application-aware</b> processing. Application-defined plug-in modules are used to deploy applicationspecific functionality at each overlay node. The API also enables communication between application and the overlay routing protocol for the desired QoS support. The effectiveness of the AWON architecture and the API is demonstrated for a real-time weather radar data dissemination application using planetlab. Experimental results show that AWON-based <b>application-aware</b> services significantly {{improve the quality of}} the content delivered to the end users in bandwidth-constrained conditions...|$|E
40|$|Abstract—In a {{multicore}} system, applications {{running on}} different cores interfere at main memory. This inter-application interference degrades overall system performance and unfairly slows down applications. Prior works have developed <b>application-aware</b> memory request schedulers to tackle this problem. State-of-the-art <b>application-aware</b> memory request schedulers prioritize memory requests of applications that {{are vulnerable to}} interfer-ence, by ranking individual applications based on their memory access characteristics and enforcing a total rank order. In this paper, we observe that state-of-the-art <b>application-aware</b> memory schedulers have two major shortcomings. First, ranking applications individually with a total order based on memory access characteristics leads to high hardware cost and complexity. Second, ranking can unfairly slow down applications {{that are at the}} bottom of the ranking stack. To overcome thes...|$|E
40|$|Conventional {{oblivious}} routing algorithms {{are either}} not <b>application-aware</b> or assume that each flow {{has its own}} private channel to ensure deadlock avoidance. We present a framework for <b>application-aware</b> routing that assures deadlock-freedom under one or more channels by forcing routes to conform to an acyclic channel dependence graph. Arbitrary minimal routes can be made deadlock-free through appropriate static channel allocation when two or more channels are available. Given bandwidth estimates for flows, we present a mixed integer-linear programming (MILP) approach and a heuristic approach for producing deadlock-free routes that minimize maximum channel load. The heuristic algorithm is calibrated using the MILP algorithm and evaluated {{on a number of}} benchmarks through detailed network simulation. Our framework can be used to produce <b>application-aware</b> routes that target the minimization of latency, number of flows through a link, bandwidth, or any combination thereof...|$|E
40|$|This work weakens {{well-known}} consistency models using graphs {{that capture}} applications' characteristics. The weakened models not only respect application semantic, but also yield a performance benefit. We introduce {{a notion of}} dependency graphs, which specify relations between events that are important with respect to application semantic, and then weaken traditional consistency models (e. g., causal consistency) using these graphs. Particularly, we consider two types of graphs: intra-process and inter-process dependency graphs, where intra-process dependency graphs specify how events in a single process are related, and inter-process dependency graphs specify how events across multiple processes are related. Then, based on {{these two types of}} graphs, we define new consistency model, namely <b>application-aware</b> consistency. We also discuss why such <b>application-aware</b> consistency can be useful in social network applications. This is a work in progress, and we present early ideas regarding <b>application-aware</b> consistency here...|$|E
40|$|Abstract — We {{believe that}} <b>application-aware</b> {{networks}} {{will be a}} core component {{in the development and}} deployment of emerging network services. However, previous attempts at enabling application-awareness in the network have failed due to issues with security, resource allocation, and cost of deployment. The emergence of the Extensible Markup Language (XML), an open standard that enables data interoperability, along with advances in hardware, software, and networking technologies, serves as the catalyst for the development of service-oriented networking (SON). SON enables network components to become <b>application-aware,</b> so that they are able to understand data encoded in XML and act upon that data intelligently to make routing decisions, enforce QoS or security policies, or transform the data into an alternate representation. This paper describes the motivation behind service-oriented networking, the potential benefits of introducing <b>application-aware</b> network devices into service-oriented architectures, and discusses research challenges in the development of SON-enabled network appliances...|$|E
40|$|<b>Application-aware</b> routing {{exploits}} static {{knowledge of}} an applica tion's traffic pattern {{to improve performance}} compared to general purpose routing algorithms. Unfortunately, traditional approaches to <b>application-aware</b> routing cannot efficiently handle dynamic changes in the traffic pattern limiting its usefulness in practice. In this paper, we study <b>application-aware</b> routing under traffic uncer tainty. Our problem formulation allows an application to statically specify an uncertainty set of traffic patterns that each occur with a given probability, and {{our goal is to}} find a single set of combined routes that will enable high-performance across all of these traffic patterns. We show how efficient combined routes can be found for this problem using convex optimization. These combined routes are optimal when the performance for every traffic pattern using the combined routes {{is the same as the}} performance using routes that are specialized for just that traffic pattern. We derive necessary and sufficient conditions for when our optimization framework will find optimal combined routes. We use theoretical and numerical analysis for the important class of permutation traffic patterns to quantify how often optimal combined routes exist and to determine the performance loss when optimal combined routes are infeasi ble. Finally, we use a cycle-level simulator that includes realistic pipeline latencies, arbitration, and buffered flow-control to study the latency and throughput of combined routes compared to spe cialized routes and routes generated using general-purpose routing algorithms. The theoretical analysis, numerical analysis, and simu lation results in this paper provide a first step towards more flexible <b>application-aware</b> routing...|$|E
40|$|We {{demonstrated}} an SDN-enabled optical DCN leveraging AoD, OPS, FPGA-based ToR with extended OpenDayLight controller and extended OF protocol. Experimental results show <b>application-aware</b> OCS/OPS connection provisioning (753 / 214 ms), OPS end-to-end connections latency (252 µs), and OCS/OPS switchover. Peer ReviewedPostprint (published version...|$|E
40|$|A {{tremendous}} amount of {{research has been done}} toward improving transport layer performance over wireless data networks. The improved transport layer protocols are typically application-unaware. In this paper, we argue that the behavior of applications can and do dominate the actual performance experienced. More importantly, we show that for practical applications, application behavior all but completely negates any improvements achievable through better transport layer protocols. In this context, we motivate an <b>application-aware,</b> but application transparent, solution suite called A 3 (<b>application-aware</b> acceleration) that uses a set of design principles realized in an application specific fashion to overcome the typical behavioral problems of applications. We demonstrate the performance of A 3 through emulations using realistic application traffic traces. Categories and Subject Descriptor...|$|E
40|$|Due to {{the unequal}} {{spectrum}} resources in different areas, multi-hop wireless cognitive radio network (MWCRN) faces {{the challenge of}} a relatively poor performance. In this paper, we propose an <b>application-aware</b> routing scheme with channel bonding technique to help improve the efficiency and performance of a MWCRN network. More specifically, we formulate an optimization problem aiming to meet the application request, as well as operating at low transmission cost. To solve this problem, we first study the greatest lower bound of transmission cost named as Utopian cost, {{as well as an}} upper bound of transmission cost. Moreover, we propose two distributed algorithms for practical applications. Simulation results show that the proposed <b>application-aware</b> scheme achieves low transmission cost in MWCRN while satisfying demands of application requests...|$|E
40|$|The ever growing {{needs for}} {{computation}} power and accesses to critical resources have launched {{in a very}} short time a large number of grid projects and many realizations have been done on dedicated network infrastructures. On Internetbased infrastructures, however, there are very few distributed or interactive applications (MPI, DIS, HLA, remote visualization) because of insufficient end-to-end performances (bandwidth, latency for example) to support such an interactivity. For the moment, computing resources and network resources are viewed separately in the grid architecture and we believe this is the main bottleneck for achieving end-to-end performances. In this paper, we promote the idea of a grid infrastructure able to adapt to the application's needs and thus define the idea of <b>application-aware</b> grid infrastructures where the network infrastructure is tightly involved in both the communication and processing process. We report on our early experiences in building <b>application-aware</b> components based on active networking technologies for providing a low latency and a low overhead multicast framework for applications running on a computational grid. Performance results from both simulations and implementation prototypes confirm that introducing <b>application-aware</b> components at specific location in the network infrastructure can succeed in providing not only performances for the end-users but also new perspectives in building a communication framework for computational grids...|$|E
40|$|A: An Extensible Platform for <b>Application-Aware</b> Anonymity This paper {{presents}} {{the design and}} implementation of <b>Application-Aware</b> Anonymity (A), an extensible platform for deploying anonymity-based services on the Internet. A allows applications to tailor their anonymity properties and performance characteristics according to specific communication requirements. To support flexible path construction, A exposes a declarative language (ALOG) that enables applications to compactly specify path selection and instantiation policies executed by a declarative networking engine. We demonstrate that our declarative language is sufficiently expressive to encode novel multi-metric performance constraints as well as existing relay selection algorithms employed by Tor and other anonymity systems, using only a few lines of concise code. We experimentally evaluate the A system {{using a combination of}} trace-driven simulations and deployment on Planet- Lab. Our experimental results demonstrate that A 3 can flexibl...|$|E
40|$|We {{demonstrate}} here a {{new approach}} to Web archival crawling, based on an applicationaware helper that drives crawls of Web applications according to their types (especially, according to their content management systems). By adapting the crawling strategy to the Web application type, one is able to crawl a given Web application (say, a given forum or blog) with fewer requests than traditional crawling techniques. Additionally, the <b>application-aware</b> helper is able to extract semantic content from the Web pages crawled, which results in a Web archive of richer value to an archive user. In our demonstration scenario, we invite a user to compare <b>application-aware</b> crawling to regular Web crawling on the Web site of their choice, both in terms of efficiency and of experience in browsing and searching the archive. ...|$|E
40|$|It is {{becoming}} increasingly common to connect traditional embedded system networks to the Internet for remote monitoring, high-level control, and integration. One architectural approach to building internetworked systems is to add a gateway between the embedded system and the external network. These gateways must transfer data between two heterogeneous networks without inducing application failures due to variations in timing or bandwidth between the two networks. Despite the importance of gateways, {{there is no clear}} recipe for designing them. To study gateway design, we examine gateway mechanisms {{that can be used to}} handle data passing through a gateway and describe policies for configuring these mechanisms. In this work, we examine the differences between generic mechanisms (i. e. queues) and <b>application-aware</b> mechanisms that use knowledge of the data being transferred. Using simulation with abstract network models, we compare the performance of these mechanisms and show that <b>application-aware</b> mechanisms can be useful in improving gateway performance in some situations. We also use a case study of a traffic control application to evaluate the performance of gateway mechanisms with simulations that model different network and environmental scenarios. We find that selection of the proper gateway mechanism can improve performance of the traffic control application, and we provide selection guidance based on the mean inter-arrival time of the network. These results show that in most scenarios, <b>application-aware</b> filter mechanisms outperform generic queue mechanisms...|$|E
40|$|IP Multicast {{has proven}} to be an {{effective}} communication primitive for best effort, large-scale, multi-point audio/video conferencing applications. While the best-effort transport of real-time digital audio/video is a relatively straightforward and well understood problem, many other applications like multicast-based shared whiteboards and shared text editors are more challenging to design because their underlying media require reliable transport, i. e., a "reliable multicast" protocol. The design of scalable end-to-end reliable multicast protocols has unfortunately proven to be an especially hard problem, exacerbated by the enormous degree of network and system heterogeneity present in the Internet. In this paper, we propose to tackle the heterogeneity problem with a hybrid model for reliable multicast that relies in part on end-to-end loss recovery mechanisms and in part on intelligent and <b>application-aware</b> adaptation carried out within the network. In our framework, <b>application-aware</b> age [...] ...|$|E
40|$|Operating systems enable {{collecting}} and extracting rich information on application execution characteristics, including program counter traces, memory access patterns, and operating-system-generated signals. This {{information can be}} exploited to design highly efficient, <b>application-aware</b> reliability mechanisms that are transparent to applications. This paper describes the Reliability MicroKernel framework (RMK), a loadable kernel module for providing <b>application-aware</b> reliability and dynamically configuring reliability mechanisms installed in RMK. The RMK prototype is implemented in Linux and supports detection of application/OS failures and transparent application checkpointing. Experiment {{results show that the}} OS hang detection and application hang detection, which exploit characteristics of application and system behavior, can achieve 100 % coverage and low false positive rates. Moreover, the performance overhead of RMK and the detection/checkpointing mechanisms is small (0. 6 % for application hang detection and 0. 1 % for transparent application checkpointing in the experiments). 1...|$|E
40|$|Abstract—In this paper, {{we present}} an {{algorithm}} to construct <b>application-aware</b> distribution trees for applicationlevel multicast. Unlike existing approaches, the distribution trees do not solely depend on network characteristics {{but also on}} the application semantics of the transmitted packets. In the presented algorithm, the application may specify an individual priority for each packet-receiver pair. The distribution tree is then constructed such that the higher the priority, the more direct the path from the sender to the packet’s destination. This comes at the cost of an increase in link stress – the more direct a path, the less likely it is that it can be integrated efficiently into an overlay multicast distribution tree. Our algorithm takes this tradeoff into account and constructs efficient <b>application-aware</b> distribution trees. We demonstrate the performance and characteristics of the algorithm through extensive simulation...|$|E
