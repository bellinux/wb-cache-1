13|9|Public
50|$|This example {{operation}} {{adds the}} values of general-purpose registers r1 and r2 and stores the result inregister r3. Coarsely, {{the execution of the}} instruction in the processor probably results in translating the instruction to control signals which control the interconnection network connections and function units. The interconnection network is used to transfer the current values of registers r1 and r2 to the function unit that is capable of executing the add operation, often called ALU as in <b>Arithmetic-Logic</b> <b>Unit.</b> Finally, a control signal selects and triggers the addition operation in ALU, of which result is transferred back to the register r3.|$|E
5000|$|The {{approach}} is notable because {{the set of}} instructions is much smaller than in other multimedia CPUs, and also more general-purpose. The small set and simplicity of the instructions reduces the recurring costs of the electronics, {{as well as the}} costs and difficulty of the design. The general-purpose nature of the instructions increases their overall value. These instructions require only small changes to a CPU's <b>arithmetic-logic</b> <b>unit.</b> A similar design approach promises to be a successful model for the multimedia instructions of other CPU designs. [...] The set is also small because the CPU already included powerful shift and bit-manipulation instructions: [...] "Shift pair" [...] which shifts a pair of registers, [...] "extract" [...] and [...] "insert" [...] of bit fields, and all the common bit-wise logical operations (and, or, exclusive-or, etc.).|$|E
5000|$|Am2900 is {{a family}} of {{integrated}} circuits (ICs) created in 1975 by Advanced Micro Devices (AMD). They were constructed with bipolar devices, in a bit-slice topology, and were designed {{to be used as}} modular components each representing a different aspect of a computer control unit (CCU). By using a bit slicing technique, Am2900 family was able to implement a CCU with data, addresses, and instructions to be any multiple of 4 bits by multiplying the number of ICs. One major problem with this modular technique was it required a larger amount of ICs to implement what could be done on a single CPU IC. The Am2901 chip was the <b>arithmetic-logic</b> <b>unit</b> (ALU), and the [...] "core" [...] of the series. It could count using 4 bits and implement binary operations as well as various bit-shifting operations.|$|E
40|$|This paper {{presents}} a custom reconfigurable VLSI architecture that is tailored {{for the implementation}} of low-power, medium/high order, digital finite impulse response (FIR) filters. These are realized within a reconfigurable array that consists of heterogeneous, programmable, <b>arithmetic-logic</b> <b>units.</b> The reconfigurable design is based on the primitive operator design (POF) technique. The concept of a genetic algorithm (GA) is introduced, which utilizes a randix- 4, 256 -point fast-fourier-transform (FFT) to calculate the frequency response of the evolved filters. The results related to the performance, physical-area and power consumption make this architecture very competitive in comparison with other industrial, general purpose FPGAs. 1...|$|R
40|$|AbstractBinary {{addition}} {{is one of}} {{the primitive}} operations in computer arithmetic. High performance VLSI integer adders are critical elements in general purpose and digital-signal processing processors since they are employed in the design of <b>Arithmetic-Logic</b> <b>Units,</b> in floating-point arithmetic data paths and in address generation units. Speed, delay and area are the performance parameters for any adder. Speed can be achieved by means of Square Root Carry Select Adder (SQRT CSLA). Tradeoff between those parameters plays the major role in designing new architecture. From the structure of SQRT CSLA, there is a scope to reduce area by using Zero Finding Logic (ZFC) technique. By using ZFC technique in SQRT CSLA, 16 bit architecture has been developed. The modified architecture has reduced area and power when compared to SQRT CSLA Adder. The adder is implemented on Spartan 3 E FPGA and is compared with SQRT CSLA. Result analysis Show that the proposed adder gives reduced memory when compared to SQRT CSLA using ZFC...|$|R
40|$|This paper {{presents}} a power-optimized evolvable hardware (EHW) architecture that employs custom-reconfigurable technology. It comprises a preliminary research work towards {{the implementation of}} filtering circuits associated with the JPL-Boeing micro-machined gyroscope. Our scope is to implement a low-power, autonomously reconfigurable architecture that is tailored for the realization of arbitrary response FIR filters. For {{the purpose of this}} paper the hardware substrate comprises a reconfigurable 4 x 12 array, which consists of heterogeneous, configurable, <b>arithmetic-logic</b> <b>units</b> (CALUs). The implementation of the design is based on the primitive operator filter (POF) technique in order to evolve all the parts of a filter (unconstrained filter). Furthermore, a hybrid arithmetic approach is employed in order for the architecture to cope with overflow events. The paradigms of both lowpass and highpass filters are produced, using two different strategies of evolution. The obtained results demonstrate the physical characteristics of the reconfigurable substrate and the performance of the genetic algorithm (GA) in successfully designing FIR filters. Finally, the power results of the reconfigurable architecture (RA) are compared with these of the AT 6000 series FPGAs and an algorithmically power-optimized, custom reprogrammable FIR core. ...|$|R
40|$|A simple two-way {{switching}} can {{be modified}} utilizing optical switching, electron-wave modulation and single-electron transport. In this work an <b>arithmetic-logic</b> <b>unit</b> is designed by employing single-electron Binary Decision Diagram devices (or circuits). The design is done for a single bit of the <b>arithmetic-logic</b> <b>unit.</b> The total design will be obtained by cascading desired number of such bit stages...|$|E
40|$|We {{propose a}} {{theoretical}} model to realize DNA made circuits based on in-vitro algorithms, to perform arithmetic and logical operations. The physical {{components of the}} resulting <b>Arithmetic-Logic</b> <b>Unit</b> {{are a variety of}} elements such as biochemical laboratories, test tubes and human operators. The advantage of the model is the possibility to perform arithmetic operations with huge binary numbers...|$|E
40|$|Most {{performance}} analysis tasks {{boil down to}} finding bottlenecks. In {{the context of this}} article, a bottleneck is any event (for example, branch mispredict, window stall, or <b>arithmetic-logic</b> <b>unit</b> (ALU) operation) that limits performance. Bottleneck analysis is critical to an architect’s work, whether the goal is tuning processors for energy efficiency, improving the effectiveness of optimizations, or designing a more balanced processor. Yet, despite its importance, bottleneck analysis methodology has lagged behind processor technology. Although microarchitects have successfully converted the growing supplies of transistors into increased performance...|$|E
40|$|This book {{considers}} {{the design and}} development of nanoelectronic computing circuits, systems and architectures focusing particularly on memristors, which represent one of today’s latest technology breakthroughs in nanoelectronics. The book studies, explores, and addresses the related challenges and proposes solutions for the smooth transition from conventional circuit technologies to emerging computing memristive nanotechnologies. Its content spans from fundamental device modeling to emerging storage system architectures and novel circuit design methodologies, targeting advanced non-conventional analog/digital massively parallel computational structures. Several new results on memristor modeling, memristive interconnections, logic circuit design, memory circuit architectures, computer arithmetic systems, simulation software tools, and applications of memristors in computing are presented. High-density memristive data storage combined with memristive circuit-design paradigms and computational tools applied to solve NP-hard artificial intelligence problems, as well as memristive <b>arithmetic-logic</b> <b>units,</b> certainly {{pave the way for}} a very promising memristive era in future electronic systems. Furthermore, these graph-based NP-hard problems are solved on memristive networks, and coupled with Cellular Automata (CA) -inspired computational schemes that enable computation within memory. All chapters are written in an accessible manner and are lavishly illustrated. The book constitutes an informative cornerstone for young scientists and a comprehensive reference to the experienced reader, hoping to stimulate further research on memristive devices, circuits, and systems...|$|R
40|$|State-of-art {{graphics}} processing units (GPUs) {{employ the}} singleinstruction multiple-data (SIMD) style execution to achieve both high computational throughput and energy efficiency. As previous works have shown, there exists significant computational redundancy in SIMD execution, where different execution lanes {{operate on the}} same operand values. Such value locality {{is referred to as}} uniform vectors. In this paper, we first show that besides redundancy within a uniform vector, different vectors can also have the identical values. Then, we propose detailed architecture designs to exploit both types of redundancy. For redundancy within a uniform vector, we propose to either extend the vector register file with token bits or add a separate small scalar register file to eliminate redundant computations as well as redundant data storage. For redundancy across different uniform vectors, we adopt instruction reuse, proposed originally for CPU architectures, to detect and eliminate redundancy. The elimination of redundant computations and data storage leads to both significant energy savings and performance improvement. Furthermore, we propose to leverage such redundancy to protect <b>arithmetic-logic</b> <b>units</b> (ALUs) and register files against hardware errors. Our detailed evaluation shows that our proposed design has low hardware overhead and achieves performance gains, up to 23. 9 % and 12. 0 % on average, along with energy savings, up to 24. 8 % and 12. 6 % on average, as well as a 21. 1 % and 14. 1 % protection coverage for ALUs and register files, respectively...|$|R
40|$|Consider a {{processor}} organization {{consisting of a}} number of client modules and server modules, like memory <b>units</b> and <b>arithmetic-logic</b> processing <b>units.</b> Suppose that these modules are interconnected with a single bus which is segmented {{in such a way that}} modules connected to a particular segment can communicate in parallel to the data transfer operations going on in the other segments. This is achieved by a control logic which is capable to reserve a continuous subsequence of the segments necessary to establish a path from the source to the target module. Given the frequency of data transfer operations between the modules, our task is to determine an efficient segmentation and segment-to-module assignment of this kind of computer organization. We consider several different optimization methods for the problem and demonstrate their use for sample cases...|$|R
40|$|AbstractWe have {{designed}} and tested at high frequency an RSFQ-based <b>Arithmetic-Logic</b> <b>Unit</b> (ALU), the {{critical component of}} an 8 -bit RSFQ processor datapath. The ALU design {{is based on a}} Kogge-Stone adder and employs an asynchronous wave-pipelined approach scalable for wide datapath processors. The 8 -bit ALU circuit was fabricated with HYPRES’ standard 4. 5 kA/cm 2 process and consists of 7, 950 Josephson junctions, including input and output interfaces. In this paper, we present chip design and high-speed test results for the 8 -bit ALU circuit...|$|E
40|$|Abstract: The paper {{deals with}} the problem of {{designing}} digital circuits based on the current-mode gates- novel digital elements operating with constant, continuous power supply current. The purpose is the necessity at the high level of the noise immunity of the chips which compose both analog and digital circuits. The logical properties of this gates basis and several identities for conversion of expressions from Boolean basis are represented. Based on these expressions, the functional schemes of various one-bit adder sircuits and 32 -functions <b>arithmetic-logic</b> <b>unit</b> were designed. The obtained circuits are characterized by smaller hardware overhead in comparison with similar ones based on others gate types...|$|E
40|$|The thesis {{deals with}} {{integration}} of functional verification {{into the design}} cycle of execution units in  a hardware-software co-design environment of the Codasip system. The aim of the thesis is to design and implement a verification environment in SystemVerilog in order to verify automatically generated hardware representation of the execution units. In the introduction, advantages and basic methods of functional verification and principles of the Codasip system are discussed. Next chapters describe the process of design {{and implementation of the}} verification environment of <b>arithmetic-logic</b> <b>unit</b> as well as the analysis of the results of verification. In the end, a review of accomplished goals and the suggestions for future development of the verification environment are made...|$|E
30|$|Consider a {{processor}} organization {{consisting of a}} number of client modules and server modules (jointly called devices), like memory <b>units</b> and <b>arithmetic-logic</b> processing <b>units.</b> Suppose that these devices are interconnected with a bus which is segmented {{in such a way that}} devices connected to a particular segment can communicate in parallel to the data transfer operations going on in the other segments. This is achieved by a control logic which is able to reserve a continuous subsequence of the segments necessary to establish a path from the source to the target device. Given the frequency of data transfer operations between the devices, our task is to determine an efficient segmentation and segment-to-device assignment of this on-chip architecture. This task is formulated as an optimization problem which considers the amount of data transfer operations performed via the bus segments. The problem turns out to be NP hard but we propose efficient local search-based heuristics for it. The heuristics are applied to sample cases, and the outcome is an improved performance in terms of a shorter execution time.|$|R
40|$|Consider a {{processor}} organization {{consisting of a}} number of client modules and server modules (jointly called devices), like memory <b>units</b> and <b>arithmetic-logic</b> processing <b>units.</b> Suppose that these devices are interconnected with a bus which is segmented {{in such a way that}} devices connected to a particular segment can communicate in parallel to the data transfer operations going on in the other segments. This is achieved by a control logic which is able to reserve a continuous subsequence of the segments necessary to establish a path from the source to the target device. Given the frequency of data transfer operations between the devices, our task is to determine an efficient segmentation and segment-to-device assignment of this on-chip architecture. This task is formulated as an optimization problem which considers the amount of data transfer operations performed via the bus segments. The problem turns out to be NP hard but we propose efficient local search-based heuristics for it. The heuristics are applied to sample cases, and the outcome is an improved performance in terms of a shorter execution time. Copyright © 2009 T. Seceleanu et al. This is an open access article distributed under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. 1...|$|R
40|$|Design a 1 -Bit and 2 -Bit {{arithmetic}} logic {{units and}} implement the circuits on the DE 2 board. Learn {{how to use}} DE 2 ’s 7 -segment display. BACKGROUND: <b>ARITHMETIC-LOGIC</b> <b>UNIT</b> (ALU) Arithmetic logic unit {{is the most important}} element of microprocessor which performs both math and logic functions. An ALU loads data from input registers, an external Control Unit then tells the ALU what operation to perform on that data, and then the ALU stores its result into an output register. ALU takes many operands as input data, then depending on the operation which is currently programmed in operation selector, it performs this operation on input operand and produces the result. The result is presented on the ALU’s output...|$|E
40|$|We {{propose a}} {{heterostructure}} device comprised of magnets and piezoelectrics that significantly improves the delay {{and the energy}} dissipation of an all-spin logic (ASL) device. This paper studies and models the physics of the device, illustrates its operation, and benchmarks its performance using SPICE simulations. We show that the proposed device maintains low voltage operation, non-reciprocity, non-volatility, cascadability, and thermal reliability of the original ASL device. Moreover, by utilizing the deterministic switching of a magnet from the saddle point of the energy profile, the device is more efficient in terms of energy and delay and is robust to thermal fluctuations. The results of simulations show that compared to ASL devices, the proposed device achieves 21 x shorter delay and 27 x lower energy dissipation per bit for a 32 -bit <b>arithmetic-logic</b> <b>unit</b> (ALU) ...|$|E
40|$|This paper {{explores the}} design of {{efficient}} test sets and test-pattern generators for on-line BIST. The target applications are high-performance, scalable datapath circuits for which fast and complete fault coverage is required. Because {{of the presence of}} carry-lookahead, most existing BIST methods are unsuitable for these applications. High-level models are used to identify potential test sets for a small version of the circuit to be tested. Then a regular test set is extracted and a test generator TG is designed to meet the following goals: scalability, small test set size, full fault coverage, and very low hardware overhead. TG {{takes the form of a}} twisted ring counter with a small decoder array. We apply our technique to various datapath circuits including a carry-lookahead adder, an <b>arithmetic-logic</b> <b>unit,</b> and a multiplier-adder...|$|E

