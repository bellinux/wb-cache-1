11|477|Public
50|$|Availability {{measures}} are classified {{by either the}} time interval of interest or the mechanisms for the system downtime. If the time interval of interest is the primary concern, we consider instantaneous, limiting, average, and limiting average availability. The aforementioned definitions are developed in Barlow and Proschan 1975, Lie, Hwang, and Tillman 1977, and Nachlas 1998. The second primary classification for availability is contingent on the various mechanisms for downtime such as the inherent availability, <b>achieved</b> <b>availability,</b> and operational availability. (Blanchard 1998, Lie, Hwang, and Tillman 1977). Mi 1998 gives some comparison results of availability considering inherent availability.|$|E
40|$|Recently, it {{has been}} {{realized}} {{that the importance of}} satisfying service availability is becoming {{one of the most critical}} factors for the success of Internet -based services and applications. In this paper, we take an availability-centric view on QoS where the availability is treated as a new controllable QoS parameter and focus on the issues of providing availability guarantees for distributed and replicated multimedia services and contents. We especially tackle the replica placement (RP) problem and study the effects of number and location of replicas on the <b>achieved</b> <b>availability.</b> From a simulation study, we find that (1) the location of replica is a more relevant factor than their number for satisfying the availability QoS requirements for all individual users, and (2) the heuristic methods, in general, cannot give any guarantee for their <b>achieved</b> <b>availability</b> QoS, while they are very efficient for large size graphs...|$|E
40|$|Collection and {{analysis}} of data are reported that concern the reliability and maintenance experience of flight control system electronics currently in use on passenger carrying jet aircraft. Two airlines B- 747 airplane fleets were analyzed to assess the component reliability, system functional reliability, and <b>achieved</b> <b>availability</b> of the CAT II configuration flight control system. Also assessed were the costs generated by this system in the categories of spare equipment, schedule irregularity, and line and shop maintenance. The results indicate that {{although there is a}} marked difference in the geographic location and route pattern between the airlines studied, there is a close similarity in the reliability and the maintenance costs associated with the flight control electronics...|$|E
30|$|Handwriting {{can also}} <b>achieve</b> <b>availability,</b> portability, convenience, and instantaneity which are {{important}} requirement for instant messaging.|$|R
50|$|This is {{the only}} known {{strategy}} that can <b>achieve</b> high <b>availability.</b>|$|R
40|$|<b>Achieving</b> <b>availability</b> and {{scalability}} {{while providing}} service guarantees such as in-order, gapless delivery {{is essential for}} deploying publish/subscribe messaging middleware in wide area networks. Scalability often requires a publish/subscribe system to propagate subscription information and perform content matching across the network. Existing subscription propagation algorithms do not support in-order, gapless delivery in a redundant overlay network. This pape...|$|R
40|$|Control systems {{behavior}} can be analyzed taking into account {{a large number of}} parameters: performances, reliability, availability, security. Each control system presents various security vulnerabilities that affect in lower or higher measure its functioning. In this paper the authors present a method {{to assess the impact of}} security issues on the systems availability. A fuzzy model for estimating the availability of the system based on the security level and <b>achieved</b> <b>availability</b> coefficient (depending on MTBF and MTR) is developed and described. The results of the fuzzy inference system (FIS) are presented in the last section of the paper. Comment: Paper accepted for 2016 8 th International Conference on Electronics, Computers and Artificial Intelligence (ECAI 2016) Proceedings, Ploiesti, Romani...|$|E
40|$|Abstract This paper {{presents}} ReVive, a novel general-purpose rollbackrecovery {{mechanism for}} shared-memory multiprocessors. ReVive carefully balances the conflicting requirements of availability, per-formance, and hardware cost. ReVive performs checkpointing, logging, and distributed parity protection, all memory-based. Itenables recovery {{from a wide}} class of errors, including the permanent loss of an entire node. To maintain high performance, ReViveincludes specialized hardware that performs frequent operations in the background, such as log and parity updates. To keep the costlow, more complex checkpointing and recovery functions are performed in software, while the hardware modifications are limitedto the directory controllers of the machine. Our simulation results on a 16 -processor system indicate that the average error-free ex-ecution time overhead of using ReVive is only 6. 3 %, while the <b>achieved</b> <b>availability</b> is better than 99. 999 % even when the errorsoccur as often as once per day. ...|$|E
40|$|This paper {{presents}} ReVive, a novel general-purpose rollback {{recovery mechanism}} for shared-memory multiprocessors. ReVive carefully balances the conflicting requirements of availability, performance, and hardware cost. ReVive performs checkpointing, logging, and distributed parity protection, all memory-based. It enables recovery {{from a wide}} class of errors, including the permanent loss of an entire node. To maintain high performance, ReVive includes specialized hardware that performs frequent operations in the background, such as log and parity updates. To keep the cost low, more complex checkpointing and recovery functions are performed in software, while the hardware modifications are limited to the directory controllers of the machine. Our simulation results on a 16 -processor system indicate that the average error-free execution time overhead of using ReVive is only 6. 3 %, while the <b>achieved</b> <b>availability</b> is better than 99. 999 % even when the errors occur as often as once per day. ...|$|E
50|$|There {{are three}} {{principles}} of systems design in reliability engineering {{which can help}} <b>achieve</b> high <b>availability.</b>|$|R
40|$|Abstract. Distributed {{database}} management protocols are usually {{based on the}} assumption that data consistency is paramount. However, this assumption is invalid for distributed real-time applications such as ship combat systems and air traffic control, where data availability is crucial and may need to be achieved at the expense of guarantees of data consistency. Two protocols designed for real-time combat systems which <b>achieve</b> <b>availability</b> by relaxing consistency restraints are ADDAM (AR...|$|R
50|$|However, {{to realize}} the {{anticipated}} benefits of virtualization, network equipment vendors are improving IT virtualization technology to incorporate carrier-grade attributes required to <b>achieve</b> high <b>availability,</b> scalability, performance, and effective network management capabilities. To minimize {{the total cost of}} ownership (TCO), carrier-grade features must be implemented as efficiently as possible. This requires that NFV solutions make efficient use of redundant resources to <b>achieve</b> five-nines <b>availability</b> (99.999%), and of computing resource without compromising performance predictability.|$|R
40|$|Motivation: Storing, {{transmitting}} and archiving data {{produced by}} next-generation sequencing {{is a significant}} computational burden. New compression techniques tailored to short-read sequence data are needed. Results: We present here an approach to compression that reduces the difficulty of managing large-scale sequencing data. Our novel approach sits between pure reference-based compression and reference-free compression and combines much of the benefit of reference-based approaches with the flexibility of de novo encoding. Our method, called path encoding, draws a connection between storing paths in de Bruijn graphs and context-dependent arithmetic coding. Supporting this method is a system to compactly store sets of kmers that is of independent interest. We are able to encode RNA-seq reads using 3 â€“ 11 % of {{the space of the}} sequence in raw FASTA files, which is on average more than 34 % smaller than competing approaches. We also show that even if the reference is very poorly matched to the reads that are being encoded, good compression can still be <b>achieved.</b> <b>Availability</b> and implementation: Source code and binaries freely available for download a...|$|E
40|$|In this paper, we take an availability-centric view {{on quality}} of service (QoS) and propose a model and {{mechanisms}} for studying the effectiveness of realistic replication schemes on availability QoS for peer-to-peer (P 2 P) systems. We especially tackle the dynamic replica placement (RP) problem where our focus is on choosing dynamically the number and location of replicas while (1) meeting different availability QoS requirements for all individual peers and (2) taking the intermittent connectivity of peers explicitly into account. We model P 2 P systems as a dynamic stochastic graph in which the nodes {{go up and down}} depending on their assigned up probability. We develop some simple heuristic algorithms for solving the RP problem, which are fully distributed and adaptive. Through an event-driven simulation study we compare and evaluate the <b>achieved</b> <b>availability</b> QoS of the proposed RP algorithms. Simulation results show that (1) even simple heuristics can achieve reasonably high availability QoS, and (2) satisfying availability QoS requires more replicas than for only increasing the hit rate. 1...|$|E
40|$|Recently, it {{has been}} {{realized}} {{that the importance of}} satisfying service availability is becoming {{one of the most critical}} factors for the success of Internet-based services and applications. In this paper, we take an availabilitycentric view on QoS and focus on the issues of providing availability guarantees for distributed and replicated multimedia services and contents. For this purpose, we develop a concept called quality of availability (QoA) in which the availability is treated as a new controllable QoS parameter. We especially tackle the replica placement (RP) problem and study the effects of number and location of replicas on the <b>achieved</b> <b>availability.</b> We decompose the RP problem into three sub-problems: (1) finding a "good" placement for a fixed number of replicas, (2) checking the reached QoA with a selected replica placement, and (3) determining the number and location of replicas for satisfying a requiredQoA. For each RP sub-problem, we review existing related work for algorithms ranging from heuristic to exact methods as well as devise new algorithms where existing work is lacking and evaluate their achieved QoA. Based on a simulation study, we find that (1) the location of replica is a more relevant factor than their number for satisfying the QoA requirements by different users, and (2) the heuristic methods, in general, cannot give any guarantee for their achieved QoA, even though they are very efficient for large size graphs. Our proposed QoA concept and model can be used as a base mechanism for further study on the availability and reliability QoS for dynamically changing network service environments...|$|E
3000|$|... (1)We utilize Meet-Table to lead {{resetting}} of the TTL {{of message}} in negative message broadcasting in the VANET to <b>achieve</b> high <b>availability</b> and high {{coverage of the}} message.|$|R
40|$|Abstract â€” This paper {{focuses on}} {{peer-to-peer}} storage systems that <b>achieve</b> <b>availability</b> through replication. We study {{the problem of}} resource allocation when the system must replicate multiple files using a fixed amount of resource. We characterize the optimal allocation that maximizes the average availability of the files in the system, and also study two simple, decentralized allocation schemes: Uniform and Proportional. We show that while Uniform is fair in terms of allocating resources, it may be arbitrarily sub-optimal. On the other hand, Proportional, though unfair in resource allocation, is competitive with the optimal allocation. I...|$|R
2500|$|... 2006 'Doctrine {{of water}} concepts'. By Decree 32868. This is an {{economic}} instrument for the regulation of usage and administration of water for <b>achieving</b> better <b>availability</b> to water resources.|$|R
40|$|This code allows to {{generate}} a MEX function {{to be used in}} Matlab environment for reliability indices evaluation such as inherent availability and <b>achieved</b> <b>availability</b> of radio communication devices depending on preventive maintenance periodicity. The code is based on a Monte Carlo simulation model of Semi-Markov process corresponded to the operational process of the mentioned facilities. The model takes into account the following exploitation factors: sudden, gradual, latent and fictitious failures, a human factor of service staff and time parameters of maintenance. Consequently, the model considers eight possible states: operable state, misalignment state, non-operable state, preventive maintenance of the operative system, maintenance of the system with misalignment, latent failure, maintenance of system being in latent failure and fictitious failure. This model can be utilized for the analysis of reliability and optimization of maintenance periodicity of radio electronic and communication facilities whose operational process is assumed to be described by the above-mentioned states. The function Preventive Maintenance Semi-Markov Process (PMSMP) is proposed {{to be used as a}} multivariant analysis module whose work is stopped automatically when calculations achieve the allowable level of inherent availability set in model input parameters. This automatic stop feature is added in order to use the multivariant analysis module as a part of a CAD system of preventive maintenance schedule radio communication equipment. [MxKg, MxKti, epsKg, epsKti, masT, masP,TobL, SFlag] = PMSMP(Tk,Kgdop,P 0,[L 01 L 02 L 12],[Tp Tr Ta Ts a 1 a 2 b 1 b 2],Pop,eps,dT,Tobmax) Input parameters: Tk is the simulation time in hours (Tk= 10 e 6 is recommended); Kgdop is the allowable value of inherent availability (for example, 0. 997); P 0 is the vector of initial state (for example, for P 0 =(1, 0, 0, 0, 0, 0, 0, 0) is assumed that each run (replication) of the model starts from the operable state S 0 with probability equal to 1. 0); [L 01 L 02 L 12] is the vector of the rates of misalignments, sudden failures, and failure rate of misaligned system, respectively, hours^(- 1); [Tp Tr Ta Ts a 1 a 2 b 1 b 2] is the vector of maintenance time parameters and parameters characterizing built-in and external diagnostic devices: Tp is the testing time, hours; Tr is the time for system tuning and configuration, hours; Ts is the fault search time, hours; Ta is the emergency repair time, hours; a 1, b 1 are the type I (a) and type II (b) errors of built-in diagnostic modules; a 2, b 2 are type I (a) and type II (b) errors of the external diagnostic devices used for maintenance. Pop is the function of service staff errors probability; eps is the required estimation accuracy of MxKg and MxKti; dT is the step for changing the maintenance periodicity, hours (dT= 300 hours is recommended). The code contains the string #include "RND. h" in order to attach the file with the predefined code of random number generator of a uniform distribution that you like to use. In our experiments, we applied a generator based on L'Ecuyer algorithm, whose code can be found on [URL]...|$|E
40|$|It is {{essential}} that management and engineering understand {{the need for an}} availability requirement for the customer's space transportation system as it enables the meeting of his needs, goal, and objectives. There are three types of availability, e. g., operational availability, <b>achieved</b> <b>availability,</b> or inherent availability. The basic definition of availability is equal to the mean uptime divided by the sum of the mean uptime plus the mean downtime. The major difference is the inclusiveness of the functions within the mean downtime and the mean uptime. This paper will address tIe inherent availability which only addresses the mean downtime as that mean time to repair or the time to determine the failed article, remove it, install a replacement article and verify the functionality of the repaired system. The definitions of operational availability include the replacement hardware supply or maintenance delays and other non-design factors in the mean downtime. Also with inherent availability the mean uptime will only consider the mean time between failures (other availability definitions consider this as mean time between maintenance - preventive and corrective maintenance) that requires the repair of the system to be functional. It is also essential that management and engineering understand all influencing attributes relationships {{to each other and to}} the resultant inherent availability requirement. This visibility will provide the decision makers with the understanding necessary to place constraints on the design definition for the major drivers that will determine the inherent availability, safety, reliability, maintainability, and the life cycle cost of the fielded system provided the customer. This inherent availability requirement may be driven by the need to use a multiple launch approach to placing humans on the moon or the desire to control the number of spare parts required to support long stays in either orbit or on the surface of the moon or mars. It is the intent of this paper to provide the visibility of relationships of these major attribute drivers (variables) to each other and the resultant system inherent availability, but also provide the capability to bound the variables providing engineering the insight required to control the system's engineering solution. An example of this visibility will be the need to provide integration of similar discipline functions to allow control of the total parts count of the space transportation system. Also the relationship visibility of selecting a reliability requirement will place a constraint on parts count to achieve a given inherent availability requirement or accepting a larger parts count with the resulting higher reliability requirement. This paper will provide an understanding for the relationship of mean repair time (mean downtime) to maintainability, e. g., accessibility for repair, and both mean time between failure, e. g., reliability of hardware and the system inherent availability. Having an understanding of these relationships and resulting requirements before starting the architectural design concept definition will avoid considerable time and money required to iterate the design to meet the redesign and assessment process required to achieve the results required of the customer's space transportation system. In fact the impact to the schedule to being able to deliver the system that meets the customer's needs, goals, and objectives may cause the customer to compromise his desired operational goal and objectives resulting in considerable increased life cycle cost of the fielded space transportation system...|$|E
40|$|Typical Cloud {{database}} services guarantee {{high availability}} and scalability, but they rise many concerns about data confidentiality. Combining encryption with SQL operations is a promising approach {{although it is}} characterized by many open issues. Existing proposals, {{which are based on}} some trusted intermediate server, limit availability and scalability of original cloud database services. We propose an alternative architecture that avoids any intermediary component, thus <b>achieving</b> <b>availability</b> and scalability comparable to that of unencrypted cloud database services. Moreover, our proposal guarantees data consistency in scenarios in which independent clients concurrently execute SQL queries, and the structure of the database can be modified...|$|R
50|$|Fault {{instrumentation}} {{can be used}} {{in systems}} with limited redundancy to <b>achieve</b> high <b>availability.</b> Maintenance actions occur during brief periods of down-time only after a fault indicator activates. Failure is only significant if this occurs during a mission critical period.|$|R
50|$|To make EC2 more fault-tolerant, Amazon {{engineered}} Availability Zones {{that are}} designed to be insulated from failures in other availability zones. Availability zones do not share the same infrastructure. Applications running in more than one <b>availability</b> zone can <b>achieve</b> higher <b>availability.</b>|$|R
40|$|Security {{research}} in to wired networks {{indicates that there}} are always some weak points in the systems {{that are hard to}} predict. This is particularly true for a wireless network, in which open wireless transmission media and low physical-security protection of mobile devices pose additional challenges for prevention-based approaches and detection-based approaches. Sensor network security mechanisms can be divided into two categories: communication protocols and key management architectures. Communication protocols deal with the cryptographic algorithms used to <b>achieve</b> <b>availability,</b> confidentiality, integrity, and authentication. Key management architectures handle the complexities of creating and distributing keys used by communication protocols. In this we explore Taxonomy of security solutions, Taxonomy of key distributing schemes, Detectin...|$|R
40|$|Societyâ€™s {{increasing}} {{dependence on}} software-intensive systems {{is driving the}} need for dependable, robust, continuously available systems. The ability to reconfigure a system at run time is one critical aspect of <b>achieving</b> continuously <b>availability.</b> Although operating systems and programming language have provided programmer...|$|R
40|$|This paper {{focuses on}} {{peer-to-peer}} storage systems that <b>achieve</b> <b>availability</b> through replication. We study {{the problem of}} resource allocation when the system must replicate multiple files using a fixed amount of resource. We characterize the optimal allocation that maximizes the average availability of the files in the system, and also study two simple, decentralized allocation schemes, viz., uniform allocation, where each file is allocated equal shares of the resource, and proportional allocation, where each file is allocated {{a share of the}} resource proportional to its size. We show that while uniform allocation is fair in terms of allocating resources, it may be arbitrarily sub-optimal. On the other hand, proportional allocation, though unfair in resource allocation, is competitive with the optimal allocation. ...|$|R
40|$|Abstract. Availability is an {{important}} security property for Internet services and a key ingredient of most service level agreements. It can be compromised by distributed Denial of Service (DoS) attacks. In this work we propose a formal pattern-based approach to study defense mech-anisms against DoS attacks. We enhance pattern descriptions with for-mal models that allow the designer to give guarantees {{on the behavior of}} the proposed solution. The underlying executable specification for-malism we use is the rewriting logic language Maude and its real-time and probabilistic extensions. We introduce the notion of stable availabil-ity, which means that with very high probability service quality remains very close to a threshold, regardless of how bad the DoS attack can get. Then we present two formal patterns which can serve as defenses against DoS attacks: the Adaptive Selective Verification (ASV) pattern, which enhances a communication protocol with a defense mechanism, and the Server Replicator (SR) pattern, which provisions additional resources on demand. However, ASV <b>achieves</b> <b>availability</b> without stability, and SR cannot <b>achieve</b> stable <b>availability</b> at a reasonable cost. As a main re-sult we show, by statistical model checking with the PVeStA tool, that the composition of both patterns yields a new improved pattern which guarantees stable availability at a reasonable cost...|$|R
40|$|The {{results of}} this {{state-of-the-art}} report on exactly-once execution semantics and replication for multi-tier applications show that the techniques should be integrated to <b>achieve</b> high <b>availability</b> and end-to-end failure masking. This is important because unmasked failures and unavailability causes annoyance for users and lost revenue for companies...|$|R
40|$|Abstractâ€”Storing data in {{the cloud}} offers a {{scalable}} and easy way to handle large amounts of data guaranteeing availability and scalability by the hosting Cloud Service Providers. The price for the gained availability is uncertainness about the integrity and confidentiality of the data. Even if common approaches provide high availability and end-to-end encryption necessary to <b>achieve</b> <b>Availability</b> and Confidentiality as security goals, other security requirements like Integrity and Accountability are neglected. The key management of those clients for encrypting data to satisfy Confidentiality must furthermore support join-/leave-operations within the client set. This work presents an architecture for a secure cloud gateway satisfying the common security goals Availability, Confidentiality, Integrity and Accountability. Mapping these security goals, XML as storage base is equipped with recursive integrity checks, encryption and versioning based o...|$|R
40|$|F&ently, several {{strategies}} {{have been proposed}} for transaction processing in partitioned distributed database systems with replicated data. These strategies are surveyed {{in light of the}} competing goals of maintaining correctness and <b>achieving</b> high <b>availability.</b> Extensions and combinations are then discussed, and guidelines are presented for selecting strategies for particular applications...|$|R
50|$|The {{locomotives}} proved their worth, {{with a high}} <b>availability,</b> <b>achieving</b> 6200 mi per month. After World War II, {{a further}} 70 locomotives were ordered.|$|R
40|$|Introduction Distributed {{databases}} {{will not}} be able to accept many of the operational constraints that derive from applying concepts based on experience with centralized databases. As communication networks expand, information sharing needs grow, responsibility and authority over data is widely delegated, and requirements of local control are becoming more pronounced. Although autonomy has always been recognized as a crucial issue in distributed database systems, accepted solutions to other issues of database management, such as consistency maintenance and performance optimization, actually reduce autonomy greatly. For instance, delaying the commitment of a local update until all replicated and derived information is brought up-todate can be intolerable. Replicated data consists of copies of files or fragments of files kept at multiple computing nodes, and it is the tool to <b>achieve</b> <b>availability</b> in the face of unreliable system components, enhance performance, a...|$|R
40|$|Mission-critical {{applications}} {{must run}} 24 x 7, andnetworks {{need to be}} able to scale performance to handle largenumbers of client requests without unwanted delays. A "servercluster" is a group of independent servers managed as a singlesystem for <b>achieving</b> <b>availability</b> and scalability. It consists oftwo or more servers connected by a network, and clustermanagement software. The software provides services such asfailure detection, recovery, load balancing, and manages theservers as a single system. Load balancing is a technique thatallows the performance of a server-based program, such as aWeb server, to be scaled by distributing its client requestsacross multiple servers within a cluster of computers. Loadbalancing is used to enhance scalability, which improvesthroughput while keeping response times low. In this paper we have proposed a dynamic load balancingsystem in which servers in distributed system uses multicastingto communicate with each other and uses decentralizedapproach for load balancing...|$|R
40|$|Distributed {{database}} management protocols are usually {{based on the}} assumption that data consistency is paramount. However, this assumption is invalid for distributed real-time applications such as ship combat systems and air traffic control, where data availability is crucial and may need to be achieved at the expense of guarantees of data consistency. Two protocols designed for real-time combat systems which <b>achieve</b> <b>availability</b> by relaxing consistency restraints are ADDAM (ARE (Admiralty Research Establishment) Distributed Database Manager) and ALDM (ADDAM Like Distributed Database Manager). In this paper, the performance of these protocols is compared with the well-known TwoPhase Commit (2 PC). 1 Introduction The protocols described in this report were designed to manage distributed and replicated data. The management of replicated data requires a substantial amount of coordination between the participant processes in addition to the transaction management processing re [...] ...|$|R
40|$|LecturePg. 43 - 56 Advances in {{manufacturing}} techniques and design enhancements for such components as shaft seals {{have made it}} possible for liquid flooded rotary screw compressors to <b>achieve</b> <b>availability,</b> reliability, and overall performance thought impossible 10 years ago. With some machines operating continuously for over 30000 hr, and installed driving power levels exceeding 7000 hp per compressor train, process engineers and machinery specialists may have to reassess older notions of the application range for this close cousin of the modem turbocompressor. Specific details on construction features and design parameters are given for large rotary screw process machines which can clearly outperform turbocompressors and reciprocating process compressors in selected gas compression services. Two application examples are given, together with shortcut estimating procedures on the performance, initial installed cost, probable maintenance cost, and projected long term operating cost of large state-of-the-art rotary screw machines...|$|R
40|$|Recently, several {{strategies}} for transaction processing in partitioned distributed database systems with replicated data have been proposed. We survey these strategies {{in light of}} the competing goals of maintaining correctness and <b>achieving</b> high <b>availability.</b> Extensions and combinations are then discussed, and guidelines for the selection of a strategy for a particular application are presented...|$|R
