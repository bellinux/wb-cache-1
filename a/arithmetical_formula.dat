34|45|Public
25|$|ACA0 {{is defined}} as the theory {{consisting}} of the basic axioms, the arithmetical comprehension axiom scheme (in other words the comprehension axiom for every <b>arithmetical</b> <b>formula</b> φ) and the ordinary second-order induction axiom. It would be equivalent to include the entire arithmetical induction axiom scheme, in other words to include the induction axiom for every <b>arithmetical</b> <b>formula</b> φ.|$|E
25|$|The {{language}} of second-order arithmetic is two-sorted. The first sort of terms {{and in particular}} variables, usually denoted by lower case letters, consists of individuals, whose intended interpretation is as natural numbers. The other sort of variables, variously called “set variables,” “class variables,” or even “predicates” are usually denoted by upper-case letters. They refer to classes/predicates/properties of individuals, and so {{can be thought of}} as sets of natural numbers. Both individuals and set variables can be quantified universally or existentially. A formula with no bound set variables (that is, no quantifiers over set variables) is called arithmetical. An <b>arithmetical</b> <b>formula</b> may have free set variables and bound individual variables.|$|E
25|$|In 1931, Kurt Gödel {{published}} the incompleteness theorems, which he proved {{in part by}} showing how to represent the syntax of formal logic within first-order arithmetic. Each expression of the formal language of arithmetic is assigned a distinct number. This procedure is known variously as Gödel numbering, coding and, more generally, as arithmetization. In particular, various sets of expressions are coded as sets of numbers. It turns out that for various syntactic properties (such as being a formula, being a sentence, etc.), these sets are computable. Moreover, any computable set of numbers can be defined by some <b>arithmetical</b> <b>formula.</b> For example, there are formulas {{in the language of}} arithmetic defining the set of codes for arithmetic sentences, and for provable arithmetic sentences.|$|E
40|$|Arnold Beckmann {{defined the}} uniform reduct of a propositional proof system f {{to be the}} set of those bounded <b>arithmetical</b> <b>formulas</b> whose propositional {{translations}} have polynomial size f-proofs. We prove that the uniform reduct of f + Extended Frege consists of all true bounded <b>arithmetical</b> <b>formulas</b> iff f + Extended Frege simulates every proof system...|$|R
40|$|The general {{completeness}} {{problem of}} Hoare logic {{relative to the}} standard model $N$ of Peano arithmetic has been studied by Cook, and it allows {{for the use of}} arbitrary <b>arithmetical</b> <b>formulas</b> as assertions. In practice, the assertions would be simple <b>arithmetical</b> <b>formulas,</b> e. g. of a low level in the arithmetical hierarchy. In addition, we find that, by restricting inputs to $N$, the complexity of the minimal assertion theory for the completeness of Hoare logic to hold can be reduced. This paper further studies the completeness of Hoare Logic relative to $N$ by restricting assertions to subclasses of <b>arithmetical</b> <b>formulas</b> (and by restricting inputs to $N$). Our completeness results refine Cook's result by reducing the complexity of the assertion theory...|$|R
40|$|AbstractWe {{consider}} the restriction of classical principles like Excluded Middle, Markov’s Principle, König’s Lemma to <b>arithmetical</b> <b>formulas</b> of degree 2. For any such principle, we find simple mathematical statements which are intuitionistically equivalent to it, provided we restrict universal quantifications over maps to computable maps...|$|R
2500|$|A {{formula is}} called Σ01 (or {{sometimes}} Σ1), respectively Π01 (or sometimes Π1) when it {{of the form}} ∃m•(φ), respectively ∀m•(φ) where φ is a bounded <b>arithmetical</b> <b>formula</b> and m is an individual variable (that is free in φ). [...] More generally, a formula is called Σ0n, respectively Π0n when it is obtained by adding existential, respectively universal, individual quantifiers to a Π0n1, respectively Σ0n1 formula (and Σ00 and Π00 are all equivalent to Δ00). [...] By construction, all these formulas are arithmetical (no class variables are ever bound) and, in fact, by putting the formula in Skolem prenex form one can see that every <b>arithmetical</b> <b>formula</b> is equivalent to a Σ0n or Π0n formula for all large enough n.|$|E
2500|$|ACA0 is RCA0 {{plus the}} {{comprehension}} scheme for arithmetical formulas (which {{is sometimes called}} the [...] "arithmetical comprehension axiom"). That is, ACA0 allows us to form the set of natural numbers satisfying an arbitrary <b>arithmetical</b> <b>formula</b> (one with no bound set variables, although possibly containing set parameters). Actually, it suffices to add to RCA0 the comprehension scheme for Σ1 formulas {{in order to obtain}} full arithmetical comprehension.|$|E
2500|$|The system ATR0 adds to ACA0 an axiom which states, informally, {{that any}} arithmetical {{functional}} (meaning any <b>arithmetical</b> <b>formula</b> {{with a free}} number variable n and a free class variable X, seen as the operator taking X to the set of n satisfying the formula) can be iterated transfinitely along any countable well ordering starting with any set. [...] ATR0 is equivalent over ACA0 {{to the principle of}} Σ11 separation. ATR0 is impredicative, and has the proof-theoretic ordinal , the supremum of that of predicative systems.|$|E
3000|$|... [...]. As {{applications}} {{based on}} our main results, we establish many interesting identities for pyramidal, triangular, Mersenne, and perfect numbers. Moreover, we show how our main results {{can be used to}} obtain <b>arithmetical</b> <b>formulas</b> for the number of representations of an integer n as the sums of s squares.|$|R
40|$|Abstract We {{formulate}} epsilon {{substitution method}} for elementary analysis EA (second order arithmetic with comprehension for <b>arithmetical</b> <b>formulas</b> with predicate parameters). Two proofs of its termination are presented. One uses embedding into ramified system of level one and cutelimination for this system. The second proof uses non-effective continuity argument...|$|R
40|$|We use the {{technique}} of "classical realizability" to build new models of ZF + DC in which R is not well ordered. This gives new relative consistency results, probably not obtainable by forcing. This gives also a new method to get programs from proofs of <b>arithmetical</b> <b>formulas</b> with dependent choice. Comment: 30 page...|$|R
50|$|ACA0 {{is defined}} as the theory {{consisting}} of the basic axioms, the arithmetical comprehension axiom scheme (in other words the comprehension axiom for every <b>arithmetical</b> <b>formula</b> φ) and the ordinary second-order induction axiom. It would be equivalent to include the entire arithmetical induction axiom scheme, in other words to include the induction axiom for every <b>arithmetical</b> <b>formula</b> φ.|$|E
5000|$|Yuri Matiyasevich, Elimination of bounded {{universal}} quantifiers {{standing in}} front of a quantifier-free <b>arithmetical</b> <b>formula,</b> Personal Journal of Yuri Matiyasevich.|$|E
5000|$|In the arithmetical hierarchy, an <b>arithmetical</b> <b>formula</b> which {{contains}} only bounded quantifiers is called , , and [...] The superscript 0 is sometimes omitted.|$|E
40|$|We {{show that}} all provable <b>arithmetical</b> <b>formulas</b> are Turing-decidable as TRUE under the {{standard}} {{interpretation of a}} standard, first-order, Peano Arithmetic, PA. An immediate consequence is that the set of Gödel-formulas of PA is empty, and that PA has no non-standard models. We show that this implies, further, that P ≠ NP. 1...|$|R
40|$|We exhibit {{classes of}} polynomials whose sets of first partial {{derivatives}} form Gröbner bases, {{with respect to}} all term orders. The classes are defined by syntactic constraints on <b>arithmetical</b> <b>formulas</b> defining the polynomials. Read-once formulas without constants also have this property, while those with constants have a weaker “Gröbner-bounding ” property introduced here. The same properties hold even with arbitrary powering of subterms of the formulas. ...|$|R
40|$|An {{efficient}} proof assistant uses a {{wide range}} of decision procedures, including automatic verification of validity of <b>arithmetical</b> <b>formulas</b> with linear terms. Since the final product of a proof assistant is a formalized and verified proof, it prompts an additional task of building proofs of formulas, which validity is established by such a decision procedure. We present an implementation of several decision procedures for <b>arithmetical</b> <b>formulas</b> with linear terms in the MetaPRL proof assistant in a way that provides formal proofs of formulas found valid by those procedures. We also present an implementation of a theorem prover for the logic of justified common knowledge S 4 J n introduced in [Artemov, 2004]. This system captures the notion of justified common knowledge, which is free of some of the deficiencies of the usual common knowledge operator, and is yet sufficient for the analysis of epistemic problems where common knowledge has been traditionally applied. In particular, S 4 J n enjoys cut-elimination, which introduces the possibility of automatic proof search in the logic of commo...|$|R
5000|$|This can be formalized by the first-order <b>arithmetical</b> <b>formula</b> {{presented}} above. The {{members of}} S are the numbers n satisfying the following formula: ...|$|E
50|$|A set A {{is said to}} be arithmetical in a set B if A is definable by an <b>arithmetical</b> <b>formula</b> {{which has}} B as a set parameter.|$|E
5000|$|The {{collection}} of arithmetical sets is countable, but {{the sequence of}} arithmetical sets is not arithmetically definable. Thus, there is no <b>arithmetical</b> <b>formula</b> &phi;(n,m) that is true {{if and only if}} m {{is a member of the}} nth arithmetical predicates.|$|E
40|$|AbstractFast and TReX {{tools are}} {{designed}} to analyse systems with infinite state spaces. They both implement algorithms computing the set of reachable states of such systems. Since the state space may be infinite, acceleration techniques are used. In this paper, we study the differences between Fast and TReX acceleration techniques and show that although Fast remains in Presburger logics while accelerating, TReX can produce 1 st order <b>arithmetical</b> <b>formulas</b> even when accelerating functions...|$|R
40|$|International audienceIn {{this paper}} we treat the {{specification}} problem in Krivine classical realizability, {{in the case}} of <b>arithmetical</b> <b>formulæ.</b> In the continuity of previous works from Miquel and the first author, we characterize the universal realizers of a formula as being the winning strategies for a game (defined according to the formula). In the first sections we recall the definition of classical realizability, as well as a few technical results. In Section 5, we introduce in more details the specification problem and the intuition of the game-theoretic point of view we adopt later. We first present a game ^ 1, that we prove to be adequate and complete if the language contains no instructions `quote', using interaction constants to do substitution over execution threads. We then show that as soon as the language contain `quote', the game is no more complete, and present a second game ^ 2 that is both adequate and complete in the general case. In the last Section, we draw attention to a model-theoretic point of view and use our specification result to show that <b>arithmetical</b> <b>formulæ</b> are absolute for realizability models...|$|R
40|$|In {{this paper}} we treat the {{specification}} problem in classical realizability (as defined in [20]) {{in the case}} of <b>arithmetical</b> <b>formulæ.</b> In the continuity of [10] and [11], we characterize the universal realizers of a formula as being the winning strategies for a game (defined according to the formula). In the first section we recall the definition of classical realizability, as well as a few technical results. In Section 5, we introduce in more details the specification problem and the intuition of the game-theoretic point of view we adopt later. We first present a game G_ 1, that we prove to be adequate and complete if the language contains no instructions "quote" [18], using interaction constants to do substitution over execution threads. Then we show that as soon as the language contain "quote", the game is no more complete, and present a second game G_ 2 that is both adequate and complete in the general case. In the last Section, we draw attention to a model-theoretic point of view, and use our specification result to show that <b>arithmetical</b> <b>formulæ</b> are absolute for realizability models. Comment: arXiv admin note: text overlap with arXiv: 1101. 4364 by other author...|$|R
50|$|A {{formula is}} called Σ01 (or {{sometimes}} Σ1), respectively Π01 (or sometimes Π1) when it {{of the form}} ∃m•(φ), respectively ∀m•(φ) where φ is a bounded <b>arithmetical</b> <b>formula</b> and m is an individual variable (that is free in φ). More generally, a formula is called Σ0n, respectively Π0n when it is obtained by adding existential, respectively universal, individual quantifiers to a Π0n&minus;1, respectively Σ0n&minus;1 formula (and Σ00 and Π00 are all equivalent to Δ00). By construction, all these formulas are arithmetical (no class variables are ever bound) and, in fact, by putting the formula in Skolem prenex form one can see that every <b>arithmetical</b> <b>formula</b> is equivalent to a Σ0n or Π0n formula for all large enough n.|$|E
5000|$|Each arithmetical set has an <b>arithmetical</b> <b>formula</b> {{which tells}} whether {{particular}} numbers {{are in the}} set. An alternative notion of definability allows for a formula that does not tell whether particular numbers are in the set but tells whether the set itself satisfies some arithmetical property.|$|E
5000|$|For example, , is a {{well-formed formula}} of second-order {{arithmetic}} that is arithmetical, has one free set variable X and one bound individual variable n (but no bound set variables, as {{is required of}} an <b>arithmetical</b> <b>formula)</b> - whereas [...] is a well-formed formula that is not arithmetical, having one bound set variable X and one bound individual variable n.|$|E
40|$|Fast and TReX {{tools are}} {{designed}} to analyse systems with infinite state spaces. They both implement algorithms computing the set of reachable states of such systems. Since the state space may be infinite, acceleration techniques are used. In this paper, we study the differences between Fast and TReX acceleration techniques and show that although Fast remains in Presburger logics while accelerating, TReX can produce 1 st order <b>arithmetical</b> <b>formulas</b> even when accelerating functions from states belonging to a subset of Presburger...|$|R
40|$|We {{present a}} new syntactical proof that first-order Peano Arithmetic with Skolem axioms is {{conservative}} over Peano Arithmetic alone for <b>arithmetical</b> <b>formulas.</b> This result - {{which shows that}} the Excluded Middle principle {{can be used to}} eliminate Skolem functions - has been previously proved by other techniques, among them the epsilon substitution method and forcing. In our proof, we employ Interactive Realizability, a computational semantics for Peano Arithmetic which extends Kreisel's modified realizability to the classical case. Comment: In Proceedings CL&C 2012, arXiv: 1210. 289...|$|R
40|$|We {{present a}} new theory of {{operations}} HAP_ϵ and show {{that it is a}} conservative extension of Heyting Arithmetic. An important property of HAP_ϵ is that in this system all <b>arithmetical</b> <b>formulas</b> are self-realising. This will allow us to give a new proof of Goodman's theorem. Our proof of Goodman's theorem uses the proof interpretations realizability and forcing and is inspired by the work of Michael Beeson beeson and Gerard Renardel de Lavalette lavalette. In contrast to their proofs, we broke up the proof of Goodman's theorem into four steps, making sure we only use one proof interpretation at the time. This makes each step easier to understand...|$|R
50|$|The Model Existence Theorem and its proof can be formalized in the {{framework}} of Peano arithmetic. Precisely, we can systematically define a model of any consistent effective first-order theory T in Peano arithmetic by interpreting each symbol of T by an <b>arithmetical</b> <b>formula</b> whose free variables are the arguments of the symbol. However, the definition expressed by this formula is not recursive.|$|E
5000|$|ACA0 is RCA0 {{plus the}} {{comprehension}} scheme for arithmetical formulas (which {{is sometimes called}} the [...] "arithmetical comprehension axiom"). That is, ACA0 allows us to form the set of natural numbers satisfying an arbitrary <b>arithmetical</b> <b>formula</b> (one with no bound set variables, although possibly containing set parameters). Actually, it suffices to add to RCA0 the comprehension scheme for Σ1 formulas {{in order to obtain}} full arithmetical comprehension.|$|E
5000|$|A set Y {{of natural}} numbers is implicitly arithmetical or implicitly arithmetically definable {{if it is}} definable with an <b>arithmetical</b> <b>formula</b> that is able to use Y as a parameter. That is, {{if there is a}} formula [...] in the {{language}} of Peano arithmetic with no free number variables and a new set parameter Z and set membership relation [...] such that Y is the unique set Z such that [...] holds.|$|E
50|$|More generally, we {{can define}} an {{analogous}} concept for {{higher levels of}} the arithmetical hierarchy. If Γ {{is a set of}} arithmetical sentences (typically Σ0n for some n), a theory T is Γ-sound if every Γ-sentence provable in T is true in the standard model. When Γ is the set of all <b>arithmetical</b> <b>formulas,</b> Γ-soundness is called just (arithmetical) soundness.If the language of T consists only of the language of arithmetic (as opposed to, for example, set theory), then a sound system is one whose model {{can be thought of as}} the set ω, the usual set of mathematical natural numbers. The case of general T is different, see ω-logic below.|$|R
25|$|The {{following}} meanings can {{be attached}} to the notation for the <b>arithmetical</b> hierarchy on <b>formulas.</b>|$|R
40|$|We {{introduce}} a new technique that translates cardinality information about finite sets into simple arithmetic terms and thereby enables a system to reason about such set cardinalities by solving arithmetic equation problems. The atomic decomposition technique separates a collection of sets into mutually disjoint smallest components ("atoms") such that the cardinality of the sets are just {{the sum of the}} cardinalities of their atoms. With this idea it is possible to have languages combining arithmetic formulae with set terms, and to translate the formulae of this combined logic into pure <b>arithmetical</b> <b>formulae.</b> As a particular application we show how this technique yields new inference procedures for concept languages with so called number restriction operators...|$|R
