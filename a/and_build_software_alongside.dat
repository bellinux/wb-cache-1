0|10000|Public
5000|$|Acando consults with {{companies}} on information technology projects <b>and</b> Software-as-a-Service, <b>and</b> <b>builds</b> <b>software</b> applications including web sites.|$|R
5000|$|Design <b>and</b> <b>build</b> <b>software,</b> even {{operating}} systems, to {{be tried}} early, ideally within weeks. Don't hesitate to throw away the clumsy parts and rebuild them.|$|R
50|$|In {{conjunction}} with the configuration management database (CMDB), it effectively provides the DNA of the data center i.e. all application <b>and</b> <b>build</b> <b>software</b> media connected to the CMDB record of installation and configuration.|$|R
5000|$|Akvo designs <b>and</b> <b>builds</b> <b>Software</b> as a Service {{software}} {{as well as}} offering {{services that}} complement them, such as training and consulting. All Akvo's software is released as open source software. Akvo's tools are designed to work together at each stage of the monitoring cycle and therefore have three main purposes: first, capture and collect data; second, understand this data {{and turn it into}} decisions; and third, share this data. Organisations that use Akvo services include UNDP, UNICEF [...] {{and a number of other}} NGOs and governments.|$|R
40|$|These notes {{will cover}} the {{numerical}} solution of boundary value problems (BVPs) for elliptic partial differential equations (PDEs) by finite element methods. We’ll review the basic problems of the subject and the minimum existence theory necessary to make numerical methods worthwhile. Then we’ll treat the construction, analysis and selection of numerical methods. We will also learn to use <b>and</b> <b>build</b> <b>software</b> packages which implement effective methods. The recommended text [EG 04] for the course is rather dense, and should be read carefully. Notes will be available from the UR...|$|R
40|$|From {{prosthetic}} limbs to giant concrete play castles, 3 D printers {{have opened}} the doors to a new means of design and production. In 2013, Hennepin County Library began to explore different ways of using this technology as a learning tool for patrons. We will discuss the basics of 3 D printing, the programs and collaborations we have explored, and the successes and road bumps we have encountered along the way. We will also demo the 3 D printer and the 3 D design <b>and</b> <b>build</b> <b>software</b> {{so you can see}} the process from start to finish...|$|R
50|$|The Foundation {{also made}} {{available}} a re-branded fork of OpenOffice.org {{which was based}} on the upcoming 3.3 version, with patches <b>and</b> <b>build</b> <b>software</b> from the Go-oo fork. It was hoped that the LibreOffice name would be provisional as Oracle was invited to become a member of The Document Foundation, and was asked to donate the OpenOffice.org brand to the project. Following the announcement, Oracle asked members of the OpenOffice.org Community Council who were members of The Document Foundation to step down from the Council, claiming that this represented a conflict of interest, leaving the community council composed 100% of Oracle employees.|$|R
50|$|Travis CI is a hosted, {{distributed}} continuous integration service used to <b>build</b> <b>and</b> test <b>software</b> projects hosted at GitHub.|$|R
40|$|Programming {{languages}} and tools {{have a direct}} impact on how programmers view <b>and</b> <b>build</b> <b>software.</b> If the {{languages and}} tools do not provide support for safe and sound reuse techniques, or, even worse, they allow and even encourage the construction of ad-hoc solutions and the practice of unsafe reuse habits, it is unlikely that programmers will be willing or even able to follow an appropriate, disciplined approach to software engineering and software reuse. In this position paper we propose a new kind of program editor, a conceptual editor, that conveys, promotes, and enforces a high-level consistent conceptual model of software and software construction. If designed around an appropriate conceptual model, such a tool could support both the teaching of sound software engineering and reuse principles and the development of software according to the same principles...|$|R
50|$|Acrobits {{was founded}} in November 2008, <b>and</b> <b>builds</b> mobile VoIP <b>software</b> with a {{polished}} user interface, supporting encrypted calls using SRTP/SDES and ZRTP, Google Voice integration, and the G.729 Annex A audio codec.|$|R
50|$|Recommind is {{a privately}} held San Francisco, California-based American company that <b>builds</b> <b>and</b> sells <b>software</b> for {{electronic}} discovery, information governance, enterprise search and content categorization.|$|R
50|$|Compunetix designs <b>and</b> <b>builds</b> {{hardware}} <b>and</b> <b>software</b> for audio, data, {{and video}} collaboration and conference systems; {{the company also}} makes command, communication, and control keysets and instruments. Each product is built in accordance with military specifications at Compunetix in-house facilities.|$|R
40|$|It {{seems that}} actual {{software}} tools utilizing Computer-Mediated Communication mechanisms-like messaging or chat systems- do not help young {{students to learn}} good grammar skills. On the other hand, {{it is difficult to}} design <b>and</b> <b>build</b> <b>software</b> tools for supporting the acquisition of language skills, especially if those tools must support a group of student working in a collaborative way. In this paper we show the design of a Collaborative Learning activity and the corresponding software tool developed to support teaching grammar to primary education Chilean students. Some mechanisms were designed to incorporate Positive Interdependencies in the software tool. The tool was also intended to support Individual Accountability for each member of the group. The developed software tool contains two main interfaces, one for individual work and one for supporting face-toface group work interactions. Both, Collaborative Learning activity and software tool were designed to support teaching Spanish grammar, but they can be adapted for supporting other language's grammar...|$|R
40|$|Application Programming Interface (API) {{documents}} are a typical way of describing legal usage of reusable software libraries, thus facilitating software reuse. However, even with such documents, developers often overlook some documents <b>and</b> <b>build</b> <b>software</b> {{systems that are}} inconsistent with the legal usage of those libraries. Existing software verification tools require formal specifications (such as code contracts), and therefore cannot directly verify the legal usage described in natural language text in API documents against code using that library. However, in practice, most libraries do not come with formal specifications, thus hindering tool-based verification. To address this issue, we propose a novel approach to infer formal specifications from natural language text of API documents. Our evaluation results show that our approach achieves an average of 92 % precision and 93 % recall in identifying sentences that describe code contracts from more than 2500 sentences of API documents. Furthermore, our results show that our approach has an average 83 % accuracy in inferring specifications from over 1600 sentences describing code contracts. © 2012 IEEE. IEEE Computer Society; ACM; University of Zurich (UZH), Department of Informatics; Technical Council on Software Engineering (TCSE); Special Interest Group on Software Engineering (SIGSOFT); SI-SEApplication Programming Interface (API) {{documents are}} a typical way of describing legal usage of reusable software libraries, thus facilitating software reuse. However, even with such documents, developers often overlook some documents <b>and</b> <b>build</b> <b>software</b> systems that are inconsistent with the legal usage of those libraries. Existing software verification tools require formal specifications (such as code contracts), and therefore cannot directly verify the legal usage described in natural language text in API documents against code using that library. However, in practice, most libraries do not come with formal specifications, thus hindering tool-based verification. To address this issue, we propose a novel approach to infer formal specifications from natural language text of API documents. Our evaluation results show that our approach achieves an average of 92 % precision and 93 % recall in identifying sentences that describe code contracts from more than 2500 sentences of API documents. Furthermore, our results show that our approach has an average 83 % accuracy in inferring specifications from over 1600 sentences describing code contracts. © 2012 IEEE...|$|R
5000|$|Hysitron <b>builds</b> <b>and</b> tests <b>software</b> for its instruments. TriboScan™ is the {{standard}} software package that is equipped on most instruments for data collection and analysis. Software packages built and tested by Hysitron include: ...|$|R
40|$|Research into {{software}} development {{is required to}} reduce its production cost and to improve its quality. Modern software systems, such as the embedded software required for NASA's space station initiative, stretch current software engineering techniques. The requirements to <b>build</b> large, reliable, <b>and</b> maintainable software systems increases with time. Much theoretical and practical research is in progress to improve software engineering techniques. One such technique is to <b>build</b> a <b>software</b> system or environment which directly supports the software engineering process, i. e., the SAGA project, comprising the research necessary to design <b>and</b> <b>build</b> a <b>software</b> development which automates the software engineering process. Progress under SAGA is described...|$|R
40|$|AbstractA Software Repository is a {{collection}} of library files and function codes. Programmers and Engineers design develop <b>and</b> <b>build</b> <b>software</b> libraries in a continuous process. Selecting suitable function code from one among many in the repository is quite challenging and cumbersome as we need to analyze semantic issues in function codes or components. Clustering and Mining Software Components for efficient reuse is the current topic of interest among researchers in Software Reuse Engineering and Information Retrieval. A relatively less research work is contributed in this field and has a good scope in the future. In this paper, the main idea is to cluster the software components and form a subset of libraries from the available repository. These clusters thus help in choosing the required component with high cohesion and low coupling quickly and efficiently. We define a similarity function and use the same for the process of clustering the software components and for estimating the cost of new project. The approach carried out is a feature vector based approach...|$|R
40|$|Abstract—Application Programming Interface (API) {{documents}} are a typical way of describing legal usage of reusable software libraries, thus facilitating software reuse. However, even with such documents, developers often overlook some documents <b>and</b> <b>build</b> <b>software</b> {{systems that are}} inconsistent with the legal usage of those libraries. Existing software verification tools require formal specifications (such as code contracts), and therefore cannot directly verify the legal usage described in natural language text in API documents against code using that library. However, in practice, most libraries do not come with formal specifications, thus hindering toolbased verification. To address this issue, we propose a novel approach to infer formal specifications from natural language text of API documents. Our evaluation results show that our approach achieves an average of 92 % precision and 93 % recall in identifying sentences that describe code contracts from more than 2500 sentences of API documents. Furthermore, our results show that our approach has an average 83 % accuracy in inferring specifications from over 1600 sentences describing code contracts. I...|$|R
50|$|Brian de Haaff and Dr. Chris Waters founded Aha! in {{the spring}} of 2013 in Menlo Park, California. They were {{inspired}} to help companies better set product strategy <b>and</b> more efficiently <b>build</b> <b>software.</b> The team is completely distributed and employees are welcome to work from anywhere in the United States and a few select international locations. As of March 2016, the company had over 100,000 users on its platform.|$|R
40|$|Purpose {{and goals}} of the {{proposed}} research It is well-known that architectures (both software and system) become deeply “embedded ” in the organizations that design <b>and</b> <b>build</b> <b>software</b> intensive systems (e. g., [2]). Architectures determine key characteristics of organizations, such as work assignments, and have implications on communication patterns, habitual ways that people select and filter information, and organizational problem-solving strategies. Changing the architecture, even in seemingly simple ways, can cause serious mismatches between the architecture and the organization, leading {{in some cases to}} complete failure of the firm [3]. Organizations are notoriously difficult to change, and we do not yet have any tools for understanding the kinds of changes we are imposing on them when we perform architectural design. We don’t know how to assess the risks, nor do we know how to address the risks once they are identified. Suppose, for example, that the designer of an architecture who was considering two alternative designs knew that design 1 requires the developers of a particular component to access expertise from a separate organization requiring extensive long distance communication and design 2 requires the same developers to access expertise from a co-located site. Everything else bein...|$|R
40|$|Team {{decision-making}} is {{a bundle}} of interdependent activities that involve gathering, interpreting and exchanging information; creating and identifying alternative courses of action; choosing among alternatives by integrating the often different perspectives of team members and implementing a choice and monitoring its consequences. To accomplish joint tasks, human team members often assume distinctive roles in task completion. We believe that to design <b>and</b> <b>build</b> <b>software</b> agents that can assist human teams, we need develop automated techniques to identify {{the roles of the}} human decision-makers. If the supporting agents are insensitive to shifts in the team’s roles, they cannot effectively monitor the team’s activities. This article addresses the problem of doing offline role analysis of battle scenarios from multi-player team games. The ability to identify team roles from observations is important {{for a wide range of}} applications including automated commentary generation, game coaching and opponent modeling. We define a role as a preference model over possible actions based on the game state. This article explores two promising approaches for automated role analysis: (1) a model-based system for combining evidence from observed events using the Dempster–Shafer theory and (2) a data-driven discriminative classifier using support vector machines...|$|R
40|$|Abstract — In a {{previous}} paper the authors argue {{the case for}} incorporating concepts from innate immunity into Artificial Immune Systems and present an outline for a conceptual framework for such systems. A number of key general properties observed in the biological innate and adaptive immune systems were highlighted, and how such properties might be instantiated in artificial systems was discussed in detail. The next logical step is to take these ideas <b>and</b> <b>build</b> a <b>software</b> system with these properties that can be implemented and experimentally evaluated. This paper reports {{on the results of}} this step. I...|$|R
40|$|Abstract. C++ {{covers the}} whole range from {{low-level}} to high-level programming, making it ideally suited for writing portable software. However, code portability is often neglected in embedded systems engineering. With software becoming ever more complex, and hardware becoming ever more interchangeable, this oversight can turn into a problem when software must be ported to a new platform. This paper shows tools and techniques to design <b>and</b> <b>build</b> portable <b>software</b> in C++. It shows how to use C++ features to encapsulate platform-dependent parts (compiler/language differences, operating system interfaces, input/output) of programs, thus ensuring portability of the resulting system. ...|$|R
5000|$|OpenMDX is an {{open source}} model-driven {{architecture}} (MDA) software platform, a framework suited for domain-driven design (DDD). It {{is based on the}} Object Management Group's MDA standards. OpenMDX supports Java SE, Java EE, and [...]NET runtime environments. openMDX enables software architects <b>and</b> developers to <b>build</b> <b>and</b> integrate <b>software</b> applications in an automated and industrialized way.|$|R
40|$|Software process {{improvement}} requires high level formalisms for describing project-specific, organizational and quality aspects. These formalisms must be convenient {{not only for}} capture but also for execution purposes. In order to fulfill these requirements <b>and</b> to <b>build</b> a <b>software</b> process environment capable of supporting engineering tasks we have designed a new graphical, but still enactable, formalism called APEL (for Abstract Process Engine Language) ...|$|R
40|$|Customers {{are people}} who buy and use the {{activities}} of a product, both goods and services, continuously. AHASS workshop is an official Honda motorcycle repair shop that specializes in servicing services. Types of services that can be served there, consisting of 3 regular package options are: full service package (15 service points), mild servicing package (9 -point service), plus an oil change. All technicians are reliable and certified by PT. Astra Honda Motor. In one day if crowded AHASS Official Workshop 7164 Zahra Motor Semarang can serve customers of approximately 20 - 30 motorcycles, because of the limited amount of time technicians resulted in queues irregular servicing services. The author builds a queue of applications for addressing irregular queue using a FCFS (first Come First Serve) the service according to the customer's order of arrival or first come first served [...] System design using UML is a graphical language for the document, specify, <b>and</b> <b>build</b> <b>software</b> systems. The result created a queue of applications that can allow visitors {{to find out the}} extent to which the status of a service that has been done and the motor can assist the company's management to improve the quality of customer service services AHASS 7164 Official Workshop Zahra Motor Semaran...|$|R
40|$|Most {{research}} {{would be impossible}} without software, and this reliance is forcing a rethink of the skills needed in a traditional research group. With the emergence of software as the pre-eminent research tool used across all disciplines, comes the realisation that a significant majority of results are based, ultimately, on the skill of the experts who design <b>and</b> <b>build</b> that <b>software.</b> The UK has led the world in supporting a new role in academia: the Research Software Engineer (RSE). This report describes the new expert community that has flourished in UK research, details the successes that have been achieved, and the barriers that prevent further progress...|$|R
40|$|In {{recent years}} {{extensive}} {{research has been}} done on visibility graphs. In this thesis, we study some of the visibility graph algorithms, and implement these algorithms in the graph editor - GraphPerfect - which is a part of a project headed by Dr. Jay S. Bagga of the Department of computer science at Ball State University. One of the goals of this project is to design <b>and</b> <b>build</b> a <b>software</b> tool to learn and work with graphs and graph algorithms. In this thesis, some properties of visibility graphs are studied in detail and implementation of some graph algorithms is given. Department of Computer ScienceThesis (M. S. ...|$|R
40|$|SUMMARY Software {{engineering}} plays a {{key role}} in state-of-the-art robotics where more effective and efficient software development solutions are needed for implementation and integration of advanced robotics capabilities. Component-based software engineering and model-driven software development are two paradigms suitable to deal with such challenges. This paper presents the analysis, design, and implementation of control software for an Autonomous Underwater Vehicle (AUV). The software development stages are carried out by using a model-driven toolchain that provides support to design <b>and</b> <b>build</b> component-based <b>software</b> for robotics applications. A case study of a high-performance AUV control application and experimental results from a software schedulability analysis are presented...|$|R
40|$|This User Guide {{describes}} SOSS (Surface Operations Simulator <b>and</b> Scheduler) <b>software</b> <b>build</b> <b>and</b> graphic user interface. SOSS is {{a desktop}} application that simulates airport surface operations in fast time using traffic management algorithms. It moves aircraft on the airport surface {{based on information}} provided by scheduling algorithm prototypes, monitors separation violation and scheduling conformance, and produces scheduling algorithm performance data...|$|R
40|$|Abstract—Bringing {{technology}} {{from the research}} world into an operational environment poses many challenges. Typically, software systems having their origins in low Technical Readiness Level research projects have few, if any, formal requirements associated with them. This paucity of formal requirements coupled with the challenges associated with coordinating multiple, distributed research-oriented software projects {{makes it difficult to}} design <b>and</b> <b>build</b> <b>software</b> systems that will ultimately be useful in an operational environment. Targeted for current and next-generation space vehicles, the diagnostic applications that compose the Advanced Diagnostic System (ADS) under development in our lab at NASA-Ames Research Center are realizations of research projects associated with multiple organizations and generally are not designed according to stringent requirements nor with integration into the ADS environment in mind. The core functionality of a Diagnostic Client Application, usually having its basis in artificial intelligence research, is the primary (and perhaps sole) consideration of the application developer. Research funds generally are not available for implementing aspects such as logging and security, both of which are critical in aerospace diagnostic systems such as the ADS. In order to leverage funding sources and integrate these separate research projects into a coherent whole suitable for deployment in an operational environment, {{it is important for the}} systems integrator to be able to easily (affordably) weave these aspects into th...|$|R
5000|$|A-A-P is a {{computer}} program used primarily to download, <b>build</b> <b>and</b> install <b>software.</b> It executes what are called [...] "recipes", which are similar to Makefiles, but significantly more powerful. It has integrated support for uploading and downloading files; aside from automatically downloading a source distribution, {{it can also be}} used for website maintenance.|$|R
40|$|This {{document}} {{describes the}} IvP Helm - an Open Source behavior-based autonomy application for unmanned vehicles. IvP {{is short for}} interval programming - a technique for representing and solving multi-objective optimizations problems. Behaviors in the IvP Helm are reconciled using multi-objective optimization when in competition {{with each other for}} influence of the vehicle. The IvP Helm is written as a MOOS application where MOOS is a set of Open Source publish-subscribe autonomy middleware tools. This document describes the configuration and use of the IvP Helm, provides examples of simple missions and information on how to download <b>and</b> <b>build</b> the <b>software</b> from the MOOS-IvP server at www. moos-ivp. org. United States. Office of Naval Research (Code 311...|$|R
50|$|Programming {{productivity}} (also called software productivity or development productivity) {{describes the}} degree of the ability of individual programmers or development teams to <b>build</b> <b>and</b> evolve <b>software</b> systems. Productivity traditionally refers to the ratio between the quantity of software produced and the cost spent for it. Here the delicacy lies in finding a reasonable way to define software quantity.|$|R
40|$|AbstractIt {{seems that}} actual {{software}} tools utilizing Computer-Mediated Communication mechanisms -like messaging or chat systems- do not help young {{students to learn}} good grammar skills. On the contrary, these tools can be detrimental for the acquisition of these skills. On the other hand, {{it is difficult to}} design <b>and</b> <b>build</b> <b>software</b> tools for supporting the acquisition of language skills, especially if these tools must support a group of students working in a collaborative way. In this paper we present the design of a Collaborative Learning activity and the corresponding mobile software tool developed to support teaching grammar to primary education Chilean students. Some mechanisms were designed to incorporate Positive Interdependencies in the software tool. The tool was also intended to support Individual Accountability for each member of the group. The developed software tool contains two main interfaces, one for individual work and one for supporting face-to-face group work interactions. The tool is intended to simplify the teacher's task in terms of activity creation and monitoring: the tool automatically corrects students’ assignments and it also provides statistical reports on students’ performance both currently and in its evolution in time. Experimentation was done with 32 seventh grade students (12 - 13 years old) at a public school in our country. Over 70 % of the students thought the activity improved their Spanish grammar, and over 86 % of the students found the software tool was very easy to use...|$|R
40|$|In today’s {{modern society}} {{the process of}} {{handling}} crops in an accountable way withoutloss have {{become more and more}} important. By letting a gardener evaluate the progressof his plants from relevant data one can reduce these losses and increase effectiveness ofthe whole plantation. This work is about the construction of such a system composedfrom a developers perspective of three different platforms, from the start of data samplingwithin the context of gardening to and end user easily able to understand the data thentranslated. The first platform will be created from scratch with both hardware andsoftware, the next assembled from already finished hardware components <b>and</b> <b>build</b> withsimpler <b>software.</b> The last will essentially only be a software solution in an alreadyfinished hardware environment...|$|R
