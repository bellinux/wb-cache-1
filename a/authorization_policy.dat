148|305|Public
50|$|In {{traditional}} (non-atomic) <b>authorization,</b> <b>policy</b> {{is defined}} and secured at an application level. That is, outside {{the context of}} the application, there is no mechanism to verify the legitimacy of traditional <b>authorization</b> <b>policy.</b> Atomic authorization requires a trusted third party to issue <b>authorization</b> <b>policy</b> with a cryptographic guarantee of integrity. Because it is secured independently of the application which use it, atomic <b>authorization</b> <b>policy</b> is equivalent in strength to strong authentication policy.|$|E
5000|$|... #Subtitle level 3: Time-based {{fine-grained}} <b>authorization</b> <b>policy</b> ...|$|E
5000|$|After an {{authentication}} or <b>authorization</b> <b>policy</b> {{decision is}} made, the outcome can be recorded for auditing purposes, such as: ...|$|E
40|$|Abstract. The {{management}} {{and maintenance of}} a large number of Web services is not easy and, in particular, needs appropriate <b>authorization</b> <b>policies</b> to be defined so as to realize reliable and secure Web Services. The required <b>authorization</b> <b>policies</b> can be quite complex, resulting in unintended conflicts, which could result in information leaks or prevent access to information needed. This paper proposes a logic based approach using for specifying <b>authorization</b> <b>policies</b> in Web services composition. ...|$|R
30|$|Each model offers {{concepts}} and abstractions to guide security {{experts in the}} writing of policies. Even if analyzing and implementing abstractions is time-consuming, resulting <b>authorization</b> <b>policies</b> are more powerful and easier to manage. But it requires security expertise for writing <b>authorization</b> <b>policies</b> and most of mobile device users lack this skill.|$|R
40|$|Operating {{system access}} control {{mechanisms}} are intended to protect programs and data from corruption, yet still allow sharing of these resources. The goal is to support {{a broad range of}} <b>authorization</b> <b>policies.</b> But at least in commercial operating systems of the last few decades, we find support only for <b>authorization</b> <b>policies</b> concerning operations implemented by the operatin...|$|R
50|$|Authorization {{involves}} {{the act of}} defining access-rights for subjects. An <b>authorization</b> <b>policy</b> specifies the operations that subjects are allowed to execute within a system.|$|E
5000|$|... access {{approval}} {{grants access}} during operations, by association of users {{with the resources}} that {{they are allowed to}} access, based on the <b>authorization</b> <b>policy</b> ...|$|E
50|$|During access approval, {{the system}} compares the formal {{representation}} of the <b>authorization</b> <b>policy</b> with the access request, {{to determine whether the}} request shall be granted or rejected. Moreover, the access evaluation can be done online/ongoing.|$|E
40|$|Abstract. In {{order to}} manage and enforce {{multiple}} heterogeneous <b>authorization</b> <b>policies</b> in distributed <b>authorization</b> environment, we defined the root policy specification language and its corresponding enforcing mechanism. In a root policy, the involved users and resources can be defined in coarse or finegrained. Each involved <b>authorization</b> <b>policy’s</b> storage, trust management and enforcement can be defined independently. These <b>authorization</b> <b>policies</b> can be enforced in distributed way. Policy schemas, policy subschemas and policy hierarchies can deal with complex authorization scenarios. The context constraint component makes the root policy is a context-aware authorization system. On the other hand multiple root policies can cooperate together to complete more complicated authorization tasks...|$|R
5000|$|... 9. Security Testing:To {{check for}} {{vulnerabilities}} to hacking, authentication and <b>authorization</b> <b>policies,</b> data security, session management and other security standards.|$|R
40|$|Current {{database}} {{with numerous}} users requires access control. It is also needed in spatial database systems that keep both spatial attribute and non-spatial attribute safe. The query rewriting technology in spatial database {{is discussed in}} this paper. First the operations for merging <b>authorization</b> <b>policies</b> are discussed. By classifying the subjects and permit flag of the <b>authorization</b> <b>policies,</b> two operations, both intersection and union, are discussed with different purpose. And an algorithm for merging user's <b>authorization</b> <b>policies</b> is prompted. Then a view based query rewriting method is set up by replacing the all relations in the query with the corresponding view. That makes sure the finegrained access control for the spatial database and spatial objects. Finally, a spatial database as an application is given to validate the effectiveness of query rewriting technology in spatial database. </span...|$|R
5000|$|Authorization: OpenAM {{provides}} <b>authorization</b> <b>policy</b> from basic, simple, coarse-grained {{rules to}} highly advanced, fine-grained entitlements based on XACML (eXtensible Access Control Mark-Up Language). Authorization policies are abstracted from the application, allowing developers to quickly add or change policy as needed without modification {{to the underlying}} application.|$|E
5000|$|Apart from {{academic}} proof-of-concept developments, {{the only}} commercially available full implementations of model-driven security (for authorization management policy automation) include ObjectSecurity OpenPMF, which earned a listing in Gartner's [...] "Cool Vendor" [...] report in 2008 [...] {{and has been}} advocated {{by a number of}} organizations (e.g. U.S. Navy [...] ) as a means to make <b>authorization</b> <b>policy</b> management easier and more automated.|$|E
50|$|OAuth is {{a service}} that is {{complementary}} to and distinct from OpenID. OAuth is also distinct from OATH, which is a reference architecture for authentication, not a standard for authorization. However, OAuth {{is directly related to}} OpenID Connect (OIDC) since OIDC is an authentication layer built on top of OAuth 2.0. OAuth is also distinct from XACML, which is an <b>authorization</b> <b>policy</b> standard. OAuth can be used in conjunction with XACML where OAuth is used for ownership consent and access delegation whereas XACML is used to define the authorization policies (e.g. managers can view documents in their region).|$|E
30|$|The {{focus of}} <b>authorization</b> <b>policies</b> is to manage {{access to an}} object [28]. This type of policy regulates access to {{resources}} within a company and aims at increasing the security of company information and access to sensitive resources. For example, a depiction of the rule that only managers can view top-secret files falls into this category. Delegation policies are {{a specific set of}} <b>authorization</b> <b>policies</b> that allow a subject to transfer the decision-making tasks to other subjects.|$|R
5000|$|Most modern {{operating}} systems implement <b>authorization</b> <b>policies</b> as formal sets of permissions that are variations or extensions of three basic types of access: ...|$|R
40|$|Abstract. In {{this paper}} {{we present a}} {{framework}} for context-aware authorization in ubiquitous computing environments. We present an architecture consisting of authorization infrastructure and context infrastructure. The context infrastructure provides context information and the authorization infrastructure makes decisions to grant access rights based on context-aware <b>authorization</b> <b>policies</b> and context information. This paper also describes how multiple nodes in distributed environments cooperate to perform evaluation and detection of context constraints and events included in <b>authorization</b> <b>policies</b> while the integrity and privacy of context information are guaranteed. 1...|$|R
30|$|In Algorithm 2, the <b>authorization</b> <b>policy</b> is blinded, where, if {{an element}} w_i of the <b>authorization</b> <b>policy</b> has (w_i, w_i, x_i) in the blinded {{attribute}} set W and x_i is not empty, x_i is {{inserted into the}} <b>authorization</b> <b>policy.</b> The element w_i is replaced by its alias w_i in the expression. The alias and added x_i are not published, and only known by the data owner.|$|E
3000|$|... (<b>Authorization</b> <b>Policy)</b> An <b>{{authorization}}</b> <b>policy</b> AP_i is {{the set of}} authorization rules, {{which can}} be represented as AP_i= _j= 1 ^L rule_i,j, where rule_i,j is the j-th element in the rule set AP_i.|$|E
3000|$|Authorization Update When a SCADA {{application}} modifies the <b>authorization</b> <b>policy</b> for {{the event}} type that it will publish, the access control system computes new Bloom Filters BF_a', BF_a-m' {{according to the new}} <b>authorization</b> <b>policy.</b> It then sends BF_a', BF_a-m' to the home brokers to replace BF_a, BF_a-m [...].|$|E
50|$|Each {{target is}} able to use login control to {{delegate}} their access control and <b>authorization</b> <b>policies</b> to an iSNS server. Such delegation is intended to promote centralized management.|$|R
40|$|Abstract. A choreography {{specifies}} {{the interactions}} between the resources of multiple collaborating parties at design time. The runtime management of <b>authorization</b> <b>policies</b> {{in order to support}} such a specification is however tedious for administrators to manually handle. By compiling the choreography into enhanced <b>authorization</b> <b>policies,</b> we are able to automatically derive the minimal authorizations required for collaboration, as well as enable and disable the authorizations in a just-in-time manner that matches the control flow described in the choreography. We have evaluated the advantage of this utility in a collaborative engineering scenario. ...|$|R
40|$|We {{shall present}} Protekto, a new Identity and Access Management (IAM) {{platform}} that implements functionalities for deploying dynamic Authentication and <b>Authorization</b> <b>policies.</b> Protekto combines mechanisms for Federation of identities ({{based on the}} SAML 2 and Open Id standards) and authorizations (based on the XACML standard) management. Protekto also integrates an administration cockpit to manage fined grained and contextual of <b>authorization</b> <b>policies</b> based on the Organization Based Access Control (OrBAC) model. Using this cockpit, it is then possible to deploy the policy, including means to parameterize authentication mechanisms depending on the accessed services...|$|R
3000|$|Let [...] be an {{expression}} representing the subject attributes of rules in <b>authorization</b> <b>policy</b> required to access some data, which uses logic operators to associate the attributes, also called <b>authorization</b> <b>policy,</b> {{if there is}} no confusion. According to the definition of the <b>authorization</b> <b>policy</b> AP, [...] could be represented as =(w_ 1, 1 ∧...∧ w_ 1,K_ 1)∨...∨ (w_l, 1 ∧...∧ w_l,K_l), where w_i,j::="s_attr_i,j=value_i,j", 1 < i< l, 1 < j < K_l. According to the <b>authorization</b> <b>policy</b> AP_B for data B, i.e., AP_B={(〈 (type, =, company),(service, =, datamining)〉, 〈 (class, =, statistics)〉 [...])}, the expression for data B is _B= [...] "type = company"∧"service = datamining". If a customer has attributes to match, he/she can access the data B. That is to say, the conjunction of the client’s attributes includes the conjunction in [...] of the data. γ often denotes a customer’s set of attribute conjunctions as the <b>authorization</b> <b>policy.</b> For the negative of w_i,j, we can set another attribute w'_i,j to represent it. The subject can be written as [...] "type=individual"∧"consumer = X".|$|E
40|$|In {{order to}} enable an open Grid to support {{resource}} sharing between multiple heterogeneous Virtual Organizations (VOs), an auhtorization policy management framework {{is required to}} support authorization for heterogeneous authorization systems. Traditional <b>authorization</b> <b>policy</b> management frameworks work well in authorization for a single VO where the participating hosts agree to follow a global authorization system. However they are not capable of policy management for multiple VOs which deploy heterogeneous authorization systems. To solve these problems in a loose-coupling way, we propose a dynamic, distributive and heterogeneous <b>authorization</b> <b>policy</b> management framework called Dynamic Policy Management Framework (DPMF). DPMF groups VOs of the same authorization systems to form a virtual cluster. <b>Authorization</b> <b>policy</b> management is divided into inter-cluster heterogeneous policy management, and intra-cluster homogeneous policy management. A Heterogeneous <b>Authorization</b> <b>Policy</b> Management mechanism is developed for DPMF to support inter-cluster heterogeneous policy management. In the mechanism, there is an Account Mapping mechanism for mapping accounts on heterogeneous access control models, and a Policy Mapping mechanism for mapping accounts on heterogeneous <b>authorization</b> <b>policy</b> models. ...|$|E
40|$|Part 3 : Access ControlInternational audienceLogical {{formulas}} and enumeration are the {{two major}} ways for specifying authorization policies in Attribute Based Access Control (ABAC). While considerable {{research has been done}} for specifying logical-formula <b>authorization</b> <b>policy</b> ABAC, there has been less attention to enumerated <b>authorization</b> <b>policy</b> ABAC. This paper presents a finite attribute, finite domain ABAC model for enumerated authorization policies and investigates its relationship with logical-formula <b>authorization</b> <b>policy</b> ABAC models in the finite domain. We show that these models are equivalent in their theoretical expressive power. We also show that single and multi-attribute ABAC models are equally expressive...|$|E
50|$|In the United States the Federal Reserve {{operates}} swap lines {{under the}} authority of Section 14 of the Federal Reserve Act and in compliance with <b>authorizations,</b> <b>policies,</b> and procedures established by the FOMC.|$|R
50|$|The TPM 2.0 <b>policy</b> <b>authorization</b> {{includes}} the 1.2 HMAC, locality, physical presence, and PCR. It adds authorization {{based on an}} asymmetric digital signature, indirection to another authorization secret, counters and time limits, NVRAM values, a particular command or command parameters, and physical presence. It permits the ANDing and ORing of these authorization primitives to construct complex <b>authorization</b> <b>policies.</b>|$|R
5000|$|Presence rules (auid = pres-rules, org.openmobilealliance.pres-rules). A Presence Rules {{application}} is an application which uses <b>authorization</b> <b>policies,</b> {{also known as}} authorization rules, to specify what presence information can be given to which watchers, and when.|$|R
40|$|Abstract. Custom SME {{applications}} for collaboration and workflow have become affordable when implemented as Web applications employing Agile methodologies. Security engineering is still difficult with Agile development, though: heavy-weight processes put the improvements of Agile development at risk. We propose Agile security engineering and increased end-user involvement to improve Agile development {{with respect to}} <b>authorization</b> <b>policy</b> development. To support the <b>authorization</b> <b>policy</b> development, we introduce a simple and readable authorization rules language implemented in a Ruby on Rails authorization plugin that is employed in a real-world SME collaboration and workflow application. Also, we report on early findings of the language’s use in <b>authorization</b> <b>policy</b> development with domain experts...|$|E
30|$|A {{subscriber}} {{can successfully}} access the requested event only its attributes match the publisher’s <b>authorization</b> <b>policy,</b> the subscriber can accept the subscribed event from the published event type only the event attributes match the subscriber’s <b>authorization</b> <b>policy.</b> Thus our access control solution is correct. In this section, {{we try to}} clarify that, no matter what form the attacks take from adversaries, our scheme keeps privacy.|$|E
40|$|To {{effectively}} {{participate in}} modern collaborations, member organizations {{must be able}} to share specific data and functionality with collaboration partners, while ensuring their resources are safe from inappropriate access. This requires access control models, policies, and enforcement mechanisms for the shared resources. This paper specifically addresses how to reduce the information leaks caused by authorization policies used in collaborative computing environment. The basic principle is defining some labels that specify the information flow constraints, and assigning them to <b>authorization</b> <b>policy</b> components. The usages of labeled policy components must obey the information fiows constraints defined by the labels in order to avoid <b>authorization</b> <b>policy</b> components being misused. This label can also improve the <b>authorization</b> <b>policy</b> administration...|$|E
40|$|We {{present the}} design, proof theory and metatheory of a logic for {{representing}} and reasoning about <b>authorization</b> <b>policies.</b> A salient {{feature of the}} logic, BL, is its support for system state {{in the form of}} interpreted predicates, upon which <b>authorization</b> <b>policies</b> often rely. In addition, BL includes Abadi et al. ’s “says ” connective and explicit time. BL is illustrated through a case study of policies for sharing sensitive information created in the U. S. intelligence community. We discuss design choices in the interaction between state and other features of BL and validate BL’s proof theory by proving standard metatheoretic properties like admissibility of cut...|$|R
40|$|Data {{outsourcing}} {{is becoming}} today a successful solution that allows users and organizations to exploit external servers for {{the distribution of}} resources. Some {{of the most challenging}} issues in such a scenario are the enforcement of <b>authorization</b> <b>policies</b> and the support of policy updates. Since a common approach for protecting the outsourced data consists in encrypting the data themselves, a promising approach for solving these issues is based on the combination of access control with cryptography. This idea is in itself not new, but the problem of applying it in an outsourced architecture introduces several challenges. In this paper, we first illustrate the basic principles on which an architecture for combining access control and cryptography can be built. We then illustrate an approach for enforcing <b>authorization</b> <b>policies</b> and supporting dynamic <b>authorizations,</b> allowing <b>policy</b> changes and data updates at a limited cost in terms of bandwidth and computational power...|$|R
40|$|This paper {{discusses}} policy-based authorization, {{an effective}} intermediate point between MAC and DAC {{that promises to}} combine the best features of both models. Policy-based authorization {{can be viewed as}} a reformulation of content-based authorization [3] with simplified content-based policies as the central focus. The primary contributions of this paper are a methodology for designing application-oriented <b>authorization</b> <b>policies,</b> a language for expressing the policies, a new approach to separating the duties of creating policy and assigning policies to users, and a discussion of implementation techniques for finegrained <b>authorization</b> <b>policies</b> in object-oriented and relational contexts. This model has been implemented in a large enterprise application deployed to thousands of users over the last four years. ...|$|R
