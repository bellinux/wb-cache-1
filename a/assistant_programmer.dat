5|22|Public
500|$|American singer-songwriter R. Kelly wrote, produced, and {{arranged}} [...] "Laundromat". Nivea's vocals were recorded by Abel Garibaldi, Andy Gallas, and Ian Mereness at the Rock Land Studios in Chicago. Mereness mixed the song with assistance from Jason Mlodzinski and Kelly. Garibaldi and Mereness {{also served as}} programmers for the single, {{with the help of}} <b>assistant</b> <b>programmer</b> Mlodzinski. Colin [...] "CL" [...] Lampkin and Nivea were the executive producers.|$|E
5000|$|When Special X {{was dropped}} from the line up in 2008, Brutus was tasked with {{creating}} the first ever punk rock radio station Fungus 53. <b>Assistant</b> <b>programmer</b> on the channel was DJ Russ Brown. The channel became respected enough for its support of the genre {{that it was celebrated}} by punk band NOFX in the song [...] "Fungus". The song featured the lyrics, [...] "I hate the radio but I like Fungus. The only punk-rock station, it's humongous. I think they just play Misfit's Walk among us. Fungus 53." ...|$|E
5000|$|Michael's {{first job}} {{was working at}} Elias Associates (later it was called Elias Arts) as an assistant. Elias {{was one of the}} busiest music {{production}} companies in the world in the 1980s and 1990s, and Whalen immersed himself in the state-of-the-art technology available in the studios at Elias at night. Their studios featured the Synclavier Digital Audio System which became a huge part of Whalen's later career. It was at Elias that Whalen did his first sound design and composition of national advertisements (Pepsi, Coca-Cola, BMW, Nutrasweet, IBM, Ford and many others). He also had an opportunity to work with recording artists Duran Duran, John Waite and Glamour Camp as <b>assistant,</b> <b>programmer</b> and sound designer.|$|E
50|$|The {{institute}} employs {{around a}} hundred researchers, <b>assistants,</b> <b>programmers</b> and auxiliary staff.|$|R
500|$|Danny Lohner – <b>assistant</b> producer, <b>programmer</b> on [...] "Distraction" ...|$|R
5000|$|Danny Lohner - <b>assistant</b> producer, <b>programmer</b> on [...] "Distraction" ...|$|R
40|$|He {{worked as}} a {{teaching}} <b>assistant,</b> <b>programmer,</b> and font designer at Reed College, and later {{worked as a}} teaching assistant in the Department of Computer Sciences at the University of Texas. He has also worked as a disk jockey and director of specialty programs at two student radio stations, KRRC in Portland, Oregon, and KTSB in Austin, Texas. He has been employed very happily (and very busily) as an instructor o...|$|E
500|$|Critter – <b>assistant</b> producer, <b>programmer,</b> photographer, mixing {{engineer}} on [...] "The War" ...|$|R
5000|$|... 1992 Indiana Jones and the Fate of Atlantis lead scripter, <b>assistant</b> designer, <b>programmer</b> ...|$|R
5000|$|Mohammad Moshiur Rahman, <b>Assistant</b> Computer <b>Programmer,</b> M.Sc. in Applied Physics and Electronics, University of Dhaka ...|$|R
5000|$|... 2001 3000 Miles to Graceland (composer <b>assistant,</b> score synth <b>programmer,</b> score {{technical}} <b>assistant)</b> ...|$|R
50|$|Warren Teitelman {{developed}} a <b>Programmer's</b> <b>Assistant</b> {{as part of}} BBN-LISP with an Undo function, by 1971.|$|R
50|$|In 2010 Janet Panic joined Aboriginal Voices Radio, a Canadian {{national}} radio network where she sits {{as a member}} of the board, acts as <b>assistant</b> music <b>programmer</b> and interviews significant members of the Canadian Aboriginal community for a weekly broadcast.|$|R
5000|$|Peters first {{worked as}} a teacher, {{teaching}} fifth grade and working as a special needs education assistant in the Jefferson County School District in Lakewood, Colorado, 1975. Peters then {{worked as a}} secretary, research <b>assistant,</b> computer <b>programmer</b> and systems analyst for Tracom Corporation in Denver from 1975 until 1984. Following this, Peters was a computer systems engineer for [...] "Electronic Data Systems" [...] in Denver from 1985 until 1988.|$|R
50|$|Karthik Chidambaram is DCKAP's Founder and CEO. After {{earning a}} Bachelor's in Engineering from the Government College of Technology in Coimbatore, India, {{he earned a}} Master's in Computer Engineering from the Illinois Institute of Technology, in Chicago, and then {{continued}} his studies at Stanford University. Before starting DCKAP in 2005, out of his apartment in Chicago, {{he worked as a}} consultant to the Fireman's Fund Insurance Company and IBM and as an <b>Assistant</b> Scientific <b>Programmer</b> for the Argonne National Laboratory in Argonne, Illinois.|$|R
50|$|Unimpressed {{with the}} usual {{television}} fare, Harvey wrote an angry letter to the Los Angeles-based pay-TV service SelecTV; they were so impressed that they hired him as an <b>assistant</b> film <b>programmer.</b> In 1981, the eclectic Z Channel, another pay-TV outlet in LA, hired Harvey as its director of programming. Harvey brought his relationships with the above-listed filmmakers and championed their work, including Michael Cimino's Heaven's Gate, The Ruling Class with Peter O'Toole, Sergio Leone's Once Upon a Time in America, Karel Reisz's The Loves of Isadora, John Ford's Up the River, Bernardo Bertolucci's 1900, and Peckinpah's The Wild Bunch and Pat Garrett & Billy the Kid.|$|R
40|$|RAP (Remote <b>Assistant</b> for <b>Programmers)</b> is a Web and multi-agent based {{system to}} support remote {{students}} and programmers during common projects or activities {{based on the}} Java programming language. RAP helps users to solve problems proposing information extracted from dedicated repositories and forwarding answers received from other users, recommended as experts. Its peculiar characteristic is {{the integration of the}} agent technology with the semantic Web technology. In fact, in order to improve filtering and recommendation techniques, RAP takes advantage of an ontological approach to user and document profiling. A RAP system is not a closed system, instead it is based on a dynamic network of RAP platforms managing groups of geographically localized users and documents. Therefore, recommendations should take into account of the accessible experts and documents. At this purpose, RAP users and documents profile management subsystems provide a mechanism that dynamically adapts the relevance of each profile. An initial prototype of the RAP System is under development by using JADE...|$|R
5000|$|As a child, Syntek {{began his}} artistic career by acting in {{television}} commercials {{during the late}} 1970s, subsequently participating in the Pinwheel program produced by RTC, {{and then as a}} comedian in Alegrias de medio día (infantil) in 1979 which later led to the hit TV show Chiquilladas broadcast on Televisa {{in the first half of}} the decade of the 1980s. After leaving the program he decided to devote himself to the world of music and began working as an <b>assistant</b> and <b>programmer</b> in music recording studios. He was nicknamed [...] "Syntek" [...] by his friends because of a peculiar event: Syntek at that time did not have enough money to buy a keyboard, so he would borrow them from friends, this situation led him to be known as [...] "El sin Teclados" [...] after which he derived the name Syntek. After having participated with members of the group Caifanes to form the band [...] "Pistolas de Platino" [...] and then joining Kenny y los Eléctricos until 1989, he formed his own group called Aleks Syntek y la Gente Normal.|$|R
40|$|Programmers are {{loathe to}} {{interrupt}} their workflow to document their design rationale, leading to frequent errors when software is modified—often much later and by different programmers. A Pro- grammer’s Assistant could {{interact with the}} programmer to capture and preserve design rationale, in a natural way that would make rationale capture “cost less than it’s worth”, and could also detect common flaws in program design. Such a <b>programmer’s</b> <b>assistant</b> was not practical {{when it was first}} proposed decades ago, but advances over the years make now the time to revisit the concept, as our prototype shows. This work was supported by the Center for Brains, Minds and Machines (CBMM), funded by NSF STC award CCF- 1231216...|$|R
5000|$|Another major area of {{research}} for logical theory was software engineering. Research projects such as the Knowledge-Based Software <b>Assistant</b> and <b>Programmer's</b> Apprentice programs applied logical theory to validate the correctness of software specifications. They also used them to transform the specifications into efficient code on diverse platforms and to prove the equivalence between the implementation and the specification. [...] This formal transformation driven approach is often far more effort than traditional software development. However, in specific domains with appropriate formalisms and reusable templates the approach has proven viable for commercial products. The appropriate domains are usually those such as weapons systems, security systems, and real time financial systems where failure of the system has excessively high human or financial cost. An {{example of such a}} domain is Very Large Scale Integrated (VLSI) Design—the process for designing the chips used for the CPU's and other critical components of digital devices. An error in a chip is catastrophic. Unlike software chips can't be patched or updated. As a result, there is commercial justification for using formal methods to prove that the implementation corresponds to the specification.|$|R
40|$|Design {{patterns}} are {{considered one of}} the most valuable tools to produce quality designs and a general-purpose technique to improve a design is to identify all pattern realizations and to apply well-known rules to improve them. This technique requires finding all pattern realizations used in a design and it is a rather tedious task. This paper shows the work in the literature on <b>assistants</b> for <b>programmers</b> and software architects and presents a system called IDEA (Interactive DEsign Assistant). IDEA is an interactive design assistant for software architects meant for automating the task of finding and improving the realizations of design patterns. Basically, IDEA is capable of automatically (i) finding the patterns employed in a UML diagram and (ii) producing critiques about these patterns. The core of IDEA is the module that automatically detects the pattern realizations found in the model that the architect is producing. When this module finds a pattern realization, a set of design rules are verified to test if the design could be improved. Any violation to these rules fires a critique that is proposed to the engineer as a possible design improvement. Currently, a prototypal implementation of IDEA is integrated with two popular CASE tools. Keywords Automatic design pattern detection, Critique generation, Design pattern, UML. 2 1...|$|R
40|$|As {{research}} institutions seek to professionalize the workplace {{the use of}} metrics to assess an individual's performance is becoming increasingly commonplace. For academic researchers this can be achieved {{through the use of}} publication metrics such as the number of articles published and number of citations. For non-academic professionals, such as cartographers, field <b>assistants</b> or database <b>programmers,</b> they may have limited inclusion as authors and therefore their contribution to research outputs and outcomes is more difficult to ascertain. This paper outlines the current de facto standards for authorship and proposes some potential solutions for the formal recognition of contributions by professionals to research projects. This is presented through strategies currently being trialed at the Journal of Maps and through the example of map publication at the British Geological Survey...|$|R
40|$|In this thesis, we {{introduce}} {{an architecture}} for programming productivity tools {{that relies on}} a database of execution traces. Our database enables a novel user interaction model for a <b>programmer</b> <b>assistant</b> based on short demonstrations of framework usages in applications. By matching the demonstration traces against the complete traces in the database, our system infers the code snippets for the demonstrated feature including the missing set-up steps. We develop techniques for an interactive trace matching process, and evaluate them on a sample of Swing applications. We show that our system synthesizes code for several features of the Eclipse platform from traces of existing Eclipse plug-ins, and that the generated code is comparable in quality to the tutorial code. by Kuat Yessenov. Thesis: Ph. D., Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, 2016. Cataloged from PDF version of thesis. Includes bibliographical references (pages 116 - 121) ...|$|R
40|$|The INTERLISP Virtual Machine is the {{environment}} in which the INTERLISP System is implemented. It includes such abstract objects as "Literal Atoms", "List Cells", "Integers", etc., the basic LISP functions for manipulating them, the underlying program control and variable binding mechanisms, the input/output facilities, and interrupt processing facilities. In order to Implement the INTER LISP System (as described in The INTERLISP Reference Manual by W. Teitelman, et. al.) on some physical machine, it is only necessary to implement the INTERLISP Virtual Machine, since Virtual Machine compatible source code {{for the rest of the}} INTERLISP System can be obtained from publicly available files. This document specifies the behavior of the INTER LISP Virtual Machine from the implementor's point of view. That is, it is an attempt to make explicit those things which must be implemented to allow the INTERLISP System to run on some machine. KEY WORDS AND PHRASES programming language semantics, LISP, dynamic storage allocation, interpreters, spaghetti stacks, abstract data types, function objects, FUNARGs, applicative programming languages, control structures, interactive systems, DWIM, <b>programmer's</b> <b>assistant,</b> automatic error correction, eval, error handling, interrup...|$|R
40|$|PATH (<b>Programmer</b> <b>Assistant</b> for Transforming Haskell) is a user-directed program {{transformation}} {{system for}} Haskell. This dissertation describes PATH and the technical contributions made in its development. PATH uses a new method for program transformation in which 1) total correctness is preserved, i. e., transformations can neither introduce nor eliminate non-termination; 2) infinite data structures and partial functions can be transformed; 3) generalization of {{programs can be}} done as well as specialization of programs; 4) neither an improvement nor an approximation relation is required to prove equivalence of programs—reasoning can be directly about program equivalence. Current methods (such as fold/unfold, expression procedures, and the tick calculus) all lack {{one or more of}} these features. PATH uses a more expressive logic for proving equivalence of programs than previous transformation systems. A logic more general than two-level horn clauses (used in the CIP transformation system) is needed but the full generality of first order logic is not required. This logic used in PATH lends itself to the graphical manipulation of program derivations (i. e., proofs of program equivalence). PATH incorporates a language extension which makes programs and derivations more generic: programs and derivations can be generic with respect to the length of tuples; i. e., a function can be written that works uniformly on 2 -tuples, 3 -tuples, and etc. iii ivCopyright c ○ 2002 by Mark Anders Tullsen All rights reserved. v viAcknowledgments I wish to thank my advisor Paul Hudak for many years of constructive criticism, guidance, and encouragement. I also wish to thank the other readers of this dissertation: John Peterson, Zhong Shao, and Tim Sheard. To my wife, Teresa, and my children Andrew, Rachel, Zachary, and Jonathan: a heartfelt thanks for your support and patience while I have been working on this dissertation. Soli Deo Gloria. vii viiiContent...|$|R

