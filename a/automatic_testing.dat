317|1557|Public
25|$|More {{attention}} {{was brought to}} quality issues in the 1930s. In 1935, a biochemist tested 2000 condoms by filling each one with air and then water: he found that 60% of them leaked. The condom industry estimated that only 25% of condoms were tested for quality before packaging. The media attention led the U.S. Food and Drug Administration to classify condoms as a drug in 1937 and mandate that every condom be tested before packaging. Youngs Rubber Company {{was the first to}} institute quality testing of every condom they made, installing <b>automatic</b> <b>testing</b> equipment designed by Arthur Youngs (the owner's brother) in 1938. The Federal Food, Drug, and Cosmetic Act authorized the FDA to seize defective products; the first month the Act took effect in 1940, the FDA seized 864,000 condoms. While these actions improved the quality of condoms in the United States, American condom manufacturers continued to export their rejects for sale in foreign markets.|$|E
50|$|FreeNATS (the Free Network <b>Automatic</b> <b>Testing</b> System) is an {{open source}} network {{monitoring}} software application developed by David Cutting {{under the banner of}} PurplePixie Systems.|$|E
5000|$|... 2011-12 Atlanta Public School System {{adopted the}} use of GRS as a pre-qualitifiying process for <b>automatic</b> <b>testing</b> of {{students}} for the Gifted & Talented programs.|$|E
40|$|<b>Automatic</b> <b>test</b> case {{generation}} {{is a process}} that starts with text based functional requirements which are converted to a formal system requirements model. Once the formal system requirements model is created the <b>automatic</b> <b>test</b> case generation software creates a set of test scenarios that will verify that the requirements are all met. The <b>automatic</b> <b>test</b> case generation software accomplishes the conversion in a four step process: create base scenarios, identify unverified requirements, enhance scenarios to cover all requirements and allow black box testing, and then combine the scenarios into a single scenario tree. The <b>automatic</b> <b>test</b> case generation system outputs a set of scenarios by walking the final scenario tree. This dissertation expands on <b>automatic</b> <b>test</b> case generation for embedded systems in two major ways. The first is to extend functional <b>automatic</b> <b>test</b> case generation to allow for time based requirements as first class objects. The second is to use the <b>automatic</b> <b>test</b> case generation system to enable system partitioning decisions. The addition of time based requirements to the <b>automatic</b> <b>test</b> case generation system allows more complex systems to be developed. By providing a partitioning recommendation based on the test cases generated from the system requirements, the scope and capabilities of a single designer can be expanded to more complex systems. The resulting upgrades to the theory of <b>automatic</b> <b>test</b> case generation could be applied to the existing tools or incorporated in modern UML/SysML based design tools...|$|R
50|$|<b>Automatic</b> <b>test</b> equipment.|$|R
40|$|Abstract—To <b>automatic</b> <b>test</b> the {{function}} {{and performance of}} an airborne radar, changeable test adapter is adopted to implement the hardware and software design of the <b>automatic</b> <b>test</b> set of the antenna, transceiver and indicator of the radar based on AT 89 C 52. Problems such as t {{the different types of}} interfaces, the various kinds of signals and the test of microwave signal are solved successfully and the objectives of resource sharing and <b>automatic</b> <b>test</b> are realized. The test software is designed by modular structure, {{and with the help of}} <b>automatic</b> <b>test</b> set hardware, the required test items of the radar system are experimented and the test process control succeeded. Experiment results show that the <b>automatic</b> <b>test</b> set performs steadily and the results meet the requirements of the airborne radar. The set has the advantages of intelligent, manageable and reducing artificial errors. It provides effectiv...|$|R
50|$|Chroma ATE Inc., a Taiwan company, is an {{own brand}} {{supplier}} in electronic test and measurement equipment and systems, providing testing equipment, <b>automatic</b> <b>testing</b> equipment (ATE) and manufacturing execution systems (MES).|$|E
50|$|A {{lean and}} highly {{productive}} plant {{by virtue of}} its structure has the modern facilities for assembly & <b>automatic</b> <b>testing</b> with SMT Line, environmental test labs, PCB manufacturing and sophisticated Powder Coating Line.|$|E
5000|$|Quality Assurance: Building {{a modern}} {{architecture}} and decoupling the application {{from the data}} layer. The aim is to allow to extend the <b>automatic</b> <b>Testing</b> possibilities which are a prerequisite for shorter release cycles with extending functionality.|$|E
40|$|Abstract. By {{analyzing}} the current problems in equipment <b>automatic</b> <b>test</b> system, {{we describe the}} concept, the basic working principle and advantages of service-oriented architecture (SOA), then introduce the web service architecture and the standards of establishing service-oriented architecture. The architecture model of <b>automatic</b> <b>test</b> system on SOA-based equipment was designed, and was used to realize the unified description of equipment <b>automatic</b> <b>test</b> (including fault diagnosis) information. This effectively improves the equipment's capability in performance detection and maintenance support...|$|R
50|$|<b>Automatic</b> <b>test</b> pattern {{generation}} {{is a term}} of art in electronic design automation for the <b>automatic</b> generation of <b>test</b> vectors for electronic circuits.|$|R
5000|$|<b>Automatic</b> <b>test</b> {{execution}} and evaluation (assessment) in a Test campaign ...|$|R
50|$|The Slicer build process {{utilizes}} CMake {{to automatically}} build prerequisite and optional libraries (excluding Qt). The core development cycle incorporates <b>automatic</b> <b>testing,</b> {{as well as}} incremental and nightly builds on all platforms, monitored using an online dashboard.|$|E
50|$|Abbreviated Test Language for All Systems (ATLAS) is a MILSPEC {{language}} for <b>automatic</b> <b>testing</b> of avionics equipment. It is a high-level computer language {{and can be}} used on any computer whose supporting software can translate it into the appropriate low-level instructions.|$|E
50|$|In {{the area}} of {{electronic}} test equipment, an active load is used for <b>automatic</b> <b>testing</b> of power supplies and other sources of electrical power {{to ensure that their}} output voltage and current are within their specifications over a range of load conditions, from no load to maximum load.|$|E
5000|$|Teradyne's {{principal}} {{competitors in}} the <b>automatic</b> <b>test</b> equipment business are: ...|$|R
5000|$|... 1967: Europe's first <b>automatic</b> <b>test</b> {{system for}} {{integrated}} circuits (IC).|$|R
40|$|Since {{the early}} days of {{software}} <b>testing,</b> <b>automatic</b> <b>test</b> generation has been suggested as a way of allowing tests to be created at a lower cost. However, industrially useful and applicable tools for <b>automatic</b> <b>test</b> generation are still scarce. As a consequence, the evidence regarding the applicability or feasibility of <b>automatic</b> <b>test</b> generation in industrial practice is limited. This is especially problematic if we consider the use of <b>automatic</b> <b>test</b> generation for industrial safety-critical control systems, such as are found in power plants, airplanes, or trains. In this thesis, we improve the current state of <b>automatic</b> <b>test</b> generation by developing a technique based on model-checking that works with IEC 61131 - 3 industrial control software. We show how <b>automatic</b> <b>test</b> generation for IEC 61131 - 3 programs, containing both functional and timing information, can be solved as a model checking problem for both code and mutation coverage criteria.   The developed technique has been implemented in the CompleteTest tool. To evaluate the potential application of our technique, we present several studies where the tool is applied to industrial control software. Results show that CompleteTest is viable for use in industrial practice; it is efficient in terms of the time required to generate tests that satisfy both code and mutation coverage and scales well for most of the industrial programs considered. However, our results also show that there are still challenges {{associated with the use of}} <b>automatic</b> <b>test</b> generation. In particular, we found that while automatically generated tests, based on code coverage, can exercise the logic of the software as well as tests written manually, and can do so in a fraction of the time, they do not show better fault detection compared to manually created tests. Specifically, it seems that manually created tests are able to detect more faults of certain types (i. e, logical replacement, negation insertion and timer replacement) than automatically generated tests. To tackle this issue, we propose an approach for improving fault detection by using mutation coverage as a test criterion. We implemented this approach in the CompleteTest tool and used it to evaluate <b>automatic</b> <b>test</b> generation based on mutation testing. While the resulting tests were more effective than <b>automatic</b> <b>tests</b> generated based on code coverage, in terms of fault detection, they still were not better than manually created tests. In summary, our results highlight the need for improving the goals used by <b>automatic</b> <b>test</b> generation tools. Specifically, fault detection scores could be increased by considering some new mutation operators as well as higher-order mutations. Our thesis suggests that automatically generated test suites are significantly less costly in terms of testing time than manually created test suites. One conclusion, strongly supported by the results of this thesis, is that <b>automatic</b> <b>test</b> generation is efficient but currently not quite as effective as manual testing. This is a significant progress that needs to be further studied; we need to consider the implications and the extent to which <b>automatic</b> <b>test</b> generation can be used in the development of reliable safety-critical systems...|$|R
5000|$|LFI (Library-level Fault Injector) [...] is an <b>automatic</b> <b>testing</b> tool suite, used to {{simulate}} {{in a controlled}} testing environment, exceptional situations that programs need to handle at runtime but that {{are not easy to}} check via input testing alone. LFI automatically identifies the errors exposed by shared libraries, finds potentially buggy error recovery code in program binaries and injects the desired faults at the boundary between shared libraries and applications.|$|E
5000|$|Less common, {{but just}} as {{important}} examples of code gaining access to final web pages, and having to use [...] and [...] elements' [...] or [...] attributes to navigate within the page {{include the use of}} <b>automatic</b> <b>testing</b> tools. On dynamically generated HTML, this may include the use of automatic page testing tools such as HttpUnit, a member of the xUnit family, and load or stress testing tools such as Apache JMeter when applied to form-driven web sites.|$|E
50|$|There is a {{significant}} runtime overhead in a calling a subroutine, including passing the arguments, branching to the subprogram, and branching back to the caller. The overhead often includes saving and restoring certain processor registers, allocating and reclaiming call frame storage, etc.. In some languages, each subroutine call also implies <b>automatic</b> <b>testing</b> of the subroutine's return code, or the handling of exceptions that it may raise. In object-oriented languages, {{a significant}} source of overhead is the intensively used dynamic dispatch for method calls.|$|E
5000|$|<b>Automatic</b> <b>test</b> generation: A {{use case}} driven {{approach}} IEEE Trans on Software Engineering, 2006 ...|$|R
50|$|Sometimes <b>automatic</b> <b>test</b> pattern {{generation}} {{is used to}} help design the series of tests.|$|R
5000|$|Data {{that will}} be {{utilized}} for the design, development, and utilization of <b>automatic</b> <b>test</b> equipment(ATE) ...|$|R
50|$|ItsNat simulates {{a virtual}} browser within a Java {{application}} {{running on the}} server. This virtual browser represents documents using the W3C's DOM Level 2 node tree, and documents can be changed at any time by external Java code running on the server. By means of AJAX, the real user's browser is kept {{in sync with the}} server's virtual browser, and can pass W3C DOM events to it. This can for example be used for <b>automatic</b> <b>testing</b> of the real browser {{under the control of the}} server.|$|E
50|$|Other test {{equipment}} includes a line insulation tester and an automatic trunk tester, for items whose numerosity and simplicity lent themselves to <b>automatic</b> <b>testing.</b> An automated AMA translator tester checked for miswiring that could bill one line to another. A nonautomated outgoing trunk test panel allows voltmeter checks on trunks to distant offices, freeing the MTF from this tedious job. Each outgoing trunk {{is represented by}} two jacks: one for test access for the voltmeter {{and one for the}} make-busy operation. MTF was able to override Make Busy when necessary.|$|E
5000|$|The years 2011 and 2012 {{witnessed}} {{an explosive}} {{growth in the}} autopilot functionality and codebase size, {{thanks in large part}} to new participation from well known computer scientist and programmer Andrew [...] "Tridge" [...] Tridgell and HAL author Pat Hickey. Tridge's contributions included <b>automatic</b> <b>testing</b> and simulation capabilities for Ardupilot, along with PyMavlink and Mavproxy. Hickey was instrumental in bringing the AP_ HAL library to the code base: HAL (Hardware Abstraction Layer) greatly simplified and modularized the code base by introducing and confining low level hardware implementation specifics to a separate hardware library. The year 2012 also saw Randy Mackay taking the role of lead maintainer of Copter, after a request from former maintainer Jason Short, and Tridge taking over the role of lead Plane maintainer, after Doug Weibel who went on to earn a Ph.D. in Aerospace Engineering. Both Randy and Tridge are current lead maintainers to date.|$|E
40|$|Testing {{of large}} scale {{integrated}} logic circuits is considered from the point-of-view of <b>automatic</b> <b>test</b> pattern generation. A logic simulator based approach for <b>automatic</b> <b>test</b> pattern generation is taken and is described. The logic {{model and the}} timing model used in the simulator are also described. Two methods are presented for generating test patterns from {{the output of the}} simulator. Recommendations for future study are also presented...|$|R
40|$|Abstract. It is {{indispensable}} and effective to utilize <b>automatic</b> software <b>test</b> method {{to verify the}} steady operations and stable performance of scanning procedures for CT’s system. Directing at the problems which are encountered during {{the progress of the}} <b>automatic</b> <b>test</b> program development, In this paper, we discuss how to deal with such problems as “windows blocking”, ”identify control”, ”one click start up ” to make sure the manual <b>automatic</b> <b>test</b> code explored via the Coded UI is useful and robust. It is the final targets too realize the stable operations of multiple CT scanning procedures...|$|R
40|$|Abstract. To <b>automatic</b> <b>test</b> the {{function}} {{and performance of}} an airborne radar, changeable test adapter is adopted to implement the hardware and software design of the <b>automatic</b> <b>test</b> set of the antenna, transceiver and indicator of the radar based on AT 89 C 52. Problems such as t {{the different types of}} interfaces, the various kinds of signals and the test of microwave signal are solved successfully and the objectives of resource sharing and <b>automatic</b> <b>test</b> are realized. The test software is designed by modular structure, {{and with the help of}} <b>automatic</b> <b>test</b> set hardware, the required test items of the radar system are experimented and the test process control succeeded. Experiment results show that the <b>automatic</b> <b>test</b> set performs steadily and the results meet the requirements of the airborne radar. The set has the advantages of intelligent, manageable and reducing artificial errors. It provides effective guarantees for radar’s maintenance, fault diagnosis and fault detection, and has a wide application prospect with low cost. Introduction (Heading 1) The airborne radar on the equipment of certain airplane consists of antenna, transceiver extension and display device. It is mainly used to detect the target of the airplane which is in the front air and on the ground, and show the relative distance and position and some other parameters of the goal t...|$|R
50|$|More {{attention}} {{was brought to}} quality issues in the 1930s. In 1935, a biochemist tested 2000 condoms by filling each one with air and then water: he found that 60% of them leaked. The condom industry estimated that only 25% of condoms were tested for quality before packaging. The media attention led the U.S. Food and Drug Administration to classify condoms as a drug in 1937 and mandate that every condom be tested before packaging. Youngs Rubber Company {{was the first to}} institute quality testing of every condom they made, installing <b>automatic</b> <b>testing</b> equipment designed by Arthur Youngs (the owner's brother) in 1938. The Federal Food, Drug, and Cosmetic Act authorized the FDA to seize defective products; the first month the Act took effect in 1940, the FDA seized 864,000 condoms. While these actions improved the quality of condoms in the United States, American condom manufacturers continued to export their rejects for sale in foreign markets.|$|E
40|$|Abstract: This paper {{introduces}} foreign airborne guiding ammunition <b>automatic</b> <b>testing</b> equipment development {{history and}} current situation, analyzed our Army airborne guiding ammunition <b>automatic</b> <b>testing</b> equipment development and existing problems, putting forward my Army Airborne guiding ammunition testing equipment development proposal. Foreign airborne guiding ammunition <b>automatic</b> <b>testing</b> equipment development The {{first generation of}} professional <b>automatic</b> <b>testing</b> equipment. Special type weapon equipment system is the early <b>automatic</b> <b>testing</b> equipment, {{some parts of the}} system still is used. This kind system is from the artificial testing to <b>automatic</b> <b>testing</b> an important step., it is superior to manual testing in the test function, performance, efficiency. The main disadvantages is single function, low standardization degree. The Second generation instrument block type <b>automatic</b> <b>testing</b> equipment. The second generation <b>automatic</b> <b>testing</b> equipment build up system based on standard interface bus, This system is convenient to set up, building characteristics make change, increase or decrease in testing contents become very flexible, equipment resources reuse. The main disadvantage is low bus transfer rate, it is difficult to form the basis for the bus speed, large data throughput automati...|$|E
40|$|Abstract. <b>Automatic</b> <b>testing</b> is very {{important}} for agile software development. There are some testing tasks can be finished by automatic tools, but most of them can not meet the actual needs of enterprises which is the direct reason of building an agile <b>automatic</b> <b>testing</b> framework named as Agilework. The structure, operation principle and building steps of the Agilework are descripted in details. The Agilework is a scalable framework which has high efficiency and flexibility. It can meet the requirements of the <b>automatic</b> <b>testing</b> in agile software development...|$|E
50|$|Indra is {{organized}} around three business areas: information technologies, simulation & <b>automatic</b> <b>test</b> equipment, and defense electronic equipment.|$|R
5000|$|<b>Automatic</b> <b>test</b> pattern generation, ATPG - generates pattern-data to {{systematically}} exercise as many logic-gates, and other components, as possible.|$|R
5000|$|... #Caption: A Functional Test Fixture is {{a complex}} device to {{interface}} the DUT to the <b>automatic</b> <b>test</b> equipment (ATE) ...|$|R
