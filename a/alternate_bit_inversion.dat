2|178|Public
40|$|Several {{methods for}} {{increasing}} bit transition densities in a data stream are summarized, discussed in detail, and compared against constraints {{imposed by the}} 2 MHz data link {{of the space shuttle}} high rate multiplexer unit. These methods include use of alternate pulse code modulation waveforms, data stream modification by insertion, <b>alternate</b> <b>bit</b> <b>inversion,</b> differential encoding, error encoding, and use of bit scramblers. The psuedo-random cover sequence generator was chosen for application to the 2 MHz data link of the space shuttle high rate multiplexer unit. This method is fully analyzed and a design implementation proposed...|$|E
40|$|This thesis {{presents}} a new multiple-valued encoder with re-configurable radix. The proposed circuits utilize serial cyclic D/A conversion and semi floatinggate (SFG) inverters for compact design {{and a high}} functional capacity per device. A re-configurable radix is not supported by existing SFG inverter based multiple-valued encoders which make use of parallel binary weight D/A conversion. The study covers least significant bit-first (LSB), least significant bit-first with <b>alternate</b> <b>bit</b> <b>inversion</b> (LSB ABI) and most significant bit-first (MSB) digital input codes. The serial cyclic D/A converters with LSB and LSB ABI input codes are implemented in a double-poly 0. 35 um AMS process. Measured results are provided and analyzed using standard static D/A converter performance measures. Circuits are tested using the practical radices 4, 8 and 16. Experimental results demonstrate that serial cyclic D/A converters using SFG inverters are feasible. Compared to related work on cyclic D/A conversion, the proposed circuits feature both a reduced number of devices {{and a reduction in}} the required die area. Several new techniques are identified for extending the resolution beyond radix 4, 8 and 16 MVL applications. This includes an error correction algorithm called least significant bit-first with <b>alternate</b> <b>bit</b> <b>inversion</b> (LSB ABI), a sample and hold clock scheme and a Dual Data-Rate (DDR) mode of D/A converter operation. The techniques are implemented on a chip and measured results are provided. The thesis also includes simulation work on several new SFG based circuits. A ternary serial D/A converter, a MSB-first serial D/A converter and a multiple-valued frequency divider which features re-configurable modulus...|$|E
40|$|This paper {{presents}} {{a method of}} error-correcting coding of digital information. Feature of this method is the treatment of cases of <b>inversion</b> and skip <b>bits</b> caused by {{a violation of the}} synchronization of the receiving and transmitting device or other factors. The article gives a brief overview of the features, characteristics, and modern methods of construction LDPC and convolutional codes, as well as considers a general model of the communication channel, taking into account the probability of <b>bits</b> <b>inversion,</b> deletion and insertion. The proposed coding scheme is based on a combination of LDPC coding and convolution coding. A comparative analysis of the proposed combined coding scheme and a coding scheme containing only LDPC coder is performed. Both of the two schemes have the same coding rate. Experiments were carried out on two models of communication channels at different probability values of <b>bit</b> <b>inversion</b> and deletion. The first model allows only random <b>bit</b> <b>inversion,</b> while the other allows both random <b>bit</b> <b>inversion</b> and deletion. In the experiments research and analysis of the delay decoding of convolutional coder is performed and the results of these experimental studies demonstrate the feasibility of planted coding scheme to improve the efficiency of data recovery that is transmitted over a communication channel with noises which allow random <b>bit</b> <b>inversion</b> and deletion without decreasing the coding rate...|$|R
40|$|In {{order to}} create a fault {{tolerant}} system, very clear requirements should be prepared and all possible fault events should be analyzed. It can be properly made by using any of system modeling formalism. In this work <b>alternating</b> <b>bit</b> protocol system was chosen to formalize and analyzed in fault tolerant software aspects. <b>Alternating</b> <b>bit</b> protocol was modified in two ways – it’s functionality under perfect circumstances and with added faults, {{in order to make the}} system fault tolerant. These both cases were formalized by PLA and DEVS formalization methods. After the research of different formalisms and adjusting FDEVS to <b>alternating</b> <b>bit</b> protocol, FPLA formalization method was created...|$|R
40|$|A novel {{implementation}} of code based cryptography (Cryptocoding) technique for multi-layer key distribution scheme is presented. VLSI chip {{is designed for}} storing information on generation of round keys. New algorithm is developed for reduced key size with optimal performance. Error Control Algorithm is employed for both generation of round keys and diffusion of non-linearity among them. Two new functions for <b>bit</b> <b>inversion</b> and its reversal are developed for cryptocoding. Probability of retrieving original key from any other round keys is reduced by diffusing nonlinear selective <b>bit</b> <b>inversions</b> on round keys. Randomized selective <b>bit</b> <b>inversions</b> are done on equal length of key bits by Round Constant Feedback Shift Register within the error correction limits of chosen code. Complexity of retrieving the original key from any other round keys is increased by optimal hardware usage. Proposed design is simulated and synthesized using VHDL coding for Spartan 3 E FPGA and results are shown. Comparative analysis is done between 128 bit Advanced Encryption Standard round keys and proposed round keys for showing security strength of proposed algorithm. This paper concludes that chip based multi-layer key distribution of proposed algorithm is an enhanced solution to the existing threats on cryptography algorithms...|$|R
40|$|In this paper, {{the theory}} of fair action systems {{is used in the}} {{specification}} and development of the <b>Alternating</b> <b>Bit</b> Protocol. A version of the Movers Theorem for fair action systems is proved, which permits the interleaving of actions of one action system within another. This Movers Theorem is applied repeatedly {{in the development of the}} <b>Alternating</b> <b>Bit</b> Protocol. 1 Introduction Our aim is to illustrate the usefulness of {{the theory of}} fair action systems presented in [Wab 96 a] through the development of the <b>Alternating</b> <b>Bit</b> Protocol. Particularly by addressing fairness in our approach to the verification of programs, will be able to develop, entirely within the formalism, designs whose infinitary behaviour previously required ad hoc reasoning. The Movers Theorem provides support for introducing concurrency into a development by identifying conditions under which the actions of an iteration executed atomically as a single statement within an action system can be interleaved with their ne [...] ...|$|R
40|$|International Telemetering Conference Proceedings / October 14 - 16, 1975 / Sheraton Inn, Silver Spring, MarylandConventional {{burst error}} {{correction}} techniques for (n,k) cyclic block codes cannot {{cope with the}} presence of bit slippages that frequently occur in conjunction with burst errors of the <b>bit</b> <b>inversion</b> variety. A technique is described to enable the correction of an (n,k) cyclic code subjected to a noise disturbance consisting of an arbitrary number of both bit deletions and <b>bit</b> <b>inversions</b> contained within a single error burst. An efficient implementation of a Burst/Deletion Correction Decoder is presented. Although bit insertion correction is conceptually similar to that of bit deletions, the decoder implementation for combined insertion and inversion correction within a burst is much more cumbersome. The probabilities of false correction are analyzed...|$|R
40|$|In {{this note}} some {{struggles with the}} sliding window {{protocol}} and the special case known as the <b>alternating</b> <b>bit</b> protocol, are reported. We try to give a correctness proof, and discover that we cannot do so {{for one of the}} versions of the sliding window protocol. One may either require channels that satisfy stronger assumptions or, as we will do, adapt the protocol and stick to the weaker assumptions. The <b>alternating</b> <b>bit</b> protocol {{can be traced back to}} [Bartlett]. We have been unable to trace back the origins of the sliding window protocols; [Stenning] discusses one of the versions and lists networks using related protocols...|$|R
50|$|In telecommunications, <b>bit</b> <b>inversion</b> {{means the}} {{changing}} of the state of a bit to the opposite state, i.e. {{the changing of}} a 0 bit to 1 or of a 1 bit to 0. It also refers to the changing of a state representing a given bit to the opposite state.|$|R
50|$|There {{exists a}} class of {{universal}} computers with one instruction based on bit manipulation such as bit copying or <b>bit</b> <b>inversion.</b> Since their memory model {{is the same as}} the memory structure used in real computers, those bit manipulation machines are equivalent to real computers rather than to Turing machines.|$|R
5000|$|If <b>alternating</b> <b>bits</b> of both {{sequences}} are inverted {{they remain}} complementary. In general for arbitrary complex sequences if both sequences are multiplied by ej&pi;kn/N (where k {{is a constant}} and n is the time index) they remain complementary; ...|$|R
50|$|Bounded Retransmission Protocol is {{a variant}} of the <b>alternating</b> <b>bit</b> {{protocol}} introduced by Philips. The service it delivers is to transfer in a reliable manner, if possible, large files (sequence of data of arbitrary length) from a sender to a receiver.|$|R
40|$|A {{version of}} the <b>Alternating</b> <b>Bit</b> Protocol is {{verified}} by means of Process Algebra. To avoid a combinatorial explosion, a notion of "modules" is introduced and the protocol is divided in two such modules. A method is developed for verifying conglomerates of modules and applied to the motivating example...|$|R
40|$|AbstractIn {{wireless}} systems, {{the communication}} mechanism combines features of broadcast, synchrony, and asynchrony. We develop an operational semantics for a calculus of wireless systems. We present different Reduction Semantics and a Labelled Transition Semantics and prove correspondence results between them. Finally, we apply CWS to the modelling of the <b>Alternating</b> <b>Bit</b> Protocol, and prove a simple correctness result {{as an example}} of the kind of properties that can be formalized in this framework. A major goal of the semantics is to describe the forms of interference among the activities of processes that are peculiar of wireless systems. Such interference occurs when a location is simultaneously reached by two transmissions. The Reduction Semantics differ on how information about the active transmissions is managed. We use the calculus to describe and analyse a few properties of a version of the <b>Alternating</b> <b>Bit</b> Protocol...|$|R
40|$|We {{present an}} {{algebraic}} language for {{the description of}} probabilistic and non-deterministic processes, which allows us to evaluate performance indexes {{as well as to}} check some temporal requirements: ROSA (Reasoning On Stochastic Algebras). As application, we analyse the <b>Alternating</b> <b>Bit</b> Protocol obtaining the average time to send a message, considering that channels may fail with a known probability...|$|R
40|$|We {{present a}} process algebra with conditionally {{distributed}} discrete-time delays and generally-distributed stochastic delays. The treatment allows for expansion laws for the parallel composition and the maximal progress operator. The approach {{is illustrated by}} a specification of the concurrent <b>alternating</b> <b>bit</b> protocol with generally-distributed unreliable channels in the language χ. We compare performance analysis using timed probabilistic reward graphs and discrete-event simulation. 1...|$|R
50|$|<b>Alternating</b> <b>bit</b> {{protocol}} (ABP) is {{a simple}} network protocol operating at the data link layer that retransmits lost or corrupted messages using FIFO semantics. It {{can be seen as}} a special case of a sliding window protocol where a simple timer restricts the order of messages to ensure receivers send messages in turn while using a window of 1 bit.|$|R
40|$|We {{illustrate}} {{an application}} of the integrated approach for modeling and analyzing concurrent systems proposed in [4]. The case study concerns the <b>alternating</b> <b>bit</b> protocol. The protocol is specified {{by means of a}} set of terms of the stochastic process algebra EMPA, and then studied from the functional and the performance point of view after constructing the semantic models associated with the terms...|$|R
40|$|We {{introduce}} typed combinatory process algebra, {{a system}} combining process algebra with types and combinators. We describe its syntax and semantics, and {{by way of}} example, verify within this framework the Simple <b>Alternating</b> <b>Bit</b> Protocol. Key Words & Phrases: protocol verification, process algebra, typed combinatory logic. 1991 Mathematics Subject Classification: 69 C 20, 69 M 10, 03 B 15, 03 B 40. ...|$|R
40|$|Abstract. We {{present a}} process algebra with conditionally {{distributed}} discrete-time delays and generally-distributed stochastic delays. The treatment allows for expansion laws for the parallel composition and the maximal progress operator. The approach {{is illustrated by}} a specification of the Concurrent <b>Alternating</b> <b>Bit</b> Protocol with unreliable generallydistributed channels in the language χ. We compare performance analysis using timed probabilistic reward graphs and discrete-event simulation. ...|$|R
40|$|We {{report on}} a formal {{verification}} of the <b>Alternating</b> <b>Bit</b> Protocol (ABP) in the Calculus of Constructions. We outline a semi-formal correctness proof of the ABP with sufficient detail to be formalised. Thereafter we show by examples how the formalised proof has been verified by the automated proof checker Coq. This {{is part of an}} ongoing project aiming at the mechanisation of reasoning in (extensions of) process algebra, which we think important for the fruitful application of process algebra to concurrent systems. Key Words & Phrases: protocol verification, process algebra, typed lambda calculi. 1985 Mathematics Subject Classification: 68 B 10. 1987 CR Categories: D. 2. 4, D. 4. 5, F. 3. 1. 1 Introduction We {{report on a}} formal verification of the <b>Alternating</b> <b>Bit</b> Protocol [4] in the Calculus of Constructions, as part of an ongoing project aiming at the mechanisation of reasoning in (extensions of) process algebra. Formal verification distinguishes itself from verification in the usual sense [...] ...|$|R
40|$|We {{introduce}} typed combinatory process algebra, {{a system}} combining process algebra with types and combinators. We describe its syntax and semantics, and {{by way of}} example, verify within this framework the Simple <b>Alternating</b> <b>Bit</b> Protocol. Key Words & Phrases: protocol verification, process algebra, typed combinatory logic. 1991 Mathematics Subject Classification: 69 C 20, 69 M 10, 03 B 15, 03 B 40. Note: The first author acknowledges the support of ESPRIT Basic Research Action CONFER no. 6454. Contents 1 Introduction 1 2 Types and combinators 2 3 Combinatory process algebra 5 4 A working example: the Simple <b>Alternating</b> <b>Bit</b> Protocol 11 5 Semantical issues 23 6 State combinators 25 1 Introduction System specification and verification in process algebra always combines data structuring (e. g. using abstract data types) and control structuring which is done {{by means of the}} primitives of a suitable process algebra. There are several languages that link a notation suggested by process algebra to [...] ...|$|R
40|$|The <b>Alternating</b> <b>Bit</b> Protocol {{has been}} modeled via a straighforward {{application}} of the Gypsy methodology. A safety property was stated for its service specification and a procedural protocol specification was written using Gypsy procedure definitions. Mechanical verification was carried out, including proofs of the supporting lemmas. A unique aspect of this verification effort is the cooperative proof strategy that was employed, making use of two separate verification systems. The combined capabilities of both the Gypsy system and the Affirm system were utilized to achieve this result. 2 1. Introduction The world has yet another verification of the <b>Alternating</b> <b>Bit</b> Protocol. A brief description of this latest addition is presented. The protocol was modeled as an abstract program using the Gypsy verification methodology. A fully mechanical proof of a safety property was obtained. What is perhaps more interesting is that the proof was performed with the combined help of two separate ver [...] ...|$|R
40|$|In {{this paper}} {{we use a}} probabilistic-timed version of Lotos (PTLotos) for specifying and verifying the <b>Alternating</b> <b>Bit</b> Protocol (ABP). First, we present the {{language}} which is an upward compatible version of Lotos where some new operators to deal with time and probabilistic features have been included. We give an operational semantics, where {{there are two kinds}} of transitions: probabilistic transitions and timed transitions. Transitions of the first kind are associated with the events that a behavior expression can execute, while timed transitions deal with time evolution. From this operational semantics we define a testing semantics, where a process passes a test with a probability in a period of time, and two processes are intended to be equivalent if they pass all the tests with the same probability for any time. In the second part of the paper, we use PTLotos in order to specify the <b>Alternating</b> <b>Bit</b> Protocol. The ABP is a simple communication protocol which provides an error free co [...] ...|$|R
40|$|We {{consider}} abstraction in probabilistic process algebra. The process algebra can {{be employed}} for specifying processes that exhibit both probabilistic and non-deterministic choices in their behaviour. We give a set of axioms that completely axiomatises the branching bisimulation for the strictly alternating probabilistic graph model. In addition, several recursive verification rules are identified, allowing us to remove redundant internal activity. Using the axioms and the verification rules, we have successfully conducted a verification of the Concurrent <b>Alternating</b> <b>Bit</b> Protocol. This is a simple communication protocol, slightly more ‘sophisticated’ than the well-known <b>Alternating</b> <b>Bit</b> Protocol. As channels are lossy, sending continuous streams of data through the channels is a method to overcome this possible loss of data. This instigates a considerable level of parallelism (parallel activities) and as such requires more complex techniques for proving the protocol correct. Using our process algebra we show that after abstraction of internal activity, the protocol behaves as a buffer...|$|R
40|$|Recently, {{outstanding}} {{results have}} been achieved in the formal verification of concurrent systems by model checking techniques. In this paper we report our experience with SMV, a symbolic model verifier, applied to a communication protocol, the <b>alternating</b> <b>bit</b> protocol. We investigated different approaches of modeling the <b>alternating</b> <b>bit</b> protocol in SMV. We describe the problems encountered because of the restrictions of SMV. As a consequence, we call for a more general language for model checking, which both overcomes these disadvantages of SMV and enhances the possibility of optimizations, and more specific input languages on top of it, easing the application of model checking for the end user. Supported by DFG Vo 287 / 5 - 2 1 1 Introduction Model checking [Clarke et al., 1993] has been successfully applied to the verification of large and complex systems. This has been made possible mainly {{by the introduction of}} OBDD based techniques [Bryant, 1986]. How model checking functions in [...] ...|$|R
40|$|<b>Alternating</b> <b>bit</b> {{protocol}} {{had been}} invented more than 3 decades ago for reliable full-duplex data transmission over half-duplex telephone lines. The {{objective of this}} paper is to formally model the protocol in order to better understand its principal idea, and extend it to more general problems in decentralized supervisory control of discrete-even systems. Index Terms discrete-event systems, protocol design, decentralized control, supervisory control. I...|$|R
40|$|State {{explosion}} is {{the primary}} obstacle to practical application of reachability analysis techniques for concurrent systems. State explosion can be substantially controlled by using process algebra to achieve compositional (divide-and-conquer) analysis. A prototype tool incorporating process algebra is described. The promise and problems of the approach are illustrated by applying the tool to an example that incorporates the <b>alternating</b> <b>bit</b> protocol as a module...|$|R
40|$|Abstract: In this paper, we use {{supervisory}} control techniques {{to design a}} protocol converter, which avoids divergence in a communication system. A typical application is to design gateways that interface heterogeneous computer networks while minimizing the communication time with the involved parties. As an example, we design a divergence-free converter that interfaces an <b>alternating</b> <b>bit</b> sender and a nonsequenced receiver, and we implement the converter as an asynchronous circuit. 1...|$|R
40|$|Following {{condensed}} introductions {{to classical}} and behavioral algebraic specification, this paper discusses the verification of behavioral properties using BOBJ, especially its implementation of conditional circular coinductive rewriting with case analysis. This formal method is then applied to proving correctness of the <b>alternating</b> <b>bit</b> protocol, {{in one of}} its less trivial versions. We have tried to minimize mathematics in the exposition, in part by giving concrete illustrations using the BOBJ system. 1...|$|R
40|$|Introduction In this note, we give a {{correctness}} {{proof of}} the sliding window protocol. We discuss both safety and liveness properties. We specialize our program to window size 1 and obtain the <b>alternating</b> <b>bit</b> protocol. The <b>alternating</b> <b>bit</b> protocol {{can be traced back}} to [2]. We have been unable to trace back the origins of the sliding window protocols; [7] discusses one of the versions and lists networks using related protocols. 2 A faulty channel A communication protocol is used to provide reliable transmission of data over a faulty communication channel that garbles, duplicates, or loses data. We consider the case in which data is transmitted in one direction over the faulty channel, and we assume the presence of a channel in the opposite direction in JAN 173 - 1 order to be able to communicate the need for retransmission of a message. The latter channel is also faulty. No assumptions on the slack of the faulty or of the fault-free channel are to be made. It i...|$|R
50|$|G.711 {{is unclear}} {{about how to}} code the values at the limit of a range (e.g. whether +31 codes to 0xEF or 0xF0).However, G.191 {{provides}} example code in the C language for a μ-law encoder. The difference between {{the positive and negative}} ranges, e.g. the negative range corresponding to +30 to +1 is −31 to −2. This is accounted for by the use of 1's complement (simple <b>bit</b> <b>inversion)</b> rather than 2's complement to convert a negative value to a positive value during encoding.|$|R
40|$|In this paper, we {{analyze the}} error {{recovery}} performance of variable length codes (VLCs) transmitted over binary symmetric channel (BSC). Simple expressions for the exact mean symbol error rate (MSER) and the exact variance of symbol error rate (VSER) for any crossover probability p, are presented. We also {{prove that the}} mean error propagation length (MEPL) derived for single <b>bit</b> <b>inversion</b> error case is a scaled value of MSER when p, tends to zero. Comparisons with simulations demonstrate {{the accuracy of the}} MSER and VSER expressions...|$|R
40|$|We {{propose a}} {{combination}} of model checking and interactive theorem proving where the theorem prover is used to represent finite and infinite state systems, reason about them compositionally and reduce them to small finite systems by verified abstractions. As an example we verify {{a version of the}} <b>Alternating</b> <b>Bit</b> Protocol with unbounded lossy and duplicating channels: the channels are abstracted by interactive proof and the resulting finite state system is model checked...|$|R
40|$|AORTA is an {{implementable}} timed process algebra {{which has}} been proposed as a design language for hard real-time systems. In this paper we show how AORTA {{can be used to}} design and model timed protocols, illustrated by the <b>alternating</b> <b>bit</b> protocol. We also describe tools which have been developed for simulation, verification and automatic implementation of AORTA systems, and outline a relationship between the formal models which are verified and the code which is generated...|$|R
40|$|In {{this paper}} we show how {{symbolic}} probabilistic analysis techniques for finite state {{systems can be}} successfully used to perform quantitative verification of properties and performance evaluation of communication protocols and, more in general, of entire protocol stacks and complete communication networks. In particular, we first outline our approach {{to the problem of}} verifying communication protocols, and then we present an application example of the proposed methodology to the simple <b>Alternating</b> <b>Bit</b> Protoco...|$|R
