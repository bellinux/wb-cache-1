18|50|Public
40|$|International audienceWe perform {{continuous}} {{collision detection}} (CCD) for articulated bodies where motion {{is governed by}} an adaptive dynamics simulation. Our algorithm {{is based on a}} novel hierarchical set of transforms that represent the kinematics of an articulated body recursively, as described by an <b>assembly</b> <b>tree.</b> The performance of our CCD algorithm significantly improves as the number of active degrees of freedom in the simulation decreases...|$|E
40|$|We are {{concerned}} with the memory usage of sparse direct solvers. We particula- rly focus on the influence of state-of-the-art sparse matrix reordering techniques on the dynamic memory usage of a multifrontal solver, MUMPS, and present algorithms to modify the <b>assembly</b> <b>tree</b> traversal that aim at reducing the memory usage. A large number of experiments show the interest of the approach for sequential executions...|$|E
40|$|We are {{interested}} in the memory usage of sparse direct solvers. We particularl- y focus on the parallel multifrontal scheme. In the multifrontal approach two kinds of memory can be distinguished: a static one which corresponds to the result of the factorization process (ie, the factors), and a dynamic or active one, usually handled by a stack mechanism, which corresponds to the working space of the factorization process. For some problems the stack size may be as large as and even greater than the final factors. The size of the stack depends on the <b>assembly</b> <b>tree</b> and on how the computation is distributed. We present an extensive study of the impact of state-of-the-art sparse matrix reordering techniques on the <b>assembly</b> <b>tree</b> and on the memory occupation of the solver in both sequential and parallel executions. The main observation {{of this study is that}} the stack of parallel multifrontal solvers does not scale well if a dynamic scheduling strategy based only on the balance of the workload is used...|$|E
30|$|These {{findings}} {{revealed that}} the environmental filtering {{plays a significant role}} in <b>assembly</b> of <b>tree</b> communities in the biologically diverse tropical forests in the Western Ghats biodiversity hotspot.|$|R
50|$|Unique <b>assembly</b> of <b>trees</b> {{and bushes}} from the {{different}} {{countries of the world}} (it is more than 150 kinds), landed in the middle of 19th century in V.N.Polivanova's manor. It was created as nursery of coniferous breeds for protection of farmland against sandy drifts.|$|R
40|$|In {{our current}} work, we form a {{manufacturing}} system using four matrices representing the job sequences and resources required to assemble various products. We convert traditional manufacturing <b>assembly</b> <b>trees</b> into plan operators which our machine planner uses to generate two matrices describing job sequencing. With {{a combination of}} ideas from analogical and hierarchical planning, our planner uses a novel approach to improve planning efficiency. The remaining two matrices describe resource usage; we form them by combining an initial assumption of dedicated resources with explicit resource assignment. In addition, we can succinctly incorporate alternate plans into a single matrix set. This research {{was supported in part}} by the National Science Foundation, under grant GER- 9355110. y wharris@cse. uta. edu, Department of Computer Science and Engineering, University of Texas at Arlington, Arlington, TX 76019 z cook@cse. uta. edu, Department of Computer Science and Engineering, [...] ...|$|R
40|$|We {{present a}} novel {{algorithm}} to perform continuous collision detection (CCD) for articulated bodies when {{the motion of}} bodies is governed by an adaptive dynamics simulation. The algorithm {{is based on a}} novel hierarchical set of transforms to represent the kinematics of an articulated body recursively described by an <b>assembly</b> <b>tree.</b> The performance of our CCD algorithm significantly improves as the number of active degrees of freedom in the adaptive simulation of articulated bodies decreases...|$|E
40|$|Abstract. A {{new model}} {{description}} was proposed which {{is divided into}} heavy and light model for reducing {{the pressure of the}} network transfer which is constructed by XML files. The model description includes the production <b>assembly</b> <b>tree</b> information, part feature information and geometry information. So it can satisfy the request of browse, query, and annotation with the model. At the same time, model description is compressed by several methods which avoid the designers from the long time waiting...|$|E
40|$|Motivated by the {{question}} of how macromolecules assemble, the notion of an <b>assembly</b> <b>tree</b> of a graph is introduced. Given a graph G, the paper is concerned with enumerating the number of assembly trees of G, a problem that applies to the macromolecular assembly problem. Explicit formulas or generating functions are provided for the number of assembly trees of several families of graphs, in particular for what we call (H, Ï†) -graphs. In some natural special cases, we apply powerful recent results of Zeilberger and Apagodu on multivariate generating functions, and results of Wimp and Zeilberger, to deduce recurrence relations and very precise asymptotic formulas for the number of assembly trees of the complete bipartite graphs Kn,n and the complete tripartite graphs Kn,n,n. Future directions for reseach, as well as open questions, are suggested. ...|$|E
40|$|We {{integrate}} {{an ordinary}} planner into a manufacturing system {{by showing that}} the <b>assembly</b> <b>trees</b> used by manufacturers can be converted into domain operators and that the operator sequence formed by the planner can be converted into a set of matrices used by the manufacturing system. This allows manufacturers to continue to use their existing representations where possible. We form additional resource matrices based on the planner's output which an existing dispatching system uses to reserve machines and avoid deadlock. We also show how our planner and matrix notation can efficiently implement Manufacturing Resource Planning. In many cases, our MRP system can seamlessly integrate limited production capacity without manager intervention. Introduction Previous research has developed a real-time control system using matrices to describe the sequence of operations and resources needed to construct parts and subassemblies (Tacconi & Lewis 1997). We have added AI planning technology to this [...] ...|$|R
40|$|In this paper, {{we provide}} tools for {{integrating}} machine planning and manufacturing. Specifically, we show how <b>assembly</b> <b>trees</b> can be coded into operators for machine planners and how machine planners can represent flow-lines, assembly, and job-shop choices. We provide a polynomial-time algorithm for succinctly combining multiple plans; the resulting plan {{can be expressed}} as four matrices that are equivalent This research {{was supported in part}} by the National Science Foundation, under grant GER- 9355110. y wharris@cse. uta. edu, Department of Computer Science and Engineering, University of Texas at Arlington, Arlington, TX 76019 z flewis@arri. uta. edu, Automation & Robotics Research Institute, 7300 Jack Newell Blvd. South, Fort Worth, TX 76118 x cook@cse. uta. edu, Department of Computer Science and Engineering, University of Texas at Arlington, Arlington, TX 76019 1 to a Petri Net. We also provide a dynamic supervisory controller which can execute a single plan or switch between m [...] ...|$|R
40|$|While machine {{planning}} {{has attracted}} great interest among researchers, it has seldom been used outside research labs. One impediment to wide-spread use is that existing planners are {{often difficult to}} integrate with other parts of a manufacturing system. We address this problem by showing how <b>assembly</b> <b>trees</b> (constructs often used by factories identifying how to construct an object) can easily be converted into HTN operators for our machine planner. We also demonstrate that our plans can be easily converted to a Petri-Net or matrix representation which ordinary discrete-event controllers can manipulate. We view our planner as one portion of a complete control system. We also demonstrate how our system can combine multiple alternatives into a single representation. Finally, we show that the combined representation can be converted back into a more conventional plan representation, allowing machine planners to compactly reason about alternate courses of action. keywords: Machine planning, [...] ...|$|R
40|$|Sparse matrix {{factorization}} algorithms {{are typically}} characterized by irregular memory access patterns that limit their performance on parallel-vector supercomputers. For symmetric problems, {{methods such as}} the multifrontal method replace irregular operations with dense matrix kernels. However, no efficient LU factorization algorithm based primarily on dense matrix kernels exists for matrices whose pattern is very unsymmetric. A new unsymmetric-pattern multifrontal method based on dense matrix kernels is presented. Frontal matrices are rectangular instead of square, and the <b>assembly</b> <b>tree</b> is replaced with a directed acyclic graph. As in the classical multifrontal method, advantage is taken of repetitive structure in the matrix by amalgamating nodes in the directed acyclic graph, giving it high performance on parallel-vector supercomputers. The performance of three sequential versions is compared with the classical multifrontal method and other unsymmetric solvers on a Cray YM [...] ...|$|E
40|$|Virtual {{assembly}} {{technology is}} applied to check the reasonability of product structure and the correctness of product assembly procedure in the virtual reality environment. In order to realize the assembly information acquirement, assembly sequence planning and assembly procedure checking, a virtual assembly method based on CAD model reuse is put forward. The layered <b>assembly</b> <b>tree</b> traveling algorithm is used to obtain the assembly levels, assembly relations and assembly constraints. The assembly matrix analysis method {{is applied to}} obtain assembly sequence of component and the final assembly sequence is compounded of assembly sequences of all components top-down. The imaginary projected profile sweeping method is proposed to check interferences among parts and it converts the dynamical assembly checking to the static. The proposed method also provides assembly information for other virtual reality systems. Finally, an application on wind turbine generator system verifies {{the effectiveness of this}} method...|$|E
40|$|We {{describe}} {{the design and}} implementation of a parallel QR decomposition algorithm for a large sparse matrix A. The algorithm {{is based on the}} multifrontal approach and makes use of Householder transformations. The tasks are distributed among processors according to an <b>assembly</b> <b>tree</b> which is built from the symbolic factorization of the matrix A T A. Uniprocessor issues are first addressed. We then discuss the multiprocessor implementation of the method. Parallelization of both the factorization phase and the solve phase are considered. We use relaxation of the sparsity structure of both the original matrix and the frontal matrices to improve the performance. We show that, in this case, the use of Level 3 BLAS can lead to very significant performance improvement. The eight processor Alliant FX/ 80 is used to illustrate our discussion. 1 ENSEEIHT-IRIT (Toulouse, France), amestoy@enseeiht. fr. 2 CERFACS (Toulouse, France) also Rutherford App leton Lab., (England), duff@cerfac [...] ...|$|E
5000|$|Consequently, the {{committee}} holds {{a variety of}} events throughout the school year {{to raise awareness of}} numerous environmental issues. Its annual [...] "Earth Week" [...] includes fun and informative events such as a [...] "No Car Day", [...] "No Trash Day" [...] and a [...] "No Lights Day", as well as <b>assemblies,</b> <b>tree</b> plantings, organic baking sessions and after-school screenings of environmental documentaries. During the 2006-2007 school year, it invited guest speakers from Greenpeace and the Sierra Club of Canada to come and talk about climate change, as well as the need to modify our daily habits to diminish our impact on the environment. During the 2008-2009 school year, members of {{the committee}} chose to present at these assemblies as opposed to inviting guest speakers; the assemblies during Earth Week therefore showcased all that committee members have done, and plan to do in the coming years, to make Royal West Academy more environmentally-friendly.|$|R
40|$|The goal of {{assembly}} planning consists in generating feasible sequences {{to assemble a}} product and selecting an efficient assembly sequence from amongst these. This paper describes an original ordering genetic algorithm (OGA) developed to solve this problem. The developed approach permits the generation of <b>assembly</b> <b>trees</b> for a mechanical product. The algorithm is based on three main ideas. First, a mapping transforms any studied assembly plan into a valid one using 'precedence values' changing through the sequence, so that an invalid sequence will never be proposed. Secondly, to identify subsets, trace is kept all along the sequence of the components membership {{to a set of}} parts. Finally, the individuals of the OGA are compared with each other using a multi-criteria decision aided method called PROMETHEE II. The use of this method avoids aggregating several technical criteria into a unique fitness value. The proposed algorithm, illustrated through the simple example of a mouse device, has been applied on an industrial signalling relay made of 34 parts. SCOPUS: ar. jinfo:eu-repo/semantics/publishe...|$|R
30|$|The {{deciduous}} leaf phenological trait {{has repeatedly}} evolved among multiple distantly related lineages. Tree communities in dry deciduous forests were phylogenetically clustered and showed a low range and variance of functional traits related to light harvesting, reproduction, and growth suggesting niche-based {{processes such as}} environmental filtering {{play a vital role}} in the <b>assembly</b> of <b>tree</b> communities in these forests. The external factors such as human-mediated disturbance also significantly, but to a lesser extent, influences the species and phylogenetic turnover.|$|R
40|$|Abstract â€” Using a {{patented}} matrix formulation, a Discrete Event (DE) controller {{is designed}} for a manufacturing cell. The DE controller can directly be implemented from standard manufacturing tools such as the Bill of Materials or the <b>assembly</b> <b>tree.</b> The matrices also make it straightforward to actually implement the DE controller for sequencing the jobs and assigning the resources. We use virtual places to interact with our machine resources to control and supervise the DE system as a transient timed place Petri Net (PN) system. This modified PN together with marking transition equation provides a complete dynamical description of a Discrete Event System (DES). In this paper, we include to our DE supervisor several new structures that contain all decision making attributes for each part and resource jobs in the Manufacturing processes. The versatility of this DE controller permits implementing different methodologies for decision making and conflict resolution, including artificial intelligence techniques, as well as optimization of the resource assignment and part throughput. This paper shows an example of such versatility included in the supervisor by showing a hybrid decision making development...|$|E
40|$|Traditionally, the {{development}} of mechatronic products starts with the mechanical design. Later electronic components and program logic for the product are added. This work proposes an improved interdisciplinary concurrent product development process with an extended function structure, starting from the conceptual design phase. The new methodology {{is based on the}} German design guideline VDI 2221 [1]. In this work transition conditions, time aspects and logic flow are added to the normal function structure. An example shows how to use the extended function structure. The extended function structure is used to derive the initial logic used for {{the development}} of the PLC program controlling the machine later on. Since the extended function structure also covers the traditional information, it can still be used when building the <b>assembly</b> <b>tree.</b> By adding more information in the neutral function structure, the same information can be used for the mechanical design as well as for the control logic. The interdisciplinary communication and documentation among the engineers will be improved and errors in the concept will be detected earlier...|$|E
40|$|The use of Automated Multilevel Substructuring (AMLS), for the {{analysis}} of constantly bigger models created the need for the extension of the method to systems of parallel processing. The main characteristic of the method is that for an efficient implementation a number of choices have to be made regarding the algorithms used in the intermediate steps. In this dissertation a fully distributed version of the general AMLS methodology has been designed and implemented (called MLDS) and the factors which influence the efficiency of the algorithm have been analyzed. For this purpose, the solution of static problems and symmetric eigenproblems has been studied as well. Initially, the Cholesky factorization of dense matrices and the multifrontal method for the factorization of sparse matrices were presented. For the parallelization of the latter a static weighted subtree to subcube mapping has been used. As the number of processors increases the efficiency decreases due to the growth of the volume of communication and the load imbalance because of the static mapping. Afterwards, the Lanczos method was described and two methods of its parallelization were discussed. With the first method, the frequency interval of interest is divided in subintervals each of which is processed by one processor. Although, no communication between the processors is required, the efficiency is limited because of the different calculation cost if each subinterval. In addition, the distributed execution usually involves a greater number of numerical operations than the corresponding serial one. With the second method, the most time consuming operations of the solution of static problems and orthogonalization are individually parallelized. The efficiency is low because of the high cost of communication. Finally, the MLDS algorithm was presented. First the identification of the mathematical substructures and the creation of the <b>assembly</b> <b>tree</b> were discussed. Then the parallelization of the intermediate steps was described. Briefly, all the processors are divided in groups, except for one, which is called main global process. Each substructure is assigned to a group. The purpose of the main global process is to prepare, send and collect the data involved in the various staged of the processing of each substructure. Generally, the accuracy and efficiency of the algorithm depends on the number of levels of the <b>assembly</b> <b>tree</b> and the cut-off frequency of the individual eigenproblems. ...|$|E
40|$|Abstract: We {{study the}} {{complexity}} of traversing tree-shaped workflows whose tasks require large I/O files. We target a heterogeneous architecture with two resource types, each with a different memory, such as a multicore node equipped with a dedicated accelerator (FPGA or GPU). The tasks in the workflow are colored according to their type and can be processed if all their input and output files {{can be stored in}} the corresponding memory. The amount of used memory of each type at a given execution step strongly depends upon the ordering in which the tasks are executed, and upon when communications between both memories are scheduled. The objective is to determine an efficient traversal that minimizes the maximum amount of memory of each type needed to traverse the whole tree. In this paper, we establish {{the complexity of}} this two-memory scheduling problem, and provide inapproximability results. In addition, we design several heuristics, based on both post-order and general traversals, and we evaluate them on a comprehensive set of tree graphs, including random trees as well as <b>assembly</b> <b>trees</b> arising in the context of sparse matrix factorizations...|$|R
50|$|On a small hillock in the town, {{stands the}} Meeting House {{and the famous}} Tree of Gernika. By ancient tradition, Basques, and indeed other peoples in Medieval Europe, held <b>assemblies</b> under a <b>tree,</b> usually an oak, to discuss matters {{affecting}} the community.|$|R
40|$|This Acceptance Test Procedure (ATP) will {{document}} the satisfactory {{operation of the}} corrosion probe <b>tree</b> <b>assembly</b> destined for installation into tank 241 -AN- 105. This ATP will be performed by the manufacturer prior to delivery to the site. The objective of this procedure is to demonstrate and {{document the}} acceptance of the corrosion probe <b>tree</b> <b>assembly</b> to be installed into tank 241 -AN- 105. The test will consist of a pressure test to verify leak tightness of the probe tree body, a continuity test of the probe tree wiring, a test of the high level detector wiring, a test of the operation of the Type K thermocouples along the probe body, and verification of operation of corrosion monitoring computer and instrumentation...|$|R
40|$|The {{application}} of augmented reality (AR) technology for assembly guidance {{is a novel}} approach in the traditional manufacturing domain. In this paper, we propose an AR approach for assembly guidance using a virtual interactive tool that is intuitive and easy to use. The virtual interactive tool, termed the Virtual Interaction Panel (VirIP), involves two tasks: {{the design of the}} VirIPs and the real-time tracking of an interaction pen using a Restricted Coulomb Energy (RCE) neural network. The VirIP includes virtual buttons, which have meaningful assembly information that can be activated by an interaction pen during the assembly process. A visual <b>assembly</b> <b>tree</b> structure (VATS) is used for information management and assembly instructions retrieval in this AR environment. VATS is a hierarchical tree structure that can be easily maintained via a visual interface. This paper describes a typical scenario for assembly guidance using VirIP and VATS. The main characteristic of the proposed AR system is the intuitive way in which an assembly operator can easily step through a pre-defined assembly plan/sequence without the need of any sensor schemes or markers attached on the assembly components. Singapore-MIT Alliance (SMA...|$|E
40|$|International audienceA {{number of}} {{modeling}} and simulation algorithms using internal coordinates rely on hierarchical representations of molecular systems. Given the potentially complex topologies of molecular systems, though, automatically generating such hierarchical decompositions may be difficult. In this article, we present a fast general algorithm for the complete construction of a hierarchical representation of a molecular system. This two-step algorithm treats the input molecular system as a graph in which vertices represent atoms or pseudo-atoms, and edges represent covalent bonds. The first step contracts all cycles in the input graph. The second step builds an <b>assembly</b> <b>tree</b> from the reduced graph. We analyze the complexity of this algorithm and show that {{the first step is}} linear in the number of edges in the input graph, whereas the second one is linear in the number of edges in the graph without cycles, but dependent on the branching factor of the molecular graph. We demonstrate the performance of our algorithm on a set of specifically tailored difficult cases as well as on a large subset of molecular graphs extracted from the protein data bank. In particular, we experimentally show that both steps behave linearly in the number of edges in the input graph (the branching factor is fixed for the second step). Finally, we demonstrate an application of our hierarchy construction algorithm to adaptive torsion-angle molecular mechanics...|$|E
40|$|Abstract. The rapid {{emergence}} of multicore machines {{has led to}} the need to design new algorithms that are efficient on these architectures. Here, we consider the solution of sparse symmetric positive-definite linear systems by Cholesky factorization. We were motivated by the successful division of the computation in the dense case into tasks on blocks and use of a task manager to exploit all the parallelism that is available between these tasks, whose dependencies may be represented by a directed acyclic graph (DAG). Our sparse algorithm is built on the <b>assembly</b> <b>tree</b> and subdivides the work at each node into tasks on blocks of the Cholesky factor. The dependencies between these tasks may again be represented by a DAG. To limit memory requirements, blocks are updated directly rather than through generated-element matrices. Our algorithm is implemented within a new efficient and portable solver HSL MA 87. It is written in Fortran 95 plus OpenMP and is available as part of the software library HSL. Using problems arising from a range of applications, we present experimental results that support our design choices and demonstrate that HSL MA 87 obtains good serial and parallel times on our 8 -core test machines. Comparisons are made with existing modern solvers and show that HSL MA 87 performs well, particularly in the case of very large problems...|$|E
40|$|Abstract. A product {{structure}} model for Rapid Product Design (RPD) is discussed. It {{is composed of}} <b>Assembly</b> Topology <b>Tree</b> (ATT) that describes the assembly relation between parts and the Part Topology Tree (PTT) that describe the geometry relation in a part, and it explains the constraint relations and the selection conditions between the components and parts. Product model class and its subclasses are built by Object-Oriented method to describe the structure and relation of a product and its components. At last an instance of the {{product structure}} model is introduced...|$|R
40|$|International audienceFactorizing sparse {{matrices}} using direct multi-frontal methods generates directed tree-shaped task graphs, where edges represent data dependency between tasks. This paper revisits {{the execution}} of tree-shaped task graphs using multiple processors that share a bounded memory. A task can only be executed if all its input and output data can fit into the memory. The key difficulty is to manage {{the order of the}} task executions so that we can achieve high parallelism while staying below the memory bound. In particular, because input data of unprocessed tasks must be kept in memory, a bad scheduling strategy might compromise the termination of the algorithm. In the single processor case, solutions that are guaranteed to be below a memory bound are known. The multi-processor case (when one tries to minimize the total completion time) {{has been shown to be}} NP-complete. We present in this paper a novel heuristic solution that has a low complexity and is guaranteed to complete the tree within a given memory bound. We compare our algorithm to state of the art strategies, and observe that on both actual execution trees and synthetic trees, we always perform better than these solutions, with average speedups between 1. 25 and 1. 45 on actual <b>assembly</b> <b>trees.</b> Moreover, we show that the overhead of our algorithm is negligible even on deep trees, and would allow its runtime execution...|$|R
40|$|Abstractâ€”We {{study the}} {{complexity}} of traversing tree-shaped workflows whose tasks require large I/O files. Such workflows typically arise in the multifrontal method of sparse matrix factorization. We target a classical two-level memory system, where the main memory is faster but smaller than the secondary memory. A task in the workflow can be processed if all its predecessors have been processed, and if its input and output files fit in the currently available main memory. The amount of available memory {{at a given time}} depends upon the ordering in which the tasks are executed. What is the minimum amount of main memory, over all postorder schemes, or over all possible traversals, that is needed for an in-core execution? We establish several complexity results that answer these questions. We propose a new, polynomial time, exact algorithm which runs faster than a reference algorithm. Next, we address the setting where the required memory renders a pure in-core solution unfeasible. In this setting, we ask the following question: what is the minimum amount of I/O that must be performed between the main memory and the secondary memory? We show that this latter problem is NP-hard, and propose efficient heuristics. All algorithms and heuristics are thoroughly evaluated on <b>assembly</b> <b>trees</b> arising in the context of sparse matrix factorizations. Keywords-Sparse matrix factorization, Multifrontal method...|$|R
40|$|A vital {{constituent}} of a {{virus is}} its protein shell, called the viral capsid, that encapsulates and hence provides {{protection for the}} viral genome. Assembly models are developed for viral capsids built from protein building blocks that can assume different local bonding structures in the capsid. This situation occurs, for example, for viruses in the family of Papovaviridae, which are linked to cancer and are hence of particular interest for the health sector. More specifically, the viral capsids of the (pseudo-) T = 7 particles in this family consist of pentamers that exhibit {{two different types of}} bonding structures. While this scenario cannot be described mathematically in terms of Casparâ€“Klug theory (Caspar D L D and Klug A 1962 Cold Spring Harbor Symp. Quant. Biol. 27 1), it can be modelled via tiling theory (Twarock R 2004 J. Theor. Biol. 226 477). The latter is used to encode the local bonding environment of the building blocks in a combinatorial structure, called the <b>assembly</b> <b>tree,</b> which is a basic ingredient in the derivation of assembly models for Papovaviridae {{along the lines of the}} equilibrium approach of Zlotnick (Zlotnick A 1994 J. Mol. Biol. 241 59). A phase space formalism is introduced to characterize the changes in the assembly pathways and intermediates triggered by the variations in the association energies characterizing the bonds between the building blocks in the capsid. Furthermore, the assembly pathways and concentrations of the statistically dominant assembly intermediates are determined. The example of Simian virus 40 is discussed in detail. ...|$|E
40|$|Graduation date: 2017 Assembly {{planning}} {{is a crucial}} task for every manufacturing product. In general, assembly operations consume more than 30 % of the total manufacturing time and cost. Therefore, any effort in optimizing assembly will {{have a significant impact}} on the economic success of manufacturing. Finding an optimal assembly plan by hand is tedious and perhaps impractical for the large models. This research introduces an automatic computational tool in automated assembly planning (AAP) to automatically transform a CAD assembly into a set of assembly instructions. The goal is to make this transformation with as little user commitment as possible. Thus, automation is applied on every detail of the work. The work has five main divisions: geometric reasoning, complex geometry detection, graph representation, AI Planning and postâ€“planning. To have the most general assembly planning tool, tessellation is considered as the representation of the input model. A revolutionary reasoning scheme is implemented to efficiently derive geometric and mating constraints from the tessellated models along with detection of complex geometries including fasteners, gears and springs. The mating information between assembly parts are stored in a liaison graph which is the starting point of an artificial intelligence planning procedure. Various graphâ€“based algorithms are implemented to generate feasible assembly candidates. The AI planning evaluates every assembly candidate with complex statistical models and produces multiple instructions in terms of a detailed <b>assembly</b> <b>tree</b> or called Treequence. In the postâ€“planning section, an optimization algorithm is applied on the generated treequence to find the optimal orientation of the subassemblies in the entire assembly process. A scheduling approach is also implemented to allocate the workers throughout the assembly tasks. The efforts of this PhD work can be visualized and edited by either a web-interface or IC. IDO virtual reality platform. The implemented tool can accommodate changes after a user has seen the result...|$|E
40|$|We {{present a}} distributed-memory {{parallel}} algorithm for 2 D visco-acoustic full-waveform inversion of wide-angle seismic data. Our code {{is written in}} fortran 90 and use MPI for parallelism. The algorithm was applied to real wide-angle data set recorded by 100 OBSs with a 1 -km spacing in the eastern-Nankai trough (Japan) to image the deep structure of the subduction zone. Full-waveform inversion is applied sequentially to discrete frequencies by proceeding from the low to the high frequencies. The inverse problem is solved with a classic gradient method. Full-waveform modeling is performed with a frequency-domain finite-difference method. In the frequency-domain, solving the wave equation requires resolution of a large unsymmetric system of linear equations. We use the massively parallel direct solver MUMPS ([URL] for distributed-memory computer to solve this system. The MUMPS solver {{is based on a}} multifrontal method for the parallel factorization. The MUMPS algorithm is subdivided in 3 main steps: a symbolic analysis step that performs re-ordering of the matrix coefficients to minimize the fill-in of the matrix during the subsequent factorization and an estimation of the <b>assembly</b> <b>tree</b> of the matrix. Second, the factorization is performed with dynamic scheduling to accomodate numerical pivoting and provides the LU factors distributed over all the processors. Third, the resolution is performed for multiple sources. To compute the gradient of the cost function, 2 simulations per shot are required (one to compute the forward wavefield and one to back-propagate residuals). The multi-source resolutions can be performed in parallel with MUMPS. In the end, each processor stores in core a sub-domain of all the solutions. These distributed solutions can be exploited to compute in parallel the gradient of the cost function. Since the gradient of the cost function is a weighted stack of the shot and residual solutions of MUMPS, each processor computes the corresponding sub-domain of the gradient. In the end, the gradient is centralized on the master processor using a collective communation. The gradient is scaled by the diagonal elements of the Hessian matrix. This scaling is computed only once per frequency before the first iteration of the inversion. Estimation of the diagonal terms of the Hessian requires performing one simulation per non redondant shot and receiver position. The same strategy that the one used for the gradient is used to compute the diagonal Hessian in parallel. This algorithm was applied to a dense wide-angle data set recorded by 100 OBSs in the eastern Nankai trough, offshore Japan. Thirteen frequencies ranging from 3 and 15 Hz were inverted. Tweny iterations per frequency were computed leading to 260 tomographic velocity models of increasing resolution. The velocity model dimensions are 105 km x 25 km corresponding to a finite-difference grid of 4201 x 1001 grid with a 25 -m grid interval. The number of shot was 1005 and the number of inverted OBS gathers was 93. The inversion requires 20 days on 6 32 -bits bi-processor nodes with 4 Gbytes of RAM memory per node when only the LU factorization is performed in parallel. Preliminary estimations of the time required to perform the inversion with the fully-parallelized code is 6 and 4 days using 20 and 50 processors respectively...|$|E
40|$|Factorizing sparse {{matrices}} using direct multifrontal methods generates directed tree-shaped task graphs, where edges represent data dependency between tasks. This paper revisits {{the execution}} of tree-shaped task graphs using multiple processors that share a bounded memory. A task can only be executed if all its input and output data can fit into the memory. The key difficulty is to manage {{the order of the}} task executions so that we can achieve high parallelism while staying below the memory bound. In particular, because input data of unprocessed tasks must be kept in memory, a bad scheduling strategy might compromise the termination of the algorithm. In the single processor case, solutions that are guaranteed to be below a memory bound are known. The multi-processor case (when one tries to minimize the total completion time) {{has been shown to be}} NP-complete. We present in this paper a novel heuristic solution that has a low complexity and is guaranteed to complete the tree within a given memory bound. We compare our algorithm to state of the art strategies, and observe that on both actual execution trees and synthetic trees, we always perform better than these solutions, with average speedups between 1. 25 and 1. 45 on actual <b>assembly</b> <b>trees.</b> Moreover, we show that the overhead of our algorithm is negligible even on deep trees (10 ^ 5), and would allow its runtime execution...|$|R
30|$|Associations of {{different}} functional trait strategies between different habitat conditions (wet and dry) {{may be influenced}} by evolutionary history, where the presence of particular clades with contrasting characteristics could confound their ecological interpretation (Ackerly and Reich 1999). Our phylogenetic analyses showed that most of the traits which showed the shift in traits metrics also showed significant phylogenetic signal (Additional file 1 : Table S 13), indicating the conservative evolution of leaf, wood, and reproductive traits influence the <b>assembly</b> of <b>tree</b> communities among wet and dry tropical forest. Moreover, the congruent pattern of functional trait metrics and phylogenetic structure between wet and dry habitat tree communities further support the above argument.|$|R
30|$|Improved {{understanding}} of the processes shaping the <b>assembly</b> of tropical <b>tree</b> communities is crucial for gaining insights into the evolution of forest communities and biological diversity. The climate {{is thought to be}} the first order determinant of abundance and distribution patterns of tree species with contrasting traits such as evergreen and deciduous leaf phenology. However, the relative role of neutral, and niche-based processes in the evolution of these patterns remain poorly understood.|$|R
