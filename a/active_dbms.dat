32|2|Public
40|$|The paper {{proposes a}} general {{architecture}} for implementing temporal integrity constraints by compiling {{them into a}} set of <b>active</b> <b>DBMS</b> rules. The modularity of the design allows easy adaptation to different environments. Both differences in the specification languages and in the target rule systems can be easily accommodated. The advantages of this architecture are demonstrated on a particular temporal constraint compiler. This compiler allows automatic translation of integrity constraints formulated in Past Temporal Logic into rules of an <b>active</b> <b>DBMS</b> (in {{the current version of}} the compiler two <b>active</b> <b>DBMS</b> are supported: Starburst and INGRES). During the compilation the set of constraints is checked for the safe evaluation property. The result is a set of SQL statements that includes all the necessary rules needed for enforcing the original constraints. The rules are optimized to reduce the space overhead introduced by the integrity checking mechanism. There is no need for an additiona [...] ...|$|E
40|$|Abstract—We propose an {{activity}} {{service as a}} component in cloud computing with the particular novelty that we base this service on the well-defined and proven semantics of Active Database Management Systems (<b>Active</b> <b>DBMS).</b> In addition, we utilize well-known principles of service oriented architectures. Furthermore we aim to provide an integration with a cloud service mediation component to automatically react to changes occurring in the cloud environment {{and in this way}} to imple-ment agility and self management of cloud applications. As contribution of this paper we provide the high-level design of this activity service. This includes architecture, core interfaces and a semantically well-defined rule and execution model, based on extended <b>Active</b> <b>DBMS</b> semantics...|$|E
40|$|Abstract-The {{workload}} of an <b>active</b> <b>DBMS</b> {{consists of}} two types of activities: externally generated tasks submitted by users, and rule management tasks caused by the triggering of rules stored in the knowledge component of the system. Most design proposals for active DBMS’s assume that an external task should be combined with all the resulting rule management tasks into a single transaction. There is no compelling reason for this assumption, however; the semantics of the rules {{can be used to}} divide the workload into transactions {{in a number of different}} ways. In this paper, we describe a performance model designed for studying <b>active</b> <b>DBMS</b> performance issues. We present the results of simulation experiments that study system performance as a function of transaction boundary semantics for varying levels of data contention, rule complexity, and data sharing between externally submitted tasks and rule management tasks. Our results demonstrate that the way in which transaction boundaries are imposed can have a major impact on the performance of an <b>active</b> <b>DBMS.</b> We therefore conclude that this aspect of rule semantics must be carefully considered at the time that rules are specified. Index Terms-Active databases, database management, perfor-mance evaluation, rule systems, transaction management. I...|$|E
40|$|The {{progressive}} loss of endogenous regenerative {{capacity that}} accompanies mammalian aging has been attributed {{at least in}} part to alterations in the extracellular matrix (ECM) composition of adult tissues. Thus, creation of a more regenerative microenvironment, analogous to embryonic morphogenesis, may be achieved via pluripotent embryonic stem cell (ESC) differentiation and derivation of devitalized materials as an alternative to decellularized adult tissues, such as demineralized bone matrix (DBM). Transplantation of devitalized ESC materials represents a novel approach to promote functional tissue regeneration and reduce the inherent batch-to-batch variability of allograft-derived materials. In this study, the osteoinductivity of embryoid body-derived material (EBM) was compared to DBM in a standard in vivo ectopic osteoinduction assay in nude mice. EBM derived from EBs differentiated for 10 days with osteogenic media (+β-glycerophosphate) exhibited similar osteoinductivity to <b>active</b> <b>DBM</b> (osteoinduction score[*]=[*] 2. 50 [*]±[*] 0. 27 vs. 2. 75 [*]±[*] 0. 16) based on histological scoring, and exceeded inactive DBM (1. 13 [*]±[*] 0. 13, p[*] 3 ̆c[*] 0. 005). Moreover, EBM stimulated formation of new bone, ossicles, and marrow spaces, similar to <b>active</b> <b>DBM.</b> The potent osteoinductivity of EBM demonstrates that morphogenic factors expressed by ESCs undergoing osteogenic differentiation yield a novel devitalized material capable of stimulating de novo bone formation in vivo...|$|R
40|$|The {{interaction}} of dopamine beta-mono-oxygenase (DBM) with substrate analogues possessing either imidazole or pyrazole functionalities at the alkyl chain terminus was investigated. 1 -(4 -Hydroxybenzyl) imidazole (4 -HOBI) is an <b>active</b> substrate for <b>DBM,</b> and it exhibits the expected ascorbate- and fumarate-dependencies and normal kinetic behaviour at concentrations up to 10 mM. 4 -Hydroxybenzaldehyde {{was identified as}} the product formed from 4 -HOBI {{on the basis of}} h. p. l. c. and g. c. -m. s. analysis, and its formation exhibits the expected 1 : 1 stoichiometry with O 2 consumption. The 4 -HOBI/DBM reaction is kinetically comparable with other DBM activities, and 4 -HOBI is the first substrate analogue yet reported that exhibits substantial activity though lacking a terminal amino group. Introduction of a methyl substituent at the 2 -position of the imidazole ring abolishes substrate activity, probably through a steric effect. 1 -(4 -Hydroxybenzyl) pyrazole, where imidazole is replaced by the isomeric pyrazole moiety, is a potent DBM inhibitor, and not a substrate. These results represent the first report of an active heterocyclic substrate or inhibitor for this enzyme, and establish the basis for the design of new classes of DBM substrates and inhibitors...|$|R
40|$|The HiPAC {{project is}} {{investigating}} active, time-constrained database managment. An <b>active</b> <b>DBMS</b> is one which automatically executes specified actions when speciifed conditions arise. HiPAC has proposed Event-Condition-Action (ECA) rules as a formalism for active database capabilities. We have also developed an execution model that speicifes how these rules are processed {{in the context}} of database transactions. The additional functionality provided by ECA rules makes new demands on the design of an <b>active</b> <b>DBMS.</b> In this paper we propose an architecture for an <b>active</b> <b>DBMS</b> that supports ECA rules. This architecture provides new forms of interaction, in support of ECA rules, between application programs and thDBMS. This leads to a new paradigm for constructing database applications. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy othewise, or to republish, requires a fee and/or specific pemksion. 0 1989 ACMO- 89791 - 317 - 5 / 89 / 0005 / 0215 $ 1. 5...|$|E
40|$|Making a {{database}} system active entails {{not only the}} specification of expressive ECA (eventcondition -action) rules, algorithms {{for the detection of}} composite events, and rule management, but also a viable architecture for rule execution that extends a passive DBMS, and its implementation. In this paper, we propose an integrated <b>active</b> <b>DBMS</b> architecture for incorporating ECA rules using the Open OODB Toolkit (from Texas Instruments, Dallas). We then describe the implementation of the composite event detector, and rule execution using a nested transaction model for object-oriented <b>active</b> <b>DBMS.</b> Finally, the functionality supported by this architecture and its extensibility are analyzed along with the experiences gained. 1 Introduction During the last decade, database management systems (DBMSs) have evolved considerably to meet the requirements of emerging applications. ECA rules (or event-condition-action or situation-action rules) generalize the forms of monitoring supported earlier (e [...] ...|$|E
40|$|This paper {{presents}} {{our approach}} for visualizing active rule executions. Our tool (Vizar) exploits new visualization paradigms, such as 3 D graphics and animations, {{to allow a}} convenient visualization of many aspects of <b>Active</b> <b>DBMS</b> execution models. CR Categoriesand Subject Descriptors: I. 3. 7 [Computer Graphics]:Three-Dimensional Graphics and Realism; H. 2. m[Database management]: Miscellaneous Additional Keywords: Data Visualization, Active Databases 1 INTRODUCTION In a classical DBMS, operations and queries on data are executed after an explicit request submitted by a user or an application. These systems are referred as passive, as opposed to <b>active</b> <b>DBMS</b> (ADBMS) {{that are able to}} automatically execute predefined actions in reaction to specific events when some conditions are satisfied. Most active systems are based on the concept of active rules of the form Event-Condition-Action (ECA). The general semantics of an ECA rule is: "when an event of type E occurs (we say that the [...] ...|$|E
40|$|An <b>active</b> <b>DBMS</b> is {{characterized}} by its ability to monitor and react to both database and nondatabase events in a timely and efficient manner [CHA 89]. Research on active database systems {{can be found in}} the POSTGRES project [STON 87 a], [STON 87 b], [STON 90], the HiPAC system [CHA 89], [McDAY 89], [DAY 88] and the O 2 system [MP 91]...|$|E
40|$|This paper {{outlines}} the ongoing joint work in Reactive Object Oriented Database Systems between the Departments of Computer Science in the University of Exeter(UK) and the University of Skovde(Sweden). The group is currently designing a monitoring {{system based on}} a reactive object oriented database {{with the objective of}} supporting e#cient interaction between the <b>active</b> <b>DBMS</b> and applications (including intelligent systems...|$|E
40|$|The {{architecture}} of an <b>active</b> <b>DBMS</b> determines both its functionality and the components {{that are required}} for its implementation. This chapter addresses first some issues that {{have an impact on}} the {{architecture of}} an active database system, and presents the various architectural alternatives. The basic functions of an ADBMS are identified and then related to the architectural alternatives. This chapter discusses rule specification and registration, and rule execution. Special attention is devoted to the execution of transactions and its relationship to the execution of ECA rules. 2. 1 Introduction The architecture of an <b>active</b> <b>DBMS</b> determines both its functionality and the components that are required to realize it. Since an ADBMS by definition must provide the active capabilities in addition to full DBMS features, it can be viewed as an extension of a passive DBMS. There are various properties of the underlying DBMS and of the architectural strategy used for implementing the a [...] ...|$|E
40|$|The {{need for}} active {{database}} rules {{to be able}} to interact with running application programs has been recognized for some time. In addition, technology that supports recoverable, transaction-consistent flow of requests from client applications to the database server and of responses from the server back to the client is maturing. The work described here unifies a flexible mechanism for interaction between applications and an <b>active</b> <b>DBMS</b> with recoverable messaging services. The resulting system, an extension of the Ariel <b>active</b> <b>DBMS,</b> allows messages to be transmitted by an active rule action to one or more applications. These messages can be made persistent, via a recoverable queue, so they will not be lost due to server, client, or communication failure. In addition, messages transmitted by rules to applications can be delayed until transaction commit to prevent applications from taking action on the results of an uncommitted transaction. This paper describes the design and [...] ...|$|E
40|$|Although {{much work}} {{in the area of}} Active Database Management Systems (ADBMSs) has been done, it is not yet clear how the {{performance}} of an <b>active</b> <b>DBMS</b> can be evaluated systematically. In this paper, we describe the OBJECTIVE Benchmark for objectoriented ADBMSs, and present experimental results from its implementation in an active database system prototype. OBJECTIVE can be used to identify performance bottlenecks and active functionalities of an ADBMS, and to compare the performance o...|$|E
40|$|Abstract- An <b>active</b> <b>DBMS</b> is {{expected}} to support concurrent as well as sequential rule execution in an efficient manner. Nested transaction model is a suitable tool to implement rule execution as it can handle nested rule firing and concurrent rule execution well. In this paper, we describe a concurrent rule execution model based on parallel nested transactions. We discuss implementation details of how the flat transaction model of OpenOODB has been extended by using Solaris threads in order t...|$|E
40|$|Traditional {{database}} information monitoring techniques, such as database triggers, <b>active</b> <b>DBMS</b> {{and continuous}} queries have various limitations, {{can not provide}} large scale dynamic data push and have no efficient data dissemination support. Meanwhile, current dissemination systems, which are separated from database, can not handle complicated query requests, such as aggregate operation. Also, as a middleware, it adds more overhead to the data querying. We designed, implemented and analyzed the first efficient active lightweight DBMS which also has full dissemination features built-in. We proposed a novel technique: record-based triggering, for efficient monitoring of clients ’ interested records known a priori. Also we use message passing for communication between clients and database servers. Unlike table-based triggering in current commercial database systems, record-based triggering gives much better scalability as well as speed. Meanwhile, compared with traditional communication mechanism as remote procedural call, message passing give full control to the <b>active</b> <b>DBMS</b> system, thus it can optimize the data processing and dissemination. The system, called Continuous Query Processing and Dissemination (CPQD), has been implemented in Java and is portable, extensible and scalable. Compared with traditional periodic pull techniques, the experiments results are very promising. 1...|$|E
40|$|Cataloged from PDF {{version of}} article. Although much {{work in the}} area of Active Database Management Systems (ADBMSs) has been done, it is not yet clear how the {{performance}} of an <b>active</b> <b>DBMS</b> can be evaluated systematically. In this paper, we describe the OBJECTIVE Benchmark for object-oriented ADBMSs, and present experimental results from its implementation in an active database system prototype. OBJECTIVE can be used to identify performance bottlenecks and active functionalities of an ADBMS, and to compare the performance of multiple ADBMSs. (C) 1999 Published by Elsevier Science Inc. All rights reserved...|$|E
40|$|Cataloged from PDF {{version of}} article. An <b>active</b> <b>DBMS</b> is {{expected}} to support concurrent as well as sequential rule execution in an efficient manner. Nested transaction model is a suitable tool to implement rule execution as it can handle nested rule firing and concurrent rule execution well. In this paper, we describe a concurrent rule execution model based on parallel nested transactions. We discuss implementation details of how the flat transaction model of OpenOODB has been extended by using Solaris threads in order to SUppOrt COnCUrrent eXeCUtiOU of rUkS. ...|$|E
40|$|Active {{database}} systems integrate {{an event}} [...] based rule system into the DBMS. The rules {{are used to}} react on occurring events with the execution of transactions. In this paper, we examine which conclusions must be drawn for the active part of the DBMS if we {{take into account that}} a DBMS might fail and needs to be recovered. We propose techniques for handling different kinds of failures. These techniques result in a modified and coupling mode specific algorithm for the detection of complex events based on a log of atomic events. Finally, we use the AIDE-environment as an example to show which components of an <b>active</b> <b>DBMS</b> must be modified {{in order to make it}} recoverable...|$|E
40|$|DBMS {{technology}} is evolving to manage {{not only the}} data features of the domain but also the behavioral characteristics as illustrated by object-oriented and <b>active</b> <b>DBMS.</b> In spite of the ongoing evolution of DBMS, Entity/Relationship techniques are still widely used without substantial changes since they were initially conceived. E/R schemas as conceptual models, are clearly lacking a behavioral counterpart. This paper proposes the notion of stimulus as the driving force that guide {{the whole process of}} database application development. The paper addresses how stimuli can be identified and described during analysis, and how this definition is refined during design and implementation. An example is used throught the paper to illustrate these ideas. Keywords: Database modeling, Three-tier architectures...|$|E
40|$|Exploration is {{the act of}} {{investigating}} unknown regions. An analyst exploring a database cannot, by definition, compose the right query or use the appropriate data mining algo-rithm. However, current data management tools cannot op-erate without well defined instructions. Therefore, browsing an unknown database {{can be a very}} tedious process. Our project, Atlas, is an attempt to circumvent this problem. Atlas is an <b>active</b> <b>DBMS</b> front-end, designed for database exploration. It generates and ranks several data maps from a user query. A data map is a small set of database queries (less than a dozen), in which each query describes an in-teresting region of the database. The user can pick one and submit it for further exploration. In order to support interaction, the system should operate in quasi-real time...|$|E
40|$|This paper {{outlines}} the ongoing work in Reactive Object Oriented Database Systems between the Departments of Computer Science in the University of Exeter(UK) and the University of Skövde (Sweden). The group is currently designing a monitoring {{system based on}} a reactive object oriented database {{with the objective of}} supporting efficient interaction between the <b>active</b> <b>DBMS</b> and applications (including intelligent systems). Initial work has centred on a prototype reactive object-oriented system built on top of ONTOS, a commercial OODBMS which has C++ as its base language. The prototype is referred to as ACOOD (ACtive Object Oriented Database system) ([Ber 91]). We briefly discuss this prototype, showing how reactive behaviour has been incorporated into a full OODBMS albeit with some restrictions. We also outline our plans for its future extension, and how these are motivated...|$|E
40|$|This paper {{addresses}} {{issues of}} the active database application in the challenging healthcare area: the management and execution of computerised clinical practice guidelines/protocols. The {{problem of how to}} efficiently and effectively quey and manipulate the computerised clinical protocols/guidelines has posed a major challenge but received little research attention until very recently. By proposing a declarative modelling language (PLAN) with an Event-Condition-Action (ECA) mechanism for clinical test-ordering protocols, and an automatic mapping and management system (TOPS), this paper addresses this issue, in an important medical domain, from a unified approach based on an active rule mechanism. The work presented in this paper is part of an on-going research effort that investigates a new application domain for active databases, and proposes some new requirements towards the enhancements of <b>active</b> <b>DBMS</b> functionalitie...|$|E
40|$|Making a {{database}} system active entails developing an expressive event specification language with well-defined semantics, algorithms {{for the detection}} of composite events, and an architecture for an event detector along with its implementation. This paper presents Snoop as the event specification language along with the semantics of composite events over a global event-history (or a global event-log). Parameter contexts are introduced for meaningfully restricting the detection of composite events. In addition, algorithms {{for the detection of}} composite events in various parameter contexts are presented. Finally, an architecture and implementation of a composite event detector is analyzed {{in the context of an}} object-oriented <b>active</b> <b>DBMS.</b> 1 Introduction Consensus is emerging in the database community about the structure of rules for supporting active functionality. A rule consists, primarily, of three components: an event, a condition, and an action. A rule consisting of these component [...] ...|$|E
40|$|This paper {{presents}} a difference calculus for determining changes to rule conditions in an <b>active</b> <b>DBMS.</b> The calculus {{has been used}} for implementing an algorithm to efficiently monitor rules with complex conditions. The calculus is based on partial differencing of queries derived from rule conditions. For each rule condition several partially differentiated queries are generated that each considers changes to a single base relation or view that the condition depends on. The calculus considers both insertions and deletions. The algorithm is optimized for deferred rule condition monitoring in transactions with few updates. The calculus allows us to optimize both space and time. Space optimization is achieved since the calculus and the algorithm does not presuppose materialization of monitored conditions to find its previous state. This is achieved by using a breadth-first, bottom-up propagation algorithm and by calculating previous states by doing a logical rollback. Time optimization is [...] ...|$|E
40|$|Using ECA {{rules in}} active {{database}} systems for real-life applications involves implementing, debugging, and maintaining {{large numbers of}} rules. Experience in developing large production rule systems has amply demonstrated the need for understanding the behavior of rules especially when their execution is non-deterministic. Availability of rules in active database systems and their semantics creates additional complexity for both modeling and verifying the correctness of such systems. As part of Sentinel [...] an Object-Oriented <b>Active</b> <b>DBMS,</b> we have developed a visualization tool to help understand the behavior of rules defined {{as part of an}} active database application. This is especially important in active databases as rules are invoked (as a side effect) based on event occurrences (both primitive and composite) and are executed concurrently based on user-provided priority information. In this paper, we describe the rationale {{for the development of the}} tool, how it has bee [...] ...|$|E
40|$|The {{powerful}} functionality that active mechanisms add to {{database management}} systems presents, besides many advantages, {{a number of}} problems related to the control of their behavior. This paper deals with one of these problems: the termination of rule execution. We explain the termination aspect and the aim of termination analysis. Then, we present our approach for investigating the termination of rule execution. In contrast to others, this approach also addresses expressive rule languages as they have been proposed for various recent active database management system prototypes. 1 Introduction Many applications from areas like workflow management, network management, finance, medicine and transportation show some sort of active behavior and are thus well-suited for support by active database management systems (<b>active</b> <b>DBMS).</b> Accordingly, much research has been done in the area so far, e. g., towards the integration of active mechanisms into relational and object-oriented database man [...] ...|$|E
40|$|Ankara : Department of Computer Engineering and Information Science and the Institute of Engineering and Science of Bilkent University, 1996. Thesis(Master's) [...] Bilkent University, 1996. Includes bibliographical {{references}} leaves 44 - 47. Although {{much work}} {{in the area of}} Active Database Management Systems (ADBMSs) has been done, there have been only a few attempts to evaluate the performance of these systems, and it is not yet clear how the performance of an <b>active</b> <b>DBMS</b> can be evaluated systematically. In this thesis, we describe the OBJECTIVE Benchmark for object-oriented ADBMSs, and present experimental results from its implementation in an active database system prototype. OBJECTIVE can be used to identify performance bottlenecks and active functionalities of an ADBMS, and compare the performance of multiple ADBMSs. The philosophy of OBJECTIVE is to isolate components providing active functionalities, and concentrate only on the performance of these components while attempting to minimize the effects of other factors. Çetintemel, UğurM. S...|$|E
40|$|In {{this paper}} we {{describe}} an algorithm {{for the analysis}} of termination of a large set of triggers in an OODBMS. It is quite clear that, if the trigger mechanism is of sufficient complexity, the problem is undecidable. Yet, by the extensive use of object-oriented concepts, like derived classes, and lattice theory, we are able to give some sufficient conditions for termination which yield satisfying results. Another advantage of our approach is the uniform treatment of generic update operations on the one hand, and methods and abstract data types on the other. Our algorithms are meant to be incorporated into a design tool which shows the rule designer conflicting subsets of rules. Then the designer can prove that the rules don't pose a problem for himself, or he can remodel his rules to remove the conflict. 1 Introduction Most current OODBMS are passive, i. e. they only react to explicit requests by users or applications. An <b>active</b> <b>DBMS</b> executes operations automatically whenever certain [...] ...|$|E
40|$|This paper {{presents}} a new active database discrimination network algorithm called Gator, and its implementation in {{a modified version}} of the Ariel <b>active</b> <b>DBMS.</b> Gator is a generalization of the widely known Rete and TREAT algorithms, and is designed as a target for a discrimination network optimizer. Ariel now has an optimizer that can choose an efficient Gator discrimination network for testing the conditions of a set of rules, given information about the rules, database size and attribute cardinality, and update frequency distribution. The optimizer uses a randomized strategy similar to one which has been successfully used previously to optimize large join queries. Use of Gator gives large speedups (3 times for one realistic rule tested [...] potentially much more) compared with the unoptimized TREAT strategy formerly used in Ariel. 1 Introduction A crucial component of an active database system is the mechanism it uses to test rule conditions as the database changes. Tools for artifici [...] ...|$|E
40|$|This paper {{presents}} an active database discrimination network algorithm called Gator, and its implementation in {{a modified version}} of the Ariel <b>active</b> <b>DBMS.</b> Gator is a generalization of the widely known Rete and TREAT algorithms. Gator pattern matching is explained, and it is shown how a discrimination network can speed up condition testing for multi-table triggers. The structure of a Gator network optimizer is described. This optimizer can choose an efficient Gator network for testing the conditions of a set of triggers, given information about the structure of the triggers, database size, attribute cardinality, and update frequency distribution. The optimizer uses a randomized strategy to deal with the problem of a large search space. The results show that optimal Gator networks normally have a shape which neither pure Rete nor pure TREAT, but an intermediate form where one or a few inner joins (fi nodes) are materialized. In addition, this study shows that it is indeed feasible to o [...] ...|$|E
40|$|This paper {{describes}} {{testing of}} rule conditions {{and execution of}} rule actions in the Ariel <b>active</b> <b>DBMS.</b> The Ariel rule system is tightly coupled with query and update processing. Ariel rules can have conditions based on a mix of patterns, events, and transitions. For testing rule conditions, Ariel makes use of a discrimination network composed of a special data structure for testing single-relation selection conditions efficiently, and {{a modified version of}} the TREAT algorithm, called A-TREAT, for testing join conditions. The key modification to TREAT (which could also be used in the Rete algorithm) is the use of virtual ff-memory nodes which save storage since they contain only the predicate associated with the memory node instead of copies of data matching the predicate. The rule-action executor in Ariel binds the data matching a rule's condition to the action of the rule at rule fire time, and executes the rule action using the query processor. 1 Introduction Designers of database [...] ...|$|E
40|$|This {{extended}} abstract {{describes an}} approach {{to the definition of}} benchmarks for active DBMSs. The goal of benchmarking an <b>active</b> <b>DBMS</b> is not only performance comparison, but also identification of missing functionalities. The chosen performance measure is a) response time for event detection, rule firing, and rule administration and b) database size for both garbage collection of semi-composed events and looking up rules to be fired. In addition the importance of event parameters is examined with respect to rules for consistency repairs and value-based access control. 1 Introduction and Motivation Active database management systems (aDBMS) typically provide a rule subsystem in order to incorporate more application semantics in the database itself (see [DHW 95]). Using Event-Condition-Action (ECA) rules as defined in [DBB+ 88] a programmer or database administrator can specify which action should be executed when a specified event occurs and a given condition holds, e. g. a rule for the [...] ...|$|E
40|$|Active {{technology}} in database management systems (DBMS) enables {{the movement of}} behaviour dependent on the system’s state, from the application software to a rule base in the DBMS. With active {{technology in}} database systems, {{the problem of how}} to design active behaviour has become an important issue. Modelling processes do not foresee support for design of active rules which can lead to conflicts between the event-condition-action (ECA) rules representing the active behaviour and the application systems, using the <b>active</b> <b>DBMS.</b> The unified modelling language (UML) is a widely used notation language and is the main subject in this project. Its features will be investigated to acknowledge to what extend UML modelling diagrams provide information that can be used to formulate ECA rules. To achieve this, two methods where developed. One of the methods was applied on use-case UML modelling diagrams. The use-case models were developed by means of reflecting a real-life organisation. The results from applying the method on the use-case models were that there are features in UML that can be expressed with ECA rules. Active technology in database management systems (DBMS) enables the movement of behaviour dependent on the system’s state, from the application software to a rule base in the DBMS. With active technology in database systems, {{the problem of how to}} design active behaviour has become an important issue. Modelling processes do not foresee support for design of active rules which can lead to conflicts between the event-condition-action (ECA) rules representing the active behaviour and the application systems, using the <b>active</b> <b>DBMS.</b> The unified modelling language (UML) is a widely used notation language and is the main subject in this project. Its features will be investigated to acknowledge to what extend UML modelling diagrams provide information that can be used to formulate ECA rules. To achieve this, two methods where developed. One of the methods was applied on use-case UML modelling diagrams. The use-case models were developed by means of reflecting a real-life organisation. The results from applying the method on the use-case models were that there are features in UML that can be expressed with ECA rules...|$|E
40|$|Profit maximisation is a {{fundamental}} goal of any business-driven railway infrastructure company. In order to achieve this target {{in the context of}} traffic regulation, it must try to avoid delays and ensure scheduled connections. However, nominally equal delays to two different trains are not equal in value from an economic point of view in most cases. Moreover, some connections between trains might be more important in this sense than others. There are complex interdependencies and reciprocal effects in railway traffic. Considering these effects, a dispatcher must evaluate possible forms of conflict resolution and the waiting times these give rise to and select the best solution possible. This is not achievable where a time-critical conflict arises at short notice. Even closed mathematical optimisation algorithms encounter limits in the case of larger railway networks due to the enormous number of constraints to be considered. This thesis will therefore propose that the optimisation process be separated from the train regulation process. Instead, economically evaluated train priorities for conflict situations are to be determined with the help of active, deductive and normative rules. Existing concepts of “smart” database management systems (DBMS) with integrated active and deductive database functionalities can be used for this application. An <b>active</b> <b>DBMS</b> allows the definition of reactions to be automatically initiated by the DBMS in response to the detection of given database-related events. A deductive DBMS allows new, deducible facts to be specified, administered and specially derived from explicitly introduced facts. Train priorities are generated and assigned in detachment from day-to-day operations for lightly and heavily disrupted railway traffic respectively. Long-term optimisation of these priorities is effected by evaluating past operational data...|$|E

