102|4349|Public
5000|$|Fixing {{an error}} in <b>application</b> <b>database</b> or {{an error in}} a recent <b>application</b> <b>database</b> change ...|$|E
5000|$|PortableFreeware.com Listed in {{portable}} <b>application</b> <b>database.</b> User comments include: ...|$|E
50|$|The Wine <b>Application</b> <b>Database</b> (AppDB) is a community-maintained on-line {{database}} {{about which}} Windows programs works with Wine {{and how well}} they work.|$|E
5000|$|Integration with {{third-party}} <b>applications,</b> <b>databases</b> {{and existing}} scientific infrastructure ...|$|R
5000|$|RSSBus Type 4 JDBC Drivers for <b>applications,</b> <b>databases,</b> and web {{services}} ...|$|R
5000|$|Application {{management}} capabilities across verticals for CRM <b>applications,</b> IPT <b>applications,</b> <b>Database</b> Integration ...|$|R
50|$|In {{addition}} to Java, {{it requires the}} PostgreSQL database, although work {{is being done to}} make the <b>application</b> <b>database</b> independent by leveraging the Hibernate project.|$|E
50|$|Imperva, {{originally}} named WEBcohort, {{was founded}} in 2002 by Shlomo Kramer, Amichai Shulman and Mickey Boodaei. The following year the company shipped its first product, SecureSphere Web <b>Application</b> <b>Database</b> Protection, a web application firewall. In 2004, the company {{changed its name to}} Imperva.|$|E
50|$|The act of {{application}} retirement usually involves migrating {{data from the}} legacy <b>application</b> <b>database</b> to another data repository or archive store that can be accessed independently using industry standard reporting or business intelligence tools. Application retirement allows IT departments within companies to reduce the software, hardware and resources required to manage legacy data.|$|E
5000|$|CData Software ships type 4 JDBC Drivers {{for various}} <b>applications,</b> <b>databases,</b> and Web APIs.|$|R
5000|$|Enterprise Manager 13c Release 1 (13.1.0.0) - December 2015 - ... {{support for}} Oracle <b>applications,</b> <b>databases,</b> middleware, {{hardware}} and engineered systems ...|$|R
5000|$|The Survey of Lincoln:City Building <b>Applications</b> <b>Database</b> 1866 - 1952,http://www.thesurveyoflincoln.co.uk/cityba {{for details}} of {{planning}} applications submitted by architects working in Lincoln.|$|R
5000|$|The {{concept of}} ABAC {{can be applied}} at any level of the {{technology}} stack and an enterprise infrastructure. For example, ABAC can be used at the firewall, server, <b>application,</b> <b>database,</b> and data layer. The use of attributes bring additional context to evaluate the legitimacy of any request for access and inform the decision to grant or deny access.|$|E
50|$|As of October 2007, {{the term}} Scrabulous was {{registered}} as a trademark and service mark with the United States Patent and Trademark Office, but on February 2008 it was officially {{abandoned by the}} applicant. Hasbro threatened to shut Scrabulous down via legal means in January 2008. Facebook was also asked to pull Scrabulous from its site's <b>application</b> <b>database,</b> but initially demurred.|$|E
50|$|The {{repository}} stores {{information about}} fields (or data elements) {{in the application}} including descriptions, column headings, edit codes, visualizations, default values, help text, and prompt programs. It holds information about files and <b>application</b> <b>database</b> including physical files, logical files (or views), relationships, file definition attributes, file validation rules, trigger programs, multilingual definitions, virtual fields, and predetermined join fields. Objects and components used for event-driven Windows applications also reside in the repository.|$|E
5000|$|Bachelor of Science in Information Technology (Specializations in Network Technology, Animation & Game Development, Mobile <b>Applications,</b> <b>Databases</b> & <b>Applications,</b> Software Engineering, Web Technology, Media Design & Graphics) ...|$|R
50|$|With SEP Sesam and Bareos, the App Center {{offers two}} {{well-known}} solutions for backup, archiving and recovery of all established operating systems, virtualization solutions, <b>applications,</b> <b>databases</b> and files.|$|R
50|$|An {{information}} {{security operations center}} (ISOC) is a dedicated site where enterprise information systems (web sites, <b>applications,</b> <b>databases,</b> data centers and servers, networks, desktops and other endpoints) are monitored, assessed, and defended.|$|R
5000|$|A {{deployment}} diagram in the Unified Modeling Language models {{the physical}} deployment of artifacts on nodes. [...] To describe a web site, for example, a deployment diagram would show what hardware components ("nodes") exist (e.g., a web server, an application server, and a database server), what software components ("artifacts") run on each node (e.g., web <b>application,</b> <b>database),</b> {{and how the}} different pieces are connected (e.g. JDBC, REST, RMI).|$|E
5000|$|Scaffolding is a {{technique}} supported by some model-view-controller frameworks, in which the programmer can specify how the <b>application</b> <b>database</b> may be used. The compiler or framework uses this specification, together with pre-defined code templates, to generate the final code that the application can use to create, read, update and delete database entries, effectively treating the templates as a [...] "scaffold" [...] {{on which to build}} a more powerful application.|$|E
5000|$|Application retirement, {{also called}} {{application}} decommissioning and application sunsetting, is {{the practice of}} shutting down redundant or obsolete business applications while retaining access to the historical data. Legacy applications are often maintained solely to provide infrequent or sporadic access to data within the <b>application</b> <b>database</b> for regulatory or business purposes. With some organizations spending upwards of 75% of their application software budgets on ongoing maintenance, application retirement can deliver significant cost savings.|$|E
5000|$|Elastic.io is a {{software}} vendor specializing in Data Integration. The company provides microservices-based integration software for connecting <b>applications,</b> <b>databases,</b> and APIs, cloud-to-cloud or cloud-to-ground. [...] Elastic.io has their headquarters in Bonn, Germany.|$|R
5000|$|An {{information}} {{security operations center}} ("ISOC" [...] or [...] "SOC") is a facility where enterprise information systems (web sites, <b>applications,</b> <b>databases,</b> data centers and servers, networks, desktops and other endpoints) are monitored, assessed, and defended.|$|R
50|$|Adhearsion is an {{open source}} voice {{development}} framework for the Ruby programming language. It {{is intended to be}} used to create rich voice applications integrated with other technologies, such as web <b>applications,</b> <b>databases</b> and instant messaging.|$|R
5000|$|Version 0.2 was {{launched}} in February 2013 and it also has been known a posteriori [...] "Berlin". This version brings the new CMS applications such as forms management, slide and application [...] "Create my app" [...] that allows developers to easily and quickly create a Novius OS <b>application</b> (<b>database,</b> UI, etc..). It also notes the emergence of multi-context for managing multiple sites and / or multiple languages - in a single back office.|$|E
50|$|Scaffolding {{techniques}} {{based on}} the <b>application</b> <b>database</b> typically involve Server side frameworks. Server side web frameworks commonly perform operations directly against database entries, and code generation for these operations may be considered Server side Scaffolding. Alternatively, Client side development often uses frameworks that perform data transport operations instead of directly accessing the database. The focus of Client side Scaffolding is thus more on generating a starter template for the application as a whole, rather than generating code to access a database.|$|E
5000|$|Over the {{following}} weeks, SENSIO attempted {{to find a}} buyer for its remaining assets, namely its 3DGO! online rental service. During winter 2016, the company filed two motions for an order to extend the stay period, in order to buy some time to complete the sales process. However, their attempts were unsuccessful; the 3DGO! service was discontinued on April 15, 2016 [...] and on April 22, 2016, SENSIO did not request a further extension, and was deemed to have filed an assignment in bankruptcy. The trustee's preliminary report to creditors, filed in May 2016, reveals that SENSIO's remaining assets {{at the time of}} the bankruptcy were the 3DGO <b>application,</b> <b>database</b> and trademark, as well as computer equipment.|$|E
40|$|Testing <b>database</b> <b>application</b> is {{challenging}} because most methods and tools developed for application testing {{do not consider}} the database state during the test. In this paper we demonstrate three different tools for testing database applications: HTDGen, HTTrace and HTPar. HTDGen generates meaningful test <b>databases</b> for <b>database</b> <b>applications.</b> HTTrace executes <b>database</b> <b>applications</b> testing efficiently and HTPar extends HTTrace to run tests in parallel...|$|R
50|$|Runbook {{automation}} (RBA) is {{the ability}} to define, build, orchestrate, manage, and report on workflows that support system and network operational processes. A runbook workflow can potentially interact with all types of infrastructure elements, such as <b>applications,</b> <b>databases,</b> and hardware.|$|R
40|$|Advances in {{technology}} and organizational structures effect changes in database requirements. Frameworks for the migration of <b>database</b> <b>applications</b> between different <b>database</b> systems accomplish the task of mapping evolving requirements to existing applications. In this paper, we describe a framework for migrating <b>database</b> <b>applications</b> between different object-oriented database systems. We illustrate our framework by means of migrating KBL + from ONTOS ^TM to ObjectStore ^TM. 1. Introduction The requirements for <b>database</b> <b>applications</b> evolve over time. The changes of the requirements may result from the demand for additional system functionality, changes in the business organization, a shift {{in technology}} or improved insight in the task to be performed. These changes must then be mapped to the existing applications. In general, with migration we describe the controlled mapping of evolving requirements to existing <b>applications.</b> <b>Database</b> migration results from changes in the applic [...] ...|$|R
5000|$|There {{is still}} no other system {{available}} that will grant you [...] "only one user interface and make all into one system". You have {{to fill in the}} expense report in Oracle HR and type the letter summarising the reason for the expense in some other text editor. With Notis, you clicked on field for providing the information, and WP would fire up, allowing you to write the letter - not as in Wikipedia where you have to supply own mark-up, but with the document template ready. The complete document would then be stored in the <b>application</b> <b>database,</b> with the expense report data. [...] KHF 15:31, 10 August 2011 (UTC)--KHF 00:52, 5 August 2013 (UTC) ...|$|E
50|$|Scaffolding {{can occur}} at two {{different}} {{phases of the}} program lifecycle: design time and run time. Design time scaffolding produces files of code that can later be modified by the programmer to customize the way the <b>application</b> <b>database</b> is used. However, for large-scale applications this approach {{may be difficult to}} maintain due to the sheer number of files produced, {{and the fact that the}} design of the files was largely fixed when they were generated or copied from the original templates. Alternatively, run time scaffolding produces code on the fly. It allows changes to the design of the templates to be immediately reflected throughout the application. But modifying the design of the templates may be more difficult or impractical in the case of run time scaffolding.|$|E
50|$|Wine is a {{compatibility}} layer {{that provides}} binary compatibility {{and makes it}} possible to run software, that was written and compiled for Microsoft Windows, on Linux. The Wine project hosts a user-submitted <b>application</b> <b>database</b> (known as Wine AppDB) that lists programs and games along with ratings and reviews which detail how well they run with Wine. Wine AppDB also has a commenting system, which often includes instructions on how to modify a system to run a certain game which cannot run on a normal or default configuration. Many games are rated as running flawlessly, and there are also many other games that can be run with varying degrees of success. The use of Wine for gaming has proved controversial in the Linux community as some feel it is preventing, or at least hindering, the further growth of native gaming on the platform.|$|E
40|$|Many tasks require {{correct and}} {{meaningful}} communication and integration among intelligent agents and information resources. A major barrier to such interoperability is semantic heterogeneity: different <b>applications,</b> <b>databases,</b> and agents may ascribe disparate meanings {{to the same}} terms or use distinct terms to convey th...|$|R
40|$|<b>Database</b> <b>applications</b> play an {{important}} role in nearly every organization, yet little has been done on testing of <b>database</b> <b>applications.</b> They are becoming increasingly complex and are subject to constant change. They are often designed to be executed concurrently by many clients. Testing of <b>database</b> <b>application</b> hence is of utmost importance to avoid any future errors encountered in the application, since a single fault in <b>database</b> <b>application</b> can result in unrecoverable data loss. Many tools and frameworks for performing testing of <b>database</b> <b>applications</b> has been proposed to populate the test database and generate test cases which checks the correctness of <b>application.</b> They check <b>database</b> <b>applications</b> for consistency constraints and transactions concurrency. In this paper we present a DBGEN- database (test) GENerator, an automated framework for <b>database</b> <b>application</b> testing. In this framework Test Strategies for testing of embedded SQL queries within imperative language are presented. Finally we present strategies for performing efficient regression tests by reducing the resets that may occur while testing <b>database</b> <b>applications.</b> We have also computed the coverage of various test cases to predict the quality of testing. By this, we reduce the testing time and cost by approximately by 30 %, thereby easing the tester to manage his testing activities easily...|$|R
25|$|SOA 2.0 is {{the ability}} to create {{high-level}} business events from numerous low-level system events. Events are created by filtering real-time data (from middleware, <b>applications,</b> <b>databases,</b> and Web services, for example) and infusing it with defining detail such as dependencies or causal relationships discovered by correlating other events.|$|R
