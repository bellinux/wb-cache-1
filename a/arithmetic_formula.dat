64|161|Public
5000|$|This is a first-order <b>arithmetic</b> <b>formula</b> with no {{unbounded}} quantifiers, i.e. {{it is in}} [...]|$|E
5000|$|... bit(j ,m) is the j-th bit of {{a number}} m. This can be written as a first-order <b>arithmetic</b> <b>formula</b> with no {{unbounded}} quantifiers.|$|E
50|$|To solve this, we can {{multiply}} it out {{and check}} that all the coefficients are 0. However, this takes exponential time. In general, a polynomial can be algebraically represented by an <b>arithmetic</b> <b>formula</b> or circuit.|$|E
40|$|We {{introduce}} an algebraic proof {{system that}} manipulates multilinear <b>arithmetic</b> <b>formulas.</b> We {{show that this}} proof system is fairly strong, even when restricted to multilinear <b>arithmetic</b> <b>formulas</b> of a very small depth. Specifically, we show the following: 1. Algebraic proofs manipulating depth 2 multilinear <b>arithmetic</b> <b>formulas</b> polynomially simulate Resolution, Polynomial Calculus (PC) and Polynomial Calculus with Resolution (PCR) proofs; 2. Polynomial size proofs manipulating depth 3 multilinear <b>arithmetic</b> <b>formulas</b> for the functional pigeonhole principle; 3. Polynomial size proofs manipulating depth 3 multilinear <b>arithmetic</b> <b>formulas</b> for Tseitin’s graph tautologies. By known lower bounds, this demonstrates that algebraic proof systems manipulating depth 3 multilinear <b>arithmetic</b> <b>formulas</b> are strictly stronger than Resolution, PC and PCR, and have an exponential gap over bounded-depth Frege for both the functional pigeonhole principle and Tseitin’s graph tautologies. We also illustrate a connection between lower bounds on multilinear proofs and lower bounds on multilinear arithmetic circuits. In particular, we show that (an explicit) superpolynomial size separation between proofs manipulating general arithmetic circuits and proofs manipulating multilinear arithmetic circuits implies a super-polynomial size lower bound on multilinear arithmetic circuits for an explicit family of polynomials...|$|R
40|$|Devising an {{efficient}} deterministic – {{or even a}} non-deterministic sub-exponential time – algorithm for testing polynomial identities is a fundamental problem in alge-braic complexity and complexity at large. Motivated by this problem, {{as well as by}} results from proof complexity, we investigate the complexity of proving polynomial identities. To this end, we study a class of equational proof systems, of varying strength, operating with polynomial identities written as <b>arithmetic</b> <b>formulas</b> over a given ring. A proof in these systems establishes that two <b>arithmetic</b> <b>formulas</b> compute the same polynomial, and consists of a sequence of equations between polynomials, written as <b>arithmetic</b> <b>formulas,</b> where each equation in the sequence is derived from previous equations by means of the polynomial-rin...|$|R
40|$|In {{this paper}} we prove near {{quadratic}} lower bounds for depth- 3 <b>arithmetic</b> <b>formulae</b> over fields of characteristic zero. Such bounds are {{obtained for the}} elementary symmetric functions, the (trace of) iterated matrix multiplication, and the determinant. As corollaries we get the first nontrivial lower bounds for computing polynomials of constant degree, and {{a gap between the}} power depth- 3 <b>arithmetic</b> <b>formulas</b> and depth- 4 <b>arithmetic</b> <b>formulas.</b> The main technical contribution relates the complexity of computing a polynomial in this model to the wealth of partial derivatives it has on every affine subspace of small co-dimension. Lower bounds for related models utilize an algebraic analog of Nečhiporuk lower bound on Boolean formulae...|$|R
5000|$|If the oracle {{is for a}} {{decision}} problem, Om is always [...] "Yes" [...] or [...] "No", which we may formalize as 0 or 1. Suppose the decision problem itself can be formalized by a first-order <b>arithmetic</b> <b>formula</b> [...]Then T halts on n after at most n1 steps {{if and only if}} the following formula is satisfied: ...|$|E
5000|$|... rewrote {{the logical}} {{definition}} of antichains {{into the following}} <b>arithmetic</b> <b>formula</b> for the Dedekind numbers:where [...] is the th bit of the number ,which can be written using the floor function asHowever, this formula is not helpful for computing the values of M(n) for large n due to {{the large number of}} terms in the summation.|$|E
5000|$|Let [...] abbreviate [...] {{successive}} {{applications of}} the successor function, starting from [...] Boolos then asserts (the details are only sketched) that there exists a defined predicate [...] that comes out true iff an <b>arithmetic</b> <b>formula</b> containing [...] symbols names the number [...] This proof sketch contains the only mention of Gödel numbering; Boolos merely assumes that every formula can be so numbered. Here, a formula names the number [...] iff the following is provable: ...|$|E
30|$|There {{are various}} <b>arithmetic</b> <b>formulas</b> {{used for the}} {{assessment}} of IVC collapse, the most common being the collapsibility index [(IVC max diameter- IVC min diameter)/IVC max diameter]. Some have advocated for using clinical gestalt of IVC collapse to estimate volume status [134] (Fields JM, AEM).|$|R
50|$|Formulas for prime-counting {{functions}} {{come in two}} kinds: <b>arithmetic</b> <b>formulas</b> and analytic formulas. Analytic formulas for prime-counting {{were the}} first used to prove the prime number theorem. They stem {{from the work of}} Riemann and von Mangoldt, and are generally known as explicit formulas.|$|R
5000|$|The range variant {{also uses}} <b>arithmetic</b> <b>formulas,</b> but allows {{operation}} {{on a large}} alphabet. Intuitively, it divides the set of natural numbers into size [...] ranges, and split each of them in identical way into subranges of proportions given by the assumed probability distribution.|$|R
5000|$|An {{arithmetic}} circuit [...] {{over the}} field [...] and the set of variables [...] is a directed acyclic graph. as follows. Every node in it with indegree zero is called an input gate and is labeled by either a variable [...] or a field element in [...] Every other gate is labeled by either [...] or [...] {{in the first case}} it is a sum gate and in the second a product gate. An <b>arithmetic</b> <b>formula</b> is a circuit in which every gate has outdegree one (and so the underlying graph is a directed tree).|$|E
50|$|A USGA {{handicap}} {{is calculated}} {{with a specific}} <b>arithmetic</b> <b>formula</b> that approximates how many strokes above or below par a player {{might be able to}} play, based on the ten best scores of their last twenty rounds. The R&A (now a separate organization from the Royal and Ancient Golf Club), based in St Andrews, Scotland has no jurisdiction over handicapping. The administration of handicapping systems in countries affiliated to the R&A {{is the responsibility of the}} national golf associations of those countries. These bodies specify slightly different ways to perform this calculation for players. The details of these calculations are presented below.|$|E
5000|$|In Swiss politics, {{the magic}} formula (Zauberformel, formule magique, formula magica) is an <b>arithmetic</b> <b>formula</b> for {{dividing}} the seven executive seats of the Swiss Federal Council between the four ruling parties. The formula was first applied in 1959. It gave the Free Democratic Party (now FDP.The Liberals), the Christian Democratic People's Party and the Social Democratic Party each two seats, while the Party of Farmers, Traders and Independents (now the Swiss People's Party) received one seat. [...] The formula {{is not an}} official law, but rather an agreement amongst the rather large coalition of four parties. After the 2003 general elections, the formula was modified, giving two seats to the SVP/UDC {{at the expense of}} the Christian Democrats. This was because the Swiss People's Party received 29% of the votes during the election of the parliament making it Switzerland's largest party by votes.|$|E
40|$|We {{show that}} any {{explicit}} example for a tensor A: [n] r → F with tensor-rank ≥ nr·(1 −o(1)), (where r = r(n) ≤ log n / log log n), implies an explicit super-polynomial lower {{bound for the}} size of general <b>arithmetic</b> <b>formulas</b> over F. This shows that strong enough lower bounds for the size of <b>arithmetic</b> <b>formulas</b> of depth 3 imply superpolynomial lower bounds for the size of general <b>arithmetic</b> <b>formulas.</b> One component of our proof is a new approach for homogenization and multilinearization of <b>arithmetic</b> <b>formulas,</b> that gives the following results: We show that for any n-variate homogenous polynomial f of degree r, if there exists a (fanin- 2) (formula of size s and depth d for f then there exists a homogenous (d+r+ 1)) formula of size O r · s for f. In particular, for any r ≤ log n, if there exists a polynomial size formula for f then there exists a polynomial size homogenous formula for f. This refutes a conjecture of Nisan and Wigderson [NW 95] and shows that superpolynomial lower bounds for homogenous formulas for polynomials of small degree imply super-polynomial lower bounds for general formulas. We show that for any n-variate set-multilinear polynomial f of degree r, if there exists a (fanin- 2) formula of size s and depth d for f then there exists a set-multilinear formula of size O ((d + 2) r · s) for f. In particular, for any r ≤ log n / log log n, if there exists a polynomial size formula for f then there exists a polynomial size set-multilinear formula for f. This shows that super-polynomial lower bounds for set-multilinear formulas for polynomials of small degree imply super-polynomial lower bounds for general formulas...|$|R
40|$|We {{present a}} new abstraction-based {{framework}} for deciding satis ability of quanti er-free Presburger <b>arithmetic</b> <b>formulas.</b> Given a Presburger formula, our algorithm invokes a SAT solver {{to produce proofs}} of unsatis ability of approximations of. These proofs are in turn used to generate abstractions of as inputs to a theorem prover...|$|R
40|$|We {{present a}} new abstraction-based {{framework}} for deciding satisfiability of quantifier-free Presburger <b>arithmetic</b> <b>formulas.</b> Given a Presburger formula &phi;, our algorithm invokes a SAT solver {{to produce proofs}} of unsatisfiability of approximations of &phi;. These proofs are in turn used to generate abstractions of &phi; as inputs to a theorem prover. The SAT-encodings [...] ...|$|R
40|$|AbstractIn {{this note}} {{we show that}} {{probabilistic}} termination of concurrent programs is in many cases much simpler than the “fair” one. For a wide class of definitions of probabilistic termination we may express termination by π 02 <b>arithmetic</b> <b>formula,</b> whereas the “fair” termination can be expressed only by Π| second-order <b>arithmetic</b> <b>formula.</b> Proof of “fair” termination usually needs induction on recursive ordinals, but proof of probabilistic termination has the complexity equivalent to that of deterministic program termination...|$|E
40|$|We prove a {{separation}} between monotone and general arithmetic formulas for polynomials of constant degree. We {{give an example}} of a polynomial C in n vari-ables and degree k which is computable by a homogeneous <b>arithmetic</b> <b>formula</b> of size O(k 2 n 2), but every monotone formula computing C requires size (n/kc) Ω(log k), with c ∈ (0, 1). Since the upper bound is achieved by a homogeneous <b>arithmetic</b> <b>formula,</b> we also obtain {{a separation}} between monotone and homogeneous formulas, for polynomials of constant degree. ...|$|E
40|$|AbstractIn 1997 {{the author}} found a {{criterion}} for the Riemann hypothesis for the Riemann zeta function, involving the nonnegativity of certain coefficients {{associated with the}} Riemann zeta function. In 1999 Bombieri and Lagarias obtained an <b>arithmetic</b> <b>formula</b> for these coefficients using the “explicit formula” of prime number theory. In this paper, the author obtains an <b>arithmetic</b> <b>formula</b> for corresponding coefficients associated with the Euler product of Hecke polynomials, which is essentially a product of L-functions attached to weight 2 cusp forms (both newforms and oldforms) over Hecke congruence subgroups Γ 0 (N). The nonnegativity of these coefficients gives a criterion for the Riemann hypothesis for all these L-functions at once...|$|E
40|$|In this paper, we obtain analogues of Jacobi's {{derivative}} formula {{in terms}} of the theta constants with rational characteristics. For this purpose, we use the <b>arithmetic</b> <b>formulas</b> of the number of representations of a natural number n, (n= 1, 2, [...] .) as the sum of two squares, or the sum of a square and twice a square...|$|R
40|$|Abstract. We {{consider}} {{an extension of}} integer linear arithmetic with a “star ” operator takes closure under vector addition of the solution set of a linear arithmetic subformula. We show that the satisfiability problem for this extended language remains in NP (and therefore NP-complete). Our proof uses semilinear set characterization of solutions of integer linear <b>arithmetic</b> <b>formulas,</b> {{as well as a}} generalization of a recent result on sparse solutions of integer linear programming problems. As a consequence of our result, we present worst-case optimal decision procedures for two NP-hard problems that were previously not known to be in NP. The first is the satisfiability problem for a logic of sets, multisets (bags), and cardinality constraints, which has applications in verification, interactive theorem proving, and description logics. The second is the reachability problem for a class of transition systems whose transitions increment the state vector by solutions of integer linear <b>arithmetic</b> <b>formulas.</b> ...|$|R
40|$|AbstractThe aim of {{the paper}} is to present visual {{derivation}} of classic <b>arithmetic</b> <b>formulae</b> by a computer. The GEOMETER'S SKETCHPAD software {{is used for the}} purpose. The approach has been experienced with 6 -grade students, who are already familiar with powers. The results are encouraging, since the students show successful application of the formulae that have been taught. Several applications are proposed...|$|R
40|$|Abstract. In 1997 {{the author}} [11] found a {{criterion}} for the Riemann hypothesis for the Riemann zeta function, involving the nonnegativity of certain coefficients {{associated with the}} Riemann zeta function. In 1999 Bombieri and Lagarias [2] obtained an <b>arithmetic</b> <b>formula</b> for these coefficients using the “explicit formula ” of prime number theory. In this paper, the author obtains an <b>arithmetic</b> <b>formula</b> for corresponding coefficients associated with the Euler product of Hecke polynomials, which is essentially a product of L-functions attached to weight 2 cusp forms (both newforms and oldforms) over Hecke congruence subgroups Γ 0 (N). The nonnegativity of these coefficients gives a criterion for the Riemann hypothesis for all these L-functions at once. 1...|$|E
40|$|We give a {{deterministic}} {{polynomial time}} algorithm for polynomial identity testing in the following two cases: 1. Non Commutative Arithmetic Formulas: The algorithm gets as an input an <b>arithmetic</b> <b>formula</b> in the non-commuting variables x 1, [...] ., xn and determines {{whether or not the}} output of the formula is identically 0 (as a formal expression) ...|$|E
40|$|AbstractIn this paper, we prove an {{explicit}} asymptotic formula for the <b>arithmetic</b> <b>formula</b> of the Li coefficients established in Omar and Mazhouda (2007) [10] and Omar and Mazhouda (2010) [11]. Actually, for any function F(s) in the Selberg class S, we haveRH⇔λF(n) =dF 2 nlogn+cFn+O(nlogn), withcF=dF 2 (γ− 1) + 12 log(λQF 2),λ=∏j= 1 rλj 2 λj, where γ is the Euler constant...|$|E
40|$|We {{consider}} the predicative modal provability logic of Peano Arithmetic where {{the interpretation of}} each atomic modal formulas is required to be belong to the set of <b>arithmetic</b> <b>formulas</b> of complexity Sigma_ 0 ^n. We show that for distinct values of n the corresponding modal formulas form a strict hierarchy {{and each of them}} is complete for the class Pi^ 0 _ 2...|$|R
40|$|Abstract. Starting {{point of}} our work is a {{previous}} paper by Flarup, Koiran, and Lyaudet [5]. There the expressive power of certain fami-lies of polynomials is investigated. Among other things it is shown that polynomials arising as permanents of bounded tree-width matrices have the same expressiveness as polynomials given via <b>arithmetic</b> <b>formulas.</b> A natural question is how expressive such restricted permanent polynomi-als are with respect to other graph-theoretic concepts for representing polynomials over a field K. One such is representing polynomials by for-mulas in conjunctive normal form. Here, a monomial occurs according to whether the exponent vector satisfies a given CNF formula or not. We can in a canonical way assign a graph to such a CNF formula and speak about the tree-width of the related CNF polynomial. In this paper we show that the expressiveness of CNF polynomials of bounded tree-width again gives precisely <b>arithmetic</b> <b>formulas.</b> We then study how far the approach of evaluating subclasses of permanents effi...|$|R
40|$|A new {{approach}} to Buss’s NC¹ algorithm [Proc. 19 thACM Symposium on Theory of Computing, Association for Computing Machinery, New York, 1987, pp. 123 - 131] for evaluation of Boolean formulas is presented. This problem is shown to be complete for NC¹ over AC¬ reductions. This approach is then used to solve the more general problem of evaluating <b>arithmetic</b> <b>formulas</b> by using <b>arithmetic</b> circuits...|$|R
40|$|The {{proof of}} Gödel’s first incompleteness theorem {{includes}} {{the construction of}} an <b>arithmetic</b> <b>formula</b> G that represents the metamathematical statement: the formula G is not provable. This article examines the formula G (of Gödel). We demonstrated that if the formula G exists, then the Gödel’s number of the formula G is not a finite number. 1 The formula of Göde...|$|E
40|$|Datalog Programs with {{arithmetic}} constraints {{have received}} considerable attention {{during the last}} few years. They have been studied as special forms of Constraint Logic Programming languages, as models for temporal databases, and also as tools for Theorem Proving. We define in this paper a class of Datalog programs over integers for which the bottomup evaluation always produces a linear <b>arithmetic</b> <b>formula.</b> A program within this class is composed of three recursive rules. Each rule contains one arithmetic atom in its body and increments its arithmetic arguments. We adopt a geometric approach to construct the output of the bottom-up evaluation process: each application of the immediate consequence operator T is represented either as an horizontal movement, or as a vertical movement, or as a transversal movement. In this report, we are more interested in showing that the output of this programs can be expressed by a (finite) <b>arithmetic</b> <b>formula,</b> rather than expressing it explicitly. R'esu [...] ...|$|E
40|$|We {{present a}} method for characterizing the least fixed-points of a certain class of Datalog {{programs}} in Presburger arithmetic. The method consists in applying some rules of decomposition that transform general sets of computation paths into "flat" ones. We apply the method for expressing the reachability relation of Petri nets as a linear <b>arithmetic</b> <b>formula</b> {{in order to prove}} (or disprove) their safety properties...|$|E
40|$|Devising an {{efficient}} deterministic – {{or even a}} nondeterministic sub-exponential time – algorithm for testing polynomial identities is a fundamental problem in algebraic complexity and complexity at large. Motivated by this problem, {{as well as by}} results from proof complexity, we investigate the complexity of proving polynomial identities. To this end, we study a class of equational proof systems, of varying strength, operating with polynomial identities written as <b>arithmetic</b> <b>formulas</b> over a given ring. A proof in these systems establishes that two <b>arithmetic</b> <b>formulas</b> compute the same polynomial, and consists of a sequence of equations between polynomials, written as <b>arithmetic</b> <b>formulas,</b> where each equation in the sequence is derived from previous equations by means of the polynomial-ring axioms. We establish the first non-trivial upper and lower bounds on the size of equational proofs of polynomial identities, as follows: 1) Polynomial-size upper bounds on equational proofs of identities involving symmetric polynomials and interpolation-based identities. In particular, we show that basic properties of the elementary symmetric polynomials are efficiently provable already in equational proofs operating with depth- 4 formulas, over infinite fields. This also yields polynomial-size depth- 4 proofs of the Newton identities, providing a positive answer to a question posed by Grigoriev and Hirsch [6]. 2) Exponential-size lower bounds on (full, unrestricted) equational proofs of identities over certain specific rings. 3) Exponential-size lower bounds on analytic proofs operating with depth- 3 formulas, under a certain regularity condition. The “analytic ” requirement is, roughly, a condition that forbids introducing arbitrary formulas in a proof and the regularity condition is an additional structural restriction. 4) Exponential-size lower bounds on one-way proofs (of unrestricted depth) over infinite fields. Here, one-wa...|$|R
40|$|In [Kal 89], Kaltofen {{proved the}} {{remarkable}} fact that multivariate polynomial factor-ization {{can be done}} efficiently, in randomized polynomial time. Still, {{more than twenty years}} after Kaltofen’s work, many questions remain unanswered regarding the complexity aspects of polynomial factorization, such as the question of whether factors of polynomi-als efficiently computed by <b>arithmetic</b> <b>formulas</b> also have small <b>arithmetic</b> <b>formulas,</b> asked in [KSS 14], and the question of bounding the depth of the circuits computing the factors of a polynomial. We are able to answer these questions in the affirmative for the interesting class of polynomials of bounded individual degrees, which contains polynomials such as the deter-minant and the permanent. We show that if P (x 1, [...] ., xn) is a polynomial with individual degrees bounded by r that can be computed by a formula of size s and depth d, then any factor f(x 1, [...] ., xn) of P (x 1, [...] ., xn) can be computed by a formula of size poly((rn) r, s) and depth d+ 5. This partially answers the question above posed in [KSS 14], who asked i...|$|R
40|$|In recent years, a very {{exciting}} and promising method for proving lower bounds for arithmetic circuits has been proposed. This method combines the method of depth reduction developed {{in the works of}} Agrawal-Vinay [AV 08], Koiran [Koi 12] and Tavenas [Tav 13], {{and the use of the}} shifted partial derivative complexity measure developed in the works of Kayal [Kay 12] and Gupta et al [GKKS 13 a]. These results inspired a flurry of other beautiful results and strong lower bounds for various classes of arithmetic circuits, in particular a recent work of Kayal et al [KSS 13] showing superpolynomial lower bounds for regular <b>arithmetic</b> <b>formulas</b> via an improved depth reduction for these formulas. It was left as an intriguing question if these methods could prove superpolynomial lower bounds for general (homogeneous) <b>arithmetic</b> <b>formulas,</b> and if so this would indeed be a breakthrough in arithmetic circuit complexity. In this paper we study the power and limitations of depth reduction and shifted partial derivatives for <b>arithmetic</b> <b>formulas.</b> We do it via studying the class of depth 4 homogeneous arithmetic circuits. We show: (1) the first superpolynomial lower bounds for the class of homogeneous depth 4 circuits with top fan-in o(n). The core of our result is to show improved depth reduction for these circuits. (2) We show that improved depth reduction is not possible when the top fan-in is Ω(n). In particular this shows that the depth reduction procedure of Koiran and Tavenas [Koi 12, Tav 13] cannot be improved even for homogeneous formulas, thus strengthening the results of Fournier et al [FLMS 13] who showed that depth reduction is tight for circuits, and answering some of the main open questions of [KSS 13, FLMS 13]...|$|R
