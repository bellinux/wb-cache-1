6|19|Public
50|$|In May 1994, {{there were}} still three DEC KL-10s under TYMCOM-X. At this time, the network had {{approximately}} 5000 nodes in 30 foreign countries. A variety of protocols can be run over a single packet-switching-network, and Tymnet's most-used protocols were X.25, <b>asynchronous</b> <b>terminal</b> and host (ATI/AHI), and SNA.|$|E
50|$|A packet assembler/disassembler, {{abbreviated}} PAD is {{a communications}} device which provides multiple <b>asynchronous</b> <b>terminal</b> connectivity to an X.25 (packet-switching) network or host computer. It collects {{data from a}} group of terminals and places the data into X.25 packets (assembly). A PAD also does the reverse, it takes data packets from packet-switching network or host computer and returns them into a character stream that can be sent to the terminals (disassembly). A Frame Relay Assembler/Disassembler (FRAD) is a similar device for accessing Frame Relay networks.|$|E
5000|$|The {{system had}} a base memory of 4 KB of core memory with a 2 μs cycle time, {{expandable}} to 32 KB. It supported {{one to four}} input/output channels with up to 16 devices per channel. It offered a choice of line printers between 280 and 1250 lines per minute (lpm), a 400 cards per minute (cpm) card reader, a 160 columns per second card punch, a paper tape reader, a 2.48 MB disk storage unit, and 7 and 9-track half-inch magnetic tape drives. [...] An optional <b>asynchronous</b> <b>terminal</b> could be attached as a console.|$|E
5000|$|An early RAD modem, the SRM-3, was {{recognized}} as the world's smallest in the 1992 Guinness Book of World Records. Used for connecting <b>asynchronous</b> <b>terminals</b> to host computers, it measured 2.4 in by 1.2 in by [...]08 in.|$|R
50|$|The {{digital line}} card {{supports}} voice only or simultaneous voice and data service over a single twisted pair of standard telephone wiring. When a Meridian digital telephone {{is equipped with}} the data option, an <b>asynchronous</b> ASCII <b>terminal,</b> or a PC acting as an <b>asynchronous</b> ASCII <b>terminal,</b> can {{be connected to the}} system through the digital telephone.|$|R
50|$|DECserver 100The DECserver 100 Terminal Server was {{a network}} {{terminal}} switch for Ethernet Local Area Networks, providing a convenient method to logically connect {{up to eight}} DIGITAL <b>asynchronous</b> <b>terminals</b> {{to one or more}} service nodes (hosts) on an Ethernet. Through the use of a simple command, users could establish a logical connection, called a session, to any local service node that implemented the LAT protocol.|$|R
5000|$|Historical note: The 3270 {{approach}} {{differed from}} lower-cost dumb terminals of the period, which were point-to-point and asynchronous. Commercial time-sharing users, an important segment of early CP/CMS and VM sites, relied on such devices {{because they could}} connect via 300- or 1200 bit/s modems over normal voice-grade telephone circuits. Installing a dedicated circuit for a 3270 was often not practical, economical, or timely.The 3270's block-oriented approach was more consistent with IBM's batch- and punched card-oriented view of computing, and was particularly important for IBM mainframes of the day. Unlike contemporary minicomputers, most IBM mainframes were not equipped for character-at-a-time interrupts. Dumb terminal support relied on terminal control units such as the IBM 270x (see IBM 3705) or Memorex 1270. These <b>asynchronous</b> <b>terminal</b> controllers assembled a line of characters, up to a fixed maximum length, until the RETURN key was pressed. Typing too many characters would result in an error, a familiar situation to users of the day. (Most data centers did not include this equipment, except as needed for dial-up access. The 3270 approach was preferred.)Block-oriented terminals like the 3270 made it practical to implement screen-oriented editors on mainframes [...] - [...] as opposed to line-oriented editors, the previous norm. This had been an important advantage of contemporary minicomputers and other character-oriented systems, and its availability via the 3270 was warmly welcomed.A gulf developed between the 3270 world, focused on page-oriented mainframe transaction processing (especially via CICS), and the asynch terminal world, focused on character-oriented minicomputers and dial-up timesharing. <b>Asynchronous</b> <b>terminal</b> vendors gradually improved their products {{with a range of}} smart terminal features, usually accessed via escape sequences. However, these devices rarely competed for 3270 users; IBM maintained its dominance over mainframe data center hardware purchase decisions.Viewed in retrospect, there was a major philosophical divergence between block-oriented and character-oriented computing. <b>Asynchronous</b> <b>terminal</b> controllers and 3270s both provided the mainframe with block-oriented interactions [...] - [...] essentially, they made the terminal input look like a card reader. This approach, preferred by IBM, {{led to the development of}} entirely different user interface paradigms and programming strategies. Character-oriented systems evolved differently. The difference is apparent when comparing the atomic transaction approach of dominant CICS with the interactive, stream-oriented style of UNIX. VM/CMS evolved somewhere between these extremes. CMS has a command-driven, stateful, interactive environment, rather than adopting the CICS approach of a stateless transaction-oriented interface. Yet CMS responds to page- or line-at-a-time interaction, instead of character interrupts.|$|E
5000|$|A minimal {{system was}} {{delivered}} in a single 19&Prime; rack about 60&Prime; high with the card cage in the bottom, the disk drive in the middle, the tape drive above it, then the 2 inch high control panel with a floppy disk drive and ignition key on the top. This was considered very compact at the time. At least one machine in Australia spend six months installed in a retired outdoor lavatory with an air-conditioner replacing the louvered window and the system console terminal {{sitting on top of}} the cabinet. Administration tasks were performed al-fresco. The only indicator on the control panel was an 8 segment bar graph LED display that displayed average CPU usage when the machine was running and a [...] "Cylon Eye" [...] pattern when the machine stopped unexpectedly. The machine was low enough that the console (a monochrome <b>asynchronous</b> <b>terminal)</b> could rest on top.|$|E
50|$|There {{were several}} {{other types of}} {{partitions}} that could be installed, for the retail terminals an MD (multi-data IOC) was used, which could control up to 10 or them. These devices buffered an entire transaction which was sent in a burst as a speed of 1200 bits per second. As all transfers were made directly from the partition into memory, it was only possible to have one active transmission per terminal at a time, which could cause some devices to 'time out' during transmission on a busy system. In addition, three types of serial communications controllers were available, a synchronous communications adapter, which was capable of emulating the IBM 2780 terminal of the day, however in ASCII, not in EBCDIC, and an asynchronous {{version of the same}} was also available, but both were limited to line speeds of no more than 2400 bps, the maximum dial-up rate of the day. Another serial controller called the <b>Asynchronous</b> <b>Terminal</b> Adapter (ATA), enable a character-oriented terminal to be interconnect, at a maximum speed of 300 bps.|$|E
5000|$|The DATANET-30 used {{magnetic}} core memory with a cycle time of 6.94 μs. The word size was 18 bits and memory {{was available in}} sizes of 4K, 8K, or 16K words. The system could attach up to 128 <b>asynchronous</b> <b>terminals,</b> nominally at speeds of up to [...] "3000 bits per second", but usually limited to the 300 bits per second supported by standard common-carrier facilities of the time.|$|R
5000|$|In <b>asynchronous</b> <b>terminals</b> {{data can}} flow in any {{direction}} at any time. In synchronous terminals a protocol controls who may send data when. IBM 3270-based terminals used with IBM mainframe computers are an example of synchronous terminals. They operate in an essentially [...] "screen-at-a-time" [...] mode (also known as block mode). Users can make numerous changes to a page, before submitting the updated screen to the remote machine as a single action.|$|R
40|$|This paper {{describes}} a research on access method for the multi users system. The {{purpose is to}} enable an application system communicate with several other terminals simultaneously. The developed system is not restricted to synchronous terminals such as IBM 3270 or other compatible terminals but also to <b>asynchronous</b> <b>terminals</b> including microcomputers. The experiment is carried out on the IBM 4341 main frame, using the facilities at the Institute of Computer Science. The discussion is focussed on the approaches or methods that were adopted, design and system implementation...|$|R
50|$|While the PAD {{function}} {{defined by}} X.28 and X.29 specifically supported <b>asynchronous</b> character <b>terminals,</b> PAD equivalents {{were developed to}} support {{a wide range of}} proprietary intelligent communications devices, such as those for IBM System Network Architecture (SNA).|$|R
50|$|DECserver 500/550The DECserver 500 series server was an Ethernet Communications Server for Ethernet Local Area Networks (LANs), {{configurable}} {{to provide}} 128 EIA-423-A or 64 RS-232 asynchronous port connections to DEC <b>asynchronous</b> <b>terminals.</b> Both RS-232, via the 8 port CXY08 Q-Bus communication option card, and EIA-423-A, via the 16 port CXA16 communication option card and EIA-422 16 port CXB16 communication option card could be mixed together in any combination {{from two to}} eight cards in one server. The DECserver 510 and 550 would also support CXM04 IBM 3270 Terminal option cards, but on VMS only. The DECserver 500 series server provided a convenient method to connect logically up to 128 Digital <b>asynchronous</b> <b>terminals</b> {{to one or more}} service nodes (hosts) on an Ethernet. The DECserver 500 series server also allowed for ULTRIX host-initiated connections to asynchronous printers. The DECserver 500 series server implemented the LAT protocol for communication with service nodes that implemented this protocol on the same Ethernet. The 500 series differed from other DECservers in that the configuration was not stored in nonvolatile storage locally on the server itself, but rather downline loaded from a file on a MOP host. Configuration changes which needed to remain permanently had to be changed locally on the DECserver and also updated on the MOP host using the OpenVMS Terminal Server Configurator utility (SYS$COMMON:DECSERVERDS5CFG on VMS or /usr/lib/dnet/tsc on Ultrix) so that it would return the next reboot. The 500 and 550 models are based on the PDP-11/53 chipset with 512kb or 1.5mb of on-board ram and can be reverted to a full PDP-11/53 system with a PROM swap and console port re-wire.|$|R
5000|$|DECserver 200The DECserver 200 was {{a network}} {{terminal}} switch for Ethernet Local Area Networks, providing a convenient method to logically connect {{up to eight}} Digital <b>asynchronous</b> <b>terminals</b> {{to one or more}} service nodes (hosts) on an Ethernet. The DECserver 200 also provided the capability to connect host systems that did not support the LAT protocol, Digital personal computers, and dial-out modems directly to ports on the server. The DECserver 200 implemented the Local Area Transport (LAT) protocol for communication with service nodes that implemented this protocol on the same Ethernet. There were two options of DECserver 200 hardware: the DECserver 200/MC, which contained RS-232-C lines with full modem control (DSRVB-AB) and the DECserver 200/DL, which contained DECconnect lines with data leads only (DSRVB-BB) ...|$|R
50|$|DECserver 300The DECserver 300 Terminal Server was an Ethernet Communications Server for Ethernet Local Area Networks, {{providing}} a convenient method to logically connect up to sixteen digital <b>asynchronous</b> <b>terminals</b> {{to one or}} more service nodes (hosts) on an Ethernet. The DECserver 300 used MMJs (Modified Modular Jacks) for the attachment of asynchronous devices. The MMJ segregated a Data from a Voice connection. The DECserver 300 utilized the EIA 423-A electrical interface standard for local connections. EIA 423-A is compatible with the EIA 232-D interface and supports DTR/DSR (Data Terminal Ready/Data Set Ready) signals. EIA 423-A supports longer cable runs and higher signaling speeds. The DECserver 300 implemented the LAT protocol for communication with service nodes that implemented this protocol on the same Ethernet. The DECserver 300 also implemented the TCP/IP protocol suite for communication with host systems that implemented TCP/IP.|$|R
5000|$|By 1994 the [...] "3174 Establishment Controller" [...] {{supported}} {{features such}} as attachment to multiple hosts via token ring, Ethernet, or X.25 {{in addition to the}} standard channel attach or SDLC, and terminal attachment via twisted pair, token ring or Ethernet in addition to co-ax. They also supported attachment of <b>asynchronous</b> ASCII <b>terminals,</b> printers, and plotters alongside 3270 devices.|$|R
5000|$|X.28, ITU-T {{standard}} {{specifying the}} interface between <b>asynchronous</b> character-mode data <b>terminal</b> equipment (DTE), such as computer terminals, and a Packet Assembler/Disassembler (PAD) that connects the DTE to a packet switched network such as an X.25 network ...|$|R
5000|$|Due to {{the limited}} address space of the 6809 (64 kB) and {{hardware}} limitations, the main memory space for the UniFLEX kernel {{as well as for}} any running process had to be smaller than 56 kB (code + data). This was achieved by writing the kernel and most user space code entirely in assembly language, and by removing a few classic Unix features, such as group permissions for files. Otherwise, UniFLEX was very similar to Unix Version 7, though some command names were slightly different. There was no technical reason for the renaming apart from achieving some level of command-level compatibility with its single-user sibling FLEX. By simply restoring the Unix style names, a considerable degree of [...] "Unix Look & Feel" [...] could be established, though due to memory limitations the command line interpreter (shell) was less capable than the Bourne Shell known from Unix Version 7. Memory management included swapping to a dedicated portion of the system disk (even on floppies) but only whole processes could be swapped in and out, not individual pages. This caused swapping to be a very big hit on system responsiveness, so memory had to be sized appropriately. However UniFLEX was an extremely memory-efficient operating system. Machines with less than a megabyte of RAM serving a dozen of <b>asynchronous</b> <b>terminals</b> were not uncommon and worked surprisingly well.|$|R
50|$|The {{first public}} dial-in {{networks}} used <b>asynchronous</b> TTY <b>terminal</b> protocols {{to reach a}} concentrator operated in the public network. Some networks, such as CompuServe, used X.25 to multiplex the terminal sessions into their packet-switched backbones, while others, such as Tymnet, used proprietary protocols. In 1979, CompuServe became the first service to offer electronic mail capabilities and technical support to personal computer users. The company broke new ground again in 1980 as the first to offer real-time chat with its CB Simulator. Other major dial-in networks were America Online (AOL) and Prodigy that also provided communications, content, and entertainment features. Many bulletin board system (BBS) networks also provided on-line access, such as FidoNet which was popular amongst hobbyist computer users, many of them hackers and amateur radio operators.|$|R
50|$|DECserver 900TMThe DECserver 900TM is a 32-port {{network access}} server that connects <b>asynchronous</b> devices, {{including}} <b>terminals,</b> printers, modems, or PCs to an Ethernet {{local area network}} (LAN). The DECserver 900TM is configured with 32 MJ8 (RJ-45) connectors, and provides limited modem control with the 8-pin connectors. Each port supports sixteen data rates from 75 bit/s to 115.2 kbit/s. The DECserver 900TM includes 4 MB of standard memory, and can be expanded to 8 MB.|$|R
40|$|Abstract — In {{high density}} (HD) WLANs, packet losses can occur due to hidden <b>terminals</b> (<b>asynchronous</b> interference) or {{collisions}} (synchronous interference). Without differentiating above packet losses, the standard backoff algorithm of IEEE 802. 11 with binary exponential backoff (BEB) can greatly degrade throughput and fairness. In this work, we exploit differentiated PER (packet error rate) {{to propose a}} novel CWTO (joint Contention Window and Transmission Opportunity) adaptation algorithm to improve the aggregate throughput as well as network fairness for multi-cell HD WLANs. Contention Window and Transmission Opportunity adaptation are dedicated to throughput maximization and fairness provision respectively and their effectiveness supported by extensive simulation results...|$|R
50|$|DECserver 900GM/GMXThe DECserver 900GM was {{a network}} access server that {{supported}} up to 16 full modem control ports, or 32 eight-wire partial modem control ports. The DECserver 900GMX was {{identical to the}} DECserver 900GM, except that it supported up to 8 full modem control ports, or 16 eight-wire partial modem control ports. The ports were used to connect <b>asynchronous</b> devices including <b>terminals,</b> printers, modems, or PCs to an Ethernet local area network (LAN). The DECserver 900GM was configured with four 68-pin D-connectors (two for the DECserver 900GMx), and provided full or limited modem control. Each port supported sixteen data rates from 75 bit/s to 115.2 kbit/s. The DECserver 900GM included 4 MB of standard memory, and could be expanded to 8 MB.|$|R
40|$|UnrestrictedThe {{presence}} of random fading in wireless channels constitutes {{one of the}} most challenging problems for achieving reliable digital communications. At the same time, fading also offers opportunities for improved performance via multi-dimensional communications, also known as multiple-input/multiple-output (MIMO) signaling. Given the ever increasing demand for high data rate in real-time applications involving transmission of voice, data and multimedia content, modern communication networks need be properly designed in order to fully extract the potential gains offered by MIMO schemes. In point-to-point communications, the use of multiple antennas at the transmitter and/or receiver constitutes one of the standard approaches to MIMO signaling, through the use of Space-Time Codes. Such codes enable dramatic performance improvement over single-antenna systems.; More recently, techniques for multi-hop distributed communications have also attracted considerable interest. An application where multi-hopping is necessary, for example, are the so called ad-hoc and sensor networks and the 802. 16 j (Multi-hop Relay) standard currently under development. Theoretical results have shown that, besides the power savings achieved bycommunicating over shorter distances, distributed communication can also achieve {{a significant portion of the}} MIMO gains via cooperation between terminals.; This thesis discusses new approaches for performance analysis of Space-Time Block Codes (STBCs). For point-to-point communication, besides yielding significantly tighter performance criteria in terms of the error-rate characterization, the new bounds are also used to design better codes. For multi-hop communication, cooperative distributed protocols based on distributed STBCs (DSTBCs) are proposed and analyzed; upper and lower bounds on the performance are also developed for this scenario, and the diversity gain is characterized for several multi-hop communication strategies. The impact of <b>asynchronous</b> communication acrossthe <b>terminals</b> on the performance is also investigated. Techniques for cooperative communication in the {{presence of}} multipath and intersymbol interference (ISI) environments are also proposed and investigated. In particular, time reversal DSTBCs (TR-STBCs) are considered. Due to the orthogonal properties of the code, it is shown that maximum likelihood detection can be performed at the receiver with a standard scalar Viterbi-type detector. Experimental results of the proposed scheme are reported and confirm the potential gains predicted in the analysis. Finally, the achievable rates of several half-duplex cooperation strategies are investigated. Up-per and lower bounds on the achievable outage mutual information (OMI), outage probability and throughput are developed. Interestingly, it is shown that multi-hop communication is not always superior to single-hop communication from an achievable rate perspective; while at low transmit energy multi-hop transmission is superior, at high energy it appears that the opposite is true...|$|R

