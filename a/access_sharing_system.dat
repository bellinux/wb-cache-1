0|10000|Public
50|$|Essential to any {{multitasking}} {{system is}} to safely and effectively <b>share</b> <b>access</b> to <b>system</b> resources. Access to memory must be strictly managed {{to ensure that no}} process can inadvertently or deliberately read or write to memory locations outside of the process's address space. This is done for the purpose of general system stability and data integrity, as well as data security.|$|R
30|$|The use of ‘services’ as {{the basic}} unit in the {{provision}} of <b>access</b> to <b>shared</b> IT <b>systems</b> and Internet-based applications is becoming more frequent, both because of the direct application of the concepts involved with the service-oriented computing (SOC) paradigm and because new and well-known applications are being made directly available over the Internet. One of the most interesting features of SOC is its ability to create new services out of existing ones, thus fostering the reuse of existing proven solutions.|$|R
40|$|Process races {{occur when}} {{multiple}} processes <b>access</b> <b>shared</b> operating <b>system</b> resources, such as files, without proper synchronization. We present {{the first study}} of real process races and the first system designed to detect them. Our study of hundreds of applications shows that process races are numerous, difficult to debug, and a real threat to reliability. To address this problem, we created RACEPRO, a system for automatically detecting these races. RACEPRO checks deployed systems in-vivo by recording live executions then deterministically replaying and checking them later. This approach increases checking coverage beyond the configurations or executions covered by software vendors or beta testing sites. RACEPRO records multiple processes, detects races in the recording among system calls that may concurrently <b>access</b> <b>shared</b> kernel objects, then tries different execution orderings of such system calls to determine which races are harmful and result in failures. To simplify race detection, RACEPRO models under-specified system calls based on load and store micro-operations. To reduce false positives and negatives, RACEPRO uses a replay and go-live mechanism to distill harmful races from benign ones. We have implemented RACEPRO in Linux, shown that it imposes only modest recording overhead, {{and used it to}} detect a number of previously unknown bugs in real applications caused by process races. Categories and Subject Descriptors...|$|R
40|$|Abstract: This paper {{addresses}} {{a problem of}} periodic job shop controlling where concurrent production flows have to compete safely (i. e. being starvation and deadlock-free) for <b>access</b> to <b>shared</b> <b>system</b> resources. A distributed production flow control policy that restricts production (transportation) batches to access workstations (the path sectors) in an FMS is proposed. A main problem is reduced to determining a pair (priority dispatching rules, an initial processes allocation), {{which can be treated}} as distributed control procedure. The processes are controlled by a set of dispatching rules that guarantee steady cyclic flow of the processes. Because various process flows lead to diverse values of the resource utilisation rate, a proposal of an automated prototyping procedure of a system is considered. The prototyping procedure allows determining desired system flows for assumed factors such as system capacity or the value of rate of resource utilisation. The result of this paper may be used along with the max-plus algebra formalism for an automated system flow prototyping. 1...|$|R
40|$|Graduation date: 1983 In {{process control}} systems where an entire process is being {{controlled}} by a computer, the component tasks of the system have to be monitored. An efficient message oriented environment could {{be an important factor}} in the optimization of such systems. In this paper we discuss the design of a real time message oriented system, where intertask communication is used for the synchronization and cooperation of the component tasks. Exchanging messages between tasks is one way to achieve such communication. A semaphore is a mechanism to coordinate exclusive <b>access</b> to <b>shared</b> <b>system</b> resources. In this design, semaphores are treated as special forms of messages. In a message oriented system, these characteristics should be provided to guarantee an efficient and safe environment. The SES system is designed to provide such an environment for the processes that run on the Real Time Task Supervisor version 1. 1 of August Systems series 300 computers, which guarantees a reliable and safe computer for process control applications...|$|R
40|$|Abstract:- This study {{generates a}} {{cognitive}} radio scenario based on non-persistent {{carrier sense multiple access}} (CSMA) and time division multiple <b>access</b> (TDMA) <b>systems</b> <b>sharing</b> a multi-channel wireless network. TDMA users are considered as primary users who can access the channel at any time, and non-persistent CSMA users are considered as secondary users who can share the channel {{when it is}} free. Then system performance is evaluated for a variety of proportions of non-persistent CSMA and TDMA traffic levels. Simulation results are presented and effect on throughput for different traffic ratio is shown. Further effect of reinforcement learning on system model is shown how throughput increases...|$|R
40|$|Will the Convention on Biological Diversity {{put an end}} to {{biological}} control? Under the Convention on Biological Diversity {{countries have}} sovereign rights over their genetic resources. Agreements governing the access to these resources and the sharing of the benefits arising from their use need to be established between involved parties. This also applies to species collected for potential use in biological control. Recent applications of <b>access</b> and benefit <b>sharing</b> principles have already made it difficult or impossible to collect and export natural enemies for biological control research in several countries. If such an approach is widely applied it would impede this very successful and environmentally safe pest management method based on the use of biological diversity. The International Organization for Biological Control of Noxious Animals and Plants has, therefore, created the "Commission on Biological Control and Access and Benefit Sharing". This commission is carrying out national and international activities to make clear how a benefit sharing regime might seriously frustrate the future of biological control. In addition, the IOBC Commission members published information on current regulations and perceptions concerning exploration for natural enemies and drafted some 30 case studies selected to illustrate a variety of points relevant to <b>access</b> and benefit <b>sharing.</b> In this article, we summarize our concern about the effects of <b>access</b> and benefit <b>sharing</b> <b>systems</b> on the future of biological contro...|$|R
40|$|Given {{that the}} {{operating}} system supports multiple processes, there may be various interactions among them. We will study three rather different types of interactions: • <b>Access</b> to <b>shared</b> operating <b>system</b> data structures. This issue is concernedwith internal operating system integrity. The problem is that several processesmayrequest {{the operating system}}to take relatedactions, which require updates to internal operating system data structures. Note that thereisonlyoneoperatingsystem, butmanyprocesses. Thereforetheoperating system data structures are shared in some way by all the processes. Updates to such shared data structures must be made with care, so that data is not corrupted. • Deadlock due to resource contention. This issue {{is concerned with the}} resource management functionality of the operating system. Consider a scenario in which one application acquires lots of memory, and another acquires access to a tape drive. Then the first application requests the tape, and the second requests more memory. Neither request ca...|$|R
50|$|A memory arbiter is {{a device}} {{used in a}} <b>shared</b> memory <b>system</b> to decide, for each memory cycle, which CPU {{will be allowed to}} <b>access</b> that <b>shared</b> memory.|$|R
40|$|To build a shared-memory {{programming}} {{model for}} FPGAs, a fast and highly parallel method of accessing the shared-memory is required. This thesis presents a {{first look at}} how to implement a coherent caching system in an FPGA. The coherent caching system consists of multiple distributed caches that implement the write-once coherence protocol, allowing efficient access to system memory while simplifying the user programming model. Several test applications are used to verify functionality, and assess performance of the current system. Results show that with a processor-based system, some applications could benefit from improvements to the coherence system, but for many applications, the current system is sufficient. However, the current coherent caching system is not suf-ficient for most hardware core based systems, because the faster memory <b>accesses</b> quickly saturate <b>shared</b> <b>system</b> resources. As well, the performance of distributed-memory sys-tems currently surpasses that of the coherent caching system. Performance results are promising, and given the potential for improvements, future work on this system is war-ranted. ii Dedication I dedicate this to my parents for their support throughout my education. And most of all, I’d like to dedicate this to Laura for her help, understanding, and patience throughout my Masters Degree. ii...|$|R
40|$|In virtualized data centers, {{multiple}} VMs are consolidated to <b>access</b> a <b>shared</b> storage <b>system.</b> Effective storage resource management, however, {{turns out}} to be challenging, as VM workloads exhibit various IO patterns and diverse loads. To multiplex the underlying hardware resources among VMs, providing fairness and isolation while maintaining high re-source utilization becomes imperative for effective storage resource management. Existing schedulers such as Linux CFQ or SFQ can provide some fairness, but it has been ob-served that synchronous IO tends to lose fair shares signifi-cantly when competing with aggressive VMs. In this paper, we introduce vFair, a novel scheduling framework that achieves IO resource sharing fairness among VMs, regardless of their IO patterns and workloads. The de-sign of vFair takes per-IO cost into consideration and strikes a balance between fairness and storage resource utilization. We have developed a Xen-based prototype of vFair and eval-uated it {{with a wide range of}} storage workloads. Our re-sults from both micro-benchmarks and real-world applica-tions demonstrate the effectiveness of vFair, with signifi-cantly improved fairness and high resource utilization...|$|R
40|$|An X 11 based <b>shared</b> memory <b>system,</b> {{permitting}} {{the implementation of}} a distributed water network monitoring and control software suite, is described in this paper. The application source code is in FORTRAN and <b>accesses</b> <b>shared</b> memory via a C library module requiring no other support packages. X 11 based distributed mutual exclusion algorithms, based on the unconventional use of Lamport's bakery algorithm, are evaluated. The system is compared with other methods of providing distributed shared memory...|$|R
40|$|In this paper, {{we propose}} relay {{assisted}} orthogonal frequency-division multiple <b>access</b> (OFDMA) spectrum <b>sharing</b> <b>system.</b> We then design downlink radio resource allocation schemes {{for the proposed}} system {{with the objective of}} maximizing the secondary service sum rate. Two cases are considered, in the first (second) case, we assume that the channel distribution information (CDI) (the channel side information (CSI)) for the channel between the secondary transmitter and primary receiver is available at the secondary base station. For both cases, we further consider the availability of imperfect CSI of the channel between the secondary base station and the relay stations and the channel between the relay stations and the secondary users. The computational complexity issue is then addressed by proposing suboptimal solutions. Extensive simulation studies show that the impact of imperfectness in channel estimation on the system performance can be controlled by employing relays in the system. Simulation studies are also conducted to compare the performance of the two earlier mentioned cases, which indicates that in case of imperfect CSI estimation, it is often better to use CDI and let the collision probability be managed through corresponding optimised radio resource allocation. Using CDI then eliminates the need for feedback signalling between primary and secondary systems. Copyright (c) 2012 John Wiley & Sons, Ltd...|$|R
40|$|Increasing thefts of {{sensitive}} data owned by {{individuals and organizations}} call for an integrated {{solution to the problem}} of storage security. Most existing systems are designed for personal use and do not address the unique demands of enterprise environments. An enterprise-class encrypting file system must take a cohesive approach towards solving the issues associated with data security in organizations, such as flexibility for multiuser scenarios, transparent remote <b>access</b> of <b>shared</b> file <b>systems</b> and defense against an array of threats including insider attacks while trusting the fewest number of entities. In this paper, we formalize a general threat model for storage security and discuss how existing systems tackle a narrow threat model and are thus susceptible to attacks. We present the conceptualization, design and implementation of TransCrypt, a kernel-space encrypting file system that incorporates an advanced key management scheme to provide a high grade of security while remaining transparent and easily usable. It examines difficult problems that are not considered by any existing system such as avoiding trusting the superuser account or privileged user-space processes and proposes novel solutions for them. These enhancements enable TransCrypt to protect against a wider threat model and address several lacunae in existing systems...|$|R
5000|$|... shared {{variable}} approach using some routines to <b>access</b> <b>shared</b> variables; ...|$|R
40|$|Within {{the rising}} access economy, {{products}} that were traditionally owned are now <b>accessed,</b> <b>shared,</b> rented or swapped. A {{recent research has}} shown that access-based consumption, when consumers pay a fee to have access to a product or service, threatens the relationship between consumers and objects. Specifically, access prevents consumers from enacting practices of appropriation and from gaining anything other than utility from this type of consumption. To address this issue, this research draws on the discipline of design and the theory of practice to examine how users form relationships with objects they use. Design, by changing consumer practices, could be the key in restoring the relationship between users and accessed objects. This article looks at a Parisian car <b>sharing</b> <b>system</b> to understand the role of design in restoring this relationship...|$|R
40|$|Capacity {{analysis}} for noncooperative interference environments Abstract — To enhance the wireless bandwidth utilization, {{new forms of}} innovative spectrum policies, dynamically sharing channels over time and space, have been discussed. Dynamic spectrum <b>access</b> lets <b>systems</b> <b>share</b> the spectrum, to achieve better bandwidth utilization and trunking gains. In this work, we consider a case where such access is performed in an uncoordinated fashion. The paradigm shift to open frequency bands implies a need to investigate and verify resulting capacity gains. Herein, we give a general method for evaluating system capacity subject to outage probability constraints over fading channels, in an unlicensed band environment with uncoordinated systems. The channel fading effects include both attenuation, shadowing and multipath propagation and {{we end up with}} expressions, which are solved by numerical integration. The spectrum sharing is here performed by means of autonomous dynamic channel allocation (DCA), and we compare two DCA methods, maximum SIR DCA and random DCA. I...|$|R
5000|$|Policies for <b>access,</b> <b>sharing</b> (re-use {{within the}} {{organisation}} and re-distribution to the public) ...|$|R
50|$|An {{integrated}} justice information system, {{commonly referred}} to as IJIS or Integrated Justice Information Sharing, is any computer network, system or architecture that allows justice practitioners and agencies to electronically <b>access</b> and <b>share</b> information between <b>systems</b> and/or across jurisdictional lines.|$|R
40|$|In this paper, {{we examine}} the physical-layer {{security}} for a spectrum <b>sharing</b> <b>system</b> consisting of multiple source-destination pairs, which dynamically <b>access</b> their <b>shared</b> spectrum for data transmissions {{in the presence of}} an eavesdropper. We propose a source cooperation (SC) aided opportunistic jamming framework for protecting the transmission confidentiality of the spectrum <b>sharing</b> <b>system</b> against eavesdropping. Specifically, when a source node is allowed to <b>access</b> the <b>shared</b> spectrum for data transmissions, another source is opportunistically selected in the spectrum <b>sharing</b> <b>system</b> to transmit an artificial noise for disrupting the eavesdropper without affecting the legitimate transmissions. We present two specific SC aided opportunistic jamming schemes, namely the SC aided random jammer selection (RJS) and optimal jammer selection (OJS), which are referred to as the SC-RJS and SC-OJS, respectively. We also consider the conventional non-cooperation as a baseline. We derive closed-form intercept probability expressions for the non-cooperation, SC-RJS and SC-OJS schemes, based on which their secrecy diversity gains are determined through an asymptotic intercept probability analysis in the high signal-to-noise ratio (SNR) region. It is proved that the conventional non-cooperation exhibits a secrecy diversity of zero, whereas the proposed SC-RJS and SC-OJS achieve a higher secrecy diversity of one. This also surprisingly means that no additional secrecy diversity gain is achieved by the optimal jammer selection compared to the random selection strategy. In addition, numerical results show that the intercept probability performance of the SC-OJS is always better than that of the SC-RJS and non-cooperation, even when the legitimate channel is worse than the eavesdropping channel. Comment: 11 pages, 6 figures, IEEE Transactions on Wireless Communications, 201...|$|R
5000|$|... void write_to_file (const std::string & message) { // mutex {{to protect}} file <b>access</b> (<b>shared</b> across threads) static std::mutex mutex; ...|$|R
40|$|This paper {{presents}} the Vote virtually <b>shared</b> memory <b>system,</b> which implements a symbiosis between architectural transparency and performance. In detail, the discussion will address two main topics. First, a new improved consistency maintenance approach will be presented. Then, {{a family of}} memory consistency models is introduced with each family member {{taking advantage of a}} parallel application's different fashions to <b>access</b> <b>shared</b> objects. The knowledge about an object's access pattern is used to minimize consistency maintenance. The family is based on the semantics of sequential consistency and, thus, still supports architectural transparency. Minimal system extensions are incrementally defined to provide efficiency through a higher degree of customization...|$|R
40|$|A common {{assumption}} underlying {{mutual exclusion}} algorithms in <b>shared</b> memory <b>systems</b> is that: b. A memory reference {{to an individual}} word is mutually exclusive. So reads question 28 and its suggested answer in the recent Self-Assessment Procedure on concurrency [8]. A mutual exclusion algorithm is needed to ensure that two concurrently executing processes do not <b>access</b> a <b>shared</b> resource at the same time. In a <b>shared</b> memory <b>system,</b> each word of memory is a shared resource. Assumption b states that two concurrently executing processes do not <b>access</b> this <b>shared</b> resource at the same time, {{which means that the}} memory system must implement its own mutual exclusion algorithm. Although a multiprocess algorithm that makes this assumption may be quite useful, it is not a solution to the mutual exclusion problem—the problem of achieving mutual exclusion in an asynchronous multiprocessor. (We would not say that an algorithm solves the P = NP problem if it assumes a primitive operation that computes an NP-complete function i...|$|R
40|$|We {{study the}} {{performance}} benefits of speculation in a release consistent software distributed <b>shared</b> memory <b>system.</b> We propose a new protocol, Speculative Home-based Release Consistency, that speculatively updates data at remote nodes {{to reduce the}} latency of remote memory accesses. Our protocol employs a predictor that uses patterns in past <b>accesses</b> to <b>shared</b> memory to predict future accesses. We have implemented our protocol in a software distributed <b>shared</b> memory <b>system</b> that runs on commodity hardware. We evaluate our protocol implementation {{on a number of}} software distributed shared memory benchmarks and show that it can result in significant performance improvements...|$|R
5000|$|SteekR: Online Convergent Hard Drive. SteekR {{allows the}} {{end-user}} to store, <b>access,</b> <b>share</b> and run multimedia and data files from anywhere. With SteekR, users can: ...|$|R
5000|$|TonidoPlug from CodeLathe, a SheevaPlug-based {{device that}} runs Tonido home server and NAS software, and {{allows users to}} <b>access,</b> <b>share</b> and sync files and media.|$|R
5000|$|Pluralism {{describes}} {{where people}} value cultural diversity {{and recognize the}} fundamental rights of people not like them {{to live in the}} same places and <b>access</b> <b>shared</b> resources.|$|R
40|$|This paper {{describes}} a new method for providing transparent fault tolerance for parallel applications {{on a network}} of workstations. We have designed our method {{in the context of}} <b>shared</b> object <b>system</b> called SAM, a portable run-time system which provides a global name space and automatic caching of shared data. SAM incorporates a novel design intended {{to address the problem of}} the high communication overheads in distributed memory environments and is implemented on a variety of distributed memory platforms. Our fundamental approach to providing fault tolerance is to ensure the replication of all data on more than one workstation using the dynamic caching already providedby SAM. The replicated data is accessible to the local processor like other cached data, making <b>access</b> to <b>shared</b> data faster and potentially offsetting some of the fault tolerance overhead. In addition, our method uses information available in SAM applications on how processes <b>access</b> <b>shared</b> data to enable several optimiza [...] ...|$|R
5000|$|Mass {{transit systems}} (Commuter rail systems, subways, tramways,ferries, trolleys, City Bicycle <b>Sharing</b> <b>system,</b> City Car <b>Sharing</b> <b>system</b> and bus transportation) ...|$|R
5000|$|Samocat <b>Sharing</b> <b>System.</b> <b>Sharing</b> <b>system</b> scooters, which {{involves}} {{a number of}} original technical solutions. The prize was 1,211 million rubles.|$|R
50|$|In February 2013, Hostway {{launched}} Cloud Drive and Cloud Backup services which enable storage, <b>access,</b> <b>sharing</b> {{and protection}} of private business data across any device using cloud solutions.|$|R
5000|$|The user {{connecting}} is not {{the administrator}} of the machine. This is only likely for hosts providing Unix shell <b>access,</b> <b>shared</b> servers using a suEXEC-like construction and the like.|$|R
30|$|Bike <b>sharing</b> <b>systems</b> (BSS) {{experience}} a tremendous boom in {{cities around the}} globe. Although bike <b>sharing</b> <b>systems</b> have existed for decades, large cities launched extensive systems and helped bike <b>sharing</b> <b>systems</b> to achieve a global breakthrough [23]. This breakthrough was facilitated by technological innovation leaps that transformed bike <b>sharing</b> <b>systems</b> into IT-based systems, called the third generation of BSS [22]. Currently many bike <b>sharing</b> <b>systems</b> progress to fourth generation systems, which are highly connected and fully integrated elements of urban transport systems, {{while at the same}} time – mainly unlicensed – free floating systems (sometimes referred to as fifth generation) occur in cities with and without existing BSS [26].|$|R
40|$|Abstract—We {{study the}} {{performance}} benefits of speculation in a release consistent software distributed <b>shared</b> memory <b>system.</b> We propose a new protocol, Speculative Home-based Release Consistency (SHRC), that speculatively updates data at remote nodes {{to reduce the}} latency of remote memory accesses. Our protocol employs a predictor that uses patterns in past <b>accesses</b> to <b>shared</b> memory to predict future accesses. We have implemented our protocol in a release consistent software distributed <b>shared</b> memory <b>system</b> that runs on commodity hardware. We evaluate our protocol implementation using eight software distributed shared memory benchmarks and show that it can result in significant performance improvements. Index Terms—Distributed shared memory, protocol design and analysis, speculation. ...|$|R
50|$|Computer {{applications}} {{make a call}} {{using the}} application programming interface (API) to <b>access</b> <b>shared</b> resources, like the keyboard, mouse, screen, disk drive, network, and printer. These can fail in two ways.|$|R
40|$|A cycle <b>sharing</b> <b>system</b> {{is useful}} for energy saving and {{reducing}} the amount of carbon dioxide emissions. But, thus far, the motivation to use a cycle <b>sharing</b> <b>system</b> is not sufficiently investigated, because of its newness. This paper analyzes some factors to introduce cycle <b>sharing</b> <b>system</b> from the perspective of authoritarian attitude, intrinsic motivation, environmental conservation behavior and experiential activities in childhood comparing with public transportation in Nagasaki City by using the data from 260 university students in Nagasaki. It is important to introduce cycle <b>sharing</b> <b>system</b> from the viewpoint of environmental conservation consciousness. But, comparing with public transportation in Nagasaki City, the useful perspective is not environmental conservation consciousness, but the purpose of using cycle <b>sharing</b> <b>system...</b>|$|R
