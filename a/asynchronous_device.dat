5|39|Public
25|$|Kernel-mode Plug-And-Play {{enhancements}} include {{support for}} PCI multilevel rebalance, partial arbitration {{of resources to}} support PCI subtractive bridges, <b>asynchronous</b> <b>device</b> start and enumeration operations to speed system startup, support for setting and retrieving custom properties on a device, an enhanced ejection API to allow the caller to determine if and when a device has been successfully ejected, and diagnostic tracing to facilitate improved reliability.|$|E
50|$|DECserver 90M+The DECserver 90M+ was {{introduced}} in 2003. A full function <b>asynchronous</b> <b>device</b> and remote access server, it provides eight local or remote asynchronous RJ45 connections over Ethernet LANs. Internal flash is 4 MB. Memory is 8 MB. This product also supports upgradeable ROM code. The DECserver 90M+ supports up to eight sessions per port. It runs DECserver Network Access Software (DNAS). Unlike the DECserver 90M models, the DECserver 90M+ {{does not have a}} BNC connector. Speeds were increased to 230.4 kbit/s.|$|E
40|$|Conference Name:International Conference on Wireless Networks and Information Systems. Conference Address: Shanghai, PEOPLES R CHINA. Time:DEC 28 - 29, 2009. In this paper, {{any type}} of files could be {{transferred}} via Bluetooth between Windows Mobile-based devices which should have Obex support. The Microsoft supplies COM interfaces for developer to use the obex protocol, so the paper primarily uses the obex interface to implement the file transferring. The OBEX protocols enable synchronous and <b>asynchronous</b> <b>device</b> discovery for Windows Mobile-based devices. This article takes use of <b>asynchronous</b> <b>device</b> discovery, so that application uses fewer system resources than synchronous device discovery. In order to send the file, it needs the path of files stored in the device...|$|E
50|$|In the past, reverse telnet was {{typically}} used {{to connect to}} modems or other external <b>asynchronous</b> <b>devices.</b> Today, reverse telnet is used mostly for connecting to the console port of a router, a switch or other device.|$|R
50|$|Closely {{related to}} the X.25 {{protocol}} are the protocols to connect <b>asynchronous</b> <b>devices</b> (such as dumb terminals and printers) to an X.25 network: X.3, X.28 and X.29. This functionality was performed using a Packet Assembler/Disassembler or PAD (also known as a Triple-X device, referring to the three protocols used).|$|R
50|$|A NAS {{concentrates}} dial-in and dial-out user communications. An {{access server}} {{may have a}} mixture of analog and digital interfaces and support hundreds of simultaneous users. A NAS consists of a communications processor that connects <b>asynchronous</b> <b>devices</b> to a LAN or WAN through network and terminal emulation software. It performs both synchronous and asynchronous routing of supported protocols.|$|R
40|$|Energy {{consumption}} {{has recently}} been widely recognized as a major challenge of computer systems design. This paper explores how to support energy as a first-class operating system resource. Energy, because of its global system nature, presents challenges beyond those of conventional resource management. To meet these challenges we propose the Currentcy Model that unifies energy accounting over diverse hardware components and enables fair allocation of available energy among applications. Our particular goal is to extend battery lifetime by limiting the average discharge rate and to share this limited resource among competing tasks according to user preferences. To demonstrate how our framework supports explicit control over the battery resource we implemented ECOSystem, a modified Linux, that incorporates our currentcy model. Experimental results show that ECOSystem accurately accounts for the energy consumed by <b>asynchronous</b> <b>device</b> operation, can achieve a target battery lifetime, and proportionally shares the limited energy resource among competing tasks...|$|E
50|$|DECserver 900TMThe DECserver 900TM is a 32-port {{network access}} server that connects <b>asynchronous</b> <b>devices,</b> {{including}} terminals, printers, modems, or PCs to an Ethernet {{local area network}} (LAN). The DECserver 900TM is configured with 32 MJ8 (RJ-45) connectors, and provides limited modem control with the 8-pin connectors. Each port supports sixteen data rates from 75 bit/s to 115.2 kbit/s. The DECserver 900TM includes 4 MB of standard memory, and can be expanded to 8 MB.|$|R
40|$|We {{present a}} {{multitasking}} operating system kernel, called KIT, written in the machine language of a uni-processor von Neumann computer. The kernel is proved to implement, on this shared computer, a fixed number of conceptually distributed communicating processes. In addition to implementing processes, the kernel provides the following verified services: process scheduling, error handling, message passing, and an interface to <b>asynchronous</b> <b>devices.</b> The problem is stated in the Boyer-Moore logic, and the proof is mechanically checked with the Boyer-Moore theorem prover...|$|R
50|$|Construction of the {{locomotives}} {{was carried}} out by Zhuzhou Electric Locomotive Company Limited. The locomotive consists of two identical single cab Bo'Bo' units coupled together, the main locomotive body is load bearing, electric traction equipment uses an AC/DC-AC transmission chain, with the traction motors being three phase <b>asynchronous</b> <b>devices.</b> The electrical inverter for traction motor power control is an IGBT type. The traction control system is a Siemens SIBA32, units can also be operated in multiple using the Locotrol distributed traction control system.|$|R
40|$|A compact {{directional}} coupler fabricated on a silicon photonic platform is presented, with a power-splitting ratio {{that can be}} tuned through a transverse temperature gradient induced by a laterally shifted integrated heater. The tuning mechanism exploits the thermally induced phase velocity mismatch between the coupled modes of the silicon waveguides. The positions of the integrated heater and the waveguide design are optimized to maximize the tuning range and to reduce electric power consumption. <b>Asynchronous</b> <b>devices</b> with an intrinsic phase mismatch are demonstrated to be more efficient, providing a tunable coupled power from 0. 7 to 0. 01 with 36 mW maximum power dissipation...|$|R
40|$|AbstractThis {{paper is}} {{concerned}} with the concepts of contact and confusion in net theory. The modeling power of contacts is investigated and related to the description of the non sequential behaviour by means of concurrent processes. In a second part the notion of confusion, primarily asymmetric confusion, is examined. It is shown that this phenomenon is inherent to any reasonable net model of a mutual exclusion module. As examples of possible consequences we briefly discuss metastability in bistable <b>asynchronous</b> <b>devices,</b> limitations for the modelling power of free-choice nets, and implications for fairness- and priority-requirements in distributed systems...|$|R
40|$|Theoretical {{constructs}} of logical gates implemented with plant roots are morphological computing <b>asynchronous</b> <b>devices.</b> Values of Boolean variables {{are represented by}} plant roots. A presence of a plant root at a given site symbolises the logical True, an absence the logical False. Logical functions are calculated via interaction between roots. Two types of two-inputs-two-outputs gates are proposed: a gate 〈 x, y 〉→〈 xy, x+y 〉 where root apexes are guided by gravity and a gate 〈 x, y 〉→〈xy, x 〉 where root apexes are guided by humidity. We propose a design of binary half-adder based on the gates...|$|R
50|$|External Bus Interface 2 (EBI2) {{provides}} an interface from some Qualcomm processors to slower, external, <b>asynchronous</b> peripheral <b>devices.</b> In specific, EBI2 {{was designed to}} support NAND Flash and SRAM memories and even LCD displays.|$|R
30|$|Filter-bank multi-carrier (FBMC)-based systems, clubbed with offset {{quadrature}} {{amplitude modulation}} (OQAM), is being seriously considered for future communication systems. FBMC-OQAM has many attractive {{features such as}} excellent frequency localization, a power spectral density (PSD) with very low side lobes, an improved robustness to time-variant channel characteristics, and carrier frequency offsets. Armed with these properties, FBMC-OQAM {{seems to be a}} more suitable candidate as a radio waveform for 5 G radio access technology (RAT) than orthogonal frequency division multiplexing (OFDM), especially for <b>asynchronous</b> <b>devices</b> [1]. However, FBMC-OQAM, as a multi-carrier technique, has a high peak-to-average power ratio (PAPR). There is an essential need to introduce novel methods relevant to PAPR reduction. In this paper, we mainly focus on PAPR reduction using probabilistic schemes.|$|R
50|$|DECserver 900GM/GMXThe DECserver 900GM was {{a network}} access server that {{supported}} up to 16 full modem control ports, or 32 eight-wire partial modem control ports. The DECserver 900GMX was {{identical to the}} DECserver 900GM, except that it supported up to 8 full modem control ports, or 16 eight-wire partial modem control ports. The ports were used to connect <b>asynchronous</b> <b>devices</b> including terminals, printers, modems, or PCs to an Ethernet local area network (LAN). The DECserver 900GM was configured with four 68-pin D-connectors (two for the DECserver 900GMx), and provided full or limited modem control. Each port supported sixteen data rates from 75 bit/s to 115.2 kbit/s. The DECserver 900GM included 4 MB of standard memory, and could be expanded to 8 MB.|$|R
50|$|DECserver 300The DECserver 300 Terminal Server was an Ethernet Communications Server for Ethernet Local Area Networks, {{providing}} a convenient method to logically connect up to sixteen digital asynchronous terminals {{to one or}} more service nodes (hosts) on an Ethernet. The DECserver 300 used MMJs (Modified Modular Jacks) for the attachment of <b>asynchronous</b> <b>devices.</b> The MMJ segregated a Data from a Voice connection. The DECserver 300 utilized the EIA 423-A electrical interface standard for local connections. EIA 423-A is compatible with the EIA 232-D interface and supports DTR/DSR (Data Terminal Ready/Data Set Ready) signals. EIA 423-A supports longer cable runs and higher signaling speeds. The DECserver 300 implemented the LAT protocol for communication with service nodes that implemented this protocol on the same Ethernet. The DECserver 300 also implemented the TCP/IP protocol suite for communication with host systems that implemented TCP/IP.|$|R
40|$|Abstract | This paper {{deals with}} {{a new type of}} covert channel problem that arose when we {{designed}} a multilevel secure computer (MLS) system, using a quasi-secure, <b>asynchronous,</b> communication <b>device</b> called the Pump. We call this new typeofcovert channel a statistical channel. It is our hope to get feedback from experts who work in the intersection of information theory and statistics. I...|$|R
40|$|Heterogeneous {{computing}} {{has become}} prevalent {{as part of}} High Performance Computing in the last decade, with <b>asynchronous</b> <b>devices</b> such as Graphics Processing Units constantly evolving. As HPC becomes more specialized and heterogeneous devices become more advanced and implement new features, a challenge is presented to traditional programming models. Programming models and tools needs to adapt {{in order to keep}} a competitive performance. Due to this, {{a new version of the}} OmpSs programming model is being developed, taking into account the nuances of newer technologies and architectures. In this context, a need to develop support for heterogeneous devices for the new version of the model arises. This project presents the development and evaluation of support for CUDA enabled devices on the Nanos 6 runtime being developed for the OmpSs- 2 programming model. The design choices are analyzed in the context of modern GPU programming and architectures, and the performance and execution of a series of benchmarks is analyzed to understand the performance characteristics of the runtime...|$|R
40|$|While {{modes of}} {{operation}} and asynchronously clocked devices have been studied separately, {{the combination of the}} two ideas has received little attention. We first consider an asynchronously clocked mode of operation based on an extension of OFB mode [2]. After reviewing some of the weaknesses of our proposed mode of operation, we extend on our original design in an attempt to mask some of the identified security weaknesses. In the process of redesigning our initial insecure design, we survey a variety of options resulting from the combination of an asynchronous clock to a mode of operation. While some of our <b>asynchronous</b> <b>devices</b> display a potential for increased complexity which may translate to additional security, often only a slight modification of current cryptanalytic attacks will compromise the combined modes. Only one mode, Dual Stream Multiplexer mode, DSM, apparently increases the complexity of cryptanalysis. DSM mode selects between the key streams of two OFB devices to preven...|$|R
40|$|Setting {{calculation}} of <b>asynchronous</b> regime liquidation <b>devices</b> {{can be very}} difficult {{as a result of}} variable power system parameters. Therefore, efficiency of action operation and correctness of setting must be tested by experience in various regimes of power system work. For asynchronous regimes such signals are typical which form it is difficult to recreate using traditional relay testing technique, so, these signals of testing are obtained by modelling of various regimes of power system work processes. For modelling processes a software EUROSTAG is used. Signals calculated by EUROSTAG software as a result of asynchronous regime modelling in power system are represented with signal effective value and phase angle. It is impossible to use them directly to test real protection and automation device operation. Specific software was created that converts modelling signals into COMTRADE format after what signals are transformed in real current and voltage variables used for devices testing. EUROSTAG dynamical process simulation software was successfully implemented in automation device testing. As tested <b>device,</b> <b>asynchronous</b> regime liquidation <b>device</b> in AGNA power system was chosen. In the result of testing AGNA relay operability in various modelling regimes of power system work with specified setting of device was confirmed. Methodology of device testing using modelled signals makes it possible to test <b>asynchronous</b> regime liquidation <b>device</b> operability in close-to-real conditions and may be used for testing of other relaying protection and automation devices...|$|R
40|$|Checking of {{computer}} logic by simulation {{appear in the}} future. Even if {{this should not be}} so, the work will by no means have been wasted, since a program is available to check the logic of additions to or changes in Sabrac and of any new machines or devices as these are designed. The advantages of such parallel checking are obvious and need not be detailed. An extension of the present program would also permit its use for the simulation of <b>asynchronous</b> <b>devices,</b> but no work has yet been undertaken in this direction. The present project has also suggested a further research program which would investigate the possibility References of mechanizing {{all or part of the}} actual design process. It would appear possible to derive automatically a set of equations which mechanize the execution of any specified (computable) function. Several possible approaches to this problem exist, and it is hoped to undertake an investigation which will determine methods yielding use-ful results in a reasonable amount of machine time...|$|R
40|$|Abstract. We {{consider}} temporal {{aspects of}} self-replication and evolvability – in particular, the massively asynchronous parallel and distributed nature of living systems. Formal views of self-reproduction and time are surveyed, {{and a general}} asynchronization construction for automata networks is presented. Evolution and evolvability are distinguished, and the evolvability characteristics of natural and artificial examples are overviewed. Minimal implemented evolvable systems achieving (1) asynchronous self-replication and evolution, as well as (2) protocultural transmission and evolution, are presented and analyzed for evolvability. Developmental genetic regulatory networks (DGRNs) are suggested as a novel paradigm for massive asynchronous computation and evolvability. An appendix classifies modes of life (with different degrees of aliveness) for natural and artificial living systems and possible transitions between them. 1 Models of Time: Logical vs. Physical Time We consider time in discrete dynamical systems. St. Augustine considered time as something intuitively graspable yet ineffable. Varshavsky distinguished two kinds of time: Time as a logical variable in a system defined by events vs. time as an independent physical variable [96], and studied self-timing and asynchrony theory for computing devices as the problem of reconciling {{the two types of}} time via design of system timing for the appropriate functioning <b>asynchronous</b> <b>devices</b> interacting with external environments. For a single observer or location, we can consider three main views of the (logical) time...|$|R
40|$|This paper {{describes}} the Half-Sync/Half-Async pattern, which integrates synchronous and asynchronous I/O models to support both programming simplicity and execution efficiency in complex concurrent software systems. In this pattern, higher-level tasks use a synchronous I/O model, which simplifies concurrent programming. In contrast, lower-level tasks use an asynchronous I/O model, which enhances execution efficiency. This pattern {{is widely used}} in operating systems such as UNIX, Mach, WindowsNT, and VMS, {{as well as other}} complex concurrent systems. 1 Intent The Half-Sync/Half-Async pattern decouples synchronous I/O from asynchronous I/O in a system to simplify concurrent programming effort without degrading execution efficiency. 2 Motivation To illustrate the Half-Sync/Half-Async pattern, consider the software architecture of the BSD UNIX [1] networking subsystem shown in Figure 1. The BSD UNIX kernel coordinates I/O between <b>asynchronous</b> communication <b>devices</b> (such as network adapter [...] ...|$|R
30|$|Our {{next steps}} include {{integrating}} the reference implementation in a bigger setup and testing it with more production systems and quantitative evaluations. And from research perspective, since the RESTful web service {{does not support}} <b>asynchronous</b> communication and <b>devices</b> are dynamic and sometimes transient during the service composition, we will focus on how to provide asynchronous message and real-time notification for event-driven process based on devices, and see how life-cycle of dynamic device service could be managed.|$|R
40|$|The {{aim of this}} Bachelor {{thesis is}} to propose {{three-phase}} converter of low power 100 W for driving the <b>asynchronous</b> motor. The <b>device</b> is suitable for construction with fans. This proposal was optimized in light of close price and of technical practicability. The arrangement is possible to use in less exacting applications where it was guarded high price of common converters so far. For allocation catalogue scheme were chosen acceptable components and designed the board of printed circuits...|$|R
40|$|A single {{multi-port}} planar {{optical device}} {{is able to}} generate and process simultaneously all the entries of a code family. With a single input laser pulse, a set of phase shifted keyed (PSK) codes are generated, {{that can be used}} in an optical code-division multiple access (CDMA) network to transmit a large number of <b>asynchronous</b> users. The <b>device</b> can be also used in different multi-code schemes, to enhance the confidentiality, the user bit rate and the spectral efficiency in access network...|$|R
5000|$|Depending on the manufacturer, {{different}} {{terms are}} used to identify devices that perform the UART functions. Intel called their 8251 device a [...] "Programmable Communication Interface". MOS Technology 6551 was known under the name [...] "Asynchronous Communications Interface Adapter" [...] (ACIA). The term [...] "Serial Communications Interface" [...] (SCI) was first used at Motorola around 1975 to refer to their start-stop <b>asynchronous</b> serial interface <b>device,</b> which others were calling a UART. Zilog manufactured a number of Serial Communication Controllers or SCCs.|$|R
40|$|We {{experimentally}} demonstrate simultaneous optical signal-tonoise ratio (OSNR) {{monitoring and}} modulation format identification (MFI) in heterogeneous fiber-optic networks by using {{principal component analysis}} (PCA) and statistical distance measurement based pattern recognition on scatter plots obtained through asynchronous single channel sampling (ASCS). The proposed technique enables OSNR monitoring for several commonly-used modulation formats with mean OSNR estimation error of 1 dB and without requiring any information about the signal type during the online monitoring process. In addition, it successfully demonstrates the identification of unknown modulation formats of the received signals with an overall accuracy of 98. 46 %. The effects of chromatic dispersion (CD) {{on the performance of}} proposed technique are also analyzed. Due to the use of a single low-speed <b>asynchronous</b> sampling <b>device</b> in the proposed technique, the implementation complexity and cost of the monitoring devices can be significantly reduced. Department of Electrical EngineeringDepartment of Electronic and Information Engineerin...|$|R
40|$|International audienceIn this paper, {{we study}} the {{fundamental}} problem of counting, which consists in computing {{the size of a}} system. We consider the distributed communication model of population protocols of finite state, anonymous and <b>asynchronous</b> mobile <b>devices</b> (agents) communicating in pairs (according to a fairness condition). This work significantly improves the previous results known for counting in this model, in terms of (exact) space complexity. We present and prove correct the first space-optimal protocols solving the problem for two classical types of fairness, global and weak. Both protocols require no initialization of the counted agents. The protocol designed for global fairness, surprisingly, uses only one bit of memory (two states) per counted agent. The protocol, functioning under weak fairness, requires the necessary logP bits (P states, per counted agent) to be able to count up to P agents. Interestingly, this protocol exploits the intriguing Gros sequence of natural numbers, which is also used in the solutions to the Chinese Rings and the Hanoi Towers puzzles...|$|R
40|$|Cognitive {{neuroscience}} {{approaches the}} brain as a cognitive system: {{a system that}} functionally is conceptualized in terms of information processing. We outline some aspects of this concept and consider a physical system to be an information processing device when a subclass of its physical states {{can be viewed as}} representational/cognitive and transitions between these can be conceptualized as a process operating on these states by implementing operations on the corresponding representational structures. We identify a generic and fundamental problem in cognition: sequentially organized structured processing. Structured sequence processing provides the brain, in an essential sense, with its processing logic. In an approach addressing this problem, we illustrate how to integrate levels of analysis within a framework of adaptive dynamical systems. We note that the dynamical system framework lends itself to a description of <b>asynchronous</b> event-driven <b>devices,</b> which is likely to be important in cognition because the brain appears to be an asynchronous processing system. We use the human language faculty and natural language processing as a concrete example through out...|$|R
40|$|This paper {{deals with}} {{a new type of}} covert channel problem that arose when we {{designed}} a multilevel secure computer (MLS) system, using a quasi-secure, <b>asynchronous,</b> communication <b>device</b> called the Pump. We call this new type of covert channel a statistical channel. It is our hope to get feedback from experts who work in the intersection of information theory and statistics. I. Introduction In a (MLS) system, Low may write to High, and High can read from Low, but High must never be able to write to Low. However, in a MLS system, the need for an acknowledgement (ACK), which is a write from High to Low, to a message sent by Low to High can violate the multilevel security policy by creating a covert (communication) channel. Consider a case where Low sends messages to High. A simple approach that does not allow High to send an ACK to Low places a buffer between Low and High. Low submits messages to the buffer, the buffer sends the ACKs back to Low, and High then takes messages from the b [...] ...|$|R
40|$|International Telemetering Conference Proceedings / October 28 - 31, 1996 / Town and Country Hotel and Convention Center, San Diego, CaliforniaThis {{paper will}} {{describe}} a test technique developed {{to measure the}} delays caused {{by the use of}} <b>asynchronous</b> multiplexers/demultiplexers. These <b>devices</b> are used for both signal transmission (microwave and fiber optic) and signal recording (especially helical scan digital recorders). The test technique involves the generation and decoding of asynchronous telemetry signals. The bit rates of the telemetry signals are variable. Relative time is embedded in the telemetry signal as a 32 -bit data word. The paper will also present measured delays for two multiplexers/demultiplexers for different combinations of bit rates...|$|R
40|$|The present {{invention}} {{relates to}} a device for simultaneous simulation of a symmetrical and an asymmetrical impedance of an <b>asynchronous</b> machine. The <b>device</b> has three subcircuits for simulating the three {{phases of the}} asynchronous machine. Each subcircuit preferably comprises a series connection of a main inductance, a leakage inductance and a resistor between the input terminal and the output terminal, which are connected in parallel to ground across a capacitor and a resistor in each case. A magnetic coupling is implemented or {{the effect of a}} magnetic coupling is simulated for the main inductances of the subcircuits. This device can be used to advantage instead of the asynchronous machine in calibration of EMC filters...|$|R
40|$|In {{this paper}} {{we examine the}} issues and {{benefits}} {{associated with the use}} of cyclic redundancy checks (CRC) s that manifest during the later phases of safety-critical software development projects. We look at some less obvious details that will potentially increase return on investment (ROI), avoid common DO- 178 B certification planning and design difficulties, as well as, speed development and integration. We propose software build process improvements with promise to improve version integrity, executable integrity, version identification, and executable identification. We examine the role of CRCs in software configuration management (SCM) and propose their potential for partial satisfaction of DO- 178 B objectives, like traceability. We look at time-saving steps for integrating with systems that use one of three standard algorithms. Of particular interest, we provide a table of residues from faulty algorithms and their likely causes and remedies, and provide overlooked tips for <b>asynchronous</b> communication <b>devices</b> to aid in the late development phase. There are analysis and data collection techniques proposed to support initial data transfer error rate claims in the early assessment of system integrity and availability, and to show the satisfaction of established bounds...|$|R
40|$|The pulse-stream technique, which {{represents}} neural states as sequences of pulses, is reviewed. Several general issues are raised, and generic methods appraised, for pulsed encoding, arithmetic, and intercommunication schemes. Two contrasting synapse designs are presented and compared. The first {{is based on}} a fully analog computational form in which the only digital component is the signaling mechanism itself-asynchronous, pulse-rate encoded digital voltage pulses. In this circuit, multiplication occurs in the voltage/current domain. The second design uses more conventional digital memory for weight storage, with synapse circuits based on pulse stretching. Integrated circuits implementing up to 15000 analog, fully programmable synaptic connections are described. A demonstrator project is described in which a small robot localization network is implemented using <b>asynchronous,</b> analog, pulse-stream <b>devices...</b>|$|R
