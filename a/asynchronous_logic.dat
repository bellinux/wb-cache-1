209|63|Public
5000|$|<b>Asynchronous</b> <b>logic</b> proponents {{believe these}} {{abilities}} would have these benefits: ...|$|E
50|$|The {{delay line}} {{oscillator}} may {{be allowed to}} free run {{or it may be}} gated for use in <b>asynchronous</b> <b>logic.</b>|$|E
50|$|The {{design of}} <b>asynchronous</b> <b>logic</b> uses {{different}} mathematical models and techniques from synchronous logic, {{and is an}} active area of research.|$|E
40|$|Abstract — In this paper, {{low power}} {{multiplier}} design using complementary pass-transistor <b>asynchronous</b> adiabatic <b>logic</b> is investigated. Adiabatic circuits are very low power circuits compared with CMOS logic circuits, provided the Power Clock Generators consumes less power and mutilate all low power advantages from the adiabatic logic by consuming {{large portion of}} the total power in the clock generation circuitry [1, 2]. Also clock routing is major challenge in the adiabatic, because of routing-delay between the gates. To get out of the problems related to clock generation and synchronous clock routing, a new solution namely <b>asynchronous</b> adiabatic <b>logic</b> [5] is used. Here we have designed, simulated a multiplier with Complementary Pass-Transistor <b>Asynchronous</b> Adiabatic <b>Logic</b> (CPTAAL) which exhibits low power and reliable logical operations comprising the benefit of both asynchronous systems with adiabatic benefits...|$|R
40|$|An {{approach}} {{was developed to}} create <b>asynchronous</b> recurrent <b>logic</b> arrays for the binary neural networks used as parallel distributed knowledge models. This approach converts the neurons in a neural network model into recurrent switching functions. These recurrent switching functions are then mapped onto an <b>asynchronous</b> recurrent <b>logic</b> array which completely captures {{the characteristics of the}} original knowledge model. Two modified programmable logic array (PLA) structures were devised for the physical implementation of these <b>asynchronous</b> recurrent <b>logic</b> arrays. Index Terms - Knowledge representation, constraint satisfaction, parallel distributed processing, neural networks, expert systems. I. Introduction A parallel distributed model that uses binary neural networks to represent qualitative knowledge was proposed by Vai and Xu [1]. In this knowledge model, the neuron thresholds and interconnection weights of a neural network are determined so that the stable states of the neural netw [...] ...|$|R
40|$|Abstract — We {{propose a}} novel {{synthesis}} method of a dual-rail <b>asynchronous</b> two-level <b>logic</b> of reduced cost. It {{is based on}} a model that operates under so called modified weak constraints. The logic is implemented as a minimized AND-OR structure, together with the completion detection logic. We formulated and proved the product term minimization constraint that ensures a correct logic behavior. We processed the MCNC benchmarks and generated <b>asynchronous</b> two-level <b>logic.</b> The implementation complexity was compared with the stateof-the-art approach. Using our approach, we achieved a significant improvement. I...|$|R
5000|$|... they cannot {{necessarily}} provide safe [...] "covers" [...] for <b>asynchronous</b> <b>logic</b> transitions so the PROM's outputs may glitch as the inputs switch, ...|$|E
50|$|However, <b>asynchronous</b> <b>logic</b> also exists, {{which uses}} no single clock, and {{generally}} operates more quickly, and may use less power, but is significantly harder to design.|$|E
5000|$|<b>Asynchronous</b> <b>logic</b> {{components}} {{can be hard}} {{to design}} because all possible states, in all possible timings must be considered. The usual method is to construct a table of the minimum and maximum time that each such state can exist, and then adjust the circuit to minimize the number of such states. Then the designer must force the circuit to periodically wait for all of its parts to enter a compatible state (this is called [...] "self-resynchronization"). Without such careful design, it is easy to accidentally produce <b>asynchronous</b> <b>logic</b> that is [...] "unstable," [...] that is, real electronics will have unpredictable results because of the cumulative delays caused by small variations in the values of the electronic components.|$|E
40|$|In this paper, {{low power}} {{multiplier}} design using omplementary pass-transistor <b>asynchronous</b> adiabatic <b>logic</b> is investigated. Adiabatic circuits are very low power circuits compared with CMOS logic circuits, provided the Power Clock Generators consumes less power and mutilate all low power advantages from the adiabatic logic by consuming {{large portion of}} the total power in the clock generation circuitry [1, 2]. Also clock routing is major challenge in the diabatic, because of routing-delay between the gates. To get out of the problems related to clock generation and synchronous clock routing, a new solution namely <b>asynchronous</b> adiabatic <b>logic</b> [5] is used. Here we have designed, simulated a multiplier with Complementary Pass- Transistor <b>Asynchronous</b> Adiabatic <b>Logic</b> (CPTAAL) which exhibits low power and reliable logical operations comprising the benefit of both asynchronous systems with adiabatic benefits. Compared with the conventional CMOS implementation, this design achieves energy savings from 50 % to 74 % for clock rates ranging from 100 MHz to 300 MHz...|$|R
40|$|ISBN : 978 - 1 - 4244 - 4822 - 7 International audienceA {{methodology}} {{to evaluate}} transient-fault effects on synchronous and asynchronous {{is presented in}} this work. It is developed by means of fault-injection simulation campaigns on gate-level circuit implementations. The methodology is {{able to deal with}} the particularities of asynchronous circuits. Unlike previous works, it permits to compare the sensitivity of circuits designed by synchronous and <b>asynchronous</b> <b>logics.</b> The resultant metrics allow identifying at high-level abstraction what is the logic that makes the circuit more transient-fault sensitive. As a case study, a crypto-processor in versions synchronous and asynchronous was evaluated...|$|R
40|$|Abstract—This paper {{presents}} {{the design of}} an <b>asynchronous</b> cellular <b>logic</b> array for binary image processing algorithms based on wave propagation/collision in an excitable medium. The array consists of identical logic cells enabling the propagation and detection of wave-front collisions necessary for the object skeletonization. Low power, low area and high processing speed requirements were met by employing the <b>asynchronous</b> dynamic <b>logic</b> approach resulting in a processing time less than 0. 45 ns/pixel and energy consumption of less than 0. 15 pJ/pixel. The cell consists of 19 transistors and occupies an area of 7. 5 × 6. 3 µm 2 in 90 nm CMOS technology. The proposed array {{could be used as}} a coprocessor in pixel-parallel SIMD architectures aiding the fast execution of medium-level image processing algorithms. I...|$|R
5000|$|A {{variety of}} {{advantages}} {{have been demonstrated}} by asynchronous circuits, including both quasi-delay-insensitive (QDI) circuits (generally agreed {{to be the most}} [...] "pure" [...] form of <b>asynchronous</b> <b>logic</b> that retains computational universality) and less pure forms of asynchronous circuitry which use timing constraints for higher performance and lower area and power: ...|$|E
50|$|As of 2014, most {{digital logic}} is {{synchronous}} {{because it is}} easier to create and verify a synchronous design. However, <b>asynchronous</b> <b>logic</b> is thought can be superior because its speed is not constrained by an arbitrary clock; instead, it runs at the maximum speed of its logic gates. Building an asynchronous system using faster parts makes the circuit faster.|$|E
5000|$|Dalrymple {{has worked}} at the MIT Media Lab Center for Bits and Atoms on new {{programming}} paradigms such as [...] "Reconfigurable <b>asynchronous</b> <b>logic</b> automata: (RALA)". [...] Early entrepreneurial efforts included selling photography and fractal art, fundraising for multiple sclerosis charity, and portable camera-like devices to “read” street signs and menus aloud into headphones (to assist visually impaired individuals).|$|E
50|$|The ILLIAC II was {{the first}} {{computer}} to incorporate Speed-Independent Circuitry, invented by faculty member David E. Muller. Speed-Independent Circuitry is a class of <b>asynchronous</b> digital <b>logic</b> based on the Muller C-element. This digital <b>logic,</b> being <b>asynchronous,</b> runs at full speed of transistor propagation and requires no clocks.|$|R
40|$|<b>Asynchronous</b> {{adiabatic}} <b>logic</b> (AAL) {{is a novel}} lowpower design technique {{which combines}} the energy saving benefits of asynchronous systems with adiabatic benefits. In this paper, energy efficient full adder using double pass transistor with <b>asynchronous</b> adiabatic <b>logic</b> (DPTAAL) is used to design a low power multiplier. Asynchronous adiabatic circuits are very low power circuits to preserve energy for reuse, which reduces {{the amount of energy}} drawn directly from the power supply. In this work, an 8 × 8 multiplier using DPTAAL is designed and simulated, which exhibits low power and reliable logical operations. To improve the circuit performance at reduced voltage level, double pass transistor logic (DPL) is introduced. The power results of the proposed multiplier design are compared with the conventional CMOS implementation. Simulation results show significant improvement in power for clock rates ranging from 100 [*]MHz to 300 [*]MHz...|$|R
40|$|<b>Asynchronous,</b> self-timed, <b>logic</b> {{is often}} eschewed in digital design {{because of its}} ad-hoc methodologies and lack of {{available}} design tools. This paper describes a complete High Level Design flow for asynchronous circuits based on Register Transfer Level (RTL) VHDL using commercial simulation and synthesis tools. Contrary to previous asynchronous approaches, the proposed RTL methodology closely resemble...|$|R
5000|$|The ILLIAC II was {{the first}} {{transistorized}} and pipelined supercomputer built by the University of Illinois. ILLIAC II and The IBM 7030 Stretch were two competing projects to build 1st-generation transistorized supercomputers. ILLIAC II was an <b>asynchronous</b> <b>logic</b> design. At its inception in 1958 it was 100 times faster than competing machines of that day. It became operational in 1962, two years later than expected.|$|E
50|$|Asynchronous {{sequential}} logic is not synchronized by a clock signal; the outputs of the circuit change directly {{in response to}} changes in inputs. The advantage of <b>asynchronous</b> <b>logic</b> {{is that it can}} be faster than synchronous logic, because the circuit doesn't have to wait for a clock signal to process inputs. The speed of the device is potentially limited only by the propagation delays of the logic gates used.|$|E
50|$|Digital logic {{circuits}} {{can be divided}} into combinational logic, in which the output signals depend only on the current input signals, and sequential logic, in which the output depends both on current input and on past inputs. In other words, sequential logic is combinational logic with memory. Virtually all practical digital devices require sequential logic. Sequential logic {{can be divided into}} two types, synchronous logic and <b>asynchronous</b> <b>logic.</b>|$|E
40|$|International audienceDespite the {{recommendations}} of several Roadmaps published a few years ago, asynchronous circuits are only very recently becoming an industrial/commercial reality. The semiconductor industry is starting to give a serious consideration {{to the introduction of}} asynchronous technology into products and design flows. The goal of the talk is to introduce asynchronous circuits and systems. An overview of the design and application of asynchronous circuits is proposed, illustrated with the latest chips and systems designed. In an introductive part, it is shown how asynchronous circuits differ from synchronous circuits [...] Section one presents the basics of <b>asynchronous</b> <b>logics</b> and their design. The main classes of asynchronous circuits are derived and compared. In section two, the main potentials and properties of asynchronous circuits are described. They are illustrated with circuits and systems drawn from both academic and industrial works. Finally, the tools available today to design asynchronous circuits are presented and compared...|$|R
40|$|Abstract—This paper {{presents}} a novel architecture for a unit-delay digital deadbeat current controller for a shunt active power filter (APF). The APF {{is based on}} a fixed frequency pulsewidth modulated voltage-sourced converter (VSC). The proposed controller increases the APF current-tracking band-width without increasing the VSC switching frequency. Previous APF digital deadbeat controllers have a current-tracking delay of two or more sample-periods. One delay is due to current controller computation, a second sample delay represents VSC actuation time. The paper {{presents a}} new controller architecture employing both <b>asynchronous</b> programmable <b>logic</b> and a small microprocessor. Current-tracking feedback control calculations are executed in <b>asynchronous</b> programmable <b>logic</b> to effectively eliminate the controller computation delay. The microprocessor executes fundamental frequency disturbance rejection com-putations and all other supervisory functions. The proposed architecture retains all high-level functions in the microprocessor to minimize controller development time without compromising APF performance. Index Terms—Active filter, current control, deadbeat control, digital control, disturbance rejection, programmable logic, unit-delay, VSC. I...|$|R
40|$|This {{paper is}} a {{preliminary}} investigation in implementing <b>asynchronous</b> QDI <b>logic</b> in molecular nano-electronics, {{taking into account}} the restricted geometry, the lack of control on transistor strengths, the high timing variations. We show that the main building blocks of QDI logic can be successfully implemented; we illustrate the approach with the layout of an adder stage. The proposed techniques to improve the reliability of QDI apply to nano-CMOS as well. 1...|$|R
5000|$|Network on chip or network on a chip (NoC or NOC) is a {{communication}} subsystem on an integrated circuit (commonly called a [...] "chip"), typically between intellectual property (IP) cores {{in a system}} on a chip (SoC). NoCs can span synchronous and asynchronous clock domains or use unclocked <b>asynchronous</b> <b>logic.</b> NoC technology applies networking theory and methods to on-chip communication and brings notable improvements over conventional bus and crossbar interconnections. NoC improves the scalability of SoCs, and the power efficiency of complex SoCs compared to other designs.|$|E
50|$|Finally, {{there are}} several {{techniques}} for {{reducing the number of}} state changes associated with a given computation. For clocked- logic circuits, clock gating technique is used, to avoid changing the state of functional blocks that are not required for a given operation. As a more-extreme alternative, the <b>asynchronous</b> <b>logic</b> approach implements circuits {{in such a way that}} a specific externally supplied clock is not required. While both of these techniques are used to different extents in integrated circuit design, the limit of practical applicability for each appears to have been reached.|$|E
5000|$|The term <b>asynchronous</b> <b>logic</b> {{is used to}} {{describe}} a variety of design styles, which use different assumptions about circuit properties. These vary from the bundled delay model - which uses [...] "conventional" [...] data processing elements with completion indicated by a locally generated delay model - to delay-insensitive design - where arbitrary delays through circuit elements can be accommodated. The latter style tends to yield circuits which are larger than bundled data implementations, but which are insensitive to layout and parametric variations and are thus [...] "correct by design".|$|E
40|$|ABSTRACT: In {{this paper}} circuit {{implementations}} of cellular processor arrays intended for image processing applications are discussed. It is demonstrated that a departure form the standard CNN model {{can lead to}} a significant improvement when processing binary (black/white) images. An <b>asynchronous</b> cellular <b>logic</b> array circuit is presented, which is capable of simulating trigger-waves in an excitable medium. The circuit is implemented using CMOS dynamic logic circuits, and exhibits high speed and low power consumption. Simulation results are presented. 1...|$|R
40|$|Abstract. In this paper, the Multi-flow <b>Asynchronous</b> Temporal <b>Logic,</b> called MAT Logic, is presented. MAT Logic {{is a new}} temporal×modal logic with {{non-deterministic}} operators among time flows as accessibility relations. The {{main goal}} of this work has been the design and description of a logic that could be capable of managing communications among systems with not necessarily synchronizable time flows. In order {{to better understand the}} design of the logic, an example in the field of communications is given. ...|$|R
40|$|The work {{reported}} in this paper {{is part of a}} silicon compiler that receives a parallel algorithm written in CIRCAL and produces a VLSI implementation. The implementation logic used is the <b>asynchronous</b> event <b>logic.</b> A generated netlist of event logic modules is used to produce the VLSI mask layout geometries for this circuit using the standard cell approach. A standard library of cells for event logic modules has been designed, simulated and its layout generated. 1...|$|R
50|$|However, {{chip design}} trends point to event {{simulation}} gaining relative performance due to activity factor {{reduction in the}} circuit (due to techniques such as clock gating and power gating, which are becoming much more commonly used {{in an effort to}} reduce power dissipation). In these cases, since event simulation only simulates necessary events, performance may no longer be a disadvantage over cycle simulation. Event simulation also has the advantage of greater flexibility, handling design features difficult to handle with cycle simulation, such as <b>asynchronous</b> <b>logic</b> and incommensurate clocks. Due to these considerations, almost all commercial logic simulators have an event based capability, even if they primarily rely on cycle based techniques.|$|E
50|$|The Z80 machine cycles are sequenced by an {{internal}} state machine which builds each M-cycle out of 3, 4, 5 or 6 T-cycles depending on context. This avoids cumbersome <b>asynchronous</b> <b>logic</b> {{and makes the}} control signals behave consistently at {{a wide range of}} clock frequencies. It also means that a higher frequency crystal must be used than without this subdivision of machine cycles (approximately 2-3 times higher). It does not imply tighter requirements on memory access times, since a high resolution clock allows more precise control of memory timings and so memory can be active in parallel with the CPU to a greater extent, allowing more efficient use of available memory bandwidth.|$|E
5000|$|The maximum {{possible}} {{clock rate}} {{is determined by}} the slowest logic path in the circuit, otherwise known as the critical path. Every logical calculation, from the simplest to the most complex, must complete in one clock cycle. So logic paths that complete their calculations quickly are idle much of the time, waiting for the next clock pulse. Therefore, synchronous logic can be slower than <b>asynchronous</b> <b>logic.</b> One way to speed up synchronous circuits is to split complex operations into several simple operations which can be performed in successive clock cycles, a technique known as pipelining. This technique is extensively used in microprocessor design, and helps to improve the performance of modern processors.|$|E
40|$|Abstract—A {{number of}} {{representation}} schemes {{have been presented}} for use within Learning Classifier Systems, ranging from binary encodings to Neural Networks, and more recently Dynamical Genetic Programming (DGP). This paper presents results from an investigation into using a fuzzy DGP representation within the XCSF Learning Classifier System. In particular, <b>asynchronous</b> Fuzzy <b>Logic</b> Networks are used to represent the traditional condition-action production system rules. It is shown possible to use self-adaptive, open-ended evolution to design an ensemble of such fuzzy dynamical systems within XCSF to solve two well-known test problems. R I...|$|R
40|$|This book is {{dedicated}} to new mathematical instruments assigned for logical modeling of the memory of digital devices. The {{case in point is}} logic-dynamical operation named venjunction and venjunctive function as well as sequention and sequentional function. Venjunction and sequention operate within the framework of sequential logic. In a form of the corresponding equations, they organically fit analytical expressions of Boolean algebra. Thus, a sort of symbiosis is formed using elements of <b>asynchronous</b> sequential <b>logic</b> {{on the one hand and}} combinational logic on the other hand. So, asynchronou...|$|R
40|$|A {{number of}} {{representation}} schemes {{have been presented}} for use within Learning Classifier Systems, ranging from binary encodings to Neural Networks, and more recently Dynamical Genetic Programming (DGP). This paper presents results from an investigation into using a fuzzy DGP representation within the XCSF Learning Classifier System. In particular, <b>asynchronous</b> Fuzzy <b>Logic</b> Networks are used to represent the traditional condition-action production system rules. It is shown possible to use self-adaptive, open-ended evolution to design an ensemble of such fuzzy dynamical systems within XCSF to solve several well-known continuous-valued test problems. Comment: 2 page GECCO 2011 poster pape...|$|R
