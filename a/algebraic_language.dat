225|486|Public
60|$|The passion {{between the}} sexes has {{appeared}} in every age to be so nearly the same that it may always be considered, in <b>algebraic</b> <b>language,</b> as a given quantity. The great law of necessity which prevents population from increasing in any country beyond the food which it can either produce or acquire, is a law so open to our view, so obvious and evident to our understandings, and so completely confirmed by the experience of every age, that we cannot for a moment doubt it. The different modes which nature takes to prevent or repress a redundant population do not appear, indeed, to us so certain and regular, but though we cannot always predict the mode we may with certainty predict the fact. If the proportion of births to deaths {{for a few years}} indicate an increase of numbers much beyond the proportional increased or acquired produce of the country, we may be perfectly certain that unless an emigration takes place, the deaths will shortly exceed the births; and that the increase that had taken place for a few years cannot be the real average increase {{of the population of the}} country. Were there no other depopulating causes, every country would, without doubt, be subject to periodical pestilences or famine.|$|E
5000|$|ALGOL 58 - {{originally}} {{proposed to}} be called IAL, for International <b>Algebraic</b> <b>Language.</b>|$|E
5000|$|Alan J. Perlis, Klaus Samelson, Preliminary Report: International <b>Algebraic</b> <b>Language,</b> Communications of the ACM 1(12): 8-22 (1958) ...|$|E
40|$|A {{new concept}} is {{proposed}} for linking <b>algebraic</b> modeling <b>languages</b> with structure-exploiting solvers. SPI (Structure-Passing Interface) {{is a program}} that retrieves structure from an anonymous mathematical program built by an <b>algebraic</b> modeling <b>language.</b> SPI passes the special structure of the problem to an SES (Structure-Exploiting Solver). An integration of SPI and SES leads to SET (Structure-Exploiting Tool) {{and can be used}} with any <b>algebraic</b> modeling <b>language.</b> This approach relies on the idea that most exploitable block structures can be easily detected from the algebraic formulation of models. It should enable <b>algebraic</b> modeling <b>languages</b> to access the large body of algorithmic techniques which require problem structure. <b>algebraic</b> modeling <b>language,</b> large scale optimization, structure-exploiting solver...|$|R
40|$|A {{new concept}} is {{proposed}} for linking <b>algebraic</b> modeling <b>language</b> {{and the structure}} exploiting solver. SPI (Structure Passing Interface) is a program that enables retrieving structure from the anonymous mathematical program built by the <b>algebraic</b> modeling <b>language.</b> SPI passes the special structure of the problem to a SES (Structure Exploiting Solver). An integration of SPI and SES leads to SET (Structure Exploiting Tool) {{and can be used}} with any <b>algebraic</b> modeling <b>language.</b> Key words. <b>Algebraic</b> modeling <b>language,</b> large scale optimization, structure exploiting solver. 1 Introduction Practitioners who use mathematical programming are confronted with a dilemma. On the one hand, their problems are usually so large and so complex that they cannot be modeled without the aid of an <b>algebraic</b> modeling <b>language.</b> On the other hand, large models often necessitate the use of a specialized structure exploiting solver. Unfortunately, <b>algebraic</b> modeling <b>languages</b> only access general purpose This r [...] ...|$|R
40|$|A {{new concept}} is {{proposed}} for linking <b>algebraic</b> modeling <b>language</b> {{and the structure}} exploiting solver. SPI (Structure Passing Interface) is a program that enables retrieving structure from the anonymous mathematical program built by the <b>algebraic</b> modeling <b>language.</b> SPI passes the special structure of the problem to a SES (Structure Exploiting Solver). An integration of SPI and SES leads to SET (Structure Exploiting Tool) {{and can be used}} with any <b>algebraic</b> modeling <b>language...</b>|$|R
50|$|CAL (Conversational <b>Algebraic</b> <b>Language)</b> was a {{programming}} language and system designed and developed by Butler Lampson at Berkeley in 1967.|$|E
50|$|FOCAL is an {{interpreted}} {{programming language}} resembling JOSS. The name is {{an acronym for}} Formulating On-Line Calculations in <b>Algebraic</b> <b>Language.</b>|$|E
50|$|LOTOS is an <b>algebraic</b> <b>language</b> that {{consists}} of two parts: a part for the description of data and operations, based on abstract data types, and a part for the description of concurrent processes, based on process calculus.|$|E
50|$|AIMMS, an <b>algebraic</b> {{modeling}} <b>language</b> {{with support}} for constraint programming.|$|R
40|$|It {{is common}} {{belief that there}} is a {{substantial}} difference between model-oriented (eg. Z and VDM) and <b>algebraic</b> specification <b>languages</b> (eg. LSL and ACT-ONE) wrt. their applicability to the specification of software systems. While model-oriented specification languages are assumed to be suited better for the description of state based systems (abstract machines), <b>algebraic</b> specification <b>languages</b> are assumed to be better for abstract datatype specifications. In this paper we shall demonstrate how an <b>algebraic</b> specification <b>language</b> (the Larch Shared Language) can be used to write specifications of abstract machines in the style of Z and how support tools for <b>algebraic</b> specification <b>languages,</b> eg. type checker and theorem provers, can be used to reason about abstract machines. (orig.) Available from TIB Hannover: RR 1912 (96 - 2 - 003) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEDEGerman...|$|R
40|$|<b>Algebraic</b> <b>languages</b> are at {{the heart}} of many {{successful}} optimization modeling systems, yet they have been used with only limited success for combinatorial (or discrete) optimization. We show in this paper, through a series of examples, how an <b>algebraic</b> modeling <b>language</b> might be extended to help with a greater variety of combinatorial optimization problems. We consider specifically those problems that are readily expressed as the choice of a subset from a certain set of objects, rather than as the assignment of numerical values to variables. Since there is no practicable universal algorithm for problems of this kind, we explore a hybrid approach that employs a general-purpose subset enumeration scheme together with problem-specific directives to guide an e#cient search. Published as: J. J. Bisschop and Robert Fourer, New Constructs for the Description of Combinatorial Optimization Problems in <b>Algebraic</b> Modeling <b>Languages.</b> Computational Optimization and Applications 6 (1996) 83 [...] 116. [...] ...|$|R
50|$|In essence a holon is a metaphoric {{computation}} container like a spreadsheet, but allowing procedural looping like {{an ordinary}} <b>algebraic</b> <b>language.</b> Yet its purpose is to frame algebraic formulas that represent higher mathematics (e.g. differential equations are algebraic formulas, in which some of their variables are rates).|$|E
50|$|Meta II {{programs}} are compiled into an interpreted byte code language. VALGOL and SMALGOL compilers illustrating its capabilities {{were written in}} the META II language, VALGOL is a simple <b>algebraic</b> <b>language</b> designed {{for the purpose of}} illustrating META II. SMALGOL was a fairly large subset of ALGOL 60.|$|E
50|$|He {{managed a}} system {{programming}} group in 1959 which developed an ALGOL-like compiler for Burroughs. The early programming language {{was known as}} BALGOL and was implemented for the Burroughs 220 machine. The language and compiler were an early implementation of the International <b>Algebraic</b> <b>Language</b> (IAL) also known as ALGOL 58.|$|E
40|$|We {{consider}} operations between languages, {{based on}} splitting the underlying alphabet into two disjoint sets, {{one of them}} having some priority. Such operations are generalizations of the classical catenation or shuffle operation, with which rational, linear and <b>algebraic</b> <b>languages</b> can be defined similar to the classical case. The basic properties of the corresponding language families are investigated too. TUCS Research Grou...|$|R
50|$|ALGO is an <b>algebraic</b> {{programming}} <b>language</b> {{developed between}} 1959 and 1961 for the Bendix G-15 computer.|$|R
40|$|Data Types............................. 50 4. 5. 4 Special Approaches.................................... 50 4. 6 Semantics of Programming Languages............................. 52 4. 6. 1 Semantics of Ada..................................... 52 4. 6. 2 Action Semantics..................................... 52 4. 7 Specification Languages..................................... 53 4. 7. 1 Early <b>Algebraic</b> Specification <b>Languages........................</b> 53 4. 7. 2 Recent <b>Algebraic</b> Specification <b>Languages.......................</b> 55 4. 7. 3 The Common Framework Initiative........................... 56 5 Methodology 57 5. 1 Development Phases....................................... 57 5. 1. 1 Applica [...] ...|$|R
5000|$|Additional {{software}} was {{available from the}} XDS Users' Group Library, such as a string processing system, [...] "SYSPOPs" [...] (system programmed operators, which allow access to system services), CAL (Conversational <b>Algebraic</b> <b>Language,</b> a dialect of JOSS), QED (a text editor), TAP (Time-sharing Assembly Program, an assembler), and DDT, a debugging tool.|$|E
50|$|In 1847 Bertić {{wrote a book}} named Samouka - pokus pervi {{in which}} he offered a {{rudimentary}} <b>algebraic</b> <b>language</b> of “thoughts and concepts” (including variables, constants, equality sign) to which the law of substitution is added, which was the beginning stage of Boolean logic. Bertić made his research independent from George Boole.|$|E
50|$|The International <b>Algebraic</b> <b>Language</b> (IAL) was {{extremely}} influential and generally considered the ancestor {{of most of}} the modern programming languages (the so-called Algol-like languages). Additionally, ALGOL object code was a simple, compact, and stack-based instruction set architecture commonly used in teaching compiler construction and other high order languages (of which Algol is generally considered the first).|$|E
40|$|A {{new concept}} is {{proposed}} for linking <b>algebraic</b> modeling <b>language</b> {{and the structure}} exploiting solver. SPI (Structure Passing Interface) is a program that enables retrieving structure from the anonymous mathematical program built by the <b>algebraic</b> modeling <b>language.</b> SPI passes the special structure of the problem to a SES (Structure Exploiting Solver). An integration of SPI and SES leads to SET (Structure Exploiting Tool) and can be integrated with any algebraic modeling languag...|$|R
40|$|Many {{portable}} compilers {{generate an}} intermediate code that is subsequently translated into the target machine's assembly language. In this paper a stack-machine-based intermediate code suitable for <b>algebraic</b> <b>languages</b> (e. g., PASCAL, C, FORTRAN) and most byte-addressed mini- and microcom-puters is described. A table-driven peephole optimizer that improves this intermediate code is then discussed in detail and {{compared with other}} local optimization methods. Measurements show an improvement ofabout 15 percent, depending on the precise metric used...|$|R
40|$|The paper {{discusses}} how formal methods, and, in particular, {{object oriented}} specification languages {{can be integrated}} in the software development process in an effective way. We depart from an object specification language in the SLAM system that combines characteristics of <b>algebraic</b> <b>languages</b> as well as pre and postconditions for class methods specification. We study how to specify classes {{as well as the}} formal relations that class relationships must hold (in particular, inheritance) ...|$|R
5000|$|International <b>Algebraic</b> <b>Language</b> (IAL, ALGOL 58) and ALGOL (1958 and 1960) thus {{introduced}} [...] for assignment, {{leaving the}} standard [...] available for equality, a convention followed by CPL, ALGOL W, ALGOL 68, Basic Combined Programming Language (BCPL), Simula, SET Language (SETL), Pascal, Smalltalk, Modula-2, Ada, Standard ML, OCaml, Eiffel, Object Pascal (Delphi), Oberon, Dylan, VHSIC Hardware Description Language (VHDL), {{and several other}} languages.|$|E
50|$|A {{well-known}} {{example was}} {{the development of}} analytic geometry, which {{in the hands of}} mathematicians such as Descartes and Fermat showed that many theorems about curves and surfaces of special types could be stated in <b>algebraic</b> <b>language</b> (then new), each of which could then be proved using the same techniques. That is, the theorems were very similar algebraically, even if the geometrical interpretations were distinct.|$|E
5000|$|Fairmat is a free-of-charge {{multi-platform}} {{software that}} allows to model financial contracts (e.g. a derivative contract) or projects with many contingencies (e.g. a Real Options model) by decomposing it into basic parts. Complex structures and dependencies are modelled using a graphical interface. Virtually any pay-off function and asset class( [...] from {{interest rate derivatives}} to equity-linked notes) can be described using a simple <b>algebraic</b> <b>language.</b>|$|E
40|$|Some {{algebraic}} {{programs which}} can be used for the computer calculation of the explicit forms of analytic expressions and equations in general relativity and cosmology are briefly described. These programs apply to field equations for Bianchi cosmological models, the Hamiltonian formalism is general relativity, and the application of that formalism to some vacuum inhomogeneous space-times with stationary axisymmetric metrics. These programs are written in the <b>algebraic</b> <b>languages</b> REDUCE 2 and 3 and in LISP. Peer reviewe...|$|R
30|$|In {{the current}} version, Simulator module {{incorporates}} AMPL (2014) – an <b>algebraic</b> modeling <b>language</b> for the mathematical programming – {{to compute the}} control parameters.|$|R
50|$|The Common <b>Algebraic</b> Specification <b>Language</b> (CASL) is a {{general-purpose}} {{specification language}} based on first-order logic with induction. Partial functions and subsorting are also supported.|$|R
50|$|The idea of {{symmetry}} G {{of space}} V {{can be seen}} as action of G on V,i.e. existence of a map G× V -> V.This idea can be translated in the <b>algebraic</b> <b>language</b> as existence of homomorphismFun(G) Fun(V) <- Fun(V) (as usually maps between functionsand spaces go in opposite directions).Also maps from a space to itself can be composed (they form a semigroup), hencea dual object Fun(G) is a bialgebra.|$|E
5000|$|The {{language}} was originally proposed {{to be called}} IAL (International <b>Algebraic</b> <b>Language)</b> but according to Perlisthis was rejected as an [...] "'unspeakable' and pompous acronym". ALGOL was suggested instead, though not officially adopted until a year later. The publication following the meeting still used the name IAL. Unresolved disagreements also led to a plan to define two dialects, ALGOL 58 and ALGOL 60 but the name ALGOL 60 was eventually used for a specific language.|$|E
5000|$|A {{symbolic}} assembler, {{similar to}} the IBM 650's SOAP (Symbolic Optimal Assembly Program), {{was introduced in the}} late 1950s and includes routines for minimum-access coding. Other programming aids include a supervisor program, a floating-point interpretive system named [...] "Intercom", and ALGO, an <b>algebraic</b> <b>language</b> designed from the 1958 Preliminary Report of the ALGOL committee. Users also developed their own tools, and a variant of Intercom suited to the needs of civil engineers is said to have circulated.|$|E
40|$|We {{have written}} an {{operational}} semantics {{of the behavioral}} expressions of LOTOS using the <b>algebraic</b> specification <b>language</b> OBJ. LOTOS is an internationally standardized specification language for communication protocols in Open System Interconnections. OBJ {{is one of the}} most famous <b>algebraic</b> specification <b>languages</b> based on order-sorted algebraic semantics. OBJ is executable based on order-sorted rewritings which give operational semantics for order-sorted algebras. In this paper, we show how to write the mechanisms for realizing LOTOS behavioral expressions in OBJ. In particular, the mechanisms for variable-value bindings, value passing between events, and synchronization of events are described. 1 Introduction We have written an operational semantics of the behavioral expressions of LOTOS[1] using the <b>algebraic</b> specification <b>language</b> OBJ[2, 3]. Behavioral expressions in LOTOS describe the temporal ordering of events. Value passing is performed when events are synchronized. The value [...] ...|$|R
40|$|This paper {{describes}} a {{visual programming environment}} for an <b>algebraic</b> specification <b>language</b> where program editing and execution are shown visually. By expressing a program visually, programming becomes more intuitive and easier. We have developed the visual programming system CafePie for the <b>algebraic</b> specification <b>language</b> CafeOBJ. In CafePie, program editing and execution are all performed in one window. All operations of the program editing are handled in a uniform manner. Programming examples of CafeOBJ on our system CafePie are also given in the paper. Keywords: Visual Programming System, Specification Languages, Human Interface Introduction <b>Algebraic</b> Specification <b>Languages</b> (ASL) are specification languages which express the models {{of the real world}} using elements such as sorts, operators and equations. We assume specifications written in ASL as programs. They are executable. The execution of the languages are performed by term rewriting. There are many researches which car [...] ...|$|R
40|$|SETSTOCH is a {{tool for}} linking <b>Algebraic</b> Modeling <b>Languages</b> (AMLs) with Specialized Stochastic Programming Solvers (SSPSs). Its main role is to {{retrieve}} from the AML a dynamically ordered core model (baseline scenario) that is then sent automatically to the SSPS. The user is then able {{to take full advantage}} of speciøc SSPS features. The current implementation of SETSTOCH enables to access the SP/OSL subroutines via the GAMS modeling language. An example of energy planning is presented. Key words: <b>algebraic</b> modeling <b>language,</b> decomposition algorithm, energy modeling, stochastic programming, structure exploiting solver. 1 Introduction Nowadays, the modeler has powerful tools to build eoeective mathematical programming problems: <b>Algebraic</b> Modeling <b>Languages</b> (AMLs). However, when future events are to be considered, it may be pertinent to specify uncertain parameters directly in the model. The corresponding branch of mathematical programming is also known as stochastic programming (see [3 [...] ...|$|R
