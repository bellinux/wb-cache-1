38|929|Public
50|$|The website {{has been}} down, {{throwing}} an Phusion Passenger (Ruby on Rails deployment) <b>application</b> <b>error,</b> since 2.00 GMT on 07/11/13 - this date may be considerably longer.|$|E
5000|$|... ? - {{indicates}} that the user is to be prompted before continuing (results in an <b>application</b> <b>error</b> since the API has no means to implement a user prompt); ...|$|E
5000|$|...Blip* *Blip* *Blip* End of Cheese Error *Blip* *Blip* *Blip* Can Not Find Drive Z: *Blip* *Blip* *Blip* Unknown <b>Application</b> <b>Error</b> *Blip* *Blip* *Blip* Please Reboot Universe *Blip* *Blip* *Blip* Year Of The Sloth *Blip* *Blip* *Blip* ...|$|E
5000|$|... #Subtitle level 3: Investigation or {{analysis}} of <b>application</b> <b>errors</b> ...|$|R
40|$|This paper {{discusses}} an optimization {{method for}} the spreading performed by centrifugal spreaders {{in order to}} minimize adverse environmental effects owing to <b>application</b> <b>errors.</b> A cost functional relying on a conventional simplified spread pattern model is proposed. In order {{to take into account the}} mechanical limits of the device, constraints are introduced. An augmented Lagrangian algorithm is implemented to compute an approximate solution. Numerical experiments show that <b>application</b> <b>errors</b> can be significantly reduced for parallel tracks within a main field body...|$|R
50|$|Repairing disk permissions is a {{troubleshooting}} activity {{commonly associated}} with the macOS operating system by Apple. The efficacy of repairing permissions to troubleshoot <b>application</b> <b>errors</b> has been debated.|$|R
50|$|If the {{business}} <b>application</b> <b>error</b> occurred due to infrastructure issues, then the specific infrastructure team is notified. The infrastructure team then implements permanent fixes {{for the issue}} and monitors the infrastructure to avoid the re-occurrence of the same error.|$|E
50|$|The {{business}} <b>application</b> <b>error</b> {{tracking system}} {{is used to}} review all issues periodically (daily, weekly and monthly) and reports are generated to monitor the resolved issues, repeating issues, and pending issues. Reports are also generated for the IT/IS management for improvement and management of business applications.|$|E
50|$|If the {{business}} <b>application</b> <b>error</b> occurred {{due to a}} work flow issue or human errors during data input, then {{the business}} users are notified. Business users then review their work flow and revise it if necessary. They also modify the user guide or user instructions to avoid such an error in the future.|$|E
50|$|If any similar {{business}} <b>application</b> <b>errors</b> {{occurred in}} the past then the issue resolution steps are retrieved from the support knowledge base and the error is resolved using those steps. If it is a new support error, then new issue resolution steps are created and the error is resolved. The new support error resolution steps are recorded in the knowledge base for future use. For major business <b>application</b> <b>errors</b> (critical infrastructure or application failures), a phone conference call is initiated and all required support persons/teams join the call and they all work together to resolve the error.|$|R
50|$|A {{new feature}} called Problem Reports and Solutions {{has also been}} added. It is a Control Panel applet that keeps a record of all system and <b>application</b> <b>errors</b> and issues, as well as {{presents}} probable solutions to problems.|$|R
30|$|In {{reinforced}} concrete beams very important shear problems are encountered due to projecting, material and <b>application</b> <b>errors.</b> Reinforced concrete specimens have the ductile behavior under bending effect. However, if these specimens have insufficient shear reinforcement, they are fractured suddenly {{and in a}} brittle manner.|$|R
50|$|If the {{business}} <b>application</b> <b>error</b> occurred due to programming errors, then a request is {{created for the}} application development team to correct programming errors. If {{the business}} user needs new features or functions in the business application, then the required analysis/design/programming/testing/release is planned and {{a new version of}} the business software is deployed.|$|E
50|$|When {{this order}} cannot be created {{because of an}} <b>application</b> <b>error</b> (for example: The price per piece is lower than allowed for this material), then the {{administrator}} on the vendor's system sees this IDoc among the erroneous ones and can solve the situation. If the error is in the master data at the vendor's system, he can correct them and order the IDoc to be processed again.|$|E
50|$|Business {{applications}} {{can fail}} when an unexpected error occurs. This error could occur {{due to a}} data error (an unexpected data input or a wrong data input), an environment error (an in frastructure related error), a programming error, a human error or a work flow error. When a business application fails one needs to fix the business <b>application</b> <b>error</b> {{as soon as possible}} so that the business users can resume their work. This work of resolving business application errors is known as business application support.|$|E
40|$|International audienceAbstract [...] In numeric {{optimization}} algorithms <b>errors</b> at <b>application</b> level considerably {{affect the}} performance of their execution on distributed infrastructures. Hours of execution can be lost only due to bad parameter configurations. Though current grid workflow systems have facilitated the deployment of complex scientific applications on distributed environments, the error handling mechanisms remain mostly those provided by the middleware. In this paper, we propose a collaborative platform for the execution of scientific experiments in which we integrate a new approach for treating <b>application</b> <b>errors,</b> using the dynamicity and exception handling mechanisms of the YAWL workflow management system. Thus, <b>application</b> <b>errors</b> are correctly detected and appropriate handling procedures are triggered in order to save as much as possible of the work already executed...|$|R
50|$|For {{critical}} business <b>application</b> <b>errors</b> (such as {{an application}} not available or an application not working correctly), an e-mail {{is sent to}} the entire organization or impacted teams so that they are aware of the issue. They are also provided with an estimated time for application availability.|$|R
5000|$|Some {{registry}} cleaners make {{no distinction}} {{as to the}} severity of the errors, and many that do may erroneously categorize errors as [...] "critical" [...] with little basis to support it. [...] Removing or changing certain registry data can prevent the system from starting, or cause <b>application</b> <b>errors</b> and crashes.|$|R
50|$|Various best {{practice}} guides for AWS use suggest using its autoscaling feature {{even in cases}} where the load is not variable. That is because autoscaling offers two other advantages: automatic replacement of any instances that become unhealthy for any reason (such as hardware failure, network failure, or <b>application</b> <b>error),</b> and automatic replacement of spot instances that get interrupted for price or capacity reasons, making it more feasible to use spot instances for production purposes. Netflix's internal {{best practice}}s require every instance to be in an autoscaling group, and its conformity monkey terminates any instance not in an autoscaling group in order to enforce this best practice.|$|E
5000|$|... 16-bit {{versions}} of Windows (and Windows on Windows) load only one instance {{of any given}} DLL; all applications reference the same in-memory copy, until no applications are using it and it is unloaded from memory. (For 32-bit and 64-bit {{versions of}} Windows, inter-process sharing occurs only where different executables load a module from exactly the same directory; the code but not the stack is shared between processes through a process called [...] "memory mapping".) Thus, even when the desired DLL {{is located in a}} directory where it can be expected to be found, such as in the system directory or the application directory, neither of these instances will be used if another application has started with an incompatible version from a third directory. This issue can manifest itself as a 16-bit <b>application</b> <b>error</b> that occurs only when applications are started in a specific order.|$|E
40|$|Web-based {{applications}} {{are one of}} the most widely used types of software and have become the backbone of the e-commerce and communications businesses. These {{applications are}} often missioncritical for many organizations, but generally suffer from low customer loyalty and approval. Although such concerns would normally motivate the need for highly-reliable and well-tested systems, web-based applications are subject to constraints in their development lifecycles that often preclude complete testing. To address these constraints, this research explores user-visible web-based application errors in the context of web-based <b>application</b> <b>error</b> detection and classification. The main thesis of this work is that user-visible web-based application errors have special properties that can be exploited to improve the current state of web <b>application</b> <b>error</b> detection, testing, and development. This thesis is evaluated using seven specific falsifiable hypotheses. This research presents highly-precise, automated approaches to the testing of web-based applications that reduce the cost of such testing, making its adoption more feasible for developers. Additionally, a model of user-visible web <b>application</b> <b>error</b> severity is constructed, backed by a human study, to refute the current underlying assumption of error severity uniformity in defect seeding for this domain, as well as to propos...|$|E
40|$|When {{applying}} conventional standard video codecs in wireless video <b>applications,</b> <b>error</b> {{resilience and}} coding efficiency {{are the two}} main issues need to be considered. Since {{it is difficult to}} corroborate robust quality of service (QoS) in wireless networks, transmitted video packets are sometime lost or corrupted due to fading and shadowing effect of wireles...|$|R
50|$|Files whose permissions {{have been}} {{incorrectly}} altered by an administrator, an administrator operating with root privileges, or a poorly designed installer package (installed with similar privileges) {{can cause a}} wide array of problems ranging from <b>application</b> <b>errors</b> to the inability to boot macOS. Repairing permissions can become necessary, but has become increasingly less so for versions after Panther (10.3).|$|R
40|$|Modern {{industrial}} adhesives {{are mostly}} high-tech products which if used correctly allow zero fault production. Some bonded joints nevertheless fail, {{and this is}} generally down to adhesive <b>application</b> <b>errors.</b> It is precisely here where DIN 2304 is of use: It lays down organizational matters relating to quality assurance and so aids the management of bonding processes...|$|R
30|$|False {{practice}} {{dominates the}} <b>application</b> <b>error</b> category, however {{in these cases}} the medical device is often set-up {{in such a way}} that promotes a false user procedure. The medical device itself gives the user no chance to realise that it is not suitable for the application and mistakes are made.|$|E
40|$|ISBN : 978 - 1 - 4244 - 1665 - 3 International audienceThis paper {{deals with}} the {{prediction}} of SEU error rate for an application running on a complex processor. Both, radiation ground testing and fault injection, were performed while the selected processor, a Power PC 7448, executed a software issued from a real space application. The predicted error rate shows that generally used strategies, based on static cross-section, significantly overestimate the <b>application</b> <b>error</b> rate...|$|E
40|$|The primary {{author has}} {{withdrawn}} this paper due to {{conflict of interest}} - We present MATIC (Memory-Adaptive Training and In-situ Canaries), a voltage scaling methodology that addresses the SRAM efficiency bottleneck in DNN accelerators. To overscale DNN weight SRAMs, MATIC combines specific characteristics of destructive SRAM reads with the error resilience of neural networks in a memory-adaptive training process. PVT-related voltage margins are eliminated using bit-cells from synaptic weights as in-situ canaries to track runtime environmental variation. Demonstrated on a low-power DNN accelerator fabricated in 65 nm CMOS, MATIC enables up to 3. 3 x total energy reduction, or 18. 6 x <b>application</b> <b>error</b> reduction. Comment: The primary author has withdrawn this paper due to conflict of interes...|$|E
50|$|DevPartner Fault Simulator is a {{software}} development tool used to simulate <b>application</b> <b>errors.</b> It helps developers and quality assurance engineers write, test and debug {{those parts of}} the software responsible for handling fault situations which can occur within applications. The target application, where faults are simulated, behaves as if those faults were the result of a real software or hardware problem which the application could face.|$|R
5000|$|In December 1990, Microsoft {{released}} Windows 3.0a. This version {{contained an}} improved {{ability to move}} pieces of data greater than 64KB (the original release could only manipulate one segment of RAM at a time). It also improved stability by reducing Unrecoverable <b>Application</b> <b>Errors</b> (UAEs) associated with networking, printing, and low-memory conditions. This version appears as [...] "Windows 3.00a" [...] in Help/About Windows system dialogs.|$|R
40|$|A {{self-propelled}} agricultural sprayer with four-wheel steering (4 WS) was developed. A {{digital controller}} {{was designed and}} built to control the rear steering angle based on that of the front wheels through electrohydraulic control valves. Three modes of steering were enabled and investigated. Experimental methods were developed to determine what potential 4 WS has in improving machine performance. In particular, machine performance of the sprayer was evaluated by measuring turning radius and performance metrics in headland turning and lateral path shift procedures. Coordinated 4 WS resulted in smaller turning radii than conventional two-wheel steering (2 WS). In the headland turning tests, significant mean increases in aligning distance of 5. 58 m and significant mean decreases in rear wheel off-tracking area of 9. 3 m 2 were observed in 4 WS over 2 WS. In lateral path correction tests, crab 4 WS substantially decreased the area and magnitude of estimated <b>application</b> <b>errors</b> over conventional 2 WS, while coordinated 4 WS resulted in increased <b>application</b> <b>errors.</b> These results provide evidence that 4 WS could enable improvement in sprayer machine performance...|$|R
40|$|Operating systems often manage {{critical}} infrastructures where failures {{can have}} serious consequences. This raises great concerns about their robustness. From the user perspective, {{it is the}} service delivered by host applications {{that needs to be}} dependable. Operating systems should therefore provide comprehensive error detection and recovery services to those applications, so that the system as a whole can be dependable and secure. This paper addresses the recovery flow that takes place after an <b>application</b> <b>error</b> is detected. The goal is to combine existing techniques into a set of operating system services that support application recovery both from software and hardware errors. We describe a prototype system where these services are currently being implemented and outline how we intend to experimentally evaluate them...|$|E
30|$|In any {{experiment}} it {{is necessary}} that the researcher is familiar with his or her equipment, how it should be used, how data can be collected and how the data should be interpreted. In a numerical experiment the physics of fires can be interfered with. For instance, different plume models types can be selected in a two-zone model or radiation can be excluded in a CFD model. The user can also introduce error in the numerical experiment due to mistakes. Beard ([1997]) has elaborated on different types of <b>application</b> <b>error</b> in fire modelling. User effects have also been seen to be of importance in studies with multiple users, such as the PRISME project (Audouin et al. [2011]) and in a Swedish verification and validation study (Holmstedt et al. [2008]).|$|E
40|$|Context-aware {{applications}} automatically adapt {{their behavior}} according to environmental conditions, {{also known as}} contexts. However, in practice contexts are often inaccurate, noisy or even inconsistent (e. g., two RFID readers may report different numbers for {{the same set of}} goods processed). These kinds of problematic contexts may cause context-aware applications to behave abnormally or even fail. It is thus desirable to detect and resolve context inconsistency. In this paper, we propose a hybrid approach to detect problematic contexts and resolve resulting context inconsistencies with the help of context-aware application semantics. By combining low-level context inconsistency resolution with high-level <b>application</b> <b>error</b> recovery, our approach can resolve the inconsistent contexts more effectively. Moreover, error recovery cost for context-aware applications is reduced. Our experimental results show that our approach outperforms existing approaches in terms of more accurate inconsistency resolution and less error recovery cost...|$|E
50|$|Application service {{automation}} {{enables the}} simple modeling of application workflows, including tiers and dependencies and executes these across any heterogeneous data center environment - physical, virtual and cloud. By simplifying operational complexity and eliminating <b>application</b> configuration <b>errors</b> <b>Application</b> Service Automation enables heightened uptime while reducing {{the time and}} cost of servicing applications.|$|R
5000|$|A TPS {{may fail}} {{for many reasons}} such as system failure, human errors, {{hardware}} failure, incorrect or invalid data, computer viruses, software <b>application</b> <b>errors</b> or natural or man-made disasters. As it's not possible to prevent all failures, a TPS {{must be able to}} detect and correct errors when they occur and cope with failures. A TPS will go through a recovery of the database which may involve the backup, journal, checkpoint, and recovery manager: ...|$|R
2500|$|Before {{printing}} a 3D {{model from}} an STL file, it {{must first be}} examined for <b>errors.</b> Most CAD <b>applications</b> produce <b>errors</b> in output STL files: ...|$|R
