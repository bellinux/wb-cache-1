8|0|Public
50|$|GAS uses <b>assembler</b> <b>directives</b> (also {{known as}} pseudo ops), which are {{keywords}} {{beginning with a}} period that behave similarly to preprocessor directives in the C programming language. While most of the available <b>assembler</b> <b>directives</b> are valid regardless of the target architecture, some directives are machine dependent.|$|E
5000|$|<b>Assembler</b> <b>directives</b> (e.g. START, CSECT, DC, LTORG, EQU, AIF, END) ...|$|E
50|$|The {{third way}} is to include a {{corresponding}} number of NOP <b>assembler</b> <b>directives</b> directly in the program code.|$|E
5000|$|Minimalistic {{support for}} three <b>assembler</b> <b>{{directives}}</b> (.equ, [...]db, [...]ds) to control data locations, there exist no directives to directly control code locations ...|$|E
50|$|GAS {{supports}} a general syntax {{that works for}} all of the supported architectures. The general syntax includes <b>assembler</b> <b>directives</b> and a method for commenting.|$|E
5000|$|Jubin Mitra's 8085 Simulator - Open source (under GNU license) software. Supports many <b>assembler</b> <b>directives,</b> timing {{diagrams}} and {{a virtual}} emulation kit. The specialty of this software {{is that it}} can traverse a given program backwards in most cases.|$|E
40|$|Includes bibliographical {{references}} (page 84) This project {{presents a}} tagged {{model of the}} dataflow computer. The first part contains {{a detailed description of}} the architecture, and the computer operation of the dataflow computer. In the second part, a dataflow computer assembler with limited <b>assembler</b> <b>directives</b> and program structuring statements is written to conclude this project...|$|E
40|$|Abstract:- A GNU ‘as ’ {{is ported}} for a Micro Signal Architecture (MSA) {{processor}} that radically differs {{in terms of}} instruction set. The instructions are like mathematical equations. Most of the work for a GNU as port is performed relating to the machine dependent features. Also, additional directives or command line options {{may be required to}} make it compatible with other assemblers. In addition to these for certain architectures special pseudoinstructions for branch optimization may also have to be implemented as well. The MSA instruction set has two sets of op-codes 16 -bit for micro-controller instructions and 32 -bit for the DSP instructions. Therefore, once the GNU as parser picks up the assembly mnemonics and separates its expressions, these expressions are taken care of by implementing special functions to generate op-codes for the complete instruction. To ensure compatibility with commercial MSA tool-chains, an added support for additional <b>assembler</b> <b>directives</b> not present in GNU as or named differently is implemented. This ensures minimal porting effort for those switching from commercial toolchains to the GNU tool-chain. The ported GNU as was tested on a simulator for all the instruction patterns generated through a testing suite...|$|E

