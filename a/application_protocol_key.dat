0|4623|Public
40|$|Interoperability {{remains a}} {{fundamental}} challenge when connecting heterogeneous systems which encounter and spontaneously {{communicate with one}} another in pervasive computing environments. This challenge is exasperated by the highly heterogeneous technologies employed by each of the interacting parties, i. e., in terms of hardware, operating system, middleware <b>protocols,</b> and <b>application</b> <b>protocols.</b> The <b>key</b> aim of the CONNECT project is to drop this heterogeneity barrier and achieve universal interoperability. Here we report {{on the development of the}} overall CONNECT architecture that will underpin this solution; in this respect, we present the following contributions: i) an elicitation of interoperability requirements from a set of pervasive computing scenarios, ii) a survey of existing solutions to interoperability, iii) an initial view of the CONNECT architecture, and iv) a series of experiments to provide initial validation of the architecture. Keyword list Interoperability, middleware, middleware heterogeneity, service discovery heterogeneity, servic...|$|R
40|$|Interoperability {{remains a}} {{fundamental}} challenge when connecting heterogeneous systems which encounter and spontaneously {{communicate with one}} another in pervasive computing environments. This challenge is exasperated by the highly heterogeneous technologies employed by each of the interacting parties, i. e., in terms of hardware, operating system, middleware <b>protocols,</b> and <b>application</b> <b>protocols.</b> The <b>key</b> aim of the CONNECT project is to drop this heterogeneity barrier and achieve universal interoperability. Here we report on the revised CONNECT architecture, highlighting the integration of the work carried out to integrate the CONNECT enablers developed by the different partners; in particular, we present the progress of this work towards a finalised concrete architecture. In the third year this architecture has been enhanced to: i) produce concrete CONNECTors, ii) match networked systems based upon their goals and intent, and iii) use learning technologies to find the affordance of a system. We also report on the application of the CONNECT approach to streaming based systems, further considering exploitation of CONNECT in the mobile environment...|$|R
40|$|Interoperability {{remains a}} {{fundamental}} challenge when connecting heterogeneous systems which encounter and spontaneously {{communicate with one}} another in pervasive computing environments. This challenge is exasperated by the highly heterogeneous technologies employed by each of the interacting parties, i. e., in terms of hardware, operating system, middleware <b>protocols,</b> and <b>application</b> <b>protocols.</b> The <b>key</b> aim of the CONNECT project is to drop this heterogeneity barrier and achieve universal interoperability. Here we report on the activities of WP 1 into developing the CONNECT architecture that will underpin this solution. In this respect, we present the following key contributions from the second year. Firstly, the intermediary CONNECT architecture that presents a more concrete view of the technologies and principles employed to enable interoperability between heterogeneous networked systems. Secondly, the design and implementation of the discovery enabler with emphasis on the approaches taken to match compatible networked systems. Thirdly, the realisation of CONNECTors that can be deployed in the environment; we provide domain specific language solutions to generate and translate between middleware protocols. Fourthly, we highlight the role of ontologies within CONNECT and demonstrate how ontologies crosscut all functionality within the CONNECT architecture...|$|R
40|$|For many applications—including {{recognizing}} malware variants, {{determining the}} range of system versions vulnerable to a given attack, testing defense mechanisms, and filtering multi-step attacks—it can be highly useful to mimic an existing system while interacting with a live host on the network. We present RolePlayer, a system which, given examples of an application session, can mimic both the client side and the server side of the session {{for a wide variety}} of <b>application</b> <b>protocols.</b> A <b>key</b> property of RolePlayer is that it operates in an application-independent fashion: the system does not require any specifics about the particular application it mimics. It instead uses byte-stream alignment algorithms to compare different instances of a session to determine which fields it must change to successfully replay one side of the session. Drawing only on knowledge of a few low-level syntactic conventions (such as representing IP addresses using “dotted quads”), and contextual information such as the domain names of the participating hosts, RolePlayer can heuristically detect and adjust network addresses, ports, cookies, and length fields embedded within the session, including sessions that span multiple, concurrent connections on dynamically assigned ports. We have successfully used RolePlayer to replay both the client and server sides for a variety of network applications, including NFS, FTP, and CIFS/SMB file transfers, as well as the multi-stage infection processes of the Blaster and W 32. Randex. D worms. ...|$|R
40|$|A {{prototype}} <b>application</b> <b>protocol</b> for ready-to-wear {{pattern making}} {{was developed for}} the communication of pattern pieces and related information between various CAD systems. The basic methodology for the <b>application</b> <b>protocol</b> isthe Standard for the Exchange ofProduct Model Data (STEP). STEP is an emerging international standard, {{the result of an}} effort to develop a mechanism for digitally representing the physical and functional characteristics of a product throughout the product’s life cycle. The STEP <b>application</b> <b>protocol</b> addresses a specific application area and contains an information model written in the conceptual modeling language EXPRESS. The experience gained through the implementation of the prototype <b>application</b> <b>protocol</b> and recommendations received from apparel researchers provided us useful input to improve the prototype <b>application</b> <b>protocol.</b> This report presents a revised version of the information model usingboth the EXPRESS language and the EXPRESS-G graphical notation. An application activity model that defines the scope and information requirements of the prototype <b>application</b> <b>protocol</b> is also presented in this report. Neither the EXPRESS-Gdiagrams nor the application activity model was shown in the original prototype <b>application</b> <b>protocol</b> report...|$|R
40|$|This chapter proposes an {{alternative}} reference architecture for <b>application</b> <b>protocols.</b> The proposed reference architecture {{consists of the}} set of possible architectures for <b>application</b> <b>protocols.</b> This set is implicitly defined by defining {{the different types of}} <b>application</b> <b>protocol</b> components and their relationships. The component types and their relationships are derived by application of the design trajectory, design methods and structuring techniques presented in the previous chapters. This chapter also identifies and characterizes some generic <b>application</b> <b>protocol</b> building blocks that can be used as components in many different <b>application</b> <b>protocol</b> architectures. The main purpose of a reference architecture is to help the designer in choosing a suitable architecture for his specific design, and to incorporate pre-defined, generic building blocks. A reference architecture should therefore either define a single architecture that is generally applicable in the design domain at hand, or a set of architectures, each appropriate in a specific sub-domain. Because of the diversity of interaction requirements of different classes of distributed applications, {{we do not believe that}} it is possible to define a single useful architecture for <b>application</b> <b>protocols.</b> Such a reference architectur...|$|R
40|$|Master {{thesis is}} focused on {{classification}} of <b>application</b> <b>protocols</b> based on <b>application</b> data taken from layer L 7 of ISO/OSI model. The aim of the thesis is to suggest a classifier for SDM system (Software defined monitoring) {{so it could be}} used for links with throughput up to 100 Gb/s. At the same time it should classify with the fewest possible errors. Designed classifier consists of two parts. First part depicts encoders for encoding selected attributes. Second part deals with evaluating circuit which detects series characteristic for particular <b>application</b> <b>protocols</b> on the output from the first part. Considered attributes and series are taken from statistic analyzes of <b>application</b> <b>protocol</b> data. The classifier itself is designed so it can be implemented in FPGA and enables modification set of <b>application</b> <b>protocols</b> who intended for classification. The quality of  designed classifier is tested on real network data. The results of classification are compared with current methods used for classification of <b>application</b> <b>protocols...</b>|$|R
5000|$|MIL-STD-3011, Joint Range Extension <b>Application</b> <b>Protocol</b> (JREAP) ...|$|R
40|$|In {{the last}} decades, much {{effort has been}} spent on the design and {{provision}} of sophisticated communication infrastructures. The development of end-user oriented distributed system applications, leaning on top of these communication infrastructures, so far has attracted little attention. This is regrettable, since communication infrastructures can only become useful and profitable {{if they can be}} deployed {{in the context of a}} sufficient number of distributed applications. Two important factors determine the success of distributed applications: (1) the provision of high quality <b>application</b> services and <b>protocols</b> at short time scales; and (2) the availability of standards for these services and protocols that can be used for the construction of ‘open’ distributed systems. The achievement of both (1) and (2) can be supported by a suitable design methodology. A design methodology entails a systematic approach to carry out complex designs, and therefore should incorporate proper concepts that enable the effective structuring of such designs. Concepts currently used for the design and structuring of <b>application</b> <b>protocols</b> appear to be inadequate for this purpose. Also a step-wise design approach that would help to master complexity and shorten development times is currently lacking. Standards are necessary since individual users of distributed system applications prefer to be independent on any particular manufacturer or vendor when procuring products, while manufacturers prefer to have maximum implementation freedom when developing such products. An ‘open’ protocol standard defines necessary and sufficient conditions for system parts to interact, such that the system parts can be implemented independently of each other. ISO and ITU-TSS base the development and definition of protocol standards on a ‘reference model’, called the Reference Model for Open Systems Interconnection (OSIRM). This model comprises a rudimentary form of a design approach and a reference architecture that can be derived with this approach. According to the OSI-RM, the overall <b>application</b> <b>protocol</b> functionality is distributed over three hierarchical protocol layers. Each layer has been assigned a specific functionality, except the highest layer, the Application Layer, which is made responsible for all remaining protocol functions. Because the functionality of the Application Layer is not delimited it cannot, as opposed to the other layers, be covered by a single protocol standard or a fixed set of protocol standards. Several identified sets of <b>Application</b> Layer <b>protocol</b> functions are defined by separate Application Service Elements (ASEs). The appropriateness of the OSI-RM for the development and definition of <b>application</b> <b>protocol</b> standards can be criticized on a number of points: - the reference architecture defined by the OSI-RM is not flexible enough to adequately cope with the diversity of interaction requirements of distributed applications. - some design concepts are not clearly defined, thus prohibiting their effective application to structuring problems; - the relationship between high level application requirements and proposed <b>application</b> <b>protocol</b> solutions is unclear; - the development of <b>application</b> <b>protocol</b> standards generally takes a long time. This thesis aims at the development of a methodology for the design of <b>application</b> <b>protocols,</b> including <b>application</b> <b>protocol</b> standards, and so addresses the problems mentioned above. The following contributions are made to achieve this aim: - design quality criteria are proposed that can be used to guide design decisions and to evaluate designs; - OSI design decisions and design concepts with respect to <b>application</b> <b>protocols</b> are evaluated; - general-purpose, elementary design concepts are proposed; - milestones in the <b>application</b> <b>protocol</b> design process are presented; - behaviour composition and structuring techniques are developed that can be used to represent design results corresponding to the identified milestones; - design methods are proposed to support the correct performance of design steps between milestones; - a flexible reference architecture is proposed. A (potential) result of the design methodology is that layered <b>application</b> <b>protocol</b> hierarchies can be avoided if they are not required by the class of distributed applications that must be supported. This thesis is structured as follows: - Chapter 1 (Introduction) presents a global problem description for this thesis, the scope and objectives of this thesis, and the approach followed in this thesis. It further introduces some general concepts related to the design of distributed systems. - Chapter 2 (Design Quality Criteria) discusses quality criteria that can be used to guide the design of <b>application</b> <b>protocols</b> and to evaluate the quality of already designed <b>application</b> <b>protocols.</b> - Chapter 3 (OSI Upper Layer Architecture and Model: State of the Art) presents the architecture and concepts defined by the OSI-RM with respect to <b>application</b> <b>protocol</b> standards. It also contains a brief description of the most important <b>application</b> <b>protocol</b> standards that were developed in the context of the OSI-RM. - Chapter 4 (OSI Upper Layer Architecture and Model: Evaluation) evaluates the architecture and concepts defined by the OSI-RM with respect to <b>application</b> <b>protocol</b> standards. It also discusses the relation between the quality of <b>application</b> <b>protocol</b> standards and the nature of standardization, and the implementation freedom supported by protocol standards. - Chapter 5 (Design Framework) presents a general framework for the design of <b>application</b> <b>protocols.</b> It identifies elementary concepts for distributed systems design, and abstraction levels at which distributed systems and system parts can be represented. The abstraction levels are used to define an <b>application</b> <b>protocol</b> design trajectory consisting of a sequence of design steps between different milestones in the <b>application</b> <b>protocol</b> design process. - Chapter 6 (Design Model) discusses a model for the representation and manipulation of behaviours, such that it can be used in the <b>application</b> <b>protocol</b> design trajectory. The model is based on the elementary design concepts, identified in Chapter 5, and defines additional concepts and rules in order to allow the composition of behaviours. It also includes techniques for the composition of structured behaviours and requirements for behaviour decomposition and refinement. - Chapter 7 (<b>Application</b> <b>Protocol</b> Reference Architecture) proposes a flexible reference architecture for <b>application</b> <b>protocols.</b> The reference architecture is based on the design quality criteria, the design framework and the design model, and presents specific design methods for structuring <b>application</b> <b>protocols.</b> Furthermore, some generic <b>application</b> <b>protocol</b> structures are discussed, and some <b>application</b> <b>protocol</b> functions that can be used as building blocks for the support of many classes of distributed system applications are characterized. - Chapter 8 (Suggestions for Further Work) presents some suggestions for further work. - Chapter 9 (Summary of Conclusions) presents a summary of the conclusions drawn in the previous chapters...|$|R
5000|$|ISO 15118-4: Network and <b>application</b> <b>protocol</b> {{conformance}} test ...|$|R
5000|$|IFSF is {{more complex}} but more {{comprehensive}} than most proprietary protocols. The IFSF protocol has two independent layers; a device <b>application</b> <b>protocol</b> layer and a communications <b>protocol</b> layer. The <b>application</b> <b>protocol</b> is independent of the underlying communications layer. The communications protocol specification makes the link to the transport layer.|$|R
40|$|A {{synergistic}} relationship {{exists between}} Concurrent Engineering (CE) frameworks and the PDES initiative of promulgating STEP. This paper emphasizes and punctuates {{the importance of}} the STEP-CE linkage and defines further cooperative bindings. One focus of the presentation is the use of STEP <b>application</b> <b>protocols</b> to create the shared information models necessary for Concurrent Engineering(CE). After a discussion of the natural fusion of CE and PDES/STEP <b>application</b> <b>protocols,</b> the need for the extension of STEP resource models and <b>application</b> <b>protocols</b> to include information sharing capabilities for process and organization data is presented...|$|R
40|$|This chapter {{presents}} {{some suggestions}} for further work: section 1 suggests an approach for testing the proposed <b>application</b> <b>protocol</b> reference architecture in practice; section 2 discusses the notion of application service engineering and presents some items for further work in this area; section 3 presents an alternative graphical notation which should be further investigated; section 4 indicates areas where the <b>application</b> <b>protocol</b> design methodology may be useful; section 5 mentions the need to investigate the combined use of object-oriented approaches and the <b>application</b> <b>protocol</b> design methods; section 6 presents possibilities for generalized constraint-oriented composition; and section 7 mentions {{the need for further}} work in the area of specification language support. 8. 1 Elaboration and application of the reference architecture The <b>application</b> <b>protocol</b> reference architecture proposed in Chapter 7 (<b>Application</b> <b>Protocol</b> Reference Architecture) should be tested by applying it to realistic examples. One {{way to do this is}} the following: • define the building blocks characterized in Chapter 7 with the design model presented in Chapter 6 (Design Model); possibly, characterize further useful building blocks an...|$|R
5000|$|Application-Layer Host: traffic {{statistics}} by <b>application</b> <b>protocol,</b> per host ...|$|R
5000|$|... #Subtitle level 2: Coverage of STEP <b>Application</b> <b>Protocols</b> (AP) ...|$|R
5000|$|... #Subtitle level 4: CAN <b>application</b> <b>protocol</b> over EtherCAT (CoE) ...|$|R
5000|$|WAP1, Wireless <b>Application</b> <b>Protocol</b> 1, 5-layer {{stack of}} {{protocols}} ...|$|R
5000|$|Alternative {{protocols}} {{include the}} [...] Advanced Message Queuing Protocol (AMQP), [...] Streaming Text Oriented Messaging Protocol (STOMP) the IETF Constrained <b>Application</b> <b>Protocol,</b> [...] XMPP and Web <b>Application</b> Messaging <b>Protocol</b> (WAMP).|$|R
5000|$|Internet {{applications}} for smart devices through wireless <b>application</b> <b>protocol</b> (WAP) ...|$|R
5000|$|ISO/CD 15118-7: Network and <b>application</b> <b>protocol</b> {{requirements}} for wireless communication ...|$|R
40|$|This thesis {{focuses on}} methods for fast {{recognition}} of <b>application</b> <b>protocols.</b> Fast recognition is recognition with minimal delay {{from the time}} of capturing the first data packet sent  from the source node. This thesis describes possible techniques and methods for recognition of <b>application</b> <b>protocols</b> and basic information and description of reference system for lawful interception in computer networks. Furthermore, the thesis describes analysis, design and implementation phase of a tool for fast recognition of <b>application</b> <b>protocols.</b> The conclusion of this thesis describes the results of tests performed by the tool and shows its limitations and possible extensions...|$|R
50|$|WMLC is {{apparently}} synonymous with Wireless <b>Application</b> <b>Protocol</b> Binary XML (WBXML).|$|R
5000|$|IEC 61334-4-42:1996 Data {{communication}} <b>protocols</b> - <b>Application</b> <b>protocols</b> - <b>Application</b> layer ...|$|R
5000|$|IEEE 1278.1-1995 - Standard for Distributed Interactive Simulation - <b>Application</b> <b>protocols</b> ...|$|R
40|$|This paper {{describes}} the Ad Hoc Access <b>Application</b> <b>Protocol</b> (AHAAP) used for authentication, authorization and accounting services in ad hoc networks. This protocol assumes that device layer ad hoc networking capability {{is available in}} mobile devices. Being an <b>application</b> level <b>protocol,</b> {{it is designed to}} work {{in the same way as}} AAA protocols such as diameter base <b>protocol</b> and associated <b>application</b> <b>protocols.</b> The work presented in this paper is an extension of a previous work done by the author...|$|R
5000|$|Application-Layer Matrix: traffic {{statistics}} by <b>application</b> <b>protocol,</b> per source/destination pairs of hosts ...|$|R
5000|$|IEEE 1278.1-1995 - Standard for Distributed Interactive Simulation - <b>Application</b> <b>protocols</b> (Corrections) ...|$|R
5000|$|Some of {{the most}} common <b>application</b> <b>protocol</b> {{patterns}} are implemented like follows: ...|$|R
40|$|The goal of {{this work}} is to analyze {{possible}} ways of network <b>protocol</b> into <b>application</b> <b>protocol</b> encapsulation - as used for example to create network tunnel or bypass rewall rules. Methods to detect such encapsulation on network rewalls aimed to prevent such <b>application</b> <b>protocol</b> tunnels are proposed. The work includes reference implementation of one proposed method...|$|R
40|$|Abstract—Delay-tolerant Networking (DTN) enables com-munication in sparse mobile ad-hoc {{networks}} and other challenged environments where traditional networking fails and new routing and <b>application</b> <b>protocols</b> are required. Past experience with DTN routing and <b>application</b> <b>protocols</b> {{has shown that}} their performance is highly dependent on the underlying mobility and node characteristics. Evaluating DTN protocols across many scenarios requires suitable simulation tools. This paper presents the Opportunistic Networking Environment (ONE) simulator specifically de-signed for evaluating DTN routing and <b>application</b> <b>protocols.</b> It allows users to create scenarios based upon different synthetic movement models and real-world traces and offers a framework for implementing routing and <b>application</b> <b>protocols</b> (already including six well-known routing pro-tocols). Interactive visualization and post-processing tools support evaluating experiments and an emulation mode allows the ONE simulator {{to become part of}} a real-world DTN testbed. We examine a range of published simulation studies which demonstrate the simulator’s flexible support for DTN protocol evaluation...|$|R
40|$|The <b>Application</b> <b>Protocol</b> Information Base (APIB) is {{an on-line}} {{repository}} of documents for the Standard for the Exchange of Product model data (STEP, officially ISO 10303 [...] Product Data Representation and Exchange 9. Document {{types in the}} APIB include STEP <b>Application</b> <b>Protocols</b> and Integrated Resources. <b>Application</b> <b>Protocols</b> are standards that are intended to be implemented in software systems, and Integrated Resources are used by them as building blocks. <b>Application</b> <b>Protocols</b> and Integrated Resources are represented in the Standard Generalized Markup Language (SGML) in the APIB {{in order to facilitate}} efficient information search and retrieval. This paper describes a World Wide Web gateway to the APIB, implemented using the Common Gateway Interface (CGI) standard. The APIB gateway allows STEP developers to efficiently search for ISO 10303 standards and supporting information. The only client software required to use the APIB gateway is a third party web browser...|$|R
5000|$|IEC 61334-4-41:1996 Data {{communication}} <b>protocols</b> - <b>Application</b> <b>protocols</b> - Distribution line {{message specification}} ...|$|R
50|$|Simple Authentication and Security Layer (SASL) is a {{framework}} for authentication and data security in Internet protocols. It decouples authentication mechanisms from <b>application</b> <b>protocols,</b> in theory allowing any authentication mechanism supported by SASL {{to be used in}} any <b>application</b> <b>protocol</b> that uses SASL. Authentication mechanisms can also support proxy authorization, a facility allowing one user to assume the identity of another. They can also provide a data security layer offering data integrity and data confidentiality services. DIGEST-MD5 provides an example of mechanisms which can provide a data-security layer. <b>Application</b> <b>protocols</b> that support SASL typically also support Transport Layer Security (TLS) to complement the services offered by SASL.|$|R
5000|$|... "Deep <b>Application</b> <b>Protocol</b> Inspection at Wire Speed," [...] ISS World Conference Proceedings, October 2009.|$|R
5000|$|IEEE 1278.1A-1998 - Standard for Distributed Interactive Simulation - <b>Application</b> <b>protocols</b> Errata (May 1998) ...|$|R
5000|$|STANAG 3011: Joint Range Extension <b>Applications</b> <b>Protocol</b> (JREAP), a Tactical Data Link (TDL) {{protocol}} ...|$|R
