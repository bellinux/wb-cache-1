680|803|Public
5|$|In 2008, an {{unofficial}} patch was released to keep C working on both 32 and <b>64</b> <b>bit</b> versions of Windows XP and higher. The patch fixes several bugs in the game, and adds upgrades like higher resolution {{and support for}} language packs.|$|E
25|$|The {{original}} Unix time datatype (time_t) stores a {{date and}} time as a signed long integer (on 32 bit systems a 32-bit integer) representing the number of seconds since 1 January 1970. During and after 2038, this number will exceed 2−1, the largest number representable by a signed long integer on 32 bit systems, causing the Year 2038 problem (also known as the Unix Millennium bug or Y2K38). As a long integer in <b>64</b> <b>bit</b> systems uses 64 bits, the problem does not realistically exist on <b>64</b> <b>bit</b> systems that use the LP64 model.|$|E
25|$|Other {{unofficial}} community expansions exist, {{like the}} FPGA driven Vampire which adds 128MB Fastmem RAM, HDMI output, SD card for HDD storage and a <b>64</b> <b>bit</b> core with full 32 bit compatibility.|$|E
5000|$|Memory bus ({{interface}}) width: Each DDR, DDR2, or DDR3 memory interface is <b>64</b> <b>bits</b> wide. Those <b>64</b> <b>bits</b> {{are sometimes}} referred to as a [...] "line." ...|$|R
50|$|For example, Mode 3200, has 20 ms {{of audio}} {{converted}} to <b>64</b> <b>Bits.</b> So <b>64</b> <b>Bits</b> will be output every 20 ms (50 times a second), {{for a minimum}} data rate of 3200 bit/s. These <b>64</b> <b>bits</b> are sent as 8 bytes to the application, which has to unwrap the bit-fields, or send the bytes over a data channel.|$|R
5000|$|DES-X augments DES by XORing {{an extra}} <b>64</b> <b>bits</b> of key (K1) to the {{plaintext}} before applying DES, and then XORing another <b>64</b> <b>bits</b> of key (K2) after the encryption: ...|$|R
25|$|For example, {{the global}} IPv4 address 192.0.2.4 has the {{corresponding}} 6to4 prefix 2002:c000:0204::/48. This gives a prefix length of 48 bits, which leaves {{room for a}} 16-bit subnet field and <b>64</b> <b>bit</b> host addresses within the subnets.|$|E
25|$|RDRAM was a {{proprietary}} technology that competed against DDR. Its relatively high price and disappointing performance (resulting from high latencies and a narrow 16-bit data channel versus DDR's <b>64</b> <b>bit</b> channel) {{caused it to}} lose the race to succeed SDR DRAM.|$|E
25|$|While {{the current}} {{benchmarks}} comparing Core Duo to Core 2 Duo processors show very little difference when running in 32 bit, the <b>64</b> <b>bit</b> edge {{has become more}} of an issue {{with the release of}} Mac OS X v10.6 (Snow Leopard), and now users can dual boot Windows 7 in full 64-bit mode.|$|E
5000|$|LLP64 data model: [...] "int" [...] and [...] "long" [...] {{types are}} 32 bits wide, long long is <b>64</b> <b>bits,</b> while {{pointers}} and types derived from pointers are <b>64</b> <b>bits</b> wide.|$|R
40|$|This paper {{presents}} an improved version of KAMFEE cipher [1]. The proposed cipher (KAMFEE-X 64) {{is designed to}} be compatible with the new <b>64</b> <b>bits</b> microprocessors unlike the old cipher (KAMFEE) which is designed for systems based on x 86 microprocessors. KAMFEE-X 64 has a key dependent block length and key dependent rounds, enhanced by a rotor. The number of rotor’s wheels depends on key length too, rotor is implemented using successive <b>64</b> <b>bits</b> affine transformations. Its block is divided into basic blocks of <b>64</b> <b>bits</b> length. 264 modulo addition and <b>64</b> <b>bits</b> XORING are used. It uses <b>64</b> <b>bits</b> sboxes implemented using <b>64</b> <b>bits</b> affine transformation. Two steps of permutation are used, first step is basic block permutation and second step is basic block mixing. The strength of this system is compared with the KAMFEE and the well-known RC 6, and RIJNDAEL ciphers. KAMFEE-X 64 cipher gives excellent results from security characteristics and statistical point of view of. So authors suggests to use KAMFEE-X 64 in the area of banking and electronic fund transfer...|$|R
50|$|All {{tests were}} {{performed}} on an Intel Xeon E5-2430 (2.20 GHz with 12 Cores, <b>64</b> <b>bits)</b> equipped with 48 GB of DRAM, running Ubuntu 14.04 LTS <b>64</b> <b>bits,</b> and the source code was compiled using gcc 4.9.2.|$|R
25|$|Version 1.5 of OneCare is only {{compatible}} with the 32 bit versions of Windows XP and Windows Vista. Version 2 of OneCare supports <b>64</b> <b>bit</b> compatibility to Vista. In version 2.5, Microsoft released Windows Live OneCare for Server which supports Windows Server 2008 Standard 64-bit and Windows Small Business Server 2008 Standard and Premium editions. No edition of OneCare operates in safe mode. Windows Live OneCare will not support Windows 7 as its development has been discontinued and replaced by Microsoft Security Essentials.|$|E
25|$|Employing a Qualcomm 8992 Snapdragon 808 Hexa-Core, <b>64</b> <b>bit,</b> Adreno 418, 600MHz GPU with 3GB RAM processor, {{this unit}} is {{equipped}} with a curved 5.4-inch (2560 x 1440) OLED display and a sliding QWERTY keyboard which is hidden when not in use; Google's voice recognition that allows for dictating e-mails is also available. The Priv retained the best BlackBerry 10 features. Its 3,410mAh battery is said to provide 22.5 hours of mixed use. The 18-megapixel camera, with a Schneider-Kreuznach lens, can also record 4K video; a secondary selfie camera is also provided. Several important apps unique to the Priv were available from Google Play by mid December.|$|E
500|$|It is {{not known}} {{precisely}} how the exact value for the magic number was determined. [...] Chris Lomont developed a function to minimize approximation error by choosing the magic number R over a range. He first computed the optimal constant for the linear approximation step as 0x5F37642F, close to 0x5F3759DF, but this new constant gave slightly less accuracy after one iteration of Newton's method. Lomont then searched for a constant optimal even after one and two Newton iterations and found 0x5F375A86, which is more accurate than the original at every iteration stage. He concluded by asking whether the exact value of the original constant was chosen through derivation or trial and error. [...] Lomont {{pointed out that the}} magic number for <b>64</b> <b>bit</b> IEEE754 size type double is 0x5FE6EC85E7DE30DA, but it was later shown by Matthew Robertson to be exactly 0x5FE6EB50C7B537A9.|$|E
2500|$|A PCI-X bus at [...] ( [...] cycles {{per second}}), <b>64</b> <b>bits</b> per transfer, has a {{bandwidth}} of [...] transfers per second × <b>64</b> <b>bits</b> per transfer = [...] bit/s, or [...] B/s, usually quoted as [...] (about [...] ).|$|R
5000|$|Double-precision numbers occupy <b>64</b> <b>bits.</b> In double precision: ...|$|R
50|$|MULTI2 is a {{symmetric}} key algorithm with variable number of rounds. It has a block size of <b>64</b> <b>bits,</b> {{and a key}} size of <b>64</b> <b>bits.</b> A 256-bit implementation-dependent substitution box constant is used during key schedule. Scramble and descramble is done by repeating four basic functions (involutions).|$|R
2500|$|Other Supported: [...] PowerPC (32 and <b>64</b> <b>bit),</b> SPARC (32 and <b>64</b> <b>bit)</b> ...|$|E
2500|$|Hardware Supported Processors: Alpha, AMD64, IA-64, MIPS (32 and <b>64</b> <b>bit),</b> PA-RISC, PowerPC, SPARC ...|$|E
2500|$|... 32 vector {{registers}} of 16 x 8-bit, 8 x 16-bit, 4 x 32-bit, and 2 x <b>64</b> <b>bit</b> vector elements ...|$|E
50|$|Xilinx officially {{supports}} Microsoft Windows, Red Hat Enterprise 4, 5, & 6 Workstations (32 & <b>64</b> <b>bits)</b> and SUSE Linux Enterprise 11 (32 & <b>64</b> <b>bits).</b> Certain other GNU/Linux distributions can run Xilinx ISE WebPack {{with some}} modifications or configurations, including Gentoo Linux, Arch Linux, FreeBSD and Fedora.|$|R
5000|$|In many {{programming}} {{environments for}} C and C-derived languages on 64-bit machines, [...] variables are still 32 bits wide, but long integers and pointers are <b>64</b> <b>bits</b> wide. These {{are described as}} having an LP64 data model. Another alternative is the ILP64 data model in which all three data types are <b>64</b> <b>bits</b> wide, and even SILP64 where short integers are also <b>64</b> <b>bits</b> wide. However, {{in most cases the}} modifications required are relatively minor and straightforward, and many well-written programs can simply be recompiled for the new environment with no changes. Another alternative is the LLP64 model, which maintains compatibility with 32-bit code by leaving both [...] and [...] as 32-bit. LL refers to the long long integer type, which is at least <b>64</b> <b>bits</b> on all platforms, including 32-bit environments.|$|R
50|$|While {{register}} sizes {{have increased}} to <b>64</b> <b>bits</b> {{from the previous}} x86 architecture, memory addressing {{has not yet been}} increased to the full <b>64</b> <b>bits.</b> For the time being, it is impractical to equip computers with sufficient memory to require a full <b>64</b> <b>bits.</b> As long as that remains the case, load/store unit(s), cache tags, MMUs and TLBs can be simplified without any loss of usable memory. Despite this limitation, software is programmed using full 64-bit pointers, and will therefore be able to use progressively larger address spaces as they become supported by future processors and operating systems.|$|R
2500|$|Future {{versions}} of NTP may extend the time representation to 128 bits: 64 bits {{for the second}} and 64 bits for the fractional-second. The current NTPv4 format has support for Era Number and Era Offset, that when used properly should aid fixing date rollover issues. According to Mills, [...] "the <b>64</b> <b>bit</b> value for the fraction is enough to resolve {{the amount of time}} it takes a photon to pass an electron at the speed of light. The <b>64</b> <b>bit</b> second value is enough to provide unambiguous time representation until the universe goes dim." [...] seconds is about 54 zeptoseconds (light would travel 16.26 picometers, or approximately 0.31 × Bohr radius), and 264 seconds is about 585 billion years.|$|E
2500|$|MicroAPL Limited offers APLX, a full-featured <b>64</b> <b>bit</b> {{interpreter}} for Linux, Microsoft Windows, and macOS systems. The core {{language is}} closely modelled on IBM's APL2 with various enhancements. APLX includes close integration with [...]NET, Java, Ruby and R. Effective July 11, 2016, MicroAPL withdrew APLX from commercial sale. [...] began hosting the [...] including the download area and documentation.|$|E
2500|$|Logic Pro is {{a hybrid}} 32 / <b>64</b> <b>bit</b> digital audio {{workstation}} and MIDI sequencer software application for the Mac OS X platform. Originally created by German software developer Emagic, Logic Pro became an Apple product when Apple bought Emagic in 2002. Logic Pro provides software instruments, synthesizers, audio effects and recording facilities for music synthesis. It also supports Apple Loops [...] royalty-free professionally recorded instrument loops. Audio effects include distortions, dynamics processors, equalization filters, and delays. The Space Designer plugin simulates the acoustics of audio played in different environments, such as rooms of varying size, or producing the echoes {{that might be}} heard on high mountains. Logic Pro can work with MIDI keyboards and control surfaces for input and processing, and for MIDI output. It features real-time scoring in musical notation, supporting guitar tablature, chord abbreviations and drum notation.|$|E
50|$|Each triple {{encryption}} encrypts {{one block}} of <b>64</b> <b>bits</b> of data.|$|R
50|$|If the {{preamble}} is 01, the <b>64</b> <b>bits</b> are entirely data.|$|R
50|$|DXT4 and DXT5 (collectively {{also known}} as Block Compression 3 or BC3) {{converts}} 16 input pixels into 128 bits of output, consisting of <b>64</b> <b>bits</b> of alpha channel data (two 8 bit alpha values and a 4x4 3 bit lookup table) followed by <b>64</b> <b>bits</b> of color data (encoded {{the same way as}} DXT1).|$|R
2500|$|Most IPv6 {{networks}} use autoconfiguration, {{which requires}} the last 64 bits [...] for the host. [...] The first 64 bits are the IPv6 prefix. [...] The first 16 {{bits of the}} prefix are always 2002:, the next 32 bits are the IPv4 address, and the last 16 bits of the prefix are available for addressing multiple IPv6 subnets behind the same 6to4 router. [...] Since the IPv6 hosts using autoconfiguration already have determined the unique <b>64</b> <b>bit</b> host portion of their address, they must simply wait for a Router Advertisement indicating the first 64 bits of prefix to have a complete IPv6 address. [...] A 6to4 router will know to send an encapsulated packet directly over IPv4 if the first 16 bits are 2002, using the next 32 as the destination, or otherwise send the packet to a well-known relay server, which has access to native IPv6.|$|E
50|$|Earlier {{versions}} of Mudbox operate on Windows XP (32 and <b>64</b> <b>bit),</b> Windows Vista (32 and <b>64</b> <b>bit),</b> Windows 7 Professional (32 and <b>64</b> <b>bit),</b> Linux 64-bit and Mac OS X. The current version (Mudbox 2014) is <b>64</b> <b>bit</b> only, and has dropped support for Windows XP.|$|E
50|$|Microsoft Windows 8 (32 bit and <b>64</b> <b>bit</b> editions), Microsoft Windows 7 (32 bit and <b>64</b> <b>bit</b> editions), Microsoft Windows Vista (32 bit and <b>64</b> <b>bit</b> editions), Microsoft Windows Server 2012, Microsoft Windows Server 2008 R2, Microsoft Windows Server 2003, Microsoft Windows XP (32 bit and <b>64</b> <b>bit</b> editions) with Service Pack 2.|$|E
5000|$|... {{the initial}} hash values and round {{constants}} are extended to <b>64</b> <b>bits,</b> ...|$|R
50|$|A Cryptographically Generated Address is an IPv6 address whose {{interface}} identifier {{has been}} generated {{according to the}} CGA generation method. The interface identifier is formed by the least-significant <b>64</b> <b>bits</b> of an IPv6 address and is used to identify the host's network interface on its subnet. The subnet {{is determined by the}} most-significant <b>64</b> <b>bits,</b> the subnet prefix.|$|R
50|$|The {{algorithm}} {{operates on}} blocks of <b>64</b> <b>bits</b> using a 10-round Feistel networkstructure. The key size is 40 bits by default, {{but can be}} up to <b>64</b> <b>bits.</b> The key schedule is very simple, producing two 32-bit subkeys: the high 32 bits of the key, and the sum mod 232 of this and the low 32 bits.|$|R
